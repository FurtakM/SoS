// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61537 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61537 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61537 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61537 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54252 0 9
// MC_Start ;
1394: CALL 64674 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87530 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87474 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87362 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 87044 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86775 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86394 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 86209 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 86101 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 86951 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87530 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87474 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87362 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 87044 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86775 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86394 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85891 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 86101 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 86209 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 87530 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 87474 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 87362 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 87044 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 86775 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 86394 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 86209 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 87530 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 87474 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 87362 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 87044 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 86775 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 86394 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 87100 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 86209 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 54252 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 29870 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 36
5258: PUSH
5259: LD_EXP 36
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 29870 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 36
5371: PUSH
5372: LD_EXP 36
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 29870 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 54252 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 26583 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 26583 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 29870 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 36
7170: PUSH
7171: LD_EXP 36
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 54252 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 29870 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 36
8357: PUSH
8358: LD_EXP 36
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 26461 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61130 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 26461 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 61130 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 26461 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 61130 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 26461 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 61130 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 36
10409: PUSH
10410: LD_EXP 36
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 36
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 86149 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 86149 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 61130 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 61130 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 36
11301: PUSH
11302: LD_EXP 36
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 36
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 26583 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 36
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 86257 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 36
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 36
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 66640 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 26461 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 26461 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 26461 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 26461 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 86257 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 86257 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 87675 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 87675 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 55
16777: PUSH
16778: LD_EXP 55
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 55
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 36
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 86257 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 86257 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 86257 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 87675 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 87675 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 55
17703: PUSH
17704: LD_EXP 55
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 55
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 86257 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 87675 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 87675 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 55
18451: PUSH
18452: LD_EXP 55
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 55
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18653: LD_EXP 2
18657: PUSH
18658: LD_INT 1
18660: EQUAL
18661: IFFALSE 18896
// begin if un = playerCommander then
18663: LD_VAR 0 1
18667: PUSH
18668: LD_EXP 9
18672: EQUAL
18673: IFFALSE 18682
// YouLost ( commanderDied ) ;
18675: LD_STRING commanderDied
18677: PPUSH
18678: CALL_OW 104
// if un = allyCommander then
18682: LD_VAR 0 1
18686: PUSH
18687: LD_EXP 11
18691: EQUAL
18692: IFFALSE 18701
// YouLost ( Theta ) ;
18694: LD_STRING Theta
18696: PPUSH
18697: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18701: LD_VAR 0 1
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 8
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 21
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: IN
18753: IFFALSE 18769
// legDestCounter := legDestCounter + 1 ;
18755: LD_ADDR_EXP 18
18759: PUSH
18760: LD_EXP 18
18764: PUSH
18765: LD_INT 1
18767: PLUS
18768: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18769: LD_VAR 0 1
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 4
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 21
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 21
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 69
18820: IN
18821: IFFALSE 18837
// allyDestCounter := allyDestCounter + 1 ;
18823: LD_ADDR_EXP 22
18827: PUSH
18828: LD_EXP 22
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: ST_TO_ADDR
// if un in ruOutpost then
18837: LD_VAR 0 1
18841: PUSH
18842: LD_EXP 14
18846: IN
18847: IFFALSE 18896
// begin ruOutpost := ruOutpost diff un ;
18849: LD_ADDR_EXP 14
18853: PUSH
18854: LD_EXP 14
18858: PUSH
18859: LD_VAR 0 1
18863: DIFF
18864: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18865: LD_ADDR_EXP 15
18869: PUSH
18870: LD_EXP 15
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_EXP 15
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 1
18895: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL 89649 0 1
// end ;
18905: PPOPN 1
18907: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18908: LD_VAR 0 1
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL 91983 0 2
// end ;
18922: PPOPN 2
18924: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL 91051 0 1
// end ;
18934: PPOPN 1
18936: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: CALL 91292 0 1
// end ;
18946: PPOPN 1
18948: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18949: LD_VAR 0 1
18953: PUSH
18954: LD_INT 14
18956: EQUAL
18957: PUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 255
18967: PUSH
18968: LD_INT 1
18970: EQUAL
18971: AND
18972: IFFALSE 19013
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18974: LD_EXP 9
18978: PPUSH
18979: LD_STRING D
18981: PUSH
18982: LD_STRING I
18984: PUSH
18985: LD_STRING J
18987: PUSH
18988: LD_STRING S
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: PUSH
18996: LD_EXP 25
19000: ARRAY
19001: STR
19002: PUSH
19003: LD_STRING -1-Laser
19005: STR
19006: PPUSH
19007: CALL_OW 88
// exit ;
19011: GO 19155
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 7
19020: EQUAL
19021: PUSH
19022: LD_VAR 0 2
19026: PPUSH
19027: CALL_OW 255
19031: PUSH
19032: LD_INT 1
19034: EQUAL
19035: AND
19036: IFFALSE 19077
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19038: LD_EXP 9
19042: PPUSH
19043: LD_STRING D
19045: PUSH
19046: LD_STRING I
19048: PUSH
19049: LD_STRING J
19051: PUSH
19052: LD_STRING S
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: PUSH
19060: LD_EXP 25
19064: ARRAY
19065: STR
19066: PUSH
19067: LD_STRING -1-Materialization
19069: STR
19070: PPUSH
19071: CALL_OW 88
// exit ;
19075: GO 19155
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19077: LD_VAR 0 1
19081: PUSH
19082: LD_INT 25
19084: EQUAL
19085: PUSH
19086: LD_VAR 0 2
19090: PPUSH
19091: CALL_OW 255
19095: PUSH
19096: LD_INT 1
19098: EQUAL
19099: AND
19100: IFFALSE 19141
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19102: LD_EXP 9
19106: PPUSH
19107: LD_STRING D
19109: PUSH
19110: LD_STRING I
19112: PUSH
19113: LD_STRING J
19115: PUSH
19116: LD_STRING S
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: LD_EXP 25
19128: ARRAY
19129: STR
19130: PUSH
19131: LD_STRING -1-Rocket
19133: STR
19134: PPUSH
19135: CALL_OW 88
// exit ;
19139: GO 19155
// end ; MCE_ResearchComplete ( tech , lab ) ;
19141: LD_VAR 0 1
19145: PPUSH
19146: LD_VAR 0 2
19150: PPUSH
19151: CALL 89345 0 2
// end ;
19155: PPOPN 2
19157: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: LD_VAR 0 2
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: LD_VAR 0 4
19177: PPUSH
19178: LD_VAR 0 5
19182: PPUSH
19183: CALL 88965 0 5
// end ;
19187: PPOPN 5
19189: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19190: LD_VAR 0 1
19194: PPUSH
19195: LD_VAR 0 2
19199: PPUSH
19200: CALL 88561 0 2
// end ;
19204: PPOPN 2
19206: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_VAR 0 2
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_VAR 0 4
19226: PPUSH
19227: CALL 88399 0 4
// end ;
19231: PPOPN 4
19233: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_VAR 0 2
19243: PPUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL 88174 0 3
// end ;
19253: PPOPN 3
19255: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_VAR 0 2
19265: PPUSH
19266: CALL 88059 0 2
// end ;
19270: PPOPN 2
19272: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19273: LD_VAR 0 1
19277: PPUSH
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL 92244 0 2
// end ;
19287: PPOPN 2
19289: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_VAR 0 2
19299: PPUSH
19300: LD_VAR 0 3
19304: PPUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: CALL 92460 0 4
// end ;
19314: PPOPN 4
19316: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19317: LD_VAR 0 1
19321: PPUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: CALL 87868 0 2
// end ;
19331: PPOPN 2
19333: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL 103441 0 1
// end ; end_of_file
19343: PPOPN 1
19345: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19346: LD_INT 0
19348: PPUSH
19349: PPUSH
// if exist_mode then
19350: LD_VAR 0 2
19354: IFFALSE 19379
// unit := CreateCharacter ( prefix & ident ) else
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: LD_VAR 0 3
19365: PUSH
19366: LD_VAR 0 1
19370: STR
19371: PPUSH
19372: CALL_OW 34
19376: ST_TO_ADDR
19377: GO 19394
// unit := NewCharacter ( ident ) ;
19379: LD_ADDR_VAR 0 5
19383: PUSH
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 25
19393: ST_TO_ADDR
// result := unit ;
19394: LD_ADDR_VAR 0 4
19398: PUSH
19399: LD_VAR 0 5
19403: ST_TO_ADDR
// end ;
19404: LD_VAR 0 4
19408: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
// if not side or not nation then
19413: LD_VAR 0 1
19417: NOT
19418: PUSH
19419: LD_VAR 0 2
19423: NOT
19424: OR
19425: IFFALSE 19429
// exit ;
19427: GO 20073
// case nation of nation_american :
19429: LD_VAR 0 2
19433: PUSH
19434: LD_INT 1
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19616
19442: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: LD_INT 35
19450: PUSH
19451: LD_INT 45
19453: PUSH
19454: LD_INT 46
19456: PUSH
19457: LD_INT 47
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 6
19468: PUSH
19469: LD_INT 15
19471: PUSH
19472: LD_INT 16
19474: PUSH
19475: LD_INT 7
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: LD_INT 13
19483: PUSH
19484: LD_INT 10
19486: PUSH
19487: LD_INT 14
19489: PUSH
19490: LD_INT 20
19492: PUSH
19493: LD_INT 21
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 32
19504: PUSH
19505: LD_INT 27
19507: PUSH
19508: LD_INT 36
19510: PUSH
19511: LD_INT 69
19513: PUSH
19514: LD_INT 39
19516: PUSH
19517: LD_INT 34
19519: PUSH
19520: LD_INT 40
19522: PUSH
19523: LD_INT 48
19525: PUSH
19526: LD_INT 49
19528: PUSH
19529: LD_INT 50
19531: PUSH
19532: LD_INT 51
19534: PUSH
19535: LD_INT 52
19537: PUSH
19538: LD_INT 53
19540: PUSH
19541: LD_INT 54
19543: PUSH
19544: LD_INT 55
19546: PUSH
19547: LD_INT 56
19549: PUSH
19550: LD_INT 57
19552: PUSH
19553: LD_INT 58
19555: PUSH
19556: LD_INT 59
19558: PUSH
19559: LD_INT 60
19561: PUSH
19562: LD_INT 61
19564: PUSH
19565: LD_INT 62
19567: PUSH
19568: LD_INT 80
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: ST_TO_ADDR
19614: GO 19997
19616: LD_INT 2
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19806
19624: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19625: LD_ADDR_VAR 0 4
19629: PUSH
19630: LD_INT 35
19632: PUSH
19633: LD_INT 45
19635: PUSH
19636: LD_INT 46
19638: PUSH
19639: LD_INT 47
19641: PUSH
19642: LD_INT 70
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: LD_INT 11
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: LD_INT 4
19656: PUSH
19657: LD_INT 5
19659: PUSH
19660: LD_INT 6
19662: PUSH
19663: LD_INT 15
19665: PUSH
19666: LD_INT 18
19668: PUSH
19669: LD_INT 7
19671: PUSH
19672: LD_INT 17
19674: PUSH
19675: LD_INT 8
19677: PUSH
19678: LD_INT 20
19680: PUSH
19681: LD_INT 21
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 72
19689: PUSH
19690: LD_INT 26
19692: PUSH
19693: LD_INT 69
19695: PUSH
19696: LD_INT 39
19698: PUSH
19699: LD_INT 40
19701: PUSH
19702: LD_INT 41
19704: PUSH
19705: LD_INT 42
19707: PUSH
19708: LD_INT 43
19710: PUSH
19711: LD_INT 48
19713: PUSH
19714: LD_INT 49
19716: PUSH
19717: LD_INT 50
19719: PUSH
19720: LD_INT 51
19722: PUSH
19723: LD_INT 52
19725: PUSH
19726: LD_INT 53
19728: PUSH
19729: LD_INT 54
19731: PUSH
19732: LD_INT 55
19734: PUSH
19735: LD_INT 56
19737: PUSH
19738: LD_INT 60
19740: PUSH
19741: LD_INT 61
19743: PUSH
19744: LD_INT 62
19746: PUSH
19747: LD_INT 66
19749: PUSH
19750: LD_INT 67
19752: PUSH
19753: LD_INT 68
19755: PUSH
19756: LD_INT 81
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: ST_TO_ADDR
19804: GO 19997
19806: LD_INT 3
19808: DOUBLE
19809: EQUAL
19810: IFTRUE 19814
19812: GO 19996
19814: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: LD_INT 46
19822: PUSH
19823: LD_INT 47
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 11
19834: PUSH
19835: LD_INT 9
19837: PUSH
19838: LD_INT 20
19840: PUSH
19841: LD_INT 19
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 24
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 28
19858: PUSH
19859: LD_INT 29
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 31
19867: PUSH
19868: LD_INT 37
19870: PUSH
19871: LD_INT 38
19873: PUSH
19874: LD_INT 32
19876: PUSH
19877: LD_INT 27
19879: PUSH
19880: LD_INT 33
19882: PUSH
19883: LD_INT 69
19885: PUSH
19886: LD_INT 39
19888: PUSH
19889: LD_INT 34
19891: PUSH
19892: LD_INT 40
19894: PUSH
19895: LD_INT 71
19897: PUSH
19898: LD_INT 23
19900: PUSH
19901: LD_INT 44
19903: PUSH
19904: LD_INT 48
19906: PUSH
19907: LD_INT 49
19909: PUSH
19910: LD_INT 50
19912: PUSH
19913: LD_INT 51
19915: PUSH
19916: LD_INT 52
19918: PUSH
19919: LD_INT 53
19921: PUSH
19922: LD_INT 54
19924: PUSH
19925: LD_INT 55
19927: PUSH
19928: LD_INT 56
19930: PUSH
19931: LD_INT 57
19933: PUSH
19934: LD_INT 58
19936: PUSH
19937: LD_INT 59
19939: PUSH
19940: LD_INT 63
19942: PUSH
19943: LD_INT 64
19945: PUSH
19946: LD_INT 65
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: ST_TO_ADDR
19994: GO 19997
19996: POP
// if state > - 1 and state < 3 then
19997: LD_VAR 0 3
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: GREATER
20006: PUSH
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 3
20014: LESS
20015: AND
20016: IFFALSE 20073
// for i in result do
20018: LD_ADDR_VAR 0 5
20022: PUSH
20023: LD_VAR 0 4
20027: PUSH
20028: FOR_IN
20029: IFFALSE 20071
// if GetTech ( i , side ) <> state then
20031: LD_VAR 0 5
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 321
20045: PUSH
20046: LD_VAR 0 3
20050: NONEQUAL
20051: IFFALSE 20069
// result := result diff i ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_VAR 0 4
20062: PUSH
20063: LD_VAR 0 5
20067: DIFF
20068: ST_TO_ADDR
20069: GO 20028
20071: POP
20072: POP
// end ;
20073: LD_VAR 0 4
20077: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20078: LD_INT 0
20080: PPUSH
20081: PPUSH
20082: PPUSH
// result := true ;
20083: LD_ADDR_VAR 0 3
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20091: LD_ADDR_VAR 0 5
20095: PUSH
20096: LD_VAR 0 2
20100: PPUSH
20101: CALL_OW 480
20105: ST_TO_ADDR
// if not tmp then
20106: LD_VAR 0 5
20110: NOT
20111: IFFALSE 20115
// exit ;
20113: GO 20164
// for i in tmp do
20115: LD_ADDR_VAR 0 4
20119: PUSH
20120: LD_VAR 0 5
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20162
// if GetTech ( i , side ) <> state_researched then
20128: LD_VAR 0 4
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 321
20142: PUSH
20143: LD_INT 2
20145: NONEQUAL
20146: IFFALSE 20160
// begin result := false ;
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// exit ;
20156: POP
20157: POP
20158: GO 20164
// end ;
20160: GO 20125
20162: POP
20163: POP
// end ;
20164: LD_VAR 0 3
20168: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
20179: PPUSH
20180: PPUSH
20181: PPUSH
20182: PPUSH
20183: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20184: LD_VAR 0 1
20188: NOT
20189: PUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 257
20199: PUSH
20200: LD_INT 9
20202: NONEQUAL
20203: OR
20204: IFFALSE 20208
// exit ;
20206: GO 20781
// side := GetSide ( unit ) ;
20208: LD_ADDR_VAR 0 9
20212: PUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 255
20222: ST_TO_ADDR
// tech_space := tech_spacanom ;
20223: LD_ADDR_VAR 0 12
20227: PUSH
20228: LD_INT 29
20230: ST_TO_ADDR
// tech_time := tech_taurad ;
20231: LD_ADDR_VAR 0 13
20235: PUSH
20236: LD_INT 28
20238: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20239: LD_ADDR_VAR 0 11
20243: PUSH
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 310
20253: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20254: LD_VAR 0 11
20258: PPUSH
20259: CALL_OW 247
20263: PUSH
20264: LD_INT 2
20266: EQUAL
20267: IFFALSE 20271
// exit ;
20269: GO 20781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20271: LD_ADDR_VAR 0 8
20275: PUSH
20276: LD_INT 81
20278: PUSH
20279: LD_VAR 0 9
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 3
20290: PUSH
20291: LD_INT 21
20293: PUSH
20294: LD_INT 3
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PPUSH
20309: CALL_OW 69
20313: ST_TO_ADDR
// if not tmp then
20314: LD_VAR 0 8
20318: NOT
20319: IFFALSE 20323
// exit ;
20321: GO 20781
// if in_unit then
20323: LD_VAR 0 11
20327: IFFALSE 20351
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20329: LD_ADDR_VAR 0 10
20333: PUSH
20334: LD_VAR 0 8
20338: PPUSH
20339: LD_VAR 0 11
20343: PPUSH
20344: CALL_OW 74
20348: ST_TO_ADDR
20349: GO 20371
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20351: LD_ADDR_VAR 0 10
20355: PUSH
20356: LD_VAR 0 8
20360: PPUSH
20361: LD_VAR 0 1
20365: PPUSH
20366: CALL_OW 74
20370: ST_TO_ADDR
// if not enemy then
20371: LD_VAR 0 10
20375: NOT
20376: IFFALSE 20380
// exit ;
20378: GO 20781
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20380: LD_VAR 0 11
20384: PUSH
20385: LD_VAR 0 11
20389: PPUSH
20390: LD_VAR 0 10
20394: PPUSH
20395: CALL_OW 296
20399: PUSH
20400: LD_INT 13
20402: GREATER
20403: AND
20404: PUSH
20405: LD_VAR 0 1
20409: PPUSH
20410: LD_VAR 0 10
20414: PPUSH
20415: CALL_OW 296
20419: PUSH
20420: LD_INT 12
20422: GREATER
20423: OR
20424: IFFALSE 20428
// exit ;
20426: GO 20781
// missile := [ 1 ] ;
20428: LD_ADDR_VAR 0 14
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20439: LD_VAR 0 9
20443: PPUSH
20444: LD_VAR 0 12
20448: PPUSH
20449: CALL_OW 325
20453: IFFALSE 20482
// missile := Insert ( missile , missile + 1 , 2 ) ;
20455: LD_ADDR_VAR 0 14
20459: PUSH
20460: LD_VAR 0 14
20464: PPUSH
20465: LD_VAR 0 14
20469: PUSH
20470: LD_INT 1
20472: PLUS
20473: PPUSH
20474: LD_INT 2
20476: PPUSH
20477: CALL_OW 2
20481: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20482: LD_VAR 0 9
20486: PPUSH
20487: LD_VAR 0 13
20491: PPUSH
20492: CALL_OW 325
20496: PUSH
20497: LD_VAR 0 10
20501: PPUSH
20502: CALL_OW 255
20506: PPUSH
20507: LD_VAR 0 13
20511: PPUSH
20512: CALL_OW 325
20516: NOT
20517: AND
20518: IFFALSE 20547
// missile := Insert ( missile , missile + 1 , 3 ) ;
20520: LD_ADDR_VAR 0 14
20524: PUSH
20525: LD_VAR 0 14
20529: PPUSH
20530: LD_VAR 0 14
20534: PUSH
20535: LD_INT 1
20537: PLUS
20538: PPUSH
20539: LD_INT 3
20541: PPUSH
20542: CALL_OW 2
20546: ST_TO_ADDR
// if missile < 2 then
20547: LD_VAR 0 14
20551: PUSH
20552: LD_INT 2
20554: LESS
20555: IFFALSE 20559
// exit ;
20557: GO 20781
// x := GetX ( enemy ) ;
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: LD_VAR 0 10
20568: PPUSH
20569: CALL_OW 250
20573: ST_TO_ADDR
// y := GetY ( enemy ) ;
20574: LD_ADDR_VAR 0 5
20578: PUSH
20579: LD_VAR 0 10
20583: PPUSH
20584: CALL_OW 251
20588: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20589: LD_ADDR_VAR 0 6
20593: PUSH
20594: LD_VAR 0 4
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: CALL_OW 12
20610: PLUS
20611: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20612: LD_ADDR_VAR 0 7
20616: PUSH
20617: LD_VAR 0 5
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PPUSH
20626: LD_INT 1
20628: PPUSH
20629: CALL_OW 12
20633: PLUS
20634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20635: LD_VAR 0 6
20639: PPUSH
20640: LD_VAR 0 7
20644: PPUSH
20645: CALL_OW 488
20649: NOT
20650: IFFALSE 20672
// begin _x := x ;
20652: LD_ADDR_VAR 0 6
20656: PUSH
20657: LD_VAR 0 4
20661: ST_TO_ADDR
// _y := y ;
20662: LD_ADDR_VAR 0 7
20666: PUSH
20667: LD_VAR 0 5
20671: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 1
20679: PPUSH
20680: LD_VAR 0 14
20684: PPUSH
20685: CALL_OW 12
20689: ST_TO_ADDR
// case i of 1 :
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 1
20697: DOUBLE
20698: EQUAL
20699: IFTRUE 20703
20701: GO 20720
20703: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_VAR 0 10
20713: PPUSH
20714: CALL_OW 115
20718: GO 20781
20720: LD_INT 2
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20750
20728: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20729: LD_VAR 0 1
20733: PPUSH
20734: LD_VAR 0 6
20738: PPUSH
20739: LD_VAR 0 7
20743: PPUSH
20744: CALL_OW 153
20748: GO 20781
20750: LD_INT 3
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20780
20758: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 154
20778: GO 20781
20780: POP
// end ;
20781: LD_VAR 0 2
20785: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
20793: PPUSH
// if not unit or not building then
20794: LD_VAR 0 1
20798: NOT
20799: PUSH
20800: LD_VAR 0 2
20804: NOT
20805: OR
20806: IFFALSE 20810
// exit ;
20808: GO 20968
// x := GetX ( building ) ;
20810: LD_ADDR_VAR 0 5
20814: PUSH
20815: LD_VAR 0 2
20819: PPUSH
20820: CALL_OW 250
20824: ST_TO_ADDR
// y := GetY ( building ) ;
20825: LD_ADDR_VAR 0 6
20829: PUSH
20830: LD_VAR 0 2
20834: PPUSH
20835: CALL_OW 251
20839: ST_TO_ADDR
// for i = 0 to 5 do
20840: LD_ADDR_VAR 0 4
20844: PUSH
20845: DOUBLE
20846: LD_INT 0
20848: DEC
20849: ST_TO_ADDR
20850: LD_INT 5
20852: PUSH
20853: FOR_TO
20854: IFFALSE 20966
// begin _x := ShiftX ( x , i , 3 ) ;
20856: LD_ADDR_VAR 0 7
20860: PUSH
20861: LD_VAR 0 5
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: LD_INT 3
20873: PPUSH
20874: CALL_OW 272
20878: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20879: LD_ADDR_VAR 0 8
20883: PUSH
20884: LD_VAR 0 6
20888: PPUSH
20889: LD_VAR 0 4
20893: PPUSH
20894: LD_INT 3
20896: PPUSH
20897: CALL_OW 273
20901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20902: LD_VAR 0 7
20906: PPUSH
20907: LD_VAR 0 8
20911: PPUSH
20912: CALL_OW 488
20916: NOT
20917: IFFALSE 20921
// continue ;
20919: GO 20853
// if HexInfo ( _x , _y ) = 0 then
20921: LD_VAR 0 7
20925: PPUSH
20926: LD_VAR 0 8
20930: PPUSH
20931: CALL_OW 428
20935: PUSH
20936: LD_INT 0
20938: EQUAL
20939: IFFALSE 20964
// begin ComMoveXY ( unit , _x , _y ) ;
20941: LD_VAR 0 1
20945: PPUSH
20946: LD_VAR 0 7
20950: PPUSH
20951: LD_VAR 0 8
20955: PPUSH
20956: CALL_OW 111
// exit ;
20960: POP
20961: POP
20962: GO 20968
// end ; end ;
20964: GO 20853
20966: POP
20967: POP
// end ;
20968: LD_VAR 0 3
20972: RET
// export function ScanBase ( side , base_area ) ; begin
20973: LD_INT 0
20975: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20976: LD_ADDR_VAR 0 3
20980: PUSH
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_INT 81
20988: PUSH
20989: LD_VAR 0 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 70
21002: ST_TO_ADDR
// end ;
21003: LD_VAR 0 3
21007: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21008: LD_INT 0
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21015: LD_VAR 0 1
21019: NOT
21020: PUSH
21021: LD_EXP 36
21025: PUSH
21026: LD_VAR 0 1
21030: ARRAY
21031: NOT
21032: OR
21033: PUSH
21034: LD_VAR 0 2
21038: NOT
21039: OR
21040: PUSH
21041: LD_VAR 0 3
21045: NOT
21046: OR
21047: IFFALSE 21051
// exit ;
21049: GO 21564
// side := mc_sides [ base ] ;
21051: LD_ADDR_VAR 0 6
21055: PUSH
21056: LD_EXP 62
21060: PUSH
21061: LD_VAR 0 1
21065: ARRAY
21066: ST_TO_ADDR
// if not side then
21067: LD_VAR 0 6
21071: NOT
21072: IFFALSE 21076
// exit ;
21074: GO 21564
// for i in solds do
21076: LD_ADDR_VAR 0 7
21080: PUSH
21081: LD_VAR 0 2
21085: PUSH
21086: FOR_IN
21087: IFFALSE 21148
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21089: LD_VAR 0 7
21093: PPUSH
21094: CALL_OW 310
21098: PPUSH
21099: CALL_OW 266
21103: PUSH
21104: LD_INT 32
21106: PUSH
21107: LD_INT 31
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: IN
21114: IFFALSE 21134
// solds := solds diff i else
21116: LD_ADDR_VAR 0 2
21120: PUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_VAR 0 7
21130: DIFF
21131: ST_TO_ADDR
21132: GO 21146
// SetTag ( i , 18 ) ;
21134: LD_VAR 0 7
21138: PPUSH
21139: LD_INT 18
21141: PPUSH
21142: CALL_OW 109
21146: GO 21086
21148: POP
21149: POP
// if not solds then
21150: LD_VAR 0 2
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 21564
// repeat wait ( 0 0$1 ) ;
21159: LD_INT 35
21161: PPUSH
21162: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: LD_VAR 0 6
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: CALL 20973 0 2
21185: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21186: LD_EXP 36
21190: PUSH
21191: LD_VAR 0 1
21195: ARRAY
21196: NOT
21197: PUSH
21198: LD_EXP 36
21202: PUSH
21203: LD_VAR 0 1
21207: ARRAY
21208: PUSH
21209: EMPTY
21210: EQUAL
21211: OR
21212: IFFALSE 21249
// begin for i in solds do
21214: LD_ADDR_VAR 0 7
21218: PUSH
21219: LD_VAR 0 2
21223: PUSH
21224: FOR_IN
21225: IFFALSE 21238
// ComStop ( i ) ;
21227: LD_VAR 0 7
21231: PPUSH
21232: CALL_OW 141
21236: GO 21224
21238: POP
21239: POP
// solds := [ ] ;
21240: LD_ADDR_VAR 0 2
21244: PUSH
21245: EMPTY
21246: ST_TO_ADDR
// exit ;
21247: GO 21564
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21249: LD_VAR 0 5
21253: NOT
21254: PUSH
21255: LD_VAR 0 5
21259: PUSH
21260: LD_INT 3
21262: GREATER
21263: OR
21264: PUSH
21265: LD_EXP 58
21269: PUSH
21270: LD_VAR 0 1
21274: ARRAY
21275: OR
21276: IFFALSE 21317
// begin for i in solds do
21278: LD_ADDR_VAR 0 7
21282: PUSH
21283: LD_VAR 0 2
21287: PUSH
21288: FOR_IN
21289: IFFALSE 21313
// if HasTask ( i ) then
21291: LD_VAR 0 7
21295: PPUSH
21296: CALL_OW 314
21300: IFFALSE 21311
// ComStop ( i ) ;
21302: LD_VAR 0 7
21306: PPUSH
21307: CALL_OW 141
21311: GO 21288
21313: POP
21314: POP
// break ;
21315: GO 21552
// end ; for i in solds do
21317: LD_ADDR_VAR 0 7
21321: PUSH
21322: LD_VAR 0 2
21326: PUSH
21327: FOR_IN
21328: IFFALSE 21544
// begin if IsInUnit ( i ) then
21330: LD_VAR 0 7
21334: PPUSH
21335: CALL_OW 310
21339: IFFALSE 21350
// ComExitBuilding ( i ) ;
21341: LD_VAR 0 7
21345: PPUSH
21346: CALL_OW 122
// if GetLives ( i ) > 333 then
21350: LD_VAR 0 7
21354: PPUSH
21355: CALL_OW 256
21359: PUSH
21360: LD_INT 333
21362: GREATER
21363: IFFALSE 21391
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21365: LD_VAR 0 7
21369: PPUSH
21370: LD_VAR 0 5
21374: PPUSH
21375: LD_VAR 0 7
21379: PPUSH
21380: CALL_OW 74
21384: PPUSH
21385: CALL_OW 115
21389: GO 21542
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21391: LD_ADDR_VAR 0 8
21395: PUSH
21396: LD_EXP 36
21400: PUSH
21401: LD_VAR 0 1
21405: ARRAY
21406: PPUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 30
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 30
21432: PUSH
21433: LD_INT 6
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 72
21450: PPUSH
21451: LD_VAR 0 7
21455: PPUSH
21456: CALL_OW 74
21460: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21461: LD_VAR 0 7
21465: PPUSH
21466: LD_VAR 0 8
21470: PPUSH
21471: CALL_OW 250
21475: PPUSH
21476: LD_INT 3
21478: PPUSH
21479: LD_INT 5
21481: PPUSH
21482: CALL_OW 272
21486: PPUSH
21487: LD_VAR 0 8
21491: PPUSH
21492: CALL_OW 251
21496: PPUSH
21497: LD_INT 3
21499: PPUSH
21500: LD_INT 5
21502: PPUSH
21503: CALL_OW 273
21507: PPUSH
21508: CALL_OW 111
// SetTag ( i , 0 ) ;
21512: LD_VAR 0 7
21516: PPUSH
21517: LD_INT 0
21519: PPUSH
21520: CALL_OW 109
// solds := solds diff i ;
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: LD_VAR 0 7
21538: DIFF
21539: ST_TO_ADDR
// continue ;
21540: GO 21327
// end ; end ;
21542: GO 21327
21544: POP
21545: POP
// until solds ;
21546: LD_VAR 0 2
21550: IFFALSE 21159
// MC_Reset ( base , 18 ) ;
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_INT 18
21559: PPUSH
21560: CALL 66640 0 2
// end ;
21564: LD_VAR 0 4
21568: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21588: LD_ADDR_VAR 0 13
21592: PUSH
21593: LD_EXP 36
21597: PUSH
21598: LD_VAR 0 1
21602: ARRAY
21603: PPUSH
21604: LD_INT 25
21606: PUSH
21607: LD_INT 3
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PPUSH
21614: CALL_OW 72
21618: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21619: LD_EXP 76
21623: PUSH
21624: LD_VAR 0 1
21628: ARRAY
21629: IFFALSE 21653
// mechs := mechs diff mc_remote_driver [ base ] ;
21631: LD_ADDR_VAR 0 13
21635: PUSH
21636: LD_VAR 0 13
21640: PUSH
21641: LD_EXP 76
21645: PUSH
21646: LD_VAR 0 1
21650: ARRAY
21651: DIFF
21652: ST_TO_ADDR
// for i in mechs do
21653: LD_ADDR_VAR 0 5
21657: PUSH
21658: LD_VAR 0 13
21662: PUSH
21663: FOR_IN
21664: IFFALSE 21699
// if GetTag ( i ) > 0 then
21666: LD_VAR 0 5
21670: PPUSH
21671: CALL_OW 110
21675: PUSH
21676: LD_INT 0
21678: GREATER
21679: IFFALSE 21697
// mechs := mechs diff i ;
21681: LD_ADDR_VAR 0 13
21685: PUSH
21686: LD_VAR 0 13
21690: PUSH
21691: LD_VAR 0 5
21695: DIFF
21696: ST_TO_ADDR
21697: GO 21663
21699: POP
21700: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_EXP 36
21710: PUSH
21711: LD_VAR 0 1
21715: ARRAY
21716: PPUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 25
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 25
21732: PUSH
21733: LD_INT 5
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 25
21742: PUSH
21743: LD_INT 8
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 25
21752: PUSH
21753: LD_INT 9
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: PPUSH
21767: CALL_OW 72
21771: ST_TO_ADDR
// if not defenders and not solds then
21772: LD_VAR 0 2
21776: NOT
21777: PUSH
21778: LD_VAR 0 9
21782: NOT
21783: AND
21784: IFFALSE 21788
// exit ;
21786: GO 23414
// depot_under_attack := false ;
21788: LD_ADDR_VAR 0 17
21792: PUSH
21793: LD_INT 0
21795: ST_TO_ADDR
// sold_defenders := [ ] ;
21796: LD_ADDR_VAR 0 18
21800: PUSH
21801: EMPTY
21802: ST_TO_ADDR
// if mechs then
21803: LD_VAR 0 13
21807: IFFALSE 21936
// for i in defenders do
21809: LD_ADDR_VAR 0 5
21813: PUSH
21814: LD_VAR 0 2
21818: PUSH
21819: FOR_IN
21820: IFFALSE 21934
// begin SetTag ( i , 20 ) ;
21822: LD_VAR 0 5
21826: PPUSH
21827: LD_INT 20
21829: PPUSH
21830: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21834: LD_VAR 0 5
21838: PPUSH
21839: CALL_OW 263
21843: PUSH
21844: LD_INT 1
21846: EQUAL
21847: PUSH
21848: LD_VAR 0 5
21852: PPUSH
21853: CALL_OW 311
21857: NOT
21858: AND
21859: PUSH
21860: LD_VAR 0 13
21864: AND
21865: IFFALSE 21932
// begin un := mechs [ 1 ] ;
21867: LD_ADDR_VAR 0 11
21871: PUSH
21872: LD_VAR 0 13
21876: PUSH
21877: LD_INT 1
21879: ARRAY
21880: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21881: LD_VAR 0 11
21885: PPUSH
21886: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21890: LD_VAR 0 11
21894: PPUSH
21895: LD_VAR 0 5
21899: PPUSH
21900: CALL_OW 180
// SetTag ( un , 19 ) ;
21904: LD_VAR 0 11
21908: PPUSH
21909: LD_INT 19
21911: PPUSH
21912: CALL_OW 109
// mechs := mechs diff un ;
21916: LD_ADDR_VAR 0 13
21920: PUSH
21921: LD_VAR 0 13
21925: PUSH
21926: LD_VAR 0 11
21930: DIFF
21931: ST_TO_ADDR
// end ; end ;
21932: GO 21819
21934: POP
21935: POP
// if solds then
21936: LD_VAR 0 9
21940: IFFALSE 21999
// for i in solds do
21942: LD_ADDR_VAR 0 5
21946: PUSH
21947: LD_VAR 0 9
21951: PUSH
21952: FOR_IN
21953: IFFALSE 21997
// if not GetTag ( i ) then
21955: LD_VAR 0 5
21959: PPUSH
21960: CALL_OW 110
21964: NOT
21965: IFFALSE 21995
// begin defenders := defenders union i ;
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: LD_VAR 0 5
21981: UNION
21982: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_INT 18
21990: PPUSH
21991: CALL_OW 109
// end ;
21995: GO 21952
21997: POP
21998: POP
// repeat wait ( 0 0$1 ) ;
21999: LD_INT 35
22001: PPUSH
22002: CALL_OW 67
// enemy := mc_scan [ base ] ;
22006: LD_ADDR_VAR 0 3
22010: PUSH
22011: LD_EXP 59
22015: PUSH
22016: LD_VAR 0 1
22020: ARRAY
22021: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
22022: LD_EXP 36
22026: PUSH
22027: LD_VAR 0 1
22031: ARRAY
22032: NOT
22033: PUSH
22034: LD_EXP 36
22038: PUSH
22039: LD_VAR 0 1
22043: ARRAY
22044: PUSH
22045: EMPTY
22046: EQUAL
22047: OR
22048: IFFALSE 22085
// begin for i in defenders do
22050: LD_ADDR_VAR 0 5
22054: PUSH
22055: LD_VAR 0 2
22059: PUSH
22060: FOR_IN
22061: IFFALSE 22074
// ComStop ( i ) ;
22063: LD_VAR 0 5
22067: PPUSH
22068: CALL_OW 141
22072: GO 22060
22074: POP
22075: POP
// defenders := [ ] ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: EMPTY
22082: ST_TO_ADDR
// exit ;
22083: GO 23414
// end ; for i in defenders do
22085: LD_ADDR_VAR 0 5
22089: PUSH
22090: LD_VAR 0 2
22094: PUSH
22095: FOR_IN
22096: IFFALSE 22914
// begin e := NearestUnitToUnit ( enemy , i ) ;
22098: LD_ADDR_VAR 0 14
22102: PUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: CALL_OW 74
22117: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
22118: LD_ADDR_VAR 0 8
22122: PUSH
22123: LD_EXP 36
22127: PUSH
22128: LD_VAR 0 1
22132: ARRAY
22133: PPUSH
22134: LD_INT 2
22136: PUSH
22137: LD_INT 30
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 30
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: PPUSH
22162: CALL_OW 72
22166: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
22167: LD_ADDR_VAR 0 17
22171: PUSH
22172: LD_VAR 0 8
22176: NOT
22177: PUSH
22178: LD_VAR 0 8
22182: PPUSH
22183: LD_INT 3
22185: PUSH
22186: LD_INT 24
22188: PUSH
22189: LD_INT 600
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 72
22204: OR
22205: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22206: LD_VAR 0 5
22210: PPUSH
22211: CALL_OW 247
22215: PUSH
22216: LD_INT 2
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22620
22224: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22225: LD_VAR 0 5
22229: PPUSH
22230: CALL_OW 256
22234: PUSH
22235: LD_INT 650
22237: GREATER
22238: PUSH
22239: LD_VAR 0 5
22243: PPUSH
22244: LD_VAR 0 14
22248: PPUSH
22249: CALL_OW 296
22253: PUSH
22254: LD_INT 40
22256: LESS
22257: PUSH
22258: LD_VAR 0 14
22262: PPUSH
22263: LD_EXP 61
22267: PUSH
22268: LD_VAR 0 1
22272: ARRAY
22273: PPUSH
22274: CALL_OW 308
22278: OR
22279: AND
22280: IFFALSE 22402
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
22282: LD_VAR 0 5
22286: PPUSH
22287: CALL_OW 262
22291: PUSH
22292: LD_INT 1
22294: EQUAL
22295: PUSH
22296: LD_VAR 0 5
22300: PPUSH
22301: CALL_OW 261
22305: PUSH
22306: LD_INT 30
22308: LESS
22309: AND
22310: PUSH
22311: LD_VAR 0 8
22315: AND
22316: IFFALSE 22386
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
22318: LD_VAR 0 5
22322: PPUSH
22323: LD_VAR 0 8
22327: PPUSH
22328: LD_VAR 0 5
22332: PPUSH
22333: CALL_OW 74
22337: PPUSH
22338: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
22342: LD_VAR 0 5
22346: PPUSH
22347: LD_VAR 0 8
22351: PPUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: CALL_OW 74
22361: PPUSH
22362: CALL_OW 296
22366: PUSH
22367: LD_INT 6
22369: LESS
22370: IFFALSE 22384
// SetFuel ( i , 100 ) ;
22372: LD_VAR 0 5
22376: PPUSH
22377: LD_INT 100
22379: PPUSH
22380: CALL_OW 240
// end else
22384: GO 22400
// ComAttackUnit ( i , e ) ;
22386: LD_VAR 0 5
22390: PPUSH
22391: LD_VAR 0 14
22395: PPUSH
22396: CALL_OW 115
// end else
22400: GO 22503
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22402: LD_VAR 0 14
22406: PPUSH
22407: LD_EXP 61
22411: PUSH
22412: LD_VAR 0 1
22416: ARRAY
22417: PPUSH
22418: CALL_OW 308
22422: NOT
22423: PUSH
22424: LD_VAR 0 5
22428: PPUSH
22429: LD_VAR 0 14
22433: PPUSH
22434: CALL_OW 296
22438: PUSH
22439: LD_INT 40
22441: GREATEREQUAL
22442: AND
22443: PUSH
22444: LD_VAR 0 5
22448: PPUSH
22449: CALL_OW 256
22453: PUSH
22454: LD_INT 650
22456: LESSEQUAL
22457: OR
22458: PUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: LD_EXP 60
22468: PUSH
22469: LD_VAR 0 1
22473: ARRAY
22474: PPUSH
22475: CALL_OW 308
22479: NOT
22480: AND
22481: IFFALSE 22503
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22483: LD_VAR 0 5
22487: PPUSH
22488: LD_EXP 60
22492: PUSH
22493: LD_VAR 0 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22503: LD_VAR 0 5
22507: PPUSH
22508: CALL_OW 256
22512: PUSH
22513: LD_INT 998
22515: LESS
22516: PUSH
22517: LD_VAR 0 5
22521: PPUSH
22522: CALL_OW 263
22526: PUSH
22527: LD_INT 1
22529: EQUAL
22530: AND
22531: PUSH
22532: LD_VAR 0 5
22536: PPUSH
22537: CALL_OW 311
22541: AND
22542: PUSH
22543: LD_VAR 0 5
22547: PPUSH
22548: LD_EXP 60
22552: PUSH
22553: LD_VAR 0 1
22557: ARRAY
22558: PPUSH
22559: CALL_OW 308
22563: AND
22564: IFFALSE 22618
// begin mech := IsDrivenBy ( i ) ;
22566: LD_ADDR_VAR 0 10
22570: PUSH
22571: LD_VAR 0 5
22575: PPUSH
22576: CALL_OW 311
22580: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22581: LD_VAR 0 10
22585: PPUSH
22586: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22590: LD_VAR 0 10
22594: PPUSH
22595: LD_VAR 0 5
22599: PPUSH
22600: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22604: LD_VAR 0 10
22608: PPUSH
22609: LD_VAR 0 5
22613: PPUSH
22614: CALL_OW 180
// end ; end ; unit_human :
22618: GO 22885
22620: LD_INT 1
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22884
22628: POP
// begin b := IsInUnit ( i ) ;
22629: LD_ADDR_VAR 0 19
22633: PUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: CALL_OW 310
22643: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22644: LD_ADDR_VAR 0 20
22648: PUSH
22649: LD_VAR 0 19
22653: NOT
22654: PUSH
22655: LD_VAR 0 19
22659: PPUSH
22660: CALL_OW 266
22664: PUSH
22665: LD_INT 32
22667: PUSH
22668: LD_INT 31
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: IN
22675: OR
22676: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22677: LD_VAR 0 17
22681: PUSH
22682: LD_VAR 0 2
22686: PPUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 72
22701: PUSH
22702: LD_INT 1
22704: LESSEQUAL
22705: OR
22706: PUSH
22707: LD_VAR 0 20
22711: AND
22712: PUSH
22713: LD_VAR 0 5
22717: PUSH
22718: LD_VAR 0 18
22722: IN
22723: NOT
22724: AND
22725: IFFALSE 22818
// begin if b then
22727: LD_VAR 0 19
22731: IFFALSE 22780
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22733: LD_VAR 0 19
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_VAR 0 19
22747: PPUSH
22748: CALL_OW 74
22752: PPUSH
22753: CALL_OW 296
22757: PUSH
22758: LD_INT 10
22760: LESS
22761: PUSH
22762: LD_VAR 0 19
22766: PPUSH
22767: CALL_OW 461
22771: PUSH
22772: LD_INT 7
22774: NONEQUAL
22775: AND
22776: IFFALSE 22780
// continue ;
22778: GO 22095
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22780: LD_ADDR_VAR 0 18
22784: PUSH
22785: LD_VAR 0 18
22789: PPUSH
22790: LD_VAR 0 18
22794: PUSH
22795: LD_INT 1
22797: PLUS
22798: PPUSH
22799: LD_VAR 0 5
22803: PPUSH
22804: CALL_OW 1
22808: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22809: LD_VAR 0 5
22813: PPUSH
22814: CALL_OW 122
// end ; if sold_defenders then
22818: LD_VAR 0 18
22822: IFFALSE 22882
// if i in sold_defenders then
22824: LD_VAR 0 5
22828: PUSH
22829: LD_VAR 0 18
22833: IN
22834: IFFALSE 22882
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22836: LD_VAR 0 5
22840: PPUSH
22841: CALL_OW 314
22845: NOT
22846: PUSH
22847: LD_VAR 0 5
22851: PPUSH
22852: LD_VAR 0 14
22856: PPUSH
22857: CALL_OW 296
22861: PUSH
22862: LD_INT 30
22864: LESS
22865: AND
22866: IFFALSE 22882
// ComAttackUnit ( i , e ) ;
22868: LD_VAR 0 5
22872: PPUSH
22873: LD_VAR 0 14
22877: PPUSH
22878: CALL_OW 115
// end ; end ; end ;
22882: GO 22885
22884: POP
// if IsDead ( i ) then
22885: LD_VAR 0 5
22889: PPUSH
22890: CALL_OW 301
22894: IFFALSE 22912
// defenders := defenders diff i ;
22896: LD_ADDR_VAR 0 2
22900: PUSH
22901: LD_VAR 0 2
22905: PUSH
22906: LD_VAR 0 5
22910: DIFF
22911: ST_TO_ADDR
// end ;
22912: GO 22095
22914: POP
22915: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
22916: LD_VAR 0 3
22920: NOT
22921: PUSH
22922: LD_VAR 0 2
22926: NOT
22927: OR
22928: PUSH
22929: LD_EXP 36
22933: PUSH
22934: LD_VAR 0 1
22938: ARRAY
22939: NOT
22940: OR
22941: IFFALSE 21999
// MC_Reset ( base , 18 ) ;
22943: LD_VAR 0 1
22947: PPUSH
22948: LD_INT 18
22950: PPUSH
22951: CALL 66640 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22955: LD_ADDR_VAR 0 2
22959: PUSH
22960: LD_VAR 0 2
22964: PUSH
22965: LD_VAR 0 2
22969: PPUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 25
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 25
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 25
22995: PUSH
22996: LD_INT 8
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 25
23005: PUSH
23006: LD_INT 9
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PPUSH
23020: CALL_OW 72
23024: DIFF
23025: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23026: LD_VAR 0 3
23030: NOT
23031: PUSH
23032: LD_VAR 0 2
23036: PPUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 72
23051: AND
23052: IFFALSE 23390
// begin tmp := FilterByTag ( defenders , 19 ) ;
23054: LD_ADDR_VAR 0 12
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: LD_INT 19
23066: PPUSH
23067: CALL 59853 0 2
23071: ST_TO_ADDR
// if tmp then
23072: LD_VAR 0 12
23076: IFFALSE 23146
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23078: LD_ADDR_VAR 0 12
23082: PUSH
23083: LD_VAR 0 12
23087: PPUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PPUSH
23098: CALL_OW 72
23102: ST_TO_ADDR
// if tmp then
23103: LD_VAR 0 12
23107: IFFALSE 23146
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23109: LD_ADDR_EXP 48
23113: PUSH
23114: LD_EXP 48
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_EXP 48
23128: PUSH
23129: LD_VAR 0 1
23133: ARRAY
23134: PUSH
23135: LD_VAR 0 12
23139: UNION
23140: PPUSH
23141: CALL_OW 1
23145: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23146: LD_VAR 0 1
23150: PPUSH
23151: LD_INT 19
23153: PPUSH
23154: CALL 66640 0 2
// repeat wait ( 0 0$1 ) ;
23158: LD_INT 35
23160: PPUSH
23161: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23165: LD_EXP 36
23169: PUSH
23170: LD_VAR 0 1
23174: ARRAY
23175: NOT
23176: PUSH
23177: LD_EXP 36
23181: PUSH
23182: LD_VAR 0 1
23186: ARRAY
23187: PUSH
23188: EMPTY
23189: EQUAL
23190: OR
23191: IFFALSE 23228
// begin for i in defenders do
23193: LD_ADDR_VAR 0 5
23197: PUSH
23198: LD_VAR 0 2
23202: PUSH
23203: FOR_IN
23204: IFFALSE 23217
// ComStop ( i ) ;
23206: LD_VAR 0 5
23210: PPUSH
23211: CALL_OW 141
23215: GO 23203
23217: POP
23218: POP
// defenders := [ ] ;
23219: LD_ADDR_VAR 0 2
23223: PUSH
23224: EMPTY
23225: ST_TO_ADDR
// exit ;
23226: GO 23414
// end ; for i in defenders do
23228: LD_ADDR_VAR 0 5
23232: PUSH
23233: LD_VAR 0 2
23237: PUSH
23238: FOR_IN
23239: IFFALSE 23328
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23241: LD_VAR 0 5
23245: PPUSH
23246: LD_EXP 60
23250: PUSH
23251: LD_VAR 0 1
23255: ARRAY
23256: PPUSH
23257: CALL_OW 308
23261: NOT
23262: IFFALSE 23286
// ComMoveToArea ( i , mc_parking [ base ] ) else
23264: LD_VAR 0 5
23268: PPUSH
23269: LD_EXP 60
23273: PUSH
23274: LD_VAR 0 1
23278: ARRAY
23279: PPUSH
23280: CALL_OW 113
23284: GO 23326
// if GetControl ( i ) = control_manual then
23286: LD_VAR 0 5
23290: PPUSH
23291: CALL_OW 263
23295: PUSH
23296: LD_INT 1
23298: EQUAL
23299: IFFALSE 23326
// if IsDrivenBy ( i ) then
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL_OW 311
23310: IFFALSE 23326
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23312: LD_VAR 0 5
23316: PPUSH
23317: CALL_OW 311
23321: PPUSH
23322: CALL_OW 121
// end ;
23326: GO 23238
23328: POP
23329: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23330: LD_VAR 0 2
23334: PPUSH
23335: LD_INT 95
23337: PUSH
23338: LD_EXP 60
23342: PUSH
23343: LD_VAR 0 1
23347: ARRAY
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 72
23357: PUSH
23358: LD_VAR 0 2
23362: EQUAL
23363: PUSH
23364: LD_EXP 59
23368: PUSH
23369: LD_VAR 0 1
23373: ARRAY
23374: OR
23375: PUSH
23376: LD_EXP 36
23380: PUSH
23381: LD_VAR 0 1
23385: ARRAY
23386: NOT
23387: OR
23388: IFFALSE 23158
// end ; MC_Reset ( base , 19 ) ;
23390: LD_VAR 0 1
23394: PPUSH
23395: LD_INT 19
23397: PPUSH
23398: CALL 66640 0 2
// MC_Reset ( base , 20 ) ;
23402: LD_VAR 0 1
23406: PPUSH
23407: LD_INT 20
23409: PPUSH
23410: CALL 66640 0 2
// end ;
23414: LD_VAR 0 4
23418: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23419: LD_INT 0
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
// result := false ;
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// side := GetSide ( unit ) ;
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 255
23447: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23448: LD_ADDR_VAR 0 4
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 248
23462: ST_TO_ADDR
// case nat of 1 :
23463: LD_VAR 0 4
23467: PUSH
23468: LD_INT 1
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23487
23476: POP
// tech := tech_lassight ; 2 :
23477: LD_ADDR_VAR 0 5
23481: PUSH
23482: LD_INT 12
23484: ST_TO_ADDR
23485: GO 23526
23487: LD_INT 2
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23506
23495: POP
// tech := tech_mortar ; 3 :
23496: LD_ADDR_VAR 0 5
23500: PUSH
23501: LD_INT 41
23503: ST_TO_ADDR
23504: GO 23526
23506: LD_INT 3
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23525
23514: POP
// tech := tech_bazooka ; end ;
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: LD_INT 44
23522: ST_TO_ADDR
23523: GO 23526
23525: POP
// if Researched ( side , tech ) then
23526: LD_VAR 0 3
23530: PPUSH
23531: LD_VAR 0 5
23535: PPUSH
23536: CALL_OW 325
23540: IFFALSE 23567
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23542: LD_ADDR_VAR 0 2
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 8
23552: PUSH
23553: LD_INT 9
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: LD_VAR 0 4
23565: ARRAY
23566: ST_TO_ADDR
// end ;
23567: LD_VAR 0 2
23571: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23572: LD_INT 0
23574: PPUSH
23575: PPUSH
23576: PPUSH
// if not mines then
23577: LD_VAR 0 2
23581: NOT
23582: IFFALSE 23586
// exit ;
23584: GO 23730
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23586: LD_ADDR_VAR 0 5
23590: PUSH
23591: LD_INT 81
23593: PUSH
23594: LD_VAR 0 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: ST_TO_ADDR
// for i in mines do
23629: LD_ADDR_VAR 0 4
23633: PUSH
23634: LD_VAR 0 2
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23728
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23642: LD_VAR 0 4
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: PPUSH
23651: LD_VAR 0 4
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: CALL_OW 458
23664: NOT
23665: IFFALSE 23669
// continue ;
23667: GO 23639
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23669: LD_VAR 0 4
23673: PUSH
23674: LD_INT 1
23676: ARRAY
23677: PPUSH
23678: LD_VAR 0 4
23682: PUSH
23683: LD_INT 2
23685: ARRAY
23686: PPUSH
23687: CALL_OW 428
23691: PUSH
23692: LD_VAR 0 5
23696: IN
23697: IFFALSE 23726
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23699: LD_VAR 0 4
23703: PUSH
23704: LD_INT 1
23706: ARRAY
23707: PPUSH
23708: LD_VAR 0 4
23712: PUSH
23713: LD_INT 2
23715: ARRAY
23716: PPUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 456
// end ;
23726: GO 23639
23728: POP
23729: POP
// end ;
23730: LD_VAR 0 3
23734: RET
// export function Count ( array ) ; var i ; begin
23735: LD_INT 0
23737: PPUSH
23738: PPUSH
// result := 0 ;
23739: LD_ADDR_VAR 0 2
23743: PUSH
23744: LD_INT 0
23746: ST_TO_ADDR
// for i in array do
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: LD_VAR 0 1
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23782
// if i then
23760: LD_VAR 0 3
23764: IFFALSE 23780
// result := result + 1 ;
23766: LD_ADDR_VAR 0 2
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: LD_INT 1
23778: PLUS
23779: ST_TO_ADDR
23780: GO 23757
23782: POP
23783: POP
// end ;
23784: LD_VAR 0 2
23788: RET
// export function IsEmpty ( building ) ; begin
23789: LD_INT 0
23791: PPUSH
// if not building then
23792: LD_VAR 0 1
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_VAR 0 1
23810: PUSH
23811: LD_INT 22
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 255
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 58
23830: PUSH
23831: EMPTY
23832: LIST
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PPUSH
23838: CALL_OW 69
23842: IN
23843: ST_TO_ADDR
// end ;
23844: LD_VAR 0 2
23848: RET
// export function IsNotFull ( building ) ; begin
23849: LD_INT 0
23851: PPUSH
// if not building then
23852: LD_VAR 0 1
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23880
// result := UnitsInside ( building ) < 6 ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 313
23875: PUSH
23876: LD_INT 6
23878: LESS
23879: ST_TO_ADDR
// end ;
23880: LD_VAR 0 2
23884: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23885: LD_INT 0
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// tmp := [ ] ;
23891: LD_ADDR_VAR 0 3
23895: PUSH
23896: EMPTY
23897: ST_TO_ADDR
// list := [ ] ;
23898: LD_ADDR_VAR 0 5
23902: PUSH
23903: EMPTY
23904: ST_TO_ADDR
// for i = 16 to 25 do
23905: LD_ADDR_VAR 0 4
23909: PUSH
23910: DOUBLE
23911: LD_INT 16
23913: DEC
23914: ST_TO_ADDR
23915: LD_INT 25
23917: PUSH
23918: FOR_TO
23919: IFFALSE 23992
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_VAR 0 3
23930: PUSH
23931: LD_INT 22
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 255
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 91
23950: PUSH
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 6
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 30
23966: PUSH
23967: LD_VAR 0 4
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: ADD
23989: ST_TO_ADDR
23990: GO 23918
23992: POP
23993: POP
// for i = 1 to tmp do
23994: LD_ADDR_VAR 0 4
23998: PUSH
23999: DOUBLE
24000: LD_INT 1
24002: DEC
24003: ST_TO_ADDR
24004: LD_VAR 0 3
24008: PUSH
24009: FOR_TO
24010: IFFALSE 24098
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24012: LD_ADDR_VAR 0 5
24016: PUSH
24017: LD_VAR 0 5
24021: PUSH
24022: LD_VAR 0 3
24026: PUSH
24027: LD_VAR 0 4
24031: ARRAY
24032: PPUSH
24033: CALL_OW 266
24037: PUSH
24038: LD_VAR 0 3
24042: PUSH
24043: LD_VAR 0 4
24047: ARRAY
24048: PPUSH
24049: CALL_OW 250
24053: PUSH
24054: LD_VAR 0 3
24058: PUSH
24059: LD_VAR 0 4
24063: ARRAY
24064: PPUSH
24065: CALL_OW 251
24069: PUSH
24070: LD_VAR 0 3
24074: PUSH
24075: LD_VAR 0 4
24079: ARRAY
24080: PPUSH
24081: CALL_OW 254
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: ADD
24095: ST_TO_ADDR
24096: GO 24009
24098: POP
24099: POP
// result := list ;
24100: LD_ADDR_VAR 0 2
24104: PUSH
24105: LD_VAR 0 5
24109: ST_TO_ADDR
// end ;
24110: LD_VAR 0 2
24114: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
// if not factory then
24124: LD_VAR 0 1
24128: NOT
24129: IFFALSE 24133
// exit ;
24131: GO 24726
// if control = control_apeman then
24133: LD_VAR 0 4
24137: PUSH
24138: LD_INT 5
24140: EQUAL
24141: IFFALSE 24250
// begin tmp := UnitsInside ( factory ) ;
24143: LD_ADDR_VAR 0 8
24147: PUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 313
24157: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24158: LD_VAR 0 8
24162: PPUSH
24163: LD_INT 25
24165: PUSH
24166: LD_INT 12
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 72
24177: NOT
24178: IFFALSE 24188
// control := control_manual ;
24180: LD_ADDR_VAR 0 4
24184: PUSH
24185: LD_INT 1
24187: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24188: LD_ADDR_VAR 0 8
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL 23885 0 1
24202: ST_TO_ADDR
// if tmp then
24203: LD_VAR 0 8
24207: IFFALSE 24250
// begin for i in tmp do
24209: LD_ADDR_VAR 0 7
24213: PUSH
24214: LD_VAR 0 8
24218: PUSH
24219: FOR_IN
24220: IFFALSE 24248
// if i [ 1 ] = b_ext_radio then
24222: LD_VAR 0 7
24226: PUSH
24227: LD_INT 1
24229: ARRAY
24230: PUSH
24231: LD_INT 22
24233: EQUAL
24234: IFFALSE 24246
// begin control := control_remote ;
24236: LD_ADDR_VAR 0 4
24240: PUSH
24241: LD_INT 2
24243: ST_TO_ADDR
// break ;
24244: GO 24248
// end ;
24246: GO 24219
24248: POP
24249: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24250: LD_VAR 0 1
24254: PPUSH
24255: LD_VAR 0 2
24259: PPUSH
24260: LD_VAR 0 3
24264: PPUSH
24265: LD_VAR 0 4
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 448
24279: IFFALSE 24314
// begin result := [ chassis , engine , control , weapon ] ;
24281: LD_ADDR_VAR 0 6
24285: PUSH
24286: LD_VAR 0 2
24290: PUSH
24291: LD_VAR 0 3
24295: PUSH
24296: LD_VAR 0 4
24300: PUSH
24301: LD_VAR 0 5
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// exit ;
24312: GO 24726
// end ; _chassis := AvailableChassisList ( factory ) ;
24314: LD_ADDR_VAR 0 9
24318: PUSH
24319: LD_VAR 0 1
24323: PPUSH
24324: CALL_OW 475
24328: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24329: LD_ADDR_VAR 0 11
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 476
24343: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24344: LD_ADDR_VAR 0 12
24348: PUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: CALL_OW 477
24358: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24359: LD_ADDR_VAR 0 10
24363: PUSH
24364: LD_VAR 0 1
24368: PPUSH
24369: CALL_OW 478
24373: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24374: LD_VAR 0 9
24378: NOT
24379: PUSH
24380: LD_VAR 0 11
24384: NOT
24385: OR
24386: PUSH
24387: LD_VAR 0 12
24391: NOT
24392: OR
24393: PUSH
24394: LD_VAR 0 10
24398: NOT
24399: OR
24400: IFFALSE 24435
// begin result := [ chassis , engine , control , weapon ] ;
24402: LD_ADDR_VAR 0 6
24406: PUSH
24407: LD_VAR 0 2
24411: PUSH
24412: LD_VAR 0 3
24416: PUSH
24417: LD_VAR 0 4
24421: PUSH
24422: LD_VAR 0 5
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// exit ;
24433: GO 24726
// end ; if not chassis in _chassis then
24435: LD_VAR 0 2
24439: PUSH
24440: LD_VAR 0 9
24444: IN
24445: NOT
24446: IFFALSE 24472
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24448: LD_ADDR_VAR 0 2
24452: PUSH
24453: LD_VAR 0 9
24457: PUSH
24458: LD_INT 1
24460: PPUSH
24461: LD_VAR 0 9
24465: PPUSH
24466: CALL_OW 12
24470: ARRAY
24471: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24472: LD_VAR 0 2
24476: PPUSH
24477: LD_VAR 0 3
24481: PPUSH
24482: CALL 24731 0 2
24486: NOT
24487: IFFALSE 24546
// repeat engine := _engine [ 1 ] ;
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_VAR 0 11
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24503: LD_ADDR_VAR 0 11
24507: PUSH
24508: LD_VAR 0 11
24512: PPUSH
24513: LD_INT 1
24515: PPUSH
24516: CALL_OW 3
24520: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL 24731 0 2
24535: PUSH
24536: LD_VAR 0 11
24540: PUSH
24541: EMPTY
24542: EQUAL
24543: OR
24544: IFFALSE 24489
// if not control in _control then
24546: LD_VAR 0 4
24550: PUSH
24551: LD_VAR 0 12
24555: IN
24556: NOT
24557: IFFALSE 24583
// control := _control [ rand ( 1 , _control ) ] ;
24559: LD_ADDR_VAR 0 4
24563: PUSH
24564: LD_VAR 0 12
24568: PUSH
24569: LD_INT 1
24571: PPUSH
24572: LD_VAR 0 12
24576: PPUSH
24577: CALL_OW 12
24581: ARRAY
24582: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 5
24592: PPUSH
24593: CALL 24951 0 2
24597: NOT
24598: IFFALSE 24657
// repeat weapon := _weapon [ 1 ] ;
24600: LD_ADDR_VAR 0 5
24604: PUSH
24605: LD_VAR 0 10
24609: PUSH
24610: LD_INT 1
24612: ARRAY
24613: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24614: LD_ADDR_VAR 0 10
24618: PUSH
24619: LD_VAR 0 10
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 5
24641: PPUSH
24642: CALL 24951 0 2
24646: PUSH
24647: LD_VAR 0 10
24651: PUSH
24652: EMPTY
24653: EQUAL
24654: OR
24655: IFFALSE 24600
// result := [ ] ;
24657: LD_ADDR_VAR 0 6
24661: PUSH
24662: EMPTY
24663: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24664: LD_VAR 0 1
24668: PPUSH
24669: LD_VAR 0 2
24673: PPUSH
24674: LD_VAR 0 3
24678: PPUSH
24679: LD_VAR 0 4
24683: PPUSH
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL_OW 448
24693: IFFALSE 24726
// result := [ chassis , engine , control , weapon ] ;
24695: LD_ADDR_VAR 0 6
24699: PUSH
24700: LD_VAR 0 2
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: LD_VAR 0 5
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: ST_TO_ADDR
// end ;
24726: LD_VAR 0 6
24730: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24731: LD_INT 0
24733: PPUSH
// if not chassis or not engine then
24734: LD_VAR 0 1
24738: NOT
24739: PUSH
24740: LD_VAR 0 2
24744: NOT
24745: OR
24746: IFFALSE 24750
// exit ;
24748: GO 24946
// case engine of engine_solar :
24750: LD_VAR 0 2
24754: PUSH
24755: LD_INT 2
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24801
24763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_INT 11
24771: PUSH
24772: LD_INT 12
24774: PUSH
24775: LD_INT 13
24777: PUSH
24778: LD_INT 14
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 24930
24801: LD_INT 1
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24871
24809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_INT 11
24817: PUSH
24818: LD_INT 12
24820: PUSH
24821: LD_INT 13
24823: PUSH
24824: LD_INT 14
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: LD_INT 4
24838: PUSH
24839: LD_INT 5
24841: PUSH
24842: LD_INT 21
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 22
24850: PUSH
24851: LD_INT 24
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 24930
24871: LD_INT 3
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 24929
24879: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_INT 13
24887: PUSH
24888: LD_INT 14
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 3
24896: PUSH
24897: LD_INT 4
24899: PUSH
24900: LD_INT 5
24902: PUSH
24903: LD_INT 21
24905: PUSH
24906: LD_INT 22
24908: PUSH
24909: LD_INT 23
24911: PUSH
24912: LD_INT 24
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: ST_TO_ADDR
24927: GO 24930
24929: POP
// result := ( chassis in result ) ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_VAR 0 1
24939: PUSH
24940: LD_VAR 0 3
24944: IN
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 3
24950: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24951: LD_INT 0
24953: PPUSH
// if not chassis or not weapon then
24954: LD_VAR 0 1
24958: NOT
24959: PUSH
24960: LD_VAR 0 2
24964: NOT
24965: OR
24966: IFFALSE 24970
// exit ;
24968: GO 25996
// case weapon of us_machine_gun :
24970: LD_VAR 0 2
24974: PUSH
24975: LD_INT 2
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25013
24983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: LD_INT 4
25000: PUSH
25001: LD_INT 5
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: ST_TO_ADDR
25011: GO 25980
25013: LD_INT 3
25015: DOUBLE
25016: EQUAL
25017: IFTRUE 25021
25019: GO 25051
25021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 4
25038: PUSH
25039: LD_INT 5
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: ST_TO_ADDR
25049: GO 25980
25051: LD_INT 11
25053: DOUBLE
25054: EQUAL
25055: IFTRUE 25059
25057: GO 25089
25059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: LD_INT 5
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: ST_TO_ADDR
25087: GO 25980
25089: LD_INT 4
25091: DOUBLE
25092: EQUAL
25093: IFTRUE 25097
25095: GO 25123
25097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 4
25111: PUSH
25112: LD_INT 5
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: ST_TO_ADDR
25121: GO 25980
25123: LD_INT 5
25125: DOUBLE
25126: EQUAL
25127: IFTRUE 25131
25129: GO 25157
25131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 4
25145: PUSH
25146: LD_INT 5
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: ST_TO_ADDR
25155: GO 25980
25157: LD_INT 9
25159: DOUBLE
25160: EQUAL
25161: IFTRUE 25165
25163: GO 25191
25165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25166: LD_ADDR_VAR 0 3
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: LD_INT 4
25179: PUSH
25180: LD_INT 5
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
25189: GO 25980
25191: LD_INT 7
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25225
25199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 4
25213: PUSH
25214: LD_INT 5
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
25223: GO 25980
25225: LD_INT 12
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25259
25233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: LD_INT 4
25247: PUSH
25248: LD_INT 5
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
25257: GO 25980
25259: LD_INT 13
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25293
25267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25268: LD_ADDR_VAR 0 3
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: LD_INT 5
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
25291: GO 25980
25293: LD_INT 14
25295: DOUBLE
25296: EQUAL
25297: IFTRUE 25301
25299: GO 25319
25301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_INT 4
25309: PUSH
25310: LD_INT 5
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: ST_TO_ADDR
25317: GO 25980
25319: LD_INT 6
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25345
25327: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: ST_TO_ADDR
25343: GO 25980
25345: LD_INT 10
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25371
25353: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: LD_INT 4
25361: PUSH
25362: LD_INT 5
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: ST_TO_ADDR
25369: GO 25980
25371: LD_INT 22
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25405
25379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25380: LD_ADDR_VAR 0 3
25384: PUSH
25385: LD_INT 11
25387: PUSH
25388: LD_INT 12
25390: PUSH
25391: LD_INT 13
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25980
25405: LD_INT 23
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25439
25413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 11
25421: PUSH
25422: LD_INT 12
25424: PUSH
25425: LD_INT 13
25427: PUSH
25428: LD_INT 14
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25980
25439: LD_INT 24
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25473
25447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 11
25455: PUSH
25456: LD_INT 12
25458: PUSH
25459: LD_INT 13
25461: PUSH
25462: LD_INT 14
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: ST_TO_ADDR
25471: GO 25980
25473: LD_INT 30
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25507
25481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 11
25489: PUSH
25490: LD_INT 12
25492: PUSH
25493: LD_INT 13
25495: PUSH
25496: LD_INT 14
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
25505: GO 25980
25507: LD_INT 25
25509: DOUBLE
25510: EQUAL
25511: IFTRUE 25515
25513: GO 25533
25515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_INT 13
25523: PUSH
25524: LD_INT 14
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 25980
25533: LD_INT 27
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25559
25541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 13
25549: PUSH
25550: LD_INT 14
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: ST_TO_ADDR
25557: GO 25980
25559: LD_INT 28
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25585
25567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_INT 13
25575: PUSH
25576: LD_INT 14
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: ST_TO_ADDR
25583: GO 25980
25585: LD_INT 29
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25611
25593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_INT 13
25601: PUSH
25602: LD_INT 14
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 25980
25611: LD_INT 31
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25637
25619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 13
25627: PUSH
25628: LD_INT 14
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: ST_TO_ADDR
25635: GO 25980
25637: LD_INT 26
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25663
25645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_INT 13
25653: PUSH
25654: LD_INT 14
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 25980
25663: LD_INT 42
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25697
25671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 21
25679: PUSH
25680: LD_INT 22
25682: PUSH
25683: LD_INT 23
25685: PUSH
25686: LD_INT 24
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
25695: GO 25980
25697: LD_INT 43
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25731
25705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 22
25716: PUSH
25717: LD_INT 23
25719: PUSH
25720: LD_INT 24
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
25729: GO 25980
25731: LD_INT 44
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25765
25739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 21
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_INT 23
25753: PUSH
25754: LD_INT 24
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 25980
25765: LD_INT 45
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25799
25773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 23
25787: PUSH
25788: LD_INT 24
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 25980
25799: LD_INT 49
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25833
25807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 21
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_INT 23
25821: PUSH
25822: LD_INT 24
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
25831: GO 25980
25833: LD_INT 51
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25867
25841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25842: LD_ADDR_VAR 0 3
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 22
25852: PUSH
25853: LD_INT 23
25855: PUSH
25856: LD_INT 24
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: ST_TO_ADDR
25865: GO 25980
25867: LD_INT 52
25869: DOUBLE
25870: EQUAL
25871: IFTRUE 25875
25873: GO 25901
25875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 21
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_INT 23
25889: PUSH
25890: LD_INT 24
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
25899: GO 25980
25901: LD_INT 53
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25927
25909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25910: LD_ADDR_VAR 0 3
25914: PUSH
25915: LD_INT 23
25917: PUSH
25918: LD_INT 24
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: ST_TO_ADDR
25925: GO 25980
25927: LD_INT 46
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25953
25935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_INT 23
25943: PUSH
25944: LD_INT 24
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: ST_TO_ADDR
25951: GO 25980
25953: LD_INT 47
25955: DOUBLE
25956: EQUAL
25957: IFTRUE 25961
25959: GO 25979
25961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_INT 23
25969: PUSH
25970: LD_INT 24
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: ST_TO_ADDR
25977: GO 25980
25979: POP
// result := ( chassis in result ) ;
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_VAR 0 1
25989: PUSH
25990: LD_VAR 0 3
25994: IN
25995: ST_TO_ADDR
// end ;
25996: LD_VAR 0 3
26000: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// result := array ;
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: LD_VAR 0 1
26019: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26020: LD_VAR 0 1
26024: NOT
26025: PUSH
26026: LD_VAR 0 2
26030: NOT
26031: OR
26032: PUSH
26033: LD_VAR 0 3
26037: NOT
26038: OR
26039: PUSH
26040: LD_VAR 0 2
26044: PUSH
26045: LD_VAR 0 1
26049: GREATER
26050: OR
26051: PUSH
26052: LD_VAR 0 3
26056: PUSH
26057: LD_VAR 0 1
26061: GREATER
26062: OR
26063: IFFALSE 26067
// exit ;
26065: GO 26363
// if direction then
26067: LD_VAR 0 4
26071: IFFALSE 26135
// begin d := 1 ;
26073: LD_ADDR_VAR 0 9
26077: PUSH
26078: LD_INT 1
26080: ST_TO_ADDR
// if i_from > i_to then
26081: LD_VAR 0 2
26085: PUSH
26086: LD_VAR 0 3
26090: GREATER
26091: IFFALSE 26117
// length := ( array - i_from ) + i_to else
26093: LD_ADDR_VAR 0 11
26097: PUSH
26098: LD_VAR 0 1
26102: PUSH
26103: LD_VAR 0 2
26107: MINUS
26108: PUSH
26109: LD_VAR 0 3
26113: PLUS
26114: ST_TO_ADDR
26115: GO 26133
// length := i_to - i_from ;
26117: LD_ADDR_VAR 0 11
26121: PUSH
26122: LD_VAR 0 3
26126: PUSH
26127: LD_VAR 0 2
26131: MINUS
26132: ST_TO_ADDR
// end else
26133: GO 26196
// begin d := - 1 ;
26135: LD_ADDR_VAR 0 9
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: ST_TO_ADDR
// if i_from > i_to then
26144: LD_VAR 0 2
26148: PUSH
26149: LD_VAR 0 3
26153: GREATER
26154: IFFALSE 26174
// length := i_from - i_to else
26156: LD_ADDR_VAR 0 11
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: LD_VAR 0 3
26170: MINUS
26171: ST_TO_ADDR
26172: GO 26196
// length := ( array - i_to ) + i_from ;
26174: LD_ADDR_VAR 0 11
26178: PUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_VAR 0 3
26188: MINUS
26189: PUSH
26190: LD_VAR 0 2
26194: PLUS
26195: ST_TO_ADDR
// end ; if not length then
26196: LD_VAR 0 11
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26363
// tmp := array ;
26205: LD_ADDR_VAR 0 10
26209: PUSH
26210: LD_VAR 0 1
26214: ST_TO_ADDR
// for i = 1 to length do
26215: LD_ADDR_VAR 0 6
26219: PUSH
26220: DOUBLE
26221: LD_INT 1
26223: DEC
26224: ST_TO_ADDR
26225: LD_VAR 0 11
26229: PUSH
26230: FOR_TO
26231: IFFALSE 26351
// begin for j = 1 to array do
26233: LD_ADDR_VAR 0 7
26237: PUSH
26238: DOUBLE
26239: LD_INT 1
26241: DEC
26242: ST_TO_ADDR
26243: LD_VAR 0 1
26247: PUSH
26248: FOR_TO
26249: IFFALSE 26337
// begin k := j + d ;
26251: LD_ADDR_VAR 0 8
26255: PUSH
26256: LD_VAR 0 7
26260: PUSH
26261: LD_VAR 0 9
26265: PLUS
26266: ST_TO_ADDR
// if k > array then
26267: LD_VAR 0 8
26271: PUSH
26272: LD_VAR 0 1
26276: GREATER
26277: IFFALSE 26287
// k := 1 ;
26279: LD_ADDR_VAR 0 8
26283: PUSH
26284: LD_INT 1
26286: ST_TO_ADDR
// if not k then
26287: LD_VAR 0 8
26291: NOT
26292: IFFALSE 26304
// k := array ;
26294: LD_ADDR_VAR 0 8
26298: PUSH
26299: LD_VAR 0 1
26303: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26304: LD_ADDR_VAR 0 10
26308: PUSH
26309: LD_VAR 0 10
26313: PPUSH
26314: LD_VAR 0 8
26318: PPUSH
26319: LD_VAR 0 1
26323: PUSH
26324: LD_VAR 0 7
26328: ARRAY
26329: PPUSH
26330: CALL_OW 1
26334: ST_TO_ADDR
// end ;
26335: GO 26248
26337: POP
26338: POP
// array := tmp ;
26339: LD_ADDR_VAR 0 1
26343: PUSH
26344: LD_VAR 0 10
26348: ST_TO_ADDR
// end ;
26349: GO 26230
26351: POP
26352: POP
// result := array ;
26353: LD_ADDR_VAR 0 5
26357: PUSH
26358: LD_VAR 0 1
26362: ST_TO_ADDR
// end ;
26363: LD_VAR 0 5
26367: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26368: LD_INT 0
26370: PPUSH
26371: PPUSH
// result := 0 ;
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_INT 0
26379: ST_TO_ADDR
// if not array or not value in array then
26380: LD_VAR 0 1
26384: NOT
26385: PUSH
26386: LD_VAR 0 2
26390: PUSH
26391: LD_VAR 0 1
26395: IN
26396: NOT
26397: OR
26398: IFFALSE 26402
// exit ;
26400: GO 26456
// for i = 1 to array do
26402: LD_ADDR_VAR 0 4
26406: PUSH
26407: DOUBLE
26408: LD_INT 1
26410: DEC
26411: ST_TO_ADDR
26412: LD_VAR 0 1
26416: PUSH
26417: FOR_TO
26418: IFFALSE 26454
// if value = array [ i ] then
26420: LD_VAR 0 2
26424: PUSH
26425: LD_VAR 0 1
26429: PUSH
26430: LD_VAR 0 4
26434: ARRAY
26435: EQUAL
26436: IFFALSE 26452
// begin result := i ;
26438: LD_ADDR_VAR 0 3
26442: PUSH
26443: LD_VAR 0 4
26447: ST_TO_ADDR
// exit ;
26448: POP
26449: POP
26450: GO 26456
// end ;
26452: GO 26417
26454: POP
26455: POP
// end ;
26456: LD_VAR 0 3
26460: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26461: LD_INT 0
26463: PPUSH
// vc_chassis := chassis ;
26464: LD_ADDR_OWVAR 37
26468: PUSH
26469: LD_VAR 0 1
26473: ST_TO_ADDR
// vc_engine := engine ;
26474: LD_ADDR_OWVAR 39
26478: PUSH
26479: LD_VAR 0 2
26483: ST_TO_ADDR
// vc_control := control ;
26484: LD_ADDR_OWVAR 38
26488: PUSH
26489: LD_VAR 0 3
26493: ST_TO_ADDR
// vc_weapon := weapon ;
26494: LD_ADDR_OWVAR 40
26498: PUSH
26499: LD_VAR 0 4
26503: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26504: LD_ADDR_OWVAR 41
26508: PUSH
26509: LD_VAR 0 5
26513: ST_TO_ADDR
// end ;
26514: LD_VAR 0 6
26518: RET
// export function WantPlant ( unit ) ; var task ; begin
26519: LD_INT 0
26521: PPUSH
26522: PPUSH
// result := false ;
26523: LD_ADDR_VAR 0 2
26527: PUSH
26528: LD_INT 0
26530: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 437
26545: ST_TO_ADDR
// if task then
26546: LD_VAR 0 3
26550: IFFALSE 26578
// if task [ 1 ] [ 1 ] = p then
26552: LD_VAR 0 3
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PUSH
26565: LD_STRING p
26567: EQUAL
26568: IFFALSE 26578
// result := true ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_INT 1
26577: ST_TO_ADDR
// end ;
26578: LD_VAR 0 2
26582: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
26588: PPUSH
// if pos < 1 then
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: LESS
26597: IFFALSE 26601
// exit ;
26599: GO 26904
// if pos = 1 then
26601: LD_VAR 0 2
26605: PUSH
26606: LD_INT 1
26608: EQUAL
26609: IFFALSE 26642
// result := Replace ( arr , pos [ 1 ] , value ) else
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: LD_VAR 0 2
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PPUSH
26630: LD_VAR 0 3
26634: PPUSH
26635: CALL_OW 1
26639: ST_TO_ADDR
26640: GO 26904
// begin tmp := arr ;
26642: LD_ADDR_VAR 0 6
26646: PUSH
26647: LD_VAR 0 1
26651: ST_TO_ADDR
// s_arr := [ tmp ] ;
26652: LD_ADDR_VAR 0 7
26656: PUSH
26657: LD_VAR 0 6
26661: PUSH
26662: EMPTY
26663: LIST
26664: ST_TO_ADDR
// for i = 1 to pos - 1 do
26665: LD_ADDR_VAR 0 5
26669: PUSH
26670: DOUBLE
26671: LD_INT 1
26673: DEC
26674: ST_TO_ADDR
26675: LD_VAR 0 2
26679: PUSH
26680: LD_INT 1
26682: MINUS
26683: PUSH
26684: FOR_TO
26685: IFFALSE 26730
// begin tmp := tmp [ pos [ i ] ] ;
26687: LD_ADDR_VAR 0 6
26691: PUSH
26692: LD_VAR 0 6
26696: PUSH
26697: LD_VAR 0 2
26701: PUSH
26702: LD_VAR 0 5
26706: ARRAY
26707: ARRAY
26708: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26709: LD_ADDR_VAR 0 7
26713: PUSH
26714: LD_VAR 0 7
26718: PUSH
26719: LD_VAR 0 6
26723: PUSH
26724: EMPTY
26725: LIST
26726: ADD
26727: ST_TO_ADDR
// end ;
26728: GO 26684
26730: POP
26731: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 2
26746: PUSH
26747: LD_VAR 0 2
26751: ARRAY
26752: PPUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: CALL_OW 1
26762: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26763: LD_ADDR_VAR 0 7
26767: PUSH
26768: LD_VAR 0 7
26772: PPUSH
26773: LD_VAR 0 7
26777: PPUSH
26778: LD_VAR 0 6
26782: PPUSH
26783: CALL_OW 1
26787: ST_TO_ADDR
// for i = s_arr downto 2 do
26788: LD_ADDR_VAR 0 5
26792: PUSH
26793: DOUBLE
26794: LD_VAR 0 7
26798: INC
26799: ST_TO_ADDR
26800: LD_INT 2
26802: PUSH
26803: FOR_DOWNTO
26804: IFFALSE 26888
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26806: LD_ADDR_VAR 0 6
26810: PUSH
26811: LD_VAR 0 7
26815: PUSH
26816: LD_VAR 0 5
26820: PUSH
26821: LD_INT 1
26823: MINUS
26824: ARRAY
26825: PPUSH
26826: LD_VAR 0 2
26830: PUSH
26831: LD_VAR 0 5
26835: PUSH
26836: LD_INT 1
26838: MINUS
26839: ARRAY
26840: PPUSH
26841: LD_VAR 0 7
26845: PUSH
26846: LD_VAR 0 5
26850: ARRAY
26851: PPUSH
26852: CALL_OW 1
26856: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26857: LD_ADDR_VAR 0 7
26861: PUSH
26862: LD_VAR 0 7
26866: PPUSH
26867: LD_VAR 0 5
26871: PUSH
26872: LD_INT 1
26874: MINUS
26875: PPUSH
26876: LD_VAR 0 6
26880: PPUSH
26881: CALL_OW 1
26885: ST_TO_ADDR
// end ;
26886: GO 26803
26888: POP
26889: POP
// result := s_arr [ 1 ] ;
26890: LD_ADDR_VAR 0 4
26894: PUSH
26895: LD_VAR 0 7
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: ST_TO_ADDR
// end ; end ;
26904: LD_VAR 0 4
26908: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
// if not list then
26913: LD_VAR 0 1
26917: NOT
26918: IFFALSE 26922
// exit ;
26920: GO 27013
// i := list [ pos1 ] ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 1
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: ST_TO_ADDR
// if not i then
26938: LD_VAR 0 5
26942: NOT
26943: IFFALSE 26947
// exit ;
26945: GO 27013
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26947: LD_ADDR_VAR 0 1
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: LD_VAR 0 2
26961: PPUSH
26962: LD_VAR 0 1
26966: PUSH
26967: LD_VAR 0 3
26971: ARRAY
26972: PPUSH
26973: CALL_OW 1
26977: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: LD_VAR 0 3
26992: PPUSH
26993: LD_VAR 0 5
26997: PPUSH
26998: CALL_OW 1
27002: ST_TO_ADDR
// result := list ;
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: LD_VAR 0 1
27012: ST_TO_ADDR
// end ;
27013: LD_VAR 0 4
27017: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27018: LD_INT 0
27020: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27021: LD_ADDR_VAR 0 5
27025: PUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 250
27035: PPUSH
27036: LD_VAR 0 1
27040: PPUSH
27041: CALL_OW 251
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: LD_VAR 0 3
27055: PPUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL 27071 0 5
27065: ST_TO_ADDR
// end ;
27066: LD_VAR 0 5
27070: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
// if not list then
27077: LD_VAR 0 3
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27474
// result := [ ] ;
27086: LD_ADDR_VAR 0 6
27090: PUSH
27091: EMPTY
27092: ST_TO_ADDR
// for i in list do
27093: LD_ADDR_VAR 0 7
27097: PUSH
27098: LD_VAR 0 3
27102: PUSH
27103: FOR_IN
27104: IFFALSE 27306
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27106: LD_ADDR_VAR 0 9
27110: PUSH
27111: LD_VAR 0 7
27115: PPUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: LD_VAR 0 2
27125: PPUSH
27126: CALL_OW 297
27130: ST_TO_ADDR
// if not result then
27131: LD_VAR 0 6
27135: NOT
27136: IFFALSE 27162
// result := [ [ i , tmp ] ] else
27138: LD_ADDR_VAR 0 6
27142: PUSH
27143: LD_VAR 0 7
27147: PUSH
27148: LD_VAR 0 9
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: ST_TO_ADDR
27160: GO 27304
// begin if result [ result ] [ 2 ] < tmp then
27162: LD_VAR 0 6
27166: PUSH
27167: LD_VAR 0 6
27171: ARRAY
27172: PUSH
27173: LD_INT 2
27175: ARRAY
27176: PUSH
27177: LD_VAR 0 9
27181: LESS
27182: IFFALSE 27224
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27184: LD_ADDR_VAR 0 6
27188: PUSH
27189: LD_VAR 0 6
27193: PPUSH
27194: LD_VAR 0 6
27198: PUSH
27199: LD_INT 1
27201: PLUS
27202: PPUSH
27203: LD_VAR 0 7
27207: PUSH
27208: LD_VAR 0 9
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 2
27221: ST_TO_ADDR
27222: GO 27304
// for j = 1 to result do
27224: LD_ADDR_VAR 0 8
27228: PUSH
27229: DOUBLE
27230: LD_INT 1
27232: DEC
27233: ST_TO_ADDR
27234: LD_VAR 0 6
27238: PUSH
27239: FOR_TO
27240: IFFALSE 27302
// begin if tmp < result [ j ] [ 2 ] then
27242: LD_VAR 0 9
27246: PUSH
27247: LD_VAR 0 6
27251: PUSH
27252: LD_VAR 0 8
27256: ARRAY
27257: PUSH
27258: LD_INT 2
27260: ARRAY
27261: LESS
27262: IFFALSE 27300
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27264: LD_ADDR_VAR 0 6
27268: PUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_VAR 0 8
27278: PPUSH
27279: LD_VAR 0 7
27283: PUSH
27284: LD_VAR 0 9
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PPUSH
27293: CALL_OW 2
27297: ST_TO_ADDR
// break ;
27298: GO 27302
// end ; end ;
27300: GO 27239
27302: POP
27303: POP
// end ; end ;
27304: GO 27103
27306: POP
27307: POP
// if result and not asc then
27308: LD_VAR 0 6
27312: PUSH
27313: LD_VAR 0 4
27317: NOT
27318: AND
27319: IFFALSE 27394
// begin tmp := result ;
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_VAR 0 6
27330: ST_TO_ADDR
// for i = tmp downto 1 do
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: DOUBLE
27337: LD_VAR 0 9
27341: INC
27342: ST_TO_ADDR
27343: LD_INT 1
27345: PUSH
27346: FOR_DOWNTO
27347: IFFALSE 27392
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27349: LD_ADDR_VAR 0 6
27353: PUSH
27354: LD_VAR 0 6
27358: PPUSH
27359: LD_VAR 0 9
27363: PUSH
27364: LD_VAR 0 7
27368: MINUS
27369: PUSH
27370: LD_INT 1
27372: PLUS
27373: PPUSH
27374: LD_VAR 0 9
27378: PUSH
27379: LD_VAR 0 7
27383: ARRAY
27384: PPUSH
27385: CALL_OW 1
27389: ST_TO_ADDR
27390: GO 27346
27392: POP
27393: POP
// end ; tmp := [ ] ;
27394: LD_ADDR_VAR 0 9
27398: PUSH
27399: EMPTY
27400: ST_TO_ADDR
// if mode then
27401: LD_VAR 0 5
27405: IFFALSE 27474
// begin for i = 1 to result do
27407: LD_ADDR_VAR 0 7
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_VAR 0 6
27421: PUSH
27422: FOR_TO
27423: IFFALSE 27462
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27425: LD_ADDR_VAR 0 9
27429: PUSH
27430: LD_VAR 0 9
27434: PPUSH
27435: LD_VAR 0 7
27439: PPUSH
27440: LD_VAR 0 6
27444: PUSH
27445: LD_VAR 0 7
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: CALL_OW 1
27459: ST_TO_ADDR
27460: GO 27422
27462: POP
27463: POP
// result := tmp ;
27464: LD_ADDR_VAR 0 6
27468: PUSH
27469: LD_VAR 0 9
27473: ST_TO_ADDR
// end ; end ;
27474: LD_VAR 0 6
27478: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// if not x or not y then
27509: LD_VAR 0 2
27513: NOT
27514: PUSH
27515: LD_VAR 0 3
27519: NOT
27520: OR
27521: IFFALSE 27525
// exit ;
27523: GO 29171
// if not range then
27525: LD_VAR 0 4
27529: NOT
27530: IFFALSE 27540
// range := 10 ;
27532: LD_ADDR_VAR 0 4
27536: PUSH
27537: LD_INT 10
27539: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27540: LD_ADDR_VAR 0 8
27544: PUSH
27545: LD_INT 81
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 92
27559: PUSH
27560: LD_VAR 0 2
27564: PUSH
27565: LD_VAR 0 3
27569: PUSH
27570: LD_VAR 0 4
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 21
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: ST_TO_ADDR
// if not tmp then
27608: LD_VAR 0 8
27612: NOT
27613: IFFALSE 27617
// exit ;
27615: GO 29171
// for i in tmp do
27617: LD_ADDR_VAR 0 6
27621: PUSH
27622: LD_VAR 0 8
27626: PUSH
27627: FOR_IN
27628: IFFALSE 29146
// begin points := [ 0 , 0 , 0 ] ;
27630: LD_ADDR_VAR 0 9
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// bpoints := 1 ;
27649: LD_ADDR_VAR 0 10
27653: PUSH
27654: LD_INT 1
27656: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27657: LD_VAR 0 6
27661: PPUSH
27662: CALL_OW 247
27666: PUSH
27667: LD_INT 1
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 28253
27675: POP
// begin if GetClass ( i ) = 1 then
27676: LD_VAR 0 6
27680: PPUSH
27681: CALL_OW 257
27685: PUSH
27686: LD_INT 1
27688: EQUAL
27689: IFFALSE 27710
// points := [ 10 , 5 , 3 ] ;
27691: LD_ADDR_VAR 0 9
27695: PUSH
27696: LD_INT 10
27698: PUSH
27699: LD_INT 5
27701: PUSH
27702: LD_INT 3
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 257
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: LD_INT 4
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: IN
27734: IFFALSE 27755
// points := [ 3 , 2 , 1 ] ;
27736: LD_ADDR_VAR 0 9
27740: PUSH
27741: LD_INT 3
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27755: LD_VAR 0 6
27759: PPUSH
27760: CALL_OW 257
27764: PUSH
27765: LD_INT 5
27767: EQUAL
27768: IFFALSE 27789
// points := [ 130 , 5 , 2 ] ;
27770: LD_ADDR_VAR 0 9
27774: PUSH
27775: LD_INT 130
27777: PUSH
27778: LD_INT 5
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27789: LD_VAR 0 6
27793: PPUSH
27794: CALL_OW 257
27798: PUSH
27799: LD_INT 8
27801: EQUAL
27802: IFFALSE 27823
// points := [ 35 , 35 , 30 ] ;
27804: LD_ADDR_VAR 0 9
27808: PUSH
27809: LD_INT 35
27811: PUSH
27812: LD_INT 35
27814: PUSH
27815: LD_INT 30
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27823: LD_VAR 0 6
27827: PPUSH
27828: CALL_OW 257
27832: PUSH
27833: LD_INT 9
27835: EQUAL
27836: IFFALSE 27857
// points := [ 20 , 55 , 40 ] ;
27838: LD_ADDR_VAR 0 9
27842: PUSH
27843: LD_INT 20
27845: PUSH
27846: LD_INT 55
27848: PUSH
27849: LD_INT 40
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27857: LD_VAR 0 6
27861: PPUSH
27862: CALL_OW 257
27866: PUSH
27867: LD_INT 12
27869: PUSH
27870: LD_INT 16
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: IN
27877: IFFALSE 27898
// points := [ 5 , 3 , 2 ] ;
27879: LD_ADDR_VAR 0 9
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27898: LD_VAR 0 6
27902: PPUSH
27903: CALL_OW 257
27907: PUSH
27908: LD_INT 17
27910: EQUAL
27911: IFFALSE 27932
// points := [ 100 , 50 , 75 ] ;
27913: LD_ADDR_VAR 0 9
27917: PUSH
27918: LD_INT 100
27920: PUSH
27921: LD_INT 50
27923: PUSH
27924: LD_INT 75
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27932: LD_VAR 0 6
27936: PPUSH
27937: CALL_OW 257
27941: PUSH
27942: LD_INT 15
27944: EQUAL
27945: IFFALSE 27966
// points := [ 10 , 5 , 3 ] ;
27947: LD_ADDR_VAR 0 9
27951: PUSH
27952: LD_INT 10
27954: PUSH
27955: LD_INT 5
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27966: LD_VAR 0 6
27970: PPUSH
27971: CALL_OW 257
27975: PUSH
27976: LD_INT 14
27978: EQUAL
27979: IFFALSE 28000
// points := [ 10 , 0 , 0 ] ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_INT 10
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28000: LD_VAR 0 6
28004: PPUSH
28005: CALL_OW 257
28009: PUSH
28010: LD_INT 11
28012: EQUAL
28013: IFFALSE 28034
// points := [ 30 , 10 , 5 ] ;
28015: LD_ADDR_VAR 0 9
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 10
28025: PUSH
28026: LD_INT 5
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28034: LD_VAR 0 1
28038: PPUSH
28039: LD_INT 5
28041: PPUSH
28042: CALL_OW 321
28046: PUSH
28047: LD_INT 2
28049: EQUAL
28050: IFFALSE 28067
// bpoints := bpoints * 1.8 ;
28052: LD_ADDR_VAR 0 10
28056: PUSH
28057: LD_VAR 0 10
28061: PUSH
28062: LD_REAL  1.80000000000000E+0000
28065: MUL
28066: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28067: LD_VAR 0 6
28071: PPUSH
28072: CALL_OW 257
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: IN
28095: PUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_INT 51
28103: PPUSH
28104: CALL_OW 321
28108: PUSH
28109: LD_INT 2
28111: EQUAL
28112: AND
28113: IFFALSE 28130
// bpoints := bpoints * 1.2 ;
28115: LD_ADDR_VAR 0 10
28119: PUSH
28120: LD_VAR 0 10
28124: PUSH
28125: LD_REAL  1.20000000000000E+0000
28128: MUL
28129: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28130: LD_VAR 0 6
28134: PPUSH
28135: CALL_OW 257
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: LD_INT 7
28145: PUSH
28146: LD_INT 9
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: IN
28154: PUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_INT 52
28162: PPUSH
28163: CALL_OW 321
28167: PUSH
28168: LD_INT 2
28170: EQUAL
28171: AND
28172: IFFALSE 28189
// bpoints := bpoints * 1.5 ;
28174: LD_ADDR_VAR 0 10
28178: PUSH
28179: LD_VAR 0 10
28183: PUSH
28184: LD_REAL  1.50000000000000E+0000
28187: MUL
28188: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_INT 66
28196: PPUSH
28197: CALL_OW 321
28201: PUSH
28202: LD_INT 2
28204: EQUAL
28205: IFFALSE 28222
// bpoints := bpoints * 1.1 ;
28207: LD_ADDR_VAR 0 10
28211: PUSH
28212: LD_VAR 0 10
28216: PUSH
28217: LD_REAL  1.10000000000000E+0000
28220: MUL
28221: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28222: LD_ADDR_VAR 0 10
28226: PUSH
28227: LD_VAR 0 10
28231: PUSH
28232: LD_VAR 0 6
28236: PPUSH
28237: LD_INT 1
28239: PPUSH
28240: CALL_OW 259
28244: PUSH
28245: LD_REAL  1.15000000000000E+0000
28248: MUL
28249: MUL
28250: ST_TO_ADDR
// end ; unit_vehicle :
28251: GO 29075
28253: LD_INT 2
28255: DOUBLE
28256: EQUAL
28257: IFTRUE 28261
28259: GO 29063
28261: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28262: LD_VAR 0 6
28266: PPUSH
28267: CALL_OW 264
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 42
28277: PUSH
28278: LD_INT 24
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: IN
28286: IFFALSE 28307
// points := [ 25 , 5 , 3 ] ;
28288: LD_ADDR_VAR 0 9
28292: PUSH
28293: LD_INT 25
28295: PUSH
28296: LD_INT 5
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28307: LD_VAR 0 6
28311: PPUSH
28312: CALL_OW 264
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: LD_INT 43
28322: PUSH
28323: LD_INT 25
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: IN
28331: IFFALSE 28352
// points := [ 40 , 15 , 5 ] ;
28333: LD_ADDR_VAR 0 9
28337: PUSH
28338: LD_INT 40
28340: PUSH
28341: LD_INT 15
28343: PUSH
28344: LD_INT 5
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28352: LD_VAR 0 6
28356: PPUSH
28357: CALL_OW 264
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: LD_INT 23
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: IN
28372: IFFALSE 28393
// points := [ 7 , 25 , 8 ] ;
28374: LD_ADDR_VAR 0 9
28378: PUSH
28379: LD_INT 7
28381: PUSH
28382: LD_INT 25
28384: PUSH
28385: LD_INT 8
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28393: LD_VAR 0 6
28397: PPUSH
28398: CALL_OW 264
28402: PUSH
28403: LD_INT 5
28405: PUSH
28406: LD_INT 27
28408: PUSH
28409: LD_INT 44
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: IN
28417: IFFALSE 28438
// points := [ 14 , 50 , 16 ] ;
28419: LD_ADDR_VAR 0 9
28423: PUSH
28424: LD_INT 14
28426: PUSH
28427: LD_INT 50
28429: PUSH
28430: LD_INT 16
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28438: LD_VAR 0 6
28442: PPUSH
28443: CALL_OW 264
28447: PUSH
28448: LD_INT 6
28450: PUSH
28451: LD_INT 46
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: IN
28458: IFFALSE 28479
// points := [ 32 , 120 , 70 ] ;
28460: LD_ADDR_VAR 0 9
28464: PUSH
28465: LD_INT 32
28467: PUSH
28468: LD_INT 120
28470: PUSH
28471: LD_INT 70
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28479: LD_VAR 0 6
28483: PPUSH
28484: CALL_OW 264
28488: PUSH
28489: LD_INT 7
28491: PUSH
28492: LD_INT 28
28494: PUSH
28495: LD_INT 45
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: IN
28503: IFFALSE 28524
// points := [ 35 , 20 , 45 ] ;
28505: LD_ADDR_VAR 0 9
28509: PUSH
28510: LD_INT 35
28512: PUSH
28513: LD_INT 20
28515: PUSH
28516: LD_INT 45
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28524: LD_VAR 0 6
28528: PPUSH
28529: CALL_OW 264
28533: PUSH
28534: LD_INT 47
28536: PUSH
28537: EMPTY
28538: LIST
28539: IN
28540: IFFALSE 28561
// points := [ 67 , 45 , 75 ] ;
28542: LD_ADDR_VAR 0 9
28546: PUSH
28547: LD_INT 67
28549: PUSH
28550: LD_INT 45
28552: PUSH
28553: LD_INT 75
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28561: LD_VAR 0 6
28565: PPUSH
28566: CALL_OW 264
28570: PUSH
28571: LD_INT 26
28573: PUSH
28574: EMPTY
28575: LIST
28576: IN
28577: IFFALSE 28598
// points := [ 120 , 30 , 80 ] ;
28579: LD_ADDR_VAR 0 9
28583: PUSH
28584: LD_INT 120
28586: PUSH
28587: LD_INT 30
28589: PUSH
28590: LD_INT 80
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28598: LD_VAR 0 6
28602: PPUSH
28603: CALL_OW 264
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: EMPTY
28612: LIST
28613: IN
28614: IFFALSE 28635
// points := [ 40 , 1 , 1 ] ;
28616: LD_ADDR_VAR 0 9
28620: PUSH
28621: LD_INT 40
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28635: LD_VAR 0 6
28639: PPUSH
28640: CALL_OW 264
28644: PUSH
28645: LD_INT 29
28647: PUSH
28648: EMPTY
28649: LIST
28650: IN
28651: IFFALSE 28672
// points := [ 70 , 200 , 400 ] ;
28653: LD_ADDR_VAR 0 9
28657: PUSH
28658: LD_INT 70
28660: PUSH
28661: LD_INT 200
28663: PUSH
28664: LD_INT 400
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28672: LD_VAR 0 6
28676: PPUSH
28677: CALL_OW 264
28681: PUSH
28682: LD_INT 14
28684: PUSH
28685: LD_INT 53
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: IN
28692: IFFALSE 28713
// points := [ 40 , 10 , 20 ] ;
28694: LD_ADDR_VAR 0 9
28698: PUSH
28699: LD_INT 40
28701: PUSH
28702: LD_INT 10
28704: PUSH
28705: LD_INT 20
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28713: LD_VAR 0 6
28717: PPUSH
28718: CALL_OW 264
28722: PUSH
28723: LD_INT 9
28725: PUSH
28726: EMPTY
28727: LIST
28728: IN
28729: IFFALSE 28750
// points := [ 5 , 70 , 20 ] ;
28731: LD_ADDR_VAR 0 9
28735: PUSH
28736: LD_INT 5
28738: PUSH
28739: LD_INT 70
28741: PUSH
28742: LD_INT 20
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28750: LD_VAR 0 6
28754: PPUSH
28755: CALL_OW 264
28759: PUSH
28760: LD_INT 10
28762: PUSH
28763: EMPTY
28764: LIST
28765: IN
28766: IFFALSE 28787
// points := [ 35 , 110 , 70 ] ;
28768: LD_ADDR_VAR 0 9
28772: PUSH
28773: LD_INT 35
28775: PUSH
28776: LD_INT 110
28778: PUSH
28779: LD_INT 70
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28787: LD_VAR 0 6
28791: PPUSH
28792: CALL_OW 265
28796: PUSH
28797: LD_INT 25
28799: EQUAL
28800: IFFALSE 28821
// points := [ 80 , 65 , 100 ] ;
28802: LD_ADDR_VAR 0 9
28806: PUSH
28807: LD_INT 80
28809: PUSH
28810: LD_INT 65
28812: PUSH
28813: LD_INT 100
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28821: LD_VAR 0 6
28825: PPUSH
28826: CALL_OW 263
28830: PUSH
28831: LD_INT 1
28833: EQUAL
28834: IFFALSE 28869
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28836: LD_ADDR_VAR 0 10
28840: PUSH
28841: LD_VAR 0 10
28845: PUSH
28846: LD_VAR 0 6
28850: PPUSH
28851: CALL_OW 311
28855: PPUSH
28856: LD_INT 3
28858: PPUSH
28859: CALL_OW 259
28863: PUSH
28864: LD_INT 4
28866: MUL
28867: MUL
28868: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28869: LD_VAR 0 6
28873: PPUSH
28874: CALL_OW 263
28878: PUSH
28879: LD_INT 2
28881: EQUAL
28882: IFFALSE 28933
// begin j := IsControledBy ( i ) ;
28884: LD_ADDR_VAR 0 7
28888: PUSH
28889: LD_VAR 0 6
28893: PPUSH
28894: CALL_OW 312
28898: ST_TO_ADDR
// if j then
28899: LD_VAR 0 7
28903: IFFALSE 28933
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28905: LD_ADDR_VAR 0 10
28909: PUSH
28910: LD_VAR 0 10
28914: PUSH
28915: LD_VAR 0 7
28919: PPUSH
28920: LD_INT 3
28922: PPUSH
28923: CALL_OW 259
28927: PUSH
28928: LD_INT 3
28930: MUL
28931: MUL
28932: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28933: LD_VAR 0 6
28937: PPUSH
28938: CALL_OW 264
28942: PUSH
28943: LD_INT 5
28945: PUSH
28946: LD_INT 6
28948: PUSH
28949: LD_INT 46
28951: PUSH
28952: LD_INT 44
28954: PUSH
28955: LD_INT 47
28957: PUSH
28958: LD_INT 45
28960: PUSH
28961: LD_INT 28
28963: PUSH
28964: LD_INT 7
28966: PUSH
28967: LD_INT 27
28969: PUSH
28970: LD_INT 29
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: IN
28985: PUSH
28986: LD_VAR 0 1
28990: PPUSH
28991: LD_INT 52
28993: PPUSH
28994: CALL_OW 321
28998: PUSH
28999: LD_INT 2
29001: EQUAL
29002: AND
29003: IFFALSE 29020
// bpoints := bpoints * 1.2 ;
29005: LD_ADDR_VAR 0 10
29009: PUSH
29010: LD_VAR 0 10
29014: PUSH
29015: LD_REAL  1.20000000000000E+0000
29018: MUL
29019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29020: LD_VAR 0 6
29024: PPUSH
29025: CALL_OW 264
29029: PUSH
29030: LD_INT 6
29032: PUSH
29033: LD_INT 46
29035: PUSH
29036: LD_INT 47
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: IN
29044: IFFALSE 29061
// bpoints := bpoints * 1.2 ;
29046: LD_ADDR_VAR 0 10
29050: PUSH
29051: LD_VAR 0 10
29055: PUSH
29056: LD_REAL  1.20000000000000E+0000
29059: MUL
29060: ST_TO_ADDR
// end ; unit_building :
29061: GO 29075
29063: LD_INT 3
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29074
29071: POP
// ; end ;
29072: GO 29075
29074: POP
// for j = 1 to 3 do
29075: LD_ADDR_VAR 0 7
29079: PUSH
29080: DOUBLE
29081: LD_INT 1
29083: DEC
29084: ST_TO_ADDR
29085: LD_INT 3
29087: PUSH
29088: FOR_TO
29089: IFFALSE 29142
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29091: LD_ADDR_VAR 0 5
29095: PUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: LD_VAR 0 7
29105: PPUSH
29106: LD_VAR 0 5
29110: PUSH
29111: LD_VAR 0 7
29115: ARRAY
29116: PUSH
29117: LD_VAR 0 9
29121: PUSH
29122: LD_VAR 0 7
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 10
29132: MUL
29133: PLUS
29134: PPUSH
29135: CALL_OW 1
29139: ST_TO_ADDR
29140: GO 29088
29142: POP
29143: POP
// end ;
29144: GO 27627
29146: POP
29147: POP
// result := Replace ( result , 4 , tmp ) ;
29148: LD_ADDR_VAR 0 5
29152: PUSH
29153: LD_VAR 0 5
29157: PPUSH
29158: LD_INT 4
29160: PPUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: CALL_OW 1
29170: ST_TO_ADDR
// end ;
29171: LD_VAR 0 5
29175: RET
// export function DangerAtRange ( unit , range ) ; begin
29176: LD_INT 0
29178: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29179: LD_ADDR_VAR 0 3
29183: PUSH
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 255
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 250
29203: PPUSH
29204: LD_VAR 0 1
29208: PPUSH
29209: CALL_OW 251
29213: PPUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: CALL 27479 0 4
29223: ST_TO_ADDR
// end ;
29224: LD_VAR 0 3
29228: RET
// export function DangerInArea ( side , area ) ; begin
29229: LD_INT 0
29231: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 2
29241: PPUSH
29242: LD_INT 81
29244: PUSH
29245: LD_VAR 0 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PPUSH
29254: CALL_OW 70
29258: ST_TO_ADDR
// end ;
29259: LD_VAR 0 3
29263: RET
// export function IsExtension ( b ) ; begin
29264: LD_INT 0
29266: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: LD_VAR 0 1
29276: PUSH
29277: LD_INT 23
29279: PUSH
29280: LD_INT 20
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_INT 17
29288: PUSH
29289: LD_INT 24
29291: PUSH
29292: LD_INT 21
29294: PUSH
29295: LD_INT 19
29297: PUSH
29298: LD_INT 16
29300: PUSH
29301: LD_INT 25
29303: PUSH
29304: LD_INT 18
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: IN
29319: ST_TO_ADDR
// end ;
29320: LD_VAR 0 2
29324: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
29329: PPUSH
// result := [ ] ;
29330: LD_ADDR_VAR 0 3
29334: PUSH
29335: EMPTY
29336: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29337: LD_ADDR_VAR 0 4
29341: PUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_INT 21
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 70
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 4
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29429
// for i in tmp do
29371: LD_ADDR_VAR 0 5
29375: PUSH
29376: LD_VAR 0 4
29380: PUSH
29381: FOR_IN
29382: IFFALSE 29417
// if GetBase ( i ) <> base then
29384: LD_VAR 0 5
29388: PPUSH
29389: CALL_OW 274
29393: PUSH
29394: LD_VAR 0 1
29398: NONEQUAL
29399: IFFALSE 29415
// ComLinkToBase ( base , i ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_VAR 0 5
29410: PPUSH
29411: CALL_OW 169
29415: GO 29381
29417: POP
29418: POP
// result := tmp ;
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_VAR 0 4
29428: ST_TO_ADDR
// end ;
29429: LD_VAR 0 3
29433: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29434: LD_INT 0
29436: PPUSH
29437: PPUSH
// if BuildingStatus ( b ) = bs_build then
29438: LD_VAR 0 2
29442: PPUSH
29443: CALL_OW 461
29447: PUSH
29448: LD_INT 1
29450: EQUAL
29451: IFFALSE 29511
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29453: LD_VAR 0 1
29457: PPUSH
29458: LD_STRING h
29460: PUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: CALL_OW 250
29470: PUSH
29471: LD_VAR 0 2
29475: PPUSH
29476: CALL_OW 251
29480: PUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: PPUSH
29507: CALL_OW 446
// end ;
29511: LD_VAR 0 3
29515: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29524: LD_VAR 0 1
29528: NOT
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 263
29539: PUSH
29540: LD_INT 2
29542: EQUAL
29543: NOT
29544: OR
29545: IFFALSE 29549
// exit ;
29547: GO 29865
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_INT 22
29556: PUSH
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 255
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 36
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 34
29586: PUSH
29587: LD_INT 31
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 6
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29865
// result := [ ] ;
29617: LD_ADDR_VAR 0 2
29621: PUSH
29622: EMPTY
29623: ST_TO_ADDR
// for i in tmp do
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_VAR 0 6
29633: PUSH
29634: FOR_IN
29635: IFFALSE 29706
// begin t := UnitsInside ( i ) ;
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_VAR 0 3
29646: PPUSH
29647: CALL_OW 313
29651: ST_TO_ADDR
// if t then
29652: LD_VAR 0 4
29656: IFFALSE 29704
// for j in t do
29658: LD_ADDR_VAR 0 7
29662: PUSH
29663: LD_VAR 0 4
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29702
// result := Insert ( result , result + 1 , j ) ;
29671: LD_ADDR_VAR 0 2
29675: PUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: LD_VAR 0 2
29685: PUSH
29686: LD_INT 1
29688: PLUS
29689: PPUSH
29690: LD_VAR 0 7
29694: PPUSH
29695: CALL_OW 2
29699: ST_TO_ADDR
29700: GO 29668
29702: POP
29703: POP
// end ;
29704: GO 29634
29706: POP
29707: POP
// if not result then
29708: LD_VAR 0 2
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29865
// mech := result [ 1 ] ;
29717: LD_ADDR_VAR 0 5
29721: PUSH
29722: LD_VAR 0 2
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: ST_TO_ADDR
// if result > 1 then
29731: LD_VAR 0 2
29735: PUSH
29736: LD_INT 1
29738: GREATER
29739: IFFALSE 29851
// for i = 2 to result do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: DOUBLE
29747: LD_INT 2
29749: DEC
29750: ST_TO_ADDR
29751: LD_VAR 0 2
29755: PUSH
29756: FOR_TO
29757: IFFALSE 29849
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29759: LD_ADDR_VAR 0 4
29763: PUSH
29764: LD_VAR 0 2
29768: PUSH
29769: LD_VAR 0 3
29773: ARRAY
29774: PPUSH
29775: LD_INT 3
29777: PPUSH
29778: CALL_OW 259
29782: PUSH
29783: LD_VAR 0 2
29787: PUSH
29788: LD_VAR 0 3
29792: ARRAY
29793: PPUSH
29794: CALL_OW 432
29798: MINUS
29799: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 5
29809: PPUSH
29810: LD_INT 3
29812: PPUSH
29813: CALL_OW 259
29817: PUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: CALL_OW 432
29827: MINUS
29828: GREATEREQUAL
29829: IFFALSE 29847
// mech := result [ i ] ;
29831: LD_ADDR_VAR 0 5
29835: PUSH
29836: LD_VAR 0 2
29840: PUSH
29841: LD_VAR 0 3
29845: ARRAY
29846: ST_TO_ADDR
// end ;
29847: GO 29756
29849: POP
29850: POP
// ComLinkTo ( vehicle , mech ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_VAR 0 5
29860: PPUSH
29861: CALL_OW 135
// end ;
29865: LD_VAR 0 2
29869: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
// result := [ ] ;
29885: LD_ADDR_VAR 0 7
29889: PUSH
29890: EMPTY
29891: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29892: LD_VAR 0 1
29896: PPUSH
29897: CALL_OW 266
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: IN
29912: NOT
29913: IFFALSE 29917
// exit ;
29915: GO 31548
// if name then
29917: LD_VAR 0 3
29921: IFFALSE 29937
// SetBName ( base_dep , name ) ;
29923: LD_VAR 0 1
29927: PPUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: CALL_OW 500
// base := GetBase ( base_dep ) ;
29937: LD_ADDR_VAR 0 15
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 274
29951: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29952: LD_ADDR_VAR 0 16
29956: PUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 255
29966: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29967: LD_ADDR_VAR 0 17
29971: PUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 248
29981: ST_TO_ADDR
// if sources then
29982: LD_VAR 0 5
29986: IFFALSE 30033
// for i = 1 to 3 do
29988: LD_ADDR_VAR 0 8
29992: PUSH
29993: DOUBLE
29994: LD_INT 1
29996: DEC
29997: ST_TO_ADDR
29998: LD_INT 3
30000: PUSH
30001: FOR_TO
30002: IFFALSE 30031
// AddResourceType ( base , i , sources [ i ] ) ;
30004: LD_VAR 0 15
30008: PPUSH
30009: LD_VAR 0 8
30013: PPUSH
30014: LD_VAR 0 5
30018: PUSH
30019: LD_VAR 0 8
30023: ARRAY
30024: PPUSH
30025: CALL_OW 276
30029: GO 30001
30031: POP
30032: POP
// buildings := GetBaseBuildings ( base , area ) ;
30033: LD_ADDR_VAR 0 18
30037: PUSH
30038: LD_VAR 0 15
30042: PPUSH
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL 29325 0 2
30052: ST_TO_ADDR
// InitHc ;
30053: CALL_OW 19
// InitUc ;
30057: CALL_OW 18
// uc_side := side ;
30061: LD_ADDR_OWVAR 20
30065: PUSH
30066: LD_VAR 0 16
30070: ST_TO_ADDR
// uc_nation := nation ;
30071: LD_ADDR_OWVAR 21
30075: PUSH
30076: LD_VAR 0 17
30080: ST_TO_ADDR
// if buildings then
30081: LD_VAR 0 18
30085: IFFALSE 31407
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30087: LD_ADDR_VAR 0 19
30091: PUSH
30092: LD_VAR 0 18
30096: PPUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 29
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 30
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 72
30129: ST_TO_ADDR
// if tmp then
30130: LD_VAR 0 19
30134: IFFALSE 30182
// for i in tmp do
30136: LD_ADDR_VAR 0 8
30140: PUSH
30141: LD_VAR 0 19
30145: PUSH
30146: FOR_IN
30147: IFFALSE 30180
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30149: LD_VAR 0 8
30153: PPUSH
30154: CALL_OW 250
30158: PPUSH
30159: LD_VAR 0 8
30163: PPUSH
30164: CALL_OW 251
30168: PPUSH
30169: LD_VAR 0 16
30173: PPUSH
30174: CALL_OW 441
30178: GO 30146
30180: POP
30181: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30182: LD_VAR 0 18
30186: PPUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 30
30192: PUSH
30193: LD_INT 32
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 30
30202: PUSH
30203: LD_INT 33
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: PPUSH
30215: CALL_OW 72
30219: IFFALSE 30307
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30221: LD_ADDR_VAR 0 8
30225: PUSH
30226: LD_VAR 0 18
30230: PPUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 32
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 33
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 72
30263: PUSH
30264: FOR_IN
30265: IFFALSE 30305
// begin if not GetBWeapon ( i ) then
30267: LD_VAR 0 8
30271: PPUSH
30272: CALL_OW 269
30276: NOT
30277: IFFALSE 30303
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30279: LD_VAR 0 8
30283: PPUSH
30284: LD_VAR 0 8
30288: PPUSH
30289: LD_VAR 0 2
30293: PPUSH
30294: CALL 31553 0 2
30298: PPUSH
30299: CALL_OW 431
// end ;
30303: GO 30264
30305: POP
30306: POP
// end ; for i = 1 to personel do
30307: LD_ADDR_VAR 0 8
30311: PUSH
30312: DOUBLE
30313: LD_INT 1
30315: DEC
30316: ST_TO_ADDR
30317: LD_VAR 0 6
30321: PUSH
30322: FOR_TO
30323: IFFALSE 31387
// begin if i > 4 then
30325: LD_VAR 0 8
30329: PUSH
30330: LD_INT 4
30332: GREATER
30333: IFFALSE 30337
// break ;
30335: GO 31387
// case i of 1 :
30337: LD_VAR 0 8
30341: PUSH
30342: LD_INT 1
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30430
30350: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30351: LD_ADDR_VAR 0 12
30355: PUSH
30356: LD_VAR 0 18
30360: PPUSH
30361: LD_INT 22
30363: PUSH
30364: LD_VAR 0 16
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 58
30375: PUSH
30376: EMPTY
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 30
30384: PUSH
30385: LD_INT 32
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 30
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 30
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 72
30427: ST_TO_ADDR
30428: GO 30652
30430: LD_INT 2
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30500
30438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30439: LD_ADDR_VAR 0 12
30443: PUSH
30444: LD_VAR 0 18
30448: PPUSH
30449: LD_INT 22
30451: PUSH
30452: LD_VAR 0 16
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PPUSH
30493: CALL_OW 72
30497: ST_TO_ADDR
30498: GO 30652
30500: LD_INT 3
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30570
30508: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30509: LD_ADDR_VAR 0 12
30513: PUSH
30514: LD_VAR 0 18
30518: PPUSH
30519: LD_INT 22
30521: PUSH
30522: LD_VAR 0 16
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 30
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 72
30567: ST_TO_ADDR
30568: GO 30652
30570: LD_INT 4
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30651
30578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30579: LD_ADDR_VAR 0 12
30583: PUSH
30584: LD_VAR 0 18
30588: PPUSH
30589: LD_INT 22
30591: PUSH
30592: LD_VAR 0 16
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 30
30606: PUSH
30607: LD_INT 6
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 30
30616: PUSH
30617: LD_INT 7
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 8
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 72
30648: ST_TO_ADDR
30649: GO 30652
30651: POP
// if i = 1 then
30652: LD_VAR 0 8
30656: PUSH
30657: LD_INT 1
30659: EQUAL
30660: IFFALSE 30771
// begin tmp := [ ] ;
30662: LD_ADDR_VAR 0 19
30666: PUSH
30667: EMPTY
30668: ST_TO_ADDR
// for j in f do
30669: LD_ADDR_VAR 0 9
30673: PUSH
30674: LD_VAR 0 12
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30753
// if GetBType ( j ) = b_bunker then
30682: LD_VAR 0 9
30686: PPUSH
30687: CALL_OW 266
30691: PUSH
30692: LD_INT 32
30694: EQUAL
30695: IFFALSE 30722
// tmp := Insert ( tmp , 1 , j ) else
30697: LD_ADDR_VAR 0 19
30701: PUSH
30702: LD_VAR 0 19
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 9
30714: PPUSH
30715: CALL_OW 2
30719: ST_TO_ADDR
30720: GO 30751
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30722: LD_ADDR_VAR 0 19
30726: PUSH
30727: LD_VAR 0 19
30731: PPUSH
30732: LD_VAR 0 19
30736: PUSH
30737: LD_INT 1
30739: PLUS
30740: PPUSH
30741: LD_VAR 0 9
30745: PPUSH
30746: CALL_OW 2
30750: ST_TO_ADDR
30751: GO 30679
30753: POP
30754: POP
// if tmp then
30755: LD_VAR 0 19
30759: IFFALSE 30771
// f := tmp ;
30761: LD_ADDR_VAR 0 12
30765: PUSH
30766: LD_VAR 0 19
30770: ST_TO_ADDR
// end ; x := personel [ i ] ;
30771: LD_ADDR_VAR 0 13
30775: PUSH
30776: LD_VAR 0 6
30780: PUSH
30781: LD_VAR 0 8
30785: ARRAY
30786: ST_TO_ADDR
// if x = - 1 then
30787: LD_VAR 0 13
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: EQUAL
30796: IFFALSE 31005
// begin for j in f do
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_VAR 0 12
30807: PUSH
30808: FOR_IN
30809: IFFALSE 31001
// repeat InitHc ;
30811: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30815: LD_VAR 0 9
30819: PPUSH
30820: CALL_OW 266
30824: PUSH
30825: LD_INT 5
30827: EQUAL
30828: IFFALSE 30898
// begin if UnitsInside ( j ) < 3 then
30830: LD_VAR 0 9
30834: PPUSH
30835: CALL_OW 313
30839: PUSH
30840: LD_INT 3
30842: LESS
30843: IFFALSE 30879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30845: LD_INT 0
30847: PPUSH
30848: LD_INT 5
30850: PUSH
30851: LD_INT 8
30853: PUSH
30854: LD_INT 9
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_VAR 0 17
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 4
30872: PPUSH
30873: CALL_OW 380
30877: GO 30896
// PrepareHuman ( false , i , skill ) ;
30879: LD_INT 0
30881: PPUSH
30882: LD_VAR 0 8
30886: PPUSH
30887: LD_VAR 0 4
30891: PPUSH
30892: CALL_OW 380
// end else
30896: GO 30915
// PrepareHuman ( false , i , skill ) ;
30898: LD_INT 0
30900: PPUSH
30901: LD_VAR 0 8
30905: PPUSH
30906: LD_VAR 0 4
30910: PPUSH
30911: CALL_OW 380
// un := CreateHuman ;
30915: LD_ADDR_VAR 0 14
30919: PUSH
30920: CALL_OW 44
30924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30925: LD_ADDR_VAR 0 7
30929: PUSH
30930: LD_VAR 0 7
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: LD_VAR 0 14
30942: PPUSH
30943: CALL_OW 2
30947: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30948: LD_VAR 0 14
30952: PPUSH
30953: LD_VAR 0 9
30957: PPUSH
30958: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30962: LD_VAR 0 9
30966: PPUSH
30967: CALL_OW 313
30971: PUSH
30972: LD_INT 6
30974: EQUAL
30975: PUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: CALL_OW 266
30985: PUSH
30986: LD_INT 32
30988: PUSH
30989: LD_INT 31
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: IN
30996: OR
30997: IFFALSE 30811
30999: GO 30808
31001: POP
31002: POP
// end else
31003: GO 31385
// for j = 1 to x do
31005: LD_ADDR_VAR 0 9
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_VAR 0 13
31019: PUSH
31020: FOR_TO
31021: IFFALSE 31383
// begin InitHc ;
31023: CALL_OW 19
// if not f then
31027: LD_VAR 0 12
31031: NOT
31032: IFFALSE 31121
// begin PrepareHuman ( false , i , skill ) ;
31034: LD_INT 0
31036: PPUSH
31037: LD_VAR 0 8
31041: PPUSH
31042: LD_VAR 0 4
31046: PPUSH
31047: CALL_OW 380
// un := CreateHuman ;
31051: LD_ADDR_VAR 0 14
31055: PUSH
31056: CALL_OW 44
31060: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31061: LD_ADDR_VAR 0 7
31065: PUSH
31066: LD_VAR 0 7
31070: PPUSH
31071: LD_INT 1
31073: PPUSH
31074: LD_VAR 0 14
31078: PPUSH
31079: CALL_OW 2
31083: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31084: LD_VAR 0 14
31088: PPUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 250
31098: PPUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 251
31108: PPUSH
31109: LD_INT 10
31111: PPUSH
31112: LD_INT 0
31114: PPUSH
31115: CALL_OW 50
// continue ;
31119: GO 31020
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31121: LD_VAR 0 12
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: PPUSH
31130: CALL_OW 313
31134: PUSH
31135: LD_VAR 0 12
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: CALL_OW 266
31148: PUSH
31149: LD_INT 32
31151: PUSH
31152: LD_INT 31
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: IN
31159: AND
31160: PUSH
31161: LD_VAR 0 12
31165: PUSH
31166: LD_INT 1
31168: ARRAY
31169: PPUSH
31170: CALL_OW 313
31174: PUSH
31175: LD_INT 6
31177: EQUAL
31178: OR
31179: IFFALSE 31199
// f := Delete ( f , 1 ) ;
31181: LD_ADDR_VAR 0 12
31185: PUSH
31186: LD_VAR 0 12
31190: PPUSH
31191: LD_INT 1
31193: PPUSH
31194: CALL_OW 3
31198: ST_TO_ADDR
// if not f then
31199: LD_VAR 0 12
31203: NOT
31204: IFFALSE 31222
// begin x := x + 2 ;
31206: LD_ADDR_VAR 0 13
31210: PUSH
31211: LD_VAR 0 13
31215: PUSH
31216: LD_INT 2
31218: PLUS
31219: ST_TO_ADDR
// continue ;
31220: GO 31020
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31222: LD_VAR 0 12
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: CALL_OW 266
31235: PUSH
31236: LD_INT 5
31238: EQUAL
31239: IFFALSE 31313
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31241: LD_VAR 0 12
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: CALL_OW 313
31254: PUSH
31255: LD_INT 3
31257: LESS
31258: IFFALSE 31294
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31260: LD_INT 0
31262: PPUSH
31263: LD_INT 5
31265: PUSH
31266: LD_INT 8
31268: PUSH
31269: LD_INT 9
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: LD_VAR 0 17
31281: ARRAY
31282: PPUSH
31283: LD_VAR 0 4
31287: PPUSH
31288: CALL_OW 380
31292: GO 31311
// PrepareHuman ( false , i , skill ) ;
31294: LD_INT 0
31296: PPUSH
31297: LD_VAR 0 8
31301: PPUSH
31302: LD_VAR 0 4
31306: PPUSH
31307: CALL_OW 380
// end else
31311: GO 31330
// PrepareHuman ( false , i , skill ) ;
31313: LD_INT 0
31315: PPUSH
31316: LD_VAR 0 8
31320: PPUSH
31321: LD_VAR 0 4
31325: PPUSH
31326: CALL_OW 380
// un := CreateHuman ;
31330: LD_ADDR_VAR 0 14
31334: PUSH
31335: CALL_OW 44
31339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31340: LD_ADDR_VAR 0 7
31344: PUSH
31345: LD_VAR 0 7
31349: PPUSH
31350: LD_INT 1
31352: PPUSH
31353: LD_VAR 0 14
31357: PPUSH
31358: CALL_OW 2
31362: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31363: LD_VAR 0 14
31367: PPUSH
31368: LD_VAR 0 12
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: CALL_OW 52
// end ;
31381: GO 31020
31383: POP
31384: POP
// end ;
31385: GO 30322
31387: POP
31388: POP
// result := result ^ buildings ;
31389: LD_ADDR_VAR 0 7
31393: PUSH
31394: LD_VAR 0 7
31398: PUSH
31399: LD_VAR 0 18
31403: ADD
31404: ST_TO_ADDR
// end else
31405: GO 31548
// begin for i = 1 to personel do
31407: LD_ADDR_VAR 0 8
31411: PUSH
31412: DOUBLE
31413: LD_INT 1
31415: DEC
31416: ST_TO_ADDR
31417: LD_VAR 0 6
31421: PUSH
31422: FOR_TO
31423: IFFALSE 31546
// begin if i > 4 then
31425: LD_VAR 0 8
31429: PUSH
31430: LD_INT 4
31432: GREATER
31433: IFFALSE 31437
// break ;
31435: GO 31546
// x := personel [ i ] ;
31437: LD_ADDR_VAR 0 13
31441: PUSH
31442: LD_VAR 0 6
31446: PUSH
31447: LD_VAR 0 8
31451: ARRAY
31452: ST_TO_ADDR
// if x = - 1 then
31453: LD_VAR 0 13
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: EQUAL
31462: IFFALSE 31466
// continue ;
31464: GO 31422
// PrepareHuman ( false , i , skill ) ;
31466: LD_INT 0
31468: PPUSH
31469: LD_VAR 0 8
31473: PPUSH
31474: LD_VAR 0 4
31478: PPUSH
31479: CALL_OW 380
// un := CreateHuman ;
31483: LD_ADDR_VAR 0 14
31487: PUSH
31488: CALL_OW 44
31492: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31493: LD_VAR 0 14
31497: PPUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 250
31507: PPUSH
31508: LD_VAR 0 1
31512: PPUSH
31513: CALL_OW 251
31517: PPUSH
31518: LD_INT 10
31520: PPUSH
31521: LD_INT 0
31523: PPUSH
31524: CALL_OW 50
// result := result ^ un ;
31528: LD_ADDR_VAR 0 7
31532: PUSH
31533: LD_VAR 0 7
31537: PUSH
31538: LD_VAR 0 14
31542: ADD
31543: ST_TO_ADDR
// end ;
31544: GO 31422
31546: POP
31547: POP
// end ; end ;
31548: LD_VAR 0 7
31552: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31553: LD_INT 0
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
31563: PPUSH
31564: PPUSH
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// result := false ;
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_INT 0
31578: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31579: LD_VAR 0 1
31583: NOT
31584: PUSH
31585: LD_VAR 0 1
31589: PPUSH
31590: CALL_OW 266
31594: PUSH
31595: LD_INT 32
31597: PUSH
31598: LD_INT 33
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: IN
31605: NOT
31606: OR
31607: IFFALSE 31611
// exit ;
31609: GO 32747
// nat := GetNation ( tower ) ;
31611: LD_ADDR_VAR 0 12
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 248
31625: ST_TO_ADDR
// side := GetSide ( tower ) ;
31626: LD_ADDR_VAR 0 16
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 255
31640: ST_TO_ADDR
// x := GetX ( tower ) ;
31641: LD_ADDR_VAR 0 10
31645: PUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 250
31655: ST_TO_ADDR
// y := GetY ( tower ) ;
31656: LD_ADDR_VAR 0 11
31660: PUSH
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 251
31670: ST_TO_ADDR
// if not x or not y then
31671: LD_VAR 0 10
31675: NOT
31676: PUSH
31677: LD_VAR 0 11
31681: NOT
31682: OR
31683: IFFALSE 31687
// exit ;
31685: GO 32747
// weapon := 0 ;
31687: LD_ADDR_VAR 0 18
31691: PUSH
31692: LD_INT 0
31694: ST_TO_ADDR
// fac_list := [ ] ;
31695: LD_ADDR_VAR 0 17
31699: PUSH
31700: EMPTY
31701: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31702: LD_ADDR_VAR 0 6
31706: PUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: CALL_OW 274
31716: PPUSH
31717: LD_VAR 0 2
31721: PPUSH
31722: CALL 29325 0 2
31726: PPUSH
31727: LD_INT 30
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PPUSH
31737: CALL_OW 72
31741: ST_TO_ADDR
// if not factories then
31742: LD_VAR 0 6
31746: NOT
31747: IFFALSE 31751
// exit ;
31749: GO 32747
// for i in factories do
31751: LD_ADDR_VAR 0 8
31755: PUSH
31756: LD_VAR 0 6
31760: PUSH
31761: FOR_IN
31762: IFFALSE 31787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31764: LD_ADDR_VAR 0 17
31768: PUSH
31769: LD_VAR 0 17
31773: PUSH
31774: LD_VAR 0 8
31778: PPUSH
31779: CALL_OW 478
31783: UNION
31784: ST_TO_ADDR
31785: GO 31761
31787: POP
31788: POP
// if not fac_list then
31789: LD_VAR 0 17
31793: NOT
31794: IFFALSE 31798
// exit ;
31796: GO 32747
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31798: LD_ADDR_VAR 0 5
31802: PUSH
31803: LD_INT 4
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: LD_INT 9
31811: PUSH
31812: LD_INT 10
31814: PUSH
31815: LD_INT 6
31817: PUSH
31818: LD_INT 7
31820: PUSH
31821: LD_INT 11
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 27
31835: PUSH
31836: LD_INT 28
31838: PUSH
31839: LD_INT 26
31841: PUSH
31842: LD_INT 30
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 43
31853: PUSH
31854: LD_INT 44
31856: PUSH
31857: LD_INT 46
31859: PUSH
31860: LD_INT 45
31862: PUSH
31863: LD_INT 47
31865: PUSH
31866: LD_INT 49
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PUSH
31882: LD_VAR 0 12
31886: ARRAY
31887: ST_TO_ADDR
// for i in list do
31888: LD_ADDR_VAR 0 8
31892: PUSH
31893: LD_VAR 0 5
31897: PUSH
31898: FOR_IN
31899: IFFALSE 31932
// if not i in fac_list then
31901: LD_VAR 0 8
31905: PUSH
31906: LD_VAR 0 17
31910: IN
31911: NOT
31912: IFFALSE 31930
// list := list diff i ;
31914: LD_ADDR_VAR 0 5
31918: PUSH
31919: LD_VAR 0 5
31923: PUSH
31924: LD_VAR 0 8
31928: DIFF
31929: ST_TO_ADDR
31930: GO 31898
31932: POP
31933: POP
// if not list then
31934: LD_VAR 0 5
31938: NOT
31939: IFFALSE 31943
// exit ;
31941: GO 32747
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31943: LD_VAR 0 12
31947: PUSH
31948: LD_INT 3
31950: EQUAL
31951: PUSH
31952: LD_INT 49
31954: PUSH
31955: LD_VAR 0 5
31959: IN
31960: AND
31961: PUSH
31962: LD_INT 31
31964: PPUSH
31965: LD_VAR 0 16
31969: PPUSH
31970: CALL_OW 321
31974: PUSH
31975: LD_INT 2
31977: EQUAL
31978: AND
31979: IFFALSE 32039
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31981: LD_INT 22
31983: PUSH
31984: LD_VAR 0 16
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 35
31995: PUSH
31996: LD_INT 49
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 91
32005: PUSH
32006: LD_VAR 0 1
32010: PUSH
32011: LD_INT 10
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: PPUSH
32024: CALL_OW 69
32028: NOT
32029: IFFALSE 32039
// weapon := ru_time_lapser ;
32031: LD_ADDR_VAR 0 18
32035: PUSH
32036: LD_INT 49
32038: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32039: LD_VAR 0 12
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: IN
32054: PUSH
32055: LD_INT 11
32057: PUSH
32058: LD_VAR 0 5
32062: IN
32063: PUSH
32064: LD_INT 30
32066: PUSH
32067: LD_VAR 0 5
32071: IN
32072: OR
32073: AND
32074: PUSH
32075: LD_INT 6
32077: PPUSH
32078: LD_VAR 0 16
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32094: LD_INT 22
32096: PUSH
32097: LD_VAR 0 16
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 35
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 35
32121: PUSH
32122: LD_INT 30
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 91
32136: PUSH
32137: LD_VAR 0 1
32141: PUSH
32142: LD_INT 18
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: PPUSH
32155: CALL_OW 69
32159: NOT
32160: PUSH
32161: LD_INT 22
32163: PUSH
32164: LD_VAR 0 16
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 30
32178: PUSH
32179: LD_INT 32
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 30
32188: PUSH
32189: LD_INT 33
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 91
32203: PUSH
32204: LD_VAR 0 1
32208: PUSH
32209: LD_INT 12
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: PUSH
32230: LD_INT 2
32232: GREATER
32233: AND
32234: IFFALSE 32257
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32236: LD_ADDR_VAR 0 18
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: LD_INT 30
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_VAR 0 12
32255: ARRAY
32256: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32257: LD_VAR 0 18
32261: NOT
32262: PUSH
32263: LD_INT 40
32265: PPUSH
32266: LD_VAR 0 16
32270: PPUSH
32271: CALL_OW 321
32275: PUSH
32276: LD_INT 2
32278: EQUAL
32279: AND
32280: PUSH
32281: LD_INT 7
32283: PUSH
32284: LD_VAR 0 5
32288: IN
32289: PUSH
32290: LD_INT 28
32292: PUSH
32293: LD_VAR 0 5
32297: IN
32298: OR
32299: PUSH
32300: LD_INT 45
32302: PUSH
32303: LD_VAR 0 5
32307: IN
32308: OR
32309: AND
32310: IFFALSE 32564
// begin hex := GetHexInfo ( x , y ) ;
32312: LD_ADDR_VAR 0 4
32316: PUSH
32317: LD_VAR 0 10
32321: PPUSH
32322: LD_VAR 0 11
32326: PPUSH
32327: CALL_OW 546
32331: ST_TO_ADDR
// if hex [ 1 ] then
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 1
32339: ARRAY
32340: IFFALSE 32344
// exit ;
32342: GO 32747
// height := hex [ 2 ] ;
32344: LD_ADDR_VAR 0 15
32348: PUSH
32349: LD_VAR 0 4
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32358: LD_ADDR_VAR 0 14
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 3
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// for i in tmp do
32381: LD_ADDR_VAR 0 8
32385: PUSH
32386: LD_VAR 0 14
32390: PUSH
32391: FOR_IN
32392: IFFALSE 32562
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_VAR 0 10
32403: PPUSH
32404: LD_VAR 0 8
32408: PPUSH
32409: LD_INT 5
32411: PPUSH
32412: CALL_OW 272
32416: PUSH
32417: LD_VAR 0 11
32421: PPUSH
32422: LD_VAR 0 8
32426: PPUSH
32427: LD_INT 5
32429: PPUSH
32430: CALL_OW 273
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32439: LD_VAR 0 9
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: PPUSH
32448: LD_VAR 0 9
32452: PUSH
32453: LD_INT 2
32455: ARRAY
32456: PPUSH
32457: CALL_OW 488
32461: IFFALSE 32560
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32463: LD_ADDR_VAR 0 4
32467: PUSH
32468: LD_VAR 0 9
32472: PUSH
32473: LD_INT 1
32475: ARRAY
32476: PPUSH
32477: LD_VAR 0 9
32481: PUSH
32482: LD_INT 2
32484: ARRAY
32485: PPUSH
32486: CALL_OW 546
32490: ST_TO_ADDR
// if hex [ 1 ] then
32491: LD_VAR 0 4
32495: PUSH
32496: LD_INT 1
32498: ARRAY
32499: IFFALSE 32503
// continue ;
32501: GO 32391
// h := hex [ 2 ] ;
32503: LD_ADDR_VAR 0 13
32507: PUSH
32508: LD_VAR 0 4
32512: PUSH
32513: LD_INT 2
32515: ARRAY
32516: ST_TO_ADDR
// if h + 7 < height then
32517: LD_VAR 0 13
32521: PUSH
32522: LD_INT 7
32524: PLUS
32525: PUSH
32526: LD_VAR 0 15
32530: LESS
32531: IFFALSE 32560
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32533: LD_ADDR_VAR 0 18
32537: PUSH
32538: LD_INT 7
32540: PUSH
32541: LD_INT 28
32543: PUSH
32544: LD_INT 45
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: PUSH
32552: LD_VAR 0 12
32556: ARRAY
32557: ST_TO_ADDR
// break ;
32558: GO 32562
// end ; end ; end ;
32560: GO 32391
32562: POP
32563: POP
// end ; if not weapon then
32564: LD_VAR 0 18
32568: NOT
32569: IFFALSE 32629
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32571: LD_ADDR_VAR 0 5
32575: PUSH
32576: LD_VAR 0 5
32580: PUSH
32581: LD_INT 11
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 49
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: DIFF
32595: ST_TO_ADDR
// if not list then
32596: LD_VAR 0 5
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 32747
// weapon := list [ rand ( 1 , list ) ] ;
32605: LD_ADDR_VAR 0 18
32609: PUSH
32610: LD_VAR 0 5
32614: PUSH
32615: LD_INT 1
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: CALL_OW 12
32627: ARRAY
32628: ST_TO_ADDR
// end ; if weapon then
32629: LD_VAR 0 18
32633: IFFALSE 32747
// begin tmp := CostOfWeapon ( weapon ) ;
32635: LD_ADDR_VAR 0 14
32639: PUSH
32640: LD_VAR 0 18
32644: PPUSH
32645: CALL_OW 451
32649: ST_TO_ADDR
// j := GetBase ( tower ) ;
32650: LD_ADDR_VAR 0 9
32654: PUSH
32655: LD_VAR 0 1
32659: PPUSH
32660: CALL_OW 274
32664: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32665: LD_VAR 0 9
32669: PPUSH
32670: LD_INT 1
32672: PPUSH
32673: CALL_OW 275
32677: PUSH
32678: LD_VAR 0 14
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: GREATEREQUAL
32687: PUSH
32688: LD_VAR 0 9
32692: PPUSH
32693: LD_INT 2
32695: PPUSH
32696: CALL_OW 275
32700: PUSH
32701: LD_VAR 0 14
32705: PUSH
32706: LD_INT 2
32708: ARRAY
32709: GREATEREQUAL
32710: AND
32711: PUSH
32712: LD_VAR 0 9
32716: PPUSH
32717: LD_INT 3
32719: PPUSH
32720: CALL_OW 275
32724: PUSH
32725: LD_VAR 0 14
32729: PUSH
32730: LD_INT 3
32732: ARRAY
32733: GREATEREQUAL
32734: AND
32735: IFFALSE 32747
// result := weapon ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_VAR 0 18
32746: ST_TO_ADDR
// end ; end ;
32747: LD_VAR 0 3
32751: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
// result := true ;
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 1
32763: ST_TO_ADDR
// if array1 = array2 then
32764: LD_VAR 0 1
32768: PUSH
32769: LD_VAR 0 2
32773: EQUAL
32774: IFFALSE 32834
// begin for i = 1 to array1 do
32776: LD_ADDR_VAR 0 4
32780: PUSH
32781: DOUBLE
32782: LD_INT 1
32784: DEC
32785: ST_TO_ADDR
32786: LD_VAR 0 1
32790: PUSH
32791: FOR_TO
32792: IFFALSE 32830
// if array1 [ i ] <> array2 [ i ] then
32794: LD_VAR 0 1
32798: PUSH
32799: LD_VAR 0 4
32803: ARRAY
32804: PUSH
32805: LD_VAR 0 2
32809: PUSH
32810: LD_VAR 0 4
32814: ARRAY
32815: NONEQUAL
32816: IFFALSE 32828
// begin result := false ;
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 0
32825: ST_TO_ADDR
// break ;
32826: GO 32830
// end ;
32828: GO 32791
32830: POP
32831: POP
// end else
32832: GO 32842
// result := false ;
32834: LD_ADDR_VAR 0 3
32838: PUSH
32839: LD_INT 0
32841: ST_TO_ADDR
// end ;
32842: LD_VAR 0 3
32846: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
32851: PPUSH
// pom := GetBase ( fac ) ;
32852: LD_ADDR_VAR 0 5
32856: PUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 274
32866: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32867: LD_ADDR_VAR 0 4
32871: PUSH
32872: LD_VAR 0 2
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: PPUSH
32881: LD_VAR 0 2
32885: PUSH
32886: LD_INT 2
32888: ARRAY
32889: PPUSH
32890: LD_VAR 0 2
32894: PUSH
32895: LD_INT 3
32897: ARRAY
32898: PPUSH
32899: LD_VAR 0 2
32903: PUSH
32904: LD_INT 4
32906: ARRAY
32907: PPUSH
32908: CALL_OW 449
32912: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_VAR 0 5
32922: PPUSH
32923: LD_INT 1
32925: PPUSH
32926: CALL_OW 275
32930: PUSH
32931: LD_VAR 0 4
32935: PUSH
32936: LD_INT 1
32938: ARRAY
32939: GREATEREQUAL
32940: PUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_INT 2
32948: PPUSH
32949: CALL_OW 275
32953: PUSH
32954: LD_VAR 0 4
32958: PUSH
32959: LD_INT 2
32961: ARRAY
32962: GREATEREQUAL
32963: AND
32964: PUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: LD_INT 3
32972: PPUSH
32973: CALL_OW 275
32977: PUSH
32978: LD_VAR 0 4
32982: PUSH
32983: LD_INT 3
32985: ARRAY
32986: GREATEREQUAL
32987: AND
32988: ST_TO_ADDR
// end ;
32989: LD_VAR 0 3
32993: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32994: LD_INT 0
32996: PPUSH
32997: PPUSH
32998: PPUSH
32999: PPUSH
// pom := GetBase ( building ) ;
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 274
33014: ST_TO_ADDR
// if not pom then
33015: LD_VAR 0 3
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33194
// btype := GetBType ( building ) ;
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 266
33038: ST_TO_ADDR
// if btype = b_armoury then
33039: LD_VAR 0 5
33043: PUSH
33044: LD_INT 4
33046: EQUAL
33047: IFFALSE 33057
// btype := b_barracks ;
33049: LD_ADDR_VAR 0 5
33053: PUSH
33054: LD_INT 5
33056: ST_TO_ADDR
// if btype = b_depot then
33057: LD_VAR 0 5
33061: PUSH
33062: LD_INT 0
33064: EQUAL
33065: IFFALSE 33075
// btype := b_warehouse ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_INT 1
33074: ST_TO_ADDR
// if btype = b_workshop then
33075: LD_VAR 0 5
33079: PUSH
33080: LD_INT 2
33082: EQUAL
33083: IFFALSE 33093
// btype := b_factory ;
33085: LD_ADDR_VAR 0 5
33089: PUSH
33090: LD_INT 3
33092: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33093: LD_ADDR_VAR 0 4
33097: PUSH
33098: LD_VAR 0 5
33102: PPUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 248
33112: PPUSH
33113: CALL_OW 450
33117: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_VAR 0 3
33127: PPUSH
33128: LD_INT 1
33130: PPUSH
33131: CALL_OW 275
33135: PUSH
33136: LD_VAR 0 4
33140: PUSH
33141: LD_INT 1
33143: ARRAY
33144: GREATEREQUAL
33145: PUSH
33146: LD_VAR 0 3
33150: PPUSH
33151: LD_INT 2
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: GREATEREQUAL
33168: AND
33169: PUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: LD_INT 3
33177: PPUSH
33178: CALL_OW 275
33182: PUSH
33183: LD_VAR 0 4
33187: PUSH
33188: LD_INT 3
33190: ARRAY
33191: GREATEREQUAL
33192: AND
33193: ST_TO_ADDR
// end ;
33194: LD_VAR 0 2
33198: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33199: LD_INT 0
33201: PPUSH
33202: PPUSH
33203: PPUSH
// pom := GetBase ( building ) ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 274
33218: ST_TO_ADDR
// if not pom then
33219: LD_VAR 0 4
33223: NOT
33224: IFFALSE 33228
// exit ;
33226: GO 33329
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33228: LD_ADDR_VAR 0 5
33232: PUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 1
33242: PPUSH
33243: CALL_OW 248
33247: PPUSH
33248: CALL_OW 450
33252: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_VAR 0 4
33262: PPUSH
33263: LD_INT 1
33265: PPUSH
33266: CALL_OW 275
33270: PUSH
33271: LD_VAR 0 5
33275: PUSH
33276: LD_INT 1
33278: ARRAY
33279: GREATEREQUAL
33280: PUSH
33281: LD_VAR 0 4
33285: PPUSH
33286: LD_INT 2
33288: PPUSH
33289: CALL_OW 275
33293: PUSH
33294: LD_VAR 0 5
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: GREATEREQUAL
33303: AND
33304: PUSH
33305: LD_VAR 0 4
33309: PPUSH
33310: LD_INT 3
33312: PPUSH
33313: CALL_OW 275
33317: PUSH
33318: LD_VAR 0 5
33322: PUSH
33323: LD_INT 3
33325: ARRAY
33326: GREATEREQUAL
33327: AND
33328: ST_TO_ADDR
// end ;
33329: LD_VAR 0 3
33333: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33334: LD_INT 0
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
// result := false ;
33346: LD_ADDR_VAR 0 6
33350: PUSH
33351: LD_INT 0
33353: ST_TO_ADDR
// if not base or not btype or not x or not y then
33354: LD_VAR 0 1
33358: NOT
33359: PUSH
33360: LD_VAR 0 2
33364: NOT
33365: OR
33366: PUSH
33367: LD_VAR 0 3
33371: NOT
33372: OR
33373: PUSH
33374: LD_VAR 0 4
33378: NOT
33379: OR
33380: IFFALSE 33384
// exit ;
33382: GO 33993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33384: LD_ADDR_VAR 0 12
33388: PUSH
33389: LD_VAR 0 2
33393: PPUSH
33394: LD_VAR 0 3
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: LD_VAR 0 5
33408: PPUSH
33409: LD_VAR 0 1
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: PPUSH
33418: CALL_OW 248
33422: PPUSH
33423: LD_INT 0
33425: PPUSH
33426: CALL 34830 0 6
33430: ST_TO_ADDR
// if not hexes then
33431: LD_VAR 0 12
33435: NOT
33436: IFFALSE 33440
// exit ;
33438: GO 33993
// for i = 1 to hexes do
33440: LD_ADDR_VAR 0 7
33444: PUSH
33445: DOUBLE
33446: LD_INT 1
33448: DEC
33449: ST_TO_ADDR
33450: LD_VAR 0 12
33454: PUSH
33455: FOR_TO
33456: IFFALSE 33991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33458: LD_ADDR_VAR 0 11
33462: PUSH
33463: LD_VAR 0 12
33467: PUSH
33468: LD_VAR 0 7
33472: ARRAY
33473: PUSH
33474: LD_INT 1
33476: ARRAY
33477: PPUSH
33478: LD_VAR 0 12
33482: PUSH
33483: LD_VAR 0 7
33487: ARRAY
33488: PUSH
33489: LD_INT 2
33491: ARRAY
33492: PPUSH
33493: CALL_OW 428
33497: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33498: LD_VAR 0 12
33502: PUSH
33503: LD_VAR 0 7
33507: ARRAY
33508: PUSH
33509: LD_INT 1
33511: ARRAY
33512: PPUSH
33513: LD_VAR 0 12
33517: PUSH
33518: LD_VAR 0 7
33522: ARRAY
33523: PUSH
33524: LD_INT 2
33526: ARRAY
33527: PPUSH
33528: CALL_OW 351
33532: PUSH
33533: LD_VAR 0 12
33537: PUSH
33538: LD_VAR 0 7
33542: ARRAY
33543: PUSH
33544: LD_INT 1
33546: ARRAY
33547: PPUSH
33548: LD_VAR 0 12
33552: PUSH
33553: LD_VAR 0 7
33557: ARRAY
33558: PUSH
33559: LD_INT 2
33561: ARRAY
33562: PPUSH
33563: CALL_OW 488
33567: NOT
33568: OR
33569: PUSH
33570: LD_VAR 0 11
33574: PPUSH
33575: CALL_OW 247
33579: PUSH
33580: LD_INT 3
33582: EQUAL
33583: OR
33584: IFFALSE 33590
// exit ;
33586: POP
33587: POP
33588: GO 33993
// if not tmp or not tmp in base then
33590: LD_VAR 0 11
33594: NOT
33595: PUSH
33596: LD_VAR 0 11
33600: PUSH
33601: LD_VAR 0 1
33605: IN
33606: NOT
33607: OR
33608: IFFALSE 33612
// continue ;
33610: GO 33455
// result := true ;
33612: LD_ADDR_VAR 0 6
33616: PUSH
33617: LD_INT 1
33619: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33620: LD_ADDR_VAR 0 15
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: LD_INT 22
33632: PUSH
33633: LD_VAR 0 11
33637: PPUSH
33638: CALL_OW 255
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 30
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL_OW 72
33683: ST_TO_ADDR
// if dep then
33684: LD_VAR 0 15
33688: IFFALSE 33824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33690: LD_ADDR_VAR 0 14
33694: PUSH
33695: LD_VAR 0 15
33699: PUSH
33700: LD_INT 1
33702: ARRAY
33703: PPUSH
33704: CALL_OW 250
33708: PPUSH
33709: LD_VAR 0 15
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: PPUSH
33718: CALL_OW 254
33722: PPUSH
33723: LD_INT 5
33725: PPUSH
33726: CALL_OW 272
33730: PUSH
33731: LD_VAR 0 15
33735: PUSH
33736: LD_INT 1
33738: ARRAY
33739: PPUSH
33740: CALL_OW 251
33744: PPUSH
33745: LD_VAR 0 15
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: PPUSH
33754: CALL_OW 254
33758: PPUSH
33759: LD_INT 5
33761: PPUSH
33762: CALL_OW 273
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33771: LD_VAR 0 14
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PPUSH
33780: LD_VAR 0 14
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: PPUSH
33789: CALL_OW 488
33793: IFFALSE 33824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33795: LD_VAR 0 11
33799: PPUSH
33800: LD_VAR 0 14
33804: PUSH
33805: LD_INT 1
33807: ARRAY
33808: PPUSH
33809: LD_VAR 0 14
33813: PUSH
33814: LD_INT 2
33816: ARRAY
33817: PPUSH
33818: CALL_OW 111
// continue ;
33822: GO 33455
// end ; end ; r := GetDir ( tmp ) ;
33824: LD_ADDR_VAR 0 13
33828: PUSH
33829: LD_VAR 0 11
33833: PPUSH
33834: CALL_OW 254
33838: ST_TO_ADDR
// if r = 5 then
33839: LD_VAR 0 13
33843: PUSH
33844: LD_INT 5
33846: EQUAL
33847: IFFALSE 33857
// r := 0 ;
33849: LD_ADDR_VAR 0 13
33853: PUSH
33854: LD_INT 0
33856: ST_TO_ADDR
// for j = r to 5 do
33857: LD_ADDR_VAR 0 8
33861: PUSH
33862: DOUBLE
33863: LD_VAR 0 13
33867: DEC
33868: ST_TO_ADDR
33869: LD_INT 5
33871: PUSH
33872: FOR_TO
33873: IFFALSE 33987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_VAR 0 11
33884: PPUSH
33885: CALL_OW 250
33889: PPUSH
33890: LD_VAR 0 8
33894: PPUSH
33895: LD_INT 2
33897: PPUSH
33898: CALL_OW 272
33902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33903: LD_ADDR_VAR 0 10
33907: PUSH
33908: LD_VAR 0 11
33912: PPUSH
33913: CALL_OW 251
33917: PPUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_INT 2
33925: PPUSH
33926: CALL_OW 273
33930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33931: LD_VAR 0 9
33935: PPUSH
33936: LD_VAR 0 10
33940: PPUSH
33941: CALL_OW 488
33945: PUSH
33946: LD_VAR 0 9
33950: PPUSH
33951: LD_VAR 0 10
33955: PPUSH
33956: CALL_OW 428
33960: NOT
33961: AND
33962: IFFALSE 33985
// begin ComMoveXY ( tmp , _x , _y ) ;
33964: LD_VAR 0 11
33968: PPUSH
33969: LD_VAR 0 9
33973: PPUSH
33974: LD_VAR 0 10
33978: PPUSH
33979: CALL_OW 111
// break ;
33983: GO 33987
// end ; end ;
33985: GO 33872
33987: POP
33988: POP
// end ;
33989: GO 33455
33991: POP
33992: POP
// end ;
33993: LD_VAR 0 6
33997: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
34007: PPUSH
34008: PPUSH
34009: PPUSH
// result := false ;
34010: LD_ADDR_VAR 0 6
34014: PUSH
34015: LD_INT 0
34017: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34018: LD_VAR 0 1
34022: NOT
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 266
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: IN
34044: NOT
34045: OR
34046: PUSH
34047: LD_VAR 0 2
34051: NOT
34052: OR
34053: PUSH
34054: LD_VAR 0 5
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 4
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: IN
34085: NOT
34086: OR
34087: PUSH
34088: LD_VAR 0 3
34092: PPUSH
34093: LD_VAR 0 4
34097: PPUSH
34098: CALL_OW 488
34102: NOT
34103: OR
34104: IFFALSE 34108
// exit ;
34106: GO 34825
// pom := GetBase ( depot ) ;
34108: LD_ADDR_VAR 0 10
34112: PUSH
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 274
34122: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34123: LD_ADDR_VAR 0 11
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 248
34142: PPUSH
34143: CALL_OW 450
34147: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34148: LD_VAR 0 10
34152: PPUSH
34153: LD_INT 1
34155: PPUSH
34156: CALL_OW 275
34160: PUSH
34161: LD_VAR 0 11
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: GREATEREQUAL
34170: PUSH
34171: LD_VAR 0 10
34175: PPUSH
34176: LD_INT 2
34178: PPUSH
34179: CALL_OW 275
34183: PUSH
34184: LD_VAR 0 11
34188: PUSH
34189: LD_INT 2
34191: ARRAY
34192: GREATEREQUAL
34193: AND
34194: PUSH
34195: LD_VAR 0 10
34199: PPUSH
34200: LD_INT 3
34202: PPUSH
34203: CALL_OW 275
34207: PUSH
34208: LD_VAR 0 11
34212: PUSH
34213: LD_INT 3
34215: ARRAY
34216: GREATEREQUAL
34217: AND
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34825
// if GetBType ( depot ) = b_depot then
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 266
34232: PUSH
34233: LD_INT 0
34235: EQUAL
34236: IFFALSE 34248
// dist := 28 else
34238: LD_ADDR_VAR 0 14
34242: PUSH
34243: LD_INT 28
34245: ST_TO_ADDR
34246: GO 34256
// dist := 36 ;
34248: LD_ADDR_VAR 0 14
34252: PUSH
34253: LD_INT 36
34255: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 3
34265: PPUSH
34266: LD_VAR 0 4
34270: PPUSH
34271: CALL_OW 297
34275: PUSH
34276: LD_VAR 0 14
34280: GREATER
34281: IFFALSE 34285
// exit ;
34283: GO 34825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34285: LD_ADDR_VAR 0 12
34289: PUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: LD_VAR 0 5
34309: PPUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 248
34319: PPUSH
34320: LD_INT 0
34322: PPUSH
34323: CALL 34830 0 6
34327: ST_TO_ADDR
// if not hexes then
34328: LD_VAR 0 12
34332: NOT
34333: IFFALSE 34337
// exit ;
34335: GO 34825
// hex := GetHexInfo ( x , y ) ;
34337: LD_ADDR_VAR 0 15
34341: PUSH
34342: LD_VAR 0 3
34346: PPUSH
34347: LD_VAR 0 4
34351: PPUSH
34352: CALL_OW 546
34356: ST_TO_ADDR
// if hex [ 1 ] then
34357: LD_VAR 0 15
34361: PUSH
34362: LD_INT 1
34364: ARRAY
34365: IFFALSE 34369
// exit ;
34367: GO 34825
// height := hex [ 2 ] ;
34369: LD_ADDR_VAR 0 13
34373: PUSH
34374: LD_VAR 0 15
34378: PUSH
34379: LD_INT 2
34381: ARRAY
34382: ST_TO_ADDR
// for i = 1 to hexes do
34383: LD_ADDR_VAR 0 7
34387: PUSH
34388: DOUBLE
34389: LD_INT 1
34391: DEC
34392: ST_TO_ADDR
34393: LD_VAR 0 12
34397: PUSH
34398: FOR_TO
34399: IFFALSE 34729
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34401: LD_VAR 0 12
34405: PUSH
34406: LD_VAR 0 7
34410: ARRAY
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: LD_VAR 0 12
34420: PUSH
34421: LD_VAR 0 7
34425: ARRAY
34426: PUSH
34427: LD_INT 2
34429: ARRAY
34430: PPUSH
34431: CALL_OW 488
34435: NOT
34436: PUSH
34437: LD_VAR 0 12
34441: PUSH
34442: LD_VAR 0 7
34446: ARRAY
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: PPUSH
34452: LD_VAR 0 12
34456: PUSH
34457: LD_VAR 0 7
34461: ARRAY
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: PPUSH
34467: CALL_OW 428
34471: PUSH
34472: LD_INT 0
34474: GREATER
34475: OR
34476: PUSH
34477: LD_VAR 0 12
34481: PUSH
34482: LD_VAR 0 7
34486: ARRAY
34487: PUSH
34488: LD_INT 1
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 12
34496: PUSH
34497: LD_VAR 0 7
34501: ARRAY
34502: PUSH
34503: LD_INT 2
34505: ARRAY
34506: PPUSH
34507: CALL_OW 351
34511: OR
34512: IFFALSE 34518
// exit ;
34514: POP
34515: POP
34516: GO 34825
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34518: LD_ADDR_VAR 0 8
34522: PUSH
34523: LD_VAR 0 12
34527: PUSH
34528: LD_VAR 0 7
34532: ARRAY
34533: PUSH
34534: LD_INT 1
34536: ARRAY
34537: PPUSH
34538: LD_VAR 0 12
34542: PUSH
34543: LD_VAR 0 7
34547: ARRAY
34548: PUSH
34549: LD_INT 2
34551: ARRAY
34552: PPUSH
34553: CALL_OW 546
34557: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34558: LD_VAR 0 8
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PUSH
34567: LD_VAR 0 8
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: PUSH
34576: LD_VAR 0 13
34580: PUSH
34581: LD_INT 2
34583: PLUS
34584: GREATER
34585: OR
34586: PUSH
34587: LD_VAR 0 8
34591: PUSH
34592: LD_INT 2
34594: ARRAY
34595: PUSH
34596: LD_VAR 0 13
34600: PUSH
34601: LD_INT 2
34603: MINUS
34604: LESS
34605: OR
34606: PUSH
34607: LD_VAR 0 8
34611: PUSH
34612: LD_INT 3
34614: ARRAY
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 8
34621: PUSH
34622: LD_INT 9
34624: PUSH
34625: LD_INT 10
34627: PUSH
34628: LD_INT 11
34630: PUSH
34631: LD_INT 12
34633: PUSH
34634: LD_INT 13
34636: PUSH
34637: LD_INT 16
34639: PUSH
34640: LD_INT 17
34642: PUSH
34643: LD_INT 18
34645: PUSH
34646: LD_INT 19
34648: PUSH
34649: LD_INT 20
34651: PUSH
34652: LD_INT 21
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: IN
34670: NOT
34671: OR
34672: PUSH
34673: LD_VAR 0 8
34677: PUSH
34678: LD_INT 5
34680: ARRAY
34681: NOT
34682: OR
34683: PUSH
34684: LD_VAR 0 8
34688: PUSH
34689: LD_INT 6
34691: ARRAY
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 7
34701: PUSH
34702: LD_INT 9
34704: PUSH
34705: LD_INT 10
34707: PUSH
34708: LD_INT 11
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: IN
34719: NOT
34720: OR
34721: IFFALSE 34727
// exit ;
34723: POP
34724: POP
34725: GO 34825
// end ;
34727: GO 34398
34729: POP
34730: POP
// side := GetSide ( depot ) ;
34731: LD_ADDR_VAR 0 9
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 255
34745: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34746: LD_VAR 0 9
34750: PPUSH
34751: LD_VAR 0 3
34755: PPUSH
34756: LD_VAR 0 4
34760: PPUSH
34761: LD_INT 20
34763: PPUSH
34764: CALL 27479 0 4
34768: PUSH
34769: LD_INT 4
34771: ARRAY
34772: IFFALSE 34776
// exit ;
34774: GO 34825
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34776: LD_VAR 0 2
34780: PUSH
34781: LD_INT 29
34783: PUSH
34784: LD_INT 30
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: IN
34791: PUSH
34792: LD_VAR 0 3
34796: PPUSH
34797: LD_VAR 0 4
34801: PPUSH
34802: LD_VAR 0 9
34806: PPUSH
34807: CALL_OW 440
34811: NOT
34812: AND
34813: IFFALSE 34817
// exit ;
34815: GO 34825
// result := true ;
34817: LD_ADDR_VAR 0 6
34821: PUSH
34822: LD_INT 1
34824: ST_TO_ADDR
// end ;
34825: LD_VAR 0 6
34829: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
34866: PPUSH
34867: PPUSH
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
// result = [ ] ;
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: EMPTY
34896: ST_TO_ADDR
// temp_list = [ ] ;
34897: LD_ADDR_VAR 0 9
34901: PUSH
34902: EMPTY
34903: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34904: LD_VAR 0 4
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 5
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: IN
34935: NOT
34936: PUSH
34937: LD_VAR 0 1
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: IN
34952: PUSH
34953: LD_VAR 0 5
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: IN
34972: NOT
34973: AND
34974: OR
34975: IFFALSE 34979
// exit ;
34977: GO 53370
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34979: LD_VAR 0 1
34983: PUSH
34984: LD_INT 6
34986: PUSH
34987: LD_INT 7
34989: PUSH
34990: LD_INT 8
34992: PUSH
34993: LD_INT 13
34995: PUSH
34996: LD_INT 12
34998: PUSH
34999: LD_INT 15
35001: PUSH
35002: LD_INT 11
35004: PUSH
35005: LD_INT 14
35007: PUSH
35008: LD_INT 10
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: IN
35022: IFFALSE 35032
// btype = b_lab ;
35024: LD_ADDR_VAR 0 1
35028: PUSH
35029: LD_INT 6
35031: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35032: LD_VAR 0 6
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: IN
35051: NOT
35052: PUSH
35053: LD_VAR 0 1
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: LD_INT 6
35072: PUSH
35073: LD_INT 36
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: LD_INT 31
35084: PUSH
35085: LD_INT 32
35087: PUSH
35088: LD_INT 33
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: IN
35104: NOT
35105: PUSH
35106: LD_VAR 0 6
35110: PUSH
35111: LD_INT 1
35113: EQUAL
35114: AND
35115: OR
35116: PUSH
35117: LD_VAR 0 1
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: IN
35132: NOT
35133: PUSH
35134: LD_VAR 0 6
35138: PUSH
35139: LD_INT 2
35141: EQUAL
35142: AND
35143: OR
35144: IFFALSE 35154
// mode = 0 ;
35146: LD_ADDR_VAR 0 6
35150: PUSH
35151: LD_INT 0
35153: ST_TO_ADDR
// case mode of 0 :
35154: LD_VAR 0 6
35158: PUSH
35159: LD_INT 0
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 46620
35167: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35168: LD_ADDR_VAR 0 11
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35361: LD_ADDR_VAR 0 12
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 3
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35557: LD_ADDR_VAR 0 13
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35756: LD_ADDR_VAR 0 14
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: LD_INT 3
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 3
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35952: LD_ADDR_VAR 0 15
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 3
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 3
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36145: LD_ADDR_VAR 0 16
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36338: LD_ADDR_VAR 0 17
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36568: LD_ADDR_VAR 0 18
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36798: LD_ADDR_VAR 0 19
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37028: LD_ADDR_VAR 0 20
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37258: LD_ADDR_VAR 0 21
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37488: LD_ADDR_VAR 0 22
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37718: LD_ADDR_VAR 0 23
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37998: LD_ADDR_VAR 0 24
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38274: LD_ADDR_VAR 0 25
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38548: LD_ADDR_VAR 0 26
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38824: LD_ADDR_VAR 0 27
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 2
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: NEG
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39104: LD_ADDR_VAR 0 28
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: NEG
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 3
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39386: LD_ADDR_VAR 0 29
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39665: LD_ADDR_VAR 0 30
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39943: LD_ADDR_VAR 0 31
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40221: LD_ADDR_VAR 0 32
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40499: LD_ADDR_VAR 0 33
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40778: LD_ADDR_VAR 0 34
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41058: LD_ADDR_VAR 0 35
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41170: LD_ADDR_VAR 0 36
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41282: LD_ADDR_VAR 0 37
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41394: LD_ADDR_VAR 0 38
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41506: LD_ADDR_VAR 0 39
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41618: LD_ADDR_VAR 0 40
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41730: LD_ADDR_VAR 0 41
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42080: LD_ADDR_VAR 0 42
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42430: LD_ADDR_VAR 0 43
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 3
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42778: LD_ADDR_VAR 0 44
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43128: LD_ADDR_VAR 0 45
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 3
43437: NEG
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43478: LD_ADDR_VAR 0 46
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43826: LD_ADDR_VAR 0 47
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43977: LD_ADDR_VAR 0 48
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44124: LD_ADDR_VAR 0 49
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44268: LD_ADDR_VAR 0 50
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44412: LD_ADDR_VAR 0 51
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44559: LD_ADDR_VAR 0 52
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44710: LD_ADDR_VAR 0 53
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44940: LD_ADDR_VAR 0 54
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45170: LD_ADDR_VAR 0 55
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45400: LD_ADDR_VAR 0 56
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45630: LD_ADDR_VAR 0 57
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45860: LD_ADDR_VAR 0 58
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46090: LD_ADDR_VAR 0 59
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46178: LD_ADDR_VAR 0 60
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46266: LD_ADDR_VAR 0 61
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46354: LD_ADDR_VAR 0 62
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 63
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46530: LD_ADDR_VAR 0 64
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// end ; 1 :
46618: GO 52515
46620: LD_INT 1
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 49251
46628: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46629: LD_ADDR_VAR 0 11
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46673: LD_ADDR_VAR 0 12
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46714: LD_ADDR_VAR 0 13
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46754: LD_ADDR_VAR 0 14
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46795: LD_ADDR_VAR 0 15
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46839: LD_ADDR_VAR 0 16
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46885: LD_ADDR_VAR 0 17
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46929: LD_ADDR_VAR 0 18
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46970: LD_ADDR_VAR 0 19
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47010: LD_ADDR_VAR 0 20
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47051: LD_ADDR_VAR 0 21
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47095: LD_ADDR_VAR 0 22
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47141: LD_ADDR_VAR 0 23
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 4
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47185: LD_ADDR_VAR 0 24
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47226: LD_ADDR_VAR 0 25
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: LD_INT 4
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47266: LD_ADDR_VAR 0 26
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 4
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47307: LD_ADDR_VAR 0 27
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 4
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47351: LD_ADDR_VAR 0 28
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: LD_INT 4
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 4
47382: NEG
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47397: LD_ADDR_VAR 0 29
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 3
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 4
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 4
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 5
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 5
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 4
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 6
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 6
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 5
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47552: LD_ADDR_VAR 0 30
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 4
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 5
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 5
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 5
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 6
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 6
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47695: LD_ADDR_VAR 0 31
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 4
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 4
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 5
47762: PUSH
47763: LD_INT 4
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 5
47772: PUSH
47773: LD_INT 5
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 4
47782: PUSH
47783: LD_INT 5
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 6
47792: PUSH
47793: LD_INT 5
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 6
47802: PUSH
47803: LD_INT 6
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: LD_INT 6
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47834: LD_ADDR_VAR 0 32
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 4
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 5
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 6
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 5
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47977: LD_ADDR_VAR 0 33
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 4
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 4
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 4
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 5
48063: NEG
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 5
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 5
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 6
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 6
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48132: LD_ADDR_VAR 0 34
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: LD_INT 4
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: NEG
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 4
48211: NEG
48212: PUSH
48213: LD_INT 5
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 5
48223: NEG
48224: PUSH
48225: LD_INT 4
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 5
48235: NEG
48236: PUSH
48237: LD_INT 5
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 5
48247: NEG
48248: PUSH
48249: LD_INT 6
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 6
48259: NEG
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 6
48271: NEG
48272: PUSH
48273: LD_INT 6
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48295: LD_ADDR_VAR 0 41
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48339: LD_ADDR_VAR 0 42
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48380: LD_ADDR_VAR 0 43
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48420: LD_ADDR_VAR 0 44
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 45
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48505: LD_ADDR_VAR 0 46
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48551: LD_ADDR_VAR 0 47
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48584: LD_ADDR_VAR 0 48
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48615: LD_ADDR_VAR 0 49
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48644: LD_ADDR_VAR 0 50
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 3
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48673: LD_ADDR_VAR 0 51
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48704: LD_ADDR_VAR 0 52
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48737: LD_ADDR_VAR 0 53
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48781: LD_ADDR_VAR 0 54
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48822: LD_ADDR_VAR 0 55
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48862: LD_ADDR_VAR 0 56
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48903: LD_ADDR_VAR 0 57
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48947: LD_ADDR_VAR 0 58
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48993: LD_ADDR_VAR 0 59
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49037: LD_ADDR_VAR 0 60
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49078: LD_ADDR_VAR 0 61
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49118: LD_ADDR_VAR 0 62
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49159: LD_ADDR_VAR 0 63
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49203: LD_ADDR_VAR 0 64
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// end ; 2 :
49249: GO 52515
49251: LD_INT 2
49253: DOUBLE
49254: EQUAL
49255: IFTRUE 49259
49257: GO 52514
49259: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49260: LD_ADDR_VAR 0 29
49264: PUSH
49265: LD_INT 4
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 4
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 5
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 4
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 5
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: LD_INT 4
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 4
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 3
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 4
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 4
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 5
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 5
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 4
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 5
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 4
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: LD_INT 4
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 4
49657: NEG
49658: PUSH
49659: LD_INT 5
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 4
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 5
49705: NEG
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 5
49717: NEG
49718: PUSH
49719: LD_INT 5
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: LD_INT 5
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: NEG
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49798: LD_ADDR_VAR 0 30
49802: PUSH
49803: LD_INT 4
49805: PUSH
49806: LD_INT 4
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: LD_INT 5
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 5
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 5
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: LD_INT 5
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 4
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 4
49988: NEG
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 5
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 5
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 5
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: LD_INT 4
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 4
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 4
50162: NEG
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 4
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 4
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 5
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 4
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 3
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 3
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 4
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 5
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 5
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50345: LD_ADDR_VAR 0 31
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 4
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 5
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 5
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 4
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 4
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: LD_INT 4
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 4
50559: NEG
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 4
50595: NEG
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 5
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 5
50619: NEG
50620: PUSH
50621: LD_INT 5
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 5
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 5
50643: NEG
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 4
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 4
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 4
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 4
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 5
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 5
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50895: LD_ADDR_VAR 0 32
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 5
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 5
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 5
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: LD_INT 4
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 4
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: LD_INT 4
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 4
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 4
51100: NEG
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 4
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 5
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 4
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 5
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51442: LD_ADDR_VAR 0 33
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: LD_INT 4
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 4
51461: NEG
51462: PUSH
51463: LD_INT 5
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 4
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 5
51509: NEG
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: LD_INT 5
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 4
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 4
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 3
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 4
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 5
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 5
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51980: LD_ADDR_VAR 0 34
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 4
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 5
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 4
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 5
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 4
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 4
52182: PUSH
52183: LD_INT 4
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: LD_INT 5
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 5
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 5
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 4
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 4
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 4
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 5
52421: NEG
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 5
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 5
52444: NEG
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// end ; end ;
52512: GO 52515
52514: POP
// case btype of b_depot , b_warehouse :
52515: LD_VAR 0 1
52519: PUSH
52520: LD_INT 0
52522: DOUBLE
52523: EQUAL
52524: IFTRUE 52534
52526: LD_INT 1
52528: DOUBLE
52529: EQUAL
52530: IFTRUE 52534
52532: GO 52735
52534: POP
// case nation of nation_american :
52535: LD_VAR 0 5
52539: PUSH
52540: LD_INT 1
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52604
52548: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52549: LD_ADDR_VAR 0 9
52553: PUSH
52554: LD_VAR 0 11
52558: PUSH
52559: LD_VAR 0 12
52563: PUSH
52564: LD_VAR 0 13
52568: PUSH
52569: LD_VAR 0 14
52573: PUSH
52574: LD_VAR 0 15
52578: PUSH
52579: LD_VAR 0 16
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_VAR 0 4
52596: PUSH
52597: LD_INT 1
52599: PLUS
52600: ARRAY
52601: ST_TO_ADDR
52602: GO 52733
52604: LD_INT 2
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52612
52610: GO 52668
52612: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52613: LD_ADDR_VAR 0 9
52617: PUSH
52618: LD_VAR 0 17
52622: PUSH
52623: LD_VAR 0 18
52627: PUSH
52628: LD_VAR 0 19
52632: PUSH
52633: LD_VAR 0 20
52637: PUSH
52638: LD_VAR 0 21
52642: PUSH
52643: LD_VAR 0 22
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: PUSH
52656: LD_VAR 0 4
52660: PUSH
52661: LD_INT 1
52663: PLUS
52664: ARRAY
52665: ST_TO_ADDR
52666: GO 52733
52668: LD_INT 3
52670: DOUBLE
52671: EQUAL
52672: IFTRUE 52676
52674: GO 52732
52676: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52677: LD_ADDR_VAR 0 9
52681: PUSH
52682: LD_VAR 0 23
52686: PUSH
52687: LD_VAR 0 24
52691: PUSH
52692: LD_VAR 0 25
52696: PUSH
52697: LD_VAR 0 26
52701: PUSH
52702: LD_VAR 0 27
52706: PUSH
52707: LD_VAR 0 28
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: LD_VAR 0 4
52724: PUSH
52725: LD_INT 1
52727: PLUS
52728: ARRAY
52729: ST_TO_ADDR
52730: GO 52733
52732: POP
52733: GO 53288
52735: LD_INT 2
52737: DOUBLE
52738: EQUAL
52739: IFTRUE 52749
52741: LD_INT 3
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52749
52747: GO 52805
52749: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52750: LD_ADDR_VAR 0 9
52754: PUSH
52755: LD_VAR 0 29
52759: PUSH
52760: LD_VAR 0 30
52764: PUSH
52765: LD_VAR 0 31
52769: PUSH
52770: LD_VAR 0 32
52774: PUSH
52775: LD_VAR 0 33
52779: PUSH
52780: LD_VAR 0 34
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: PUSH
52793: LD_VAR 0 4
52797: PUSH
52798: LD_INT 1
52800: PLUS
52801: ARRAY
52802: ST_TO_ADDR
52803: GO 53288
52805: LD_INT 16
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52867
52811: LD_INT 17
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52867
52817: LD_INT 18
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52867
52823: LD_INT 19
52825: DOUBLE
52826: EQUAL
52827: IFTRUE 52867
52829: LD_INT 22
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52867
52835: LD_INT 20
52837: DOUBLE
52838: EQUAL
52839: IFTRUE 52867
52841: LD_INT 21
52843: DOUBLE
52844: EQUAL
52845: IFTRUE 52867
52847: LD_INT 23
52849: DOUBLE
52850: EQUAL
52851: IFTRUE 52867
52853: LD_INT 24
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52867
52859: LD_INT 25
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52867
52865: GO 52923
52867: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52868: LD_ADDR_VAR 0 9
52872: PUSH
52873: LD_VAR 0 35
52877: PUSH
52878: LD_VAR 0 36
52882: PUSH
52883: LD_VAR 0 37
52887: PUSH
52888: LD_VAR 0 38
52892: PUSH
52893: LD_VAR 0 39
52897: PUSH
52898: LD_VAR 0 40
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: PUSH
52911: LD_VAR 0 4
52915: PUSH
52916: LD_INT 1
52918: PLUS
52919: ARRAY
52920: ST_TO_ADDR
52921: GO 53288
52923: LD_INT 6
52925: DOUBLE
52926: EQUAL
52927: IFTRUE 52979
52929: LD_INT 7
52931: DOUBLE
52932: EQUAL
52933: IFTRUE 52979
52935: LD_INT 8
52937: DOUBLE
52938: EQUAL
52939: IFTRUE 52979
52941: LD_INT 13
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52979
52947: LD_INT 12
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52979
52953: LD_INT 15
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 52979
52959: LD_INT 11
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52979
52965: LD_INT 14
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52979
52971: LD_INT 10
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52979
52977: GO 53035
52979: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52980: LD_ADDR_VAR 0 9
52984: PUSH
52985: LD_VAR 0 41
52989: PUSH
52990: LD_VAR 0 42
52994: PUSH
52995: LD_VAR 0 43
52999: PUSH
53000: LD_VAR 0 44
53004: PUSH
53005: LD_VAR 0 45
53009: PUSH
53010: LD_VAR 0 46
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: PUSH
53023: LD_VAR 0 4
53027: PUSH
53028: LD_INT 1
53030: PLUS
53031: ARRAY
53032: ST_TO_ADDR
53033: GO 53288
53035: LD_INT 36
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53043
53041: GO 53099
53043: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53044: LD_ADDR_VAR 0 9
53048: PUSH
53049: LD_VAR 0 47
53053: PUSH
53054: LD_VAR 0 48
53058: PUSH
53059: LD_VAR 0 49
53063: PUSH
53064: LD_VAR 0 50
53068: PUSH
53069: LD_VAR 0 51
53073: PUSH
53074: LD_VAR 0 52
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: PUSH
53087: LD_VAR 0 4
53091: PUSH
53092: LD_INT 1
53094: PLUS
53095: ARRAY
53096: ST_TO_ADDR
53097: GO 53288
53099: LD_INT 4
53101: DOUBLE
53102: EQUAL
53103: IFTRUE 53125
53105: LD_INT 5
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53125
53111: LD_INT 34
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53125
53117: LD_INT 37
53119: DOUBLE
53120: EQUAL
53121: IFTRUE 53125
53123: GO 53181
53125: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53126: LD_ADDR_VAR 0 9
53130: PUSH
53131: LD_VAR 0 53
53135: PUSH
53136: LD_VAR 0 54
53140: PUSH
53141: LD_VAR 0 55
53145: PUSH
53146: LD_VAR 0 56
53150: PUSH
53151: LD_VAR 0 57
53155: PUSH
53156: LD_VAR 0 58
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: PUSH
53169: LD_VAR 0 4
53173: PUSH
53174: LD_INT 1
53176: PLUS
53177: ARRAY
53178: ST_TO_ADDR
53179: GO 53288
53181: LD_INT 31
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53231
53187: LD_INT 32
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53231
53193: LD_INT 33
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53231
53199: LD_INT 27
53201: DOUBLE
53202: EQUAL
53203: IFTRUE 53231
53205: LD_INT 26
53207: DOUBLE
53208: EQUAL
53209: IFTRUE 53231
53211: LD_INT 28
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53231
53217: LD_INT 29
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53231
53223: LD_INT 30
53225: DOUBLE
53226: EQUAL
53227: IFTRUE 53231
53229: GO 53287
53231: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53232: LD_ADDR_VAR 0 9
53236: PUSH
53237: LD_VAR 0 59
53241: PUSH
53242: LD_VAR 0 60
53246: PUSH
53247: LD_VAR 0 61
53251: PUSH
53252: LD_VAR 0 62
53256: PUSH
53257: LD_VAR 0 63
53261: PUSH
53262: LD_VAR 0 64
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: PUSH
53275: LD_VAR 0 4
53279: PUSH
53280: LD_INT 1
53282: PLUS
53283: ARRAY
53284: ST_TO_ADDR
53285: GO 53288
53287: POP
// temp_list2 = [ ] ;
53288: LD_ADDR_VAR 0 10
53292: PUSH
53293: EMPTY
53294: ST_TO_ADDR
// for i in temp_list do
53295: LD_ADDR_VAR 0 8
53299: PUSH
53300: LD_VAR 0 9
53304: PUSH
53305: FOR_IN
53306: IFFALSE 53358
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53308: LD_ADDR_VAR 0 10
53312: PUSH
53313: LD_VAR 0 10
53317: PUSH
53318: LD_VAR 0 8
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PUSH
53327: LD_VAR 0 2
53331: PLUS
53332: PUSH
53333: LD_VAR 0 8
53337: PUSH
53338: LD_INT 2
53340: ARRAY
53341: PUSH
53342: LD_VAR 0 3
53346: PLUS
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: ADD
53355: ST_TO_ADDR
53356: GO 53305
53358: POP
53359: POP
// result = temp_list2 ;
53360: LD_ADDR_VAR 0 7
53364: PUSH
53365: LD_VAR 0 10
53369: ST_TO_ADDR
// end ;
53370: LD_VAR 0 7
53374: RET
// export function EnemyInRange ( unit , dist ) ; begin
53375: LD_INT 0
53377: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53378: LD_ADDR_VAR 0 3
53382: PUSH
53383: LD_VAR 0 1
53387: PPUSH
53388: CALL_OW 255
53392: PPUSH
53393: LD_VAR 0 1
53397: PPUSH
53398: CALL_OW 250
53402: PPUSH
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 251
53412: PPUSH
53413: LD_VAR 0 2
53417: PPUSH
53418: CALL 27479 0 4
53422: PUSH
53423: LD_INT 4
53425: ARRAY
53426: ST_TO_ADDR
// end ;
53427: LD_VAR 0 3
53431: RET
// export function PlayerSeeMe ( unit ) ; begin
53432: LD_INT 0
53434: PPUSH
// result := See ( your_side , unit ) ;
53435: LD_ADDR_VAR 0 2
53439: PUSH
53440: LD_OWVAR 2
53444: PPUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 292
53454: ST_TO_ADDR
// end ;
53455: LD_VAR 0 2
53459: RET
// export function ReverseDir ( unit ) ; begin
53460: LD_INT 0
53462: PPUSH
// if not unit then
53463: LD_VAR 0 1
53467: NOT
53468: IFFALSE 53472
// exit ;
53470: GO 53495
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53472: LD_ADDR_VAR 0 2
53476: PUSH
53477: LD_VAR 0 1
53481: PPUSH
53482: CALL_OW 254
53486: PUSH
53487: LD_INT 3
53489: PLUS
53490: PUSH
53491: LD_INT 6
53493: MOD
53494: ST_TO_ADDR
// end ;
53495: LD_VAR 0 2
53499: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53500: LD_INT 0
53502: PPUSH
53503: PPUSH
53504: PPUSH
53505: PPUSH
53506: PPUSH
// if not hexes then
53507: LD_VAR 0 2
53511: NOT
53512: IFFALSE 53516
// exit ;
53514: GO 53664
// dist := 9999 ;
53516: LD_ADDR_VAR 0 5
53520: PUSH
53521: LD_INT 9999
53523: ST_TO_ADDR
// for i = 1 to hexes do
53524: LD_ADDR_VAR 0 4
53528: PUSH
53529: DOUBLE
53530: LD_INT 1
53532: DEC
53533: ST_TO_ADDR
53534: LD_VAR 0 2
53538: PUSH
53539: FOR_TO
53540: IFFALSE 53652
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53542: LD_VAR 0 1
53546: PPUSH
53547: LD_VAR 0 2
53551: PUSH
53552: LD_VAR 0 4
53556: ARRAY
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PPUSH
53562: LD_VAR 0 2
53566: PUSH
53567: LD_VAR 0 4
53571: ARRAY
53572: PUSH
53573: LD_INT 2
53575: ARRAY
53576: PPUSH
53577: CALL_OW 297
53581: PUSH
53582: LD_VAR 0 5
53586: LESS
53587: IFFALSE 53650
// begin hex := hexes [ i ] ;
53589: LD_ADDR_VAR 0 7
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_VAR 0 4
53603: ARRAY
53604: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53605: LD_ADDR_VAR 0 5
53609: PUSH
53610: LD_VAR 0 1
53614: PPUSH
53615: LD_VAR 0 2
53619: PUSH
53620: LD_VAR 0 4
53624: ARRAY
53625: PUSH
53626: LD_INT 1
53628: ARRAY
53629: PPUSH
53630: LD_VAR 0 2
53634: PUSH
53635: LD_VAR 0 4
53639: ARRAY
53640: PUSH
53641: LD_INT 2
53643: ARRAY
53644: PPUSH
53645: CALL_OW 297
53649: ST_TO_ADDR
// end ; end ;
53650: GO 53539
53652: POP
53653: POP
// result := hex ;
53654: LD_ADDR_VAR 0 3
53658: PUSH
53659: LD_VAR 0 7
53663: ST_TO_ADDR
// end ;
53664: LD_VAR 0 3
53668: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53673: LD_VAR 0 1
53677: NOT
53678: PUSH
53679: LD_VAR 0 1
53683: PUSH
53684: LD_INT 21
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 23
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PPUSH
53708: CALL_OW 69
53712: IN
53713: NOT
53714: OR
53715: IFFALSE 53719
// exit ;
53717: GO 53766
// for i = 1 to 3 do
53719: LD_ADDR_VAR 0 3
53723: PUSH
53724: DOUBLE
53725: LD_INT 1
53727: DEC
53728: ST_TO_ADDR
53729: LD_INT 3
53731: PUSH
53732: FOR_TO
53733: IFFALSE 53764
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53735: LD_VAR 0 1
53739: PPUSH
53740: CALL_OW 250
53744: PPUSH
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL_OW 251
53754: PPUSH
53755: LD_INT 1
53757: PPUSH
53758: CALL_OW 453
53762: GO 53732
53764: POP
53765: POP
// end ;
53766: LD_VAR 0 2
53770: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53771: LD_INT 0
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53779: LD_VAR 0 1
53783: NOT
53784: PUSH
53785: LD_VAR 0 2
53789: NOT
53790: OR
53791: PUSH
53792: LD_VAR 0 1
53796: PPUSH
53797: CALL_OW 314
53801: OR
53802: IFFALSE 53806
// exit ;
53804: GO 54247
// x := GetX ( enemy_unit ) ;
53806: LD_ADDR_VAR 0 7
53810: PUSH
53811: LD_VAR 0 2
53815: PPUSH
53816: CALL_OW 250
53820: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53821: LD_ADDR_VAR 0 8
53825: PUSH
53826: LD_VAR 0 2
53830: PPUSH
53831: CALL_OW 251
53835: ST_TO_ADDR
// if not x or not y then
53836: LD_VAR 0 7
53840: NOT
53841: PUSH
53842: LD_VAR 0 8
53846: NOT
53847: OR
53848: IFFALSE 53852
// exit ;
53850: GO 54247
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53852: LD_ADDR_VAR 0 6
53856: PUSH
53857: LD_VAR 0 7
53861: PPUSH
53862: LD_INT 0
53864: PPUSH
53865: LD_INT 4
53867: PPUSH
53868: CALL_OW 272
53872: PUSH
53873: LD_VAR 0 8
53877: PPUSH
53878: LD_INT 0
53880: PPUSH
53881: LD_INT 4
53883: PPUSH
53884: CALL_OW 273
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_VAR 0 7
53897: PPUSH
53898: LD_INT 1
53900: PPUSH
53901: LD_INT 4
53903: PPUSH
53904: CALL_OW 272
53908: PUSH
53909: LD_VAR 0 8
53913: PPUSH
53914: LD_INT 1
53916: PPUSH
53917: LD_INT 4
53919: PPUSH
53920: CALL_OW 273
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_VAR 0 7
53933: PPUSH
53934: LD_INT 2
53936: PPUSH
53937: LD_INT 4
53939: PPUSH
53940: CALL_OW 272
53944: PUSH
53945: LD_VAR 0 8
53949: PPUSH
53950: LD_INT 2
53952: PPUSH
53953: LD_INT 4
53955: PPUSH
53956: CALL_OW 273
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_VAR 0 7
53969: PPUSH
53970: LD_INT 3
53972: PPUSH
53973: LD_INT 4
53975: PPUSH
53976: CALL_OW 272
53980: PUSH
53981: LD_VAR 0 8
53985: PPUSH
53986: LD_INT 3
53988: PPUSH
53989: LD_INT 4
53991: PPUSH
53992: CALL_OW 273
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_VAR 0 7
54005: PPUSH
54006: LD_INT 4
54008: PPUSH
54009: LD_INT 4
54011: PPUSH
54012: CALL_OW 272
54016: PUSH
54017: LD_VAR 0 8
54021: PPUSH
54022: LD_INT 4
54024: PPUSH
54025: LD_INT 4
54027: PPUSH
54028: CALL_OW 273
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_VAR 0 7
54041: PPUSH
54042: LD_INT 5
54044: PPUSH
54045: LD_INT 4
54047: PPUSH
54048: CALL_OW 272
54052: PUSH
54053: LD_VAR 0 8
54057: PPUSH
54058: LD_INT 5
54060: PPUSH
54061: LD_INT 4
54063: PPUSH
54064: CALL_OW 273
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// for i = tmp downto 1 do
54081: LD_ADDR_VAR 0 4
54085: PUSH
54086: DOUBLE
54087: LD_VAR 0 6
54091: INC
54092: ST_TO_ADDR
54093: LD_INT 1
54095: PUSH
54096: FOR_DOWNTO
54097: IFFALSE 54198
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54099: LD_VAR 0 6
54103: PUSH
54104: LD_VAR 0 4
54108: ARRAY
54109: PUSH
54110: LD_INT 1
54112: ARRAY
54113: PPUSH
54114: LD_VAR 0 6
54118: PUSH
54119: LD_VAR 0 4
54123: ARRAY
54124: PUSH
54125: LD_INT 2
54127: ARRAY
54128: PPUSH
54129: CALL_OW 488
54133: NOT
54134: PUSH
54135: LD_VAR 0 6
54139: PUSH
54140: LD_VAR 0 4
54144: ARRAY
54145: PUSH
54146: LD_INT 1
54148: ARRAY
54149: PPUSH
54150: LD_VAR 0 6
54154: PUSH
54155: LD_VAR 0 4
54159: ARRAY
54160: PUSH
54161: LD_INT 2
54163: ARRAY
54164: PPUSH
54165: CALL_OW 428
54169: PUSH
54170: LD_INT 0
54172: NONEQUAL
54173: OR
54174: IFFALSE 54196
// tmp := Delete ( tmp , i ) ;
54176: LD_ADDR_VAR 0 6
54180: PUSH
54181: LD_VAR 0 6
54185: PPUSH
54186: LD_VAR 0 4
54190: PPUSH
54191: CALL_OW 3
54195: ST_TO_ADDR
54196: GO 54096
54198: POP
54199: POP
// j := GetClosestHex ( unit , tmp ) ;
54200: LD_ADDR_VAR 0 5
54204: PUSH
54205: LD_VAR 0 1
54209: PPUSH
54210: LD_VAR 0 6
54214: PPUSH
54215: CALL 53500 0 2
54219: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54220: LD_VAR 0 1
54224: PPUSH
54225: LD_VAR 0 5
54229: PUSH
54230: LD_INT 1
54232: ARRAY
54233: PPUSH
54234: LD_VAR 0 5
54238: PUSH
54239: LD_INT 2
54241: ARRAY
54242: PPUSH
54243: CALL_OW 111
// end ;
54247: LD_VAR 0 3
54251: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54252: LD_INT 0
54254: PPUSH
54255: PPUSH
54256: PPUSH
// uc_side = 0 ;
54257: LD_ADDR_OWVAR 20
54261: PUSH
54262: LD_INT 0
54264: ST_TO_ADDR
// uc_nation = 0 ;
54265: LD_ADDR_OWVAR 21
54269: PUSH
54270: LD_INT 0
54272: ST_TO_ADDR
// InitHc ;
54273: CALL_OW 19
// InitVc ;
54277: CALL_OW 20
// if mastodonts then
54281: LD_VAR 0 6
54285: IFFALSE 54352
// for i = 1 to mastodonts do
54287: LD_ADDR_VAR 0 11
54291: PUSH
54292: DOUBLE
54293: LD_INT 1
54295: DEC
54296: ST_TO_ADDR
54297: LD_VAR 0 6
54301: PUSH
54302: FOR_TO
54303: IFFALSE 54350
// begin vc_chassis := 31 ;
54305: LD_ADDR_OWVAR 37
54309: PUSH
54310: LD_INT 31
54312: ST_TO_ADDR
// vc_control := control_rider ;
54313: LD_ADDR_OWVAR 38
54317: PUSH
54318: LD_INT 4
54320: ST_TO_ADDR
// animal := CreateVehicle ;
54321: LD_ADDR_VAR 0 12
54325: PUSH
54326: CALL_OW 45
54330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54331: LD_VAR 0 12
54335: PPUSH
54336: LD_VAR 0 8
54340: PPUSH
54341: LD_INT 0
54343: PPUSH
54344: CALL 61130 0 3
// end ;
54348: GO 54302
54350: POP
54351: POP
// if horses then
54352: LD_VAR 0 5
54356: IFFALSE 54423
// for i = 1 to horses do
54358: LD_ADDR_VAR 0 11
54362: PUSH
54363: DOUBLE
54364: LD_INT 1
54366: DEC
54367: ST_TO_ADDR
54368: LD_VAR 0 5
54372: PUSH
54373: FOR_TO
54374: IFFALSE 54421
// begin hc_class := 21 ;
54376: LD_ADDR_OWVAR 28
54380: PUSH
54381: LD_INT 21
54383: ST_TO_ADDR
// hc_gallery :=  ;
54384: LD_ADDR_OWVAR 33
54388: PUSH
54389: LD_STRING 
54391: ST_TO_ADDR
// animal := CreateHuman ;
54392: LD_ADDR_VAR 0 12
54396: PUSH
54397: CALL_OW 44
54401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54402: LD_VAR 0 12
54406: PPUSH
54407: LD_VAR 0 8
54411: PPUSH
54412: LD_INT 0
54414: PPUSH
54415: CALL 61130 0 3
// end ;
54419: GO 54373
54421: POP
54422: POP
// if birds then
54423: LD_VAR 0 1
54427: IFFALSE 54494
// for i = 1 to birds do
54429: LD_ADDR_VAR 0 11
54433: PUSH
54434: DOUBLE
54435: LD_INT 1
54437: DEC
54438: ST_TO_ADDR
54439: LD_VAR 0 1
54443: PUSH
54444: FOR_TO
54445: IFFALSE 54492
// begin hc_class = 18 ;
54447: LD_ADDR_OWVAR 28
54451: PUSH
54452: LD_INT 18
54454: ST_TO_ADDR
// hc_gallery =  ;
54455: LD_ADDR_OWVAR 33
54459: PUSH
54460: LD_STRING 
54462: ST_TO_ADDR
// animal := CreateHuman ;
54463: LD_ADDR_VAR 0 12
54467: PUSH
54468: CALL_OW 44
54472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54473: LD_VAR 0 12
54477: PPUSH
54478: LD_VAR 0 8
54482: PPUSH
54483: LD_INT 0
54485: PPUSH
54486: CALL 61130 0 3
// end ;
54490: GO 54444
54492: POP
54493: POP
// if tigers then
54494: LD_VAR 0 2
54498: IFFALSE 54582
// for i = 1 to tigers do
54500: LD_ADDR_VAR 0 11
54504: PUSH
54505: DOUBLE
54506: LD_INT 1
54508: DEC
54509: ST_TO_ADDR
54510: LD_VAR 0 2
54514: PUSH
54515: FOR_TO
54516: IFFALSE 54580
// begin hc_class = class_tiger ;
54518: LD_ADDR_OWVAR 28
54522: PUSH
54523: LD_INT 14
54525: ST_TO_ADDR
// hc_gallery =  ;
54526: LD_ADDR_OWVAR 33
54530: PUSH
54531: LD_STRING 
54533: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54534: LD_ADDR_OWVAR 35
54538: PUSH
54539: LD_INT 7
54541: NEG
54542: PPUSH
54543: LD_INT 7
54545: PPUSH
54546: CALL_OW 12
54550: ST_TO_ADDR
// animal := CreateHuman ;
54551: LD_ADDR_VAR 0 12
54555: PUSH
54556: CALL_OW 44
54560: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54561: LD_VAR 0 12
54565: PPUSH
54566: LD_VAR 0 8
54570: PPUSH
54571: LD_INT 0
54573: PPUSH
54574: CALL 61130 0 3
// end ;
54578: GO 54515
54580: POP
54581: POP
// if apemans then
54582: LD_VAR 0 3
54586: IFFALSE 54709
// for i = 1 to apemans do
54588: LD_ADDR_VAR 0 11
54592: PUSH
54593: DOUBLE
54594: LD_INT 1
54596: DEC
54597: ST_TO_ADDR
54598: LD_VAR 0 3
54602: PUSH
54603: FOR_TO
54604: IFFALSE 54707
// begin hc_class = class_apeman ;
54606: LD_ADDR_OWVAR 28
54610: PUSH
54611: LD_INT 12
54613: ST_TO_ADDR
// hc_gallery =  ;
54614: LD_ADDR_OWVAR 33
54618: PUSH
54619: LD_STRING 
54621: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54622: LD_ADDR_OWVAR 35
54626: PUSH
54627: LD_INT 5
54629: NEG
54630: PPUSH
54631: LD_INT 5
54633: PPUSH
54634: CALL_OW 12
54638: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54639: LD_ADDR_OWVAR 31
54643: PUSH
54644: LD_INT 1
54646: PPUSH
54647: LD_INT 3
54649: PPUSH
54650: CALL_OW 12
54654: PUSH
54655: LD_INT 1
54657: PPUSH
54658: LD_INT 3
54660: PPUSH
54661: CALL_OW 12
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// animal := CreateHuman ;
54678: LD_ADDR_VAR 0 12
54682: PUSH
54683: CALL_OW 44
54687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54688: LD_VAR 0 12
54692: PPUSH
54693: LD_VAR 0 8
54697: PPUSH
54698: LD_INT 0
54700: PPUSH
54701: CALL 61130 0 3
// end ;
54705: GO 54603
54707: POP
54708: POP
// if enchidnas then
54709: LD_VAR 0 4
54713: IFFALSE 54780
// for i = 1 to enchidnas do
54715: LD_ADDR_VAR 0 11
54719: PUSH
54720: DOUBLE
54721: LD_INT 1
54723: DEC
54724: ST_TO_ADDR
54725: LD_VAR 0 4
54729: PUSH
54730: FOR_TO
54731: IFFALSE 54778
// begin hc_class = 13 ;
54733: LD_ADDR_OWVAR 28
54737: PUSH
54738: LD_INT 13
54740: ST_TO_ADDR
// hc_gallery =  ;
54741: LD_ADDR_OWVAR 33
54745: PUSH
54746: LD_STRING 
54748: ST_TO_ADDR
// animal := CreateHuman ;
54749: LD_ADDR_VAR 0 12
54753: PUSH
54754: CALL_OW 44
54758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54759: LD_VAR 0 12
54763: PPUSH
54764: LD_VAR 0 8
54768: PPUSH
54769: LD_INT 0
54771: PPUSH
54772: CALL 61130 0 3
// end ;
54776: GO 54730
54778: POP
54779: POP
// if fishes then
54780: LD_VAR 0 7
54784: IFFALSE 54851
// for i = 1 to fishes do
54786: LD_ADDR_VAR 0 11
54790: PUSH
54791: DOUBLE
54792: LD_INT 1
54794: DEC
54795: ST_TO_ADDR
54796: LD_VAR 0 7
54800: PUSH
54801: FOR_TO
54802: IFFALSE 54849
// begin hc_class = 20 ;
54804: LD_ADDR_OWVAR 28
54808: PUSH
54809: LD_INT 20
54811: ST_TO_ADDR
// hc_gallery =  ;
54812: LD_ADDR_OWVAR 33
54816: PUSH
54817: LD_STRING 
54819: ST_TO_ADDR
// animal := CreateHuman ;
54820: LD_ADDR_VAR 0 12
54824: PUSH
54825: CALL_OW 44
54829: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54830: LD_VAR 0 12
54834: PPUSH
54835: LD_VAR 0 9
54839: PPUSH
54840: LD_INT 0
54842: PPUSH
54843: CALL 61130 0 3
// end ;
54847: GO 54801
54849: POP
54850: POP
// end ;
54851: LD_VAR 0 10
54855: RET
// export function WantHeal ( sci , unit ) ; begin
54856: LD_INT 0
54858: PPUSH
// if GetTaskList ( sci ) > 0 then
54859: LD_VAR 0 1
54863: PPUSH
54864: CALL_OW 437
54868: PUSH
54869: LD_INT 0
54871: GREATER
54872: IFFALSE 54942
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54874: LD_VAR 0 1
54878: PPUSH
54879: CALL_OW 437
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: PUSH
54888: LD_INT 1
54890: ARRAY
54891: PUSH
54892: LD_STRING l
54894: EQUAL
54895: PUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: CALL_OW 437
54905: PUSH
54906: LD_INT 1
54908: ARRAY
54909: PUSH
54910: LD_INT 4
54912: ARRAY
54913: PUSH
54914: LD_VAR 0 2
54918: EQUAL
54919: AND
54920: IFFALSE 54932
// result := true else
54922: LD_ADDR_VAR 0 3
54926: PUSH
54927: LD_INT 1
54929: ST_TO_ADDR
54930: GO 54940
// result := false ;
54932: LD_ADDR_VAR 0 3
54936: PUSH
54937: LD_INT 0
54939: ST_TO_ADDR
// end else
54940: GO 54950
// result := false ;
54942: LD_ADDR_VAR 0 3
54946: PUSH
54947: LD_INT 0
54949: ST_TO_ADDR
// end ;
54950: LD_VAR 0 3
54954: RET
// export function HealTarget ( sci ) ; begin
54955: LD_INT 0
54957: PPUSH
// if not sci then
54958: LD_VAR 0 1
54962: NOT
54963: IFFALSE 54967
// exit ;
54965: GO 55032
// result := 0 ;
54967: LD_ADDR_VAR 0 2
54971: PUSH
54972: LD_INT 0
54974: ST_TO_ADDR
// if GetTaskList ( sci ) then
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 437
54984: IFFALSE 55032
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 437
54995: PUSH
54996: LD_INT 1
54998: ARRAY
54999: PUSH
55000: LD_INT 1
55002: ARRAY
55003: PUSH
55004: LD_STRING l
55006: EQUAL
55007: IFFALSE 55032
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55009: LD_ADDR_VAR 0 2
55013: PUSH
55014: LD_VAR 0 1
55018: PPUSH
55019: CALL_OW 437
55023: PUSH
55024: LD_INT 1
55026: ARRAY
55027: PUSH
55028: LD_INT 4
55030: ARRAY
55031: ST_TO_ADDR
// end ;
55032: LD_VAR 0 2
55036: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55037: LD_INT 0
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
// if not list then
55073: LD_VAR 0 1
55077: NOT
55078: IFFALSE 55082
// exit ;
55080: GO 59741
// base := list [ 1 ] ;
55082: LD_ADDR_VAR 0 3
55086: PUSH
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 1
55094: ARRAY
55095: ST_TO_ADDR
// group := list [ 2 ] ;
55096: LD_ADDR_VAR 0 4
55100: PUSH
55101: LD_VAR 0 1
55105: PUSH
55106: LD_INT 2
55108: ARRAY
55109: ST_TO_ADDR
// path := list [ 3 ] ;
55110: LD_ADDR_VAR 0 5
55114: PUSH
55115: LD_VAR 0 1
55119: PUSH
55120: LD_INT 3
55122: ARRAY
55123: ST_TO_ADDR
// flags := list [ 4 ] ;
55124: LD_ADDR_VAR 0 6
55128: PUSH
55129: LD_VAR 0 1
55133: PUSH
55134: LD_INT 4
55136: ARRAY
55137: ST_TO_ADDR
// mined := [ ] ;
55138: LD_ADDR_VAR 0 27
55142: PUSH
55143: EMPTY
55144: ST_TO_ADDR
// bombed := [ ] ;
55145: LD_ADDR_VAR 0 28
55149: PUSH
55150: EMPTY
55151: ST_TO_ADDR
// healers := [ ] ;
55152: LD_ADDR_VAR 0 31
55156: PUSH
55157: EMPTY
55158: ST_TO_ADDR
// to_heal := [ ] ;
55159: LD_ADDR_VAR 0 30
55163: PUSH
55164: EMPTY
55165: ST_TO_ADDR
// repairs := [ ] ;
55166: LD_ADDR_VAR 0 33
55170: PUSH
55171: EMPTY
55172: ST_TO_ADDR
// to_repair := [ ] ;
55173: LD_ADDR_VAR 0 32
55177: PUSH
55178: EMPTY
55179: ST_TO_ADDR
// if not group or not path then
55180: LD_VAR 0 4
55184: NOT
55185: PUSH
55186: LD_VAR 0 5
55190: NOT
55191: OR
55192: IFFALSE 55196
// exit ;
55194: GO 59741
// side := GetSide ( group [ 1 ] ) ;
55196: LD_ADDR_VAR 0 35
55200: PUSH
55201: LD_VAR 0 4
55205: PUSH
55206: LD_INT 1
55208: ARRAY
55209: PPUSH
55210: CALL_OW 255
55214: ST_TO_ADDR
// if flags then
55215: LD_VAR 0 6
55219: IFFALSE 55363
// begin f_ignore_area := flags [ 1 ] ;
55221: LD_ADDR_VAR 0 17
55225: PUSH
55226: LD_VAR 0 6
55230: PUSH
55231: LD_INT 1
55233: ARRAY
55234: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55235: LD_ADDR_VAR 0 18
55239: PUSH
55240: LD_VAR 0 6
55244: PUSH
55245: LD_INT 2
55247: ARRAY
55248: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55249: LD_ADDR_VAR 0 19
55253: PUSH
55254: LD_VAR 0 6
55258: PUSH
55259: LD_INT 3
55261: ARRAY
55262: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55263: LD_ADDR_VAR 0 20
55267: PUSH
55268: LD_VAR 0 6
55272: PUSH
55273: LD_INT 4
55275: ARRAY
55276: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55277: LD_ADDR_VAR 0 21
55281: PUSH
55282: LD_VAR 0 6
55286: PUSH
55287: LD_INT 5
55289: ARRAY
55290: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55291: LD_ADDR_VAR 0 22
55295: PUSH
55296: LD_VAR 0 6
55300: PUSH
55301: LD_INT 6
55303: ARRAY
55304: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55305: LD_ADDR_VAR 0 23
55309: PUSH
55310: LD_VAR 0 6
55314: PUSH
55315: LD_INT 7
55317: ARRAY
55318: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55319: LD_ADDR_VAR 0 24
55323: PUSH
55324: LD_VAR 0 6
55328: PUSH
55329: LD_INT 8
55331: ARRAY
55332: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55333: LD_ADDR_VAR 0 25
55337: PUSH
55338: LD_VAR 0 6
55342: PUSH
55343: LD_INT 9
55345: ARRAY
55346: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55347: LD_ADDR_VAR 0 26
55351: PUSH
55352: LD_VAR 0 6
55356: PUSH
55357: LD_INT 10
55359: ARRAY
55360: ST_TO_ADDR
// end else
55361: GO 55443
// begin f_ignore_area := false ;
55363: LD_ADDR_VAR 0 17
55367: PUSH
55368: LD_INT 0
55370: ST_TO_ADDR
// f_capture := false ;
55371: LD_ADDR_VAR 0 18
55375: PUSH
55376: LD_INT 0
55378: ST_TO_ADDR
// f_ignore_civ := false ;
55379: LD_ADDR_VAR 0 19
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
// f_murder := false ;
55387: LD_ADDR_VAR 0 20
55391: PUSH
55392: LD_INT 0
55394: ST_TO_ADDR
// f_mines := false ;
55395: LD_ADDR_VAR 0 21
55399: PUSH
55400: LD_INT 0
55402: ST_TO_ADDR
// f_repair := false ;
55403: LD_ADDR_VAR 0 22
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
// f_heal := false ;
55411: LD_ADDR_VAR 0 23
55415: PUSH
55416: LD_INT 0
55418: ST_TO_ADDR
// f_spacetime := false ;
55419: LD_ADDR_VAR 0 24
55423: PUSH
55424: LD_INT 0
55426: ST_TO_ADDR
// f_attack_depot := false ;
55427: LD_ADDR_VAR 0 25
55431: PUSH
55432: LD_INT 0
55434: ST_TO_ADDR
// f_crawl := false ;
55435: LD_ADDR_VAR 0 26
55439: PUSH
55440: LD_INT 0
55442: ST_TO_ADDR
// end ; if f_heal then
55443: LD_VAR 0 23
55447: IFFALSE 55474
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55449: LD_ADDR_VAR 0 31
55453: PUSH
55454: LD_VAR 0 4
55458: PPUSH
55459: LD_INT 25
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PPUSH
55469: CALL_OW 72
55473: ST_TO_ADDR
// if f_repair then
55474: LD_VAR 0 22
55478: IFFALSE 55505
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55480: LD_ADDR_VAR 0 33
55484: PUSH
55485: LD_VAR 0 4
55489: PPUSH
55490: LD_INT 25
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PPUSH
55500: CALL_OW 72
55504: ST_TO_ADDR
// units_path := [ ] ;
55505: LD_ADDR_VAR 0 16
55509: PUSH
55510: EMPTY
55511: ST_TO_ADDR
// for i = 1 to group do
55512: LD_ADDR_VAR 0 7
55516: PUSH
55517: DOUBLE
55518: LD_INT 1
55520: DEC
55521: ST_TO_ADDR
55522: LD_VAR 0 4
55526: PUSH
55527: FOR_TO
55528: IFFALSE 55557
// units_path := Replace ( units_path , i , path ) ;
55530: LD_ADDR_VAR 0 16
55534: PUSH
55535: LD_VAR 0 16
55539: PPUSH
55540: LD_VAR 0 7
55544: PPUSH
55545: LD_VAR 0 5
55549: PPUSH
55550: CALL_OW 1
55554: ST_TO_ADDR
55555: GO 55527
55557: POP
55558: POP
// repeat for i = group downto 1 do
55559: LD_ADDR_VAR 0 7
55563: PUSH
55564: DOUBLE
55565: LD_VAR 0 4
55569: INC
55570: ST_TO_ADDR
55571: LD_INT 1
55573: PUSH
55574: FOR_DOWNTO
55575: IFFALSE 59697
// begin wait ( 5 ) ;
55577: LD_INT 5
55579: PPUSH
55580: CALL_OW 67
// tmp := [ ] ;
55584: LD_ADDR_VAR 0 14
55588: PUSH
55589: EMPTY
55590: ST_TO_ADDR
// attacking := false ;
55591: LD_ADDR_VAR 0 29
55595: PUSH
55596: LD_INT 0
55598: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55599: LD_VAR 0 4
55603: PUSH
55604: LD_VAR 0 7
55608: ARRAY
55609: PPUSH
55610: CALL_OW 301
55614: PUSH
55615: LD_VAR 0 4
55619: PUSH
55620: LD_VAR 0 7
55624: ARRAY
55625: NOT
55626: OR
55627: IFFALSE 55736
// begin if GetType ( group [ i ] ) = unit_human then
55629: LD_VAR 0 4
55633: PUSH
55634: LD_VAR 0 7
55638: ARRAY
55639: PPUSH
55640: CALL_OW 247
55644: PUSH
55645: LD_INT 1
55647: EQUAL
55648: IFFALSE 55694
// begin to_heal := to_heal diff group [ i ] ;
55650: LD_ADDR_VAR 0 30
55654: PUSH
55655: LD_VAR 0 30
55659: PUSH
55660: LD_VAR 0 4
55664: PUSH
55665: LD_VAR 0 7
55669: ARRAY
55670: DIFF
55671: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55672: LD_ADDR_VAR 0 31
55676: PUSH
55677: LD_VAR 0 31
55681: PUSH
55682: LD_VAR 0 4
55686: PUSH
55687: LD_VAR 0 7
55691: ARRAY
55692: DIFF
55693: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55694: LD_ADDR_VAR 0 4
55698: PUSH
55699: LD_VAR 0 4
55703: PPUSH
55704: LD_VAR 0 7
55708: PPUSH
55709: CALL_OW 3
55713: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55714: LD_ADDR_VAR 0 16
55718: PUSH
55719: LD_VAR 0 16
55723: PPUSH
55724: LD_VAR 0 7
55728: PPUSH
55729: CALL_OW 3
55733: ST_TO_ADDR
// continue ;
55734: GO 55574
// end ; if f_repair then
55736: LD_VAR 0 22
55740: IFFALSE 56229
// begin if GetType ( group [ i ] ) = unit_vehicle then
55742: LD_VAR 0 4
55746: PUSH
55747: LD_VAR 0 7
55751: ARRAY
55752: PPUSH
55753: CALL_OW 247
55757: PUSH
55758: LD_INT 2
55760: EQUAL
55761: IFFALSE 55951
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55763: LD_VAR 0 4
55767: PUSH
55768: LD_VAR 0 7
55772: ARRAY
55773: PPUSH
55774: CALL_OW 256
55778: PUSH
55779: LD_INT 700
55781: LESS
55782: PUSH
55783: LD_VAR 0 4
55787: PUSH
55788: LD_VAR 0 7
55792: ARRAY
55793: PUSH
55794: LD_VAR 0 32
55798: IN
55799: NOT
55800: AND
55801: IFFALSE 55825
// to_repair := to_repair union group [ i ] ;
55803: LD_ADDR_VAR 0 32
55807: PUSH
55808: LD_VAR 0 32
55812: PUSH
55813: LD_VAR 0 4
55817: PUSH
55818: LD_VAR 0 7
55822: ARRAY
55823: UNION
55824: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55825: LD_VAR 0 4
55829: PUSH
55830: LD_VAR 0 7
55834: ARRAY
55835: PPUSH
55836: CALL_OW 256
55840: PUSH
55841: LD_INT 1000
55843: EQUAL
55844: PUSH
55845: LD_VAR 0 4
55849: PUSH
55850: LD_VAR 0 7
55854: ARRAY
55855: PUSH
55856: LD_VAR 0 32
55860: IN
55861: AND
55862: IFFALSE 55886
// to_repair := to_repair diff group [ i ] ;
55864: LD_ADDR_VAR 0 32
55868: PUSH
55869: LD_VAR 0 32
55873: PUSH
55874: LD_VAR 0 4
55878: PUSH
55879: LD_VAR 0 7
55883: ARRAY
55884: DIFF
55885: ST_TO_ADDR
// if group [ i ] in to_repair then
55886: LD_VAR 0 4
55890: PUSH
55891: LD_VAR 0 7
55895: ARRAY
55896: PUSH
55897: LD_VAR 0 32
55901: IN
55902: IFFALSE 55949
// begin if not IsInArea ( group [ i ] , f_repair ) then
55904: LD_VAR 0 4
55908: PUSH
55909: LD_VAR 0 7
55913: ARRAY
55914: PPUSH
55915: LD_VAR 0 22
55919: PPUSH
55920: CALL_OW 308
55924: NOT
55925: IFFALSE 55947
// ComMoveToArea ( group [ i ] , f_repair ) ;
55927: LD_VAR 0 4
55931: PUSH
55932: LD_VAR 0 7
55936: ARRAY
55937: PPUSH
55938: LD_VAR 0 22
55942: PPUSH
55943: CALL_OW 113
// continue ;
55947: GO 55574
// end ; end else
55949: GO 56229
// if group [ i ] in repairs then
55951: LD_VAR 0 4
55955: PUSH
55956: LD_VAR 0 7
55960: ARRAY
55961: PUSH
55962: LD_VAR 0 33
55966: IN
55967: IFFALSE 56229
// begin if IsInUnit ( group [ i ] ) then
55969: LD_VAR 0 4
55973: PUSH
55974: LD_VAR 0 7
55978: ARRAY
55979: PPUSH
55980: CALL_OW 310
55984: IFFALSE 56052
// begin z := IsInUnit ( group [ i ] ) ;
55986: LD_ADDR_VAR 0 13
55990: PUSH
55991: LD_VAR 0 4
55995: PUSH
55996: LD_VAR 0 7
56000: ARRAY
56001: PPUSH
56002: CALL_OW 310
56006: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56007: LD_VAR 0 13
56011: PUSH
56012: LD_VAR 0 32
56016: IN
56017: PUSH
56018: LD_VAR 0 13
56022: PPUSH
56023: LD_VAR 0 22
56027: PPUSH
56028: CALL_OW 308
56032: AND
56033: IFFALSE 56050
// ComExitVehicle ( group [ i ] ) ;
56035: LD_VAR 0 4
56039: PUSH
56040: LD_VAR 0 7
56044: ARRAY
56045: PPUSH
56046: CALL_OW 121
// end else
56050: GO 56229
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56052: LD_ADDR_VAR 0 13
56056: PUSH
56057: LD_VAR 0 4
56061: PPUSH
56062: LD_INT 95
56064: PUSH
56065: LD_VAR 0 22
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 58
56076: PUSH
56077: EMPTY
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PPUSH
56084: CALL_OW 72
56088: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56089: LD_VAR 0 4
56093: PUSH
56094: LD_VAR 0 7
56098: ARRAY
56099: PPUSH
56100: CALL_OW 314
56104: NOT
56105: IFFALSE 56227
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56107: LD_ADDR_VAR 0 10
56111: PUSH
56112: LD_VAR 0 13
56116: PPUSH
56117: LD_VAR 0 4
56121: PUSH
56122: LD_VAR 0 7
56126: ARRAY
56127: PPUSH
56128: CALL_OW 74
56132: ST_TO_ADDR
// if not x then
56133: LD_VAR 0 10
56137: NOT
56138: IFFALSE 56142
// continue ;
56140: GO 55574
// if GetLives ( x ) < 1000 then
56142: LD_VAR 0 10
56146: PPUSH
56147: CALL_OW 256
56151: PUSH
56152: LD_INT 1000
56154: LESS
56155: IFFALSE 56179
// ComRepairVehicle ( group [ i ] , x ) else
56157: LD_VAR 0 4
56161: PUSH
56162: LD_VAR 0 7
56166: ARRAY
56167: PPUSH
56168: LD_VAR 0 10
56172: PPUSH
56173: CALL_OW 129
56177: GO 56227
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56179: LD_VAR 0 23
56183: PUSH
56184: LD_VAR 0 4
56188: PUSH
56189: LD_VAR 0 7
56193: ARRAY
56194: PPUSH
56195: CALL_OW 256
56199: PUSH
56200: LD_INT 1000
56202: LESS
56203: AND
56204: NOT
56205: IFFALSE 56227
// ComEnterUnit ( group [ i ] , x ) ;
56207: LD_VAR 0 4
56211: PUSH
56212: LD_VAR 0 7
56216: ARRAY
56217: PPUSH
56218: LD_VAR 0 10
56222: PPUSH
56223: CALL_OW 120
// end ; continue ;
56227: GO 55574
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56229: LD_VAR 0 23
56233: PUSH
56234: LD_VAR 0 4
56238: PUSH
56239: LD_VAR 0 7
56243: ARRAY
56244: PPUSH
56245: CALL_OW 247
56249: PUSH
56250: LD_INT 1
56252: EQUAL
56253: AND
56254: IFFALSE 56732
// begin if group [ i ] in healers then
56256: LD_VAR 0 4
56260: PUSH
56261: LD_VAR 0 7
56265: ARRAY
56266: PUSH
56267: LD_VAR 0 31
56271: IN
56272: IFFALSE 56545
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56274: LD_VAR 0 4
56278: PUSH
56279: LD_VAR 0 7
56283: ARRAY
56284: PPUSH
56285: LD_VAR 0 23
56289: PPUSH
56290: CALL_OW 308
56294: NOT
56295: PUSH
56296: LD_VAR 0 4
56300: PUSH
56301: LD_VAR 0 7
56305: ARRAY
56306: PPUSH
56307: CALL_OW 314
56311: NOT
56312: AND
56313: IFFALSE 56337
// ComMoveToArea ( group [ i ] , f_heal ) else
56315: LD_VAR 0 4
56319: PUSH
56320: LD_VAR 0 7
56324: ARRAY
56325: PPUSH
56326: LD_VAR 0 23
56330: PPUSH
56331: CALL_OW 113
56335: GO 56543
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56337: LD_VAR 0 4
56341: PUSH
56342: LD_VAR 0 7
56346: ARRAY
56347: PPUSH
56348: CALL 54955 0 1
56352: PPUSH
56353: CALL_OW 256
56357: PUSH
56358: LD_INT 1000
56360: EQUAL
56361: IFFALSE 56380
// ComStop ( group [ i ] ) else
56363: LD_VAR 0 4
56367: PUSH
56368: LD_VAR 0 7
56372: ARRAY
56373: PPUSH
56374: CALL_OW 141
56378: GO 56543
// if not HasTask ( group [ i ] ) and to_heal then
56380: LD_VAR 0 4
56384: PUSH
56385: LD_VAR 0 7
56389: ARRAY
56390: PPUSH
56391: CALL_OW 314
56395: NOT
56396: PUSH
56397: LD_VAR 0 30
56401: AND
56402: IFFALSE 56543
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56404: LD_ADDR_VAR 0 13
56408: PUSH
56409: LD_VAR 0 30
56413: PPUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 54
56419: PUSH
56420: EMPTY
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PPUSH
56427: CALL_OW 72
56431: PPUSH
56432: LD_VAR 0 4
56436: PUSH
56437: LD_VAR 0 7
56441: ARRAY
56442: PPUSH
56443: CALL_OW 74
56447: ST_TO_ADDR
// if z then
56448: LD_VAR 0 13
56452: IFFALSE 56543
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56454: LD_INT 91
56456: PUSH
56457: LD_VAR 0 13
56461: PUSH
56462: LD_INT 10
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 81
56472: PUSH
56473: LD_VAR 0 13
56477: PPUSH
56478: CALL_OW 255
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PPUSH
56491: CALL_OW 69
56495: PUSH
56496: LD_INT 0
56498: EQUAL
56499: IFFALSE 56523
// ComHeal ( group [ i ] , z ) else
56501: LD_VAR 0 4
56505: PUSH
56506: LD_VAR 0 7
56510: ARRAY
56511: PPUSH
56512: LD_VAR 0 13
56516: PPUSH
56517: CALL_OW 128
56521: GO 56543
// ComMoveToArea ( group [ i ] , f_heal ) ;
56523: LD_VAR 0 4
56527: PUSH
56528: LD_VAR 0 7
56532: ARRAY
56533: PPUSH
56534: LD_VAR 0 23
56538: PPUSH
56539: CALL_OW 113
// end ; continue ;
56543: GO 55574
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56545: LD_VAR 0 4
56549: PUSH
56550: LD_VAR 0 7
56554: ARRAY
56555: PPUSH
56556: CALL_OW 256
56560: PUSH
56561: LD_INT 700
56563: LESS
56564: PUSH
56565: LD_VAR 0 4
56569: PUSH
56570: LD_VAR 0 7
56574: ARRAY
56575: PUSH
56576: LD_VAR 0 30
56580: IN
56581: NOT
56582: AND
56583: IFFALSE 56607
// to_heal := to_heal union group [ i ] ;
56585: LD_ADDR_VAR 0 30
56589: PUSH
56590: LD_VAR 0 30
56594: PUSH
56595: LD_VAR 0 4
56599: PUSH
56600: LD_VAR 0 7
56604: ARRAY
56605: UNION
56606: ST_TO_ADDR
// if group [ i ] in to_heal then
56607: LD_VAR 0 4
56611: PUSH
56612: LD_VAR 0 7
56616: ARRAY
56617: PUSH
56618: LD_VAR 0 30
56622: IN
56623: IFFALSE 56732
// begin if GetLives ( group [ i ] ) = 1000 then
56625: LD_VAR 0 4
56629: PUSH
56630: LD_VAR 0 7
56634: ARRAY
56635: PPUSH
56636: CALL_OW 256
56640: PUSH
56641: LD_INT 1000
56643: EQUAL
56644: IFFALSE 56670
// to_heal := to_heal diff group [ i ] else
56646: LD_ADDR_VAR 0 30
56650: PUSH
56651: LD_VAR 0 30
56655: PUSH
56656: LD_VAR 0 4
56660: PUSH
56661: LD_VAR 0 7
56665: ARRAY
56666: DIFF
56667: ST_TO_ADDR
56668: GO 56732
// begin if not IsInArea ( group [ i ] , to_heal ) then
56670: LD_VAR 0 4
56674: PUSH
56675: LD_VAR 0 7
56679: ARRAY
56680: PPUSH
56681: LD_VAR 0 30
56685: PPUSH
56686: CALL_OW 308
56690: NOT
56691: IFFALSE 56715
// ComMoveToArea ( group [ i ] , f_heal ) else
56693: LD_VAR 0 4
56697: PUSH
56698: LD_VAR 0 7
56702: ARRAY
56703: PPUSH
56704: LD_VAR 0 23
56708: PPUSH
56709: CALL_OW 113
56713: GO 56730
// ComHold ( group [ i ] ) ;
56715: LD_VAR 0 4
56719: PUSH
56720: LD_VAR 0 7
56724: ARRAY
56725: PPUSH
56726: CALL_OW 140
// continue ;
56730: GO 55574
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56732: LD_VAR 0 4
56736: PUSH
56737: LD_VAR 0 7
56741: ARRAY
56742: PPUSH
56743: LD_INT 10
56745: PPUSH
56746: CALL 53375 0 2
56750: NOT
56751: PUSH
56752: LD_VAR 0 16
56756: PUSH
56757: LD_VAR 0 7
56761: ARRAY
56762: PUSH
56763: EMPTY
56764: EQUAL
56765: NOT
56766: AND
56767: IFFALSE 57033
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56769: LD_VAR 0 4
56773: PUSH
56774: LD_VAR 0 7
56778: ARRAY
56779: PPUSH
56780: CALL_OW 262
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: IN
56795: IFFALSE 56836
// if GetFuel ( group [ i ] ) < 10 then
56797: LD_VAR 0 4
56801: PUSH
56802: LD_VAR 0 7
56806: ARRAY
56807: PPUSH
56808: CALL_OW 261
56812: PUSH
56813: LD_INT 10
56815: LESS
56816: IFFALSE 56836
// SetFuel ( group [ i ] , 12 ) ;
56818: LD_VAR 0 4
56822: PUSH
56823: LD_VAR 0 7
56827: ARRAY
56828: PPUSH
56829: LD_INT 12
56831: PPUSH
56832: CALL_OW 240
// if units_path [ i ] then
56836: LD_VAR 0 16
56840: PUSH
56841: LD_VAR 0 7
56845: ARRAY
56846: IFFALSE 57031
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56848: LD_VAR 0 4
56852: PUSH
56853: LD_VAR 0 7
56857: ARRAY
56858: PPUSH
56859: LD_VAR 0 16
56863: PUSH
56864: LD_VAR 0 7
56868: ARRAY
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: PPUSH
56878: LD_VAR 0 16
56882: PUSH
56883: LD_VAR 0 7
56887: ARRAY
56888: PUSH
56889: LD_INT 1
56891: ARRAY
56892: PUSH
56893: LD_INT 2
56895: ARRAY
56896: PPUSH
56897: CALL_OW 297
56901: PUSH
56902: LD_INT 6
56904: GREATER
56905: IFFALSE 56980
// begin if not HasTask ( group [ i ] ) then
56907: LD_VAR 0 4
56911: PUSH
56912: LD_VAR 0 7
56916: ARRAY
56917: PPUSH
56918: CALL_OW 314
56922: NOT
56923: IFFALSE 56978
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56925: LD_VAR 0 4
56929: PUSH
56930: LD_VAR 0 7
56934: ARRAY
56935: PPUSH
56936: LD_VAR 0 16
56940: PUSH
56941: LD_VAR 0 7
56945: ARRAY
56946: PUSH
56947: LD_INT 1
56949: ARRAY
56950: PUSH
56951: LD_INT 1
56953: ARRAY
56954: PPUSH
56955: LD_VAR 0 16
56959: PUSH
56960: LD_VAR 0 7
56964: ARRAY
56965: PUSH
56966: LD_INT 1
56968: ARRAY
56969: PUSH
56970: LD_INT 2
56972: ARRAY
56973: PPUSH
56974: CALL_OW 114
// end else
56978: GO 57031
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56980: LD_ADDR_VAR 0 15
56984: PUSH
56985: LD_VAR 0 16
56989: PUSH
56990: LD_VAR 0 7
56994: ARRAY
56995: PPUSH
56996: LD_INT 1
56998: PPUSH
56999: CALL_OW 3
57003: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57004: LD_ADDR_VAR 0 16
57008: PUSH
57009: LD_VAR 0 16
57013: PPUSH
57014: LD_VAR 0 7
57018: PPUSH
57019: LD_VAR 0 15
57023: PPUSH
57024: CALL_OW 1
57028: ST_TO_ADDR
// continue ;
57029: GO 55574
// end ; end ; end else
57031: GO 59695
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57033: LD_ADDR_VAR 0 14
57037: PUSH
57038: LD_INT 81
57040: PUSH
57041: LD_VAR 0 4
57045: PUSH
57046: LD_VAR 0 7
57050: ARRAY
57051: PPUSH
57052: CALL_OW 255
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PPUSH
57061: CALL_OW 69
57065: ST_TO_ADDR
// if not tmp then
57066: LD_VAR 0 14
57070: NOT
57071: IFFALSE 57075
// continue ;
57073: GO 55574
// if f_ignore_area then
57075: LD_VAR 0 17
57079: IFFALSE 57167
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57081: LD_ADDR_VAR 0 15
57085: PUSH
57086: LD_VAR 0 14
57090: PPUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 92
57096: PUSH
57097: LD_VAR 0 17
57101: PUSH
57102: LD_INT 1
57104: ARRAY
57105: PUSH
57106: LD_VAR 0 17
57110: PUSH
57111: LD_INT 2
57113: ARRAY
57114: PUSH
57115: LD_VAR 0 17
57119: PUSH
57120: LD_INT 3
57122: ARRAY
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PPUSH
57134: CALL_OW 72
57138: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57139: LD_VAR 0 14
57143: PUSH
57144: LD_VAR 0 15
57148: DIFF
57149: IFFALSE 57167
// tmp := tmp diff tmp2 ;
57151: LD_ADDR_VAR 0 14
57155: PUSH
57156: LD_VAR 0 14
57160: PUSH
57161: LD_VAR 0 15
57165: DIFF
57166: ST_TO_ADDR
// end ; if not f_murder then
57167: LD_VAR 0 20
57171: NOT
57172: IFFALSE 57230
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57174: LD_ADDR_VAR 0 15
57178: PUSH
57179: LD_VAR 0 14
57183: PPUSH
57184: LD_INT 3
57186: PUSH
57187: LD_INT 50
57189: PUSH
57190: EMPTY
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PPUSH
57197: CALL_OW 72
57201: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57202: LD_VAR 0 14
57206: PUSH
57207: LD_VAR 0 15
57211: DIFF
57212: IFFALSE 57230
// tmp := tmp diff tmp2 ;
57214: LD_ADDR_VAR 0 14
57218: PUSH
57219: LD_VAR 0 14
57223: PUSH
57224: LD_VAR 0 15
57228: DIFF
57229: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57230: LD_ADDR_VAR 0 14
57234: PUSH
57235: LD_VAR 0 4
57239: PUSH
57240: LD_VAR 0 7
57244: ARRAY
57245: PPUSH
57246: LD_VAR 0 14
57250: PPUSH
57251: LD_INT 1
57253: PPUSH
57254: LD_INT 1
57256: PPUSH
57257: CALL 27018 0 4
57261: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57262: LD_VAR 0 4
57266: PUSH
57267: LD_VAR 0 7
57271: ARRAY
57272: PPUSH
57273: CALL_OW 257
57277: PUSH
57278: LD_INT 1
57280: EQUAL
57281: IFFALSE 57729
// begin if WantPlant ( group [ i ] ) then
57283: LD_VAR 0 4
57287: PUSH
57288: LD_VAR 0 7
57292: ARRAY
57293: PPUSH
57294: CALL 26519 0 1
57298: IFFALSE 57302
// continue ;
57300: GO 55574
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57302: LD_VAR 0 18
57306: PUSH
57307: LD_VAR 0 4
57311: PUSH
57312: LD_VAR 0 7
57316: ARRAY
57317: PPUSH
57318: CALL_OW 310
57322: NOT
57323: AND
57324: PUSH
57325: LD_VAR 0 14
57329: PUSH
57330: LD_INT 1
57332: ARRAY
57333: PUSH
57334: LD_VAR 0 14
57338: PPUSH
57339: LD_INT 21
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 58
57351: PUSH
57352: EMPTY
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PPUSH
57359: CALL_OW 72
57363: IN
57364: AND
57365: IFFALSE 57401
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57367: LD_VAR 0 4
57371: PUSH
57372: LD_VAR 0 7
57376: ARRAY
57377: PPUSH
57378: LD_VAR 0 14
57382: PUSH
57383: LD_INT 1
57385: ARRAY
57386: PPUSH
57387: CALL_OW 120
// attacking := true ;
57391: LD_ADDR_VAR 0 29
57395: PUSH
57396: LD_INT 1
57398: ST_TO_ADDR
// continue ;
57399: GO 55574
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57401: LD_VAR 0 26
57405: PUSH
57406: LD_VAR 0 4
57410: PUSH
57411: LD_VAR 0 7
57415: ARRAY
57416: PPUSH
57417: CALL_OW 257
57421: PUSH
57422: LD_INT 1
57424: EQUAL
57425: AND
57426: PUSH
57427: LD_VAR 0 4
57431: PUSH
57432: LD_VAR 0 7
57436: ARRAY
57437: PPUSH
57438: CALL_OW 256
57442: PUSH
57443: LD_INT 800
57445: LESS
57446: AND
57447: PUSH
57448: LD_VAR 0 4
57452: PUSH
57453: LD_VAR 0 7
57457: ARRAY
57458: PPUSH
57459: CALL_OW 318
57463: NOT
57464: AND
57465: IFFALSE 57482
// ComCrawl ( group [ i ] ) ;
57467: LD_VAR 0 4
57471: PUSH
57472: LD_VAR 0 7
57476: ARRAY
57477: PPUSH
57478: CALL_OW 137
// if f_mines then
57482: LD_VAR 0 21
57486: IFFALSE 57729
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57488: LD_VAR 0 14
57492: PUSH
57493: LD_INT 1
57495: ARRAY
57496: PPUSH
57497: CALL_OW 247
57501: PUSH
57502: LD_INT 3
57504: EQUAL
57505: PUSH
57506: LD_VAR 0 14
57510: PUSH
57511: LD_INT 1
57513: ARRAY
57514: PUSH
57515: LD_VAR 0 27
57519: IN
57520: NOT
57521: AND
57522: IFFALSE 57729
// begin x := GetX ( tmp [ 1 ] ) ;
57524: LD_ADDR_VAR 0 10
57528: PUSH
57529: LD_VAR 0 14
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PPUSH
57538: CALL_OW 250
57542: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57543: LD_ADDR_VAR 0 11
57547: PUSH
57548: LD_VAR 0 14
57552: PUSH
57553: LD_INT 1
57555: ARRAY
57556: PPUSH
57557: CALL_OW 251
57561: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57562: LD_ADDR_VAR 0 12
57566: PUSH
57567: LD_VAR 0 4
57571: PUSH
57572: LD_VAR 0 7
57576: ARRAY
57577: PPUSH
57578: CALL 53460 0 1
57582: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57583: LD_VAR 0 4
57587: PUSH
57588: LD_VAR 0 7
57592: ARRAY
57593: PPUSH
57594: LD_VAR 0 10
57598: PPUSH
57599: LD_VAR 0 11
57603: PPUSH
57604: LD_VAR 0 14
57608: PUSH
57609: LD_INT 1
57611: ARRAY
57612: PPUSH
57613: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57617: LD_VAR 0 4
57621: PUSH
57622: LD_VAR 0 7
57626: ARRAY
57627: PPUSH
57628: LD_VAR 0 10
57632: PPUSH
57633: LD_VAR 0 12
57637: PPUSH
57638: LD_INT 7
57640: PPUSH
57641: CALL_OW 272
57645: PPUSH
57646: LD_VAR 0 11
57650: PPUSH
57651: LD_VAR 0 12
57655: PPUSH
57656: LD_INT 7
57658: PPUSH
57659: CALL_OW 273
57663: PPUSH
57664: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57668: LD_VAR 0 4
57672: PUSH
57673: LD_VAR 0 7
57677: ARRAY
57678: PPUSH
57679: LD_INT 71
57681: PPUSH
57682: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57686: LD_ADDR_VAR 0 27
57690: PUSH
57691: LD_VAR 0 27
57695: PPUSH
57696: LD_VAR 0 27
57700: PUSH
57701: LD_INT 1
57703: PLUS
57704: PPUSH
57705: LD_VAR 0 14
57709: PUSH
57710: LD_INT 1
57712: ARRAY
57713: PPUSH
57714: CALL_OW 1
57718: ST_TO_ADDR
// attacking := true ;
57719: LD_ADDR_VAR 0 29
57723: PUSH
57724: LD_INT 1
57726: ST_TO_ADDR
// continue ;
57727: GO 55574
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57729: LD_VAR 0 4
57733: PUSH
57734: LD_VAR 0 7
57738: ARRAY
57739: PPUSH
57740: CALL_OW 257
57744: PUSH
57745: LD_INT 17
57747: EQUAL
57748: PUSH
57749: LD_VAR 0 4
57753: PUSH
57754: LD_VAR 0 7
57758: ARRAY
57759: PPUSH
57760: CALL_OW 110
57764: PUSH
57765: LD_INT 71
57767: EQUAL
57768: NOT
57769: AND
57770: IFFALSE 57916
// begin attacking := false ;
57772: LD_ADDR_VAR 0 29
57776: PUSH
57777: LD_INT 0
57779: ST_TO_ADDR
// k := 5 ;
57780: LD_ADDR_VAR 0 9
57784: PUSH
57785: LD_INT 5
57787: ST_TO_ADDR
// if tmp < k then
57788: LD_VAR 0 14
57792: PUSH
57793: LD_VAR 0 9
57797: LESS
57798: IFFALSE 57810
// k := tmp ;
57800: LD_ADDR_VAR 0 9
57804: PUSH
57805: LD_VAR 0 14
57809: ST_TO_ADDR
// for j = 1 to k do
57810: LD_ADDR_VAR 0 8
57814: PUSH
57815: DOUBLE
57816: LD_INT 1
57818: DEC
57819: ST_TO_ADDR
57820: LD_VAR 0 9
57824: PUSH
57825: FOR_TO
57826: IFFALSE 57914
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57828: LD_VAR 0 14
57832: PUSH
57833: LD_VAR 0 8
57837: ARRAY
57838: PUSH
57839: LD_VAR 0 14
57843: PPUSH
57844: LD_INT 58
57846: PUSH
57847: EMPTY
57848: LIST
57849: PPUSH
57850: CALL_OW 72
57854: IN
57855: NOT
57856: IFFALSE 57912
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57858: LD_VAR 0 4
57862: PUSH
57863: LD_VAR 0 7
57867: ARRAY
57868: PPUSH
57869: LD_VAR 0 14
57873: PUSH
57874: LD_VAR 0 8
57878: ARRAY
57879: PPUSH
57880: CALL_OW 115
// attacking := true ;
57884: LD_ADDR_VAR 0 29
57888: PUSH
57889: LD_INT 1
57891: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57892: LD_VAR 0 4
57896: PUSH
57897: LD_VAR 0 7
57901: ARRAY
57902: PPUSH
57903: LD_INT 71
57905: PPUSH
57906: CALL_OW 109
// continue ;
57910: GO 57825
// end ; end ;
57912: GO 57825
57914: POP
57915: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57916: LD_VAR 0 4
57920: PUSH
57921: LD_VAR 0 7
57925: ARRAY
57926: PPUSH
57927: CALL_OW 257
57931: PUSH
57932: LD_INT 8
57934: EQUAL
57935: PUSH
57936: LD_VAR 0 4
57940: PUSH
57941: LD_VAR 0 7
57945: ARRAY
57946: PPUSH
57947: CALL_OW 264
57951: PUSH
57952: LD_INT 28
57954: PUSH
57955: LD_INT 45
57957: PUSH
57958: LD_INT 7
57960: PUSH
57961: LD_INT 47
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: IN
57970: OR
57971: IFFALSE 58227
// begin attacking := false ;
57973: LD_ADDR_VAR 0 29
57977: PUSH
57978: LD_INT 0
57980: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57981: LD_VAR 0 14
57985: PUSH
57986: LD_INT 1
57988: ARRAY
57989: PPUSH
57990: CALL_OW 266
57994: PUSH
57995: LD_INT 32
57997: PUSH
57998: LD_INT 31
58000: PUSH
58001: LD_INT 33
58003: PUSH
58004: LD_INT 4
58006: PUSH
58007: LD_INT 5
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: IN
58017: IFFALSE 58203
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58019: LD_ADDR_VAR 0 9
58023: PUSH
58024: LD_VAR 0 14
58028: PUSH
58029: LD_INT 1
58031: ARRAY
58032: PPUSH
58033: CALL_OW 266
58037: PPUSH
58038: LD_VAR 0 14
58042: PUSH
58043: LD_INT 1
58045: ARRAY
58046: PPUSH
58047: CALL_OW 250
58051: PPUSH
58052: LD_VAR 0 14
58056: PUSH
58057: LD_INT 1
58059: ARRAY
58060: PPUSH
58061: CALL_OW 251
58065: PPUSH
58066: LD_VAR 0 14
58070: PUSH
58071: LD_INT 1
58073: ARRAY
58074: PPUSH
58075: CALL_OW 254
58079: PPUSH
58080: LD_VAR 0 14
58084: PUSH
58085: LD_INT 1
58087: ARRAY
58088: PPUSH
58089: CALL_OW 248
58093: PPUSH
58094: LD_INT 0
58096: PPUSH
58097: CALL 34830 0 6
58101: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58102: LD_ADDR_VAR 0 8
58106: PUSH
58107: LD_VAR 0 4
58111: PUSH
58112: LD_VAR 0 7
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 9
58122: PPUSH
58123: CALL 53500 0 2
58127: ST_TO_ADDR
// if j then
58128: LD_VAR 0 8
58132: IFFALSE 58201
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58134: LD_VAR 0 8
58138: PUSH
58139: LD_INT 1
58141: ARRAY
58142: PPUSH
58143: LD_VAR 0 8
58147: PUSH
58148: LD_INT 2
58150: ARRAY
58151: PPUSH
58152: CALL_OW 488
58156: IFFALSE 58201
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58158: LD_VAR 0 4
58162: PUSH
58163: LD_VAR 0 7
58167: ARRAY
58168: PPUSH
58169: LD_VAR 0 8
58173: PUSH
58174: LD_INT 1
58176: ARRAY
58177: PPUSH
58178: LD_VAR 0 8
58182: PUSH
58183: LD_INT 2
58185: ARRAY
58186: PPUSH
58187: CALL_OW 116
// attacking := true ;
58191: LD_ADDR_VAR 0 29
58195: PUSH
58196: LD_INT 1
58198: ST_TO_ADDR
// continue ;
58199: GO 55574
// end ; end else
58201: GO 58227
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58203: LD_VAR 0 4
58207: PUSH
58208: LD_VAR 0 7
58212: ARRAY
58213: PPUSH
58214: LD_VAR 0 14
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: PPUSH
58223: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58227: LD_VAR 0 4
58231: PUSH
58232: LD_VAR 0 7
58236: ARRAY
58237: PPUSH
58238: CALL_OW 265
58242: PUSH
58243: LD_INT 11
58245: EQUAL
58246: IFFALSE 58524
// begin k := 10 ;
58248: LD_ADDR_VAR 0 9
58252: PUSH
58253: LD_INT 10
58255: ST_TO_ADDR
// x := 0 ;
58256: LD_ADDR_VAR 0 10
58260: PUSH
58261: LD_INT 0
58263: ST_TO_ADDR
// if tmp < k then
58264: LD_VAR 0 14
58268: PUSH
58269: LD_VAR 0 9
58273: LESS
58274: IFFALSE 58286
// k := tmp ;
58276: LD_ADDR_VAR 0 9
58280: PUSH
58281: LD_VAR 0 14
58285: ST_TO_ADDR
// for j = k downto 1 do
58286: LD_ADDR_VAR 0 8
58290: PUSH
58291: DOUBLE
58292: LD_VAR 0 9
58296: INC
58297: ST_TO_ADDR
58298: LD_INT 1
58300: PUSH
58301: FOR_DOWNTO
58302: IFFALSE 58377
// begin if GetType ( tmp [ j ] ) = unit_human then
58304: LD_VAR 0 14
58308: PUSH
58309: LD_VAR 0 8
58313: ARRAY
58314: PPUSH
58315: CALL_OW 247
58319: PUSH
58320: LD_INT 1
58322: EQUAL
58323: IFFALSE 58375
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58325: LD_VAR 0 4
58329: PUSH
58330: LD_VAR 0 7
58334: ARRAY
58335: PPUSH
58336: LD_VAR 0 14
58340: PUSH
58341: LD_VAR 0 8
58345: ARRAY
58346: PPUSH
58347: CALL 53771 0 2
// x := tmp [ j ] ;
58351: LD_ADDR_VAR 0 10
58355: PUSH
58356: LD_VAR 0 14
58360: PUSH
58361: LD_VAR 0 8
58365: ARRAY
58366: ST_TO_ADDR
// attacking := true ;
58367: LD_ADDR_VAR 0 29
58371: PUSH
58372: LD_INT 1
58374: ST_TO_ADDR
// end ; end ;
58375: GO 58301
58377: POP
58378: POP
// if not x then
58379: LD_VAR 0 10
58383: NOT
58384: IFFALSE 58524
// begin attacking := true ;
58386: LD_ADDR_VAR 0 29
58390: PUSH
58391: LD_INT 1
58393: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58394: LD_VAR 0 4
58398: PUSH
58399: LD_VAR 0 7
58403: ARRAY
58404: PPUSH
58405: CALL_OW 250
58409: PPUSH
58410: LD_VAR 0 4
58414: PUSH
58415: LD_VAR 0 7
58419: ARRAY
58420: PPUSH
58421: CALL_OW 251
58425: PPUSH
58426: CALL_OW 546
58430: PUSH
58431: LD_INT 2
58433: ARRAY
58434: PUSH
58435: LD_VAR 0 14
58439: PUSH
58440: LD_INT 1
58442: ARRAY
58443: PPUSH
58444: CALL_OW 250
58448: PPUSH
58449: LD_VAR 0 14
58453: PUSH
58454: LD_INT 1
58456: ARRAY
58457: PPUSH
58458: CALL_OW 251
58462: PPUSH
58463: CALL_OW 546
58467: PUSH
58468: LD_INT 2
58470: ARRAY
58471: EQUAL
58472: IFFALSE 58500
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58474: LD_VAR 0 4
58478: PUSH
58479: LD_VAR 0 7
58483: ARRAY
58484: PPUSH
58485: LD_VAR 0 14
58489: PUSH
58490: LD_INT 1
58492: ARRAY
58493: PPUSH
58494: CALL 53771 0 2
58498: GO 58524
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58500: LD_VAR 0 4
58504: PUSH
58505: LD_VAR 0 7
58509: ARRAY
58510: PPUSH
58511: LD_VAR 0 14
58515: PUSH
58516: LD_INT 1
58518: ARRAY
58519: PPUSH
58520: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58524: LD_VAR 0 4
58528: PUSH
58529: LD_VAR 0 7
58533: ARRAY
58534: PPUSH
58535: CALL_OW 264
58539: PUSH
58540: LD_INT 29
58542: EQUAL
58543: IFFALSE 58909
// begin if WantsToAttack ( group [ i ] ) in bombed then
58545: LD_VAR 0 4
58549: PUSH
58550: LD_VAR 0 7
58554: ARRAY
58555: PPUSH
58556: CALL_OW 319
58560: PUSH
58561: LD_VAR 0 28
58565: IN
58566: IFFALSE 58570
// continue ;
58568: GO 55574
// k := 8 ;
58570: LD_ADDR_VAR 0 9
58574: PUSH
58575: LD_INT 8
58577: ST_TO_ADDR
// x := 0 ;
58578: LD_ADDR_VAR 0 10
58582: PUSH
58583: LD_INT 0
58585: ST_TO_ADDR
// if tmp < k then
58586: LD_VAR 0 14
58590: PUSH
58591: LD_VAR 0 9
58595: LESS
58596: IFFALSE 58608
// k := tmp ;
58598: LD_ADDR_VAR 0 9
58602: PUSH
58603: LD_VAR 0 14
58607: ST_TO_ADDR
// for j = 1 to k do
58608: LD_ADDR_VAR 0 8
58612: PUSH
58613: DOUBLE
58614: LD_INT 1
58616: DEC
58617: ST_TO_ADDR
58618: LD_VAR 0 9
58622: PUSH
58623: FOR_TO
58624: IFFALSE 58756
// begin if GetType ( tmp [ j ] ) = unit_building then
58626: LD_VAR 0 14
58630: PUSH
58631: LD_VAR 0 8
58635: ARRAY
58636: PPUSH
58637: CALL_OW 247
58641: PUSH
58642: LD_INT 3
58644: EQUAL
58645: IFFALSE 58754
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58647: LD_VAR 0 14
58651: PUSH
58652: LD_VAR 0 8
58656: ARRAY
58657: PUSH
58658: LD_VAR 0 28
58662: IN
58663: NOT
58664: PUSH
58665: LD_VAR 0 14
58669: PUSH
58670: LD_VAR 0 8
58674: ARRAY
58675: PPUSH
58676: CALL_OW 313
58680: AND
58681: IFFALSE 58754
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58683: LD_VAR 0 4
58687: PUSH
58688: LD_VAR 0 7
58692: ARRAY
58693: PPUSH
58694: LD_VAR 0 14
58698: PUSH
58699: LD_VAR 0 8
58703: ARRAY
58704: PPUSH
58705: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58709: LD_ADDR_VAR 0 28
58713: PUSH
58714: LD_VAR 0 28
58718: PPUSH
58719: LD_VAR 0 28
58723: PUSH
58724: LD_INT 1
58726: PLUS
58727: PPUSH
58728: LD_VAR 0 14
58732: PUSH
58733: LD_VAR 0 8
58737: ARRAY
58738: PPUSH
58739: CALL_OW 1
58743: ST_TO_ADDR
// attacking := true ;
58744: LD_ADDR_VAR 0 29
58748: PUSH
58749: LD_INT 1
58751: ST_TO_ADDR
// break ;
58752: GO 58756
// end ; end ;
58754: GO 58623
58756: POP
58757: POP
// if not attacking and f_attack_depot then
58758: LD_VAR 0 29
58762: NOT
58763: PUSH
58764: LD_VAR 0 25
58768: AND
58769: IFFALSE 58864
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58771: LD_ADDR_VAR 0 13
58775: PUSH
58776: LD_VAR 0 14
58780: PPUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 30
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 30
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: PPUSH
58809: CALL_OW 72
58813: ST_TO_ADDR
// if z then
58814: LD_VAR 0 13
58818: IFFALSE 58864
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58820: LD_VAR 0 4
58824: PUSH
58825: LD_VAR 0 7
58829: ARRAY
58830: PPUSH
58831: LD_VAR 0 13
58835: PPUSH
58836: LD_VAR 0 4
58840: PUSH
58841: LD_VAR 0 7
58845: ARRAY
58846: PPUSH
58847: CALL_OW 74
58851: PPUSH
58852: CALL_OW 115
// attacking := true ;
58856: LD_ADDR_VAR 0 29
58860: PUSH
58861: LD_INT 1
58863: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58864: LD_VAR 0 4
58868: PUSH
58869: LD_VAR 0 7
58873: ARRAY
58874: PPUSH
58875: CALL_OW 256
58879: PUSH
58880: LD_INT 500
58882: LESS
58883: IFFALSE 58909
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58885: LD_VAR 0 4
58889: PUSH
58890: LD_VAR 0 7
58894: ARRAY
58895: PPUSH
58896: LD_VAR 0 14
58900: PUSH
58901: LD_INT 1
58903: ARRAY
58904: PPUSH
58905: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58909: LD_VAR 0 4
58913: PUSH
58914: LD_VAR 0 7
58918: ARRAY
58919: PPUSH
58920: CALL_OW 264
58924: PUSH
58925: LD_INT 49
58927: EQUAL
58928: IFFALSE 59049
// begin if not HasTask ( group [ i ] ) then
58930: LD_VAR 0 4
58934: PUSH
58935: LD_VAR 0 7
58939: ARRAY
58940: PPUSH
58941: CALL_OW 314
58945: NOT
58946: IFFALSE 59049
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58948: LD_ADDR_VAR 0 9
58952: PUSH
58953: LD_INT 81
58955: PUSH
58956: LD_VAR 0 4
58960: PUSH
58961: LD_VAR 0 7
58965: ARRAY
58966: PPUSH
58967: CALL_OW 255
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PPUSH
58976: CALL_OW 69
58980: PPUSH
58981: LD_VAR 0 4
58985: PUSH
58986: LD_VAR 0 7
58990: ARRAY
58991: PPUSH
58992: CALL_OW 74
58996: ST_TO_ADDR
// if k then
58997: LD_VAR 0 9
59001: IFFALSE 59049
// if GetDistUnits ( group [ i ] , k ) > 10 then
59003: LD_VAR 0 4
59007: PUSH
59008: LD_VAR 0 7
59012: ARRAY
59013: PPUSH
59014: LD_VAR 0 9
59018: PPUSH
59019: CALL_OW 296
59023: PUSH
59024: LD_INT 10
59026: GREATER
59027: IFFALSE 59049
// ComMoveUnit ( group [ i ] , k ) ;
59029: LD_VAR 0 4
59033: PUSH
59034: LD_VAR 0 7
59038: ARRAY
59039: PPUSH
59040: LD_VAR 0 9
59044: PPUSH
59045: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59049: LD_VAR 0 4
59053: PUSH
59054: LD_VAR 0 7
59058: ARRAY
59059: PPUSH
59060: CALL_OW 256
59064: PUSH
59065: LD_INT 250
59067: LESS
59068: PUSH
59069: LD_VAR 0 4
59073: PUSH
59074: LD_VAR 0 7
59078: ARRAY
59079: PUSH
59080: LD_INT 21
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 23
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PPUSH
59104: CALL_OW 69
59108: IN
59109: AND
59110: IFFALSE 59235
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59112: LD_ADDR_VAR 0 9
59116: PUSH
59117: LD_OWVAR 3
59121: PUSH
59122: LD_VAR 0 4
59126: PUSH
59127: LD_VAR 0 7
59131: ARRAY
59132: DIFF
59133: PPUSH
59134: LD_VAR 0 4
59138: PUSH
59139: LD_VAR 0 7
59143: ARRAY
59144: PPUSH
59145: CALL_OW 74
59149: ST_TO_ADDR
// if not k then
59150: LD_VAR 0 9
59154: NOT
59155: IFFALSE 59159
// continue ;
59157: GO 55574
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59159: LD_VAR 0 9
59163: PUSH
59164: LD_INT 81
59166: PUSH
59167: LD_VAR 0 4
59171: PUSH
59172: LD_VAR 0 7
59176: ARRAY
59177: PPUSH
59178: CALL_OW 255
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PPUSH
59187: CALL_OW 69
59191: IN
59192: PUSH
59193: LD_VAR 0 9
59197: PPUSH
59198: LD_VAR 0 4
59202: PUSH
59203: LD_VAR 0 7
59207: ARRAY
59208: PPUSH
59209: CALL_OW 296
59213: PUSH
59214: LD_INT 5
59216: LESS
59217: AND
59218: IFFALSE 59235
// ComAutodestruct ( group [ i ] ) ;
59220: LD_VAR 0 4
59224: PUSH
59225: LD_VAR 0 7
59229: ARRAY
59230: PPUSH
59231: CALL 53669 0 1
// end ; if f_attack_depot then
59235: LD_VAR 0 25
59239: IFFALSE 59351
// begin k := 6 ;
59241: LD_ADDR_VAR 0 9
59245: PUSH
59246: LD_INT 6
59248: ST_TO_ADDR
// if tmp < k then
59249: LD_VAR 0 14
59253: PUSH
59254: LD_VAR 0 9
59258: LESS
59259: IFFALSE 59271
// k := tmp ;
59261: LD_ADDR_VAR 0 9
59265: PUSH
59266: LD_VAR 0 14
59270: ST_TO_ADDR
// for j = 1 to k do
59271: LD_ADDR_VAR 0 8
59275: PUSH
59276: DOUBLE
59277: LD_INT 1
59279: DEC
59280: ST_TO_ADDR
59281: LD_VAR 0 9
59285: PUSH
59286: FOR_TO
59287: IFFALSE 59349
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59289: LD_VAR 0 8
59293: PPUSH
59294: CALL_OW 266
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: IN
59309: IFFALSE 59347
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59311: LD_VAR 0 4
59315: PUSH
59316: LD_VAR 0 7
59320: ARRAY
59321: PPUSH
59322: LD_VAR 0 14
59326: PUSH
59327: LD_VAR 0 8
59331: ARRAY
59332: PPUSH
59333: CALL_OW 115
// attacking := true ;
59337: LD_ADDR_VAR 0 29
59341: PUSH
59342: LD_INT 1
59344: ST_TO_ADDR
// break ;
59345: GO 59349
// end ;
59347: GO 59286
59349: POP
59350: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59351: LD_VAR 0 4
59355: PUSH
59356: LD_VAR 0 7
59360: ARRAY
59361: PPUSH
59362: CALL_OW 302
59366: PUSH
59367: LD_VAR 0 29
59371: NOT
59372: AND
59373: IFFALSE 59695
// begin if GetTag ( group [ i ] ) = 71 then
59375: LD_VAR 0 4
59379: PUSH
59380: LD_VAR 0 7
59384: ARRAY
59385: PPUSH
59386: CALL_OW 110
59390: PUSH
59391: LD_INT 71
59393: EQUAL
59394: IFFALSE 59435
// begin if HasTask ( group [ i ] ) then
59396: LD_VAR 0 4
59400: PUSH
59401: LD_VAR 0 7
59405: ARRAY
59406: PPUSH
59407: CALL_OW 314
59411: IFFALSE 59417
// continue else
59413: GO 55574
59415: GO 59435
// SetTag ( group [ i ] , 0 ) ;
59417: LD_VAR 0 4
59421: PUSH
59422: LD_VAR 0 7
59426: ARRAY
59427: PPUSH
59428: LD_INT 0
59430: PPUSH
59431: CALL_OW 109
// end ; k := 8 ;
59435: LD_ADDR_VAR 0 9
59439: PUSH
59440: LD_INT 8
59442: ST_TO_ADDR
// x := 0 ;
59443: LD_ADDR_VAR 0 10
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
// if tmp < k then
59451: LD_VAR 0 14
59455: PUSH
59456: LD_VAR 0 9
59460: LESS
59461: IFFALSE 59473
// k := tmp ;
59463: LD_ADDR_VAR 0 9
59467: PUSH
59468: LD_VAR 0 14
59472: ST_TO_ADDR
// for j = 1 to k do
59473: LD_ADDR_VAR 0 8
59477: PUSH
59478: DOUBLE
59479: LD_INT 1
59481: DEC
59482: ST_TO_ADDR
59483: LD_VAR 0 9
59487: PUSH
59488: FOR_TO
59489: IFFALSE 59587
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59491: LD_VAR 0 14
59495: PUSH
59496: LD_VAR 0 8
59500: ARRAY
59501: PPUSH
59502: CALL_OW 247
59506: PUSH
59507: LD_INT 1
59509: EQUAL
59510: PUSH
59511: LD_VAR 0 14
59515: PUSH
59516: LD_VAR 0 8
59520: ARRAY
59521: PPUSH
59522: CALL_OW 256
59526: PUSH
59527: LD_INT 250
59529: LESS
59530: PUSH
59531: LD_VAR 0 20
59535: AND
59536: PUSH
59537: LD_VAR 0 20
59541: NOT
59542: PUSH
59543: LD_VAR 0 14
59547: PUSH
59548: LD_VAR 0 8
59552: ARRAY
59553: PPUSH
59554: CALL_OW 256
59558: PUSH
59559: LD_INT 250
59561: GREATEREQUAL
59562: AND
59563: OR
59564: AND
59565: IFFALSE 59585
// begin x := tmp [ j ] ;
59567: LD_ADDR_VAR 0 10
59571: PUSH
59572: LD_VAR 0 14
59576: PUSH
59577: LD_VAR 0 8
59581: ARRAY
59582: ST_TO_ADDR
// break ;
59583: GO 59587
// end ;
59585: GO 59488
59587: POP
59588: POP
// if x then
59589: LD_VAR 0 10
59593: IFFALSE 59617
// ComAttackUnit ( group [ i ] , x ) else
59595: LD_VAR 0 4
59599: PUSH
59600: LD_VAR 0 7
59604: ARRAY
59605: PPUSH
59606: LD_VAR 0 10
59610: PPUSH
59611: CALL_OW 115
59615: GO 59641
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59617: LD_VAR 0 4
59621: PUSH
59622: LD_VAR 0 7
59626: ARRAY
59627: PPUSH
59628: LD_VAR 0 14
59632: PUSH
59633: LD_INT 1
59635: ARRAY
59636: PPUSH
59637: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59641: LD_VAR 0 4
59645: PUSH
59646: LD_VAR 0 7
59650: ARRAY
59651: PPUSH
59652: CALL_OW 314
59656: NOT
59657: IFFALSE 59695
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59659: LD_VAR 0 4
59663: PUSH
59664: LD_VAR 0 7
59668: ARRAY
59669: PPUSH
59670: LD_VAR 0 14
59674: PPUSH
59675: LD_VAR 0 4
59679: PUSH
59680: LD_VAR 0 7
59684: ARRAY
59685: PPUSH
59686: CALL_OW 74
59690: PPUSH
59691: CALL_OW 115
// end ; end ; end ;
59695: GO 55574
59697: POP
59698: POP
// wait ( 0 0$2 ) ;
59699: LD_INT 70
59701: PPUSH
59702: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59706: LD_VAR 0 4
59710: NOT
59711: PUSH
59712: LD_VAR 0 4
59716: PUSH
59717: EMPTY
59718: EQUAL
59719: OR
59720: PUSH
59721: LD_INT 81
59723: PUSH
59724: LD_VAR 0 35
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PPUSH
59733: CALL_OW 69
59737: NOT
59738: OR
59739: IFFALSE 55559
// end ;
59741: LD_VAR 0 2
59745: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59746: LD_INT 0
59748: PPUSH
59749: PPUSH
59750: PPUSH
59751: PPUSH
// if not base_units then
59752: LD_VAR 0 1
59756: NOT
59757: IFFALSE 59761
// exit ;
59759: GO 59848
// result := false ;
59761: LD_ADDR_VAR 0 2
59765: PUSH
59766: LD_INT 0
59768: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59769: LD_ADDR_VAR 0 5
59773: PUSH
59774: LD_VAR 0 1
59778: PPUSH
59779: LD_INT 21
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PPUSH
59789: CALL_OW 72
59793: ST_TO_ADDR
// if not tmp then
59794: LD_VAR 0 5
59798: NOT
59799: IFFALSE 59803
// exit ;
59801: GO 59848
// for i in tmp do
59803: LD_ADDR_VAR 0 3
59807: PUSH
59808: LD_VAR 0 5
59812: PUSH
59813: FOR_IN
59814: IFFALSE 59846
// begin result := EnemyInRange ( i , 22 ) ;
59816: LD_ADDR_VAR 0 2
59820: PUSH
59821: LD_VAR 0 3
59825: PPUSH
59826: LD_INT 22
59828: PPUSH
59829: CALL 53375 0 2
59833: ST_TO_ADDR
// if result then
59834: LD_VAR 0 2
59838: IFFALSE 59844
// exit ;
59840: POP
59841: POP
59842: GO 59848
// end ;
59844: GO 59813
59846: POP
59847: POP
// end ;
59848: LD_VAR 0 2
59852: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59853: LD_INT 0
59855: PPUSH
59856: PPUSH
// if not units then
59857: LD_VAR 0 1
59861: NOT
59862: IFFALSE 59866
// exit ;
59864: GO 59936
// result := [ ] ;
59866: LD_ADDR_VAR 0 3
59870: PUSH
59871: EMPTY
59872: ST_TO_ADDR
// for i in units do
59873: LD_ADDR_VAR 0 4
59877: PUSH
59878: LD_VAR 0 1
59882: PUSH
59883: FOR_IN
59884: IFFALSE 59934
// if GetTag ( i ) = tag then
59886: LD_VAR 0 4
59890: PPUSH
59891: CALL_OW 110
59895: PUSH
59896: LD_VAR 0 2
59900: EQUAL
59901: IFFALSE 59932
// result := Insert ( result , result + 1 , i ) ;
59903: LD_ADDR_VAR 0 3
59907: PUSH
59908: LD_VAR 0 3
59912: PPUSH
59913: LD_VAR 0 3
59917: PUSH
59918: LD_INT 1
59920: PLUS
59921: PPUSH
59922: LD_VAR 0 4
59926: PPUSH
59927: CALL_OW 2
59931: ST_TO_ADDR
59932: GO 59883
59934: POP
59935: POP
// end ;
59936: LD_VAR 0 3
59940: RET
// export function IsDriver ( un ) ; begin
59941: LD_INT 0
59943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59944: LD_ADDR_VAR 0 2
59948: PUSH
59949: LD_VAR 0 1
59953: PUSH
59954: LD_INT 55
59956: PUSH
59957: EMPTY
59958: LIST
59959: PPUSH
59960: CALL_OW 69
59964: IN
59965: ST_TO_ADDR
// end ;
59966: LD_VAR 0 2
59970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59971: LD_INT 0
59973: PPUSH
59974: PPUSH
// list := [ ] ;
59975: LD_ADDR_VAR 0 5
59979: PUSH
59980: EMPTY
59981: ST_TO_ADDR
// case d of 0 :
59982: LD_VAR 0 3
59986: PUSH
59987: LD_INT 0
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 59995
59993: GO 60128
59995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59996: LD_ADDR_VAR 0 5
60000: PUSH
60001: LD_VAR 0 1
60005: PUSH
60006: LD_INT 4
60008: MINUS
60009: PUSH
60010: LD_VAR 0 2
60014: PUSH
60015: LD_INT 4
60017: MINUS
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: LD_VAR 0 1
60031: PUSH
60032: LD_INT 3
60034: MINUS
60035: PUSH
60036: LD_VAR 0 2
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: PUSH
60049: LD_VAR 0 1
60053: PUSH
60054: LD_INT 4
60056: PLUS
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: LD_INT 4
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_VAR 0 1
60075: PUSH
60076: LD_INT 3
60078: PLUS
60079: PUSH
60080: LD_VAR 0 2
60084: PUSH
60085: LD_INT 3
60087: PLUS
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: PUSH
60097: LD_VAR 0 1
60101: PUSH
60102: LD_VAR 0 2
60106: PUSH
60107: LD_INT 4
60109: PLUS
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// end ; 1 :
60126: GO 60826
60128: LD_INT 1
60130: DOUBLE
60131: EQUAL
60132: IFTRUE 60136
60134: GO 60269
60136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60137: LD_ADDR_VAR 0 5
60141: PUSH
60142: LD_VAR 0 1
60146: PUSH
60147: LD_VAR 0 2
60151: PUSH
60152: LD_INT 4
60154: MINUS
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: PUSH
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 3
60171: MINUS
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: LD_INT 3
60180: MINUS
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: PUSH
60190: LD_VAR 0 1
60194: PUSH
60195: LD_INT 4
60197: MINUS
60198: PUSH
60199: LD_VAR 0 2
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: PUSH
60212: LD_VAR 0 1
60216: PUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_INT 3
60224: PLUS
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: PUSH
60234: LD_VAR 0 1
60238: PUSH
60239: LD_INT 4
60241: PLUS
60242: PUSH
60243: LD_VAR 0 2
60247: PUSH
60248: LD_INT 4
60250: PLUS
60251: PUSH
60252: LD_INT 5
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: ST_TO_ADDR
// end ; 2 :
60267: GO 60826
60269: LD_INT 2
60271: DOUBLE
60272: EQUAL
60273: IFTRUE 60277
60275: GO 60406
60277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60278: LD_ADDR_VAR 0 5
60282: PUSH
60283: LD_VAR 0 1
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 3
60295: MINUS
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: PUSH
60305: LD_VAR 0 1
60309: PUSH
60310: LD_INT 4
60312: PLUS
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 4
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: PUSH
60327: LD_VAR 0 1
60331: PUSH
60332: LD_VAR 0 2
60336: PUSH
60337: LD_INT 4
60339: PLUS
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: PUSH
60349: LD_VAR 0 1
60353: PUSH
60354: LD_INT 3
60356: MINUS
60357: PUSH
60358: LD_VAR 0 2
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: PUSH
60371: LD_VAR 0 1
60375: PUSH
60376: LD_INT 4
60378: MINUS
60379: PUSH
60380: LD_VAR 0 2
60384: PUSH
60385: LD_INT 4
60387: MINUS
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: ST_TO_ADDR
// end ; 3 :
60404: GO 60826
60406: LD_INT 3
60408: DOUBLE
60409: EQUAL
60410: IFTRUE 60414
60412: GO 60547
60414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60415: LD_ADDR_VAR 0 5
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: LD_INT 3
60427: PLUS
60428: PUSH
60429: LD_VAR 0 2
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: PUSH
60442: LD_VAR 0 1
60446: PUSH
60447: LD_INT 4
60449: PLUS
60450: PUSH
60451: LD_VAR 0 2
60455: PUSH
60456: LD_INT 4
60458: PLUS
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: LD_VAR 0 1
60472: PUSH
60473: LD_INT 4
60475: MINUS
60476: PUSH
60477: LD_VAR 0 2
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: PUSH
60490: LD_VAR 0 1
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: LD_INT 4
60502: MINUS
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: LD_VAR 0 1
60516: PUSH
60517: LD_INT 3
60519: MINUS
60520: PUSH
60521: LD_VAR 0 2
60525: PUSH
60526: LD_INT 3
60528: MINUS
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// end ; 4 :
60545: GO 60826
60547: LD_INT 4
60549: DOUBLE
60550: EQUAL
60551: IFTRUE 60555
60553: GO 60688
60555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60556: LD_ADDR_VAR 0 5
60560: PUSH
60561: LD_VAR 0 1
60565: PUSH
60566: LD_VAR 0 2
60570: PUSH
60571: LD_INT 4
60573: PLUS
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: LD_VAR 0 1
60587: PUSH
60588: LD_INT 3
60590: PLUS
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_INT 3
60599: PLUS
60600: PUSH
60601: LD_INT 5
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: LD_VAR 0 1
60613: PUSH
60614: LD_INT 4
60616: PLUS
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: LD_VAR 0 2
60640: PUSH
60641: LD_INT 3
60643: MINUS
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: LIST
60652: PUSH
60653: LD_VAR 0 1
60657: PUSH
60658: LD_INT 4
60660: MINUS
60661: PUSH
60662: LD_VAR 0 2
60666: PUSH
60667: LD_INT 4
60669: MINUS
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// end ; 5 :
60686: GO 60826
60688: LD_INT 5
60690: DOUBLE
60691: EQUAL
60692: IFTRUE 60696
60694: GO 60825
60696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_INT 4
60709: MINUS
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: LD_VAR 0 1
60728: PUSH
60729: LD_VAR 0 2
60733: PUSH
60734: LD_INT 4
60736: MINUS
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: PUSH
60746: LD_VAR 0 1
60750: PUSH
60751: LD_INT 4
60753: PLUS
60754: PUSH
60755: LD_VAR 0 2
60759: PUSH
60760: LD_INT 4
60762: PLUS
60763: PUSH
60764: LD_INT 5
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: PUSH
60772: LD_VAR 0 1
60776: PUSH
60777: LD_INT 3
60779: PLUS
60780: PUSH
60781: LD_VAR 0 2
60785: PUSH
60786: LD_INT 4
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: PUSH
60794: LD_VAR 0 1
60798: PUSH
60799: LD_VAR 0 2
60803: PUSH
60804: LD_INT 3
60806: PLUS
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// end ; end ;
60823: GO 60826
60825: POP
// result := list ;
60826: LD_ADDR_VAR 0 4
60830: PUSH
60831: LD_VAR 0 5
60835: ST_TO_ADDR
// end ;
60836: LD_VAR 0 4
60840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
60845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60846: LD_VAR 0 1
60850: NOT
60851: PUSH
60852: LD_VAR 0 2
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: IN
60875: NOT
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 60973
// tmp := [ ] ;
60881: LD_ADDR_VAR 0 5
60885: PUSH
60886: EMPTY
60887: ST_TO_ADDR
// for i in units do
60888: LD_ADDR_VAR 0 4
60892: PUSH
60893: LD_VAR 0 1
60897: PUSH
60898: FOR_IN
60899: IFFALSE 60942
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60901: LD_ADDR_VAR 0 5
60905: PUSH
60906: LD_VAR 0 5
60910: PPUSH
60911: LD_VAR 0 5
60915: PUSH
60916: LD_INT 1
60918: PLUS
60919: PPUSH
60920: LD_VAR 0 4
60924: PPUSH
60925: LD_VAR 0 2
60929: PPUSH
60930: CALL_OW 259
60934: PPUSH
60935: CALL_OW 2
60939: ST_TO_ADDR
60940: GO 60898
60942: POP
60943: POP
// if not tmp then
60944: LD_VAR 0 5
60948: NOT
60949: IFFALSE 60953
// exit ;
60951: GO 60973
// result := SortListByListDesc ( units , tmp ) ;
60953: LD_ADDR_VAR 0 3
60957: PUSH
60958: LD_VAR 0 1
60962: PPUSH
60963: LD_VAR 0 5
60967: PPUSH
60968: CALL_OW 77
60972: ST_TO_ADDR
// end ;
60973: LD_VAR 0 3
60977: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60978: LD_INT 0
60980: PPUSH
60981: PPUSH
60982: PPUSH
// x := GetX ( building ) ;
60983: LD_ADDR_VAR 0 4
60987: PUSH
60988: LD_VAR 0 2
60992: PPUSH
60993: CALL_OW 250
60997: ST_TO_ADDR
// y := GetY ( building ) ;
60998: LD_ADDR_VAR 0 5
61002: PUSH
61003: LD_VAR 0 2
61007: PPUSH
61008: CALL_OW 251
61012: ST_TO_ADDR
// if GetTaskList ( unit ) then
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 437
61022: IFFALSE 61117
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61024: LD_STRING e
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL_OW 437
61036: PUSH
61037: LD_INT 1
61039: ARRAY
61040: PUSH
61041: LD_INT 1
61043: ARRAY
61044: EQUAL
61045: PUSH
61046: LD_VAR 0 4
61050: PUSH
61051: LD_VAR 0 1
61055: PPUSH
61056: CALL_OW 437
61060: PUSH
61061: LD_INT 1
61063: ARRAY
61064: PUSH
61065: LD_INT 2
61067: ARRAY
61068: EQUAL
61069: AND
61070: PUSH
61071: LD_VAR 0 5
61075: PUSH
61076: LD_VAR 0 1
61080: PPUSH
61081: CALL_OW 437
61085: PUSH
61086: LD_INT 1
61088: ARRAY
61089: PUSH
61090: LD_INT 3
61092: ARRAY
61093: EQUAL
61094: AND
61095: IFFALSE 61107
// result := true else
61097: LD_ADDR_VAR 0 3
61101: PUSH
61102: LD_INT 1
61104: ST_TO_ADDR
61105: GO 61115
// result := false ;
61107: LD_ADDR_VAR 0 3
61111: PUSH
61112: LD_INT 0
61114: ST_TO_ADDR
// end else
61115: GO 61125
// result := false ;
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: LD_INT 0
61124: ST_TO_ADDR
// end ;
61125: LD_VAR 0 3
61129: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61130: LD_INT 0
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
// if not unit or not area then
61136: LD_VAR 0 1
61140: NOT
61141: PUSH
61142: LD_VAR 0 2
61146: NOT
61147: OR
61148: IFFALSE 61152
// exit ;
61150: GO 61316
// tmp := AreaToList ( area , i ) ;
61152: LD_ADDR_VAR 0 6
61156: PUSH
61157: LD_VAR 0 2
61161: PPUSH
61162: LD_VAR 0 5
61166: PPUSH
61167: CALL_OW 517
61171: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61172: LD_ADDR_VAR 0 5
61176: PUSH
61177: DOUBLE
61178: LD_INT 1
61180: DEC
61181: ST_TO_ADDR
61182: LD_VAR 0 6
61186: PUSH
61187: LD_INT 1
61189: ARRAY
61190: PUSH
61191: FOR_TO
61192: IFFALSE 61314
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61194: LD_ADDR_VAR 0 7
61198: PUSH
61199: LD_VAR 0 6
61203: PUSH
61204: LD_INT 1
61206: ARRAY
61207: PUSH
61208: LD_VAR 0 5
61212: ARRAY
61213: PUSH
61214: LD_VAR 0 6
61218: PUSH
61219: LD_INT 2
61221: ARRAY
61222: PUSH
61223: LD_VAR 0 5
61227: ARRAY
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61233: LD_VAR 0 7
61237: PUSH
61238: LD_INT 1
61240: ARRAY
61241: PPUSH
61242: LD_VAR 0 7
61246: PUSH
61247: LD_INT 2
61249: ARRAY
61250: PPUSH
61251: CALL_OW 428
61255: PUSH
61256: LD_INT 0
61258: EQUAL
61259: IFFALSE 61312
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61261: LD_VAR 0 1
61265: PPUSH
61266: LD_VAR 0 7
61270: PUSH
61271: LD_INT 1
61273: ARRAY
61274: PPUSH
61275: LD_VAR 0 7
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PPUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: CALL_OW 48
// result := IsPlaced ( unit ) ;
61293: LD_ADDR_VAR 0 4
61297: PUSH
61298: LD_VAR 0 1
61302: PPUSH
61303: CALL_OW 305
61307: ST_TO_ADDR
// exit ;
61308: POP
61309: POP
61310: GO 61316
// end ; end ;
61312: GO 61191
61314: POP
61315: POP
// end ;
61316: LD_VAR 0 4
61320: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
// if not side or side > 8 then
61326: LD_VAR 0 1
61330: NOT
61331: PUSH
61332: LD_VAR 0 1
61336: PUSH
61337: LD_INT 8
61339: GREATER
61340: OR
61341: IFFALSE 61345
// exit ;
61343: GO 61532
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61345: LD_ADDR_VAR 0 4
61349: PUSH
61350: LD_INT 22
61352: PUSH
61353: LD_VAR 0 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 21
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PPUSH
61376: CALL_OW 69
61380: ST_TO_ADDR
// if not tmp then
61381: LD_VAR 0 4
61385: NOT
61386: IFFALSE 61390
// exit ;
61388: GO 61532
// enable_addtolog := true ;
61390: LD_ADDR_OWVAR 81
61394: PUSH
61395: LD_INT 1
61397: ST_TO_ADDR
// AddToLog ( [ ) ;
61398: LD_STRING [
61400: PPUSH
61401: CALL_OW 561
// for i in tmp do
61405: LD_ADDR_VAR 0 3
61409: PUSH
61410: LD_VAR 0 4
61414: PUSH
61415: FOR_IN
61416: IFFALSE 61523
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61418: LD_STRING [
61420: PUSH
61421: LD_VAR 0 3
61425: PPUSH
61426: CALL_OW 266
61430: STR
61431: PUSH
61432: LD_STRING , 
61434: STR
61435: PUSH
61436: LD_VAR 0 3
61440: PPUSH
61441: CALL_OW 250
61445: STR
61446: PUSH
61447: LD_STRING , 
61449: STR
61450: PUSH
61451: LD_VAR 0 3
61455: PPUSH
61456: CALL_OW 251
61460: STR
61461: PUSH
61462: LD_STRING , 
61464: STR
61465: PUSH
61466: LD_VAR 0 3
61470: PPUSH
61471: CALL_OW 254
61475: STR
61476: PUSH
61477: LD_STRING , 
61479: STR
61480: PUSH
61481: LD_VAR 0 3
61485: PPUSH
61486: LD_INT 1
61488: PPUSH
61489: CALL_OW 268
61493: STR
61494: PUSH
61495: LD_STRING , 
61497: STR
61498: PUSH
61499: LD_VAR 0 3
61503: PPUSH
61504: LD_INT 2
61506: PPUSH
61507: CALL_OW 268
61511: STR
61512: PUSH
61513: LD_STRING ],
61515: STR
61516: PPUSH
61517: CALL_OW 561
// end ;
61521: GO 61415
61523: POP
61524: POP
// AddToLog ( ]; ) ;
61525: LD_STRING ];
61527: PPUSH
61528: CALL_OW 561
// end ;
61532: LD_VAR 0 2
61536: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
// if not area or not rate or not max then
61544: LD_VAR 0 1
61548: NOT
61549: PUSH
61550: LD_VAR 0 2
61554: NOT
61555: OR
61556: PUSH
61557: LD_VAR 0 4
61561: NOT
61562: OR
61563: IFFALSE 61567
// exit ;
61565: GO 61759
// while 1 do
61567: LD_INT 1
61569: IFFALSE 61759
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61571: LD_ADDR_VAR 0 9
61575: PUSH
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_INT 1
61583: PPUSH
61584: CALL_OW 287
61588: PUSH
61589: LD_INT 10
61591: MUL
61592: ST_TO_ADDR
// r := rate / 10 ;
61593: LD_ADDR_VAR 0 7
61597: PUSH
61598: LD_VAR 0 2
61602: PUSH
61603: LD_INT 10
61605: DIVREAL
61606: ST_TO_ADDR
// time := 1 1$00 ;
61607: LD_ADDR_VAR 0 8
61611: PUSH
61612: LD_INT 2100
61614: ST_TO_ADDR
// if amount < min then
61615: LD_VAR 0 9
61619: PUSH
61620: LD_VAR 0 3
61624: LESS
61625: IFFALSE 61643
// r := r * 2 else
61627: LD_ADDR_VAR 0 7
61631: PUSH
61632: LD_VAR 0 7
61636: PUSH
61637: LD_INT 2
61639: MUL
61640: ST_TO_ADDR
61641: GO 61669
// if amount > max then
61643: LD_VAR 0 9
61647: PUSH
61648: LD_VAR 0 4
61652: GREATER
61653: IFFALSE 61669
// r := r / 2 ;
61655: LD_ADDR_VAR 0 7
61659: PUSH
61660: LD_VAR 0 7
61664: PUSH
61665: LD_INT 2
61667: DIVREAL
61668: ST_TO_ADDR
// time := time / r ;
61669: LD_ADDR_VAR 0 8
61673: PUSH
61674: LD_VAR 0 8
61678: PUSH
61679: LD_VAR 0 7
61683: DIVREAL
61684: ST_TO_ADDR
// if time < 0 then
61685: LD_VAR 0 8
61689: PUSH
61690: LD_INT 0
61692: LESS
61693: IFFALSE 61710
// time := time * - 1 ;
61695: LD_ADDR_VAR 0 8
61699: PUSH
61700: LD_VAR 0 8
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: MUL
61709: ST_TO_ADDR
// wait ( time ) ;
61710: LD_VAR 0 8
61714: PPUSH
61715: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61719: LD_INT 35
61721: PPUSH
61722: LD_INT 875
61724: PPUSH
61725: CALL_OW 12
61729: PPUSH
61730: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61734: LD_INT 1
61736: PPUSH
61737: LD_INT 5
61739: PPUSH
61740: CALL_OW 12
61744: PPUSH
61745: LD_VAR 0 1
61749: PPUSH
61750: LD_INT 1
61752: PPUSH
61753: CALL_OW 55
// end ;
61757: GO 61567
// end ;
61759: LD_VAR 0 5
61763: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61764: LD_INT 0
61766: PPUSH
61767: PPUSH
61768: PPUSH
61769: PPUSH
61770: PPUSH
61771: PPUSH
61772: PPUSH
61773: PPUSH
// if not turrets or not factories then
61774: LD_VAR 0 1
61778: NOT
61779: PUSH
61780: LD_VAR 0 2
61784: NOT
61785: OR
61786: IFFALSE 61790
// exit ;
61788: GO 62097
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61790: LD_ADDR_VAR 0 10
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: LD_INT 6
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: LD_INT 5
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 24
61832: PUSH
61833: LD_INT 25
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 23
61842: PUSH
61843: LD_INT 27
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 42
61856: PUSH
61857: LD_INT 43
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 44
61866: PUSH
61867: LD_INT 46
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 45
61876: PUSH
61877: LD_INT 47
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// result := [ ] ;
61894: LD_ADDR_VAR 0 3
61898: PUSH
61899: EMPTY
61900: ST_TO_ADDR
// for i in turrets do
61901: LD_ADDR_VAR 0 4
61905: PUSH
61906: LD_VAR 0 1
61910: PUSH
61911: FOR_IN
61912: IFFALSE 62095
// begin nat := GetNation ( i ) ;
61914: LD_ADDR_VAR 0 7
61918: PUSH
61919: LD_VAR 0 4
61923: PPUSH
61924: CALL_OW 248
61928: ST_TO_ADDR
// weapon := 0 ;
61929: LD_ADDR_VAR 0 8
61933: PUSH
61934: LD_INT 0
61936: ST_TO_ADDR
// if not nat then
61937: LD_VAR 0 7
61941: NOT
61942: IFFALSE 61946
// continue ;
61944: GO 61911
// for j in list [ nat ] do
61946: LD_ADDR_VAR 0 5
61950: PUSH
61951: LD_VAR 0 10
61955: PUSH
61956: LD_VAR 0 7
61960: ARRAY
61961: PUSH
61962: FOR_IN
61963: IFFALSE 62004
// if GetBWeapon ( i ) = j [ 1 ] then
61965: LD_VAR 0 4
61969: PPUSH
61970: CALL_OW 269
61974: PUSH
61975: LD_VAR 0 5
61979: PUSH
61980: LD_INT 1
61982: ARRAY
61983: EQUAL
61984: IFFALSE 62002
// begin weapon := j [ 2 ] ;
61986: LD_ADDR_VAR 0 8
61990: PUSH
61991: LD_VAR 0 5
61995: PUSH
61996: LD_INT 2
61998: ARRAY
61999: ST_TO_ADDR
// break ;
62000: GO 62004
// end ;
62002: GO 61962
62004: POP
62005: POP
// if not weapon then
62006: LD_VAR 0 8
62010: NOT
62011: IFFALSE 62015
// continue ;
62013: GO 61911
// for k in factories do
62015: LD_ADDR_VAR 0 6
62019: PUSH
62020: LD_VAR 0 2
62024: PUSH
62025: FOR_IN
62026: IFFALSE 62091
// begin weapons := AvailableWeaponList ( k ) ;
62028: LD_ADDR_VAR 0 9
62032: PUSH
62033: LD_VAR 0 6
62037: PPUSH
62038: CALL_OW 478
62042: ST_TO_ADDR
// if not weapons then
62043: LD_VAR 0 9
62047: NOT
62048: IFFALSE 62052
// continue ;
62050: GO 62025
// if weapon in weapons then
62052: LD_VAR 0 8
62056: PUSH
62057: LD_VAR 0 9
62061: IN
62062: IFFALSE 62089
// begin result := [ i , weapon ] ;
62064: LD_ADDR_VAR 0 3
62068: PUSH
62069: LD_VAR 0 4
62073: PUSH
62074: LD_VAR 0 8
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: ST_TO_ADDR
// exit ;
62083: POP
62084: POP
62085: POP
62086: POP
62087: GO 62097
// end ; end ;
62089: GO 62025
62091: POP
62092: POP
// end ;
62093: GO 61911
62095: POP
62096: POP
// end ;
62097: LD_VAR 0 3
62101: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62102: LD_INT 0
62104: PPUSH
// if not side or side > 8 then
62105: LD_VAR 0 3
62109: NOT
62110: PUSH
62111: LD_VAR 0 3
62115: PUSH
62116: LD_INT 8
62118: GREATER
62119: OR
62120: IFFALSE 62124
// exit ;
62122: GO 62183
// if not range then
62124: LD_VAR 0 4
62128: NOT
62129: IFFALSE 62140
// range := - 12 ;
62131: LD_ADDR_VAR 0 4
62135: PUSH
62136: LD_INT 12
62138: NEG
62139: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62140: LD_VAR 0 1
62144: PPUSH
62145: LD_VAR 0 2
62149: PPUSH
62150: LD_VAR 0 3
62154: PPUSH
62155: LD_VAR 0 4
62159: PPUSH
62160: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62164: LD_VAR 0 1
62168: PPUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: LD_VAR 0 3
62178: PPUSH
62179: CALL_OW 331
// end ;
62183: LD_VAR 0 5
62187: RET
// export function Video ( mode ) ; begin
62188: LD_INT 0
62190: PPUSH
// ingame_video = mode ;
62191: LD_ADDR_OWVAR 52
62195: PUSH
62196: LD_VAR 0 1
62200: ST_TO_ADDR
// interface_hidden = mode ;
62201: LD_ADDR_OWVAR 54
62205: PUSH
62206: LD_VAR 0 1
62210: ST_TO_ADDR
// end ;
62211: LD_VAR 0 2
62215: RET
// export function Join ( array , element ) ; begin
62216: LD_INT 0
62218: PPUSH
// result := array ^ element ;
62219: LD_ADDR_VAR 0 3
62223: PUSH
62224: LD_VAR 0 1
62228: PUSH
62229: LD_VAR 0 2
62233: ADD
62234: ST_TO_ADDR
// end ;
62235: LD_VAR 0 3
62239: RET
// export function JoinUnion ( array , element ) ; begin
62240: LD_INT 0
62242: PPUSH
// result := array union element ;
62243: LD_ADDR_VAR 0 3
62247: PUSH
62248: LD_VAR 0 1
62252: PUSH
62253: LD_VAR 0 2
62257: UNION
62258: ST_TO_ADDR
// end ;
62259: LD_VAR 0 3
62263: RET
// export function GetBehemoths ( side ) ; begin
62264: LD_INT 0
62266: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62267: LD_ADDR_VAR 0 2
62271: PUSH
62272: LD_INT 22
62274: PUSH
62275: LD_VAR 0 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 31
62286: PUSH
62287: LD_INT 25
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PPUSH
62298: CALL_OW 69
62302: ST_TO_ADDR
// end ;
62303: LD_VAR 0 2
62307: RET
// export function Shuffle ( array ) ; var i , index ; begin
62308: LD_INT 0
62310: PPUSH
62311: PPUSH
62312: PPUSH
// result := [ ] ;
62313: LD_ADDR_VAR 0 2
62317: PUSH
62318: EMPTY
62319: ST_TO_ADDR
// if not array then
62320: LD_VAR 0 1
62324: NOT
62325: IFFALSE 62329
// exit ;
62327: GO 62428
// Randomize ;
62329: CALL_OW 10
// for i = array downto 1 do
62333: LD_ADDR_VAR 0 3
62337: PUSH
62338: DOUBLE
62339: LD_VAR 0 1
62343: INC
62344: ST_TO_ADDR
62345: LD_INT 1
62347: PUSH
62348: FOR_DOWNTO
62349: IFFALSE 62426
// begin index := rand ( 1 , array ) ;
62351: LD_ADDR_VAR 0 4
62355: PUSH
62356: LD_INT 1
62358: PPUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: CALL_OW 12
62368: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62369: LD_ADDR_VAR 0 2
62373: PUSH
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_VAR 0 2
62383: PUSH
62384: LD_INT 1
62386: PLUS
62387: PPUSH
62388: LD_VAR 0 1
62392: PUSH
62393: LD_VAR 0 4
62397: ARRAY
62398: PPUSH
62399: CALL_OW 2
62403: ST_TO_ADDR
// array := Delete ( array , index ) ;
62404: LD_ADDR_VAR 0 1
62408: PUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_VAR 0 4
62418: PPUSH
62419: CALL_OW 3
62423: ST_TO_ADDR
// end ;
62424: GO 62348
62426: POP
62427: POP
// end ;
62428: LD_VAR 0 2
62432: RET
// export function GetBaseMaterials ( base ) ; begin
62433: LD_INT 0
62435: PPUSH
// result := [ 0 , 0 , 0 ] ;
62436: LD_ADDR_VAR 0 2
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: ST_TO_ADDR
// if not base then
62455: LD_VAR 0 1
62459: NOT
62460: IFFALSE 62464
// exit ;
62462: GO 62513
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_VAR 0 1
62473: PPUSH
62474: LD_INT 1
62476: PPUSH
62477: CALL_OW 275
62481: PUSH
62482: LD_VAR 0 1
62486: PPUSH
62487: LD_INT 2
62489: PPUSH
62490: CALL_OW 275
62494: PUSH
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_INT 3
62502: PPUSH
62503: CALL_OW 275
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: LIST
62512: ST_TO_ADDR
// end ; end_of_file
62513: LD_VAR 0 2
62517: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62518: GO 62520
62520: DISABLE
// begin ru_radar := 98 ;
62521: LD_ADDR_EXP 29
62525: PUSH
62526: LD_INT 98
62528: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62529: LD_ADDR_EXP 30
62533: PUSH
62534: LD_INT 89
62536: ST_TO_ADDR
// us_hack := 99 ;
62537: LD_ADDR_EXP 31
62541: PUSH
62542: LD_INT 99
62544: ST_TO_ADDR
// us_artillery := 97 ;
62545: LD_ADDR_EXP 32
62549: PUSH
62550: LD_INT 97
62552: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62553: LD_ADDR_EXP 33
62557: PUSH
62558: LD_INT 91
62560: ST_TO_ADDR
// end ; end_of_file
62561: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62562: LD_INT 0
62564: PPUSH
62565: PPUSH
// skirmish := false ;
62566: LD_ADDR_EXP 34
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// debug_mc := false ;
62574: LD_ADDR_EXP 35
62578: PUSH
62579: LD_INT 0
62581: ST_TO_ADDR
// mc_bases := [ ] ;
62582: LD_ADDR_EXP 36
62586: PUSH
62587: EMPTY
62588: ST_TO_ADDR
// mc_sides := [ ] ;
62589: LD_ADDR_EXP 62
62593: PUSH
62594: EMPTY
62595: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62596: LD_ADDR_EXP 37
62600: PUSH
62601: EMPTY
62602: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62603: LD_ADDR_EXP 38
62607: PUSH
62608: EMPTY
62609: ST_TO_ADDR
// mc_need_heal := [ ] ;
62610: LD_ADDR_EXP 39
62614: PUSH
62615: EMPTY
62616: ST_TO_ADDR
// mc_healers := [ ] ;
62617: LD_ADDR_EXP 40
62621: PUSH
62622: EMPTY
62623: ST_TO_ADDR
// mc_build_list := [ ] ;
62624: LD_ADDR_EXP 41
62628: PUSH
62629: EMPTY
62630: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62631: LD_ADDR_EXP 68
62635: PUSH
62636: EMPTY
62637: ST_TO_ADDR
// mc_builders := [ ] ;
62638: LD_ADDR_EXP 42
62642: PUSH
62643: EMPTY
62644: ST_TO_ADDR
// mc_construct_list := [ ] ;
62645: LD_ADDR_EXP 43
62649: PUSH
62650: EMPTY
62651: ST_TO_ADDR
// mc_turret_list := [ ] ;
62652: LD_ADDR_EXP 44
62656: PUSH
62657: EMPTY
62658: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62659: LD_ADDR_EXP 45
62663: PUSH
62664: EMPTY
62665: ST_TO_ADDR
// mc_miners := [ ] ;
62666: LD_ADDR_EXP 50
62670: PUSH
62671: EMPTY
62672: ST_TO_ADDR
// mc_mines := [ ] ;
62673: LD_ADDR_EXP 49
62677: PUSH
62678: EMPTY
62679: ST_TO_ADDR
// mc_minefields := [ ] ;
62680: LD_ADDR_EXP 51
62684: PUSH
62685: EMPTY
62686: ST_TO_ADDR
// mc_crates := [ ] ;
62687: LD_ADDR_EXP 52
62691: PUSH
62692: EMPTY
62693: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62694: LD_ADDR_EXP 53
62698: PUSH
62699: EMPTY
62700: ST_TO_ADDR
// mc_crates_area := [ ] ;
62701: LD_ADDR_EXP 54
62705: PUSH
62706: EMPTY
62707: ST_TO_ADDR
// mc_vehicles := [ ] ;
62708: LD_ADDR_EXP 55
62712: PUSH
62713: EMPTY
62714: ST_TO_ADDR
// mc_attack := [ ] ;
62715: LD_ADDR_EXP 56
62719: PUSH
62720: EMPTY
62721: ST_TO_ADDR
// mc_produce := [ ] ;
62722: LD_ADDR_EXP 57
62726: PUSH
62727: EMPTY
62728: ST_TO_ADDR
// mc_defender := [ ] ;
62729: LD_ADDR_EXP 58
62733: PUSH
62734: EMPTY
62735: ST_TO_ADDR
// mc_parking := [ ] ;
62736: LD_ADDR_EXP 60
62740: PUSH
62741: EMPTY
62742: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62743: LD_ADDR_EXP 46
62747: PUSH
62748: EMPTY
62749: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62750: LD_ADDR_EXP 48
62754: PUSH
62755: EMPTY
62756: ST_TO_ADDR
// mc_scan := [ ] ;
62757: LD_ADDR_EXP 59
62761: PUSH
62762: EMPTY
62763: ST_TO_ADDR
// mc_scan_area := [ ] ;
62764: LD_ADDR_EXP 61
62768: PUSH
62769: EMPTY
62770: ST_TO_ADDR
// mc_tech := [ ] ;
62771: LD_ADDR_EXP 63
62775: PUSH
62776: EMPTY
62777: ST_TO_ADDR
// mc_class := [ ] ;
62778: LD_ADDR_EXP 77
62782: PUSH
62783: EMPTY
62784: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62785: LD_ADDR_EXP 78
62789: PUSH
62790: EMPTY
62791: ST_TO_ADDR
// end ;
62792: LD_VAR 0 1
62796: RET
// export function MC_Kill ( base ) ; begin
62797: LD_INT 0
62799: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62800: LD_ADDR_EXP 36
62804: PUSH
62805: LD_EXP 36
62809: PPUSH
62810: LD_VAR 0 1
62814: PPUSH
62815: EMPTY
62816: PPUSH
62817: CALL_OW 1
62821: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62822: LD_ADDR_EXP 37
62826: PUSH
62827: LD_EXP 37
62831: PPUSH
62832: LD_VAR 0 1
62836: PPUSH
62837: EMPTY
62838: PPUSH
62839: CALL_OW 1
62843: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62844: LD_ADDR_EXP 38
62848: PUSH
62849: LD_EXP 38
62853: PPUSH
62854: LD_VAR 0 1
62858: PPUSH
62859: EMPTY
62860: PPUSH
62861: CALL_OW 1
62865: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62866: LD_ADDR_EXP 39
62870: PUSH
62871: LD_EXP 39
62875: PPUSH
62876: LD_VAR 0 1
62880: PPUSH
62881: EMPTY
62882: PPUSH
62883: CALL_OW 1
62887: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62888: LD_ADDR_EXP 40
62892: PUSH
62893: LD_EXP 40
62897: PPUSH
62898: LD_VAR 0 1
62902: PPUSH
62903: EMPTY
62904: PPUSH
62905: CALL_OW 1
62909: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62910: LD_ADDR_EXP 41
62914: PUSH
62915: LD_EXP 41
62919: PPUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: EMPTY
62926: PPUSH
62927: CALL_OW 1
62931: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62932: LD_ADDR_EXP 42
62936: PUSH
62937: LD_EXP 42
62941: PPUSH
62942: LD_VAR 0 1
62946: PPUSH
62947: EMPTY
62948: PPUSH
62949: CALL_OW 1
62953: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62954: LD_ADDR_EXP 43
62958: PUSH
62959: LD_EXP 43
62963: PPUSH
62964: LD_VAR 0 1
62968: PPUSH
62969: EMPTY
62970: PPUSH
62971: CALL_OW 1
62975: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62976: LD_ADDR_EXP 44
62980: PUSH
62981: LD_EXP 44
62985: PPUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: EMPTY
62992: PPUSH
62993: CALL_OW 1
62997: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62998: LD_ADDR_EXP 45
63002: PUSH
63003: LD_EXP 45
63007: PPUSH
63008: LD_VAR 0 1
63012: PPUSH
63013: EMPTY
63014: PPUSH
63015: CALL_OW 1
63019: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63020: LD_ADDR_EXP 46
63024: PUSH
63025: LD_EXP 46
63029: PPUSH
63030: LD_VAR 0 1
63034: PPUSH
63035: EMPTY
63036: PPUSH
63037: CALL_OW 1
63041: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63042: LD_ADDR_EXP 47
63046: PUSH
63047: LD_EXP 47
63051: PPUSH
63052: LD_VAR 0 1
63056: PPUSH
63057: LD_INT 0
63059: PPUSH
63060: CALL_OW 1
63064: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63065: LD_ADDR_EXP 48
63069: PUSH
63070: LD_EXP 48
63074: PPUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: EMPTY
63081: PPUSH
63082: CALL_OW 1
63086: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63087: LD_ADDR_EXP 49
63091: PUSH
63092: LD_EXP 49
63096: PPUSH
63097: LD_VAR 0 1
63101: PPUSH
63102: EMPTY
63103: PPUSH
63104: CALL_OW 1
63108: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63109: LD_ADDR_EXP 50
63113: PUSH
63114: LD_EXP 50
63118: PPUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: EMPTY
63125: PPUSH
63126: CALL_OW 1
63130: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63131: LD_ADDR_EXP 51
63135: PUSH
63136: LD_EXP 51
63140: PPUSH
63141: LD_VAR 0 1
63145: PPUSH
63146: EMPTY
63147: PPUSH
63148: CALL_OW 1
63152: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63153: LD_ADDR_EXP 52
63157: PUSH
63158: LD_EXP 52
63162: PPUSH
63163: LD_VAR 0 1
63167: PPUSH
63168: EMPTY
63169: PPUSH
63170: CALL_OW 1
63174: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63175: LD_ADDR_EXP 53
63179: PUSH
63180: LD_EXP 53
63184: PPUSH
63185: LD_VAR 0 1
63189: PPUSH
63190: EMPTY
63191: PPUSH
63192: CALL_OW 1
63196: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63197: LD_ADDR_EXP 54
63201: PUSH
63202: LD_EXP 54
63206: PPUSH
63207: LD_VAR 0 1
63211: PPUSH
63212: EMPTY
63213: PPUSH
63214: CALL_OW 1
63218: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63219: LD_ADDR_EXP 55
63223: PUSH
63224: LD_EXP 55
63228: PPUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: EMPTY
63235: PPUSH
63236: CALL_OW 1
63240: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63241: LD_ADDR_EXP 56
63245: PUSH
63246: LD_EXP 56
63250: PPUSH
63251: LD_VAR 0 1
63255: PPUSH
63256: EMPTY
63257: PPUSH
63258: CALL_OW 1
63262: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63263: LD_ADDR_EXP 57
63267: PUSH
63268: LD_EXP 57
63272: PPUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: EMPTY
63279: PPUSH
63280: CALL_OW 1
63284: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63285: LD_ADDR_EXP 58
63289: PUSH
63290: LD_EXP 58
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: EMPTY
63301: PPUSH
63302: CALL_OW 1
63306: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63307: LD_ADDR_EXP 59
63311: PUSH
63312: LD_EXP 59
63316: PPUSH
63317: LD_VAR 0 1
63321: PPUSH
63322: EMPTY
63323: PPUSH
63324: CALL_OW 1
63328: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63329: LD_ADDR_EXP 60
63333: PUSH
63334: LD_EXP 60
63338: PPUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: EMPTY
63345: PPUSH
63346: CALL_OW 1
63350: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63351: LD_ADDR_EXP 61
63355: PUSH
63356: LD_EXP 61
63360: PPUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: EMPTY
63367: PPUSH
63368: CALL_OW 1
63372: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63373: LD_ADDR_EXP 63
63377: PUSH
63378: LD_EXP 63
63382: PPUSH
63383: LD_VAR 0 1
63387: PPUSH
63388: EMPTY
63389: PPUSH
63390: CALL_OW 1
63394: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63395: LD_ADDR_EXP 65
63399: PUSH
63400: LD_EXP 65
63404: PPUSH
63405: LD_VAR 0 1
63409: PPUSH
63410: EMPTY
63411: PPUSH
63412: CALL_OW 1
63416: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63417: LD_ADDR_EXP 66
63421: PUSH
63422: LD_EXP 66
63426: PPUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: EMPTY
63433: PPUSH
63434: CALL_OW 1
63438: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63439: LD_ADDR_EXP 67
63443: PUSH
63444: LD_EXP 67
63448: PPUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: EMPTY
63455: PPUSH
63456: CALL_OW 1
63460: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63461: LD_ADDR_EXP 68
63465: PUSH
63466: LD_EXP 68
63470: PPUSH
63471: LD_VAR 0 1
63475: PPUSH
63476: EMPTY
63477: PPUSH
63478: CALL_OW 1
63482: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63483: LD_ADDR_EXP 69
63487: PUSH
63488: LD_EXP 69
63492: PPUSH
63493: LD_VAR 0 1
63497: PPUSH
63498: EMPTY
63499: PPUSH
63500: CALL_OW 1
63504: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63505: LD_ADDR_EXP 70
63509: PUSH
63510: LD_EXP 70
63514: PPUSH
63515: LD_VAR 0 1
63519: PPUSH
63520: EMPTY
63521: PPUSH
63522: CALL_OW 1
63526: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63527: LD_ADDR_EXP 71
63531: PUSH
63532: LD_EXP 71
63536: PPUSH
63537: LD_VAR 0 1
63541: PPUSH
63542: EMPTY
63543: PPUSH
63544: CALL_OW 1
63548: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63549: LD_ADDR_EXP 72
63553: PUSH
63554: LD_EXP 72
63558: PPUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: EMPTY
63565: PPUSH
63566: CALL_OW 1
63570: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63571: LD_ADDR_EXP 73
63575: PUSH
63576: LD_EXP 73
63580: PPUSH
63581: LD_VAR 0 1
63585: PPUSH
63586: EMPTY
63587: PPUSH
63588: CALL_OW 1
63592: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63593: LD_ADDR_EXP 74
63597: PUSH
63598: LD_EXP 74
63602: PPUSH
63603: LD_VAR 0 1
63607: PPUSH
63608: EMPTY
63609: PPUSH
63610: CALL_OW 1
63614: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63615: LD_ADDR_EXP 75
63619: PUSH
63620: LD_EXP 75
63624: PPUSH
63625: LD_VAR 0 1
63629: PPUSH
63630: EMPTY
63631: PPUSH
63632: CALL_OW 1
63636: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63637: LD_ADDR_EXP 76
63641: PUSH
63642: LD_EXP 76
63646: PPUSH
63647: LD_VAR 0 1
63651: PPUSH
63652: EMPTY
63653: PPUSH
63654: CALL_OW 1
63658: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63659: LD_ADDR_EXP 77
63663: PUSH
63664: LD_EXP 77
63668: PPUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: EMPTY
63675: PPUSH
63676: CALL_OW 1
63680: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63681: LD_ADDR_EXP 78
63685: PUSH
63686: LD_EXP 78
63690: PPUSH
63691: LD_VAR 0 1
63695: PPUSH
63696: LD_INT 0
63698: PPUSH
63699: CALL_OW 1
63703: ST_TO_ADDR
// end ;
63704: LD_VAR 0 2
63708: RET
// export function MC_Add ( side , units ) ; var base ; begin
63709: LD_INT 0
63711: PPUSH
63712: PPUSH
// base := mc_bases + 1 ;
63713: LD_ADDR_VAR 0 4
63717: PUSH
63718: LD_EXP 36
63722: PUSH
63723: LD_INT 1
63725: PLUS
63726: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63727: LD_ADDR_EXP 62
63731: PUSH
63732: LD_EXP 62
63736: PPUSH
63737: LD_VAR 0 4
63741: PPUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: CALL_OW 1
63751: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63752: LD_ADDR_EXP 36
63756: PUSH
63757: LD_EXP 36
63761: PPUSH
63762: LD_VAR 0 4
63766: PPUSH
63767: LD_VAR 0 2
63771: PPUSH
63772: CALL_OW 1
63776: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63777: LD_ADDR_EXP 37
63781: PUSH
63782: LD_EXP 37
63786: PPUSH
63787: LD_VAR 0 4
63791: PPUSH
63792: EMPTY
63793: PPUSH
63794: CALL_OW 1
63798: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63799: LD_ADDR_EXP 38
63803: PUSH
63804: LD_EXP 38
63808: PPUSH
63809: LD_VAR 0 4
63813: PPUSH
63814: EMPTY
63815: PPUSH
63816: CALL_OW 1
63820: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63821: LD_ADDR_EXP 39
63825: PUSH
63826: LD_EXP 39
63830: PPUSH
63831: LD_VAR 0 4
63835: PPUSH
63836: EMPTY
63837: PPUSH
63838: CALL_OW 1
63842: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63843: LD_ADDR_EXP 40
63847: PUSH
63848: LD_EXP 40
63852: PPUSH
63853: LD_VAR 0 4
63857: PPUSH
63858: EMPTY
63859: PPUSH
63860: CALL_OW 1
63864: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63865: LD_ADDR_EXP 41
63869: PUSH
63870: LD_EXP 41
63874: PPUSH
63875: LD_VAR 0 4
63879: PPUSH
63880: EMPTY
63881: PPUSH
63882: CALL_OW 1
63886: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63887: LD_ADDR_EXP 42
63891: PUSH
63892: LD_EXP 42
63896: PPUSH
63897: LD_VAR 0 4
63901: PPUSH
63902: EMPTY
63903: PPUSH
63904: CALL_OW 1
63908: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63909: LD_ADDR_EXP 43
63913: PUSH
63914: LD_EXP 43
63918: PPUSH
63919: LD_VAR 0 4
63923: PPUSH
63924: EMPTY
63925: PPUSH
63926: CALL_OW 1
63930: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63931: LD_ADDR_EXP 44
63935: PUSH
63936: LD_EXP 44
63940: PPUSH
63941: LD_VAR 0 4
63945: PPUSH
63946: EMPTY
63947: PPUSH
63948: CALL_OW 1
63952: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63953: LD_ADDR_EXP 45
63957: PUSH
63958: LD_EXP 45
63962: PPUSH
63963: LD_VAR 0 4
63967: PPUSH
63968: EMPTY
63969: PPUSH
63970: CALL_OW 1
63974: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63975: LD_ADDR_EXP 46
63979: PUSH
63980: LD_EXP 46
63984: PPUSH
63985: LD_VAR 0 4
63989: PPUSH
63990: EMPTY
63991: PPUSH
63992: CALL_OW 1
63996: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63997: LD_ADDR_EXP 47
64001: PUSH
64002: LD_EXP 47
64006: PPUSH
64007: LD_VAR 0 4
64011: PPUSH
64012: LD_INT 0
64014: PPUSH
64015: CALL_OW 1
64019: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
64020: LD_ADDR_EXP 48
64024: PUSH
64025: LD_EXP 48
64029: PPUSH
64030: LD_VAR 0 4
64034: PPUSH
64035: EMPTY
64036: PPUSH
64037: CALL_OW 1
64041: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
64042: LD_ADDR_EXP 49
64046: PUSH
64047: LD_EXP 49
64051: PPUSH
64052: LD_VAR 0 4
64056: PPUSH
64057: EMPTY
64058: PPUSH
64059: CALL_OW 1
64063: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
64064: LD_ADDR_EXP 50
64068: PUSH
64069: LD_EXP 50
64073: PPUSH
64074: LD_VAR 0 4
64078: PPUSH
64079: EMPTY
64080: PPUSH
64081: CALL_OW 1
64085: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64086: LD_ADDR_EXP 51
64090: PUSH
64091: LD_EXP 51
64095: PPUSH
64096: LD_VAR 0 4
64100: PPUSH
64101: EMPTY
64102: PPUSH
64103: CALL_OW 1
64107: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64108: LD_ADDR_EXP 52
64112: PUSH
64113: LD_EXP 52
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: EMPTY
64124: PPUSH
64125: CALL_OW 1
64129: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64130: LD_ADDR_EXP 53
64134: PUSH
64135: LD_EXP 53
64139: PPUSH
64140: LD_VAR 0 4
64144: PPUSH
64145: EMPTY
64146: PPUSH
64147: CALL_OW 1
64151: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64152: LD_ADDR_EXP 54
64156: PUSH
64157: LD_EXP 54
64161: PPUSH
64162: LD_VAR 0 4
64166: PPUSH
64167: EMPTY
64168: PPUSH
64169: CALL_OW 1
64173: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64174: LD_ADDR_EXP 55
64178: PUSH
64179: LD_EXP 55
64183: PPUSH
64184: LD_VAR 0 4
64188: PPUSH
64189: EMPTY
64190: PPUSH
64191: CALL_OW 1
64195: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64196: LD_ADDR_EXP 56
64200: PUSH
64201: LD_EXP 56
64205: PPUSH
64206: LD_VAR 0 4
64210: PPUSH
64211: EMPTY
64212: PPUSH
64213: CALL_OW 1
64217: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64218: LD_ADDR_EXP 57
64222: PUSH
64223: LD_EXP 57
64227: PPUSH
64228: LD_VAR 0 4
64232: PPUSH
64233: EMPTY
64234: PPUSH
64235: CALL_OW 1
64239: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64240: LD_ADDR_EXP 58
64244: PUSH
64245: LD_EXP 58
64249: PPUSH
64250: LD_VAR 0 4
64254: PPUSH
64255: EMPTY
64256: PPUSH
64257: CALL_OW 1
64261: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64262: LD_ADDR_EXP 59
64266: PUSH
64267: LD_EXP 59
64271: PPUSH
64272: LD_VAR 0 4
64276: PPUSH
64277: EMPTY
64278: PPUSH
64279: CALL_OW 1
64283: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64284: LD_ADDR_EXP 60
64288: PUSH
64289: LD_EXP 60
64293: PPUSH
64294: LD_VAR 0 4
64298: PPUSH
64299: EMPTY
64300: PPUSH
64301: CALL_OW 1
64305: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64306: LD_ADDR_EXP 61
64310: PUSH
64311: LD_EXP 61
64315: PPUSH
64316: LD_VAR 0 4
64320: PPUSH
64321: EMPTY
64322: PPUSH
64323: CALL_OW 1
64327: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64328: LD_ADDR_EXP 63
64332: PUSH
64333: LD_EXP 63
64337: PPUSH
64338: LD_VAR 0 4
64342: PPUSH
64343: EMPTY
64344: PPUSH
64345: CALL_OW 1
64349: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64350: LD_ADDR_EXP 65
64354: PUSH
64355: LD_EXP 65
64359: PPUSH
64360: LD_VAR 0 4
64364: PPUSH
64365: EMPTY
64366: PPUSH
64367: CALL_OW 1
64371: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64372: LD_ADDR_EXP 66
64376: PUSH
64377: LD_EXP 66
64381: PPUSH
64382: LD_VAR 0 4
64386: PPUSH
64387: EMPTY
64388: PPUSH
64389: CALL_OW 1
64393: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64394: LD_ADDR_EXP 67
64398: PUSH
64399: LD_EXP 67
64403: PPUSH
64404: LD_VAR 0 4
64408: PPUSH
64409: EMPTY
64410: PPUSH
64411: CALL_OW 1
64415: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64416: LD_ADDR_EXP 68
64420: PUSH
64421: LD_EXP 68
64425: PPUSH
64426: LD_VAR 0 4
64430: PPUSH
64431: EMPTY
64432: PPUSH
64433: CALL_OW 1
64437: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64438: LD_ADDR_EXP 69
64442: PUSH
64443: LD_EXP 69
64447: PPUSH
64448: LD_VAR 0 4
64452: PPUSH
64453: EMPTY
64454: PPUSH
64455: CALL_OW 1
64459: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64460: LD_ADDR_EXP 70
64464: PUSH
64465: LD_EXP 70
64469: PPUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: EMPTY
64476: PPUSH
64477: CALL_OW 1
64481: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64482: LD_ADDR_EXP 71
64486: PUSH
64487: LD_EXP 71
64491: PPUSH
64492: LD_VAR 0 4
64496: PPUSH
64497: EMPTY
64498: PPUSH
64499: CALL_OW 1
64503: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64504: LD_ADDR_EXP 72
64508: PUSH
64509: LD_EXP 72
64513: PPUSH
64514: LD_VAR 0 4
64518: PPUSH
64519: EMPTY
64520: PPUSH
64521: CALL_OW 1
64525: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64526: LD_ADDR_EXP 73
64530: PUSH
64531: LD_EXP 73
64535: PPUSH
64536: LD_VAR 0 4
64540: PPUSH
64541: EMPTY
64542: PPUSH
64543: CALL_OW 1
64547: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64548: LD_ADDR_EXP 74
64552: PUSH
64553: LD_EXP 74
64557: PPUSH
64558: LD_VAR 0 4
64562: PPUSH
64563: EMPTY
64564: PPUSH
64565: CALL_OW 1
64569: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64570: LD_ADDR_EXP 75
64574: PUSH
64575: LD_EXP 75
64579: PPUSH
64580: LD_VAR 0 4
64584: PPUSH
64585: EMPTY
64586: PPUSH
64587: CALL_OW 1
64591: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64592: LD_ADDR_EXP 76
64596: PUSH
64597: LD_EXP 76
64601: PPUSH
64602: LD_VAR 0 4
64606: PPUSH
64607: EMPTY
64608: PPUSH
64609: CALL_OW 1
64613: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64614: LD_ADDR_EXP 77
64618: PUSH
64619: LD_EXP 77
64623: PPUSH
64624: LD_VAR 0 4
64628: PPUSH
64629: EMPTY
64630: PPUSH
64631: CALL_OW 1
64635: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64636: LD_ADDR_EXP 78
64640: PUSH
64641: LD_EXP 78
64645: PPUSH
64646: LD_VAR 0 4
64650: PPUSH
64651: LD_INT 0
64653: PPUSH
64654: CALL_OW 1
64658: ST_TO_ADDR
// result := base ;
64659: LD_ADDR_VAR 0 3
64663: PUSH
64664: LD_VAR 0 4
64668: ST_TO_ADDR
// end ;
64669: LD_VAR 0 3
64673: RET
// export function MC_Start ( ) ; var i ; begin
64674: LD_INT 0
64676: PPUSH
64677: PPUSH
// for i = 1 to mc_bases do
64678: LD_ADDR_VAR 0 2
64682: PUSH
64683: DOUBLE
64684: LD_INT 1
64686: DEC
64687: ST_TO_ADDR
64688: LD_EXP 36
64692: PUSH
64693: FOR_TO
64694: IFFALSE 65771
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64696: LD_ADDR_EXP 36
64700: PUSH
64701: LD_EXP 36
64705: PPUSH
64706: LD_VAR 0 2
64710: PPUSH
64711: LD_EXP 36
64715: PUSH
64716: LD_VAR 0 2
64720: ARRAY
64721: PUSH
64722: LD_INT 0
64724: DIFF
64725: PPUSH
64726: CALL_OW 1
64730: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64731: LD_ADDR_EXP 37
64735: PUSH
64736: LD_EXP 37
64740: PPUSH
64741: LD_VAR 0 2
64745: PPUSH
64746: EMPTY
64747: PPUSH
64748: CALL_OW 1
64752: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64753: LD_ADDR_EXP 38
64757: PUSH
64758: LD_EXP 38
64762: PPUSH
64763: LD_VAR 0 2
64767: PPUSH
64768: EMPTY
64769: PPUSH
64770: CALL_OW 1
64774: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64775: LD_ADDR_EXP 39
64779: PUSH
64780: LD_EXP 39
64784: PPUSH
64785: LD_VAR 0 2
64789: PPUSH
64790: EMPTY
64791: PPUSH
64792: CALL_OW 1
64796: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64797: LD_ADDR_EXP 40
64801: PUSH
64802: LD_EXP 40
64806: PPUSH
64807: LD_VAR 0 2
64811: PPUSH
64812: EMPTY
64813: PUSH
64814: EMPTY
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PPUSH
64820: CALL_OW 1
64824: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64825: LD_ADDR_EXP 41
64829: PUSH
64830: LD_EXP 41
64834: PPUSH
64835: LD_VAR 0 2
64839: PPUSH
64840: EMPTY
64841: PPUSH
64842: CALL_OW 1
64846: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64847: LD_ADDR_EXP 68
64851: PUSH
64852: LD_EXP 68
64856: PPUSH
64857: LD_VAR 0 2
64861: PPUSH
64862: EMPTY
64863: PPUSH
64864: CALL_OW 1
64868: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64869: LD_ADDR_EXP 42
64873: PUSH
64874: LD_EXP 42
64878: PPUSH
64879: LD_VAR 0 2
64883: PPUSH
64884: EMPTY
64885: PPUSH
64886: CALL_OW 1
64890: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64891: LD_ADDR_EXP 43
64895: PUSH
64896: LD_EXP 43
64900: PPUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: EMPTY
64907: PPUSH
64908: CALL_OW 1
64912: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64913: LD_ADDR_EXP 44
64917: PUSH
64918: LD_EXP 44
64922: PPUSH
64923: LD_VAR 0 2
64927: PPUSH
64928: LD_EXP 36
64932: PUSH
64933: LD_VAR 0 2
64937: ARRAY
64938: PPUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 30
64944: PUSH
64945: LD_INT 32
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 30
64954: PUSH
64955: LD_INT 33
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: PPUSH
64967: CALL_OW 72
64971: PPUSH
64972: CALL_OW 1
64976: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64977: LD_ADDR_EXP 45
64981: PUSH
64982: LD_EXP 45
64986: PPUSH
64987: LD_VAR 0 2
64991: PPUSH
64992: LD_EXP 36
64996: PUSH
64997: LD_VAR 0 2
65001: ARRAY
65002: PPUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 30
65008: PUSH
65009: LD_INT 32
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 30
65018: PUSH
65019: LD_INT 31
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 58
65033: PUSH
65034: EMPTY
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PPUSH
65041: CALL_OW 72
65045: PPUSH
65046: CALL_OW 1
65050: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
65051: LD_ADDR_EXP 46
65055: PUSH
65056: LD_EXP 46
65060: PPUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: EMPTY
65067: PPUSH
65068: CALL_OW 1
65072: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65073: LD_ADDR_EXP 50
65077: PUSH
65078: LD_EXP 50
65082: PPUSH
65083: LD_VAR 0 2
65087: PPUSH
65088: EMPTY
65089: PPUSH
65090: CALL_OW 1
65094: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65095: LD_ADDR_EXP 49
65099: PUSH
65100: LD_EXP 49
65104: PPUSH
65105: LD_VAR 0 2
65109: PPUSH
65110: EMPTY
65111: PPUSH
65112: CALL_OW 1
65116: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65117: LD_ADDR_EXP 51
65121: PUSH
65122: LD_EXP 51
65126: PPUSH
65127: LD_VAR 0 2
65131: PPUSH
65132: EMPTY
65133: PPUSH
65134: CALL_OW 1
65138: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65139: LD_ADDR_EXP 52
65143: PUSH
65144: LD_EXP 52
65148: PPUSH
65149: LD_VAR 0 2
65153: PPUSH
65154: EMPTY
65155: PPUSH
65156: CALL_OW 1
65160: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65161: LD_ADDR_EXP 53
65165: PUSH
65166: LD_EXP 53
65170: PPUSH
65171: LD_VAR 0 2
65175: PPUSH
65176: EMPTY
65177: PPUSH
65178: CALL_OW 1
65182: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65183: LD_ADDR_EXP 54
65187: PUSH
65188: LD_EXP 54
65192: PPUSH
65193: LD_VAR 0 2
65197: PPUSH
65198: EMPTY
65199: PPUSH
65200: CALL_OW 1
65204: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65205: LD_ADDR_EXP 55
65209: PUSH
65210: LD_EXP 55
65214: PPUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: EMPTY
65221: PPUSH
65222: CALL_OW 1
65226: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65227: LD_ADDR_EXP 56
65231: PUSH
65232: LD_EXP 56
65236: PPUSH
65237: LD_VAR 0 2
65241: PPUSH
65242: EMPTY
65243: PPUSH
65244: CALL_OW 1
65248: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65249: LD_ADDR_EXP 57
65253: PUSH
65254: LD_EXP 57
65258: PPUSH
65259: LD_VAR 0 2
65263: PPUSH
65264: EMPTY
65265: PPUSH
65266: CALL_OW 1
65270: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65271: LD_ADDR_EXP 58
65275: PUSH
65276: LD_EXP 58
65280: PPUSH
65281: LD_VAR 0 2
65285: PPUSH
65286: EMPTY
65287: PPUSH
65288: CALL_OW 1
65292: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65293: LD_ADDR_EXP 47
65297: PUSH
65298: LD_EXP 47
65302: PPUSH
65303: LD_VAR 0 2
65307: PPUSH
65308: LD_INT 0
65310: PPUSH
65311: CALL_OW 1
65315: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65316: LD_ADDR_EXP 60
65320: PUSH
65321: LD_EXP 60
65325: PPUSH
65326: LD_VAR 0 2
65330: PPUSH
65331: LD_INT 0
65333: PPUSH
65334: CALL_OW 1
65338: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65339: LD_ADDR_EXP 48
65343: PUSH
65344: LD_EXP 48
65348: PPUSH
65349: LD_VAR 0 2
65353: PPUSH
65354: EMPTY
65355: PPUSH
65356: CALL_OW 1
65360: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65361: LD_ADDR_EXP 59
65365: PUSH
65366: LD_EXP 59
65370: PPUSH
65371: LD_VAR 0 2
65375: PPUSH
65376: LD_INT 0
65378: PPUSH
65379: CALL_OW 1
65383: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65384: LD_ADDR_EXP 61
65388: PUSH
65389: LD_EXP 61
65393: PPUSH
65394: LD_VAR 0 2
65398: PPUSH
65399: EMPTY
65400: PPUSH
65401: CALL_OW 1
65405: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65406: LD_ADDR_EXP 64
65410: PUSH
65411: LD_EXP 64
65415: PPUSH
65416: LD_VAR 0 2
65420: PPUSH
65421: LD_INT 0
65423: PPUSH
65424: CALL_OW 1
65428: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65429: LD_ADDR_EXP 65
65433: PUSH
65434: LD_EXP 65
65438: PPUSH
65439: LD_VAR 0 2
65443: PPUSH
65444: EMPTY
65445: PPUSH
65446: CALL_OW 1
65450: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65451: LD_ADDR_EXP 66
65455: PUSH
65456: LD_EXP 66
65460: PPUSH
65461: LD_VAR 0 2
65465: PPUSH
65466: EMPTY
65467: PPUSH
65468: CALL_OW 1
65472: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65473: LD_ADDR_EXP 67
65477: PUSH
65478: LD_EXP 67
65482: PPUSH
65483: LD_VAR 0 2
65487: PPUSH
65488: EMPTY
65489: PPUSH
65490: CALL_OW 1
65494: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65495: LD_ADDR_EXP 69
65499: PUSH
65500: LD_EXP 69
65504: PPUSH
65505: LD_VAR 0 2
65509: PPUSH
65510: LD_EXP 36
65514: PUSH
65515: LD_VAR 0 2
65519: ARRAY
65520: PPUSH
65521: LD_INT 2
65523: PUSH
65524: LD_INT 30
65526: PUSH
65527: LD_INT 6
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 30
65536: PUSH
65537: LD_INT 7
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 30
65546: PUSH
65547: LD_INT 8
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: PPUSH
65560: CALL_OW 72
65564: PPUSH
65565: CALL_OW 1
65569: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65570: LD_ADDR_EXP 70
65574: PUSH
65575: LD_EXP 70
65579: PPUSH
65580: LD_VAR 0 2
65584: PPUSH
65585: EMPTY
65586: PPUSH
65587: CALL_OW 1
65591: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65592: LD_ADDR_EXP 71
65596: PUSH
65597: LD_EXP 71
65601: PPUSH
65602: LD_VAR 0 2
65606: PPUSH
65607: EMPTY
65608: PPUSH
65609: CALL_OW 1
65613: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65614: LD_ADDR_EXP 72
65618: PUSH
65619: LD_EXP 72
65623: PPUSH
65624: LD_VAR 0 2
65628: PPUSH
65629: EMPTY
65630: PPUSH
65631: CALL_OW 1
65635: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65636: LD_ADDR_EXP 73
65640: PUSH
65641: LD_EXP 73
65645: PPUSH
65646: LD_VAR 0 2
65650: PPUSH
65651: EMPTY
65652: PPUSH
65653: CALL_OW 1
65657: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65658: LD_ADDR_EXP 74
65662: PUSH
65663: LD_EXP 74
65667: PPUSH
65668: LD_VAR 0 2
65672: PPUSH
65673: EMPTY
65674: PPUSH
65675: CALL_OW 1
65679: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65680: LD_ADDR_EXP 75
65684: PUSH
65685: LD_EXP 75
65689: PPUSH
65690: LD_VAR 0 2
65694: PPUSH
65695: EMPTY
65696: PPUSH
65697: CALL_OW 1
65701: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65702: LD_ADDR_EXP 76
65706: PUSH
65707: LD_EXP 76
65711: PPUSH
65712: LD_VAR 0 2
65716: PPUSH
65717: EMPTY
65718: PPUSH
65719: CALL_OW 1
65723: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65724: LD_ADDR_EXP 77
65728: PUSH
65729: LD_EXP 77
65733: PPUSH
65734: LD_VAR 0 2
65738: PPUSH
65739: EMPTY
65740: PPUSH
65741: CALL_OW 1
65745: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65746: LD_ADDR_EXP 78
65750: PUSH
65751: LD_EXP 78
65755: PPUSH
65756: LD_VAR 0 2
65760: PPUSH
65761: LD_INT 0
65763: PPUSH
65764: CALL_OW 1
65768: ST_TO_ADDR
// end ;
65769: GO 64693
65771: POP
65772: POP
// MC_InitSides ( ) ;
65773: CALL 66059 0 0
// MC_InitResearch ( ) ;
65777: CALL 65798 0 0
// CustomInitMacro ( ) ;
65781: CALL 1407 0 0
// skirmish := true ;
65785: LD_ADDR_EXP 34
65789: PUSH
65790: LD_INT 1
65792: ST_TO_ADDR
// end ;
65793: LD_VAR 0 1
65797: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65798: LD_INT 0
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
65804: PPUSH
65805: PPUSH
// if not mc_bases then
65806: LD_EXP 36
65810: NOT
65811: IFFALSE 65815
// exit ;
65813: GO 66054
// for i = 1 to 8 do
65815: LD_ADDR_VAR 0 2
65819: PUSH
65820: DOUBLE
65821: LD_INT 1
65823: DEC
65824: ST_TO_ADDR
65825: LD_INT 8
65827: PUSH
65828: FOR_TO
65829: IFFALSE 65855
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65831: LD_ADDR_EXP 63
65835: PUSH
65836: LD_EXP 63
65840: PPUSH
65841: LD_VAR 0 2
65845: PPUSH
65846: EMPTY
65847: PPUSH
65848: CALL_OW 1
65852: ST_TO_ADDR
65853: GO 65828
65855: POP
65856: POP
// tmp := [ ] ;
65857: LD_ADDR_VAR 0 5
65861: PUSH
65862: EMPTY
65863: ST_TO_ADDR
// for i = 1 to mc_sides do
65864: LD_ADDR_VAR 0 2
65868: PUSH
65869: DOUBLE
65870: LD_INT 1
65872: DEC
65873: ST_TO_ADDR
65874: LD_EXP 62
65878: PUSH
65879: FOR_TO
65880: IFFALSE 65938
// if not mc_sides [ i ] in tmp then
65882: LD_EXP 62
65886: PUSH
65887: LD_VAR 0 2
65891: ARRAY
65892: PUSH
65893: LD_VAR 0 5
65897: IN
65898: NOT
65899: IFFALSE 65936
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_VAR 0 5
65910: PPUSH
65911: LD_VAR 0 5
65915: PUSH
65916: LD_INT 1
65918: PLUS
65919: PPUSH
65920: LD_EXP 62
65924: PUSH
65925: LD_VAR 0 2
65929: ARRAY
65930: PPUSH
65931: CALL_OW 2
65935: ST_TO_ADDR
65936: GO 65879
65938: POP
65939: POP
// if not tmp then
65940: LD_VAR 0 5
65944: NOT
65945: IFFALSE 65949
// exit ;
65947: GO 66054
// for j in tmp do
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: LD_VAR 0 5
65958: PUSH
65959: FOR_IN
65960: IFFALSE 66052
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65962: LD_ADDR_VAR 0 6
65966: PUSH
65967: LD_INT 22
65969: PUSH
65970: LD_VAR 0 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PPUSH
65979: CALL_OW 69
65983: ST_TO_ADDR
// if not un then
65984: LD_VAR 0 6
65988: NOT
65989: IFFALSE 65993
// continue ;
65991: GO 65959
// nation := GetNation ( un [ 1 ] ) ;
65993: LD_ADDR_VAR 0 4
65997: PUSH
65998: LD_VAR 0 6
66002: PUSH
66003: LD_INT 1
66005: ARRAY
66006: PPUSH
66007: CALL_OW 248
66011: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
66012: LD_ADDR_EXP 63
66016: PUSH
66017: LD_EXP 63
66021: PPUSH
66022: LD_VAR 0 3
66026: PPUSH
66027: LD_VAR 0 3
66031: PPUSH
66032: LD_VAR 0 4
66036: PPUSH
66037: LD_INT 1
66039: PPUSH
66040: CALL 19409 0 3
66044: PPUSH
66045: CALL_OW 1
66049: ST_TO_ADDR
// end ;
66050: GO 65959
66052: POP
66053: POP
// end ;
66054: LD_VAR 0 1
66058: RET
// export function MC_InitSides ( ) ; var i ; begin
66059: LD_INT 0
66061: PPUSH
66062: PPUSH
// if not mc_bases then
66063: LD_EXP 36
66067: NOT
66068: IFFALSE 66072
// exit ;
66070: GO 66146
// for i = 1 to mc_bases do
66072: LD_ADDR_VAR 0 2
66076: PUSH
66077: DOUBLE
66078: LD_INT 1
66080: DEC
66081: ST_TO_ADDR
66082: LD_EXP 36
66086: PUSH
66087: FOR_TO
66088: IFFALSE 66144
// if mc_bases [ i ] then
66090: LD_EXP 36
66094: PUSH
66095: LD_VAR 0 2
66099: ARRAY
66100: IFFALSE 66142
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66102: LD_ADDR_EXP 62
66106: PUSH
66107: LD_EXP 62
66111: PPUSH
66112: LD_VAR 0 2
66116: PPUSH
66117: LD_EXP 36
66121: PUSH
66122: LD_VAR 0 2
66126: ARRAY
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: PPUSH
66132: CALL_OW 255
66136: PPUSH
66137: CALL_OW 1
66141: ST_TO_ADDR
66142: GO 66087
66144: POP
66145: POP
// end ;
66146: LD_VAR 0 1
66150: RET
// every 0 0$01 trigger skirmish do
66151: LD_EXP 34
66155: IFFALSE 66309
66157: GO 66159
66159: DISABLE
// begin enable ;
66160: ENABLE
// MC_CheckBuildings ( ) ;
66161: CALL 70807 0 0
// MC_CheckPeopleLife ( ) ;
66165: CALL 70932 0 0
// RaiseSailEvent ( 100 ) ;
66169: LD_INT 100
66171: PPUSH
66172: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66176: LD_INT 103
66178: PPUSH
66179: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66183: LD_INT 104
66185: PPUSH
66186: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66190: LD_INT 105
66192: PPUSH
66193: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66197: LD_INT 106
66199: PPUSH
66200: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66204: LD_INT 107
66206: PPUSH
66207: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66211: LD_INT 108
66213: PPUSH
66214: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66218: LD_INT 109
66220: PPUSH
66221: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66225: LD_INT 110
66227: PPUSH
66228: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66232: LD_INT 111
66234: PPUSH
66235: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66239: LD_INT 112
66241: PPUSH
66242: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66246: LD_INT 113
66248: PPUSH
66249: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66253: LD_INT 120
66255: PPUSH
66256: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66260: LD_INT 121
66262: PPUSH
66263: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66267: LD_INT 122
66269: PPUSH
66270: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66274: LD_INT 123
66276: PPUSH
66277: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66281: LD_INT 124
66283: PPUSH
66284: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66288: LD_INT 125
66290: PPUSH
66291: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66295: LD_INT 126
66297: PPUSH
66298: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66302: LD_INT 200
66304: PPUSH
66305: CALL_OW 427
// end ;
66309: END
// on SailEvent ( event ) do begin if event < 100 then
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 100
66317: LESS
66318: IFFALSE 66329
// CustomEvent ( event ) ;
66320: LD_VAR 0 1
66324: PPUSH
66325: CALL 18596 0 1
// if event = 100 then
66329: LD_VAR 0 1
66333: PUSH
66334: LD_INT 100
66336: EQUAL
66337: IFFALSE 66343
// MC_ClassManager ( ) ;
66339: CALL 66735 0 0
// if event = 101 then
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 101
66350: EQUAL
66351: IFFALSE 66357
// MC_RepairBuildings ( ) ;
66353: CALL 71528 0 0
// if event = 102 then
66357: LD_VAR 0 1
66361: PUSH
66362: LD_INT 102
66364: EQUAL
66365: IFFALSE 66371
// MC_Heal ( ) ;
66367: CALL 72392 0 0
// if event = 103 then
66371: LD_VAR 0 1
66375: PUSH
66376: LD_INT 103
66378: EQUAL
66379: IFFALSE 66385
// MC_Build ( ) ;
66381: CALL 72814 0 0
// if event = 104 then
66385: LD_VAR 0 1
66389: PUSH
66390: LD_INT 104
66392: EQUAL
66393: IFFALSE 66399
// MC_TurretWeapon ( ) ;
66395: CALL 74427 0 0
// if event = 105 then
66399: LD_VAR 0 1
66403: PUSH
66404: LD_INT 105
66406: EQUAL
66407: IFFALSE 66413
// MC_BuildUpgrade ( ) ;
66409: CALL 73978 0 0
// if event = 106 then
66413: LD_VAR 0 1
66417: PUSH
66418: LD_INT 106
66420: EQUAL
66421: IFFALSE 66427
// MC_PlantMines ( ) ;
66423: CALL 74857 0 0
// if event = 107 then
66427: LD_VAR 0 1
66431: PUSH
66432: LD_INT 107
66434: EQUAL
66435: IFFALSE 66441
// MC_CollectCrates ( ) ;
66437: CALL 75655 0 0
// if event = 108 then
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 108
66448: EQUAL
66449: IFFALSE 66455
// MC_LinkRemoteControl ( ) ;
66451: CALL 77431 0 0
// if event = 109 then
66455: LD_VAR 0 1
66459: PUSH
66460: LD_INT 109
66462: EQUAL
66463: IFFALSE 66469
// MC_ProduceVehicle ( ) ;
66465: CALL 77612 0 0
// if event = 110 then
66469: LD_VAR 0 1
66473: PUSH
66474: LD_INT 110
66476: EQUAL
66477: IFFALSE 66483
// MC_SendAttack ( ) ;
66479: CALL 78078 0 0
// if event = 111 then
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 111
66490: EQUAL
66491: IFFALSE 66497
// MC_Defend ( ) ;
66493: CALL 78186 0 0
// if event = 112 then
66497: LD_VAR 0 1
66501: PUSH
66502: LD_INT 112
66504: EQUAL
66505: IFFALSE 66511
// MC_Research ( ) ;
66507: CALL 78791 0 0
// if event = 113 then
66511: LD_VAR 0 1
66515: PUSH
66516: LD_INT 113
66518: EQUAL
66519: IFFALSE 66525
// MC_MinesTrigger ( ) ;
66521: CALL 79905 0 0
// if event = 120 then
66525: LD_VAR 0 1
66529: PUSH
66530: LD_INT 120
66532: EQUAL
66533: IFFALSE 66539
// MC_RepairVehicle ( ) ;
66535: CALL 80004 0 0
// if event = 121 then
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 121
66546: EQUAL
66547: IFFALSE 66553
// MC_TameApe ( ) ;
66549: CALL 80734 0 0
// if event = 122 then
66553: LD_VAR 0 1
66557: PUSH
66558: LD_INT 122
66560: EQUAL
66561: IFFALSE 66567
// MC_ChangeApeClass ( ) ;
66563: CALL 81563 0 0
// if event = 123 then
66567: LD_VAR 0 1
66571: PUSH
66572: LD_INT 123
66574: EQUAL
66575: IFFALSE 66581
// MC_Bazooka ( ) ;
66577: CALL 82213 0 0
// if event = 124 then
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 124
66588: EQUAL
66589: IFFALSE 66595
// MC_TeleportExit ( ) ;
66591: CALL 82411 0 0
// if event = 125 then
66595: LD_VAR 0 1
66599: PUSH
66600: LD_INT 125
66602: EQUAL
66603: IFFALSE 66609
// MC_Deposits ( ) ;
66605: CALL 83058 0 0
// if event = 126 then
66609: LD_VAR 0 1
66613: PUSH
66614: LD_INT 126
66616: EQUAL
66617: IFFALSE 66623
// MC_RemoteDriver ( ) ;
66619: CALL 83683 0 0
// if event = 200 then
66623: LD_VAR 0 1
66627: PUSH
66628: LD_INT 200
66630: EQUAL
66631: IFFALSE 66637
// MC_Idle ( ) ;
66633: CALL 85632 0 0
// end ;
66637: PPOPN 1
66639: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66640: LD_INT 0
66642: PPUSH
66643: PPUSH
// if not mc_bases [ base ] or not tag then
66644: LD_EXP 36
66648: PUSH
66649: LD_VAR 0 1
66653: ARRAY
66654: NOT
66655: PUSH
66656: LD_VAR 0 2
66660: NOT
66661: OR
66662: IFFALSE 66666
// exit ;
66664: GO 66730
// for i in mc_bases [ base ] union mc_ape [ base ] do
66666: LD_ADDR_VAR 0 4
66670: PUSH
66671: LD_EXP 36
66675: PUSH
66676: LD_VAR 0 1
66680: ARRAY
66681: PUSH
66682: LD_EXP 65
66686: PUSH
66687: LD_VAR 0 1
66691: ARRAY
66692: UNION
66693: PUSH
66694: FOR_IN
66695: IFFALSE 66728
// if GetTag ( i ) = tag then
66697: LD_VAR 0 4
66701: PPUSH
66702: CALL_OW 110
66706: PUSH
66707: LD_VAR 0 2
66711: EQUAL
66712: IFFALSE 66726
// SetTag ( i , 0 ) ;
66714: LD_VAR 0 4
66718: PPUSH
66719: LD_INT 0
66721: PPUSH
66722: CALL_OW 109
66726: GO 66694
66728: POP
66729: POP
// end ;
66730: LD_VAR 0 3
66734: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66735: LD_INT 0
66737: PPUSH
66738: PPUSH
66739: PPUSH
66740: PPUSH
66741: PPUSH
66742: PPUSH
66743: PPUSH
66744: PPUSH
// if not mc_bases then
66745: LD_EXP 36
66749: NOT
66750: IFFALSE 66754
// exit ;
66752: GO 67212
// for i = 1 to mc_bases do
66754: LD_ADDR_VAR 0 2
66758: PUSH
66759: DOUBLE
66760: LD_INT 1
66762: DEC
66763: ST_TO_ADDR
66764: LD_EXP 36
66768: PUSH
66769: FOR_TO
66770: IFFALSE 67210
// begin tmp := MC_ClassCheckReq ( i ) ;
66772: LD_ADDR_VAR 0 4
66776: PUSH
66777: LD_VAR 0 2
66781: PPUSH
66782: CALL 67217 0 1
66786: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66787: LD_ADDR_EXP 77
66791: PUSH
66792: LD_EXP 77
66796: PPUSH
66797: LD_VAR 0 2
66801: PPUSH
66802: LD_VAR 0 4
66806: PPUSH
66807: CALL_OW 1
66811: ST_TO_ADDR
// if not tmp then
66812: LD_VAR 0 4
66816: NOT
66817: IFFALSE 66821
// continue ;
66819: GO 66769
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66821: LD_ADDR_VAR 0 6
66825: PUSH
66826: LD_EXP 36
66830: PUSH
66831: LD_VAR 0 2
66835: ARRAY
66836: PPUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 30
66842: PUSH
66843: LD_INT 4
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 30
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: PPUSH
66865: CALL_OW 72
66869: PUSH
66870: LD_EXP 36
66874: PUSH
66875: LD_VAR 0 2
66879: ARRAY
66880: PPUSH
66881: LD_INT 2
66883: PUSH
66884: LD_INT 30
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 30
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: PPUSH
66909: CALL_OW 72
66913: PUSH
66914: LD_EXP 36
66918: PUSH
66919: LD_VAR 0 2
66923: ARRAY
66924: PPUSH
66925: LD_INT 30
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PPUSH
66935: CALL_OW 72
66939: PUSH
66940: LD_EXP 36
66944: PUSH
66945: LD_VAR 0 2
66949: ARRAY
66950: PPUSH
66951: LD_INT 2
66953: PUSH
66954: LD_INT 30
66956: PUSH
66957: LD_INT 6
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 30
66966: PUSH
66967: LD_INT 7
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 30
66976: PUSH
66977: LD_INT 8
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: PPUSH
66990: CALL_OW 72
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: ST_TO_ADDR
// for j = 1 to 4 do
67001: LD_ADDR_VAR 0 3
67005: PUSH
67006: DOUBLE
67007: LD_INT 1
67009: DEC
67010: ST_TO_ADDR
67011: LD_INT 4
67013: PUSH
67014: FOR_TO
67015: IFFALSE 67206
// begin if not tmp [ j ] then
67017: LD_VAR 0 4
67021: PUSH
67022: LD_VAR 0 3
67026: ARRAY
67027: NOT
67028: IFFALSE 67032
// continue ;
67030: GO 67014
// for p in tmp [ j ] do
67032: LD_ADDR_VAR 0 5
67036: PUSH
67037: LD_VAR 0 4
67041: PUSH
67042: LD_VAR 0 3
67046: ARRAY
67047: PUSH
67048: FOR_IN
67049: IFFALSE 67202
// begin if not b [ j ] then
67051: LD_VAR 0 6
67055: PUSH
67056: LD_VAR 0 3
67060: ARRAY
67061: NOT
67062: IFFALSE 67066
// break ;
67064: GO 67202
// e := 0 ;
67066: LD_ADDR_VAR 0 7
67070: PUSH
67071: LD_INT 0
67073: ST_TO_ADDR
// for k in b [ j ] do
67074: LD_ADDR_VAR 0 8
67078: PUSH
67079: LD_VAR 0 6
67083: PUSH
67084: LD_VAR 0 3
67088: ARRAY
67089: PUSH
67090: FOR_IN
67091: IFFALSE 67118
// if IsNotFull ( k ) then
67093: LD_VAR 0 8
67097: PPUSH
67098: CALL 23849 0 1
67102: IFFALSE 67116
// begin e := k ;
67104: LD_ADDR_VAR 0 7
67108: PUSH
67109: LD_VAR 0 8
67113: ST_TO_ADDR
// break ;
67114: GO 67118
// end ;
67116: GO 67090
67118: POP
67119: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67120: LD_VAR 0 7
67124: PUSH
67125: LD_VAR 0 5
67129: PPUSH
67130: LD_VAR 0 7
67134: PPUSH
67135: CALL 60978 0 2
67139: NOT
67140: AND
67141: IFFALSE 67200
// begin if IsInUnit ( p ) then
67143: LD_VAR 0 5
67147: PPUSH
67148: CALL_OW 310
67152: IFFALSE 67163
// ComExitBuilding ( p ) ;
67154: LD_VAR 0 5
67158: PPUSH
67159: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67163: LD_VAR 0 5
67167: PPUSH
67168: LD_VAR 0 7
67172: PPUSH
67173: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67177: LD_VAR 0 5
67181: PPUSH
67182: LD_VAR 0 3
67186: PPUSH
67187: CALL_OW 183
// AddComExitBuilding ( p ) ;
67191: LD_VAR 0 5
67195: PPUSH
67196: CALL_OW 182
// end ; end ;
67200: GO 67048
67202: POP
67203: POP
// end ;
67204: GO 67014
67206: POP
67207: POP
// end ;
67208: GO 66769
67210: POP
67211: POP
// end ;
67212: LD_VAR 0 1
67216: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67217: LD_INT 0
67219: PPUSH
67220: PPUSH
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
67225: PPUSH
67226: PPUSH
67227: PPUSH
67228: PPUSH
67229: PPUSH
67230: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67231: LD_VAR 0 1
67235: NOT
67236: PUSH
67237: LD_EXP 36
67241: PUSH
67242: LD_VAR 0 1
67246: ARRAY
67247: NOT
67248: OR
67249: PUSH
67250: LD_EXP 36
67254: PUSH
67255: LD_VAR 0 1
67259: ARRAY
67260: PPUSH
67261: LD_INT 2
67263: PUSH
67264: LD_INT 30
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 30
67276: PUSH
67277: LD_INT 1
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: PPUSH
67289: CALL_OW 72
67293: NOT
67294: OR
67295: IFFALSE 67299
// exit ;
67297: GO 70802
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67299: LD_ADDR_VAR 0 4
67303: PUSH
67304: LD_EXP 36
67308: PUSH
67309: LD_VAR 0 1
67313: ARRAY
67314: PPUSH
67315: LD_INT 2
67317: PUSH
67318: LD_INT 25
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 25
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 25
67340: PUSH
67341: LD_INT 3
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 25
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 25
67360: PUSH
67361: LD_INT 5
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 25
67370: PUSH
67371: LD_INT 8
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 25
67380: PUSH
67381: LD_INT 9
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: PPUSH
67398: CALL_OW 72
67402: ST_TO_ADDR
// if not tmp then
67403: LD_VAR 0 4
67407: NOT
67408: IFFALSE 67412
// exit ;
67410: GO 70802
// for i in tmp do
67412: LD_ADDR_VAR 0 3
67416: PUSH
67417: LD_VAR 0 4
67421: PUSH
67422: FOR_IN
67423: IFFALSE 67454
// if GetTag ( i ) then
67425: LD_VAR 0 3
67429: PPUSH
67430: CALL_OW 110
67434: IFFALSE 67452
// tmp := tmp diff i ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_VAR 0 4
67445: PUSH
67446: LD_VAR 0 3
67450: DIFF
67451: ST_TO_ADDR
67452: GO 67422
67454: POP
67455: POP
// if not tmp then
67456: LD_VAR 0 4
67460: NOT
67461: IFFALSE 67465
// exit ;
67463: GO 70802
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67465: LD_ADDR_VAR 0 5
67469: PUSH
67470: LD_EXP 36
67474: PUSH
67475: LD_VAR 0 1
67479: ARRAY
67480: PPUSH
67481: LD_INT 2
67483: PUSH
67484: LD_INT 25
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 25
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 25
67506: PUSH
67507: LD_INT 8
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 25
67516: PUSH
67517: LD_INT 9
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: PPUSH
67531: CALL_OW 72
67535: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67536: LD_ADDR_VAR 0 6
67540: PUSH
67541: LD_EXP 36
67545: PUSH
67546: LD_VAR 0 1
67550: ARRAY
67551: PPUSH
67552: LD_INT 25
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PPUSH
67562: CALL_OW 72
67566: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67567: LD_ADDR_VAR 0 7
67571: PUSH
67572: LD_EXP 36
67576: PUSH
67577: LD_VAR 0 1
67581: ARRAY
67582: PPUSH
67583: LD_INT 25
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PPUSH
67593: CALL_OW 72
67597: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67598: LD_ADDR_VAR 0 8
67602: PUSH
67603: LD_EXP 36
67607: PUSH
67608: LD_VAR 0 1
67612: ARRAY
67613: PPUSH
67614: LD_INT 25
67616: PUSH
67617: LD_INT 4
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 24
67626: PUSH
67627: LD_INT 251
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PPUSH
67638: CALL_OW 72
67642: ST_TO_ADDR
// if mc_scan [ base ] then
67643: LD_EXP 59
67647: PUSH
67648: LD_VAR 0 1
67652: ARRAY
67653: IFFALSE 68114
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67655: LD_ADDR_EXP 78
67659: PUSH
67660: LD_EXP 78
67664: PPUSH
67665: LD_VAR 0 1
67669: PPUSH
67670: LD_INT 4
67672: PPUSH
67673: CALL_OW 1
67677: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67678: LD_ADDR_VAR 0 12
67682: PUSH
67683: LD_EXP 36
67687: PUSH
67688: LD_VAR 0 1
67692: ARRAY
67693: PPUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 30
67699: PUSH
67700: LD_INT 4
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 30
67709: PUSH
67710: LD_INT 5
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 72
67726: ST_TO_ADDR
// if not b then
67727: LD_VAR 0 12
67731: NOT
67732: IFFALSE 67736
// exit ;
67734: GO 70802
// p := [ ] ;
67736: LD_ADDR_VAR 0 11
67740: PUSH
67741: EMPTY
67742: ST_TO_ADDR
// if sci >= 2 then
67743: LD_VAR 0 8
67747: PUSH
67748: LD_INT 2
67750: GREATEREQUAL
67751: IFFALSE 67782
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67753: LD_ADDR_VAR 0 8
67757: PUSH
67758: LD_VAR 0 8
67762: PUSH
67763: LD_INT 1
67765: ARRAY
67766: PUSH
67767: LD_VAR 0 8
67771: PUSH
67772: LD_INT 2
67774: ARRAY
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: ST_TO_ADDR
67780: GO 67843
// if sci = 1 then
67782: LD_VAR 0 8
67786: PUSH
67787: LD_INT 1
67789: EQUAL
67790: IFFALSE 67811
// sci := [ sci [ 1 ] ] else
67792: LD_ADDR_VAR 0 8
67796: PUSH
67797: LD_VAR 0 8
67801: PUSH
67802: LD_INT 1
67804: ARRAY
67805: PUSH
67806: EMPTY
67807: LIST
67808: ST_TO_ADDR
67809: GO 67843
// if sci = 0 then
67811: LD_VAR 0 8
67815: PUSH
67816: LD_INT 0
67818: EQUAL
67819: IFFALSE 67843
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67821: LD_ADDR_VAR 0 11
67825: PUSH
67826: LD_VAR 0 4
67830: PPUSH
67831: LD_INT 4
67833: PPUSH
67834: CALL 60841 0 2
67838: PUSH
67839: LD_INT 1
67841: ARRAY
67842: ST_TO_ADDR
// if eng > 4 then
67843: LD_VAR 0 6
67847: PUSH
67848: LD_INT 4
67850: GREATER
67851: IFFALSE 67897
// for i = eng downto 4 do
67853: LD_ADDR_VAR 0 3
67857: PUSH
67858: DOUBLE
67859: LD_VAR 0 6
67863: INC
67864: ST_TO_ADDR
67865: LD_INT 4
67867: PUSH
67868: FOR_DOWNTO
67869: IFFALSE 67895
// eng := eng diff eng [ i ] ;
67871: LD_ADDR_VAR 0 6
67875: PUSH
67876: LD_VAR 0 6
67880: PUSH
67881: LD_VAR 0 6
67885: PUSH
67886: LD_VAR 0 3
67890: ARRAY
67891: DIFF
67892: ST_TO_ADDR
67893: GO 67868
67895: POP
67896: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67897: LD_ADDR_VAR 0 4
67901: PUSH
67902: LD_VAR 0 4
67906: PUSH
67907: LD_VAR 0 5
67911: PUSH
67912: LD_VAR 0 6
67916: UNION
67917: PUSH
67918: LD_VAR 0 7
67922: UNION
67923: PUSH
67924: LD_VAR 0 8
67928: UNION
67929: DIFF
67930: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67931: LD_ADDR_VAR 0 13
67935: PUSH
67936: LD_EXP 36
67940: PUSH
67941: LD_VAR 0 1
67945: ARRAY
67946: PPUSH
67947: LD_INT 2
67949: PUSH
67950: LD_INT 30
67952: PUSH
67953: LD_INT 32
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 30
67962: PUSH
67963: LD_INT 31
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: PPUSH
67975: CALL_OW 72
67979: PUSH
67980: LD_EXP 36
67984: PUSH
67985: LD_VAR 0 1
67989: ARRAY
67990: PPUSH
67991: LD_INT 2
67993: PUSH
67994: LD_INT 30
67996: PUSH
67997: LD_INT 4
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 30
68006: PUSH
68007: LD_INT 5
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: LIST
68018: PPUSH
68019: CALL_OW 72
68023: PUSH
68024: LD_INT 6
68026: MUL
68027: PLUS
68028: ST_TO_ADDR
// if bcount < tmp then
68029: LD_VAR 0 13
68033: PUSH
68034: LD_VAR 0 4
68038: LESS
68039: IFFALSE 68085
// for i = tmp downto bcount do
68041: LD_ADDR_VAR 0 3
68045: PUSH
68046: DOUBLE
68047: LD_VAR 0 4
68051: INC
68052: ST_TO_ADDR
68053: LD_VAR 0 13
68057: PUSH
68058: FOR_DOWNTO
68059: IFFALSE 68083
// tmp := Delete ( tmp , tmp ) ;
68061: LD_ADDR_VAR 0 4
68065: PUSH
68066: LD_VAR 0 4
68070: PPUSH
68071: LD_VAR 0 4
68075: PPUSH
68076: CALL_OW 3
68080: ST_TO_ADDR
68081: GO 68058
68083: POP
68084: POP
// result := [ tmp , 0 , 0 , p ] ;
68085: LD_ADDR_VAR 0 2
68089: PUSH
68090: LD_VAR 0 4
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_VAR 0 11
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: ST_TO_ADDR
// exit ;
68112: GO 70802
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68114: LD_EXP 36
68118: PUSH
68119: LD_VAR 0 1
68123: ARRAY
68124: PPUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 30
68130: PUSH
68131: LD_INT 6
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 30
68140: PUSH
68141: LD_INT 7
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 30
68150: PUSH
68151: LD_INT 8
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: PPUSH
68164: CALL_OW 72
68168: NOT
68169: PUSH
68170: LD_EXP 36
68174: PUSH
68175: LD_VAR 0 1
68179: ARRAY
68180: PPUSH
68181: LD_INT 30
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PPUSH
68191: CALL_OW 72
68195: NOT
68196: AND
68197: IFFALSE 68269
// begin if eng = tmp then
68199: LD_VAR 0 6
68203: PUSH
68204: LD_VAR 0 4
68208: EQUAL
68209: IFFALSE 68213
// exit ;
68211: GO 70802
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68213: LD_ADDR_EXP 78
68217: PUSH
68218: LD_EXP 78
68222: PPUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: LD_INT 1
68230: PPUSH
68231: CALL_OW 1
68235: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68236: LD_ADDR_VAR 0 2
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_VAR 0 4
68248: PUSH
68249: LD_VAR 0 6
68253: DIFF
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// exit ;
68267: GO 70802
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68269: LD_EXP 63
68273: PUSH
68274: LD_EXP 62
68278: PUSH
68279: LD_VAR 0 1
68283: ARRAY
68284: ARRAY
68285: PUSH
68286: LD_EXP 36
68290: PUSH
68291: LD_VAR 0 1
68295: ARRAY
68296: PPUSH
68297: LD_INT 2
68299: PUSH
68300: LD_INT 30
68302: PUSH
68303: LD_INT 6
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 30
68312: PUSH
68313: LD_INT 7
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 30
68322: PUSH
68323: LD_INT 8
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: PPUSH
68336: CALL_OW 72
68340: AND
68341: PUSH
68342: LD_EXP 36
68346: PUSH
68347: LD_VAR 0 1
68351: ARRAY
68352: PPUSH
68353: LD_INT 30
68355: PUSH
68356: LD_INT 3
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PPUSH
68363: CALL_OW 72
68367: NOT
68368: AND
68369: IFFALSE 68583
// begin if sci >= 6 then
68371: LD_VAR 0 8
68375: PUSH
68376: LD_INT 6
68378: GREATEREQUAL
68379: IFFALSE 68383
// exit ;
68381: GO 70802
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68383: LD_ADDR_EXP 78
68387: PUSH
68388: LD_EXP 78
68392: PPUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: LD_INT 2
68400: PPUSH
68401: CALL_OW 1
68405: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68406: LD_ADDR_VAR 0 9
68410: PUSH
68411: LD_VAR 0 4
68415: PUSH
68416: LD_VAR 0 8
68420: DIFF
68421: PPUSH
68422: LD_INT 4
68424: PPUSH
68425: CALL 60841 0 2
68429: ST_TO_ADDR
// p := [ ] ;
68430: LD_ADDR_VAR 0 11
68434: PUSH
68435: EMPTY
68436: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68437: LD_VAR 0 8
68441: PUSH
68442: LD_INT 6
68444: LESS
68445: PUSH
68446: LD_VAR 0 9
68450: PUSH
68451: LD_INT 6
68453: GREATER
68454: AND
68455: IFFALSE 68536
// begin for i = 1 to 6 - sci do
68457: LD_ADDR_VAR 0 3
68461: PUSH
68462: DOUBLE
68463: LD_INT 1
68465: DEC
68466: ST_TO_ADDR
68467: LD_INT 6
68469: PUSH
68470: LD_VAR 0 8
68474: MINUS
68475: PUSH
68476: FOR_TO
68477: IFFALSE 68532
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68479: LD_ADDR_VAR 0 11
68483: PUSH
68484: LD_VAR 0 11
68488: PPUSH
68489: LD_VAR 0 11
68493: PUSH
68494: LD_INT 1
68496: PLUS
68497: PPUSH
68498: LD_VAR 0 9
68502: PUSH
68503: LD_INT 1
68505: ARRAY
68506: PPUSH
68507: CALL_OW 2
68511: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68512: LD_ADDR_VAR 0 9
68516: PUSH
68517: LD_VAR 0 9
68521: PPUSH
68522: LD_INT 1
68524: PPUSH
68525: CALL_OW 3
68529: ST_TO_ADDR
// end ;
68530: GO 68476
68532: POP
68533: POP
// end else
68534: GO 68556
// if sort then
68536: LD_VAR 0 9
68540: IFFALSE 68556
// p := sort [ 1 ] ;
68542: LD_ADDR_VAR 0 11
68546: PUSH
68547: LD_VAR 0 9
68551: PUSH
68552: LD_INT 1
68554: ARRAY
68555: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68556: LD_ADDR_VAR 0 2
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: LD_VAR 0 11
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: ST_TO_ADDR
// exit ;
68581: GO 70802
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68583: LD_EXP 63
68587: PUSH
68588: LD_EXP 62
68592: PUSH
68593: LD_VAR 0 1
68597: ARRAY
68598: ARRAY
68599: PUSH
68600: LD_EXP 36
68604: PUSH
68605: LD_VAR 0 1
68609: ARRAY
68610: PPUSH
68611: LD_INT 2
68613: PUSH
68614: LD_INT 30
68616: PUSH
68617: LD_INT 6
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 30
68626: PUSH
68627: LD_INT 7
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 30
68636: PUSH
68637: LD_INT 8
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: PPUSH
68650: CALL_OW 72
68654: AND
68655: PUSH
68656: LD_EXP 36
68660: PUSH
68661: LD_VAR 0 1
68665: ARRAY
68666: PPUSH
68667: LD_INT 30
68669: PUSH
68670: LD_INT 3
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PPUSH
68677: CALL_OW 72
68681: AND
68682: IFFALSE 69416
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68684: LD_ADDR_EXP 78
68688: PUSH
68689: LD_EXP 78
68693: PPUSH
68694: LD_VAR 0 1
68698: PPUSH
68699: LD_INT 3
68701: PPUSH
68702: CALL_OW 1
68706: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68707: LD_ADDR_VAR 0 2
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// if not eng then
68730: LD_VAR 0 6
68734: NOT
68735: IFFALSE 68798
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68737: LD_ADDR_VAR 0 11
68741: PUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: LD_INT 2
68749: PPUSH
68750: CALL 60841 0 2
68754: PUSH
68755: LD_INT 1
68757: ARRAY
68758: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68759: LD_ADDR_VAR 0 2
68763: PUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: LD_INT 2
68771: PPUSH
68772: LD_VAR 0 11
68776: PPUSH
68777: CALL_OW 1
68781: ST_TO_ADDR
// tmp := tmp diff p ;
68782: LD_ADDR_VAR 0 4
68786: PUSH
68787: LD_VAR 0 4
68791: PUSH
68792: LD_VAR 0 11
68796: DIFF
68797: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68798: LD_VAR 0 4
68802: PUSH
68803: LD_VAR 0 8
68807: PUSH
68808: LD_INT 6
68810: LESS
68811: AND
68812: IFFALSE 69000
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68814: LD_ADDR_VAR 0 9
68818: PUSH
68819: LD_VAR 0 4
68823: PUSH
68824: LD_VAR 0 8
68828: PUSH
68829: LD_VAR 0 7
68833: UNION
68834: DIFF
68835: PPUSH
68836: LD_INT 4
68838: PPUSH
68839: CALL 60841 0 2
68843: ST_TO_ADDR
// p := [ ] ;
68844: LD_ADDR_VAR 0 11
68848: PUSH
68849: EMPTY
68850: ST_TO_ADDR
// if sort then
68851: LD_VAR 0 9
68855: IFFALSE 68971
// for i = 1 to 6 - sci do
68857: LD_ADDR_VAR 0 3
68861: PUSH
68862: DOUBLE
68863: LD_INT 1
68865: DEC
68866: ST_TO_ADDR
68867: LD_INT 6
68869: PUSH
68870: LD_VAR 0 8
68874: MINUS
68875: PUSH
68876: FOR_TO
68877: IFFALSE 68969
// begin if i = sort then
68879: LD_VAR 0 3
68883: PUSH
68884: LD_VAR 0 9
68888: EQUAL
68889: IFFALSE 68893
// break ;
68891: GO 68969
// if GetClass ( i ) = 4 then
68893: LD_VAR 0 3
68897: PPUSH
68898: CALL_OW 257
68902: PUSH
68903: LD_INT 4
68905: EQUAL
68906: IFFALSE 68910
// continue ;
68908: GO 68876
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68910: LD_ADDR_VAR 0 11
68914: PUSH
68915: LD_VAR 0 11
68919: PPUSH
68920: LD_VAR 0 11
68924: PUSH
68925: LD_INT 1
68927: PLUS
68928: PPUSH
68929: LD_VAR 0 9
68933: PUSH
68934: LD_VAR 0 3
68938: ARRAY
68939: PPUSH
68940: CALL_OW 2
68944: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68945: LD_ADDR_VAR 0 4
68949: PUSH
68950: LD_VAR 0 4
68954: PUSH
68955: LD_VAR 0 9
68959: PUSH
68960: LD_VAR 0 3
68964: ARRAY
68965: DIFF
68966: ST_TO_ADDR
// end ;
68967: GO 68876
68969: POP
68970: POP
// if p then
68971: LD_VAR 0 11
68975: IFFALSE 69000
// result := Replace ( result , 4 , p ) ;
68977: LD_ADDR_VAR 0 2
68981: PUSH
68982: LD_VAR 0 2
68986: PPUSH
68987: LD_INT 4
68989: PPUSH
68990: LD_VAR 0 11
68994: PPUSH
68995: CALL_OW 1
68999: ST_TO_ADDR
// end ; if tmp and mech < 6 then
69000: LD_VAR 0 4
69004: PUSH
69005: LD_VAR 0 7
69009: PUSH
69010: LD_INT 6
69012: LESS
69013: AND
69014: IFFALSE 69202
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69016: LD_ADDR_VAR 0 9
69020: PUSH
69021: LD_VAR 0 4
69025: PUSH
69026: LD_VAR 0 8
69030: PUSH
69031: LD_VAR 0 7
69035: UNION
69036: DIFF
69037: PPUSH
69038: LD_INT 3
69040: PPUSH
69041: CALL 60841 0 2
69045: ST_TO_ADDR
// p := [ ] ;
69046: LD_ADDR_VAR 0 11
69050: PUSH
69051: EMPTY
69052: ST_TO_ADDR
// if sort then
69053: LD_VAR 0 9
69057: IFFALSE 69173
// for i = 1 to 6 - mech do
69059: LD_ADDR_VAR 0 3
69063: PUSH
69064: DOUBLE
69065: LD_INT 1
69067: DEC
69068: ST_TO_ADDR
69069: LD_INT 6
69071: PUSH
69072: LD_VAR 0 7
69076: MINUS
69077: PUSH
69078: FOR_TO
69079: IFFALSE 69171
// begin if i = sort then
69081: LD_VAR 0 3
69085: PUSH
69086: LD_VAR 0 9
69090: EQUAL
69091: IFFALSE 69095
// break ;
69093: GO 69171
// if GetClass ( i ) = 3 then
69095: LD_VAR 0 3
69099: PPUSH
69100: CALL_OW 257
69104: PUSH
69105: LD_INT 3
69107: EQUAL
69108: IFFALSE 69112
// continue ;
69110: GO 69078
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69112: LD_ADDR_VAR 0 11
69116: PUSH
69117: LD_VAR 0 11
69121: PPUSH
69122: LD_VAR 0 11
69126: PUSH
69127: LD_INT 1
69129: PLUS
69130: PPUSH
69131: LD_VAR 0 9
69135: PUSH
69136: LD_VAR 0 3
69140: ARRAY
69141: PPUSH
69142: CALL_OW 2
69146: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69147: LD_ADDR_VAR 0 4
69151: PUSH
69152: LD_VAR 0 4
69156: PUSH
69157: LD_VAR 0 9
69161: PUSH
69162: LD_VAR 0 3
69166: ARRAY
69167: DIFF
69168: ST_TO_ADDR
// end ;
69169: GO 69078
69171: POP
69172: POP
// if p then
69173: LD_VAR 0 11
69177: IFFALSE 69202
// result := Replace ( result , 3 , p ) ;
69179: LD_ADDR_VAR 0 2
69183: PUSH
69184: LD_VAR 0 2
69188: PPUSH
69189: LD_INT 3
69191: PPUSH
69192: LD_VAR 0 11
69196: PPUSH
69197: CALL_OW 1
69201: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69202: LD_VAR 0 4
69206: PUSH
69207: LD_INT 6
69209: GREATER
69210: PUSH
69211: LD_VAR 0 6
69215: PUSH
69216: LD_INT 6
69218: LESS
69219: AND
69220: IFFALSE 69414
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69222: LD_ADDR_VAR 0 9
69226: PUSH
69227: LD_VAR 0 4
69231: PUSH
69232: LD_VAR 0 8
69236: PUSH
69237: LD_VAR 0 7
69241: UNION
69242: PUSH
69243: LD_VAR 0 6
69247: UNION
69248: DIFF
69249: PPUSH
69250: LD_INT 2
69252: PPUSH
69253: CALL 60841 0 2
69257: ST_TO_ADDR
// p := [ ] ;
69258: LD_ADDR_VAR 0 11
69262: PUSH
69263: EMPTY
69264: ST_TO_ADDR
// if sort then
69265: LD_VAR 0 9
69269: IFFALSE 69385
// for i = 1 to 6 - eng do
69271: LD_ADDR_VAR 0 3
69275: PUSH
69276: DOUBLE
69277: LD_INT 1
69279: DEC
69280: ST_TO_ADDR
69281: LD_INT 6
69283: PUSH
69284: LD_VAR 0 6
69288: MINUS
69289: PUSH
69290: FOR_TO
69291: IFFALSE 69383
// begin if i = sort then
69293: LD_VAR 0 3
69297: PUSH
69298: LD_VAR 0 9
69302: EQUAL
69303: IFFALSE 69307
// break ;
69305: GO 69383
// if GetClass ( i ) = 2 then
69307: LD_VAR 0 3
69311: PPUSH
69312: CALL_OW 257
69316: PUSH
69317: LD_INT 2
69319: EQUAL
69320: IFFALSE 69324
// continue ;
69322: GO 69290
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69324: LD_ADDR_VAR 0 11
69328: PUSH
69329: LD_VAR 0 11
69333: PPUSH
69334: LD_VAR 0 11
69338: PUSH
69339: LD_INT 1
69341: PLUS
69342: PPUSH
69343: LD_VAR 0 9
69347: PUSH
69348: LD_VAR 0 3
69352: ARRAY
69353: PPUSH
69354: CALL_OW 2
69358: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69359: LD_ADDR_VAR 0 4
69363: PUSH
69364: LD_VAR 0 4
69368: PUSH
69369: LD_VAR 0 9
69373: PUSH
69374: LD_VAR 0 3
69378: ARRAY
69379: DIFF
69380: ST_TO_ADDR
// end ;
69381: GO 69290
69383: POP
69384: POP
// if p then
69385: LD_VAR 0 11
69389: IFFALSE 69414
// result := Replace ( result , 2 , p ) ;
69391: LD_ADDR_VAR 0 2
69395: PUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: LD_INT 2
69403: PPUSH
69404: LD_VAR 0 11
69408: PPUSH
69409: CALL_OW 1
69413: ST_TO_ADDR
// end ; exit ;
69414: GO 70802
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69416: LD_EXP 63
69420: PUSH
69421: LD_EXP 62
69425: PUSH
69426: LD_VAR 0 1
69430: ARRAY
69431: ARRAY
69432: NOT
69433: PUSH
69434: LD_EXP 36
69438: PUSH
69439: LD_VAR 0 1
69443: ARRAY
69444: PPUSH
69445: LD_INT 30
69447: PUSH
69448: LD_INT 3
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PPUSH
69455: CALL_OW 72
69459: AND
69460: PUSH
69461: LD_EXP 41
69465: PUSH
69466: LD_VAR 0 1
69470: ARRAY
69471: AND
69472: IFFALSE 70080
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69474: LD_ADDR_EXP 78
69478: PUSH
69479: LD_EXP 78
69483: PPUSH
69484: LD_VAR 0 1
69488: PPUSH
69489: LD_INT 5
69491: PPUSH
69492: CALL_OW 1
69496: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69497: LD_ADDR_VAR 0 2
69501: PUSH
69502: LD_INT 0
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// if sci > 1 then
69520: LD_VAR 0 8
69524: PUSH
69525: LD_INT 1
69527: GREATER
69528: IFFALSE 69556
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69530: LD_ADDR_VAR 0 4
69534: PUSH
69535: LD_VAR 0 4
69539: PUSH
69540: LD_VAR 0 8
69544: PUSH
69545: LD_VAR 0 8
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: DIFF
69554: DIFF
69555: ST_TO_ADDR
// if tmp and not sci then
69556: LD_VAR 0 4
69560: PUSH
69561: LD_VAR 0 8
69565: NOT
69566: AND
69567: IFFALSE 69636
// begin sort := SortBySkill ( tmp , 4 ) ;
69569: LD_ADDR_VAR 0 9
69573: PUSH
69574: LD_VAR 0 4
69578: PPUSH
69579: LD_INT 4
69581: PPUSH
69582: CALL 60841 0 2
69586: ST_TO_ADDR
// if sort then
69587: LD_VAR 0 9
69591: IFFALSE 69607
// p := sort [ 1 ] ;
69593: LD_ADDR_VAR 0 11
69597: PUSH
69598: LD_VAR 0 9
69602: PUSH
69603: LD_INT 1
69605: ARRAY
69606: ST_TO_ADDR
// if p then
69607: LD_VAR 0 11
69611: IFFALSE 69636
// result := Replace ( result , 4 , p ) ;
69613: LD_ADDR_VAR 0 2
69617: PUSH
69618: LD_VAR 0 2
69622: PPUSH
69623: LD_INT 4
69625: PPUSH
69626: LD_VAR 0 11
69630: PPUSH
69631: CALL_OW 1
69635: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69636: LD_ADDR_VAR 0 4
69640: PUSH
69641: LD_VAR 0 4
69645: PUSH
69646: LD_VAR 0 7
69650: DIFF
69651: ST_TO_ADDR
// if tmp and mech < 6 then
69652: LD_VAR 0 4
69656: PUSH
69657: LD_VAR 0 7
69661: PUSH
69662: LD_INT 6
69664: LESS
69665: AND
69666: IFFALSE 69854
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69668: LD_ADDR_VAR 0 9
69672: PUSH
69673: LD_VAR 0 4
69677: PUSH
69678: LD_VAR 0 8
69682: PUSH
69683: LD_VAR 0 7
69687: UNION
69688: DIFF
69689: PPUSH
69690: LD_INT 3
69692: PPUSH
69693: CALL 60841 0 2
69697: ST_TO_ADDR
// p := [ ] ;
69698: LD_ADDR_VAR 0 11
69702: PUSH
69703: EMPTY
69704: ST_TO_ADDR
// if sort then
69705: LD_VAR 0 9
69709: IFFALSE 69825
// for i = 1 to 6 - mech do
69711: LD_ADDR_VAR 0 3
69715: PUSH
69716: DOUBLE
69717: LD_INT 1
69719: DEC
69720: ST_TO_ADDR
69721: LD_INT 6
69723: PUSH
69724: LD_VAR 0 7
69728: MINUS
69729: PUSH
69730: FOR_TO
69731: IFFALSE 69823
// begin if i = sort then
69733: LD_VAR 0 3
69737: PUSH
69738: LD_VAR 0 9
69742: EQUAL
69743: IFFALSE 69747
// break ;
69745: GO 69823
// if GetClass ( i ) = 3 then
69747: LD_VAR 0 3
69751: PPUSH
69752: CALL_OW 257
69756: PUSH
69757: LD_INT 3
69759: EQUAL
69760: IFFALSE 69764
// continue ;
69762: GO 69730
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69764: LD_ADDR_VAR 0 11
69768: PUSH
69769: LD_VAR 0 11
69773: PPUSH
69774: LD_VAR 0 11
69778: PUSH
69779: LD_INT 1
69781: PLUS
69782: PPUSH
69783: LD_VAR 0 9
69787: PUSH
69788: LD_VAR 0 3
69792: ARRAY
69793: PPUSH
69794: CALL_OW 2
69798: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69799: LD_ADDR_VAR 0 4
69803: PUSH
69804: LD_VAR 0 4
69808: PUSH
69809: LD_VAR 0 9
69813: PUSH
69814: LD_VAR 0 3
69818: ARRAY
69819: DIFF
69820: ST_TO_ADDR
// end ;
69821: GO 69730
69823: POP
69824: POP
// if p then
69825: LD_VAR 0 11
69829: IFFALSE 69854
// result := Replace ( result , 3 , p ) ;
69831: LD_ADDR_VAR 0 2
69835: PUSH
69836: LD_VAR 0 2
69840: PPUSH
69841: LD_INT 3
69843: PPUSH
69844: LD_VAR 0 11
69848: PPUSH
69849: CALL_OW 1
69853: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69854: LD_ADDR_VAR 0 4
69858: PUSH
69859: LD_VAR 0 4
69863: PUSH
69864: LD_VAR 0 6
69868: DIFF
69869: ST_TO_ADDR
// if tmp and eng < 6 then
69870: LD_VAR 0 4
69874: PUSH
69875: LD_VAR 0 6
69879: PUSH
69880: LD_INT 6
69882: LESS
69883: AND
69884: IFFALSE 70078
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69886: LD_ADDR_VAR 0 9
69890: PUSH
69891: LD_VAR 0 4
69895: PUSH
69896: LD_VAR 0 8
69900: PUSH
69901: LD_VAR 0 7
69905: UNION
69906: PUSH
69907: LD_VAR 0 6
69911: UNION
69912: DIFF
69913: PPUSH
69914: LD_INT 2
69916: PPUSH
69917: CALL 60841 0 2
69921: ST_TO_ADDR
// p := [ ] ;
69922: LD_ADDR_VAR 0 11
69926: PUSH
69927: EMPTY
69928: ST_TO_ADDR
// if sort then
69929: LD_VAR 0 9
69933: IFFALSE 70049
// for i = 1 to 6 - eng do
69935: LD_ADDR_VAR 0 3
69939: PUSH
69940: DOUBLE
69941: LD_INT 1
69943: DEC
69944: ST_TO_ADDR
69945: LD_INT 6
69947: PUSH
69948: LD_VAR 0 6
69952: MINUS
69953: PUSH
69954: FOR_TO
69955: IFFALSE 70047
// begin if i = sort then
69957: LD_VAR 0 3
69961: PUSH
69962: LD_VAR 0 9
69966: EQUAL
69967: IFFALSE 69971
// break ;
69969: GO 70047
// if GetClass ( i ) = 2 then
69971: LD_VAR 0 3
69975: PPUSH
69976: CALL_OW 257
69980: PUSH
69981: LD_INT 2
69983: EQUAL
69984: IFFALSE 69988
// continue ;
69986: GO 69954
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69988: LD_ADDR_VAR 0 11
69992: PUSH
69993: LD_VAR 0 11
69997: PPUSH
69998: LD_VAR 0 11
70002: PUSH
70003: LD_INT 1
70005: PLUS
70006: PPUSH
70007: LD_VAR 0 9
70011: PUSH
70012: LD_VAR 0 3
70016: ARRAY
70017: PPUSH
70018: CALL_OW 2
70022: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70023: LD_ADDR_VAR 0 4
70027: PUSH
70028: LD_VAR 0 4
70032: PUSH
70033: LD_VAR 0 9
70037: PUSH
70038: LD_VAR 0 3
70042: ARRAY
70043: DIFF
70044: ST_TO_ADDR
// end ;
70045: GO 69954
70047: POP
70048: POP
// if p then
70049: LD_VAR 0 11
70053: IFFALSE 70078
// result := Replace ( result , 2 , p ) ;
70055: LD_ADDR_VAR 0 2
70059: PUSH
70060: LD_VAR 0 2
70064: PPUSH
70065: LD_INT 2
70067: PPUSH
70068: LD_VAR 0 11
70072: PPUSH
70073: CALL_OW 1
70077: ST_TO_ADDR
// end ; exit ;
70078: GO 70802
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70080: LD_EXP 63
70084: PUSH
70085: LD_EXP 62
70089: PUSH
70090: LD_VAR 0 1
70094: ARRAY
70095: ARRAY
70096: NOT
70097: PUSH
70098: LD_EXP 36
70102: PUSH
70103: LD_VAR 0 1
70107: ARRAY
70108: PPUSH
70109: LD_INT 30
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PPUSH
70119: CALL_OW 72
70123: AND
70124: PUSH
70125: LD_EXP 41
70129: PUSH
70130: LD_VAR 0 1
70134: ARRAY
70135: NOT
70136: AND
70137: IFFALSE 70802
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70139: LD_ADDR_EXP 78
70143: PUSH
70144: LD_EXP 78
70148: PPUSH
70149: LD_VAR 0 1
70153: PPUSH
70154: LD_INT 6
70156: PPUSH
70157: CALL_OW 1
70161: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70162: LD_ADDR_VAR 0 2
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: ST_TO_ADDR
// if sci >= 1 then
70185: LD_VAR 0 8
70189: PUSH
70190: LD_INT 1
70192: GREATEREQUAL
70193: IFFALSE 70215
// tmp := tmp diff sci [ 1 ] ;
70195: LD_ADDR_VAR 0 4
70199: PUSH
70200: LD_VAR 0 4
70204: PUSH
70205: LD_VAR 0 8
70209: PUSH
70210: LD_INT 1
70212: ARRAY
70213: DIFF
70214: ST_TO_ADDR
// if tmp and not sci then
70215: LD_VAR 0 4
70219: PUSH
70220: LD_VAR 0 8
70224: NOT
70225: AND
70226: IFFALSE 70295
// begin sort := SortBySkill ( tmp , 4 ) ;
70228: LD_ADDR_VAR 0 9
70232: PUSH
70233: LD_VAR 0 4
70237: PPUSH
70238: LD_INT 4
70240: PPUSH
70241: CALL 60841 0 2
70245: ST_TO_ADDR
// if sort then
70246: LD_VAR 0 9
70250: IFFALSE 70266
// p := sort [ 1 ] ;
70252: LD_ADDR_VAR 0 11
70256: PUSH
70257: LD_VAR 0 9
70261: PUSH
70262: LD_INT 1
70264: ARRAY
70265: ST_TO_ADDR
// if p then
70266: LD_VAR 0 11
70270: IFFALSE 70295
// result := Replace ( result , 4 , p ) ;
70272: LD_ADDR_VAR 0 2
70276: PUSH
70277: LD_VAR 0 2
70281: PPUSH
70282: LD_INT 4
70284: PPUSH
70285: LD_VAR 0 11
70289: PPUSH
70290: CALL_OW 1
70294: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70295: LD_ADDR_VAR 0 4
70299: PUSH
70300: LD_VAR 0 4
70304: PUSH
70305: LD_VAR 0 7
70309: DIFF
70310: ST_TO_ADDR
// if tmp and mech < 6 then
70311: LD_VAR 0 4
70315: PUSH
70316: LD_VAR 0 7
70320: PUSH
70321: LD_INT 6
70323: LESS
70324: AND
70325: IFFALSE 70507
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70327: LD_ADDR_VAR 0 9
70331: PUSH
70332: LD_VAR 0 4
70336: PUSH
70337: LD_VAR 0 7
70341: DIFF
70342: PPUSH
70343: LD_INT 3
70345: PPUSH
70346: CALL 60841 0 2
70350: ST_TO_ADDR
// p := [ ] ;
70351: LD_ADDR_VAR 0 11
70355: PUSH
70356: EMPTY
70357: ST_TO_ADDR
// if sort then
70358: LD_VAR 0 9
70362: IFFALSE 70478
// for i = 1 to 6 - mech do
70364: LD_ADDR_VAR 0 3
70368: PUSH
70369: DOUBLE
70370: LD_INT 1
70372: DEC
70373: ST_TO_ADDR
70374: LD_INT 6
70376: PUSH
70377: LD_VAR 0 7
70381: MINUS
70382: PUSH
70383: FOR_TO
70384: IFFALSE 70476
// begin if i = sort then
70386: LD_VAR 0 3
70390: PUSH
70391: LD_VAR 0 9
70395: EQUAL
70396: IFFALSE 70400
// break ;
70398: GO 70476
// if GetClass ( i ) = 3 then
70400: LD_VAR 0 3
70404: PPUSH
70405: CALL_OW 257
70409: PUSH
70410: LD_INT 3
70412: EQUAL
70413: IFFALSE 70417
// continue ;
70415: GO 70383
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70417: LD_ADDR_VAR 0 11
70421: PUSH
70422: LD_VAR 0 11
70426: PPUSH
70427: LD_VAR 0 11
70431: PUSH
70432: LD_INT 1
70434: PLUS
70435: PPUSH
70436: LD_VAR 0 9
70440: PUSH
70441: LD_VAR 0 3
70445: ARRAY
70446: PPUSH
70447: CALL_OW 2
70451: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70452: LD_ADDR_VAR 0 4
70456: PUSH
70457: LD_VAR 0 4
70461: PUSH
70462: LD_VAR 0 9
70466: PUSH
70467: LD_VAR 0 3
70471: ARRAY
70472: DIFF
70473: ST_TO_ADDR
// end ;
70474: GO 70383
70476: POP
70477: POP
// if p then
70478: LD_VAR 0 11
70482: IFFALSE 70507
// result := Replace ( result , 3 , p ) ;
70484: LD_ADDR_VAR 0 2
70488: PUSH
70489: LD_VAR 0 2
70493: PPUSH
70494: LD_INT 3
70496: PPUSH
70497: LD_VAR 0 11
70501: PPUSH
70502: CALL_OW 1
70506: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70507: LD_ADDR_VAR 0 4
70511: PUSH
70512: LD_VAR 0 4
70516: PUSH
70517: LD_VAR 0 6
70521: DIFF
70522: ST_TO_ADDR
// if tmp and eng < 4 then
70523: LD_VAR 0 4
70527: PUSH
70528: LD_VAR 0 6
70532: PUSH
70533: LD_INT 4
70535: LESS
70536: AND
70537: IFFALSE 70727
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70539: LD_ADDR_VAR 0 9
70543: PUSH
70544: LD_VAR 0 4
70548: PUSH
70549: LD_VAR 0 7
70553: PUSH
70554: LD_VAR 0 6
70558: UNION
70559: DIFF
70560: PPUSH
70561: LD_INT 2
70563: PPUSH
70564: CALL 60841 0 2
70568: ST_TO_ADDR
// p := [ ] ;
70569: LD_ADDR_VAR 0 11
70573: PUSH
70574: EMPTY
70575: ST_TO_ADDR
// if sort then
70576: LD_VAR 0 9
70580: IFFALSE 70696
// for i = 1 to 4 - eng do
70582: LD_ADDR_VAR 0 3
70586: PUSH
70587: DOUBLE
70588: LD_INT 1
70590: DEC
70591: ST_TO_ADDR
70592: LD_INT 4
70594: PUSH
70595: LD_VAR 0 6
70599: MINUS
70600: PUSH
70601: FOR_TO
70602: IFFALSE 70694
// begin if i = sort then
70604: LD_VAR 0 3
70608: PUSH
70609: LD_VAR 0 9
70613: EQUAL
70614: IFFALSE 70618
// break ;
70616: GO 70694
// if GetClass ( i ) = 2 then
70618: LD_VAR 0 3
70622: PPUSH
70623: CALL_OW 257
70627: PUSH
70628: LD_INT 2
70630: EQUAL
70631: IFFALSE 70635
// continue ;
70633: GO 70601
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70635: LD_ADDR_VAR 0 11
70639: PUSH
70640: LD_VAR 0 11
70644: PPUSH
70645: LD_VAR 0 11
70649: PUSH
70650: LD_INT 1
70652: PLUS
70653: PPUSH
70654: LD_VAR 0 9
70658: PUSH
70659: LD_VAR 0 3
70663: ARRAY
70664: PPUSH
70665: CALL_OW 2
70669: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70670: LD_ADDR_VAR 0 4
70674: PUSH
70675: LD_VAR 0 4
70679: PUSH
70680: LD_VAR 0 9
70684: PUSH
70685: LD_VAR 0 3
70689: ARRAY
70690: DIFF
70691: ST_TO_ADDR
// end ;
70692: GO 70601
70694: POP
70695: POP
// if p then
70696: LD_VAR 0 11
70700: IFFALSE 70725
// result := Replace ( result , 2 , p ) ;
70702: LD_ADDR_VAR 0 2
70706: PUSH
70707: LD_VAR 0 2
70711: PPUSH
70712: LD_INT 2
70714: PPUSH
70715: LD_VAR 0 11
70719: PPUSH
70720: CALL_OW 1
70724: ST_TO_ADDR
// end else
70725: GO 70771
// for i = eng downto 5 do
70727: LD_ADDR_VAR 0 3
70731: PUSH
70732: DOUBLE
70733: LD_VAR 0 6
70737: INC
70738: ST_TO_ADDR
70739: LD_INT 5
70741: PUSH
70742: FOR_DOWNTO
70743: IFFALSE 70769
// tmp := tmp union eng [ i ] ;
70745: LD_ADDR_VAR 0 4
70749: PUSH
70750: LD_VAR 0 4
70754: PUSH
70755: LD_VAR 0 6
70759: PUSH
70760: LD_VAR 0 3
70764: ARRAY
70765: UNION
70766: ST_TO_ADDR
70767: GO 70742
70769: POP
70770: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70771: LD_ADDR_VAR 0 2
70775: PUSH
70776: LD_VAR 0 2
70780: PPUSH
70781: LD_INT 1
70783: PPUSH
70784: LD_VAR 0 4
70788: PUSH
70789: LD_VAR 0 5
70793: DIFF
70794: PPUSH
70795: CALL_OW 1
70799: ST_TO_ADDR
// exit ;
70800: GO 70802
// end ; end ;
70802: LD_VAR 0 2
70806: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70807: LD_INT 0
70809: PPUSH
70810: PPUSH
70811: PPUSH
// if not mc_bases then
70812: LD_EXP 36
70816: NOT
70817: IFFALSE 70821
// exit ;
70819: GO 70927
// for i = 1 to mc_bases do
70821: LD_ADDR_VAR 0 2
70825: PUSH
70826: DOUBLE
70827: LD_INT 1
70829: DEC
70830: ST_TO_ADDR
70831: LD_EXP 36
70835: PUSH
70836: FOR_TO
70837: IFFALSE 70918
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_EXP 36
70848: PUSH
70849: LD_VAR 0 2
70853: ARRAY
70854: PPUSH
70855: LD_INT 21
70857: PUSH
70858: LD_INT 3
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 3
70867: PUSH
70868: LD_INT 24
70870: PUSH
70871: LD_INT 1000
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PPUSH
70886: CALL_OW 72
70890: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70891: LD_ADDR_EXP 37
70895: PUSH
70896: LD_EXP 37
70900: PPUSH
70901: LD_VAR 0 2
70905: PPUSH
70906: LD_VAR 0 3
70910: PPUSH
70911: CALL_OW 1
70915: ST_TO_ADDR
// end ;
70916: GO 70836
70918: POP
70919: POP
// RaiseSailEvent ( 101 ) ;
70920: LD_INT 101
70922: PPUSH
70923: CALL_OW 427
// end ;
70927: LD_VAR 0 1
70931: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70932: LD_INT 0
70934: PPUSH
70935: PPUSH
70936: PPUSH
70937: PPUSH
70938: PPUSH
70939: PPUSH
70940: PPUSH
// if not mc_bases then
70941: LD_EXP 36
70945: NOT
70946: IFFALSE 70950
// exit ;
70948: GO 71523
// for i = 1 to mc_bases do
70950: LD_ADDR_VAR 0 2
70954: PUSH
70955: DOUBLE
70956: LD_INT 1
70958: DEC
70959: ST_TO_ADDR
70960: LD_EXP 36
70964: PUSH
70965: FOR_TO
70966: IFFALSE 71514
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70968: LD_ADDR_VAR 0 5
70972: PUSH
70973: LD_EXP 36
70977: PUSH
70978: LD_VAR 0 2
70982: ARRAY
70983: PUSH
70984: LD_EXP 65
70988: PUSH
70989: LD_VAR 0 2
70993: ARRAY
70994: UNION
70995: PPUSH
70996: LD_INT 21
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: LD_INT 54
71014: PUSH
71015: EMPTY
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 3
71024: PUSH
71025: LD_INT 24
71027: PUSH
71028: LD_INT 800
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PPUSH
71048: CALL_OW 72
71052: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
71053: LD_ADDR_VAR 0 6
71057: PUSH
71058: LD_EXP 36
71062: PUSH
71063: LD_VAR 0 2
71067: ARRAY
71068: PPUSH
71069: LD_INT 21
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: LD_INT 3
71084: PUSH
71085: LD_INT 54
71087: PUSH
71088: EMPTY
71089: LIST
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: LD_INT 24
71100: PUSH
71101: LD_INT 250
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PPUSH
71121: CALL_OW 72
71125: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71126: LD_ADDR_VAR 0 7
71130: PUSH
71131: LD_VAR 0 5
71135: PUSH
71136: LD_VAR 0 6
71140: DIFF
71141: ST_TO_ADDR
// if not need_heal_1 then
71142: LD_VAR 0 6
71146: NOT
71147: IFFALSE 71180
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71149: LD_ADDR_EXP 39
71153: PUSH
71154: LD_EXP 39
71158: PPUSH
71159: LD_VAR 0 2
71163: PUSH
71164: LD_INT 1
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PPUSH
71171: EMPTY
71172: PPUSH
71173: CALL 26583 0 3
71177: ST_TO_ADDR
71178: GO 71250
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71180: LD_ADDR_EXP 39
71184: PUSH
71185: LD_EXP 39
71189: PPUSH
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 1
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PPUSH
71202: LD_EXP 39
71206: PUSH
71207: LD_VAR 0 2
71211: ARRAY
71212: PUSH
71213: LD_INT 1
71215: ARRAY
71216: PPUSH
71217: LD_INT 3
71219: PUSH
71220: LD_INT 24
71222: PUSH
71223: LD_INT 1000
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PPUSH
71234: CALL_OW 72
71238: PUSH
71239: LD_VAR 0 6
71243: UNION
71244: PPUSH
71245: CALL 26583 0 3
71249: ST_TO_ADDR
// if not need_heal_2 then
71250: LD_VAR 0 7
71254: NOT
71255: IFFALSE 71288
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71257: LD_ADDR_EXP 39
71261: PUSH
71262: LD_EXP 39
71266: PPUSH
71267: LD_VAR 0 2
71271: PUSH
71272: LD_INT 2
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PPUSH
71279: EMPTY
71280: PPUSH
71281: CALL 26583 0 3
71285: ST_TO_ADDR
71286: GO 71320
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71288: LD_ADDR_EXP 39
71292: PUSH
71293: LD_EXP 39
71297: PPUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PPUSH
71310: LD_VAR 0 7
71314: PPUSH
71315: CALL 26583 0 3
71319: ST_TO_ADDR
// if need_heal_2 then
71320: LD_VAR 0 7
71324: IFFALSE 71496
// for j in need_heal_2 do
71326: LD_ADDR_VAR 0 3
71330: PUSH
71331: LD_VAR 0 7
71335: PUSH
71336: FOR_IN
71337: IFFALSE 71494
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71339: LD_ADDR_VAR 0 5
71343: PUSH
71344: LD_EXP 36
71348: PUSH
71349: LD_VAR 0 2
71353: ARRAY
71354: PPUSH
71355: LD_INT 2
71357: PUSH
71358: LD_INT 30
71360: PUSH
71361: LD_INT 6
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 30
71370: PUSH
71371: LD_INT 7
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 30
71380: PUSH
71381: LD_INT 8
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 30
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 30
71400: PUSH
71401: LD_INT 1
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 25
71410: PUSH
71411: LD_INT 4
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 72
71431: ST_TO_ADDR
// if tmp then
71432: LD_VAR 0 5
71436: IFFALSE 71492
// begin k := NearestUnitToUnit ( tmp , j ) ;
71438: LD_ADDR_VAR 0 4
71442: PUSH
71443: LD_VAR 0 5
71447: PPUSH
71448: LD_VAR 0 3
71452: PPUSH
71453: CALL_OW 74
71457: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71458: LD_VAR 0 3
71462: PPUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: CALL_OW 296
71472: PUSH
71473: LD_INT 7
71475: GREATER
71476: IFFALSE 71492
// ComMoveUnit ( j , k ) ;
71478: LD_VAR 0 3
71482: PPUSH
71483: LD_VAR 0 4
71487: PPUSH
71488: CALL_OW 112
// end ; end ;
71492: GO 71336
71494: POP
71495: POP
// if not need_heal_1 and not need_heal_2 then
71496: LD_VAR 0 6
71500: NOT
71501: PUSH
71502: LD_VAR 0 7
71506: NOT
71507: AND
71508: IFFALSE 71512
// continue ;
71510: GO 70965
// end ;
71512: GO 70965
71514: POP
71515: POP
// RaiseSailEvent ( 102 ) ;
71516: LD_INT 102
71518: PPUSH
71519: CALL_OW 427
// end ;
71523: LD_VAR 0 1
71527: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
71533: PPUSH
71534: PPUSH
71535: PPUSH
71536: PPUSH
71537: PPUSH
// if not mc_bases then
71538: LD_EXP 36
71542: NOT
71543: IFFALSE 71547
// exit ;
71545: GO 72387
// for i = 1 to mc_bases do
71547: LD_ADDR_VAR 0 2
71551: PUSH
71552: DOUBLE
71553: LD_INT 1
71555: DEC
71556: ST_TO_ADDR
71557: LD_EXP 36
71561: PUSH
71562: FOR_TO
71563: IFFALSE 72385
// begin if not mc_building_need_repair [ i ] then
71565: LD_EXP 37
71569: PUSH
71570: LD_VAR 0 2
71574: ARRAY
71575: NOT
71576: IFFALSE 71750
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71578: LD_ADDR_VAR 0 6
71582: PUSH
71583: LD_EXP 55
71587: PUSH
71588: LD_VAR 0 2
71592: ARRAY
71593: PPUSH
71594: LD_INT 3
71596: PUSH
71597: LD_INT 24
71599: PUSH
71600: LD_INT 1000
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 34
71616: PUSH
71617: LD_INT 13
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 34
71626: PUSH
71627: LD_INT 52
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 72
71647: ST_TO_ADDR
// if cranes then
71648: LD_VAR 0 6
71652: IFFALSE 71714
// for j in cranes do
71654: LD_ADDR_VAR 0 3
71658: PUSH
71659: LD_VAR 0 6
71663: PUSH
71664: FOR_IN
71665: IFFALSE 71712
// if not IsInArea ( j , mc_parking [ i ] ) then
71667: LD_VAR 0 3
71671: PPUSH
71672: LD_EXP 60
71676: PUSH
71677: LD_VAR 0 2
71681: ARRAY
71682: PPUSH
71683: CALL_OW 308
71687: NOT
71688: IFFALSE 71710
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71690: LD_VAR 0 3
71694: PPUSH
71695: LD_EXP 60
71699: PUSH
71700: LD_VAR 0 2
71704: ARRAY
71705: PPUSH
71706: CALL_OW 113
71710: GO 71664
71712: POP
71713: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71714: LD_ADDR_EXP 38
71718: PUSH
71719: LD_EXP 38
71723: PPUSH
71724: LD_VAR 0 2
71728: PPUSH
71729: EMPTY
71730: PPUSH
71731: CALL_OW 1
71735: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71736: LD_VAR 0 2
71740: PPUSH
71741: LD_INT 101
71743: PPUSH
71744: CALL 66640 0 2
// continue ;
71748: GO 71562
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71750: LD_ADDR_EXP 42
71754: PUSH
71755: LD_EXP 42
71759: PPUSH
71760: LD_VAR 0 2
71764: PPUSH
71765: EMPTY
71766: PPUSH
71767: CALL_OW 1
71771: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71772: LD_VAR 0 2
71776: PPUSH
71777: LD_INT 103
71779: PPUSH
71780: CALL 66640 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71784: LD_ADDR_VAR 0 5
71788: PUSH
71789: LD_EXP 36
71793: PUSH
71794: LD_VAR 0 2
71798: ARRAY
71799: PUSH
71800: LD_EXP 65
71804: PUSH
71805: LD_VAR 0 2
71809: ARRAY
71810: UNION
71811: PPUSH
71812: LD_INT 2
71814: PUSH
71815: LD_INT 25
71817: PUSH
71818: LD_INT 2
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 25
71827: PUSH
71828: LD_INT 16
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: PUSH
71840: EMPTY
71841: LIST
71842: PPUSH
71843: CALL_OW 72
71847: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71848: LD_ADDR_VAR 0 6
71852: PUSH
71853: LD_EXP 55
71857: PUSH
71858: LD_VAR 0 2
71862: ARRAY
71863: PPUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 34
71869: PUSH
71870: LD_INT 13
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 34
71879: PUSH
71880: LD_INT 52
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: PPUSH
71892: CALL_OW 72
71896: ST_TO_ADDR
// if cranes then
71897: LD_VAR 0 6
71901: IFFALSE 72037
// begin for j in cranes do
71903: LD_ADDR_VAR 0 3
71907: PUSH
71908: LD_VAR 0 6
71912: PUSH
71913: FOR_IN
71914: IFFALSE 72035
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71916: LD_VAR 0 3
71920: PPUSH
71921: CALL_OW 256
71925: PUSH
71926: LD_INT 500
71928: GREATEREQUAL
71929: PUSH
71930: LD_VAR 0 3
71934: PPUSH
71935: CALL_OW 314
71939: NOT
71940: AND
71941: IFFALSE 71975
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
71943: LD_VAR 0 3
71947: PPUSH
71948: LD_EXP 37
71952: PUSH
71953: LD_VAR 0 2
71957: ARRAY
71958: PPUSH
71959: LD_VAR 0 3
71963: PPUSH
71964: CALL_OW 74
71968: PPUSH
71969: CALL_OW 130
71973: GO 72033
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
71975: LD_VAR 0 3
71979: PPUSH
71980: CALL_OW 256
71984: PUSH
71985: LD_INT 500
71987: LESS
71988: PUSH
71989: LD_VAR 0 3
71993: PPUSH
71994: LD_EXP 60
71998: PUSH
71999: LD_VAR 0 2
72003: ARRAY
72004: PPUSH
72005: CALL_OW 308
72009: NOT
72010: AND
72011: IFFALSE 72033
// ComMoveToArea ( j , mc_parking [ i ] ) ;
72013: LD_VAR 0 3
72017: PPUSH
72018: LD_EXP 60
72022: PUSH
72023: LD_VAR 0 2
72027: ARRAY
72028: PPUSH
72029: CALL_OW 113
72033: GO 71913
72035: POP
72036: POP
// end ; if not tmp then
72037: LD_VAR 0 5
72041: NOT
72042: IFFALSE 72046
// continue ;
72044: GO 71562
// for j in tmp do
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: LD_VAR 0 5
72055: PUSH
72056: FOR_IN
72057: IFFALSE 72381
// begin if mc_need_heal [ i ] then
72059: LD_EXP 39
72063: PUSH
72064: LD_VAR 0 2
72068: ARRAY
72069: IFFALSE 72117
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
72071: LD_VAR 0 3
72075: PUSH
72076: LD_EXP 39
72080: PUSH
72081: LD_VAR 0 2
72085: ARRAY
72086: PUSH
72087: LD_INT 1
72089: ARRAY
72090: IN
72091: PUSH
72092: LD_VAR 0 3
72096: PUSH
72097: LD_EXP 39
72101: PUSH
72102: LD_VAR 0 2
72106: ARRAY
72107: PUSH
72108: LD_INT 2
72110: ARRAY
72111: IN
72112: OR
72113: IFFALSE 72117
// continue ;
72115: GO 72056
// if IsInUnit ( j ) then
72117: LD_VAR 0 3
72121: PPUSH
72122: CALL_OW 310
72126: IFFALSE 72137
// ComExitBuilding ( j ) ;
72128: LD_VAR 0 3
72132: PPUSH
72133: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
72137: LD_VAR 0 3
72141: PUSH
72142: LD_EXP 38
72146: PUSH
72147: LD_VAR 0 2
72151: ARRAY
72152: IN
72153: NOT
72154: IFFALSE 72212
// begin SetTag ( j , 101 ) ;
72156: LD_VAR 0 3
72160: PPUSH
72161: LD_INT 101
72163: PPUSH
72164: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
72168: LD_ADDR_EXP 38
72172: PUSH
72173: LD_EXP 38
72177: PPUSH
72178: LD_VAR 0 2
72182: PUSH
72183: LD_EXP 38
72187: PUSH
72188: LD_VAR 0 2
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: PLUS
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PPUSH
72202: LD_VAR 0 3
72206: PPUSH
72207: CALL 26583 0 3
72211: ST_TO_ADDR
// end ; wait ( 1 ) ;
72212: LD_INT 1
72214: PPUSH
72215: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
72219: LD_ADDR_VAR 0 7
72223: PUSH
72224: LD_EXP 37
72228: PUSH
72229: LD_VAR 0 2
72233: ARRAY
72234: ST_TO_ADDR
// if mc_scan [ i ] then
72235: LD_EXP 59
72239: PUSH
72240: LD_VAR 0 2
72244: ARRAY
72245: IFFALSE 72314
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
72247: LD_ADDR_VAR 0 7
72251: PUSH
72252: LD_EXP 37
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: PPUSH
72263: LD_INT 3
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: LD_INT 30
72271: PUSH
72272: LD_INT 32
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 30
72281: PUSH
72282: LD_INT 33
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 30
72291: PUSH
72292: LD_INT 31
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PPUSH
72309: CALL_OW 72
72313: ST_TO_ADDR
// if not to_repair_tmp then
72314: LD_VAR 0 7
72318: NOT
72319: IFFALSE 72323
// continue ;
72321: GO 72056
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
72323: LD_ADDR_VAR 0 8
72327: PUSH
72328: LD_VAR 0 7
72332: PPUSH
72333: LD_VAR 0 3
72337: PPUSH
72338: CALL_OW 74
72342: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
72343: LD_VAR 0 8
72347: PPUSH
72348: LD_INT 14
72350: PPUSH
72351: CALL 29176 0 2
72355: PUSH
72356: LD_INT 4
72358: ARRAY
72359: PUSH
72360: LD_INT 5
72362: LESS
72363: IFFALSE 72379
// ComRepairBuilding ( j , to_repair ) ;
72365: LD_VAR 0 3
72369: PPUSH
72370: LD_VAR 0 8
72374: PPUSH
72375: CALL_OW 130
// end ;
72379: GO 72056
72381: POP
72382: POP
// end ;
72383: GO 71562
72385: POP
72386: POP
// end ;
72387: LD_VAR 0 1
72391: RET
// export function MC_Heal ; var i , j , tmp ; begin
72392: LD_INT 0
72394: PPUSH
72395: PPUSH
72396: PPUSH
72397: PPUSH
// if not mc_bases then
72398: LD_EXP 36
72402: NOT
72403: IFFALSE 72407
// exit ;
72405: GO 72809
// for i = 1 to mc_bases do
72407: LD_ADDR_VAR 0 2
72411: PUSH
72412: DOUBLE
72413: LD_INT 1
72415: DEC
72416: ST_TO_ADDR
72417: LD_EXP 36
72421: PUSH
72422: FOR_TO
72423: IFFALSE 72807
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72425: LD_EXP 39
72429: PUSH
72430: LD_VAR 0 2
72434: ARRAY
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: NOT
72440: PUSH
72441: LD_EXP 39
72445: PUSH
72446: LD_VAR 0 2
72450: ARRAY
72451: PUSH
72452: LD_INT 2
72454: ARRAY
72455: NOT
72456: AND
72457: IFFALSE 72495
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72459: LD_ADDR_EXP 40
72463: PUSH
72464: LD_EXP 40
72468: PPUSH
72469: LD_VAR 0 2
72473: PPUSH
72474: EMPTY
72475: PPUSH
72476: CALL_OW 1
72480: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72481: LD_VAR 0 2
72485: PPUSH
72486: LD_INT 102
72488: PPUSH
72489: CALL 66640 0 2
// continue ;
72493: GO 72422
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72495: LD_ADDR_VAR 0 4
72499: PUSH
72500: LD_EXP 36
72504: PUSH
72505: LD_VAR 0 2
72509: ARRAY
72510: PPUSH
72511: LD_INT 25
72513: PUSH
72514: LD_INT 4
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PPUSH
72521: CALL_OW 72
72525: ST_TO_ADDR
// if not tmp then
72526: LD_VAR 0 4
72530: NOT
72531: IFFALSE 72535
// continue ;
72533: GO 72422
// if mc_taming [ i ] then
72535: LD_EXP 67
72539: PUSH
72540: LD_VAR 0 2
72544: ARRAY
72545: IFFALSE 72569
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72547: LD_ADDR_EXP 67
72551: PUSH
72552: LD_EXP 67
72556: PPUSH
72557: LD_VAR 0 2
72561: PPUSH
72562: EMPTY
72563: PPUSH
72564: CALL_OW 1
72568: ST_TO_ADDR
// for j in tmp do
72569: LD_ADDR_VAR 0 3
72573: PUSH
72574: LD_VAR 0 4
72578: PUSH
72579: FOR_IN
72580: IFFALSE 72803
// begin if IsInUnit ( j ) then
72582: LD_VAR 0 3
72586: PPUSH
72587: CALL_OW 310
72591: IFFALSE 72602
// ComExitBuilding ( j ) ;
72593: LD_VAR 0 3
72597: PPUSH
72598: CALL_OW 122
// if not j in mc_healers [ i ] then
72602: LD_VAR 0 3
72606: PUSH
72607: LD_EXP 40
72611: PUSH
72612: LD_VAR 0 2
72616: ARRAY
72617: IN
72618: NOT
72619: IFFALSE 72665
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72621: LD_ADDR_EXP 40
72625: PUSH
72626: LD_EXP 40
72630: PPUSH
72631: LD_VAR 0 2
72635: PUSH
72636: LD_EXP 40
72640: PUSH
72641: LD_VAR 0 2
72645: ARRAY
72646: PUSH
72647: LD_INT 1
72649: PLUS
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PPUSH
72655: LD_VAR 0 3
72659: PPUSH
72660: CALL 26583 0 3
72664: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72665: LD_VAR 0 3
72669: PPUSH
72670: CALL_OW 110
72674: PUSH
72675: LD_INT 102
72677: NONEQUAL
72678: IFFALSE 72692
// SetTag ( j , 102 ) ;
72680: LD_VAR 0 3
72684: PPUSH
72685: LD_INT 102
72687: PPUSH
72688: CALL_OW 109
// Wait ( 3 ) ;
72692: LD_INT 3
72694: PPUSH
72695: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72699: LD_EXP 39
72703: PUSH
72704: LD_VAR 0 2
72708: ARRAY
72709: PUSH
72710: LD_INT 1
72712: ARRAY
72713: IFFALSE 72745
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72715: LD_VAR 0 3
72719: PPUSH
72720: LD_EXP 39
72724: PUSH
72725: LD_VAR 0 2
72729: ARRAY
72730: PUSH
72731: LD_INT 1
72733: ARRAY
72734: PUSH
72735: LD_INT 1
72737: ARRAY
72738: PPUSH
72739: CALL_OW 128
72743: GO 72801
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72745: LD_VAR 0 3
72749: PPUSH
72750: CALL_OW 314
72754: NOT
72755: PUSH
72756: LD_EXP 39
72760: PUSH
72761: LD_VAR 0 2
72765: ARRAY
72766: PUSH
72767: LD_INT 2
72769: ARRAY
72770: AND
72771: IFFALSE 72801
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72773: LD_VAR 0 3
72777: PPUSH
72778: LD_EXP 39
72782: PUSH
72783: LD_VAR 0 2
72787: ARRAY
72788: PUSH
72789: LD_INT 2
72791: ARRAY
72792: PUSH
72793: LD_INT 1
72795: ARRAY
72796: PPUSH
72797: CALL_OW 128
// end ;
72801: GO 72579
72803: POP
72804: POP
// end ;
72805: GO 72422
72807: POP
72808: POP
// end ;
72809: LD_VAR 0 1
72813: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
72818: PPUSH
72819: PPUSH
72820: PPUSH
// if not mc_bases then
72821: LD_EXP 36
72825: NOT
72826: IFFALSE 72830
// exit ;
72828: GO 73973
// for i = 1 to mc_bases do
72830: LD_ADDR_VAR 0 2
72834: PUSH
72835: DOUBLE
72836: LD_INT 1
72838: DEC
72839: ST_TO_ADDR
72840: LD_EXP 36
72844: PUSH
72845: FOR_TO
72846: IFFALSE 73971
// begin if mc_scan [ i ] then
72848: LD_EXP 59
72852: PUSH
72853: LD_VAR 0 2
72857: ARRAY
72858: IFFALSE 72862
// continue ;
72860: GO 72845
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72862: LD_EXP 41
72866: PUSH
72867: LD_VAR 0 2
72871: ARRAY
72872: NOT
72873: PUSH
72874: LD_EXP 43
72878: PUSH
72879: LD_VAR 0 2
72883: ARRAY
72884: NOT
72885: AND
72886: PUSH
72887: LD_EXP 42
72891: PUSH
72892: LD_VAR 0 2
72896: ARRAY
72897: AND
72898: IFFALSE 72936
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72900: LD_ADDR_EXP 42
72904: PUSH
72905: LD_EXP 42
72909: PPUSH
72910: LD_VAR 0 2
72914: PPUSH
72915: EMPTY
72916: PPUSH
72917: CALL_OW 1
72921: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72922: LD_VAR 0 2
72926: PPUSH
72927: LD_INT 103
72929: PPUSH
72930: CALL 66640 0 2
// continue ;
72934: GO 72845
// end ; if mc_construct_list [ i ] then
72936: LD_EXP 43
72940: PUSH
72941: LD_VAR 0 2
72945: ARRAY
72946: IFFALSE 73166
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72948: LD_ADDR_VAR 0 4
72952: PUSH
72953: LD_EXP 36
72957: PUSH
72958: LD_VAR 0 2
72962: ARRAY
72963: PPUSH
72964: LD_INT 25
72966: PUSH
72967: LD_INT 2
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PPUSH
72974: CALL_OW 72
72978: PUSH
72979: LD_EXP 38
72983: PUSH
72984: LD_VAR 0 2
72988: ARRAY
72989: DIFF
72990: ST_TO_ADDR
// if not tmp then
72991: LD_VAR 0 4
72995: NOT
72996: IFFALSE 73000
// continue ;
72998: GO 72845
// for j in tmp do
73000: LD_ADDR_VAR 0 3
73004: PUSH
73005: LD_VAR 0 4
73009: PUSH
73010: FOR_IN
73011: IFFALSE 73162
// begin if not mc_builders [ i ] then
73013: LD_EXP 42
73017: PUSH
73018: LD_VAR 0 2
73022: ARRAY
73023: NOT
73024: IFFALSE 73082
// begin SetTag ( j , 103 ) ;
73026: LD_VAR 0 3
73030: PPUSH
73031: LD_INT 103
73033: PPUSH
73034: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73038: LD_ADDR_EXP 42
73042: PUSH
73043: LD_EXP 42
73047: PPUSH
73048: LD_VAR 0 2
73052: PUSH
73053: LD_EXP 42
73057: PUSH
73058: LD_VAR 0 2
73062: ARRAY
73063: PUSH
73064: LD_INT 1
73066: PLUS
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PPUSH
73072: LD_VAR 0 3
73076: PPUSH
73077: CALL 26583 0 3
73081: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73082: LD_VAR 0 3
73086: PPUSH
73087: CALL_OW 310
73091: IFFALSE 73102
// ComExitBuilding ( j ) ;
73093: LD_VAR 0 3
73097: PPUSH
73098: CALL_OW 122
// wait ( 3 ) ;
73102: LD_INT 3
73104: PPUSH
73105: CALL_OW 67
// if not mc_construct_list [ i ] then
73109: LD_EXP 43
73113: PUSH
73114: LD_VAR 0 2
73118: ARRAY
73119: NOT
73120: IFFALSE 73124
// break ;
73122: GO 73162
// if not HasTask ( j ) then
73124: LD_VAR 0 3
73128: PPUSH
73129: CALL_OW 314
73133: NOT
73134: IFFALSE 73160
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
73136: LD_VAR 0 3
73140: PPUSH
73141: LD_EXP 43
73145: PUSH
73146: LD_VAR 0 2
73150: ARRAY
73151: PUSH
73152: LD_INT 1
73154: ARRAY
73155: PPUSH
73156: CALL 29434 0 2
// end ;
73160: GO 73010
73162: POP
73163: POP
// end else
73164: GO 73969
// if mc_build_list [ i ] then
73166: LD_EXP 41
73170: PUSH
73171: LD_VAR 0 2
73175: ARRAY
73176: IFFALSE 73969
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73178: LD_ADDR_VAR 0 5
73182: PUSH
73183: LD_EXP 36
73187: PUSH
73188: LD_VAR 0 2
73192: ARRAY
73193: PPUSH
73194: LD_INT 2
73196: PUSH
73197: LD_INT 30
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 30
73209: PUSH
73210: LD_INT 1
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: LIST
73221: PPUSH
73222: CALL_OW 72
73226: ST_TO_ADDR
// if depot then
73227: LD_VAR 0 5
73231: IFFALSE 73249
// depot := depot [ 1 ] else
73233: LD_ADDR_VAR 0 5
73237: PUSH
73238: LD_VAR 0 5
73242: PUSH
73243: LD_INT 1
73245: ARRAY
73246: ST_TO_ADDR
73247: GO 73257
// depot := 0 ;
73249: LD_ADDR_VAR 0 5
73253: PUSH
73254: LD_INT 0
73256: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
73257: LD_EXP 41
73261: PUSH
73262: LD_VAR 0 2
73266: ARRAY
73267: PUSH
73268: LD_INT 1
73270: ARRAY
73271: PUSH
73272: LD_INT 1
73274: ARRAY
73275: PPUSH
73276: CALL 29264 0 1
73280: PUSH
73281: LD_EXP 36
73285: PUSH
73286: LD_VAR 0 2
73290: ARRAY
73291: PPUSH
73292: LD_INT 2
73294: PUSH
73295: LD_INT 30
73297: PUSH
73298: LD_INT 2
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 30
73307: PUSH
73308: LD_INT 3
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: LIST
73319: PPUSH
73320: CALL_OW 72
73324: NOT
73325: AND
73326: IFFALSE 73431
// begin for j = 1 to mc_build_list [ i ] do
73328: LD_ADDR_VAR 0 3
73332: PUSH
73333: DOUBLE
73334: LD_INT 1
73336: DEC
73337: ST_TO_ADDR
73338: LD_EXP 41
73342: PUSH
73343: LD_VAR 0 2
73347: ARRAY
73348: PUSH
73349: FOR_TO
73350: IFFALSE 73429
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73352: LD_EXP 41
73356: PUSH
73357: LD_VAR 0 2
73361: ARRAY
73362: PUSH
73363: LD_VAR 0 3
73367: ARRAY
73368: PUSH
73369: LD_INT 1
73371: ARRAY
73372: PUSH
73373: LD_INT 2
73375: EQUAL
73376: IFFALSE 73427
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73378: LD_ADDR_EXP 41
73382: PUSH
73383: LD_EXP 41
73387: PPUSH
73388: LD_VAR 0 2
73392: PPUSH
73393: LD_EXP 41
73397: PUSH
73398: LD_VAR 0 2
73402: ARRAY
73403: PPUSH
73404: LD_VAR 0 3
73408: PPUSH
73409: LD_INT 1
73411: PPUSH
73412: LD_INT 0
73414: PPUSH
73415: CALL 26001 0 4
73419: PPUSH
73420: CALL_OW 1
73424: ST_TO_ADDR
// break ;
73425: GO 73429
// end ;
73427: GO 73349
73429: POP
73430: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73431: LD_EXP 41
73435: PUSH
73436: LD_VAR 0 2
73440: ARRAY
73441: PUSH
73442: LD_INT 1
73444: ARRAY
73445: PUSH
73446: LD_INT 1
73448: ARRAY
73449: PUSH
73450: LD_INT 0
73452: EQUAL
73453: PUSH
73454: LD_VAR 0 5
73458: PUSH
73459: LD_VAR 0 5
73463: PPUSH
73464: LD_EXP 41
73468: PUSH
73469: LD_VAR 0 2
73473: ARRAY
73474: PUSH
73475: LD_INT 1
73477: ARRAY
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PPUSH
73483: LD_EXP 41
73487: PUSH
73488: LD_VAR 0 2
73492: ARRAY
73493: PUSH
73494: LD_INT 1
73496: ARRAY
73497: PUSH
73498: LD_INT 2
73500: ARRAY
73501: PPUSH
73502: LD_EXP 41
73506: PUSH
73507: LD_VAR 0 2
73511: ARRAY
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_INT 3
73519: ARRAY
73520: PPUSH
73521: LD_EXP 41
73525: PUSH
73526: LD_VAR 0 2
73530: ARRAY
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_INT 4
73538: ARRAY
73539: PPUSH
73540: CALL 33998 0 5
73544: AND
73545: OR
73546: IFFALSE 73827
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73548: LD_ADDR_VAR 0 4
73552: PUSH
73553: LD_EXP 36
73557: PUSH
73558: LD_VAR 0 2
73562: ARRAY
73563: PPUSH
73564: LD_INT 25
73566: PUSH
73567: LD_INT 2
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PPUSH
73574: CALL_OW 72
73578: PUSH
73579: LD_EXP 38
73583: PUSH
73584: LD_VAR 0 2
73588: ARRAY
73589: DIFF
73590: ST_TO_ADDR
// if not tmp then
73591: LD_VAR 0 4
73595: NOT
73596: IFFALSE 73600
// continue ;
73598: GO 72845
// for j in tmp do
73600: LD_ADDR_VAR 0 3
73604: PUSH
73605: LD_VAR 0 4
73609: PUSH
73610: FOR_IN
73611: IFFALSE 73823
// begin if not mc_builders [ i ] then
73613: LD_EXP 42
73617: PUSH
73618: LD_VAR 0 2
73622: ARRAY
73623: NOT
73624: IFFALSE 73682
// begin SetTag ( j , 103 ) ;
73626: LD_VAR 0 3
73630: PPUSH
73631: LD_INT 103
73633: PPUSH
73634: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73638: LD_ADDR_EXP 42
73642: PUSH
73643: LD_EXP 42
73647: PPUSH
73648: LD_VAR 0 2
73652: PUSH
73653: LD_EXP 42
73657: PUSH
73658: LD_VAR 0 2
73662: ARRAY
73663: PUSH
73664: LD_INT 1
73666: PLUS
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PPUSH
73672: LD_VAR 0 3
73676: PPUSH
73677: CALL 26583 0 3
73681: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73682: LD_VAR 0 3
73686: PPUSH
73687: CALL_OW 310
73691: IFFALSE 73702
// ComExitBuilding ( j ) ;
73693: LD_VAR 0 3
73697: PPUSH
73698: CALL_OW 122
// wait ( 3 ) ;
73702: LD_INT 3
73704: PPUSH
73705: CALL_OW 67
// if not mc_build_list [ i ] then
73709: LD_EXP 41
73713: PUSH
73714: LD_VAR 0 2
73718: ARRAY
73719: NOT
73720: IFFALSE 73724
// break ;
73722: GO 73823
// if not HasTask ( j ) then
73724: LD_VAR 0 3
73728: PPUSH
73729: CALL_OW 314
73733: NOT
73734: IFFALSE 73821
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73736: LD_VAR 0 3
73740: PPUSH
73741: LD_EXP 41
73745: PUSH
73746: LD_VAR 0 2
73750: ARRAY
73751: PUSH
73752: LD_INT 1
73754: ARRAY
73755: PUSH
73756: LD_INT 1
73758: ARRAY
73759: PPUSH
73760: LD_EXP 41
73764: PUSH
73765: LD_VAR 0 2
73769: ARRAY
73770: PUSH
73771: LD_INT 1
73773: ARRAY
73774: PUSH
73775: LD_INT 2
73777: ARRAY
73778: PPUSH
73779: LD_EXP 41
73783: PUSH
73784: LD_VAR 0 2
73788: ARRAY
73789: PUSH
73790: LD_INT 1
73792: ARRAY
73793: PUSH
73794: LD_INT 3
73796: ARRAY
73797: PPUSH
73798: LD_EXP 41
73802: PUSH
73803: LD_VAR 0 2
73807: ARRAY
73808: PUSH
73809: LD_INT 1
73811: ARRAY
73812: PUSH
73813: LD_INT 4
73815: ARRAY
73816: PPUSH
73817: CALL_OW 145
// end ;
73821: GO 73610
73823: POP
73824: POP
// end else
73825: GO 73969
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73827: LD_EXP 36
73831: PUSH
73832: LD_VAR 0 2
73836: ARRAY
73837: PPUSH
73838: LD_EXP 41
73842: PUSH
73843: LD_VAR 0 2
73847: ARRAY
73848: PUSH
73849: LD_INT 1
73851: ARRAY
73852: PUSH
73853: LD_INT 1
73855: ARRAY
73856: PPUSH
73857: LD_EXP 41
73861: PUSH
73862: LD_VAR 0 2
73866: ARRAY
73867: PUSH
73868: LD_INT 1
73870: ARRAY
73871: PUSH
73872: LD_INT 2
73874: ARRAY
73875: PPUSH
73876: LD_EXP 41
73880: PUSH
73881: LD_VAR 0 2
73885: ARRAY
73886: PUSH
73887: LD_INT 1
73889: ARRAY
73890: PUSH
73891: LD_INT 3
73893: ARRAY
73894: PPUSH
73895: LD_EXP 41
73899: PUSH
73900: LD_VAR 0 2
73904: ARRAY
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: PUSH
73910: LD_INT 4
73912: ARRAY
73913: PPUSH
73914: CALL 33334 0 5
73918: NOT
73919: IFFALSE 73969
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73921: LD_ADDR_EXP 41
73925: PUSH
73926: LD_EXP 41
73930: PPUSH
73931: LD_VAR 0 2
73935: PPUSH
73936: LD_EXP 41
73940: PUSH
73941: LD_VAR 0 2
73945: ARRAY
73946: PPUSH
73947: LD_INT 1
73949: PPUSH
73950: LD_INT 1
73952: NEG
73953: PPUSH
73954: LD_INT 0
73956: PPUSH
73957: CALL 26001 0 4
73961: PPUSH
73962: CALL_OW 1
73966: ST_TO_ADDR
// continue ;
73967: GO 72845
// end ; end ; end ;
73969: GO 72845
73971: POP
73972: POP
// end ;
73973: LD_VAR 0 1
73977: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73978: LD_INT 0
73980: PPUSH
73981: PPUSH
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
// if not mc_bases then
73986: LD_EXP 36
73990: NOT
73991: IFFALSE 73995
// exit ;
73993: GO 74422
// for i = 1 to mc_bases do
73995: LD_ADDR_VAR 0 2
73999: PUSH
74000: DOUBLE
74001: LD_INT 1
74003: DEC
74004: ST_TO_ADDR
74005: LD_EXP 36
74009: PUSH
74010: FOR_TO
74011: IFFALSE 74420
// begin tmp := mc_build_upgrade [ i ] ;
74013: LD_ADDR_VAR 0 4
74017: PUSH
74018: LD_EXP 68
74022: PUSH
74023: LD_VAR 0 2
74027: ARRAY
74028: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
74029: LD_ADDR_VAR 0 6
74033: PUSH
74034: LD_EXP 69
74038: PUSH
74039: LD_VAR 0 2
74043: ARRAY
74044: PPUSH
74045: LD_INT 2
74047: PUSH
74048: LD_INT 30
74050: PUSH
74051: LD_INT 6
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: LD_INT 30
74060: PUSH
74061: LD_INT 7
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: LIST
74072: PPUSH
74073: CALL_OW 72
74077: ST_TO_ADDR
// if not tmp and not lab then
74078: LD_VAR 0 4
74082: NOT
74083: PUSH
74084: LD_VAR 0 6
74088: NOT
74089: AND
74090: IFFALSE 74094
// continue ;
74092: GO 74010
// if tmp then
74094: LD_VAR 0 4
74098: IFFALSE 74218
// for j in tmp do
74100: LD_ADDR_VAR 0 3
74104: PUSH
74105: LD_VAR 0 4
74109: PUSH
74110: FOR_IN
74111: IFFALSE 74216
// begin if UpgradeCost ( j ) then
74113: LD_VAR 0 3
74117: PPUSH
74118: CALL 32994 0 1
74122: IFFALSE 74214
// begin ComUpgrade ( j ) ;
74124: LD_VAR 0 3
74128: PPUSH
74129: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
74133: LD_ADDR_EXP 68
74137: PUSH
74138: LD_EXP 68
74142: PPUSH
74143: LD_VAR 0 2
74147: PPUSH
74148: LD_EXP 68
74152: PUSH
74153: LD_VAR 0 2
74157: ARRAY
74158: PUSH
74159: LD_VAR 0 3
74163: DIFF
74164: PPUSH
74165: CALL_OW 1
74169: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74170: LD_ADDR_EXP 43
74174: PUSH
74175: LD_EXP 43
74179: PPUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_EXP 43
74189: PUSH
74190: LD_VAR 0 2
74194: ARRAY
74195: PUSH
74196: LD_INT 1
74198: PLUS
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PPUSH
74204: LD_VAR 0 3
74208: PPUSH
74209: CALL 26583 0 3
74213: ST_TO_ADDR
// end ; end ;
74214: GO 74110
74216: POP
74217: POP
// if not lab or not mc_lab_upgrade [ i ] then
74218: LD_VAR 0 6
74222: NOT
74223: PUSH
74224: LD_EXP 70
74228: PUSH
74229: LD_VAR 0 2
74233: ARRAY
74234: NOT
74235: OR
74236: IFFALSE 74240
// continue ;
74238: GO 74010
// for j in lab do
74240: LD_ADDR_VAR 0 3
74244: PUSH
74245: LD_VAR 0 6
74249: PUSH
74250: FOR_IN
74251: IFFALSE 74416
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
74253: LD_VAR 0 3
74257: PPUSH
74258: CALL_OW 266
74262: PUSH
74263: LD_INT 6
74265: PUSH
74266: LD_INT 7
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: IN
74273: PUSH
74274: LD_VAR 0 3
74278: PPUSH
74279: CALL_OW 461
74283: PUSH
74284: LD_INT 1
74286: NONEQUAL
74287: AND
74288: IFFALSE 74414
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
74290: LD_VAR 0 3
74294: PPUSH
74295: LD_EXP 70
74299: PUSH
74300: LD_VAR 0 2
74304: ARRAY
74305: PUSH
74306: LD_INT 1
74308: ARRAY
74309: PPUSH
74310: CALL 33199 0 2
74314: IFFALSE 74414
// begin ComCancel ( j ) ;
74316: LD_VAR 0 3
74320: PPUSH
74321: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74325: LD_VAR 0 3
74329: PPUSH
74330: LD_EXP 70
74334: PUSH
74335: LD_VAR 0 2
74339: ARRAY
74340: PUSH
74341: LD_INT 1
74343: ARRAY
74344: PPUSH
74345: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74349: LD_VAR 0 3
74353: PUSH
74354: LD_EXP 43
74358: PUSH
74359: LD_VAR 0 2
74363: ARRAY
74364: IN
74365: NOT
74366: IFFALSE 74412
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74368: LD_ADDR_EXP 43
74372: PUSH
74373: LD_EXP 43
74377: PPUSH
74378: LD_VAR 0 2
74382: PUSH
74383: LD_EXP 43
74387: PUSH
74388: LD_VAR 0 2
74392: ARRAY
74393: PUSH
74394: LD_INT 1
74396: PLUS
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PPUSH
74402: LD_VAR 0 3
74406: PPUSH
74407: CALL 26583 0 3
74411: ST_TO_ADDR
// break ;
74412: GO 74416
// end ; end ; end ;
74414: GO 74250
74416: POP
74417: POP
// end ;
74418: GO 74010
74420: POP
74421: POP
// end ;
74422: LD_VAR 0 1
74426: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74427: LD_INT 0
74429: PPUSH
74430: PPUSH
74431: PPUSH
74432: PPUSH
74433: PPUSH
74434: PPUSH
74435: PPUSH
74436: PPUSH
74437: PPUSH
// if not mc_bases then
74438: LD_EXP 36
74442: NOT
74443: IFFALSE 74447
// exit ;
74445: GO 74852
// for i = 1 to mc_bases do
74447: LD_ADDR_VAR 0 2
74451: PUSH
74452: DOUBLE
74453: LD_INT 1
74455: DEC
74456: ST_TO_ADDR
74457: LD_EXP 36
74461: PUSH
74462: FOR_TO
74463: IFFALSE 74850
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74465: LD_EXP 44
74469: PUSH
74470: LD_VAR 0 2
74474: ARRAY
74475: NOT
74476: PUSH
74477: LD_EXP 36
74481: PUSH
74482: LD_VAR 0 2
74486: ARRAY
74487: PPUSH
74488: LD_INT 30
74490: PUSH
74491: LD_INT 3
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PPUSH
74498: CALL_OW 72
74502: NOT
74503: OR
74504: IFFALSE 74508
// continue ;
74506: GO 74462
// busy := false ;
74508: LD_ADDR_VAR 0 8
74512: PUSH
74513: LD_INT 0
74515: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74516: LD_ADDR_VAR 0 4
74520: PUSH
74521: LD_EXP 36
74525: PUSH
74526: LD_VAR 0 2
74530: ARRAY
74531: PPUSH
74532: LD_INT 30
74534: PUSH
74535: LD_INT 3
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PPUSH
74542: CALL_OW 72
74546: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74547: LD_ADDR_VAR 0 6
74551: PUSH
74552: LD_EXP 44
74556: PUSH
74557: LD_VAR 0 2
74561: ARRAY
74562: PPUSH
74563: LD_INT 2
74565: PUSH
74566: LD_INT 30
74568: PUSH
74569: LD_INT 32
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 30
74578: PUSH
74579: LD_INT 33
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: PPUSH
74591: CALL_OW 72
74595: ST_TO_ADDR
// if not t then
74596: LD_VAR 0 6
74600: NOT
74601: IFFALSE 74605
// continue ;
74603: GO 74462
// for j in tmp do
74605: LD_ADDR_VAR 0 3
74609: PUSH
74610: LD_VAR 0 4
74614: PUSH
74615: FOR_IN
74616: IFFALSE 74646
// if not BuildingStatus ( j ) = bs_idle then
74618: LD_VAR 0 3
74622: PPUSH
74623: CALL_OW 461
74627: PUSH
74628: LD_INT 2
74630: EQUAL
74631: NOT
74632: IFFALSE 74644
// begin busy := true ;
74634: LD_ADDR_VAR 0 8
74638: PUSH
74639: LD_INT 1
74641: ST_TO_ADDR
// break ;
74642: GO 74646
// end ;
74644: GO 74615
74646: POP
74647: POP
// if busy then
74648: LD_VAR 0 8
74652: IFFALSE 74656
// continue ;
74654: GO 74462
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74656: LD_ADDR_VAR 0 7
74660: PUSH
74661: LD_VAR 0 6
74665: PPUSH
74666: LD_INT 35
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PPUSH
74676: CALL_OW 72
74680: ST_TO_ADDR
// if tw then
74681: LD_VAR 0 7
74685: IFFALSE 74762
// begin tw := tw [ 1 ] ;
74687: LD_ADDR_VAR 0 7
74691: PUSH
74692: LD_VAR 0 7
74696: PUSH
74697: LD_INT 1
74699: ARRAY
74700: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74701: LD_ADDR_VAR 0 9
74705: PUSH
74706: LD_VAR 0 7
74710: PPUSH
74711: LD_EXP 61
74715: PUSH
74716: LD_VAR 0 2
74720: ARRAY
74721: PPUSH
74722: CALL 31553 0 2
74726: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74727: LD_EXP 75
74731: PUSH
74732: LD_VAR 0 2
74736: ARRAY
74737: IFFALSE 74760
// if not weapon in mc_allowed_tower_weapons [ i ] then
74739: LD_VAR 0 9
74743: PUSH
74744: LD_EXP 75
74748: PUSH
74749: LD_VAR 0 2
74753: ARRAY
74754: IN
74755: NOT
74756: IFFALSE 74760
// continue ;
74758: GO 74462
// end else
74760: GO 74825
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74762: LD_ADDR_VAR 0 5
74766: PUSH
74767: LD_EXP 44
74771: PUSH
74772: LD_VAR 0 2
74776: ARRAY
74777: PPUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: CALL 61764 0 2
74787: ST_TO_ADDR
// if not tmp2 then
74788: LD_VAR 0 5
74792: NOT
74793: IFFALSE 74797
// continue ;
74795: GO 74462
// tw := tmp2 [ 1 ] ;
74797: LD_ADDR_VAR 0 7
74801: PUSH
74802: LD_VAR 0 5
74806: PUSH
74807: LD_INT 1
74809: ARRAY
74810: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74811: LD_ADDR_VAR 0 9
74815: PUSH
74816: LD_VAR 0 5
74820: PUSH
74821: LD_INT 2
74823: ARRAY
74824: ST_TO_ADDR
// end ; if not weapon then
74825: LD_VAR 0 9
74829: NOT
74830: IFFALSE 74834
// continue ;
74832: GO 74462
// ComPlaceWeapon ( tw , weapon ) ;
74834: LD_VAR 0 7
74838: PPUSH
74839: LD_VAR 0 9
74843: PPUSH
74844: CALL_OW 148
// end ;
74848: GO 74462
74850: POP
74851: POP
// end ;
74852: LD_VAR 0 1
74856: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74857: LD_INT 0
74859: PPUSH
74860: PPUSH
74861: PPUSH
74862: PPUSH
74863: PPUSH
74864: PPUSH
// if not mc_bases then
74865: LD_EXP 36
74869: NOT
74870: IFFALSE 74874
// exit ;
74872: GO 75650
// for i = 1 to mc_bases do
74874: LD_ADDR_VAR 0 2
74878: PUSH
74879: DOUBLE
74880: LD_INT 1
74882: DEC
74883: ST_TO_ADDR
74884: LD_EXP 36
74888: PUSH
74889: FOR_TO
74890: IFFALSE 75648
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
74892: LD_EXP 49
74896: PUSH
74897: LD_VAR 0 2
74901: ARRAY
74902: NOT
74903: PUSH
74904: LD_EXP 49
74908: PUSH
74909: LD_VAR 0 2
74913: ARRAY
74914: PUSH
74915: LD_EXP 50
74919: PUSH
74920: LD_VAR 0 2
74924: ARRAY
74925: EQUAL
74926: OR
74927: PUSH
74928: LD_EXP 59
74932: PUSH
74933: LD_VAR 0 2
74937: ARRAY
74938: OR
74939: IFFALSE 74943
// continue ;
74941: GO 74889
// if mc_miners [ i ] then
74943: LD_EXP 50
74947: PUSH
74948: LD_VAR 0 2
74952: ARRAY
74953: IFFALSE 75335
// begin for j = mc_miners [ i ] downto 1 do
74955: LD_ADDR_VAR 0 3
74959: PUSH
74960: DOUBLE
74961: LD_EXP 50
74965: PUSH
74966: LD_VAR 0 2
74970: ARRAY
74971: INC
74972: ST_TO_ADDR
74973: LD_INT 1
74975: PUSH
74976: FOR_DOWNTO
74977: IFFALSE 75333
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74979: LD_EXP 50
74983: PUSH
74984: LD_VAR 0 2
74988: ARRAY
74989: PUSH
74990: LD_VAR 0 3
74994: ARRAY
74995: PPUSH
74996: CALL_OW 301
75000: PUSH
75001: LD_EXP 50
75005: PUSH
75006: LD_VAR 0 2
75010: ARRAY
75011: PUSH
75012: LD_VAR 0 3
75016: ARRAY
75017: PPUSH
75018: CALL_OW 257
75022: PUSH
75023: LD_INT 1
75025: NONEQUAL
75026: OR
75027: IFFALSE 75090
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
75029: LD_ADDR_VAR 0 5
75033: PUSH
75034: LD_EXP 50
75038: PUSH
75039: LD_VAR 0 2
75043: ARRAY
75044: PUSH
75045: LD_EXP 50
75049: PUSH
75050: LD_VAR 0 2
75054: ARRAY
75055: PUSH
75056: LD_VAR 0 3
75060: ARRAY
75061: DIFF
75062: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
75063: LD_ADDR_EXP 50
75067: PUSH
75068: LD_EXP 50
75072: PPUSH
75073: LD_VAR 0 2
75077: PPUSH
75078: LD_VAR 0 5
75082: PPUSH
75083: CALL_OW 1
75087: ST_TO_ADDR
// continue ;
75088: GO 74976
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
75090: LD_EXP 50
75094: PUSH
75095: LD_VAR 0 2
75099: ARRAY
75100: PUSH
75101: LD_VAR 0 3
75105: ARRAY
75106: PPUSH
75107: CALL_OW 257
75111: PUSH
75112: LD_INT 1
75114: EQUAL
75115: PUSH
75116: LD_EXP 50
75120: PUSH
75121: LD_VAR 0 2
75125: ARRAY
75126: PUSH
75127: LD_VAR 0 3
75131: ARRAY
75132: PPUSH
75133: CALL_OW 459
75137: NOT
75138: AND
75139: PUSH
75140: LD_EXP 50
75144: PUSH
75145: LD_VAR 0 2
75149: ARRAY
75150: PUSH
75151: LD_VAR 0 3
75155: ARRAY
75156: PPUSH
75157: CALL_OW 314
75161: NOT
75162: AND
75163: IFFALSE 75331
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75165: LD_EXP 50
75169: PUSH
75170: LD_VAR 0 2
75174: ARRAY
75175: PUSH
75176: LD_VAR 0 3
75180: ARRAY
75181: PPUSH
75182: CALL_OW 310
75186: IFFALSE 75209
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75188: LD_EXP 50
75192: PUSH
75193: LD_VAR 0 2
75197: ARRAY
75198: PUSH
75199: LD_VAR 0 3
75203: ARRAY
75204: PPUSH
75205: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75209: LD_EXP 50
75213: PUSH
75214: LD_VAR 0 2
75218: ARRAY
75219: PUSH
75220: LD_VAR 0 3
75224: ARRAY
75225: PPUSH
75226: CALL_OW 314
75230: NOT
75231: IFFALSE 75331
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
75233: LD_EXP 50
75237: PUSH
75238: LD_VAR 0 2
75242: ARRAY
75243: PUSH
75244: LD_VAR 0 3
75248: ARRAY
75249: PPUSH
75250: LD_EXP 49
75254: PUSH
75255: LD_VAR 0 2
75259: ARRAY
75260: PUSH
75261: LD_VAR 0 3
75265: PUSH
75266: LD_EXP 49
75270: PUSH
75271: LD_VAR 0 2
75275: ARRAY
75276: MOD
75277: PUSH
75278: LD_INT 1
75280: PLUS
75281: ARRAY
75282: PUSH
75283: LD_INT 1
75285: ARRAY
75286: PPUSH
75287: LD_EXP 49
75291: PUSH
75292: LD_VAR 0 2
75296: ARRAY
75297: PUSH
75298: LD_VAR 0 3
75302: PUSH
75303: LD_EXP 49
75307: PUSH
75308: LD_VAR 0 2
75312: ARRAY
75313: MOD
75314: PUSH
75315: LD_INT 1
75317: PLUS
75318: ARRAY
75319: PUSH
75320: LD_INT 2
75322: ARRAY
75323: PPUSH
75324: LD_INT 0
75326: PPUSH
75327: CALL_OW 193
// end ; end ;
75331: GO 74976
75333: POP
75334: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75335: LD_ADDR_VAR 0 5
75339: PUSH
75340: LD_EXP 36
75344: PUSH
75345: LD_VAR 0 2
75349: ARRAY
75350: PPUSH
75351: LD_INT 2
75353: PUSH
75354: LD_INT 30
75356: PUSH
75357: LD_INT 4
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 30
75366: PUSH
75367: LD_INT 5
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 30
75376: PUSH
75377: LD_INT 32
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: PPUSH
75390: CALL_OW 72
75394: ST_TO_ADDR
// if not tmp then
75395: LD_VAR 0 5
75399: NOT
75400: IFFALSE 75404
// continue ;
75402: GO 74889
// list := [ ] ;
75404: LD_ADDR_VAR 0 6
75408: PUSH
75409: EMPTY
75410: ST_TO_ADDR
// for j in tmp do
75411: LD_ADDR_VAR 0 3
75415: PUSH
75416: LD_VAR 0 5
75420: PUSH
75421: FOR_IN
75422: IFFALSE 75491
// begin for k in UnitsInside ( j ) do
75424: LD_ADDR_VAR 0 4
75428: PUSH
75429: LD_VAR 0 3
75433: PPUSH
75434: CALL_OW 313
75438: PUSH
75439: FOR_IN
75440: IFFALSE 75487
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75442: LD_VAR 0 4
75446: PPUSH
75447: CALL_OW 257
75451: PUSH
75452: LD_INT 1
75454: EQUAL
75455: PUSH
75456: LD_VAR 0 4
75460: PPUSH
75461: CALL_OW 459
75465: NOT
75466: AND
75467: IFFALSE 75485
// list := list ^ k ;
75469: LD_ADDR_VAR 0 6
75473: PUSH
75474: LD_VAR 0 6
75478: PUSH
75479: LD_VAR 0 4
75483: ADD
75484: ST_TO_ADDR
75485: GO 75439
75487: POP
75488: POP
// end ;
75489: GO 75421
75491: POP
75492: POP
// list := list diff mc_miners [ i ] ;
75493: LD_ADDR_VAR 0 6
75497: PUSH
75498: LD_VAR 0 6
75502: PUSH
75503: LD_EXP 50
75507: PUSH
75508: LD_VAR 0 2
75512: ARRAY
75513: DIFF
75514: ST_TO_ADDR
// if not list then
75515: LD_VAR 0 6
75519: NOT
75520: IFFALSE 75524
// continue ;
75522: GO 74889
// k := mc_mines [ i ] - mc_miners [ i ] ;
75524: LD_ADDR_VAR 0 4
75528: PUSH
75529: LD_EXP 49
75533: PUSH
75534: LD_VAR 0 2
75538: ARRAY
75539: PUSH
75540: LD_EXP 50
75544: PUSH
75545: LD_VAR 0 2
75549: ARRAY
75550: MINUS
75551: ST_TO_ADDR
// if k > list then
75552: LD_VAR 0 4
75556: PUSH
75557: LD_VAR 0 6
75561: GREATER
75562: IFFALSE 75574
// k := list ;
75564: LD_ADDR_VAR 0 4
75568: PUSH
75569: LD_VAR 0 6
75573: ST_TO_ADDR
// for j = 1 to k do
75574: LD_ADDR_VAR 0 3
75578: PUSH
75579: DOUBLE
75580: LD_INT 1
75582: DEC
75583: ST_TO_ADDR
75584: LD_VAR 0 4
75588: PUSH
75589: FOR_TO
75590: IFFALSE 75644
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75592: LD_ADDR_EXP 50
75596: PUSH
75597: LD_EXP 50
75601: PPUSH
75602: LD_VAR 0 2
75606: PUSH
75607: LD_EXP 50
75611: PUSH
75612: LD_VAR 0 2
75616: ARRAY
75617: PUSH
75618: LD_INT 1
75620: PLUS
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PPUSH
75626: LD_VAR 0 6
75630: PUSH
75631: LD_VAR 0 3
75635: ARRAY
75636: PPUSH
75637: CALL 26583 0 3
75641: ST_TO_ADDR
75642: GO 75589
75644: POP
75645: POP
// end ;
75646: GO 74889
75648: POP
75649: POP
// end ;
75650: LD_VAR 0 1
75654: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75655: LD_INT 0
75657: PPUSH
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
75665: PPUSH
75666: PPUSH
// if not mc_bases then
75667: LD_EXP 36
75671: NOT
75672: IFFALSE 75676
// exit ;
75674: GO 77426
// for i = 1 to mc_bases do
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: DOUBLE
75682: LD_INT 1
75684: DEC
75685: ST_TO_ADDR
75686: LD_EXP 36
75690: PUSH
75691: FOR_TO
75692: IFFALSE 77424
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75694: LD_EXP 36
75698: PUSH
75699: LD_VAR 0 2
75703: ARRAY
75704: NOT
75705: PUSH
75706: LD_EXP 43
75710: PUSH
75711: LD_VAR 0 2
75715: ARRAY
75716: OR
75717: IFFALSE 75721
// continue ;
75719: GO 75691
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75721: LD_EXP 52
75725: PUSH
75726: LD_VAR 0 2
75730: ARRAY
75731: NOT
75732: PUSH
75733: LD_EXP 53
75737: PUSH
75738: LD_VAR 0 2
75742: ARRAY
75743: AND
75744: IFFALSE 75782
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75746: LD_ADDR_EXP 53
75750: PUSH
75751: LD_EXP 53
75755: PPUSH
75756: LD_VAR 0 2
75760: PPUSH
75761: EMPTY
75762: PPUSH
75763: CALL_OW 1
75767: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75768: LD_VAR 0 2
75772: PPUSH
75773: LD_INT 107
75775: PPUSH
75776: CALL 66640 0 2
// continue ;
75780: GO 75691
// end ; target := [ ] ;
75782: LD_ADDR_VAR 0 6
75786: PUSH
75787: EMPTY
75788: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75789: LD_ADDR_VAR 0 3
75793: PUSH
75794: DOUBLE
75795: LD_EXP 52
75799: PUSH
75800: LD_VAR 0 2
75804: ARRAY
75805: INC
75806: ST_TO_ADDR
75807: LD_INT 1
75809: PUSH
75810: FOR_DOWNTO
75811: IFFALSE 76071
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75813: LD_EXP 52
75817: PUSH
75818: LD_VAR 0 2
75822: ARRAY
75823: PUSH
75824: LD_VAR 0 3
75828: ARRAY
75829: PUSH
75830: LD_INT 2
75832: ARRAY
75833: PPUSH
75834: LD_EXP 52
75838: PUSH
75839: LD_VAR 0 2
75843: ARRAY
75844: PUSH
75845: LD_VAR 0 3
75849: ARRAY
75850: PUSH
75851: LD_INT 3
75853: ARRAY
75854: PPUSH
75855: CALL_OW 488
75859: PUSH
75860: LD_EXP 52
75864: PUSH
75865: LD_VAR 0 2
75869: ARRAY
75870: PUSH
75871: LD_VAR 0 3
75875: ARRAY
75876: PUSH
75877: LD_INT 2
75879: ARRAY
75880: PPUSH
75881: LD_EXP 52
75885: PUSH
75886: LD_VAR 0 2
75890: ARRAY
75891: PUSH
75892: LD_VAR 0 3
75896: ARRAY
75897: PUSH
75898: LD_INT 3
75900: ARRAY
75901: PPUSH
75902: CALL_OW 284
75906: PUSH
75907: LD_INT 0
75909: EQUAL
75910: AND
75911: IFFALSE 75966
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75913: LD_ADDR_VAR 0 5
75917: PUSH
75918: LD_EXP 52
75922: PUSH
75923: LD_VAR 0 2
75927: ARRAY
75928: PPUSH
75929: LD_VAR 0 3
75933: PPUSH
75934: CALL_OW 3
75938: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75939: LD_ADDR_EXP 52
75943: PUSH
75944: LD_EXP 52
75948: PPUSH
75949: LD_VAR 0 2
75953: PPUSH
75954: LD_VAR 0 5
75958: PPUSH
75959: CALL_OW 1
75963: ST_TO_ADDR
// continue ;
75964: GO 75810
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75966: LD_EXP 36
75970: PUSH
75971: LD_VAR 0 2
75975: ARRAY
75976: PUSH
75977: LD_INT 1
75979: ARRAY
75980: PPUSH
75981: CALL_OW 255
75985: PPUSH
75986: LD_EXP 52
75990: PUSH
75991: LD_VAR 0 2
75995: ARRAY
75996: PUSH
75997: LD_VAR 0 3
76001: ARRAY
76002: PUSH
76003: LD_INT 2
76005: ARRAY
76006: PPUSH
76007: LD_EXP 52
76011: PUSH
76012: LD_VAR 0 2
76016: ARRAY
76017: PUSH
76018: LD_VAR 0 3
76022: ARRAY
76023: PUSH
76024: LD_INT 3
76026: ARRAY
76027: PPUSH
76028: LD_INT 30
76030: PPUSH
76031: CALL 27479 0 4
76035: PUSH
76036: LD_INT 4
76038: ARRAY
76039: PUSH
76040: LD_INT 0
76042: EQUAL
76043: IFFALSE 76069
// begin target := mc_crates [ i ] [ j ] ;
76045: LD_ADDR_VAR 0 6
76049: PUSH
76050: LD_EXP 52
76054: PUSH
76055: LD_VAR 0 2
76059: ARRAY
76060: PUSH
76061: LD_VAR 0 3
76065: ARRAY
76066: ST_TO_ADDR
// break ;
76067: GO 76071
// end ; end ;
76069: GO 75810
76071: POP
76072: POP
// if not target then
76073: LD_VAR 0 6
76077: NOT
76078: IFFALSE 76082
// continue ;
76080: GO 75691
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76082: LD_ADDR_VAR 0 7
76086: PUSH
76087: LD_EXP 55
76091: PUSH
76092: LD_VAR 0 2
76096: ARRAY
76097: PPUSH
76098: LD_INT 2
76100: PUSH
76101: LD_INT 3
76103: PUSH
76104: LD_INT 58
76106: PUSH
76107: EMPTY
76108: LIST
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 61
76116: PUSH
76117: EMPTY
76118: LIST
76119: PUSH
76120: LD_INT 33
76122: PUSH
76123: LD_INT 5
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 33
76132: PUSH
76133: LD_INT 3
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 2
76149: PUSH
76150: LD_INT 34
76152: PUSH
76153: LD_INT 32
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: PUSH
76160: LD_INT 34
76162: PUSH
76163: LD_INT 51
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 34
76172: PUSH
76173: LD_INT 12
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PPUSH
76190: CALL_OW 72
76194: ST_TO_ADDR
// if not cargo then
76195: LD_VAR 0 7
76199: NOT
76200: IFFALSE 76843
// begin if mc_crates_collector [ i ] < 5 then
76202: LD_EXP 53
76206: PUSH
76207: LD_VAR 0 2
76211: ARRAY
76212: PUSH
76213: LD_INT 5
76215: LESS
76216: IFFALSE 76582
// begin if mc_ape [ i ] then
76218: LD_EXP 65
76222: PUSH
76223: LD_VAR 0 2
76227: ARRAY
76228: IFFALSE 76275
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76230: LD_ADDR_VAR 0 5
76234: PUSH
76235: LD_EXP 65
76239: PUSH
76240: LD_VAR 0 2
76244: ARRAY
76245: PPUSH
76246: LD_INT 25
76248: PUSH
76249: LD_INT 16
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 24
76258: PUSH
76259: LD_INT 750
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PPUSH
76270: CALL_OW 72
76274: ST_TO_ADDR
// if not tmp then
76275: LD_VAR 0 5
76279: NOT
76280: IFFALSE 76327
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76282: LD_ADDR_VAR 0 5
76286: PUSH
76287: LD_EXP 36
76291: PUSH
76292: LD_VAR 0 2
76296: ARRAY
76297: PPUSH
76298: LD_INT 25
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: LD_INT 24
76310: PUSH
76311: LD_INT 750
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PPUSH
76322: CALL_OW 72
76326: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76327: LD_EXP 65
76331: PUSH
76332: LD_VAR 0 2
76336: ARRAY
76337: PUSH
76338: LD_EXP 36
76342: PUSH
76343: LD_VAR 0 2
76347: ARRAY
76348: PPUSH
76349: LD_INT 25
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 24
76361: PUSH
76362: LD_INT 750
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PPUSH
76373: CALL_OW 72
76377: AND
76378: PUSH
76379: LD_VAR 0 5
76383: PUSH
76384: LD_INT 5
76386: LESS
76387: AND
76388: IFFALSE 76470
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76390: LD_ADDR_VAR 0 3
76394: PUSH
76395: LD_EXP 36
76399: PUSH
76400: LD_VAR 0 2
76404: ARRAY
76405: PPUSH
76406: LD_INT 25
76408: PUSH
76409: LD_INT 2
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 24
76418: PUSH
76419: LD_INT 750
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PPUSH
76430: CALL_OW 72
76434: PUSH
76435: FOR_IN
76436: IFFALSE 76468
// begin tmp := tmp union j ;
76438: LD_ADDR_VAR 0 5
76442: PUSH
76443: LD_VAR 0 5
76447: PUSH
76448: LD_VAR 0 3
76452: UNION
76453: ST_TO_ADDR
// if tmp >= 5 then
76454: LD_VAR 0 5
76458: PUSH
76459: LD_INT 5
76461: GREATEREQUAL
76462: IFFALSE 76466
// break ;
76464: GO 76468
// end ;
76466: GO 76435
76468: POP
76469: POP
// end ; if not tmp then
76470: LD_VAR 0 5
76474: NOT
76475: IFFALSE 76479
// continue ;
76477: GO 75691
// for j in tmp do
76479: LD_ADDR_VAR 0 3
76483: PUSH
76484: LD_VAR 0 5
76488: PUSH
76489: FOR_IN
76490: IFFALSE 76580
// if not GetTag ( j ) then
76492: LD_VAR 0 3
76496: PPUSH
76497: CALL_OW 110
76501: NOT
76502: IFFALSE 76578
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76504: LD_ADDR_EXP 53
76508: PUSH
76509: LD_EXP 53
76513: PPUSH
76514: LD_VAR 0 2
76518: PUSH
76519: LD_EXP 53
76523: PUSH
76524: LD_VAR 0 2
76528: ARRAY
76529: PUSH
76530: LD_INT 1
76532: PLUS
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PPUSH
76538: LD_VAR 0 3
76542: PPUSH
76543: CALL 26583 0 3
76547: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76548: LD_VAR 0 3
76552: PPUSH
76553: LD_INT 107
76555: PPUSH
76556: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76560: LD_EXP 53
76564: PUSH
76565: LD_VAR 0 2
76569: ARRAY
76570: PUSH
76571: LD_INT 5
76573: GREATEREQUAL
76574: IFFALSE 76578
// break ;
76576: GO 76580
// end ;
76578: GO 76489
76580: POP
76581: POP
// end ; if mc_crates_collector [ i ] and target then
76582: LD_EXP 53
76586: PUSH
76587: LD_VAR 0 2
76591: ARRAY
76592: PUSH
76593: LD_VAR 0 6
76597: AND
76598: IFFALSE 76841
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76600: LD_EXP 53
76604: PUSH
76605: LD_VAR 0 2
76609: ARRAY
76610: PUSH
76611: LD_VAR 0 6
76615: PUSH
76616: LD_INT 1
76618: ARRAY
76619: LESS
76620: IFFALSE 76640
// tmp := mc_crates_collector [ i ] else
76622: LD_ADDR_VAR 0 5
76626: PUSH
76627: LD_EXP 53
76631: PUSH
76632: LD_VAR 0 2
76636: ARRAY
76637: ST_TO_ADDR
76638: GO 76654
// tmp := target [ 1 ] ;
76640: LD_ADDR_VAR 0 5
76644: PUSH
76645: LD_VAR 0 6
76649: PUSH
76650: LD_INT 1
76652: ARRAY
76653: ST_TO_ADDR
// k := 0 ;
76654: LD_ADDR_VAR 0 4
76658: PUSH
76659: LD_INT 0
76661: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76662: LD_ADDR_VAR 0 3
76666: PUSH
76667: LD_EXP 53
76671: PUSH
76672: LD_VAR 0 2
76676: ARRAY
76677: PUSH
76678: FOR_IN
76679: IFFALSE 76839
// begin k := k + 1 ;
76681: LD_ADDR_VAR 0 4
76685: PUSH
76686: LD_VAR 0 4
76690: PUSH
76691: LD_INT 1
76693: PLUS
76694: ST_TO_ADDR
// if k > tmp then
76695: LD_VAR 0 4
76699: PUSH
76700: LD_VAR 0 5
76704: GREATER
76705: IFFALSE 76709
// break ;
76707: GO 76839
// if not GetClass ( j ) in [ 2 , 16 ] then
76709: LD_VAR 0 3
76713: PPUSH
76714: CALL_OW 257
76718: PUSH
76719: LD_INT 2
76721: PUSH
76722: LD_INT 16
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: IN
76729: NOT
76730: IFFALSE 76783
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76732: LD_ADDR_EXP 53
76736: PUSH
76737: LD_EXP 53
76741: PPUSH
76742: LD_VAR 0 2
76746: PPUSH
76747: LD_EXP 53
76751: PUSH
76752: LD_VAR 0 2
76756: ARRAY
76757: PUSH
76758: LD_VAR 0 3
76762: DIFF
76763: PPUSH
76764: CALL_OW 1
76768: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76769: LD_VAR 0 3
76773: PPUSH
76774: LD_INT 0
76776: PPUSH
76777: CALL_OW 109
// continue ;
76781: GO 76678
// end ; if IsInUnit ( j ) then
76783: LD_VAR 0 3
76787: PPUSH
76788: CALL_OW 310
76792: IFFALSE 76803
// ComExitBuilding ( j ) ;
76794: LD_VAR 0 3
76798: PPUSH
76799: CALL_OW 122
// wait ( 3 ) ;
76803: LD_INT 3
76805: PPUSH
76806: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76810: LD_VAR 0 3
76814: PPUSH
76815: LD_VAR 0 6
76819: PUSH
76820: LD_INT 2
76822: ARRAY
76823: PPUSH
76824: LD_VAR 0 6
76828: PUSH
76829: LD_INT 3
76831: ARRAY
76832: PPUSH
76833: CALL_OW 117
// end ;
76837: GO 76678
76839: POP
76840: POP
// end ; end else
76841: GO 77422
// begin for j in cargo do
76843: LD_ADDR_VAR 0 3
76847: PUSH
76848: LD_VAR 0 7
76852: PUSH
76853: FOR_IN
76854: IFFALSE 77420
// begin if GetTag ( j ) <> 0 then
76856: LD_VAR 0 3
76860: PPUSH
76861: CALL_OW 110
76865: PUSH
76866: LD_INT 0
76868: NONEQUAL
76869: IFFALSE 76873
// continue ;
76871: GO 76853
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76873: LD_VAR 0 3
76877: PPUSH
76878: CALL_OW 256
76882: PUSH
76883: LD_INT 1000
76885: LESS
76886: PUSH
76887: LD_VAR 0 3
76891: PPUSH
76892: LD_EXP 60
76896: PUSH
76897: LD_VAR 0 2
76901: ARRAY
76902: PPUSH
76903: CALL_OW 308
76907: NOT
76908: AND
76909: IFFALSE 76931
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76911: LD_VAR 0 3
76915: PPUSH
76916: LD_EXP 60
76920: PUSH
76921: LD_VAR 0 2
76925: ARRAY
76926: PPUSH
76927: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76931: LD_VAR 0 3
76935: PPUSH
76936: CALL_OW 256
76940: PUSH
76941: LD_INT 1000
76943: LESS
76944: PUSH
76945: LD_VAR 0 3
76949: PPUSH
76950: LD_EXP 60
76954: PUSH
76955: LD_VAR 0 2
76959: ARRAY
76960: PPUSH
76961: CALL_OW 308
76965: AND
76966: IFFALSE 76970
// continue ;
76968: GO 76853
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76970: LD_VAR 0 3
76974: PPUSH
76975: CALL_OW 262
76979: PUSH
76980: LD_INT 2
76982: EQUAL
76983: PUSH
76984: LD_VAR 0 3
76988: PPUSH
76989: CALL_OW 261
76993: PUSH
76994: LD_INT 15
76996: LESS
76997: AND
76998: IFFALSE 77002
// continue ;
77000: GO 76853
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
77002: LD_VAR 0 3
77006: PPUSH
77007: CALL_OW 262
77011: PUSH
77012: LD_INT 1
77014: EQUAL
77015: PUSH
77016: LD_VAR 0 3
77020: PPUSH
77021: CALL_OW 261
77025: PUSH
77026: LD_INT 10
77028: LESS
77029: AND
77030: IFFALSE 77359
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77032: LD_ADDR_VAR 0 8
77036: PUSH
77037: LD_EXP 36
77041: PUSH
77042: LD_VAR 0 2
77046: ARRAY
77047: PPUSH
77048: LD_INT 2
77050: PUSH
77051: LD_INT 30
77053: PUSH
77054: LD_INT 0
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: PUSH
77061: LD_INT 30
77063: PUSH
77064: LD_INT 1
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: PPUSH
77076: CALL_OW 72
77080: ST_TO_ADDR
// if not depot then
77081: LD_VAR 0 8
77085: NOT
77086: IFFALSE 77090
// continue ;
77088: GO 76853
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77090: LD_VAR 0 3
77094: PPUSH
77095: LD_VAR 0 8
77099: PPUSH
77100: LD_VAR 0 3
77104: PPUSH
77105: CALL_OW 74
77109: PPUSH
77110: CALL_OW 296
77114: PUSH
77115: LD_INT 6
77117: LESS
77118: IFFALSE 77134
// SetFuel ( j , 100 ) else
77120: LD_VAR 0 3
77124: PPUSH
77125: LD_INT 100
77127: PPUSH
77128: CALL_OW 240
77132: GO 77359
// if GetFuel ( j ) = 0 then
77134: LD_VAR 0 3
77138: PPUSH
77139: CALL_OW 261
77143: PUSH
77144: LD_INT 0
77146: EQUAL
77147: IFFALSE 77359
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77149: LD_ADDR_EXP 55
77153: PUSH
77154: LD_EXP 55
77158: PPUSH
77159: LD_VAR 0 2
77163: PPUSH
77164: LD_EXP 55
77168: PUSH
77169: LD_VAR 0 2
77173: ARRAY
77174: PUSH
77175: LD_VAR 0 3
77179: DIFF
77180: PPUSH
77181: CALL_OW 1
77185: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77186: LD_VAR 0 3
77190: PPUSH
77191: CALL_OW 263
77195: PUSH
77196: LD_INT 1
77198: EQUAL
77199: IFFALSE 77215
// ComExitVehicle ( IsInUnit ( j ) ) ;
77201: LD_VAR 0 3
77205: PPUSH
77206: CALL_OW 310
77210: PPUSH
77211: CALL_OW 121
// if GetControl ( j ) = control_remote then
77215: LD_VAR 0 3
77219: PPUSH
77220: CALL_OW 263
77224: PUSH
77225: LD_INT 2
77227: EQUAL
77228: IFFALSE 77239
// ComUnlink ( j ) ;
77230: LD_VAR 0 3
77234: PPUSH
77235: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77239: LD_ADDR_VAR 0 9
77243: PUSH
77244: LD_VAR 0 2
77248: PPUSH
77249: LD_INT 3
77251: PPUSH
77252: CALL 86712 0 2
77256: ST_TO_ADDR
// if fac then
77257: LD_VAR 0 9
77261: IFFALSE 77357
// begin for k in fac do
77263: LD_ADDR_VAR 0 4
77267: PUSH
77268: LD_VAR 0 9
77272: PUSH
77273: FOR_IN
77274: IFFALSE 77355
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77276: LD_ADDR_VAR 0 10
77280: PUSH
77281: LD_VAR 0 9
77285: PPUSH
77286: LD_VAR 0 3
77290: PPUSH
77291: CALL_OW 265
77295: PPUSH
77296: LD_VAR 0 3
77300: PPUSH
77301: CALL_OW 262
77305: PPUSH
77306: LD_VAR 0 3
77310: PPUSH
77311: CALL_OW 263
77315: PPUSH
77316: LD_VAR 0 3
77320: PPUSH
77321: CALL_OW 264
77325: PPUSH
77326: CALL 24115 0 5
77330: ST_TO_ADDR
// if components then
77331: LD_VAR 0 10
77335: IFFALSE 77353
// begin MC_InsertProduceList ( i , components ) ;
77337: LD_VAR 0 2
77341: PPUSH
77342: LD_VAR 0 10
77346: PPUSH
77347: CALL 86257 0 2
// break ;
77351: GO 77355
// end ; end ;
77353: GO 77273
77355: POP
77356: POP
// end ; continue ;
77357: GO 76853
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77359: LD_VAR 0 3
77363: PPUSH
77364: LD_INT 1
77366: PPUSH
77367: CALL_OW 289
77371: PUSH
77372: LD_INT 100
77374: LESS
77375: PUSH
77376: LD_VAR 0 3
77380: PPUSH
77381: CALL_OW 314
77385: NOT
77386: AND
77387: IFFALSE 77416
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77389: LD_VAR 0 3
77393: PPUSH
77394: LD_VAR 0 6
77398: PUSH
77399: LD_INT 2
77401: ARRAY
77402: PPUSH
77403: LD_VAR 0 6
77407: PUSH
77408: LD_INT 3
77410: ARRAY
77411: PPUSH
77412: CALL_OW 117
// break ;
77416: GO 77420
// end ;
77418: GO 76853
77420: POP
77421: POP
// end ; end ;
77422: GO 75691
77424: POP
77425: POP
// end ;
77426: LD_VAR 0 1
77430: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77431: LD_INT 0
77433: PPUSH
77434: PPUSH
77435: PPUSH
77436: PPUSH
// if not mc_bases then
77437: LD_EXP 36
77441: NOT
77442: IFFALSE 77446
// exit ;
77444: GO 77607
// for i = 1 to mc_bases do
77446: LD_ADDR_VAR 0 2
77450: PUSH
77451: DOUBLE
77452: LD_INT 1
77454: DEC
77455: ST_TO_ADDR
77456: LD_EXP 36
77460: PUSH
77461: FOR_TO
77462: IFFALSE 77605
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77464: LD_ADDR_VAR 0 4
77468: PUSH
77469: LD_EXP 55
77473: PUSH
77474: LD_VAR 0 2
77478: ARRAY
77479: PUSH
77480: LD_EXP 58
77484: PUSH
77485: LD_VAR 0 2
77489: ARRAY
77490: UNION
77491: PPUSH
77492: LD_INT 33
77494: PUSH
77495: LD_INT 2
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PPUSH
77502: CALL_OW 72
77506: ST_TO_ADDR
// if tmp then
77507: LD_VAR 0 4
77511: IFFALSE 77603
// for j in tmp do
77513: LD_ADDR_VAR 0 3
77517: PUSH
77518: LD_VAR 0 4
77522: PUSH
77523: FOR_IN
77524: IFFALSE 77601
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77526: LD_VAR 0 3
77530: PPUSH
77531: CALL_OW 312
77535: NOT
77536: PUSH
77537: LD_VAR 0 3
77541: PPUSH
77542: CALL_OW 256
77546: PUSH
77547: LD_INT 250
77549: GREATEREQUAL
77550: AND
77551: IFFALSE 77564
// Connect ( j ) else
77553: LD_VAR 0 3
77557: PPUSH
77558: CALL 29516 0 1
77562: GO 77599
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77564: LD_VAR 0 3
77568: PPUSH
77569: CALL_OW 256
77573: PUSH
77574: LD_INT 250
77576: LESS
77577: PUSH
77578: LD_VAR 0 3
77582: PPUSH
77583: CALL_OW 312
77587: AND
77588: IFFALSE 77599
// ComUnlink ( j ) ;
77590: LD_VAR 0 3
77594: PPUSH
77595: CALL_OW 136
77599: GO 77523
77601: POP
77602: POP
// end ;
77603: GO 77461
77605: POP
77606: POP
// end ;
77607: LD_VAR 0 1
77611: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77612: LD_INT 0
77614: PPUSH
77615: PPUSH
77616: PPUSH
77617: PPUSH
77618: PPUSH
// if not mc_bases then
77619: LD_EXP 36
77623: NOT
77624: IFFALSE 77628
// exit ;
77626: GO 78073
// for i = 1 to mc_bases do
77628: LD_ADDR_VAR 0 2
77632: PUSH
77633: DOUBLE
77634: LD_INT 1
77636: DEC
77637: ST_TO_ADDR
77638: LD_EXP 36
77642: PUSH
77643: FOR_TO
77644: IFFALSE 78071
// begin if not mc_produce [ i ] then
77646: LD_EXP 57
77650: PUSH
77651: LD_VAR 0 2
77655: ARRAY
77656: NOT
77657: IFFALSE 77661
// continue ;
77659: GO 77643
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_EXP 36
77670: PUSH
77671: LD_VAR 0 2
77675: ARRAY
77676: PPUSH
77677: LD_INT 30
77679: PUSH
77680: LD_INT 3
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PPUSH
77687: CALL_OW 72
77691: ST_TO_ADDR
// if not fac then
77692: LD_VAR 0 5
77696: NOT
77697: IFFALSE 77701
// continue ;
77699: GO 77643
// for j in fac do
77701: LD_ADDR_VAR 0 3
77705: PUSH
77706: LD_VAR 0 5
77710: PUSH
77711: FOR_IN
77712: IFFALSE 78067
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77714: LD_VAR 0 3
77718: PPUSH
77719: CALL_OW 461
77723: PUSH
77724: LD_INT 2
77726: NONEQUAL
77727: PUSH
77728: LD_VAR 0 3
77732: PPUSH
77733: LD_INT 15
77735: PPUSH
77736: CALL 29176 0 2
77740: PUSH
77741: LD_INT 4
77743: ARRAY
77744: OR
77745: IFFALSE 77749
// continue ;
77747: GO 77711
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77749: LD_VAR 0 3
77753: PPUSH
77754: LD_EXP 57
77758: PUSH
77759: LD_VAR 0 2
77763: ARRAY
77764: PUSH
77765: LD_INT 1
77767: ARRAY
77768: PUSH
77769: LD_INT 1
77771: ARRAY
77772: PPUSH
77773: LD_EXP 57
77777: PUSH
77778: LD_VAR 0 2
77782: ARRAY
77783: PUSH
77784: LD_INT 1
77786: ARRAY
77787: PUSH
77788: LD_INT 2
77790: ARRAY
77791: PPUSH
77792: LD_EXP 57
77796: PUSH
77797: LD_VAR 0 2
77801: ARRAY
77802: PUSH
77803: LD_INT 1
77805: ARRAY
77806: PUSH
77807: LD_INT 3
77809: ARRAY
77810: PPUSH
77811: LD_EXP 57
77815: PUSH
77816: LD_VAR 0 2
77820: ARRAY
77821: PUSH
77822: LD_INT 1
77824: ARRAY
77825: PUSH
77826: LD_INT 4
77828: ARRAY
77829: PPUSH
77830: CALL_OW 448
77834: PUSH
77835: LD_VAR 0 3
77839: PPUSH
77840: LD_EXP 57
77844: PUSH
77845: LD_VAR 0 2
77849: ARRAY
77850: PUSH
77851: LD_INT 1
77853: ARRAY
77854: PUSH
77855: LD_INT 1
77857: ARRAY
77858: PUSH
77859: LD_EXP 57
77863: PUSH
77864: LD_VAR 0 2
77868: ARRAY
77869: PUSH
77870: LD_INT 1
77872: ARRAY
77873: PUSH
77874: LD_INT 2
77876: ARRAY
77877: PUSH
77878: LD_EXP 57
77882: PUSH
77883: LD_VAR 0 2
77887: ARRAY
77888: PUSH
77889: LD_INT 1
77891: ARRAY
77892: PUSH
77893: LD_INT 3
77895: ARRAY
77896: PUSH
77897: LD_EXP 57
77901: PUSH
77902: LD_VAR 0 2
77906: ARRAY
77907: PUSH
77908: LD_INT 1
77910: ARRAY
77911: PUSH
77912: LD_INT 4
77914: ARRAY
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: LIST
77920: LIST
77921: PPUSH
77922: CALL 32847 0 2
77926: AND
77927: IFFALSE 78065
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77929: LD_VAR 0 3
77933: PPUSH
77934: LD_EXP 57
77938: PUSH
77939: LD_VAR 0 2
77943: ARRAY
77944: PUSH
77945: LD_INT 1
77947: ARRAY
77948: PUSH
77949: LD_INT 1
77951: ARRAY
77952: PPUSH
77953: LD_EXP 57
77957: PUSH
77958: LD_VAR 0 2
77962: ARRAY
77963: PUSH
77964: LD_INT 1
77966: ARRAY
77967: PUSH
77968: LD_INT 2
77970: ARRAY
77971: PPUSH
77972: LD_EXP 57
77976: PUSH
77977: LD_VAR 0 2
77981: ARRAY
77982: PUSH
77983: LD_INT 1
77985: ARRAY
77986: PUSH
77987: LD_INT 3
77989: ARRAY
77990: PPUSH
77991: LD_EXP 57
77995: PUSH
77996: LD_VAR 0 2
78000: ARRAY
78001: PUSH
78002: LD_INT 1
78004: ARRAY
78005: PUSH
78006: LD_INT 4
78008: ARRAY
78009: PPUSH
78010: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
78014: LD_ADDR_VAR 0 4
78018: PUSH
78019: LD_EXP 57
78023: PUSH
78024: LD_VAR 0 2
78028: ARRAY
78029: PPUSH
78030: LD_INT 1
78032: PPUSH
78033: CALL_OW 3
78037: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
78038: LD_ADDR_EXP 57
78042: PUSH
78043: LD_EXP 57
78047: PPUSH
78048: LD_VAR 0 2
78052: PPUSH
78053: LD_VAR 0 4
78057: PPUSH
78058: CALL_OW 1
78062: ST_TO_ADDR
// break ;
78063: GO 78067
// end ; end ;
78065: GO 77711
78067: POP
78068: POP
// end ;
78069: GO 77643
78071: POP
78072: POP
// end ;
78073: LD_VAR 0 1
78077: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78078: LD_INT 0
78080: PPUSH
78081: PPUSH
78082: PPUSH
// if not mc_bases then
78083: LD_EXP 36
78087: NOT
78088: IFFALSE 78092
// exit ;
78090: GO 78181
// for i = 1 to mc_bases do
78092: LD_ADDR_VAR 0 2
78096: PUSH
78097: DOUBLE
78098: LD_INT 1
78100: DEC
78101: ST_TO_ADDR
78102: LD_EXP 36
78106: PUSH
78107: FOR_TO
78108: IFFALSE 78179
// begin if mc_attack [ i ] then
78110: LD_EXP 56
78114: PUSH
78115: LD_VAR 0 2
78119: ARRAY
78120: IFFALSE 78177
// begin tmp := mc_attack [ i ] [ 1 ] ;
78122: LD_ADDR_VAR 0 3
78126: PUSH
78127: LD_EXP 56
78131: PUSH
78132: LD_VAR 0 2
78136: ARRAY
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78142: LD_ADDR_EXP 56
78146: PUSH
78147: LD_EXP 56
78151: PPUSH
78152: LD_VAR 0 2
78156: PPUSH
78157: EMPTY
78158: PPUSH
78159: CALL_OW 1
78163: ST_TO_ADDR
// Attack ( tmp ) ;
78164: LD_VAR 0 3
78168: PPUSH
78169: CALL 55037 0 1
// exit ;
78173: POP
78174: POP
78175: GO 78181
// end ; end ;
78177: GO 78107
78179: POP
78180: POP
// end ;
78181: LD_VAR 0 1
78185: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78186: LD_INT 0
78188: PPUSH
78189: PPUSH
78190: PPUSH
78191: PPUSH
78192: PPUSH
78193: PPUSH
78194: PPUSH
// if not mc_bases then
78195: LD_EXP 36
78199: NOT
78200: IFFALSE 78204
// exit ;
78202: GO 78786
// for i = 1 to mc_bases do
78204: LD_ADDR_VAR 0 2
78208: PUSH
78209: DOUBLE
78210: LD_INT 1
78212: DEC
78213: ST_TO_ADDR
78214: LD_EXP 36
78218: PUSH
78219: FOR_TO
78220: IFFALSE 78784
// begin if not mc_bases [ i ] then
78222: LD_EXP 36
78226: PUSH
78227: LD_VAR 0 2
78231: ARRAY
78232: NOT
78233: IFFALSE 78237
// continue ;
78235: GO 78219
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78237: LD_ADDR_VAR 0 7
78241: PUSH
78242: LD_EXP 36
78246: PUSH
78247: LD_VAR 0 2
78251: ARRAY
78252: PUSH
78253: LD_INT 1
78255: ARRAY
78256: PPUSH
78257: CALL 23419 0 1
78261: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78262: LD_ADDR_EXP 59
78266: PUSH
78267: LD_EXP 59
78271: PPUSH
78272: LD_VAR 0 2
78276: PPUSH
78277: LD_EXP 36
78281: PUSH
78282: LD_VAR 0 2
78286: ARRAY
78287: PUSH
78288: LD_INT 1
78290: ARRAY
78291: PPUSH
78292: CALL_OW 255
78296: PPUSH
78297: LD_EXP 61
78301: PUSH
78302: LD_VAR 0 2
78306: ARRAY
78307: PPUSH
78308: CALL 20973 0 2
78312: PPUSH
78313: CALL_OW 1
78317: ST_TO_ADDR
// if not mc_scan [ i ] then
78318: LD_EXP 59
78322: PUSH
78323: LD_VAR 0 2
78327: ARRAY
78328: NOT
78329: IFFALSE 78484
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78331: LD_ADDR_VAR 0 4
78335: PUSH
78336: LD_EXP 36
78340: PUSH
78341: LD_VAR 0 2
78345: ARRAY
78346: PPUSH
78347: LD_INT 2
78349: PUSH
78350: LD_INT 25
78352: PUSH
78353: LD_INT 5
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: PUSH
78360: LD_INT 25
78362: PUSH
78363: LD_INT 8
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: PUSH
78370: LD_INT 25
78372: PUSH
78373: LD_INT 9
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: PPUSH
78386: CALL_OW 72
78390: ST_TO_ADDR
// if not tmp then
78391: LD_VAR 0 4
78395: NOT
78396: IFFALSE 78400
// continue ;
78398: GO 78219
// for j in tmp do
78400: LD_ADDR_VAR 0 3
78404: PUSH
78405: LD_VAR 0 4
78409: PUSH
78410: FOR_IN
78411: IFFALSE 78482
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78413: LD_VAR 0 3
78417: PPUSH
78418: CALL_OW 310
78422: PPUSH
78423: CALL_OW 266
78427: PUSH
78428: LD_INT 5
78430: EQUAL
78431: PUSH
78432: LD_VAR 0 3
78436: PPUSH
78437: CALL_OW 257
78441: PUSH
78442: LD_INT 1
78444: EQUAL
78445: AND
78446: PUSH
78447: LD_VAR 0 3
78451: PPUSH
78452: CALL_OW 459
78456: NOT
78457: AND
78458: PUSH
78459: LD_VAR 0 7
78463: AND
78464: IFFALSE 78480
// ComChangeProfession ( j , class ) ;
78466: LD_VAR 0 3
78470: PPUSH
78471: LD_VAR 0 7
78475: PPUSH
78476: CALL_OW 123
78480: GO 78410
78482: POP
78483: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78484: LD_EXP 59
78488: PUSH
78489: LD_VAR 0 2
78493: ARRAY
78494: PUSH
78495: LD_EXP 58
78499: PUSH
78500: LD_VAR 0 2
78504: ARRAY
78505: NOT
78506: AND
78507: PUSH
78508: LD_EXP 36
78512: PUSH
78513: LD_VAR 0 2
78517: ARRAY
78518: PPUSH
78519: LD_INT 30
78521: PUSH
78522: LD_INT 32
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PPUSH
78529: CALL_OW 72
78533: NOT
78534: AND
78535: PUSH
78536: LD_EXP 36
78540: PUSH
78541: LD_VAR 0 2
78545: ARRAY
78546: PPUSH
78547: LD_INT 2
78549: PUSH
78550: LD_INT 30
78552: PUSH
78553: LD_INT 4
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: LD_INT 30
78562: PUSH
78563: LD_INT 5
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: EMPTY
78571: LIST
78572: LIST
78573: LIST
78574: PPUSH
78575: CALL_OW 72
78579: NOT
78580: AND
78581: IFFALSE 78713
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78583: LD_ADDR_VAR 0 4
78587: PUSH
78588: LD_EXP 36
78592: PUSH
78593: LD_VAR 0 2
78597: ARRAY
78598: PPUSH
78599: LD_INT 2
78601: PUSH
78602: LD_INT 25
78604: PUSH
78605: LD_INT 1
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 25
78614: PUSH
78615: LD_INT 5
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: LD_INT 25
78624: PUSH
78625: LD_INT 8
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 25
78634: PUSH
78635: LD_INT 9
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: PPUSH
78649: CALL_OW 72
78653: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78654: LD_ADDR_VAR 0 4
78658: PUSH
78659: LD_VAR 0 4
78663: PUSH
78664: LD_VAR 0 4
78668: PPUSH
78669: LD_INT 18
78671: PPUSH
78672: CALL 59853 0 2
78676: DIFF
78677: ST_TO_ADDR
// if tmp then
78678: LD_VAR 0 4
78682: IFFALSE 78713
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78684: LD_VAR 0 2
78688: PPUSH
78689: LD_VAR 0 4
78693: PPUSH
78694: LD_EXP 61
78698: PUSH
78699: LD_VAR 0 2
78703: ARRAY
78704: PPUSH
78705: CALL 21008 0 3
// exit ;
78709: POP
78710: POP
78711: GO 78786
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78713: LD_EXP 59
78717: PUSH
78718: LD_VAR 0 2
78722: ARRAY
78723: PUSH
78724: LD_EXP 58
78728: PUSH
78729: LD_VAR 0 2
78733: ARRAY
78734: AND
78735: IFFALSE 78782
// begin tmp := mc_defender [ i ] ;
78737: LD_ADDR_VAR 0 4
78741: PUSH
78742: LD_EXP 58
78746: PUSH
78747: LD_VAR 0 2
78751: ARRAY
78752: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78753: LD_VAR 0 2
78757: PPUSH
78758: LD_VAR 0 4
78762: PPUSH
78763: LD_EXP 59
78767: PUSH
78768: LD_VAR 0 2
78772: ARRAY
78773: PPUSH
78774: CALL 21569 0 3
// exit ;
78778: POP
78779: POP
78780: GO 78786
// end ; end ;
78782: GO 78219
78784: POP
78785: POP
// end ;
78786: LD_VAR 0 1
78790: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78791: LD_INT 0
78793: PPUSH
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
78798: PPUSH
78799: PPUSH
78800: PPUSH
78801: PPUSH
78802: PPUSH
78803: PPUSH
// if not mc_bases then
78804: LD_EXP 36
78808: NOT
78809: IFFALSE 78813
// exit ;
78811: GO 79900
// for i = 1 to mc_bases do
78813: LD_ADDR_VAR 0 2
78817: PUSH
78818: DOUBLE
78819: LD_INT 1
78821: DEC
78822: ST_TO_ADDR
78823: LD_EXP 36
78827: PUSH
78828: FOR_TO
78829: IFFALSE 79898
// begin tmp := mc_lab [ i ] ;
78831: LD_ADDR_VAR 0 6
78835: PUSH
78836: LD_EXP 69
78840: PUSH
78841: LD_VAR 0 2
78845: ARRAY
78846: ST_TO_ADDR
// if not tmp then
78847: LD_VAR 0 6
78851: NOT
78852: IFFALSE 78856
// continue ;
78854: GO 78828
// idle_lab := 0 ;
78856: LD_ADDR_VAR 0 11
78860: PUSH
78861: LD_INT 0
78863: ST_TO_ADDR
// for j in tmp do
78864: LD_ADDR_VAR 0 3
78868: PUSH
78869: LD_VAR 0 6
78873: PUSH
78874: FOR_IN
78875: IFFALSE 79894
// begin researching := false ;
78877: LD_ADDR_VAR 0 10
78881: PUSH
78882: LD_INT 0
78884: ST_TO_ADDR
// side := GetSide ( j ) ;
78885: LD_ADDR_VAR 0 4
78889: PUSH
78890: LD_VAR 0 3
78894: PPUSH
78895: CALL_OW 255
78899: ST_TO_ADDR
// if not mc_tech [ side ] then
78900: LD_EXP 63
78904: PUSH
78905: LD_VAR 0 4
78909: ARRAY
78910: NOT
78911: IFFALSE 78915
// continue ;
78913: GO 78874
// if BuildingStatus ( j ) = bs_idle then
78915: LD_VAR 0 3
78919: PPUSH
78920: CALL_OW 461
78924: PUSH
78925: LD_INT 2
78927: EQUAL
78928: IFFALSE 79116
// begin if idle_lab and UnitsInside ( j ) < 6 then
78930: LD_VAR 0 11
78934: PUSH
78935: LD_VAR 0 3
78939: PPUSH
78940: CALL_OW 313
78944: PUSH
78945: LD_INT 6
78947: LESS
78948: AND
78949: IFFALSE 79020
// begin tmp2 := UnitsInside ( idle_lab ) ;
78951: LD_ADDR_VAR 0 9
78955: PUSH
78956: LD_VAR 0 11
78960: PPUSH
78961: CALL_OW 313
78965: ST_TO_ADDR
// if tmp2 then
78966: LD_VAR 0 9
78970: IFFALSE 79012
// for x in tmp2 do
78972: LD_ADDR_VAR 0 7
78976: PUSH
78977: LD_VAR 0 9
78981: PUSH
78982: FOR_IN
78983: IFFALSE 79010
// begin ComExitBuilding ( x ) ;
78985: LD_VAR 0 7
78989: PPUSH
78990: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78994: LD_VAR 0 7
78998: PPUSH
78999: LD_VAR 0 3
79003: PPUSH
79004: CALL_OW 180
// end ;
79008: GO 78982
79010: POP
79011: POP
// idle_lab := 0 ;
79012: LD_ADDR_VAR 0 11
79016: PUSH
79017: LD_INT 0
79019: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
79020: LD_ADDR_VAR 0 5
79024: PUSH
79025: LD_EXP 63
79029: PUSH
79030: LD_VAR 0 4
79034: ARRAY
79035: PUSH
79036: FOR_IN
79037: IFFALSE 79097
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
79039: LD_VAR 0 3
79043: PPUSH
79044: LD_VAR 0 5
79048: PPUSH
79049: CALL_OW 430
79053: PUSH
79054: LD_VAR 0 4
79058: PPUSH
79059: LD_VAR 0 5
79063: PPUSH
79064: CALL 20078 0 2
79068: AND
79069: IFFALSE 79095
// begin researching := true ;
79071: LD_ADDR_VAR 0 10
79075: PUSH
79076: LD_INT 1
79078: ST_TO_ADDR
// ComResearch ( j , t ) ;
79079: LD_VAR 0 3
79083: PPUSH
79084: LD_VAR 0 5
79088: PPUSH
79089: CALL_OW 124
// break ;
79093: GO 79097
// end ;
79095: GO 79036
79097: POP
79098: POP
// if not researching then
79099: LD_VAR 0 10
79103: NOT
79104: IFFALSE 79116
// idle_lab := j ;
79106: LD_ADDR_VAR 0 11
79110: PUSH
79111: LD_VAR 0 3
79115: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79116: LD_VAR 0 3
79120: PPUSH
79121: CALL_OW 461
79125: PUSH
79126: LD_INT 10
79128: EQUAL
79129: IFFALSE 79717
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79131: LD_EXP 65
79135: PUSH
79136: LD_VAR 0 2
79140: ARRAY
79141: NOT
79142: PUSH
79143: LD_EXP 66
79147: PUSH
79148: LD_VAR 0 2
79152: ARRAY
79153: NOT
79154: AND
79155: PUSH
79156: LD_EXP 63
79160: PUSH
79161: LD_VAR 0 4
79165: ARRAY
79166: PUSH
79167: LD_INT 1
79169: GREATER
79170: AND
79171: IFFALSE 79302
// begin ComCancel ( j ) ;
79173: LD_VAR 0 3
79177: PPUSH
79178: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79182: LD_ADDR_EXP 63
79186: PUSH
79187: LD_EXP 63
79191: PPUSH
79192: LD_VAR 0 4
79196: PPUSH
79197: LD_EXP 63
79201: PUSH
79202: LD_VAR 0 4
79206: ARRAY
79207: PPUSH
79208: LD_EXP 63
79212: PUSH
79213: LD_VAR 0 4
79217: ARRAY
79218: PUSH
79219: LD_INT 1
79221: MINUS
79222: PPUSH
79223: LD_EXP 63
79227: PUSH
79228: LD_VAR 0 4
79232: ARRAY
79233: PPUSH
79234: LD_INT 0
79236: PPUSH
79237: CALL 26001 0 4
79241: PPUSH
79242: CALL_OW 1
79246: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79247: LD_ADDR_EXP 63
79251: PUSH
79252: LD_EXP 63
79256: PPUSH
79257: LD_VAR 0 4
79261: PPUSH
79262: LD_EXP 63
79266: PUSH
79267: LD_VAR 0 4
79271: ARRAY
79272: PPUSH
79273: LD_EXP 63
79277: PUSH
79278: LD_VAR 0 4
79282: ARRAY
79283: PPUSH
79284: LD_INT 1
79286: PPUSH
79287: LD_INT 0
79289: PPUSH
79290: CALL 26001 0 4
79294: PPUSH
79295: CALL_OW 1
79299: ST_TO_ADDR
// continue ;
79300: GO 78874
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79302: LD_EXP 65
79306: PUSH
79307: LD_VAR 0 2
79311: ARRAY
79312: PUSH
79313: LD_EXP 66
79317: PUSH
79318: LD_VAR 0 2
79322: ARRAY
79323: NOT
79324: AND
79325: IFFALSE 79452
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79327: LD_ADDR_EXP 66
79331: PUSH
79332: LD_EXP 66
79336: PPUSH
79337: LD_VAR 0 2
79341: PUSH
79342: LD_EXP 66
79346: PUSH
79347: LD_VAR 0 2
79351: ARRAY
79352: PUSH
79353: LD_INT 1
79355: PLUS
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PPUSH
79361: LD_EXP 65
79365: PUSH
79366: LD_VAR 0 2
79370: ARRAY
79371: PUSH
79372: LD_INT 1
79374: ARRAY
79375: PPUSH
79376: CALL 26583 0 3
79380: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79381: LD_EXP 65
79385: PUSH
79386: LD_VAR 0 2
79390: ARRAY
79391: PUSH
79392: LD_INT 1
79394: ARRAY
79395: PPUSH
79396: LD_INT 112
79398: PPUSH
79399: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79403: LD_ADDR_VAR 0 9
79407: PUSH
79408: LD_EXP 65
79412: PUSH
79413: LD_VAR 0 2
79417: ARRAY
79418: PPUSH
79419: LD_INT 1
79421: PPUSH
79422: CALL_OW 3
79426: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79427: LD_ADDR_EXP 65
79431: PUSH
79432: LD_EXP 65
79436: PPUSH
79437: LD_VAR 0 2
79441: PPUSH
79442: LD_VAR 0 9
79446: PPUSH
79447: CALL_OW 1
79451: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79452: LD_EXP 65
79456: PUSH
79457: LD_VAR 0 2
79461: ARRAY
79462: PUSH
79463: LD_EXP 66
79467: PUSH
79468: LD_VAR 0 2
79472: ARRAY
79473: AND
79474: PUSH
79475: LD_EXP 66
79479: PUSH
79480: LD_VAR 0 2
79484: ARRAY
79485: PUSH
79486: LD_INT 1
79488: ARRAY
79489: PPUSH
79490: CALL_OW 310
79494: NOT
79495: AND
79496: PUSH
79497: LD_VAR 0 3
79501: PPUSH
79502: CALL_OW 313
79506: PUSH
79507: LD_INT 6
79509: EQUAL
79510: AND
79511: IFFALSE 79567
// begin tmp2 := UnitsInside ( j ) ;
79513: LD_ADDR_VAR 0 9
79517: PUSH
79518: LD_VAR 0 3
79522: PPUSH
79523: CALL_OW 313
79527: ST_TO_ADDR
// if tmp2 = 6 then
79528: LD_VAR 0 9
79532: PUSH
79533: LD_INT 6
79535: EQUAL
79536: IFFALSE 79567
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79538: LD_VAR 0 9
79542: PUSH
79543: LD_INT 1
79545: ARRAY
79546: PPUSH
79547: LD_INT 112
79549: PPUSH
79550: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79554: LD_VAR 0 9
79558: PUSH
79559: LD_INT 1
79561: ARRAY
79562: PPUSH
79563: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79567: LD_EXP 66
79571: PUSH
79572: LD_VAR 0 2
79576: ARRAY
79577: PUSH
79578: LD_EXP 66
79582: PUSH
79583: LD_VAR 0 2
79587: ARRAY
79588: PUSH
79589: LD_INT 1
79591: ARRAY
79592: PPUSH
79593: CALL_OW 314
79597: NOT
79598: AND
79599: PUSH
79600: LD_EXP 66
79604: PUSH
79605: LD_VAR 0 2
79609: ARRAY
79610: PUSH
79611: LD_INT 1
79613: ARRAY
79614: PPUSH
79615: CALL_OW 310
79619: NOT
79620: AND
79621: IFFALSE 79647
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79623: LD_EXP 66
79627: PUSH
79628: LD_VAR 0 2
79632: ARRAY
79633: PUSH
79634: LD_INT 1
79636: ARRAY
79637: PPUSH
79638: LD_VAR 0 3
79642: PPUSH
79643: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79647: LD_EXP 66
79651: PUSH
79652: LD_VAR 0 2
79656: ARRAY
79657: PUSH
79658: LD_INT 1
79660: ARRAY
79661: PPUSH
79662: CALL_OW 310
79666: PUSH
79667: LD_EXP 66
79671: PUSH
79672: LD_VAR 0 2
79676: ARRAY
79677: PUSH
79678: LD_INT 1
79680: ARRAY
79681: PPUSH
79682: CALL_OW 310
79686: PPUSH
79687: CALL_OW 461
79691: PUSH
79692: LD_INT 3
79694: NONEQUAL
79695: AND
79696: IFFALSE 79717
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79698: LD_EXP 66
79702: PUSH
79703: LD_VAR 0 2
79707: ARRAY
79708: PUSH
79709: LD_INT 1
79711: ARRAY
79712: PPUSH
79713: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79717: LD_VAR 0 3
79721: PPUSH
79722: CALL_OW 461
79726: PUSH
79727: LD_INT 6
79729: EQUAL
79730: PUSH
79731: LD_VAR 0 6
79735: PUSH
79736: LD_INT 1
79738: GREATER
79739: AND
79740: IFFALSE 79892
// begin sci := [ ] ;
79742: LD_ADDR_VAR 0 8
79746: PUSH
79747: EMPTY
79748: ST_TO_ADDR
// for x in ( tmp diff j ) do
79749: LD_ADDR_VAR 0 7
79753: PUSH
79754: LD_VAR 0 6
79758: PUSH
79759: LD_VAR 0 3
79763: DIFF
79764: PUSH
79765: FOR_IN
79766: IFFALSE 79818
// begin if sci = 6 then
79768: LD_VAR 0 8
79772: PUSH
79773: LD_INT 6
79775: EQUAL
79776: IFFALSE 79780
// break ;
79778: GO 79818
// if BuildingStatus ( x ) = bs_idle then
79780: LD_VAR 0 7
79784: PPUSH
79785: CALL_OW 461
79789: PUSH
79790: LD_INT 2
79792: EQUAL
79793: IFFALSE 79816
// sci := sci ^ UnitsInside ( x ) ;
79795: LD_ADDR_VAR 0 8
79799: PUSH
79800: LD_VAR 0 8
79804: PUSH
79805: LD_VAR 0 7
79809: PPUSH
79810: CALL_OW 313
79814: ADD
79815: ST_TO_ADDR
// end ;
79816: GO 79765
79818: POP
79819: POP
// if not sci then
79820: LD_VAR 0 8
79824: NOT
79825: IFFALSE 79829
// continue ;
79827: GO 78874
// for x in sci do
79829: LD_ADDR_VAR 0 7
79833: PUSH
79834: LD_VAR 0 8
79838: PUSH
79839: FOR_IN
79840: IFFALSE 79890
// if IsInUnit ( x ) and not HasTask ( x ) then
79842: LD_VAR 0 7
79846: PPUSH
79847: CALL_OW 310
79851: PUSH
79852: LD_VAR 0 7
79856: PPUSH
79857: CALL_OW 314
79861: NOT
79862: AND
79863: IFFALSE 79888
// begin ComExitBuilding ( x ) ;
79865: LD_VAR 0 7
79869: PPUSH
79870: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79874: LD_VAR 0 7
79878: PPUSH
79879: LD_VAR 0 3
79883: PPUSH
79884: CALL_OW 180
// end ;
79888: GO 79839
79890: POP
79891: POP
// end ; end ;
79892: GO 78874
79894: POP
79895: POP
// end ;
79896: GO 78828
79898: POP
79899: POP
// end ;
79900: LD_VAR 0 1
79904: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79905: LD_INT 0
79907: PPUSH
79908: PPUSH
// if not mc_bases then
79909: LD_EXP 36
79913: NOT
79914: IFFALSE 79918
// exit ;
79916: GO 79999
// for i = 1 to mc_bases do
79918: LD_ADDR_VAR 0 2
79922: PUSH
79923: DOUBLE
79924: LD_INT 1
79926: DEC
79927: ST_TO_ADDR
79928: LD_EXP 36
79932: PUSH
79933: FOR_TO
79934: IFFALSE 79997
// if mc_mines [ i ] and mc_miners [ i ] then
79936: LD_EXP 49
79940: PUSH
79941: LD_VAR 0 2
79945: ARRAY
79946: PUSH
79947: LD_EXP 50
79951: PUSH
79952: LD_VAR 0 2
79956: ARRAY
79957: AND
79958: IFFALSE 79995
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79960: LD_EXP 50
79964: PUSH
79965: LD_VAR 0 2
79969: ARRAY
79970: PUSH
79971: LD_INT 1
79973: ARRAY
79974: PPUSH
79975: CALL_OW 255
79979: PPUSH
79980: LD_EXP 49
79984: PUSH
79985: LD_VAR 0 2
79989: ARRAY
79990: PPUSH
79991: CALL 23572 0 2
79995: GO 79933
79997: POP
79998: POP
// end ;
79999: LD_VAR 0 1
80003: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
80004: LD_INT 0
80006: PPUSH
80007: PPUSH
80008: PPUSH
80009: PPUSH
80010: PPUSH
80011: PPUSH
80012: PPUSH
80013: PPUSH
// if not mc_bases or not mc_parking then
80014: LD_EXP 36
80018: NOT
80019: PUSH
80020: LD_EXP 60
80024: NOT
80025: OR
80026: IFFALSE 80030
// exit ;
80028: GO 80729
// for i = 1 to mc_bases do
80030: LD_ADDR_VAR 0 2
80034: PUSH
80035: DOUBLE
80036: LD_INT 1
80038: DEC
80039: ST_TO_ADDR
80040: LD_EXP 36
80044: PUSH
80045: FOR_TO
80046: IFFALSE 80727
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
80048: LD_EXP 36
80052: PUSH
80053: LD_VAR 0 2
80057: ARRAY
80058: NOT
80059: PUSH
80060: LD_EXP 60
80064: PUSH
80065: LD_VAR 0 2
80069: ARRAY
80070: NOT
80071: OR
80072: IFFALSE 80076
// continue ;
80074: GO 80045
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80076: LD_ADDR_VAR 0 5
80080: PUSH
80081: LD_EXP 36
80085: PUSH
80086: LD_VAR 0 2
80090: ARRAY
80091: PUSH
80092: LD_INT 1
80094: ARRAY
80095: PPUSH
80096: CALL_OW 255
80100: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80101: LD_ADDR_VAR 0 6
80105: PUSH
80106: LD_EXP 36
80110: PUSH
80111: LD_VAR 0 2
80115: ARRAY
80116: PPUSH
80117: LD_INT 30
80119: PUSH
80120: LD_INT 3
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PPUSH
80127: CALL_OW 72
80131: ST_TO_ADDR
// if not fac then
80132: LD_VAR 0 6
80136: NOT
80137: IFFALSE 80188
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80139: LD_ADDR_VAR 0 6
80143: PUSH
80144: LD_EXP 36
80148: PUSH
80149: LD_VAR 0 2
80153: ARRAY
80154: PPUSH
80155: LD_INT 2
80157: PUSH
80158: LD_INT 30
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: PUSH
80168: LD_INT 30
80170: PUSH
80171: LD_INT 1
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PUSH
80178: EMPTY
80179: LIST
80180: LIST
80181: LIST
80182: PPUSH
80183: CALL_OW 72
80187: ST_TO_ADDR
// if not fac then
80188: LD_VAR 0 6
80192: NOT
80193: IFFALSE 80197
// continue ;
80195: GO 80045
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80197: LD_ADDR_VAR 0 7
80201: PUSH
80202: LD_EXP 60
80206: PUSH
80207: LD_VAR 0 2
80211: ARRAY
80212: PPUSH
80213: LD_INT 22
80215: PUSH
80216: LD_VAR 0 5
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: PUSH
80225: LD_INT 21
80227: PUSH
80228: LD_INT 2
80230: PUSH
80231: EMPTY
80232: LIST
80233: LIST
80234: PUSH
80235: LD_INT 3
80237: PUSH
80238: LD_INT 24
80240: PUSH
80241: LD_INT 1000
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: PUSH
80252: EMPTY
80253: LIST
80254: LIST
80255: LIST
80256: PPUSH
80257: CALL_OW 70
80261: ST_TO_ADDR
// for j in fac do
80262: LD_ADDR_VAR 0 3
80266: PUSH
80267: LD_VAR 0 6
80271: PUSH
80272: FOR_IN
80273: IFFALSE 80354
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80275: LD_ADDR_VAR 0 7
80279: PUSH
80280: LD_VAR 0 7
80284: PUSH
80285: LD_INT 22
80287: PUSH
80288: LD_VAR 0 5
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 91
80299: PUSH
80300: LD_VAR 0 3
80304: PUSH
80305: LD_INT 15
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 21
80315: PUSH
80316: LD_INT 2
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: PUSH
80323: LD_INT 3
80325: PUSH
80326: LD_INT 24
80328: PUSH
80329: LD_INT 1000
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: PUSH
80336: EMPTY
80337: LIST
80338: LIST
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: LIST
80344: LIST
80345: PPUSH
80346: CALL_OW 69
80350: UNION
80351: ST_TO_ADDR
80352: GO 80272
80354: POP
80355: POP
// if not vehs then
80356: LD_VAR 0 7
80360: NOT
80361: IFFALSE 80387
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80363: LD_ADDR_EXP 48
80367: PUSH
80368: LD_EXP 48
80372: PPUSH
80373: LD_VAR 0 2
80377: PPUSH
80378: EMPTY
80379: PPUSH
80380: CALL_OW 1
80384: ST_TO_ADDR
// continue ;
80385: GO 80045
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80387: LD_ADDR_VAR 0 8
80391: PUSH
80392: LD_EXP 36
80396: PUSH
80397: LD_VAR 0 2
80401: ARRAY
80402: PPUSH
80403: LD_INT 30
80405: PUSH
80406: LD_INT 3
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PPUSH
80413: CALL_OW 72
80417: ST_TO_ADDR
// if tmp then
80418: LD_VAR 0 8
80422: IFFALSE 80525
// begin for j in tmp do
80424: LD_ADDR_VAR 0 3
80428: PUSH
80429: LD_VAR 0 8
80433: PUSH
80434: FOR_IN
80435: IFFALSE 80523
// for k in UnitsInside ( j ) do
80437: LD_ADDR_VAR 0 4
80441: PUSH
80442: LD_VAR 0 3
80446: PPUSH
80447: CALL_OW 313
80451: PUSH
80452: FOR_IN
80453: IFFALSE 80519
// if k then
80455: LD_VAR 0 4
80459: IFFALSE 80517
// if not k in mc_repair_vehicle [ i ] then
80461: LD_VAR 0 4
80465: PUSH
80466: LD_EXP 48
80470: PUSH
80471: LD_VAR 0 2
80475: ARRAY
80476: IN
80477: NOT
80478: IFFALSE 80517
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80480: LD_ADDR_EXP 48
80484: PUSH
80485: LD_EXP 48
80489: PPUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_EXP 48
80499: PUSH
80500: LD_VAR 0 2
80504: ARRAY
80505: PUSH
80506: LD_VAR 0 4
80510: UNION
80511: PPUSH
80512: CALL_OW 1
80516: ST_TO_ADDR
80517: GO 80452
80519: POP
80520: POP
80521: GO 80434
80523: POP
80524: POP
// end ; if not mc_repair_vehicle [ i ] then
80525: LD_EXP 48
80529: PUSH
80530: LD_VAR 0 2
80534: ARRAY
80535: NOT
80536: IFFALSE 80540
// continue ;
80538: GO 80045
// for j in mc_repair_vehicle [ i ] do
80540: LD_ADDR_VAR 0 3
80544: PUSH
80545: LD_EXP 48
80549: PUSH
80550: LD_VAR 0 2
80554: ARRAY
80555: PUSH
80556: FOR_IN
80557: IFFALSE 80723
// begin if GetClass ( j ) <> 3 then
80559: LD_VAR 0 3
80563: PPUSH
80564: CALL_OW 257
80568: PUSH
80569: LD_INT 3
80571: NONEQUAL
80572: IFFALSE 80613
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80574: LD_ADDR_EXP 48
80578: PUSH
80579: LD_EXP 48
80583: PPUSH
80584: LD_VAR 0 2
80588: PPUSH
80589: LD_EXP 48
80593: PUSH
80594: LD_VAR 0 2
80598: ARRAY
80599: PUSH
80600: LD_VAR 0 3
80604: DIFF
80605: PPUSH
80606: CALL_OW 1
80610: ST_TO_ADDR
// continue ;
80611: GO 80556
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80613: LD_VAR 0 3
80617: PPUSH
80618: CALL_OW 311
80622: NOT
80623: PUSH
80624: LD_VAR 0 3
80628: PUSH
80629: LD_EXP 39
80633: PUSH
80634: LD_VAR 0 2
80638: ARRAY
80639: PUSH
80640: LD_INT 1
80642: ARRAY
80643: IN
80644: NOT
80645: AND
80646: PUSH
80647: LD_VAR 0 3
80651: PUSH
80652: LD_EXP 39
80656: PUSH
80657: LD_VAR 0 2
80661: ARRAY
80662: PUSH
80663: LD_INT 2
80665: ARRAY
80666: IN
80667: NOT
80668: AND
80669: IFFALSE 80721
// begin if IsInUnit ( j ) then
80671: LD_VAR 0 3
80675: PPUSH
80676: CALL_OW 310
80680: IFFALSE 80691
// ComExitBuilding ( j ) ;
80682: LD_VAR 0 3
80686: PPUSH
80687: CALL_OW 122
// if not HasTask ( j ) then
80691: LD_VAR 0 3
80695: PPUSH
80696: CALL_OW 314
80700: NOT
80701: IFFALSE 80721
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80703: LD_VAR 0 3
80707: PPUSH
80708: LD_VAR 0 7
80712: PUSH
80713: LD_INT 1
80715: ARRAY
80716: PPUSH
80717: CALL_OW 189
// end ; end ;
80721: GO 80556
80723: POP
80724: POP
// end ;
80725: GO 80045
80727: POP
80728: POP
// end ;
80729: LD_VAR 0 1
80733: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80734: LD_INT 0
80736: PPUSH
80737: PPUSH
80738: PPUSH
80739: PPUSH
80740: PPUSH
80741: PPUSH
80742: PPUSH
80743: PPUSH
80744: PPUSH
80745: PPUSH
80746: PPUSH
// if not mc_bases then
80747: LD_EXP 36
80751: NOT
80752: IFFALSE 80756
// exit ;
80754: GO 81558
// for i = 1 to mc_bases do
80756: LD_ADDR_VAR 0 2
80760: PUSH
80761: DOUBLE
80762: LD_INT 1
80764: DEC
80765: ST_TO_ADDR
80766: LD_EXP 36
80770: PUSH
80771: FOR_TO
80772: IFFALSE 81556
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80774: LD_EXP 64
80778: PUSH
80779: LD_VAR 0 2
80783: ARRAY
80784: NOT
80785: PUSH
80786: LD_EXP 39
80790: PUSH
80791: LD_VAR 0 2
80795: ARRAY
80796: PUSH
80797: LD_INT 1
80799: ARRAY
80800: OR
80801: PUSH
80802: LD_EXP 39
80806: PUSH
80807: LD_VAR 0 2
80811: ARRAY
80812: PUSH
80813: LD_INT 2
80815: ARRAY
80816: OR
80817: PUSH
80818: LD_EXP 62
80822: PUSH
80823: LD_VAR 0 2
80827: ARRAY
80828: PPUSH
80829: LD_INT 1
80831: PPUSH
80832: CALL_OW 325
80836: NOT
80837: OR
80838: PUSH
80839: LD_EXP 59
80843: PUSH
80844: LD_VAR 0 2
80848: ARRAY
80849: OR
80850: IFFALSE 80854
// continue ;
80852: GO 80771
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80854: LD_ADDR_VAR 0 8
80858: PUSH
80859: LD_EXP 36
80863: PUSH
80864: LD_VAR 0 2
80868: ARRAY
80869: PPUSH
80870: LD_INT 25
80872: PUSH
80873: LD_INT 4
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PUSH
80880: LD_INT 50
80882: PUSH
80883: EMPTY
80884: LIST
80885: PUSH
80886: LD_INT 3
80888: PUSH
80889: LD_INT 60
80891: PUSH
80892: EMPTY
80893: LIST
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: EMPTY
80900: LIST
80901: LIST
80902: LIST
80903: PPUSH
80904: CALL_OW 72
80908: PUSH
80909: LD_EXP 40
80913: PUSH
80914: LD_VAR 0 2
80918: ARRAY
80919: DIFF
80920: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80921: LD_ADDR_VAR 0 9
80925: PUSH
80926: LD_EXP 36
80930: PUSH
80931: LD_VAR 0 2
80935: ARRAY
80936: PPUSH
80937: LD_INT 2
80939: PUSH
80940: LD_INT 30
80942: PUSH
80943: LD_INT 0
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: LD_INT 30
80952: PUSH
80953: LD_INT 1
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: LIST
80964: PPUSH
80965: CALL_OW 72
80969: ST_TO_ADDR
// if not tmp or not dep then
80970: LD_VAR 0 8
80974: NOT
80975: PUSH
80976: LD_VAR 0 9
80980: NOT
80981: OR
80982: IFFALSE 80986
// continue ;
80984: GO 80771
// side := GetSide ( tmp [ 1 ] ) ;
80986: LD_ADDR_VAR 0 11
80990: PUSH
80991: LD_VAR 0 8
80995: PUSH
80996: LD_INT 1
80998: ARRAY
80999: PPUSH
81000: CALL_OW 255
81004: ST_TO_ADDR
// dep := dep [ 1 ] ;
81005: LD_ADDR_VAR 0 9
81009: PUSH
81010: LD_VAR 0 9
81014: PUSH
81015: LD_INT 1
81017: ARRAY
81018: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
81019: LD_ADDR_VAR 0 7
81023: PUSH
81024: LD_EXP 64
81028: PUSH
81029: LD_VAR 0 2
81033: ARRAY
81034: PPUSH
81035: LD_INT 22
81037: PUSH
81038: LD_INT 0
81040: PUSH
81041: EMPTY
81042: LIST
81043: LIST
81044: PUSH
81045: LD_INT 25
81047: PUSH
81048: LD_INT 12
81050: PUSH
81051: EMPTY
81052: LIST
81053: LIST
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PPUSH
81059: CALL_OW 70
81063: PUSH
81064: LD_INT 22
81066: PUSH
81067: LD_INT 0
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PUSH
81074: LD_INT 25
81076: PUSH
81077: LD_INT 12
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: PUSH
81084: LD_INT 91
81086: PUSH
81087: LD_VAR 0 9
81091: PUSH
81092: LD_INT 20
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: LIST
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: LIST
81104: PPUSH
81105: CALL_OW 69
81109: UNION
81110: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81111: LD_ADDR_VAR 0 10
81115: PUSH
81116: LD_EXP 64
81120: PUSH
81121: LD_VAR 0 2
81125: ARRAY
81126: PPUSH
81127: LD_INT 81
81129: PUSH
81130: LD_VAR 0 11
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PPUSH
81139: CALL_OW 70
81143: ST_TO_ADDR
// if not apes or danger_at_area then
81144: LD_VAR 0 7
81148: NOT
81149: PUSH
81150: LD_VAR 0 10
81154: OR
81155: IFFALSE 81205
// begin if mc_taming [ i ] then
81157: LD_EXP 67
81161: PUSH
81162: LD_VAR 0 2
81166: ARRAY
81167: IFFALSE 81203
// begin MC_Reset ( i , 121 ) ;
81169: LD_VAR 0 2
81173: PPUSH
81174: LD_INT 121
81176: PPUSH
81177: CALL 66640 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81181: LD_ADDR_EXP 67
81185: PUSH
81186: LD_EXP 67
81190: PPUSH
81191: LD_VAR 0 2
81195: PPUSH
81196: EMPTY
81197: PPUSH
81198: CALL_OW 1
81202: ST_TO_ADDR
// end ; continue ;
81203: GO 80771
// end ; for j in tmp do
81205: LD_ADDR_VAR 0 3
81209: PUSH
81210: LD_VAR 0 8
81214: PUSH
81215: FOR_IN
81216: IFFALSE 81552
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81218: LD_VAR 0 3
81222: PUSH
81223: LD_EXP 67
81227: PUSH
81228: LD_VAR 0 2
81232: ARRAY
81233: IN
81234: NOT
81235: PUSH
81236: LD_EXP 67
81240: PUSH
81241: LD_VAR 0 2
81245: ARRAY
81246: PUSH
81247: LD_INT 3
81249: LESS
81250: AND
81251: IFFALSE 81309
// begin SetTag ( j , 121 ) ;
81253: LD_VAR 0 3
81257: PPUSH
81258: LD_INT 121
81260: PPUSH
81261: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81265: LD_ADDR_EXP 67
81269: PUSH
81270: LD_EXP 67
81274: PPUSH
81275: LD_VAR 0 2
81279: PUSH
81280: LD_EXP 67
81284: PUSH
81285: LD_VAR 0 2
81289: ARRAY
81290: PUSH
81291: LD_INT 1
81293: PLUS
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: PPUSH
81299: LD_VAR 0 3
81303: PPUSH
81304: CALL 26583 0 3
81308: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81309: LD_VAR 0 3
81313: PUSH
81314: LD_EXP 67
81318: PUSH
81319: LD_VAR 0 2
81323: ARRAY
81324: IN
81325: IFFALSE 81550
// begin if GetClass ( j ) <> 4 then
81327: LD_VAR 0 3
81331: PPUSH
81332: CALL_OW 257
81336: PUSH
81337: LD_INT 4
81339: NONEQUAL
81340: IFFALSE 81393
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81342: LD_ADDR_EXP 67
81346: PUSH
81347: LD_EXP 67
81351: PPUSH
81352: LD_VAR 0 2
81356: PPUSH
81357: LD_EXP 67
81361: PUSH
81362: LD_VAR 0 2
81366: ARRAY
81367: PUSH
81368: LD_VAR 0 3
81372: DIFF
81373: PPUSH
81374: CALL_OW 1
81378: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81379: LD_VAR 0 3
81383: PPUSH
81384: LD_INT 0
81386: PPUSH
81387: CALL_OW 109
// continue ;
81391: GO 81215
// end ; if IsInUnit ( j ) then
81393: LD_VAR 0 3
81397: PPUSH
81398: CALL_OW 310
81402: IFFALSE 81413
// ComExitBuilding ( j ) ;
81404: LD_VAR 0 3
81408: PPUSH
81409: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81413: LD_ADDR_VAR 0 6
81417: PUSH
81418: LD_VAR 0 7
81422: PPUSH
81423: LD_VAR 0 3
81427: PPUSH
81428: CALL_OW 74
81432: ST_TO_ADDR
// if not ape then
81433: LD_VAR 0 6
81437: NOT
81438: IFFALSE 81442
// break ;
81440: GO 81552
// x := GetX ( ape ) ;
81442: LD_ADDR_VAR 0 4
81446: PUSH
81447: LD_VAR 0 6
81451: PPUSH
81452: CALL_OW 250
81456: ST_TO_ADDR
// y := GetY ( ape ) ;
81457: LD_ADDR_VAR 0 5
81461: PUSH
81462: LD_VAR 0 6
81466: PPUSH
81467: CALL_OW 251
81471: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81472: LD_VAR 0 4
81476: PPUSH
81477: LD_VAR 0 5
81481: PPUSH
81482: CALL_OW 488
81486: NOT
81487: PUSH
81488: LD_VAR 0 11
81492: PPUSH
81493: LD_VAR 0 4
81497: PPUSH
81498: LD_VAR 0 5
81502: PPUSH
81503: LD_INT 20
81505: PPUSH
81506: CALL 27479 0 4
81510: PUSH
81511: LD_INT 4
81513: ARRAY
81514: OR
81515: IFFALSE 81519
// break ;
81517: GO 81552
// if not HasTask ( j ) then
81519: LD_VAR 0 3
81523: PPUSH
81524: CALL_OW 314
81528: NOT
81529: IFFALSE 81550
// ComTameXY ( j , x , y ) ;
81531: LD_VAR 0 3
81535: PPUSH
81536: LD_VAR 0 4
81540: PPUSH
81541: LD_VAR 0 5
81545: PPUSH
81546: CALL_OW 131
// end ; end ;
81550: GO 81215
81552: POP
81553: POP
// end ;
81554: GO 80771
81556: POP
81557: POP
// end ;
81558: LD_VAR 0 1
81562: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81563: LD_INT 0
81565: PPUSH
81566: PPUSH
81567: PPUSH
81568: PPUSH
81569: PPUSH
81570: PPUSH
81571: PPUSH
81572: PPUSH
// if not mc_bases then
81573: LD_EXP 36
81577: NOT
81578: IFFALSE 81582
// exit ;
81580: GO 82208
// for i = 1 to mc_bases do
81582: LD_ADDR_VAR 0 2
81586: PUSH
81587: DOUBLE
81588: LD_INT 1
81590: DEC
81591: ST_TO_ADDR
81592: LD_EXP 36
81596: PUSH
81597: FOR_TO
81598: IFFALSE 82206
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81600: LD_EXP 65
81604: PUSH
81605: LD_VAR 0 2
81609: ARRAY
81610: NOT
81611: PUSH
81612: LD_EXP 65
81616: PUSH
81617: LD_VAR 0 2
81621: ARRAY
81622: PPUSH
81623: LD_INT 25
81625: PUSH
81626: LD_INT 12
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PPUSH
81633: CALL_OW 72
81637: NOT
81638: OR
81639: IFFALSE 81643
// continue ;
81641: GO 81597
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81643: LD_ADDR_VAR 0 5
81647: PUSH
81648: LD_EXP 65
81652: PUSH
81653: LD_VAR 0 2
81657: ARRAY
81658: PUSH
81659: LD_INT 1
81661: ARRAY
81662: PPUSH
81663: CALL_OW 255
81667: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81668: LD_VAR 0 5
81672: PPUSH
81673: LD_INT 2
81675: PPUSH
81676: CALL_OW 325
81680: IFFALSE 81933
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81682: LD_ADDR_VAR 0 4
81686: PUSH
81687: LD_EXP 65
81691: PUSH
81692: LD_VAR 0 2
81696: ARRAY
81697: PPUSH
81698: LD_INT 25
81700: PUSH
81701: LD_INT 16
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PPUSH
81708: CALL_OW 72
81712: ST_TO_ADDR
// if tmp < 6 then
81713: LD_VAR 0 4
81717: PUSH
81718: LD_INT 6
81720: LESS
81721: IFFALSE 81933
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81723: LD_ADDR_VAR 0 6
81727: PUSH
81728: LD_EXP 36
81732: PUSH
81733: LD_VAR 0 2
81737: ARRAY
81738: PPUSH
81739: LD_INT 2
81741: PUSH
81742: LD_INT 30
81744: PUSH
81745: LD_INT 0
81747: PUSH
81748: EMPTY
81749: LIST
81750: LIST
81751: PUSH
81752: LD_INT 30
81754: PUSH
81755: LD_INT 1
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: LIST
81766: PPUSH
81767: CALL_OW 72
81771: ST_TO_ADDR
// if depot then
81772: LD_VAR 0 6
81776: IFFALSE 81933
// begin selected := 0 ;
81778: LD_ADDR_VAR 0 7
81782: PUSH
81783: LD_INT 0
81785: ST_TO_ADDR
// for j in depot do
81786: LD_ADDR_VAR 0 3
81790: PUSH
81791: LD_VAR 0 6
81795: PUSH
81796: FOR_IN
81797: IFFALSE 81828
// begin if UnitsInside ( j ) < 6 then
81799: LD_VAR 0 3
81803: PPUSH
81804: CALL_OW 313
81808: PUSH
81809: LD_INT 6
81811: LESS
81812: IFFALSE 81826
// begin selected := j ;
81814: LD_ADDR_VAR 0 7
81818: PUSH
81819: LD_VAR 0 3
81823: ST_TO_ADDR
// break ;
81824: GO 81828
// end ; end ;
81826: GO 81796
81828: POP
81829: POP
// if selected then
81830: LD_VAR 0 7
81834: IFFALSE 81933
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81836: LD_ADDR_VAR 0 3
81840: PUSH
81841: LD_EXP 65
81845: PUSH
81846: LD_VAR 0 2
81850: ARRAY
81851: PPUSH
81852: LD_INT 25
81854: PUSH
81855: LD_INT 12
81857: PUSH
81858: EMPTY
81859: LIST
81860: LIST
81861: PPUSH
81862: CALL_OW 72
81866: PUSH
81867: FOR_IN
81868: IFFALSE 81931
// if not HasTask ( j ) then
81870: LD_VAR 0 3
81874: PPUSH
81875: CALL_OW 314
81879: NOT
81880: IFFALSE 81929
// begin if not IsInUnit ( j ) then
81882: LD_VAR 0 3
81886: PPUSH
81887: CALL_OW 310
81891: NOT
81892: IFFALSE 81908
// ComEnterUnit ( j , selected ) ;
81894: LD_VAR 0 3
81898: PPUSH
81899: LD_VAR 0 7
81903: PPUSH
81904: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81908: LD_VAR 0 3
81912: PPUSH
81913: LD_INT 16
81915: PPUSH
81916: CALL_OW 183
// AddComExitBuilding ( j ) ;
81920: LD_VAR 0 3
81924: PPUSH
81925: CALL_OW 182
// end ;
81929: GO 81867
81931: POP
81932: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81933: LD_VAR 0 5
81937: PPUSH
81938: LD_INT 11
81940: PPUSH
81941: CALL_OW 325
81945: IFFALSE 82204
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81947: LD_ADDR_VAR 0 4
81951: PUSH
81952: LD_EXP 65
81956: PUSH
81957: LD_VAR 0 2
81961: ARRAY
81962: PPUSH
81963: LD_INT 25
81965: PUSH
81966: LD_INT 16
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PPUSH
81973: CALL_OW 72
81977: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81978: LD_VAR 0 4
81982: PUSH
81983: LD_INT 6
81985: GREATEREQUAL
81986: PUSH
81987: LD_VAR 0 5
81991: PPUSH
81992: LD_INT 2
81994: PPUSH
81995: CALL_OW 325
81999: NOT
82000: OR
82001: IFFALSE 82204
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82003: LD_ADDR_VAR 0 8
82007: PUSH
82008: LD_EXP 36
82012: PUSH
82013: LD_VAR 0 2
82017: ARRAY
82018: PPUSH
82019: LD_INT 2
82021: PUSH
82022: LD_INT 30
82024: PUSH
82025: LD_INT 4
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: PUSH
82032: LD_INT 30
82034: PUSH
82035: LD_INT 5
82037: PUSH
82038: EMPTY
82039: LIST
82040: LIST
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: LIST
82046: PPUSH
82047: CALL_OW 72
82051: ST_TO_ADDR
// if barracks then
82052: LD_VAR 0 8
82056: IFFALSE 82204
// begin selected := 0 ;
82058: LD_ADDR_VAR 0 7
82062: PUSH
82063: LD_INT 0
82065: ST_TO_ADDR
// for j in barracks do
82066: LD_ADDR_VAR 0 3
82070: PUSH
82071: LD_VAR 0 8
82075: PUSH
82076: FOR_IN
82077: IFFALSE 82108
// begin if UnitsInside ( j ) < 6 then
82079: LD_VAR 0 3
82083: PPUSH
82084: CALL_OW 313
82088: PUSH
82089: LD_INT 6
82091: LESS
82092: IFFALSE 82106
// begin selected := j ;
82094: LD_ADDR_VAR 0 7
82098: PUSH
82099: LD_VAR 0 3
82103: ST_TO_ADDR
// break ;
82104: GO 82108
// end ; end ;
82106: GO 82076
82108: POP
82109: POP
// if selected then
82110: LD_VAR 0 7
82114: IFFALSE 82204
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82116: LD_ADDR_VAR 0 3
82120: PUSH
82121: LD_EXP 65
82125: PUSH
82126: LD_VAR 0 2
82130: ARRAY
82131: PPUSH
82132: LD_INT 25
82134: PUSH
82135: LD_INT 12
82137: PUSH
82138: EMPTY
82139: LIST
82140: LIST
82141: PPUSH
82142: CALL_OW 72
82146: PUSH
82147: FOR_IN
82148: IFFALSE 82202
// if not IsInUnit ( j ) and not HasTask ( j ) then
82150: LD_VAR 0 3
82154: PPUSH
82155: CALL_OW 310
82159: NOT
82160: PUSH
82161: LD_VAR 0 3
82165: PPUSH
82166: CALL_OW 314
82170: NOT
82171: AND
82172: IFFALSE 82200
// begin ComEnterUnit ( j , selected ) ;
82174: LD_VAR 0 3
82178: PPUSH
82179: LD_VAR 0 7
82183: PPUSH
82184: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82188: LD_VAR 0 3
82192: PPUSH
82193: LD_INT 15
82195: PPUSH
82196: CALL_OW 183
// end ;
82200: GO 82147
82202: POP
82203: POP
// end ; end ; end ; end ; end ;
82204: GO 81597
82206: POP
82207: POP
// end ;
82208: LD_VAR 0 1
82212: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82213: LD_INT 0
82215: PPUSH
82216: PPUSH
82217: PPUSH
82218: PPUSH
// if not mc_bases then
82219: LD_EXP 36
82223: NOT
82224: IFFALSE 82228
// exit ;
82226: GO 82406
// for i = 1 to mc_bases do
82228: LD_ADDR_VAR 0 2
82232: PUSH
82233: DOUBLE
82234: LD_INT 1
82236: DEC
82237: ST_TO_ADDR
82238: LD_EXP 36
82242: PUSH
82243: FOR_TO
82244: IFFALSE 82404
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82246: LD_ADDR_VAR 0 4
82250: PUSH
82251: LD_EXP 36
82255: PUSH
82256: LD_VAR 0 2
82260: ARRAY
82261: PPUSH
82262: LD_INT 25
82264: PUSH
82265: LD_INT 9
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: PPUSH
82272: CALL_OW 72
82276: ST_TO_ADDR
// if not tmp then
82277: LD_VAR 0 4
82281: NOT
82282: IFFALSE 82286
// continue ;
82284: GO 82243
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82286: LD_EXP 62
82290: PUSH
82291: LD_VAR 0 2
82295: ARRAY
82296: PPUSH
82297: LD_INT 29
82299: PPUSH
82300: CALL_OW 325
82304: NOT
82305: PUSH
82306: LD_EXP 62
82310: PUSH
82311: LD_VAR 0 2
82315: ARRAY
82316: PPUSH
82317: LD_INT 28
82319: PPUSH
82320: CALL_OW 325
82324: NOT
82325: AND
82326: IFFALSE 82330
// continue ;
82328: GO 82243
// for j in tmp do
82330: LD_ADDR_VAR 0 3
82334: PUSH
82335: LD_VAR 0 4
82339: PUSH
82340: FOR_IN
82341: IFFALSE 82400
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82343: LD_VAR 0 3
82347: PUSH
82348: LD_EXP 39
82352: PUSH
82353: LD_VAR 0 2
82357: ARRAY
82358: PUSH
82359: LD_INT 1
82361: ARRAY
82362: IN
82363: NOT
82364: PUSH
82365: LD_VAR 0 3
82369: PUSH
82370: LD_EXP 39
82374: PUSH
82375: LD_VAR 0 2
82379: ARRAY
82380: PUSH
82381: LD_INT 2
82383: ARRAY
82384: IN
82385: NOT
82386: AND
82387: IFFALSE 82398
// ComSpaceTimeShoot ( j ) ;
82389: LD_VAR 0 3
82393: PPUSH
82394: CALL 20169 0 1
82398: GO 82340
82400: POP
82401: POP
// end ;
82402: GO 82243
82404: POP
82405: POP
// end ;
82406: LD_VAR 0 1
82410: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82411: LD_INT 0
82413: PPUSH
82414: PPUSH
82415: PPUSH
82416: PPUSH
82417: PPUSH
82418: PPUSH
82419: PPUSH
82420: PPUSH
82421: PPUSH
// if not mc_bases then
82422: LD_EXP 36
82426: NOT
82427: IFFALSE 82431
// exit ;
82429: GO 83053
// for i = 1 to mc_bases do
82431: LD_ADDR_VAR 0 2
82435: PUSH
82436: DOUBLE
82437: LD_INT 1
82439: DEC
82440: ST_TO_ADDR
82441: LD_EXP 36
82445: PUSH
82446: FOR_TO
82447: IFFALSE 83051
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82449: LD_EXP 71
82453: PUSH
82454: LD_VAR 0 2
82458: ARRAY
82459: NOT
82460: PUSH
82461: LD_INT 38
82463: PPUSH
82464: LD_EXP 62
82468: PUSH
82469: LD_VAR 0 2
82473: ARRAY
82474: PPUSH
82475: CALL_OW 321
82479: PUSH
82480: LD_INT 2
82482: NONEQUAL
82483: OR
82484: IFFALSE 82488
// continue ;
82486: GO 82446
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82488: LD_ADDR_VAR 0 8
82492: PUSH
82493: LD_EXP 36
82497: PUSH
82498: LD_VAR 0 2
82502: ARRAY
82503: PPUSH
82504: LD_INT 30
82506: PUSH
82507: LD_INT 34
82509: PUSH
82510: EMPTY
82511: LIST
82512: LIST
82513: PPUSH
82514: CALL_OW 72
82518: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82519: LD_ADDR_VAR 0 9
82523: PUSH
82524: LD_EXP 36
82528: PUSH
82529: LD_VAR 0 2
82533: ARRAY
82534: PPUSH
82535: LD_INT 25
82537: PUSH
82538: LD_INT 4
82540: PUSH
82541: EMPTY
82542: LIST
82543: LIST
82544: PPUSH
82545: CALL_OW 72
82549: PPUSH
82550: LD_INT 0
82552: PPUSH
82553: CALL 59853 0 2
82557: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82558: LD_VAR 0 9
82562: NOT
82563: PUSH
82564: LD_VAR 0 8
82568: NOT
82569: OR
82570: PUSH
82571: LD_EXP 36
82575: PUSH
82576: LD_VAR 0 2
82580: ARRAY
82581: PPUSH
82582: LD_INT 124
82584: PPUSH
82585: CALL 59853 0 2
82589: OR
82590: IFFALSE 82594
// continue ;
82592: GO 82446
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82594: LD_EXP 72
82598: PUSH
82599: LD_VAR 0 2
82603: ARRAY
82604: PUSH
82605: LD_EXP 71
82609: PUSH
82610: LD_VAR 0 2
82614: ARRAY
82615: LESS
82616: PUSH
82617: LD_EXP 72
82621: PUSH
82622: LD_VAR 0 2
82626: ARRAY
82627: PUSH
82628: LD_VAR 0 8
82632: LESS
82633: AND
82634: IFFALSE 83049
// begin tmp := sci [ 1 ] ;
82636: LD_ADDR_VAR 0 7
82640: PUSH
82641: LD_VAR 0 9
82645: PUSH
82646: LD_INT 1
82648: ARRAY
82649: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82650: LD_VAR 0 7
82654: PPUSH
82655: LD_INT 124
82657: PPUSH
82658: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82662: LD_ADDR_VAR 0 3
82666: PUSH
82667: DOUBLE
82668: LD_EXP 71
82672: PUSH
82673: LD_VAR 0 2
82677: ARRAY
82678: INC
82679: ST_TO_ADDR
82680: LD_EXP 71
82684: PUSH
82685: LD_VAR 0 2
82689: ARRAY
82690: PUSH
82691: FOR_DOWNTO
82692: IFFALSE 83035
// begin if IsInUnit ( tmp ) then
82694: LD_VAR 0 7
82698: PPUSH
82699: CALL_OW 310
82703: IFFALSE 82714
// ComExitBuilding ( tmp ) ;
82705: LD_VAR 0 7
82709: PPUSH
82710: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82714: LD_INT 35
82716: PPUSH
82717: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82721: LD_VAR 0 7
82725: PPUSH
82726: CALL_OW 310
82730: NOT
82731: PUSH
82732: LD_VAR 0 7
82736: PPUSH
82737: CALL_OW 314
82741: NOT
82742: AND
82743: IFFALSE 82714
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82745: LD_ADDR_VAR 0 6
82749: PUSH
82750: LD_VAR 0 7
82754: PPUSH
82755: CALL_OW 250
82759: PUSH
82760: LD_VAR 0 7
82764: PPUSH
82765: CALL_OW 251
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82774: LD_INT 35
82776: PPUSH
82777: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82781: LD_ADDR_VAR 0 4
82785: PUSH
82786: LD_EXP 71
82790: PUSH
82791: LD_VAR 0 2
82795: ARRAY
82796: PUSH
82797: LD_VAR 0 3
82801: ARRAY
82802: PUSH
82803: LD_INT 1
82805: ARRAY
82806: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82807: LD_ADDR_VAR 0 5
82811: PUSH
82812: LD_EXP 71
82816: PUSH
82817: LD_VAR 0 2
82821: ARRAY
82822: PUSH
82823: LD_VAR 0 3
82827: ARRAY
82828: PUSH
82829: LD_INT 2
82831: ARRAY
82832: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82833: LD_VAR 0 7
82837: PPUSH
82838: LD_INT 10
82840: PPUSH
82841: CALL 29176 0 2
82845: PUSH
82846: LD_INT 4
82848: ARRAY
82849: IFFALSE 82887
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82851: LD_VAR 0 7
82855: PPUSH
82856: LD_VAR 0 6
82860: PUSH
82861: LD_INT 1
82863: ARRAY
82864: PPUSH
82865: LD_VAR 0 6
82869: PUSH
82870: LD_INT 2
82872: ARRAY
82873: PPUSH
82874: CALL_OW 111
// wait ( 0 0$10 ) ;
82878: LD_INT 350
82880: PPUSH
82881: CALL_OW 67
// end else
82885: GO 82913
// begin ComMoveXY ( tmp , x , y ) ;
82887: LD_VAR 0 7
82891: PPUSH
82892: LD_VAR 0 4
82896: PPUSH
82897: LD_VAR 0 5
82901: PPUSH
82902: CALL_OW 111
// wait ( 0 0$3 ) ;
82906: LD_INT 105
82908: PPUSH
82909: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82913: LD_VAR 0 7
82917: PPUSH
82918: LD_VAR 0 4
82922: PPUSH
82923: LD_VAR 0 5
82927: PPUSH
82928: CALL_OW 307
82932: IFFALSE 82774
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82934: LD_VAR 0 7
82938: PPUSH
82939: LD_VAR 0 4
82943: PPUSH
82944: LD_VAR 0 5
82948: PPUSH
82949: LD_VAR 0 8
82953: PUSH
82954: LD_VAR 0 3
82958: ARRAY
82959: PPUSH
82960: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82964: LD_INT 35
82966: PPUSH
82967: CALL_OW 67
// until not HasTask ( tmp ) ;
82971: LD_VAR 0 7
82975: PPUSH
82976: CALL_OW 314
82980: NOT
82981: IFFALSE 82964
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82983: LD_ADDR_EXP 72
82987: PUSH
82988: LD_EXP 72
82992: PPUSH
82993: LD_VAR 0 2
82997: PUSH
82998: LD_EXP 72
83002: PUSH
83003: LD_VAR 0 2
83007: ARRAY
83008: PUSH
83009: LD_INT 1
83011: PLUS
83012: PUSH
83013: EMPTY
83014: LIST
83015: LIST
83016: PPUSH
83017: LD_VAR 0 8
83021: PUSH
83022: LD_VAR 0 3
83026: ARRAY
83027: PPUSH
83028: CALL 26583 0 3
83032: ST_TO_ADDR
// end ;
83033: GO 82691
83035: POP
83036: POP
// MC_Reset ( i , 124 ) ;
83037: LD_VAR 0 2
83041: PPUSH
83042: LD_INT 124
83044: PPUSH
83045: CALL 66640 0 2
// end ; end ;
83049: GO 82446
83051: POP
83052: POP
// end ;
83053: LD_VAR 0 1
83057: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
83058: LD_INT 0
83060: PPUSH
83061: PPUSH
83062: PPUSH
// if not mc_bases then
83063: LD_EXP 36
83067: NOT
83068: IFFALSE 83072
// exit ;
83070: GO 83678
// for i = 1 to mc_bases do
83072: LD_ADDR_VAR 0 2
83076: PUSH
83077: DOUBLE
83078: LD_INT 1
83080: DEC
83081: ST_TO_ADDR
83082: LD_EXP 36
83086: PUSH
83087: FOR_TO
83088: IFFALSE 83676
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83090: LD_ADDR_VAR 0 3
83094: PUSH
83095: LD_EXP 36
83099: PUSH
83100: LD_VAR 0 2
83104: ARRAY
83105: PPUSH
83106: LD_INT 25
83108: PUSH
83109: LD_INT 4
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: PPUSH
83116: CALL_OW 72
83120: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83121: LD_VAR 0 3
83125: NOT
83126: PUSH
83127: LD_EXP 73
83131: PUSH
83132: LD_VAR 0 2
83136: ARRAY
83137: NOT
83138: OR
83139: PUSH
83140: LD_EXP 36
83144: PUSH
83145: LD_VAR 0 2
83149: ARRAY
83150: PPUSH
83151: LD_INT 2
83153: PUSH
83154: LD_INT 30
83156: PUSH
83157: LD_INT 0
83159: PUSH
83160: EMPTY
83161: LIST
83162: LIST
83163: PUSH
83164: LD_INT 30
83166: PUSH
83167: LD_INT 1
83169: PUSH
83170: EMPTY
83171: LIST
83172: LIST
83173: PUSH
83174: EMPTY
83175: LIST
83176: LIST
83177: LIST
83178: PPUSH
83179: CALL_OW 72
83183: NOT
83184: OR
83185: IFFALSE 83235
// begin if mc_deposits_finder [ i ] then
83187: LD_EXP 74
83191: PUSH
83192: LD_VAR 0 2
83196: ARRAY
83197: IFFALSE 83233
// begin MC_Reset ( i , 125 ) ;
83199: LD_VAR 0 2
83203: PPUSH
83204: LD_INT 125
83206: PPUSH
83207: CALL 66640 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83211: LD_ADDR_EXP 74
83215: PUSH
83216: LD_EXP 74
83220: PPUSH
83221: LD_VAR 0 2
83225: PPUSH
83226: EMPTY
83227: PPUSH
83228: CALL_OW 1
83232: ST_TO_ADDR
// end ; continue ;
83233: GO 83087
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83235: LD_EXP 73
83239: PUSH
83240: LD_VAR 0 2
83244: ARRAY
83245: PUSH
83246: LD_INT 1
83248: ARRAY
83249: PUSH
83250: LD_INT 3
83252: ARRAY
83253: PUSH
83254: LD_INT 1
83256: EQUAL
83257: PUSH
83258: LD_INT 20
83260: PPUSH
83261: LD_EXP 62
83265: PUSH
83266: LD_VAR 0 2
83270: ARRAY
83271: PPUSH
83272: CALL_OW 321
83276: PUSH
83277: LD_INT 2
83279: NONEQUAL
83280: AND
83281: IFFALSE 83331
// begin if mc_deposits_finder [ i ] then
83283: LD_EXP 74
83287: PUSH
83288: LD_VAR 0 2
83292: ARRAY
83293: IFFALSE 83329
// begin MC_Reset ( i , 125 ) ;
83295: LD_VAR 0 2
83299: PPUSH
83300: LD_INT 125
83302: PPUSH
83303: CALL 66640 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83307: LD_ADDR_EXP 74
83311: PUSH
83312: LD_EXP 74
83316: PPUSH
83317: LD_VAR 0 2
83321: PPUSH
83322: EMPTY
83323: PPUSH
83324: CALL_OW 1
83328: ST_TO_ADDR
// end ; continue ;
83329: GO 83087
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83331: LD_EXP 73
83335: PUSH
83336: LD_VAR 0 2
83340: ARRAY
83341: PUSH
83342: LD_INT 1
83344: ARRAY
83345: PUSH
83346: LD_INT 1
83348: ARRAY
83349: PPUSH
83350: LD_EXP 73
83354: PUSH
83355: LD_VAR 0 2
83359: ARRAY
83360: PUSH
83361: LD_INT 1
83363: ARRAY
83364: PUSH
83365: LD_INT 2
83367: ARRAY
83368: PPUSH
83369: LD_EXP 62
83373: PUSH
83374: LD_VAR 0 2
83378: ARRAY
83379: PPUSH
83380: CALL_OW 440
83384: IFFALSE 83427
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83386: LD_ADDR_EXP 73
83390: PUSH
83391: LD_EXP 73
83395: PPUSH
83396: LD_VAR 0 2
83400: PPUSH
83401: LD_EXP 73
83405: PUSH
83406: LD_VAR 0 2
83410: ARRAY
83411: PPUSH
83412: LD_INT 1
83414: PPUSH
83415: CALL_OW 3
83419: PPUSH
83420: CALL_OW 1
83424: ST_TO_ADDR
83425: GO 83674
// begin if not mc_deposits_finder [ i ] then
83427: LD_EXP 74
83431: PUSH
83432: LD_VAR 0 2
83436: ARRAY
83437: NOT
83438: IFFALSE 83490
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83440: LD_ADDR_EXP 74
83444: PUSH
83445: LD_EXP 74
83449: PPUSH
83450: LD_VAR 0 2
83454: PPUSH
83455: LD_VAR 0 3
83459: PUSH
83460: LD_INT 1
83462: ARRAY
83463: PUSH
83464: EMPTY
83465: LIST
83466: PPUSH
83467: CALL_OW 1
83471: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83472: LD_VAR 0 3
83476: PUSH
83477: LD_INT 1
83479: ARRAY
83480: PPUSH
83481: LD_INT 125
83483: PPUSH
83484: CALL_OW 109
// end else
83488: GO 83674
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83490: LD_EXP 74
83494: PUSH
83495: LD_VAR 0 2
83499: ARRAY
83500: PUSH
83501: LD_INT 1
83503: ARRAY
83504: PPUSH
83505: CALL_OW 310
83509: IFFALSE 83532
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83511: LD_EXP 74
83515: PUSH
83516: LD_VAR 0 2
83520: ARRAY
83521: PUSH
83522: LD_INT 1
83524: ARRAY
83525: PPUSH
83526: CALL_OW 122
83530: GO 83674
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83532: LD_EXP 74
83536: PUSH
83537: LD_VAR 0 2
83541: ARRAY
83542: PUSH
83543: LD_INT 1
83545: ARRAY
83546: PPUSH
83547: CALL_OW 314
83551: NOT
83552: PUSH
83553: LD_EXP 74
83557: PUSH
83558: LD_VAR 0 2
83562: ARRAY
83563: PUSH
83564: LD_INT 1
83566: ARRAY
83567: PPUSH
83568: LD_EXP 73
83572: PUSH
83573: LD_VAR 0 2
83577: ARRAY
83578: PUSH
83579: LD_INT 1
83581: ARRAY
83582: PUSH
83583: LD_INT 1
83585: ARRAY
83586: PPUSH
83587: LD_EXP 73
83591: PUSH
83592: LD_VAR 0 2
83596: ARRAY
83597: PUSH
83598: LD_INT 1
83600: ARRAY
83601: PUSH
83602: LD_INT 2
83604: ARRAY
83605: PPUSH
83606: CALL_OW 297
83610: PUSH
83611: LD_INT 6
83613: GREATER
83614: AND
83615: IFFALSE 83674
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83617: LD_EXP 74
83621: PUSH
83622: LD_VAR 0 2
83626: ARRAY
83627: PUSH
83628: LD_INT 1
83630: ARRAY
83631: PPUSH
83632: LD_EXP 73
83636: PUSH
83637: LD_VAR 0 2
83641: ARRAY
83642: PUSH
83643: LD_INT 1
83645: ARRAY
83646: PUSH
83647: LD_INT 1
83649: ARRAY
83650: PPUSH
83651: LD_EXP 73
83655: PUSH
83656: LD_VAR 0 2
83660: ARRAY
83661: PUSH
83662: LD_INT 1
83664: ARRAY
83665: PUSH
83666: LD_INT 2
83668: ARRAY
83669: PPUSH
83670: CALL_OW 111
// end ; end ; end ;
83674: GO 83087
83676: POP
83677: POP
// end ;
83678: LD_VAR 0 1
83682: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83683: LD_INT 0
83685: PPUSH
83686: PPUSH
83687: PPUSH
83688: PPUSH
83689: PPUSH
83690: PPUSH
83691: PPUSH
83692: PPUSH
83693: PPUSH
83694: PPUSH
83695: PPUSH
// if not mc_bases then
83696: LD_EXP 36
83700: NOT
83701: IFFALSE 83705
// exit ;
83703: GO 84645
// for i = 1 to mc_bases do
83705: LD_ADDR_VAR 0 2
83709: PUSH
83710: DOUBLE
83711: LD_INT 1
83713: DEC
83714: ST_TO_ADDR
83715: LD_EXP 36
83719: PUSH
83720: FOR_TO
83721: IFFALSE 84643
// begin if not mc_bases [ i ] or mc_scan [ i ] then
83723: LD_EXP 36
83727: PUSH
83728: LD_VAR 0 2
83732: ARRAY
83733: NOT
83734: PUSH
83735: LD_EXP 59
83739: PUSH
83740: LD_VAR 0 2
83744: ARRAY
83745: OR
83746: IFFALSE 83750
// continue ;
83748: GO 83720
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83750: LD_ADDR_VAR 0 7
83754: PUSH
83755: LD_EXP 36
83759: PUSH
83760: LD_VAR 0 2
83764: ARRAY
83765: PUSH
83766: LD_INT 1
83768: ARRAY
83769: PPUSH
83770: CALL_OW 248
83774: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83775: LD_VAR 0 7
83779: PUSH
83780: LD_INT 3
83782: EQUAL
83783: PUSH
83784: LD_EXP 55
83788: PUSH
83789: LD_VAR 0 2
83793: ARRAY
83794: PUSH
83795: LD_EXP 58
83799: PUSH
83800: LD_VAR 0 2
83804: ARRAY
83805: UNION
83806: PPUSH
83807: LD_INT 33
83809: PUSH
83810: LD_INT 2
83812: PUSH
83813: EMPTY
83814: LIST
83815: LIST
83816: PPUSH
83817: CALL_OW 72
83821: NOT
83822: OR
83823: IFFALSE 83827
// continue ;
83825: GO 83720
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83827: LD_ADDR_VAR 0 9
83831: PUSH
83832: LD_EXP 36
83836: PUSH
83837: LD_VAR 0 2
83841: ARRAY
83842: PPUSH
83843: LD_INT 30
83845: PUSH
83846: LD_INT 36
83848: PUSH
83849: EMPTY
83850: LIST
83851: LIST
83852: PPUSH
83853: CALL_OW 72
83857: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83858: LD_ADDR_VAR 0 10
83862: PUSH
83863: LD_EXP 55
83867: PUSH
83868: LD_VAR 0 2
83872: ARRAY
83873: PPUSH
83874: LD_INT 34
83876: PUSH
83877: LD_INT 31
83879: PUSH
83880: EMPTY
83881: LIST
83882: LIST
83883: PPUSH
83884: CALL_OW 72
83888: ST_TO_ADDR
// if not cts and not mcts then
83889: LD_VAR 0 9
83893: NOT
83894: PUSH
83895: LD_VAR 0 10
83899: NOT
83900: AND
83901: IFFALSE 83905
// continue ;
83903: GO 83720
// x := cts ;
83905: LD_ADDR_VAR 0 11
83909: PUSH
83910: LD_VAR 0 9
83914: ST_TO_ADDR
// if not x then
83915: LD_VAR 0 11
83919: NOT
83920: IFFALSE 83932
// x := mcts ;
83922: LD_ADDR_VAR 0 11
83926: PUSH
83927: LD_VAR 0 10
83931: ST_TO_ADDR
// if not x then
83932: LD_VAR 0 11
83936: NOT
83937: IFFALSE 83941
// continue ;
83939: GO 83720
// if mc_remote_driver [ i ] then
83941: LD_EXP 76
83945: PUSH
83946: LD_VAR 0 2
83950: ARRAY
83951: IFFALSE 84338
// for j in mc_remote_driver [ i ] do
83953: LD_ADDR_VAR 0 3
83957: PUSH
83958: LD_EXP 76
83962: PUSH
83963: LD_VAR 0 2
83967: ARRAY
83968: PUSH
83969: FOR_IN
83970: IFFALSE 84336
// begin if GetClass ( j ) <> 3 then
83972: LD_VAR 0 3
83976: PPUSH
83977: CALL_OW 257
83981: PUSH
83982: LD_INT 3
83984: NONEQUAL
83985: IFFALSE 84038
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83987: LD_ADDR_EXP 76
83991: PUSH
83992: LD_EXP 76
83996: PPUSH
83997: LD_VAR 0 2
84001: PPUSH
84002: LD_EXP 76
84006: PUSH
84007: LD_VAR 0 2
84011: ARRAY
84012: PUSH
84013: LD_VAR 0 3
84017: DIFF
84018: PPUSH
84019: CALL_OW 1
84023: ST_TO_ADDR
// SetTag ( j , 0 ) ;
84024: LD_VAR 0 3
84028: PPUSH
84029: LD_INT 0
84031: PPUSH
84032: CALL_OW 109
// continue ;
84036: GO 83969
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
84038: LD_EXP 55
84042: PUSH
84043: LD_VAR 0 2
84047: ARRAY
84048: PPUSH
84049: LD_INT 34
84051: PUSH
84052: LD_INT 31
84054: PUSH
84055: EMPTY
84056: LIST
84057: LIST
84058: PUSH
84059: LD_INT 58
84061: PUSH
84062: EMPTY
84063: LIST
84064: PUSH
84065: EMPTY
84066: LIST
84067: LIST
84068: PPUSH
84069: CALL_OW 72
84073: PUSH
84074: LD_VAR 0 3
84078: PPUSH
84079: CALL 59941 0 1
84083: NOT
84084: AND
84085: IFFALSE 84156
// begin if IsInUnit ( j ) then
84087: LD_VAR 0 3
84091: PPUSH
84092: CALL_OW 310
84096: IFFALSE 84107
// ComExitBuilding ( j ) ;
84098: LD_VAR 0 3
84102: PPUSH
84103: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
84107: LD_VAR 0 3
84111: PPUSH
84112: LD_EXP 55
84116: PUSH
84117: LD_VAR 0 2
84121: ARRAY
84122: PPUSH
84123: LD_INT 34
84125: PUSH
84126: LD_INT 31
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 58
84135: PUSH
84136: EMPTY
84137: LIST
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: PPUSH
84143: CALL_OW 72
84147: PUSH
84148: LD_INT 1
84150: ARRAY
84151: PPUSH
84152: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
84156: LD_VAR 0 3
84160: PPUSH
84161: CALL_OW 310
84165: NOT
84166: PUSH
84167: LD_VAR 0 3
84171: PPUSH
84172: CALL_OW 310
84176: PPUSH
84177: CALL_OW 266
84181: PUSH
84182: LD_INT 36
84184: NONEQUAL
84185: PUSH
84186: LD_VAR 0 3
84190: PPUSH
84191: CALL 59941 0 1
84195: NOT
84196: AND
84197: OR
84198: IFFALSE 84334
// begin if IsInUnit ( j ) then
84200: LD_VAR 0 3
84204: PPUSH
84205: CALL_OW 310
84209: IFFALSE 84220
// ComExitBuilding ( j ) ;
84211: LD_VAR 0 3
84215: PPUSH
84216: CALL_OW 122
// ct := 0 ;
84220: LD_ADDR_VAR 0 8
84224: PUSH
84225: LD_INT 0
84227: ST_TO_ADDR
// for k in x do
84228: LD_ADDR_VAR 0 4
84232: PUSH
84233: LD_VAR 0 11
84237: PUSH
84238: FOR_IN
84239: IFFALSE 84312
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84241: LD_VAR 0 4
84245: PPUSH
84246: CALL_OW 264
84250: PUSH
84251: LD_INT 31
84253: EQUAL
84254: PUSH
84255: LD_VAR 0 4
84259: PPUSH
84260: CALL_OW 311
84264: NOT
84265: AND
84266: PUSH
84267: LD_VAR 0 4
84271: PPUSH
84272: CALL_OW 266
84276: PUSH
84277: LD_INT 36
84279: EQUAL
84280: PUSH
84281: LD_VAR 0 4
84285: PPUSH
84286: CALL_OW 313
84290: PUSH
84291: LD_INT 3
84293: LESS
84294: AND
84295: OR
84296: IFFALSE 84310
// begin ct := k ;
84298: LD_ADDR_VAR 0 8
84302: PUSH
84303: LD_VAR 0 4
84307: ST_TO_ADDR
// break ;
84308: GO 84312
// end ;
84310: GO 84238
84312: POP
84313: POP
// if ct then
84314: LD_VAR 0 8
84318: IFFALSE 84334
// ComEnterUnit ( j , ct ) ;
84320: LD_VAR 0 3
84324: PPUSH
84325: LD_VAR 0 8
84329: PPUSH
84330: CALL_OW 120
// end ; end ;
84334: GO 83969
84336: POP
84337: POP
// places := 0 ;
84338: LD_ADDR_VAR 0 5
84342: PUSH
84343: LD_INT 0
84345: ST_TO_ADDR
// for j = 1 to x do
84346: LD_ADDR_VAR 0 3
84350: PUSH
84351: DOUBLE
84352: LD_INT 1
84354: DEC
84355: ST_TO_ADDR
84356: LD_VAR 0 11
84360: PUSH
84361: FOR_TO
84362: IFFALSE 84438
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84364: LD_VAR 0 11
84368: PUSH
84369: LD_VAR 0 3
84373: ARRAY
84374: PPUSH
84375: CALL_OW 264
84379: PUSH
84380: LD_INT 31
84382: EQUAL
84383: IFFALSE 84401
// places := places + 1 else
84385: LD_ADDR_VAR 0 5
84389: PUSH
84390: LD_VAR 0 5
84394: PUSH
84395: LD_INT 1
84397: PLUS
84398: ST_TO_ADDR
84399: GO 84436
// if GetBType ( x [ j ] ) = b_control_tower then
84401: LD_VAR 0 11
84405: PUSH
84406: LD_VAR 0 3
84410: ARRAY
84411: PPUSH
84412: CALL_OW 266
84416: PUSH
84417: LD_INT 36
84419: EQUAL
84420: IFFALSE 84436
// places := places + 3 ;
84422: LD_ADDR_VAR 0 5
84426: PUSH
84427: LD_VAR 0 5
84431: PUSH
84432: LD_INT 3
84434: PLUS
84435: ST_TO_ADDR
84436: GO 84361
84438: POP
84439: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
84440: LD_VAR 0 5
84444: PUSH
84445: LD_INT 0
84447: EQUAL
84448: PUSH
84449: LD_VAR 0 5
84453: PUSH
84454: LD_EXP 76
84458: PUSH
84459: LD_VAR 0 2
84463: ARRAY
84464: LESSEQUAL
84465: OR
84466: IFFALSE 84470
// continue ;
84468: GO 83720
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84470: LD_ADDR_VAR 0 6
84474: PUSH
84475: LD_EXP 36
84479: PUSH
84480: LD_VAR 0 2
84484: ARRAY
84485: PPUSH
84486: LD_INT 25
84488: PUSH
84489: LD_INT 3
84491: PUSH
84492: EMPTY
84493: LIST
84494: LIST
84495: PPUSH
84496: CALL_OW 72
84500: PUSH
84501: LD_EXP 76
84505: PUSH
84506: LD_VAR 0 2
84510: ARRAY
84511: DIFF
84512: PPUSH
84513: LD_INT 3
84515: PPUSH
84516: CALL 60841 0 2
84520: ST_TO_ADDR
// for j in tmp do
84521: LD_ADDR_VAR 0 3
84525: PUSH
84526: LD_VAR 0 6
84530: PUSH
84531: FOR_IN
84532: IFFALSE 84567
// if GetTag ( j ) > 0 then
84534: LD_VAR 0 3
84538: PPUSH
84539: CALL_OW 110
84543: PUSH
84544: LD_INT 0
84546: GREATER
84547: IFFALSE 84565
// tmp := tmp diff j ;
84549: LD_ADDR_VAR 0 6
84553: PUSH
84554: LD_VAR 0 6
84558: PUSH
84559: LD_VAR 0 3
84563: DIFF
84564: ST_TO_ADDR
84565: GO 84531
84567: POP
84568: POP
// if not tmp then
84569: LD_VAR 0 6
84573: NOT
84574: IFFALSE 84578
// continue ;
84576: GO 83720
// if places then
84578: LD_VAR 0 5
84582: IFFALSE 84641
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84584: LD_ADDR_EXP 76
84588: PUSH
84589: LD_EXP 76
84593: PPUSH
84594: LD_VAR 0 2
84598: PPUSH
84599: LD_EXP 76
84603: PUSH
84604: LD_VAR 0 2
84608: ARRAY
84609: PUSH
84610: LD_VAR 0 6
84614: PUSH
84615: LD_INT 1
84617: ARRAY
84618: UNION
84619: PPUSH
84620: CALL_OW 1
84624: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84625: LD_VAR 0 6
84629: PUSH
84630: LD_INT 1
84632: ARRAY
84633: PPUSH
84634: LD_INT 126
84636: PPUSH
84637: CALL_OW 109
// end ; end ;
84641: GO 83720
84643: POP
84644: POP
// end ;
84645: LD_VAR 0 1
84649: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84650: LD_INT 0
84652: PPUSH
84653: PPUSH
84654: PPUSH
84655: PPUSH
84656: PPUSH
84657: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84658: LD_VAR 0 1
84662: NOT
84663: PUSH
84664: LD_VAR 0 2
84668: NOT
84669: OR
84670: PUSH
84671: LD_VAR 0 3
84675: NOT
84676: OR
84677: PUSH
84678: LD_VAR 0 4
84682: PUSH
84683: LD_INT 1
84685: PUSH
84686: LD_INT 2
84688: PUSH
84689: LD_INT 3
84691: PUSH
84692: LD_INT 4
84694: PUSH
84695: LD_INT 5
84697: PUSH
84698: LD_INT 8
84700: PUSH
84701: LD_INT 9
84703: PUSH
84704: LD_INT 15
84706: PUSH
84707: LD_INT 16
84709: PUSH
84710: EMPTY
84711: LIST
84712: LIST
84713: LIST
84714: LIST
84715: LIST
84716: LIST
84717: LIST
84718: LIST
84719: LIST
84720: IN
84721: NOT
84722: OR
84723: IFFALSE 84727
// exit ;
84725: GO 85627
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84727: LD_ADDR_VAR 0 2
84731: PUSH
84732: LD_VAR 0 2
84736: PPUSH
84737: LD_INT 21
84739: PUSH
84740: LD_INT 3
84742: PUSH
84743: EMPTY
84744: LIST
84745: LIST
84746: PUSH
84747: LD_INT 24
84749: PUSH
84750: LD_INT 250
84752: PUSH
84753: EMPTY
84754: LIST
84755: LIST
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PPUSH
84761: CALL_OW 72
84765: ST_TO_ADDR
// case class of 1 , 15 :
84766: LD_VAR 0 4
84770: PUSH
84771: LD_INT 1
84773: DOUBLE
84774: EQUAL
84775: IFTRUE 84785
84777: LD_INT 15
84779: DOUBLE
84780: EQUAL
84781: IFTRUE 84785
84783: GO 84870
84785: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84786: LD_ADDR_VAR 0 8
84790: PUSH
84791: LD_VAR 0 2
84795: PPUSH
84796: LD_INT 2
84798: PUSH
84799: LD_INT 30
84801: PUSH
84802: LD_INT 32
84804: PUSH
84805: EMPTY
84806: LIST
84807: LIST
84808: PUSH
84809: LD_INT 30
84811: PUSH
84812: LD_INT 31
84814: PUSH
84815: EMPTY
84816: LIST
84817: LIST
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: LIST
84823: PPUSH
84824: CALL_OW 72
84828: PUSH
84829: LD_VAR 0 2
84833: PPUSH
84834: LD_INT 2
84836: PUSH
84837: LD_INT 30
84839: PUSH
84840: LD_INT 4
84842: PUSH
84843: EMPTY
84844: LIST
84845: LIST
84846: PUSH
84847: LD_INT 30
84849: PUSH
84850: LD_INT 5
84852: PUSH
84853: EMPTY
84854: LIST
84855: LIST
84856: PUSH
84857: EMPTY
84858: LIST
84859: LIST
84860: LIST
84861: PPUSH
84862: CALL_OW 72
84866: ADD
84867: ST_TO_ADDR
84868: GO 85116
84870: LD_INT 2
84872: DOUBLE
84873: EQUAL
84874: IFTRUE 84884
84876: LD_INT 16
84878: DOUBLE
84879: EQUAL
84880: IFTRUE 84884
84882: GO 84930
84884: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84885: LD_ADDR_VAR 0 8
84889: PUSH
84890: LD_VAR 0 2
84894: PPUSH
84895: LD_INT 2
84897: PUSH
84898: LD_INT 30
84900: PUSH
84901: LD_INT 0
84903: PUSH
84904: EMPTY
84905: LIST
84906: LIST
84907: PUSH
84908: LD_INT 30
84910: PUSH
84911: LD_INT 1
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: PUSH
84918: EMPTY
84919: LIST
84920: LIST
84921: LIST
84922: PPUSH
84923: CALL_OW 72
84927: ST_TO_ADDR
84928: GO 85116
84930: LD_INT 3
84932: DOUBLE
84933: EQUAL
84934: IFTRUE 84938
84936: GO 84984
84938: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84939: LD_ADDR_VAR 0 8
84943: PUSH
84944: LD_VAR 0 2
84948: PPUSH
84949: LD_INT 2
84951: PUSH
84952: LD_INT 30
84954: PUSH
84955: LD_INT 2
84957: PUSH
84958: EMPTY
84959: LIST
84960: LIST
84961: PUSH
84962: LD_INT 30
84964: PUSH
84965: LD_INT 3
84967: PUSH
84968: EMPTY
84969: LIST
84970: LIST
84971: PUSH
84972: EMPTY
84973: LIST
84974: LIST
84975: LIST
84976: PPUSH
84977: CALL_OW 72
84981: ST_TO_ADDR
84982: GO 85116
84984: LD_INT 4
84986: DOUBLE
84987: EQUAL
84988: IFTRUE 84992
84990: GO 85049
84992: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84993: LD_ADDR_VAR 0 8
84997: PUSH
84998: LD_VAR 0 2
85002: PPUSH
85003: LD_INT 2
85005: PUSH
85006: LD_INT 30
85008: PUSH
85009: LD_INT 6
85011: PUSH
85012: EMPTY
85013: LIST
85014: LIST
85015: PUSH
85016: LD_INT 30
85018: PUSH
85019: LD_INT 7
85021: PUSH
85022: EMPTY
85023: LIST
85024: LIST
85025: PUSH
85026: LD_INT 30
85028: PUSH
85029: LD_INT 8
85031: PUSH
85032: EMPTY
85033: LIST
85034: LIST
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: LIST
85040: LIST
85041: PPUSH
85042: CALL_OW 72
85046: ST_TO_ADDR
85047: GO 85116
85049: LD_INT 5
85051: DOUBLE
85052: EQUAL
85053: IFTRUE 85069
85055: LD_INT 8
85057: DOUBLE
85058: EQUAL
85059: IFTRUE 85069
85061: LD_INT 9
85063: DOUBLE
85064: EQUAL
85065: IFTRUE 85069
85067: GO 85115
85069: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
85070: LD_ADDR_VAR 0 8
85074: PUSH
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_INT 2
85082: PUSH
85083: LD_INT 30
85085: PUSH
85086: LD_INT 4
85088: PUSH
85089: EMPTY
85090: LIST
85091: LIST
85092: PUSH
85093: LD_INT 30
85095: PUSH
85096: LD_INT 5
85098: PUSH
85099: EMPTY
85100: LIST
85101: LIST
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: LIST
85107: PPUSH
85108: CALL_OW 72
85112: ST_TO_ADDR
85113: GO 85116
85115: POP
// if not tmp then
85116: LD_VAR 0 8
85120: NOT
85121: IFFALSE 85125
// exit ;
85123: GO 85627
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
85125: LD_VAR 0 4
85129: PUSH
85130: LD_INT 1
85132: PUSH
85133: LD_INT 15
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: IN
85140: PUSH
85141: LD_EXP 45
85145: PUSH
85146: LD_VAR 0 1
85150: ARRAY
85151: AND
85152: IFFALSE 85308
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
85154: LD_ADDR_VAR 0 9
85158: PUSH
85159: LD_EXP 45
85163: PUSH
85164: LD_VAR 0 1
85168: ARRAY
85169: PUSH
85170: LD_INT 1
85172: ARRAY
85173: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
85174: LD_VAR 0 9
85178: PUSH
85179: LD_EXP 46
85183: PUSH
85184: LD_VAR 0 1
85188: ARRAY
85189: IN
85190: NOT
85191: IFFALSE 85306
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
85193: LD_ADDR_EXP 46
85197: PUSH
85198: LD_EXP 46
85202: PPUSH
85203: LD_VAR 0 1
85207: PUSH
85208: LD_EXP 46
85212: PUSH
85213: LD_VAR 0 1
85217: ARRAY
85218: PUSH
85219: LD_INT 1
85221: PLUS
85222: PUSH
85223: EMPTY
85224: LIST
85225: LIST
85226: PPUSH
85227: LD_VAR 0 9
85231: PPUSH
85232: CALL 26583 0 3
85236: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
85237: LD_ADDR_EXP 45
85241: PUSH
85242: LD_EXP 45
85246: PPUSH
85247: LD_VAR 0 1
85251: PPUSH
85252: LD_EXP 45
85256: PUSH
85257: LD_VAR 0 1
85261: ARRAY
85262: PUSH
85263: LD_VAR 0 9
85267: DIFF
85268: PPUSH
85269: CALL_OW 1
85273: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
85274: LD_VAR 0 3
85278: PPUSH
85279: LD_EXP 46
85283: PUSH
85284: LD_VAR 0 1
85288: ARRAY
85289: PUSH
85290: LD_EXP 46
85294: PUSH
85295: LD_VAR 0 1
85299: ARRAY
85300: ARRAY
85301: PPUSH
85302: CALL_OW 120
// end ; exit ;
85306: GO 85627
// end ; if tmp > 1 then
85308: LD_VAR 0 8
85312: PUSH
85313: LD_INT 1
85315: GREATER
85316: IFFALSE 85420
// for i = 2 to tmp do
85318: LD_ADDR_VAR 0 6
85322: PUSH
85323: DOUBLE
85324: LD_INT 2
85326: DEC
85327: ST_TO_ADDR
85328: LD_VAR 0 8
85332: PUSH
85333: FOR_TO
85334: IFFALSE 85418
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85336: LD_VAR 0 8
85340: PUSH
85341: LD_VAR 0 6
85345: ARRAY
85346: PPUSH
85347: CALL_OW 461
85351: PUSH
85352: LD_INT 6
85354: EQUAL
85355: IFFALSE 85416
// begin x := tmp [ i ] ;
85357: LD_ADDR_VAR 0 9
85361: PUSH
85362: LD_VAR 0 8
85366: PUSH
85367: LD_VAR 0 6
85371: ARRAY
85372: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85373: LD_ADDR_VAR 0 8
85377: PUSH
85378: LD_VAR 0 8
85382: PPUSH
85383: LD_VAR 0 6
85387: PPUSH
85388: CALL_OW 3
85392: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85393: LD_ADDR_VAR 0 8
85397: PUSH
85398: LD_VAR 0 8
85402: PPUSH
85403: LD_INT 1
85405: PPUSH
85406: LD_VAR 0 9
85410: PPUSH
85411: CALL_OW 2
85415: ST_TO_ADDR
// end ;
85416: GO 85333
85418: POP
85419: POP
// for i in tmp do
85420: LD_ADDR_VAR 0 6
85424: PUSH
85425: LD_VAR 0 8
85429: PUSH
85430: FOR_IN
85431: IFFALSE 85500
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85433: LD_VAR 0 6
85437: PPUSH
85438: CALL_OW 313
85442: PUSH
85443: LD_INT 6
85445: LESS
85446: PUSH
85447: LD_VAR 0 6
85451: PPUSH
85452: CALL_OW 266
85456: PUSH
85457: LD_INT 31
85459: PUSH
85460: LD_INT 32
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: IN
85467: NOT
85468: AND
85469: PUSH
85470: LD_VAR 0 6
85474: PPUSH
85475: CALL_OW 313
85479: PUSH
85480: LD_INT 0
85482: EQUAL
85483: OR
85484: IFFALSE 85498
// begin j := i ;
85486: LD_ADDR_VAR 0 7
85490: PUSH
85491: LD_VAR 0 6
85495: ST_TO_ADDR
// break ;
85496: GO 85500
// end ; end ;
85498: GO 85430
85500: POP
85501: POP
// if j then
85502: LD_VAR 0 7
85506: IFFALSE 85524
// ComEnterUnit ( unit , j ) else
85508: LD_VAR 0 3
85512: PPUSH
85513: LD_VAR 0 7
85517: PPUSH
85518: CALL_OW 120
85522: GO 85627
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85524: LD_ADDR_VAR 0 10
85528: PUSH
85529: LD_VAR 0 2
85533: PPUSH
85534: LD_INT 2
85536: PUSH
85537: LD_INT 30
85539: PUSH
85540: LD_INT 0
85542: PUSH
85543: EMPTY
85544: LIST
85545: LIST
85546: PUSH
85547: LD_INT 30
85549: PUSH
85550: LD_INT 1
85552: PUSH
85553: EMPTY
85554: LIST
85555: LIST
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: LIST
85561: PPUSH
85562: CALL_OW 72
85566: ST_TO_ADDR
// if depot then
85567: LD_VAR 0 10
85571: IFFALSE 85627
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85573: LD_ADDR_VAR 0 10
85577: PUSH
85578: LD_VAR 0 10
85582: PPUSH
85583: LD_VAR 0 3
85587: PPUSH
85588: CALL_OW 74
85592: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85593: LD_VAR 0 3
85597: PPUSH
85598: LD_VAR 0 10
85602: PPUSH
85603: CALL_OW 296
85607: PUSH
85608: LD_INT 10
85610: GREATER
85611: IFFALSE 85627
// ComStandNearbyBuilding ( unit , depot ) ;
85613: LD_VAR 0 3
85617: PPUSH
85618: LD_VAR 0 10
85622: PPUSH
85623: CALL 20786 0 2
// end ; end ; end ;
85627: LD_VAR 0 5
85631: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85632: LD_INT 0
85634: PPUSH
85635: PPUSH
85636: PPUSH
85637: PPUSH
// if not mc_bases then
85638: LD_EXP 36
85642: NOT
85643: IFFALSE 85647
// exit ;
85645: GO 85886
// for i = 1 to mc_bases do
85647: LD_ADDR_VAR 0 2
85651: PUSH
85652: DOUBLE
85653: LD_INT 1
85655: DEC
85656: ST_TO_ADDR
85657: LD_EXP 36
85661: PUSH
85662: FOR_TO
85663: IFFALSE 85884
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85665: LD_ADDR_VAR 0 4
85669: PUSH
85670: LD_EXP 36
85674: PUSH
85675: LD_VAR 0 2
85679: ARRAY
85680: PPUSH
85681: LD_INT 21
85683: PUSH
85684: LD_INT 1
85686: PUSH
85687: EMPTY
85688: LIST
85689: LIST
85690: PPUSH
85691: CALL_OW 72
85695: PUSH
85696: LD_EXP 65
85700: PUSH
85701: LD_VAR 0 2
85705: ARRAY
85706: UNION
85707: ST_TO_ADDR
// if not tmp then
85708: LD_VAR 0 4
85712: NOT
85713: IFFALSE 85717
// continue ;
85715: GO 85662
// for j in tmp do
85717: LD_ADDR_VAR 0 3
85721: PUSH
85722: LD_VAR 0 4
85726: PUSH
85727: FOR_IN
85728: IFFALSE 85880
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85730: LD_VAR 0 3
85734: PPUSH
85735: CALL_OW 110
85739: NOT
85740: PUSH
85741: LD_VAR 0 3
85745: PPUSH
85746: CALL_OW 314
85750: NOT
85751: AND
85752: PUSH
85753: LD_VAR 0 3
85757: PPUSH
85758: CALL_OW 311
85762: NOT
85763: AND
85764: PUSH
85765: LD_VAR 0 3
85769: PPUSH
85770: CALL_OW 310
85774: NOT
85775: AND
85776: PUSH
85777: LD_VAR 0 3
85781: PUSH
85782: LD_EXP 39
85786: PUSH
85787: LD_VAR 0 2
85791: ARRAY
85792: PUSH
85793: LD_INT 1
85795: ARRAY
85796: IN
85797: NOT
85798: AND
85799: PUSH
85800: LD_VAR 0 3
85804: PUSH
85805: LD_EXP 39
85809: PUSH
85810: LD_VAR 0 2
85814: ARRAY
85815: PUSH
85816: LD_INT 2
85818: ARRAY
85819: IN
85820: NOT
85821: AND
85822: PUSH
85823: LD_VAR 0 3
85827: PUSH
85828: LD_EXP 48
85832: PUSH
85833: LD_VAR 0 2
85837: ARRAY
85838: IN
85839: NOT
85840: AND
85841: IFFALSE 85878
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85843: LD_VAR 0 2
85847: PPUSH
85848: LD_EXP 36
85852: PUSH
85853: LD_VAR 0 2
85857: ARRAY
85858: PPUSH
85859: LD_VAR 0 3
85863: PPUSH
85864: LD_VAR 0 3
85868: PPUSH
85869: CALL_OW 257
85873: PPUSH
85874: CALL 84650 0 4
// end ;
85878: GO 85727
85880: POP
85881: POP
// end ;
85882: GO 85662
85884: POP
85885: POP
// end ;
85886: LD_VAR 0 1
85890: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85891: LD_INT 0
85893: PPUSH
85894: PPUSH
85895: PPUSH
85896: PPUSH
85897: PPUSH
85898: PPUSH
// if not mc_bases [ base ] then
85899: LD_EXP 36
85903: PUSH
85904: LD_VAR 0 1
85908: ARRAY
85909: NOT
85910: IFFALSE 85914
// exit ;
85912: GO 86096
// tmp := [ ] ;
85914: LD_ADDR_VAR 0 6
85918: PUSH
85919: EMPTY
85920: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85921: LD_ADDR_VAR 0 7
85925: PUSH
85926: LD_VAR 0 3
85930: PPUSH
85931: LD_INT 0
85933: PPUSH
85934: CALL_OW 517
85938: ST_TO_ADDR
// if not list then
85939: LD_VAR 0 7
85943: NOT
85944: IFFALSE 85948
// exit ;
85946: GO 86096
// for i = 1 to amount do
85948: LD_ADDR_VAR 0 5
85952: PUSH
85953: DOUBLE
85954: LD_INT 1
85956: DEC
85957: ST_TO_ADDR
85958: LD_VAR 0 2
85962: PUSH
85963: FOR_TO
85964: IFFALSE 86044
// begin x := rand ( 1 , list [ 1 ] ) ;
85966: LD_ADDR_VAR 0 8
85970: PUSH
85971: LD_INT 1
85973: PPUSH
85974: LD_VAR 0 7
85978: PUSH
85979: LD_INT 1
85981: ARRAY
85982: PPUSH
85983: CALL_OW 12
85987: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85988: LD_ADDR_VAR 0 6
85992: PUSH
85993: LD_VAR 0 6
85997: PPUSH
85998: LD_VAR 0 5
86002: PPUSH
86003: LD_VAR 0 7
86007: PUSH
86008: LD_INT 1
86010: ARRAY
86011: PUSH
86012: LD_VAR 0 8
86016: ARRAY
86017: PUSH
86018: LD_VAR 0 7
86022: PUSH
86023: LD_INT 2
86025: ARRAY
86026: PUSH
86027: LD_VAR 0 8
86031: ARRAY
86032: PUSH
86033: EMPTY
86034: LIST
86035: LIST
86036: PPUSH
86037: CALL_OW 1
86041: ST_TO_ADDR
// end ;
86042: GO 85963
86044: POP
86045: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
86046: LD_ADDR_EXP 49
86050: PUSH
86051: LD_EXP 49
86055: PPUSH
86056: LD_VAR 0 1
86060: PPUSH
86061: LD_VAR 0 6
86065: PPUSH
86066: CALL_OW 1
86070: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
86071: LD_ADDR_EXP 51
86075: PUSH
86076: LD_EXP 51
86080: PPUSH
86081: LD_VAR 0 1
86085: PPUSH
86086: LD_VAR 0 3
86090: PPUSH
86091: CALL_OW 1
86095: ST_TO_ADDR
// end ;
86096: LD_VAR 0 4
86100: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
86101: LD_INT 0
86103: PPUSH
// if not mc_bases [ base ] then
86104: LD_EXP 36
86108: PUSH
86109: LD_VAR 0 1
86113: ARRAY
86114: NOT
86115: IFFALSE 86119
// exit ;
86117: GO 86144
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
86119: LD_ADDR_EXP 41
86123: PUSH
86124: LD_EXP 41
86128: PPUSH
86129: LD_VAR 0 1
86133: PPUSH
86134: LD_VAR 0 2
86138: PPUSH
86139: CALL_OW 1
86143: ST_TO_ADDR
// end ;
86144: LD_VAR 0 3
86148: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
86149: LD_INT 0
86151: PPUSH
// if not mc_bases [ base ] then
86152: LD_EXP 36
86156: PUSH
86157: LD_VAR 0 1
86161: ARRAY
86162: NOT
86163: IFFALSE 86167
// exit ;
86165: GO 86204
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
86167: LD_ADDR_EXP 41
86171: PUSH
86172: LD_EXP 41
86176: PPUSH
86177: LD_VAR 0 1
86181: PPUSH
86182: LD_EXP 41
86186: PUSH
86187: LD_VAR 0 1
86191: ARRAY
86192: PUSH
86193: LD_VAR 0 2
86197: UNION
86198: PPUSH
86199: CALL_OW 1
86203: ST_TO_ADDR
// end ;
86204: LD_VAR 0 3
86208: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
86209: LD_INT 0
86211: PPUSH
// if not mc_bases [ base ] then
86212: LD_EXP 36
86216: PUSH
86217: LD_VAR 0 1
86221: ARRAY
86222: NOT
86223: IFFALSE 86227
// exit ;
86225: GO 86252
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
86227: LD_ADDR_EXP 57
86231: PUSH
86232: LD_EXP 57
86236: PPUSH
86237: LD_VAR 0 1
86241: PPUSH
86242: LD_VAR 0 2
86246: PPUSH
86247: CALL_OW 1
86251: ST_TO_ADDR
// end ;
86252: LD_VAR 0 3
86256: RET
// export function MC_InsertProduceList ( base , components ) ; begin
86257: LD_INT 0
86259: PPUSH
// if not mc_bases [ base ] then
86260: LD_EXP 36
86264: PUSH
86265: LD_VAR 0 1
86269: ARRAY
86270: NOT
86271: IFFALSE 86275
// exit ;
86273: GO 86312
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
86275: LD_ADDR_EXP 57
86279: PUSH
86280: LD_EXP 57
86284: PPUSH
86285: LD_VAR 0 1
86289: PPUSH
86290: LD_EXP 57
86294: PUSH
86295: LD_VAR 0 1
86299: ARRAY
86300: PUSH
86301: LD_VAR 0 2
86305: ADD
86306: PPUSH
86307: CALL_OW 1
86311: ST_TO_ADDR
// end ;
86312: LD_VAR 0 3
86316: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86317: LD_INT 0
86319: PPUSH
// if not mc_bases [ base ] then
86320: LD_EXP 36
86324: PUSH
86325: LD_VAR 0 1
86329: ARRAY
86330: NOT
86331: IFFALSE 86335
// exit ;
86333: GO 86389
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86335: LD_ADDR_EXP 58
86339: PUSH
86340: LD_EXP 58
86344: PPUSH
86345: LD_VAR 0 1
86349: PPUSH
86350: LD_VAR 0 2
86354: PPUSH
86355: CALL_OW 1
86359: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86360: LD_ADDR_EXP 47
86364: PUSH
86365: LD_EXP 47
86369: PPUSH
86370: LD_VAR 0 1
86374: PPUSH
86375: LD_VAR 0 2
86379: PUSH
86380: LD_INT 0
86382: PLUS
86383: PPUSH
86384: CALL_OW 1
86388: ST_TO_ADDR
// end ;
86389: LD_VAR 0 3
86393: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86394: LD_INT 0
86396: PPUSH
// if not mc_bases [ base ] then
86397: LD_EXP 36
86401: PUSH
86402: LD_VAR 0 1
86406: ARRAY
86407: NOT
86408: IFFALSE 86412
// exit ;
86410: GO 86437
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86412: LD_ADDR_EXP 47
86416: PUSH
86417: LD_EXP 47
86421: PPUSH
86422: LD_VAR 0 1
86426: PPUSH
86427: LD_VAR 0 2
86431: PPUSH
86432: CALL_OW 1
86436: ST_TO_ADDR
// end ;
86437: LD_VAR 0 3
86441: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86442: LD_INT 0
86444: PPUSH
86445: PPUSH
86446: PPUSH
86447: PPUSH
// if not mc_bases [ base ] then
86448: LD_EXP 36
86452: PUSH
86453: LD_VAR 0 1
86457: ARRAY
86458: NOT
86459: IFFALSE 86463
// exit ;
86461: GO 86528
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86463: LD_ADDR_EXP 56
86467: PUSH
86468: LD_EXP 56
86472: PPUSH
86473: LD_VAR 0 1
86477: PUSH
86478: LD_EXP 56
86482: PUSH
86483: LD_VAR 0 1
86487: ARRAY
86488: PUSH
86489: LD_INT 1
86491: PLUS
86492: PUSH
86493: EMPTY
86494: LIST
86495: LIST
86496: PPUSH
86497: LD_VAR 0 1
86501: PUSH
86502: LD_VAR 0 2
86506: PUSH
86507: LD_VAR 0 3
86511: PUSH
86512: LD_VAR 0 4
86516: PUSH
86517: EMPTY
86518: LIST
86519: LIST
86520: LIST
86521: LIST
86522: PPUSH
86523: CALL 26583 0 3
86527: ST_TO_ADDR
// end ;
86528: LD_VAR 0 5
86532: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86533: LD_INT 0
86535: PPUSH
// if not mc_bases [ base ] then
86536: LD_EXP 36
86540: PUSH
86541: LD_VAR 0 1
86545: ARRAY
86546: NOT
86547: IFFALSE 86551
// exit ;
86549: GO 86576
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86551: LD_ADDR_EXP 73
86555: PUSH
86556: LD_EXP 73
86560: PPUSH
86561: LD_VAR 0 1
86565: PPUSH
86566: LD_VAR 0 2
86570: PPUSH
86571: CALL_OW 1
86575: ST_TO_ADDR
// end ;
86576: LD_VAR 0 3
86580: RET
// export function MC_GetMinesField ( base ) ; begin
86581: LD_INT 0
86583: PPUSH
// result := mc_mines [ base ] ;
86584: LD_ADDR_VAR 0 2
86588: PUSH
86589: LD_EXP 49
86593: PUSH
86594: LD_VAR 0 1
86598: ARRAY
86599: ST_TO_ADDR
// end ;
86600: LD_VAR 0 2
86604: RET
// export function MC_GetProduceList ( base ) ; begin
86605: LD_INT 0
86607: PPUSH
// result := mc_produce [ base ] ;
86608: LD_ADDR_VAR 0 2
86612: PUSH
86613: LD_EXP 57
86617: PUSH
86618: LD_VAR 0 1
86622: ARRAY
86623: ST_TO_ADDR
// end ;
86624: LD_VAR 0 2
86628: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86629: LD_INT 0
86631: PPUSH
86632: PPUSH
// if not mc_bases then
86633: LD_EXP 36
86637: NOT
86638: IFFALSE 86642
// exit ;
86640: GO 86707
// if mc_bases [ base ] then
86642: LD_EXP 36
86646: PUSH
86647: LD_VAR 0 1
86651: ARRAY
86652: IFFALSE 86707
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86654: LD_ADDR_VAR 0 3
86658: PUSH
86659: LD_EXP 36
86663: PUSH
86664: LD_VAR 0 1
86668: ARRAY
86669: PPUSH
86670: LD_INT 30
86672: PUSH
86673: LD_VAR 0 2
86677: PUSH
86678: EMPTY
86679: LIST
86680: LIST
86681: PPUSH
86682: CALL_OW 72
86686: ST_TO_ADDR
// if result then
86687: LD_VAR 0 3
86691: IFFALSE 86707
// result := result [ 1 ] ;
86693: LD_ADDR_VAR 0 3
86697: PUSH
86698: LD_VAR 0 3
86702: PUSH
86703: LD_INT 1
86705: ARRAY
86706: ST_TO_ADDR
// end ; end ;
86707: LD_VAR 0 3
86711: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86712: LD_INT 0
86714: PPUSH
86715: PPUSH
// if not mc_bases then
86716: LD_EXP 36
86720: NOT
86721: IFFALSE 86725
// exit ;
86723: GO 86770
// if mc_bases [ base ] then
86725: LD_EXP 36
86729: PUSH
86730: LD_VAR 0 1
86734: ARRAY
86735: IFFALSE 86770
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86737: LD_ADDR_VAR 0 3
86741: PUSH
86742: LD_EXP 36
86746: PUSH
86747: LD_VAR 0 1
86751: ARRAY
86752: PPUSH
86753: LD_INT 30
86755: PUSH
86756: LD_VAR 0 2
86760: PUSH
86761: EMPTY
86762: LIST
86763: LIST
86764: PPUSH
86765: CALL_OW 72
86769: ST_TO_ADDR
// end ;
86770: LD_VAR 0 3
86774: RET
// export function MC_SetTame ( base , area ) ; begin
86775: LD_INT 0
86777: PPUSH
// if not mc_bases or not base then
86778: LD_EXP 36
86782: NOT
86783: PUSH
86784: LD_VAR 0 1
86788: NOT
86789: OR
86790: IFFALSE 86794
// exit ;
86792: GO 86819
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86794: LD_ADDR_EXP 64
86798: PUSH
86799: LD_EXP 64
86803: PPUSH
86804: LD_VAR 0 1
86808: PPUSH
86809: LD_VAR 0 2
86813: PPUSH
86814: CALL_OW 1
86818: ST_TO_ADDR
// end ;
86819: LD_VAR 0 3
86823: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86824: LD_INT 0
86826: PPUSH
86827: PPUSH
// if not mc_bases or not base then
86828: LD_EXP 36
86832: NOT
86833: PUSH
86834: LD_VAR 0 1
86838: NOT
86839: OR
86840: IFFALSE 86844
// exit ;
86842: GO 86946
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86844: LD_ADDR_VAR 0 4
86848: PUSH
86849: LD_EXP 36
86853: PUSH
86854: LD_VAR 0 1
86858: ARRAY
86859: PPUSH
86860: LD_INT 30
86862: PUSH
86863: LD_VAR 0 2
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: PPUSH
86872: CALL_OW 72
86876: ST_TO_ADDR
// if not tmp then
86877: LD_VAR 0 4
86881: NOT
86882: IFFALSE 86886
// exit ;
86884: GO 86946
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86886: LD_ADDR_EXP 68
86890: PUSH
86891: LD_EXP 68
86895: PPUSH
86896: LD_VAR 0 1
86900: PPUSH
86901: LD_EXP 68
86905: PUSH
86906: LD_VAR 0 1
86910: ARRAY
86911: PPUSH
86912: LD_EXP 68
86916: PUSH
86917: LD_VAR 0 1
86921: ARRAY
86922: PUSH
86923: LD_INT 1
86925: PLUS
86926: PPUSH
86927: LD_VAR 0 4
86931: PUSH
86932: LD_INT 1
86934: ARRAY
86935: PPUSH
86936: CALL_OW 2
86940: PPUSH
86941: CALL_OW 1
86945: ST_TO_ADDR
// end ;
86946: LD_VAR 0 3
86950: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86951: LD_INT 0
86953: PPUSH
86954: PPUSH
// if not mc_bases or not base or not kinds then
86955: LD_EXP 36
86959: NOT
86960: PUSH
86961: LD_VAR 0 1
86965: NOT
86966: OR
86967: PUSH
86968: LD_VAR 0 2
86972: NOT
86973: OR
86974: IFFALSE 86978
// exit ;
86976: GO 87039
// for i in kinds do
86978: LD_ADDR_VAR 0 4
86982: PUSH
86983: LD_VAR 0 2
86987: PUSH
86988: FOR_IN
86989: IFFALSE 87037
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86991: LD_ADDR_EXP 70
86995: PUSH
86996: LD_EXP 70
87000: PPUSH
87001: LD_VAR 0 1
87005: PUSH
87006: LD_EXP 70
87010: PUSH
87011: LD_VAR 0 1
87015: ARRAY
87016: PUSH
87017: LD_INT 1
87019: PLUS
87020: PUSH
87021: EMPTY
87022: LIST
87023: LIST
87024: PPUSH
87025: LD_VAR 0 4
87029: PPUSH
87030: CALL 26583 0 3
87034: ST_TO_ADDR
87035: GO 86988
87037: POP
87038: POP
// end ;
87039: LD_VAR 0 3
87043: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
87044: LD_INT 0
87046: PPUSH
// if not mc_bases or not base or not areas then
87047: LD_EXP 36
87051: NOT
87052: PUSH
87053: LD_VAR 0 1
87057: NOT
87058: OR
87059: PUSH
87060: LD_VAR 0 2
87064: NOT
87065: OR
87066: IFFALSE 87070
// exit ;
87068: GO 87095
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
87070: LD_ADDR_EXP 54
87074: PUSH
87075: LD_EXP 54
87079: PPUSH
87080: LD_VAR 0 1
87084: PPUSH
87085: LD_VAR 0 2
87089: PPUSH
87090: CALL_OW 1
87094: ST_TO_ADDR
// end ;
87095: LD_VAR 0 3
87099: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
87100: LD_INT 0
87102: PPUSH
// if not mc_bases or not base or not teleports_exit then
87103: LD_EXP 36
87107: NOT
87108: PUSH
87109: LD_VAR 0 1
87113: NOT
87114: OR
87115: PUSH
87116: LD_VAR 0 2
87120: NOT
87121: OR
87122: IFFALSE 87126
// exit ;
87124: GO 87151
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
87126: LD_ADDR_EXP 71
87130: PUSH
87131: LD_EXP 71
87135: PPUSH
87136: LD_VAR 0 1
87140: PPUSH
87141: LD_VAR 0 2
87145: PPUSH
87146: CALL_OW 1
87150: ST_TO_ADDR
// end ;
87151: LD_VAR 0 3
87155: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
87156: LD_INT 0
87158: PPUSH
87159: PPUSH
87160: PPUSH
// if not mc_bases or not base or not ext_list then
87161: LD_EXP 36
87165: NOT
87166: PUSH
87167: LD_VAR 0 1
87171: NOT
87172: OR
87173: PUSH
87174: LD_VAR 0 5
87178: NOT
87179: OR
87180: IFFALSE 87184
// exit ;
87182: GO 87357
// tmp := GetFacExtXYD ( x , y , d ) ;
87184: LD_ADDR_VAR 0 8
87188: PUSH
87189: LD_VAR 0 2
87193: PPUSH
87194: LD_VAR 0 3
87198: PPUSH
87199: LD_VAR 0 4
87203: PPUSH
87204: CALL 59971 0 3
87208: ST_TO_ADDR
// if not tmp then
87209: LD_VAR 0 8
87213: NOT
87214: IFFALSE 87218
// exit ;
87216: GO 87357
// for i in tmp do
87218: LD_ADDR_VAR 0 7
87222: PUSH
87223: LD_VAR 0 8
87227: PUSH
87228: FOR_IN
87229: IFFALSE 87355
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
87231: LD_ADDR_EXP 41
87235: PUSH
87236: LD_EXP 41
87240: PPUSH
87241: LD_VAR 0 1
87245: PPUSH
87246: LD_EXP 41
87250: PUSH
87251: LD_VAR 0 1
87255: ARRAY
87256: PPUSH
87257: LD_EXP 41
87261: PUSH
87262: LD_VAR 0 1
87266: ARRAY
87267: PUSH
87268: LD_INT 1
87270: PLUS
87271: PPUSH
87272: LD_VAR 0 5
87276: PUSH
87277: LD_INT 1
87279: ARRAY
87280: PUSH
87281: LD_VAR 0 7
87285: PUSH
87286: LD_INT 1
87288: ARRAY
87289: PUSH
87290: LD_VAR 0 7
87294: PUSH
87295: LD_INT 2
87297: ARRAY
87298: PUSH
87299: LD_VAR 0 7
87303: PUSH
87304: LD_INT 3
87306: ARRAY
87307: PUSH
87308: EMPTY
87309: LIST
87310: LIST
87311: LIST
87312: LIST
87313: PPUSH
87314: CALL_OW 2
87318: PPUSH
87319: CALL_OW 1
87323: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87324: LD_ADDR_VAR 0 5
87328: PUSH
87329: LD_VAR 0 5
87333: PPUSH
87334: LD_INT 1
87336: PPUSH
87337: CALL_OW 3
87341: ST_TO_ADDR
// if not ext_list then
87342: LD_VAR 0 5
87346: NOT
87347: IFFALSE 87353
// exit ;
87349: POP
87350: POP
87351: GO 87357
// end ;
87353: GO 87228
87355: POP
87356: POP
// end ;
87357: LD_VAR 0 6
87361: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87362: LD_INT 0
87364: PPUSH
// if not mc_bases or not base or not weapon_list then
87365: LD_EXP 36
87369: NOT
87370: PUSH
87371: LD_VAR 0 1
87375: NOT
87376: OR
87377: PUSH
87378: LD_VAR 0 2
87382: NOT
87383: OR
87384: IFFALSE 87388
// exit ;
87386: GO 87413
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87388: LD_ADDR_EXP 75
87392: PUSH
87393: LD_EXP 75
87397: PPUSH
87398: LD_VAR 0 1
87402: PPUSH
87403: LD_VAR 0 2
87407: PPUSH
87408: CALL_OW 1
87412: ST_TO_ADDR
// end ;
87413: LD_VAR 0 3
87417: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87418: LD_INT 0
87420: PPUSH
// if not mc_bases or not base or not tech_list then
87421: LD_EXP 36
87425: NOT
87426: PUSH
87427: LD_VAR 0 1
87431: NOT
87432: OR
87433: PUSH
87434: LD_VAR 0 2
87438: NOT
87439: OR
87440: IFFALSE 87444
// exit ;
87442: GO 87469
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87444: LD_ADDR_EXP 63
87448: PUSH
87449: LD_EXP 63
87453: PPUSH
87454: LD_VAR 0 1
87458: PPUSH
87459: LD_VAR 0 2
87463: PPUSH
87464: CALL_OW 1
87468: ST_TO_ADDR
// end ;
87469: LD_VAR 0 3
87473: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87474: LD_INT 0
87476: PPUSH
// if not mc_bases or not parking_area or not base then
87477: LD_EXP 36
87481: NOT
87482: PUSH
87483: LD_VAR 0 2
87487: NOT
87488: OR
87489: PUSH
87490: LD_VAR 0 1
87494: NOT
87495: OR
87496: IFFALSE 87500
// exit ;
87498: GO 87525
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87500: LD_ADDR_EXP 60
87504: PUSH
87505: LD_EXP 60
87509: PPUSH
87510: LD_VAR 0 1
87514: PPUSH
87515: LD_VAR 0 2
87519: PPUSH
87520: CALL_OW 1
87524: ST_TO_ADDR
// end ;
87525: LD_VAR 0 3
87529: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87530: LD_INT 0
87532: PPUSH
// if not mc_bases or not base or not scan_area then
87533: LD_EXP 36
87537: NOT
87538: PUSH
87539: LD_VAR 0 1
87543: NOT
87544: OR
87545: PUSH
87546: LD_VAR 0 2
87550: NOT
87551: OR
87552: IFFALSE 87556
// exit ;
87554: GO 87581
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87556: LD_ADDR_EXP 61
87560: PUSH
87561: LD_EXP 61
87565: PPUSH
87566: LD_VAR 0 1
87570: PPUSH
87571: LD_VAR 0 2
87575: PPUSH
87576: CALL_OW 1
87580: ST_TO_ADDR
// end ;
87581: LD_VAR 0 3
87585: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87586: LD_INT 0
87588: PPUSH
87589: PPUSH
// if not mc_bases or not base then
87590: LD_EXP 36
87594: NOT
87595: PUSH
87596: LD_VAR 0 1
87600: NOT
87601: OR
87602: IFFALSE 87606
// exit ;
87604: GO 87670
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87606: LD_ADDR_VAR 0 3
87610: PUSH
87611: LD_INT 1
87613: PUSH
87614: LD_INT 2
87616: PUSH
87617: LD_INT 3
87619: PUSH
87620: LD_INT 4
87622: PUSH
87623: LD_INT 11
87625: PUSH
87626: EMPTY
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: LIST
87632: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87633: LD_ADDR_EXP 63
87637: PUSH
87638: LD_EXP 63
87642: PPUSH
87643: LD_VAR 0 1
87647: PPUSH
87648: LD_EXP 63
87652: PUSH
87653: LD_VAR 0 1
87657: ARRAY
87658: PUSH
87659: LD_VAR 0 3
87663: DIFF
87664: PPUSH
87665: CALL_OW 1
87669: ST_TO_ADDR
// end ;
87670: LD_VAR 0 2
87674: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87675: LD_INT 0
87677: PPUSH
// result := mc_vehicles [ base ] ;
87678: LD_ADDR_VAR 0 3
87682: PUSH
87683: LD_EXP 55
87687: PUSH
87688: LD_VAR 0 1
87692: ARRAY
87693: ST_TO_ADDR
// if onlyCombat then
87694: LD_VAR 0 2
87698: IFFALSE 87863
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87700: LD_ADDR_VAR 0 3
87704: PUSH
87705: LD_VAR 0 3
87709: PUSH
87710: LD_VAR 0 3
87714: PPUSH
87715: LD_INT 2
87717: PUSH
87718: LD_INT 34
87720: PUSH
87721: LD_INT 12
87723: PUSH
87724: EMPTY
87725: LIST
87726: LIST
87727: PUSH
87728: LD_INT 34
87730: PUSH
87731: LD_INT 51
87733: PUSH
87734: EMPTY
87735: LIST
87736: LIST
87737: PUSH
87738: LD_INT 34
87740: PUSH
87741: LD_EXP 30
87745: PUSH
87746: EMPTY
87747: LIST
87748: LIST
87749: PUSH
87750: LD_INT 34
87752: PUSH
87753: LD_INT 32
87755: PUSH
87756: EMPTY
87757: LIST
87758: LIST
87759: PUSH
87760: LD_INT 34
87762: PUSH
87763: LD_INT 13
87765: PUSH
87766: EMPTY
87767: LIST
87768: LIST
87769: PUSH
87770: LD_INT 34
87772: PUSH
87773: LD_INT 52
87775: PUSH
87776: EMPTY
87777: LIST
87778: LIST
87779: PUSH
87780: LD_INT 34
87782: PUSH
87783: LD_INT 14
87785: PUSH
87786: EMPTY
87787: LIST
87788: LIST
87789: PUSH
87790: LD_INT 34
87792: PUSH
87793: LD_INT 53
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: PUSH
87800: LD_INT 34
87802: PUSH
87803: LD_EXP 29
87807: PUSH
87808: EMPTY
87809: LIST
87810: LIST
87811: PUSH
87812: LD_INT 34
87814: PUSH
87815: LD_INT 31
87817: PUSH
87818: EMPTY
87819: LIST
87820: LIST
87821: PUSH
87822: LD_INT 34
87824: PUSH
87825: LD_INT 48
87827: PUSH
87828: EMPTY
87829: LIST
87830: LIST
87831: PUSH
87832: LD_INT 34
87834: PUSH
87835: LD_INT 8
87837: PUSH
87838: EMPTY
87839: LIST
87840: LIST
87841: PUSH
87842: EMPTY
87843: LIST
87844: LIST
87845: LIST
87846: LIST
87847: LIST
87848: LIST
87849: LIST
87850: LIST
87851: LIST
87852: LIST
87853: LIST
87854: LIST
87855: LIST
87856: PPUSH
87857: CALL_OW 72
87861: DIFF
87862: ST_TO_ADDR
// end ; end_of_file
87863: LD_VAR 0 3
87867: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87868: LD_INT 0
87870: PPUSH
87871: PPUSH
87872: PPUSH
// if not mc_bases or not skirmish then
87873: LD_EXP 36
87877: NOT
87878: PUSH
87879: LD_EXP 34
87883: NOT
87884: OR
87885: IFFALSE 87889
// exit ;
87887: GO 88054
// for i = 1 to mc_bases do
87889: LD_ADDR_VAR 0 4
87893: PUSH
87894: DOUBLE
87895: LD_INT 1
87897: DEC
87898: ST_TO_ADDR
87899: LD_EXP 36
87903: PUSH
87904: FOR_TO
87905: IFFALSE 88052
// begin if sci in mc_bases [ i ] then
87907: LD_VAR 0 2
87911: PUSH
87912: LD_EXP 36
87916: PUSH
87917: LD_VAR 0 4
87921: ARRAY
87922: IN
87923: IFFALSE 88050
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87925: LD_ADDR_EXP 65
87929: PUSH
87930: LD_EXP 65
87934: PPUSH
87935: LD_VAR 0 4
87939: PUSH
87940: LD_EXP 65
87944: PUSH
87945: LD_VAR 0 4
87949: ARRAY
87950: PUSH
87951: LD_INT 1
87953: PLUS
87954: PUSH
87955: EMPTY
87956: LIST
87957: LIST
87958: PPUSH
87959: LD_VAR 0 1
87963: PPUSH
87964: CALL 26583 0 3
87968: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87969: LD_ADDR_VAR 0 5
87973: PUSH
87974: LD_EXP 36
87978: PUSH
87979: LD_VAR 0 4
87983: ARRAY
87984: PPUSH
87985: LD_INT 2
87987: PUSH
87988: LD_INT 30
87990: PUSH
87991: LD_INT 0
87993: PUSH
87994: EMPTY
87995: LIST
87996: LIST
87997: PUSH
87998: LD_INT 30
88000: PUSH
88001: LD_INT 1
88003: PUSH
88004: EMPTY
88005: LIST
88006: LIST
88007: PUSH
88008: EMPTY
88009: LIST
88010: LIST
88011: LIST
88012: PPUSH
88013: CALL_OW 72
88017: PPUSH
88018: LD_VAR 0 1
88022: PPUSH
88023: CALL_OW 74
88027: ST_TO_ADDR
// if tmp then
88028: LD_VAR 0 5
88032: IFFALSE 88048
// ComStandNearbyBuilding ( ape , tmp ) ;
88034: LD_VAR 0 1
88038: PPUSH
88039: LD_VAR 0 5
88043: PPUSH
88044: CALL 20786 0 2
// break ;
88048: GO 88052
// end ; end ;
88050: GO 87904
88052: POP
88053: POP
// end ;
88054: LD_VAR 0 3
88058: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
88059: LD_INT 0
88061: PPUSH
88062: PPUSH
88063: PPUSH
// if not mc_bases or not skirmish then
88064: LD_EXP 36
88068: NOT
88069: PUSH
88070: LD_EXP 34
88074: NOT
88075: OR
88076: IFFALSE 88080
// exit ;
88078: GO 88169
// for i = 1 to mc_bases do
88080: LD_ADDR_VAR 0 4
88084: PUSH
88085: DOUBLE
88086: LD_INT 1
88088: DEC
88089: ST_TO_ADDR
88090: LD_EXP 36
88094: PUSH
88095: FOR_TO
88096: IFFALSE 88167
// begin if building in mc_busy_turret_list [ i ] then
88098: LD_VAR 0 1
88102: PUSH
88103: LD_EXP 46
88107: PUSH
88108: LD_VAR 0 4
88112: ARRAY
88113: IN
88114: IFFALSE 88165
// begin tmp := mc_busy_turret_list [ i ] diff building ;
88116: LD_ADDR_VAR 0 5
88120: PUSH
88121: LD_EXP 46
88125: PUSH
88126: LD_VAR 0 4
88130: ARRAY
88131: PUSH
88132: LD_VAR 0 1
88136: DIFF
88137: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
88138: LD_ADDR_EXP 46
88142: PUSH
88143: LD_EXP 46
88147: PPUSH
88148: LD_VAR 0 4
88152: PPUSH
88153: LD_VAR 0 5
88157: PPUSH
88158: CALL_OW 1
88162: ST_TO_ADDR
// break ;
88163: GO 88167
// end ; end ;
88165: GO 88095
88167: POP
88168: POP
// end ;
88169: LD_VAR 0 3
88173: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
88174: LD_INT 0
88176: PPUSH
88177: PPUSH
88178: PPUSH
// if not mc_bases or not skirmish then
88179: LD_EXP 36
88183: NOT
88184: PUSH
88185: LD_EXP 34
88189: NOT
88190: OR
88191: IFFALSE 88195
// exit ;
88193: GO 88394
// for i = 1 to mc_bases do
88195: LD_ADDR_VAR 0 5
88199: PUSH
88200: DOUBLE
88201: LD_INT 1
88203: DEC
88204: ST_TO_ADDR
88205: LD_EXP 36
88209: PUSH
88210: FOR_TO
88211: IFFALSE 88392
// if building in mc_bases [ i ] then
88213: LD_VAR 0 1
88217: PUSH
88218: LD_EXP 36
88222: PUSH
88223: LD_VAR 0 5
88227: ARRAY
88228: IN
88229: IFFALSE 88390
// begin tmp := mc_bases [ i ] diff building ;
88231: LD_ADDR_VAR 0 6
88235: PUSH
88236: LD_EXP 36
88240: PUSH
88241: LD_VAR 0 5
88245: ARRAY
88246: PUSH
88247: LD_VAR 0 1
88251: DIFF
88252: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
88253: LD_ADDR_EXP 36
88257: PUSH
88258: LD_EXP 36
88262: PPUSH
88263: LD_VAR 0 5
88267: PPUSH
88268: LD_VAR 0 6
88272: PPUSH
88273: CALL_OW 1
88277: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
88278: LD_VAR 0 1
88282: PUSH
88283: LD_EXP 44
88287: PUSH
88288: LD_VAR 0 5
88292: ARRAY
88293: IN
88294: IFFALSE 88333
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88296: LD_ADDR_EXP 44
88300: PUSH
88301: LD_EXP 44
88305: PPUSH
88306: LD_VAR 0 5
88310: PPUSH
88311: LD_EXP 44
88315: PUSH
88316: LD_VAR 0 5
88320: ARRAY
88321: PUSH
88322: LD_VAR 0 1
88326: DIFF
88327: PPUSH
88328: CALL_OW 1
88332: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88333: LD_VAR 0 1
88337: PUSH
88338: LD_EXP 45
88342: PUSH
88343: LD_VAR 0 5
88347: ARRAY
88348: IN
88349: IFFALSE 88388
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88351: LD_ADDR_EXP 45
88355: PUSH
88356: LD_EXP 45
88360: PPUSH
88361: LD_VAR 0 5
88365: PPUSH
88366: LD_EXP 45
88370: PUSH
88371: LD_VAR 0 5
88375: ARRAY
88376: PUSH
88377: LD_VAR 0 1
88381: DIFF
88382: PPUSH
88383: CALL_OW 1
88387: ST_TO_ADDR
// break ;
88388: GO 88392
// end ;
88390: GO 88210
88392: POP
88393: POP
// end ;
88394: LD_VAR 0 4
88398: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88399: LD_INT 0
88401: PPUSH
88402: PPUSH
88403: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88404: LD_EXP 36
88408: NOT
88409: PUSH
88410: LD_EXP 34
88414: NOT
88415: OR
88416: PUSH
88417: LD_VAR 0 3
88421: PUSH
88422: LD_EXP 62
88426: IN
88427: NOT
88428: OR
88429: IFFALSE 88433
// exit ;
88431: GO 88556
// for i = 1 to mc_vehicles do
88433: LD_ADDR_VAR 0 6
88437: PUSH
88438: DOUBLE
88439: LD_INT 1
88441: DEC
88442: ST_TO_ADDR
88443: LD_EXP 55
88447: PUSH
88448: FOR_TO
88449: IFFALSE 88554
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88451: LD_VAR 0 2
88455: PUSH
88456: LD_EXP 55
88460: PUSH
88461: LD_VAR 0 6
88465: ARRAY
88466: IN
88467: PUSH
88468: LD_VAR 0 1
88472: PUSH
88473: LD_EXP 55
88477: PUSH
88478: LD_VAR 0 6
88482: ARRAY
88483: IN
88484: OR
88485: IFFALSE 88552
// begin tmp := mc_vehicles [ i ] diff old ;
88487: LD_ADDR_VAR 0 7
88491: PUSH
88492: LD_EXP 55
88496: PUSH
88497: LD_VAR 0 6
88501: ARRAY
88502: PUSH
88503: LD_VAR 0 2
88507: DIFF
88508: ST_TO_ADDR
// tmp := tmp diff new ;
88509: LD_ADDR_VAR 0 7
88513: PUSH
88514: LD_VAR 0 7
88518: PUSH
88519: LD_VAR 0 1
88523: DIFF
88524: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88525: LD_ADDR_EXP 55
88529: PUSH
88530: LD_EXP 55
88534: PPUSH
88535: LD_VAR 0 6
88539: PPUSH
88540: LD_VAR 0 7
88544: PPUSH
88545: CALL_OW 1
88549: ST_TO_ADDR
// break ;
88550: GO 88554
// end ;
88552: GO 88448
88554: POP
88555: POP
// end ;
88556: LD_VAR 0 5
88560: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88561: LD_INT 0
88563: PPUSH
88564: PPUSH
88565: PPUSH
88566: PPUSH
// if not mc_bases or not skirmish then
88567: LD_EXP 36
88571: NOT
88572: PUSH
88573: LD_EXP 34
88577: NOT
88578: OR
88579: IFFALSE 88583
// exit ;
88581: GO 88960
// side := GetSide ( vehicle ) ;
88583: LD_ADDR_VAR 0 5
88587: PUSH
88588: LD_VAR 0 1
88592: PPUSH
88593: CALL_OW 255
88597: ST_TO_ADDR
// for i = 1 to mc_bases do
88598: LD_ADDR_VAR 0 4
88602: PUSH
88603: DOUBLE
88604: LD_INT 1
88606: DEC
88607: ST_TO_ADDR
88608: LD_EXP 36
88612: PUSH
88613: FOR_TO
88614: IFFALSE 88958
// begin if factory in mc_bases [ i ] then
88616: LD_VAR 0 2
88620: PUSH
88621: LD_EXP 36
88625: PUSH
88626: LD_VAR 0 4
88630: ARRAY
88631: IN
88632: IFFALSE 88956
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88634: LD_EXP 58
88638: PUSH
88639: LD_VAR 0 4
88643: ARRAY
88644: PUSH
88645: LD_EXP 47
88649: PUSH
88650: LD_VAR 0 4
88654: ARRAY
88655: LESS
88656: PUSH
88657: LD_VAR 0 1
88661: PPUSH
88662: CALL_OW 264
88666: PUSH
88667: LD_INT 31
88669: PUSH
88670: LD_INT 32
88672: PUSH
88673: LD_INT 51
88675: PUSH
88676: LD_EXP 30
88680: PUSH
88681: LD_INT 12
88683: PUSH
88684: LD_INT 30
88686: PUSH
88687: LD_EXP 29
88691: PUSH
88692: LD_INT 11
88694: PUSH
88695: LD_INT 53
88697: PUSH
88698: LD_INT 14
88700: PUSH
88701: LD_EXP 33
88705: PUSH
88706: LD_INT 29
88708: PUSH
88709: LD_EXP 31
88713: PUSH
88714: LD_INT 13
88716: PUSH
88717: LD_INT 52
88719: PUSH
88720: LD_INT 48
88722: PUSH
88723: LD_INT 8
88725: PUSH
88726: EMPTY
88727: LIST
88728: LIST
88729: LIST
88730: LIST
88731: LIST
88732: LIST
88733: LIST
88734: LIST
88735: LIST
88736: LIST
88737: LIST
88738: LIST
88739: LIST
88740: LIST
88741: LIST
88742: LIST
88743: LIST
88744: IN
88745: NOT
88746: AND
88747: IFFALSE 88795
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88749: LD_ADDR_EXP 58
88753: PUSH
88754: LD_EXP 58
88758: PPUSH
88759: LD_VAR 0 4
88763: PUSH
88764: LD_EXP 58
88768: PUSH
88769: LD_VAR 0 4
88773: ARRAY
88774: PUSH
88775: LD_INT 1
88777: PLUS
88778: PUSH
88779: EMPTY
88780: LIST
88781: LIST
88782: PPUSH
88783: LD_VAR 0 1
88787: PPUSH
88788: CALL 26583 0 3
88792: ST_TO_ADDR
88793: GO 88839
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88795: LD_ADDR_EXP 55
88799: PUSH
88800: LD_EXP 55
88804: PPUSH
88805: LD_VAR 0 4
88809: PUSH
88810: LD_EXP 55
88814: PUSH
88815: LD_VAR 0 4
88819: ARRAY
88820: PUSH
88821: LD_INT 1
88823: PLUS
88824: PUSH
88825: EMPTY
88826: LIST
88827: LIST
88828: PPUSH
88829: LD_VAR 0 1
88833: PPUSH
88834: CALL 26583 0 3
88838: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88839: LD_VAR 0 1
88843: PPUSH
88844: CALL_OW 263
88848: PUSH
88849: LD_INT 2
88851: EQUAL
88852: IFFALSE 88872
// begin repeat wait ( 0 0$1 ) ;
88854: LD_INT 35
88856: PPUSH
88857: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88861: LD_VAR 0 1
88865: PPUSH
88866: CALL_OW 312
88870: IFFALSE 88854
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88872: LD_VAR 0 1
88876: PPUSH
88877: LD_EXP 60
88881: PUSH
88882: LD_VAR 0 4
88886: ARRAY
88887: PPUSH
88888: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88892: LD_VAR 0 1
88896: PPUSH
88897: CALL_OW 263
88901: PUSH
88902: LD_INT 1
88904: NONEQUAL
88905: IFFALSE 88909
// break ;
88907: GO 88958
// repeat wait ( 0 0$1 ) ;
88909: LD_INT 35
88911: PPUSH
88912: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88916: LD_VAR 0 1
88920: PPUSH
88921: LD_EXP 60
88925: PUSH
88926: LD_VAR 0 4
88930: ARRAY
88931: PPUSH
88932: CALL_OW 308
88936: IFFALSE 88909
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88938: LD_VAR 0 1
88942: PPUSH
88943: CALL_OW 311
88947: PPUSH
88948: CALL_OW 121
// exit ;
88952: POP
88953: POP
88954: GO 88960
// end ; end ;
88956: GO 88613
88958: POP
88959: POP
// end ;
88960: LD_VAR 0 3
88964: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88965: LD_INT 0
88967: PPUSH
88968: PPUSH
88969: PPUSH
88970: PPUSH
// if not mc_bases or not skirmish then
88971: LD_EXP 36
88975: NOT
88976: PUSH
88977: LD_EXP 34
88981: NOT
88982: OR
88983: IFFALSE 88987
// exit ;
88985: GO 89340
// repeat wait ( 0 0$1 ) ;
88987: LD_INT 35
88989: PPUSH
88990: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88994: LD_VAR 0 2
88998: PPUSH
88999: LD_VAR 0 3
89003: PPUSH
89004: CALL_OW 284
89008: IFFALSE 88987
// if GetResourceTypeXY ( x , y ) = mat_artefact then
89010: LD_VAR 0 2
89014: PPUSH
89015: LD_VAR 0 3
89019: PPUSH
89020: CALL_OW 283
89024: PUSH
89025: LD_INT 4
89027: EQUAL
89028: IFFALSE 89032
// exit ;
89030: GO 89340
// for i = 1 to mc_bases do
89032: LD_ADDR_VAR 0 7
89036: PUSH
89037: DOUBLE
89038: LD_INT 1
89040: DEC
89041: ST_TO_ADDR
89042: LD_EXP 36
89046: PUSH
89047: FOR_TO
89048: IFFALSE 89338
// begin if mc_crates_area [ i ] then
89050: LD_EXP 54
89054: PUSH
89055: LD_VAR 0 7
89059: ARRAY
89060: IFFALSE 89171
// for j in mc_crates_area [ i ] do
89062: LD_ADDR_VAR 0 8
89066: PUSH
89067: LD_EXP 54
89071: PUSH
89072: LD_VAR 0 7
89076: ARRAY
89077: PUSH
89078: FOR_IN
89079: IFFALSE 89169
// if InArea ( x , y , j ) then
89081: LD_VAR 0 2
89085: PPUSH
89086: LD_VAR 0 3
89090: PPUSH
89091: LD_VAR 0 8
89095: PPUSH
89096: CALL_OW 309
89100: IFFALSE 89167
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89102: LD_ADDR_EXP 52
89106: PUSH
89107: LD_EXP 52
89111: PPUSH
89112: LD_VAR 0 7
89116: PUSH
89117: LD_EXP 52
89121: PUSH
89122: LD_VAR 0 7
89126: ARRAY
89127: PUSH
89128: LD_INT 1
89130: PLUS
89131: PUSH
89132: EMPTY
89133: LIST
89134: LIST
89135: PPUSH
89136: LD_VAR 0 4
89140: PUSH
89141: LD_VAR 0 2
89145: PUSH
89146: LD_VAR 0 3
89150: PUSH
89151: EMPTY
89152: LIST
89153: LIST
89154: LIST
89155: PPUSH
89156: CALL 26583 0 3
89160: ST_TO_ADDR
// exit ;
89161: POP
89162: POP
89163: POP
89164: POP
89165: GO 89340
// end ;
89167: GO 89078
89169: POP
89170: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89171: LD_ADDR_VAR 0 9
89175: PUSH
89176: LD_EXP 36
89180: PUSH
89181: LD_VAR 0 7
89185: ARRAY
89186: PPUSH
89187: LD_INT 2
89189: PUSH
89190: LD_INT 30
89192: PUSH
89193: LD_INT 0
89195: PUSH
89196: EMPTY
89197: LIST
89198: LIST
89199: PUSH
89200: LD_INT 30
89202: PUSH
89203: LD_INT 1
89205: PUSH
89206: EMPTY
89207: LIST
89208: LIST
89209: PUSH
89210: EMPTY
89211: LIST
89212: LIST
89213: LIST
89214: PPUSH
89215: CALL_OW 72
89219: ST_TO_ADDR
// if not depot then
89220: LD_VAR 0 9
89224: NOT
89225: IFFALSE 89229
// continue ;
89227: GO 89047
// for j in depot do
89229: LD_ADDR_VAR 0 8
89233: PUSH
89234: LD_VAR 0 9
89238: PUSH
89239: FOR_IN
89240: IFFALSE 89334
// if GetDistUnitXY ( j , x , y ) < 30 then
89242: LD_VAR 0 8
89246: PPUSH
89247: LD_VAR 0 2
89251: PPUSH
89252: LD_VAR 0 3
89256: PPUSH
89257: CALL_OW 297
89261: PUSH
89262: LD_INT 30
89264: LESS
89265: IFFALSE 89332
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89267: LD_ADDR_EXP 52
89271: PUSH
89272: LD_EXP 52
89276: PPUSH
89277: LD_VAR 0 7
89281: PUSH
89282: LD_EXP 52
89286: PUSH
89287: LD_VAR 0 7
89291: ARRAY
89292: PUSH
89293: LD_INT 1
89295: PLUS
89296: PUSH
89297: EMPTY
89298: LIST
89299: LIST
89300: PPUSH
89301: LD_VAR 0 4
89305: PUSH
89306: LD_VAR 0 2
89310: PUSH
89311: LD_VAR 0 3
89315: PUSH
89316: EMPTY
89317: LIST
89318: LIST
89319: LIST
89320: PPUSH
89321: CALL 26583 0 3
89325: ST_TO_ADDR
// exit ;
89326: POP
89327: POP
89328: POP
89329: POP
89330: GO 89340
// end ;
89332: GO 89239
89334: POP
89335: POP
// end ;
89336: GO 89047
89338: POP
89339: POP
// end ;
89340: LD_VAR 0 6
89344: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89345: LD_INT 0
89347: PPUSH
89348: PPUSH
89349: PPUSH
89350: PPUSH
// if not mc_bases or not skirmish then
89351: LD_EXP 36
89355: NOT
89356: PUSH
89357: LD_EXP 34
89361: NOT
89362: OR
89363: IFFALSE 89367
// exit ;
89365: GO 89644
// side := GetSide ( lab ) ;
89367: LD_ADDR_VAR 0 4
89371: PUSH
89372: LD_VAR 0 2
89376: PPUSH
89377: CALL_OW 255
89381: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89382: LD_VAR 0 4
89386: PUSH
89387: LD_EXP 62
89391: IN
89392: NOT
89393: PUSH
89394: LD_EXP 63
89398: NOT
89399: OR
89400: PUSH
89401: LD_EXP 36
89405: NOT
89406: OR
89407: IFFALSE 89411
// exit ;
89409: GO 89644
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89411: LD_ADDR_EXP 63
89415: PUSH
89416: LD_EXP 63
89420: PPUSH
89421: LD_VAR 0 4
89425: PPUSH
89426: LD_EXP 63
89430: PUSH
89431: LD_VAR 0 4
89435: ARRAY
89436: PUSH
89437: LD_VAR 0 1
89441: DIFF
89442: PPUSH
89443: CALL_OW 1
89447: ST_TO_ADDR
// for i = 1 to mc_bases do
89448: LD_ADDR_VAR 0 5
89452: PUSH
89453: DOUBLE
89454: LD_INT 1
89456: DEC
89457: ST_TO_ADDR
89458: LD_EXP 36
89462: PUSH
89463: FOR_TO
89464: IFFALSE 89642
// begin if lab in mc_bases [ i ] then
89466: LD_VAR 0 2
89470: PUSH
89471: LD_EXP 36
89475: PUSH
89476: LD_VAR 0 5
89480: ARRAY
89481: IN
89482: IFFALSE 89640
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89484: LD_VAR 0 1
89488: PUSH
89489: LD_INT 11
89491: PUSH
89492: LD_INT 4
89494: PUSH
89495: LD_INT 3
89497: PUSH
89498: LD_INT 2
89500: PUSH
89501: EMPTY
89502: LIST
89503: LIST
89504: LIST
89505: LIST
89506: IN
89507: PUSH
89508: LD_EXP 66
89512: PUSH
89513: LD_VAR 0 5
89517: ARRAY
89518: AND
89519: IFFALSE 89640
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89521: LD_ADDR_VAR 0 6
89525: PUSH
89526: LD_EXP 66
89530: PUSH
89531: LD_VAR 0 5
89535: ARRAY
89536: PUSH
89537: LD_INT 1
89539: ARRAY
89540: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89541: LD_ADDR_EXP 66
89545: PUSH
89546: LD_EXP 66
89550: PPUSH
89551: LD_VAR 0 5
89555: PPUSH
89556: EMPTY
89557: PPUSH
89558: CALL_OW 1
89562: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89563: LD_VAR 0 6
89567: PPUSH
89568: LD_INT 0
89570: PPUSH
89571: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89575: LD_VAR 0 6
89579: PPUSH
89580: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89584: LD_ADDR_EXP 65
89588: PUSH
89589: LD_EXP 65
89593: PPUSH
89594: LD_VAR 0 5
89598: PPUSH
89599: LD_EXP 65
89603: PUSH
89604: LD_VAR 0 5
89608: ARRAY
89609: PPUSH
89610: LD_INT 1
89612: PPUSH
89613: LD_VAR 0 6
89617: PPUSH
89618: CALL_OW 2
89622: PPUSH
89623: CALL_OW 1
89627: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89628: LD_VAR 0 5
89632: PPUSH
89633: LD_INT 112
89635: PPUSH
89636: CALL 66640 0 2
// end ; end ; end ;
89640: GO 89463
89642: POP
89643: POP
// end ;
89644: LD_VAR 0 3
89648: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89649: LD_INT 0
89651: PPUSH
89652: PPUSH
89653: PPUSH
89654: PPUSH
89655: PPUSH
89656: PPUSH
89657: PPUSH
89658: PPUSH
// if not mc_bases or not skirmish then
89659: LD_EXP 36
89663: NOT
89664: PUSH
89665: LD_EXP 34
89669: NOT
89670: OR
89671: IFFALSE 89675
// exit ;
89673: GO 91046
// for i = 1 to mc_bases do
89675: LD_ADDR_VAR 0 3
89679: PUSH
89680: DOUBLE
89681: LD_INT 1
89683: DEC
89684: ST_TO_ADDR
89685: LD_EXP 36
89689: PUSH
89690: FOR_TO
89691: IFFALSE 91044
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89693: LD_VAR 0 1
89697: PUSH
89698: LD_EXP 36
89702: PUSH
89703: LD_VAR 0 3
89707: ARRAY
89708: IN
89709: PUSH
89710: LD_VAR 0 1
89714: PUSH
89715: LD_EXP 43
89719: PUSH
89720: LD_VAR 0 3
89724: ARRAY
89725: IN
89726: OR
89727: PUSH
89728: LD_VAR 0 1
89732: PUSH
89733: LD_EXP 58
89737: PUSH
89738: LD_VAR 0 3
89742: ARRAY
89743: IN
89744: OR
89745: PUSH
89746: LD_VAR 0 1
89750: PUSH
89751: LD_EXP 55
89755: PUSH
89756: LD_VAR 0 3
89760: ARRAY
89761: IN
89762: OR
89763: PUSH
89764: LD_VAR 0 1
89768: PUSH
89769: LD_EXP 65
89773: PUSH
89774: LD_VAR 0 3
89778: ARRAY
89779: IN
89780: OR
89781: PUSH
89782: LD_VAR 0 1
89786: PUSH
89787: LD_EXP 66
89791: PUSH
89792: LD_VAR 0 3
89796: ARRAY
89797: IN
89798: OR
89799: IFFALSE 91042
// begin if un in mc_ape [ i ] then
89801: LD_VAR 0 1
89805: PUSH
89806: LD_EXP 65
89810: PUSH
89811: LD_VAR 0 3
89815: ARRAY
89816: IN
89817: IFFALSE 89856
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89819: LD_ADDR_EXP 65
89823: PUSH
89824: LD_EXP 65
89828: PPUSH
89829: LD_VAR 0 3
89833: PPUSH
89834: LD_EXP 65
89838: PUSH
89839: LD_VAR 0 3
89843: ARRAY
89844: PUSH
89845: LD_VAR 0 1
89849: DIFF
89850: PPUSH
89851: CALL_OW 1
89855: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89856: LD_VAR 0 1
89860: PUSH
89861: LD_EXP 66
89865: PUSH
89866: LD_VAR 0 3
89870: ARRAY
89871: IN
89872: IFFALSE 89896
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89874: LD_ADDR_EXP 66
89878: PUSH
89879: LD_EXP 66
89883: PPUSH
89884: LD_VAR 0 3
89888: PPUSH
89889: EMPTY
89890: PPUSH
89891: CALL_OW 1
89895: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
89896: LD_VAR 0 1
89900: PPUSH
89901: CALL_OW 247
89905: PUSH
89906: LD_INT 2
89908: EQUAL
89909: PUSH
89910: LD_VAR 0 1
89914: PPUSH
89915: CALL_OW 110
89919: PUSH
89920: LD_INT 20
89922: EQUAL
89923: PUSH
89924: LD_VAR 0 1
89928: PUSH
89929: LD_EXP 58
89933: PUSH
89934: LD_VAR 0 3
89938: ARRAY
89939: IN
89940: OR
89941: PUSH
89942: LD_VAR 0 1
89946: PPUSH
89947: CALL_OW 264
89951: PUSH
89952: LD_INT 12
89954: PUSH
89955: LD_INT 51
89957: PUSH
89958: LD_EXP 30
89962: PUSH
89963: LD_INT 32
89965: PUSH
89966: LD_INT 13
89968: PUSH
89969: LD_INT 52
89971: PUSH
89972: LD_INT 31
89974: PUSH
89975: EMPTY
89976: LIST
89977: LIST
89978: LIST
89979: LIST
89980: LIST
89981: LIST
89982: LIST
89983: IN
89984: OR
89985: AND
89986: IFFALSE 90294
// begin if un in mc_defender [ i ] then
89988: LD_VAR 0 1
89992: PUSH
89993: LD_EXP 58
89997: PUSH
89998: LD_VAR 0 3
90002: ARRAY
90003: IN
90004: IFFALSE 90043
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90006: LD_ADDR_EXP 58
90010: PUSH
90011: LD_EXP 58
90015: PPUSH
90016: LD_VAR 0 3
90020: PPUSH
90021: LD_EXP 58
90025: PUSH
90026: LD_VAR 0 3
90030: ARRAY
90031: PUSH
90032: LD_VAR 0 1
90036: DIFF
90037: PPUSH
90038: CALL_OW 1
90042: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
90043: LD_ADDR_VAR 0 8
90047: PUSH
90048: LD_VAR 0 3
90052: PPUSH
90053: LD_INT 3
90055: PPUSH
90056: CALL 86712 0 2
90060: ST_TO_ADDR
// if fac then
90061: LD_VAR 0 8
90065: IFFALSE 90294
// begin for j in fac do
90067: LD_ADDR_VAR 0 4
90071: PUSH
90072: LD_VAR 0 8
90076: PUSH
90077: FOR_IN
90078: IFFALSE 90292
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
90080: LD_ADDR_VAR 0 9
90084: PUSH
90085: LD_VAR 0 8
90089: PPUSH
90090: LD_VAR 0 1
90094: PPUSH
90095: CALL_OW 265
90099: PPUSH
90100: LD_VAR 0 1
90104: PPUSH
90105: CALL_OW 262
90109: PPUSH
90110: LD_VAR 0 1
90114: PPUSH
90115: CALL_OW 263
90119: PPUSH
90120: LD_VAR 0 1
90124: PPUSH
90125: CALL_OW 264
90129: PPUSH
90130: CALL 24115 0 5
90134: ST_TO_ADDR
// if components then
90135: LD_VAR 0 9
90139: IFFALSE 90290
// begin if GetWeapon ( un ) = ar_control_tower then
90141: LD_VAR 0 1
90145: PPUSH
90146: CALL_OW 264
90150: PUSH
90151: LD_INT 31
90153: EQUAL
90154: IFFALSE 90271
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
90156: LD_VAR 0 1
90160: PPUSH
90161: CALL_OW 311
90165: PPUSH
90166: LD_INT 0
90168: PPUSH
90169: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
90173: LD_ADDR_EXP 76
90177: PUSH
90178: LD_EXP 76
90182: PPUSH
90183: LD_VAR 0 3
90187: PPUSH
90188: LD_EXP 76
90192: PUSH
90193: LD_VAR 0 3
90197: ARRAY
90198: PUSH
90199: LD_VAR 0 1
90203: PPUSH
90204: CALL_OW 311
90208: DIFF
90209: PPUSH
90210: CALL_OW 1
90214: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
90215: LD_ADDR_VAR 0 7
90219: PUSH
90220: LD_EXP 57
90224: PUSH
90225: LD_VAR 0 3
90229: ARRAY
90230: PPUSH
90231: LD_INT 1
90233: PPUSH
90234: LD_VAR 0 9
90238: PPUSH
90239: CALL_OW 2
90243: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
90244: LD_ADDR_EXP 57
90248: PUSH
90249: LD_EXP 57
90253: PPUSH
90254: LD_VAR 0 3
90258: PPUSH
90259: LD_VAR 0 7
90263: PPUSH
90264: CALL_OW 1
90268: ST_TO_ADDR
// end else
90269: GO 90288
// MC_InsertProduceList ( i , [ components ] ) ;
90271: LD_VAR 0 3
90275: PPUSH
90276: LD_VAR 0 9
90280: PUSH
90281: EMPTY
90282: LIST
90283: PPUSH
90284: CALL 86257 0 2
// break ;
90288: GO 90292
// end ; end ;
90290: GO 90077
90292: POP
90293: POP
// end ; end ; if GetType ( un ) = unit_building then
90294: LD_VAR 0 1
90298: PPUSH
90299: CALL_OW 247
90303: PUSH
90304: LD_INT 3
90306: EQUAL
90307: IFFALSE 90710
// begin btype := GetBType ( un ) ;
90309: LD_ADDR_VAR 0 5
90313: PUSH
90314: LD_VAR 0 1
90318: PPUSH
90319: CALL_OW 266
90323: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
90324: LD_VAR 0 5
90328: PUSH
90329: LD_INT 29
90331: PUSH
90332: LD_INT 30
90334: PUSH
90335: EMPTY
90336: LIST
90337: LIST
90338: IN
90339: IFFALSE 90412
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
90341: LD_VAR 0 1
90345: PPUSH
90346: CALL_OW 250
90350: PPUSH
90351: LD_VAR 0 1
90355: PPUSH
90356: CALL_OW 251
90360: PPUSH
90361: LD_VAR 0 1
90365: PPUSH
90366: CALL_OW 255
90370: PPUSH
90371: CALL_OW 440
90375: NOT
90376: IFFALSE 90412
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
90378: LD_VAR 0 1
90382: PPUSH
90383: CALL_OW 250
90387: PPUSH
90388: LD_VAR 0 1
90392: PPUSH
90393: CALL_OW 251
90397: PPUSH
90398: LD_VAR 0 1
90402: PPUSH
90403: CALL_OW 255
90407: PPUSH
90408: CALL_OW 441
// end ; if btype = b_warehouse then
90412: LD_VAR 0 5
90416: PUSH
90417: LD_INT 1
90419: EQUAL
90420: IFFALSE 90438
// begin btype := b_depot ;
90422: LD_ADDR_VAR 0 5
90426: PUSH
90427: LD_INT 0
90429: ST_TO_ADDR
// pos := 1 ;
90430: LD_ADDR_VAR 0 6
90434: PUSH
90435: LD_INT 1
90437: ST_TO_ADDR
// end ; if btype = b_factory then
90438: LD_VAR 0 5
90442: PUSH
90443: LD_INT 3
90445: EQUAL
90446: IFFALSE 90464
// begin btype := b_workshop ;
90448: LD_ADDR_VAR 0 5
90452: PUSH
90453: LD_INT 2
90455: ST_TO_ADDR
// pos := 1 ;
90456: LD_ADDR_VAR 0 6
90460: PUSH
90461: LD_INT 1
90463: ST_TO_ADDR
// end ; if btype = b_barracks then
90464: LD_VAR 0 5
90468: PUSH
90469: LD_INT 5
90471: EQUAL
90472: IFFALSE 90482
// btype := b_armoury ;
90474: LD_ADDR_VAR 0 5
90478: PUSH
90479: LD_INT 4
90481: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90482: LD_VAR 0 5
90486: PUSH
90487: LD_INT 7
90489: PUSH
90490: LD_INT 8
90492: PUSH
90493: EMPTY
90494: LIST
90495: LIST
90496: IN
90497: IFFALSE 90507
// btype := b_lab ;
90499: LD_ADDR_VAR 0 5
90503: PUSH
90504: LD_INT 6
90506: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90507: LD_ADDR_EXP 41
90511: PUSH
90512: LD_EXP 41
90516: PPUSH
90517: LD_VAR 0 3
90521: PUSH
90522: LD_EXP 41
90526: PUSH
90527: LD_VAR 0 3
90531: ARRAY
90532: PUSH
90533: LD_INT 1
90535: PLUS
90536: PUSH
90537: EMPTY
90538: LIST
90539: LIST
90540: PPUSH
90541: LD_VAR 0 5
90545: PUSH
90546: LD_VAR 0 1
90550: PPUSH
90551: CALL_OW 250
90555: PUSH
90556: LD_VAR 0 1
90560: PPUSH
90561: CALL_OW 251
90565: PUSH
90566: LD_VAR 0 1
90570: PPUSH
90571: CALL_OW 254
90575: PUSH
90576: EMPTY
90577: LIST
90578: LIST
90579: LIST
90580: LIST
90581: PPUSH
90582: CALL 26583 0 3
90586: ST_TO_ADDR
// if pos = 1 then
90587: LD_VAR 0 6
90591: PUSH
90592: LD_INT 1
90594: EQUAL
90595: IFFALSE 90710
// begin tmp := mc_build_list [ i ] ;
90597: LD_ADDR_VAR 0 7
90601: PUSH
90602: LD_EXP 41
90606: PUSH
90607: LD_VAR 0 3
90611: ARRAY
90612: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90613: LD_VAR 0 7
90617: PPUSH
90618: LD_INT 2
90620: PUSH
90621: LD_INT 30
90623: PUSH
90624: LD_INT 0
90626: PUSH
90627: EMPTY
90628: LIST
90629: LIST
90630: PUSH
90631: LD_INT 30
90633: PUSH
90634: LD_INT 1
90636: PUSH
90637: EMPTY
90638: LIST
90639: LIST
90640: PUSH
90641: EMPTY
90642: LIST
90643: LIST
90644: LIST
90645: PPUSH
90646: CALL_OW 72
90650: IFFALSE 90660
// pos := 2 ;
90652: LD_ADDR_VAR 0 6
90656: PUSH
90657: LD_INT 2
90659: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90660: LD_ADDR_VAR 0 7
90664: PUSH
90665: LD_VAR 0 7
90669: PPUSH
90670: LD_VAR 0 6
90674: PPUSH
90675: LD_VAR 0 7
90679: PPUSH
90680: CALL 26909 0 3
90684: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90685: LD_ADDR_EXP 41
90689: PUSH
90690: LD_EXP 41
90694: PPUSH
90695: LD_VAR 0 3
90699: PPUSH
90700: LD_VAR 0 7
90704: PPUSH
90705: CALL_OW 1
90709: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90710: LD_VAR 0 1
90714: PUSH
90715: LD_EXP 36
90719: PUSH
90720: LD_VAR 0 3
90724: ARRAY
90725: IN
90726: IFFALSE 90765
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90728: LD_ADDR_EXP 36
90732: PUSH
90733: LD_EXP 36
90737: PPUSH
90738: LD_VAR 0 3
90742: PPUSH
90743: LD_EXP 36
90747: PUSH
90748: LD_VAR 0 3
90752: ARRAY
90753: PUSH
90754: LD_VAR 0 1
90758: DIFF
90759: PPUSH
90760: CALL_OW 1
90764: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90765: LD_VAR 0 1
90769: PUSH
90770: LD_EXP 43
90774: PUSH
90775: LD_VAR 0 3
90779: ARRAY
90780: IN
90781: IFFALSE 90820
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90783: LD_ADDR_EXP 43
90787: PUSH
90788: LD_EXP 43
90792: PPUSH
90793: LD_VAR 0 3
90797: PPUSH
90798: LD_EXP 43
90802: PUSH
90803: LD_VAR 0 3
90807: ARRAY
90808: PUSH
90809: LD_VAR 0 1
90813: DIFF
90814: PPUSH
90815: CALL_OW 1
90819: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90820: LD_VAR 0 1
90824: PUSH
90825: LD_EXP 55
90829: PUSH
90830: LD_VAR 0 3
90834: ARRAY
90835: IN
90836: IFFALSE 90875
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90838: LD_ADDR_EXP 55
90842: PUSH
90843: LD_EXP 55
90847: PPUSH
90848: LD_VAR 0 3
90852: PPUSH
90853: LD_EXP 55
90857: PUSH
90858: LD_VAR 0 3
90862: ARRAY
90863: PUSH
90864: LD_VAR 0 1
90868: DIFF
90869: PPUSH
90870: CALL_OW 1
90874: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90875: LD_VAR 0 1
90879: PUSH
90880: LD_EXP 58
90884: PUSH
90885: LD_VAR 0 3
90889: ARRAY
90890: IN
90891: IFFALSE 90930
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90893: LD_ADDR_EXP 58
90897: PUSH
90898: LD_EXP 58
90902: PPUSH
90903: LD_VAR 0 3
90907: PPUSH
90908: LD_EXP 58
90912: PUSH
90913: LD_VAR 0 3
90917: ARRAY
90918: PUSH
90919: LD_VAR 0 1
90923: DIFF
90924: PPUSH
90925: CALL_OW 1
90929: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90930: LD_VAR 0 1
90934: PUSH
90935: LD_EXP 45
90939: PUSH
90940: LD_VAR 0 3
90944: ARRAY
90945: IN
90946: IFFALSE 90985
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90948: LD_ADDR_EXP 45
90952: PUSH
90953: LD_EXP 45
90957: PPUSH
90958: LD_VAR 0 3
90962: PPUSH
90963: LD_EXP 45
90967: PUSH
90968: LD_VAR 0 3
90972: ARRAY
90973: PUSH
90974: LD_VAR 0 1
90978: DIFF
90979: PPUSH
90980: CALL_OW 1
90984: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90985: LD_VAR 0 1
90989: PUSH
90990: LD_EXP 44
90994: PUSH
90995: LD_VAR 0 3
90999: ARRAY
91000: IN
91001: IFFALSE 91040
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
91003: LD_ADDR_EXP 44
91007: PUSH
91008: LD_EXP 44
91012: PPUSH
91013: LD_VAR 0 3
91017: PPUSH
91018: LD_EXP 44
91022: PUSH
91023: LD_VAR 0 3
91027: ARRAY
91028: PUSH
91029: LD_VAR 0 1
91033: DIFF
91034: PPUSH
91035: CALL_OW 1
91039: ST_TO_ADDR
// end ; break ;
91040: GO 91044
// end ;
91042: GO 89690
91044: POP
91045: POP
// end ;
91046: LD_VAR 0 2
91050: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
91051: LD_INT 0
91053: PPUSH
91054: PPUSH
91055: PPUSH
// if not mc_bases or not skirmish then
91056: LD_EXP 36
91060: NOT
91061: PUSH
91062: LD_EXP 34
91066: NOT
91067: OR
91068: IFFALSE 91072
// exit ;
91070: GO 91287
// for i = 1 to mc_bases do
91072: LD_ADDR_VAR 0 3
91076: PUSH
91077: DOUBLE
91078: LD_INT 1
91080: DEC
91081: ST_TO_ADDR
91082: LD_EXP 36
91086: PUSH
91087: FOR_TO
91088: IFFALSE 91285
// begin if building in mc_construct_list [ i ] then
91090: LD_VAR 0 1
91094: PUSH
91095: LD_EXP 43
91099: PUSH
91100: LD_VAR 0 3
91104: ARRAY
91105: IN
91106: IFFALSE 91283
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91108: LD_ADDR_EXP 43
91112: PUSH
91113: LD_EXP 43
91117: PPUSH
91118: LD_VAR 0 3
91122: PPUSH
91123: LD_EXP 43
91127: PUSH
91128: LD_VAR 0 3
91132: ARRAY
91133: PUSH
91134: LD_VAR 0 1
91138: DIFF
91139: PPUSH
91140: CALL_OW 1
91144: ST_TO_ADDR
// if building in mc_lab [ i ] then
91145: LD_VAR 0 1
91149: PUSH
91150: LD_EXP 69
91154: PUSH
91155: LD_VAR 0 3
91159: ARRAY
91160: IN
91161: IFFALSE 91216
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
91163: LD_ADDR_EXP 70
91167: PUSH
91168: LD_EXP 70
91172: PPUSH
91173: LD_VAR 0 3
91177: PPUSH
91178: LD_EXP 70
91182: PUSH
91183: LD_VAR 0 3
91187: ARRAY
91188: PPUSH
91189: LD_INT 1
91191: PPUSH
91192: LD_EXP 70
91196: PUSH
91197: LD_VAR 0 3
91201: ARRAY
91202: PPUSH
91203: LD_INT 0
91205: PPUSH
91206: CALL 26001 0 4
91210: PPUSH
91211: CALL_OW 1
91215: ST_TO_ADDR
// if not building in mc_bases [ i ] then
91216: LD_VAR 0 1
91220: PUSH
91221: LD_EXP 36
91225: PUSH
91226: LD_VAR 0 3
91230: ARRAY
91231: IN
91232: NOT
91233: IFFALSE 91279
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91235: LD_ADDR_EXP 36
91239: PUSH
91240: LD_EXP 36
91244: PPUSH
91245: LD_VAR 0 3
91249: PUSH
91250: LD_EXP 36
91254: PUSH
91255: LD_VAR 0 3
91259: ARRAY
91260: PUSH
91261: LD_INT 1
91263: PLUS
91264: PUSH
91265: EMPTY
91266: LIST
91267: LIST
91268: PPUSH
91269: LD_VAR 0 1
91273: PPUSH
91274: CALL 26583 0 3
91278: ST_TO_ADDR
// exit ;
91279: POP
91280: POP
91281: GO 91287
// end ; end ;
91283: GO 91087
91285: POP
91286: POP
// end ;
91287: LD_VAR 0 2
91291: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
91292: LD_INT 0
91294: PPUSH
91295: PPUSH
91296: PPUSH
91297: PPUSH
91298: PPUSH
91299: PPUSH
91300: PPUSH
// if not mc_bases or not skirmish then
91301: LD_EXP 36
91305: NOT
91306: PUSH
91307: LD_EXP 34
91311: NOT
91312: OR
91313: IFFALSE 91317
// exit ;
91315: GO 91978
// for i = 1 to mc_bases do
91317: LD_ADDR_VAR 0 3
91321: PUSH
91322: DOUBLE
91323: LD_INT 1
91325: DEC
91326: ST_TO_ADDR
91327: LD_EXP 36
91331: PUSH
91332: FOR_TO
91333: IFFALSE 91976
// begin if building in mc_construct_list [ i ] then
91335: LD_VAR 0 1
91339: PUSH
91340: LD_EXP 43
91344: PUSH
91345: LD_VAR 0 3
91349: ARRAY
91350: IN
91351: IFFALSE 91974
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91353: LD_ADDR_EXP 43
91357: PUSH
91358: LD_EXP 43
91362: PPUSH
91363: LD_VAR 0 3
91367: PPUSH
91368: LD_EXP 43
91372: PUSH
91373: LD_VAR 0 3
91377: ARRAY
91378: PUSH
91379: LD_VAR 0 1
91383: DIFF
91384: PPUSH
91385: CALL_OW 1
91389: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91390: LD_ADDR_EXP 36
91394: PUSH
91395: LD_EXP 36
91399: PPUSH
91400: LD_VAR 0 3
91404: PUSH
91405: LD_EXP 36
91409: PUSH
91410: LD_VAR 0 3
91414: ARRAY
91415: PUSH
91416: LD_INT 1
91418: PLUS
91419: PUSH
91420: EMPTY
91421: LIST
91422: LIST
91423: PPUSH
91424: LD_VAR 0 1
91428: PPUSH
91429: CALL 26583 0 3
91433: ST_TO_ADDR
// btype := GetBType ( building ) ;
91434: LD_ADDR_VAR 0 5
91438: PUSH
91439: LD_VAR 0 1
91443: PPUSH
91444: CALL_OW 266
91448: ST_TO_ADDR
// side := GetSide ( building ) ;
91449: LD_ADDR_VAR 0 8
91453: PUSH
91454: LD_VAR 0 1
91458: PPUSH
91459: CALL_OW 255
91463: ST_TO_ADDR
// if btype = b_lab then
91464: LD_VAR 0 5
91468: PUSH
91469: LD_INT 6
91471: EQUAL
91472: IFFALSE 91522
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91474: LD_ADDR_EXP 69
91478: PUSH
91479: LD_EXP 69
91483: PPUSH
91484: LD_VAR 0 3
91488: PUSH
91489: LD_EXP 69
91493: PUSH
91494: LD_VAR 0 3
91498: ARRAY
91499: PUSH
91500: LD_INT 1
91502: PLUS
91503: PUSH
91504: EMPTY
91505: LIST
91506: LIST
91507: PPUSH
91508: LD_VAR 0 1
91512: PPUSH
91513: CALL 26583 0 3
91517: ST_TO_ADDR
// exit ;
91518: POP
91519: POP
91520: GO 91978
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91522: LD_VAR 0 5
91526: PUSH
91527: LD_INT 0
91529: PUSH
91530: LD_INT 2
91532: PUSH
91533: LD_INT 4
91535: PUSH
91536: EMPTY
91537: LIST
91538: LIST
91539: LIST
91540: IN
91541: IFFALSE 91665
// begin if btype = b_armoury then
91543: LD_VAR 0 5
91547: PUSH
91548: LD_INT 4
91550: EQUAL
91551: IFFALSE 91561
// btype := b_barracks ;
91553: LD_ADDR_VAR 0 5
91557: PUSH
91558: LD_INT 5
91560: ST_TO_ADDR
// if btype = b_depot then
91561: LD_VAR 0 5
91565: PUSH
91566: LD_INT 0
91568: EQUAL
91569: IFFALSE 91579
// btype := b_warehouse ;
91571: LD_ADDR_VAR 0 5
91575: PUSH
91576: LD_INT 1
91578: ST_TO_ADDR
// if btype = b_workshop then
91579: LD_VAR 0 5
91583: PUSH
91584: LD_INT 2
91586: EQUAL
91587: IFFALSE 91597
// btype := b_factory ;
91589: LD_ADDR_VAR 0 5
91593: PUSH
91594: LD_INT 3
91596: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91597: LD_VAR 0 5
91601: PPUSH
91602: LD_VAR 0 8
91606: PPUSH
91607: CALL_OW 323
91611: PUSH
91612: LD_INT 1
91614: EQUAL
91615: IFFALSE 91661
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91617: LD_ADDR_EXP 68
91621: PUSH
91622: LD_EXP 68
91626: PPUSH
91627: LD_VAR 0 3
91631: PUSH
91632: LD_EXP 68
91636: PUSH
91637: LD_VAR 0 3
91641: ARRAY
91642: PUSH
91643: LD_INT 1
91645: PLUS
91646: PUSH
91647: EMPTY
91648: LIST
91649: LIST
91650: PPUSH
91651: LD_VAR 0 1
91655: PPUSH
91656: CALL 26583 0 3
91660: ST_TO_ADDR
// exit ;
91661: POP
91662: POP
91663: GO 91978
// end ; if btype in [ b_bunker , b_turret ] then
91665: LD_VAR 0 5
91669: PUSH
91670: LD_INT 32
91672: PUSH
91673: LD_INT 33
91675: PUSH
91676: EMPTY
91677: LIST
91678: LIST
91679: IN
91680: IFFALSE 91970
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91682: LD_ADDR_EXP 44
91686: PUSH
91687: LD_EXP 44
91691: PPUSH
91692: LD_VAR 0 3
91696: PUSH
91697: LD_EXP 44
91701: PUSH
91702: LD_VAR 0 3
91706: ARRAY
91707: PUSH
91708: LD_INT 1
91710: PLUS
91711: PUSH
91712: EMPTY
91713: LIST
91714: LIST
91715: PPUSH
91716: LD_VAR 0 1
91720: PPUSH
91721: CALL 26583 0 3
91725: ST_TO_ADDR
// if btype = b_bunker then
91726: LD_VAR 0 5
91730: PUSH
91731: LD_INT 32
91733: EQUAL
91734: IFFALSE 91970
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91736: LD_ADDR_EXP 45
91740: PUSH
91741: LD_EXP 45
91745: PPUSH
91746: LD_VAR 0 3
91750: PUSH
91751: LD_EXP 45
91755: PUSH
91756: LD_VAR 0 3
91760: ARRAY
91761: PUSH
91762: LD_INT 1
91764: PLUS
91765: PUSH
91766: EMPTY
91767: LIST
91768: LIST
91769: PPUSH
91770: LD_VAR 0 1
91774: PPUSH
91775: CALL 26583 0 3
91779: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91780: LD_ADDR_VAR 0 6
91784: PUSH
91785: LD_EXP 36
91789: PUSH
91790: LD_VAR 0 3
91794: ARRAY
91795: PPUSH
91796: LD_INT 25
91798: PUSH
91799: LD_INT 1
91801: PUSH
91802: EMPTY
91803: LIST
91804: LIST
91805: PUSH
91806: LD_INT 3
91808: PUSH
91809: LD_INT 54
91811: PUSH
91812: EMPTY
91813: LIST
91814: PUSH
91815: EMPTY
91816: LIST
91817: LIST
91818: PUSH
91819: EMPTY
91820: LIST
91821: LIST
91822: PPUSH
91823: CALL_OW 72
91827: ST_TO_ADDR
// if tmp then
91828: LD_VAR 0 6
91832: IFFALSE 91838
// exit ;
91834: POP
91835: POP
91836: GO 91978
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91838: LD_ADDR_VAR 0 6
91842: PUSH
91843: LD_EXP 36
91847: PUSH
91848: LD_VAR 0 3
91852: ARRAY
91853: PPUSH
91854: LD_INT 2
91856: PUSH
91857: LD_INT 30
91859: PUSH
91860: LD_INT 4
91862: PUSH
91863: EMPTY
91864: LIST
91865: LIST
91866: PUSH
91867: LD_INT 30
91869: PUSH
91870: LD_INT 5
91872: PUSH
91873: EMPTY
91874: LIST
91875: LIST
91876: PUSH
91877: EMPTY
91878: LIST
91879: LIST
91880: LIST
91881: PPUSH
91882: CALL_OW 72
91886: ST_TO_ADDR
// if not tmp then
91887: LD_VAR 0 6
91891: NOT
91892: IFFALSE 91898
// exit ;
91894: POP
91895: POP
91896: GO 91978
// for j in tmp do
91898: LD_ADDR_VAR 0 4
91902: PUSH
91903: LD_VAR 0 6
91907: PUSH
91908: FOR_IN
91909: IFFALSE 91968
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91911: LD_ADDR_VAR 0 7
91915: PUSH
91916: LD_VAR 0 4
91920: PPUSH
91921: CALL_OW 313
91925: PPUSH
91926: LD_INT 25
91928: PUSH
91929: LD_INT 1
91931: PUSH
91932: EMPTY
91933: LIST
91934: LIST
91935: PPUSH
91936: CALL_OW 72
91940: ST_TO_ADDR
// if units then
91941: LD_VAR 0 7
91945: IFFALSE 91966
// begin ComExitBuilding ( units [ 1 ] ) ;
91947: LD_VAR 0 7
91951: PUSH
91952: LD_INT 1
91954: ARRAY
91955: PPUSH
91956: CALL_OW 122
// exit ;
91960: POP
91961: POP
91962: POP
91963: POP
91964: GO 91978
// end ; end ;
91966: GO 91908
91968: POP
91969: POP
// end ; end ; exit ;
91970: POP
91971: POP
91972: GO 91978
// end ; end ;
91974: GO 91332
91976: POP
91977: POP
// end ;
91978: LD_VAR 0 2
91982: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91983: LD_INT 0
91985: PPUSH
91986: PPUSH
91987: PPUSH
91988: PPUSH
91989: PPUSH
91990: PPUSH
91991: PPUSH
// if not mc_bases or not skirmish then
91992: LD_EXP 36
91996: NOT
91997: PUSH
91998: LD_EXP 34
92002: NOT
92003: OR
92004: IFFALSE 92008
// exit ;
92006: GO 92239
// btype := GetBType ( building ) ;
92008: LD_ADDR_VAR 0 6
92012: PUSH
92013: LD_VAR 0 1
92017: PPUSH
92018: CALL_OW 266
92022: ST_TO_ADDR
// x := GetX ( building ) ;
92023: LD_ADDR_VAR 0 7
92027: PUSH
92028: LD_VAR 0 1
92032: PPUSH
92033: CALL_OW 250
92037: ST_TO_ADDR
// y := GetY ( building ) ;
92038: LD_ADDR_VAR 0 8
92042: PUSH
92043: LD_VAR 0 1
92047: PPUSH
92048: CALL_OW 251
92052: ST_TO_ADDR
// d := GetDir ( building ) ;
92053: LD_ADDR_VAR 0 9
92057: PUSH
92058: LD_VAR 0 1
92062: PPUSH
92063: CALL_OW 254
92067: ST_TO_ADDR
// for i = 1 to mc_bases do
92068: LD_ADDR_VAR 0 4
92072: PUSH
92073: DOUBLE
92074: LD_INT 1
92076: DEC
92077: ST_TO_ADDR
92078: LD_EXP 36
92082: PUSH
92083: FOR_TO
92084: IFFALSE 92237
// begin if not mc_build_list [ i ] then
92086: LD_EXP 41
92090: PUSH
92091: LD_VAR 0 4
92095: ARRAY
92096: NOT
92097: IFFALSE 92101
// continue ;
92099: GO 92083
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
92101: LD_VAR 0 6
92105: PUSH
92106: LD_VAR 0 7
92110: PUSH
92111: LD_VAR 0 8
92115: PUSH
92116: LD_VAR 0 9
92120: PUSH
92121: EMPTY
92122: LIST
92123: LIST
92124: LIST
92125: LIST
92126: PPUSH
92127: LD_EXP 41
92131: PUSH
92132: LD_VAR 0 4
92136: ARRAY
92137: PUSH
92138: LD_INT 1
92140: ARRAY
92141: PPUSH
92142: CALL 32752 0 2
92146: IFFALSE 92235
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
92148: LD_ADDR_EXP 41
92152: PUSH
92153: LD_EXP 41
92157: PPUSH
92158: LD_VAR 0 4
92162: PPUSH
92163: LD_EXP 41
92167: PUSH
92168: LD_VAR 0 4
92172: ARRAY
92173: PPUSH
92174: LD_INT 1
92176: PPUSH
92177: CALL_OW 3
92181: PPUSH
92182: CALL_OW 1
92186: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
92187: LD_ADDR_EXP 43
92191: PUSH
92192: LD_EXP 43
92196: PPUSH
92197: LD_VAR 0 4
92201: PUSH
92202: LD_EXP 43
92206: PUSH
92207: LD_VAR 0 4
92211: ARRAY
92212: PUSH
92213: LD_INT 1
92215: PLUS
92216: PUSH
92217: EMPTY
92218: LIST
92219: LIST
92220: PPUSH
92221: LD_VAR 0 1
92225: PPUSH
92226: CALL 26583 0 3
92230: ST_TO_ADDR
// exit ;
92231: POP
92232: POP
92233: GO 92239
// end ; end ;
92235: GO 92083
92237: POP
92238: POP
// end ;
92239: LD_VAR 0 3
92243: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
92244: LD_INT 0
92246: PPUSH
92247: PPUSH
92248: PPUSH
// if not mc_bases or not skirmish then
92249: LD_EXP 36
92253: NOT
92254: PUSH
92255: LD_EXP 34
92259: NOT
92260: OR
92261: IFFALSE 92265
// exit ;
92263: GO 92455
// for i = 1 to mc_bases do
92265: LD_ADDR_VAR 0 4
92269: PUSH
92270: DOUBLE
92271: LD_INT 1
92273: DEC
92274: ST_TO_ADDR
92275: LD_EXP 36
92279: PUSH
92280: FOR_TO
92281: IFFALSE 92368
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
92283: LD_VAR 0 1
92287: PUSH
92288: LD_EXP 44
92292: PUSH
92293: LD_VAR 0 4
92297: ARRAY
92298: IN
92299: PUSH
92300: LD_VAR 0 1
92304: PUSH
92305: LD_EXP 45
92309: PUSH
92310: LD_VAR 0 4
92314: ARRAY
92315: IN
92316: NOT
92317: AND
92318: IFFALSE 92366
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
92320: LD_ADDR_EXP 45
92324: PUSH
92325: LD_EXP 45
92329: PPUSH
92330: LD_VAR 0 4
92334: PUSH
92335: LD_EXP 45
92339: PUSH
92340: LD_VAR 0 4
92344: ARRAY
92345: PUSH
92346: LD_INT 1
92348: PLUS
92349: PUSH
92350: EMPTY
92351: LIST
92352: LIST
92353: PPUSH
92354: LD_VAR 0 1
92358: PPUSH
92359: CALL 26583 0 3
92363: ST_TO_ADDR
// break ;
92364: GO 92368
// end ; end ;
92366: GO 92280
92368: POP
92369: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
92370: LD_VAR 0 1
92374: PPUSH
92375: CALL_OW 257
92379: PUSH
92380: LD_EXP 62
92384: IN
92385: PUSH
92386: LD_VAR 0 1
92390: PPUSH
92391: CALL_OW 266
92395: PUSH
92396: LD_INT 5
92398: EQUAL
92399: AND
92400: PUSH
92401: LD_VAR 0 2
92405: PPUSH
92406: CALL_OW 110
92410: PUSH
92411: LD_INT 18
92413: NONEQUAL
92414: AND
92415: IFFALSE 92455
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92417: LD_VAR 0 2
92421: PPUSH
92422: CALL_OW 257
92426: PUSH
92427: LD_INT 5
92429: PUSH
92430: LD_INT 8
92432: PUSH
92433: LD_INT 9
92435: PUSH
92436: EMPTY
92437: LIST
92438: LIST
92439: LIST
92440: IN
92441: IFFALSE 92455
// SetClass ( unit , 1 ) ;
92443: LD_VAR 0 2
92447: PPUSH
92448: LD_INT 1
92450: PPUSH
92451: CALL_OW 336
// end ;
92455: LD_VAR 0 3
92459: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92460: LD_INT 0
92462: PPUSH
92463: PPUSH
// if not mc_bases or not skirmish then
92464: LD_EXP 36
92468: NOT
92469: PUSH
92470: LD_EXP 34
92474: NOT
92475: OR
92476: IFFALSE 92480
// exit ;
92478: GO 92596
// if GetLives ( abandoned_vehicle ) > 250 then
92480: LD_VAR 0 2
92484: PPUSH
92485: CALL_OW 256
92489: PUSH
92490: LD_INT 250
92492: GREATER
92493: IFFALSE 92497
// exit ;
92495: GO 92596
// for i = 1 to mc_bases do
92497: LD_ADDR_VAR 0 6
92501: PUSH
92502: DOUBLE
92503: LD_INT 1
92505: DEC
92506: ST_TO_ADDR
92507: LD_EXP 36
92511: PUSH
92512: FOR_TO
92513: IFFALSE 92594
// begin if driver in mc_bases [ i ] then
92515: LD_VAR 0 1
92519: PUSH
92520: LD_EXP 36
92524: PUSH
92525: LD_VAR 0 6
92529: ARRAY
92530: IN
92531: IFFALSE 92592
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92533: LD_VAR 0 1
92537: PPUSH
92538: LD_EXP 36
92542: PUSH
92543: LD_VAR 0 6
92547: ARRAY
92548: PPUSH
92549: LD_INT 2
92551: PUSH
92552: LD_INT 30
92554: PUSH
92555: LD_INT 0
92557: PUSH
92558: EMPTY
92559: LIST
92560: LIST
92561: PUSH
92562: LD_INT 30
92564: PUSH
92565: LD_INT 1
92567: PUSH
92568: EMPTY
92569: LIST
92570: LIST
92571: PUSH
92572: EMPTY
92573: LIST
92574: LIST
92575: LIST
92576: PPUSH
92577: CALL_OW 72
92581: PUSH
92582: LD_INT 1
92584: ARRAY
92585: PPUSH
92586: CALL_OW 112
// break ;
92590: GO 92594
// end ; end ;
92592: GO 92512
92594: POP
92595: POP
// end ; end_of_file end_of_file
92596: LD_VAR 0 5
92600: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
92601: GO 92603
92603: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
92604: LD_STRING initStreamRollete();
92606: PPUSH
92607: CALL_OW 559
// InitStreamMode ;
92611: CALL 92620 0 0
// DefineStreamItems ( ) ;
92615: CALL 93060 0 0
// end ;
92619: END
// function InitStreamMode ; begin
92620: LD_INT 0
92622: PPUSH
// streamModeActive := false ;
92623: LD_ADDR_EXP 79
92627: PUSH
92628: LD_INT 0
92630: ST_TO_ADDR
// normalCounter := 26 ;
92631: LD_ADDR_EXP 80
92635: PUSH
92636: LD_INT 26
92638: ST_TO_ADDR
// hardcoreCounter := 12 ;
92639: LD_ADDR_EXP 81
92643: PUSH
92644: LD_INT 12
92646: ST_TO_ADDR
// sRocket := false ;
92647: LD_ADDR_EXP 84
92651: PUSH
92652: LD_INT 0
92654: ST_TO_ADDR
// sSpeed := false ;
92655: LD_ADDR_EXP 83
92659: PUSH
92660: LD_INT 0
92662: ST_TO_ADDR
// sEngine := false ;
92663: LD_ADDR_EXP 85
92667: PUSH
92668: LD_INT 0
92670: ST_TO_ADDR
// sSpec := false ;
92671: LD_ADDR_EXP 82
92675: PUSH
92676: LD_INT 0
92678: ST_TO_ADDR
// sLevel := false ;
92679: LD_ADDR_EXP 86
92683: PUSH
92684: LD_INT 0
92686: ST_TO_ADDR
// sArmoury := false ;
92687: LD_ADDR_EXP 87
92691: PUSH
92692: LD_INT 0
92694: ST_TO_ADDR
// sRadar := false ;
92695: LD_ADDR_EXP 88
92699: PUSH
92700: LD_INT 0
92702: ST_TO_ADDR
// sBunker := false ;
92703: LD_ADDR_EXP 89
92707: PUSH
92708: LD_INT 0
92710: ST_TO_ADDR
// sHack := false ;
92711: LD_ADDR_EXP 90
92715: PUSH
92716: LD_INT 0
92718: ST_TO_ADDR
// sFire := false ;
92719: LD_ADDR_EXP 91
92723: PUSH
92724: LD_INT 0
92726: ST_TO_ADDR
// sRefresh := false ;
92727: LD_ADDR_EXP 92
92731: PUSH
92732: LD_INT 0
92734: ST_TO_ADDR
// sExp := false ;
92735: LD_ADDR_EXP 93
92739: PUSH
92740: LD_INT 0
92742: ST_TO_ADDR
// sDepot := false ;
92743: LD_ADDR_EXP 94
92747: PUSH
92748: LD_INT 0
92750: ST_TO_ADDR
// sFlag := false ;
92751: LD_ADDR_EXP 95
92755: PUSH
92756: LD_INT 0
92758: ST_TO_ADDR
// sKamikadze := false ;
92759: LD_ADDR_EXP 103
92763: PUSH
92764: LD_INT 0
92766: ST_TO_ADDR
// sTroll := false ;
92767: LD_ADDR_EXP 104
92771: PUSH
92772: LD_INT 0
92774: ST_TO_ADDR
// sSlow := false ;
92775: LD_ADDR_EXP 105
92779: PUSH
92780: LD_INT 0
92782: ST_TO_ADDR
// sLack := false ;
92783: LD_ADDR_EXP 106
92787: PUSH
92788: LD_INT 0
92790: ST_TO_ADDR
// sTank := false ;
92791: LD_ADDR_EXP 108
92795: PUSH
92796: LD_INT 0
92798: ST_TO_ADDR
// sRemote := false ;
92799: LD_ADDR_EXP 109
92803: PUSH
92804: LD_INT 0
92806: ST_TO_ADDR
// sPowell := false ;
92807: LD_ADDR_EXP 110
92811: PUSH
92812: LD_INT 0
92814: ST_TO_ADDR
// sTeleport := false ;
92815: LD_ADDR_EXP 113
92819: PUSH
92820: LD_INT 0
92822: ST_TO_ADDR
// sOilTower := false ;
92823: LD_ADDR_EXP 115
92827: PUSH
92828: LD_INT 0
92830: ST_TO_ADDR
// sShovel := false ;
92831: LD_ADDR_EXP 116
92835: PUSH
92836: LD_INT 0
92838: ST_TO_ADDR
// sSheik := false ;
92839: LD_ADDR_EXP 117
92843: PUSH
92844: LD_INT 0
92846: ST_TO_ADDR
// sEarthquake := false ;
92847: LD_ADDR_EXP 119
92851: PUSH
92852: LD_INT 0
92854: ST_TO_ADDR
// sAI := false ;
92855: LD_ADDR_EXP 120
92859: PUSH
92860: LD_INT 0
92862: ST_TO_ADDR
// sCargo := false ;
92863: LD_ADDR_EXP 123
92867: PUSH
92868: LD_INT 0
92870: ST_TO_ADDR
// sDLaser := false ;
92871: LD_ADDR_EXP 124
92875: PUSH
92876: LD_INT 0
92878: ST_TO_ADDR
// sExchange := false ;
92879: LD_ADDR_EXP 125
92883: PUSH
92884: LD_INT 0
92886: ST_TO_ADDR
// sFac := false ;
92887: LD_ADDR_EXP 126
92891: PUSH
92892: LD_INT 0
92894: ST_TO_ADDR
// sPower := false ;
92895: LD_ADDR_EXP 127
92899: PUSH
92900: LD_INT 0
92902: ST_TO_ADDR
// sRandom := false ;
92903: LD_ADDR_EXP 128
92907: PUSH
92908: LD_INT 0
92910: ST_TO_ADDR
// sShield := false ;
92911: LD_ADDR_EXP 129
92915: PUSH
92916: LD_INT 0
92918: ST_TO_ADDR
// sTime := false ;
92919: LD_ADDR_EXP 130
92923: PUSH
92924: LD_INT 0
92926: ST_TO_ADDR
// sTools := false ;
92927: LD_ADDR_EXP 131
92931: PUSH
92932: LD_INT 0
92934: ST_TO_ADDR
// sSold := false ;
92935: LD_ADDR_EXP 96
92939: PUSH
92940: LD_INT 0
92942: ST_TO_ADDR
// sDiff := false ;
92943: LD_ADDR_EXP 97
92947: PUSH
92948: LD_INT 0
92950: ST_TO_ADDR
// sFog := false ;
92951: LD_ADDR_EXP 100
92955: PUSH
92956: LD_INT 0
92958: ST_TO_ADDR
// sReset := false ;
92959: LD_ADDR_EXP 101
92963: PUSH
92964: LD_INT 0
92966: ST_TO_ADDR
// sSun := false ;
92967: LD_ADDR_EXP 102
92971: PUSH
92972: LD_INT 0
92974: ST_TO_ADDR
// sTiger := false ;
92975: LD_ADDR_EXP 98
92979: PUSH
92980: LD_INT 0
92982: ST_TO_ADDR
// sBomb := false ;
92983: LD_ADDR_EXP 99
92987: PUSH
92988: LD_INT 0
92990: ST_TO_ADDR
// sWound := false ;
92991: LD_ADDR_EXP 107
92995: PUSH
92996: LD_INT 0
92998: ST_TO_ADDR
// sBetray := false ;
92999: LD_ADDR_EXP 111
93003: PUSH
93004: LD_INT 0
93006: ST_TO_ADDR
// sContamin := false ;
93007: LD_ADDR_EXP 112
93011: PUSH
93012: LD_INT 0
93014: ST_TO_ADDR
// sOil := false ;
93015: LD_ADDR_EXP 114
93019: PUSH
93020: LD_INT 0
93022: ST_TO_ADDR
// sStu := false ;
93023: LD_ADDR_EXP 118
93027: PUSH
93028: LD_INT 0
93030: ST_TO_ADDR
// sBazooka := false ;
93031: LD_ADDR_EXP 121
93035: PUSH
93036: LD_INT 0
93038: ST_TO_ADDR
// sMortar := false ;
93039: LD_ADDR_EXP 122
93043: PUSH
93044: LD_INT 0
93046: ST_TO_ADDR
// sRanger := false ;
93047: LD_ADDR_EXP 132
93051: PUSH
93052: LD_INT 0
93054: ST_TO_ADDR
// end ;
93055: LD_VAR 0 1
93059: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
93060: LD_INT 0
93062: PPUSH
93063: PPUSH
93064: PPUSH
93065: PPUSH
93066: PPUSH
// result := [ ] ;
93067: LD_ADDR_VAR 0 1
93071: PUSH
93072: EMPTY
93073: ST_TO_ADDR
// if campaign_id = 1 then
93074: LD_OWVAR 69
93078: PUSH
93079: LD_INT 1
93081: EQUAL
93082: IFFALSE 96018
// begin case mission_number of 1 :
93084: LD_OWVAR 70
93088: PUSH
93089: LD_INT 1
93091: DOUBLE
93092: EQUAL
93093: IFTRUE 93097
93095: GO 93161
93097: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
93098: LD_ADDR_VAR 0 1
93102: PUSH
93103: LD_INT 2
93105: PUSH
93106: LD_INT 4
93108: PUSH
93109: LD_INT 11
93111: PUSH
93112: LD_INT 12
93114: PUSH
93115: LD_INT 15
93117: PUSH
93118: LD_INT 16
93120: PUSH
93121: LD_INT 22
93123: PUSH
93124: LD_INT 23
93126: PUSH
93127: LD_INT 26
93129: PUSH
93130: EMPTY
93131: LIST
93132: LIST
93133: LIST
93134: LIST
93135: LIST
93136: LIST
93137: LIST
93138: LIST
93139: LIST
93140: PUSH
93141: LD_INT 101
93143: PUSH
93144: LD_INT 102
93146: PUSH
93147: LD_INT 106
93149: PUSH
93150: EMPTY
93151: LIST
93152: LIST
93153: LIST
93154: PUSH
93155: EMPTY
93156: LIST
93157: LIST
93158: ST_TO_ADDR
93159: GO 96018
93161: LD_INT 2
93163: DOUBLE
93164: EQUAL
93165: IFTRUE 93169
93167: GO 93241
93169: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
93170: LD_ADDR_VAR 0 1
93174: PUSH
93175: LD_INT 2
93177: PUSH
93178: LD_INT 4
93180: PUSH
93181: LD_INT 11
93183: PUSH
93184: LD_INT 12
93186: PUSH
93187: LD_INT 15
93189: PUSH
93190: LD_INT 16
93192: PUSH
93193: LD_INT 22
93195: PUSH
93196: LD_INT 23
93198: PUSH
93199: LD_INT 26
93201: PUSH
93202: EMPTY
93203: LIST
93204: LIST
93205: LIST
93206: LIST
93207: LIST
93208: LIST
93209: LIST
93210: LIST
93211: LIST
93212: PUSH
93213: LD_INT 101
93215: PUSH
93216: LD_INT 102
93218: PUSH
93219: LD_INT 105
93221: PUSH
93222: LD_INT 106
93224: PUSH
93225: LD_INT 108
93227: PUSH
93228: EMPTY
93229: LIST
93230: LIST
93231: LIST
93232: LIST
93233: LIST
93234: PUSH
93235: EMPTY
93236: LIST
93237: LIST
93238: ST_TO_ADDR
93239: GO 96018
93241: LD_INT 3
93243: DOUBLE
93244: EQUAL
93245: IFTRUE 93249
93247: GO 93325
93249: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
93250: LD_ADDR_VAR 0 1
93254: PUSH
93255: LD_INT 2
93257: PUSH
93258: LD_INT 4
93260: PUSH
93261: LD_INT 5
93263: PUSH
93264: LD_INT 11
93266: PUSH
93267: LD_INT 12
93269: PUSH
93270: LD_INT 15
93272: PUSH
93273: LD_INT 16
93275: PUSH
93276: LD_INT 22
93278: PUSH
93279: LD_INT 26
93281: PUSH
93282: LD_INT 36
93284: PUSH
93285: EMPTY
93286: LIST
93287: LIST
93288: LIST
93289: LIST
93290: LIST
93291: LIST
93292: LIST
93293: LIST
93294: LIST
93295: LIST
93296: PUSH
93297: LD_INT 101
93299: PUSH
93300: LD_INT 102
93302: PUSH
93303: LD_INT 105
93305: PUSH
93306: LD_INT 106
93308: PUSH
93309: LD_INT 108
93311: PUSH
93312: EMPTY
93313: LIST
93314: LIST
93315: LIST
93316: LIST
93317: LIST
93318: PUSH
93319: EMPTY
93320: LIST
93321: LIST
93322: ST_TO_ADDR
93323: GO 96018
93325: LD_INT 4
93327: DOUBLE
93328: EQUAL
93329: IFTRUE 93333
93331: GO 93417
93333: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
93334: LD_ADDR_VAR 0 1
93338: PUSH
93339: LD_INT 2
93341: PUSH
93342: LD_INT 4
93344: PUSH
93345: LD_INT 5
93347: PUSH
93348: LD_INT 8
93350: PUSH
93351: LD_INT 11
93353: PUSH
93354: LD_INT 12
93356: PUSH
93357: LD_INT 15
93359: PUSH
93360: LD_INT 16
93362: PUSH
93363: LD_INT 22
93365: PUSH
93366: LD_INT 23
93368: PUSH
93369: LD_INT 26
93371: PUSH
93372: LD_INT 36
93374: PUSH
93375: EMPTY
93376: LIST
93377: LIST
93378: LIST
93379: LIST
93380: LIST
93381: LIST
93382: LIST
93383: LIST
93384: LIST
93385: LIST
93386: LIST
93387: LIST
93388: PUSH
93389: LD_INT 101
93391: PUSH
93392: LD_INT 102
93394: PUSH
93395: LD_INT 105
93397: PUSH
93398: LD_INT 106
93400: PUSH
93401: LD_INT 108
93403: PUSH
93404: EMPTY
93405: LIST
93406: LIST
93407: LIST
93408: LIST
93409: LIST
93410: PUSH
93411: EMPTY
93412: LIST
93413: LIST
93414: ST_TO_ADDR
93415: GO 96018
93417: LD_INT 5
93419: DOUBLE
93420: EQUAL
93421: IFTRUE 93425
93423: GO 93525
93425: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
93426: LD_ADDR_VAR 0 1
93430: PUSH
93431: LD_INT 2
93433: PUSH
93434: LD_INT 4
93436: PUSH
93437: LD_INT 5
93439: PUSH
93440: LD_INT 6
93442: PUSH
93443: LD_INT 8
93445: PUSH
93446: LD_INT 11
93448: PUSH
93449: LD_INT 12
93451: PUSH
93452: LD_INT 15
93454: PUSH
93455: LD_INT 16
93457: PUSH
93458: LD_INT 22
93460: PUSH
93461: LD_INT 23
93463: PUSH
93464: LD_INT 25
93466: PUSH
93467: LD_INT 26
93469: PUSH
93470: LD_INT 36
93472: PUSH
93473: EMPTY
93474: LIST
93475: LIST
93476: LIST
93477: LIST
93478: LIST
93479: LIST
93480: LIST
93481: LIST
93482: LIST
93483: LIST
93484: LIST
93485: LIST
93486: LIST
93487: LIST
93488: PUSH
93489: LD_INT 101
93491: PUSH
93492: LD_INT 102
93494: PUSH
93495: LD_INT 105
93497: PUSH
93498: LD_INT 106
93500: PUSH
93501: LD_INT 108
93503: PUSH
93504: LD_INT 109
93506: PUSH
93507: LD_INT 112
93509: PUSH
93510: EMPTY
93511: LIST
93512: LIST
93513: LIST
93514: LIST
93515: LIST
93516: LIST
93517: LIST
93518: PUSH
93519: EMPTY
93520: LIST
93521: LIST
93522: ST_TO_ADDR
93523: GO 96018
93525: LD_INT 6
93527: DOUBLE
93528: EQUAL
93529: IFTRUE 93533
93531: GO 93653
93533: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
93534: LD_ADDR_VAR 0 1
93538: PUSH
93539: LD_INT 2
93541: PUSH
93542: LD_INT 4
93544: PUSH
93545: LD_INT 5
93547: PUSH
93548: LD_INT 6
93550: PUSH
93551: LD_INT 8
93553: PUSH
93554: LD_INT 11
93556: PUSH
93557: LD_INT 12
93559: PUSH
93560: LD_INT 15
93562: PUSH
93563: LD_INT 16
93565: PUSH
93566: LD_INT 20
93568: PUSH
93569: LD_INT 21
93571: PUSH
93572: LD_INT 22
93574: PUSH
93575: LD_INT 23
93577: PUSH
93578: LD_INT 25
93580: PUSH
93581: LD_INT 26
93583: PUSH
93584: LD_INT 30
93586: PUSH
93587: LD_INT 31
93589: PUSH
93590: LD_INT 32
93592: PUSH
93593: LD_INT 36
93595: PUSH
93596: EMPTY
93597: LIST
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: LIST
93604: LIST
93605: LIST
93606: LIST
93607: LIST
93608: LIST
93609: LIST
93610: LIST
93611: LIST
93612: LIST
93613: LIST
93614: LIST
93615: LIST
93616: PUSH
93617: LD_INT 101
93619: PUSH
93620: LD_INT 102
93622: PUSH
93623: LD_INT 105
93625: PUSH
93626: LD_INT 106
93628: PUSH
93629: LD_INT 108
93631: PUSH
93632: LD_INT 109
93634: PUSH
93635: LD_INT 112
93637: PUSH
93638: EMPTY
93639: LIST
93640: LIST
93641: LIST
93642: LIST
93643: LIST
93644: LIST
93645: LIST
93646: PUSH
93647: EMPTY
93648: LIST
93649: LIST
93650: ST_TO_ADDR
93651: GO 96018
93653: LD_INT 7
93655: DOUBLE
93656: EQUAL
93657: IFTRUE 93661
93659: GO 93761
93661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
93662: LD_ADDR_VAR 0 1
93666: PUSH
93667: LD_INT 2
93669: PUSH
93670: LD_INT 4
93672: PUSH
93673: LD_INT 5
93675: PUSH
93676: LD_INT 7
93678: PUSH
93679: LD_INT 11
93681: PUSH
93682: LD_INT 12
93684: PUSH
93685: LD_INT 15
93687: PUSH
93688: LD_INT 16
93690: PUSH
93691: LD_INT 20
93693: PUSH
93694: LD_INT 21
93696: PUSH
93697: LD_INT 22
93699: PUSH
93700: LD_INT 23
93702: PUSH
93703: LD_INT 25
93705: PUSH
93706: LD_INT 26
93708: PUSH
93709: EMPTY
93710: LIST
93711: LIST
93712: LIST
93713: LIST
93714: LIST
93715: LIST
93716: LIST
93717: LIST
93718: LIST
93719: LIST
93720: LIST
93721: LIST
93722: LIST
93723: LIST
93724: PUSH
93725: LD_INT 101
93727: PUSH
93728: LD_INT 102
93730: PUSH
93731: LD_INT 103
93733: PUSH
93734: LD_INT 105
93736: PUSH
93737: LD_INT 106
93739: PUSH
93740: LD_INT 108
93742: PUSH
93743: LD_INT 112
93745: PUSH
93746: EMPTY
93747: LIST
93748: LIST
93749: LIST
93750: LIST
93751: LIST
93752: LIST
93753: LIST
93754: PUSH
93755: EMPTY
93756: LIST
93757: LIST
93758: ST_TO_ADDR
93759: GO 96018
93761: LD_INT 8
93763: DOUBLE
93764: EQUAL
93765: IFTRUE 93769
93767: GO 93897
93769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
93770: LD_ADDR_VAR 0 1
93774: PUSH
93775: LD_INT 2
93777: PUSH
93778: LD_INT 4
93780: PUSH
93781: LD_INT 5
93783: PUSH
93784: LD_INT 6
93786: PUSH
93787: LD_INT 7
93789: PUSH
93790: LD_INT 8
93792: PUSH
93793: LD_INT 11
93795: PUSH
93796: LD_INT 12
93798: PUSH
93799: LD_INT 15
93801: PUSH
93802: LD_INT 16
93804: PUSH
93805: LD_INT 20
93807: PUSH
93808: LD_INT 21
93810: PUSH
93811: LD_INT 22
93813: PUSH
93814: LD_INT 23
93816: PUSH
93817: LD_INT 25
93819: PUSH
93820: LD_INT 26
93822: PUSH
93823: LD_INT 30
93825: PUSH
93826: LD_INT 31
93828: PUSH
93829: LD_INT 32
93831: PUSH
93832: LD_INT 36
93834: PUSH
93835: EMPTY
93836: LIST
93837: LIST
93838: LIST
93839: LIST
93840: LIST
93841: LIST
93842: LIST
93843: LIST
93844: LIST
93845: LIST
93846: LIST
93847: LIST
93848: LIST
93849: LIST
93850: LIST
93851: LIST
93852: LIST
93853: LIST
93854: LIST
93855: LIST
93856: PUSH
93857: LD_INT 101
93859: PUSH
93860: LD_INT 102
93862: PUSH
93863: LD_INT 103
93865: PUSH
93866: LD_INT 105
93868: PUSH
93869: LD_INT 106
93871: PUSH
93872: LD_INT 108
93874: PUSH
93875: LD_INT 109
93877: PUSH
93878: LD_INT 112
93880: PUSH
93881: EMPTY
93882: LIST
93883: LIST
93884: LIST
93885: LIST
93886: LIST
93887: LIST
93888: LIST
93889: LIST
93890: PUSH
93891: EMPTY
93892: LIST
93893: LIST
93894: ST_TO_ADDR
93895: GO 96018
93897: LD_INT 9
93899: DOUBLE
93900: EQUAL
93901: IFTRUE 93905
93903: GO 94041
93905: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
93906: LD_ADDR_VAR 0 1
93910: PUSH
93911: LD_INT 2
93913: PUSH
93914: LD_INT 4
93916: PUSH
93917: LD_INT 5
93919: PUSH
93920: LD_INT 6
93922: PUSH
93923: LD_INT 7
93925: PUSH
93926: LD_INT 8
93928: PUSH
93929: LD_INT 11
93931: PUSH
93932: LD_INT 12
93934: PUSH
93935: LD_INT 15
93937: PUSH
93938: LD_INT 16
93940: PUSH
93941: LD_INT 20
93943: PUSH
93944: LD_INT 21
93946: PUSH
93947: LD_INT 22
93949: PUSH
93950: LD_INT 23
93952: PUSH
93953: LD_INT 25
93955: PUSH
93956: LD_INT 26
93958: PUSH
93959: LD_INT 28
93961: PUSH
93962: LD_INT 30
93964: PUSH
93965: LD_INT 31
93967: PUSH
93968: LD_INT 32
93970: PUSH
93971: LD_INT 36
93973: PUSH
93974: EMPTY
93975: LIST
93976: LIST
93977: LIST
93978: LIST
93979: LIST
93980: LIST
93981: LIST
93982: LIST
93983: LIST
93984: LIST
93985: LIST
93986: LIST
93987: LIST
93988: LIST
93989: LIST
93990: LIST
93991: LIST
93992: LIST
93993: LIST
93994: LIST
93995: LIST
93996: PUSH
93997: LD_INT 101
93999: PUSH
94000: LD_INT 102
94002: PUSH
94003: LD_INT 103
94005: PUSH
94006: LD_INT 105
94008: PUSH
94009: LD_INT 106
94011: PUSH
94012: LD_INT 108
94014: PUSH
94015: LD_INT 109
94017: PUSH
94018: LD_INT 112
94020: PUSH
94021: LD_INT 114
94023: PUSH
94024: EMPTY
94025: LIST
94026: LIST
94027: LIST
94028: LIST
94029: LIST
94030: LIST
94031: LIST
94032: LIST
94033: LIST
94034: PUSH
94035: EMPTY
94036: LIST
94037: LIST
94038: ST_TO_ADDR
94039: GO 96018
94041: LD_INT 10
94043: DOUBLE
94044: EQUAL
94045: IFTRUE 94049
94047: GO 94233
94049: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
94050: LD_ADDR_VAR 0 1
94054: PUSH
94055: LD_INT 2
94057: PUSH
94058: LD_INT 4
94060: PUSH
94061: LD_INT 5
94063: PUSH
94064: LD_INT 6
94066: PUSH
94067: LD_INT 7
94069: PUSH
94070: LD_INT 8
94072: PUSH
94073: LD_INT 9
94075: PUSH
94076: LD_INT 10
94078: PUSH
94079: LD_INT 11
94081: PUSH
94082: LD_INT 12
94084: PUSH
94085: LD_INT 13
94087: PUSH
94088: LD_INT 14
94090: PUSH
94091: LD_INT 15
94093: PUSH
94094: LD_INT 16
94096: PUSH
94097: LD_INT 17
94099: PUSH
94100: LD_INT 18
94102: PUSH
94103: LD_INT 19
94105: PUSH
94106: LD_INT 20
94108: PUSH
94109: LD_INT 21
94111: PUSH
94112: LD_INT 22
94114: PUSH
94115: LD_INT 23
94117: PUSH
94118: LD_INT 24
94120: PUSH
94121: LD_INT 25
94123: PUSH
94124: LD_INT 26
94126: PUSH
94127: LD_INT 28
94129: PUSH
94130: LD_INT 30
94132: PUSH
94133: LD_INT 31
94135: PUSH
94136: LD_INT 32
94138: PUSH
94139: LD_INT 36
94141: PUSH
94142: EMPTY
94143: LIST
94144: LIST
94145: LIST
94146: LIST
94147: LIST
94148: LIST
94149: LIST
94150: LIST
94151: LIST
94152: LIST
94153: LIST
94154: LIST
94155: LIST
94156: LIST
94157: LIST
94158: LIST
94159: LIST
94160: LIST
94161: LIST
94162: LIST
94163: LIST
94164: LIST
94165: LIST
94166: LIST
94167: LIST
94168: LIST
94169: LIST
94170: LIST
94171: LIST
94172: PUSH
94173: LD_INT 101
94175: PUSH
94176: LD_INT 102
94178: PUSH
94179: LD_INT 103
94181: PUSH
94182: LD_INT 104
94184: PUSH
94185: LD_INT 105
94187: PUSH
94188: LD_INT 106
94190: PUSH
94191: LD_INT 107
94193: PUSH
94194: LD_INT 108
94196: PUSH
94197: LD_INT 109
94199: PUSH
94200: LD_INT 110
94202: PUSH
94203: LD_INT 111
94205: PUSH
94206: LD_INT 112
94208: PUSH
94209: LD_INT 114
94211: PUSH
94212: EMPTY
94213: LIST
94214: LIST
94215: LIST
94216: LIST
94217: LIST
94218: LIST
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: LIST
94226: PUSH
94227: EMPTY
94228: LIST
94229: LIST
94230: ST_TO_ADDR
94231: GO 96018
94233: LD_INT 11
94235: DOUBLE
94236: EQUAL
94237: IFTRUE 94241
94239: GO 94433
94241: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
94242: LD_ADDR_VAR 0 1
94246: PUSH
94247: LD_INT 2
94249: PUSH
94250: LD_INT 3
94252: PUSH
94253: LD_INT 4
94255: PUSH
94256: LD_INT 5
94258: PUSH
94259: LD_INT 6
94261: PUSH
94262: LD_INT 7
94264: PUSH
94265: LD_INT 8
94267: PUSH
94268: LD_INT 9
94270: PUSH
94271: LD_INT 10
94273: PUSH
94274: LD_INT 11
94276: PUSH
94277: LD_INT 12
94279: PUSH
94280: LD_INT 13
94282: PUSH
94283: LD_INT 14
94285: PUSH
94286: LD_INT 15
94288: PUSH
94289: LD_INT 16
94291: PUSH
94292: LD_INT 17
94294: PUSH
94295: LD_INT 18
94297: PUSH
94298: LD_INT 19
94300: PUSH
94301: LD_INT 20
94303: PUSH
94304: LD_INT 21
94306: PUSH
94307: LD_INT 22
94309: PUSH
94310: LD_INT 23
94312: PUSH
94313: LD_INT 24
94315: PUSH
94316: LD_INT 25
94318: PUSH
94319: LD_INT 26
94321: PUSH
94322: LD_INT 28
94324: PUSH
94325: LD_INT 30
94327: PUSH
94328: LD_INT 31
94330: PUSH
94331: LD_INT 32
94333: PUSH
94334: LD_INT 34
94336: PUSH
94337: LD_INT 36
94339: PUSH
94340: EMPTY
94341: LIST
94342: LIST
94343: LIST
94344: LIST
94345: LIST
94346: LIST
94347: LIST
94348: LIST
94349: LIST
94350: LIST
94351: LIST
94352: LIST
94353: LIST
94354: LIST
94355: LIST
94356: LIST
94357: LIST
94358: LIST
94359: LIST
94360: LIST
94361: LIST
94362: LIST
94363: LIST
94364: LIST
94365: LIST
94366: LIST
94367: LIST
94368: LIST
94369: LIST
94370: LIST
94371: LIST
94372: PUSH
94373: LD_INT 101
94375: PUSH
94376: LD_INT 102
94378: PUSH
94379: LD_INT 103
94381: PUSH
94382: LD_INT 104
94384: PUSH
94385: LD_INT 105
94387: PUSH
94388: LD_INT 106
94390: PUSH
94391: LD_INT 107
94393: PUSH
94394: LD_INT 108
94396: PUSH
94397: LD_INT 109
94399: PUSH
94400: LD_INT 110
94402: PUSH
94403: LD_INT 111
94405: PUSH
94406: LD_INT 112
94408: PUSH
94409: LD_INT 114
94411: PUSH
94412: EMPTY
94413: LIST
94414: LIST
94415: LIST
94416: LIST
94417: LIST
94418: LIST
94419: LIST
94420: LIST
94421: LIST
94422: LIST
94423: LIST
94424: LIST
94425: LIST
94426: PUSH
94427: EMPTY
94428: LIST
94429: LIST
94430: ST_TO_ADDR
94431: GO 96018
94433: LD_INT 12
94435: DOUBLE
94436: EQUAL
94437: IFTRUE 94441
94439: GO 94649
94441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
94442: LD_ADDR_VAR 0 1
94446: PUSH
94447: LD_INT 1
94449: PUSH
94450: LD_INT 2
94452: PUSH
94453: LD_INT 3
94455: PUSH
94456: LD_INT 4
94458: PUSH
94459: LD_INT 5
94461: PUSH
94462: LD_INT 6
94464: PUSH
94465: LD_INT 7
94467: PUSH
94468: LD_INT 8
94470: PUSH
94471: LD_INT 9
94473: PUSH
94474: LD_INT 10
94476: PUSH
94477: LD_INT 11
94479: PUSH
94480: LD_INT 12
94482: PUSH
94483: LD_INT 13
94485: PUSH
94486: LD_INT 14
94488: PUSH
94489: LD_INT 15
94491: PUSH
94492: LD_INT 16
94494: PUSH
94495: LD_INT 17
94497: PUSH
94498: LD_INT 18
94500: PUSH
94501: LD_INT 19
94503: PUSH
94504: LD_INT 20
94506: PUSH
94507: LD_INT 21
94509: PUSH
94510: LD_INT 22
94512: PUSH
94513: LD_INT 23
94515: PUSH
94516: LD_INT 24
94518: PUSH
94519: LD_INT 25
94521: PUSH
94522: LD_INT 26
94524: PUSH
94525: LD_INT 27
94527: PUSH
94528: LD_INT 28
94530: PUSH
94531: LD_INT 30
94533: PUSH
94534: LD_INT 31
94536: PUSH
94537: LD_INT 32
94539: PUSH
94540: LD_INT 33
94542: PUSH
94543: LD_INT 34
94545: PUSH
94546: LD_INT 36
94548: PUSH
94549: EMPTY
94550: LIST
94551: LIST
94552: LIST
94553: LIST
94554: LIST
94555: LIST
94556: LIST
94557: LIST
94558: LIST
94559: LIST
94560: LIST
94561: LIST
94562: LIST
94563: LIST
94564: LIST
94565: LIST
94566: LIST
94567: LIST
94568: LIST
94569: LIST
94570: LIST
94571: LIST
94572: LIST
94573: LIST
94574: LIST
94575: LIST
94576: LIST
94577: LIST
94578: LIST
94579: LIST
94580: LIST
94581: LIST
94582: LIST
94583: LIST
94584: PUSH
94585: LD_INT 101
94587: PUSH
94588: LD_INT 102
94590: PUSH
94591: LD_INT 103
94593: PUSH
94594: LD_INT 104
94596: PUSH
94597: LD_INT 105
94599: PUSH
94600: LD_INT 106
94602: PUSH
94603: LD_INT 107
94605: PUSH
94606: LD_INT 108
94608: PUSH
94609: LD_INT 109
94611: PUSH
94612: LD_INT 110
94614: PUSH
94615: LD_INT 111
94617: PUSH
94618: LD_INT 112
94620: PUSH
94621: LD_INT 113
94623: PUSH
94624: LD_INT 114
94626: PUSH
94627: EMPTY
94628: LIST
94629: LIST
94630: LIST
94631: LIST
94632: LIST
94633: LIST
94634: LIST
94635: LIST
94636: LIST
94637: LIST
94638: LIST
94639: LIST
94640: LIST
94641: LIST
94642: PUSH
94643: EMPTY
94644: LIST
94645: LIST
94646: ST_TO_ADDR
94647: GO 96018
94649: LD_INT 13
94651: DOUBLE
94652: EQUAL
94653: IFTRUE 94657
94655: GO 94853
94657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
94658: LD_ADDR_VAR 0 1
94662: PUSH
94663: LD_INT 1
94665: PUSH
94666: LD_INT 2
94668: PUSH
94669: LD_INT 3
94671: PUSH
94672: LD_INT 4
94674: PUSH
94675: LD_INT 5
94677: PUSH
94678: LD_INT 8
94680: PUSH
94681: LD_INT 9
94683: PUSH
94684: LD_INT 10
94686: PUSH
94687: LD_INT 11
94689: PUSH
94690: LD_INT 12
94692: PUSH
94693: LD_INT 14
94695: PUSH
94696: LD_INT 15
94698: PUSH
94699: LD_INT 16
94701: PUSH
94702: LD_INT 17
94704: PUSH
94705: LD_INT 18
94707: PUSH
94708: LD_INT 19
94710: PUSH
94711: LD_INT 20
94713: PUSH
94714: LD_INT 21
94716: PUSH
94717: LD_INT 22
94719: PUSH
94720: LD_INT 23
94722: PUSH
94723: LD_INT 24
94725: PUSH
94726: LD_INT 25
94728: PUSH
94729: LD_INT 26
94731: PUSH
94732: LD_INT 27
94734: PUSH
94735: LD_INT 28
94737: PUSH
94738: LD_INT 30
94740: PUSH
94741: LD_INT 31
94743: PUSH
94744: LD_INT 32
94746: PUSH
94747: LD_INT 33
94749: PUSH
94750: LD_INT 34
94752: PUSH
94753: LD_INT 36
94755: PUSH
94756: EMPTY
94757: LIST
94758: LIST
94759: LIST
94760: LIST
94761: LIST
94762: LIST
94763: LIST
94764: LIST
94765: LIST
94766: LIST
94767: LIST
94768: LIST
94769: LIST
94770: LIST
94771: LIST
94772: LIST
94773: LIST
94774: LIST
94775: LIST
94776: LIST
94777: LIST
94778: LIST
94779: LIST
94780: LIST
94781: LIST
94782: LIST
94783: LIST
94784: LIST
94785: LIST
94786: LIST
94787: LIST
94788: PUSH
94789: LD_INT 101
94791: PUSH
94792: LD_INT 102
94794: PUSH
94795: LD_INT 103
94797: PUSH
94798: LD_INT 104
94800: PUSH
94801: LD_INT 105
94803: PUSH
94804: LD_INT 106
94806: PUSH
94807: LD_INT 107
94809: PUSH
94810: LD_INT 108
94812: PUSH
94813: LD_INT 109
94815: PUSH
94816: LD_INT 110
94818: PUSH
94819: LD_INT 111
94821: PUSH
94822: LD_INT 112
94824: PUSH
94825: LD_INT 113
94827: PUSH
94828: LD_INT 114
94830: PUSH
94831: EMPTY
94832: LIST
94833: LIST
94834: LIST
94835: LIST
94836: LIST
94837: LIST
94838: LIST
94839: LIST
94840: LIST
94841: LIST
94842: LIST
94843: LIST
94844: LIST
94845: LIST
94846: PUSH
94847: EMPTY
94848: LIST
94849: LIST
94850: ST_TO_ADDR
94851: GO 96018
94853: LD_INT 14
94855: DOUBLE
94856: EQUAL
94857: IFTRUE 94861
94859: GO 95073
94861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
94862: LD_ADDR_VAR 0 1
94866: PUSH
94867: LD_INT 1
94869: PUSH
94870: LD_INT 2
94872: PUSH
94873: LD_INT 3
94875: PUSH
94876: LD_INT 4
94878: PUSH
94879: LD_INT 5
94881: PUSH
94882: LD_INT 6
94884: PUSH
94885: LD_INT 7
94887: PUSH
94888: LD_INT 8
94890: PUSH
94891: LD_INT 9
94893: PUSH
94894: LD_INT 10
94896: PUSH
94897: LD_INT 11
94899: PUSH
94900: LD_INT 12
94902: PUSH
94903: LD_INT 13
94905: PUSH
94906: LD_INT 14
94908: PUSH
94909: LD_INT 15
94911: PUSH
94912: LD_INT 16
94914: PUSH
94915: LD_INT 17
94917: PUSH
94918: LD_INT 18
94920: PUSH
94921: LD_INT 19
94923: PUSH
94924: LD_INT 20
94926: PUSH
94927: LD_INT 21
94929: PUSH
94930: LD_INT 22
94932: PUSH
94933: LD_INT 23
94935: PUSH
94936: LD_INT 24
94938: PUSH
94939: LD_INT 25
94941: PUSH
94942: LD_INT 26
94944: PUSH
94945: LD_INT 27
94947: PUSH
94948: LD_INT 28
94950: PUSH
94951: LD_INT 29
94953: PUSH
94954: LD_INT 30
94956: PUSH
94957: LD_INT 31
94959: PUSH
94960: LD_INT 32
94962: PUSH
94963: LD_INT 33
94965: PUSH
94966: LD_INT 34
94968: PUSH
94969: LD_INT 36
94971: PUSH
94972: EMPTY
94973: LIST
94974: LIST
94975: LIST
94976: LIST
94977: LIST
94978: LIST
94979: LIST
94980: LIST
94981: LIST
94982: LIST
94983: LIST
94984: LIST
94985: LIST
94986: LIST
94987: LIST
94988: LIST
94989: LIST
94990: LIST
94991: LIST
94992: LIST
94993: LIST
94994: LIST
94995: LIST
94996: LIST
94997: LIST
94998: LIST
94999: LIST
95000: LIST
95001: LIST
95002: LIST
95003: LIST
95004: LIST
95005: LIST
95006: LIST
95007: LIST
95008: PUSH
95009: LD_INT 101
95011: PUSH
95012: LD_INT 102
95014: PUSH
95015: LD_INT 103
95017: PUSH
95018: LD_INT 104
95020: PUSH
95021: LD_INT 105
95023: PUSH
95024: LD_INT 106
95026: PUSH
95027: LD_INT 107
95029: PUSH
95030: LD_INT 108
95032: PUSH
95033: LD_INT 109
95035: PUSH
95036: LD_INT 110
95038: PUSH
95039: LD_INT 111
95041: PUSH
95042: LD_INT 112
95044: PUSH
95045: LD_INT 113
95047: PUSH
95048: LD_INT 114
95050: PUSH
95051: EMPTY
95052: LIST
95053: LIST
95054: LIST
95055: LIST
95056: LIST
95057: LIST
95058: LIST
95059: LIST
95060: LIST
95061: LIST
95062: LIST
95063: LIST
95064: LIST
95065: LIST
95066: PUSH
95067: EMPTY
95068: LIST
95069: LIST
95070: ST_TO_ADDR
95071: GO 96018
95073: LD_INT 15
95075: DOUBLE
95076: EQUAL
95077: IFTRUE 95081
95079: GO 95293
95081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
95082: LD_ADDR_VAR 0 1
95086: PUSH
95087: LD_INT 1
95089: PUSH
95090: LD_INT 2
95092: PUSH
95093: LD_INT 3
95095: PUSH
95096: LD_INT 4
95098: PUSH
95099: LD_INT 5
95101: PUSH
95102: LD_INT 6
95104: PUSH
95105: LD_INT 7
95107: PUSH
95108: LD_INT 8
95110: PUSH
95111: LD_INT 9
95113: PUSH
95114: LD_INT 10
95116: PUSH
95117: LD_INT 11
95119: PUSH
95120: LD_INT 12
95122: PUSH
95123: LD_INT 13
95125: PUSH
95126: LD_INT 14
95128: PUSH
95129: LD_INT 15
95131: PUSH
95132: LD_INT 16
95134: PUSH
95135: LD_INT 17
95137: PUSH
95138: LD_INT 18
95140: PUSH
95141: LD_INT 19
95143: PUSH
95144: LD_INT 20
95146: PUSH
95147: LD_INT 21
95149: PUSH
95150: LD_INT 22
95152: PUSH
95153: LD_INT 23
95155: PUSH
95156: LD_INT 24
95158: PUSH
95159: LD_INT 25
95161: PUSH
95162: LD_INT 26
95164: PUSH
95165: LD_INT 27
95167: PUSH
95168: LD_INT 28
95170: PUSH
95171: LD_INT 29
95173: PUSH
95174: LD_INT 30
95176: PUSH
95177: LD_INT 31
95179: PUSH
95180: LD_INT 32
95182: PUSH
95183: LD_INT 33
95185: PUSH
95186: LD_INT 34
95188: PUSH
95189: LD_INT 36
95191: PUSH
95192: EMPTY
95193: LIST
95194: LIST
95195: LIST
95196: LIST
95197: LIST
95198: LIST
95199: LIST
95200: LIST
95201: LIST
95202: LIST
95203: LIST
95204: LIST
95205: LIST
95206: LIST
95207: LIST
95208: LIST
95209: LIST
95210: LIST
95211: LIST
95212: LIST
95213: LIST
95214: LIST
95215: LIST
95216: LIST
95217: LIST
95218: LIST
95219: LIST
95220: LIST
95221: LIST
95222: LIST
95223: LIST
95224: LIST
95225: LIST
95226: LIST
95227: LIST
95228: PUSH
95229: LD_INT 101
95231: PUSH
95232: LD_INT 102
95234: PUSH
95235: LD_INT 103
95237: PUSH
95238: LD_INT 104
95240: PUSH
95241: LD_INT 105
95243: PUSH
95244: LD_INT 106
95246: PUSH
95247: LD_INT 107
95249: PUSH
95250: LD_INT 108
95252: PUSH
95253: LD_INT 109
95255: PUSH
95256: LD_INT 110
95258: PUSH
95259: LD_INT 111
95261: PUSH
95262: LD_INT 112
95264: PUSH
95265: LD_INT 113
95267: PUSH
95268: LD_INT 114
95270: PUSH
95271: EMPTY
95272: LIST
95273: LIST
95274: LIST
95275: LIST
95276: LIST
95277: LIST
95278: LIST
95279: LIST
95280: LIST
95281: LIST
95282: LIST
95283: LIST
95284: LIST
95285: LIST
95286: PUSH
95287: EMPTY
95288: LIST
95289: LIST
95290: ST_TO_ADDR
95291: GO 96018
95293: LD_INT 16
95295: DOUBLE
95296: EQUAL
95297: IFTRUE 95301
95299: GO 95425
95301: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
95302: LD_ADDR_VAR 0 1
95306: PUSH
95307: LD_INT 2
95309: PUSH
95310: LD_INT 4
95312: PUSH
95313: LD_INT 5
95315: PUSH
95316: LD_INT 7
95318: PUSH
95319: LD_INT 11
95321: PUSH
95322: LD_INT 12
95324: PUSH
95325: LD_INT 15
95327: PUSH
95328: LD_INT 16
95330: PUSH
95331: LD_INT 20
95333: PUSH
95334: LD_INT 21
95336: PUSH
95337: LD_INT 22
95339: PUSH
95340: LD_INT 23
95342: PUSH
95343: LD_INT 25
95345: PUSH
95346: LD_INT 26
95348: PUSH
95349: LD_INT 30
95351: PUSH
95352: LD_INT 31
95354: PUSH
95355: LD_INT 32
95357: PUSH
95358: LD_INT 33
95360: PUSH
95361: LD_INT 34
95363: PUSH
95364: EMPTY
95365: LIST
95366: LIST
95367: LIST
95368: LIST
95369: LIST
95370: LIST
95371: LIST
95372: LIST
95373: LIST
95374: LIST
95375: LIST
95376: LIST
95377: LIST
95378: LIST
95379: LIST
95380: LIST
95381: LIST
95382: LIST
95383: LIST
95384: PUSH
95385: LD_INT 101
95387: PUSH
95388: LD_INT 102
95390: PUSH
95391: LD_INT 103
95393: PUSH
95394: LD_INT 106
95396: PUSH
95397: LD_INT 108
95399: PUSH
95400: LD_INT 112
95402: PUSH
95403: LD_INT 113
95405: PUSH
95406: LD_INT 114
95408: PUSH
95409: EMPTY
95410: LIST
95411: LIST
95412: LIST
95413: LIST
95414: LIST
95415: LIST
95416: LIST
95417: LIST
95418: PUSH
95419: EMPTY
95420: LIST
95421: LIST
95422: ST_TO_ADDR
95423: GO 96018
95425: LD_INT 17
95427: DOUBLE
95428: EQUAL
95429: IFTRUE 95433
95431: GO 95645
95433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
95434: LD_ADDR_VAR 0 1
95438: PUSH
95439: LD_INT 1
95441: PUSH
95442: LD_INT 2
95444: PUSH
95445: LD_INT 3
95447: PUSH
95448: LD_INT 4
95450: PUSH
95451: LD_INT 5
95453: PUSH
95454: LD_INT 6
95456: PUSH
95457: LD_INT 7
95459: PUSH
95460: LD_INT 8
95462: PUSH
95463: LD_INT 9
95465: PUSH
95466: LD_INT 10
95468: PUSH
95469: LD_INT 11
95471: PUSH
95472: LD_INT 12
95474: PUSH
95475: LD_INT 13
95477: PUSH
95478: LD_INT 14
95480: PUSH
95481: LD_INT 15
95483: PUSH
95484: LD_INT 16
95486: PUSH
95487: LD_INT 17
95489: PUSH
95490: LD_INT 18
95492: PUSH
95493: LD_INT 19
95495: PUSH
95496: LD_INT 20
95498: PUSH
95499: LD_INT 21
95501: PUSH
95502: LD_INT 22
95504: PUSH
95505: LD_INT 23
95507: PUSH
95508: LD_INT 24
95510: PUSH
95511: LD_INT 25
95513: PUSH
95514: LD_INT 26
95516: PUSH
95517: LD_INT 27
95519: PUSH
95520: LD_INT 28
95522: PUSH
95523: LD_INT 29
95525: PUSH
95526: LD_INT 30
95528: PUSH
95529: LD_INT 31
95531: PUSH
95532: LD_INT 32
95534: PUSH
95535: LD_INT 33
95537: PUSH
95538: LD_INT 34
95540: PUSH
95541: LD_INT 36
95543: PUSH
95544: EMPTY
95545: LIST
95546: LIST
95547: LIST
95548: LIST
95549: LIST
95550: LIST
95551: LIST
95552: LIST
95553: LIST
95554: LIST
95555: LIST
95556: LIST
95557: LIST
95558: LIST
95559: LIST
95560: LIST
95561: LIST
95562: LIST
95563: LIST
95564: LIST
95565: LIST
95566: LIST
95567: LIST
95568: LIST
95569: LIST
95570: LIST
95571: LIST
95572: LIST
95573: LIST
95574: LIST
95575: LIST
95576: LIST
95577: LIST
95578: LIST
95579: LIST
95580: PUSH
95581: LD_INT 101
95583: PUSH
95584: LD_INT 102
95586: PUSH
95587: LD_INT 103
95589: PUSH
95590: LD_INT 104
95592: PUSH
95593: LD_INT 105
95595: PUSH
95596: LD_INT 106
95598: PUSH
95599: LD_INT 107
95601: PUSH
95602: LD_INT 108
95604: PUSH
95605: LD_INT 109
95607: PUSH
95608: LD_INT 110
95610: PUSH
95611: LD_INT 111
95613: PUSH
95614: LD_INT 112
95616: PUSH
95617: LD_INT 113
95619: PUSH
95620: LD_INT 114
95622: PUSH
95623: EMPTY
95624: LIST
95625: LIST
95626: LIST
95627: LIST
95628: LIST
95629: LIST
95630: LIST
95631: LIST
95632: LIST
95633: LIST
95634: LIST
95635: LIST
95636: LIST
95637: LIST
95638: PUSH
95639: EMPTY
95640: LIST
95641: LIST
95642: ST_TO_ADDR
95643: GO 96018
95645: LD_INT 18
95647: DOUBLE
95648: EQUAL
95649: IFTRUE 95653
95651: GO 95789
95653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
95654: LD_ADDR_VAR 0 1
95658: PUSH
95659: LD_INT 2
95661: PUSH
95662: LD_INT 4
95664: PUSH
95665: LD_INT 5
95667: PUSH
95668: LD_INT 7
95670: PUSH
95671: LD_INT 11
95673: PUSH
95674: LD_INT 12
95676: PUSH
95677: LD_INT 15
95679: PUSH
95680: LD_INT 16
95682: PUSH
95683: LD_INT 20
95685: PUSH
95686: LD_INT 21
95688: PUSH
95689: LD_INT 22
95691: PUSH
95692: LD_INT 23
95694: PUSH
95695: LD_INT 25
95697: PUSH
95698: LD_INT 26
95700: PUSH
95701: LD_INT 30
95703: PUSH
95704: LD_INT 31
95706: PUSH
95707: LD_INT 32
95709: PUSH
95710: LD_INT 33
95712: PUSH
95713: LD_INT 34
95715: PUSH
95716: LD_INT 35
95718: PUSH
95719: LD_INT 36
95721: PUSH
95722: EMPTY
95723: LIST
95724: LIST
95725: LIST
95726: LIST
95727: LIST
95728: LIST
95729: LIST
95730: LIST
95731: LIST
95732: LIST
95733: LIST
95734: LIST
95735: LIST
95736: LIST
95737: LIST
95738: LIST
95739: LIST
95740: LIST
95741: LIST
95742: LIST
95743: LIST
95744: PUSH
95745: LD_INT 101
95747: PUSH
95748: LD_INT 102
95750: PUSH
95751: LD_INT 103
95753: PUSH
95754: LD_INT 106
95756: PUSH
95757: LD_INT 108
95759: PUSH
95760: LD_INT 112
95762: PUSH
95763: LD_INT 113
95765: PUSH
95766: LD_INT 114
95768: PUSH
95769: LD_INT 115
95771: PUSH
95772: EMPTY
95773: LIST
95774: LIST
95775: LIST
95776: LIST
95777: LIST
95778: LIST
95779: LIST
95780: LIST
95781: LIST
95782: PUSH
95783: EMPTY
95784: LIST
95785: LIST
95786: ST_TO_ADDR
95787: GO 96018
95789: LD_INT 19
95791: DOUBLE
95792: EQUAL
95793: IFTRUE 95797
95795: GO 96017
95797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
95798: LD_ADDR_VAR 0 1
95802: PUSH
95803: LD_INT 1
95805: PUSH
95806: LD_INT 2
95808: PUSH
95809: LD_INT 3
95811: PUSH
95812: LD_INT 4
95814: PUSH
95815: LD_INT 5
95817: PUSH
95818: LD_INT 6
95820: PUSH
95821: LD_INT 7
95823: PUSH
95824: LD_INT 8
95826: PUSH
95827: LD_INT 9
95829: PUSH
95830: LD_INT 10
95832: PUSH
95833: LD_INT 11
95835: PUSH
95836: LD_INT 12
95838: PUSH
95839: LD_INT 13
95841: PUSH
95842: LD_INT 14
95844: PUSH
95845: LD_INT 15
95847: PUSH
95848: LD_INT 16
95850: PUSH
95851: LD_INT 17
95853: PUSH
95854: LD_INT 18
95856: PUSH
95857: LD_INT 19
95859: PUSH
95860: LD_INT 20
95862: PUSH
95863: LD_INT 21
95865: PUSH
95866: LD_INT 22
95868: PUSH
95869: LD_INT 23
95871: PUSH
95872: LD_INT 24
95874: PUSH
95875: LD_INT 25
95877: PUSH
95878: LD_INT 26
95880: PUSH
95881: LD_INT 27
95883: PUSH
95884: LD_INT 28
95886: PUSH
95887: LD_INT 29
95889: PUSH
95890: LD_INT 30
95892: PUSH
95893: LD_INT 31
95895: PUSH
95896: LD_INT 32
95898: PUSH
95899: LD_INT 33
95901: PUSH
95902: LD_INT 34
95904: PUSH
95905: LD_INT 35
95907: PUSH
95908: LD_INT 36
95910: PUSH
95911: EMPTY
95912: LIST
95913: LIST
95914: LIST
95915: LIST
95916: LIST
95917: LIST
95918: LIST
95919: LIST
95920: LIST
95921: LIST
95922: LIST
95923: LIST
95924: LIST
95925: LIST
95926: LIST
95927: LIST
95928: LIST
95929: LIST
95930: LIST
95931: LIST
95932: LIST
95933: LIST
95934: LIST
95935: LIST
95936: LIST
95937: LIST
95938: LIST
95939: LIST
95940: LIST
95941: LIST
95942: LIST
95943: LIST
95944: LIST
95945: LIST
95946: LIST
95947: LIST
95948: PUSH
95949: LD_INT 101
95951: PUSH
95952: LD_INT 102
95954: PUSH
95955: LD_INT 103
95957: PUSH
95958: LD_INT 104
95960: PUSH
95961: LD_INT 105
95963: PUSH
95964: LD_INT 106
95966: PUSH
95967: LD_INT 107
95969: PUSH
95970: LD_INT 108
95972: PUSH
95973: LD_INT 109
95975: PUSH
95976: LD_INT 110
95978: PUSH
95979: LD_INT 111
95981: PUSH
95982: LD_INT 112
95984: PUSH
95985: LD_INT 113
95987: PUSH
95988: LD_INT 114
95990: PUSH
95991: LD_INT 115
95993: PUSH
95994: EMPTY
95995: LIST
95996: LIST
95997: LIST
95998: LIST
95999: LIST
96000: LIST
96001: LIST
96002: LIST
96003: LIST
96004: LIST
96005: LIST
96006: LIST
96007: LIST
96008: LIST
96009: LIST
96010: PUSH
96011: EMPTY
96012: LIST
96013: LIST
96014: ST_TO_ADDR
96015: GO 96018
96017: POP
// end ; if result then
96018: LD_VAR 0 1
96022: IFFALSE 96311
// begin normal :=  ;
96024: LD_ADDR_VAR 0 3
96028: PUSH
96029: LD_STRING 
96031: ST_TO_ADDR
// hardcore :=  ;
96032: LD_ADDR_VAR 0 4
96036: PUSH
96037: LD_STRING 
96039: ST_TO_ADDR
// for i = 1 to normalCounter do
96040: LD_ADDR_VAR 0 5
96044: PUSH
96045: DOUBLE
96046: LD_INT 1
96048: DEC
96049: ST_TO_ADDR
96050: LD_EXP 80
96054: PUSH
96055: FOR_TO
96056: IFFALSE 96157
// begin tmp := 0 ;
96058: LD_ADDR_VAR 0 2
96062: PUSH
96063: LD_STRING 0
96065: ST_TO_ADDR
// if result [ 1 ] then
96066: LD_VAR 0 1
96070: PUSH
96071: LD_INT 1
96073: ARRAY
96074: IFFALSE 96139
// if result [ 1 ] [ 1 ] = i then
96076: LD_VAR 0 1
96080: PUSH
96081: LD_INT 1
96083: ARRAY
96084: PUSH
96085: LD_INT 1
96087: ARRAY
96088: PUSH
96089: LD_VAR 0 5
96093: EQUAL
96094: IFFALSE 96139
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
96096: LD_ADDR_VAR 0 1
96100: PUSH
96101: LD_VAR 0 1
96105: PPUSH
96106: LD_INT 1
96108: PPUSH
96109: LD_VAR 0 1
96113: PUSH
96114: LD_INT 1
96116: ARRAY
96117: PPUSH
96118: LD_INT 1
96120: PPUSH
96121: CALL_OW 3
96125: PPUSH
96126: CALL_OW 1
96130: ST_TO_ADDR
// tmp := 1 ;
96131: LD_ADDR_VAR 0 2
96135: PUSH
96136: LD_STRING 1
96138: ST_TO_ADDR
// end ; normal := normal & tmp ;
96139: LD_ADDR_VAR 0 3
96143: PUSH
96144: LD_VAR 0 3
96148: PUSH
96149: LD_VAR 0 2
96153: STR
96154: ST_TO_ADDR
// end ;
96155: GO 96055
96157: POP
96158: POP
// for i = 1 to hardcoreCounter do
96159: LD_ADDR_VAR 0 5
96163: PUSH
96164: DOUBLE
96165: LD_INT 1
96167: DEC
96168: ST_TO_ADDR
96169: LD_EXP 81
96173: PUSH
96174: FOR_TO
96175: IFFALSE 96280
// begin tmp := 0 ;
96177: LD_ADDR_VAR 0 2
96181: PUSH
96182: LD_STRING 0
96184: ST_TO_ADDR
// if result [ 2 ] then
96185: LD_VAR 0 1
96189: PUSH
96190: LD_INT 2
96192: ARRAY
96193: IFFALSE 96262
// if result [ 2 ] [ 1 ] = 100 + i then
96195: LD_VAR 0 1
96199: PUSH
96200: LD_INT 2
96202: ARRAY
96203: PUSH
96204: LD_INT 1
96206: ARRAY
96207: PUSH
96208: LD_INT 100
96210: PUSH
96211: LD_VAR 0 5
96215: PLUS
96216: EQUAL
96217: IFFALSE 96262
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
96219: LD_ADDR_VAR 0 1
96223: PUSH
96224: LD_VAR 0 1
96228: PPUSH
96229: LD_INT 2
96231: PPUSH
96232: LD_VAR 0 1
96236: PUSH
96237: LD_INT 2
96239: ARRAY
96240: PPUSH
96241: LD_INT 1
96243: PPUSH
96244: CALL_OW 3
96248: PPUSH
96249: CALL_OW 1
96253: ST_TO_ADDR
// tmp := 1 ;
96254: LD_ADDR_VAR 0 2
96258: PUSH
96259: LD_STRING 1
96261: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
96262: LD_ADDR_VAR 0 4
96266: PUSH
96267: LD_VAR 0 4
96271: PUSH
96272: LD_VAR 0 2
96276: STR
96277: ST_TO_ADDR
// end ;
96278: GO 96174
96280: POP
96281: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
96282: LD_STRING getStreamItemsFromMission("
96284: PUSH
96285: LD_VAR 0 3
96289: STR
96290: PUSH
96291: LD_STRING ","
96293: STR
96294: PUSH
96295: LD_VAR 0 4
96299: STR
96300: PUSH
96301: LD_STRING ")
96303: STR
96304: PPUSH
96305: CALL_OW 559
// end else
96309: GO 96318
// ToLua ( getStreamItemsFromMission("","") ) ;
96311: LD_STRING getStreamItemsFromMission("","")
96313: PPUSH
96314: CALL_OW 559
// end ;
96318: LD_VAR 0 1
96322: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
96323: LD_VAR 0 2
96327: PUSH
96328: LD_INT 100
96330: EQUAL
96331: IFFALSE 97280
// begin if not StreamModeActive then
96333: LD_EXP 79
96337: NOT
96338: IFFALSE 96348
// StreamModeActive := true ;
96340: LD_ADDR_EXP 79
96344: PUSH
96345: LD_INT 1
96347: ST_TO_ADDR
// if p3 = 0 then
96348: LD_VAR 0 3
96352: PUSH
96353: LD_INT 0
96355: EQUAL
96356: IFFALSE 96362
// InitStreamMode ;
96358: CALL 92620 0 0
// if p3 = 1 then
96362: LD_VAR 0 3
96366: PUSH
96367: LD_INT 1
96369: EQUAL
96370: IFFALSE 96380
// sRocket := true ;
96372: LD_ADDR_EXP 84
96376: PUSH
96377: LD_INT 1
96379: ST_TO_ADDR
// if p3 = 2 then
96380: LD_VAR 0 3
96384: PUSH
96385: LD_INT 2
96387: EQUAL
96388: IFFALSE 96398
// sSpeed := true ;
96390: LD_ADDR_EXP 83
96394: PUSH
96395: LD_INT 1
96397: ST_TO_ADDR
// if p3 = 3 then
96398: LD_VAR 0 3
96402: PUSH
96403: LD_INT 3
96405: EQUAL
96406: IFFALSE 96416
// sEngine := true ;
96408: LD_ADDR_EXP 85
96412: PUSH
96413: LD_INT 1
96415: ST_TO_ADDR
// if p3 = 4 then
96416: LD_VAR 0 3
96420: PUSH
96421: LD_INT 4
96423: EQUAL
96424: IFFALSE 96434
// sSpec := true ;
96426: LD_ADDR_EXP 82
96430: PUSH
96431: LD_INT 1
96433: ST_TO_ADDR
// if p3 = 5 then
96434: LD_VAR 0 3
96438: PUSH
96439: LD_INT 5
96441: EQUAL
96442: IFFALSE 96452
// sLevel := true ;
96444: LD_ADDR_EXP 86
96448: PUSH
96449: LD_INT 1
96451: ST_TO_ADDR
// if p3 = 6 then
96452: LD_VAR 0 3
96456: PUSH
96457: LD_INT 6
96459: EQUAL
96460: IFFALSE 96470
// sArmoury := true ;
96462: LD_ADDR_EXP 87
96466: PUSH
96467: LD_INT 1
96469: ST_TO_ADDR
// if p3 = 7 then
96470: LD_VAR 0 3
96474: PUSH
96475: LD_INT 7
96477: EQUAL
96478: IFFALSE 96488
// sRadar := true ;
96480: LD_ADDR_EXP 88
96484: PUSH
96485: LD_INT 1
96487: ST_TO_ADDR
// if p3 = 8 then
96488: LD_VAR 0 3
96492: PUSH
96493: LD_INT 8
96495: EQUAL
96496: IFFALSE 96506
// sBunker := true ;
96498: LD_ADDR_EXP 89
96502: PUSH
96503: LD_INT 1
96505: ST_TO_ADDR
// if p3 = 9 then
96506: LD_VAR 0 3
96510: PUSH
96511: LD_INT 9
96513: EQUAL
96514: IFFALSE 96524
// sHack := true ;
96516: LD_ADDR_EXP 90
96520: PUSH
96521: LD_INT 1
96523: ST_TO_ADDR
// if p3 = 10 then
96524: LD_VAR 0 3
96528: PUSH
96529: LD_INT 10
96531: EQUAL
96532: IFFALSE 96542
// sFire := true ;
96534: LD_ADDR_EXP 91
96538: PUSH
96539: LD_INT 1
96541: ST_TO_ADDR
// if p3 = 11 then
96542: LD_VAR 0 3
96546: PUSH
96547: LD_INT 11
96549: EQUAL
96550: IFFALSE 96560
// sRefresh := true ;
96552: LD_ADDR_EXP 92
96556: PUSH
96557: LD_INT 1
96559: ST_TO_ADDR
// if p3 = 12 then
96560: LD_VAR 0 3
96564: PUSH
96565: LD_INT 12
96567: EQUAL
96568: IFFALSE 96578
// sExp := true ;
96570: LD_ADDR_EXP 93
96574: PUSH
96575: LD_INT 1
96577: ST_TO_ADDR
// if p3 = 13 then
96578: LD_VAR 0 3
96582: PUSH
96583: LD_INT 13
96585: EQUAL
96586: IFFALSE 96596
// sDepot := true ;
96588: LD_ADDR_EXP 94
96592: PUSH
96593: LD_INT 1
96595: ST_TO_ADDR
// if p3 = 14 then
96596: LD_VAR 0 3
96600: PUSH
96601: LD_INT 14
96603: EQUAL
96604: IFFALSE 96614
// sFlag := true ;
96606: LD_ADDR_EXP 95
96610: PUSH
96611: LD_INT 1
96613: ST_TO_ADDR
// if p3 = 15 then
96614: LD_VAR 0 3
96618: PUSH
96619: LD_INT 15
96621: EQUAL
96622: IFFALSE 96632
// sKamikadze := true ;
96624: LD_ADDR_EXP 103
96628: PUSH
96629: LD_INT 1
96631: ST_TO_ADDR
// if p3 = 16 then
96632: LD_VAR 0 3
96636: PUSH
96637: LD_INT 16
96639: EQUAL
96640: IFFALSE 96650
// sTroll := true ;
96642: LD_ADDR_EXP 104
96646: PUSH
96647: LD_INT 1
96649: ST_TO_ADDR
// if p3 = 17 then
96650: LD_VAR 0 3
96654: PUSH
96655: LD_INT 17
96657: EQUAL
96658: IFFALSE 96668
// sSlow := true ;
96660: LD_ADDR_EXP 105
96664: PUSH
96665: LD_INT 1
96667: ST_TO_ADDR
// if p3 = 18 then
96668: LD_VAR 0 3
96672: PUSH
96673: LD_INT 18
96675: EQUAL
96676: IFFALSE 96686
// sLack := true ;
96678: LD_ADDR_EXP 106
96682: PUSH
96683: LD_INT 1
96685: ST_TO_ADDR
// if p3 = 19 then
96686: LD_VAR 0 3
96690: PUSH
96691: LD_INT 19
96693: EQUAL
96694: IFFALSE 96704
// sTank := true ;
96696: LD_ADDR_EXP 108
96700: PUSH
96701: LD_INT 1
96703: ST_TO_ADDR
// if p3 = 20 then
96704: LD_VAR 0 3
96708: PUSH
96709: LD_INT 20
96711: EQUAL
96712: IFFALSE 96722
// sRemote := true ;
96714: LD_ADDR_EXP 109
96718: PUSH
96719: LD_INT 1
96721: ST_TO_ADDR
// if p3 = 21 then
96722: LD_VAR 0 3
96726: PUSH
96727: LD_INT 21
96729: EQUAL
96730: IFFALSE 96740
// sPowell := true ;
96732: LD_ADDR_EXP 110
96736: PUSH
96737: LD_INT 1
96739: ST_TO_ADDR
// if p3 = 22 then
96740: LD_VAR 0 3
96744: PUSH
96745: LD_INT 22
96747: EQUAL
96748: IFFALSE 96758
// sTeleport := true ;
96750: LD_ADDR_EXP 113
96754: PUSH
96755: LD_INT 1
96757: ST_TO_ADDR
// if p3 = 23 then
96758: LD_VAR 0 3
96762: PUSH
96763: LD_INT 23
96765: EQUAL
96766: IFFALSE 96776
// sOilTower := true ;
96768: LD_ADDR_EXP 115
96772: PUSH
96773: LD_INT 1
96775: ST_TO_ADDR
// if p3 = 24 then
96776: LD_VAR 0 3
96780: PUSH
96781: LD_INT 24
96783: EQUAL
96784: IFFALSE 96794
// sShovel := true ;
96786: LD_ADDR_EXP 116
96790: PUSH
96791: LD_INT 1
96793: ST_TO_ADDR
// if p3 = 25 then
96794: LD_VAR 0 3
96798: PUSH
96799: LD_INT 25
96801: EQUAL
96802: IFFALSE 96812
// sSheik := true ;
96804: LD_ADDR_EXP 117
96808: PUSH
96809: LD_INT 1
96811: ST_TO_ADDR
// if p3 = 26 then
96812: LD_VAR 0 3
96816: PUSH
96817: LD_INT 26
96819: EQUAL
96820: IFFALSE 96830
// sEarthquake := true ;
96822: LD_ADDR_EXP 119
96826: PUSH
96827: LD_INT 1
96829: ST_TO_ADDR
// if p3 = 27 then
96830: LD_VAR 0 3
96834: PUSH
96835: LD_INT 27
96837: EQUAL
96838: IFFALSE 96848
// sAI := true ;
96840: LD_ADDR_EXP 120
96844: PUSH
96845: LD_INT 1
96847: ST_TO_ADDR
// if p3 = 28 then
96848: LD_VAR 0 3
96852: PUSH
96853: LD_INT 28
96855: EQUAL
96856: IFFALSE 96866
// sCargo := true ;
96858: LD_ADDR_EXP 123
96862: PUSH
96863: LD_INT 1
96865: ST_TO_ADDR
// if p3 = 29 then
96866: LD_VAR 0 3
96870: PUSH
96871: LD_INT 29
96873: EQUAL
96874: IFFALSE 96884
// sDLaser := true ;
96876: LD_ADDR_EXP 124
96880: PUSH
96881: LD_INT 1
96883: ST_TO_ADDR
// if p3 = 30 then
96884: LD_VAR 0 3
96888: PUSH
96889: LD_INT 30
96891: EQUAL
96892: IFFALSE 96902
// sExchange := true ;
96894: LD_ADDR_EXP 125
96898: PUSH
96899: LD_INT 1
96901: ST_TO_ADDR
// if p3 = 31 then
96902: LD_VAR 0 3
96906: PUSH
96907: LD_INT 31
96909: EQUAL
96910: IFFALSE 96920
// sFac := true ;
96912: LD_ADDR_EXP 126
96916: PUSH
96917: LD_INT 1
96919: ST_TO_ADDR
// if p3 = 32 then
96920: LD_VAR 0 3
96924: PUSH
96925: LD_INT 32
96927: EQUAL
96928: IFFALSE 96938
// sPower := true ;
96930: LD_ADDR_EXP 127
96934: PUSH
96935: LD_INT 1
96937: ST_TO_ADDR
// if p3 = 33 then
96938: LD_VAR 0 3
96942: PUSH
96943: LD_INT 33
96945: EQUAL
96946: IFFALSE 96956
// sRandom := true ;
96948: LD_ADDR_EXP 128
96952: PUSH
96953: LD_INT 1
96955: ST_TO_ADDR
// if p3 = 34 then
96956: LD_VAR 0 3
96960: PUSH
96961: LD_INT 34
96963: EQUAL
96964: IFFALSE 96974
// sShield := true ;
96966: LD_ADDR_EXP 129
96970: PUSH
96971: LD_INT 1
96973: ST_TO_ADDR
// if p3 = 35 then
96974: LD_VAR 0 3
96978: PUSH
96979: LD_INT 35
96981: EQUAL
96982: IFFALSE 96992
// sTime := true ;
96984: LD_ADDR_EXP 130
96988: PUSH
96989: LD_INT 1
96991: ST_TO_ADDR
// if p3 = 36 then
96992: LD_VAR 0 3
96996: PUSH
96997: LD_INT 36
96999: EQUAL
97000: IFFALSE 97010
// sTools := true ;
97002: LD_ADDR_EXP 131
97006: PUSH
97007: LD_INT 1
97009: ST_TO_ADDR
// if p3 = 101 then
97010: LD_VAR 0 3
97014: PUSH
97015: LD_INT 101
97017: EQUAL
97018: IFFALSE 97028
// sSold := true ;
97020: LD_ADDR_EXP 96
97024: PUSH
97025: LD_INT 1
97027: ST_TO_ADDR
// if p3 = 102 then
97028: LD_VAR 0 3
97032: PUSH
97033: LD_INT 102
97035: EQUAL
97036: IFFALSE 97046
// sDiff := true ;
97038: LD_ADDR_EXP 97
97042: PUSH
97043: LD_INT 1
97045: ST_TO_ADDR
// if p3 = 103 then
97046: LD_VAR 0 3
97050: PUSH
97051: LD_INT 103
97053: EQUAL
97054: IFFALSE 97064
// sFog := true ;
97056: LD_ADDR_EXP 100
97060: PUSH
97061: LD_INT 1
97063: ST_TO_ADDR
// if p3 = 104 then
97064: LD_VAR 0 3
97068: PUSH
97069: LD_INT 104
97071: EQUAL
97072: IFFALSE 97082
// sReset := true ;
97074: LD_ADDR_EXP 101
97078: PUSH
97079: LD_INT 1
97081: ST_TO_ADDR
// if p3 = 105 then
97082: LD_VAR 0 3
97086: PUSH
97087: LD_INT 105
97089: EQUAL
97090: IFFALSE 97100
// sSun := true ;
97092: LD_ADDR_EXP 102
97096: PUSH
97097: LD_INT 1
97099: ST_TO_ADDR
// if p3 = 106 then
97100: LD_VAR 0 3
97104: PUSH
97105: LD_INT 106
97107: EQUAL
97108: IFFALSE 97118
// sTiger := true ;
97110: LD_ADDR_EXP 98
97114: PUSH
97115: LD_INT 1
97117: ST_TO_ADDR
// if p3 = 107 then
97118: LD_VAR 0 3
97122: PUSH
97123: LD_INT 107
97125: EQUAL
97126: IFFALSE 97136
// sBomb := true ;
97128: LD_ADDR_EXP 99
97132: PUSH
97133: LD_INT 1
97135: ST_TO_ADDR
// if p3 = 108 then
97136: LD_VAR 0 3
97140: PUSH
97141: LD_INT 108
97143: EQUAL
97144: IFFALSE 97154
// sWound := true ;
97146: LD_ADDR_EXP 107
97150: PUSH
97151: LD_INT 1
97153: ST_TO_ADDR
// if p3 = 109 then
97154: LD_VAR 0 3
97158: PUSH
97159: LD_INT 109
97161: EQUAL
97162: IFFALSE 97172
// sBetray := true ;
97164: LD_ADDR_EXP 111
97168: PUSH
97169: LD_INT 1
97171: ST_TO_ADDR
// if p3 = 110 then
97172: LD_VAR 0 3
97176: PUSH
97177: LD_INT 110
97179: EQUAL
97180: IFFALSE 97190
// sContamin := true ;
97182: LD_ADDR_EXP 112
97186: PUSH
97187: LD_INT 1
97189: ST_TO_ADDR
// if p3 = 111 then
97190: LD_VAR 0 3
97194: PUSH
97195: LD_INT 111
97197: EQUAL
97198: IFFALSE 97208
// sOil := true ;
97200: LD_ADDR_EXP 114
97204: PUSH
97205: LD_INT 1
97207: ST_TO_ADDR
// if p3 = 112 then
97208: LD_VAR 0 3
97212: PUSH
97213: LD_INT 112
97215: EQUAL
97216: IFFALSE 97226
// sStu := true ;
97218: LD_ADDR_EXP 118
97222: PUSH
97223: LD_INT 1
97225: ST_TO_ADDR
// if p3 = 113 then
97226: LD_VAR 0 3
97230: PUSH
97231: LD_INT 113
97233: EQUAL
97234: IFFALSE 97244
// sBazooka := true ;
97236: LD_ADDR_EXP 121
97240: PUSH
97241: LD_INT 1
97243: ST_TO_ADDR
// if p3 = 114 then
97244: LD_VAR 0 3
97248: PUSH
97249: LD_INT 114
97251: EQUAL
97252: IFFALSE 97262
// sMortar := true ;
97254: LD_ADDR_EXP 122
97258: PUSH
97259: LD_INT 1
97261: ST_TO_ADDR
// if p3 = 115 then
97262: LD_VAR 0 3
97266: PUSH
97267: LD_INT 115
97269: EQUAL
97270: IFFALSE 97280
// sRanger := true ;
97272: LD_ADDR_EXP 132
97276: PUSH
97277: LD_INT 1
97279: ST_TO_ADDR
// end ; end ;
97280: PPOPN 6
97282: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
97283: LD_EXP 79
97287: PUSH
97288: LD_EXP 84
97292: AND
97293: IFFALSE 97417
97295: GO 97297
97297: DISABLE
97298: LD_INT 0
97300: PPUSH
97301: PPUSH
// begin enable ;
97302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
97303: LD_ADDR_VAR 0 2
97307: PUSH
97308: LD_INT 22
97310: PUSH
97311: LD_OWVAR 2
97315: PUSH
97316: EMPTY
97317: LIST
97318: LIST
97319: PUSH
97320: LD_INT 2
97322: PUSH
97323: LD_INT 34
97325: PUSH
97326: LD_INT 7
97328: PUSH
97329: EMPTY
97330: LIST
97331: LIST
97332: PUSH
97333: LD_INT 34
97335: PUSH
97336: LD_INT 45
97338: PUSH
97339: EMPTY
97340: LIST
97341: LIST
97342: PUSH
97343: LD_INT 34
97345: PUSH
97346: LD_INT 28
97348: PUSH
97349: EMPTY
97350: LIST
97351: LIST
97352: PUSH
97353: LD_INT 34
97355: PUSH
97356: LD_INT 47
97358: PUSH
97359: EMPTY
97360: LIST
97361: LIST
97362: PUSH
97363: EMPTY
97364: LIST
97365: LIST
97366: LIST
97367: LIST
97368: LIST
97369: PUSH
97370: EMPTY
97371: LIST
97372: LIST
97373: PPUSH
97374: CALL_OW 69
97378: ST_TO_ADDR
// if not tmp then
97379: LD_VAR 0 2
97383: NOT
97384: IFFALSE 97388
// exit ;
97386: GO 97417
// for i in tmp do
97388: LD_ADDR_VAR 0 1
97392: PUSH
97393: LD_VAR 0 2
97397: PUSH
97398: FOR_IN
97399: IFFALSE 97415
// begin SetLives ( i , 0 ) ;
97401: LD_VAR 0 1
97405: PPUSH
97406: LD_INT 0
97408: PPUSH
97409: CALL_OW 234
// end ;
97413: GO 97398
97415: POP
97416: POP
// end ;
97417: PPOPN 2
97419: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
97420: LD_EXP 79
97424: PUSH
97425: LD_EXP 85
97429: AND
97430: IFFALSE 97514
97432: GO 97434
97434: DISABLE
97435: LD_INT 0
97437: PPUSH
97438: PPUSH
// begin enable ;
97439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
97440: LD_ADDR_VAR 0 2
97444: PUSH
97445: LD_INT 22
97447: PUSH
97448: LD_OWVAR 2
97452: PUSH
97453: EMPTY
97454: LIST
97455: LIST
97456: PUSH
97457: LD_INT 32
97459: PUSH
97460: LD_INT 3
97462: PUSH
97463: EMPTY
97464: LIST
97465: LIST
97466: PUSH
97467: EMPTY
97468: LIST
97469: LIST
97470: PPUSH
97471: CALL_OW 69
97475: ST_TO_ADDR
// if not tmp then
97476: LD_VAR 0 2
97480: NOT
97481: IFFALSE 97485
// exit ;
97483: GO 97514
// for i in tmp do
97485: LD_ADDR_VAR 0 1
97489: PUSH
97490: LD_VAR 0 2
97494: PUSH
97495: FOR_IN
97496: IFFALSE 97512
// begin SetLives ( i , 0 ) ;
97498: LD_VAR 0 1
97502: PPUSH
97503: LD_INT 0
97505: PPUSH
97506: CALL_OW 234
// end ;
97510: GO 97495
97512: POP
97513: POP
// end ;
97514: PPOPN 2
97516: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
97517: LD_EXP 79
97521: PUSH
97522: LD_EXP 82
97526: AND
97527: IFFALSE 97620
97529: GO 97531
97531: DISABLE
97532: LD_INT 0
97534: PPUSH
// begin enable ;
97535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
97536: LD_ADDR_VAR 0 1
97540: PUSH
97541: LD_INT 22
97543: PUSH
97544: LD_OWVAR 2
97548: PUSH
97549: EMPTY
97550: LIST
97551: LIST
97552: PUSH
97553: LD_INT 2
97555: PUSH
97556: LD_INT 25
97558: PUSH
97559: LD_INT 5
97561: PUSH
97562: EMPTY
97563: LIST
97564: LIST
97565: PUSH
97566: LD_INT 25
97568: PUSH
97569: LD_INT 9
97571: PUSH
97572: EMPTY
97573: LIST
97574: LIST
97575: PUSH
97576: LD_INT 25
97578: PUSH
97579: LD_INT 8
97581: PUSH
97582: EMPTY
97583: LIST
97584: LIST
97585: PUSH
97586: EMPTY
97587: LIST
97588: LIST
97589: LIST
97590: LIST
97591: PUSH
97592: EMPTY
97593: LIST
97594: LIST
97595: PPUSH
97596: CALL_OW 69
97600: PUSH
97601: FOR_IN
97602: IFFALSE 97618
// begin SetClass ( i , 1 ) ;
97604: LD_VAR 0 1
97608: PPUSH
97609: LD_INT 1
97611: PPUSH
97612: CALL_OW 336
// end ;
97616: GO 97601
97618: POP
97619: POP
// end ;
97620: PPOPN 1
97622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
97623: LD_EXP 79
97627: PUSH
97628: LD_EXP 83
97632: AND
97633: PUSH
97634: LD_OWVAR 65
97638: PUSH
97639: LD_INT 7
97641: LESS
97642: AND
97643: IFFALSE 97657
97645: GO 97647
97647: DISABLE
// begin enable ;
97648: ENABLE
// game_speed := 7 ;
97649: LD_ADDR_OWVAR 65
97653: PUSH
97654: LD_INT 7
97656: ST_TO_ADDR
// end ;
97657: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
97658: LD_EXP 79
97662: PUSH
97663: LD_EXP 86
97667: AND
97668: IFFALSE 97870
97670: GO 97672
97672: DISABLE
97673: LD_INT 0
97675: PPUSH
97676: PPUSH
97677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
97678: LD_ADDR_VAR 0 3
97682: PUSH
97683: LD_INT 81
97685: PUSH
97686: LD_OWVAR 2
97690: PUSH
97691: EMPTY
97692: LIST
97693: LIST
97694: PUSH
97695: LD_INT 21
97697: PUSH
97698: LD_INT 1
97700: PUSH
97701: EMPTY
97702: LIST
97703: LIST
97704: PUSH
97705: EMPTY
97706: LIST
97707: LIST
97708: PPUSH
97709: CALL_OW 69
97713: ST_TO_ADDR
// if not tmp then
97714: LD_VAR 0 3
97718: NOT
97719: IFFALSE 97723
// exit ;
97721: GO 97870
// if tmp > 5 then
97723: LD_VAR 0 3
97727: PUSH
97728: LD_INT 5
97730: GREATER
97731: IFFALSE 97743
// k := 5 else
97733: LD_ADDR_VAR 0 2
97737: PUSH
97738: LD_INT 5
97740: ST_TO_ADDR
97741: GO 97753
// k := tmp ;
97743: LD_ADDR_VAR 0 2
97747: PUSH
97748: LD_VAR 0 3
97752: ST_TO_ADDR
// for i := 1 to k do
97753: LD_ADDR_VAR 0 1
97757: PUSH
97758: DOUBLE
97759: LD_INT 1
97761: DEC
97762: ST_TO_ADDR
97763: LD_VAR 0 2
97767: PUSH
97768: FOR_TO
97769: IFFALSE 97868
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
97771: LD_VAR 0 3
97775: PUSH
97776: LD_VAR 0 1
97780: ARRAY
97781: PPUSH
97782: LD_VAR 0 1
97786: PUSH
97787: LD_INT 4
97789: MOD
97790: PUSH
97791: LD_INT 1
97793: PLUS
97794: PPUSH
97795: CALL_OW 259
97799: PUSH
97800: LD_INT 10
97802: LESS
97803: IFFALSE 97866
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
97805: LD_VAR 0 3
97809: PUSH
97810: LD_VAR 0 1
97814: ARRAY
97815: PPUSH
97816: LD_VAR 0 1
97820: PUSH
97821: LD_INT 4
97823: MOD
97824: PUSH
97825: LD_INT 1
97827: PLUS
97828: PPUSH
97829: LD_VAR 0 3
97833: PUSH
97834: LD_VAR 0 1
97838: ARRAY
97839: PPUSH
97840: LD_VAR 0 1
97844: PUSH
97845: LD_INT 4
97847: MOD
97848: PUSH
97849: LD_INT 1
97851: PLUS
97852: PPUSH
97853: CALL_OW 259
97857: PUSH
97858: LD_INT 1
97860: PLUS
97861: PPUSH
97862: CALL_OW 237
97866: GO 97768
97868: POP
97869: POP
// end ;
97870: PPOPN 3
97872: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
97873: LD_EXP 79
97877: PUSH
97878: LD_EXP 87
97882: AND
97883: IFFALSE 97903
97885: GO 97887
97887: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
97888: LD_INT 4
97890: PPUSH
97891: LD_OWVAR 2
97895: PPUSH
97896: LD_INT 0
97898: PPUSH
97899: CALL_OW 324
97903: END
// every 0 0$1 trigger StreamModeActive and sShovel do
97904: LD_EXP 79
97908: PUSH
97909: LD_EXP 116
97913: AND
97914: IFFALSE 97934
97916: GO 97918
97918: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
97919: LD_INT 19
97921: PPUSH
97922: LD_OWVAR 2
97926: PPUSH
97927: LD_INT 0
97929: PPUSH
97930: CALL_OW 324
97934: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
97935: LD_EXP 79
97939: PUSH
97940: LD_EXP 88
97944: AND
97945: IFFALSE 98047
97947: GO 97949
97949: DISABLE
97950: LD_INT 0
97952: PPUSH
97953: PPUSH
// begin enable ;
97954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
97955: LD_ADDR_VAR 0 2
97959: PUSH
97960: LD_INT 22
97962: PUSH
97963: LD_OWVAR 2
97967: PUSH
97968: EMPTY
97969: LIST
97970: LIST
97971: PUSH
97972: LD_INT 2
97974: PUSH
97975: LD_INT 34
97977: PUSH
97978: LD_INT 11
97980: PUSH
97981: EMPTY
97982: LIST
97983: LIST
97984: PUSH
97985: LD_INT 34
97987: PUSH
97988: LD_INT 30
97990: PUSH
97991: EMPTY
97992: LIST
97993: LIST
97994: PUSH
97995: EMPTY
97996: LIST
97997: LIST
97998: LIST
97999: PUSH
98000: EMPTY
98001: LIST
98002: LIST
98003: PPUSH
98004: CALL_OW 69
98008: ST_TO_ADDR
// if not tmp then
98009: LD_VAR 0 2
98013: NOT
98014: IFFALSE 98018
// exit ;
98016: GO 98047
// for i in tmp do
98018: LD_ADDR_VAR 0 1
98022: PUSH
98023: LD_VAR 0 2
98027: PUSH
98028: FOR_IN
98029: IFFALSE 98045
// begin SetLives ( i , 0 ) ;
98031: LD_VAR 0 1
98035: PPUSH
98036: LD_INT 0
98038: PPUSH
98039: CALL_OW 234
// end ;
98043: GO 98028
98045: POP
98046: POP
// end ;
98047: PPOPN 2
98049: END
// every 0 0$1 trigger StreamModeActive and sBunker do
98050: LD_EXP 79
98054: PUSH
98055: LD_EXP 89
98059: AND
98060: IFFALSE 98080
98062: GO 98064
98064: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
98065: LD_INT 32
98067: PPUSH
98068: LD_OWVAR 2
98072: PPUSH
98073: LD_INT 0
98075: PPUSH
98076: CALL_OW 324
98080: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
98081: LD_EXP 79
98085: PUSH
98086: LD_EXP 90
98090: AND
98091: IFFALSE 98272
98093: GO 98095
98095: DISABLE
98096: LD_INT 0
98098: PPUSH
98099: PPUSH
98100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
98101: LD_ADDR_VAR 0 2
98105: PUSH
98106: LD_INT 22
98108: PUSH
98109: LD_OWVAR 2
98113: PUSH
98114: EMPTY
98115: LIST
98116: LIST
98117: PUSH
98118: LD_INT 33
98120: PUSH
98121: LD_INT 3
98123: PUSH
98124: EMPTY
98125: LIST
98126: LIST
98127: PUSH
98128: EMPTY
98129: LIST
98130: LIST
98131: PPUSH
98132: CALL_OW 69
98136: ST_TO_ADDR
// if not tmp then
98137: LD_VAR 0 2
98141: NOT
98142: IFFALSE 98146
// exit ;
98144: GO 98272
// side := 0 ;
98146: LD_ADDR_VAR 0 3
98150: PUSH
98151: LD_INT 0
98153: ST_TO_ADDR
// for i := 1 to 8 do
98154: LD_ADDR_VAR 0 1
98158: PUSH
98159: DOUBLE
98160: LD_INT 1
98162: DEC
98163: ST_TO_ADDR
98164: LD_INT 8
98166: PUSH
98167: FOR_TO
98168: IFFALSE 98216
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
98170: LD_OWVAR 2
98174: PUSH
98175: LD_VAR 0 1
98179: NONEQUAL
98180: PUSH
98181: LD_OWVAR 2
98185: PPUSH
98186: LD_VAR 0 1
98190: PPUSH
98191: CALL_OW 81
98195: PUSH
98196: LD_INT 2
98198: EQUAL
98199: AND
98200: IFFALSE 98214
// begin side := i ;
98202: LD_ADDR_VAR 0 3
98206: PUSH
98207: LD_VAR 0 1
98211: ST_TO_ADDR
// break ;
98212: GO 98216
// end ;
98214: GO 98167
98216: POP
98217: POP
// if not side then
98218: LD_VAR 0 3
98222: NOT
98223: IFFALSE 98227
// exit ;
98225: GO 98272
// for i := 1 to tmp do
98227: LD_ADDR_VAR 0 1
98231: PUSH
98232: DOUBLE
98233: LD_INT 1
98235: DEC
98236: ST_TO_ADDR
98237: LD_VAR 0 2
98241: PUSH
98242: FOR_TO
98243: IFFALSE 98270
// if Prob ( 60 ) then
98245: LD_INT 60
98247: PPUSH
98248: CALL_OW 13
98252: IFFALSE 98268
// SetSide ( i , side ) ;
98254: LD_VAR 0 1
98258: PPUSH
98259: LD_VAR 0 3
98263: PPUSH
98264: CALL_OW 235
98268: GO 98242
98270: POP
98271: POP
// end ;
98272: PPOPN 3
98274: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
98275: LD_EXP 79
98279: PUSH
98280: LD_EXP 92
98284: AND
98285: IFFALSE 98404
98287: GO 98289
98289: DISABLE
98290: LD_INT 0
98292: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
98293: LD_ADDR_VAR 0 1
98297: PUSH
98298: LD_INT 22
98300: PUSH
98301: LD_OWVAR 2
98305: PUSH
98306: EMPTY
98307: LIST
98308: LIST
98309: PUSH
98310: LD_INT 21
98312: PUSH
98313: LD_INT 1
98315: PUSH
98316: EMPTY
98317: LIST
98318: LIST
98319: PUSH
98320: LD_INT 3
98322: PUSH
98323: LD_INT 23
98325: PUSH
98326: LD_INT 0
98328: PUSH
98329: EMPTY
98330: LIST
98331: LIST
98332: PUSH
98333: EMPTY
98334: LIST
98335: LIST
98336: PUSH
98337: EMPTY
98338: LIST
98339: LIST
98340: LIST
98341: PPUSH
98342: CALL_OW 69
98346: PUSH
98347: FOR_IN
98348: IFFALSE 98402
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
98350: LD_VAR 0 1
98354: PPUSH
98355: CALL_OW 257
98359: PUSH
98360: LD_INT 1
98362: PUSH
98363: LD_INT 2
98365: PUSH
98366: LD_INT 3
98368: PUSH
98369: LD_INT 4
98371: PUSH
98372: EMPTY
98373: LIST
98374: LIST
98375: LIST
98376: LIST
98377: IN
98378: IFFALSE 98400
// SetClass ( un , rand ( 1 , 4 ) ) ;
98380: LD_VAR 0 1
98384: PPUSH
98385: LD_INT 1
98387: PPUSH
98388: LD_INT 4
98390: PPUSH
98391: CALL_OW 12
98395: PPUSH
98396: CALL_OW 336
98400: GO 98347
98402: POP
98403: POP
// end ;
98404: PPOPN 1
98406: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
98407: LD_EXP 79
98411: PUSH
98412: LD_EXP 91
98416: AND
98417: IFFALSE 98496
98419: GO 98421
98421: DISABLE
98422: LD_INT 0
98424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98425: LD_ADDR_VAR 0 1
98429: PUSH
98430: LD_INT 22
98432: PUSH
98433: LD_OWVAR 2
98437: PUSH
98438: EMPTY
98439: LIST
98440: LIST
98441: PUSH
98442: LD_INT 21
98444: PUSH
98445: LD_INT 3
98447: PUSH
98448: EMPTY
98449: LIST
98450: LIST
98451: PUSH
98452: EMPTY
98453: LIST
98454: LIST
98455: PPUSH
98456: CALL_OW 69
98460: ST_TO_ADDR
// if not tmp then
98461: LD_VAR 0 1
98465: NOT
98466: IFFALSE 98470
// exit ;
98468: GO 98496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
98470: LD_VAR 0 1
98474: PUSH
98475: LD_INT 1
98477: PPUSH
98478: LD_VAR 0 1
98482: PPUSH
98483: CALL_OW 12
98487: ARRAY
98488: PPUSH
98489: LD_INT 100
98491: PPUSH
98492: CALL_OW 234
// end ;
98496: PPOPN 1
98498: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
98499: LD_EXP 79
98503: PUSH
98504: LD_EXP 93
98508: AND
98509: IFFALSE 98607
98511: GO 98513
98513: DISABLE
98514: LD_INT 0
98516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98517: LD_ADDR_VAR 0 1
98521: PUSH
98522: LD_INT 22
98524: PUSH
98525: LD_OWVAR 2
98529: PUSH
98530: EMPTY
98531: LIST
98532: LIST
98533: PUSH
98534: LD_INT 21
98536: PUSH
98537: LD_INT 1
98539: PUSH
98540: EMPTY
98541: LIST
98542: LIST
98543: PUSH
98544: EMPTY
98545: LIST
98546: LIST
98547: PPUSH
98548: CALL_OW 69
98552: ST_TO_ADDR
// if not tmp then
98553: LD_VAR 0 1
98557: NOT
98558: IFFALSE 98562
// exit ;
98560: GO 98607
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
98562: LD_VAR 0 1
98566: PUSH
98567: LD_INT 1
98569: PPUSH
98570: LD_VAR 0 1
98574: PPUSH
98575: CALL_OW 12
98579: ARRAY
98580: PPUSH
98581: LD_INT 1
98583: PPUSH
98584: LD_INT 4
98586: PPUSH
98587: CALL_OW 12
98591: PPUSH
98592: LD_INT 3000
98594: PPUSH
98595: LD_INT 9000
98597: PPUSH
98598: CALL_OW 12
98602: PPUSH
98603: CALL_OW 492
// end ;
98607: PPOPN 1
98609: END
// every 0 0$1 trigger StreamModeActive and sDepot do
98610: LD_EXP 79
98614: PUSH
98615: LD_EXP 94
98619: AND
98620: IFFALSE 98640
98622: GO 98624
98624: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
98625: LD_INT 1
98627: PPUSH
98628: LD_OWVAR 2
98632: PPUSH
98633: LD_INT 0
98635: PPUSH
98636: CALL_OW 324
98640: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
98641: LD_EXP 79
98645: PUSH
98646: LD_EXP 95
98650: AND
98651: IFFALSE 98734
98653: GO 98655
98655: DISABLE
98656: LD_INT 0
98658: PPUSH
98659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98660: LD_ADDR_VAR 0 2
98664: PUSH
98665: LD_INT 22
98667: PUSH
98668: LD_OWVAR 2
98672: PUSH
98673: EMPTY
98674: LIST
98675: LIST
98676: PUSH
98677: LD_INT 21
98679: PUSH
98680: LD_INT 3
98682: PUSH
98683: EMPTY
98684: LIST
98685: LIST
98686: PUSH
98687: EMPTY
98688: LIST
98689: LIST
98690: PPUSH
98691: CALL_OW 69
98695: ST_TO_ADDR
// if not tmp then
98696: LD_VAR 0 2
98700: NOT
98701: IFFALSE 98705
// exit ;
98703: GO 98734
// for i in tmp do
98705: LD_ADDR_VAR 0 1
98709: PUSH
98710: LD_VAR 0 2
98714: PUSH
98715: FOR_IN
98716: IFFALSE 98732
// SetBLevel ( i , 10 ) ;
98718: LD_VAR 0 1
98722: PPUSH
98723: LD_INT 10
98725: PPUSH
98726: CALL_OW 241
98730: GO 98715
98732: POP
98733: POP
// end ;
98734: PPOPN 2
98736: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
98737: LD_EXP 79
98741: PUSH
98742: LD_EXP 96
98746: AND
98747: IFFALSE 98858
98749: GO 98751
98751: DISABLE
98752: LD_INT 0
98754: PPUSH
98755: PPUSH
98756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98757: LD_ADDR_VAR 0 3
98761: PUSH
98762: LD_INT 22
98764: PUSH
98765: LD_OWVAR 2
98769: PUSH
98770: EMPTY
98771: LIST
98772: LIST
98773: PUSH
98774: LD_INT 25
98776: PUSH
98777: LD_INT 1
98779: PUSH
98780: EMPTY
98781: LIST
98782: LIST
98783: PUSH
98784: EMPTY
98785: LIST
98786: LIST
98787: PPUSH
98788: CALL_OW 69
98792: ST_TO_ADDR
// if not tmp then
98793: LD_VAR 0 3
98797: NOT
98798: IFFALSE 98802
// exit ;
98800: GO 98858
// un := tmp [ rand ( 1 , tmp ) ] ;
98802: LD_ADDR_VAR 0 2
98806: PUSH
98807: LD_VAR 0 3
98811: PUSH
98812: LD_INT 1
98814: PPUSH
98815: LD_VAR 0 3
98819: PPUSH
98820: CALL_OW 12
98824: ARRAY
98825: ST_TO_ADDR
// if Crawls ( un ) then
98826: LD_VAR 0 2
98830: PPUSH
98831: CALL_OW 318
98835: IFFALSE 98846
// ComWalk ( un ) ;
98837: LD_VAR 0 2
98841: PPUSH
98842: CALL_OW 138
// SetClass ( un , class_sniper ) ;
98846: LD_VAR 0 2
98850: PPUSH
98851: LD_INT 5
98853: PPUSH
98854: CALL_OW 336
// end ;
98858: PPOPN 3
98860: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
98861: LD_EXP 79
98865: PUSH
98866: LD_EXP 97
98870: AND
98871: PUSH
98872: LD_OWVAR 67
98876: PUSH
98877: LD_INT 3
98879: LESS
98880: AND
98881: IFFALSE 98900
98883: GO 98885
98885: DISABLE
// Difficulty := Difficulty + 1 ;
98886: LD_ADDR_OWVAR 67
98890: PUSH
98891: LD_OWVAR 67
98895: PUSH
98896: LD_INT 1
98898: PLUS
98899: ST_TO_ADDR
98900: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
98901: LD_EXP 79
98905: PUSH
98906: LD_EXP 98
98910: AND
98911: IFFALSE 99014
98913: GO 98915
98915: DISABLE
98916: LD_INT 0
98918: PPUSH
// begin for i := 1 to 5 do
98919: LD_ADDR_VAR 0 1
98923: PUSH
98924: DOUBLE
98925: LD_INT 1
98927: DEC
98928: ST_TO_ADDR
98929: LD_INT 5
98931: PUSH
98932: FOR_TO
98933: IFFALSE 99012
// begin uc_nation := nation_nature ;
98935: LD_ADDR_OWVAR 21
98939: PUSH
98940: LD_INT 0
98942: ST_TO_ADDR
// uc_side := 0 ;
98943: LD_ADDR_OWVAR 20
98947: PUSH
98948: LD_INT 0
98950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
98951: LD_ADDR_OWVAR 29
98955: PUSH
98956: LD_INT 12
98958: PUSH
98959: LD_INT 12
98961: PUSH
98962: EMPTY
98963: LIST
98964: LIST
98965: ST_TO_ADDR
// hc_agressivity := 20 ;
98966: LD_ADDR_OWVAR 35
98970: PUSH
98971: LD_INT 20
98973: ST_TO_ADDR
// hc_class := class_tiger ;
98974: LD_ADDR_OWVAR 28
98978: PUSH
98979: LD_INT 14
98981: ST_TO_ADDR
// hc_gallery :=  ;
98982: LD_ADDR_OWVAR 33
98986: PUSH
98987: LD_STRING 
98989: ST_TO_ADDR
// hc_name :=  ;
98990: LD_ADDR_OWVAR 26
98994: PUSH
98995: LD_STRING 
98997: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
98998: CALL_OW 44
99002: PPUSH
99003: LD_INT 0
99005: PPUSH
99006: CALL_OW 51
// end ;
99010: GO 98932
99012: POP
99013: POP
// end ;
99014: PPOPN 1
99016: END
// every 0 0$1 trigger StreamModeActive and sBomb do
99017: LD_EXP 79
99021: PUSH
99022: LD_EXP 99
99026: AND
99027: IFFALSE 99036
99029: GO 99031
99031: DISABLE
// StreamSibBomb ;
99032: CALL 99037 0 0
99036: END
// export function StreamSibBomb ; var i , x , y ; begin
99037: LD_INT 0
99039: PPUSH
99040: PPUSH
99041: PPUSH
99042: PPUSH
// result := false ;
99043: LD_ADDR_VAR 0 1
99047: PUSH
99048: LD_INT 0
99050: ST_TO_ADDR
// for i := 1 to 16 do
99051: LD_ADDR_VAR 0 2
99055: PUSH
99056: DOUBLE
99057: LD_INT 1
99059: DEC
99060: ST_TO_ADDR
99061: LD_INT 16
99063: PUSH
99064: FOR_TO
99065: IFFALSE 99264
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99067: LD_ADDR_VAR 0 3
99071: PUSH
99072: LD_INT 10
99074: PUSH
99075: LD_INT 20
99077: PUSH
99078: LD_INT 30
99080: PUSH
99081: LD_INT 40
99083: PUSH
99084: LD_INT 50
99086: PUSH
99087: LD_INT 60
99089: PUSH
99090: LD_INT 70
99092: PUSH
99093: LD_INT 80
99095: PUSH
99096: LD_INT 90
99098: PUSH
99099: LD_INT 100
99101: PUSH
99102: LD_INT 110
99104: PUSH
99105: LD_INT 120
99107: PUSH
99108: LD_INT 130
99110: PUSH
99111: LD_INT 140
99113: PUSH
99114: LD_INT 150
99116: PUSH
99117: EMPTY
99118: LIST
99119: LIST
99120: LIST
99121: LIST
99122: LIST
99123: LIST
99124: LIST
99125: LIST
99126: LIST
99127: LIST
99128: LIST
99129: LIST
99130: LIST
99131: LIST
99132: LIST
99133: PUSH
99134: LD_INT 1
99136: PPUSH
99137: LD_INT 15
99139: PPUSH
99140: CALL_OW 12
99144: ARRAY
99145: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99146: LD_ADDR_VAR 0 4
99150: PUSH
99151: LD_INT 10
99153: PUSH
99154: LD_INT 20
99156: PUSH
99157: LD_INT 30
99159: PUSH
99160: LD_INT 40
99162: PUSH
99163: LD_INT 50
99165: PUSH
99166: LD_INT 60
99168: PUSH
99169: LD_INT 70
99171: PUSH
99172: LD_INT 80
99174: PUSH
99175: LD_INT 90
99177: PUSH
99178: LD_INT 100
99180: PUSH
99181: LD_INT 110
99183: PUSH
99184: LD_INT 120
99186: PUSH
99187: LD_INT 130
99189: PUSH
99190: LD_INT 140
99192: PUSH
99193: LD_INT 150
99195: PUSH
99196: EMPTY
99197: LIST
99198: LIST
99199: LIST
99200: LIST
99201: LIST
99202: LIST
99203: LIST
99204: LIST
99205: LIST
99206: LIST
99207: LIST
99208: LIST
99209: LIST
99210: LIST
99211: LIST
99212: PUSH
99213: LD_INT 1
99215: PPUSH
99216: LD_INT 15
99218: PPUSH
99219: CALL_OW 12
99223: ARRAY
99224: ST_TO_ADDR
// if ValidHex ( x , y ) then
99225: LD_VAR 0 3
99229: PPUSH
99230: LD_VAR 0 4
99234: PPUSH
99235: CALL_OW 488
99239: IFFALSE 99262
// begin result := [ x , y ] ;
99241: LD_ADDR_VAR 0 1
99245: PUSH
99246: LD_VAR 0 3
99250: PUSH
99251: LD_VAR 0 4
99255: PUSH
99256: EMPTY
99257: LIST
99258: LIST
99259: ST_TO_ADDR
// break ;
99260: GO 99264
// end ; end ;
99262: GO 99064
99264: POP
99265: POP
// if result then
99266: LD_VAR 0 1
99270: IFFALSE 99330
// begin ToLua ( playSibBomb() ) ;
99272: LD_STRING playSibBomb()
99274: PPUSH
99275: CALL_OW 559
// wait ( 0 0$14 ) ;
99279: LD_INT 490
99281: PPUSH
99282: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
99286: LD_VAR 0 1
99290: PUSH
99291: LD_INT 1
99293: ARRAY
99294: PPUSH
99295: LD_VAR 0 1
99299: PUSH
99300: LD_INT 2
99302: ARRAY
99303: PPUSH
99304: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
99308: LD_VAR 0 1
99312: PUSH
99313: LD_INT 1
99315: ARRAY
99316: PPUSH
99317: LD_VAR 0 1
99321: PUSH
99322: LD_INT 2
99324: ARRAY
99325: PPUSH
99326: CALL_OW 429
// end ; end ;
99330: LD_VAR 0 1
99334: RET
// every 0 0$1 trigger StreamModeActive and sReset do
99335: LD_EXP 79
99339: PUSH
99340: LD_EXP 101
99344: AND
99345: IFFALSE 99357
99347: GO 99349
99349: DISABLE
// YouLost (  ) ;
99350: LD_STRING 
99352: PPUSH
99353: CALL_OW 104
99357: END
// every 0 0$1 trigger StreamModeActive and sFog do
99358: LD_EXP 79
99362: PUSH
99363: LD_EXP 100
99367: AND
99368: IFFALSE 99382
99370: GO 99372
99372: DISABLE
// FogOff ( your_side ) ;
99373: LD_OWVAR 2
99377: PPUSH
99378: CALL_OW 344
99382: END
// every 0 0$1 trigger StreamModeActive and sSun do
99383: LD_EXP 79
99387: PUSH
99388: LD_EXP 102
99392: AND
99393: IFFALSE 99421
99395: GO 99397
99397: DISABLE
// begin solar_recharge_percent := 0 ;
99398: LD_ADDR_OWVAR 79
99402: PUSH
99403: LD_INT 0
99405: ST_TO_ADDR
// wait ( 5 5$00 ) ;
99406: LD_INT 10500
99408: PPUSH
99409: CALL_OW 67
// solar_recharge_percent := 100 ;
99413: LD_ADDR_OWVAR 79
99417: PUSH
99418: LD_INT 100
99420: ST_TO_ADDR
// end ;
99421: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
99422: LD_EXP 79
99426: PUSH
99427: LD_EXP 103
99431: AND
99432: IFFALSE 99671
99434: GO 99436
99436: DISABLE
99437: LD_INT 0
99439: PPUSH
99440: PPUSH
99441: PPUSH
// begin tmp := [ ] ;
99442: LD_ADDR_VAR 0 3
99446: PUSH
99447: EMPTY
99448: ST_TO_ADDR
// for i := 1 to 6 do
99449: LD_ADDR_VAR 0 1
99453: PUSH
99454: DOUBLE
99455: LD_INT 1
99457: DEC
99458: ST_TO_ADDR
99459: LD_INT 6
99461: PUSH
99462: FOR_TO
99463: IFFALSE 99568
// begin uc_nation := nation_nature ;
99465: LD_ADDR_OWVAR 21
99469: PUSH
99470: LD_INT 0
99472: ST_TO_ADDR
// uc_side := 0 ;
99473: LD_ADDR_OWVAR 20
99477: PUSH
99478: LD_INT 0
99480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
99481: LD_ADDR_OWVAR 29
99485: PUSH
99486: LD_INT 12
99488: PUSH
99489: LD_INT 12
99491: PUSH
99492: EMPTY
99493: LIST
99494: LIST
99495: ST_TO_ADDR
// hc_agressivity := 20 ;
99496: LD_ADDR_OWVAR 35
99500: PUSH
99501: LD_INT 20
99503: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
99504: LD_ADDR_OWVAR 28
99508: PUSH
99509: LD_INT 17
99511: ST_TO_ADDR
// hc_gallery :=  ;
99512: LD_ADDR_OWVAR 33
99516: PUSH
99517: LD_STRING 
99519: ST_TO_ADDR
// hc_name :=  ;
99520: LD_ADDR_OWVAR 26
99524: PUSH
99525: LD_STRING 
99527: ST_TO_ADDR
// un := CreateHuman ;
99528: LD_ADDR_VAR 0 2
99532: PUSH
99533: CALL_OW 44
99537: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
99538: LD_VAR 0 2
99542: PPUSH
99543: LD_INT 1
99545: PPUSH
99546: CALL_OW 51
// tmp := tmp ^ un ;
99550: LD_ADDR_VAR 0 3
99554: PUSH
99555: LD_VAR 0 3
99559: PUSH
99560: LD_VAR 0 2
99564: ADD
99565: ST_TO_ADDR
// end ;
99566: GO 99462
99568: POP
99569: POP
// repeat wait ( 0 0$1 ) ;
99570: LD_INT 35
99572: PPUSH
99573: CALL_OW 67
// for un in tmp do
99577: LD_ADDR_VAR 0 2
99581: PUSH
99582: LD_VAR 0 3
99586: PUSH
99587: FOR_IN
99588: IFFALSE 99662
// begin if IsDead ( un ) then
99590: LD_VAR 0 2
99594: PPUSH
99595: CALL_OW 301
99599: IFFALSE 99619
// begin tmp := tmp diff un ;
99601: LD_ADDR_VAR 0 3
99605: PUSH
99606: LD_VAR 0 3
99610: PUSH
99611: LD_VAR 0 2
99615: DIFF
99616: ST_TO_ADDR
// continue ;
99617: GO 99587
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
99619: LD_VAR 0 2
99623: PPUSH
99624: LD_INT 3
99626: PUSH
99627: LD_INT 22
99629: PUSH
99630: LD_INT 0
99632: PUSH
99633: EMPTY
99634: LIST
99635: LIST
99636: PUSH
99637: EMPTY
99638: LIST
99639: LIST
99640: PPUSH
99641: CALL_OW 69
99645: PPUSH
99646: LD_VAR 0 2
99650: PPUSH
99651: CALL_OW 74
99655: PPUSH
99656: CALL_OW 115
// end ;
99660: GO 99587
99662: POP
99663: POP
// until not tmp ;
99664: LD_VAR 0 3
99668: NOT
99669: IFFALSE 99570
// end ;
99671: PPOPN 3
99673: END
// every 0 0$1 trigger StreamModeActive and sTroll do
99674: LD_EXP 79
99678: PUSH
99679: LD_EXP 104
99683: AND
99684: IFFALSE 99738
99686: GO 99688
99688: DISABLE
// begin ToLua ( displayTroll(); ) ;
99689: LD_STRING displayTroll();
99691: PPUSH
99692: CALL_OW 559
// wait ( 3 3$00 ) ;
99696: LD_INT 6300
99698: PPUSH
99699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99703: LD_STRING hideTroll();
99705: PPUSH
99706: CALL_OW 559
// wait ( 1 1$00 ) ;
99710: LD_INT 2100
99712: PPUSH
99713: CALL_OW 67
// ToLua ( displayTroll(); ) ;
99717: LD_STRING displayTroll();
99719: PPUSH
99720: CALL_OW 559
// wait ( 1 1$00 ) ;
99724: LD_INT 2100
99726: PPUSH
99727: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99731: LD_STRING hideTroll();
99733: PPUSH
99734: CALL_OW 559
// end ;
99738: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
99739: LD_EXP 79
99743: PUSH
99744: LD_EXP 105
99748: AND
99749: IFFALSE 99812
99751: GO 99753
99753: DISABLE
99754: LD_INT 0
99756: PPUSH
// begin p := 0 ;
99757: LD_ADDR_VAR 0 1
99761: PUSH
99762: LD_INT 0
99764: ST_TO_ADDR
// repeat game_speed := 1 ;
99765: LD_ADDR_OWVAR 65
99769: PUSH
99770: LD_INT 1
99772: ST_TO_ADDR
// wait ( 0 0$1 ) ;
99773: LD_INT 35
99775: PPUSH
99776: CALL_OW 67
// p := p + 1 ;
99780: LD_ADDR_VAR 0 1
99784: PUSH
99785: LD_VAR 0 1
99789: PUSH
99790: LD_INT 1
99792: PLUS
99793: ST_TO_ADDR
// until p >= 60 ;
99794: LD_VAR 0 1
99798: PUSH
99799: LD_INT 60
99801: GREATEREQUAL
99802: IFFALSE 99765
// game_speed := 4 ;
99804: LD_ADDR_OWVAR 65
99808: PUSH
99809: LD_INT 4
99811: ST_TO_ADDR
// end ;
99812: PPOPN 1
99814: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
99815: LD_EXP 79
99819: PUSH
99820: LD_EXP 106
99824: AND
99825: IFFALSE 99971
99827: GO 99829
99829: DISABLE
99830: LD_INT 0
99832: PPUSH
99833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
99834: LD_ADDR_VAR 0 1
99838: PUSH
99839: LD_INT 22
99841: PUSH
99842: LD_OWVAR 2
99846: PUSH
99847: EMPTY
99848: LIST
99849: LIST
99850: PUSH
99851: LD_INT 2
99853: PUSH
99854: LD_INT 30
99856: PUSH
99857: LD_INT 0
99859: PUSH
99860: EMPTY
99861: LIST
99862: LIST
99863: PUSH
99864: LD_INT 30
99866: PUSH
99867: LD_INT 1
99869: PUSH
99870: EMPTY
99871: LIST
99872: LIST
99873: PUSH
99874: EMPTY
99875: LIST
99876: LIST
99877: LIST
99878: PUSH
99879: EMPTY
99880: LIST
99881: LIST
99882: PPUSH
99883: CALL_OW 69
99887: ST_TO_ADDR
// if not depot then
99888: LD_VAR 0 1
99892: NOT
99893: IFFALSE 99897
// exit ;
99895: GO 99971
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
99897: LD_ADDR_VAR 0 2
99901: PUSH
99902: LD_VAR 0 1
99906: PUSH
99907: LD_INT 1
99909: PPUSH
99910: LD_VAR 0 1
99914: PPUSH
99915: CALL_OW 12
99919: ARRAY
99920: PPUSH
99921: CALL_OW 274
99925: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
99926: LD_VAR 0 2
99930: PPUSH
99931: LD_INT 1
99933: PPUSH
99934: LD_INT 0
99936: PPUSH
99937: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
99941: LD_VAR 0 2
99945: PPUSH
99946: LD_INT 2
99948: PPUSH
99949: LD_INT 0
99951: PPUSH
99952: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
99956: LD_VAR 0 2
99960: PPUSH
99961: LD_INT 3
99963: PPUSH
99964: LD_INT 0
99966: PPUSH
99967: CALL_OW 277
// end ;
99971: PPOPN 2
99973: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
99974: LD_EXP 79
99978: PUSH
99979: LD_EXP 107
99983: AND
99984: IFFALSE 100081
99986: GO 99988
99988: DISABLE
99989: LD_INT 0
99991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
99992: LD_ADDR_VAR 0 1
99996: PUSH
99997: LD_INT 22
99999: PUSH
100000: LD_OWVAR 2
100004: PUSH
100005: EMPTY
100006: LIST
100007: LIST
100008: PUSH
100009: LD_INT 21
100011: PUSH
100012: LD_INT 1
100014: PUSH
100015: EMPTY
100016: LIST
100017: LIST
100018: PUSH
100019: LD_INT 3
100021: PUSH
100022: LD_INT 23
100024: PUSH
100025: LD_INT 0
100027: PUSH
100028: EMPTY
100029: LIST
100030: LIST
100031: PUSH
100032: EMPTY
100033: LIST
100034: LIST
100035: PUSH
100036: EMPTY
100037: LIST
100038: LIST
100039: LIST
100040: PPUSH
100041: CALL_OW 69
100045: ST_TO_ADDR
// if not tmp then
100046: LD_VAR 0 1
100050: NOT
100051: IFFALSE 100055
// exit ;
100053: GO 100081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
100055: LD_VAR 0 1
100059: PUSH
100060: LD_INT 1
100062: PPUSH
100063: LD_VAR 0 1
100067: PPUSH
100068: CALL_OW 12
100072: ARRAY
100073: PPUSH
100074: LD_INT 200
100076: PPUSH
100077: CALL_OW 234
// end ;
100081: PPOPN 1
100083: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
100084: LD_EXP 79
100088: PUSH
100089: LD_EXP 108
100093: AND
100094: IFFALSE 100173
100096: GO 100098
100098: DISABLE
100099: LD_INT 0
100101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
100102: LD_ADDR_VAR 0 1
100106: PUSH
100107: LD_INT 22
100109: PUSH
100110: LD_OWVAR 2
100114: PUSH
100115: EMPTY
100116: LIST
100117: LIST
100118: PUSH
100119: LD_INT 21
100121: PUSH
100122: LD_INT 2
100124: PUSH
100125: EMPTY
100126: LIST
100127: LIST
100128: PUSH
100129: EMPTY
100130: LIST
100131: LIST
100132: PPUSH
100133: CALL_OW 69
100137: ST_TO_ADDR
// if not tmp then
100138: LD_VAR 0 1
100142: NOT
100143: IFFALSE 100147
// exit ;
100145: GO 100173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
100147: LD_VAR 0 1
100151: PUSH
100152: LD_INT 1
100154: PPUSH
100155: LD_VAR 0 1
100159: PPUSH
100160: CALL_OW 12
100164: ARRAY
100165: PPUSH
100166: LD_INT 60
100168: PPUSH
100169: CALL_OW 234
// end ;
100173: PPOPN 1
100175: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
100176: LD_EXP 79
100180: PUSH
100181: LD_EXP 109
100185: AND
100186: IFFALSE 100285
100188: GO 100190
100190: DISABLE
100191: LD_INT 0
100193: PPUSH
100194: PPUSH
// begin enable ;
100195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
100196: LD_ADDR_VAR 0 1
100200: PUSH
100201: LD_INT 22
100203: PUSH
100204: LD_OWVAR 2
100208: PUSH
100209: EMPTY
100210: LIST
100211: LIST
100212: PUSH
100213: LD_INT 61
100215: PUSH
100216: EMPTY
100217: LIST
100218: PUSH
100219: LD_INT 33
100221: PUSH
100222: LD_INT 2
100224: PUSH
100225: EMPTY
100226: LIST
100227: LIST
100228: PUSH
100229: EMPTY
100230: LIST
100231: LIST
100232: LIST
100233: PPUSH
100234: CALL_OW 69
100238: ST_TO_ADDR
// if not tmp then
100239: LD_VAR 0 1
100243: NOT
100244: IFFALSE 100248
// exit ;
100246: GO 100285
// for i in tmp do
100248: LD_ADDR_VAR 0 2
100252: PUSH
100253: LD_VAR 0 1
100257: PUSH
100258: FOR_IN
100259: IFFALSE 100283
// if IsControledBy ( i ) then
100261: LD_VAR 0 2
100265: PPUSH
100266: CALL_OW 312
100270: IFFALSE 100281
// ComUnlink ( i ) ;
100272: LD_VAR 0 2
100276: PPUSH
100277: CALL_OW 136
100281: GO 100258
100283: POP
100284: POP
// end ;
100285: PPOPN 2
100287: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
100288: LD_EXP 79
100292: PUSH
100293: LD_EXP 110
100297: AND
100298: IFFALSE 100438
100300: GO 100302
100302: DISABLE
100303: LD_INT 0
100305: PPUSH
100306: PPUSH
// begin ToLua ( displayPowell(); ) ;
100307: LD_STRING displayPowell();
100309: PPUSH
100310: CALL_OW 559
// uc_side := 0 ;
100314: LD_ADDR_OWVAR 20
100318: PUSH
100319: LD_INT 0
100321: ST_TO_ADDR
// uc_nation := 2 ;
100322: LD_ADDR_OWVAR 21
100326: PUSH
100327: LD_INT 2
100329: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
100330: LD_ADDR_OWVAR 37
100334: PUSH
100335: LD_INT 14
100337: ST_TO_ADDR
// vc_engine := engine_siberite ;
100338: LD_ADDR_OWVAR 39
100342: PUSH
100343: LD_INT 3
100345: ST_TO_ADDR
// vc_control := control_apeman ;
100346: LD_ADDR_OWVAR 38
100350: PUSH
100351: LD_INT 5
100353: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
100354: LD_ADDR_OWVAR 40
100358: PUSH
100359: LD_INT 29
100361: ST_TO_ADDR
// un := CreateVehicle ;
100362: LD_ADDR_VAR 0 2
100366: PUSH
100367: CALL_OW 45
100371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100372: LD_VAR 0 2
100376: PPUSH
100377: LD_INT 1
100379: PPUSH
100380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
100384: LD_INT 35
100386: PPUSH
100387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
100391: LD_VAR 0 2
100395: PPUSH
100396: LD_INT 22
100398: PUSH
100399: LD_OWVAR 2
100403: PUSH
100404: EMPTY
100405: LIST
100406: LIST
100407: PPUSH
100408: CALL_OW 69
100412: PPUSH
100413: LD_VAR 0 2
100417: PPUSH
100418: CALL_OW 74
100422: PPUSH
100423: CALL_OW 115
// until IsDead ( un ) ;
100427: LD_VAR 0 2
100431: PPUSH
100432: CALL_OW 301
100436: IFFALSE 100384
// end ;
100438: PPOPN 2
100440: END
// every 0 0$1 trigger StreamModeActive and sStu do
100441: LD_EXP 79
100445: PUSH
100446: LD_EXP 118
100450: AND
100451: IFFALSE 100467
100453: GO 100455
100455: DISABLE
// begin ToLua ( displayStucuk(); ) ;
100456: LD_STRING displayStucuk();
100458: PPUSH
100459: CALL_OW 559
// ResetFog ;
100463: CALL_OW 335
// end ;
100467: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
100468: LD_EXP 79
100472: PUSH
100473: LD_EXP 111
100477: AND
100478: IFFALSE 100619
100480: GO 100482
100482: DISABLE
100483: LD_INT 0
100485: PPUSH
100486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100487: LD_ADDR_VAR 0 2
100491: PUSH
100492: LD_INT 22
100494: PUSH
100495: LD_OWVAR 2
100499: PUSH
100500: EMPTY
100501: LIST
100502: LIST
100503: PUSH
100504: LD_INT 21
100506: PUSH
100507: LD_INT 1
100509: PUSH
100510: EMPTY
100511: LIST
100512: LIST
100513: PUSH
100514: EMPTY
100515: LIST
100516: LIST
100517: PPUSH
100518: CALL_OW 69
100522: ST_TO_ADDR
// if not tmp then
100523: LD_VAR 0 2
100527: NOT
100528: IFFALSE 100532
// exit ;
100530: GO 100619
// un := tmp [ rand ( 1 , tmp ) ] ;
100532: LD_ADDR_VAR 0 1
100536: PUSH
100537: LD_VAR 0 2
100541: PUSH
100542: LD_INT 1
100544: PPUSH
100545: LD_VAR 0 2
100549: PPUSH
100550: CALL_OW 12
100554: ARRAY
100555: ST_TO_ADDR
// SetSide ( un , 0 ) ;
100556: LD_VAR 0 1
100560: PPUSH
100561: LD_INT 0
100563: PPUSH
100564: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
100568: LD_VAR 0 1
100572: PPUSH
100573: LD_OWVAR 3
100577: PUSH
100578: LD_VAR 0 1
100582: DIFF
100583: PPUSH
100584: LD_VAR 0 1
100588: PPUSH
100589: CALL_OW 74
100593: PPUSH
100594: CALL_OW 115
// wait ( 0 0$20 ) ;
100598: LD_INT 700
100600: PPUSH
100601: CALL_OW 67
// SetSide ( un , your_side ) ;
100605: LD_VAR 0 1
100609: PPUSH
100610: LD_OWVAR 2
100614: PPUSH
100615: CALL_OW 235
// end ;
100619: PPOPN 2
100621: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
100622: LD_EXP 79
100626: PUSH
100627: LD_EXP 112
100631: AND
100632: IFFALSE 100738
100634: GO 100636
100636: DISABLE
100637: LD_INT 0
100639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
100640: LD_ADDR_VAR 0 1
100644: PUSH
100645: LD_INT 22
100647: PUSH
100648: LD_OWVAR 2
100652: PUSH
100653: EMPTY
100654: LIST
100655: LIST
100656: PUSH
100657: LD_INT 2
100659: PUSH
100660: LD_INT 30
100662: PUSH
100663: LD_INT 0
100665: PUSH
100666: EMPTY
100667: LIST
100668: LIST
100669: PUSH
100670: LD_INT 30
100672: PUSH
100673: LD_INT 1
100675: PUSH
100676: EMPTY
100677: LIST
100678: LIST
100679: PUSH
100680: EMPTY
100681: LIST
100682: LIST
100683: LIST
100684: PUSH
100685: EMPTY
100686: LIST
100687: LIST
100688: PPUSH
100689: CALL_OW 69
100693: ST_TO_ADDR
// if not depot then
100694: LD_VAR 0 1
100698: NOT
100699: IFFALSE 100703
// exit ;
100701: GO 100738
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
100703: LD_VAR 0 1
100707: PUSH
100708: LD_INT 1
100710: ARRAY
100711: PPUSH
100712: CALL_OW 250
100716: PPUSH
100717: LD_VAR 0 1
100721: PUSH
100722: LD_INT 1
100724: ARRAY
100725: PPUSH
100726: CALL_OW 251
100730: PPUSH
100731: LD_INT 70
100733: PPUSH
100734: CALL_OW 495
// end ;
100738: PPOPN 1
100740: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
100741: LD_EXP 79
100745: PUSH
100746: LD_EXP 113
100750: AND
100751: IFFALSE 100962
100753: GO 100755
100755: DISABLE
100756: LD_INT 0
100758: PPUSH
100759: PPUSH
100760: PPUSH
100761: PPUSH
100762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100763: LD_ADDR_VAR 0 5
100767: PUSH
100768: LD_INT 22
100770: PUSH
100771: LD_OWVAR 2
100775: PUSH
100776: EMPTY
100777: LIST
100778: LIST
100779: PUSH
100780: LD_INT 21
100782: PUSH
100783: LD_INT 1
100785: PUSH
100786: EMPTY
100787: LIST
100788: LIST
100789: PUSH
100790: EMPTY
100791: LIST
100792: LIST
100793: PPUSH
100794: CALL_OW 69
100798: ST_TO_ADDR
// if not tmp then
100799: LD_VAR 0 5
100803: NOT
100804: IFFALSE 100808
// exit ;
100806: GO 100962
// for i in tmp do
100808: LD_ADDR_VAR 0 1
100812: PUSH
100813: LD_VAR 0 5
100817: PUSH
100818: FOR_IN
100819: IFFALSE 100960
// begin d := rand ( 0 , 5 ) ;
100821: LD_ADDR_VAR 0 4
100825: PUSH
100826: LD_INT 0
100828: PPUSH
100829: LD_INT 5
100831: PPUSH
100832: CALL_OW 12
100836: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
100837: LD_ADDR_VAR 0 2
100841: PUSH
100842: LD_VAR 0 1
100846: PPUSH
100847: CALL_OW 250
100851: PPUSH
100852: LD_VAR 0 4
100856: PPUSH
100857: LD_INT 3
100859: PPUSH
100860: LD_INT 12
100862: PPUSH
100863: CALL_OW 12
100867: PPUSH
100868: CALL_OW 272
100872: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
100873: LD_ADDR_VAR 0 3
100877: PUSH
100878: LD_VAR 0 1
100882: PPUSH
100883: CALL_OW 251
100887: PPUSH
100888: LD_VAR 0 4
100892: PPUSH
100893: LD_INT 3
100895: PPUSH
100896: LD_INT 12
100898: PPUSH
100899: CALL_OW 12
100903: PPUSH
100904: CALL_OW 273
100908: ST_TO_ADDR
// if ValidHex ( x , y ) then
100909: LD_VAR 0 2
100913: PPUSH
100914: LD_VAR 0 3
100918: PPUSH
100919: CALL_OW 488
100923: IFFALSE 100958
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
100925: LD_VAR 0 1
100929: PPUSH
100930: LD_VAR 0 2
100934: PPUSH
100935: LD_VAR 0 3
100939: PPUSH
100940: LD_INT 3
100942: PPUSH
100943: LD_INT 6
100945: PPUSH
100946: CALL_OW 12
100950: PPUSH
100951: LD_INT 1
100953: PPUSH
100954: CALL_OW 483
// end ;
100958: GO 100818
100960: POP
100961: POP
// end ;
100962: PPOPN 5
100964: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
100965: LD_EXP 79
100969: PUSH
100970: LD_EXP 114
100974: AND
100975: IFFALSE 101069
100977: GO 100979
100979: DISABLE
100980: LD_INT 0
100982: PPUSH
100983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
100984: LD_ADDR_VAR 0 2
100988: PUSH
100989: LD_INT 22
100991: PUSH
100992: LD_OWVAR 2
100996: PUSH
100997: EMPTY
100998: LIST
100999: LIST
101000: PUSH
101001: LD_INT 32
101003: PUSH
101004: LD_INT 1
101006: PUSH
101007: EMPTY
101008: LIST
101009: LIST
101010: PUSH
101011: LD_INT 21
101013: PUSH
101014: LD_INT 2
101016: PUSH
101017: EMPTY
101018: LIST
101019: LIST
101020: PUSH
101021: EMPTY
101022: LIST
101023: LIST
101024: LIST
101025: PPUSH
101026: CALL_OW 69
101030: ST_TO_ADDR
// if not tmp then
101031: LD_VAR 0 2
101035: NOT
101036: IFFALSE 101040
// exit ;
101038: GO 101069
// for i in tmp do
101040: LD_ADDR_VAR 0 1
101044: PUSH
101045: LD_VAR 0 2
101049: PUSH
101050: FOR_IN
101051: IFFALSE 101067
// SetFuel ( i , 0 ) ;
101053: LD_VAR 0 1
101057: PPUSH
101058: LD_INT 0
101060: PPUSH
101061: CALL_OW 240
101065: GO 101050
101067: POP
101068: POP
// end ;
101069: PPOPN 2
101071: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
101072: LD_EXP 79
101076: PUSH
101077: LD_EXP 115
101081: AND
101082: IFFALSE 101148
101084: GO 101086
101086: DISABLE
101087: LD_INT 0
101089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
101090: LD_ADDR_VAR 0 1
101094: PUSH
101095: LD_INT 22
101097: PUSH
101098: LD_OWVAR 2
101102: PUSH
101103: EMPTY
101104: LIST
101105: LIST
101106: PUSH
101107: LD_INT 30
101109: PUSH
101110: LD_INT 29
101112: PUSH
101113: EMPTY
101114: LIST
101115: LIST
101116: PUSH
101117: EMPTY
101118: LIST
101119: LIST
101120: PPUSH
101121: CALL_OW 69
101125: ST_TO_ADDR
// if not tmp then
101126: LD_VAR 0 1
101130: NOT
101131: IFFALSE 101135
// exit ;
101133: GO 101148
// DestroyUnit ( tmp [ 1 ] ) ;
101135: LD_VAR 0 1
101139: PUSH
101140: LD_INT 1
101142: ARRAY
101143: PPUSH
101144: CALL_OW 65
// end ;
101148: PPOPN 1
101150: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
101151: LD_EXP 79
101155: PUSH
101156: LD_EXP 117
101160: AND
101161: IFFALSE 101290
101163: GO 101165
101165: DISABLE
101166: LD_INT 0
101168: PPUSH
// begin uc_side := 0 ;
101169: LD_ADDR_OWVAR 20
101173: PUSH
101174: LD_INT 0
101176: ST_TO_ADDR
// uc_nation := nation_arabian ;
101177: LD_ADDR_OWVAR 21
101181: PUSH
101182: LD_INT 2
101184: ST_TO_ADDR
// hc_gallery :=  ;
101185: LD_ADDR_OWVAR 33
101189: PUSH
101190: LD_STRING 
101192: ST_TO_ADDR
// hc_name :=  ;
101193: LD_ADDR_OWVAR 26
101197: PUSH
101198: LD_STRING 
101200: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
101201: LD_INT 1
101203: PPUSH
101204: LD_INT 11
101206: PPUSH
101207: LD_INT 10
101209: PPUSH
101210: CALL_OW 380
// un := CreateHuman ;
101214: LD_ADDR_VAR 0 1
101218: PUSH
101219: CALL_OW 44
101223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101224: LD_VAR 0 1
101228: PPUSH
101229: LD_INT 1
101231: PPUSH
101232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
101236: LD_INT 35
101238: PPUSH
101239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
101243: LD_VAR 0 1
101247: PPUSH
101248: LD_INT 22
101250: PUSH
101251: LD_OWVAR 2
101255: PUSH
101256: EMPTY
101257: LIST
101258: LIST
101259: PPUSH
101260: CALL_OW 69
101264: PPUSH
101265: LD_VAR 0 1
101269: PPUSH
101270: CALL_OW 74
101274: PPUSH
101275: CALL_OW 115
// until IsDead ( un ) ;
101279: LD_VAR 0 1
101283: PPUSH
101284: CALL_OW 301
101288: IFFALSE 101236
// end ;
101290: PPOPN 1
101292: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
101293: LD_EXP 79
101297: PUSH
101298: LD_EXP 119
101302: AND
101303: IFFALSE 101315
101305: GO 101307
101307: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
101308: LD_STRING earthquake(getX(game), 0, 32)
101310: PPUSH
101311: CALL_OW 559
101315: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
101316: LD_EXP 79
101320: PUSH
101321: LD_EXP 120
101325: AND
101326: IFFALSE 101417
101328: GO 101330
101330: DISABLE
101331: LD_INT 0
101333: PPUSH
// begin enable ;
101334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
101335: LD_ADDR_VAR 0 1
101339: PUSH
101340: LD_INT 22
101342: PUSH
101343: LD_OWVAR 2
101347: PUSH
101348: EMPTY
101349: LIST
101350: LIST
101351: PUSH
101352: LD_INT 21
101354: PUSH
101355: LD_INT 2
101357: PUSH
101358: EMPTY
101359: LIST
101360: LIST
101361: PUSH
101362: LD_INT 33
101364: PUSH
101365: LD_INT 3
101367: PUSH
101368: EMPTY
101369: LIST
101370: LIST
101371: PUSH
101372: EMPTY
101373: LIST
101374: LIST
101375: LIST
101376: PPUSH
101377: CALL_OW 69
101381: ST_TO_ADDR
// if not tmp then
101382: LD_VAR 0 1
101386: NOT
101387: IFFALSE 101391
// exit ;
101389: GO 101417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
101391: LD_VAR 0 1
101395: PUSH
101396: LD_INT 1
101398: PPUSH
101399: LD_VAR 0 1
101403: PPUSH
101404: CALL_OW 12
101408: ARRAY
101409: PPUSH
101410: LD_INT 1
101412: PPUSH
101413: CALL_OW 234
// end ;
101417: PPOPN 1
101419: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
101420: LD_EXP 79
101424: PUSH
101425: LD_EXP 121
101429: AND
101430: IFFALSE 101571
101432: GO 101434
101434: DISABLE
101435: LD_INT 0
101437: PPUSH
101438: PPUSH
101439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101440: LD_ADDR_VAR 0 3
101444: PUSH
101445: LD_INT 22
101447: PUSH
101448: LD_OWVAR 2
101452: PUSH
101453: EMPTY
101454: LIST
101455: LIST
101456: PUSH
101457: LD_INT 25
101459: PUSH
101460: LD_INT 1
101462: PUSH
101463: EMPTY
101464: LIST
101465: LIST
101466: PUSH
101467: EMPTY
101468: LIST
101469: LIST
101470: PPUSH
101471: CALL_OW 69
101475: ST_TO_ADDR
// if not tmp then
101476: LD_VAR 0 3
101480: NOT
101481: IFFALSE 101485
// exit ;
101483: GO 101571
// un := tmp [ rand ( 1 , tmp ) ] ;
101485: LD_ADDR_VAR 0 2
101489: PUSH
101490: LD_VAR 0 3
101494: PUSH
101495: LD_INT 1
101497: PPUSH
101498: LD_VAR 0 3
101502: PPUSH
101503: CALL_OW 12
101507: ARRAY
101508: ST_TO_ADDR
// if Crawls ( un ) then
101509: LD_VAR 0 2
101513: PPUSH
101514: CALL_OW 318
101518: IFFALSE 101529
// ComWalk ( un ) ;
101520: LD_VAR 0 2
101524: PPUSH
101525: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
101529: LD_VAR 0 2
101533: PPUSH
101534: LD_INT 9
101536: PPUSH
101537: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
101541: LD_INT 28
101543: PPUSH
101544: LD_OWVAR 2
101548: PPUSH
101549: LD_INT 2
101551: PPUSH
101552: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
101556: LD_INT 29
101558: PPUSH
101559: LD_OWVAR 2
101563: PPUSH
101564: LD_INT 2
101566: PPUSH
101567: CALL_OW 322
// end ;
101571: PPOPN 3
101573: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
101574: LD_EXP 79
101578: PUSH
101579: LD_EXP 122
101583: AND
101584: IFFALSE 101695
101586: GO 101588
101588: DISABLE
101589: LD_INT 0
101591: PPUSH
101592: PPUSH
101593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101594: LD_ADDR_VAR 0 3
101598: PUSH
101599: LD_INT 22
101601: PUSH
101602: LD_OWVAR 2
101606: PUSH
101607: EMPTY
101608: LIST
101609: LIST
101610: PUSH
101611: LD_INT 25
101613: PUSH
101614: LD_INT 1
101616: PUSH
101617: EMPTY
101618: LIST
101619: LIST
101620: PUSH
101621: EMPTY
101622: LIST
101623: LIST
101624: PPUSH
101625: CALL_OW 69
101629: ST_TO_ADDR
// if not tmp then
101630: LD_VAR 0 3
101634: NOT
101635: IFFALSE 101639
// exit ;
101637: GO 101695
// un := tmp [ rand ( 1 , tmp ) ] ;
101639: LD_ADDR_VAR 0 2
101643: PUSH
101644: LD_VAR 0 3
101648: PUSH
101649: LD_INT 1
101651: PPUSH
101652: LD_VAR 0 3
101656: PPUSH
101657: CALL_OW 12
101661: ARRAY
101662: ST_TO_ADDR
// if Crawls ( un ) then
101663: LD_VAR 0 2
101667: PPUSH
101668: CALL_OW 318
101672: IFFALSE 101683
// ComWalk ( un ) ;
101674: LD_VAR 0 2
101678: PPUSH
101679: CALL_OW 138
// SetClass ( un , class_mortar ) ;
101683: LD_VAR 0 2
101687: PPUSH
101688: LD_INT 8
101690: PPUSH
101691: CALL_OW 336
// end ;
101695: PPOPN 3
101697: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
101698: LD_EXP 79
101702: PUSH
101703: LD_EXP 123
101707: AND
101708: IFFALSE 101852
101710: GO 101712
101712: DISABLE
101713: LD_INT 0
101715: PPUSH
101716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
101717: LD_ADDR_VAR 0 2
101721: PUSH
101722: LD_INT 22
101724: PUSH
101725: LD_OWVAR 2
101729: PUSH
101730: EMPTY
101731: LIST
101732: LIST
101733: PUSH
101734: LD_INT 21
101736: PUSH
101737: LD_INT 2
101739: PUSH
101740: EMPTY
101741: LIST
101742: LIST
101743: PUSH
101744: LD_INT 2
101746: PUSH
101747: LD_INT 34
101749: PUSH
101750: LD_INT 12
101752: PUSH
101753: EMPTY
101754: LIST
101755: LIST
101756: PUSH
101757: LD_INT 34
101759: PUSH
101760: LD_INT 51
101762: PUSH
101763: EMPTY
101764: LIST
101765: LIST
101766: PUSH
101767: LD_INT 34
101769: PUSH
101770: LD_INT 32
101772: PUSH
101773: EMPTY
101774: LIST
101775: LIST
101776: PUSH
101777: EMPTY
101778: LIST
101779: LIST
101780: LIST
101781: LIST
101782: PUSH
101783: EMPTY
101784: LIST
101785: LIST
101786: LIST
101787: PPUSH
101788: CALL_OW 69
101792: ST_TO_ADDR
// if not tmp then
101793: LD_VAR 0 2
101797: NOT
101798: IFFALSE 101802
// exit ;
101800: GO 101852
// for i in tmp do
101802: LD_ADDR_VAR 0 1
101806: PUSH
101807: LD_VAR 0 2
101811: PUSH
101812: FOR_IN
101813: IFFALSE 101850
// if GetCargo ( i , mat_artifact ) = 0 then
101815: LD_VAR 0 1
101819: PPUSH
101820: LD_INT 4
101822: PPUSH
101823: CALL_OW 289
101827: PUSH
101828: LD_INT 0
101830: EQUAL
101831: IFFALSE 101848
// SetCargo ( i , mat_siberit , 100 ) ;
101833: LD_VAR 0 1
101837: PPUSH
101838: LD_INT 3
101840: PPUSH
101841: LD_INT 100
101843: PPUSH
101844: CALL_OW 290
101848: GO 101812
101850: POP
101851: POP
// end ;
101852: PPOPN 2
101854: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
101855: LD_EXP 79
101859: PUSH
101860: LD_EXP 124
101864: AND
101865: IFFALSE 102018
101867: GO 101869
101869: DISABLE
101870: LD_INT 0
101872: PPUSH
101873: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
101874: LD_ADDR_VAR 0 2
101878: PUSH
101879: LD_INT 22
101881: PUSH
101882: LD_OWVAR 2
101886: PUSH
101887: EMPTY
101888: LIST
101889: LIST
101890: PPUSH
101891: CALL_OW 69
101895: ST_TO_ADDR
// if not tmp then
101896: LD_VAR 0 2
101900: NOT
101901: IFFALSE 101905
// exit ;
101903: GO 102018
// for i := 1 to 2 do
101905: LD_ADDR_VAR 0 1
101909: PUSH
101910: DOUBLE
101911: LD_INT 1
101913: DEC
101914: ST_TO_ADDR
101915: LD_INT 2
101917: PUSH
101918: FOR_TO
101919: IFFALSE 102016
// begin uc_side := your_side ;
101921: LD_ADDR_OWVAR 20
101925: PUSH
101926: LD_OWVAR 2
101930: ST_TO_ADDR
// uc_nation := nation_american ;
101931: LD_ADDR_OWVAR 21
101935: PUSH
101936: LD_INT 1
101938: ST_TO_ADDR
// vc_chassis := us_morphling ;
101939: LD_ADDR_OWVAR 37
101943: PUSH
101944: LD_INT 5
101946: ST_TO_ADDR
// vc_engine := engine_siberite ;
101947: LD_ADDR_OWVAR 39
101951: PUSH
101952: LD_INT 3
101954: ST_TO_ADDR
// vc_control := control_computer ;
101955: LD_ADDR_OWVAR 38
101959: PUSH
101960: LD_INT 3
101962: ST_TO_ADDR
// vc_weapon := us_double_laser ;
101963: LD_ADDR_OWVAR 40
101967: PUSH
101968: LD_INT 10
101970: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
101971: CALL_OW 45
101975: PPUSH
101976: LD_VAR 0 2
101980: PUSH
101981: LD_INT 1
101983: ARRAY
101984: PPUSH
101985: CALL_OW 250
101989: PPUSH
101990: LD_VAR 0 2
101994: PUSH
101995: LD_INT 1
101997: ARRAY
101998: PPUSH
101999: CALL_OW 251
102003: PPUSH
102004: LD_INT 12
102006: PPUSH
102007: LD_INT 1
102009: PPUSH
102010: CALL_OW 50
// end ;
102014: GO 101918
102016: POP
102017: POP
// end ;
102018: PPOPN 2
102020: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
102021: LD_EXP 79
102025: PUSH
102026: LD_EXP 125
102030: AND
102031: IFFALSE 102253
102033: GO 102035
102035: DISABLE
102036: LD_INT 0
102038: PPUSH
102039: PPUSH
102040: PPUSH
102041: PPUSH
102042: PPUSH
102043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
102044: LD_ADDR_VAR 0 6
102048: PUSH
102049: LD_INT 22
102051: PUSH
102052: LD_OWVAR 2
102056: PUSH
102057: EMPTY
102058: LIST
102059: LIST
102060: PUSH
102061: LD_INT 21
102063: PUSH
102064: LD_INT 1
102066: PUSH
102067: EMPTY
102068: LIST
102069: LIST
102070: PUSH
102071: LD_INT 3
102073: PUSH
102074: LD_INT 23
102076: PUSH
102077: LD_INT 0
102079: PUSH
102080: EMPTY
102081: LIST
102082: LIST
102083: PUSH
102084: EMPTY
102085: LIST
102086: LIST
102087: PUSH
102088: EMPTY
102089: LIST
102090: LIST
102091: LIST
102092: PPUSH
102093: CALL_OW 69
102097: ST_TO_ADDR
// if not tmp then
102098: LD_VAR 0 6
102102: NOT
102103: IFFALSE 102107
// exit ;
102105: GO 102253
// s1 := rand ( 1 , 4 ) ;
102107: LD_ADDR_VAR 0 2
102111: PUSH
102112: LD_INT 1
102114: PPUSH
102115: LD_INT 4
102117: PPUSH
102118: CALL_OW 12
102122: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
102123: LD_ADDR_VAR 0 4
102127: PUSH
102128: LD_VAR 0 6
102132: PUSH
102133: LD_INT 1
102135: ARRAY
102136: PPUSH
102137: LD_VAR 0 2
102141: PPUSH
102142: CALL_OW 259
102146: ST_TO_ADDR
// if s1 = 1 then
102147: LD_VAR 0 2
102151: PUSH
102152: LD_INT 1
102154: EQUAL
102155: IFFALSE 102175
// s2 := rand ( 2 , 4 ) else
102157: LD_ADDR_VAR 0 3
102161: PUSH
102162: LD_INT 2
102164: PPUSH
102165: LD_INT 4
102167: PPUSH
102168: CALL_OW 12
102172: ST_TO_ADDR
102173: GO 102183
// s2 := 1 ;
102175: LD_ADDR_VAR 0 3
102179: PUSH
102180: LD_INT 1
102182: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
102183: LD_ADDR_VAR 0 5
102187: PUSH
102188: LD_VAR 0 6
102192: PUSH
102193: LD_INT 1
102195: ARRAY
102196: PPUSH
102197: LD_VAR 0 3
102201: PPUSH
102202: CALL_OW 259
102206: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
102207: LD_VAR 0 6
102211: PUSH
102212: LD_INT 1
102214: ARRAY
102215: PPUSH
102216: LD_VAR 0 2
102220: PPUSH
102221: LD_VAR 0 5
102225: PPUSH
102226: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
102230: LD_VAR 0 6
102234: PUSH
102235: LD_INT 1
102237: ARRAY
102238: PPUSH
102239: LD_VAR 0 3
102243: PPUSH
102244: LD_VAR 0 4
102248: PPUSH
102249: CALL_OW 237
// end ;
102253: PPOPN 6
102255: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
102256: LD_EXP 79
102260: PUSH
102261: LD_EXP 126
102265: AND
102266: IFFALSE 102345
102268: GO 102270
102270: DISABLE
102271: LD_INT 0
102273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
102274: LD_ADDR_VAR 0 1
102278: PUSH
102279: LD_INT 22
102281: PUSH
102282: LD_OWVAR 2
102286: PUSH
102287: EMPTY
102288: LIST
102289: LIST
102290: PUSH
102291: LD_INT 30
102293: PUSH
102294: LD_INT 3
102296: PUSH
102297: EMPTY
102298: LIST
102299: LIST
102300: PUSH
102301: EMPTY
102302: LIST
102303: LIST
102304: PPUSH
102305: CALL_OW 69
102309: ST_TO_ADDR
// if not tmp then
102310: LD_VAR 0 1
102314: NOT
102315: IFFALSE 102319
// exit ;
102317: GO 102345
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
102319: LD_VAR 0 1
102323: PUSH
102324: LD_INT 1
102326: PPUSH
102327: LD_VAR 0 1
102331: PPUSH
102332: CALL_OW 12
102336: ARRAY
102337: PPUSH
102338: LD_INT 1
102340: PPUSH
102341: CALL_OW 234
// end ;
102345: PPOPN 1
102347: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
102348: LD_EXP 79
102352: PUSH
102353: LD_EXP 127
102357: AND
102358: IFFALSE 102470
102360: GO 102362
102362: DISABLE
102363: LD_INT 0
102365: PPUSH
102366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
102367: LD_ADDR_VAR 0 2
102371: PUSH
102372: LD_INT 22
102374: PUSH
102375: LD_OWVAR 2
102379: PUSH
102380: EMPTY
102381: LIST
102382: LIST
102383: PUSH
102384: LD_INT 2
102386: PUSH
102387: LD_INT 30
102389: PUSH
102390: LD_INT 27
102392: PUSH
102393: EMPTY
102394: LIST
102395: LIST
102396: PUSH
102397: LD_INT 30
102399: PUSH
102400: LD_INT 26
102402: PUSH
102403: EMPTY
102404: LIST
102405: LIST
102406: PUSH
102407: LD_INT 30
102409: PUSH
102410: LD_INT 28
102412: PUSH
102413: EMPTY
102414: LIST
102415: LIST
102416: PUSH
102417: EMPTY
102418: LIST
102419: LIST
102420: LIST
102421: LIST
102422: PUSH
102423: EMPTY
102424: LIST
102425: LIST
102426: PPUSH
102427: CALL_OW 69
102431: ST_TO_ADDR
// if not tmp then
102432: LD_VAR 0 2
102436: NOT
102437: IFFALSE 102441
// exit ;
102439: GO 102470
// for i in tmp do
102441: LD_ADDR_VAR 0 1
102445: PUSH
102446: LD_VAR 0 2
102450: PUSH
102451: FOR_IN
102452: IFFALSE 102468
// SetLives ( i , 1 ) ;
102454: LD_VAR 0 1
102458: PPUSH
102459: LD_INT 1
102461: PPUSH
102462: CALL_OW 234
102466: GO 102451
102468: POP
102469: POP
// end ;
102470: PPOPN 2
102472: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
102473: LD_EXP 79
102477: PUSH
102478: LD_EXP 128
102482: AND
102483: IFFALSE 102757
102485: GO 102487
102487: DISABLE
102488: LD_INT 0
102490: PPUSH
102491: PPUSH
102492: PPUSH
// begin i := rand ( 1 , 7 ) ;
102493: LD_ADDR_VAR 0 1
102497: PUSH
102498: LD_INT 1
102500: PPUSH
102501: LD_INT 7
102503: PPUSH
102504: CALL_OW 12
102508: ST_TO_ADDR
// case i of 1 :
102509: LD_VAR 0 1
102513: PUSH
102514: LD_INT 1
102516: DOUBLE
102517: EQUAL
102518: IFTRUE 102522
102520: GO 102532
102522: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
102523: LD_STRING earthquake(getX(game), 0, 32)
102525: PPUSH
102526: CALL_OW 559
102530: GO 102757
102532: LD_INT 2
102534: DOUBLE
102535: EQUAL
102536: IFTRUE 102540
102538: GO 102554
102540: POP
// begin ToLua ( displayStucuk(); ) ;
102541: LD_STRING displayStucuk();
102543: PPUSH
102544: CALL_OW 559
// ResetFog ;
102548: CALL_OW 335
// end ; 3 :
102552: GO 102757
102554: LD_INT 3
102556: DOUBLE
102557: EQUAL
102558: IFTRUE 102562
102560: GO 102666
102562: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
102563: LD_ADDR_VAR 0 2
102567: PUSH
102568: LD_INT 22
102570: PUSH
102571: LD_OWVAR 2
102575: PUSH
102576: EMPTY
102577: LIST
102578: LIST
102579: PUSH
102580: LD_INT 25
102582: PUSH
102583: LD_INT 1
102585: PUSH
102586: EMPTY
102587: LIST
102588: LIST
102589: PUSH
102590: EMPTY
102591: LIST
102592: LIST
102593: PPUSH
102594: CALL_OW 69
102598: ST_TO_ADDR
// if not tmp then
102599: LD_VAR 0 2
102603: NOT
102604: IFFALSE 102608
// exit ;
102606: GO 102757
// un := tmp [ rand ( 1 , tmp ) ] ;
102608: LD_ADDR_VAR 0 3
102612: PUSH
102613: LD_VAR 0 2
102617: PUSH
102618: LD_INT 1
102620: PPUSH
102621: LD_VAR 0 2
102625: PPUSH
102626: CALL_OW 12
102630: ARRAY
102631: ST_TO_ADDR
// if Crawls ( un ) then
102632: LD_VAR 0 3
102636: PPUSH
102637: CALL_OW 318
102641: IFFALSE 102652
// ComWalk ( un ) ;
102643: LD_VAR 0 3
102647: PPUSH
102648: CALL_OW 138
// SetClass ( un , class_mortar ) ;
102652: LD_VAR 0 3
102656: PPUSH
102657: LD_INT 8
102659: PPUSH
102660: CALL_OW 336
// end ; 4 :
102664: GO 102757
102666: LD_INT 4
102668: DOUBLE
102669: EQUAL
102670: IFTRUE 102674
102672: GO 102735
102674: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
102675: LD_ADDR_VAR 0 2
102679: PUSH
102680: LD_INT 22
102682: PUSH
102683: LD_OWVAR 2
102687: PUSH
102688: EMPTY
102689: LIST
102690: LIST
102691: PUSH
102692: LD_INT 30
102694: PUSH
102695: LD_INT 29
102697: PUSH
102698: EMPTY
102699: LIST
102700: LIST
102701: PUSH
102702: EMPTY
102703: LIST
102704: LIST
102705: PPUSH
102706: CALL_OW 69
102710: ST_TO_ADDR
// if not tmp then
102711: LD_VAR 0 2
102715: NOT
102716: IFFALSE 102720
// exit ;
102718: GO 102757
// DestroyUnit ( tmp [ 1 ] ) ;
102720: LD_VAR 0 2
102724: PUSH
102725: LD_INT 1
102727: ARRAY
102728: PPUSH
102729: CALL_OW 65
// end ; 5 .. 7 :
102733: GO 102757
102735: LD_INT 5
102737: DOUBLE
102738: GREATEREQUAL
102739: IFFALSE 102747
102741: LD_INT 7
102743: DOUBLE
102744: LESSEQUAL
102745: IFTRUE 102749
102747: GO 102756
102749: POP
// StreamSibBomb ; end ;
102750: CALL 99037 0 0
102754: GO 102757
102756: POP
// end ;
102757: PPOPN 3
102759: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
102760: LD_EXP 79
102764: PUSH
102765: LD_EXP 129
102769: AND
102770: IFFALSE 102926
102772: GO 102774
102774: DISABLE
102775: LD_INT 0
102777: PPUSH
102778: PPUSH
102779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
102780: LD_ADDR_VAR 0 2
102784: PUSH
102785: LD_INT 81
102787: PUSH
102788: LD_OWVAR 2
102792: PUSH
102793: EMPTY
102794: LIST
102795: LIST
102796: PUSH
102797: LD_INT 2
102799: PUSH
102800: LD_INT 21
102802: PUSH
102803: LD_INT 1
102805: PUSH
102806: EMPTY
102807: LIST
102808: LIST
102809: PUSH
102810: LD_INT 21
102812: PUSH
102813: LD_INT 2
102815: PUSH
102816: EMPTY
102817: LIST
102818: LIST
102819: PUSH
102820: EMPTY
102821: LIST
102822: LIST
102823: LIST
102824: PUSH
102825: EMPTY
102826: LIST
102827: LIST
102828: PPUSH
102829: CALL_OW 69
102833: ST_TO_ADDR
// if not tmp then
102834: LD_VAR 0 2
102838: NOT
102839: IFFALSE 102843
// exit ;
102841: GO 102926
// p := 0 ;
102843: LD_ADDR_VAR 0 3
102847: PUSH
102848: LD_INT 0
102850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
102851: LD_INT 35
102853: PPUSH
102854: CALL_OW 67
// p := p + 1 ;
102858: LD_ADDR_VAR 0 3
102862: PUSH
102863: LD_VAR 0 3
102867: PUSH
102868: LD_INT 1
102870: PLUS
102871: ST_TO_ADDR
// for i in tmp do
102872: LD_ADDR_VAR 0 1
102876: PUSH
102877: LD_VAR 0 2
102881: PUSH
102882: FOR_IN
102883: IFFALSE 102914
// if GetLives ( i ) < 1000 then
102885: LD_VAR 0 1
102889: PPUSH
102890: CALL_OW 256
102894: PUSH
102895: LD_INT 1000
102897: LESS
102898: IFFALSE 102912
// SetLives ( i , 1000 ) ;
102900: LD_VAR 0 1
102904: PPUSH
102905: LD_INT 1000
102907: PPUSH
102908: CALL_OW 234
102912: GO 102882
102914: POP
102915: POP
// until p > 20 ;
102916: LD_VAR 0 3
102920: PUSH
102921: LD_INT 20
102923: GREATER
102924: IFFALSE 102851
// end ;
102926: PPOPN 3
102928: END
// every 0 0$1 trigger StreamModeActive and sTime do
102929: LD_EXP 79
102933: PUSH
102934: LD_EXP 130
102938: AND
102939: IFFALSE 102974
102941: GO 102943
102943: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
102944: LD_INT 28
102946: PPUSH
102947: LD_OWVAR 2
102951: PPUSH
102952: LD_INT 2
102954: PPUSH
102955: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
102959: LD_INT 30
102961: PPUSH
102962: LD_OWVAR 2
102966: PPUSH
102967: LD_INT 2
102969: PPUSH
102970: CALL_OW 322
// end ;
102974: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
102975: LD_EXP 79
102979: PUSH
102980: LD_EXP 131
102984: AND
102985: IFFALSE 103106
102987: GO 102989
102989: DISABLE
102990: LD_INT 0
102992: PPUSH
102993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
102994: LD_ADDR_VAR 0 2
102998: PUSH
102999: LD_INT 22
103001: PUSH
103002: LD_OWVAR 2
103006: PUSH
103007: EMPTY
103008: LIST
103009: LIST
103010: PUSH
103011: LD_INT 21
103013: PUSH
103014: LD_INT 1
103016: PUSH
103017: EMPTY
103018: LIST
103019: LIST
103020: PUSH
103021: LD_INT 3
103023: PUSH
103024: LD_INT 23
103026: PUSH
103027: LD_INT 0
103029: PUSH
103030: EMPTY
103031: LIST
103032: LIST
103033: PUSH
103034: EMPTY
103035: LIST
103036: LIST
103037: PUSH
103038: EMPTY
103039: LIST
103040: LIST
103041: LIST
103042: PPUSH
103043: CALL_OW 69
103047: ST_TO_ADDR
// if not tmp then
103048: LD_VAR 0 2
103052: NOT
103053: IFFALSE 103057
// exit ;
103055: GO 103106
// for i in tmp do
103057: LD_ADDR_VAR 0 1
103061: PUSH
103062: LD_VAR 0 2
103066: PUSH
103067: FOR_IN
103068: IFFALSE 103104
// begin if Crawls ( i ) then
103070: LD_VAR 0 1
103074: PPUSH
103075: CALL_OW 318
103079: IFFALSE 103090
// ComWalk ( i ) ;
103081: LD_VAR 0 1
103085: PPUSH
103086: CALL_OW 138
// SetClass ( i , 2 ) ;
103090: LD_VAR 0 1
103094: PPUSH
103095: LD_INT 2
103097: PPUSH
103098: CALL_OW 336
// end ;
103102: GO 103067
103104: POP
103105: POP
// end ;
103106: PPOPN 2
103108: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
103109: LD_EXP 79
103113: PUSH
103114: LD_EXP 132
103118: AND
103119: IFFALSE 103340
103121: GO 103123
103123: DISABLE
103124: LD_INT 0
103126: PPUSH
103127: PPUSH
103128: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
103129: LD_OWVAR 2
103133: PPUSH
103134: LD_INT 9
103136: PPUSH
103137: LD_INT 1
103139: PPUSH
103140: LD_INT 1
103142: PPUSH
103143: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
103147: LD_INT 9
103149: PPUSH
103150: LD_OWVAR 2
103154: PPUSH
103155: CALL_OW 343
// uc_side := 9 ;
103159: LD_ADDR_OWVAR 20
103163: PUSH
103164: LD_INT 9
103166: ST_TO_ADDR
// uc_nation := 2 ;
103167: LD_ADDR_OWVAR 21
103171: PUSH
103172: LD_INT 2
103174: ST_TO_ADDR
// hc_name := Dark Warrior ;
103175: LD_ADDR_OWVAR 26
103179: PUSH
103180: LD_STRING Dark Warrior
103182: ST_TO_ADDR
// hc_gallery :=  ;
103183: LD_ADDR_OWVAR 33
103187: PUSH
103188: LD_STRING 
103190: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
103191: LD_INT 1
103193: PPUSH
103194: LD_INT 1
103196: PPUSH
103197: LD_INT 10
103199: PPUSH
103200: CALL_OW 380
// un := CreateHuman ;
103204: LD_ADDR_VAR 0 3
103208: PUSH
103209: CALL_OW 44
103213: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
103214: LD_VAR 0 3
103218: PPUSH
103219: LD_INT 1
103221: PPUSH
103222: CALL_OW 51
// p := 0 ;
103226: LD_ADDR_VAR 0 2
103230: PUSH
103231: LD_INT 0
103233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
103234: LD_INT 35
103236: PPUSH
103237: CALL_OW 67
// if GetLives ( un ) < 1000 then
103241: LD_VAR 0 3
103245: PPUSH
103246: CALL_OW 256
103250: PUSH
103251: LD_INT 1000
103253: LESS
103254: IFFALSE 103268
// SetLives ( un , 1000 ) ;
103256: LD_VAR 0 3
103260: PPUSH
103261: LD_INT 1000
103263: PPUSH
103264: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
103268: LD_VAR 0 3
103272: PPUSH
103273: LD_INT 81
103275: PUSH
103276: LD_OWVAR 2
103280: PUSH
103281: EMPTY
103282: LIST
103283: LIST
103284: PPUSH
103285: CALL_OW 69
103289: PPUSH
103290: LD_VAR 0 3
103294: PPUSH
103295: CALL_OW 74
103299: PPUSH
103300: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
103304: LD_VAR 0 2
103308: PUSH
103309: LD_INT 60
103311: GREATER
103312: PUSH
103313: LD_VAR 0 3
103317: PPUSH
103318: CALL_OW 301
103322: OR
103323: IFFALSE 103234
// if un then
103325: LD_VAR 0 3
103329: IFFALSE 103340
// RemoveUnit ( un ) ;
103331: LD_VAR 0 3
103335: PPUSH
103336: CALL_OW 64
// end ; end_of_file
103340: PPOPN 3
103342: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
103343: LD_INT 0
103345: PPUSH
103346: PPUSH
103347: PPUSH
103348: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
103349: LD_VAR 0 1
103353: PPUSH
103354: CALL_OW 264
103358: PUSH
103359: LD_EXP 33
103363: EQUAL
103364: IFFALSE 103436
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
103366: LD_INT 68
103368: PPUSH
103369: LD_VAR 0 1
103373: PPUSH
103374: CALL_OW 255
103378: PPUSH
103379: CALL_OW 321
103383: PUSH
103384: LD_INT 2
103386: EQUAL
103387: IFFALSE 103399
// eff := 70 else
103389: LD_ADDR_VAR 0 6
103393: PUSH
103394: LD_INT 70
103396: ST_TO_ADDR
103397: GO 103407
// eff := 30 ;
103399: LD_ADDR_VAR 0 6
103403: PUSH
103404: LD_INT 30
103406: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
103407: LD_VAR 0 1
103411: PPUSH
103412: CALL_OW 250
103416: PPUSH
103417: LD_VAR 0 1
103421: PPUSH
103422: CALL_OW 251
103426: PPUSH
103427: LD_VAR 0 6
103431: PPUSH
103432: CALL_OW 495
// end ; end ;
103436: LD_VAR 0 4
103440: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
103441: LD_INT 0
103443: PPUSH
103444: PPUSH
103445: PPUSH
103446: PPUSH
103447: PPUSH
103448: PPUSH
// if cmd = 124 then
103449: LD_VAR 0 1
103453: PUSH
103454: LD_INT 124
103456: EQUAL
103457: IFFALSE 103663
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
103459: LD_ADDR_VAR 0 5
103463: PUSH
103464: LD_INT 2
103466: PUSH
103467: LD_INT 34
103469: PUSH
103470: LD_INT 53
103472: PUSH
103473: EMPTY
103474: LIST
103475: LIST
103476: PUSH
103477: LD_INT 34
103479: PUSH
103480: LD_INT 14
103482: PUSH
103483: EMPTY
103484: LIST
103485: LIST
103486: PUSH
103487: EMPTY
103488: LIST
103489: LIST
103490: LIST
103491: PPUSH
103492: CALL_OW 69
103496: ST_TO_ADDR
// if not tmp then
103497: LD_VAR 0 5
103501: NOT
103502: IFFALSE 103506
// exit ;
103504: GO 103663
// for i in tmp do
103506: LD_ADDR_VAR 0 3
103510: PUSH
103511: LD_VAR 0 5
103515: PUSH
103516: FOR_IN
103517: IFFALSE 103661
// begin taskList := GetTaskList ( i ) ;
103519: LD_ADDR_VAR 0 6
103523: PUSH
103524: LD_VAR 0 3
103528: PPUSH
103529: CALL_OW 437
103533: ST_TO_ADDR
// if not taskList then
103534: LD_VAR 0 6
103538: NOT
103539: IFFALSE 103543
// continue ;
103541: GO 103516
// for j = 1 to taskList do
103543: LD_ADDR_VAR 0 4
103547: PUSH
103548: DOUBLE
103549: LD_INT 1
103551: DEC
103552: ST_TO_ADDR
103553: LD_VAR 0 6
103557: PUSH
103558: FOR_TO
103559: IFFALSE 103657
// if taskList [ j ] [ 1 ] = | then
103561: LD_VAR 0 6
103565: PUSH
103566: LD_VAR 0 4
103570: ARRAY
103571: PUSH
103572: LD_INT 1
103574: ARRAY
103575: PUSH
103576: LD_STRING |
103578: EQUAL
103579: IFFALSE 103655
// begin _taskList := Delete ( taskList , 1 ) ;
103581: LD_ADDR_VAR 0 7
103585: PUSH
103586: LD_VAR 0 6
103590: PPUSH
103591: LD_INT 1
103593: PPUSH
103594: CALL_OW 3
103598: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
103599: LD_VAR 0 3
103603: PPUSH
103604: LD_VAR 0 7
103608: PPUSH
103609: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
103613: LD_VAR 0 3
103617: PPUSH
103618: LD_VAR 0 6
103622: PUSH
103623: LD_VAR 0 4
103627: ARRAY
103628: PUSH
103629: LD_INT 2
103631: ARRAY
103632: PPUSH
103633: LD_VAR 0 6
103637: PUSH
103638: LD_VAR 0 4
103642: ARRAY
103643: PUSH
103644: LD_INT 3
103646: ARRAY
103647: PPUSH
103648: LD_INT 8
103650: PPUSH
103651: CALL 103668 0 4
// end ;
103655: GO 103558
103657: POP
103658: POP
// end ;
103659: GO 103516
103661: POP
103662: POP
// end ; end ;
103663: LD_VAR 0 2
103667: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
103668: LD_INT 0
103670: PPUSH
103671: PPUSH
103672: PPUSH
103673: PPUSH
103674: PPUSH
103675: PPUSH
103676: PPUSH
103677: PPUSH
103678: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
103679: LD_VAR 0 1
103683: NOT
103684: PUSH
103685: LD_VAR 0 2
103689: PPUSH
103690: LD_VAR 0 3
103694: PPUSH
103695: CALL_OW 488
103699: NOT
103700: OR
103701: PUSH
103702: LD_VAR 0 4
103706: NOT
103707: OR
103708: IFFALSE 103712
// exit ;
103710: GO 104052
// list := [ ] ;
103712: LD_ADDR_VAR 0 13
103716: PUSH
103717: EMPTY
103718: ST_TO_ADDR
// if x - r < 0 then
103719: LD_VAR 0 2
103723: PUSH
103724: LD_VAR 0 4
103728: MINUS
103729: PUSH
103730: LD_INT 0
103732: LESS
103733: IFFALSE 103745
// min_x := 0 else
103735: LD_ADDR_VAR 0 7
103739: PUSH
103740: LD_INT 0
103742: ST_TO_ADDR
103743: GO 103761
// min_x := x - r ;
103745: LD_ADDR_VAR 0 7
103749: PUSH
103750: LD_VAR 0 2
103754: PUSH
103755: LD_VAR 0 4
103759: MINUS
103760: ST_TO_ADDR
// if y - r < 0 then
103761: LD_VAR 0 3
103765: PUSH
103766: LD_VAR 0 4
103770: MINUS
103771: PUSH
103772: LD_INT 0
103774: LESS
103775: IFFALSE 103787
// min_y := 0 else
103777: LD_ADDR_VAR 0 8
103781: PUSH
103782: LD_INT 0
103784: ST_TO_ADDR
103785: GO 103803
// min_y := y - r ;
103787: LD_ADDR_VAR 0 8
103791: PUSH
103792: LD_VAR 0 3
103796: PUSH
103797: LD_VAR 0 4
103801: MINUS
103802: ST_TO_ADDR
// max_x := x + r ;
103803: LD_ADDR_VAR 0 9
103807: PUSH
103808: LD_VAR 0 2
103812: PUSH
103813: LD_VAR 0 4
103817: PLUS
103818: ST_TO_ADDR
// max_y := y + r ;
103819: LD_ADDR_VAR 0 10
103823: PUSH
103824: LD_VAR 0 3
103828: PUSH
103829: LD_VAR 0 4
103833: PLUS
103834: ST_TO_ADDR
// for _x = min_x to max_x do
103835: LD_ADDR_VAR 0 11
103839: PUSH
103840: DOUBLE
103841: LD_VAR 0 7
103845: DEC
103846: ST_TO_ADDR
103847: LD_VAR 0 9
103851: PUSH
103852: FOR_TO
103853: IFFALSE 103970
// for _y = min_y to max_y do
103855: LD_ADDR_VAR 0 12
103859: PUSH
103860: DOUBLE
103861: LD_VAR 0 8
103865: DEC
103866: ST_TO_ADDR
103867: LD_VAR 0 10
103871: PUSH
103872: FOR_TO
103873: IFFALSE 103966
// begin if not ValidHex ( _x , _y ) then
103875: LD_VAR 0 11
103879: PPUSH
103880: LD_VAR 0 12
103884: PPUSH
103885: CALL_OW 488
103889: NOT
103890: IFFALSE 103894
// continue ;
103892: GO 103872
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
103894: LD_VAR 0 11
103898: PPUSH
103899: LD_VAR 0 12
103903: PPUSH
103904: CALL_OW 351
103908: PUSH
103909: LD_VAR 0 11
103913: PPUSH
103914: LD_VAR 0 12
103918: PPUSH
103919: CALL_OW 554
103923: AND
103924: IFFALSE 103964
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
103926: LD_ADDR_VAR 0 13
103930: PUSH
103931: LD_VAR 0 13
103935: PPUSH
103936: LD_VAR 0 13
103940: PUSH
103941: LD_INT 1
103943: PLUS
103944: PPUSH
103945: LD_VAR 0 11
103949: PUSH
103950: LD_VAR 0 12
103954: PUSH
103955: EMPTY
103956: LIST
103957: LIST
103958: PPUSH
103959: CALL_OW 2
103963: ST_TO_ADDR
// end ;
103964: GO 103872
103966: POP
103967: POP
103968: GO 103852
103970: POP
103971: POP
// if not list then
103972: LD_VAR 0 13
103976: NOT
103977: IFFALSE 103981
// exit ;
103979: GO 104052
// for i in list do
103981: LD_ADDR_VAR 0 6
103985: PUSH
103986: LD_VAR 0 13
103990: PUSH
103991: FOR_IN
103992: IFFALSE 104050
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
103994: LD_VAR 0 1
103998: PPUSH
103999: LD_STRING M
104001: PUSH
104002: LD_VAR 0 6
104006: PUSH
104007: LD_INT 1
104009: ARRAY
104010: PUSH
104011: LD_VAR 0 6
104015: PUSH
104016: LD_INT 2
104018: ARRAY
104019: PUSH
104020: LD_INT 0
104022: PUSH
104023: LD_INT 0
104025: PUSH
104026: LD_INT 0
104028: PUSH
104029: LD_INT 0
104031: PUSH
104032: EMPTY
104033: LIST
104034: LIST
104035: LIST
104036: LIST
104037: LIST
104038: LIST
104039: LIST
104040: PUSH
104041: EMPTY
104042: LIST
104043: PPUSH
104044: CALL_OW 447
104048: GO 103991
104050: POP
104051: POP
// end ;
104052: LD_VAR 0 5
104056: RET
