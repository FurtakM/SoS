// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 623 0 0
// SetDiplomacy ;
  35: CALL 835 0 0
// PrepareGame ;
  39: CALL 917 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// if not Difficulty or debug then
  76: LD_OWVAR 67
  80: NOT
  81: PUSH
  82: LD_EXP 1
  86: OR
  87: IFFALSE 97
// Difficulty := 2 ;
  89: LD_ADDR_OWVAR 67
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
  97: LD_ADDR_EXP 23
 101: PUSH
 102: LD_INT 1
 104: PPUSH
 105: CALL_OW 426
 109: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 110: LD_ADDR_EXP 24
 114: PUSH
 115: LD_INT 2
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 123: LD_ADDR_EXP 26
 127: PUSH
 128: LD_INT 3
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not cratesSpawn then
 136: LD_EXP 26
 140: NOT
 141: IFFALSE 151
// cratesSpawn := 2 ;
 143: LD_ADDR_EXP 26
 147: PUSH
 148: LD_INT 2
 150: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 151: LD_ADDR_EXP 25
 155: PUSH
 156: LD_INT 4
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// if not commander then
 164: LD_EXP 25
 168: NOT
 169: IFFALSE 179
// commander := 3 ;
 171: LD_ADDR_EXP 25
 175: PUSH
 176: LD_INT 3
 178: ST_TO_ADDR
// if not debug then
 179: LD_EXP 1
 183: NOT
 184: IFFALSE 188
// exit ;
 186: GO 245
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 188: LD_ADDR_OWVAR 47
 192: PUSH
 193: LD_STRING Difficulty: 
 195: PUSH
 196: LD_OWVAR 67
 200: STR
 201: PUSH
 202: LD_STRING sibBomb: 
 204: PUSH
 205: LD_EXP 23
 209: STR
 210: PUSH
 211: LD_STRING reinforceAllowed: 
 213: PUSH
 214: LD_EXP 24
 218: STR
 219: PUSH
 220: LD_STRING cratesSpawn: 
 222: PUSH
 223: LD_EXP 26
 227: STR
 228: PUSH
 229: LD_STRING commander: 
 231: PUSH
 232: LD_EXP 25
 236: STR
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// end ;
 245: LD_VAR 0 1
 249: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 250: LD_EXP 3
 254: PUSH
 255: LD_EXP 2
 259: PUSH
 260: LD_INT 1
 262: EQUAL
 263: AND
 264: PUSH
 265: LD_EXP 4
 269: NOT
 270: AND
 271: IFFALSE 294
 273: GO 275
 275: DISABLE
// begin enable ;
 276: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 277: LD_ADDR_OWVAR 47
 281: PUSH
 282: LD_STRING #SkrTime
 284: PUSH
 285: LD_OWVAR 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: ST_TO_ADDR
// end ;
 294: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 295: LD_EXP 19
 299: PUSH
 300: LD_EXP 3
 304: AND
 305: PUSH
 306: LD_EXP 2
 310: PUSH
 311: LD_INT 1
 313: EQUAL
 314: AND
 315: IFFALSE 376
 317: GO 319
 319: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 320: LD_EXP 19
 324: PUSH
 325: LD_INT 1
 327: ARRAY
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: LD_EXP 19
 337: PUSH
 338: LD_INT 1
 340: ARRAY
 341: PUSH
 342: LD_INT 2
 344: ARRAY
 345: PPUSH
 346: LD_EXP 19
 350: PUSH
 351: LD_INT 1
 353: ARRAY
 354: PUSH
 355: LD_INT 3
 357: ARRAY
 358: PPUSH
 359: LD_EXP 19
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PUSH
 368: LD_INT 4
 370: ARRAY
 371: PPUSH
 372: CALL 60924 0 4
 376: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 377: LD_EXP 19
 381: PUSH
 382: LD_EXP 3
 386: AND
 387: PUSH
 388: LD_EXP 2
 392: PUSH
 393: LD_INT 1
 395: EQUAL
 396: AND
 397: IFFALSE 458
 399: GO 401
 401: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 402: LD_EXP 19
 406: PUSH
 407: LD_INT 2
 409: ARRAY
 410: PUSH
 411: LD_INT 1
 413: ARRAY
 414: PPUSH
 415: LD_EXP 19
 419: PUSH
 420: LD_INT 2
 422: ARRAY
 423: PUSH
 424: LD_INT 2
 426: ARRAY
 427: PPUSH
 428: LD_EXP 19
 432: PUSH
 433: LD_INT 2
 435: ARRAY
 436: PUSH
 437: LD_INT 3
 439: ARRAY
 440: PPUSH
 441: LD_EXP 19
 445: PUSH
 446: LD_INT 2
 448: ARRAY
 449: PUSH
 450: LD_INT 4
 452: ARRAY
 453: PPUSH
 454: CALL 60924 0 4
 458: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 459: LD_EXP 19
 463: PUSH
 464: LD_EXP 3
 468: AND
 469: PUSH
 470: LD_EXP 2
 474: PUSH
 475: LD_INT 1
 477: EQUAL
 478: AND
 479: IFFALSE 540
 481: GO 483
 483: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 484: LD_EXP 19
 488: PUSH
 489: LD_INT 3
 491: ARRAY
 492: PUSH
 493: LD_INT 1
 495: ARRAY
 496: PPUSH
 497: LD_EXP 19
 501: PUSH
 502: LD_INT 3
 504: ARRAY
 505: PUSH
 506: LD_INT 2
 508: ARRAY
 509: PPUSH
 510: LD_EXP 19
 514: PUSH
 515: LD_INT 3
 517: ARRAY
 518: PUSH
 519: LD_INT 3
 521: ARRAY
 522: PPUSH
 523: LD_EXP 19
 527: PUSH
 528: LD_INT 3
 530: ARRAY
 531: PUSH
 532: LD_INT 4
 534: ARRAY
 535: PPUSH
 536: CALL 60924 0 4
 540: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 541: LD_EXP 19
 545: PUSH
 546: LD_EXP 3
 550: AND
 551: PUSH
 552: LD_EXP 2
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: AND
 561: IFFALSE 622
 563: GO 565
 565: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 566: LD_EXP 19
 570: PUSH
 571: LD_INT 4
 573: ARRAY
 574: PUSH
 575: LD_INT 1
 577: ARRAY
 578: PPUSH
 579: LD_EXP 19
 583: PUSH
 584: LD_INT 4
 586: ARRAY
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_EXP 19
 596: PUSH
 597: LD_INT 4
 599: ARRAY
 600: PUSH
 601: LD_INT 3
 603: ARRAY
 604: PPUSH
 605: LD_EXP 19
 609: PUSH
 610: LD_INT 4
 612: ARRAY
 613: PUSH
 614: LD_INT 4
 616: ARRAY
 617: PPUSH
 618: CALL 60924 0 4
 622: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 623: LD_INT 0
 625: PPUSH
 626: PPUSH
 627: PPUSH
 628: PPUSH
 629: PPUSH
// if GameType = 1 then
 630: LD_EXP 2
 634: PUSH
 635: LD_INT 1
 637: EQUAL
 638: IFFALSE 707
// begin ban_techs := [ ] ;
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: EMPTY
 646: ST_TO_ADDR
// if sibBombAllowed < 2 then
 647: LD_EXP 23
 651: PUSH
 652: LD_INT 2
 654: LESS
 655: IFFALSE 668
// ban_techs := [ tech_sibFiss ] ;
 657: LD_ADDR_VAR 0 4
 661: PUSH
 662: LD_INT 25
 664: PUSH
 665: EMPTY
 666: LIST
 667: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 668: LD_ADDR_VAR 0 5
 672: PUSH
 673: LD_INT 46
 675: PUSH
 676: LD_INT 47
 678: PUSH
 679: LD_INT 48
 681: PUSH
 682: LD_INT 49
 684: PUSH
 685: LD_INT 50
 687: PUSH
 688: LD_INT 39
 690: PUSH
 691: LD_INT 69
 693: PUSH
 694: LD_INT 40
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// end ; for i = 1 to 8 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 8
 719: PUSH
 720: FOR_TO
 721: IFFALSE 805
// begin if res_techs then
 723: LD_VAR 0 5
 727: IFFALSE 763
// for j in res_techs do
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_VAR 0 5
 738: PUSH
 739: FOR_IN
 740: IFFALSE 761
// SetTech ( j , i , state_researched ) ;
 742: LD_VAR 0 3
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 2
 754: PPUSH
 755: CALL_OW 322
 759: GO 739
 761: POP
 762: POP
// if ban_techs then
 763: LD_VAR 0 4
 767: IFFALSE 803
// for j in ban_techs do
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: PUSH
 779: FOR_IN
 780: IFFALSE 801
// SetTech ( j , i , state_disabled ) ;
 782: LD_VAR 0 3
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 322
 799: GO 779
 801: POP
 802: POP
// end ;
 803: GO 720
 805: POP
 806: POP
// if sibBombAllowed = 1 then
 807: LD_EXP 23
 811: PUSH
 812: LD_INT 1
 814: EQUAL
 815: IFFALSE 830
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 817: LD_INT 25
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL_OW 322
// end ;
 830: LD_VAR 0 1
 834: RET
// export function SetDiplomacy ; begin
 835: LD_INT 0
 837: PPUSH
// if GameType = 1 then
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: EQUAL
 846: IFFALSE 912
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 4
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 864: LD_INT 3
 866: PPUSH
 867: LD_INT 6
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 880: LD_INT 3
 882: PPUSH
 883: LD_INT 8
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 896: LD_INT 6
 898: PPUSH
 899: LD_INT 8
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 1
 907: PPUSH
 908: CALL_OW 80
// end ; end ;
 912: LD_VAR 0 1
 916: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
// if GameType = 1 then
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 1
 930: EQUAL
 931: IFFALSE 1423
// begin game := false ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_INT 0
 940: ST_TO_ADDR
// your_side := 1 ;
 941: LD_ADDR_OWVAR 2
 945: PUSH
 946: LD_INT 1
 948: ST_TO_ADDR
// mc_amer := 1 ;
 949: LD_ADDR_EXP 5
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// mc_leg := 2 ;
 957: LD_ADDR_EXP 6
 961: PUSH
 962: LD_INT 2
 964: ST_TO_ADDR
// mc_rus_1 := 3 ;
 965: LD_ADDR_EXP 7
 969: PUSH
 970: LD_INT 3
 972: ST_TO_ADDR
// mc_rus_2 := 4 ;
 973: LD_ADDR_EXP 8
 977: PUSH
 978: LD_INT 4
 980: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 981: LD_ADDR_EXP 19
 985: PUSH
 986: LD_INT 5
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 200
 997: PUSH
 998: LD_INT 250
1000: PUSH
1001: LD_INT 300
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 26
1013: ARRAY
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 8
1026: PUSH
1027: LD_INT 50
1029: PUSH
1030: LD_INT 500
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: PUSH
1039: LD_INT 17
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 50
1047: PUSH
1048: LD_INT 300
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 18
1059: PUSH
1060: LD_INT 4
1062: PUSH
1063: LD_INT 5
1065: PUSH
1066: LD_INT 6
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 26
1078: ARRAY
1079: PUSH
1080: LD_INT 30
1082: PUSH
1083: LD_INT 300
1085: PUSH
1086: LD_INT 450
1088: PUSH
1089: LD_INT 500
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 26
1101: ARRAY
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_INT 190
1122: PUSH
1123: LD_INT 193
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 182
1136: PUSH
1137: LD_INT 117
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 43
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 114
1164: PUSH
1165: LD_INT 152
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 85
1178: PUSH
1179: LD_INT 38
1181: PUSH
1182: LD_INT 2
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// for i in sources do
1197: LD_ADDR_VAR 0 2
1201: PUSH
1202: LD_VAR 0 4
1206: PUSH
1207: FOR_IN
1208: IFFALSE 1243
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1210: LD_VAR 0 2
1214: PUSH
1215: LD_INT 1
1217: ARRAY
1218: PPUSH
1219: LD_VAR 0 2
1223: PUSH
1224: LD_INT 2
1226: ARRAY
1227: PPUSH
1228: LD_VAR 0 2
1232: PUSH
1233: LD_INT 3
1235: ARRAY
1236: PPUSH
1237: CALL_OW 62
1241: GO 1207
1243: POP
1244: POP
// disableGlobalTimer := false ;
1245: LD_ADDR_EXP 4
1249: PUSH
1250: LD_INT 0
1252: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1253: LD_ADDR_EXP 15
1257: PUSH
1258: LD_INT 0
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 7
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PUSH
1275: LD_OWVAR 67
1279: ARRAY
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: ST_TO_ADDR
// ruOutpost := [ ] ;
1285: LD_ADDR_EXP 14
1289: PUSH
1290: EMPTY
1291: ST_TO_ADDR
// staticMines := [ ] ;
1292: LD_ADDR_EXP 16
1296: PUSH
1297: EMPTY
1298: ST_TO_ADDR
// baseCaptured := false ;
1299: LD_ADDR_EXP 17
1303: PUSH
1304: LD_INT 0
1306: ST_TO_ADDR
// legDestCounter := 0 ;
1307: LD_ADDR_EXP 18
1311: PUSH
1312: LD_INT 0
1314: ST_TO_ADDR
// legOfferAccepted := false ;
1315: LD_ADDR_EXP 20
1319: PUSH
1320: LD_INT 0
1322: ST_TO_ADDR
// legChangeSide := false ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: LD_INT 0
1330: ST_TO_ADDR
// allyDestCounter := 0 ;
1331: LD_ADDR_EXP 22
1335: PUSH
1336: LD_INT 0
1338: ST_TO_ADDR
// outpostEscape := false ;
1339: LD_ADDR_EXP 27
1343: PUSH
1344: LD_INT 0
1346: ST_TO_ADDR
// dialogueMineDetected := false ;
1347: LD_ADDR_EXP 28
1351: PUSH
1352: LD_INT 0
1354: ST_TO_ADDR
// PrepareAmericans ;
1355: CALL 7239 0 0
// PrepareLegion ;
1359: CALL 5504 0 0
// PrepareRussians ;
1363: CALL 2470 0 0
// playerForces := PreparePlayer ;
1367: LD_ADDR_EXP 10
1371: PUSH
1372: CALL 8482 0 0
1376: ST_TO_ADDR
// AnimateTrees ( true ) ;
1377: LD_INT 1
1379: PPUSH
1380: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 3
1389: PPUSH
1390: LD_INT 8
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 53672 0 9
// MC_Start ;
1415: CALL 63976 0 0
// Action ;
1419: CALL 10678 0 0
// end ; end ;
1423: LD_VAR 0 1
1427: RET
// export function CustomInitMacro ; begin
1428: LD_INT 0
1430: PPUSH
// if GameType <> 1 then
1431: LD_EXP 2
1435: PUSH
1436: LD_INT 1
1438: NONEQUAL
1439: IFFALSE 1443
// exit ;
1441: GO 2465
// MC_SetScanArea ( mc_amer , amerBase ) ;
1443: LD_EXP 5
1447: PPUSH
1448: LD_INT 3
1450: PPUSH
1451: CALL 86295 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1455: LD_EXP 5
1459: PPUSH
1460: LD_INT 4
1462: PPUSH
1463: CALL 86239 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1467: LD_EXP 5
1471: PPUSH
1472: LD_INT 11
1474: PUSH
1475: LD_INT 6
1477: PUSH
1478: LD_INT 7
1480: PUSH
1481: LD_INT 9
1483: PUSH
1484: LD_INT 10
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: PPUSH
1494: CALL 86127 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1498: LD_EXP 5
1502: PPUSH
1503: LD_INT 5
1505: PPUSH
1506: CALL 85809 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1510: LD_EXP 5
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL 85540 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1522: LD_EXP 5
1526: PPUSH
1527: LD_INT 4
1529: PPUSH
1530: CALL 85222 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1534: LD_EXP 5
1538: PPUSH
1539: LD_INT 3
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: LD_INT 2
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 3
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 9
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 7
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 6
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL 85037 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 33
1628: PUSH
1629: LD_INT 114
1631: PUSH
1632: LD_INT 16
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_INT 32
1646: PUSH
1647: LD_INT 110
1649: PUSH
1650: LD_INT 12
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL 84929 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1670: LD_EXP 5
1674: PPUSH
1675: LD_INT 10
1677: PUSH
1678: LD_INT 15
1680: PUSH
1681: LD_INT 12
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL 85716 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1697: LD_EXP 6
1701: PPUSH
1702: LD_INT 6
1704: PPUSH
1705: CALL 86295 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1709: LD_EXP 6
1713: PPUSH
1714: LD_INT 7
1716: PPUSH
1717: CALL 86239 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1721: LD_EXP 6
1725: PPUSH
1726: LD_INT 30
1728: PUSH
1729: LD_INT 27
1731: PUSH
1732: LD_INT 28
1734: PUSH
1735: LD_INT 25
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PPUSH
1744: CALL 86127 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1748: LD_EXP 6
1752: PPUSH
1753: LD_INT 17
1755: PPUSH
1756: CALL 85809 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1760: LD_EXP 6
1764: PPUSH
1765: LD_INT 6
1767: PPUSH
1768: CALL 85540 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1772: LD_EXP 6
1776: PPUSH
1777: LD_INT 5
1779: PPUSH
1780: CALL 85222 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1784: LD_EXP 6
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 9
1794: PPUSH
1795: CALL 84719 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1799: LD_EXP 6
1803: PPUSH
1804: LD_INT 4
1806: PUSH
1807: LD_INT 157
1809: PUSH
1810: LD_INT 144
1812: PUSH
1813: LD_INT 0
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 32
1824: PUSH
1825: LD_INT 151
1827: PUSH
1828: LD_INT 142
1830: PUSH
1831: LD_INT 0
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 32
1842: PUSH
1843: LD_INT 161
1845: PUSH
1846: LD_INT 145
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 32
1860: PUSH
1861: LD_INT 140
1863: PUSH
1864: LD_INT 133
1866: PUSH
1867: LD_INT 0
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL 84929 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1886: LD_EXP 6
1890: PPUSH
1891: LD_INT 13
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 1
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 13
1911: PUSH
1912: LD_INT 2
1914: PUSH
1915: LD_INT 1
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 13
1929: PUSH
1930: LD_INT 1
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: LD_INT 27
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 13
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: LD_INT 2
1953: PUSH
1954: LD_INT 27
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 13
1965: PUSH
1966: LD_INT 1
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 27
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 13
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 2
1989: PUSH
1990: LD_INT 28
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 13
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 2
2007: PUSH
2008: LD_INT 28
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 13
2019: PUSH
2020: LD_INT 1
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL 85037 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2049: LD_EXP 7
2053: PPUSH
2054: LD_INT 15
2056: PPUSH
2057: CALL 86295 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2061: LD_EXP 7
2065: PPUSH
2066: LD_INT 16
2068: PPUSH
2069: CALL 86239 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2073: LD_EXP 7
2077: PPUSH
2078: LD_INT 43
2080: PUSH
2081: LD_INT 47
2083: PUSH
2084: LD_INT 45
2086: PUSH
2087: LD_INT 49
2089: PUSH
2090: LD_INT 46
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 86127 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2104: LD_EXP 7
2108: PPUSH
2109: LD_INT 13
2111: PPUSH
2112: CALL 85809 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2116: LD_EXP 7
2120: PPUSH
2121: LD_INT 15
2123: PPUSH
2124: CALL 85540 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2128: LD_EXP 7
2132: PPUSH
2133: LD_INT 5
2135: PPUSH
2136: CALL 85222 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2140: LD_EXP 7
2144: PPUSH
2145: LD_INT 23
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 3
2153: PUSH
2154: LD_INT 46
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 23
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 46
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 23
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: LD_INT 45
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 23
2201: PUSH
2202: LD_INT 1
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 47
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 21
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: LD_INT 51
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL 85037 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2246: LD_EXP 8
2250: PPUSH
2251: LD_INT 11
2253: PPUSH
2254: CALL 86295 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2258: LD_EXP 8
2262: PPUSH
2263: LD_INT 12
2265: PPUSH
2266: CALL 86239 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2270: LD_EXP 8
2274: PPUSH
2275: LD_INT 43
2277: PUSH
2278: LD_INT 47
2280: PUSH
2281: LD_INT 45
2283: PUSH
2284: LD_INT 49
2286: PUSH
2287: LD_INT 46
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 86127 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 13
2308: PPUSH
2309: CALL 85809 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 11
2320: PPUSH
2321: CALL 85540 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL 85222 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2337: LD_EXP 8
2341: PPUSH
2342: LD_INT 115
2344: PUSH
2345: LD_INT 201
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: PPUSH
2355: CALL 85865 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , ] ) ;
2359: LD_EXP 8
2363: PPUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: LD_INT 46
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 24
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: LD_INT 46
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 24
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: LD_INT 3
2408: PUSH
2409: LD_INT 46
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 24
2420: PUSH
2421: LD_INT 1
2423: PUSH
2424: LD_INT 3
2426: PUSH
2427: LD_INT 46
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 24
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: LD_INT 46
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: PPUSH
2461: CALL 85037 0 2
// end ;
2465: LD_VAR 0 1
2469: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2470: LD_INT 0
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2480: LD_INT 0
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: LD_INT 3
2488: PPUSH
2489: LD_INT 0
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: LD_INT 14
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL 53672 0 9
// side := 3 ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2519: LD_INT 38
2521: PPUSH
2522: LD_VAR 0 5
2526: PPUSH
2527: LD_INT 2
2529: PPUSH
2530: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2534: LD_INT 39
2536: PPUSH
2537: LD_VAR 0 5
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2549: LD_INT 34
2551: PPUSH
2552: LD_VAR 0 5
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2564: LD_ADDR_VAR 0 4
2568: PUSH
2569: LD_INT 0
2571: PUSH
2572: LD_INT 208
2574: PUSH
2575: LD_INT 163
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 194
2600: PUSH
2601: LD_INT 161
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: LD_INT 0
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 17
2623: PUSH
2624: LD_INT 190
2626: PUSH
2627: LD_INT 161
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: LD_INT 0
2635: PUSH
2636: LD_INT 0
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: LD_INT 200
2652: PUSH
2653: LD_INT 145
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 0
2661: PUSH
2662: LD_INT 0
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 32
2675: PUSH
2676: LD_INT 192
2678: PUSH
2679: LD_INT 144
2681: PUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 0
2687: PUSH
2688: LD_INT 0
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 26
2701: PUSH
2702: LD_INT 216
2704: PUSH
2705: LD_INT 172
2707: PUSH
2708: LD_INT 3
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: LD_INT 0
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 26
2727: PUSH
2728: LD_INT 218
2730: PUSH
2731: LD_INT 176
2733: PUSH
2734: LD_INT 3
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 0
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 29
2753: PUSH
2754: LD_INT 182
2756: PUSH
2757: LD_INT 149
2759: PUSH
2760: LD_INT 3
2762: PUSH
2763: LD_INT 0
2765: PUSH
2766: LD_INT 0
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 8
2779: PUSH
2780: LD_INT 201
2782: PUSH
2783: LD_INT 171
2785: PUSH
2786: LD_INT 0
2788: PUSH
2789: LD_INT 10
2791: PUSH
2792: LD_INT 11
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 32
2805: PUSH
2806: LD_INT 188
2808: PUSH
2809: LD_INT 167
2811: PUSH
2812: LD_INT 0
2814: PUSH
2815: LD_INT 0
2817: PUSH
2818: LD_INT 0
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 32
2831: PUSH
2832: LD_INT 202
2834: PUSH
2835: LD_INT 179
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 32
2857: PUSH
2858: LD_INT 209
2860: PUSH
2861: LD_INT 182
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: LD_INT 0
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 32
2883: PUSH
2884: LD_INT 220
2886: PUSH
2887: LD_INT 183
2889: PUSH
2890: LD_INT 5
2892: PUSH
2893: LD_INT 0
2895: PUSH
2896: LD_INT 0
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 32
2909: PUSH
2910: LD_INT 225
2912: PUSH
2913: LD_INT 181
2915: PUSH
2916: LD_INT 5
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: LD_INT 0
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 26
2935: PUSH
2936: LD_INT 220
2938: PUSH
2939: LD_INT 174
2941: PUSH
2942: LD_INT 5
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: LD_INT 0
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: LD_INT 84
2964: PUSH
2965: LD_INT 128
2967: PUSH
2968: LD_INT 4
2970: PUSH
2971: LD_INT 0
2973: PUSH
2974: LD_INT 0
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 3
2987: PUSH
2988: LD_INT 68
2990: PUSH
2991: LD_INT 121
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 0
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 19
3013: PUSH
3014: LD_INT 72
3016: PUSH
3017: LD_INT 125
3019: PUSH
3020: LD_INT 5
3022: PUSH
3023: LD_INT 0
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 18
3039: PUSH
3040: LD_INT 68
3042: PUSH
3043: LD_INT 124
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: LD_INT 0
3051: PUSH
3052: LD_INT 0
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 24
3065: PUSH
3066: LD_INT 64
3068: PUSH
3069: LD_INT 121
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: LD_INT 0
3077: PUSH
3078: LD_INT 0
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 17
3091: PUSH
3092: LD_INT 65
3094: PUSH
3095: LD_INT 118
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 0
3103: PUSH
3104: LD_INT 0
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: PUSH
3115: LD_INT 21
3117: PUSH
3118: LD_INT 68
3120: PUSH
3121: LD_INT 117
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 0
3129: PUSH
3130: LD_INT 0
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 8
3143: PUSH
3144: LD_INT 68
3146: PUSH
3147: LD_INT 130
3149: PUSH
3150: LD_INT 1
3152: PUSH
3153: LD_INT 14
3155: PUSH
3156: LD_INT 10
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 8
3169: PUSH
3170: LD_INT 67
3172: PUSH
3173: LD_INT 110
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: LD_INT 11
3181: PUSH
3182: LD_INT 12
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 28
3195: PUSH
3196: LD_INT 85
3198: PUSH
3199: LD_INT 108
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 0
3207: PUSH
3208: LD_INT 0
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 28
3221: PUSH
3222: LD_INT 85
3224: PUSH
3225: LD_INT 124
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 0
3233: PUSH
3234: LD_INT 0
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 97
3250: PUSH
3251: LD_INT 119
3253: PUSH
3254: LD_INT 2
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 0
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 5
3273: PUSH
3274: LD_INT 111
3276: PUSH
3277: LD_INT 138
3279: PUSH
3280: LD_INT 4
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 33
3299: PUSH
3300: LD_INT 104
3302: PUSH
3303: LD_INT 130
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 0
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 33
3325: PUSH
3326: LD_INT 110
3328: PUSH
3329: LD_INT 142
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 0
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 33
3351: PUSH
3352: LD_INT 91
3354: PUSH
3355: LD_INT 131
3357: PUSH
3358: LD_INT 5
3360: PUSH
3361: LD_INT 0
3363: PUSH
3364: LD_INT 0
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 33
3377: PUSH
3378: LD_INT 107
3380: PUSH
3381: LD_INT 157
3383: PUSH
3384: LD_INT 5
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: LD_INT 0
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 33
3403: PUSH
3404: LD_INT 104
3406: PUSH
3407: LD_INT 160
3409: PUSH
3410: LD_INT 5
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: LD_INT 0
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 33
3429: PUSH
3430: LD_INT 101
3432: PUSH
3433: LD_INT 162
3435: PUSH
3436: LD_INT 5
3438: PUSH
3439: LD_INT 0
3441: PUSH
3442: LD_INT 0
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 32
3455: PUSH
3456: LD_INT 87
3458: PUSH
3459: LD_INT 157
3461: PUSH
3462: LD_INT 5
3464: PUSH
3465: LD_INT 0
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: LD_INT 32
3481: PUSH
3482: LD_INT 105
3484: PUSH
3485: LD_INT 158
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: LD_INT 0
3493: PUSH
3494: LD_INT 0
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 33
3507: PUSH
3508: LD_INT 91
3510: PUSH
3511: LD_INT 118
3513: PUSH
3514: LD_INT 4
3516: PUSH
3517: LD_INT 0
3519: PUSH
3520: LD_INT 0
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 33
3533: PUSH
3534: LD_INT 89
3536: PUSH
3537: LD_INT 107
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: LD_INT 0
3545: PUSH
3546: LD_INT 0
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 5
3559: PUSH
3560: LD_INT 86
3562: PUSH
3563: LD_INT 96
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 0
3571: PUSH
3572: LD_INT 0
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 33
3585: PUSH
3586: LD_INT 91
3588: PUSH
3589: LD_INT 102
3591: PUSH
3592: LD_INT 4
3594: PUSH
3595: LD_INT 0
3597: PUSH
3598: LD_INT 0
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 32
3611: PUSH
3612: LD_INT 80
3614: PUSH
3615: LD_INT 95
3617: PUSH
3618: LD_INT 3
3620: PUSH
3621: LD_INT 0
3623: PUSH
3624: LD_INT 0
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 28
3637: PUSH
3638: LD_INT 77
3640: PUSH
3641: LD_INT 105
3643: PUSH
3644: LD_INT 3
3646: PUSH
3647: LD_INT 0
3649: PUSH
3650: LD_INT 0
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 28
3663: PUSH
3664: LD_INT 85
3666: PUSH
3667: LD_INT 113
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: LD_INT 0
3675: PUSH
3676: LD_INT 0
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 28
3689: PUSH
3690: LD_INT 55
3692: PUSH
3693: LD_INT 97
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: LD_INT 0
3701: PUSH
3702: LD_INT 0
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 28
3715: PUSH
3716: LD_INT 88
3718: PUSH
3719: LD_INT 128
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 0
3727: PUSH
3728: LD_INT 0
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: LD_INT 69
3744: PUSH
3745: LD_INT 101
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 0
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 1
3767: PUSH
3768: LD_INT 34
3770: PUSH
3771: LD_INT 23
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 0
3779: PUSH
3780: LD_INT 0
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 8
3793: PUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: LD_INT 11
3805: PUSH
3806: LD_INT 10
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: LD_INT 15
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 14
3831: PUSH
3832: LD_INT 12
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 29
3845: PUSH
3846: LD_INT 55
3848: PUSH
3849: LD_INT 35
3851: PUSH
3852: LD_INT 2
3854: PUSH
3855: LD_INT 0
3857: PUSH
3858: LD_INT 0
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 29
3871: PUSH
3872: LD_INT 24
3874: PUSH
3875: LD_INT 44
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 0
3883: PUSH
3884: LD_INT 0
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 34
3897: PUSH
3898: LD_INT 34
3900: PUSH
3901: LD_INT 32
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 0
3909: PUSH
3910: LD_INT 0
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 3
3923: PUSH
3924: LD_INT 14
3926: PUSH
3927: LD_INT 16
3929: PUSH
3930: LD_INT 1
3932: PUSH
3933: LD_INT 0
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: PUSH
3947: LD_INT 24
3949: PUSH
3950: LD_INT 10
3952: PUSH
3953: LD_INT 16
3955: PUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 0
3961: PUSH
3962: LD_INT 0
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 11
3978: PUSH
3979: LD_INT 13
3981: PUSH
3982: LD_INT 2
3984: PUSH
3985: LD_INT 0
3987: PUSH
3988: LD_INT 0
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 18
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 12
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 0
4013: PUSH
4014: LD_INT 0
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 16
4027: PUSH
4028: LD_INT 14
4030: PUSH
4031: LD_INT 19
4033: PUSH
4034: LD_INT 0
4036: PUSH
4037: LD_INT 0
4039: PUSH
4040: LD_INT 0
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 17
4053: PUSH
4054: LD_INT 18
4056: PUSH
4057: LD_INT 20
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 28
4079: PUSH
4080: LD_INT 10
4082: PUSH
4083: LD_INT 5
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: LD_INT 0
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 28
4105: PUSH
4106: LD_INT 8
4108: PUSH
4109: LD_INT 8
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 0
4117: PUSH
4118: LD_INT 0
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_INT 26
4131: PUSH
4132: LD_INT 19
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: LD_INT 0
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 26
4157: PUSH
4158: LD_INT 30
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: LD_INT 1
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 5
4183: PUSH
4184: LD_INT 59
4186: PUSH
4187: LD_INT 20
4189: PUSH
4190: LD_INT 4
4192: PUSH
4193: LD_INT 0
4195: PUSH
4196: LD_INT 0
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 32
4209: PUSH
4210: LD_INT 60
4212: PUSH
4213: LD_INT 24
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: LD_INT 0
4221: PUSH
4222: LD_INT 0
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 32
4235: PUSH
4236: LD_INT 61
4238: PUSH
4239: LD_INT 45
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 32
4261: PUSH
4262: LD_INT 52
4264: PUSH
4265: LD_INT 51
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: LD_INT 0
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 56
4290: PUSH
4291: LD_INT 51
4293: PUSH
4294: LD_INT 5
4296: PUSH
4297: LD_INT 0
4299: PUSH
4300: LD_INT 0
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 33
4313: PUSH
4314: LD_INT 62
4316: PUSH
4317: LD_INT 49
4319: PUSH
4320: LD_INT 5
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 33
4339: PUSH
4340: LD_INT 41
4342: PUSH
4343: LD_INT 47
4345: PUSH
4346: LD_INT 5
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 33
4365: PUSH
4366: LD_INT 33
4368: PUSH
4369: LD_INT 52
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: LD_INT 0
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 5
4391: PUSH
4392: LD_INT 31
4394: PUSH
4395: LD_INT 40
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: LD_INT 0
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 33
4417: PUSH
4418: LD_INT 65
4420: PUSH
4421: LD_INT 37
4423: PUSH
4424: LD_INT 5
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 33
4443: PUSH
4444: LD_INT 63
4446: PUSH
4447: LD_INT 29
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 0
4455: PUSH
4456: LD_INT 0
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 33
4469: PUSH
4470: LD_INT 54
4472: PUSH
4473: LD_INT 11
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: LD_INT 0
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 33
4495: PUSH
4496: LD_INT 56
4498: PUSH
4499: LD_INT 15
4501: PUSH
4502: LD_INT 4
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 33
4521: PUSH
4522: LD_INT 51
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 4
4530: PUSH
4531: LD_INT 0
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 26
4547: PUSH
4548: LD_INT 39
4550: PUSH
4551: LD_INT 25
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 26
4573: PUSH
4574: LD_INT 37
4576: PUSH
4577: LD_INT 21
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 0
4585: PUSH
4586: LD_INT 0
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 35
4602: PUSH
4603: LD_INT 17
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: LD_INT 0
4611: PUSH
4612: LD_INT 0
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: PUSH
4623: LD_INT 33
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 28
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: LD_INT 0
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 33
4651: PUSH
4652: LD_INT 28
4654: PUSH
4655: LD_INT 46
4657: PUSH
4658: LD_INT 5
4660: PUSH
4661: LD_INT 0
4663: PUSH
4664: LD_INT 0
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 33
4677: PUSH
4678: LD_INT 31
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 4
4686: PUSH
4687: LD_INT 0
4689: PUSH
4690: LD_INT 0
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 26
4703: PUSH
4704: LD_INT 54
4706: PUSH
4707: LD_INT 38
4709: PUSH
4710: LD_INT 4
4712: PUSH
4713: LD_INT 0
4715: PUSH
4716: LD_INT 0
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 33
4729: PUSH
4730: LD_INT 207
4732: PUSH
4733: LD_INT 167
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 0
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 43
4758: PUSH
4759: LD_INT 2
4761: PUSH
4762: LD_INT 4
4764: PUSH
4765: LD_INT 0
4767: PUSH
4768: LD_INT 0
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: ST_TO_ADDR
// for i in tmp do
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_VAR 0 4
4875: PUSH
4876: FOR_IN
4877: IFFALSE 5108
// begin uc_side := side ;
4879: LD_ADDR_OWVAR 20
4883: PUSH
4884: LD_VAR 0 5
4888: ST_TO_ADDR
// uc_nation := nation_russian ;
4889: LD_ADDR_OWVAR 21
4893: PUSH
4894: LD_INT 3
4896: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4897: LD_ADDR_OWVAR 42
4901: PUSH
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4911: LD_ADDR_OWVAR 43
4915: PUSH
4916: LD_INT 5
4918: PPUSH
4919: LD_INT 6
4921: PPUSH
4922: CALL_OW 12
4926: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4927: LD_ADDR_OWVAR 44
4931: PUSH
4932: LD_VAR 0 2
4936: PUSH
4937: LD_INT 5
4939: ARRAY
4940: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4941: LD_ADDR_OWVAR 45
4945: PUSH
4946: LD_VAR 0 2
4950: PUSH
4951: LD_INT 6
4953: ARRAY
4954: ST_TO_ADDR
// sr := 0 ;
4955: LD_ADDR_VAR 0 6
4959: PUSH
4960: LD_INT 0
4962: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PUSH
4972: LD_INT 29
4974: EQUAL
4975: IFFALSE 4987
// sr := mat_oil else
4977: LD_ADDR_VAR 0 6
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
4985: GO 5009
// if i [ 1 ] = b_siberite_mine then
4987: LD_VAR 0 2
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 30
4998: EQUAL
4999: IFFALSE 5009
// sr := mat_siberit ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 3
5008: ST_TO_ADDR
// if sr then
5009: LD_VAR 0 6
5013: IFFALSE 5069
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 2
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 2
5028: PUSH
5029: LD_INT 3
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5042: LD_VAR 0 2
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PPUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 3
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 5
5064: PPUSH
5065: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 2
5081: ARRAY
5082: PPUSH
5083: LD_VAR 0 2
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_VAR 0 2
5096: PUSH
5097: LD_INT 4
5099: ARRAY
5100: PPUSH
5101: CALL_OW 47
5105: ST_TO_ADDR
// end ;
5106: GO 4876
5108: POP
5109: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5110: LD_ADDR_VAR 0 7
5114: PUSH
5115: LD_INT 22
5117: PUSH
5118: LD_VAR 0 5
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 30
5129: PUSH
5130: LD_INT 1
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PPUSH
5141: CALL_OW 69
5145: ST_TO_ADDR
// if not depot then
5146: LD_VAR 0 7
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5499
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5155: LD_ADDR_VAR 0 8
5159: PUSH
5160: LD_INT 84
5162: PPUSH
5163: LD_INT 128
5165: PPUSH
5166: CALL_OW 428
5170: PPUSH
5171: LD_INT 15
5173: PPUSH
5174: LD_INT 0
5176: PPUSH
5177: LD_INT 6
5179: PUSH
5180: LD_INT 7
5182: PUSH
5183: LD_INT 8
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_OWVAR 67
5195: ARRAY
5196: PPUSH
5197: LD_INT 3000
5199: PUSH
5200: LD_INT 300
5202: PUSH
5203: LD_INT 100
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: LD_INT 12
5213: PUSH
5214: LD_INT 6
5216: PUSH
5217: LD_INT 6
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL 29291 0 6
5233: ST_TO_ADDR
// if not base then
5234: LD_VAR 0 8
5238: NOT
5239: IFFALSE 5243
// exit ;
5241: GO 5499
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5243: LD_ADDR_EXP 36
5247: PUSH
5248: LD_EXP 36
5252: PPUSH
5253: LD_EXP 7
5257: PPUSH
5258: LD_VAR 0 8
5262: PPUSH
5263: CALL_OW 1
5267: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5268: LD_ADDR_VAR 0 8
5272: PUSH
5273: LD_INT 34
5275: PPUSH
5276: LD_INT 23
5278: PPUSH
5279: CALL_OW 428
5283: PPUSH
5284: LD_INT 11
5286: PPUSH
5287: LD_INT 0
5289: PPUSH
5290: LD_INT 6
5292: PUSH
5293: LD_INT 7
5295: PUSH
5296: LD_INT 8
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: PUSH
5304: LD_OWVAR 67
5308: ARRAY
5309: PPUSH
5310: LD_INT 20000
5312: PUSH
5313: LD_INT 3000
5315: PUSH
5316: LD_INT 1000
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: LD_INT 12
5326: PUSH
5327: LD_INT 6
5329: PUSH
5330: LD_INT 6
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: PPUSH
5342: CALL 29291 0 6
5346: ST_TO_ADDR
// if not base then
5347: LD_VAR 0 8
5351: NOT
5352: IFFALSE 5356
// exit ;
5354: GO 5499
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5356: LD_ADDR_EXP 36
5360: PUSH
5361: LD_EXP 36
5365: PPUSH
5366: LD_EXP 8
5370: PPUSH
5371: LD_VAR 0 8
5375: PPUSH
5376: CALL_OW 1
5380: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5381: LD_ADDR_EXP 14
5385: PUSH
5386: LD_INT 22
5388: PUSH
5389: LD_INT 3
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 30
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 69
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 25
5421: PPUSH
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 6
5427: PUSH
5428: LD_INT 7
5430: PUSH
5431: LD_INT 8
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: LD_OWVAR 67
5443: ARRAY
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 100
5450: PUSH
5451: LD_INT 10
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 6
5461: PUSH
5462: LD_INT 7
5464: PUSH
5465: LD_INT 8
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_OWVAR 67
5477: ARRAY
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: LD_INT 0
5484: PUSH
5485: LD_INT 1
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL 29291 0 6
5498: ST_TO_ADDR
// end ;
5499: LD_VAR 0 1
5503: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5504: LD_INT 0
5506: PPUSH
5507: PPUSH
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5517: LD_INT 0
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: LD_INT 6
5525: PPUSH
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: LD_INT 0
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: LD_INT 8
5540: PPUSH
5541: LD_INT 0
5543: PPUSH
5544: CALL 53672 0 9
// side := 8 ;
5548: LD_ADDR_VAR 0 8
5552: PUSH
5553: LD_INT 8
5555: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5556: LD_ADDR_VAR 0 5
5560: PUSH
5561: LD_INT 20
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 517
5571: ST_TO_ADDR
// if Difficulty > 2 then
5572: LD_OWVAR 67
5576: PUSH
5577: LD_INT 2
5579: GREATER
5580: IFFALSE 5724
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5582: LD_ADDR_VAR 0 6
5586: PUSH
5587: LD_INT 27
5589: PPUSH
5590: LD_INT 0
5592: PPUSH
5593: CALL_OW 517
5597: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 6
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5722
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5620: LD_ADDR_VAR 0 5
5624: PUSH
5625: LD_VAR 0 5
5629: PPUSH
5630: LD_INT 1
5632: PUSH
5633: LD_VAR 0 5
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PUSH
5642: LD_INT 1
5644: PLUS
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PPUSH
5650: LD_VAR 0 6
5654: PUSH
5655: LD_INT 1
5657: ARRAY
5658: PUSH
5659: LD_VAR 0 2
5663: ARRAY
5664: PPUSH
5665: CALL 26004 0 3
5669: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5670: LD_ADDR_VAR 0 5
5674: PUSH
5675: LD_VAR 0 5
5679: PPUSH
5680: LD_INT 2
5682: PUSH
5683: LD_VAR 0 5
5687: PUSH
5688: LD_INT 2
5690: ARRAY
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PPUSH
5700: LD_VAR 0 6
5704: PUSH
5705: LD_INT 2
5707: ARRAY
5708: PUSH
5709: LD_VAR 0 2
5713: ARRAY
5714: PPUSH
5715: CALL 26004 0 3
5719: ST_TO_ADDR
// end ;
5720: GO 5617
5722: POP
5723: POP
// end ; if tmp then
5724: LD_VAR 0 5
5728: IFFALSE 5856
// begin for i = 1 to tmp [ 1 ] do
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: DOUBLE
5736: LD_INT 1
5738: DEC
5739: ST_TO_ADDR
5740: LD_VAR 0 5
5744: PUSH
5745: LD_INT 1
5747: ARRAY
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5854
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 2
5765: ARRAY
5766: PPUSH
5767: LD_VAR 0 5
5771: PUSH
5772: LD_INT 2
5774: ARRAY
5775: PUSH
5776: LD_VAR 0 2
5780: ARRAY
5781: PPUSH
5782: LD_VAR 0 8
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5794: LD_ADDR_EXP 16
5798: PUSH
5799: LD_EXP 16
5803: PPUSH
5804: LD_EXP 16
5808: PUSH
5809: LD_INT 1
5811: PLUS
5812: PPUSH
5813: LD_VAR 0 5
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PUSH
5822: LD_VAR 0 2
5826: ARRAY
5827: PUSH
5828: LD_VAR 0 5
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PUSH
5837: LD_VAR 0 2
5841: ARRAY
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 2
5851: ST_TO_ADDR
// end ;
5852: GO 5749
5854: POP
5855: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5856: LD_ADDR_VAR 0 7
5860: PUSH
5861: LD_INT 165
5863: PUSH
5864: LD_INT 156
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 143
5873: PUSH
5874: LD_INT 145
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 152
5883: PUSH
5884: LD_INT 165
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 123
5893: PUSH
5894: LD_INT 153
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 161
5903: PUSH
5904: LD_INT 215
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 172
5913: PUSH
5914: LD_INT 100
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: LD_INT 148
5923: PUSH
5924: LD_INT 83
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: LD_INT 122
5933: PUSH
5934: LD_INT 68
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 105
5943: PUSH
5944: LD_INT 74
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 113
5953: PUSH
5954: LD_INT 97
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: ST_TO_ADDR
// for i in cameras do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: LD_VAR 0 7
5982: PUSH
5983: FOR_IN
5984: IFFALSE 6015
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5986: LD_VAR 0 2
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: LD_VAR 0 2
5999: PUSH
6000: LD_INT 2
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 8
6008: PPUSH
6009: CALL_OW 244
6013: GO 5983
6015: POP
6016: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6017: LD_ADDR_VAR 0 5
6021: PUSH
6022: LD_INT 1
6024: PUSH
6025: LD_INT 144
6027: PUSH
6028: LD_INT 110
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: LD_INT 0
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: LD_INT 151
6053: PUSH
6054: LD_INT 118
6056: PUSH
6057: LD_INT 0
6059: PUSH
6060: LD_INT 0
6062: PUSH
6063: LD_INT 0
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 8
6076: PUSH
6077: LD_INT 158
6079: PUSH
6080: LD_INT 110
6082: PUSH
6083: LD_INT 4
6085: PUSH
6086: LD_INT 10
6088: PUSH
6089: LD_INT 15
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 23
6102: PUSH
6103: LD_INT 154
6105: PUSH
6106: LD_INT 121
6108: PUSH
6109: LD_INT 5
6111: PUSH
6112: LD_INT 0
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 20
6128: PUSH
6129: LD_INT 155
6131: PUSH
6132: LD_INT 118
6134: PUSH
6135: LD_INT 4
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 21
6154: PUSH
6155: LD_INT 151
6157: PUSH
6158: LD_INT 122
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 18
6180: PUSH
6181: LD_INT 148
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 17
6206: PUSH
6207: LD_INT 147
6209: PUSH
6210: LD_INT 114
6212: PUSH
6213: LD_INT 2
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 29
6232: PUSH
6233: LD_INT 163
6235: PUSH
6236: LD_INT 120
6238: PUSH
6239: LD_INT 5
6241: PUSH
6242: LD_INT 0
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 27
6258: PUSH
6259: LD_INT 137
6261: PUSH
6262: LD_INT 116
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 27
6284: PUSH
6285: LD_INT 133
6287: PUSH
6288: LD_INT 111
6290: PUSH
6291: LD_INT 1
6293: PUSH
6294: LD_INT 0
6296: PUSH
6297: LD_INT 0
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 27
6310: PUSH
6311: LD_INT 132
6313: PUSH
6314: LD_INT 106
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 26
6336: PUSH
6337: LD_INT 137
6339: PUSH
6340: LD_INT 111
6342: PUSH
6343: LD_INT 0
6345: PUSH
6346: LD_INT 0
6348: PUSH
6349: LD_INT 0
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 8
6362: PUSH
6363: LD_INT 141
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 1
6371: PUSH
6372: LD_INT 13
6374: PUSH
6375: LD_INT 11
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 30
6388: PUSH
6389: LD_INT 140
6391: PUSH
6392: LD_INT 128
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 0
6400: PUSH
6401: LD_INT 0
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 5
6414: PUSH
6415: LD_INT 146
6417: PUSH
6418: LD_INT 96
6420: PUSH
6421: LD_INT 3
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 32
6440: PUSH
6441: LD_INT 150
6443: PUSH
6444: LD_INT 98
6446: PUSH
6447: LD_INT 3
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 32
6466: PUSH
6467: LD_INT 142
6469: PUSH
6470: LD_INT 95
6472: PUSH
6473: LD_INT 3
6475: PUSH
6476: LD_INT 0
6478: PUSH
6479: LD_INT 0
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 32
6492: PUSH
6493: LD_INT 159
6495: PUSH
6496: LD_INT 104
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 0
6504: PUSH
6505: LD_INT 0
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 32
6518: PUSH
6519: LD_INT 133
6521: PUSH
6522: LD_INT 95
6524: PUSH
6525: LD_INT 3
6527: PUSH
6528: LD_INT 0
6530: PUSH
6531: LD_INT 0
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 32
6544: PUSH
6545: LD_INT 131
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: LD_INT 0
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 32
6570: PUSH
6571: LD_INT 164
6573: PUSH
6574: LD_INT 144
6576: PUSH
6577: LD_INT 0
6579: PUSH
6580: LD_INT 0
6582: PUSH
6583: LD_INT 0
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 32
6596: PUSH
6597: LD_INT 146
6599: PUSH
6600: LD_INT 139
6602: PUSH
6603: LD_INT 0
6605: PUSH
6606: LD_INT 0
6608: PUSH
6609: LD_INT 0
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 26
6622: PUSH
6623: LD_INT 143
6625: PUSH
6626: LD_INT 122
6628: PUSH
6629: LD_INT 4
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 26
6648: PUSH
6649: LD_INT 164
6651: PUSH
6652: LD_INT 116
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 0
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: ST_TO_ADDR
// for i in tmp do
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_VAR 0 5
6708: PUSH
6709: FOR_IN
6710: IFFALSE 6941
// begin uc_side := side ;
6712: LD_ADDR_OWVAR 20
6716: PUSH
6717: LD_VAR 0 8
6721: ST_TO_ADDR
// uc_nation := nation_arabian ;
6722: LD_ADDR_OWVAR 21
6726: PUSH
6727: LD_INT 2
6729: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6730: LD_ADDR_OWVAR 42
6734: PUSH
6735: LD_VAR 0 2
6739: PUSH
6740: LD_INT 1
6742: ARRAY
6743: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6744: LD_ADDR_OWVAR 43
6748: PUSH
6749: LD_INT 5
6751: PPUSH
6752: LD_INT 6
6754: PPUSH
6755: CALL_OW 12
6759: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6760: LD_ADDR_OWVAR 44
6764: PUSH
6765: LD_VAR 0 2
6769: PUSH
6770: LD_INT 5
6772: ARRAY
6773: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6774: LD_ADDR_OWVAR 45
6778: PUSH
6779: LD_VAR 0 2
6783: PUSH
6784: LD_INT 6
6786: ARRAY
6787: ST_TO_ADDR
// sr := 0 ;
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6796: LD_VAR 0 2
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PUSH
6805: LD_INT 29
6807: EQUAL
6808: IFFALSE 6820
// sr := mat_oil else
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: LD_INT 2
6817: ST_TO_ADDR
6818: GO 6842
// if i [ 1 ] = b_siberite_mine then
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 1
6827: ARRAY
6828: PUSH
6829: LD_INT 30
6831: EQUAL
6832: IFFALSE 6842
// sr := mat_siberit ;
6834: LD_ADDR_VAR 0 9
6838: PUSH
6839: LD_INT 3
6841: ST_TO_ADDR
// if sr then
6842: LD_VAR 0 9
6846: IFFALSE 6902
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6848: LD_VAR 0 2
6852: PUSH
6853: LD_INT 2
6855: ARRAY
6856: PPUSH
6857: LD_VAR 0 2
6861: PUSH
6862: LD_INT 3
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 9
6870: PPUSH
6871: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6875: LD_VAR 0 2
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 3
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 8
6897: PPUSH
6898: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 2
6920: PUSH
6921: LD_INT 3
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 2
6929: PUSH
6930: LD_INT 4
6932: ARRAY
6933: PPUSH
6934: CALL_OW 47
6938: ST_TO_ADDR
// end ;
6939: GO 6709
6941: POP
6942: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6943: LD_ADDR_VAR 0 10
6947: PUSH
6948: LD_INT 22
6950: PUSH
6951: LD_VAR 0 8
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: ST_TO_ADDR
// if not depot then
6979: LD_VAR 0 10
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7234
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6988: LD_ADDR_VAR 0 11
6992: PUSH
6993: LD_VAR 0 10
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_INT 6
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: LD_INT 7
7010: PUSH
7011: LD_INT 8
7013: PUSH
7014: LD_INT 10
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: ARRAY
7027: PPUSH
7028: LD_INT 3000
7030: PUSH
7031: LD_INT 300
7033: PUSH
7034: LD_INT 100
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: PPUSH
7042: LD_INT 14
7044: PUSH
7045: LD_INT 6
7047: PUSH
7048: LD_INT 6
7050: PUSH
7051: LD_INT 5
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL 29291 0 6
7064: ST_TO_ADDR
// if not base then
7065: LD_VAR 0 11
7069: NOT
7070: IFFALSE 7074
// exit ;
7072: GO 7234
// if Difficulty > 1 then
7074: LD_OWVAR 67
7078: PUSH
7079: LD_INT 1
7081: GREATER
7082: IFFALSE 7155
// begin InitHc ;
7084: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7088: LD_INT 1
7090: PPUSH
7091: LD_INT 5
7093: PPUSH
7094: LD_INT 5
7096: PUSH
7097: LD_INT 8
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_OWVAR 67
7108: PUSH
7109: LD_INT 1
7111: MINUS
7112: ARRAY
7113: PPUSH
7114: CALL_OW 380
// for i = 1 to Difficulty do
7118: LD_ADDR_VAR 0 2
7122: PUSH
7123: DOUBLE
7124: LD_INT 1
7126: DEC
7127: ST_TO_ADDR
7128: LD_OWVAR 67
7132: PUSH
7133: FOR_TO
7134: IFFALSE 7153
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7136: CALL_OW 44
7140: PPUSH
7141: LD_INT 24
7143: PPUSH
7144: LD_INT 0
7146: PPUSH
7147: CALL_OW 49
7151: GO 7133
7153: POP
7154: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7155: LD_ADDR_EXP 36
7159: PUSH
7160: LD_EXP 36
7164: PPUSH
7165: LD_EXP 6
7169: PPUSH
7170: LD_VAR 0 11
7174: PPUSH
7175: CALL_OW 1
7179: ST_TO_ADDR
// hc_gallery := ru ;
7180: LD_ADDR_OWVAR 33
7184: PUSH
7185: LD_STRING ru
7187: ST_TO_ADDR
// hc_face_number := 44 ;
7188: LD_ADDR_OWVAR 34
7192: PUSH
7193: LD_INT 44
7195: ST_TO_ADDR
// hc_name := Robert Farmer ;
7196: LD_ADDR_OWVAR 26
7200: PUSH
7201: LD_STRING Robert Farmer
7203: ST_TO_ADDR
// hc_sex := sex_male ;
7204: LD_ADDR_OWVAR 27
7208: PUSH
7209: LD_INT 1
7211: ST_TO_ADDR
// hc_class := 1 ;
7212: LD_ADDR_OWVAR 28
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// Farmer := CreateHuman ;
7220: LD_ADDR_EXP 13
7224: PUSH
7225: CALL_OW 44
7229: ST_TO_ADDR
// InitHc ;
7230: CALL_OW 19
// end ;
7234: LD_VAR 0 1
7238: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7239: LD_INT 0
7241: PPUSH
7242: PPUSH
7243: PPUSH
7244: PPUSH
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7249: LD_INT 0
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 4
7257: PPUSH
7258: LD_INT 0
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: LD_INT 0
7269: PPUSH
7270: LD_INT 10
7272: PPUSH
7273: LD_INT 0
7275: PPUSH
7276: CALL 53672 0 9
// side := 4 ;
7280: LD_ADDR_VAR 0 5
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7288: LD_ADDR_VAR 0 4
7292: PUSH
7293: LD_INT 1
7295: PUSH
7296: LD_INT 144
7298: PUSH
7299: LD_INT 18
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 0
7307: PUSH
7308: LD_INT 0
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 137
7324: PUSH
7325: LD_INT 8
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 0
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 20
7347: PUSH
7348: LD_INT 141
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 0
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 25
7373: PUSH
7374: LD_INT 137
7376: PUSH
7377: LD_INT 5
7379: PUSH
7380: LD_INT 3
7382: PUSH
7383: LD_INT 0
7385: PUSH
7386: LD_INT 0
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 18
7399: PUSH
7400: LD_INT 137
7402: PUSH
7403: LD_INT 12
7405: PUSH
7406: LD_INT 0
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: LD_INT 0
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 17
7425: PUSH
7426: LD_INT 133
7428: PUSH
7429: LD_INT 4
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 16
7451: PUSH
7452: LD_INT 140
7454: PUSH
7455: LD_INT 11
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 8
7477: PUSH
7478: LD_INT 149
7480: PUSH
7481: LD_INT 26
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 10
7489: PUSH
7490: LD_INT 15
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 8
7503: PUSH
7504: LD_INT 142
7506: PUSH
7507: LD_INT 26
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: LD_INT 11
7515: PUSH
7516: LD_INT 12
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 27
7529: PUSH
7530: LD_INT 153
7532: PUSH
7533: LD_INT 32
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: LD_INT 0
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 27
7555: PUSH
7556: LD_INT 145
7558: PUSH
7559: LD_INT 32
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 27
7581: PUSH
7582: LD_INT 138
7584: PUSH
7585: LD_INT 2
7587: PUSH
7588: LD_INT 4
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: LD_INT 0
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 27
7607: PUSH
7608: LD_INT 144
7610: PUSH
7611: LD_INT 13
7613: PUSH
7614: LD_INT 0
7616: PUSH
7617: LD_INT 0
7619: PUSH
7620: LD_INT 0
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 26
7633: PUSH
7634: LD_INT 124
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: LD_INT 4
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 121
7662: PUSH
7663: LD_INT 2
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_INT 0
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 118
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 1
7694: PUSH
7695: LD_INT 0
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 29
7711: PUSH
7712: LD_INT 159
7714: PUSH
7715: LD_INT 47
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 0
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 32
7737: PUSH
7738: LD_INT 146
7740: PUSH
7741: LD_INT 41
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 33
7763: PUSH
7764: LD_INT 136
7766: PUSH
7767: LD_INT 37
7769: PUSH
7770: LD_INT 0
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 33
7789: PUSH
7790: LD_INT 132
7792: PUSH
7793: LD_INT 34
7795: PUSH
7796: LD_INT 0
7798: PUSH
7799: LD_INT 0
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 36
7815: PUSH
7816: LD_INT 124
7818: PUSH
7819: LD_INT 7
7821: PUSH
7822: LD_INT 1
7824: PUSH
7825: LD_INT 0
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 5
7841: PUSH
7842: LD_INT 124
7844: PUSH
7845: LD_INT 19
7847: PUSH
7848: LD_INT 0
7850: PUSH
7851: LD_INT 0
7853: PUSH
7854: LD_INT 0
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 32
7867: PUSH
7868: LD_INT 127
7870: PUSH
7871: LD_INT 23
7873: PUSH
7874: LD_INT 0
7876: PUSH
7877: LD_INT 0
7879: PUSH
7880: LD_INT 0
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: ST_TO_ADDR
// for i in tmp do
7916: LD_ADDR_VAR 0 2
7920: PUSH
7921: LD_VAR 0 4
7925: PUSH
7926: FOR_IN
7927: IFFALSE 8158
// begin uc_side := side ;
7929: LD_ADDR_OWVAR 20
7933: PUSH
7934: LD_VAR 0 5
7938: ST_TO_ADDR
// uc_nation := nation_american ;
7939: LD_ADDR_OWVAR 21
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7947: LD_ADDR_OWVAR 42
7951: PUSH
7952: LD_VAR 0 2
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7961: LD_ADDR_OWVAR 43
7965: PUSH
7966: LD_INT 5
7968: PPUSH
7969: LD_INT 6
7971: PPUSH
7972: CALL_OW 12
7976: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7977: LD_ADDR_OWVAR 44
7981: PUSH
7982: LD_VAR 0 2
7986: PUSH
7987: LD_INT 5
7989: ARRAY
7990: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7991: LD_ADDR_OWVAR 45
7995: PUSH
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 6
8003: ARRAY
8004: ST_TO_ADDR
// sr := 0 ;
8005: LD_ADDR_VAR 0 6
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8013: LD_VAR 0 2
8017: PUSH
8018: LD_INT 1
8020: ARRAY
8021: PUSH
8022: LD_INT 29
8024: EQUAL
8025: IFFALSE 8037
// sr := mat_oil else
8027: LD_ADDR_VAR 0 6
8031: PUSH
8032: LD_INT 2
8034: ST_TO_ADDR
8035: GO 8059
// if i [ 1 ] = b_siberite_mine then
8037: LD_VAR 0 2
8041: PUSH
8042: LD_INT 1
8044: ARRAY
8045: PUSH
8046: LD_INT 30
8048: EQUAL
8049: IFFALSE 8059
// sr := mat_siberit ;
8051: LD_ADDR_VAR 0 6
8055: PUSH
8056: LD_INT 3
8058: ST_TO_ADDR
// if sr then
8059: LD_VAR 0 6
8063: IFFALSE 8119
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8065: LD_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: ARRAY
8073: PPUSH
8074: LD_VAR 0 2
8078: PUSH
8079: LD_INT 3
8081: ARRAY
8082: PPUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8092: LD_VAR 0 2
8096: PUSH
8097: LD_INT 2
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 2
8105: PUSH
8106: LD_INT 3
8108: ARRAY
8109: PPUSH
8110: LD_VAR 0 5
8114: PPUSH
8115: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 3
8140: ARRAY
8141: PPUSH
8142: LD_VAR 0 2
8146: PUSH
8147: LD_INT 4
8149: ARRAY
8150: PPUSH
8151: CALL_OW 47
8155: ST_TO_ADDR
// end ;
8156: GO 7926
8158: POP
8159: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8160: LD_ADDR_VAR 0 8
8164: PUSH
8165: LD_INT 22
8167: PUSH
8168: LD_VAR 0 5
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: ST_TO_ADDR
// if not depot then
8196: LD_VAR 0 8
8200: NOT
8201: IFFALSE 8205
// exit ;
8203: GO 8477
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8205: LD_ADDR_VAR 0 7
8209: PUSH
8210: LD_VAR 0 8
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_INT 3
8221: PPUSH
8222: LD_STRING theta3
8224: PPUSH
8225: LD_INT 8
8227: PUSH
8228: LD_INT 7
8230: PUSH
8231: LD_INT 6
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: LD_OWVAR 67
8243: ARRAY
8244: PPUSH
8245: LD_INT 2500
8247: PUSH
8248: LD_INT 2000
8250: PUSH
8251: LD_INT 1750
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PUSH
8259: LD_OWVAR 67
8263: ARRAY
8264: PUSH
8265: LD_INT 300
8267: PUSH
8268: LD_INT 250
8270: PUSH
8271: LD_INT 200
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: PUSH
8279: LD_OWVAR 67
8283: ARRAY
8284: PUSH
8285: LD_INT 80
8287: PUSH
8288: LD_INT 60
8290: PUSH
8291: LD_INT 50
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_OWVAR 67
8303: ARRAY
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PPUSH
8310: LD_INT 7
8312: PUSH
8313: LD_INT 6
8315: PUSH
8316: LD_INT 5
8318: PUSH
8319: LD_INT 5
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL 29291 0 6
8332: ST_TO_ADDR
// if not base then
8333: LD_VAR 0 7
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8477
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8342: LD_ADDR_EXP 36
8346: PUSH
8347: LD_EXP 36
8351: PPUSH
8352: LD_EXP 5
8356: PPUSH
8357: LD_VAR 0 7
8361: PPUSH
8362: CALL_OW 1
8366: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 1
8372: PPUSH
8373: LD_INT 7
8375: PPUSH
8376: CALL_OW 380
// allyCommander := CreateHuman ;
8380: LD_ADDR_EXP 11
8384: PUSH
8385: CALL_OW 44
8389: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8390: LD_EXP 11
8394: PPUSH
8395: LD_INT 139
8397: PPUSH
8398: LD_INT 15
8400: PPUSH
8401: LD_INT 0
8403: PPUSH
8404: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 137
8415: PPUSH
8416: LD_INT 15
8418: PPUSH
8419: CALL_OW 118
// hc_gallery := us ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING us
8430: ST_TO_ADDR
// hc_face_number := 7 ;
8431: LD_ADDR_OWVAR 34
8435: PUSH
8436: LD_INT 7
8438: ST_TO_ADDR
// hc_name := Arthur Powell ;
8439: LD_ADDR_OWVAR 26
8443: PUSH
8444: LD_STRING Arthur Powell
8446: ST_TO_ADDR
// hc_sex := sex_male ;
8447: LD_ADDR_OWVAR 27
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// hc_class := 1 ;
8455: LD_ADDR_OWVAR 28
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// Powell := CreateHuman ;
8463: LD_ADDR_EXP 12
8467: PUSH
8468: CALL_OW 44
8472: ST_TO_ADDR
// InitHc ;
8473: CALL_OW 19
// end ;
8477: LD_VAR 0 1
8481: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8482: LD_INT 0
8484: PPUSH
8485: PPUSH
8486: PPUSH
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
// side := 1 ;
8493: LD_ADDR_VAR 0 3
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8501: LD_ADDR_VAR 0 1
8505: PUSH
8506: EMPTY
8507: PUSH
8508: EMPTY
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: ST_TO_ADDR
// uc_side := side ;
8514: LD_ADDR_OWVAR 20
8518: PUSH
8519: LD_VAR 0 3
8523: ST_TO_ADDR
// uc_nation := nation_american ;
8524: LD_ADDR_OWVAR 21
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// InitHc ;
8532: CALL_OW 19
// InitVc ;
8536: CALL_OW 20
// hc_importance := 0 ;
8540: LD_ADDR_OWVAR 32
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8548: LD_ADDR_VAR 0 7
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// if commander = 2 then
8567: LD_EXP 25
8571: PUSH
8572: LD_INT 2
8574: EQUAL
8575: IFFALSE 8596
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8577: LD_ADDR_VAR 0 7
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 4
8587: PUSH
8588: LD_INT 4
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: ST_TO_ADDR
// if commander = 3 then
8596: LD_EXP 25
8600: PUSH
8601: LD_INT 3
8603: EQUAL
8604: IFFALSE 8625
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8606: LD_ADDR_VAR 0 7
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 5
8616: PUSH
8617: LD_INT 5
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8625: LD_ADDR_VAR 0 8
8629: PUSH
8630: LD_INT 2
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: LD_INT 1
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if commander = 2 then
8644: LD_EXP 25
8648: PUSH
8649: LD_INT 2
8651: EQUAL
8652: IFFALSE 8673
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8654: LD_ADDR_VAR 0 8
8658: PUSH
8659: LD_INT 1
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: ST_TO_ADDR
// if commander = 3 then
8673: LD_EXP 25
8677: PUSH
8678: LD_INT 3
8680: EQUAL
8681: IFFALSE 8702
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8683: LD_ADDR_VAR 0 8
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8702: LD_ADDR_VAR 0 9
8706: PUSH
8707: LD_INT 5
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: ST_TO_ADDR
// if commander = 2 then
8721: LD_EXP 25
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 8750
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8731: LD_ADDR_VAR 0 9
8735: PUSH
8736: LD_INT 7
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: LD_INT 6
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// if commander = 3 then
8750: LD_EXP 25
8754: PUSH
8755: LD_INT 3
8757: EQUAL
8758: IFFALSE 8779
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8760: LD_ADDR_VAR 0 9
8764: PUSH
8765: LD_INT 9
8767: PUSH
8768: LD_INT 10
8770: PUSH
8771: LD_INT 7
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8779: LD_ADDR_VAR 0 5
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: LD_INT 5
8789: PUSH
8790: LD_INT 4
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: PUSH
8798: LD_OWVAR 67
8802: ARRAY
8803: ST_TO_ADDR
// if commander = 2 then
8804: LD_EXP 25
8808: PUSH
8809: LD_INT 2
8811: EQUAL
8812: IFFALSE 8828
// tanks := tanks + 3 ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 5
8823: PUSH
8824: LD_INT 3
8826: PLUS
8827: ST_TO_ADDR
// for i = 1 to tanks do
8828: LD_ADDR_VAR 0 2
8832: PUSH
8833: DOUBLE
8834: LD_INT 1
8836: DEC
8837: ST_TO_ADDR
8838: LD_VAR 0 5
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8954
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8846: LD_VAR 0 7
8850: PUSH
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: MOD
8859: PUSH
8860: LD_INT 1
8862: PLUS
8863: ARRAY
8864: PPUSH
8865: LD_VAR 0 8
8869: PUSH
8870: LD_INT 1
8872: PPUSH
8873: LD_INT 3
8875: PPUSH
8876: CALL_OW 12
8880: ARRAY
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: LD_VAR 0 9
8889: PUSH
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 3
8897: MOD
8898: PUSH
8899: LD_INT 1
8901: PLUS
8902: ARRAY
8903: PPUSH
8904: LD_INT 60
8906: PPUSH
8907: LD_INT 70
8909: PPUSH
8910: CALL_OW 12
8914: PPUSH
8915: CALL 25882 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8919: LD_ADDR_VAR 0 1
8923: PUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 1
8931: PPUSH
8932: LD_VAR 0 1
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: PUSH
8941: CALL_OW 45
8945: ADD
8946: PPUSH
8947: CALL_OW 1
8951: ST_TO_ADDR
// end ;
8952: GO 8843
8954: POP
8955: POP
// cl := 1 ;
8956: LD_ADDR_VAR 0 6
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// for i = 1 to 10 do
8964: LD_ADDR_VAR 0 2
8968: PUSH
8969: DOUBLE
8970: LD_INT 1
8972: DEC
8973: ST_TO_ADDR
8974: LD_INT 10
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9093
// begin if i mod 4 = 0 then
8980: LD_VAR 0 2
8984: PUSH
8985: LD_INT 4
8987: MOD
8988: PUSH
8989: LD_INT 0
8991: EQUAL
8992: IFFALSE 9008
// cl := cl + 1 ;
8994: LD_ADDR_VAR 0 6
8998: PUSH
8999: LD_VAR 0 6
9003: PUSH
9004: LD_INT 1
9006: PLUS
9007: ST_TO_ADDR
// if cl = 2 then
9008: LD_VAR 0 6
9012: PUSH
9013: LD_INT 2
9015: EQUAL
9016: IFFALSE 9026
// cl := 3 ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: LD_INT 3
9025: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9026: LD_INT 0
9028: PPUSH
9029: LD_VAR 0 6
9033: PPUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 6
9039: PUSH
9040: LD_INT 5
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_OWVAR 67
9052: ARRAY
9053: PPUSH
9054: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9058: LD_ADDR_VAR 0 1
9062: PUSH
9063: LD_VAR 0 1
9067: PPUSH
9068: LD_INT 2
9070: PPUSH
9071: LD_VAR 0 1
9075: PUSH
9076: LD_INT 2
9078: ARRAY
9079: PUSH
9080: CALL_OW 44
9084: ADD
9085: PPUSH
9086: CALL_OW 1
9090: ST_TO_ADDR
// end ;
9091: GO 8977
9093: POP
9094: POP
// if commander = 1 then
9095: LD_EXP 25
9099: PUSH
9100: LD_INT 1
9102: EQUAL
9103: IFFALSE 9171
// for i = 1 to 4 do
9105: LD_ADDR_VAR 0 2
9109: PUSH
9110: DOUBLE
9111: LD_INT 1
9113: DEC
9114: ST_TO_ADDR
9115: LD_INT 4
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9169
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9121: LD_INT 0
9123: PPUSH
9124: LD_INT 1
9126: PPUSH
9127: LD_INT 8
9129: PPUSH
9130: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 2
9146: PPUSH
9147: LD_VAR 0 1
9151: PUSH
9152: LD_INT 2
9154: ARRAY
9155: PUSH
9156: CALL_OW 44
9160: ADD
9161: PPUSH
9162: CALL_OW 1
9166: ST_TO_ADDR
// end ;
9167: GO 9118
9169: POP
9170: POP
// techs := [ ] ;
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: EMPTY
9177: ST_TO_ADDR
// if commander = 1 then
9178: LD_EXP 25
9182: PUSH
9183: LD_INT 1
9185: EQUAL
9186: IFFALSE 9211
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9188: LD_ADDR_VAR 0 4
9192: PUSH
9193: LD_INT 51
9195: PUSH
9196: LD_INT 52
9198: PUSH
9199: LD_INT 53
9201: PUSH
9202: LD_INT 12
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
// if commander = 2 then
9211: LD_EXP 25
9215: PUSH
9216: LD_INT 2
9218: EQUAL
9219: IFFALSE 9256
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: LD_INT 48
9228: PUSH
9229: LD_INT 47
9231: PUSH
9232: LD_INT 46
9234: PUSH
9235: LD_INT 45
9237: PUSH
9238: LD_INT 35
9240: PUSH
9241: LD_INT 60
9243: PUSH
9244: LD_INT 6
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if commander = 3 then
9256: LD_EXP 25
9260: PUSH
9261: LD_INT 3
9263: EQUAL
9264: IFFALSE 9313
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9266: LD_ADDR_VAR 0 4
9270: PUSH
9271: LD_INT 27
9273: PUSH
9274: LD_INT 36
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: LD_INT 57
9282: PUSH
9283: LD_INT 58
9285: PUSH
9286: LD_INT 47
9288: PUSH
9289: LD_INT 46
9291: PUSH
9292: LD_INT 51
9294: PUSH
9295: LD_INT 69
9297: PUSH
9298: LD_INT 39
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: ST_TO_ADDR
// if techs then
9313: LD_VAR 0 4
9317: IFFALSE 9351
// for i in techs do
9319: LD_ADDR_VAR 0 2
9323: PUSH
9324: LD_VAR 0 4
9328: PUSH
9329: FOR_IN
9330: IFFALSE 9349
// SetTech ( i , 1 , state_researched ) ;
9332: LD_VAR 0 2
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: CALL_OW 322
9347: GO 9329
9349: POP
9350: POP
// hc_gallery := skirmish ;
9351: LD_ADDR_OWVAR 33
9355: PUSH
9356: LD_STRING skirmish
9358: ST_TO_ADDR
// hc_face_number := commander ;
9359: LD_ADDR_OWVAR 34
9363: PUSH
9364: LD_EXP 25
9368: ST_TO_ADDR
// hc_importance := 100 ;
9369: LD_ADDR_OWVAR 32
9373: PUSH
9374: LD_INT 100
9376: ST_TO_ADDR
// case commander of 1 :
9377: LD_EXP 25
9381: PUSH
9382: LD_INT 1
9384: DOUBLE
9385: EQUAL
9386: IFTRUE 9390
9388: GO 9414
9390: POP
// begin hc_name := Jeff Ironside ;
9391: LD_ADDR_OWVAR 26
9395: PUSH
9396: LD_STRING Jeff Ironside
9398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: LD_INT 7
9407: PPUSH
9408: CALL_OW 380
// end ; 2 :
9412: GO 9479
9414: LD_INT 2
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9446
9422: POP
// begin hc_name := Paul Johnson ;
9423: LD_ADDR_OWVAR 26
9427: PUSH
9428: LD_STRING Paul Johnson
9430: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9431: LD_INT 1
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: LD_INT 7
9439: PPUSH
9440: CALL_OW 380
// end ; 3 :
9444: GO 9479
9446: LD_INT 3
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9478
9454: POP
// begin hc_name := Lisa Stuart ;
9455: LD_ADDR_OWVAR 26
9459: PUSH
9460: LD_STRING Lisa Stuart
9462: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9463: LD_INT 2
9465: PPUSH
9466: LD_INT 4
9468: PPUSH
9469: LD_INT 7
9471: PPUSH
9472: CALL_OW 380
// end ; end ;
9476: GO 9479
9478: POP
// playerCommander := CreateHuman ;
9479: LD_ADDR_EXP 9
9483: PUSH
9484: CALL_OW 44
9488: ST_TO_ADDR
// hc_importance := 0 ;
9489: LD_ADDR_OWVAR 32
9493: PUSH
9494: LD_INT 0
9496: ST_TO_ADDR
// hc_gallery :=  ;
9497: LD_ADDR_OWVAR 33
9501: PUSH
9502: LD_STRING 
9504: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 2
9517: PPUSH
9518: LD_VAR 0 1
9522: PUSH
9523: LD_INT 2
9525: ARRAY
9526: PUSH
9527: LD_EXP 9
9531: ADD
9532: PPUSH
9533: CALL_OW 1
9537: ST_TO_ADDR
// end ;
9538: LD_VAR 0 1
9542: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9543: LD_INT 0
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
// uc_side := 1 ;
9551: LD_ADDR_OWVAR 20
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// uc_nation := 1 ;
9559: LD_ADDR_OWVAR 21
9563: PUSH
9564: LD_INT 1
9566: ST_TO_ADDR
// InitHc ;
9567: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: LD_OWVAR 67
9594: ARRAY
9595: ST_TO_ADDR
// for i = 1 to peopleAmount do
9596: LD_ADDR_VAR 0 2
9600: PUSH
9601: DOUBLE
9602: LD_INT 1
9604: DEC
9605: ST_TO_ADDR
9606: LD_VAR 0 3
9610: PUSH
9611: FOR_TO
9612: IFFALSE 9661
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9614: LD_INT 0
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: LD_INT 7
9622: PUSH
9623: LD_INT 6
9625: PUSH
9626: LD_INT 5
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_OWVAR 67
9638: ARRAY
9639: PPUSH
9640: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9644: CALL_OW 44
9648: PPUSH
9649: LD_INT 19
9651: PPUSH
9652: LD_INT 0
9654: PPUSH
9655: CALL 60517 0 3
// end ;
9659: GO 9611
9661: POP
9662: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: LD_INT 3
9671: PPUSH
9672: LD_INT 13
9674: PPUSH
9675: LD_INT 58
9677: PPUSH
9678: CALL 25882 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9682: CALL_OW 45
9686: PPUSH
9687: LD_INT 19
9689: PPUSH
9690: LD_INT 0
9692: PPUSH
9693: CALL 60517 0 3
// if commander = 1 then
9697: LD_EXP 25
9701: PUSH
9702: LD_INT 1
9704: EQUAL
9705: IFFALSE 9716
// wait ( 6 6$00 ) else
9707: LD_INT 12600
9709: PPUSH
9710: CALL_OW 67
9714: GO 9723
// wait ( 8 8$00 ) ;
9716: LD_INT 16800
9718: PPUSH
9719: CALL_OW 67
// uc_side := 1 ;
9723: LD_ADDR_OWVAR 20
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// uc_nation := 1 ;
9731: LD_ADDR_OWVAR 21
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// InitVc ;
9739: CALL_OW 20
// InitHc ;
9743: CALL_OW 19
// for i = 1 to 5 do
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: DOUBLE
9753: LD_INT 1
9755: DEC
9756: ST_TO_ADDR
9757: LD_INT 5
9759: PUSH
9760: FOR_TO
9761: IFFALSE 10005
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9763: LD_INT 4
9765: PUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 3
9784: MOD
9785: PUSH
9786: LD_INT 1
9788: PLUS
9789: ARRAY
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 1
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 3
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: LD_VAR 0 2
9812: PUSH
9813: LD_INT 3
9815: MOD
9816: PUSH
9817: LD_INT 1
9819: PLUS
9820: ARRAY
9821: PPUSH
9822: LD_INT 6
9824: PUSH
9825: LD_INT 12
9827: PUSH
9828: LD_INT 11
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_VAR 0 2
9840: PUSH
9841: LD_INT 3
9843: MOD
9844: PUSH
9845: LD_INT 1
9847: PLUS
9848: ARRAY
9849: PPUSH
9850: LD_INT 40
9852: PPUSH
9853: LD_INT 55
9855: PPUSH
9856: CALL_OW 12
9860: PPUSH
9861: CALL 25882 0 5
// veh := CreateVehicle ;
9865: LD_ADDR_VAR 0 6
9869: PUSH
9870: CALL_OW 45
9874: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9875: LD_VAR 0 6
9879: PPUSH
9880: LD_INT 19
9882: PPUSH
9883: LD_INT 0
9885: PPUSH
9886: CALL 60517 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL_OW 264
9899: PUSH
9900: LD_INT 12
9902: EQUAL
9903: IFFALSE 9935
// begin AddCargo ( veh , mat_cans , 70 ) ;
9905: LD_VAR 0 6
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9920: LD_VAR 0 6
9924: PPUSH
9925: LD_INT 3
9927: PPUSH
9928: LD_INT 30
9930: PPUSH
9931: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9935: LD_VAR 0 6
9939: PPUSH
9940: CALL_OW 263
9944: PUSH
9945: LD_INT 1
9947: EQUAL
9948: IFFALSE 10003
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9950: LD_INT 1
9952: PPUSH
9953: LD_INT 3
9955: PPUSH
9956: LD_INT 6
9958: PPUSH
9959: CALL_OW 380
// un := CreateHuman ;
9963: LD_ADDR_VAR 0 5
9967: PUSH
9968: CALL_OW 44
9972: ST_TO_ADDR
// tmp := tmp ^ un ;
9973: LD_ADDR_VAR 0 4
9977: PUSH
9978: LD_VAR 0 4
9982: PUSH
9983: LD_VAR 0 5
9987: ADD
9988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9989: LD_VAR 0 5
9993: PPUSH
9994: LD_VAR 0 6
9998: PPUSH
9999: CALL_OW 52
// end ; end ;
10003: GO 9760
10005: POP
10006: POP
// if tmp then
10007: LD_VAR 0 4
10011: IFFALSE 10075
// begin CenterNowOnUnits ( tmp ) ;
10013: LD_VAR 0 4
10017: PPUSH
10018: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10022: LD_VAR 0 4
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PPUSH
10031: LD_STRING DAR-1
10033: PPUSH
10034: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10038: LD_EXP 9
10042: PPUSH
10043: LD_STRING D
10045: PUSH
10046: LD_STRING I
10048: PUSH
10049: LD_STRING J
10051: PUSH
10052: LD_STRING S
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: LD_EXP 25
10064: ARRAY
10065: STR
10066: PUSH
10067: LD_STRING -1-DAR
10069: STR
10070: PPUSH
10071: CALL_OW 88
// end ; if not reinforceAllowed then
10075: LD_EXP 24
10079: NOT
10080: IFFALSE 10084
// exit ;
10082: GO 10238
// wait ( 25 25$00 ) ;
10084: LD_INT 52500
10086: PPUSH
10087: CALL_OW 67
// uc_side := 1 ;
10091: LD_ADDR_OWVAR 20
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// uc_nation := 1 ;
10099: LD_ADDR_OWVAR 21
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// InitVc ;
10107: CALL_OW 20
// InitHc ;
10111: CALL_OW 19
// for i = 1 to 4 do
10115: LD_ADDR_VAR 0 2
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_INT 4
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10236
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10131: LD_INT 5
10133: PPUSH
10134: LD_INT 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: LD_INT 6
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL 25882 0 5
// veh := CreateVehicle ;
10150: LD_ADDR_VAR 0 6
10154: PUSH
10155: CALL_OW 45
10159: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10160: LD_VAR 0 6
10164: PPUSH
10165: LD_INT 19
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL 60517 0 3
// if GetControl ( veh ) = control_manual then
10175: LD_VAR 0 6
10179: PPUSH
10180: CALL_OW 263
10184: PUSH
10185: LD_INT 1
10187: EQUAL
10188: IFFALSE 10234
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10190: LD_INT 0
10192: PPUSH
10193: LD_INT 3
10195: PPUSH
10196: LD_INT 7
10198: PUSH
10199: LD_INT 6
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: PUSH
10210: LD_OWVAR 67
10214: ARRAY
10215: PPUSH
10216: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10220: CALL_OW 44
10224: PPUSH
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 52
// end ; end ;
10234: GO 10128
10236: POP
10237: POP
// end ;
10238: LD_VAR 0 1
10242: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10243: LD_INT 0
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
// uc_side := 8 ;
10250: LD_ADDR_OWVAR 20
10254: PUSH
10255: LD_INT 8
10257: ST_TO_ADDR
// uc_nation := nation_arabian ;
10258: LD_ADDR_OWVAR 21
10262: PUSH
10263: LD_INT 2
10265: ST_TO_ADDR
// for i = 1 to 2 do
10266: LD_ADDR_VAR 0 2
10270: PUSH
10271: DOUBLE
10272: LD_INT 1
10274: DEC
10275: ST_TO_ADDR
10276: LD_INT 2
10278: PUSH
10279: FOR_TO
10280: IFFALSE 10360
// for j = 1 to 4 do
10282: LD_ADDR_VAR 0 4
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_INT 4
10294: PUSH
10295: FOR_TO
10296: IFFALSE 10356
// begin PrepareHuman ( false , j , 8 ) ;
10298: LD_INT 0
10300: PPUSH
10301: LD_VAR 0 4
10305: PPUSH
10306: LD_INT 8
10308: PPUSH
10309: CALL_OW 380
// un := CreateHuman ;
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: CALL_OW 44
10322: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 23
10330: PPUSH
10331: LD_INT 0
10333: PPUSH
10334: CALL_OW 49
// tmp := tmp union un ;
10338: LD_ADDR_VAR 0 5
10342: PUSH
10343: LD_VAR 0 5
10347: PUSH
10348: LD_VAR 0 3
10352: UNION
10353: ST_TO_ADDR
// end ;
10354: GO 10295
10356: POP
10357: POP
10358: GO 10279
10360: POP
10361: POP
// for i in tmp do
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: LD_VAR 0 5
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10392
// ComMoveXY ( i , 150 , 136 ) ;
10375: LD_VAR 0 2
10379: PPUSH
10380: LD_INT 150
10382: PPUSH
10383: LD_INT 136
10385: PPUSH
10386: CALL_OW 111
10390: GO 10372
10392: POP
10393: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10394: LD_ADDR_EXP 36
10398: PUSH
10399: LD_EXP 36
10403: PPUSH
10404: LD_EXP 6
10408: PPUSH
10409: LD_EXP 36
10413: PUSH
10414: LD_EXP 6
10418: ARRAY
10419: PUSH
10420: LD_VAR 0 5
10424: UNION
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// end ;
10431: LD_VAR 0 1
10435: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10436: LD_OWVAR 67
10440: PUSH
10441: LD_INT 1
10443: GREATER
10444: PUSH
10445: LD_INT 31
10447: PPUSH
10448: LD_INT 3
10450: PPUSH
10451: CALL_OW 321
10455: PUSH
10456: LD_INT 2
10458: EQUAL
10459: AND
10460: IFFALSE 10677
10462: GO 10464
10464: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10465: LD_EXP 7
10469: PPUSH
10470: LD_INT 33
10472: PUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 159
10478: PUSH
10479: LD_INT 5
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 33
10490: PUSH
10491: LD_INT 105
10493: PUSH
10494: LD_INT 158
10496: PUSH
10497: LD_INT 5
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 96
10511: PUSH
10512: LD_INT 136
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 33
10526: PUSH
10527: LD_INT 94
10529: PUSH
10530: LD_INT 133
10532: PUSH
10533: LD_INT 4
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 33
10544: PUSH
10545: LD_INT 84
10547: PUSH
10548: LD_INT 102
10550: PUSH
10551: LD_INT 4
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL 84977 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10571: LD_EXP 8
10575: PPUSH
10576: LD_INT 33
10578: PUSH
10579: LD_INT 50
10581: PUSH
10582: LD_INT 17
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 33
10596: PUSH
10597: LD_INT 52
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 4
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 33
10614: PUSH
10615: LD_INT 53
10617: PUSH
10618: LD_INT 23
10620: PUSH
10621: LD_INT 4
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 45
10635: PUSH
10636: LD_INT 32
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 33
10650: PUSH
10651: LD_INT 45
10653: PUSH
10654: LD_INT 39
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL 84977 0 2
// end ; end_of_file
10677: END
// export function Action ; var i , tmp ; begin
10678: LD_INT 0
10680: PPUSH
10681: PPUSH
10682: PPUSH
// InGameOn ;
10683: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10687: LD_INT 225
10689: PPUSH
10690: LD_INT 217
10692: PPUSH
10693: CALL_OW 86
// for i in playerForces [ 2 ] do
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_EXP 10
10706: PUSH
10707: LD_INT 2
10709: ARRAY
10710: PUSH
10711: FOR_IN
10712: IFFALSE 10845
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10714: LD_EXP 10
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PUSH
10723: LD_VAR 0 2
10727: PPUSH
10728: CALL_OW 257
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: LD_INT 4
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: IN
10743: AND
10744: IFFALSE 10828
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10746: LD_EXP 10
10750: PUSH
10751: LD_INT 1
10753: ARRAY
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PPUSH
10759: LD_INT 19
10761: PPUSH
10762: LD_INT 0
10764: PPUSH
10765: CALL 60517 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10769: LD_VAR 0 2
10773: PPUSH
10774: LD_EXP 10
10778: PUSH
10779: LD_INT 1
10781: ARRAY
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PPUSH
10787: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10791: LD_ADDR_EXP 10
10795: PUSH
10796: LD_EXP 10
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: LD_EXP 10
10808: PUSH
10809: LD_INT 1
10811: ARRAY
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 3
10820: PPUSH
10821: CALL_OW 1
10825: ST_TO_ADDR
// end else
10826: GO 10843
// PlaceUnitInArea ( i , startArea , false ) ;
10828: LD_VAR 0 2
10832: PPUSH
10833: LD_INT 19
10835: PPUSH
10836: LD_INT 0
10838: PPUSH
10839: CALL 60517 0 3
// end ;
10843: GO 10711
10845: POP
10846: POP
// wait ( 0 0$2 ) ;
10847: LD_INT 70
10849: PPUSH
10850: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10854: LD_EXP 9
10858: PPUSH
10859: LD_STRING D
10861: PUSH
10862: LD_STRING I
10864: PUSH
10865: LD_STRING J
10867: PUSH
10868: LD_STRING S
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: PUSH
10876: LD_EXP 25
10880: ARRAY
10881: STR
10882: PUSH
10883: LD_STRING -1
10885: STR
10886: PPUSH
10887: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10891: LD_EXP 12
10895: PPUSH
10896: LD_STRING DP-1
10898: PPUSH
10899: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10903: LD_EXP 12
10907: PPUSH
10908: LD_STRING DP-2
10910: PPUSH
10911: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10915: LD_EXP 9
10919: PPUSH
10920: LD_STRING D
10922: PUSH
10923: LD_STRING I
10925: PUSH
10926: LD_STRING J
10928: PUSH
10929: LD_STRING S
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: PUSH
10937: LD_EXP 25
10941: ARRAY
10942: STR
10943: PUSH
10944: LD_STRING -2
10946: STR
10947: PPUSH
10948: CALL_OW 88
// InGameOff ;
10952: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10956: LD_STRING O1
10958: PPUSH
10959: CALL_OW 337
// game := true ;
10963: LD_ADDR_EXP 3
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10971: LD_INT 175
10973: PPUSH
10974: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10978: LD_EXP 9
10982: PPUSH
10983: LD_STRING D
10985: PUSH
10986: LD_STRING I
10988: PUSH
10989: LD_STRING J
10991: PUSH
10992: LD_STRING S
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: LD_EXP 25
11004: ARRAY
11005: STR
11006: PUSH
11007: LD_STRING -3
11009: STR
11010: PPUSH
11011: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11015: LD_INT 35
11017: PPUSH
11018: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11022: LD_EXP 15
11026: PUSH
11027: LD_INT 1
11029: ARRAY
11030: PUSH
11031: LD_EXP 15
11035: PUSH
11036: LD_INT 2
11038: ARRAY
11039: GREATEREQUAL
11040: IFFALSE 11015
// outpostEscape := true ;
11042: LD_ADDR_EXP 27
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11050: LD_ADDR_VAR 0 3
11054: PUSH
11055: LD_EXP 14
11059: PPUSH
11060: LD_INT 26
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 72
11074: ST_TO_ADDR
// if tmp then
11075: LD_VAR 0 3
11079: IFFALSE 11097
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PPUSH
11090: LD_STRING DR-1-Escape
11092: PPUSH
11093: CALL_OW 88
// wait ( 0 0$1 ) ;
11097: LD_INT 35
11099: PPUSH
11100: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11104: LD_EXP 9
11108: PPUSH
11109: LD_STRING D
11111: PUSH
11112: LD_STRING I
11114: PUSH
11115: LD_STRING J
11117: PUSH
11118: LD_STRING S
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: LD_EXP 25
11130: ARRAY
11131: STR
11132: PUSH
11133: LD_STRING -1-Escape
11135: STR
11136: PPUSH
11137: CALL_OW 88
// for i in ruOutpost do
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_EXP 14
11150: PUSH
11151: FOR_IN
11152: IFFALSE 11206
// begin if IsInUnit ( i ) then
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 310
11163: IFFALSE 11174
// ComExitBuilding ( i ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11174: LD_VAR 0 2
11178: PPUSH
11179: LD_INT 179
11181: PPUSH
11182: LD_INT 102
11184: PPUSH
11185: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 28
11196: PPUSH
11197: LD_INT 20
11199: PPUSH
11200: CALL_OW 171
// end ;
11204: GO 11151
11206: POP
11207: POP
// tmp := [ ] ;
11208: LD_ADDR_VAR 0 3
11212: PUSH
11213: EMPTY
11214: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11215: LD_INT 35
11217: PPUSH
11218: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus1Base ] ) ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_EXP 14
11231: PPUSH
11232: LD_INT 95
11234: PUSH
11235: LD_INT 15
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 72
11246: ST_TO_ADDR
// if tmp then
11247: LD_VAR 0 3
11251: IFFALSE 11330
// for i in tmp do
11253: LD_ADDR_VAR 0 2
11257: PUSH
11258: LD_VAR 0 3
11262: PUSH
11263: FOR_IN
11264: IFFALSE 11328
// begin ruOutpost := ruOutpost diff i ;
11266: LD_ADDR_EXP 14
11270: PUSH
11271: LD_EXP 14
11275: PUSH
11276: LD_VAR 0 2
11280: DIFF
11281: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11282: LD_ADDR_EXP 36
11286: PUSH
11287: LD_EXP 36
11291: PPUSH
11292: LD_EXP 8
11296: PUSH
11297: LD_EXP 36
11301: PUSH
11302: LD_EXP 8
11306: ARRAY
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PPUSH
11316: LD_VAR 0 2
11320: PPUSH
11321: CALL 26004 0 3
11325: ST_TO_ADDR
// end ;
11326: GO 11263
11328: POP
11329: POP
// until not ruOutpost ;
11330: LD_EXP 14
11334: NOT
11335: IFFALSE 11215
// end ;
11337: LD_VAR 0 1
11341: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11342: LD_EXP 27
11346: IFFALSE 11535
11348: GO 11350
11350: DISABLE
11351: LD_INT 0
11353: PPUSH
11354: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11355: LD_INT 875
11357: PPUSH
11358: LD_INT 1225
11360: PPUSH
11361: CALL_OW 12
11365: PPUSH
11366: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_INT 208
11377: PUSH
11378: LD_INT 166
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 218
11387: PUSH
11388: LD_INT 174
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 201
11397: PUSH
11398: LD_INT 173
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 189
11407: PUSH
11408: LD_INT 167
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 191
11417: PUSH
11418: LD_INT 160
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 209
11427: PUSH
11428: LD_INT 181
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 192
11437: PUSH
11438: LD_INT 162
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 197
11447: PUSH
11448: LD_INT 166
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11465: LD_ADDR_VAR 0 1
11469: PUSH
11470: DOUBLE
11471: LD_INT 1
11473: DEC
11474: ST_TO_ADDR
11475: LD_INT 5
11477: PUSH
11478: LD_OWVAR 67
11482: PLUS
11483: PUSH
11484: FOR_TO
11485: IFFALSE 11533
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11487: LD_VAR 0 2
11491: PUSH
11492: LD_VAR 0 1
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_VAR 0 2
11506: PUSH
11507: LD_VAR 0 1
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11524: LD_INT 28
11526: PPUSH
11527: CALL_OW 67
// end ;
11531: GO 11484
11533: POP
11534: POP
// end ;
11535: PPOPN 2
11537: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11538: LD_EXP 27
11542: NOT
11543: IFFALSE 12197
11545: GO 11547
11547: DISABLE
11548: LD_INT 0
11550: PPUSH
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
11556: PPUSH
// begin enable ;
11557: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: LD_EXP 14
11567: PPUSH
11568: LD_INT 22
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 1
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 72
11596: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11597: LD_ADDR_VAR 0 2
11601: PUSH
11602: LD_EXP 14
11606: PPUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 3
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 25
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 72
11635: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_EXP 14
11645: PPUSH
11646: LD_INT 22
11648: PUSH
11649: LD_INT 3
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 21
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: LD_INT 24
11671: PUSH
11672: LD_INT 1000
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL_OW 72
11692: ST_TO_ADDR
// if engs and buildings then
11693: LD_VAR 0 2
11697: PUSH
11698: LD_VAR 0 3
11702: AND
11703: IFFALSE 11776
// begin for i in engs do
11705: LD_ADDR_VAR 0 5
11709: PUSH
11710: LD_VAR 0 2
11714: PUSH
11715: FOR_IN
11716: IFFALSE 11772
// if IsInUnit ( i ) then
11718: LD_VAR 0 5
11722: PPUSH
11723: CALL_OW 310
11727: IFFALSE 11740
// ComExitBuilding ( i ) else
11729: LD_VAR 0 5
11733: PPUSH
11734: CALL_OW 122
11738: GO 11770
// if not HasTask ( i ) then
11740: LD_VAR 0 5
11744: PPUSH
11745: CALL_OW 314
11749: NOT
11750: IFFALSE 11770
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11752: LD_VAR 0 5
11756: PPUSH
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 1
11764: ARRAY
11765: PPUSH
11766: CALL_OW 130
11770: GO 11715
11772: POP
11773: POP
// end else
11774: GO 11879
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11776: LD_VAR 0 3
11780: NOT
11781: PUSH
11782: LD_EXP 14
11786: PPUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 0
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 72
11801: AND
11802: PUSH
11803: LD_VAR 0 2
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 54
11813: PUSH
11814: EMPTY
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 72
11825: AND
11826: IFFALSE 11879
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 3
11835: PUSH
11836: LD_INT 54
11838: PUSH
11839: EMPTY
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 72
11850: PPUSH
11851: LD_EXP 14
11855: PPUSH
11856: LD_INT 30
11858: PUSH
11859: LD_INT 0
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 120
// if not tmp then
11879: LD_VAR 0 1
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12197
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11888: LD_INT 26
11890: PPUSH
11891: LD_INT 81
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 70
11905: PUSH
11906: LD_INT 1
11908: GREATER
11909: IFFALSE 11965
// begin for i in tmp do
11911: LD_ADDR_VAR 0 5
11915: PUSH
11916: LD_VAR 0 1
11920: PUSH
11921: FOR_IN
11922: IFFALSE 11961
// begin if IsInUnit ( i ) then
11924: LD_VAR 0 5
11928: PPUSH
11929: CALL_OW 310
11933: IFFALSE 11944
// ComExitBuilding ( i ) ;
11935: LD_VAR 0 5
11939: PPUSH
11940: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11944: LD_VAR 0 5
11948: PPUSH
11949: LD_INT 204
11951: PPUSH
11952: LD_INT 164
11954: PPUSH
11955: CALL_OW 174
// end ;
11959: GO 11921
11961: POP
11962: POP
// end else
11963: GO 12197
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11965: LD_VAR 0 1
11969: PPUSH
11970: LD_INT 3
11972: PUSH
11973: LD_INT 54
11975: PUSH
11976: EMPTY
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 72
11987: IFFALSE 12197
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11989: LD_ADDR_VAR 0 4
11993: PUSH
11994: LD_EXP 14
11998: PPUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 32
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 58
12011: PUSH
12012: EMPTY
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 72
12023: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12024: LD_VAR 0 4
12028: NOT
12029: PUSH
12030: LD_EXP 14
12034: PPUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 5
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 72
12049: AND
12050: IFFALSE 12087
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12052: LD_VAR 0 1
12056: PPUSH
12057: LD_EXP 14
12061: PPUSH
12062: LD_INT 30
12064: PUSH
12065: LD_INT 5
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 72
12076: PUSH
12077: LD_INT 1
12079: ARRAY
12080: PPUSH
12081: CALL_OW 120
// exit ;
12085: GO 12197
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12087: LD_ADDR_VAR 0 6
12091: PUSH
12092: LD_VAR 0 1
12096: PPUSH
12097: LD_INT 3
12099: PUSH
12100: LD_INT 54
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: ST_TO_ADDR
// if j < empty then
12115: LD_VAR 0 6
12119: PUSH
12120: LD_VAR 0 4
12124: LESS
12125: IFFALSE 12139
// k := j else
12127: LD_ADDR_VAR 0 7
12131: PUSH
12132: LD_VAR 0 6
12136: ST_TO_ADDR
12137: GO 12149
// k := empty ;
12139: LD_ADDR_VAR 0 7
12143: PUSH
12144: LD_VAR 0 4
12148: ST_TO_ADDR
// for i = 1 to k do
12149: LD_ADDR_VAR 0 5
12153: PUSH
12154: DOUBLE
12155: LD_INT 1
12157: DEC
12158: ST_TO_ADDR
12159: LD_VAR 0 7
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12195
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12167: LD_VAR 0 6
12171: PUSH
12172: LD_VAR 0 5
12176: ARRAY
12177: PPUSH
12178: LD_VAR 0 4
12182: PUSH
12183: LD_VAR 0 5
12187: ARRAY
12188: PPUSH
12189: CALL_OW 120
12193: GO 12164
12195: POP
12196: POP
// end ; end ;
12197: PPOPN 7
12199: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12200: LD_EXP 2
12204: PUSH
12205: LD_INT 1
12207: EQUAL
12208: PUSH
12209: LD_EXP 27
12213: AND
12214: PUSH
12215: LD_INT 22
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 92
12227: PUSH
12228: LD_INT 208
12230: PUSH
12231: LD_INT 163
12233: PUSH
12234: LD_INT 8
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PPUSH
12247: CALL_OW 69
12251: AND
12252: PUSH
12253: LD_INT 22
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 92
12275: PUSH
12276: LD_INT 208
12278: PUSH
12279: LD_INT 163
12281: PUSH
12282: LD_INT 14
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: NOT
12301: AND
12302: IFFALSE 12607
12304: GO 12306
12306: DISABLE
12307: LD_INT 0
12309: PPUSH
// begin InGameOn ;
12310: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12314: LD_EXP 9
12318: PPUSH
12319: CALL_OW 87
// wait ( 0 0$1 ) ;
12323: LD_INT 35
12325: PPUSH
12326: CALL_OW 67
// DialogueOn ;
12330: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12334: LD_EXP 9
12338: PPUSH
12339: LD_STRING D
12341: PUSH
12342: LD_STRING I
12344: PUSH
12345: LD_STRING J
12347: PUSH
12348: LD_STRING S
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_EXP 25
12360: ARRAY
12361: STR
12362: PUSH
12363: LD_STRING -1-BaseCaptured
12365: STR
12366: PPUSH
12367: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12371: LD_EXP 12
12375: PPUSH
12376: LD_STRING DP-1-BaseCaptured
12378: PPUSH
12379: CALL_OW 94
// if sibBombAllowed then
12383: LD_EXP 23
12387: IFFALSE 12529
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12389: LD_EXP 9
12393: PPUSH
12394: LD_STRING D
12396: PUSH
12397: LD_STRING I
12399: PUSH
12400: LD_STRING J
12402: PUSH
12403: LD_STRING S
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_EXP 25
12415: ARRAY
12416: STR
12417: PUSH
12418: LD_STRING -2-BaseCaptured
12420: STR
12421: PPUSH
12422: CALL_OW 88
// if commander = 1 then
12426: LD_EXP 25
12430: PUSH
12431: LD_INT 1
12433: EQUAL
12434: IFFALSE 12448
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12436: LD_EXP 12
12440: PPUSH
12441: LD_STRING DP-2b-BaseCaptured
12443: PPUSH
12444: CALL_OW 94
// if commander = 2 then
12448: LD_EXP 25
12452: PUSH
12453: LD_INT 2
12455: EQUAL
12456: IFFALSE 12470
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12458: LD_EXP 12
12462: PPUSH
12463: LD_STRING DP-2-BaseCaptured
12465: PPUSH
12466: CALL_OW 94
// if commander = 3 then
12470: LD_EXP 25
12474: PUSH
12475: LD_INT 3
12477: EQUAL
12478: IFFALSE 12492
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12480: LD_EXP 12
12484: PPUSH
12485: LD_STRING DP-2a-BaseCaptured
12487: PPUSH
12488: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12492: LD_EXP 9
12496: PPUSH
12497: LD_STRING D
12499: PUSH
12500: LD_STRING I
12502: PUSH
12503: LD_STRING J
12505: PUSH
12506: LD_STRING S
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_EXP 25
12518: ARRAY
12519: STR
12520: PUSH
12521: LD_STRING -3-BaseCaptured
12523: STR
12524: PPUSH
12525: CALL_OW 88
// end ; DialogueOff ;
12529: CALL_OW 7
// InGameOff ;
12533: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12537: LD_STRING O2
12539: PPUSH
12540: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12544: LD_ADDR_VAR 0 1
12548: PUSH
12549: LD_EXP 14
12553: PPUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 72
12568: PUSH
12569: FOR_IN
12570: IFFALSE 12586
// SetSide ( i , 1 ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 235
12584: GO 12569
12586: POP
12587: POP
// baseCaptured := true ;
12588: LD_ADDR_EXP 17
12592: PUSH
12593: LD_INT 1
12595: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12596: LD_INT 1225
12598: PPUSH
12599: CALL_OW 67
// PrepareReinforcements ;
12603: CALL 9543 0 0
// end ;
12607: PPOPN 1
12609: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12610: LD_INT 22
12612: PUSH
12613: LD_INT 3
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 92
12622: PUSH
12623: LD_INT 167
12625: PUSH
12626: LD_INT 197
12628: PUSH
12629: LD_INT 20
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 69
12646: PUSH
12647: LD_INT 3
12649: GREATER
12650: IFFALSE 12667
12652: GO 12654
12654: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12655: LD_EXP 12
12659: PPUSH
12660: LD_STRING DP-RuAttack
12662: PPUSH
12663: CALL_OW 94
12667: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12668: LD_EXP 1
12672: NOT
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 168
12679: PPUSH
12680: LD_INT 74
12682: PPUSH
12683: CALL_OW 293
12687: AND
12688: PUSH
12689: LD_INT 168
12691: PPUSH
12692: LD_INT 72
12694: PPUSH
12695: CALL_OW 553
12699: AND
12700: IFFALSE 12752
12702: GO 12704
12704: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12705: LD_INT 168
12707: PPUSH
12708: LD_INT 72
12710: PPUSH
12711: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12715: LD_EXP 9
12719: PPUSH
12720: LD_STRING D
12722: PUSH
12723: LD_STRING I
12725: PUSH
12726: LD_STRING J
12728: PUSH
12729: LD_STRING S
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: LD_EXP 25
12741: ARRAY
12742: STR
12743: PUSH
12744: LD_STRING -1-Blockade
12746: STR
12747: PPUSH
12748: CALL_OW 88
// end ;
12752: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12753: LD_EXP 2
12757: PUSH
12758: LD_INT 1
12760: EQUAL
12761: PUSH
12762: LD_INT 22
12764: PUSH
12765: LD_INT 1
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 101
12774: PUSH
12775: LD_INT 4
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PPUSH
12786: CALL_OW 69
12790: AND
12791: IFFALSE 13323
12793: GO 12795
12795: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12796: LD_INT 4
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 343
// DialogueOn ;
12806: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12810: LD_EXP 11
12814: PPUSH
12815: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12819: LD_EXP 11
12823: PPUSH
12824: LD_STRING DM-1-Contact
12826: PPUSH
12827: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12831: LD_EXP 9
12835: PPUSH
12836: LD_STRING D
12838: PUSH
12839: LD_STRING I
12841: PUSH
12842: LD_STRING J
12844: PUSH
12845: LD_STRING S
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PUSH
12853: LD_EXP 25
12857: ARRAY
12858: STR
12859: PUSH
12860: LD_STRING -1-Contact
12862: STR
12863: PPUSH
12864: CALL_OW 88
// if commander = 1 then
12868: LD_EXP 25
12872: PUSH
12873: LD_INT 1
12875: EQUAL
12876: IFFALSE 13008
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12878: LD_EXP 11
12882: PPUSH
12883: LD_STRING DM-2-Contact
12885: PPUSH
12886: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12890: LD_EXP 9
12894: PPUSH
12895: LD_STRING DI-2-Contact
12897: PPUSH
12898: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12902: LD_INT 22
12904: PUSH
12905: LD_INT 8
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PPUSH
12926: CALL_OW 69
12930: PUSH
12931: LD_INT 8
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 81
12941: PUSH
12942: LD_INT 2
12944: EQUAL
12945: AND
12946: IFFALSE 12972
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12948: LD_EXP 11
12952: PPUSH
12953: LD_STRING DM-3-Contact
12955: PPUSH
12956: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12960: LD_EXP 9
12964: PPUSH
12965: LD_STRING DI-3-Contact
12967: PPUSH
12968: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12972: LD_EXP 11
12976: PPUSH
12977: LD_STRING DM-4-Contact
12979: PPUSH
12980: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12984: LD_EXP 9
12988: PPUSH
12989: LD_STRING DI-4-Contact
12991: PPUSH
12992: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12996: LD_EXP 11
13000: PPUSH
13001: LD_STRING DM-5-Contact
13003: PPUSH
13004: CALL_OW 94
// end ; if commander = 2 then
13008: LD_EXP 25
13012: PUSH
13013: LD_INT 2
13015: EQUAL
13016: IFFALSE 13148
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13018: LD_EXP 11
13022: PPUSH
13023: LD_STRING DM-2c-Contact
13025: PPUSH
13026: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13030: LD_EXP 9
13034: PPUSH
13035: LD_STRING DJ-2-Contact
13037: PPUSH
13038: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13042: LD_INT 22
13044: PUSH
13045: LD_INT 8
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 21
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 69
13070: PUSH
13071: LD_INT 8
13073: PPUSH
13074: LD_INT 1
13076: PPUSH
13077: CALL_OW 81
13081: PUSH
13082: LD_INT 2
13084: EQUAL
13085: AND
13086: IFFALSE 13112
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13088: LD_EXP 11
13092: PPUSH
13093: LD_STRING DM-3-Contact
13095: PPUSH
13096: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13100: LD_EXP 9
13104: PPUSH
13105: LD_STRING DJ-3-Contact
13107: PPUSH
13108: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13112: LD_EXP 11
13116: PPUSH
13117: LD_STRING DM-4-Contact
13119: PPUSH
13120: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13124: LD_EXP 9
13128: PPUSH
13129: LD_STRING DJ-4-Contact
13131: PPUSH
13132: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13136: LD_EXP 11
13140: PPUSH
13141: LD_STRING DM-5a-Contact
13143: PPUSH
13144: CALL_OW 94
// end ; if commander = 3 then
13148: LD_EXP 25
13152: PUSH
13153: LD_INT 3
13155: EQUAL
13156: IFFALSE 13312
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13158: LD_EXP 11
13162: PPUSH
13163: LD_STRING DM-2a-Contact
13165: PPUSH
13166: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13170: LD_EXP 9
13174: PPUSH
13175: LD_STRING DS-2a-Contact
13177: PPUSH
13178: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13182: LD_EXP 11
13186: PPUSH
13187: LD_STRING DM-2b-Contact
13189: PPUSH
13190: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13194: LD_EXP 9
13198: PPUSH
13199: LD_STRING DS-2b-Contact
13201: PPUSH
13202: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13206: LD_INT 22
13208: PUSH
13209: LD_INT 8
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 21
13218: PUSH
13219: LD_INT 1
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: PUSH
13235: LD_INT 8
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL_OW 81
13245: PUSH
13246: LD_INT 2
13248: EQUAL
13249: AND
13250: IFFALSE 13276
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13252: LD_EXP 11
13256: PPUSH
13257: LD_STRING DM-3-Contact
13259: PPUSH
13260: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13264: LD_EXP 9
13268: PPUSH
13269: LD_STRING DS-3-Contact
13271: PPUSH
13272: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13276: LD_EXP 11
13280: PPUSH
13281: LD_STRING DM-4-Contact
13283: PPUSH
13284: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13288: LD_EXP 9
13292: PPUSH
13293: LD_STRING DS-4-Contact
13295: PPUSH
13296: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13300: LD_EXP 11
13304: PPUSH
13305: LD_STRING DM-5-Contact
13307: PPUSH
13308: CALL_OW 94
// end ; DialogueOff ;
13312: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13316: LD_STRING O3
13318: PPUSH
13319: CALL_OW 337
// end ;
13323: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13324: LD_EXP 2
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: PUSH
13333: LD_EXP 18
13337: PUSH
13338: LD_INT 15
13340: PUSH
13341: LD_INT 20
13343: PUSH
13344: LD_INT 25
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: LD_OWVAR 67
13356: ARRAY
13357: GREATEREQUAL
13358: AND
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 69
13388: AND
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 21
13402: PUSH
13403: LD_INT 3
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: PUSH
13419: LD_INT 5
13421: GREATEREQUAL
13422: AND
13423: IFFALSE 13946
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
// begin DialogueOn ;
13434: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13438: LD_EXP 13
13442: PPUSH
13443: LD_STRING DF-1-Leg
13445: PPUSH
13446: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13450: LD_EXP 9
13454: PPUSH
13455: LD_STRING D
13457: PUSH
13458: LD_STRING I
13460: PUSH
13461: LD_STRING J
13463: PUSH
13464: LD_STRING S
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PUSH
13472: LD_EXP 25
13476: ARRAY
13477: STR
13478: PUSH
13479: LD_STRING -1-Leg
13481: STR
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13487: LD_EXP 13
13491: PPUSH
13492: LD_STRING DF-2-Leg
13494: PPUSH
13495: CALL_OW 94
// DialogueOff ;
13499: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13503: LD_STRING QLegionOffer
13505: PPUSH
13506: CALL_OW 97
13510: PUSH
13511: LD_INT 1
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13522
13519: POP
// ; 2 :
13520: GO 13536
13522: LD_INT 2
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13535
13530: POP
// exit ; end ;
13531: GO 13946
13533: GO 13536
13535: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13536: LD_EXP 9
13540: PPUSH
13541: LD_STRING D
13543: PUSH
13544: LD_STRING I
13546: PUSH
13547: LD_STRING J
13549: PUSH
13550: LD_STRING S
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_EXP 25
13562: ARRAY
13563: STR
13564: PUSH
13565: LD_STRING -2-Leg
13567: STR
13568: PPUSH
13569: CALL_OW 88
// legOfferAccepted := true ;
13573: LD_ADDR_EXP 20
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13581: LD_INT 21
13583: PPUSH
13584: LD_INT 1
13586: PPUSH
13587: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13591: LD_INT 190
13593: PPUSH
13594: LD_INT 227
13596: PPUSH
13597: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_INT 16800
13608: PUSH
13609: LD_INT 14700
13611: PUSH
13612: LD_INT 12600
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: LD_OWVAR 67
13624: ARRAY
13625: ST_TO_ADDR
// sib := 100 ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 100
13633: ST_TO_ADDR
// disableGlobalTimer := true ;
13634: LD_ADDR_EXP 4
13638: PUSH
13639: LD_INT 1
13641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13642: LD_INT 35
13644: PPUSH
13645: CALL_OW 67
// time := time - 0 0$1 ;
13649: LD_ADDR_VAR 0 1
13653: PUSH
13654: LD_VAR 0 1
13658: PUSH
13659: LD_INT 35
13661: MINUS
13662: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_INT 21
13670: PPUSH
13671: LD_INT 3
13673: PPUSH
13674: CALL_OW 287
13678: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13679: LD_ADDR_OWVAR 47
13683: PUSH
13684: LD_STRING #SkrTime
13686: PUSH
13687: LD_OWVAR 1
13691: PUSH
13692: LD_STRING #Skr-LegOffer
13694: PUSH
13695: LD_VAR 0 2
13699: PUSH
13700: LD_VAR 0 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: ST_TO_ADDR
// if sources then
13712: LD_VAR 0 3
13716: IFFALSE 13748
// begin sib := sib - sources * 10 ;
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_VAR 0 2
13727: PUSH
13728: LD_VAR 0 3
13732: PUSH
13733: LD_INT 10
13735: MUL
13736: MINUS
13737: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13738: LD_INT 21
13740: PPUSH
13741: LD_INT 3
13743: PPUSH
13744: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13748: LD_VAR 0 1
13752: PUSH
13753: LD_INT 0
13755: EQUAL
13756: PUSH
13757: LD_VAR 0 2
13761: PUSH
13762: LD_INT 0
13764: LESSEQUAL
13765: OR
13766: PUSH
13767: LD_INT 22
13769: PUSH
13770: LD_INT 8
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: NOT
13782: OR
13783: IFFALSE 13642
// SetAreaMapShow ( legOfferArea , 0 ) ;
13785: LD_INT 21
13787: PPUSH
13788: LD_INT 0
13790: PPUSH
13791: CALL_OW 424
// disableGlobalTimer := false ;
13795: LD_ADDR_EXP 4
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// if sib <= 0 then
13803: LD_VAR 0 2
13807: PUSH
13808: LD_INT 0
13810: LESSEQUAL
13811: IFFALSE 13927
// begin legChangeSide := true ;
13813: LD_ADDR_EXP 21
13817: PUSH
13818: LD_INT 1
13820: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13821: LD_EXP 13
13825: PPUSH
13826: LD_STRING DF-4y-Leg
13828: PPUSH
13829: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13833: LD_STRING O3a
13835: PPUSH
13836: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13840: LD_INT 8
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13850: LD_INT 8
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13866: LD_INT 8
13868: PPUSH
13869: LD_INT 4
13871: PPUSH
13872: LD_INT 1
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13882: LD_INT 8
13884: PPUSH
13885: LD_INT 6
13887: PPUSH
13888: LD_INT 2
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13898: LD_INT 8
13900: PPUSH
13901: LD_INT 3
13903: PPUSH
13904: LD_INT 2
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 80
// wait ( 0 0$30 ) ;
13914: LD_INT 1050
13916: PPUSH
13917: CALL_OW 67
// PrepareLegionReinforcements ;
13921: CALL 10243 0 0
// end else
13925: GO 13946
// begin ChangeMissionObjectives ( O3 ) ;
13927: LD_STRING O3
13929: PPUSH
13930: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13934: LD_EXP 13
13938: PPUSH
13939: LD_STRING DF-4n-Leg
13941: PPUSH
13942: CALL_OW 94
// end ; end ;
13946: PPOPN 4
13948: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13949: LD_INT 22
13951: PUSH
13952: LD_INT 8
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 21
13961: PUSH
13962: LD_INT 1
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 69
13977: PUSH
13978: LD_INT 0
13980: EQUAL
13981: PUSH
13982: LD_INT 8
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: CALL_OW 81
13992: PUSH
13993: LD_INT 2
13995: EQUAL
13996: AND
13997: IFFALSE 14009
13999: GO 14001
14001: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14002: LD_STRING O3a
14004: PPUSH
14005: CALL_OW 337
14009: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14010: LD_EXP 2
14014: PUSH
14015: LD_INT 1
14017: EQUAL
14018: PUSH
14019: LD_EXP 3
14023: AND
14024: PUSH
14025: LD_INT 22
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 21
14037: PUSH
14038: LD_INT 1
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: PUSH
14054: LD_INT 0
14056: EQUAL
14057: AND
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 30
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 69
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: AND
14092: IFFALSE 14330
14094: GO 14096
14096: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14097: LD_EXP 9
14101: PPUSH
14102: LD_STRING D
14104: PUSH
14105: LD_STRING I
14107: PUSH
14108: LD_STRING J
14110: PUSH
14111: LD_STRING S
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_EXP 25
14123: ARRAY
14124: STR
14125: PUSH
14126: LD_STRING -1-Win
14128: STR
14129: PPUSH
14130: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14134: LD_OWVAR 1
14138: PUSH
14139: LD_INT 315000
14141: PUSH
14142: LD_INT 273000
14144: PUSH
14145: LD_INT 231000
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: LD_OWVAR 67
14157: ARRAY
14158: GREATEREQUAL
14159: IFFALSE 14174
// AddMedal ( med1 , - 1 ) else
14161: LD_STRING med1
14163: PPUSH
14164: LD_INT 1
14166: NEG
14167: PPUSH
14168: CALL_OW 101
14172: GO 14184
// AddMedal ( med1 , 1 ) ;
14174: LD_STRING med1
14176: PPUSH
14177: LD_INT 1
14179: PPUSH
14180: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14184: LD_EXP 22
14188: PUSH
14189: LD_INT 20
14191: PUSH
14192: LD_INT 15
14194: PUSH
14195: LD_INT 10
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: PUSH
14203: LD_OWVAR 67
14207: ARRAY
14208: GREATEREQUAL
14209: IFFALSE 14224
// AddMedal ( med2 , - 1 ) else
14211: LD_STRING med2
14213: PPUSH
14214: LD_INT 1
14216: NEG
14217: PPUSH
14218: CALL_OW 101
14222: GO 14234
// AddMedal ( med2 , 1 ) ;
14224: LD_STRING med2
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14234: LD_INT 8
14236: PPUSH
14237: LD_INT 1
14239: PPUSH
14240: CALL_OW 81
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14262
// AddMedal ( med3 , 2 ) else
14250: LD_STRING med3
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 101
14260: GO 14319
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14262: LD_INT 22
14264: PUSH
14265: LD_INT 8
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: PUSH
14291: LD_INT 0
14293: EQUAL
14294: IFFALSE 14308
// AddMedal ( med3 , 1 ) else
14296: LD_STRING med3
14298: PPUSH
14299: LD_INT 1
14301: PPUSH
14302: CALL_OW 101
14306: GO 14319
// AddMedal ( med3 , - 1 ) ;
14308: LD_STRING med3
14310: PPUSH
14311: LD_INT 1
14313: NEG
14314: PPUSH
14315: CALL_OW 101
// GiveMedals ( MAIN ) ;
14319: LD_STRING MAIN
14321: PPUSH
14322: CALL_OW 102
// YouWin ;
14326: CALL_OW 103
// end ;
14330: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14331: LD_EXP 2
14335: PUSH
14336: LD_INT 1
14338: EQUAL
14339: PUSH
14340: LD_EXP 16
14344: AND
14345: PUSH
14346: LD_INT 20
14348: PPUSH
14349: LD_INT 81
14351: PUSH
14352: LD_INT 8
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PPUSH
14359: CALL_OW 70
14363: AND
14364: IFFALSE 14643
14366: GO 14368
14368: DISABLE
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
// begin enable ;
14376: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 20
14384: PPUSH
14385: LD_INT 81
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: ST_TO_ADDR
// if not tmp then
14400: LD_VAR 0 3
14404: NOT
14405: IFFALSE 14409
// exit ;
14407: GO 14643
// for i in tmp do
14409: LD_ADDR_VAR 0 1
14413: PUSH
14414: LD_VAR 0 3
14418: PUSH
14419: FOR_IN
14420: IFFALSE 14641
// begin x := GetX ( i ) ;
14422: LD_ADDR_VAR 0 4
14426: PUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 250
14436: ST_TO_ADDR
// y := GetY ( i ) ;
14437: LD_ADDR_VAR 0 5
14441: PUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 251
14451: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14452: LD_VAR 0 4
14456: PPUSH
14457: LD_VAR 0 5
14461: PPUSH
14462: CALL_OW 458
14466: IFFALSE 14639
// begin LaunchMineAtPos ( x , y , 8 ) ;
14468: LD_VAR 0 4
14472: PPUSH
14473: LD_VAR 0 5
14477: PPUSH
14478: LD_INT 8
14480: PPUSH
14481: CALL_OW 456
// if not dialogueMineDetected then
14485: LD_EXP 28
14489: NOT
14490: IFFALSE 14551
// begin CenterNowOnXY ( x , y ) ;
14492: LD_VAR 0 4
14496: PPUSH
14497: LD_VAR 0 5
14501: PPUSH
14502: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14506: LD_EXP 9
14510: PPUSH
14511: LD_STRING D
14513: PUSH
14514: LD_STRING I
14516: PUSH
14517: LD_STRING J
14519: PUSH
14520: LD_STRING S
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_EXP 25
14532: ARRAY
14533: STR
14534: PUSH
14535: LD_STRING -1-Mine
14537: STR
14538: PPUSH
14539: CALL_OW 88
// dialogueMineDetected := true ;
14543: LD_ADDR_EXP 28
14547: PUSH
14548: LD_INT 1
14550: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: DOUBLE
14557: LD_INT 1
14559: DEC
14560: ST_TO_ADDR
14561: LD_EXP 16
14565: PUSH
14566: FOR_TO
14567: IFFALSE 14637
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14569: LD_EXP 16
14573: PUSH
14574: LD_VAR 0 2
14578: ARRAY
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PUSH
14584: LD_VAR 0 4
14588: EQUAL
14589: PUSH
14590: LD_EXP 16
14594: PUSH
14595: LD_VAR 0 2
14599: ARRAY
14600: PUSH
14601: LD_INT 2
14603: ARRAY
14604: PUSH
14605: LD_VAR 0 5
14609: EQUAL
14610: AND
14611: IFFALSE 14635
// begin staticMines := Delete ( staticMines , j ) ;
14613: LD_ADDR_EXP 16
14617: PUSH
14618: LD_EXP 16
14622: PPUSH
14623: LD_VAR 0 2
14627: PPUSH
14628: CALL_OW 3
14632: ST_TO_ADDR
// break ;
14633: GO 14637
// end ;
14635: GO 14566
14637: POP
14638: POP
// end ; end ;
14639: GO 14419
14641: POP
14642: POP
// end ;
14643: PPOPN 5
14645: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14646: LD_EXP 2
14650: PUSH
14651: LD_INT 1
14653: EQUAL
14654: PUSH
14655: LD_EXP 3
14659: AND
14660: PUSH
14661: LD_EXP 23
14665: AND
14666: PUSH
14667: LD_EXP 36
14671: PUSH
14672: LD_EXP 7
14676: ARRAY
14677: PPUSH
14678: LD_INT 30
14680: PUSH
14681: LD_INT 3
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 72
14692: AND
14693: IFFALSE 14897
14695: GO 14697
14697: DISABLE
14698: LD_INT 0
14700: PPUSH
14701: PPUSH
// begin enable ;
14702: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14703: LD_EXP 7
14707: PPUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 48
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: PPUSH
14729: CALL 85085 0 2
// repeat wait ( 0 0$1 ) ;
14733: LD_INT 35
14735: PPUSH
14736: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14740: LD_INT 22
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 34
14752: PUSH
14753: LD_INT 48
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: IFFALSE 14733
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_INT 3
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 34
14787: PUSH
14788: LD_INT 48
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 81
14811: PUSH
14812: LD_INT 3
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: ST_TO_ADDR
// if e then
14838: LD_VAR 0 2
14842: IFFALSE 14868
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_VAR 0 2
14853: PPUSH
14854: LD_VAR 0 1
14858: PUSH
14859: LD_INT 1
14861: ARRAY
14862: PPUSH
14863: CALL_OW 74
14867: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL_OW 250
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 251
14892: PPUSH
14893: CALL_OW 116
// end ;
14897: PPOPN 2
14899: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14900: LD_OWVAR 67
14904: PUSH
14905: LD_INT 1
14907: GREATER
14908: PUSH
14909: LD_EXP 36
14913: PUSH
14914: LD_EXP 7
14918: ARRAY
14919: PPUSH
14920: LD_INT 25
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 72
14934: AND
14935: PUSH
14936: LD_EXP 2
14940: PUSH
14941: LD_INT 1
14943: EQUAL
14944: AND
14945: PUSH
14946: LD_EXP 3
14950: AND
14951: PUSH
14952: LD_INT 23
14954: PPUSH
14955: LD_INT 3
14957: PPUSH
14958: CALL_OW 321
14962: PUSH
14963: LD_INT 2
14965: EQUAL
14966: AND
14967: IFFALSE 15094
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_EXP 36
14985: PUSH
14986: LD_EXP 7
14990: ARRAY
14991: PPUSH
14992: LD_INT 25
14994: PUSH
14995: LD_INT 3
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 72
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 1
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15094
// for i in tmp do
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 1
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15073
// begin SetTag ( i , 29 ) ;
15029: LD_VAR 0 2
15033: PPUSH
15034: LD_INT 29
15036: PPUSH
15037: CALL_OW 109
// ComExitBuilding ( i ) ;
15041: LD_VAR 0 2
15045: PPUSH
15046: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_INT 37
15057: PPUSH
15058: LD_INT 97
15060: PPUSH
15061: LD_INT 133
15063: PPUSH
15064: LD_INT 0
15066: PPUSH
15067: CALL_OW 230
// end ;
15071: GO 15026
15073: POP
15074: POP
// wait ( 1 1$00 ) ;
15075: LD_INT 2100
15077: PPUSH
15078: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15082: LD_EXP 7
15086: PPUSH
15087: LD_INT 29
15089: PPUSH
15090: CALL 65942 0 2
// end ;
15094: PPOPN 2
15096: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15097: LD_EXP 2
15101: PUSH
15102: LD_INT 1
15104: EQUAL
15105: PUSH
15106: LD_INT 84
15108: PPUSH
15109: LD_INT 128
15111: PPUSH
15112: CALL_OW 428
15116: PPUSH
15117: CALL_OW 266
15121: PUSH
15122: LD_INT 1
15124: EQUAL
15125: AND
15126: IFFALSE 15299
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// begin enable ;
15135: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 84
15143: PPUSH
15144: LD_INT 128
15146: PPUSH
15147: CALL_OW 428
15151: ST_TO_ADDR
// uc_side := 3 ;
15152: LD_ADDR_OWVAR 20
15156: PUSH
15157: LD_INT 3
15159: ST_TO_ADDR
// uc_nation := 3 ;
15160: LD_ADDR_OWVAR 21
15164: PUSH
15165: LD_INT 3
15167: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15168: LD_INT 21
15170: PPUSH
15171: LD_INT 3
15173: PPUSH
15174: LD_INT 3
15176: PPUSH
15177: LD_INT 51
15179: PPUSH
15180: LD_INT 0
15182: PPUSH
15183: CALL 25882 0 5
// veh := CreateVehicle ;
15187: LD_ADDR_VAR 0 1
15191: PUSH
15192: CALL_OW 45
15196: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15197: LD_VAR 0 1
15201: PPUSH
15202: LD_INT 126
15204: PPUSH
15205: LD_INT 227
15207: PPUSH
15208: LD_INT 0
15210: PPUSH
15211: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15215: LD_VAR 0 1
15219: PPUSH
15220: LD_INT 2
15222: PPUSH
15223: LD_INT 100
15225: PPUSH
15226: CALL_OW 290
// ComGive ( veh , depot ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_VAR 0 2
15239: PPUSH
15240: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15244: LD_VAR 0 1
15248: PPUSH
15249: LD_INT 126
15251: PPUSH
15252: LD_INT 227
15254: PPUSH
15255: CALL_OW 171
// wait ( 0 0$10 ) ;
15259: LD_INT 350
15261: PPUSH
15262: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15266: LD_INT 35
15268: PPUSH
15269: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 126
15280: PPUSH
15281: LD_INT 227
15283: PPUSH
15284: CALL_OW 307
15288: IFFALSE 15266
// RemoveUnit ( veh ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 64
// end ;
15299: PPOPN 2
15301: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15302: LD_EXP 2
15306: PUSH
15307: LD_INT 1
15309: EQUAL
15310: PUSH
15311: LD_EXP 27
15315: AND
15316: PUSH
15317: LD_EXP 25
15321: PUSH
15322: LD_INT 2
15324: EQUAL
15325: AND
15326: IFFALSE 15518
15328: GO 15330
15330: DISABLE
15331: LD_INT 0
15333: PPUSH
15334: PPUSH
// begin enable ;
15335: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15336: LD_OWVAR 1
15340: PUSH
15341: LD_INT 105000
15343: PUSH
15344: LD_INT 84000
15346: PUSH
15347: LD_INT 63000
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: LD_OWVAR 67
15359: ARRAY
15360: GREATEREQUAL
15361: IFFALSE 15364
// disable ;
15363: DISABLE
// uc_side := 4 ;
15364: LD_ADDR_OWVAR 20
15368: PUSH
15369: LD_INT 4
15371: ST_TO_ADDR
// uc_nation := 1 ;
15372: LD_ADDR_OWVAR 21
15376: PUSH
15377: LD_INT 1
15379: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15380: LD_INT 2
15382: PPUSH
15383: LD_INT 3
15385: PPUSH
15386: LD_INT 3
15388: PPUSH
15389: LD_INT 12
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL 25882 0 5
// veh := CreateVehicle ;
15399: LD_ADDR_VAR 0 1
15403: PUSH
15404: CALL_OW 45
15408: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15409: LD_VAR 0 1
15413: PPUSH
15414: LD_INT 229
15416: PPUSH
15417: LD_INT 226
15419: PPUSH
15420: LD_INT 0
15422: PPUSH
15423: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 1
15434: PPUSH
15435: LD_INT 100
15437: PPUSH
15438: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15442: LD_VAR 0 1
15446: PPUSH
15447: LD_INT 25
15449: PPUSH
15450: CALL_OW 173
// AddComUnload ( veh ) ;
15454: LD_VAR 0 1
15458: PPUSH
15459: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15463: LD_VAR 0 1
15467: PPUSH
15468: LD_INT 229
15470: PPUSH
15471: LD_INT 226
15473: PPUSH
15474: CALL_OW 171
// wait ( 0 0$10 ) ;
15478: LD_INT 350
15480: PPUSH
15481: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15485: LD_INT 35
15487: PPUSH
15488: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_INT 229
15499: PPUSH
15500: LD_INT 226
15502: PPUSH
15503: CALL_OW 307
15507: IFFALSE 15485
// RemoveUnit ( veh ) ;
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 64
// end ;
15518: PPOPN 2
15520: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15521: LD_EXP 2
15525: PUSH
15526: LD_INT 1
15528: EQUAL
15529: PUSH
15530: LD_EXP 3
15534: AND
15535: PUSH
15536: LD_EXP 24
15540: AND
15541: IFFALSE 15874
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
// begin enable ;
15553: ENABLE
// tmp := [ ] ;
15554: LD_ADDR_VAR 0 4
15558: PUSH
15559: EMPTY
15560: ST_TO_ADDR
// if commander = 1 then
15561: LD_EXP 25
15565: PUSH
15566: LD_INT 1
15568: EQUAL
15569: IFFALSE 15581
// amount := 3 else
15571: LD_ADDR_VAR 0 5
15575: PUSH
15576: LD_INT 3
15578: ST_TO_ADDR
15579: GO 15589
// amount := 2 ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_INT 2
15588: ST_TO_ADDR
// for i = 1 to amount do
15589: LD_ADDR_VAR 0 1
15593: PUSH
15594: DOUBLE
15595: LD_INT 1
15597: DEC
15598: ST_TO_ADDR
15599: LD_VAR 0 5
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15769
// begin wait ( 0 0$5 ) ;
15607: LD_INT 175
15609: PPUSH
15610: CALL_OW 67
// for j = 1 to 3 do
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: DOUBLE
15620: LD_INT 1
15622: DEC
15623: ST_TO_ADDR
15624: LD_INT 3
15626: PUSH
15627: FOR_TO
15628: IFFALSE 15765
// begin uc_side := 4 ;
15630: LD_ADDR_OWVAR 20
15634: PUSH
15635: LD_INT 4
15637: ST_TO_ADDR
// uc_nation := 1 ;
15638: LD_ADDR_OWVAR 21
15642: PUSH
15643: LD_INT 1
15645: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15646: LD_INT 3
15648: PUSH
15649: LD_INT 5
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 1
15658: PPUSH
15659: LD_INT 2
15661: PPUSH
15662: CALL_OW 12
15666: ARRAY
15667: PPUSH
15668: LD_INT 3
15670: PPUSH
15671: LD_INT 3
15673: PPUSH
15674: LD_INT 9
15676: PUSH
15677: LD_INT 5
15679: PUSH
15680: LD_INT 7
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 1
15690: PPUSH
15691: LD_INT 3
15693: PPUSH
15694: CALL_OW 12
15698: ARRAY
15699: PPUSH
15700: LD_INT 100
15702: PPUSH
15703: CALL 25882 0 5
// veh := CreateVehicle ;
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: CALL_OW 45
15716: ST_TO_ADDR
// tmp := tmp ^ veh ;
15717: LD_ADDR_VAR 0 4
15721: PUSH
15722: LD_VAR 0 4
15726: PUSH
15727: LD_VAR 0 3
15731: ADD
15732: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 22
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 119
15755: PPUSH
15756: LD_INT 215
15758: PPUSH
15759: CALL_OW 111
// end ;
15763: GO 15627
15765: POP
15766: POP
// end ;
15767: GO 15604
15769: POP
15770: POP
// wait ( 0 0$3 ) ;
15771: LD_INT 105
15773: PPUSH
15774: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15778: LD_INT 35
15780: PPUSH
15781: CALL_OW 67
// for i in tmp do
15785: LD_ADDR_VAR 0 1
15789: PUSH
15790: LD_VAR 0 4
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15863
// if IsDead ( i ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 301
15807: IFFALSE 15827
// tmp := tmp diff i else
15809: LD_ADDR_VAR 0 4
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_VAR 0 1
15823: DIFF
15824: ST_TO_ADDR
15825: GO 15861
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_INT 81
15834: PUSH
15835: LD_INT 4
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 74
15856: PPUSH
15857: CALL_OW 115
15861: GO 15795
15863: POP
15864: POP
// until tmp = [ ] ;
15865: LD_VAR 0 4
15869: PUSH
15870: EMPTY
15871: EQUAL
15872: IFFALSE 15778
// end ;
15874: PPOPN 5
15876: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15877: LD_EXP 2
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: PUSH
15886: LD_EXP 3
15890: AND
15891: IFFALSE 15992
15893: GO 15895
15895: DISABLE
15896: LD_INT 0
15898: PPUSH
15899: PPUSH
// begin enable ;
15900: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15901: LD_ADDR_VAR 0 2
15905: PUSH
15906: LD_INT 3
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 1
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 32
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if tmp then
15942: LD_VAR 0 2
15946: IFFALSE 15992
// for i in tmp do
15948: LD_ADDR_VAR 0 1
15952: PUSH
15953: LD_VAR 0 2
15957: PUSH
15958: FOR_IN
15959: IFFALSE 15990
// if GetFuel ( i ) < 3 then
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 261
15970: PUSH
15971: LD_INT 3
15973: LESS
15974: IFFALSE 15988
// SetFuel ( i , 3 ) ;
15976: LD_VAR 0 1
15980: PPUSH
15981: LD_INT 3
15983: PPUSH
15984: CALL_OW 240
15988: GO 15958
15990: POP
15991: POP
// end ;
15992: PPOPN 2
15994: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
15995: LD_EXP 3
15999: PUSH
16000: LD_INT 8
16002: PPUSH
16003: LD_INT 4
16005: PPUSH
16006: CALL_OW 81
16010: PUSH
16011: LD_INT 2
16013: EQUAL
16014: AND
16015: IFFALSE 16225
16017: GO 16019
16019: DISABLE
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
// begin enable ;
16025: ENABLE
// tmp := [ ] ;
16026: LD_ADDR_VAR 0 3
16030: PUSH
16031: EMPTY
16032: ST_TO_ADDR
// for i = 1 to 4 do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: DOUBLE
16039: LD_INT 1
16041: DEC
16042: ST_TO_ADDR
16043: LD_INT 4
16045: PUSH
16046: FOR_TO
16047: IFFALSE 16191
// begin uc_side := 8 ;
16049: LD_ADDR_OWVAR 20
16053: PUSH
16054: LD_INT 8
16056: ST_TO_ADDR
// uc_nation := nation_arabian ;
16057: LD_ADDR_OWVAR 21
16061: PUSH
16062: LD_INT 2
16064: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16065: LD_INT 11
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: LD_INT 5
16073: PPUSH
16074: LD_INT 24
16076: PUSH
16077: LD_INT 23
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: CALL_OW 12
16094: ARRAY
16095: PPUSH
16096: LD_INT 60
16098: PPUSH
16099: LD_INT 80
16101: PPUSH
16102: CALL_OW 12
16106: PPUSH
16107: CALL 25882 0 5
// un := CreateVehicle ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: CALL_OW 45
16120: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16121: LD_VAR 0 2
16125: PPUSH
16126: LD_INT 2
16128: PPUSH
16129: CALL_OW 233
// tmp := tmp ^ un ;
16133: LD_ADDR_VAR 0 3
16137: PUSH
16138: LD_VAR 0 3
16142: PUSH
16143: LD_VAR 0 2
16147: ADD
16148: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16149: LD_VAR 0 2
16153: PPUSH
16154: LD_INT 88
16156: PPUSH
16157: LD_INT 2
16159: PPUSH
16160: LD_INT 0
16162: PPUSH
16163: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16167: LD_VAR 0 2
16171: PPUSH
16172: LD_INT 93
16174: PPUSH
16175: LD_INT 13
16177: PPUSH
16178: CALL_OW 111
// wait ( 0 0$2 ) ;
16182: LD_INT 70
16184: PPUSH
16185: CALL_OW 67
// end ;
16189: GO 16046
16191: POP
16192: POP
// for i in tmp do
16193: LD_ADDR_VAR 0 1
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: FOR_IN
16204: IFFALSE 16223
// AddComMoveXY ( i , 136 , 19 ) ;
16206: LD_VAR 0 1
16210: PPUSH
16211: LD_INT 136
16213: PPUSH
16214: LD_INT 19
16216: PPUSH
16217: CALL_OW 171
16221: GO 16203
16223: POP
16224: POP
// end ;
16225: PPOPN 3
16227: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16228: LD_EXP 3
16232: PUSH
16233: LD_EXP 6
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL 86440 0 2
16245: NOT
16246: AND
16247: IFFALSE 17152
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
// begin enable ;
16258: ENABLE
// base := mc_leg ;
16259: LD_ADDR_VAR 0 2
16263: PUSH
16264: LD_EXP 6
16268: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16269: LD_INT 22
16271: PUSH
16272: LD_INT 8
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 23
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 30
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: NOT
16309: IFFALSE 16313
// exit ;
16311: GO 17152
// if Prob ( 40 ) then
16313: LD_INT 40
16315: PPUSH
16316: CALL_OW 13
16320: IFFALSE 16449
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16322: LD_VAR 0 2
16326: PPUSH
16327: LD_INT 13
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 2
16335: PUSH
16336: LD_INT 28
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 13
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: LD_INT 28
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 13
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 28
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 13
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 28
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 13
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: LD_INT 28
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 13
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 26
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL 85085 0 2
// end else
16447: GO 16666
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 13
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 27
16465: PUSH
16466: LD_INT 26
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 1
16479: PPUSH
16480: LD_INT 3
16482: PPUSH
16483: CALL_OW 12
16487: ARRAY
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 13
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: LD_INT 2
16503: PUSH
16504: LD_INT 27
16506: PUSH
16507: LD_INT 26
16509: PUSH
16510: LD_INT 26
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PPUSH
16521: LD_INT 3
16523: PPUSH
16524: CALL_OW 12
16528: ARRAY
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 13
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 26
16547: PUSH
16548: LD_INT 26
16550: PUSH
16551: LD_INT 29
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: PPUSH
16562: LD_INT 3
16564: PPUSH
16565: CALL_OW 12
16569: ARRAY
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 13
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 26
16588: PUSH
16589: LD_INT 29
16591: PUSH
16592: LD_INT 29
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: PPUSH
16603: LD_INT 3
16605: PPUSH
16606: CALL_OW 12
16610: ARRAY
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 13
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 29
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 13
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 26
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL 85085 0 2
// end ; repeat wait ( 0 0$1 ) ;
16666: LD_INT 35
16668: PPUSH
16669: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 ;
16673: LD_VAR 0 2
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL 86440 0 2
16685: PUSH
16686: LD_INT 6
16688: GREATEREQUAL
16689: IFFALSE 16666
// wait ( 0 0$30 ) ;
16691: LD_INT 1050
16693: PPUSH
16694: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16698: LD_ADDR_VAR 0 3
16702: PUSH
16703: LD_VAR 0 2
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL 86440 0 2
16715: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16716: LD_ADDR_EXP 55
16720: PUSH
16721: LD_EXP 55
16725: PPUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: LD_EXP 55
16735: PUSH
16736: LD_VAR 0 2
16740: ARRAY
16741: PUSH
16742: LD_VAR 0 3
16746: DIFF
16747: PPUSH
16748: CALL_OW 1
16752: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16753: LD_ADDR_VAR 0 4
16757: PUSH
16758: LD_INT 0
16760: PPUSH
16761: LD_INT 2
16763: PPUSH
16764: CALL_OW 12
16768: ST_TO_ADDR
// if legChangeSide then
16769: LD_EXP 21
16773: IFFALSE 16783
// target := 2 ;
16775: LD_ADDR_VAR 0 4
16779: PUSH
16780: LD_INT 2
16782: ST_TO_ADDR
// if target = 2 then
16783: LD_VAR 0 4
16787: PUSH
16788: LD_INT 2
16790: EQUAL
16791: IFFALSE 16919
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16793: LD_ADDR_VAR 0 3
16797: PUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 24
16805: PUSH
16806: LD_INT 250
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PPUSH
16813: CALL_OW 72
16817: ST_TO_ADDR
// for i in tmp do
16818: LD_ADDR_VAR 0 1
16822: PUSH
16823: LD_VAR 0 3
16827: PUSH
16828: FOR_IN
16829: IFFALSE 16869
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16831: LD_VAR 0 1
16835: PPUSH
16836: LD_INT 112
16838: PPUSH
16839: LD_INT 64
16841: PPUSH
16842: CALL_OW 297
16846: PUSH
16847: LD_INT 9
16849: GREATER
16850: IFFALSE 16867
// ComMoveXY ( i , 112 , 64 ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_INT 112
16859: PPUSH
16860: LD_INT 64
16862: PPUSH
16863: CALL_OW 111
16867: GO 16828
16869: POP
16870: POP
// wait ( 0 0$1 ) ;
16871: LD_INT 35
16873: PPUSH
16874: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16878: LD_VAR 0 3
16882: PPUSH
16883: LD_INT 92
16885: PUSH
16886: LD_INT 112
16888: PUSH
16889: LD_INT 64
16891: PUSH
16892: LD_INT 9
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 72
16905: PUSH
16906: LD_VAR 0 3
16910: PUSH
16911: LD_INT 1
16913: MINUS
16914: GREATEREQUAL
16915: IFFALSE 16793
// end else
16917: GO 17043
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: LD_VAR 0 3
16928: PPUSH
16929: LD_INT 24
16931: PUSH
16932: LD_INT 250
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 72
16943: ST_TO_ADDR
// for i in tmp do
16944: LD_ADDR_VAR 0 1
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: FOR_IN
16955: IFFALSE 16995
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 174
16964: PPUSH
16965: LD_INT 94
16967: PPUSH
16968: CALL_OW 297
16972: PUSH
16973: LD_INT 9
16975: GREATER
16976: IFFALSE 16993
// ComMoveXY ( i , 174 , 94 ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_INT 174
16985: PPUSH
16986: LD_INT 94
16988: PPUSH
16989: CALL_OW 111
16993: GO 16954
16995: POP
16996: POP
// wait ( 0 0$1 ) ;
16997: LD_INT 35
16999: PPUSH
17000: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_INT 92
17011: PUSH
17012: LD_INT 174
17014: PUSH
17015: LD_INT 94
17017: PUSH
17018: LD_INT 9
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 72
17031: PUSH
17032: LD_VAR 0 3
17036: PUSH
17037: LD_INT 1
17039: MINUS
17040: GREATEREQUAL
17041: IFFALSE 16919
// end ; repeat wait ( 0 0$1 ) ;
17043: LD_INT 35
17045: PPUSH
17046: CALL_OW 67
// for i in tmp do
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_VAR 0 3
17059: PUSH
17060: FOR_IN
17061: IFFALSE 17143
// begin if GetLives ( i ) > 251 then
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 256
17072: PUSH
17073: LD_INT 251
17075: GREATER
17076: IFFALSE 17114
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17078: LD_VAR 0 1
17082: PPUSH
17083: LD_INT 81
17085: PUSH
17086: LD_INT 8
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: PPUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 74
17107: PPUSH
17108: CALL_OW 115
17112: GO 17141
// if IsDead ( i ) then
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 301
17123: IFFALSE 17141
// tmp := tmp diff i ;
17125: LD_ADDR_VAR 0 3
17129: PUSH
17130: LD_VAR 0 3
17134: PUSH
17135: LD_VAR 0 1
17139: DIFF
17140: ST_TO_ADDR
// end ;
17141: GO 17060
17143: POP
17144: POP
// until not tmp ;
17145: LD_VAR 0 3
17149: NOT
17150: IFFALSE 17043
// end ;
17152: PPOPN 4
17154: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17155: LD_EXP 3
17159: PUSH
17160: LD_EXP 8
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL 86440 0 2
17172: NOT
17173: AND
17174: IFFALSE 18148
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
// begin enable ;
17186: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17187: LD_EXP 36
17191: PUSH
17192: LD_EXP 8
17196: ARRAY
17197: PPUSH
17198: LD_INT 22
17200: PUSH
17201: LD_INT 3
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 30
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 72
17226: NOT
17227: IFFALSE 17231
// exit ;
17229: GO 18148
// base := mc_rus_2 ;
17231: LD_ADDR_VAR 0 2
17235: PUSH
17236: LD_EXP 8
17240: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17241: LD_ADDR_VAR 0 5
17245: PUSH
17246: LD_INT 22
17248: PUSH
17249: LD_INT 3
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_INT 34
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if Prob ( 40 ) then
17275: LD_INT 40
17277: PPUSH
17278: CALL_OW 13
17282: IFFALSE 17411
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17284: LD_VAR 0 2
17288: PPUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: LD_INT 49
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 22
17309: PUSH
17310: LD_INT 3
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: LD_INT 49
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: LD_INT 49
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 24
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 3
17351: PUSH
17352: LD_INT 46
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 24
17363: PUSH
17364: LD_INT 3
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 46
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 24
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: LD_INT 3
17387: PUSH
17388: LD_INT 46
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: PPUSH
17405: CALL 85085 0 2
// end else
17409: GO 17536
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17411: LD_VAR 0 2
17415: PPUSH
17416: LD_INT 24
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: LD_INT 47
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 24
17436: PUSH
17437: LD_INT 3
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: LD_INT 47
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 24
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 47
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 24
17472: PUSH
17473: LD_INT 3
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: LD_INT 46
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 24
17490: PUSH
17491: LD_INT 3
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: LD_INT 46
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 24
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 46
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL 85085 0 2
// end ; if Difficulty > 1 then
17536: LD_OWVAR 67
17540: PUSH
17541: LD_INT 1
17543: GREATER
17544: IFFALSE 17576
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17546: LD_VAR 0 2
17550: PPUSH
17551: LD_INT 24
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 47
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: PPUSH
17572: CALL 85085 0 2
// repeat wait ( 0 0$1 ) ;
17576: LD_INT 35
17578: PPUSH
17579: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] ;
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL 86440 0 2
17595: PUSH
17596: LD_INT 6
17598: PUSH
17599: LD_INT 7
17601: PUSH
17602: LD_INT 7
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: LD_OWVAR 67
17614: ARRAY
17615: GREATEREQUAL
17616: IFFALSE 17576
// wait ( 0 0$30 ) ;
17618: LD_INT 1050
17620: PPUSH
17621: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17625: LD_ADDR_VAR 0 3
17629: PUSH
17630: LD_VAR 0 2
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL 86440 0 2
17642: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17643: LD_ADDR_EXP 55
17647: PUSH
17648: LD_EXP 55
17652: PPUSH
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_EXP 55
17662: PUSH
17663: LD_VAR 0 2
17667: ARRAY
17668: PUSH
17669: LD_VAR 0 3
17673: DIFF
17674: PPUSH
17675: CALL_OW 1
17679: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_INT 0
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: CALL_OW 12
17695: ST_TO_ADDR
// if target then
17696: LD_VAR 0 4
17700: IFFALSE 17828
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_VAR 0 3
17711: PPUSH
17712: LD_INT 24
17714: PUSH
17715: LD_INT 250
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PPUSH
17722: CALL_OW 72
17726: ST_TO_ADDR
// for i in tmp do
17727: LD_ADDR_VAR 0 1
17731: PUSH
17732: LD_VAR 0 3
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17778
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17740: LD_VAR 0 1
17744: PPUSH
17745: LD_INT 84
17747: PPUSH
17748: LD_INT 32
17750: PPUSH
17751: CALL_OW 297
17755: PUSH
17756: LD_INT 9
17758: GREATER
17759: IFFALSE 17776
// ComMoveXY ( i , 84 , 32 ) ;
17761: LD_VAR 0 1
17765: PPUSH
17766: LD_INT 84
17768: PPUSH
17769: LD_INT 32
17771: PPUSH
17772: CALL_OW 111
17776: GO 17737
17778: POP
17779: POP
// wait ( 0 0$1 ) ;
17780: LD_INT 35
17782: PPUSH
17783: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 92
17794: PUSH
17795: LD_INT 84
17797: PUSH
17798: LD_INT 32
17800: PUSH
17801: LD_INT 9
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: PPUSH
17810: CALL_OW 72
17814: PUSH
17815: LD_VAR 0 3
17819: PUSH
17820: LD_INT 1
17822: MINUS
17823: GREATEREQUAL
17824: IFFALSE 17702
// end else
17826: GO 17988
// begin if teleport then
17828: LD_VAR 0 5
17832: IFFALSE 17852
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17834: LD_VAR 0 3
17838: PPUSH
17839: LD_VAR 0 5
17843: PUSH
17844: LD_INT 1
17846: ARRAY
17847: PPUSH
17848: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17852: LD_ADDR_VAR 0 3
17856: PUSH
17857: LD_VAR 0 3
17861: PPUSH
17862: LD_INT 24
17864: PUSH
17865: LD_INT 250
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PPUSH
17872: CALL_OW 72
17876: ST_TO_ADDR
// for i in tmp do
17877: LD_ADDR_VAR 0 1
17881: PUSH
17882: LD_VAR 0 3
17886: PUSH
17887: FOR_IN
17888: IFFALSE 17940
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17890: LD_VAR 0 1
17894: PPUSH
17895: LD_INT 140
17897: PPUSH
17898: LD_INT 219
17900: PPUSH
17901: CALL_OW 297
17905: PUSH
17906: LD_INT 9
17908: GREATER
17909: PUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 314
17919: NOT
17920: AND
17921: IFFALSE 17938
// AddComMoveXY ( i , 140 , 219 ) ;
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 171
17938: GO 17887
17940: POP
17941: POP
// wait ( 0 0$1 ) ;
17942: LD_INT 35
17944: PPUSH
17945: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17949: LD_VAR 0 3
17953: PPUSH
17954: LD_INT 92
17956: PUSH
17957: LD_INT 140
17959: PUSH
17960: LD_INT 219
17962: PUSH
17963: LD_INT 9
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 72
17976: PUSH
17977: LD_VAR 0 3
17981: PUSH
17982: LD_INT 1
17984: MINUS
17985: GREATEREQUAL
17986: IFFALSE 17852
// end ; repeat wait ( 0 0$1 ) ;
17988: LD_INT 35
17990: PPUSH
17991: CALL_OW 67
// for i in tmp do
17995: LD_ADDR_VAR 0 1
17999: PUSH
18000: LD_VAR 0 3
18004: PUSH
18005: FOR_IN
18006: IFFALSE 18139
// begin if GetLives ( i ) > 251 then
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 256
18017: PUSH
18018: LD_INT 251
18020: GREATER
18021: IFFALSE 18110
// begin if GetWeapon ( i ) = ru_time_lapser then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 264
18032: PUSH
18033: LD_INT 49
18035: EQUAL
18036: IFFALSE 18074
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18038: LD_VAR 0 1
18042: PPUSH
18043: LD_INT 81
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PPUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 74
18067: PPUSH
18068: CALL_OW 112
18072: GO 18108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: LD_INT 81
18081: PUSH
18082: LD_INT 3
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 74
18103: PPUSH
18104: CALL_OW 115
// end else
18108: GO 18137
// if IsDead ( i ) then
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 301
18119: IFFALSE 18137
// tmp := tmp diff i ;
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_VAR 0 3
18130: PUSH
18131: LD_VAR 0 1
18135: DIFF
18136: ST_TO_ADDR
// end ;
18137: GO 18005
18139: POP
18140: POP
// until not tmp ;
18141: LD_VAR 0 3
18145: NOT
18146: IFFALSE 17988
// end ;
18148: PPOPN 5
18150: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18151: LD_EXP 3
18155: PUSH
18156: LD_EXP 5
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL 86440 0 2
18168: NOT
18169: AND
18170: IFFALSE 18538
18172: GO 18174
18174: DISABLE
18175: LD_INT 0
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// begin enable ;
18181: ENABLE
// base := mc_amer ;
18182: LD_ADDR_VAR 0 2
18186: PUSH
18187: LD_EXP 5
18191: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18192: LD_INT 22
18194: PUSH
18195: LD_INT 4
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 23
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 30
18214: PUSH
18215: LD_INT 3
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: NOT
18232: IFFALSE 18236
// exit ;
18234: GO 18538
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: LD_INT 3
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 5
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 3
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 9
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 7
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 7
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 3
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 7
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL 85085 0 2
// repeat wait ( 0 0$1 ) ;
18342: LD_INT 35
18344: PPUSH
18345: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL 86440 0 2
18361: PUSH
18362: LD_INT 5
18364: GREATEREQUAL
18365: IFFALSE 18342
// wait ( 0 0$30 ) ;
18367: LD_INT 1050
18369: PPUSH
18370: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18374: LD_ADDR_VAR 0 3
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL 86440 0 2
18391: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18392: LD_ADDR_EXP 55
18396: PUSH
18397: LD_EXP 55
18401: PPUSH
18402: LD_VAR 0 2
18406: PPUSH
18407: LD_EXP 55
18411: PUSH
18412: LD_VAR 0 2
18416: ARRAY
18417: PUSH
18418: LD_VAR 0 3
18422: DIFF
18423: PPUSH
18424: CALL_OW 1
18428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18429: LD_INT 35
18431: PPUSH
18432: CALL_OW 67
// for i in tmp do
18436: LD_ADDR_VAR 0 1
18440: PUSH
18441: LD_VAR 0 3
18445: PUSH
18446: FOR_IN
18447: IFFALSE 18529
// begin if GetLives ( i ) > 251 then
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 256
18458: PUSH
18459: LD_INT 251
18461: GREATER
18462: IFFALSE 18500
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_INT 81
18471: PUSH
18472: LD_INT 4
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PPUSH
18479: CALL_OW 69
18483: PPUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 74
18493: PPUSH
18494: CALL_OW 115
18498: GO 18527
// if IsDead ( i ) then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 301
18509: IFFALSE 18527
// tmp := tmp diff i ;
18511: LD_ADDR_VAR 0 3
18515: PUSH
18516: LD_VAR 0 3
18520: PUSH
18521: LD_VAR 0 1
18525: DIFF
18526: ST_TO_ADDR
// end ;
18527: GO 18446
18529: POP
18530: POP
// until not tmp ;
18531: LD_VAR 0 3
18535: NOT
18536: IFFALSE 18429
// end ; end_of_file
18538: PPOPN 4
18540: END
// export function CustomEvent ( event ) ; begin
18541: LD_INT 0
18543: PPUSH
// end ;
18544: LD_VAR 0 2
18548: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18549: LD_VAR 0 1
18553: PUSH
18554: LD_INT 1
18556: EQUAL
18557: PUSH
18558: LD_VAR 0 2
18562: PUSH
18563: LD_INT 4
18565: EQUAL
18566: AND
18567: IFFALSE 18595
// begin SayRadio ( Powell , DP-Lost ) ;
18569: LD_EXP 12
18573: PPUSH
18574: LD_STRING DP-Lost
18576: PPUSH
18577: CALL_OW 94
// wait ( 0 0$2 ) ;
18581: LD_INT 70
18583: PPUSH
18584: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18588: LD_STRING FriendlyFire
18590: PPUSH
18591: CALL_OW 104
// end ; end ;
18595: PPOPN 2
18597: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18598: LD_EXP 2
18602: PUSH
18603: LD_INT 1
18605: EQUAL
18606: IFFALSE 18841
// begin if un = playerCommander then
18608: LD_VAR 0 1
18612: PUSH
18613: LD_EXP 9
18617: EQUAL
18618: IFFALSE 18627
// YouLost ( commanderDied ) ;
18620: LD_STRING commanderDied
18622: PPUSH
18623: CALL_OW 104
// if un = allyCommander then
18627: LD_VAR 0 1
18631: PUSH
18632: LD_EXP 11
18636: EQUAL
18637: IFFALSE 18646
// YouLost ( Theta ) ;
18639: LD_STRING Theta
18641: PPUSH
18642: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18646: LD_VAR 0 1
18650: PUSH
18651: LD_INT 22
18653: PUSH
18654: LD_INT 8
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 21
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 69
18697: IN
18698: IFFALSE 18714
// legDestCounter := legDestCounter + 1 ;
18700: LD_ADDR_EXP 18
18704: PUSH
18705: LD_EXP 18
18709: PUSH
18710: LD_INT 1
18712: PLUS
18713: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18714: LD_VAR 0 1
18718: PUSH
18719: LD_INT 22
18721: PUSH
18722: LD_INT 4
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: LD_INT 21
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: IN
18766: IFFALSE 18782
// allyDestCounter := allyDestCounter + 1 ;
18768: LD_ADDR_EXP 22
18772: PUSH
18773: LD_EXP 22
18777: PUSH
18778: LD_INT 1
18780: PLUS
18781: ST_TO_ADDR
// if un in ruOutpost then
18782: LD_VAR 0 1
18786: PUSH
18787: LD_EXP 14
18791: IN
18792: IFFALSE 18841
// begin ruOutpost := ruOutpost diff un ;
18794: LD_ADDR_EXP 14
18798: PUSH
18799: LD_EXP 14
18803: PUSH
18804: LD_VAR 0 1
18808: DIFF
18809: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18810: LD_ADDR_EXP 15
18814: PUSH
18815: LD_EXP 15
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: LD_EXP 15
18827: PUSH
18828: LD_INT 1
18830: ARRAY
18831: PUSH
18832: LD_INT 1
18834: PLUS
18835: PPUSH
18836: CALL_OW 1
18840: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL 88414 0 1
// end ;
18850: PPOPN 1
18852: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18853: LD_VAR 0 1
18857: PPUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: CALL 90469 0 2
// end ;
18867: PPOPN 2
18869: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL 89537 0 1
// end ;
18879: PPOPN 1
18881: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18882: LD_VAR 0 1
18886: PPUSH
18887: CALL 89778 0 1
// end ;
18891: PPOPN 1
18893: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18894: LD_VAR 0 1
18898: PUSH
18899: LD_INT 14
18901: EQUAL
18902: PUSH
18903: LD_VAR 0 2
18907: PPUSH
18908: CALL_OW 255
18912: PUSH
18913: LD_INT 1
18915: EQUAL
18916: AND
18917: IFFALSE 18958
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18919: LD_EXP 9
18923: PPUSH
18924: LD_STRING D
18926: PUSH
18927: LD_STRING I
18929: PUSH
18930: LD_STRING J
18932: PUSH
18933: LD_STRING S
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_EXP 25
18945: ARRAY
18946: STR
18947: PUSH
18948: LD_STRING -1-Laser
18950: STR
18951: PPUSH
18952: CALL_OW 88
// exit ;
18956: GO 19100
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 7
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Materialization
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19100
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 25
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Rocket
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19100
// end ; MCE_ResearchComplete ( tech , lab ) ;
19086: LD_VAR 0 1
19090: PPUSH
19091: LD_VAR 0 2
19095: PPUSH
19096: CALL 88110 0 2
// end ;
19100: PPOPN 2
19102: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19103: LD_VAR 0 1
19107: PPUSH
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_VAR 0 3
19117: PPUSH
19118: LD_VAR 0 4
19122: PPUSH
19123: LD_VAR 0 5
19127: PPUSH
19128: CALL 87730 0 5
// end ;
19132: PPOPN 5
19134: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: LD_VAR 0 2
19144: PPUSH
19145: CALL 87326 0 2
// end ;
19149: PPOPN 2
19151: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_VAR 0 2
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_VAR 0 4
19171: PPUSH
19172: CALL 87164 0 4
// end ;
19176: PPOPN 4
19178: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19179: LD_VAR 0 1
19183: PPUSH
19184: LD_VAR 0 2
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: CALL 86939 0 3
// end ;
19198: PPOPN 3
19200: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19201: LD_VAR 0 1
19205: PPUSH
19206: LD_VAR 0 2
19210: PPUSH
19211: CALL 86824 0 2
// end ;
19215: PPOPN 2
19217: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_VAR 0 2
19227: PPUSH
19228: CALL 90730 0 2
// end ;
19232: PPOPN 2
19234: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_VAR 0 3
19249: PPUSH
19250: LD_VAR 0 4
19254: PPUSH
19255: CALL 90946 0 4
// end ;
19259: PPOPN 4
19261: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_VAR 0 2
19271: PPUSH
19272: CALL 86633 0 2
// end ; end_of_file
19276: PPOPN 2
19278: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19279: LD_INT 0
19281: PPUSH
19282: PPUSH
// if exist_mode then
19283: LD_VAR 0 2
19287: IFFALSE 19312
// unit := CreateCharacter ( prefix & ident ) else
19289: LD_ADDR_VAR 0 5
19293: PUSH
19294: LD_VAR 0 3
19298: PUSH
19299: LD_VAR 0 1
19303: STR
19304: PPUSH
19305: CALL_OW 34
19309: ST_TO_ADDR
19310: GO 19327
// unit := NewCharacter ( ident ) ;
19312: LD_ADDR_VAR 0 5
19316: PUSH
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL_OW 25
19326: ST_TO_ADDR
// result := unit ;
19327: LD_ADDR_VAR 0 4
19331: PUSH
19332: LD_VAR 0 5
19336: ST_TO_ADDR
// end ;
19337: LD_VAR 0 4
19341: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19342: LD_INT 0
19344: PPUSH
19345: PPUSH
// if not side or not nation then
19346: LD_VAR 0 1
19350: NOT
19351: PUSH
19352: LD_VAR 0 2
19356: NOT
19357: OR
19358: IFFALSE 19362
// exit ;
19360: GO 19998
// case nation of nation_american :
19362: LD_VAR 0 2
19366: PUSH
19367: LD_INT 1
19369: DOUBLE
19370: EQUAL
19371: IFTRUE 19375
19373: GO 19545
19375: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19376: LD_ADDR_VAR 0 4
19380: PUSH
19381: LD_INT 35
19383: PUSH
19384: LD_INT 45
19386: PUSH
19387: LD_INT 46
19389: PUSH
19390: LD_INT 47
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 6
19401: PUSH
19402: LD_INT 15
19404: PUSH
19405: LD_INT 16
19407: PUSH
19408: LD_INT 7
19410: PUSH
19411: LD_INT 12
19413: PUSH
19414: LD_INT 13
19416: PUSH
19417: LD_INT 10
19419: PUSH
19420: LD_INT 14
19422: PUSH
19423: LD_INT 20
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 22
19431: PUSH
19432: LD_INT 25
19434: PUSH
19435: LD_INT 32
19437: PUSH
19438: LD_INT 27
19440: PUSH
19441: LD_INT 36
19443: PUSH
19444: LD_INT 69
19446: PUSH
19447: LD_INT 39
19449: PUSH
19450: LD_INT 34
19452: PUSH
19453: LD_INT 40
19455: PUSH
19456: LD_INT 48
19458: PUSH
19459: LD_INT 49
19461: PUSH
19462: LD_INT 50
19464: PUSH
19465: LD_INT 51
19467: PUSH
19468: LD_INT 52
19470: PUSH
19471: LD_INT 53
19473: PUSH
19474: LD_INT 54
19476: PUSH
19477: LD_INT 55
19479: PUSH
19480: LD_INT 56
19482: PUSH
19483: LD_INT 57
19485: PUSH
19486: LD_INT 58
19488: PUSH
19489: LD_INT 59
19491: PUSH
19492: LD_INT 60
19494: PUSH
19495: LD_INT 61
19497: PUSH
19498: LD_INT 62
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: ST_TO_ADDR
19543: GO 19922
19545: LD_INT 2
19547: DOUBLE
19548: EQUAL
19549: IFTRUE 19553
19551: GO 19731
19553: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19554: LD_ADDR_VAR 0 4
19558: PUSH
19559: LD_INT 35
19561: PUSH
19562: LD_INT 45
19564: PUSH
19565: LD_INT 46
19567: PUSH
19568: LD_INT 47
19570: PUSH
19571: LD_INT 70
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: LD_INT 11
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: LD_INT 4
19585: PUSH
19586: LD_INT 5
19588: PUSH
19589: LD_INT 6
19591: PUSH
19592: LD_INT 15
19594: PUSH
19595: LD_INT 18
19597: PUSH
19598: LD_INT 7
19600: PUSH
19601: LD_INT 17
19603: PUSH
19604: LD_INT 8
19606: PUSH
19607: LD_INT 20
19609: PUSH
19610: LD_INT 21
19612: PUSH
19613: LD_INT 22
19615: PUSH
19616: LD_INT 72
19618: PUSH
19619: LD_INT 26
19621: PUSH
19622: LD_INT 69
19624: PUSH
19625: LD_INT 39
19627: PUSH
19628: LD_INT 40
19630: PUSH
19631: LD_INT 41
19633: PUSH
19634: LD_INT 42
19636: PUSH
19637: LD_INT 43
19639: PUSH
19640: LD_INT 48
19642: PUSH
19643: LD_INT 49
19645: PUSH
19646: LD_INT 50
19648: PUSH
19649: LD_INT 51
19651: PUSH
19652: LD_INT 52
19654: PUSH
19655: LD_INT 53
19657: PUSH
19658: LD_INT 54
19660: PUSH
19661: LD_INT 55
19663: PUSH
19664: LD_INT 56
19666: PUSH
19667: LD_INT 60
19669: PUSH
19670: LD_INT 61
19672: PUSH
19673: LD_INT 62
19675: PUSH
19676: LD_INT 66
19678: PUSH
19679: LD_INT 67
19681: PUSH
19682: LD_INT 68
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: ST_TO_ADDR
19729: GO 19922
19731: LD_INT 3
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19921
19739: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19740: LD_ADDR_VAR 0 4
19744: PUSH
19745: LD_INT 46
19747: PUSH
19748: LD_INT 47
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: LD_INT 11
19759: PUSH
19760: LD_INT 9
19762: PUSH
19763: LD_INT 20
19765: PUSH
19766: LD_INT 19
19768: PUSH
19769: LD_INT 21
19771: PUSH
19772: LD_INT 24
19774: PUSH
19775: LD_INT 22
19777: PUSH
19778: LD_INT 25
19780: PUSH
19781: LD_INT 28
19783: PUSH
19784: LD_INT 29
19786: PUSH
19787: LD_INT 30
19789: PUSH
19790: LD_INT 31
19792: PUSH
19793: LD_INT 37
19795: PUSH
19796: LD_INT 38
19798: PUSH
19799: LD_INT 32
19801: PUSH
19802: LD_INT 27
19804: PUSH
19805: LD_INT 33
19807: PUSH
19808: LD_INT 69
19810: PUSH
19811: LD_INT 39
19813: PUSH
19814: LD_INT 34
19816: PUSH
19817: LD_INT 40
19819: PUSH
19820: LD_INT 71
19822: PUSH
19823: LD_INT 23
19825: PUSH
19826: LD_INT 44
19828: PUSH
19829: LD_INT 48
19831: PUSH
19832: LD_INT 49
19834: PUSH
19835: LD_INT 50
19837: PUSH
19838: LD_INT 51
19840: PUSH
19841: LD_INT 52
19843: PUSH
19844: LD_INT 53
19846: PUSH
19847: LD_INT 54
19849: PUSH
19850: LD_INT 55
19852: PUSH
19853: LD_INT 56
19855: PUSH
19856: LD_INT 57
19858: PUSH
19859: LD_INT 58
19861: PUSH
19862: LD_INT 59
19864: PUSH
19865: LD_INT 63
19867: PUSH
19868: LD_INT 64
19870: PUSH
19871: LD_INT 65
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: ST_TO_ADDR
19919: GO 19922
19921: POP
// if state > - 1 and state < 3 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: GREATER
19931: PUSH
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 3
19939: LESS
19940: AND
19941: IFFALSE 19998
// for i in result do
19943: LD_ADDR_VAR 0 5
19947: PUSH
19948: LD_VAR 0 4
19952: PUSH
19953: FOR_IN
19954: IFFALSE 19996
// if GetTech ( i , side ) <> state then
19956: LD_VAR 0 5
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 321
19970: PUSH
19971: LD_VAR 0 3
19975: NONEQUAL
19976: IFFALSE 19994
// result := result diff i ;
19978: LD_ADDR_VAR 0 4
19982: PUSH
19983: LD_VAR 0 4
19987: PUSH
19988: LD_VAR 0 5
19992: DIFF
19993: ST_TO_ADDR
19994: GO 19953
19996: POP
19997: POP
// end ;
19998: LD_VAR 0 4
20002: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20003: LD_INT 0
20005: PPUSH
20006: PPUSH
20007: PPUSH
// result := true ;
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20016: LD_ADDR_VAR 0 5
20020: PUSH
20021: LD_VAR 0 2
20025: PPUSH
20026: CALL_OW 480
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 5
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20089
// for i in tmp do
20040: LD_ADDR_VAR 0 4
20044: PUSH
20045: LD_VAR 0 5
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20087
// if GetTech ( i , side ) <> state_researched then
20053: LD_VAR 0 4
20057: PPUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 321
20067: PUSH
20068: LD_INT 2
20070: NONEQUAL
20071: IFFALSE 20085
// begin result := false ;
20073: LD_ADDR_VAR 0 3
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// exit ;
20081: POP
20082: POP
20083: GO 20089
// end ;
20085: GO 20050
20087: POP
20088: POP
// end ;
20089: LD_VAR 0 3
20093: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20094: LD_INT 0
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20109: LD_VAR 0 1
20113: NOT
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 257
20124: PUSH
20125: LD_INT 9
20127: NONEQUAL
20128: OR
20129: IFFALSE 20133
// exit ;
20131: GO 20706
// side := GetSide ( unit ) ;
20133: LD_ADDR_VAR 0 9
20137: PUSH
20138: LD_VAR 0 1
20142: PPUSH
20143: CALL_OW 255
20147: ST_TO_ADDR
// tech_space := tech_spacanom ;
20148: LD_ADDR_VAR 0 12
20152: PUSH
20153: LD_INT 29
20155: ST_TO_ADDR
// tech_time := tech_taurad ;
20156: LD_ADDR_VAR 0 13
20160: PUSH
20161: LD_INT 28
20163: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20164: LD_ADDR_VAR 0 11
20168: PUSH
20169: LD_VAR 0 1
20173: PPUSH
20174: CALL_OW 310
20178: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20179: LD_VAR 0 11
20183: PPUSH
20184: CALL_OW 247
20188: PUSH
20189: LD_INT 2
20191: EQUAL
20192: IFFALSE 20196
// exit ;
20194: GO 20706
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20196: LD_ADDR_VAR 0 8
20200: PUSH
20201: LD_INT 81
20203: PUSH
20204: LD_VAR 0 9
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 3
20215: PUSH
20216: LD_INT 21
20218: PUSH
20219: LD_INT 3
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: ST_TO_ADDR
// if not tmp then
20239: LD_VAR 0 8
20243: NOT
20244: IFFALSE 20248
// exit ;
20246: GO 20706
// if in_unit then
20248: LD_VAR 0 11
20252: IFFALSE 20276
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20254: LD_ADDR_VAR 0 10
20258: PUSH
20259: LD_VAR 0 8
20263: PPUSH
20264: LD_VAR 0 11
20268: PPUSH
20269: CALL_OW 74
20273: ST_TO_ADDR
20274: GO 20296
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20276: LD_ADDR_VAR 0 10
20280: PUSH
20281: LD_VAR 0 8
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 74
20295: ST_TO_ADDR
// if not enemy then
20296: LD_VAR 0 10
20300: NOT
20301: IFFALSE 20305
// exit ;
20303: GO 20706
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20305: LD_VAR 0 11
20309: PUSH
20310: LD_VAR 0 11
20314: PPUSH
20315: LD_VAR 0 10
20319: PPUSH
20320: CALL_OW 296
20324: PUSH
20325: LD_INT 13
20327: GREATER
20328: AND
20329: PUSH
20330: LD_VAR 0 1
20334: PPUSH
20335: LD_VAR 0 10
20339: PPUSH
20340: CALL_OW 296
20344: PUSH
20345: LD_INT 12
20347: GREATER
20348: OR
20349: IFFALSE 20353
// exit ;
20351: GO 20706
// missile := [ 1 ] ;
20353: LD_ADDR_VAR 0 14
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: EMPTY
20362: LIST
20363: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20364: LD_VAR 0 9
20368: PPUSH
20369: LD_VAR 0 12
20373: PPUSH
20374: CALL_OW 325
20378: IFFALSE 20407
// missile := Insert ( missile , missile + 1 , 2 ) ;
20380: LD_ADDR_VAR 0 14
20384: PUSH
20385: LD_VAR 0 14
20389: PPUSH
20390: LD_VAR 0 14
20394: PUSH
20395: LD_INT 1
20397: PLUS
20398: PPUSH
20399: LD_INT 2
20401: PPUSH
20402: CALL_OW 2
20406: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20407: LD_VAR 0 9
20411: PPUSH
20412: LD_VAR 0 13
20416: PPUSH
20417: CALL_OW 325
20421: PUSH
20422: LD_VAR 0 10
20426: PPUSH
20427: CALL_OW 255
20431: PPUSH
20432: LD_VAR 0 13
20436: PPUSH
20437: CALL_OW 325
20441: NOT
20442: AND
20443: IFFALSE 20472
// missile := Insert ( missile , missile + 1 , 3 ) ;
20445: LD_ADDR_VAR 0 14
20449: PUSH
20450: LD_VAR 0 14
20454: PPUSH
20455: LD_VAR 0 14
20459: PUSH
20460: LD_INT 1
20462: PLUS
20463: PPUSH
20464: LD_INT 3
20466: PPUSH
20467: CALL_OW 2
20471: ST_TO_ADDR
// if missile < 2 then
20472: LD_VAR 0 14
20476: PUSH
20477: LD_INT 2
20479: LESS
20480: IFFALSE 20484
// exit ;
20482: GO 20706
// x := GetX ( enemy ) ;
20484: LD_ADDR_VAR 0 4
20488: PUSH
20489: LD_VAR 0 10
20493: PPUSH
20494: CALL_OW 250
20498: ST_TO_ADDR
// y := GetY ( enemy ) ;
20499: LD_ADDR_VAR 0 5
20503: PUSH
20504: LD_VAR 0 10
20508: PPUSH
20509: CALL_OW 251
20513: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20514: LD_ADDR_VAR 0 6
20518: PUSH
20519: LD_VAR 0 4
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PPUSH
20528: LD_INT 1
20530: PPUSH
20531: CALL_OW 12
20535: PLUS
20536: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20537: LD_ADDR_VAR 0 7
20541: PUSH
20542: LD_VAR 0 5
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PPUSH
20551: LD_INT 1
20553: PPUSH
20554: CALL_OW 12
20558: PLUS
20559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20560: LD_VAR 0 6
20564: PPUSH
20565: LD_VAR 0 7
20569: PPUSH
20570: CALL_OW 488
20574: NOT
20575: IFFALSE 20597
// begin _x := x ;
20577: LD_ADDR_VAR 0 6
20581: PUSH
20582: LD_VAR 0 4
20586: ST_TO_ADDR
// _y := y ;
20587: LD_ADDR_VAR 0 7
20591: PUSH
20592: LD_VAR 0 5
20596: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20597: LD_ADDR_VAR 0 3
20601: PUSH
20602: LD_INT 1
20604: PPUSH
20605: LD_VAR 0 14
20609: PPUSH
20610: CALL_OW 12
20614: ST_TO_ADDR
// case i of 1 :
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 1
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20645
20628: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20629: LD_VAR 0 1
20633: PPUSH
20634: LD_VAR 0 10
20638: PPUSH
20639: CALL_OW 115
20643: GO 20706
20645: LD_INT 2
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20675
20653: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20654: LD_VAR 0 1
20658: PPUSH
20659: LD_VAR 0 6
20663: PPUSH
20664: LD_VAR 0 7
20668: PPUSH
20669: CALL_OW 153
20673: GO 20706
20675: LD_INT 3
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20705
20683: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_VAR 0 6
20693: PPUSH
20694: LD_VAR 0 7
20698: PPUSH
20699: CALL_OW 154
20703: GO 20706
20705: POP
// end ;
20706: LD_VAR 0 2
20710: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20711: LD_INT 0
20713: PPUSH
20714: PPUSH
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
// if not unit or not building then
20719: LD_VAR 0 1
20723: NOT
20724: PUSH
20725: LD_VAR 0 2
20729: NOT
20730: OR
20731: IFFALSE 20735
// exit ;
20733: GO 20893
// x := GetX ( building ) ;
20735: LD_ADDR_VAR 0 5
20739: PUSH
20740: LD_VAR 0 2
20744: PPUSH
20745: CALL_OW 250
20749: ST_TO_ADDR
// y := GetY ( building ) ;
20750: LD_ADDR_VAR 0 6
20754: PUSH
20755: LD_VAR 0 2
20759: PPUSH
20760: CALL_OW 251
20764: ST_TO_ADDR
// for i = 0 to 5 do
20765: LD_ADDR_VAR 0 4
20769: PUSH
20770: DOUBLE
20771: LD_INT 0
20773: DEC
20774: ST_TO_ADDR
20775: LD_INT 5
20777: PUSH
20778: FOR_TO
20779: IFFALSE 20891
// begin _x := ShiftX ( x , i , 3 ) ;
20781: LD_ADDR_VAR 0 7
20785: PUSH
20786: LD_VAR 0 5
20790: PPUSH
20791: LD_VAR 0 4
20795: PPUSH
20796: LD_INT 3
20798: PPUSH
20799: CALL_OW 272
20803: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20804: LD_ADDR_VAR 0 8
20808: PUSH
20809: LD_VAR 0 6
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: LD_INT 3
20821: PPUSH
20822: CALL_OW 273
20826: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20827: LD_VAR 0 7
20831: PPUSH
20832: LD_VAR 0 8
20836: PPUSH
20837: CALL_OW 488
20841: NOT
20842: IFFALSE 20846
// continue ;
20844: GO 20778
// if HexInfo ( _x , _y ) = 0 then
20846: LD_VAR 0 7
20850: PPUSH
20851: LD_VAR 0 8
20855: PPUSH
20856: CALL_OW 428
20860: PUSH
20861: LD_INT 0
20863: EQUAL
20864: IFFALSE 20889
// begin ComMoveXY ( unit , _x , _y ) ;
20866: LD_VAR 0 1
20870: PPUSH
20871: LD_VAR 0 7
20875: PPUSH
20876: LD_VAR 0 8
20880: PPUSH
20881: CALL_OW 111
// exit ;
20885: POP
20886: POP
20887: GO 20893
// end ; end ;
20889: GO 20778
20891: POP
20892: POP
// end ;
20893: LD_VAR 0 3
20897: RET
// export function ScanBase ( side , base_area ) ; begin
20898: LD_INT 0
20900: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_VAR 0 2
20910: PPUSH
20911: LD_INT 81
20913: PUSH
20914: LD_VAR 0 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PPUSH
20923: CALL_OW 70
20927: ST_TO_ADDR
// end ;
20928: LD_VAR 0 3
20932: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20933: LD_INT 0
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20940: LD_VAR 0 1
20944: NOT
20945: PUSH
20946: LD_EXP 36
20950: PUSH
20951: LD_VAR 0 1
20955: ARRAY
20956: NOT
20957: OR
20958: PUSH
20959: LD_VAR 0 2
20963: NOT
20964: OR
20965: PUSH
20966: LD_VAR 0 3
20970: NOT
20971: OR
20972: IFFALSE 20976
// exit ;
20974: GO 21426
// side := mc_sides [ base ] ;
20976: LD_ADDR_VAR 0 6
20980: PUSH
20981: LD_EXP 62
20985: PUSH
20986: LD_VAR 0 1
20990: ARRAY
20991: ST_TO_ADDR
// if not side then
20992: LD_VAR 0 6
20996: NOT
20997: IFFALSE 21001
// exit ;
20999: GO 21426
// for i in solds do
21001: LD_ADDR_VAR 0 7
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21073
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21014: LD_VAR 0 7
21018: PPUSH
21019: CALL_OW 310
21023: PPUSH
21024: CALL_OW 266
21028: PUSH
21029: LD_INT 32
21031: PUSH
21032: LD_INT 31
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: IN
21039: IFFALSE 21059
// solds := solds diff i else
21041: LD_ADDR_VAR 0 2
21045: PUSH
21046: LD_VAR 0 2
21050: PUSH
21051: LD_VAR 0 7
21055: DIFF
21056: ST_TO_ADDR
21057: GO 21071
// SetTag ( i , 18 ) ;
21059: LD_VAR 0 7
21063: PPUSH
21064: LD_INT 18
21066: PPUSH
21067: CALL_OW 109
21071: GO 21011
21073: POP
21074: POP
// if not solds then
21075: LD_VAR 0 2
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21426
// repeat wait ( 0 0$1 ) ;
21084: LD_INT 35
21086: PPUSH
21087: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 6
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: CALL 20898 0 2
21110: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21111: LD_VAR 0 5
21115: NOT
21116: PUSH
21117: LD_VAR 0 5
21121: PUSH
21122: LD_INT 3
21124: GREATER
21125: OR
21126: PUSH
21127: LD_EXP 58
21131: PUSH
21132: LD_VAR 0 1
21136: ARRAY
21137: OR
21138: IFFALSE 21179
// begin for i in solds do
21140: LD_ADDR_VAR 0 7
21144: PUSH
21145: LD_VAR 0 2
21149: PUSH
21150: FOR_IN
21151: IFFALSE 21175
// if HasTask ( i ) then
21153: LD_VAR 0 7
21157: PPUSH
21158: CALL_OW 314
21162: IFFALSE 21173
// ComStop ( i ) ;
21164: LD_VAR 0 7
21168: PPUSH
21169: CALL_OW 141
21173: GO 21150
21175: POP
21176: POP
// break ;
21177: GO 21414
// end ; for i in solds do
21179: LD_ADDR_VAR 0 7
21183: PUSH
21184: LD_VAR 0 2
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21406
// begin if IsInUnit ( i ) then
21192: LD_VAR 0 7
21196: PPUSH
21197: CALL_OW 310
21201: IFFALSE 21212
// ComExitBuilding ( i ) ;
21203: LD_VAR 0 7
21207: PPUSH
21208: CALL_OW 122
// if GetLives ( i ) > 333 then
21212: LD_VAR 0 7
21216: PPUSH
21217: CALL_OW 256
21221: PUSH
21222: LD_INT 333
21224: GREATER
21225: IFFALSE 21253
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21227: LD_VAR 0 7
21231: PPUSH
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 7
21241: PPUSH
21242: CALL_OW 74
21246: PPUSH
21247: CALL_OW 115
21251: GO 21404
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21253: LD_ADDR_VAR 0 8
21257: PUSH
21258: LD_EXP 36
21262: PUSH
21263: LD_VAR 0 1
21267: ARRAY
21268: PPUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 30
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 30
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 30
21294: PUSH
21295: LD_INT 6
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: PPUSH
21308: CALL_OW 72
21312: PPUSH
21313: LD_VAR 0 7
21317: PPUSH
21318: CALL_OW 74
21322: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21323: LD_VAR 0 7
21327: PPUSH
21328: LD_VAR 0 8
21332: PPUSH
21333: CALL_OW 250
21337: PPUSH
21338: LD_INT 3
21340: PPUSH
21341: LD_INT 5
21343: PPUSH
21344: CALL_OW 272
21348: PPUSH
21349: LD_VAR 0 8
21353: PPUSH
21354: CALL_OW 251
21358: PPUSH
21359: LD_INT 3
21361: PPUSH
21362: LD_INT 5
21364: PPUSH
21365: CALL_OW 273
21369: PPUSH
21370: CALL_OW 111
// SetTag ( i , 0 ) ;
21374: LD_VAR 0 7
21378: PPUSH
21379: LD_INT 0
21381: PPUSH
21382: CALL_OW 109
// solds := solds diff i ;
21386: LD_ADDR_VAR 0 2
21390: PUSH
21391: LD_VAR 0 2
21395: PUSH
21396: LD_VAR 0 7
21400: DIFF
21401: ST_TO_ADDR
// continue ;
21402: GO 21189
// end ; end ;
21404: GO 21189
21406: POP
21407: POP
// until solds ;
21408: LD_VAR 0 2
21412: IFFALSE 21084
// MC_Reset ( base , 18 ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_INT 18
21421: PPUSH
21422: CALL 65942 0 2
// end ;
21426: LD_VAR 0 4
21430: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21431: LD_INT 0
21433: PPUSH
21434: PPUSH
21435: PPUSH
21436: PPUSH
21437: PPUSH
21438: PPUSH
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
21443: PPUSH
21444: PPUSH
21445: PPUSH
21446: PPUSH
21447: PPUSH
21448: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21449: LD_ADDR_VAR 0 12
21453: PUSH
21454: LD_EXP 36
21458: PUSH
21459: LD_VAR 0 1
21463: ARRAY
21464: PPUSH
21465: LD_INT 25
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 72
21479: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21480: LD_ADDR_VAR 0 8
21484: PUSH
21485: LD_EXP 36
21489: PUSH
21490: LD_VAR 0 1
21494: ARRAY
21495: PPUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 25
21511: PUSH
21512: LD_INT 5
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 8
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 9
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: PPUSH
21546: CALL_OW 72
21550: ST_TO_ADDR
// if not defenders and not solds then
21551: LD_VAR 0 2
21555: NOT
21556: PUSH
21557: LD_VAR 0 8
21561: NOT
21562: AND
21563: IFFALSE 21567
// exit ;
21565: GO 22896
// depot_under_attack := false ;
21567: LD_ADDR_VAR 0 16
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sold_defenders := [ ] ;
21575: LD_ADDR_VAR 0 17
21579: PUSH
21580: EMPTY
21581: ST_TO_ADDR
// if mechs then
21582: LD_VAR 0 12
21586: IFFALSE 21715
// for i in defenders do
21588: LD_ADDR_VAR 0 5
21592: PUSH
21593: LD_VAR 0 2
21597: PUSH
21598: FOR_IN
21599: IFFALSE 21713
// begin SetTag ( i , 20 ) ;
21601: LD_VAR 0 5
21605: PPUSH
21606: LD_INT 20
21608: PPUSH
21609: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21613: LD_VAR 0 5
21617: PPUSH
21618: CALL_OW 263
21622: PUSH
21623: LD_INT 1
21625: EQUAL
21626: PUSH
21627: LD_VAR 0 5
21631: PPUSH
21632: CALL_OW 311
21636: NOT
21637: AND
21638: PUSH
21639: LD_VAR 0 12
21643: AND
21644: IFFALSE 21711
// begin un := mechs [ 1 ] ;
21646: LD_ADDR_VAR 0 10
21650: PUSH
21651: LD_VAR 0 12
21655: PUSH
21656: LD_INT 1
21658: ARRAY
21659: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21660: LD_VAR 0 10
21664: PPUSH
21665: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21669: LD_VAR 0 10
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 180
// SetTag ( un , 19 ) ;
21683: LD_VAR 0 10
21687: PPUSH
21688: LD_INT 19
21690: PPUSH
21691: CALL_OW 109
// mechs := mechs diff un ;
21695: LD_ADDR_VAR 0 12
21699: PUSH
21700: LD_VAR 0 12
21704: PUSH
21705: LD_VAR 0 10
21709: DIFF
21710: ST_TO_ADDR
// end ; end ;
21711: GO 21598
21713: POP
21714: POP
// if solds then
21715: LD_VAR 0 8
21719: IFFALSE 21778
// for i in solds do
21721: LD_ADDR_VAR 0 5
21725: PUSH
21726: LD_VAR 0 8
21730: PUSH
21731: FOR_IN
21732: IFFALSE 21776
// if not GetTag ( i ) then
21734: LD_VAR 0 5
21738: PPUSH
21739: CALL_OW 110
21743: NOT
21744: IFFALSE 21774
// begin defenders := defenders union i ;
21746: LD_ADDR_VAR 0 2
21750: PUSH
21751: LD_VAR 0 2
21755: PUSH
21756: LD_VAR 0 5
21760: UNION
21761: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21762: LD_VAR 0 5
21766: PPUSH
21767: LD_INT 18
21769: PPUSH
21770: CALL_OW 109
// end ;
21774: GO 21731
21776: POP
21777: POP
// repeat wait ( 0 0$1 ) ;
21778: LD_INT 35
21780: PPUSH
21781: CALL_OW 67
// enemy := mc_scan [ base ] ;
21785: LD_ADDR_VAR 0 3
21789: PUSH
21790: LD_EXP 59
21794: PUSH
21795: LD_VAR 0 1
21799: ARRAY
21800: ST_TO_ADDR
// for i in defenders do
21801: LD_ADDR_VAR 0 5
21805: PUSH
21806: LD_VAR 0 2
21810: PUSH
21811: FOR_IN
21812: IFFALSE 22497
// begin e := NearestUnitToUnit ( enemy , i ) ;
21814: LD_ADDR_VAR 0 13
21818: PUSH
21819: LD_VAR 0 3
21823: PPUSH
21824: LD_VAR 0 5
21828: PPUSH
21829: CALL_OW 74
21833: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21834: LD_ADDR_VAR 0 16
21838: PUSH
21839: LD_EXP 36
21843: PUSH
21844: LD_VAR 0 1
21848: ARRAY
21849: PPUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 30
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: PPUSH
21878: CALL_OW 72
21882: NOT
21883: PUSH
21884: LD_EXP 36
21888: PUSH
21889: LD_VAR 0 1
21893: ARRAY
21894: PPUSH
21895: LD_INT 2
21897: PUSH
21898: LD_INT 30
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 30
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: PPUSH
21923: CALL_OW 72
21927: PPUSH
21928: CALL_OW 256
21932: PUSH
21933: LD_INT 600
21935: LESS
21936: OR
21937: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21938: LD_VAR 0 5
21942: PPUSH
21943: CALL_OW 247
21947: PUSH
21948: LD_INT 2
21950: DOUBLE
21951: EQUAL
21952: IFTRUE 21956
21954: GO 22203
21956: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
21957: LD_VAR 0 5
21961: PPUSH
21962: CALL_OW 256
21966: PUSH
21967: LD_INT 650
21969: GREATER
21970: PUSH
21971: LD_VAR 0 5
21975: PPUSH
21976: LD_VAR 0 13
21980: PPUSH
21981: CALL_OW 296
21985: PUSH
21986: LD_INT 40
21988: LESS
21989: AND
21990: IFFALSE 22008
// ComAttackUnit ( i , e ) else
21992: LD_VAR 0 5
21996: PPUSH
21997: LD_VAR 0 13
22001: PPUSH
22002: CALL_OW 115
22006: GO 22086
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22008: LD_VAR 0 5
22012: PPUSH
22013: LD_VAR 0 13
22017: PPUSH
22018: CALL_OW 296
22022: PUSH
22023: LD_INT 30
22025: GREATEREQUAL
22026: PUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL_OW 256
22036: PUSH
22037: LD_INT 650
22039: LESSEQUAL
22040: OR
22041: PUSH
22042: LD_VAR 0 5
22046: PPUSH
22047: LD_EXP 60
22051: PUSH
22052: LD_VAR 0 1
22056: ARRAY
22057: PPUSH
22058: CALL_OW 308
22062: NOT
22063: AND
22064: IFFALSE 22086
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22066: LD_VAR 0 5
22070: PPUSH
22071: LD_EXP 60
22075: PUSH
22076: LD_VAR 0 1
22080: ARRAY
22081: PPUSH
22082: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL_OW 256
22095: PUSH
22096: LD_INT 998
22098: LESS
22099: PUSH
22100: LD_VAR 0 5
22104: PPUSH
22105: CALL_OW 263
22109: PUSH
22110: LD_INT 1
22112: EQUAL
22113: AND
22114: PUSH
22115: LD_VAR 0 5
22119: PPUSH
22120: CALL_OW 311
22124: AND
22125: PUSH
22126: LD_VAR 0 5
22130: PPUSH
22131: LD_EXP 60
22135: PUSH
22136: LD_VAR 0 1
22140: ARRAY
22141: PPUSH
22142: CALL_OW 308
22146: AND
22147: IFFALSE 22201
// begin mech := IsDrivenBy ( i ) ;
22149: LD_ADDR_VAR 0 9
22153: PUSH
22154: LD_VAR 0 5
22158: PPUSH
22159: CALL_OW 311
22163: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22164: LD_VAR 0 9
22168: PPUSH
22169: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22173: LD_VAR 0 9
22177: PPUSH
22178: LD_VAR 0 5
22182: PPUSH
22183: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22187: LD_VAR 0 9
22191: PPUSH
22192: LD_VAR 0 5
22196: PPUSH
22197: CALL_OW 180
// end ; end ; unit_human :
22201: GO 22468
22203: LD_INT 1
22205: DOUBLE
22206: EQUAL
22207: IFTRUE 22211
22209: GO 22467
22211: POP
// begin b := IsInUnit ( i ) ;
22212: LD_ADDR_VAR 0 18
22216: PUSH
22217: LD_VAR 0 5
22221: PPUSH
22222: CALL_OW 310
22226: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22227: LD_ADDR_VAR 0 19
22231: PUSH
22232: LD_VAR 0 18
22236: NOT
22237: PUSH
22238: LD_VAR 0 18
22242: PPUSH
22243: CALL_OW 266
22247: PUSH
22248: LD_INT 32
22250: PUSH
22251: LD_INT 31
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: IN
22258: OR
22259: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22260: LD_VAR 0 16
22264: PUSH
22265: LD_VAR 0 2
22269: PPUSH
22270: LD_INT 21
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PPUSH
22280: CALL_OW 72
22284: PUSH
22285: LD_INT 1
22287: LESSEQUAL
22288: OR
22289: PUSH
22290: LD_VAR 0 19
22294: AND
22295: PUSH
22296: LD_VAR 0 5
22300: PUSH
22301: LD_VAR 0 17
22305: IN
22306: NOT
22307: AND
22308: IFFALSE 22401
// begin if b then
22310: LD_VAR 0 18
22314: IFFALSE 22363
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22316: LD_VAR 0 18
22320: PPUSH
22321: LD_VAR 0 3
22325: PPUSH
22326: LD_VAR 0 18
22330: PPUSH
22331: CALL_OW 74
22335: PPUSH
22336: CALL_OW 296
22340: PUSH
22341: LD_INT 10
22343: LESS
22344: PUSH
22345: LD_VAR 0 18
22349: PPUSH
22350: CALL_OW 461
22354: PUSH
22355: LD_INT 7
22357: NONEQUAL
22358: AND
22359: IFFALSE 22363
// continue ;
22361: GO 21811
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22363: LD_ADDR_VAR 0 17
22367: PUSH
22368: LD_VAR 0 17
22372: PPUSH
22373: LD_VAR 0 17
22377: PUSH
22378: LD_INT 1
22380: PLUS
22381: PPUSH
22382: LD_VAR 0 5
22386: PPUSH
22387: CALL_OW 1
22391: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22392: LD_VAR 0 5
22396: PPUSH
22397: CALL_OW 122
// end ; if sold_defenders then
22401: LD_VAR 0 17
22405: IFFALSE 22465
// if i in sold_defenders then
22407: LD_VAR 0 5
22411: PUSH
22412: LD_VAR 0 17
22416: IN
22417: IFFALSE 22465
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22419: LD_VAR 0 5
22423: PPUSH
22424: CALL_OW 314
22428: NOT
22429: PUSH
22430: LD_VAR 0 5
22434: PPUSH
22435: LD_VAR 0 13
22439: PPUSH
22440: CALL_OW 296
22444: PUSH
22445: LD_INT 30
22447: LESS
22448: AND
22449: IFFALSE 22465
// ComAttackUnit ( i , e ) ;
22451: LD_VAR 0 5
22455: PPUSH
22456: LD_VAR 0 13
22460: PPUSH
22461: CALL_OW 115
// end ; end ; end ;
22465: GO 22468
22467: POP
// if IsDead ( i ) then
22468: LD_VAR 0 5
22472: PPUSH
22473: CALL_OW 301
22477: IFFALSE 22495
// defenders := defenders diff i ;
22479: LD_ADDR_VAR 0 2
22483: PUSH
22484: LD_VAR 0 2
22488: PUSH
22489: LD_VAR 0 5
22493: DIFF
22494: ST_TO_ADDR
// end ;
22495: GO 21811
22497: POP
22498: POP
// until not enemy or not defenders ;
22499: LD_VAR 0 3
22503: NOT
22504: PUSH
22505: LD_VAR 0 2
22509: NOT
22510: OR
22511: IFFALSE 21778
// MC_Reset ( base , 18 ) ;
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_INT 18
22520: PPUSH
22521: CALL 65942 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22525: LD_ADDR_VAR 0 2
22529: PUSH
22530: LD_VAR 0 2
22534: PUSH
22535: LD_VAR 0 2
22539: PPUSH
22540: LD_INT 2
22542: PUSH
22543: LD_INT 25
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 25
22555: PUSH
22556: LD_INT 5
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 25
22565: PUSH
22566: LD_INT 8
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 9
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PPUSH
22590: CALL_OW 72
22594: DIFF
22595: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22596: LD_VAR 0 3
22600: NOT
22601: PUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PPUSH
22617: CALL_OW 72
22621: AND
22622: IFFALSE 22884
// begin tmp := FilterByTag ( defenders , 19 ) ;
22624: LD_ADDR_VAR 0 11
22628: PUSH
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 19
22636: PPUSH
22637: CALL 59240 0 2
22641: ST_TO_ADDR
// if tmp then
22642: LD_VAR 0 11
22646: IFFALSE 22716
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22648: LD_ADDR_VAR 0 11
22652: PUSH
22653: LD_VAR 0 11
22657: PPUSH
22658: LD_INT 25
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 72
22672: ST_TO_ADDR
// if tmp then
22673: LD_VAR 0 11
22677: IFFALSE 22716
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22679: LD_ADDR_EXP 48
22683: PUSH
22684: LD_EXP 48
22688: PPUSH
22689: LD_VAR 0 1
22693: PPUSH
22694: LD_EXP 48
22698: PUSH
22699: LD_VAR 0 1
22703: ARRAY
22704: PUSH
22705: LD_VAR 0 11
22709: UNION
22710: PPUSH
22711: CALL_OW 1
22715: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22716: LD_VAR 0 1
22720: PPUSH
22721: LD_INT 19
22723: PPUSH
22724: CALL 65942 0 2
// repeat wait ( 0 0$1 ) ;
22728: LD_INT 35
22730: PPUSH
22731: CALL_OW 67
// for i in defenders do
22735: LD_ADDR_VAR 0 5
22739: PUSH
22740: LD_VAR 0 2
22744: PUSH
22745: FOR_IN
22746: IFFALSE 22835
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22748: LD_VAR 0 5
22752: PPUSH
22753: LD_EXP 60
22757: PUSH
22758: LD_VAR 0 1
22762: ARRAY
22763: PPUSH
22764: CALL_OW 308
22768: NOT
22769: IFFALSE 22793
// ComMoveToArea ( i , mc_parking [ base ] ) else
22771: LD_VAR 0 5
22775: PPUSH
22776: LD_EXP 60
22780: PUSH
22781: LD_VAR 0 1
22785: ARRAY
22786: PPUSH
22787: CALL_OW 113
22791: GO 22833
// if GetControl ( i ) = control_manual then
22793: LD_VAR 0 5
22797: PPUSH
22798: CALL_OW 263
22802: PUSH
22803: LD_INT 1
22805: EQUAL
22806: IFFALSE 22833
// if IsDrivenBy ( i ) then
22808: LD_VAR 0 5
22812: PPUSH
22813: CALL_OW 311
22817: IFFALSE 22833
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL_OW 311
22828: PPUSH
22829: CALL_OW 121
// end ;
22833: GO 22745
22835: POP
22836: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22837: LD_VAR 0 2
22841: PPUSH
22842: LD_INT 95
22844: PUSH
22845: LD_EXP 60
22849: PUSH
22850: LD_VAR 0 1
22854: ARRAY
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PPUSH
22860: CALL_OW 72
22864: PUSH
22865: LD_VAR 0 2
22869: EQUAL
22870: PUSH
22871: LD_EXP 59
22875: PUSH
22876: LD_VAR 0 1
22880: ARRAY
22881: OR
22882: IFFALSE 22728
// end ; MC_Reset ( base , 20 ) ;
22884: LD_VAR 0 1
22888: PPUSH
22889: LD_INT 20
22891: PPUSH
22892: CALL 65942 0 2
// end ;
22896: LD_VAR 0 4
22900: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22901: LD_INT 0
22903: PPUSH
22904: PPUSH
22905: PPUSH
22906: PPUSH
// result := false ;
22907: LD_ADDR_VAR 0 2
22911: PUSH
22912: LD_INT 0
22914: ST_TO_ADDR
// side := GetSide ( unit ) ;
22915: LD_ADDR_VAR 0 3
22919: PUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 255
22929: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22930: LD_ADDR_VAR 0 4
22934: PUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 248
22944: ST_TO_ADDR
// case nat of 1 :
22945: LD_VAR 0 4
22949: PUSH
22950: LD_INT 1
22952: DOUBLE
22953: EQUAL
22954: IFTRUE 22958
22956: GO 22969
22958: POP
// tech := tech_lassight ; 2 :
22959: LD_ADDR_VAR 0 5
22963: PUSH
22964: LD_INT 12
22966: ST_TO_ADDR
22967: GO 23008
22969: LD_INT 2
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 22988
22977: POP
// tech := tech_mortar ; 3 :
22978: LD_ADDR_VAR 0 5
22982: PUSH
22983: LD_INT 41
22985: ST_TO_ADDR
22986: GO 23008
22988: LD_INT 3
22990: DOUBLE
22991: EQUAL
22992: IFTRUE 22996
22994: GO 23007
22996: POP
// tech := tech_bazooka ; end ;
22997: LD_ADDR_VAR 0 5
23001: PUSH
23002: LD_INT 44
23004: ST_TO_ADDR
23005: GO 23008
23007: POP
// if Researched ( side , tech ) then
23008: LD_VAR 0 3
23012: PPUSH
23013: LD_VAR 0 5
23017: PPUSH
23018: CALL_OW 325
23022: IFFALSE 23049
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_INT 5
23031: PUSH
23032: LD_INT 8
23034: PUSH
23035: LD_INT 9
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_VAR 0 4
23047: ARRAY
23048: ST_TO_ADDR
// end ;
23049: LD_VAR 0 2
23053: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// if not mines then
23059: LD_VAR 0 2
23063: NOT
23064: IFFALSE 23068
// exit ;
23066: GO 23212
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23068: LD_ADDR_VAR 0 5
23072: PUSH
23073: LD_INT 81
23075: PUSH
23076: LD_VAR 0 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: LD_INT 21
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PPUSH
23106: CALL_OW 69
23110: ST_TO_ADDR
// for i in mines do
23111: LD_ADDR_VAR 0 4
23115: PUSH
23116: LD_VAR 0 2
23120: PUSH
23121: FOR_IN
23122: IFFALSE 23210
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23124: LD_VAR 0 4
23128: PUSH
23129: LD_INT 1
23131: ARRAY
23132: PPUSH
23133: LD_VAR 0 4
23137: PUSH
23138: LD_INT 2
23140: ARRAY
23141: PPUSH
23142: CALL_OW 458
23146: NOT
23147: IFFALSE 23151
// continue ;
23149: GO 23121
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23151: LD_VAR 0 4
23155: PUSH
23156: LD_INT 1
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 4
23164: PUSH
23165: LD_INT 2
23167: ARRAY
23168: PPUSH
23169: CALL_OW 428
23173: PUSH
23174: LD_VAR 0 5
23178: IN
23179: IFFALSE 23208
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23181: LD_VAR 0 4
23185: PUSH
23186: LD_INT 1
23188: ARRAY
23189: PPUSH
23190: LD_VAR 0 4
23194: PUSH
23195: LD_INT 2
23197: ARRAY
23198: PPUSH
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 456
// end ;
23208: GO 23121
23210: POP
23211: POP
// end ;
23212: LD_VAR 0 3
23216: RET
// export function Count ( array ) ; var i ; begin
23217: LD_INT 0
23219: PPUSH
23220: PPUSH
// result := 0 ;
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_INT 0
23228: ST_TO_ADDR
// for i in array do
23229: LD_ADDR_VAR 0 3
23233: PUSH
23234: LD_VAR 0 1
23238: PUSH
23239: FOR_IN
23240: IFFALSE 23264
// if i then
23242: LD_VAR 0 3
23246: IFFALSE 23262
// result := result + 1 ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_VAR 0 2
23257: PUSH
23258: LD_INT 1
23260: PLUS
23261: ST_TO_ADDR
23262: GO 23239
23264: POP
23265: POP
// end ;
23266: LD_VAR 0 2
23270: RET
// export function IsEmpty ( building ) ; begin
23271: LD_INT 0
23273: PPUSH
// if not building then
23274: LD_VAR 0 1
23278: NOT
23279: IFFALSE 23283
// exit ;
23281: GO 23326
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_VAR 0 1
23292: PUSH
23293: LD_INT 22
23295: PUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 255
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 58
23312: PUSH
23313: EMPTY
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PPUSH
23320: CALL_OW 69
23324: IN
23325: ST_TO_ADDR
// end ;
23326: LD_VAR 0 2
23330: RET
// export function IsNotFull ( building ) ; begin
23331: LD_INT 0
23333: PPUSH
// if not building then
23334: LD_VAR 0 1
23338: NOT
23339: IFFALSE 23343
// exit ;
23341: GO 23362
// result := UnitsInside ( building ) < 6 ;
23343: LD_ADDR_VAR 0 2
23347: PUSH
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 313
23357: PUSH
23358: LD_INT 6
23360: LESS
23361: ST_TO_ADDR
// end ;
23362: LD_VAR 0 2
23366: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23367: LD_INT 0
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
// tmp := [ ] ;
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: EMPTY
23379: ST_TO_ADDR
// list := [ ] ;
23380: LD_ADDR_VAR 0 5
23384: PUSH
23385: EMPTY
23386: ST_TO_ADDR
// for i = 16 to 25 do
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: DOUBLE
23393: LD_INT 16
23395: DEC
23396: ST_TO_ADDR
23397: LD_INT 25
23399: PUSH
23400: FOR_TO
23401: IFFALSE 23474
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23403: LD_ADDR_VAR 0 3
23407: PUSH
23408: LD_VAR 0 3
23412: PUSH
23413: LD_INT 22
23415: PUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 255
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 91
23432: PUSH
23433: LD_VAR 0 1
23437: PUSH
23438: LD_INT 6
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_VAR 0 4
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: ADD
23471: ST_TO_ADDR
23472: GO 23400
23474: POP
23475: POP
// for i = 1 to tmp do
23476: LD_ADDR_VAR 0 4
23480: PUSH
23481: DOUBLE
23482: LD_INT 1
23484: DEC
23485: ST_TO_ADDR
23486: LD_VAR 0 3
23490: PUSH
23491: FOR_TO
23492: IFFALSE 23580
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23494: LD_ADDR_VAR 0 5
23498: PUSH
23499: LD_VAR 0 5
23503: PUSH
23504: LD_VAR 0 3
23508: PUSH
23509: LD_VAR 0 4
23513: ARRAY
23514: PPUSH
23515: CALL_OW 266
23519: PUSH
23520: LD_VAR 0 3
23524: PUSH
23525: LD_VAR 0 4
23529: ARRAY
23530: PPUSH
23531: CALL_OW 250
23535: PUSH
23536: LD_VAR 0 3
23540: PUSH
23541: LD_VAR 0 4
23545: ARRAY
23546: PPUSH
23547: CALL_OW 251
23551: PUSH
23552: LD_VAR 0 3
23556: PUSH
23557: LD_VAR 0 4
23561: ARRAY
23562: PPUSH
23563: CALL_OW 254
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: ADD
23577: ST_TO_ADDR
23578: GO 23491
23580: POP
23581: POP
// result := list ;
23582: LD_ADDR_VAR 0 2
23586: PUSH
23587: LD_VAR 0 5
23591: ST_TO_ADDR
// end ;
23592: LD_VAR 0 2
23596: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
// if not factory then
23606: LD_VAR 0 1
23610: NOT
23611: IFFALSE 23615
// exit ;
23613: GO 24147
// if control = control_apeman then
23615: LD_VAR 0 4
23619: PUSH
23620: LD_INT 5
23622: EQUAL
23623: IFFALSE 23732
// begin tmp := UnitsInside ( factory ) ;
23625: LD_ADDR_VAR 0 8
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 313
23639: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23640: LD_VAR 0 8
23644: PPUSH
23645: LD_INT 25
23647: PUSH
23648: LD_INT 12
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PPUSH
23655: CALL_OW 72
23659: NOT
23660: IFFALSE 23670
// control := control_manual ;
23662: LD_ADDR_VAR 0 4
23666: PUSH
23667: LD_INT 1
23669: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23670: LD_ADDR_VAR 0 8
23674: PUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL 23367 0 1
23684: ST_TO_ADDR
// if tmp then
23685: LD_VAR 0 8
23689: IFFALSE 23732
// begin for i in tmp do
23691: LD_ADDR_VAR 0 7
23695: PUSH
23696: LD_VAR 0 8
23700: PUSH
23701: FOR_IN
23702: IFFALSE 23730
// if i [ 1 ] = b_ext_radar then
23704: LD_VAR 0 7
23708: PUSH
23709: LD_INT 1
23711: ARRAY
23712: PUSH
23713: LD_INT 20
23715: EQUAL
23716: IFFALSE 23728
// begin control := control_remote ;
23718: LD_ADDR_VAR 0 4
23722: PUSH
23723: LD_INT 2
23725: ST_TO_ADDR
// break ;
23726: GO 23730
// end ;
23728: GO 23701
23730: POP
23731: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23732: LD_VAR 0 1
23736: PPUSH
23737: LD_VAR 0 2
23741: PPUSH
23742: LD_VAR 0 3
23746: PPUSH
23747: LD_VAR 0 4
23751: PPUSH
23752: LD_VAR 0 5
23756: PPUSH
23757: CALL_OW 448
23761: IFFALSE 23796
// begin result := [ chassis , engine , control , weapon ] ;
23763: LD_ADDR_VAR 0 6
23767: PUSH
23768: LD_VAR 0 2
23772: PUSH
23773: LD_VAR 0 3
23777: PUSH
23778: LD_VAR 0 4
23782: PUSH
23783: LD_VAR 0 5
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: ST_TO_ADDR
// exit ;
23794: GO 24147
// end ; _chassis := AvailableChassisList ( factory ) ;
23796: LD_ADDR_VAR 0 9
23800: PUSH
23801: LD_VAR 0 1
23805: PPUSH
23806: CALL_OW 475
23810: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23811: LD_ADDR_VAR 0 11
23815: PUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL_OW 476
23825: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23826: LD_ADDR_VAR 0 12
23830: PUSH
23831: LD_VAR 0 1
23835: PPUSH
23836: CALL_OW 477
23840: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23841: LD_ADDR_VAR 0 10
23845: PUSH
23846: LD_VAR 0 1
23850: PPUSH
23851: CALL_OW 478
23855: ST_TO_ADDR
// if not chassis in _chassis then
23856: LD_VAR 0 2
23860: PUSH
23861: LD_VAR 0 9
23865: IN
23866: NOT
23867: IFFALSE 23893
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23869: LD_ADDR_VAR 0 2
23873: PUSH
23874: LD_VAR 0 9
23878: PUSH
23879: LD_INT 1
23881: PPUSH
23882: LD_VAR 0 9
23886: PPUSH
23887: CALL_OW 12
23891: ARRAY
23892: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23893: LD_VAR 0 2
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: CALL 24152 0 2
23907: NOT
23908: IFFALSE 23967
// repeat engine := _engine [ 1 ] ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_VAR 0 11
23919: PUSH
23920: LD_INT 1
23922: ARRAY
23923: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23924: LD_ADDR_VAR 0 11
23928: PUSH
23929: LD_VAR 0 11
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 3
23941: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23942: LD_VAR 0 2
23946: PPUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: CALL 24152 0 2
23956: PUSH
23957: LD_VAR 0 11
23961: PUSH
23962: EMPTY
23963: EQUAL
23964: OR
23965: IFFALSE 23910
// if not control in _control then
23967: LD_VAR 0 4
23971: PUSH
23972: LD_VAR 0 12
23976: IN
23977: NOT
23978: IFFALSE 24004
// control := _control [ rand ( 1 , _control ) ] ;
23980: LD_ADDR_VAR 0 4
23984: PUSH
23985: LD_VAR 0 12
23989: PUSH
23990: LD_INT 1
23992: PPUSH
23993: LD_VAR 0 12
23997: PPUSH
23998: CALL_OW 12
24002: ARRAY
24003: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_VAR 0 5
24013: PPUSH
24014: CALL 24372 0 2
24018: NOT
24019: IFFALSE 24078
// repeat weapon := _weapon [ 1 ] ;
24021: LD_ADDR_VAR 0 5
24025: PUSH
24026: LD_VAR 0 10
24030: PUSH
24031: LD_INT 1
24033: ARRAY
24034: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24035: LD_ADDR_VAR 0 10
24039: PUSH
24040: LD_VAR 0 10
24044: PPUSH
24045: LD_INT 1
24047: PPUSH
24048: CALL_OW 3
24052: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24053: LD_VAR 0 2
24057: PPUSH
24058: LD_VAR 0 5
24062: PPUSH
24063: CALL 24372 0 2
24067: PUSH
24068: LD_VAR 0 10
24072: PUSH
24073: EMPTY
24074: EQUAL
24075: OR
24076: IFFALSE 24021
// result := [ ] ;
24078: LD_ADDR_VAR 0 6
24082: PUSH
24083: EMPTY
24084: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24085: LD_VAR 0 1
24089: PPUSH
24090: LD_VAR 0 2
24094: PPUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: LD_VAR 0 4
24104: PPUSH
24105: LD_VAR 0 5
24109: PPUSH
24110: CALL_OW 448
24114: IFFALSE 24147
// result := [ chassis , engine , control , weapon ] ;
24116: LD_ADDR_VAR 0 6
24120: PUSH
24121: LD_VAR 0 2
24125: PUSH
24126: LD_VAR 0 3
24130: PUSH
24131: LD_VAR 0 4
24135: PUSH
24136: LD_VAR 0 5
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// end ;
24147: LD_VAR 0 6
24151: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24152: LD_INT 0
24154: PPUSH
// if not chassis or not engine then
24155: LD_VAR 0 1
24159: NOT
24160: PUSH
24161: LD_VAR 0 2
24165: NOT
24166: OR
24167: IFFALSE 24171
// exit ;
24169: GO 24367
// case engine of engine_solar :
24171: LD_VAR 0 2
24175: PUSH
24176: LD_INT 2
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24222
24184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 11
24192: PUSH
24193: LD_INT 12
24195: PUSH
24196: LD_INT 13
24198: PUSH
24199: LD_INT 14
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: LD_INT 3
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: ST_TO_ADDR
24220: GO 24351
24222: LD_INT 1
24224: DOUBLE
24225: EQUAL
24226: IFTRUE 24230
24228: GO 24292
24230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24231: LD_ADDR_VAR 0 3
24235: PUSH
24236: LD_INT 11
24238: PUSH
24239: LD_INT 12
24241: PUSH
24242: LD_INT 13
24244: PUSH
24245: LD_INT 14
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 3
24256: PUSH
24257: LD_INT 4
24259: PUSH
24260: LD_INT 5
24262: PUSH
24263: LD_INT 21
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 22
24271: PUSH
24272: LD_INT 24
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: ST_TO_ADDR
24290: GO 24351
24292: LD_INT 3
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24350
24300: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24301: LD_ADDR_VAR 0 3
24305: PUSH
24306: LD_INT 13
24308: PUSH
24309: LD_INT 14
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: LD_INT 4
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: LD_INT 21
24326: PUSH
24327: LD_INT 22
24329: PUSH
24330: LD_INT 23
24332: PUSH
24333: LD_INT 24
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
24348: GO 24351
24350: POP
// result := ( chassis in result ) ;
24351: LD_ADDR_VAR 0 3
24355: PUSH
24356: LD_VAR 0 1
24360: PUSH
24361: LD_VAR 0 3
24365: IN
24366: ST_TO_ADDR
// end ;
24367: LD_VAR 0 3
24371: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24372: LD_INT 0
24374: PPUSH
// if not chassis or not weapon then
24375: LD_VAR 0 1
24379: NOT
24380: PUSH
24381: LD_VAR 0 2
24385: NOT
24386: OR
24387: IFFALSE 24391
// exit ;
24389: GO 25417
// case weapon of us_machine_gun :
24391: LD_VAR 0 2
24395: PUSH
24396: LD_INT 2
24398: DOUBLE
24399: EQUAL
24400: IFTRUE 24404
24402: GO 24434
24404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24405: LD_ADDR_VAR 0 3
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 4
24421: PUSH
24422: LD_INT 5
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 25401
24434: LD_INT 3
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24472
24442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 4
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: ST_TO_ADDR
24470: GO 25401
24472: LD_INT 11
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24510
24480: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: LD_INT 4
24497: PUSH
24498: LD_INT 5
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
24508: GO 25401
24510: LD_INT 4
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24544
24518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24519: LD_ADDR_VAR 0 3
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 3
24529: PUSH
24530: LD_INT 4
24532: PUSH
24533: LD_INT 5
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: ST_TO_ADDR
24542: GO 25401
24544: LD_INT 5
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24578
24552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24553: LD_ADDR_VAR 0 3
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: LD_INT 4
24566: PUSH
24567: LD_INT 5
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: ST_TO_ADDR
24576: GO 25401
24578: LD_INT 9
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24612
24586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: LD_INT 4
24600: PUSH
24601: LD_INT 5
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
24610: GO 25401
24612: LD_INT 7
24614: DOUBLE
24615: EQUAL
24616: IFTRUE 24620
24618: GO 24646
24620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24621: LD_ADDR_VAR 0 3
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: LD_INT 4
24634: PUSH
24635: LD_INT 5
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: ST_TO_ADDR
24644: GO 25401
24646: LD_INT 12
24648: DOUBLE
24649: EQUAL
24650: IFTRUE 24654
24652: GO 24680
24654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: LD_INT 4
24668: PUSH
24669: LD_INT 5
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
24678: GO 25401
24680: LD_INT 13
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24714
24688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24689: LD_ADDR_VAR 0 3
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: LD_INT 4
24702: PUSH
24703: LD_INT 5
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
24712: GO 25401
24714: LD_INT 14
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24740
24722: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: LD_INT 4
24730: PUSH
24731: LD_INT 5
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: ST_TO_ADDR
24738: GO 25401
24740: LD_INT 6
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24766
24748: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: ST_TO_ADDR
24764: GO 25401
24766: LD_INT 10
24768: DOUBLE
24769: EQUAL
24770: IFTRUE 24774
24772: GO 24792
24774: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24775: LD_ADDR_VAR 0 3
24779: PUSH
24780: LD_INT 4
24782: PUSH
24783: LD_INT 5
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: ST_TO_ADDR
24790: GO 25401
24792: LD_INT 22
24794: DOUBLE
24795: EQUAL
24796: IFTRUE 24800
24798: GO 24826
24800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24801: LD_ADDR_VAR 0 3
24805: PUSH
24806: LD_INT 11
24808: PUSH
24809: LD_INT 12
24811: PUSH
24812: LD_INT 13
24814: PUSH
24815: LD_INT 14
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
24824: GO 25401
24826: LD_INT 23
24828: DOUBLE
24829: EQUAL
24830: IFTRUE 24834
24832: GO 24860
24834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24835: LD_ADDR_VAR 0 3
24839: PUSH
24840: LD_INT 11
24842: PUSH
24843: LD_INT 12
24845: PUSH
24846: LD_INT 13
24848: PUSH
24849: LD_INT 14
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: ST_TO_ADDR
24858: GO 25401
24860: LD_INT 24
24862: DOUBLE
24863: EQUAL
24864: IFTRUE 24868
24866: GO 24894
24868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_INT 11
24876: PUSH
24877: LD_INT 12
24879: PUSH
24880: LD_INT 13
24882: PUSH
24883: LD_INT 14
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: ST_TO_ADDR
24892: GO 25401
24894: LD_INT 30
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 24928
24902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_INT 11
24910: PUSH
24911: LD_INT 12
24913: PUSH
24914: LD_INT 13
24916: PUSH
24917: LD_INT 14
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: ST_TO_ADDR
24926: GO 25401
24928: LD_INT 25
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24954
24936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24937: LD_ADDR_VAR 0 3
24941: PUSH
24942: LD_INT 13
24944: PUSH
24945: LD_INT 14
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: ST_TO_ADDR
24952: GO 25401
24954: LD_INT 27
24956: DOUBLE
24957: EQUAL
24958: IFTRUE 24962
24960: GO 24980
24962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24963: LD_ADDR_VAR 0 3
24967: PUSH
24968: LD_INT 13
24970: PUSH
24971: LD_INT 14
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: ST_TO_ADDR
24978: GO 25401
24980: LD_INT 28
24982: DOUBLE
24983: EQUAL
24984: IFTRUE 24988
24986: GO 25006
24988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 13
24996: PUSH
24997: LD_INT 14
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: ST_TO_ADDR
25004: GO 25401
25006: LD_INT 29
25008: DOUBLE
25009: EQUAL
25010: IFTRUE 25014
25012: GO 25032
25014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25015: LD_ADDR_VAR 0 3
25019: PUSH
25020: LD_INT 13
25022: PUSH
25023: LD_INT 14
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: ST_TO_ADDR
25030: GO 25401
25032: LD_INT 31
25034: DOUBLE
25035: EQUAL
25036: IFTRUE 25040
25038: GO 25058
25040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25041: LD_ADDR_VAR 0 3
25045: PUSH
25046: LD_INT 13
25048: PUSH
25049: LD_INT 14
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: ST_TO_ADDR
25056: GO 25401
25058: LD_INT 26
25060: DOUBLE
25061: EQUAL
25062: IFTRUE 25066
25064: GO 25084
25066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: LD_INT 13
25074: PUSH
25075: LD_INT 14
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: ST_TO_ADDR
25082: GO 25401
25084: LD_INT 42
25086: DOUBLE
25087: EQUAL
25088: IFTRUE 25092
25090: GO 25118
25092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 21
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_INT 23
25106: PUSH
25107: LD_INT 24
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: ST_TO_ADDR
25116: GO 25401
25118: LD_INT 43
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25152
25126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_INT 21
25134: PUSH
25135: LD_INT 22
25137: PUSH
25138: LD_INT 23
25140: PUSH
25141: LD_INT 24
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: ST_TO_ADDR
25150: GO 25401
25152: LD_INT 44
25154: DOUBLE
25155: EQUAL
25156: IFTRUE 25160
25158: GO 25186
25160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25161: LD_ADDR_VAR 0 3
25165: PUSH
25166: LD_INT 21
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_INT 23
25174: PUSH
25175: LD_INT 24
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: ST_TO_ADDR
25184: GO 25401
25186: LD_INT 45
25188: DOUBLE
25189: EQUAL
25190: IFTRUE 25194
25192: GO 25220
25194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_INT 21
25202: PUSH
25203: LD_INT 22
25205: PUSH
25206: LD_INT 23
25208: PUSH
25209: LD_INT 24
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: ST_TO_ADDR
25218: GO 25401
25220: LD_INT 49
25222: DOUBLE
25223: EQUAL
25224: IFTRUE 25228
25226: GO 25254
25228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25229: LD_ADDR_VAR 0 3
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 22
25239: PUSH
25240: LD_INT 23
25242: PUSH
25243: LD_INT 24
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: ST_TO_ADDR
25252: GO 25401
25254: LD_INT 51
25256: DOUBLE
25257: EQUAL
25258: IFTRUE 25262
25260: GO 25288
25262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25263: LD_ADDR_VAR 0 3
25267: PUSH
25268: LD_INT 21
25270: PUSH
25271: LD_INT 22
25273: PUSH
25274: LD_INT 23
25276: PUSH
25277: LD_INT 24
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: ST_TO_ADDR
25286: GO 25401
25288: LD_INT 52
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25322
25296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25297: LD_ADDR_VAR 0 3
25301: PUSH
25302: LD_INT 21
25304: PUSH
25305: LD_INT 22
25307: PUSH
25308: LD_INT 23
25310: PUSH
25311: LD_INT 24
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: ST_TO_ADDR
25320: GO 25401
25322: LD_INT 53
25324: DOUBLE
25325: EQUAL
25326: IFTRUE 25330
25328: GO 25348
25330: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25331: LD_ADDR_VAR 0 3
25335: PUSH
25336: LD_INT 23
25338: PUSH
25339: LD_INT 24
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: ST_TO_ADDR
25346: GO 25401
25348: LD_INT 46
25350: DOUBLE
25351: EQUAL
25352: IFTRUE 25356
25354: GO 25374
25356: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25357: LD_ADDR_VAR 0 3
25361: PUSH
25362: LD_INT 23
25364: PUSH
25365: LD_INT 24
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: ST_TO_ADDR
25372: GO 25401
25374: LD_INT 47
25376: DOUBLE
25377: EQUAL
25378: IFTRUE 25382
25380: GO 25400
25382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 23
25390: PUSH
25391: LD_INT 24
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: ST_TO_ADDR
25398: GO 25401
25400: POP
// result := ( chassis in result ) ;
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: LD_VAR 0 1
25410: PUSH
25411: LD_VAR 0 3
25415: IN
25416: ST_TO_ADDR
// end ;
25417: LD_VAR 0 3
25421: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25422: LD_INT 0
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
// result := array ;
25431: LD_ADDR_VAR 0 5
25435: PUSH
25436: LD_VAR 0 1
25440: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25441: LD_VAR 0 1
25445: NOT
25446: PUSH
25447: LD_VAR 0 2
25451: NOT
25452: OR
25453: PUSH
25454: LD_VAR 0 3
25458: NOT
25459: OR
25460: PUSH
25461: LD_VAR 0 2
25465: PUSH
25466: LD_VAR 0 1
25470: GREATER
25471: OR
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_VAR 0 1
25482: GREATER
25483: OR
25484: IFFALSE 25488
// exit ;
25486: GO 25784
// if direction then
25488: LD_VAR 0 4
25492: IFFALSE 25556
// begin d := 1 ;
25494: LD_ADDR_VAR 0 9
25498: PUSH
25499: LD_INT 1
25501: ST_TO_ADDR
// if i_from > i_to then
25502: LD_VAR 0 2
25506: PUSH
25507: LD_VAR 0 3
25511: GREATER
25512: IFFALSE 25538
// length := ( array - i_from ) + i_to else
25514: LD_ADDR_VAR 0 11
25518: PUSH
25519: LD_VAR 0 1
25523: PUSH
25524: LD_VAR 0 2
25528: MINUS
25529: PUSH
25530: LD_VAR 0 3
25534: PLUS
25535: ST_TO_ADDR
25536: GO 25554
// length := i_to - i_from ;
25538: LD_ADDR_VAR 0 11
25542: PUSH
25543: LD_VAR 0 3
25547: PUSH
25548: LD_VAR 0 2
25552: MINUS
25553: ST_TO_ADDR
// end else
25554: GO 25617
// begin d := - 1 ;
25556: LD_ADDR_VAR 0 9
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: ST_TO_ADDR
// if i_from > i_to then
25565: LD_VAR 0 2
25569: PUSH
25570: LD_VAR 0 3
25574: GREATER
25575: IFFALSE 25595
// length := i_from - i_to else
25577: LD_ADDR_VAR 0 11
25581: PUSH
25582: LD_VAR 0 2
25586: PUSH
25587: LD_VAR 0 3
25591: MINUS
25592: ST_TO_ADDR
25593: GO 25617
// length := ( array - i_to ) + i_from ;
25595: LD_ADDR_VAR 0 11
25599: PUSH
25600: LD_VAR 0 1
25604: PUSH
25605: LD_VAR 0 3
25609: MINUS
25610: PUSH
25611: LD_VAR 0 2
25615: PLUS
25616: ST_TO_ADDR
// end ; if not length then
25617: LD_VAR 0 11
25621: NOT
25622: IFFALSE 25626
// exit ;
25624: GO 25784
// tmp := array ;
25626: LD_ADDR_VAR 0 10
25630: PUSH
25631: LD_VAR 0 1
25635: ST_TO_ADDR
// for i = 1 to length do
25636: LD_ADDR_VAR 0 6
25640: PUSH
25641: DOUBLE
25642: LD_INT 1
25644: DEC
25645: ST_TO_ADDR
25646: LD_VAR 0 11
25650: PUSH
25651: FOR_TO
25652: IFFALSE 25772
// begin for j = 1 to array do
25654: LD_ADDR_VAR 0 7
25658: PUSH
25659: DOUBLE
25660: LD_INT 1
25662: DEC
25663: ST_TO_ADDR
25664: LD_VAR 0 1
25668: PUSH
25669: FOR_TO
25670: IFFALSE 25758
// begin k := j + d ;
25672: LD_ADDR_VAR 0 8
25676: PUSH
25677: LD_VAR 0 7
25681: PUSH
25682: LD_VAR 0 9
25686: PLUS
25687: ST_TO_ADDR
// if k > array then
25688: LD_VAR 0 8
25692: PUSH
25693: LD_VAR 0 1
25697: GREATER
25698: IFFALSE 25708
// k := 1 ;
25700: LD_ADDR_VAR 0 8
25704: PUSH
25705: LD_INT 1
25707: ST_TO_ADDR
// if not k then
25708: LD_VAR 0 8
25712: NOT
25713: IFFALSE 25725
// k := array ;
25715: LD_ADDR_VAR 0 8
25719: PUSH
25720: LD_VAR 0 1
25724: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25725: LD_ADDR_VAR 0 10
25729: PUSH
25730: LD_VAR 0 10
25734: PPUSH
25735: LD_VAR 0 8
25739: PPUSH
25740: LD_VAR 0 1
25744: PUSH
25745: LD_VAR 0 7
25749: ARRAY
25750: PPUSH
25751: CALL_OW 1
25755: ST_TO_ADDR
// end ;
25756: GO 25669
25758: POP
25759: POP
// array := tmp ;
25760: LD_ADDR_VAR 0 1
25764: PUSH
25765: LD_VAR 0 10
25769: ST_TO_ADDR
// end ;
25770: GO 25651
25772: POP
25773: POP
// result := array ;
25774: LD_ADDR_VAR 0 5
25778: PUSH
25779: LD_VAR 0 1
25783: ST_TO_ADDR
// end ;
25784: LD_VAR 0 5
25788: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25789: LD_INT 0
25791: PPUSH
25792: PPUSH
// result := 0 ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// if not array or not value in array then
25801: LD_VAR 0 1
25805: NOT
25806: PUSH
25807: LD_VAR 0 2
25811: PUSH
25812: LD_VAR 0 1
25816: IN
25817: NOT
25818: OR
25819: IFFALSE 25823
// exit ;
25821: GO 25877
// for i = 1 to array do
25823: LD_ADDR_VAR 0 4
25827: PUSH
25828: DOUBLE
25829: LD_INT 1
25831: DEC
25832: ST_TO_ADDR
25833: LD_VAR 0 1
25837: PUSH
25838: FOR_TO
25839: IFFALSE 25875
// if value = array [ i ] then
25841: LD_VAR 0 2
25845: PUSH
25846: LD_VAR 0 1
25850: PUSH
25851: LD_VAR 0 4
25855: ARRAY
25856: EQUAL
25857: IFFALSE 25873
// begin result := i ;
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: LD_VAR 0 4
25868: ST_TO_ADDR
// exit ;
25869: POP
25870: POP
25871: GO 25877
// end ;
25873: GO 25838
25875: POP
25876: POP
// end ;
25877: LD_VAR 0 3
25881: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25882: LD_INT 0
25884: PPUSH
// vc_chassis := chassis ;
25885: LD_ADDR_OWVAR 37
25889: PUSH
25890: LD_VAR 0 1
25894: ST_TO_ADDR
// vc_engine := engine ;
25895: LD_ADDR_OWVAR 39
25899: PUSH
25900: LD_VAR 0 2
25904: ST_TO_ADDR
// vc_control := control ;
25905: LD_ADDR_OWVAR 38
25909: PUSH
25910: LD_VAR 0 3
25914: ST_TO_ADDR
// vc_weapon := weapon ;
25915: LD_ADDR_OWVAR 40
25919: PUSH
25920: LD_VAR 0 4
25924: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25925: LD_ADDR_OWVAR 41
25929: PUSH
25930: LD_VAR 0 5
25934: ST_TO_ADDR
// end ;
25935: LD_VAR 0 6
25939: RET
// export function WantPlant ( unit ) ; var task ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
// result := false ;
25944: LD_ADDR_VAR 0 2
25948: PUSH
25949: LD_INT 0
25951: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL_OW 437
25966: ST_TO_ADDR
// if task then
25967: LD_VAR 0 3
25971: IFFALSE 25999
// if task [ 1 ] [ 1 ] = p then
25973: LD_VAR 0 3
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: PUSH
25982: LD_INT 1
25984: ARRAY
25985: PUSH
25986: LD_STRING p
25988: EQUAL
25989: IFFALSE 25999
// result := true ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 1
25998: ST_TO_ADDR
// end ;
25999: LD_VAR 0 2
26003: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26004: LD_INT 0
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// if pos < 1 then
26010: LD_VAR 0 2
26014: PUSH
26015: LD_INT 1
26017: LESS
26018: IFFALSE 26022
// exit ;
26020: GO 26325
// if pos = 1 then
26022: LD_VAR 0 2
26026: PUSH
26027: LD_INT 1
26029: EQUAL
26030: IFFALSE 26063
// result := Replace ( arr , pos [ 1 ] , value ) else
26032: LD_ADDR_VAR 0 4
26036: PUSH
26037: LD_VAR 0 1
26041: PPUSH
26042: LD_VAR 0 2
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: CALL_OW 1
26060: ST_TO_ADDR
26061: GO 26325
// begin tmp := arr ;
26063: LD_ADDR_VAR 0 6
26067: PUSH
26068: LD_VAR 0 1
26072: ST_TO_ADDR
// s_arr := [ tmp ] ;
26073: LD_ADDR_VAR 0 7
26077: PUSH
26078: LD_VAR 0 6
26082: PUSH
26083: EMPTY
26084: LIST
26085: ST_TO_ADDR
// for i = 1 to pos - 1 do
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: DOUBLE
26092: LD_INT 1
26094: DEC
26095: ST_TO_ADDR
26096: LD_VAR 0 2
26100: PUSH
26101: LD_INT 1
26103: MINUS
26104: PUSH
26105: FOR_TO
26106: IFFALSE 26151
// begin tmp := tmp [ pos [ i ] ] ;
26108: LD_ADDR_VAR 0 6
26112: PUSH
26113: LD_VAR 0 6
26117: PUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_VAR 0 5
26127: ARRAY
26128: ARRAY
26129: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26130: LD_ADDR_VAR 0 7
26134: PUSH
26135: LD_VAR 0 7
26139: PUSH
26140: LD_VAR 0 6
26144: PUSH
26145: EMPTY
26146: LIST
26147: ADD
26148: ST_TO_ADDR
// end ;
26149: GO 26105
26151: POP
26152: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26153: LD_ADDR_VAR 0 6
26157: PUSH
26158: LD_VAR 0 6
26162: PPUSH
26163: LD_VAR 0 2
26167: PUSH
26168: LD_VAR 0 2
26172: ARRAY
26173: PPUSH
26174: LD_VAR 0 3
26178: PPUSH
26179: CALL_OW 1
26183: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26184: LD_ADDR_VAR 0 7
26188: PUSH
26189: LD_VAR 0 7
26193: PPUSH
26194: LD_VAR 0 7
26198: PPUSH
26199: LD_VAR 0 6
26203: PPUSH
26204: CALL_OW 1
26208: ST_TO_ADDR
// for i = s_arr downto 2 do
26209: LD_ADDR_VAR 0 5
26213: PUSH
26214: DOUBLE
26215: LD_VAR 0 7
26219: INC
26220: ST_TO_ADDR
26221: LD_INT 2
26223: PUSH
26224: FOR_DOWNTO
26225: IFFALSE 26309
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26227: LD_ADDR_VAR 0 6
26231: PUSH
26232: LD_VAR 0 7
26236: PUSH
26237: LD_VAR 0 5
26241: PUSH
26242: LD_INT 1
26244: MINUS
26245: ARRAY
26246: PPUSH
26247: LD_VAR 0 2
26251: PUSH
26252: LD_VAR 0 5
26256: PUSH
26257: LD_INT 1
26259: MINUS
26260: ARRAY
26261: PPUSH
26262: LD_VAR 0 7
26266: PUSH
26267: LD_VAR 0 5
26271: ARRAY
26272: PPUSH
26273: CALL_OW 1
26277: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26278: LD_ADDR_VAR 0 7
26282: PUSH
26283: LD_VAR 0 7
26287: PPUSH
26288: LD_VAR 0 5
26292: PUSH
26293: LD_INT 1
26295: MINUS
26296: PPUSH
26297: LD_VAR 0 6
26301: PPUSH
26302: CALL_OW 1
26306: ST_TO_ADDR
// end ;
26307: GO 26224
26309: POP
26310: POP
// result := s_arr [ 1 ] ;
26311: LD_ADDR_VAR 0 4
26315: PUSH
26316: LD_VAR 0 7
26320: PUSH
26321: LD_INT 1
26323: ARRAY
26324: ST_TO_ADDR
// end ; end ;
26325: LD_VAR 0 4
26329: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26330: LD_INT 0
26332: PPUSH
26333: PPUSH
// if not list then
26334: LD_VAR 0 1
26338: NOT
26339: IFFALSE 26343
// exit ;
26341: GO 26434
// i := list [ pos1 ] ;
26343: LD_ADDR_VAR 0 5
26347: PUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_VAR 0 2
26357: ARRAY
26358: ST_TO_ADDR
// if not i then
26359: LD_VAR 0 5
26363: NOT
26364: IFFALSE 26368
// exit ;
26366: GO 26434
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: LD_VAR 0 2
26382: PPUSH
26383: LD_VAR 0 1
26387: PUSH
26388: LD_VAR 0 3
26392: ARRAY
26393: PPUSH
26394: CALL_OW 1
26398: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26399: LD_ADDR_VAR 0 1
26403: PUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: LD_VAR 0 3
26413: PPUSH
26414: LD_VAR 0 5
26418: PPUSH
26419: CALL_OW 1
26423: ST_TO_ADDR
// result := list ;
26424: LD_ADDR_VAR 0 4
26428: PUSH
26429: LD_VAR 0 1
26433: ST_TO_ADDR
// end ;
26434: LD_VAR 0 4
26438: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26439: LD_INT 0
26441: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26442: LD_ADDR_VAR 0 5
26446: PUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 250
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 251
26466: PPUSH
26467: LD_VAR 0 2
26471: PPUSH
26472: LD_VAR 0 3
26476: PPUSH
26477: LD_VAR 0 4
26481: PPUSH
26482: CALL 26492 0 5
26486: ST_TO_ADDR
// end ;
26487: LD_VAR 0 5
26491: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26492: LD_INT 0
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
// if not list then
26498: LD_VAR 0 3
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26895
// result := [ ] ;
26507: LD_ADDR_VAR 0 6
26511: PUSH
26512: EMPTY
26513: ST_TO_ADDR
// for i in list do
26514: LD_ADDR_VAR 0 7
26518: PUSH
26519: LD_VAR 0 3
26523: PUSH
26524: FOR_IN
26525: IFFALSE 26727
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26527: LD_ADDR_VAR 0 9
26531: PUSH
26532: LD_VAR 0 7
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: CALL_OW 297
26551: ST_TO_ADDR
// if not result then
26552: LD_VAR 0 6
26556: NOT
26557: IFFALSE 26583
// result := [ [ i , tmp ] ] else
26559: LD_ADDR_VAR 0 6
26563: PUSH
26564: LD_VAR 0 7
26568: PUSH
26569: LD_VAR 0 9
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: ST_TO_ADDR
26581: GO 26725
// begin if result [ result ] [ 2 ] < tmp then
26583: LD_VAR 0 6
26587: PUSH
26588: LD_VAR 0 6
26592: ARRAY
26593: PUSH
26594: LD_INT 2
26596: ARRAY
26597: PUSH
26598: LD_VAR 0 9
26602: LESS
26603: IFFALSE 26645
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26605: LD_ADDR_VAR 0 6
26609: PUSH
26610: LD_VAR 0 6
26614: PPUSH
26615: LD_VAR 0 6
26619: PUSH
26620: LD_INT 1
26622: PLUS
26623: PPUSH
26624: LD_VAR 0 7
26628: PUSH
26629: LD_VAR 0 9
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 2
26642: ST_TO_ADDR
26643: GO 26725
// for j = 1 to result do
26645: LD_ADDR_VAR 0 8
26649: PUSH
26650: DOUBLE
26651: LD_INT 1
26653: DEC
26654: ST_TO_ADDR
26655: LD_VAR 0 6
26659: PUSH
26660: FOR_TO
26661: IFFALSE 26723
// begin if tmp < result [ j ] [ 2 ] then
26663: LD_VAR 0 9
26667: PUSH
26668: LD_VAR 0 6
26672: PUSH
26673: LD_VAR 0 8
26677: ARRAY
26678: PUSH
26679: LD_INT 2
26681: ARRAY
26682: LESS
26683: IFFALSE 26721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26685: LD_ADDR_VAR 0 6
26689: PUSH
26690: LD_VAR 0 6
26694: PPUSH
26695: LD_VAR 0 8
26699: PPUSH
26700: LD_VAR 0 7
26704: PUSH
26705: LD_VAR 0 9
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 2
26718: ST_TO_ADDR
// break ;
26719: GO 26723
// end ; end ;
26721: GO 26660
26723: POP
26724: POP
// end ; end ;
26725: GO 26524
26727: POP
26728: POP
// if result and not asc then
26729: LD_VAR 0 6
26733: PUSH
26734: LD_VAR 0 4
26738: NOT
26739: AND
26740: IFFALSE 26815
// begin tmp := result ;
26742: LD_ADDR_VAR 0 9
26746: PUSH
26747: LD_VAR 0 6
26751: ST_TO_ADDR
// for i = tmp downto 1 do
26752: LD_ADDR_VAR 0 7
26756: PUSH
26757: DOUBLE
26758: LD_VAR 0 9
26762: INC
26763: ST_TO_ADDR
26764: LD_INT 1
26766: PUSH
26767: FOR_DOWNTO
26768: IFFALSE 26813
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26770: LD_ADDR_VAR 0 6
26774: PUSH
26775: LD_VAR 0 6
26779: PPUSH
26780: LD_VAR 0 9
26784: PUSH
26785: LD_VAR 0 7
26789: MINUS
26790: PUSH
26791: LD_INT 1
26793: PLUS
26794: PPUSH
26795: LD_VAR 0 9
26799: PUSH
26800: LD_VAR 0 7
26804: ARRAY
26805: PPUSH
26806: CALL_OW 1
26810: ST_TO_ADDR
26811: GO 26767
26813: POP
26814: POP
// end ; tmp := [ ] ;
26815: LD_ADDR_VAR 0 9
26819: PUSH
26820: EMPTY
26821: ST_TO_ADDR
// if mode then
26822: LD_VAR 0 5
26826: IFFALSE 26895
// begin for i = 1 to result do
26828: LD_ADDR_VAR 0 7
26832: PUSH
26833: DOUBLE
26834: LD_INT 1
26836: DEC
26837: ST_TO_ADDR
26838: LD_VAR 0 6
26842: PUSH
26843: FOR_TO
26844: IFFALSE 26883
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26846: LD_ADDR_VAR 0 9
26850: PUSH
26851: LD_VAR 0 9
26855: PPUSH
26856: LD_VAR 0 7
26860: PPUSH
26861: LD_VAR 0 6
26865: PUSH
26866: LD_VAR 0 7
26870: ARRAY
26871: PUSH
26872: LD_INT 1
26874: ARRAY
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
26881: GO 26843
26883: POP
26884: POP
// result := tmp ;
26885: LD_ADDR_VAR 0 6
26889: PUSH
26890: LD_VAR 0 9
26894: ST_TO_ADDR
// end ; end ;
26895: LD_VAR 0 6
26899: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26900: LD_INT 0
26902: PPUSH
26903: PPUSH
26904: PPUSH
26905: PPUSH
26906: PPUSH
26907: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26908: LD_ADDR_VAR 0 5
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// if not x or not y then
26930: LD_VAR 0 2
26934: NOT
26935: PUSH
26936: LD_VAR 0 3
26940: NOT
26941: OR
26942: IFFALSE 26946
// exit ;
26944: GO 28592
// if not range then
26946: LD_VAR 0 4
26950: NOT
26951: IFFALSE 26961
// range := 10 ;
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_INT 10
26960: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26961: LD_ADDR_VAR 0 8
26965: PUSH
26966: LD_INT 81
26968: PUSH
26969: LD_VAR 0 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 92
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: LD_VAR 0 3
26990: PUSH
26991: LD_VAR 0 4
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: LD_INT 21
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 69
27028: ST_TO_ADDR
// if not tmp then
27029: LD_VAR 0 8
27033: NOT
27034: IFFALSE 27038
// exit ;
27036: GO 28592
// for i in tmp do
27038: LD_ADDR_VAR 0 6
27042: PUSH
27043: LD_VAR 0 8
27047: PUSH
27048: FOR_IN
27049: IFFALSE 28567
// begin points := [ 0 , 0 , 0 ] ;
27051: LD_ADDR_VAR 0 9
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// bpoints := 1 ;
27070: LD_ADDR_VAR 0 10
27074: PUSH
27075: LD_INT 1
27077: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27078: LD_VAR 0 6
27082: PPUSH
27083: CALL_OW 247
27087: PUSH
27088: LD_INT 1
27090: DOUBLE
27091: EQUAL
27092: IFTRUE 27096
27094: GO 27674
27096: POP
// begin if GetClass ( i ) = 1 then
27097: LD_VAR 0 6
27101: PPUSH
27102: CALL_OW 257
27106: PUSH
27107: LD_INT 1
27109: EQUAL
27110: IFFALSE 27131
// points := [ 10 , 5 , 3 ] ;
27112: LD_ADDR_VAR 0 9
27116: PUSH
27117: LD_INT 10
27119: PUSH
27120: LD_INT 5
27122: PUSH
27123: LD_INT 3
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27131: LD_VAR 0 6
27135: PPUSH
27136: CALL_OW 257
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 4
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: IN
27155: IFFALSE 27176
// points := [ 3 , 2 , 1 ] ;
27157: LD_ADDR_VAR 0 9
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27176: LD_VAR 0 6
27180: PPUSH
27181: CALL_OW 257
27185: PUSH
27186: LD_INT 5
27188: EQUAL
27189: IFFALSE 27210
// points := [ 130 , 5 , 2 ] ;
27191: LD_ADDR_VAR 0 9
27195: PUSH
27196: LD_INT 130
27198: PUSH
27199: LD_INT 5
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27210: LD_VAR 0 6
27214: PPUSH
27215: CALL_OW 257
27219: PUSH
27220: LD_INT 8
27222: EQUAL
27223: IFFALSE 27244
// points := [ 35 , 35 , 30 ] ;
27225: LD_ADDR_VAR 0 9
27229: PUSH
27230: LD_INT 35
27232: PUSH
27233: LD_INT 35
27235: PUSH
27236: LD_INT 30
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27244: LD_VAR 0 6
27248: PPUSH
27249: CALL_OW 257
27253: PUSH
27254: LD_INT 9
27256: EQUAL
27257: IFFALSE 27278
// points := [ 20 , 55 , 40 ] ;
27259: LD_ADDR_VAR 0 9
27263: PUSH
27264: LD_INT 20
27266: PUSH
27267: LD_INT 55
27269: PUSH
27270: LD_INT 40
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27278: LD_VAR 0 6
27282: PPUSH
27283: CALL_OW 257
27287: PUSH
27288: LD_INT 12
27290: PUSH
27291: LD_INT 16
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: IN
27298: IFFALSE 27319
// points := [ 5 , 3 , 2 ] ;
27300: LD_ADDR_VAR 0 9
27304: PUSH
27305: LD_INT 5
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27319: LD_VAR 0 6
27323: PPUSH
27324: CALL_OW 257
27328: PUSH
27329: LD_INT 17
27331: EQUAL
27332: IFFALSE 27353
// points := [ 100 , 50 , 75 ] ;
27334: LD_ADDR_VAR 0 9
27338: PUSH
27339: LD_INT 100
27341: PUSH
27342: LD_INT 50
27344: PUSH
27345: LD_INT 75
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27353: LD_VAR 0 6
27357: PPUSH
27358: CALL_OW 257
27362: PUSH
27363: LD_INT 15
27365: EQUAL
27366: IFFALSE 27387
// points := [ 10 , 5 , 3 ] ;
27368: LD_ADDR_VAR 0 9
27372: PUSH
27373: LD_INT 10
27375: PUSH
27376: LD_INT 5
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27387: LD_VAR 0 6
27391: PPUSH
27392: CALL_OW 257
27396: PUSH
27397: LD_INT 14
27399: EQUAL
27400: IFFALSE 27421
// points := [ 10 , 0 , 0 ] ;
27402: LD_ADDR_VAR 0 9
27406: PUSH
27407: LD_INT 10
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27421: LD_VAR 0 6
27425: PPUSH
27426: CALL_OW 257
27430: PUSH
27431: LD_INT 11
27433: EQUAL
27434: IFFALSE 27455
// points := [ 30 , 10 , 5 ] ;
27436: LD_ADDR_VAR 0 9
27440: PUSH
27441: LD_INT 30
27443: PUSH
27444: LD_INT 10
27446: PUSH
27447: LD_INT 5
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: LIST
27454: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_INT 5
27462: PPUSH
27463: CALL_OW 321
27467: PUSH
27468: LD_INT 2
27470: EQUAL
27471: IFFALSE 27488
// bpoints := bpoints * 1.8 ;
27473: LD_ADDR_VAR 0 10
27477: PUSH
27478: LD_VAR 0 10
27482: PUSH
27483: LD_REAL  1.80000000000000E+0000
27486: MUL
27487: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27488: LD_VAR 0 6
27492: PPUSH
27493: CALL_OW 257
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: LD_INT 4
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: IN
27516: PUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: LD_INT 51
27524: PPUSH
27525: CALL_OW 321
27529: PUSH
27530: LD_INT 2
27532: EQUAL
27533: AND
27534: IFFALSE 27551
// bpoints := bpoints * 1.2 ;
27536: LD_ADDR_VAR 0 10
27540: PUSH
27541: LD_VAR 0 10
27545: PUSH
27546: LD_REAL  1.20000000000000E+0000
27549: MUL
27550: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 257
27560: PUSH
27561: LD_INT 5
27563: PUSH
27564: LD_INT 7
27566: PUSH
27567: LD_INT 9
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: IN
27575: PUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: LD_INT 52
27583: PPUSH
27584: CALL_OW 321
27588: PUSH
27589: LD_INT 2
27591: EQUAL
27592: AND
27593: IFFALSE 27610
// bpoints := bpoints * 1.5 ;
27595: LD_ADDR_VAR 0 10
27599: PUSH
27600: LD_VAR 0 10
27604: PUSH
27605: LD_REAL  1.50000000000000E+0000
27608: MUL
27609: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27610: LD_VAR 0 1
27614: PPUSH
27615: LD_INT 66
27617: PPUSH
27618: CALL_OW 321
27622: PUSH
27623: LD_INT 2
27625: EQUAL
27626: IFFALSE 27643
// bpoints := bpoints * 1.1 ;
27628: LD_ADDR_VAR 0 10
27632: PUSH
27633: LD_VAR 0 10
27637: PUSH
27638: LD_REAL  1.10000000000000E+0000
27641: MUL
27642: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27643: LD_ADDR_VAR 0 10
27647: PUSH
27648: LD_VAR 0 10
27652: PUSH
27653: LD_VAR 0 6
27657: PPUSH
27658: LD_INT 1
27660: PPUSH
27661: CALL_OW 259
27665: PUSH
27666: LD_REAL  1.15000000000000E+0000
27669: MUL
27670: MUL
27671: ST_TO_ADDR
// end ; unit_vehicle :
27672: GO 28496
27674: LD_INT 2
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 28484
27682: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27683: LD_VAR 0 6
27687: PPUSH
27688: CALL_OW 264
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 42
27698: PUSH
27699: LD_INT 24
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: IN
27707: IFFALSE 27728
// points := [ 25 , 5 , 3 ] ;
27709: LD_ADDR_VAR 0 9
27713: PUSH
27714: LD_INT 25
27716: PUSH
27717: LD_INT 5
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27728: LD_VAR 0 6
27732: PPUSH
27733: CALL_OW 264
27737: PUSH
27738: LD_INT 4
27740: PUSH
27741: LD_INT 43
27743: PUSH
27744: LD_INT 25
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: IN
27752: IFFALSE 27773
// points := [ 40 , 15 , 5 ] ;
27754: LD_ADDR_VAR 0 9
27758: PUSH
27759: LD_INT 40
27761: PUSH
27762: LD_INT 15
27764: PUSH
27765: LD_INT 5
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27773: LD_VAR 0 6
27777: PPUSH
27778: CALL_OW 264
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: LD_INT 23
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: IN
27793: IFFALSE 27814
// points := [ 7 , 25 , 8 ] ;
27795: LD_ADDR_VAR 0 9
27799: PUSH
27800: LD_INT 7
27802: PUSH
27803: LD_INT 25
27805: PUSH
27806: LD_INT 8
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27814: LD_VAR 0 6
27818: PPUSH
27819: CALL_OW 264
27823: PUSH
27824: LD_INT 5
27826: PUSH
27827: LD_INT 27
27829: PUSH
27830: LD_INT 44
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: IN
27838: IFFALSE 27859
// points := [ 14 , 50 , 16 ] ;
27840: LD_ADDR_VAR 0 9
27844: PUSH
27845: LD_INT 14
27847: PUSH
27848: LD_INT 50
27850: PUSH
27851: LD_INT 16
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27859: LD_VAR 0 6
27863: PPUSH
27864: CALL_OW 264
27868: PUSH
27869: LD_INT 6
27871: PUSH
27872: LD_INT 46
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: IN
27879: IFFALSE 27900
// points := [ 32 , 120 , 70 ] ;
27881: LD_ADDR_VAR 0 9
27885: PUSH
27886: LD_INT 32
27888: PUSH
27889: LD_INT 120
27891: PUSH
27892: LD_INT 70
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27900: LD_VAR 0 6
27904: PPUSH
27905: CALL_OW 264
27909: PUSH
27910: LD_INT 7
27912: PUSH
27913: LD_INT 28
27915: PUSH
27916: LD_INT 45
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: IN
27924: IFFALSE 27945
// points := [ 35 , 20 , 45 ] ;
27926: LD_ADDR_VAR 0 9
27930: PUSH
27931: LD_INT 35
27933: PUSH
27934: LD_INT 20
27936: PUSH
27937: LD_INT 45
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27945: LD_VAR 0 6
27949: PPUSH
27950: CALL_OW 264
27954: PUSH
27955: LD_INT 47
27957: PUSH
27958: EMPTY
27959: LIST
27960: IN
27961: IFFALSE 27982
// points := [ 67 , 45 , 75 ] ;
27963: LD_ADDR_VAR 0 9
27967: PUSH
27968: LD_INT 67
27970: PUSH
27971: LD_INT 45
27973: PUSH
27974: LD_INT 75
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27982: LD_VAR 0 6
27986: PPUSH
27987: CALL_OW 264
27991: PUSH
27992: LD_INT 26
27994: PUSH
27995: EMPTY
27996: LIST
27997: IN
27998: IFFALSE 28019
// points := [ 120 , 30 , 80 ] ;
28000: LD_ADDR_VAR 0 9
28004: PUSH
28005: LD_INT 120
28007: PUSH
28008: LD_INT 30
28010: PUSH
28011: LD_INT 80
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28019: LD_VAR 0 6
28023: PPUSH
28024: CALL_OW 264
28028: PUSH
28029: LD_INT 22
28031: PUSH
28032: EMPTY
28033: LIST
28034: IN
28035: IFFALSE 28056
// points := [ 40 , 1 , 1 ] ;
28037: LD_ADDR_VAR 0 9
28041: PUSH
28042: LD_INT 40
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28056: LD_VAR 0 6
28060: PPUSH
28061: CALL_OW 264
28065: PUSH
28066: LD_INT 29
28068: PUSH
28069: EMPTY
28070: LIST
28071: IN
28072: IFFALSE 28093
// points := [ 70 , 200 , 400 ] ;
28074: LD_ADDR_VAR 0 9
28078: PUSH
28079: LD_INT 70
28081: PUSH
28082: LD_INT 200
28084: PUSH
28085: LD_INT 400
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28093: LD_VAR 0 6
28097: PPUSH
28098: CALL_OW 264
28102: PUSH
28103: LD_INT 14
28105: PUSH
28106: LD_INT 53
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: IN
28113: IFFALSE 28134
// points := [ 40 , 10 , 20 ] ;
28115: LD_ADDR_VAR 0 9
28119: PUSH
28120: LD_INT 40
28122: PUSH
28123: LD_INT 10
28125: PUSH
28126: LD_INT 20
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28134: LD_VAR 0 6
28138: PPUSH
28139: CALL_OW 264
28143: PUSH
28144: LD_INT 9
28146: PUSH
28147: EMPTY
28148: LIST
28149: IN
28150: IFFALSE 28171
// points := [ 5 , 70 , 20 ] ;
28152: LD_ADDR_VAR 0 9
28156: PUSH
28157: LD_INT 5
28159: PUSH
28160: LD_INT 70
28162: PUSH
28163: LD_INT 20
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28171: LD_VAR 0 6
28175: PPUSH
28176: CALL_OW 264
28180: PUSH
28181: LD_INT 10
28183: PUSH
28184: EMPTY
28185: LIST
28186: IN
28187: IFFALSE 28208
// points := [ 35 , 110 , 70 ] ;
28189: LD_ADDR_VAR 0 9
28193: PUSH
28194: LD_INT 35
28196: PUSH
28197: LD_INT 110
28199: PUSH
28200: LD_INT 70
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28208: LD_VAR 0 6
28212: PPUSH
28213: CALL_OW 265
28217: PUSH
28218: LD_INT 25
28220: EQUAL
28221: IFFALSE 28242
// points := [ 80 , 65 , 100 ] ;
28223: LD_ADDR_VAR 0 9
28227: PUSH
28228: LD_INT 80
28230: PUSH
28231: LD_INT 65
28233: PUSH
28234: LD_INT 100
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28242: LD_VAR 0 6
28246: PPUSH
28247: CALL_OW 263
28251: PUSH
28252: LD_INT 1
28254: EQUAL
28255: IFFALSE 28290
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28257: LD_ADDR_VAR 0 10
28261: PUSH
28262: LD_VAR 0 10
28266: PUSH
28267: LD_VAR 0 6
28271: PPUSH
28272: CALL_OW 311
28276: PPUSH
28277: LD_INT 3
28279: PPUSH
28280: CALL_OW 259
28284: PUSH
28285: LD_INT 4
28287: MUL
28288: MUL
28289: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28290: LD_VAR 0 6
28294: PPUSH
28295: CALL_OW 263
28299: PUSH
28300: LD_INT 2
28302: EQUAL
28303: IFFALSE 28354
// begin j := IsControledBy ( i ) ;
28305: LD_ADDR_VAR 0 7
28309: PUSH
28310: LD_VAR 0 6
28314: PPUSH
28315: CALL_OW 312
28319: ST_TO_ADDR
// if j then
28320: LD_VAR 0 7
28324: IFFALSE 28354
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28326: LD_ADDR_VAR 0 10
28330: PUSH
28331: LD_VAR 0 10
28335: PUSH
28336: LD_VAR 0 7
28340: PPUSH
28341: LD_INT 3
28343: PPUSH
28344: CALL_OW 259
28348: PUSH
28349: LD_INT 3
28351: MUL
28352: MUL
28353: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28354: LD_VAR 0 6
28358: PPUSH
28359: CALL_OW 264
28363: PUSH
28364: LD_INT 5
28366: PUSH
28367: LD_INT 6
28369: PUSH
28370: LD_INT 46
28372: PUSH
28373: LD_INT 44
28375: PUSH
28376: LD_INT 47
28378: PUSH
28379: LD_INT 45
28381: PUSH
28382: LD_INT 28
28384: PUSH
28385: LD_INT 7
28387: PUSH
28388: LD_INT 27
28390: PUSH
28391: LD_INT 29
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: IN
28406: PUSH
28407: LD_VAR 0 1
28411: PPUSH
28412: LD_INT 52
28414: PPUSH
28415: CALL_OW 321
28419: PUSH
28420: LD_INT 2
28422: EQUAL
28423: AND
28424: IFFALSE 28441
// bpoints := bpoints * 1.2 ;
28426: LD_ADDR_VAR 0 10
28430: PUSH
28431: LD_VAR 0 10
28435: PUSH
28436: LD_REAL  1.20000000000000E+0000
28439: MUL
28440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28441: LD_VAR 0 6
28445: PPUSH
28446: CALL_OW 264
28450: PUSH
28451: LD_INT 6
28453: PUSH
28454: LD_INT 46
28456: PUSH
28457: LD_INT 47
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: IN
28465: IFFALSE 28482
// bpoints := bpoints * 1.2 ;
28467: LD_ADDR_VAR 0 10
28471: PUSH
28472: LD_VAR 0 10
28476: PUSH
28477: LD_REAL  1.20000000000000E+0000
28480: MUL
28481: ST_TO_ADDR
// end ; unit_building :
28482: GO 28496
28484: LD_INT 3
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28495
28492: POP
// ; end ;
28493: GO 28496
28495: POP
// for j = 1 to 3 do
28496: LD_ADDR_VAR 0 7
28500: PUSH
28501: DOUBLE
28502: LD_INT 1
28504: DEC
28505: ST_TO_ADDR
28506: LD_INT 3
28508: PUSH
28509: FOR_TO
28510: IFFALSE 28563
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28512: LD_ADDR_VAR 0 5
28516: PUSH
28517: LD_VAR 0 5
28521: PPUSH
28522: LD_VAR 0 7
28526: PPUSH
28527: LD_VAR 0 5
28531: PUSH
28532: LD_VAR 0 7
28536: ARRAY
28537: PUSH
28538: LD_VAR 0 9
28542: PUSH
28543: LD_VAR 0 7
28547: ARRAY
28548: PUSH
28549: LD_VAR 0 10
28553: MUL
28554: PLUS
28555: PPUSH
28556: CALL_OW 1
28560: ST_TO_ADDR
28561: GO 28509
28563: POP
28564: POP
// end ;
28565: GO 27048
28567: POP
28568: POP
// result := Replace ( result , 4 , tmp ) ;
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: LD_VAR 0 5
28578: PPUSH
28579: LD_INT 4
28581: PPUSH
28582: LD_VAR 0 8
28586: PPUSH
28587: CALL_OW 1
28591: ST_TO_ADDR
// end ;
28592: LD_VAR 0 5
28596: RET
// export function DangerAtRange ( unit , range ) ; begin
28597: LD_INT 0
28599: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 255
28614: PPUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 250
28624: PPUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: CALL_OW 251
28634: PPUSH
28635: LD_VAR 0 2
28639: PPUSH
28640: CALL 26900 0 4
28644: ST_TO_ADDR
// end ;
28645: LD_VAR 0 3
28649: RET
// export function DangerInArea ( side , area ) ; begin
28650: LD_INT 0
28652: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_VAR 0 2
28662: PPUSH
28663: LD_INT 81
28665: PUSH
28666: LD_VAR 0 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PPUSH
28675: CALL_OW 70
28679: ST_TO_ADDR
// end ;
28680: LD_VAR 0 3
28684: RET
// export function IsExtension ( b ) ; begin
28685: LD_INT 0
28687: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28688: LD_ADDR_VAR 0 2
28692: PUSH
28693: LD_VAR 0 1
28697: PUSH
28698: LD_INT 23
28700: PUSH
28701: LD_INT 20
28703: PUSH
28704: LD_INT 22
28706: PUSH
28707: LD_INT 17
28709: PUSH
28710: LD_INT 24
28712: PUSH
28713: LD_INT 21
28715: PUSH
28716: LD_INT 19
28718: PUSH
28719: LD_INT 16
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 18
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: IN
28740: ST_TO_ADDR
// end ;
28741: LD_VAR 0 2
28745: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28746: LD_INT 0
28748: PPUSH
28749: PPUSH
28750: PPUSH
// result := [ ] ;
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: EMPTY
28757: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28758: LD_ADDR_VAR 0 4
28762: PUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: LD_INT 21
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 70
28782: ST_TO_ADDR
// if not tmp then
28783: LD_VAR 0 4
28787: NOT
28788: IFFALSE 28792
// exit ;
28790: GO 28850
// for i in tmp do
28792: LD_ADDR_VAR 0 5
28796: PUSH
28797: LD_VAR 0 4
28801: PUSH
28802: FOR_IN
28803: IFFALSE 28838
// if GetBase ( i ) <> base then
28805: LD_VAR 0 5
28809: PPUSH
28810: CALL_OW 274
28814: PUSH
28815: LD_VAR 0 1
28819: NONEQUAL
28820: IFFALSE 28836
// ComLinkToBase ( base , i ) ;
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_VAR 0 5
28831: PPUSH
28832: CALL_OW 169
28836: GO 28802
28838: POP
28839: POP
// result := tmp ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_VAR 0 4
28849: ST_TO_ADDR
// end ;
28850: LD_VAR 0 3
28854: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28855: LD_INT 0
28857: PPUSH
28858: PPUSH
// if BuildingStatus ( b ) = bs_build then
28859: LD_VAR 0 2
28863: PPUSH
28864: CALL_OW 461
28868: PUSH
28869: LD_INT 1
28871: EQUAL
28872: IFFALSE 28932
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28874: LD_VAR 0 1
28878: PPUSH
28879: LD_STRING h
28881: PUSH
28882: LD_VAR 0 2
28886: PPUSH
28887: CALL_OW 250
28891: PUSH
28892: LD_VAR 0 2
28896: PPUSH
28897: CALL_OW 251
28901: PUSH
28902: LD_VAR 0 2
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: PPUSH
28928: CALL_OW 446
// end ;
28932: LD_VAR 0 3
28936: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28937: LD_INT 0
28939: PPUSH
28940: PPUSH
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28945: LD_VAR 0 1
28949: NOT
28950: PUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 263
28960: PUSH
28961: LD_INT 2
28963: EQUAL
28964: NOT
28965: OR
28966: IFFALSE 28970
// exit ;
28968: GO 29286
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28970: LD_ADDR_VAR 0 6
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: CALL_OW 255
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 30
28997: PUSH
28998: LD_INT 36
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 34
29007: PUSH
29008: LD_INT 31
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: ST_TO_ADDR
// if not tmp then
29029: LD_VAR 0 6
29033: NOT
29034: IFFALSE 29038
// exit ;
29036: GO 29286
// result := [ ] ;
29038: LD_ADDR_VAR 0 2
29042: PUSH
29043: EMPTY
29044: ST_TO_ADDR
// for i in tmp do
29045: LD_ADDR_VAR 0 3
29049: PUSH
29050: LD_VAR 0 6
29054: PUSH
29055: FOR_IN
29056: IFFALSE 29127
// begin t := UnitsInside ( i ) ;
29058: LD_ADDR_VAR 0 4
29062: PUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 313
29072: ST_TO_ADDR
// if t then
29073: LD_VAR 0 4
29077: IFFALSE 29125
// for j in t do
29079: LD_ADDR_VAR 0 7
29083: PUSH
29084: LD_VAR 0 4
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29123
// result := Insert ( result , result + 1 , j ) ;
29092: LD_ADDR_VAR 0 2
29096: PUSH
29097: LD_VAR 0 2
29101: PPUSH
29102: LD_VAR 0 2
29106: PUSH
29107: LD_INT 1
29109: PLUS
29110: PPUSH
29111: LD_VAR 0 7
29115: PPUSH
29116: CALL_OW 2
29120: ST_TO_ADDR
29121: GO 29089
29123: POP
29124: POP
// end ;
29125: GO 29055
29127: POP
29128: POP
// if not result then
29129: LD_VAR 0 2
29133: NOT
29134: IFFALSE 29138
// exit ;
29136: GO 29286
// mech := result [ 1 ] ;
29138: LD_ADDR_VAR 0 5
29142: PUSH
29143: LD_VAR 0 2
29147: PUSH
29148: LD_INT 1
29150: ARRAY
29151: ST_TO_ADDR
// if result > 1 then
29152: LD_VAR 0 2
29156: PUSH
29157: LD_INT 1
29159: GREATER
29160: IFFALSE 29272
// for i = 2 to result do
29162: LD_ADDR_VAR 0 3
29166: PUSH
29167: DOUBLE
29168: LD_INT 2
29170: DEC
29171: ST_TO_ADDR
29172: LD_VAR 0 2
29176: PUSH
29177: FOR_TO
29178: IFFALSE 29270
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29180: LD_ADDR_VAR 0 4
29184: PUSH
29185: LD_VAR 0 2
29189: PUSH
29190: LD_VAR 0 3
29194: ARRAY
29195: PPUSH
29196: LD_INT 3
29198: PPUSH
29199: CALL_OW 259
29203: PUSH
29204: LD_VAR 0 2
29208: PUSH
29209: LD_VAR 0 3
29213: ARRAY
29214: PPUSH
29215: CALL_OW 432
29219: MINUS
29220: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29221: LD_VAR 0 4
29225: PUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: LD_INT 3
29233: PPUSH
29234: CALL_OW 259
29238: PUSH
29239: LD_VAR 0 5
29243: PPUSH
29244: CALL_OW 432
29248: MINUS
29249: GREATEREQUAL
29250: IFFALSE 29268
// mech := result [ i ] ;
29252: LD_ADDR_VAR 0 5
29256: PUSH
29257: LD_VAR 0 2
29261: PUSH
29262: LD_VAR 0 3
29266: ARRAY
29267: ST_TO_ADDR
// end ;
29268: GO 29177
29270: POP
29271: POP
// ComLinkTo ( vehicle , mech ) ;
29272: LD_VAR 0 1
29276: PPUSH
29277: LD_VAR 0 5
29281: PPUSH
29282: CALL_OW 135
// end ;
29286: LD_VAR 0 2
29290: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29291: LD_INT 0
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
// result := [ ] ;
29306: LD_ADDR_VAR 0 7
29310: PUSH
29311: EMPTY
29312: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL_OW 266
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: IN
29333: NOT
29334: IFFALSE 29338
// exit ;
29336: GO 30969
// if name then
29338: LD_VAR 0 3
29342: IFFALSE 29358
// SetBName ( base_dep , name ) ;
29344: LD_VAR 0 1
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: CALL_OW 500
// base := GetBase ( base_dep ) ;
29358: LD_ADDR_VAR 0 15
29362: PUSH
29363: LD_VAR 0 1
29367: PPUSH
29368: CALL_OW 274
29372: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29373: LD_ADDR_VAR 0 16
29377: PUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 255
29387: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29388: LD_ADDR_VAR 0 17
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 248
29402: ST_TO_ADDR
// if sources then
29403: LD_VAR 0 5
29407: IFFALSE 29454
// for i = 1 to 3 do
29409: LD_ADDR_VAR 0 8
29413: PUSH
29414: DOUBLE
29415: LD_INT 1
29417: DEC
29418: ST_TO_ADDR
29419: LD_INT 3
29421: PUSH
29422: FOR_TO
29423: IFFALSE 29452
// AddResourceType ( base , i , sources [ i ] ) ;
29425: LD_VAR 0 15
29429: PPUSH
29430: LD_VAR 0 8
29434: PPUSH
29435: LD_VAR 0 5
29439: PUSH
29440: LD_VAR 0 8
29444: ARRAY
29445: PPUSH
29446: CALL_OW 276
29450: GO 29422
29452: POP
29453: POP
// buildings := GetBaseBuildings ( base , area ) ;
29454: LD_ADDR_VAR 0 18
29458: PUSH
29459: LD_VAR 0 15
29463: PPUSH
29464: LD_VAR 0 2
29468: PPUSH
29469: CALL 28746 0 2
29473: ST_TO_ADDR
// InitHc ;
29474: CALL_OW 19
// InitUc ;
29478: CALL_OW 18
// uc_side := side ;
29482: LD_ADDR_OWVAR 20
29486: PUSH
29487: LD_VAR 0 16
29491: ST_TO_ADDR
// uc_nation := nation ;
29492: LD_ADDR_OWVAR 21
29496: PUSH
29497: LD_VAR 0 17
29501: ST_TO_ADDR
// if buildings then
29502: LD_VAR 0 18
29506: IFFALSE 30828
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29508: LD_ADDR_VAR 0 19
29512: PUSH
29513: LD_VAR 0 18
29517: PPUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 30
29523: PUSH
29524: LD_INT 29
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 30
29533: PUSH
29534: LD_INT 30
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: PPUSH
29546: CALL_OW 72
29550: ST_TO_ADDR
// if tmp then
29551: LD_VAR 0 19
29555: IFFALSE 29603
// for i in tmp do
29557: LD_ADDR_VAR 0 8
29561: PUSH
29562: LD_VAR 0 19
29566: PUSH
29567: FOR_IN
29568: IFFALSE 29601
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29570: LD_VAR 0 8
29574: PPUSH
29575: CALL_OW 250
29579: PPUSH
29580: LD_VAR 0 8
29584: PPUSH
29585: CALL_OW 251
29589: PPUSH
29590: LD_VAR 0 16
29594: PPUSH
29595: CALL_OW 441
29599: GO 29567
29601: POP
29602: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29603: LD_VAR 0 18
29607: PPUSH
29608: LD_INT 2
29610: PUSH
29611: LD_INT 30
29613: PUSH
29614: LD_INT 32
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 30
29623: PUSH
29624: LD_INT 33
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 72
29640: IFFALSE 29728
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29642: LD_ADDR_VAR 0 8
29646: PUSH
29647: LD_VAR 0 18
29651: PPUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 30
29657: PUSH
29658: LD_INT 32
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: LD_INT 33
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 72
29684: PUSH
29685: FOR_IN
29686: IFFALSE 29726
// begin if not GetBWeapon ( i ) then
29688: LD_VAR 0 8
29692: PPUSH
29693: CALL_OW 269
29697: NOT
29698: IFFALSE 29724
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29700: LD_VAR 0 8
29704: PPUSH
29705: LD_VAR 0 8
29709: PPUSH
29710: LD_VAR 0 2
29714: PPUSH
29715: CALL 30974 0 2
29719: PPUSH
29720: CALL_OW 431
// end ;
29724: GO 29685
29726: POP
29727: POP
// end ; for i = 1 to personel do
29728: LD_ADDR_VAR 0 8
29732: PUSH
29733: DOUBLE
29734: LD_INT 1
29736: DEC
29737: ST_TO_ADDR
29738: LD_VAR 0 6
29742: PUSH
29743: FOR_TO
29744: IFFALSE 30808
// begin if i > 4 then
29746: LD_VAR 0 8
29750: PUSH
29751: LD_INT 4
29753: GREATER
29754: IFFALSE 29758
// break ;
29756: GO 30808
// case i of 1 :
29758: LD_VAR 0 8
29762: PUSH
29763: LD_INT 1
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29851
29771: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29772: LD_ADDR_VAR 0 12
29776: PUSH
29777: LD_VAR 0 18
29781: PPUSH
29782: LD_INT 22
29784: PUSH
29785: LD_VAR 0 16
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 58
29796: PUSH
29797: EMPTY
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 32
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: LD_INT 4
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 30
29825: PUSH
29826: LD_INT 5
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 72
29848: ST_TO_ADDR
29849: GO 30073
29851: LD_INT 2
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29921
29859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29860: LD_ADDR_VAR 0 12
29864: PUSH
29865: LD_VAR 0 18
29869: PPUSH
29870: LD_INT 22
29872: PUSH
29873: LD_VAR 0 16
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 30
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 30
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: CALL_OW 72
29918: ST_TO_ADDR
29919: GO 30073
29921: LD_INT 3
29923: DOUBLE
29924: EQUAL
29925: IFTRUE 29929
29927: GO 29991
29929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29930: LD_ADDR_VAR 0 12
29934: PUSH
29935: LD_VAR 0 18
29939: PPUSH
29940: LD_INT 22
29942: PUSH
29943: LD_VAR 0 16
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: LD_INT 30
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 30
29967: PUSH
29968: LD_INT 3
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 72
29988: ST_TO_ADDR
29989: GO 30073
29991: LD_INT 4
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30072
29999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30000: LD_ADDR_VAR 0 12
30004: PUSH
30005: LD_VAR 0 18
30009: PPUSH
30010: LD_INT 22
30012: PUSH
30013: LD_VAR 0 16
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 30
30027: PUSH
30028: LD_INT 6
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 30
30037: PUSH
30038: LD_INT 7
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 30
30047: PUSH
30048: LD_INT 8
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PPUSH
30065: CALL_OW 72
30069: ST_TO_ADDR
30070: GO 30073
30072: POP
// if i = 1 then
30073: LD_VAR 0 8
30077: PUSH
30078: LD_INT 1
30080: EQUAL
30081: IFFALSE 30192
// begin tmp := [ ] ;
30083: LD_ADDR_VAR 0 19
30087: PUSH
30088: EMPTY
30089: ST_TO_ADDR
// for j in f do
30090: LD_ADDR_VAR 0 9
30094: PUSH
30095: LD_VAR 0 12
30099: PUSH
30100: FOR_IN
30101: IFFALSE 30174
// if GetBType ( j ) = b_bunker then
30103: LD_VAR 0 9
30107: PPUSH
30108: CALL_OW 266
30112: PUSH
30113: LD_INT 32
30115: EQUAL
30116: IFFALSE 30143
// tmp := Insert ( tmp , 1 , j ) else
30118: LD_ADDR_VAR 0 19
30122: PUSH
30123: LD_VAR 0 19
30127: PPUSH
30128: LD_INT 1
30130: PPUSH
30131: LD_VAR 0 9
30135: PPUSH
30136: CALL_OW 2
30140: ST_TO_ADDR
30141: GO 30172
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30143: LD_ADDR_VAR 0 19
30147: PUSH
30148: LD_VAR 0 19
30152: PPUSH
30153: LD_VAR 0 19
30157: PUSH
30158: LD_INT 1
30160: PLUS
30161: PPUSH
30162: LD_VAR 0 9
30166: PPUSH
30167: CALL_OW 2
30171: ST_TO_ADDR
30172: GO 30100
30174: POP
30175: POP
// if tmp then
30176: LD_VAR 0 19
30180: IFFALSE 30192
// f := tmp ;
30182: LD_ADDR_VAR 0 12
30186: PUSH
30187: LD_VAR 0 19
30191: ST_TO_ADDR
// end ; x := personel [ i ] ;
30192: LD_ADDR_VAR 0 13
30196: PUSH
30197: LD_VAR 0 6
30201: PUSH
30202: LD_VAR 0 8
30206: ARRAY
30207: ST_TO_ADDR
// if x = - 1 then
30208: LD_VAR 0 13
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: EQUAL
30217: IFFALSE 30426
// begin for j in f do
30219: LD_ADDR_VAR 0 9
30223: PUSH
30224: LD_VAR 0 12
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30422
// repeat InitHc ;
30232: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30236: LD_VAR 0 9
30240: PPUSH
30241: CALL_OW 266
30245: PUSH
30246: LD_INT 5
30248: EQUAL
30249: IFFALSE 30319
// begin if UnitsInside ( j ) < 3 then
30251: LD_VAR 0 9
30255: PPUSH
30256: CALL_OW 313
30260: PUSH
30261: LD_INT 3
30263: LESS
30264: IFFALSE 30300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30266: LD_INT 0
30268: PPUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 8
30274: PUSH
30275: LD_INT 9
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: PUSH
30283: LD_VAR 0 17
30287: ARRAY
30288: PPUSH
30289: LD_VAR 0 4
30293: PPUSH
30294: CALL_OW 380
30298: GO 30317
// PrepareHuman ( false , i , skill ) ;
30300: LD_INT 0
30302: PPUSH
30303: LD_VAR 0 8
30307: PPUSH
30308: LD_VAR 0 4
30312: PPUSH
30313: CALL_OW 380
// end else
30317: GO 30336
// PrepareHuman ( false , i , skill ) ;
30319: LD_INT 0
30321: PPUSH
30322: LD_VAR 0 8
30326: PPUSH
30327: LD_VAR 0 4
30331: PPUSH
30332: CALL_OW 380
// un := CreateHuman ;
30336: LD_ADDR_VAR 0 14
30340: PUSH
30341: CALL_OW 44
30345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30346: LD_ADDR_VAR 0 7
30350: PUSH
30351: LD_VAR 0 7
30355: PPUSH
30356: LD_INT 1
30358: PPUSH
30359: LD_VAR 0 14
30363: PPUSH
30364: CALL_OW 2
30368: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30369: LD_VAR 0 14
30373: PPUSH
30374: LD_VAR 0 9
30378: PPUSH
30379: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30383: LD_VAR 0 9
30387: PPUSH
30388: CALL_OW 313
30392: PUSH
30393: LD_INT 6
30395: EQUAL
30396: PUSH
30397: LD_VAR 0 9
30401: PPUSH
30402: CALL_OW 266
30406: PUSH
30407: LD_INT 32
30409: PUSH
30410: LD_INT 31
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: IN
30417: OR
30418: IFFALSE 30232
30420: GO 30229
30422: POP
30423: POP
// end else
30424: GO 30806
// for j = 1 to x do
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: DOUBLE
30432: LD_INT 1
30434: DEC
30435: ST_TO_ADDR
30436: LD_VAR 0 13
30440: PUSH
30441: FOR_TO
30442: IFFALSE 30804
// begin InitHc ;
30444: CALL_OW 19
// if not f then
30448: LD_VAR 0 12
30452: NOT
30453: IFFALSE 30542
// begin PrepareHuman ( false , i , skill ) ;
30455: LD_INT 0
30457: PPUSH
30458: LD_VAR 0 8
30462: PPUSH
30463: LD_VAR 0 4
30467: PPUSH
30468: CALL_OW 380
// un := CreateHuman ;
30472: LD_ADDR_VAR 0 14
30476: PUSH
30477: CALL_OW 44
30481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30482: LD_ADDR_VAR 0 7
30486: PUSH
30487: LD_VAR 0 7
30491: PPUSH
30492: LD_INT 1
30494: PPUSH
30495: LD_VAR 0 14
30499: PPUSH
30500: CALL_OW 2
30504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30505: LD_VAR 0 14
30509: PPUSH
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 250
30519: PPUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 251
30529: PPUSH
30530: LD_INT 10
30532: PPUSH
30533: LD_INT 0
30535: PPUSH
30536: CALL_OW 50
// continue ;
30540: GO 30441
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30542: LD_VAR 0 12
30546: PUSH
30547: LD_INT 1
30549: ARRAY
30550: PPUSH
30551: CALL_OW 313
30555: PUSH
30556: LD_VAR 0 12
30560: PUSH
30561: LD_INT 1
30563: ARRAY
30564: PPUSH
30565: CALL_OW 266
30569: PUSH
30570: LD_INT 32
30572: PUSH
30573: LD_INT 31
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: IN
30580: AND
30581: PUSH
30582: LD_VAR 0 12
30586: PUSH
30587: LD_INT 1
30589: ARRAY
30590: PPUSH
30591: CALL_OW 313
30595: PUSH
30596: LD_INT 6
30598: EQUAL
30599: OR
30600: IFFALSE 30620
// f := Delete ( f , 1 ) ;
30602: LD_ADDR_VAR 0 12
30606: PUSH
30607: LD_VAR 0 12
30611: PPUSH
30612: LD_INT 1
30614: PPUSH
30615: CALL_OW 3
30619: ST_TO_ADDR
// if not f then
30620: LD_VAR 0 12
30624: NOT
30625: IFFALSE 30643
// begin x := x + 2 ;
30627: LD_ADDR_VAR 0 13
30631: PUSH
30632: LD_VAR 0 13
30636: PUSH
30637: LD_INT 2
30639: PLUS
30640: ST_TO_ADDR
// continue ;
30641: GO 30441
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30643: LD_VAR 0 12
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PPUSH
30652: CALL_OW 266
30656: PUSH
30657: LD_INT 5
30659: EQUAL
30660: IFFALSE 30734
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30662: LD_VAR 0 12
30666: PUSH
30667: LD_INT 1
30669: ARRAY
30670: PPUSH
30671: CALL_OW 313
30675: PUSH
30676: LD_INT 3
30678: LESS
30679: IFFALSE 30715
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30681: LD_INT 0
30683: PPUSH
30684: LD_INT 5
30686: PUSH
30687: LD_INT 8
30689: PUSH
30690: LD_INT 9
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: PUSH
30698: LD_VAR 0 17
30702: ARRAY
30703: PPUSH
30704: LD_VAR 0 4
30708: PPUSH
30709: CALL_OW 380
30713: GO 30732
// PrepareHuman ( false , i , skill ) ;
30715: LD_INT 0
30717: PPUSH
30718: LD_VAR 0 8
30722: PPUSH
30723: LD_VAR 0 4
30727: PPUSH
30728: CALL_OW 380
// end else
30732: GO 30751
// PrepareHuman ( false , i , skill ) ;
30734: LD_INT 0
30736: PPUSH
30737: LD_VAR 0 8
30741: PPUSH
30742: LD_VAR 0 4
30746: PPUSH
30747: CALL_OW 380
// un := CreateHuman ;
30751: LD_ADDR_VAR 0 14
30755: PUSH
30756: CALL_OW 44
30760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30761: LD_ADDR_VAR 0 7
30765: PUSH
30766: LD_VAR 0 7
30770: PPUSH
30771: LD_INT 1
30773: PPUSH
30774: LD_VAR 0 14
30778: PPUSH
30779: CALL_OW 2
30783: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30784: LD_VAR 0 14
30788: PPUSH
30789: LD_VAR 0 12
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: CALL_OW 52
// end ;
30802: GO 30441
30804: POP
30805: POP
// end ;
30806: GO 29743
30808: POP
30809: POP
// result := result ^ buildings ;
30810: LD_ADDR_VAR 0 7
30814: PUSH
30815: LD_VAR 0 7
30819: PUSH
30820: LD_VAR 0 18
30824: ADD
30825: ST_TO_ADDR
// end else
30826: GO 30969
// begin for i = 1 to personel do
30828: LD_ADDR_VAR 0 8
30832: PUSH
30833: DOUBLE
30834: LD_INT 1
30836: DEC
30837: ST_TO_ADDR
30838: LD_VAR 0 6
30842: PUSH
30843: FOR_TO
30844: IFFALSE 30967
// begin if i > 4 then
30846: LD_VAR 0 8
30850: PUSH
30851: LD_INT 4
30853: GREATER
30854: IFFALSE 30858
// break ;
30856: GO 30967
// x := personel [ i ] ;
30858: LD_ADDR_VAR 0 13
30862: PUSH
30863: LD_VAR 0 6
30867: PUSH
30868: LD_VAR 0 8
30872: ARRAY
30873: ST_TO_ADDR
// if x = - 1 then
30874: LD_VAR 0 13
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: EQUAL
30883: IFFALSE 30887
// continue ;
30885: GO 30843
// PrepareHuman ( false , i , skill ) ;
30887: LD_INT 0
30889: PPUSH
30890: LD_VAR 0 8
30894: PPUSH
30895: LD_VAR 0 4
30899: PPUSH
30900: CALL_OW 380
// un := CreateHuman ;
30904: LD_ADDR_VAR 0 14
30908: PUSH
30909: CALL_OW 44
30913: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30914: LD_VAR 0 14
30918: PPUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 250
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 251
30938: PPUSH
30939: LD_INT 10
30941: PPUSH
30942: LD_INT 0
30944: PPUSH
30945: CALL_OW 50
// result := result ^ un ;
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: LD_VAR 0 7
30958: PUSH
30959: LD_VAR 0 14
30963: ADD
30964: ST_TO_ADDR
// end ;
30965: GO 30843
30967: POP
30968: POP
// end ; end ;
30969: LD_VAR 0 7
30973: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30974: LD_INT 0
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
// result := false ;
30992: LD_ADDR_VAR 0 3
30996: PUSH
30997: LD_INT 0
30999: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31000: LD_VAR 0 1
31004: NOT
31005: PUSH
31006: LD_VAR 0 1
31010: PPUSH
31011: CALL_OW 266
31015: PUSH
31016: LD_INT 32
31018: PUSH
31019: LD_INT 33
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: IN
31026: NOT
31027: OR
31028: IFFALSE 31032
// exit ;
31030: GO 32168
// nat := GetNation ( tower ) ;
31032: LD_ADDR_VAR 0 12
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: CALL_OW 248
31046: ST_TO_ADDR
// side := GetSide ( tower ) ;
31047: LD_ADDR_VAR 0 16
31051: PUSH
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 255
31061: ST_TO_ADDR
// x := GetX ( tower ) ;
31062: LD_ADDR_VAR 0 10
31066: PUSH
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 250
31076: ST_TO_ADDR
// y := GetY ( tower ) ;
31077: LD_ADDR_VAR 0 11
31081: PUSH
31082: LD_VAR 0 1
31086: PPUSH
31087: CALL_OW 251
31091: ST_TO_ADDR
// if not x or not y then
31092: LD_VAR 0 10
31096: NOT
31097: PUSH
31098: LD_VAR 0 11
31102: NOT
31103: OR
31104: IFFALSE 31108
// exit ;
31106: GO 32168
// weapon := 0 ;
31108: LD_ADDR_VAR 0 18
31112: PUSH
31113: LD_INT 0
31115: ST_TO_ADDR
// fac_list := [ ] ;
31116: LD_ADDR_VAR 0 17
31120: PUSH
31121: EMPTY
31122: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31123: LD_ADDR_VAR 0 6
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 274
31137: PPUSH
31138: LD_VAR 0 2
31142: PPUSH
31143: CALL 28746 0 2
31147: PPUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 3
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 72
31162: ST_TO_ADDR
// if not factories then
31163: LD_VAR 0 6
31167: NOT
31168: IFFALSE 31172
// exit ;
31170: GO 32168
// for i in factories do
31172: LD_ADDR_VAR 0 8
31176: PUSH
31177: LD_VAR 0 6
31181: PUSH
31182: FOR_IN
31183: IFFALSE 31208
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31185: LD_ADDR_VAR 0 17
31189: PUSH
31190: LD_VAR 0 17
31194: PUSH
31195: LD_VAR 0 8
31199: PPUSH
31200: CALL_OW 478
31204: UNION
31205: ST_TO_ADDR
31206: GO 31182
31208: POP
31209: POP
// if not fac_list then
31210: LD_VAR 0 17
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 32168
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31219: LD_ADDR_VAR 0 5
31223: PUSH
31224: LD_INT 4
31226: PUSH
31227: LD_INT 5
31229: PUSH
31230: LD_INT 9
31232: PUSH
31233: LD_INT 10
31235: PUSH
31236: LD_INT 6
31238: PUSH
31239: LD_INT 7
31241: PUSH
31242: LD_INT 11
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 27
31256: PUSH
31257: LD_INT 28
31259: PUSH
31260: LD_INT 26
31262: PUSH
31263: LD_INT 30
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 43
31274: PUSH
31275: LD_INT 44
31277: PUSH
31278: LD_INT 46
31280: PUSH
31281: LD_INT 45
31283: PUSH
31284: LD_INT 47
31286: PUSH
31287: LD_INT 49
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: PUSH
31303: LD_VAR 0 12
31307: ARRAY
31308: ST_TO_ADDR
// for i in list do
31309: LD_ADDR_VAR 0 8
31313: PUSH
31314: LD_VAR 0 5
31318: PUSH
31319: FOR_IN
31320: IFFALSE 31353
// if not i in fac_list then
31322: LD_VAR 0 8
31326: PUSH
31327: LD_VAR 0 17
31331: IN
31332: NOT
31333: IFFALSE 31351
// list := list diff i ;
31335: LD_ADDR_VAR 0 5
31339: PUSH
31340: LD_VAR 0 5
31344: PUSH
31345: LD_VAR 0 8
31349: DIFF
31350: ST_TO_ADDR
31351: GO 31319
31353: POP
31354: POP
// if not list then
31355: LD_VAR 0 5
31359: NOT
31360: IFFALSE 31364
// exit ;
31362: GO 32168
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31364: LD_VAR 0 12
31368: PUSH
31369: LD_INT 3
31371: EQUAL
31372: PUSH
31373: LD_INT 49
31375: PUSH
31376: LD_VAR 0 5
31380: IN
31381: AND
31382: PUSH
31383: LD_INT 31
31385: PPUSH
31386: LD_VAR 0 16
31390: PPUSH
31391: CALL_OW 321
31395: PUSH
31396: LD_INT 2
31398: EQUAL
31399: AND
31400: IFFALSE 31460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31402: LD_INT 22
31404: PUSH
31405: LD_VAR 0 16
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 35
31416: PUSH
31417: LD_INT 49
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 91
31426: PUSH
31427: LD_VAR 0 1
31431: PUSH
31432: LD_INT 10
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PPUSH
31445: CALL_OW 69
31449: NOT
31450: IFFALSE 31460
// weapon := ru_time_lapser ;
31452: LD_ADDR_VAR 0 18
31456: PUSH
31457: LD_INT 49
31459: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31460: LD_VAR 0 12
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: IN
31475: PUSH
31476: LD_INT 11
31478: PUSH
31479: LD_VAR 0 5
31483: IN
31484: PUSH
31485: LD_INT 30
31487: PUSH
31488: LD_VAR 0 5
31492: IN
31493: OR
31494: AND
31495: PUSH
31496: LD_INT 6
31498: PPUSH
31499: LD_VAR 0 16
31503: PPUSH
31504: CALL_OW 321
31508: PUSH
31509: LD_INT 2
31511: EQUAL
31512: AND
31513: IFFALSE 31678
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31515: LD_INT 22
31517: PUSH
31518: LD_VAR 0 16
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: LD_INT 35
31532: PUSH
31533: LD_INT 11
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 35
31542: PUSH
31543: LD_INT 30
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 91
31557: PUSH
31558: LD_VAR 0 1
31562: PUSH
31563: LD_INT 18
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: PPUSH
31576: CALL_OW 69
31580: NOT
31581: PUSH
31582: LD_INT 22
31584: PUSH
31585: LD_VAR 0 16
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 30
31599: PUSH
31600: LD_INT 32
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 30
31609: PUSH
31610: LD_INT 33
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 91
31624: PUSH
31625: LD_VAR 0 1
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: PPUSH
31646: CALL_OW 69
31650: PUSH
31651: LD_INT 2
31653: GREATER
31654: AND
31655: IFFALSE 31678
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31657: LD_ADDR_VAR 0 18
31661: PUSH
31662: LD_INT 11
31664: PUSH
31665: LD_INT 30
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_VAR 0 12
31676: ARRAY
31677: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31678: LD_VAR 0 18
31682: NOT
31683: PUSH
31684: LD_INT 40
31686: PPUSH
31687: LD_VAR 0 16
31691: PPUSH
31692: CALL_OW 321
31696: PUSH
31697: LD_INT 2
31699: EQUAL
31700: AND
31701: PUSH
31702: LD_INT 7
31704: PUSH
31705: LD_VAR 0 5
31709: IN
31710: PUSH
31711: LD_INT 28
31713: PUSH
31714: LD_VAR 0 5
31718: IN
31719: OR
31720: PUSH
31721: LD_INT 45
31723: PUSH
31724: LD_VAR 0 5
31728: IN
31729: OR
31730: AND
31731: IFFALSE 31985
// begin hex := GetHexInfo ( x , y ) ;
31733: LD_ADDR_VAR 0 4
31737: PUSH
31738: LD_VAR 0 10
31742: PPUSH
31743: LD_VAR 0 11
31747: PPUSH
31748: CALL_OW 546
31752: ST_TO_ADDR
// if hex [ 1 ] then
31753: LD_VAR 0 4
31757: PUSH
31758: LD_INT 1
31760: ARRAY
31761: IFFALSE 31765
// exit ;
31763: GO 32168
// height := hex [ 2 ] ;
31765: LD_ADDR_VAR 0 15
31769: PUSH
31770: LD_VAR 0 4
31774: PUSH
31775: LD_INT 2
31777: ARRAY
31778: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31779: LD_ADDR_VAR 0 14
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 5
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// for i in tmp do
31802: LD_ADDR_VAR 0 8
31806: PUSH
31807: LD_VAR 0 14
31811: PUSH
31812: FOR_IN
31813: IFFALSE 31983
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31815: LD_ADDR_VAR 0 9
31819: PUSH
31820: LD_VAR 0 10
31824: PPUSH
31825: LD_VAR 0 8
31829: PPUSH
31830: LD_INT 5
31832: PPUSH
31833: CALL_OW 272
31837: PUSH
31838: LD_VAR 0 11
31842: PPUSH
31843: LD_VAR 0 8
31847: PPUSH
31848: LD_INT 5
31850: PPUSH
31851: CALL_OW 273
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31860: LD_VAR 0 9
31864: PUSH
31865: LD_INT 1
31867: ARRAY
31868: PPUSH
31869: LD_VAR 0 9
31873: PUSH
31874: LD_INT 2
31876: ARRAY
31877: PPUSH
31878: CALL_OW 488
31882: IFFALSE 31981
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31884: LD_ADDR_VAR 0 4
31888: PUSH
31889: LD_VAR 0 9
31893: PUSH
31894: LD_INT 1
31896: ARRAY
31897: PPUSH
31898: LD_VAR 0 9
31902: PUSH
31903: LD_INT 2
31905: ARRAY
31906: PPUSH
31907: CALL_OW 546
31911: ST_TO_ADDR
// if hex [ 1 ] then
31912: LD_VAR 0 4
31916: PUSH
31917: LD_INT 1
31919: ARRAY
31920: IFFALSE 31924
// continue ;
31922: GO 31812
// h := hex [ 2 ] ;
31924: LD_ADDR_VAR 0 13
31928: PUSH
31929: LD_VAR 0 4
31933: PUSH
31934: LD_INT 2
31936: ARRAY
31937: ST_TO_ADDR
// if h + 7 < height then
31938: LD_VAR 0 13
31942: PUSH
31943: LD_INT 7
31945: PLUS
31946: PUSH
31947: LD_VAR 0 15
31951: LESS
31952: IFFALSE 31981
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31954: LD_ADDR_VAR 0 18
31958: PUSH
31959: LD_INT 7
31961: PUSH
31962: LD_INT 28
31964: PUSH
31965: LD_INT 45
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: PUSH
31973: LD_VAR 0 12
31977: ARRAY
31978: ST_TO_ADDR
// break ;
31979: GO 31983
// end ; end ; end ;
31981: GO 31812
31983: POP
31984: POP
// end ; if not weapon then
31985: LD_VAR 0 18
31989: NOT
31990: IFFALSE 32050
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31992: LD_ADDR_VAR 0 5
31996: PUSH
31997: LD_VAR 0 5
32001: PUSH
32002: LD_INT 11
32004: PUSH
32005: LD_INT 30
32007: PUSH
32008: LD_INT 49
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: DIFF
32016: ST_TO_ADDR
// if not list then
32017: LD_VAR 0 5
32021: NOT
32022: IFFALSE 32026
// exit ;
32024: GO 32168
// weapon := list [ rand ( 1 , list ) ] ;
32026: LD_ADDR_VAR 0 18
32030: PUSH
32031: LD_VAR 0 5
32035: PUSH
32036: LD_INT 1
32038: PPUSH
32039: LD_VAR 0 5
32043: PPUSH
32044: CALL_OW 12
32048: ARRAY
32049: ST_TO_ADDR
// end ; if weapon then
32050: LD_VAR 0 18
32054: IFFALSE 32168
// begin tmp := CostOfWeapon ( weapon ) ;
32056: LD_ADDR_VAR 0 14
32060: PUSH
32061: LD_VAR 0 18
32065: PPUSH
32066: CALL_OW 451
32070: ST_TO_ADDR
// j := GetBase ( tower ) ;
32071: LD_ADDR_VAR 0 9
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: CALL_OW 274
32085: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32086: LD_VAR 0 9
32090: PPUSH
32091: LD_INT 1
32093: PPUSH
32094: CALL_OW 275
32098: PUSH
32099: LD_VAR 0 14
32103: PUSH
32104: LD_INT 1
32106: ARRAY
32107: GREATEREQUAL
32108: PUSH
32109: LD_VAR 0 9
32113: PPUSH
32114: LD_INT 2
32116: PPUSH
32117: CALL_OW 275
32121: PUSH
32122: LD_VAR 0 14
32126: PUSH
32127: LD_INT 2
32129: ARRAY
32130: GREATEREQUAL
32131: AND
32132: PUSH
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_INT 3
32140: PPUSH
32141: CALL_OW 275
32145: PUSH
32146: LD_VAR 0 14
32150: PUSH
32151: LD_INT 3
32153: ARRAY
32154: GREATEREQUAL
32155: AND
32156: IFFALSE 32168
// result := weapon ;
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: LD_VAR 0 18
32167: ST_TO_ADDR
// end ; end ;
32168: LD_VAR 0 3
32172: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32173: LD_INT 0
32175: PPUSH
32176: PPUSH
// result := true ;
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_INT 1
32184: ST_TO_ADDR
// if array1 = array2 then
32185: LD_VAR 0 1
32189: PUSH
32190: LD_VAR 0 2
32194: EQUAL
32195: IFFALSE 32255
// begin for i = 1 to array1 do
32197: LD_ADDR_VAR 0 4
32201: PUSH
32202: DOUBLE
32203: LD_INT 1
32205: DEC
32206: ST_TO_ADDR
32207: LD_VAR 0 1
32211: PUSH
32212: FOR_TO
32213: IFFALSE 32251
// if array1 [ i ] <> array2 [ i ] then
32215: LD_VAR 0 1
32219: PUSH
32220: LD_VAR 0 4
32224: ARRAY
32225: PUSH
32226: LD_VAR 0 2
32230: PUSH
32231: LD_VAR 0 4
32235: ARRAY
32236: NONEQUAL
32237: IFFALSE 32249
// begin result := false ;
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_INT 0
32246: ST_TO_ADDR
// break ;
32247: GO 32251
// end ;
32249: GO 32212
32251: POP
32252: POP
// end else
32253: GO 32263
// result := false ;
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_INT 0
32262: ST_TO_ADDR
// end ;
32263: LD_VAR 0 3
32267: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32268: LD_INT 0
32270: PPUSH
32271: PPUSH
32272: PPUSH
// pom := GetBase ( fac ) ;
32273: LD_ADDR_VAR 0 5
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 274
32287: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32288: LD_ADDR_VAR 0 4
32292: PUSH
32293: LD_VAR 0 2
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 2
32306: PUSH
32307: LD_INT 2
32309: ARRAY
32310: PPUSH
32311: LD_VAR 0 2
32315: PUSH
32316: LD_INT 3
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 2
32324: PUSH
32325: LD_INT 4
32327: ARRAY
32328: PPUSH
32329: CALL_OW 449
32333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_VAR 0 5
32343: PPUSH
32344: LD_INT 1
32346: PPUSH
32347: CALL_OW 275
32351: PUSH
32352: LD_VAR 0 4
32356: PUSH
32357: LD_INT 1
32359: ARRAY
32360: GREATEREQUAL
32361: PUSH
32362: LD_VAR 0 5
32366: PPUSH
32367: LD_INT 2
32369: PPUSH
32370: CALL_OW 275
32374: PUSH
32375: LD_VAR 0 4
32379: PUSH
32380: LD_INT 2
32382: ARRAY
32383: GREATEREQUAL
32384: AND
32385: PUSH
32386: LD_VAR 0 5
32390: PPUSH
32391: LD_INT 3
32393: PPUSH
32394: CALL_OW 275
32398: PUSH
32399: LD_VAR 0 4
32403: PUSH
32404: LD_INT 3
32406: ARRAY
32407: GREATEREQUAL
32408: AND
32409: ST_TO_ADDR
// end ;
32410: LD_VAR 0 3
32414: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32415: LD_INT 0
32417: PPUSH
32418: PPUSH
32419: PPUSH
32420: PPUSH
// pom := GetBase ( building ) ;
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 274
32435: ST_TO_ADDR
// if not pom then
32436: LD_VAR 0 3
32440: NOT
32441: IFFALSE 32445
// exit ;
32443: GO 32615
// btype := GetBType ( building ) ;
32445: LD_ADDR_VAR 0 5
32449: PUSH
32450: LD_VAR 0 1
32454: PPUSH
32455: CALL_OW 266
32459: ST_TO_ADDR
// if btype = b_armoury then
32460: LD_VAR 0 5
32464: PUSH
32465: LD_INT 4
32467: EQUAL
32468: IFFALSE 32478
// btype := b_barracks ;
32470: LD_ADDR_VAR 0 5
32474: PUSH
32475: LD_INT 5
32477: ST_TO_ADDR
// if btype = b_depot then
32478: LD_VAR 0 5
32482: PUSH
32483: LD_INT 0
32485: EQUAL
32486: IFFALSE 32496
// btype := b_warehouse ;
32488: LD_ADDR_VAR 0 5
32492: PUSH
32493: LD_INT 1
32495: ST_TO_ADDR
// if btype = b_workshop then
32496: LD_VAR 0 5
32500: PUSH
32501: LD_INT 2
32503: EQUAL
32504: IFFALSE 32514
// btype := b_factory ;
32506: LD_ADDR_VAR 0 5
32510: PUSH
32511: LD_INT 3
32513: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32514: LD_ADDR_VAR 0 4
32518: PUSH
32519: LD_VAR 0 5
32523: PPUSH
32524: LD_VAR 0 1
32528: PPUSH
32529: CALL_OW 248
32533: PPUSH
32534: CALL_OW 450
32538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32539: LD_ADDR_VAR 0 2
32543: PUSH
32544: LD_VAR 0 3
32548: PPUSH
32549: LD_INT 1
32551: PPUSH
32552: CALL_OW 275
32556: PUSH
32557: LD_VAR 0 4
32561: PUSH
32562: LD_INT 1
32564: ARRAY
32565: GREATEREQUAL
32566: PUSH
32567: LD_VAR 0 3
32571: PPUSH
32572: LD_INT 2
32574: PPUSH
32575: CALL_OW 275
32579: PUSH
32580: LD_VAR 0 4
32584: PUSH
32585: LD_INT 2
32587: ARRAY
32588: GREATEREQUAL
32589: AND
32590: PUSH
32591: LD_VAR 0 3
32595: PPUSH
32596: LD_INT 3
32598: PPUSH
32599: CALL_OW 275
32603: PUSH
32604: LD_VAR 0 4
32608: PUSH
32609: LD_INT 3
32611: ARRAY
32612: GREATEREQUAL
32613: AND
32614: ST_TO_ADDR
// end ;
32615: LD_VAR 0 2
32619: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32620: LD_INT 0
32622: PPUSH
32623: PPUSH
32624: PPUSH
// pom := GetBase ( building ) ;
32625: LD_ADDR_VAR 0 4
32629: PUSH
32630: LD_VAR 0 1
32634: PPUSH
32635: CALL_OW 274
32639: ST_TO_ADDR
// if not pom then
32640: LD_VAR 0 4
32644: NOT
32645: IFFALSE 32649
// exit ;
32647: GO 32750
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32649: LD_ADDR_VAR 0 5
32653: PUSH
32654: LD_VAR 0 2
32658: PPUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 248
32668: PPUSH
32669: CALL_OW 450
32673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32674: LD_ADDR_VAR 0 3
32678: PUSH
32679: LD_VAR 0 4
32683: PPUSH
32684: LD_INT 1
32686: PPUSH
32687: CALL_OW 275
32691: PUSH
32692: LD_VAR 0 5
32696: PUSH
32697: LD_INT 1
32699: ARRAY
32700: GREATEREQUAL
32701: PUSH
32702: LD_VAR 0 4
32706: PPUSH
32707: LD_INT 2
32709: PPUSH
32710: CALL_OW 275
32714: PUSH
32715: LD_VAR 0 5
32719: PUSH
32720: LD_INT 2
32722: ARRAY
32723: GREATEREQUAL
32724: AND
32725: PUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: LD_INT 3
32733: PPUSH
32734: CALL_OW 275
32738: PUSH
32739: LD_VAR 0 5
32743: PUSH
32744: LD_INT 3
32746: ARRAY
32747: GREATEREQUAL
32748: AND
32749: ST_TO_ADDR
// end ;
32750: LD_VAR 0 3
32754: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32755: LD_INT 0
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
// result := false ;
32767: LD_ADDR_VAR 0 6
32771: PUSH
32772: LD_INT 0
32774: ST_TO_ADDR
// if not base or not btype or not x or not y then
32775: LD_VAR 0 1
32779: NOT
32780: PUSH
32781: LD_VAR 0 2
32785: NOT
32786: OR
32787: PUSH
32788: LD_VAR 0 3
32792: NOT
32793: OR
32794: PUSH
32795: LD_VAR 0 4
32799: NOT
32800: OR
32801: IFFALSE 32805
// exit ;
32803: GO 33396
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32805: LD_ADDR_VAR 0 12
32809: PUSH
32810: LD_VAR 0 2
32814: PPUSH
32815: LD_VAR 0 3
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: LD_VAR 0 1
32834: PUSH
32835: LD_INT 1
32837: ARRAY
32838: PPUSH
32839: CALL_OW 248
32843: PPUSH
32844: LD_INT 0
32846: PPUSH
32847: CALL 34233 0 6
32851: ST_TO_ADDR
// if not hexes then
32852: LD_VAR 0 12
32856: NOT
32857: IFFALSE 32861
// exit ;
32859: GO 33396
// for i = 1 to hexes do
32861: LD_ADDR_VAR 0 7
32865: PUSH
32866: DOUBLE
32867: LD_INT 1
32869: DEC
32870: ST_TO_ADDR
32871: LD_VAR 0 12
32875: PUSH
32876: FOR_TO
32877: IFFALSE 33394
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32879: LD_ADDR_VAR 0 11
32883: PUSH
32884: LD_VAR 0 12
32888: PUSH
32889: LD_VAR 0 7
32893: ARRAY
32894: PUSH
32895: LD_INT 1
32897: ARRAY
32898: PPUSH
32899: LD_VAR 0 12
32903: PUSH
32904: LD_VAR 0 7
32908: ARRAY
32909: PUSH
32910: LD_INT 2
32912: ARRAY
32913: PPUSH
32914: CALL_OW 428
32918: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32919: LD_VAR 0 12
32923: PUSH
32924: LD_VAR 0 7
32928: ARRAY
32929: PUSH
32930: LD_INT 1
32932: ARRAY
32933: PPUSH
32934: LD_VAR 0 12
32938: PUSH
32939: LD_VAR 0 7
32943: ARRAY
32944: PUSH
32945: LD_INT 2
32947: ARRAY
32948: PPUSH
32949: CALL_OW 351
32953: PUSH
32954: LD_VAR 0 12
32958: PUSH
32959: LD_VAR 0 7
32963: ARRAY
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_VAR 0 12
32973: PUSH
32974: LD_VAR 0 7
32978: ARRAY
32979: PUSH
32980: LD_INT 2
32982: ARRAY
32983: PPUSH
32984: CALL_OW 488
32988: NOT
32989: OR
32990: PUSH
32991: LD_VAR 0 11
32995: PPUSH
32996: CALL_OW 247
33000: PUSH
33001: LD_INT 3
33003: EQUAL
33004: OR
33005: IFFALSE 33011
// exit ;
33007: POP
33008: POP
33009: GO 33396
// if not tmp then
33011: LD_VAR 0 11
33015: NOT
33016: IFFALSE 33020
// continue ;
33018: GO 32876
// result := true ;
33020: LD_ADDR_VAR 0 6
33024: PUSH
33025: LD_INT 1
33027: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33028: LD_ADDR_VAR 0 15
33032: PUSH
33033: LD_INT 22
33035: PUSH
33036: LD_VAR 0 11
33040: PPUSH
33041: CALL_OW 255
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 30
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 30
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 69
33086: ST_TO_ADDR
// if dep then
33087: LD_VAR 0 15
33091: IFFALSE 33227
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33093: LD_ADDR_VAR 0 14
33097: PUSH
33098: LD_VAR 0 15
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 250
33111: PPUSH
33112: LD_VAR 0 15
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 254
33125: PPUSH
33126: LD_INT 5
33128: PPUSH
33129: CALL_OW 272
33133: PUSH
33134: LD_VAR 0 15
33138: PUSH
33139: LD_INT 1
33141: ARRAY
33142: PPUSH
33143: CALL_OW 251
33147: PPUSH
33148: LD_VAR 0 15
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: CALL_OW 254
33161: PPUSH
33162: LD_INT 5
33164: PPUSH
33165: CALL_OW 273
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33174: LD_VAR 0 14
33178: PUSH
33179: LD_INT 1
33181: ARRAY
33182: PPUSH
33183: LD_VAR 0 14
33187: PUSH
33188: LD_INT 2
33190: ARRAY
33191: PPUSH
33192: CALL_OW 488
33196: IFFALSE 33227
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33198: LD_VAR 0 11
33202: PPUSH
33203: LD_VAR 0 14
33207: PUSH
33208: LD_INT 1
33210: ARRAY
33211: PPUSH
33212: LD_VAR 0 14
33216: PUSH
33217: LD_INT 2
33219: ARRAY
33220: PPUSH
33221: CALL_OW 111
// continue ;
33225: GO 32876
// end ; end ; r := GetDir ( tmp ) ;
33227: LD_ADDR_VAR 0 13
33231: PUSH
33232: LD_VAR 0 11
33236: PPUSH
33237: CALL_OW 254
33241: ST_TO_ADDR
// if r = 5 then
33242: LD_VAR 0 13
33246: PUSH
33247: LD_INT 5
33249: EQUAL
33250: IFFALSE 33260
// r := 0 ;
33252: LD_ADDR_VAR 0 13
33256: PUSH
33257: LD_INT 0
33259: ST_TO_ADDR
// for j = r to 5 do
33260: LD_ADDR_VAR 0 8
33264: PUSH
33265: DOUBLE
33266: LD_VAR 0 13
33270: DEC
33271: ST_TO_ADDR
33272: LD_INT 5
33274: PUSH
33275: FOR_TO
33276: IFFALSE 33390
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33278: LD_ADDR_VAR 0 9
33282: PUSH
33283: LD_VAR 0 11
33287: PPUSH
33288: CALL_OW 250
33292: PPUSH
33293: LD_VAR 0 8
33297: PPUSH
33298: LD_INT 2
33300: PPUSH
33301: CALL_OW 272
33305: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33306: LD_ADDR_VAR 0 10
33310: PUSH
33311: LD_VAR 0 11
33315: PPUSH
33316: CALL_OW 251
33320: PPUSH
33321: LD_VAR 0 8
33325: PPUSH
33326: LD_INT 2
33328: PPUSH
33329: CALL_OW 273
33333: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33334: LD_VAR 0 9
33338: PPUSH
33339: LD_VAR 0 10
33343: PPUSH
33344: CALL_OW 488
33348: PUSH
33349: LD_VAR 0 9
33353: PPUSH
33354: LD_VAR 0 10
33358: PPUSH
33359: CALL_OW 428
33363: NOT
33364: AND
33365: IFFALSE 33388
// begin ComMoveXY ( tmp , _x , _y ) ;
33367: LD_VAR 0 11
33371: PPUSH
33372: LD_VAR 0 9
33376: PPUSH
33377: LD_VAR 0 10
33381: PPUSH
33382: CALL_OW 111
// break ;
33386: GO 33390
// end ; end ;
33388: GO 33275
33390: POP
33391: POP
// end ;
33392: GO 32876
33394: POP
33395: POP
// end ;
33396: LD_VAR 0 6
33400: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33401: LD_INT 0
33403: PPUSH
33404: PPUSH
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
// result := false ;
33413: LD_ADDR_VAR 0 6
33417: PUSH
33418: LD_INT 0
33420: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33421: LD_VAR 0 1
33425: NOT
33426: PUSH
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 266
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: IN
33447: NOT
33448: OR
33449: PUSH
33450: LD_VAR 0 2
33454: NOT
33455: OR
33456: PUSH
33457: LD_VAR 0 5
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: LD_INT 5
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: IN
33488: NOT
33489: OR
33490: PUSH
33491: LD_VAR 0 3
33495: PPUSH
33496: LD_VAR 0 4
33500: PPUSH
33501: CALL_OW 488
33505: NOT
33506: OR
33507: IFFALSE 33511
// exit ;
33509: GO 34228
// pom := GetBase ( depot ) ;
33511: LD_ADDR_VAR 0 10
33515: PUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: CALL_OW 274
33525: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33526: LD_ADDR_VAR 0 11
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: LD_VAR 0 1
33540: PPUSH
33541: CALL_OW 248
33545: PPUSH
33546: CALL_OW 450
33550: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33551: LD_VAR 0 10
33555: PPUSH
33556: LD_INT 1
33558: PPUSH
33559: CALL_OW 275
33563: PUSH
33564: LD_VAR 0 11
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: GREATEREQUAL
33573: PUSH
33574: LD_VAR 0 10
33578: PPUSH
33579: LD_INT 2
33581: PPUSH
33582: CALL_OW 275
33586: PUSH
33587: LD_VAR 0 11
33591: PUSH
33592: LD_INT 2
33594: ARRAY
33595: GREATEREQUAL
33596: AND
33597: PUSH
33598: LD_VAR 0 10
33602: PPUSH
33603: LD_INT 3
33605: PPUSH
33606: CALL_OW 275
33610: PUSH
33611: LD_VAR 0 11
33615: PUSH
33616: LD_INT 3
33618: ARRAY
33619: GREATEREQUAL
33620: AND
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 34228
// if GetBType ( depot ) = b_depot then
33626: LD_VAR 0 1
33630: PPUSH
33631: CALL_OW 266
33635: PUSH
33636: LD_INT 0
33638: EQUAL
33639: IFFALSE 33651
// dist := 28 else
33641: LD_ADDR_VAR 0 14
33645: PUSH
33646: LD_INT 28
33648: ST_TO_ADDR
33649: GO 33659
// dist := 36 ;
33651: LD_ADDR_VAR 0 14
33655: PUSH
33656: LD_INT 36
33658: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33659: LD_VAR 0 1
33663: PPUSH
33664: LD_VAR 0 3
33668: PPUSH
33669: LD_VAR 0 4
33673: PPUSH
33674: CALL_OW 297
33678: PUSH
33679: LD_VAR 0 14
33683: GREATER
33684: IFFALSE 33688
// exit ;
33686: GO 34228
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33688: LD_ADDR_VAR 0 12
33692: PUSH
33693: LD_VAR 0 2
33697: PPUSH
33698: LD_VAR 0 3
33702: PPUSH
33703: LD_VAR 0 4
33707: PPUSH
33708: LD_VAR 0 5
33712: PPUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 248
33722: PPUSH
33723: LD_INT 0
33725: PPUSH
33726: CALL 34233 0 6
33730: ST_TO_ADDR
// if not hexes then
33731: LD_VAR 0 12
33735: NOT
33736: IFFALSE 33740
// exit ;
33738: GO 34228
// hex := GetHexInfo ( x , y ) ;
33740: LD_ADDR_VAR 0 15
33744: PUSH
33745: LD_VAR 0 3
33749: PPUSH
33750: LD_VAR 0 4
33754: PPUSH
33755: CALL_OW 546
33759: ST_TO_ADDR
// if hex [ 1 ] then
33760: LD_VAR 0 15
33764: PUSH
33765: LD_INT 1
33767: ARRAY
33768: IFFALSE 33772
// exit ;
33770: GO 34228
// height := hex [ 2 ] ;
33772: LD_ADDR_VAR 0 13
33776: PUSH
33777: LD_VAR 0 15
33781: PUSH
33782: LD_INT 2
33784: ARRAY
33785: ST_TO_ADDR
// for i = 1 to hexes do
33786: LD_ADDR_VAR 0 7
33790: PUSH
33791: DOUBLE
33792: LD_INT 1
33794: DEC
33795: ST_TO_ADDR
33796: LD_VAR 0 12
33800: PUSH
33801: FOR_TO
33802: IFFALSE 34132
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33804: LD_VAR 0 12
33808: PUSH
33809: LD_VAR 0 7
33813: ARRAY
33814: PUSH
33815: LD_INT 1
33817: ARRAY
33818: PPUSH
33819: LD_VAR 0 12
33823: PUSH
33824: LD_VAR 0 7
33828: ARRAY
33829: PUSH
33830: LD_INT 2
33832: ARRAY
33833: PPUSH
33834: CALL_OW 488
33838: NOT
33839: PUSH
33840: LD_VAR 0 12
33844: PUSH
33845: LD_VAR 0 7
33849: ARRAY
33850: PUSH
33851: LD_INT 1
33853: ARRAY
33854: PPUSH
33855: LD_VAR 0 12
33859: PUSH
33860: LD_VAR 0 7
33864: ARRAY
33865: PUSH
33866: LD_INT 2
33868: ARRAY
33869: PPUSH
33870: CALL_OW 428
33874: PUSH
33875: LD_INT 0
33877: GREATER
33878: OR
33879: PUSH
33880: LD_VAR 0 12
33884: PUSH
33885: LD_VAR 0 7
33889: ARRAY
33890: PUSH
33891: LD_INT 1
33893: ARRAY
33894: PPUSH
33895: LD_VAR 0 12
33899: PUSH
33900: LD_VAR 0 7
33904: ARRAY
33905: PUSH
33906: LD_INT 2
33908: ARRAY
33909: PPUSH
33910: CALL_OW 351
33914: OR
33915: IFFALSE 33921
// exit ;
33917: POP
33918: POP
33919: GO 34228
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33921: LD_ADDR_VAR 0 8
33925: PUSH
33926: LD_VAR 0 12
33930: PUSH
33931: LD_VAR 0 7
33935: ARRAY
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: LD_VAR 0 12
33945: PUSH
33946: LD_VAR 0 7
33950: ARRAY
33951: PUSH
33952: LD_INT 2
33954: ARRAY
33955: PPUSH
33956: CALL_OW 546
33960: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33961: LD_VAR 0 8
33965: PUSH
33966: LD_INT 1
33968: ARRAY
33969: PUSH
33970: LD_VAR 0 8
33974: PUSH
33975: LD_INT 2
33977: ARRAY
33978: PUSH
33979: LD_VAR 0 13
33983: PUSH
33984: LD_INT 2
33986: PLUS
33987: GREATER
33988: OR
33989: PUSH
33990: LD_VAR 0 8
33994: PUSH
33995: LD_INT 2
33997: ARRAY
33998: PUSH
33999: LD_VAR 0 13
34003: PUSH
34004: LD_INT 2
34006: MINUS
34007: LESS
34008: OR
34009: PUSH
34010: LD_VAR 0 8
34014: PUSH
34015: LD_INT 3
34017: ARRAY
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 8
34024: PUSH
34025: LD_INT 9
34027: PUSH
34028: LD_INT 10
34030: PUSH
34031: LD_INT 11
34033: PUSH
34034: LD_INT 12
34036: PUSH
34037: LD_INT 13
34039: PUSH
34040: LD_INT 16
34042: PUSH
34043: LD_INT 17
34045: PUSH
34046: LD_INT 18
34048: PUSH
34049: LD_INT 19
34051: PUSH
34052: LD_INT 20
34054: PUSH
34055: LD_INT 21
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: IN
34073: NOT
34074: OR
34075: PUSH
34076: LD_VAR 0 8
34080: PUSH
34081: LD_INT 5
34083: ARRAY
34084: NOT
34085: OR
34086: PUSH
34087: LD_VAR 0 8
34091: PUSH
34092: LD_INT 6
34094: ARRAY
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 7
34104: PUSH
34105: LD_INT 9
34107: PUSH
34108: LD_INT 10
34110: PUSH
34111: LD_INT 11
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: IN
34122: NOT
34123: OR
34124: IFFALSE 34130
// exit ;
34126: POP
34127: POP
34128: GO 34228
// end ;
34130: GO 33801
34132: POP
34133: POP
// side := GetSide ( depot ) ;
34134: LD_ADDR_VAR 0 9
34138: PUSH
34139: LD_VAR 0 1
34143: PPUSH
34144: CALL_OW 255
34148: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34149: LD_VAR 0 9
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: LD_VAR 0 4
34163: PPUSH
34164: LD_INT 20
34166: PPUSH
34167: CALL 26900 0 4
34171: PUSH
34172: LD_INT 4
34174: ARRAY
34175: IFFALSE 34179
// exit ;
34177: GO 34228
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34179: LD_VAR 0 2
34183: PUSH
34184: LD_INT 29
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: IN
34194: PUSH
34195: LD_VAR 0 3
34199: PPUSH
34200: LD_VAR 0 4
34204: PPUSH
34205: LD_VAR 0 9
34209: PPUSH
34210: CALL_OW 440
34214: NOT
34215: AND
34216: IFFALSE 34220
// exit ;
34218: GO 34228
// result := true ;
34220: LD_ADDR_VAR 0 6
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 6
34232: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
// result = [ ] ;
34293: LD_ADDR_VAR 0 7
34297: PUSH
34298: EMPTY
34299: ST_TO_ADDR
// temp_list = [ ] ;
34300: LD_ADDR_VAR 0 9
34304: PUSH
34305: EMPTY
34306: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34307: LD_VAR 0 4
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: LD_INT 4
34326: PUSH
34327: LD_INT 5
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: IN
34338: NOT
34339: PUSH
34340: LD_VAR 0 1
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: IN
34355: PUSH
34356: LD_VAR 0 5
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 3
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: IN
34375: NOT
34376: AND
34377: OR
34378: IFFALSE 34382
// exit ;
34380: GO 52767
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34382: LD_VAR 0 1
34386: PUSH
34387: LD_INT 6
34389: PUSH
34390: LD_INT 7
34392: PUSH
34393: LD_INT 8
34395: PUSH
34396: LD_INT 13
34398: PUSH
34399: LD_INT 12
34401: PUSH
34402: LD_INT 15
34404: PUSH
34405: LD_INT 11
34407: PUSH
34408: LD_INT 14
34410: PUSH
34411: LD_INT 10
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: IN
34425: IFFALSE 34435
// btype = b_lab ;
34427: LD_ADDR_VAR 0 1
34431: PUSH
34432: LD_INT 6
34434: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34435: LD_VAR 0 6
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: IN
34454: NOT
34455: PUSH
34456: LD_VAR 0 1
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 6
34475: PUSH
34476: LD_INT 36
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: LD_INT 31
34487: PUSH
34488: LD_INT 32
34490: PUSH
34491: LD_INT 33
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: IN
34507: NOT
34508: PUSH
34509: LD_VAR 0 6
34513: PUSH
34514: LD_INT 1
34516: EQUAL
34517: AND
34518: OR
34519: PUSH
34520: LD_VAR 0 1
34524: PUSH
34525: LD_INT 2
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: IN
34535: NOT
34536: PUSH
34537: LD_VAR 0 6
34541: PUSH
34542: LD_INT 2
34544: EQUAL
34545: AND
34546: OR
34547: IFFALSE 34557
// mode = 0 ;
34549: LD_ADDR_VAR 0 6
34553: PUSH
34554: LD_INT 0
34556: ST_TO_ADDR
// case mode of 0 :
34557: LD_VAR 0 6
34561: PUSH
34562: LD_INT 0
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 46023
34570: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34571: LD_ADDR_VAR 0 11
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34764: LD_ADDR_VAR 0 12
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 3
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34960: LD_ADDR_VAR 0 13
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: NEG
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 3
35131: NEG
35132: PUSH
35133: LD_INT 3
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35159: LD_ADDR_VAR 0 14
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 3
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 3
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35355: LD_ADDR_VAR 0 15
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35548: LD_ADDR_VAR 0 16
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: LD_INT 3
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35741: LD_ADDR_VAR 0 17
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: NEG
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35971: LD_ADDR_VAR 0 18
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: LD_INT 2
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36201: LD_ADDR_VAR 0 19
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36431: LD_ADDR_VAR 0 20
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 2
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: LD_INT 2
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36661: LD_ADDR_VAR 0 21
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36891: LD_ADDR_VAR 0 22
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 2
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: NEG
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37121: LD_ADDR_VAR 0 23
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 3
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: LD_INT 2
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37401: LD_ADDR_VAR 0 24
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37677: LD_ADDR_VAR 0 25
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 3
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 3
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37951: LD_ADDR_VAR 0 26
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 2
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38227: LD_ADDR_VAR 0 27
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 3
38460: NEG
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 3
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38507: LD_ADDR_VAR 0 28
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 2
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: LD_INT 2
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38789: LD_ADDR_VAR 0 29
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: LD_INT 2
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: LD_INT 3
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 3
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39068: LD_ADDR_VAR 0 30
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39346: LD_ADDR_VAR 0 31
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39624: LD_ADDR_VAR 0 32
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 3
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: LD_INT 3
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39902: LD_ADDR_VAR 0 33
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 3
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40181: LD_ADDR_VAR 0 34
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40461: LD_ADDR_VAR 0 35
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40573: LD_ADDR_VAR 0 36
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40685: LD_ADDR_VAR 0 37
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40797: LD_ADDR_VAR 0 38
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40909: LD_ADDR_VAR 0 39
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41021: LD_ADDR_VAR 0 40
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41133: LD_ADDR_VAR 0 41
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 3
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 3
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41483: LD_ADDR_VAR 0 42
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: LD_INT 3
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 3
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41833: LD_ADDR_VAR 0 43
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: LD_INT 3
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42181: LD_ADDR_VAR 0 44
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 3
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42531: LD_ADDR_VAR 0 45
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 3
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42881: LD_ADDR_VAR 0 46
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43229: LD_ADDR_VAR 0 47
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43380: LD_ADDR_VAR 0 48
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43527: LD_ADDR_VAR 0 49
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43671: LD_ADDR_VAR 0 50
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43815: LD_ADDR_VAR 0 51
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43962: LD_ADDR_VAR 0 52
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44113: LD_ADDR_VAR 0 53
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44343: LD_ADDR_VAR 0 54
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44573: LD_ADDR_VAR 0 55
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44803: LD_ADDR_VAR 0 56
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45033: LD_ADDR_VAR 0 57
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45263: LD_ADDR_VAR 0 58
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45493: LD_ADDR_VAR 0 59
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45581: LD_ADDR_VAR 0 60
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45669: LD_ADDR_VAR 0 61
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45757: LD_ADDR_VAR 0 62
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45845: LD_ADDR_VAR 0 63
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45933: LD_ADDR_VAR 0 64
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// end ; 1 :
46021: GO 51918
46023: LD_INT 1
46025: DOUBLE
46026: EQUAL
46027: IFTRUE 46031
46029: GO 48654
46031: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46032: LD_ADDR_VAR 0 11
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46076: LD_ADDR_VAR 0 12
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46117: LD_ADDR_VAR 0 13
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46157: LD_ADDR_VAR 0 14
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46198: LD_ADDR_VAR 0 15
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46242: LD_ADDR_VAR 0 16
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: LD_INT 3
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46288: LD_ADDR_VAR 0 17
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46332: LD_ADDR_VAR 0 18
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46373: LD_ADDR_VAR 0 19
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46413: LD_ADDR_VAR 0 20
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46454: LD_ADDR_VAR 0 21
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46498: LD_ADDR_VAR 0 22
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: NEG
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46544: LD_ADDR_VAR 0 23
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 4
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46588: LD_ADDR_VAR 0 24
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46629: LD_ADDR_VAR 0 25
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: LD_INT 4
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46669: LD_ADDR_VAR 0 26
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46710: LD_ADDR_VAR 0 27
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 4
46739: NEG
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46754: LD_ADDR_VAR 0 28
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: LD_INT 3
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: LD_INT 4
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 4
46785: NEG
46786: PUSH
46787: LD_INT 3
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46800: LD_ADDR_VAR 0 29
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 4
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 4
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 5
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 5
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 4
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 6
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 6
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 5
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46955: LD_ADDR_VAR 0 30
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 4
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 4
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 5
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 5
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 6
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 6
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47098: LD_ADDR_VAR 0 31
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: LD_INT 3
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 4
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 4
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 5
47165: PUSH
47166: LD_INT 4
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 5
47175: PUSH
47176: LD_INT 5
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: LD_INT 5
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 6
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 6
47205: PUSH
47206: LD_INT 6
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 5
47215: PUSH
47216: LD_INT 6
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47237: LD_ADDR_VAR 0 32
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 4
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 5
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 5
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 6
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 6
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47380: LD_ADDR_VAR 0 33
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 4
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 4
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 4
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 5
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 5
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 5
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 6
47500: NEG
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 6
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47535: LD_ADDR_VAR 0 34
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: LD_INT 4
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: NEG
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 4
47602: NEG
47603: PUSH
47604: LD_INT 4
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 4
47614: NEG
47615: PUSH
47616: LD_INT 5
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 5
47626: NEG
47627: PUSH
47628: LD_INT 4
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 5
47638: NEG
47639: PUSH
47640: LD_INT 5
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 5
47650: NEG
47651: PUSH
47652: LD_INT 6
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 6
47662: NEG
47663: PUSH
47664: LD_INT 5
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 6
47674: NEG
47675: PUSH
47676: LD_INT 6
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47698: LD_ADDR_VAR 0 41
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47742: LD_ADDR_VAR 0 42
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47783: LD_ADDR_VAR 0 43
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47823: LD_ADDR_VAR 0 44
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47864: LD_ADDR_VAR 0 45
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47908: LD_ADDR_VAR 0 46
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47954: LD_ADDR_VAR 0 47
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 3
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47987: LD_ADDR_VAR 0 48
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48018: LD_ADDR_VAR 0 49
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 3
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48047: LD_ADDR_VAR 0 50
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48076: LD_ADDR_VAR 0 51
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48107: LD_ADDR_VAR 0 52
48111: PUSH
48112: LD_INT 3
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48140: LD_ADDR_VAR 0 53
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48184: LD_ADDR_VAR 0 54
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48225: LD_ADDR_VAR 0 55
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 3
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48265: LD_ADDR_VAR 0 56
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48306: LD_ADDR_VAR 0 57
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48350: LD_ADDR_VAR 0 58
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48396: LD_ADDR_VAR 0 59
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48440: LD_ADDR_VAR 0 60
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48481: LD_ADDR_VAR 0 61
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48521: LD_ADDR_VAR 0 62
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48562: LD_ADDR_VAR 0 63
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48606: LD_ADDR_VAR 0 64
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
// end ; 2 :
48652: GO 51918
48654: LD_INT 2
48656: DOUBLE
48657: EQUAL
48658: IFTRUE 48662
48660: GO 51917
48662: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48663: LD_ADDR_VAR 0 29
48667: PUSH
48668: LD_INT 4
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 4
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 5
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 5
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 5
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 4
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 4
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 4
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 4
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 4
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 5
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 5
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 4
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 5
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 4
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 4
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 4
49048: NEG
49049: PUSH
49050: LD_INT 4
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 5
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 4
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: LD_INT 4
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: NEG
49121: PUSH
49122: LD_INT 5
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: LD_INT 5
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 5
49144: NEG
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49201: LD_ADDR_VAR 0 30
49205: PUSH
49206: LD_INT 4
49208: PUSH
49209: LD_INT 4
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 4
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 5
49228: PUSH
49229: LD_INT 4
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 5
49238: PUSH
49239: LD_INT 5
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 4
49248: PUSH
49249: LD_INT 5
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: LD_INT 4
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: LD_INT 3
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 5
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 5
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 4
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 4
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 4
49391: NEG
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 4
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 5
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 5
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 5
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 4
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 4
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 4
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 4
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 5
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 4
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 4
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 5
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 3
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 5
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49748: LD_ADDR_VAR 0 31
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 4
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 4
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 5
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 4
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 5
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 4
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 4
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 4
49950: NEG
49951: PUSH
49952: LD_INT 4
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: LD_INT 5
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: LD_INT 4
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 4
49998: NEG
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 5
50010: NEG
50011: PUSH
50012: LD_INT 4
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 5
50022: NEG
50023: PUSH
50024: LD_INT 5
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: LD_INT 5
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 5
50046: NEG
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 4
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 4
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 5
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 4
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 5
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50298: LD_ADDR_VAR 0 32
50302: PUSH
50303: LD_INT 4
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 4
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: NEG
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 4
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 5
50361: NEG
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 5
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 5
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: NEG
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 4
50467: NEG
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 4
50479: NEG
50480: PUSH
50481: LD_INT 4
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 5
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 4
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 4
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 5
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 5
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 4
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 4
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 4
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 4
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 4
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 5
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 5
50740: PUSH
50741: LD_INT 5
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 4
50750: PUSH
50751: LD_INT 5
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: LD_INT 4
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 5
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: LD_INT 5
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50845: LD_ADDR_VAR 0 33
50849: PUSH
50850: LD_INT 4
50852: NEG
50853: PUSH
50854: LD_INT 4
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 4
50864: NEG
50865: PUSH
50866: LD_INT 5
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 4
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 4
50900: NEG
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 5
50912: NEG
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 5
50924: NEG
50925: PUSH
50926: LD_INT 5
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 5
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 5
50948: NEG
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 4
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 4
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 4
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 5
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 4
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 5
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 4
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 4
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 5
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 4
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 5
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51383: LD_ADDR_VAR 0 34
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 4
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 5
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 4
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 5
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 5
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 4
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 5
51615: PUSH
51616: LD_INT 5
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 5
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 5
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 4
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 4
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 4
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 5
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 5
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// end ; end ;
51915: GO 51918
51917: POP
// case btype of b_depot , b_warehouse :
51918: LD_VAR 0 1
51922: PUSH
51923: LD_INT 0
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51937
51929: LD_INT 1
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 52138
51937: POP
// case nation of nation_american :
51938: LD_VAR 0 5
51942: PUSH
51943: LD_INT 1
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51951
51949: GO 52007
51951: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51952: LD_ADDR_VAR 0 9
51956: PUSH
51957: LD_VAR 0 11
51961: PUSH
51962: LD_VAR 0 12
51966: PUSH
51967: LD_VAR 0 13
51971: PUSH
51972: LD_VAR 0 14
51976: PUSH
51977: LD_VAR 0 15
51981: PUSH
51982: LD_VAR 0 16
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: PUSH
51995: LD_VAR 0 4
51999: PUSH
52000: LD_INT 1
52002: PLUS
52003: ARRAY
52004: ST_TO_ADDR
52005: GO 52136
52007: LD_INT 2
52009: DOUBLE
52010: EQUAL
52011: IFTRUE 52015
52013: GO 52071
52015: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52016: LD_ADDR_VAR 0 9
52020: PUSH
52021: LD_VAR 0 17
52025: PUSH
52026: LD_VAR 0 18
52030: PUSH
52031: LD_VAR 0 19
52035: PUSH
52036: LD_VAR 0 20
52040: PUSH
52041: LD_VAR 0 21
52045: PUSH
52046: LD_VAR 0 22
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: PUSH
52059: LD_VAR 0 4
52063: PUSH
52064: LD_INT 1
52066: PLUS
52067: ARRAY
52068: ST_TO_ADDR
52069: GO 52136
52071: LD_INT 3
52073: DOUBLE
52074: EQUAL
52075: IFTRUE 52079
52077: GO 52135
52079: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52080: LD_ADDR_VAR 0 9
52084: PUSH
52085: LD_VAR 0 23
52089: PUSH
52090: LD_VAR 0 24
52094: PUSH
52095: LD_VAR 0 25
52099: PUSH
52100: LD_VAR 0 26
52104: PUSH
52105: LD_VAR 0 27
52109: PUSH
52110: LD_VAR 0 28
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: LD_VAR 0 4
52127: PUSH
52128: LD_INT 1
52130: PLUS
52131: ARRAY
52132: ST_TO_ADDR
52133: GO 52136
52135: POP
52136: GO 52685
52138: LD_INT 2
52140: DOUBLE
52141: EQUAL
52142: IFTRUE 52152
52144: LD_INT 3
52146: DOUBLE
52147: EQUAL
52148: IFTRUE 52152
52150: GO 52208
52152: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52153: LD_ADDR_VAR 0 9
52157: PUSH
52158: LD_VAR 0 29
52162: PUSH
52163: LD_VAR 0 30
52167: PUSH
52168: LD_VAR 0 31
52172: PUSH
52173: LD_VAR 0 32
52177: PUSH
52178: LD_VAR 0 33
52182: PUSH
52183: LD_VAR 0 34
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: PUSH
52196: LD_VAR 0 4
52200: PUSH
52201: LD_INT 1
52203: PLUS
52204: ARRAY
52205: ST_TO_ADDR
52206: GO 52685
52208: LD_INT 16
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52264
52214: LD_INT 17
52216: DOUBLE
52217: EQUAL
52218: IFTRUE 52264
52220: LD_INT 18
52222: DOUBLE
52223: EQUAL
52224: IFTRUE 52264
52226: LD_INT 19
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52264
52232: LD_INT 20
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52264
52238: LD_INT 21
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52264
52244: LD_INT 23
52246: DOUBLE
52247: EQUAL
52248: IFTRUE 52264
52250: LD_INT 24
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52264
52256: LD_INT 25
52258: DOUBLE
52259: EQUAL
52260: IFTRUE 52264
52262: GO 52320
52264: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52265: LD_ADDR_VAR 0 9
52269: PUSH
52270: LD_VAR 0 35
52274: PUSH
52275: LD_VAR 0 36
52279: PUSH
52280: LD_VAR 0 37
52284: PUSH
52285: LD_VAR 0 38
52289: PUSH
52290: LD_VAR 0 39
52294: PUSH
52295: LD_VAR 0 40
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: PUSH
52308: LD_VAR 0 4
52312: PUSH
52313: LD_INT 1
52315: PLUS
52316: ARRAY
52317: ST_TO_ADDR
52318: GO 52685
52320: LD_INT 6
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52376
52326: LD_INT 7
52328: DOUBLE
52329: EQUAL
52330: IFTRUE 52376
52332: LD_INT 8
52334: DOUBLE
52335: EQUAL
52336: IFTRUE 52376
52338: LD_INT 13
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52376
52344: LD_INT 12
52346: DOUBLE
52347: EQUAL
52348: IFTRUE 52376
52350: LD_INT 15
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52376
52356: LD_INT 11
52358: DOUBLE
52359: EQUAL
52360: IFTRUE 52376
52362: LD_INT 14
52364: DOUBLE
52365: EQUAL
52366: IFTRUE 52376
52368: LD_INT 10
52370: DOUBLE
52371: EQUAL
52372: IFTRUE 52376
52374: GO 52432
52376: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52377: LD_ADDR_VAR 0 9
52381: PUSH
52382: LD_VAR 0 41
52386: PUSH
52387: LD_VAR 0 42
52391: PUSH
52392: LD_VAR 0 43
52396: PUSH
52397: LD_VAR 0 44
52401: PUSH
52402: LD_VAR 0 45
52406: PUSH
52407: LD_VAR 0 46
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: PUSH
52420: LD_VAR 0 4
52424: PUSH
52425: LD_INT 1
52427: PLUS
52428: ARRAY
52429: ST_TO_ADDR
52430: GO 52685
52432: LD_INT 36
52434: DOUBLE
52435: EQUAL
52436: IFTRUE 52440
52438: GO 52496
52440: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52441: LD_ADDR_VAR 0 9
52445: PUSH
52446: LD_VAR 0 47
52450: PUSH
52451: LD_VAR 0 48
52455: PUSH
52456: LD_VAR 0 49
52460: PUSH
52461: LD_VAR 0 50
52465: PUSH
52466: LD_VAR 0 51
52470: PUSH
52471: LD_VAR 0 52
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: LD_VAR 0 4
52488: PUSH
52489: LD_INT 1
52491: PLUS
52492: ARRAY
52493: ST_TO_ADDR
52494: GO 52685
52496: LD_INT 4
52498: DOUBLE
52499: EQUAL
52500: IFTRUE 52522
52502: LD_INT 5
52504: DOUBLE
52505: EQUAL
52506: IFTRUE 52522
52508: LD_INT 34
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52522
52514: LD_INT 37
52516: DOUBLE
52517: EQUAL
52518: IFTRUE 52522
52520: GO 52578
52522: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52523: LD_ADDR_VAR 0 9
52527: PUSH
52528: LD_VAR 0 53
52532: PUSH
52533: LD_VAR 0 54
52537: PUSH
52538: LD_VAR 0 55
52542: PUSH
52543: LD_VAR 0 56
52547: PUSH
52548: LD_VAR 0 57
52552: PUSH
52553: LD_VAR 0 58
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: PUSH
52566: LD_VAR 0 4
52570: PUSH
52571: LD_INT 1
52573: PLUS
52574: ARRAY
52575: ST_TO_ADDR
52576: GO 52685
52578: LD_INT 31
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52628
52584: LD_INT 32
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52628
52590: LD_INT 33
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52628
52596: LD_INT 27
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52628
52602: LD_INT 26
52604: DOUBLE
52605: EQUAL
52606: IFTRUE 52628
52608: LD_INT 28
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52628
52614: LD_INT 29
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52628
52620: LD_INT 30
52622: DOUBLE
52623: EQUAL
52624: IFTRUE 52628
52626: GO 52684
52628: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52629: LD_ADDR_VAR 0 9
52633: PUSH
52634: LD_VAR 0 59
52638: PUSH
52639: LD_VAR 0 60
52643: PUSH
52644: LD_VAR 0 61
52648: PUSH
52649: LD_VAR 0 62
52653: PUSH
52654: LD_VAR 0 63
52658: PUSH
52659: LD_VAR 0 64
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: PUSH
52672: LD_VAR 0 4
52676: PUSH
52677: LD_INT 1
52679: PLUS
52680: ARRAY
52681: ST_TO_ADDR
52682: GO 52685
52684: POP
// temp_list2 = [ ] ;
52685: LD_ADDR_VAR 0 10
52689: PUSH
52690: EMPTY
52691: ST_TO_ADDR
// for i in temp_list do
52692: LD_ADDR_VAR 0 8
52696: PUSH
52697: LD_VAR 0 9
52701: PUSH
52702: FOR_IN
52703: IFFALSE 52755
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52705: LD_ADDR_VAR 0 10
52709: PUSH
52710: LD_VAR 0 10
52714: PUSH
52715: LD_VAR 0 8
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: PUSH
52724: LD_VAR 0 2
52728: PLUS
52729: PUSH
52730: LD_VAR 0 8
52734: PUSH
52735: LD_INT 2
52737: ARRAY
52738: PUSH
52739: LD_VAR 0 3
52743: PLUS
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: ADD
52752: ST_TO_ADDR
52753: GO 52702
52755: POP
52756: POP
// result = temp_list2 ;
52757: LD_ADDR_VAR 0 7
52761: PUSH
52762: LD_VAR 0 10
52766: ST_TO_ADDR
// end ;
52767: LD_VAR 0 7
52771: RET
// export function EnemyInRange ( unit , dist ) ; begin
52772: LD_INT 0
52774: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52775: LD_ADDR_VAR 0 3
52779: PUSH
52780: LD_VAR 0 1
52784: PPUSH
52785: CALL_OW 255
52789: PPUSH
52790: LD_VAR 0 1
52794: PPUSH
52795: CALL_OW 250
52799: PPUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 251
52809: PPUSH
52810: LD_VAR 0 2
52814: PPUSH
52815: CALL 26900 0 4
52819: PUSH
52820: LD_INT 4
52822: ARRAY
52823: ST_TO_ADDR
// end ;
52824: LD_VAR 0 3
52828: RET
// export function PlayerSeeMe ( unit ) ; begin
52829: LD_INT 0
52831: PPUSH
// result := See ( your_side , unit ) ;
52832: LD_ADDR_VAR 0 2
52836: PUSH
52837: LD_OWVAR 2
52841: PPUSH
52842: LD_VAR 0 1
52846: PPUSH
52847: CALL_OW 292
52851: ST_TO_ADDR
// end ;
52852: LD_VAR 0 2
52856: RET
// export function ReverseDir ( unit ) ; begin
52857: LD_INT 0
52859: PPUSH
// if not unit then
52860: LD_VAR 0 1
52864: NOT
52865: IFFALSE 52869
// exit ;
52867: GO 52915
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52869: LD_ADDR_VAR 0 2
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 4
52879: PUSH
52880: LD_INT 5
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: PUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: CALL_OW 254
52909: PUSH
52910: LD_INT 1
52912: PLUS
52913: ARRAY
52914: ST_TO_ADDR
// end ;
52915: LD_VAR 0 2
52919: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52920: LD_INT 0
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
52926: PPUSH
// if not hexes then
52927: LD_VAR 0 2
52931: NOT
52932: IFFALSE 52936
// exit ;
52934: GO 53084
// dist := 9999 ;
52936: LD_ADDR_VAR 0 5
52940: PUSH
52941: LD_INT 9999
52943: ST_TO_ADDR
// for i = 1 to hexes do
52944: LD_ADDR_VAR 0 4
52948: PUSH
52949: DOUBLE
52950: LD_INT 1
52952: DEC
52953: ST_TO_ADDR
52954: LD_VAR 0 2
52958: PUSH
52959: FOR_TO
52960: IFFALSE 53072
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52962: LD_VAR 0 1
52966: PPUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_VAR 0 4
52976: ARRAY
52977: PUSH
52978: LD_INT 1
52980: ARRAY
52981: PPUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_VAR 0 4
52991: ARRAY
52992: PUSH
52993: LD_INT 2
52995: ARRAY
52996: PPUSH
52997: CALL_OW 297
53001: PUSH
53002: LD_VAR 0 5
53006: LESS
53007: IFFALSE 53070
// begin hex := hexes [ i ] ;
53009: LD_ADDR_VAR 0 7
53013: PUSH
53014: LD_VAR 0 2
53018: PUSH
53019: LD_VAR 0 4
53023: ARRAY
53024: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53025: LD_ADDR_VAR 0 5
53029: PUSH
53030: LD_VAR 0 1
53034: PPUSH
53035: LD_VAR 0 2
53039: PUSH
53040: LD_VAR 0 4
53044: ARRAY
53045: PUSH
53046: LD_INT 1
53048: ARRAY
53049: PPUSH
53050: LD_VAR 0 2
53054: PUSH
53055: LD_VAR 0 4
53059: ARRAY
53060: PUSH
53061: LD_INT 2
53063: ARRAY
53064: PPUSH
53065: CALL_OW 297
53069: ST_TO_ADDR
// end ; end ;
53070: GO 52959
53072: POP
53073: POP
// result := hex ;
53074: LD_ADDR_VAR 0 3
53078: PUSH
53079: LD_VAR 0 7
53083: ST_TO_ADDR
// end ;
53084: LD_VAR 0 3
53088: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53089: LD_INT 0
53091: PPUSH
53092: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53093: LD_VAR 0 1
53097: NOT
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 21
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 23
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PPUSH
53128: CALL_OW 69
53132: IN
53133: NOT
53134: OR
53135: IFFALSE 53139
// exit ;
53137: GO 53186
// for i = 1 to 3 do
53139: LD_ADDR_VAR 0 3
53143: PUSH
53144: DOUBLE
53145: LD_INT 1
53147: DEC
53148: ST_TO_ADDR
53149: LD_INT 3
53151: PUSH
53152: FOR_TO
53153: IFFALSE 53184
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 250
53164: PPUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 251
53174: PPUSH
53175: LD_INT 1
53177: PPUSH
53178: CALL_OW 453
53182: GO 53152
53184: POP
53185: POP
// end ;
53186: LD_VAR 0 2
53190: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53191: LD_INT 0
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53199: LD_VAR 0 1
53203: NOT
53204: PUSH
53205: LD_VAR 0 2
53209: NOT
53210: OR
53211: PUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 314
53221: OR
53222: IFFALSE 53226
// exit ;
53224: GO 53667
// x := GetX ( enemy_unit ) ;
53226: LD_ADDR_VAR 0 7
53230: PUSH
53231: LD_VAR 0 2
53235: PPUSH
53236: CALL_OW 250
53240: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53241: LD_ADDR_VAR 0 8
53245: PUSH
53246: LD_VAR 0 2
53250: PPUSH
53251: CALL_OW 251
53255: ST_TO_ADDR
// if not x or not y then
53256: LD_VAR 0 7
53260: NOT
53261: PUSH
53262: LD_VAR 0 8
53266: NOT
53267: OR
53268: IFFALSE 53272
// exit ;
53270: GO 53667
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53272: LD_ADDR_VAR 0 6
53276: PUSH
53277: LD_VAR 0 7
53281: PPUSH
53282: LD_INT 0
53284: PPUSH
53285: LD_INT 4
53287: PPUSH
53288: CALL_OW 272
53292: PUSH
53293: LD_VAR 0 8
53297: PPUSH
53298: LD_INT 0
53300: PPUSH
53301: LD_INT 4
53303: PPUSH
53304: CALL_OW 273
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_VAR 0 7
53317: PPUSH
53318: LD_INT 1
53320: PPUSH
53321: LD_INT 4
53323: PPUSH
53324: CALL_OW 272
53328: PUSH
53329: LD_VAR 0 8
53333: PPUSH
53334: LD_INT 1
53336: PPUSH
53337: LD_INT 4
53339: PPUSH
53340: CALL_OW 273
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_VAR 0 7
53353: PPUSH
53354: LD_INT 2
53356: PPUSH
53357: LD_INT 4
53359: PPUSH
53360: CALL_OW 272
53364: PUSH
53365: LD_VAR 0 8
53369: PPUSH
53370: LD_INT 2
53372: PPUSH
53373: LD_INT 4
53375: PPUSH
53376: CALL_OW 273
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_VAR 0 7
53389: PPUSH
53390: LD_INT 3
53392: PPUSH
53393: LD_INT 4
53395: PPUSH
53396: CALL_OW 272
53400: PUSH
53401: LD_VAR 0 8
53405: PPUSH
53406: LD_INT 3
53408: PPUSH
53409: LD_INT 4
53411: PPUSH
53412: CALL_OW 273
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_VAR 0 7
53425: PPUSH
53426: LD_INT 4
53428: PPUSH
53429: LD_INT 4
53431: PPUSH
53432: CALL_OW 272
53436: PUSH
53437: LD_VAR 0 8
53441: PPUSH
53442: LD_INT 4
53444: PPUSH
53445: LD_INT 4
53447: PPUSH
53448: CALL_OW 273
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_VAR 0 7
53461: PPUSH
53462: LD_INT 5
53464: PPUSH
53465: LD_INT 4
53467: PPUSH
53468: CALL_OW 272
53472: PUSH
53473: LD_VAR 0 8
53477: PPUSH
53478: LD_INT 5
53480: PPUSH
53481: LD_INT 4
53483: PPUSH
53484: CALL_OW 273
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// for i = tmp downto 1 do
53501: LD_ADDR_VAR 0 4
53505: PUSH
53506: DOUBLE
53507: LD_VAR 0 6
53511: INC
53512: ST_TO_ADDR
53513: LD_INT 1
53515: PUSH
53516: FOR_DOWNTO
53517: IFFALSE 53618
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53519: LD_VAR 0 6
53523: PUSH
53524: LD_VAR 0 4
53528: ARRAY
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: LD_VAR 0 6
53538: PUSH
53539: LD_VAR 0 4
53543: ARRAY
53544: PUSH
53545: LD_INT 2
53547: ARRAY
53548: PPUSH
53549: CALL_OW 488
53553: NOT
53554: PUSH
53555: LD_VAR 0 6
53559: PUSH
53560: LD_VAR 0 4
53564: ARRAY
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PPUSH
53570: LD_VAR 0 6
53574: PUSH
53575: LD_VAR 0 4
53579: ARRAY
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: PPUSH
53585: CALL_OW 428
53589: PUSH
53590: LD_INT 0
53592: NONEQUAL
53593: OR
53594: IFFALSE 53616
// tmp := Delete ( tmp , i ) ;
53596: LD_ADDR_VAR 0 6
53600: PUSH
53601: LD_VAR 0 6
53605: PPUSH
53606: LD_VAR 0 4
53610: PPUSH
53611: CALL_OW 3
53615: ST_TO_ADDR
53616: GO 53516
53618: POP
53619: POP
// j := GetClosestHex ( unit , tmp ) ;
53620: LD_ADDR_VAR 0 5
53624: PUSH
53625: LD_VAR 0 1
53629: PPUSH
53630: LD_VAR 0 6
53634: PPUSH
53635: CALL 52920 0 2
53639: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53640: LD_VAR 0 1
53644: PPUSH
53645: LD_VAR 0 5
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PPUSH
53654: LD_VAR 0 5
53658: PUSH
53659: LD_INT 2
53661: ARRAY
53662: PPUSH
53663: CALL_OW 111
// end ;
53667: LD_VAR 0 3
53671: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53672: LD_INT 0
53674: PPUSH
53675: PPUSH
53676: PPUSH
// uc_side = 0 ;
53677: LD_ADDR_OWVAR 20
53681: PUSH
53682: LD_INT 0
53684: ST_TO_ADDR
// uc_nation = 0 ;
53685: LD_ADDR_OWVAR 21
53689: PUSH
53690: LD_INT 0
53692: ST_TO_ADDR
// InitHc ;
53693: CALL_OW 19
// InitVc ;
53697: CALL_OW 20
// if mastodonts then
53701: LD_VAR 0 6
53705: IFFALSE 53772
// for i = 1 to mastodonts do
53707: LD_ADDR_VAR 0 11
53711: PUSH
53712: DOUBLE
53713: LD_INT 1
53715: DEC
53716: ST_TO_ADDR
53717: LD_VAR 0 6
53721: PUSH
53722: FOR_TO
53723: IFFALSE 53770
// begin vc_chassis := 31 ;
53725: LD_ADDR_OWVAR 37
53729: PUSH
53730: LD_INT 31
53732: ST_TO_ADDR
// vc_control := control_rider ;
53733: LD_ADDR_OWVAR 38
53737: PUSH
53738: LD_INT 4
53740: ST_TO_ADDR
// animal := CreateVehicle ;
53741: LD_ADDR_VAR 0 12
53745: PUSH
53746: CALL_OW 45
53750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53751: LD_VAR 0 12
53755: PPUSH
53756: LD_VAR 0 8
53760: PPUSH
53761: LD_INT 0
53763: PPUSH
53764: CALL 60517 0 3
// end ;
53768: GO 53722
53770: POP
53771: POP
// if horses then
53772: LD_VAR 0 5
53776: IFFALSE 53843
// for i = 1 to horses do
53778: LD_ADDR_VAR 0 11
53782: PUSH
53783: DOUBLE
53784: LD_INT 1
53786: DEC
53787: ST_TO_ADDR
53788: LD_VAR 0 5
53792: PUSH
53793: FOR_TO
53794: IFFALSE 53841
// begin hc_class := 21 ;
53796: LD_ADDR_OWVAR 28
53800: PUSH
53801: LD_INT 21
53803: ST_TO_ADDR
// hc_gallery :=  ;
53804: LD_ADDR_OWVAR 33
53808: PUSH
53809: LD_STRING 
53811: ST_TO_ADDR
// animal := CreateHuman ;
53812: LD_ADDR_VAR 0 12
53816: PUSH
53817: CALL_OW 44
53821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53822: LD_VAR 0 12
53826: PPUSH
53827: LD_VAR 0 8
53831: PPUSH
53832: LD_INT 0
53834: PPUSH
53835: CALL 60517 0 3
// end ;
53839: GO 53793
53841: POP
53842: POP
// if birds then
53843: LD_VAR 0 1
53847: IFFALSE 53914
// for i = 1 to birds do
53849: LD_ADDR_VAR 0 11
53853: PUSH
53854: DOUBLE
53855: LD_INT 1
53857: DEC
53858: ST_TO_ADDR
53859: LD_VAR 0 1
53863: PUSH
53864: FOR_TO
53865: IFFALSE 53912
// begin hc_class = 18 ;
53867: LD_ADDR_OWVAR 28
53871: PUSH
53872: LD_INT 18
53874: ST_TO_ADDR
// hc_gallery =  ;
53875: LD_ADDR_OWVAR 33
53879: PUSH
53880: LD_STRING 
53882: ST_TO_ADDR
// animal := CreateHuman ;
53883: LD_ADDR_VAR 0 12
53887: PUSH
53888: CALL_OW 44
53892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53893: LD_VAR 0 12
53897: PPUSH
53898: LD_VAR 0 8
53902: PPUSH
53903: LD_INT 0
53905: PPUSH
53906: CALL 60517 0 3
// end ;
53910: GO 53864
53912: POP
53913: POP
// if tigers then
53914: LD_VAR 0 2
53918: IFFALSE 54002
// for i = 1 to tigers do
53920: LD_ADDR_VAR 0 11
53924: PUSH
53925: DOUBLE
53926: LD_INT 1
53928: DEC
53929: ST_TO_ADDR
53930: LD_VAR 0 2
53934: PUSH
53935: FOR_TO
53936: IFFALSE 54000
// begin hc_class = class_tiger ;
53938: LD_ADDR_OWVAR 28
53942: PUSH
53943: LD_INT 14
53945: ST_TO_ADDR
// hc_gallery =  ;
53946: LD_ADDR_OWVAR 33
53950: PUSH
53951: LD_STRING 
53953: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53954: LD_ADDR_OWVAR 35
53958: PUSH
53959: LD_INT 7
53961: NEG
53962: PPUSH
53963: LD_INT 7
53965: PPUSH
53966: CALL_OW 12
53970: ST_TO_ADDR
// animal := CreateHuman ;
53971: LD_ADDR_VAR 0 12
53975: PUSH
53976: CALL_OW 44
53980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53981: LD_VAR 0 12
53985: PPUSH
53986: LD_VAR 0 8
53990: PPUSH
53991: LD_INT 0
53993: PPUSH
53994: CALL 60517 0 3
// end ;
53998: GO 53935
54000: POP
54001: POP
// if apemans then
54002: LD_VAR 0 3
54006: IFFALSE 54129
// for i = 1 to apemans do
54008: LD_ADDR_VAR 0 11
54012: PUSH
54013: DOUBLE
54014: LD_INT 1
54016: DEC
54017: ST_TO_ADDR
54018: LD_VAR 0 3
54022: PUSH
54023: FOR_TO
54024: IFFALSE 54127
// begin hc_class = class_apeman ;
54026: LD_ADDR_OWVAR 28
54030: PUSH
54031: LD_INT 12
54033: ST_TO_ADDR
// hc_gallery =  ;
54034: LD_ADDR_OWVAR 33
54038: PUSH
54039: LD_STRING 
54041: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54042: LD_ADDR_OWVAR 35
54046: PUSH
54047: LD_INT 5
54049: NEG
54050: PPUSH
54051: LD_INT 5
54053: PPUSH
54054: CALL_OW 12
54058: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54059: LD_ADDR_OWVAR 31
54063: PUSH
54064: LD_INT 1
54066: PPUSH
54067: LD_INT 3
54069: PPUSH
54070: CALL_OW 12
54074: PUSH
54075: LD_INT 1
54077: PPUSH
54078: LD_INT 3
54080: PPUSH
54081: CALL_OW 12
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// animal := CreateHuman ;
54098: LD_ADDR_VAR 0 12
54102: PUSH
54103: CALL_OW 44
54107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54108: LD_VAR 0 12
54112: PPUSH
54113: LD_VAR 0 8
54117: PPUSH
54118: LD_INT 0
54120: PPUSH
54121: CALL 60517 0 3
// end ;
54125: GO 54023
54127: POP
54128: POP
// if enchidnas then
54129: LD_VAR 0 4
54133: IFFALSE 54200
// for i = 1 to enchidnas do
54135: LD_ADDR_VAR 0 11
54139: PUSH
54140: DOUBLE
54141: LD_INT 1
54143: DEC
54144: ST_TO_ADDR
54145: LD_VAR 0 4
54149: PUSH
54150: FOR_TO
54151: IFFALSE 54198
// begin hc_class = 13 ;
54153: LD_ADDR_OWVAR 28
54157: PUSH
54158: LD_INT 13
54160: ST_TO_ADDR
// hc_gallery =  ;
54161: LD_ADDR_OWVAR 33
54165: PUSH
54166: LD_STRING 
54168: ST_TO_ADDR
// animal := CreateHuman ;
54169: LD_ADDR_VAR 0 12
54173: PUSH
54174: CALL_OW 44
54178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54179: LD_VAR 0 12
54183: PPUSH
54184: LD_VAR 0 8
54188: PPUSH
54189: LD_INT 0
54191: PPUSH
54192: CALL 60517 0 3
// end ;
54196: GO 54150
54198: POP
54199: POP
// if fishes then
54200: LD_VAR 0 7
54204: IFFALSE 54271
// for i = 1 to fishes do
54206: LD_ADDR_VAR 0 11
54210: PUSH
54211: DOUBLE
54212: LD_INT 1
54214: DEC
54215: ST_TO_ADDR
54216: LD_VAR 0 7
54220: PUSH
54221: FOR_TO
54222: IFFALSE 54269
// begin hc_class = 20 ;
54224: LD_ADDR_OWVAR 28
54228: PUSH
54229: LD_INT 20
54231: ST_TO_ADDR
// hc_gallery =  ;
54232: LD_ADDR_OWVAR 33
54236: PUSH
54237: LD_STRING 
54239: ST_TO_ADDR
// animal := CreateHuman ;
54240: LD_ADDR_VAR 0 12
54244: PUSH
54245: CALL_OW 44
54249: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54250: LD_VAR 0 12
54254: PPUSH
54255: LD_VAR 0 9
54259: PPUSH
54260: LD_INT 0
54262: PPUSH
54263: CALL 60517 0 3
// end ;
54267: GO 54221
54269: POP
54270: POP
// end ;
54271: LD_VAR 0 10
54275: RET
// export function WantHeal ( sci , unit ) ; begin
54276: LD_INT 0
54278: PPUSH
// if GetTaskList ( sci ) > 0 then
54279: LD_VAR 0 1
54283: PPUSH
54284: CALL_OW 437
54288: PUSH
54289: LD_INT 0
54291: GREATER
54292: IFFALSE 54362
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54294: LD_VAR 0 1
54298: PPUSH
54299: CALL_OW 437
54303: PUSH
54304: LD_INT 1
54306: ARRAY
54307: PUSH
54308: LD_INT 1
54310: ARRAY
54311: PUSH
54312: LD_STRING l
54314: EQUAL
54315: PUSH
54316: LD_VAR 0 1
54320: PPUSH
54321: CALL_OW 437
54325: PUSH
54326: LD_INT 1
54328: ARRAY
54329: PUSH
54330: LD_INT 4
54332: ARRAY
54333: PUSH
54334: LD_VAR 0 2
54338: EQUAL
54339: AND
54340: IFFALSE 54352
// result := true else
54342: LD_ADDR_VAR 0 3
54346: PUSH
54347: LD_INT 1
54349: ST_TO_ADDR
54350: GO 54360
// result := false ;
54352: LD_ADDR_VAR 0 3
54356: PUSH
54357: LD_INT 0
54359: ST_TO_ADDR
// end else
54360: GO 54370
// result := false ;
54362: LD_ADDR_VAR 0 3
54366: PUSH
54367: LD_INT 0
54369: ST_TO_ADDR
// end ;
54370: LD_VAR 0 3
54374: RET
// export function HealTarget ( sci ) ; begin
54375: LD_INT 0
54377: PPUSH
// if not sci then
54378: LD_VAR 0 1
54382: NOT
54383: IFFALSE 54387
// exit ;
54385: GO 54452
// result := 0 ;
54387: LD_ADDR_VAR 0 2
54391: PUSH
54392: LD_INT 0
54394: ST_TO_ADDR
// if GetTaskList ( sci ) then
54395: LD_VAR 0 1
54399: PPUSH
54400: CALL_OW 437
54404: IFFALSE 54452
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54406: LD_VAR 0 1
54410: PPUSH
54411: CALL_OW 437
54415: PUSH
54416: LD_INT 1
54418: ARRAY
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: PUSH
54424: LD_STRING l
54426: EQUAL
54427: IFFALSE 54452
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54429: LD_ADDR_VAR 0 2
54433: PUSH
54434: LD_VAR 0 1
54438: PPUSH
54439: CALL_OW 437
54443: PUSH
54444: LD_INT 1
54446: ARRAY
54447: PUSH
54448: LD_INT 4
54450: ARRAY
54451: ST_TO_ADDR
// end ;
54452: LD_VAR 0 2
54456: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54457: LD_INT 0
54459: PPUSH
54460: PPUSH
54461: PPUSH
54462: PPUSH
54463: PPUSH
54464: PPUSH
54465: PPUSH
54466: PPUSH
54467: PPUSH
54468: PPUSH
54469: PPUSH
54470: PPUSH
54471: PPUSH
54472: PPUSH
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
54479: PPUSH
54480: PPUSH
54481: PPUSH
54482: PPUSH
54483: PPUSH
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
// if not list then
54493: LD_VAR 0 1
54497: NOT
54498: IFFALSE 54502
// exit ;
54500: GO 59128
// base := list [ 1 ] ;
54502: LD_ADDR_VAR 0 3
54506: PUSH
54507: LD_VAR 0 1
54511: PUSH
54512: LD_INT 1
54514: ARRAY
54515: ST_TO_ADDR
// group := list [ 2 ] ;
54516: LD_ADDR_VAR 0 4
54520: PUSH
54521: LD_VAR 0 1
54525: PUSH
54526: LD_INT 2
54528: ARRAY
54529: ST_TO_ADDR
// path := list [ 3 ] ;
54530: LD_ADDR_VAR 0 5
54534: PUSH
54535: LD_VAR 0 1
54539: PUSH
54540: LD_INT 3
54542: ARRAY
54543: ST_TO_ADDR
// flags := list [ 4 ] ;
54544: LD_ADDR_VAR 0 6
54548: PUSH
54549: LD_VAR 0 1
54553: PUSH
54554: LD_INT 4
54556: ARRAY
54557: ST_TO_ADDR
// mined := [ ] ;
54558: LD_ADDR_VAR 0 27
54562: PUSH
54563: EMPTY
54564: ST_TO_ADDR
// bombed := [ ] ;
54565: LD_ADDR_VAR 0 28
54569: PUSH
54570: EMPTY
54571: ST_TO_ADDR
// healers := [ ] ;
54572: LD_ADDR_VAR 0 31
54576: PUSH
54577: EMPTY
54578: ST_TO_ADDR
// to_heal := [ ] ;
54579: LD_ADDR_VAR 0 30
54583: PUSH
54584: EMPTY
54585: ST_TO_ADDR
// repairs := [ ] ;
54586: LD_ADDR_VAR 0 33
54590: PUSH
54591: EMPTY
54592: ST_TO_ADDR
// to_repair := [ ] ;
54593: LD_ADDR_VAR 0 32
54597: PUSH
54598: EMPTY
54599: ST_TO_ADDR
// if not group or not path then
54600: LD_VAR 0 4
54604: NOT
54605: PUSH
54606: LD_VAR 0 5
54610: NOT
54611: OR
54612: IFFALSE 54616
// exit ;
54614: GO 59128
// side := GetSide ( group [ 1 ] ) ;
54616: LD_ADDR_VAR 0 35
54620: PUSH
54621: LD_VAR 0 4
54625: PUSH
54626: LD_INT 1
54628: ARRAY
54629: PPUSH
54630: CALL_OW 255
54634: ST_TO_ADDR
// if flags then
54635: LD_VAR 0 6
54639: IFFALSE 54783
// begin f_ignore_area := flags [ 1 ] ;
54641: LD_ADDR_VAR 0 17
54645: PUSH
54646: LD_VAR 0 6
54650: PUSH
54651: LD_INT 1
54653: ARRAY
54654: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54655: LD_ADDR_VAR 0 18
54659: PUSH
54660: LD_VAR 0 6
54664: PUSH
54665: LD_INT 2
54667: ARRAY
54668: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54669: LD_ADDR_VAR 0 19
54673: PUSH
54674: LD_VAR 0 6
54678: PUSH
54679: LD_INT 3
54681: ARRAY
54682: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54683: LD_ADDR_VAR 0 20
54687: PUSH
54688: LD_VAR 0 6
54692: PUSH
54693: LD_INT 4
54695: ARRAY
54696: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54697: LD_ADDR_VAR 0 21
54701: PUSH
54702: LD_VAR 0 6
54706: PUSH
54707: LD_INT 5
54709: ARRAY
54710: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54711: LD_ADDR_VAR 0 22
54715: PUSH
54716: LD_VAR 0 6
54720: PUSH
54721: LD_INT 6
54723: ARRAY
54724: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54725: LD_ADDR_VAR 0 23
54729: PUSH
54730: LD_VAR 0 6
54734: PUSH
54735: LD_INT 7
54737: ARRAY
54738: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54739: LD_ADDR_VAR 0 24
54743: PUSH
54744: LD_VAR 0 6
54748: PUSH
54749: LD_INT 8
54751: ARRAY
54752: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54753: LD_ADDR_VAR 0 25
54757: PUSH
54758: LD_VAR 0 6
54762: PUSH
54763: LD_INT 9
54765: ARRAY
54766: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54767: LD_ADDR_VAR 0 26
54771: PUSH
54772: LD_VAR 0 6
54776: PUSH
54777: LD_INT 10
54779: ARRAY
54780: ST_TO_ADDR
// end else
54781: GO 54863
// begin f_ignore_area := false ;
54783: LD_ADDR_VAR 0 17
54787: PUSH
54788: LD_INT 0
54790: ST_TO_ADDR
// f_capture := false ;
54791: LD_ADDR_VAR 0 18
54795: PUSH
54796: LD_INT 0
54798: ST_TO_ADDR
// f_ignore_civ := false ;
54799: LD_ADDR_VAR 0 19
54803: PUSH
54804: LD_INT 0
54806: ST_TO_ADDR
// f_murder := false ;
54807: LD_ADDR_VAR 0 20
54811: PUSH
54812: LD_INT 0
54814: ST_TO_ADDR
// f_mines := false ;
54815: LD_ADDR_VAR 0 21
54819: PUSH
54820: LD_INT 0
54822: ST_TO_ADDR
// f_repair := false ;
54823: LD_ADDR_VAR 0 22
54827: PUSH
54828: LD_INT 0
54830: ST_TO_ADDR
// f_heal := false ;
54831: LD_ADDR_VAR 0 23
54835: PUSH
54836: LD_INT 0
54838: ST_TO_ADDR
// f_spacetime := false ;
54839: LD_ADDR_VAR 0 24
54843: PUSH
54844: LD_INT 0
54846: ST_TO_ADDR
// f_attack_depot := false ;
54847: LD_ADDR_VAR 0 25
54851: PUSH
54852: LD_INT 0
54854: ST_TO_ADDR
// f_crawl := false ;
54855: LD_ADDR_VAR 0 26
54859: PUSH
54860: LD_INT 0
54862: ST_TO_ADDR
// end ; if f_heal then
54863: LD_VAR 0 23
54867: IFFALSE 54894
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54869: LD_ADDR_VAR 0 31
54873: PUSH
54874: LD_VAR 0 4
54878: PPUSH
54879: LD_INT 25
54881: PUSH
54882: LD_INT 4
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PPUSH
54889: CALL_OW 72
54893: ST_TO_ADDR
// if f_repair then
54894: LD_VAR 0 22
54898: IFFALSE 54925
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54900: LD_ADDR_VAR 0 33
54904: PUSH
54905: LD_VAR 0 4
54909: PPUSH
54910: LD_INT 25
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PPUSH
54920: CALL_OW 72
54924: ST_TO_ADDR
// units_path := [ ] ;
54925: LD_ADDR_VAR 0 16
54929: PUSH
54930: EMPTY
54931: ST_TO_ADDR
// for i = 1 to group do
54932: LD_ADDR_VAR 0 7
54936: PUSH
54937: DOUBLE
54938: LD_INT 1
54940: DEC
54941: ST_TO_ADDR
54942: LD_VAR 0 4
54946: PUSH
54947: FOR_TO
54948: IFFALSE 54977
// units_path := Replace ( units_path , i , path ) ;
54950: LD_ADDR_VAR 0 16
54954: PUSH
54955: LD_VAR 0 16
54959: PPUSH
54960: LD_VAR 0 7
54964: PPUSH
54965: LD_VAR 0 5
54969: PPUSH
54970: CALL_OW 1
54974: ST_TO_ADDR
54975: GO 54947
54977: POP
54978: POP
// repeat for i = group downto 1 do
54979: LD_ADDR_VAR 0 7
54983: PUSH
54984: DOUBLE
54985: LD_VAR 0 4
54989: INC
54990: ST_TO_ADDR
54991: LD_INT 1
54993: PUSH
54994: FOR_DOWNTO
54995: IFFALSE 59091
// begin wait ( 5 ) ;
54997: LD_INT 5
54999: PPUSH
55000: CALL_OW 67
// tmp := [ ] ;
55004: LD_ADDR_VAR 0 14
55008: PUSH
55009: EMPTY
55010: ST_TO_ADDR
// attacking := false ;
55011: LD_ADDR_VAR 0 29
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55019: LD_VAR 0 4
55023: PUSH
55024: LD_VAR 0 7
55028: ARRAY
55029: PPUSH
55030: CALL_OW 301
55034: PUSH
55035: LD_VAR 0 4
55039: PUSH
55040: LD_VAR 0 7
55044: ARRAY
55045: NOT
55046: OR
55047: IFFALSE 55156
// begin if GetType ( group [ i ] ) = unit_human then
55049: LD_VAR 0 4
55053: PUSH
55054: LD_VAR 0 7
55058: ARRAY
55059: PPUSH
55060: CALL_OW 247
55064: PUSH
55065: LD_INT 1
55067: EQUAL
55068: IFFALSE 55114
// begin to_heal := to_heal diff group [ i ] ;
55070: LD_ADDR_VAR 0 30
55074: PUSH
55075: LD_VAR 0 30
55079: PUSH
55080: LD_VAR 0 4
55084: PUSH
55085: LD_VAR 0 7
55089: ARRAY
55090: DIFF
55091: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55092: LD_ADDR_VAR 0 31
55096: PUSH
55097: LD_VAR 0 31
55101: PUSH
55102: LD_VAR 0 4
55106: PUSH
55107: LD_VAR 0 7
55111: ARRAY
55112: DIFF
55113: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55114: LD_ADDR_VAR 0 4
55118: PUSH
55119: LD_VAR 0 4
55123: PPUSH
55124: LD_VAR 0 7
55128: PPUSH
55129: CALL_OW 3
55133: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55134: LD_ADDR_VAR 0 16
55138: PUSH
55139: LD_VAR 0 16
55143: PPUSH
55144: LD_VAR 0 7
55148: PPUSH
55149: CALL_OW 3
55153: ST_TO_ADDR
// continue ;
55154: GO 54994
// end ; if f_repair then
55156: LD_VAR 0 22
55160: IFFALSE 55649
// begin if GetType ( group [ i ] ) = unit_vehicle then
55162: LD_VAR 0 4
55166: PUSH
55167: LD_VAR 0 7
55171: ARRAY
55172: PPUSH
55173: CALL_OW 247
55177: PUSH
55178: LD_INT 2
55180: EQUAL
55181: IFFALSE 55371
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55183: LD_VAR 0 4
55187: PUSH
55188: LD_VAR 0 7
55192: ARRAY
55193: PPUSH
55194: CALL_OW 256
55198: PUSH
55199: LD_INT 700
55201: LESS
55202: PUSH
55203: LD_VAR 0 4
55207: PUSH
55208: LD_VAR 0 7
55212: ARRAY
55213: PUSH
55214: LD_VAR 0 32
55218: IN
55219: NOT
55220: AND
55221: IFFALSE 55245
// to_repair := to_repair union group [ i ] ;
55223: LD_ADDR_VAR 0 32
55227: PUSH
55228: LD_VAR 0 32
55232: PUSH
55233: LD_VAR 0 4
55237: PUSH
55238: LD_VAR 0 7
55242: ARRAY
55243: UNION
55244: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55245: LD_VAR 0 4
55249: PUSH
55250: LD_VAR 0 7
55254: ARRAY
55255: PPUSH
55256: CALL_OW 256
55260: PUSH
55261: LD_INT 1000
55263: EQUAL
55264: PUSH
55265: LD_VAR 0 4
55269: PUSH
55270: LD_VAR 0 7
55274: ARRAY
55275: PUSH
55276: LD_VAR 0 32
55280: IN
55281: AND
55282: IFFALSE 55306
// to_repair := to_repair diff group [ i ] ;
55284: LD_ADDR_VAR 0 32
55288: PUSH
55289: LD_VAR 0 32
55293: PUSH
55294: LD_VAR 0 4
55298: PUSH
55299: LD_VAR 0 7
55303: ARRAY
55304: DIFF
55305: ST_TO_ADDR
// if group [ i ] in to_repair then
55306: LD_VAR 0 4
55310: PUSH
55311: LD_VAR 0 7
55315: ARRAY
55316: PUSH
55317: LD_VAR 0 32
55321: IN
55322: IFFALSE 55369
// begin if not IsInArea ( group [ i ] , f_repair ) then
55324: LD_VAR 0 4
55328: PUSH
55329: LD_VAR 0 7
55333: ARRAY
55334: PPUSH
55335: LD_VAR 0 22
55339: PPUSH
55340: CALL_OW 308
55344: NOT
55345: IFFALSE 55367
// ComMoveToArea ( group [ i ] , f_repair ) ;
55347: LD_VAR 0 4
55351: PUSH
55352: LD_VAR 0 7
55356: ARRAY
55357: PPUSH
55358: LD_VAR 0 22
55362: PPUSH
55363: CALL_OW 113
// continue ;
55367: GO 54994
// end ; end else
55369: GO 55649
// if group [ i ] in repairs then
55371: LD_VAR 0 4
55375: PUSH
55376: LD_VAR 0 7
55380: ARRAY
55381: PUSH
55382: LD_VAR 0 33
55386: IN
55387: IFFALSE 55649
// begin if IsInUnit ( group [ i ] ) then
55389: LD_VAR 0 4
55393: PUSH
55394: LD_VAR 0 7
55398: ARRAY
55399: PPUSH
55400: CALL_OW 310
55404: IFFALSE 55472
// begin z := IsInUnit ( group [ i ] ) ;
55406: LD_ADDR_VAR 0 13
55410: PUSH
55411: LD_VAR 0 4
55415: PUSH
55416: LD_VAR 0 7
55420: ARRAY
55421: PPUSH
55422: CALL_OW 310
55426: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55427: LD_VAR 0 13
55431: PUSH
55432: LD_VAR 0 32
55436: IN
55437: PUSH
55438: LD_VAR 0 13
55442: PPUSH
55443: LD_VAR 0 22
55447: PPUSH
55448: CALL_OW 308
55452: AND
55453: IFFALSE 55470
// ComExitVehicle ( group [ i ] ) ;
55455: LD_VAR 0 4
55459: PUSH
55460: LD_VAR 0 7
55464: ARRAY
55465: PPUSH
55466: CALL_OW 121
// end else
55470: GO 55649
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55472: LD_ADDR_VAR 0 13
55476: PUSH
55477: LD_VAR 0 4
55481: PPUSH
55482: LD_INT 95
55484: PUSH
55485: LD_VAR 0 22
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 58
55496: PUSH
55497: EMPTY
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PPUSH
55504: CALL_OW 72
55508: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55509: LD_VAR 0 4
55513: PUSH
55514: LD_VAR 0 7
55518: ARRAY
55519: PPUSH
55520: CALL_OW 314
55524: NOT
55525: IFFALSE 55647
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55527: LD_ADDR_VAR 0 10
55531: PUSH
55532: LD_VAR 0 13
55536: PPUSH
55537: LD_VAR 0 4
55541: PUSH
55542: LD_VAR 0 7
55546: ARRAY
55547: PPUSH
55548: CALL_OW 74
55552: ST_TO_ADDR
// if not x then
55553: LD_VAR 0 10
55557: NOT
55558: IFFALSE 55562
// continue ;
55560: GO 54994
// if GetLives ( x ) < 1000 then
55562: LD_VAR 0 10
55566: PPUSH
55567: CALL_OW 256
55571: PUSH
55572: LD_INT 1000
55574: LESS
55575: IFFALSE 55599
// ComRepairVehicle ( group [ i ] , x ) else
55577: LD_VAR 0 4
55581: PUSH
55582: LD_VAR 0 7
55586: ARRAY
55587: PPUSH
55588: LD_VAR 0 10
55592: PPUSH
55593: CALL_OW 129
55597: GO 55647
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55599: LD_VAR 0 23
55603: PUSH
55604: LD_VAR 0 4
55608: PUSH
55609: LD_VAR 0 7
55613: ARRAY
55614: PPUSH
55615: CALL_OW 256
55619: PUSH
55620: LD_INT 1000
55622: LESS
55623: AND
55624: NOT
55625: IFFALSE 55647
// ComEnterUnit ( group [ i ] , x ) ;
55627: LD_VAR 0 4
55631: PUSH
55632: LD_VAR 0 7
55636: ARRAY
55637: PPUSH
55638: LD_VAR 0 10
55642: PPUSH
55643: CALL_OW 120
// end ; continue ;
55647: GO 54994
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55649: LD_VAR 0 23
55653: PUSH
55654: LD_VAR 0 4
55658: PUSH
55659: LD_VAR 0 7
55663: ARRAY
55664: PPUSH
55665: CALL_OW 247
55669: PUSH
55670: LD_INT 1
55672: EQUAL
55673: AND
55674: IFFALSE 56152
// begin if group [ i ] in healers then
55676: LD_VAR 0 4
55680: PUSH
55681: LD_VAR 0 7
55685: ARRAY
55686: PUSH
55687: LD_VAR 0 31
55691: IN
55692: IFFALSE 55965
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55694: LD_VAR 0 4
55698: PUSH
55699: LD_VAR 0 7
55703: ARRAY
55704: PPUSH
55705: LD_VAR 0 23
55709: PPUSH
55710: CALL_OW 308
55714: NOT
55715: PUSH
55716: LD_VAR 0 4
55720: PUSH
55721: LD_VAR 0 7
55725: ARRAY
55726: PPUSH
55727: CALL_OW 314
55731: NOT
55732: AND
55733: IFFALSE 55757
// ComMoveToArea ( group [ i ] , f_heal ) else
55735: LD_VAR 0 4
55739: PUSH
55740: LD_VAR 0 7
55744: ARRAY
55745: PPUSH
55746: LD_VAR 0 23
55750: PPUSH
55751: CALL_OW 113
55755: GO 55963
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55757: LD_VAR 0 4
55761: PUSH
55762: LD_VAR 0 7
55766: ARRAY
55767: PPUSH
55768: CALL 54375 0 1
55772: PPUSH
55773: CALL_OW 256
55777: PUSH
55778: LD_INT 1000
55780: EQUAL
55781: IFFALSE 55800
// ComStop ( group [ i ] ) else
55783: LD_VAR 0 4
55787: PUSH
55788: LD_VAR 0 7
55792: ARRAY
55793: PPUSH
55794: CALL_OW 141
55798: GO 55963
// if not HasTask ( group [ i ] ) and to_heal then
55800: LD_VAR 0 4
55804: PUSH
55805: LD_VAR 0 7
55809: ARRAY
55810: PPUSH
55811: CALL_OW 314
55815: NOT
55816: PUSH
55817: LD_VAR 0 30
55821: AND
55822: IFFALSE 55963
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55824: LD_ADDR_VAR 0 13
55828: PUSH
55829: LD_VAR 0 30
55833: PPUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 54
55839: PUSH
55840: EMPTY
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PPUSH
55847: CALL_OW 72
55851: PPUSH
55852: LD_VAR 0 4
55856: PUSH
55857: LD_VAR 0 7
55861: ARRAY
55862: PPUSH
55863: CALL_OW 74
55867: ST_TO_ADDR
// if z then
55868: LD_VAR 0 13
55872: IFFALSE 55963
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55874: LD_INT 91
55876: PUSH
55877: LD_VAR 0 13
55881: PUSH
55882: LD_INT 10
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 81
55892: PUSH
55893: LD_VAR 0 13
55897: PPUSH
55898: CALL_OW 255
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PPUSH
55911: CALL_OW 69
55915: PUSH
55916: LD_INT 0
55918: EQUAL
55919: IFFALSE 55943
// ComHeal ( group [ i ] , z ) else
55921: LD_VAR 0 4
55925: PUSH
55926: LD_VAR 0 7
55930: ARRAY
55931: PPUSH
55932: LD_VAR 0 13
55936: PPUSH
55937: CALL_OW 128
55941: GO 55963
// ComMoveToArea ( group [ i ] , f_heal ) ;
55943: LD_VAR 0 4
55947: PUSH
55948: LD_VAR 0 7
55952: ARRAY
55953: PPUSH
55954: LD_VAR 0 23
55958: PPUSH
55959: CALL_OW 113
// end ; continue ;
55963: GO 54994
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
55965: LD_VAR 0 4
55969: PUSH
55970: LD_VAR 0 7
55974: ARRAY
55975: PPUSH
55976: CALL_OW 256
55980: PUSH
55981: LD_INT 700
55983: LESS
55984: PUSH
55985: LD_VAR 0 4
55989: PUSH
55990: LD_VAR 0 7
55994: ARRAY
55995: PUSH
55996: LD_VAR 0 30
56000: IN
56001: NOT
56002: AND
56003: IFFALSE 56027
// to_heal := to_heal union group [ i ] ;
56005: LD_ADDR_VAR 0 30
56009: PUSH
56010: LD_VAR 0 30
56014: PUSH
56015: LD_VAR 0 4
56019: PUSH
56020: LD_VAR 0 7
56024: ARRAY
56025: UNION
56026: ST_TO_ADDR
// if group [ i ] in to_heal then
56027: LD_VAR 0 4
56031: PUSH
56032: LD_VAR 0 7
56036: ARRAY
56037: PUSH
56038: LD_VAR 0 30
56042: IN
56043: IFFALSE 56152
// begin if GetLives ( group [ i ] ) = 1000 then
56045: LD_VAR 0 4
56049: PUSH
56050: LD_VAR 0 7
56054: ARRAY
56055: PPUSH
56056: CALL_OW 256
56060: PUSH
56061: LD_INT 1000
56063: EQUAL
56064: IFFALSE 56090
// to_heal := to_heal diff group [ i ] else
56066: LD_ADDR_VAR 0 30
56070: PUSH
56071: LD_VAR 0 30
56075: PUSH
56076: LD_VAR 0 4
56080: PUSH
56081: LD_VAR 0 7
56085: ARRAY
56086: DIFF
56087: ST_TO_ADDR
56088: GO 56152
// begin if not IsInArea ( group [ i ] , to_heal ) then
56090: LD_VAR 0 4
56094: PUSH
56095: LD_VAR 0 7
56099: ARRAY
56100: PPUSH
56101: LD_VAR 0 30
56105: PPUSH
56106: CALL_OW 308
56110: NOT
56111: IFFALSE 56135
// ComMoveToArea ( group [ i ] , f_heal ) else
56113: LD_VAR 0 4
56117: PUSH
56118: LD_VAR 0 7
56122: ARRAY
56123: PPUSH
56124: LD_VAR 0 23
56128: PPUSH
56129: CALL_OW 113
56133: GO 56150
// ComHold ( group [ i ] ) ;
56135: LD_VAR 0 4
56139: PUSH
56140: LD_VAR 0 7
56144: ARRAY
56145: PPUSH
56146: CALL_OW 140
// continue ;
56150: GO 54994
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56152: LD_VAR 0 4
56156: PUSH
56157: LD_VAR 0 7
56161: ARRAY
56162: PPUSH
56163: LD_INT 10
56165: PPUSH
56166: CALL 52772 0 2
56170: NOT
56171: PUSH
56172: LD_VAR 0 16
56176: PUSH
56177: LD_VAR 0 7
56181: ARRAY
56182: PUSH
56183: EMPTY
56184: EQUAL
56185: NOT
56186: AND
56187: IFFALSE 56453
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56189: LD_VAR 0 4
56193: PUSH
56194: LD_VAR 0 7
56198: ARRAY
56199: PPUSH
56200: CALL_OW 262
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: IN
56215: IFFALSE 56256
// if GetFuel ( group [ i ] ) < 10 then
56217: LD_VAR 0 4
56221: PUSH
56222: LD_VAR 0 7
56226: ARRAY
56227: PPUSH
56228: CALL_OW 261
56232: PUSH
56233: LD_INT 10
56235: LESS
56236: IFFALSE 56256
// SetFuel ( group [ i ] , 12 ) ;
56238: LD_VAR 0 4
56242: PUSH
56243: LD_VAR 0 7
56247: ARRAY
56248: PPUSH
56249: LD_INT 12
56251: PPUSH
56252: CALL_OW 240
// if units_path [ i ] then
56256: LD_VAR 0 16
56260: PUSH
56261: LD_VAR 0 7
56265: ARRAY
56266: IFFALSE 56451
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56268: LD_VAR 0 4
56272: PUSH
56273: LD_VAR 0 7
56277: ARRAY
56278: PPUSH
56279: LD_VAR 0 16
56283: PUSH
56284: LD_VAR 0 7
56288: ARRAY
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PPUSH
56298: LD_VAR 0 16
56302: PUSH
56303: LD_VAR 0 7
56307: ARRAY
56308: PUSH
56309: LD_INT 1
56311: ARRAY
56312: PUSH
56313: LD_INT 2
56315: ARRAY
56316: PPUSH
56317: CALL_OW 297
56321: PUSH
56322: LD_INT 6
56324: GREATER
56325: IFFALSE 56400
// begin if not HasTask ( group [ i ] ) then
56327: LD_VAR 0 4
56331: PUSH
56332: LD_VAR 0 7
56336: ARRAY
56337: PPUSH
56338: CALL_OW 314
56342: NOT
56343: IFFALSE 56398
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56345: LD_VAR 0 4
56349: PUSH
56350: LD_VAR 0 7
56354: ARRAY
56355: PPUSH
56356: LD_VAR 0 16
56360: PUSH
56361: LD_VAR 0 7
56365: ARRAY
56366: PUSH
56367: LD_INT 1
56369: ARRAY
56370: PUSH
56371: LD_INT 1
56373: ARRAY
56374: PPUSH
56375: LD_VAR 0 16
56379: PUSH
56380: LD_VAR 0 7
56384: ARRAY
56385: PUSH
56386: LD_INT 1
56388: ARRAY
56389: PUSH
56390: LD_INT 2
56392: ARRAY
56393: PPUSH
56394: CALL_OW 114
// end else
56398: GO 56451
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56400: LD_ADDR_VAR 0 15
56404: PUSH
56405: LD_VAR 0 16
56409: PUSH
56410: LD_VAR 0 7
56414: ARRAY
56415: PPUSH
56416: LD_INT 1
56418: PPUSH
56419: CALL_OW 3
56423: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56424: LD_ADDR_VAR 0 16
56428: PUSH
56429: LD_VAR 0 16
56433: PPUSH
56434: LD_VAR 0 7
56438: PPUSH
56439: LD_VAR 0 15
56443: PPUSH
56444: CALL_OW 1
56448: ST_TO_ADDR
// continue ;
56449: GO 54994
// end ; end ; end else
56451: GO 59089
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56453: LD_ADDR_VAR 0 14
56457: PUSH
56458: LD_INT 81
56460: PUSH
56461: LD_VAR 0 4
56465: PUSH
56466: LD_VAR 0 7
56470: ARRAY
56471: PPUSH
56472: CALL_OW 255
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PPUSH
56481: CALL_OW 69
56485: ST_TO_ADDR
// if not tmp then
56486: LD_VAR 0 14
56490: NOT
56491: IFFALSE 56495
// continue ;
56493: GO 54994
// if f_ignore_area then
56495: LD_VAR 0 17
56499: IFFALSE 56587
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56501: LD_ADDR_VAR 0 15
56505: PUSH
56506: LD_VAR 0 14
56510: PPUSH
56511: LD_INT 3
56513: PUSH
56514: LD_INT 92
56516: PUSH
56517: LD_VAR 0 17
56521: PUSH
56522: LD_INT 1
56524: ARRAY
56525: PUSH
56526: LD_VAR 0 17
56530: PUSH
56531: LD_INT 2
56533: ARRAY
56534: PUSH
56535: LD_VAR 0 17
56539: PUSH
56540: LD_INT 3
56542: ARRAY
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PPUSH
56554: CALL_OW 72
56558: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56559: LD_VAR 0 14
56563: PUSH
56564: LD_VAR 0 15
56568: DIFF
56569: IFFALSE 56587
// tmp := tmp diff tmp2 ;
56571: LD_ADDR_VAR 0 14
56575: PUSH
56576: LD_VAR 0 14
56580: PUSH
56581: LD_VAR 0 15
56585: DIFF
56586: ST_TO_ADDR
// end ; if not f_murder then
56587: LD_VAR 0 20
56591: NOT
56592: IFFALSE 56650
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56594: LD_ADDR_VAR 0 15
56598: PUSH
56599: LD_VAR 0 14
56603: PPUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 50
56609: PUSH
56610: EMPTY
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PPUSH
56617: CALL_OW 72
56621: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56622: LD_VAR 0 14
56626: PUSH
56627: LD_VAR 0 15
56631: DIFF
56632: IFFALSE 56650
// tmp := tmp diff tmp2 ;
56634: LD_ADDR_VAR 0 14
56638: PUSH
56639: LD_VAR 0 14
56643: PUSH
56644: LD_VAR 0 15
56648: DIFF
56649: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56650: LD_ADDR_VAR 0 14
56654: PUSH
56655: LD_VAR 0 4
56659: PUSH
56660: LD_VAR 0 7
56664: ARRAY
56665: PPUSH
56666: LD_VAR 0 14
56670: PPUSH
56671: LD_INT 1
56673: PPUSH
56674: LD_INT 1
56676: PPUSH
56677: CALL 26439 0 4
56681: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56682: LD_VAR 0 4
56686: PUSH
56687: LD_VAR 0 7
56691: ARRAY
56692: PPUSH
56693: CALL_OW 257
56697: PUSH
56698: LD_INT 1
56700: EQUAL
56701: IFFALSE 57149
// begin if WantPlant ( group [ i ] ) then
56703: LD_VAR 0 4
56707: PUSH
56708: LD_VAR 0 7
56712: ARRAY
56713: PPUSH
56714: CALL 25940 0 1
56718: IFFALSE 56722
// continue ;
56720: GO 54994
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56722: LD_VAR 0 18
56726: PUSH
56727: LD_VAR 0 4
56731: PUSH
56732: LD_VAR 0 7
56736: ARRAY
56737: PPUSH
56738: CALL_OW 310
56742: NOT
56743: AND
56744: PUSH
56745: LD_VAR 0 14
56749: PUSH
56750: LD_INT 1
56752: ARRAY
56753: PUSH
56754: LD_VAR 0 14
56758: PPUSH
56759: LD_INT 21
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 58
56771: PUSH
56772: EMPTY
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PPUSH
56779: CALL_OW 72
56783: IN
56784: AND
56785: IFFALSE 56821
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56787: LD_VAR 0 4
56791: PUSH
56792: LD_VAR 0 7
56796: ARRAY
56797: PPUSH
56798: LD_VAR 0 14
56802: PUSH
56803: LD_INT 1
56805: ARRAY
56806: PPUSH
56807: CALL_OW 120
// attacking := true ;
56811: LD_ADDR_VAR 0 29
56815: PUSH
56816: LD_INT 1
56818: ST_TO_ADDR
// continue ;
56819: GO 54994
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56821: LD_VAR 0 26
56825: PUSH
56826: LD_VAR 0 4
56830: PUSH
56831: LD_VAR 0 7
56835: ARRAY
56836: PPUSH
56837: CALL_OW 257
56841: PUSH
56842: LD_INT 1
56844: EQUAL
56845: AND
56846: PUSH
56847: LD_VAR 0 4
56851: PUSH
56852: LD_VAR 0 7
56856: ARRAY
56857: PPUSH
56858: CALL_OW 256
56862: PUSH
56863: LD_INT 800
56865: LESS
56866: AND
56867: PUSH
56868: LD_VAR 0 4
56872: PUSH
56873: LD_VAR 0 7
56877: ARRAY
56878: PPUSH
56879: CALL_OW 318
56883: NOT
56884: AND
56885: IFFALSE 56902
// ComCrawl ( group [ i ] ) ;
56887: LD_VAR 0 4
56891: PUSH
56892: LD_VAR 0 7
56896: ARRAY
56897: PPUSH
56898: CALL_OW 137
// if f_mines then
56902: LD_VAR 0 21
56906: IFFALSE 57149
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56908: LD_VAR 0 14
56912: PUSH
56913: LD_INT 1
56915: ARRAY
56916: PPUSH
56917: CALL_OW 247
56921: PUSH
56922: LD_INT 3
56924: EQUAL
56925: PUSH
56926: LD_VAR 0 14
56930: PUSH
56931: LD_INT 1
56933: ARRAY
56934: PUSH
56935: LD_VAR 0 27
56939: IN
56940: NOT
56941: AND
56942: IFFALSE 57149
// begin x := GetX ( tmp [ 1 ] ) ;
56944: LD_ADDR_VAR 0 10
56948: PUSH
56949: LD_VAR 0 14
56953: PUSH
56954: LD_INT 1
56956: ARRAY
56957: PPUSH
56958: CALL_OW 250
56962: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
56963: LD_ADDR_VAR 0 11
56967: PUSH
56968: LD_VAR 0 14
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PPUSH
56977: CALL_OW 251
56981: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
56982: LD_ADDR_VAR 0 12
56986: PUSH
56987: LD_VAR 0 4
56991: PUSH
56992: LD_VAR 0 7
56996: ARRAY
56997: PPUSH
56998: CALL 52857 0 1
57002: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57003: LD_VAR 0 4
57007: PUSH
57008: LD_VAR 0 7
57012: ARRAY
57013: PPUSH
57014: LD_VAR 0 10
57018: PPUSH
57019: LD_VAR 0 11
57023: PPUSH
57024: LD_VAR 0 14
57028: PUSH
57029: LD_INT 1
57031: ARRAY
57032: PPUSH
57033: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57037: LD_VAR 0 4
57041: PUSH
57042: LD_VAR 0 7
57046: ARRAY
57047: PPUSH
57048: LD_VAR 0 10
57052: PPUSH
57053: LD_VAR 0 12
57057: PPUSH
57058: LD_INT 7
57060: PPUSH
57061: CALL_OW 272
57065: PPUSH
57066: LD_VAR 0 11
57070: PPUSH
57071: LD_VAR 0 12
57075: PPUSH
57076: LD_INT 7
57078: PPUSH
57079: CALL_OW 273
57083: PPUSH
57084: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57088: LD_VAR 0 4
57092: PUSH
57093: LD_VAR 0 7
57097: ARRAY
57098: PPUSH
57099: LD_INT 71
57101: PPUSH
57102: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57106: LD_ADDR_VAR 0 27
57110: PUSH
57111: LD_VAR 0 27
57115: PPUSH
57116: LD_VAR 0 27
57120: PUSH
57121: LD_INT 1
57123: PLUS
57124: PPUSH
57125: LD_VAR 0 14
57129: PUSH
57130: LD_INT 1
57132: ARRAY
57133: PPUSH
57134: CALL_OW 1
57138: ST_TO_ADDR
// attacking := true ;
57139: LD_ADDR_VAR 0 29
57143: PUSH
57144: LD_INT 1
57146: ST_TO_ADDR
// continue ;
57147: GO 54994
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57149: LD_VAR 0 4
57153: PUSH
57154: LD_VAR 0 7
57158: ARRAY
57159: PPUSH
57160: CALL_OW 257
57164: PUSH
57165: LD_INT 17
57167: EQUAL
57168: PUSH
57169: LD_VAR 0 4
57173: PUSH
57174: LD_VAR 0 7
57178: ARRAY
57179: PPUSH
57180: CALL_OW 110
57184: PUSH
57185: LD_INT 71
57187: EQUAL
57188: NOT
57189: AND
57190: IFFALSE 57336
// begin attacking := false ;
57192: LD_ADDR_VAR 0 29
57196: PUSH
57197: LD_INT 0
57199: ST_TO_ADDR
// k := 5 ;
57200: LD_ADDR_VAR 0 9
57204: PUSH
57205: LD_INT 5
57207: ST_TO_ADDR
// if tmp < k then
57208: LD_VAR 0 14
57212: PUSH
57213: LD_VAR 0 9
57217: LESS
57218: IFFALSE 57230
// k := tmp ;
57220: LD_ADDR_VAR 0 9
57224: PUSH
57225: LD_VAR 0 14
57229: ST_TO_ADDR
// for j = 1 to k do
57230: LD_ADDR_VAR 0 8
57234: PUSH
57235: DOUBLE
57236: LD_INT 1
57238: DEC
57239: ST_TO_ADDR
57240: LD_VAR 0 9
57244: PUSH
57245: FOR_TO
57246: IFFALSE 57334
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57248: LD_VAR 0 14
57252: PUSH
57253: LD_VAR 0 8
57257: ARRAY
57258: PUSH
57259: LD_VAR 0 14
57263: PPUSH
57264: LD_INT 58
57266: PUSH
57267: EMPTY
57268: LIST
57269: PPUSH
57270: CALL_OW 72
57274: IN
57275: NOT
57276: IFFALSE 57332
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57278: LD_VAR 0 4
57282: PUSH
57283: LD_VAR 0 7
57287: ARRAY
57288: PPUSH
57289: LD_VAR 0 14
57293: PUSH
57294: LD_VAR 0 8
57298: ARRAY
57299: PPUSH
57300: CALL_OW 115
// attacking := true ;
57304: LD_ADDR_VAR 0 29
57308: PUSH
57309: LD_INT 1
57311: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57312: LD_VAR 0 4
57316: PUSH
57317: LD_VAR 0 7
57321: ARRAY
57322: PPUSH
57323: LD_INT 71
57325: PPUSH
57326: CALL_OW 109
// continue ;
57330: GO 57245
// end ; end ;
57332: GO 57245
57334: POP
57335: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57336: LD_VAR 0 4
57340: PUSH
57341: LD_VAR 0 7
57345: ARRAY
57346: PPUSH
57347: CALL_OW 257
57351: PUSH
57352: LD_INT 8
57354: EQUAL
57355: PUSH
57356: LD_VAR 0 4
57360: PUSH
57361: LD_VAR 0 7
57365: ARRAY
57366: PPUSH
57367: CALL_OW 264
57371: PUSH
57372: LD_INT 28
57374: PUSH
57375: LD_INT 45
57377: PUSH
57378: LD_INT 7
57380: PUSH
57381: LD_INT 47
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: IN
57390: OR
57391: IFFALSE 57621
// begin attacking := false ;
57393: LD_ADDR_VAR 0 29
57397: PUSH
57398: LD_INT 0
57400: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57401: LD_VAR 0 14
57405: PUSH
57406: LD_INT 1
57408: ARRAY
57409: PPUSH
57410: CALL_OW 266
57414: PUSH
57415: LD_INT 32
57417: PUSH
57418: LD_INT 31
57420: PUSH
57421: LD_INT 33
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: LD_INT 5
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: IN
57437: IFFALSE 57621
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57439: LD_ADDR_VAR 0 9
57443: PUSH
57444: LD_VAR 0 14
57448: PUSH
57449: LD_INT 1
57451: ARRAY
57452: PPUSH
57453: CALL_OW 266
57457: PPUSH
57458: LD_VAR 0 14
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: CALL_OW 250
57471: PPUSH
57472: LD_VAR 0 14
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: CALL_OW 251
57485: PPUSH
57486: LD_VAR 0 14
57490: PUSH
57491: LD_INT 1
57493: ARRAY
57494: PPUSH
57495: CALL_OW 254
57499: PPUSH
57500: LD_VAR 0 14
57504: PUSH
57505: LD_INT 1
57507: ARRAY
57508: PPUSH
57509: CALL_OW 248
57513: PPUSH
57514: LD_INT 0
57516: PPUSH
57517: CALL 34233 0 6
57521: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57522: LD_ADDR_VAR 0 8
57526: PUSH
57527: LD_VAR 0 4
57531: PUSH
57532: LD_VAR 0 7
57536: ARRAY
57537: PPUSH
57538: LD_VAR 0 9
57542: PPUSH
57543: CALL 52920 0 2
57547: ST_TO_ADDR
// if j then
57548: LD_VAR 0 8
57552: IFFALSE 57621
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57554: LD_VAR 0 8
57558: PUSH
57559: LD_INT 1
57561: ARRAY
57562: PPUSH
57563: LD_VAR 0 8
57567: PUSH
57568: LD_INT 2
57570: ARRAY
57571: PPUSH
57572: CALL_OW 488
57576: IFFALSE 57621
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57578: LD_VAR 0 4
57582: PUSH
57583: LD_VAR 0 7
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 8
57593: PUSH
57594: LD_INT 1
57596: ARRAY
57597: PPUSH
57598: LD_VAR 0 8
57602: PUSH
57603: LD_INT 2
57605: ARRAY
57606: PPUSH
57607: CALL_OW 116
// attacking := true ;
57611: LD_ADDR_VAR 0 29
57615: PUSH
57616: LD_INT 1
57618: ST_TO_ADDR
// continue ;
57619: GO 54994
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57621: LD_VAR 0 4
57625: PUSH
57626: LD_VAR 0 7
57630: ARRAY
57631: PPUSH
57632: CALL_OW 265
57636: PUSH
57637: LD_INT 11
57639: EQUAL
57640: IFFALSE 57918
// begin k := 10 ;
57642: LD_ADDR_VAR 0 9
57646: PUSH
57647: LD_INT 10
57649: ST_TO_ADDR
// x := 0 ;
57650: LD_ADDR_VAR 0 10
57654: PUSH
57655: LD_INT 0
57657: ST_TO_ADDR
// if tmp < k then
57658: LD_VAR 0 14
57662: PUSH
57663: LD_VAR 0 9
57667: LESS
57668: IFFALSE 57680
// k := tmp ;
57670: LD_ADDR_VAR 0 9
57674: PUSH
57675: LD_VAR 0 14
57679: ST_TO_ADDR
// for j = k downto 1 do
57680: LD_ADDR_VAR 0 8
57684: PUSH
57685: DOUBLE
57686: LD_VAR 0 9
57690: INC
57691: ST_TO_ADDR
57692: LD_INT 1
57694: PUSH
57695: FOR_DOWNTO
57696: IFFALSE 57771
// begin if GetType ( tmp [ j ] ) = unit_human then
57698: LD_VAR 0 14
57702: PUSH
57703: LD_VAR 0 8
57707: ARRAY
57708: PPUSH
57709: CALL_OW 247
57713: PUSH
57714: LD_INT 1
57716: EQUAL
57717: IFFALSE 57769
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57719: LD_VAR 0 4
57723: PUSH
57724: LD_VAR 0 7
57728: ARRAY
57729: PPUSH
57730: LD_VAR 0 14
57734: PUSH
57735: LD_VAR 0 8
57739: ARRAY
57740: PPUSH
57741: CALL 53191 0 2
// x := tmp [ j ] ;
57745: LD_ADDR_VAR 0 10
57749: PUSH
57750: LD_VAR 0 14
57754: PUSH
57755: LD_VAR 0 8
57759: ARRAY
57760: ST_TO_ADDR
// attacking := true ;
57761: LD_ADDR_VAR 0 29
57765: PUSH
57766: LD_INT 1
57768: ST_TO_ADDR
// end ; end ;
57769: GO 57695
57771: POP
57772: POP
// if not x then
57773: LD_VAR 0 10
57777: NOT
57778: IFFALSE 57918
// begin attacking := true ;
57780: LD_ADDR_VAR 0 29
57784: PUSH
57785: LD_INT 1
57787: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57788: LD_VAR 0 4
57792: PUSH
57793: LD_VAR 0 7
57797: ARRAY
57798: PPUSH
57799: CALL_OW 250
57803: PPUSH
57804: LD_VAR 0 4
57808: PUSH
57809: LD_VAR 0 7
57813: ARRAY
57814: PPUSH
57815: CALL_OW 251
57819: PPUSH
57820: CALL_OW 546
57824: PUSH
57825: LD_INT 2
57827: ARRAY
57828: PUSH
57829: LD_VAR 0 14
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: PPUSH
57838: CALL_OW 250
57842: PPUSH
57843: LD_VAR 0 14
57847: PUSH
57848: LD_INT 1
57850: ARRAY
57851: PPUSH
57852: CALL_OW 251
57856: PPUSH
57857: CALL_OW 546
57861: PUSH
57862: LD_INT 2
57864: ARRAY
57865: EQUAL
57866: IFFALSE 57894
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57868: LD_VAR 0 4
57872: PUSH
57873: LD_VAR 0 7
57877: ARRAY
57878: PPUSH
57879: LD_VAR 0 14
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PPUSH
57888: CALL 53191 0 2
57892: GO 57918
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57894: LD_VAR 0 4
57898: PUSH
57899: LD_VAR 0 7
57903: ARRAY
57904: PPUSH
57905: LD_VAR 0 14
57909: PUSH
57910: LD_INT 1
57912: ARRAY
57913: PPUSH
57914: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
57918: LD_VAR 0 4
57922: PUSH
57923: LD_VAR 0 7
57927: ARRAY
57928: PPUSH
57929: CALL_OW 264
57933: PUSH
57934: LD_INT 29
57936: EQUAL
57937: IFFALSE 58303
// begin if WantsToAttack ( group [ i ] ) in bombed then
57939: LD_VAR 0 4
57943: PUSH
57944: LD_VAR 0 7
57948: ARRAY
57949: PPUSH
57950: CALL_OW 319
57954: PUSH
57955: LD_VAR 0 28
57959: IN
57960: IFFALSE 57964
// continue ;
57962: GO 54994
// k := 8 ;
57964: LD_ADDR_VAR 0 9
57968: PUSH
57969: LD_INT 8
57971: ST_TO_ADDR
// x := 0 ;
57972: LD_ADDR_VAR 0 10
57976: PUSH
57977: LD_INT 0
57979: ST_TO_ADDR
// if tmp < k then
57980: LD_VAR 0 14
57984: PUSH
57985: LD_VAR 0 9
57989: LESS
57990: IFFALSE 58002
// k := tmp ;
57992: LD_ADDR_VAR 0 9
57996: PUSH
57997: LD_VAR 0 14
58001: ST_TO_ADDR
// for j = 1 to k do
58002: LD_ADDR_VAR 0 8
58006: PUSH
58007: DOUBLE
58008: LD_INT 1
58010: DEC
58011: ST_TO_ADDR
58012: LD_VAR 0 9
58016: PUSH
58017: FOR_TO
58018: IFFALSE 58150
// begin if GetType ( tmp [ j ] ) = unit_building then
58020: LD_VAR 0 14
58024: PUSH
58025: LD_VAR 0 8
58029: ARRAY
58030: PPUSH
58031: CALL_OW 247
58035: PUSH
58036: LD_INT 3
58038: EQUAL
58039: IFFALSE 58148
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58041: LD_VAR 0 14
58045: PUSH
58046: LD_VAR 0 8
58050: ARRAY
58051: PUSH
58052: LD_VAR 0 28
58056: IN
58057: NOT
58058: PUSH
58059: LD_VAR 0 14
58063: PUSH
58064: LD_VAR 0 8
58068: ARRAY
58069: PPUSH
58070: CALL_OW 313
58074: AND
58075: IFFALSE 58148
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58077: LD_VAR 0 4
58081: PUSH
58082: LD_VAR 0 7
58086: ARRAY
58087: PPUSH
58088: LD_VAR 0 14
58092: PUSH
58093: LD_VAR 0 8
58097: ARRAY
58098: PPUSH
58099: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58103: LD_ADDR_VAR 0 28
58107: PUSH
58108: LD_VAR 0 28
58112: PPUSH
58113: LD_VAR 0 28
58117: PUSH
58118: LD_INT 1
58120: PLUS
58121: PPUSH
58122: LD_VAR 0 14
58126: PUSH
58127: LD_VAR 0 8
58131: ARRAY
58132: PPUSH
58133: CALL_OW 1
58137: ST_TO_ADDR
// attacking := true ;
58138: LD_ADDR_VAR 0 29
58142: PUSH
58143: LD_INT 1
58145: ST_TO_ADDR
// break ;
58146: GO 58150
// end ; end ;
58148: GO 58017
58150: POP
58151: POP
// if not attacking and f_attack_depot then
58152: LD_VAR 0 29
58156: NOT
58157: PUSH
58158: LD_VAR 0 25
58162: AND
58163: IFFALSE 58258
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58165: LD_ADDR_VAR 0 13
58169: PUSH
58170: LD_VAR 0 14
58174: PPUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 30
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 30
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: PPUSH
58203: CALL_OW 72
58207: ST_TO_ADDR
// if z then
58208: LD_VAR 0 13
58212: IFFALSE 58258
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58214: LD_VAR 0 4
58218: PUSH
58219: LD_VAR 0 7
58223: ARRAY
58224: PPUSH
58225: LD_VAR 0 13
58229: PPUSH
58230: LD_VAR 0 4
58234: PUSH
58235: LD_VAR 0 7
58239: ARRAY
58240: PPUSH
58241: CALL_OW 74
58245: PPUSH
58246: CALL_OW 115
// attacking := true ;
58250: LD_ADDR_VAR 0 29
58254: PUSH
58255: LD_INT 1
58257: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58258: LD_VAR 0 4
58262: PUSH
58263: LD_VAR 0 7
58267: ARRAY
58268: PPUSH
58269: CALL_OW 256
58273: PUSH
58274: LD_INT 500
58276: LESS
58277: IFFALSE 58303
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58279: LD_VAR 0 4
58283: PUSH
58284: LD_VAR 0 7
58288: ARRAY
58289: PPUSH
58290: LD_VAR 0 14
58294: PUSH
58295: LD_INT 1
58297: ARRAY
58298: PPUSH
58299: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58303: LD_VAR 0 4
58307: PUSH
58308: LD_VAR 0 7
58312: ARRAY
58313: PPUSH
58314: CALL_OW 264
58318: PUSH
58319: LD_INT 49
58321: EQUAL
58322: IFFALSE 58443
// begin if not HasTask ( group [ i ] ) then
58324: LD_VAR 0 4
58328: PUSH
58329: LD_VAR 0 7
58333: ARRAY
58334: PPUSH
58335: CALL_OW 314
58339: NOT
58340: IFFALSE 58443
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58342: LD_ADDR_VAR 0 9
58346: PUSH
58347: LD_INT 81
58349: PUSH
58350: LD_VAR 0 4
58354: PUSH
58355: LD_VAR 0 7
58359: ARRAY
58360: PPUSH
58361: CALL_OW 255
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PPUSH
58370: CALL_OW 69
58374: PPUSH
58375: LD_VAR 0 4
58379: PUSH
58380: LD_VAR 0 7
58384: ARRAY
58385: PPUSH
58386: CALL_OW 74
58390: ST_TO_ADDR
// if k then
58391: LD_VAR 0 9
58395: IFFALSE 58443
// if GetDistUnits ( group [ i ] , k ) > 10 then
58397: LD_VAR 0 4
58401: PUSH
58402: LD_VAR 0 7
58406: ARRAY
58407: PPUSH
58408: LD_VAR 0 9
58412: PPUSH
58413: CALL_OW 296
58417: PUSH
58418: LD_INT 10
58420: GREATER
58421: IFFALSE 58443
// ComMoveUnit ( group [ i ] , k ) ;
58423: LD_VAR 0 4
58427: PUSH
58428: LD_VAR 0 7
58432: ARRAY
58433: PPUSH
58434: LD_VAR 0 9
58438: PPUSH
58439: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58443: LD_VAR 0 4
58447: PUSH
58448: LD_VAR 0 7
58452: ARRAY
58453: PPUSH
58454: CALL_OW 256
58458: PUSH
58459: LD_INT 250
58461: LESS
58462: PUSH
58463: LD_VAR 0 4
58467: PUSH
58468: LD_VAR 0 7
58472: ARRAY
58473: PUSH
58474: LD_INT 21
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 23
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PPUSH
58498: CALL_OW 69
58502: IN
58503: AND
58504: IFFALSE 58629
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58506: LD_ADDR_VAR 0 9
58510: PUSH
58511: LD_OWVAR 3
58515: PUSH
58516: LD_VAR 0 4
58520: PUSH
58521: LD_VAR 0 7
58525: ARRAY
58526: DIFF
58527: PPUSH
58528: LD_VAR 0 4
58532: PUSH
58533: LD_VAR 0 7
58537: ARRAY
58538: PPUSH
58539: CALL_OW 74
58543: ST_TO_ADDR
// if not k then
58544: LD_VAR 0 9
58548: NOT
58549: IFFALSE 58553
// continue ;
58551: GO 54994
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58553: LD_VAR 0 9
58557: PUSH
58558: LD_INT 81
58560: PUSH
58561: LD_VAR 0 4
58565: PUSH
58566: LD_VAR 0 7
58570: ARRAY
58571: PPUSH
58572: CALL_OW 255
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PPUSH
58581: CALL_OW 69
58585: IN
58586: PUSH
58587: LD_VAR 0 9
58591: PPUSH
58592: LD_VAR 0 4
58596: PUSH
58597: LD_VAR 0 7
58601: ARRAY
58602: PPUSH
58603: CALL_OW 296
58607: PUSH
58608: LD_INT 5
58610: LESS
58611: AND
58612: IFFALSE 58629
// ComAutodestruct ( group [ i ] ) ;
58614: LD_VAR 0 4
58618: PUSH
58619: LD_VAR 0 7
58623: ARRAY
58624: PPUSH
58625: CALL 53089 0 1
// end ; if f_attack_depot then
58629: LD_VAR 0 25
58633: IFFALSE 58745
// begin k := 6 ;
58635: LD_ADDR_VAR 0 9
58639: PUSH
58640: LD_INT 6
58642: ST_TO_ADDR
// if tmp < k then
58643: LD_VAR 0 14
58647: PUSH
58648: LD_VAR 0 9
58652: LESS
58653: IFFALSE 58665
// k := tmp ;
58655: LD_ADDR_VAR 0 9
58659: PUSH
58660: LD_VAR 0 14
58664: ST_TO_ADDR
// for j = 1 to k do
58665: LD_ADDR_VAR 0 8
58669: PUSH
58670: DOUBLE
58671: LD_INT 1
58673: DEC
58674: ST_TO_ADDR
58675: LD_VAR 0 9
58679: PUSH
58680: FOR_TO
58681: IFFALSE 58743
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58683: LD_VAR 0 8
58687: PPUSH
58688: CALL_OW 266
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: IN
58703: IFFALSE 58741
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58705: LD_VAR 0 4
58709: PUSH
58710: LD_VAR 0 7
58714: ARRAY
58715: PPUSH
58716: LD_VAR 0 14
58720: PUSH
58721: LD_VAR 0 8
58725: ARRAY
58726: PPUSH
58727: CALL_OW 115
// attacking := true ;
58731: LD_ADDR_VAR 0 29
58735: PUSH
58736: LD_INT 1
58738: ST_TO_ADDR
// break ;
58739: GO 58743
// end ;
58741: GO 58680
58743: POP
58744: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58745: LD_VAR 0 4
58749: PUSH
58750: LD_VAR 0 7
58754: ARRAY
58755: PPUSH
58756: CALL_OW 302
58760: PUSH
58761: LD_VAR 0 29
58765: NOT
58766: AND
58767: IFFALSE 59089
// begin if GetTag ( group [ i ] ) = 71 then
58769: LD_VAR 0 4
58773: PUSH
58774: LD_VAR 0 7
58778: ARRAY
58779: PPUSH
58780: CALL_OW 110
58784: PUSH
58785: LD_INT 71
58787: EQUAL
58788: IFFALSE 58829
// begin if HasTask ( group [ i ] ) then
58790: LD_VAR 0 4
58794: PUSH
58795: LD_VAR 0 7
58799: ARRAY
58800: PPUSH
58801: CALL_OW 314
58805: IFFALSE 58811
// continue else
58807: GO 54994
58809: GO 58829
// SetTag ( group [ i ] , 0 ) ;
58811: LD_VAR 0 4
58815: PUSH
58816: LD_VAR 0 7
58820: ARRAY
58821: PPUSH
58822: LD_INT 0
58824: PPUSH
58825: CALL_OW 109
// end ; k := 8 ;
58829: LD_ADDR_VAR 0 9
58833: PUSH
58834: LD_INT 8
58836: ST_TO_ADDR
// x := 0 ;
58837: LD_ADDR_VAR 0 10
58841: PUSH
58842: LD_INT 0
58844: ST_TO_ADDR
// if tmp < k then
58845: LD_VAR 0 14
58849: PUSH
58850: LD_VAR 0 9
58854: LESS
58855: IFFALSE 58867
// k := tmp ;
58857: LD_ADDR_VAR 0 9
58861: PUSH
58862: LD_VAR 0 14
58866: ST_TO_ADDR
// for j = 1 to k do
58867: LD_ADDR_VAR 0 8
58871: PUSH
58872: DOUBLE
58873: LD_INT 1
58875: DEC
58876: ST_TO_ADDR
58877: LD_VAR 0 9
58881: PUSH
58882: FOR_TO
58883: IFFALSE 58981
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58885: LD_VAR 0 14
58889: PUSH
58890: LD_VAR 0 8
58894: ARRAY
58895: PPUSH
58896: CALL_OW 247
58900: PUSH
58901: LD_INT 1
58903: EQUAL
58904: PUSH
58905: LD_VAR 0 14
58909: PUSH
58910: LD_VAR 0 8
58914: ARRAY
58915: PPUSH
58916: CALL_OW 256
58920: PUSH
58921: LD_INT 250
58923: LESS
58924: PUSH
58925: LD_VAR 0 20
58929: AND
58930: PUSH
58931: LD_VAR 0 20
58935: NOT
58936: PUSH
58937: LD_VAR 0 14
58941: PUSH
58942: LD_VAR 0 8
58946: ARRAY
58947: PPUSH
58948: CALL_OW 256
58952: PUSH
58953: LD_INT 250
58955: GREATEREQUAL
58956: AND
58957: OR
58958: AND
58959: IFFALSE 58979
// begin x := tmp [ j ] ;
58961: LD_ADDR_VAR 0 10
58965: PUSH
58966: LD_VAR 0 14
58970: PUSH
58971: LD_VAR 0 8
58975: ARRAY
58976: ST_TO_ADDR
// break ;
58977: GO 58981
// end ;
58979: GO 58882
58981: POP
58982: POP
// if x then
58983: LD_VAR 0 10
58987: IFFALSE 59011
// ComAttackUnit ( group [ i ] , x ) else
58989: LD_VAR 0 4
58993: PUSH
58994: LD_VAR 0 7
58998: ARRAY
58999: PPUSH
59000: LD_VAR 0 10
59004: PPUSH
59005: CALL_OW 115
59009: GO 59035
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59011: LD_VAR 0 4
59015: PUSH
59016: LD_VAR 0 7
59020: ARRAY
59021: PPUSH
59022: LD_VAR 0 14
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PPUSH
59031: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59035: LD_VAR 0 4
59039: PUSH
59040: LD_VAR 0 7
59044: ARRAY
59045: PPUSH
59046: CALL_OW 314
59050: NOT
59051: IFFALSE 59089
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59053: LD_VAR 0 4
59057: PUSH
59058: LD_VAR 0 7
59062: ARRAY
59063: PPUSH
59064: LD_VAR 0 14
59068: PPUSH
59069: LD_VAR 0 4
59073: PUSH
59074: LD_VAR 0 7
59078: ARRAY
59079: PPUSH
59080: CALL_OW 74
59084: PPUSH
59085: CALL_OW 115
// end ; end ; end ;
59089: GO 54994
59091: POP
59092: POP
// wait ( 0 0$1 ) ;
59093: LD_INT 35
59095: PPUSH
59096: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59100: LD_VAR 0 4
59104: PUSH
59105: EMPTY
59106: EQUAL
59107: PUSH
59108: LD_INT 81
59110: PUSH
59111: LD_VAR 0 35
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PPUSH
59120: CALL_OW 69
59124: NOT
59125: OR
59126: IFFALSE 54979
// end ;
59128: LD_VAR 0 2
59132: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59133: LD_INT 0
59135: PPUSH
59136: PPUSH
59137: PPUSH
59138: PPUSH
// if not base_units then
59139: LD_VAR 0 1
59143: NOT
59144: IFFALSE 59148
// exit ;
59146: GO 59235
// result := false ;
59148: LD_ADDR_VAR 0 2
59152: PUSH
59153: LD_INT 0
59155: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59156: LD_ADDR_VAR 0 5
59160: PUSH
59161: LD_VAR 0 1
59165: PPUSH
59166: LD_INT 21
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PPUSH
59176: CALL_OW 72
59180: ST_TO_ADDR
// if not tmp then
59181: LD_VAR 0 5
59185: NOT
59186: IFFALSE 59190
// exit ;
59188: GO 59235
// for i in tmp do
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_VAR 0 5
59199: PUSH
59200: FOR_IN
59201: IFFALSE 59233
// begin result := EnemyInRange ( i , 22 ) ;
59203: LD_ADDR_VAR 0 2
59207: PUSH
59208: LD_VAR 0 3
59212: PPUSH
59213: LD_INT 22
59215: PPUSH
59216: CALL 52772 0 2
59220: ST_TO_ADDR
// if result then
59221: LD_VAR 0 2
59225: IFFALSE 59231
// exit ;
59227: POP
59228: POP
59229: GO 59235
// end ;
59231: GO 59200
59233: POP
59234: POP
// end ;
59235: LD_VAR 0 2
59239: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59240: LD_INT 0
59242: PPUSH
59243: PPUSH
// if not units then
59244: LD_VAR 0 1
59248: NOT
59249: IFFALSE 59253
// exit ;
59251: GO 59323
// result := [ ] ;
59253: LD_ADDR_VAR 0 3
59257: PUSH
59258: EMPTY
59259: ST_TO_ADDR
// for i in units do
59260: LD_ADDR_VAR 0 4
59264: PUSH
59265: LD_VAR 0 1
59269: PUSH
59270: FOR_IN
59271: IFFALSE 59321
// if GetTag ( i ) = tag then
59273: LD_VAR 0 4
59277: PPUSH
59278: CALL_OW 110
59282: PUSH
59283: LD_VAR 0 2
59287: EQUAL
59288: IFFALSE 59319
// result := Insert ( result , result + 1 , i ) ;
59290: LD_ADDR_VAR 0 3
59294: PUSH
59295: LD_VAR 0 3
59299: PPUSH
59300: LD_VAR 0 3
59304: PUSH
59305: LD_INT 1
59307: PLUS
59308: PPUSH
59309: LD_VAR 0 4
59313: PPUSH
59314: CALL_OW 2
59318: ST_TO_ADDR
59319: GO 59270
59321: POP
59322: POP
// end ;
59323: LD_VAR 0 3
59327: RET
// export function IsDriver ( un ) ; begin
59328: LD_INT 0
59330: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59331: LD_ADDR_VAR 0 2
59335: PUSH
59336: LD_VAR 0 1
59340: PUSH
59341: LD_INT 55
59343: PUSH
59344: EMPTY
59345: LIST
59346: PPUSH
59347: CALL_OW 69
59351: IN
59352: ST_TO_ADDR
// end ;
59353: LD_VAR 0 2
59357: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59358: LD_INT 0
59360: PPUSH
59361: PPUSH
// list := [ ] ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: EMPTY
59368: ST_TO_ADDR
// case d of 0 :
59369: LD_VAR 0 3
59373: PUSH
59374: LD_INT 0
59376: DOUBLE
59377: EQUAL
59378: IFTRUE 59382
59380: GO 59515
59382: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59383: LD_ADDR_VAR 0 5
59387: PUSH
59388: LD_VAR 0 1
59392: PUSH
59393: LD_INT 4
59395: MINUS
59396: PUSH
59397: LD_VAR 0 2
59401: PUSH
59402: LD_INT 4
59404: MINUS
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: PUSH
59414: LD_VAR 0 1
59418: PUSH
59419: LD_INT 3
59421: MINUS
59422: PUSH
59423: LD_VAR 0 2
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: PUSH
59436: LD_VAR 0 1
59440: PUSH
59441: LD_INT 4
59443: PLUS
59444: PUSH
59445: LD_VAR 0 2
59449: PUSH
59450: LD_INT 4
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: PUSH
59458: LD_VAR 0 1
59462: PUSH
59463: LD_INT 3
59465: PLUS
59466: PUSH
59467: LD_VAR 0 2
59471: PUSH
59472: LD_INT 3
59474: PLUS
59475: PUSH
59476: LD_INT 5
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: PUSH
59484: LD_VAR 0 1
59488: PUSH
59489: LD_VAR 0 2
59493: PUSH
59494: LD_INT 4
59496: PLUS
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// end ; 1 :
59513: GO 60213
59515: LD_INT 1
59517: DOUBLE
59518: EQUAL
59519: IFTRUE 59523
59521: GO 59656
59523: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59524: LD_ADDR_VAR 0 5
59528: PUSH
59529: LD_VAR 0 1
59533: PUSH
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 4
59541: MINUS
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: PUSH
59551: LD_VAR 0 1
59555: PUSH
59556: LD_INT 3
59558: MINUS
59559: PUSH
59560: LD_VAR 0 2
59564: PUSH
59565: LD_INT 3
59567: MINUS
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: PUSH
59577: LD_VAR 0 1
59581: PUSH
59582: LD_INT 4
59584: MINUS
59585: PUSH
59586: LD_VAR 0 2
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: PUSH
59599: LD_VAR 0 1
59603: PUSH
59604: LD_VAR 0 2
59608: PUSH
59609: LD_INT 3
59611: PLUS
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: PUSH
59621: LD_VAR 0 1
59625: PUSH
59626: LD_INT 4
59628: PLUS
59629: PUSH
59630: LD_VAR 0 2
59634: PUSH
59635: LD_INT 4
59637: PLUS
59638: PUSH
59639: LD_INT 5
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// end ; 2 :
59654: GO 60213
59656: LD_INT 2
59658: DOUBLE
59659: EQUAL
59660: IFTRUE 59664
59662: GO 59793
59664: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59665: LD_ADDR_VAR 0 5
59669: PUSH
59670: LD_VAR 0 1
59674: PUSH
59675: LD_VAR 0 2
59679: PUSH
59680: LD_INT 3
59682: MINUS
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_INT 4
59699: PLUS
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: PUSH
59714: LD_VAR 0 1
59718: PUSH
59719: LD_VAR 0 2
59723: PUSH
59724: LD_INT 4
59726: PLUS
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: PUSH
59736: LD_VAR 0 1
59740: PUSH
59741: LD_INT 3
59743: MINUS
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: PUSH
59758: LD_VAR 0 1
59762: PUSH
59763: LD_INT 4
59765: MINUS
59766: PUSH
59767: LD_VAR 0 2
59771: PUSH
59772: LD_INT 4
59774: MINUS
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// end ; 3 :
59791: GO 60213
59793: LD_INT 3
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59801
59799: GO 59934
59801: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59802: LD_ADDR_VAR 0 5
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 3
59814: PLUS
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: PUSH
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 4
59836: PLUS
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_INT 4
59845: PLUS
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_INT 4
59862: MINUS
59863: PUSH
59864: LD_VAR 0 2
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_VAR 0 2
59886: PUSH
59887: LD_INT 4
59889: MINUS
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: PUSH
59899: LD_VAR 0 1
59903: PUSH
59904: LD_INT 3
59906: MINUS
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 3
59915: MINUS
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// end ; 4 :
59932: GO 60213
59934: LD_INT 4
59936: DOUBLE
59937: EQUAL
59938: IFTRUE 59942
59940: GO 60075
59942: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: LD_INT 4
59960: PLUS
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 3
59977: PLUS
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 3
59986: PLUS
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: PUSH
59996: LD_VAR 0 1
60000: PUSH
60001: LD_INT 4
60003: PLUS
60004: PUSH
60005: LD_VAR 0 2
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 3
60030: MINUS
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: LD_INT 4
60047: MINUS
60048: PUSH
60049: LD_VAR 0 2
60053: PUSH
60054: LD_INT 4
60056: MINUS
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// end ; 5 :
60073: GO 60213
60075: LD_INT 5
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60083
60081: GO 60212
60083: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60084: LD_ADDR_VAR 0 5
60088: PUSH
60089: LD_VAR 0 1
60093: PUSH
60094: LD_INT 4
60096: MINUS
60097: PUSH
60098: LD_VAR 0 2
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_VAR 0 2
60120: PUSH
60121: LD_INT 4
60123: MINUS
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 1
60137: PUSH
60138: LD_INT 4
60140: PLUS
60141: PUSH
60142: LD_VAR 0 2
60146: PUSH
60147: LD_INT 4
60149: PLUS
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: PUSH
60159: LD_VAR 0 1
60163: PUSH
60164: LD_INT 3
60166: PLUS
60167: PUSH
60168: LD_VAR 0 2
60172: PUSH
60173: LD_INT 4
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: PUSH
60181: LD_VAR 0 1
60185: PUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_INT 3
60193: PLUS
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: ST_TO_ADDR
// end ; end ;
60210: GO 60213
60212: POP
// result := list ;
60213: LD_ADDR_VAR 0 4
60217: PUSH
60218: LD_VAR 0 5
60222: ST_TO_ADDR
// end ;
60223: LD_VAR 0 4
60227: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60228: LD_INT 0
60230: PPUSH
60231: PPUSH
60232: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60233: LD_VAR 0 1
60237: NOT
60238: PUSH
60239: LD_VAR 0 2
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: IN
60262: NOT
60263: OR
60264: IFFALSE 60268
// exit ;
60266: GO 60360
// tmp := [ ] ;
60268: LD_ADDR_VAR 0 5
60272: PUSH
60273: EMPTY
60274: ST_TO_ADDR
// for i in units do
60275: LD_ADDR_VAR 0 4
60279: PUSH
60280: LD_VAR 0 1
60284: PUSH
60285: FOR_IN
60286: IFFALSE 60329
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60288: LD_ADDR_VAR 0 5
60292: PUSH
60293: LD_VAR 0 5
60297: PPUSH
60298: LD_VAR 0 5
60302: PUSH
60303: LD_INT 1
60305: PLUS
60306: PPUSH
60307: LD_VAR 0 4
60311: PPUSH
60312: LD_VAR 0 2
60316: PPUSH
60317: CALL_OW 259
60321: PPUSH
60322: CALL_OW 2
60326: ST_TO_ADDR
60327: GO 60285
60329: POP
60330: POP
// if not tmp then
60331: LD_VAR 0 5
60335: NOT
60336: IFFALSE 60340
// exit ;
60338: GO 60360
// result := SortListByListDesc ( units , tmp ) ;
60340: LD_ADDR_VAR 0 3
60344: PUSH
60345: LD_VAR 0 1
60349: PPUSH
60350: LD_VAR 0 5
60354: PPUSH
60355: CALL_OW 77
60359: ST_TO_ADDR
// end ;
60360: LD_VAR 0 3
60364: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60365: LD_INT 0
60367: PPUSH
60368: PPUSH
60369: PPUSH
// x := GetX ( building ) ;
60370: LD_ADDR_VAR 0 4
60374: PUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: CALL_OW 250
60384: ST_TO_ADDR
// y := GetY ( building ) ;
60385: LD_ADDR_VAR 0 5
60389: PUSH
60390: LD_VAR 0 2
60394: PPUSH
60395: CALL_OW 251
60399: ST_TO_ADDR
// if GetTaskList ( unit ) then
60400: LD_VAR 0 1
60404: PPUSH
60405: CALL_OW 437
60409: IFFALSE 60504
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60411: LD_STRING e
60413: PUSH
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 437
60423: PUSH
60424: LD_INT 1
60426: ARRAY
60427: PUSH
60428: LD_INT 1
60430: ARRAY
60431: EQUAL
60432: PUSH
60433: LD_VAR 0 4
60437: PUSH
60438: LD_VAR 0 1
60442: PPUSH
60443: CALL_OW 437
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PUSH
60452: LD_INT 2
60454: ARRAY
60455: EQUAL
60456: AND
60457: PUSH
60458: LD_VAR 0 5
60462: PUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 437
60472: PUSH
60473: LD_INT 1
60475: ARRAY
60476: PUSH
60477: LD_INT 3
60479: ARRAY
60480: EQUAL
60481: AND
60482: IFFALSE 60494
// result := true else
60484: LD_ADDR_VAR 0 3
60488: PUSH
60489: LD_INT 1
60491: ST_TO_ADDR
60492: GO 60502
// result := false ;
60494: LD_ADDR_VAR 0 3
60498: PUSH
60499: LD_INT 0
60501: ST_TO_ADDR
// end else
60502: GO 60512
// result := false ;
60504: LD_ADDR_VAR 0 3
60508: PUSH
60509: LD_INT 0
60511: ST_TO_ADDR
// end ;
60512: LD_VAR 0 3
60516: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
60522: PPUSH
// if not unit or not area then
60523: LD_VAR 0 1
60527: NOT
60528: PUSH
60529: LD_VAR 0 2
60533: NOT
60534: OR
60535: IFFALSE 60539
// exit ;
60537: GO 60703
// tmp := AreaToList ( area , i ) ;
60539: LD_ADDR_VAR 0 6
60543: PUSH
60544: LD_VAR 0 2
60548: PPUSH
60549: LD_VAR 0 5
60553: PPUSH
60554: CALL_OW 517
60558: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60559: LD_ADDR_VAR 0 5
60563: PUSH
60564: DOUBLE
60565: LD_INT 1
60567: DEC
60568: ST_TO_ADDR
60569: LD_VAR 0 6
60573: PUSH
60574: LD_INT 1
60576: ARRAY
60577: PUSH
60578: FOR_TO
60579: IFFALSE 60701
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60581: LD_ADDR_VAR 0 7
60585: PUSH
60586: LD_VAR 0 6
60590: PUSH
60591: LD_INT 1
60593: ARRAY
60594: PUSH
60595: LD_VAR 0 5
60599: ARRAY
60600: PUSH
60601: LD_VAR 0 6
60605: PUSH
60606: LD_INT 2
60608: ARRAY
60609: PUSH
60610: LD_VAR 0 5
60614: ARRAY
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60620: LD_VAR 0 7
60624: PUSH
60625: LD_INT 1
60627: ARRAY
60628: PPUSH
60629: LD_VAR 0 7
60633: PUSH
60634: LD_INT 2
60636: ARRAY
60637: PPUSH
60638: CALL_OW 428
60642: PUSH
60643: LD_INT 0
60645: EQUAL
60646: IFFALSE 60699
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60648: LD_VAR 0 1
60652: PPUSH
60653: LD_VAR 0 7
60657: PUSH
60658: LD_INT 1
60660: ARRAY
60661: PPUSH
60662: LD_VAR 0 7
60666: PUSH
60667: LD_INT 2
60669: ARRAY
60670: PPUSH
60671: LD_VAR 0 3
60675: PPUSH
60676: CALL_OW 48
// result := IsPlaced ( unit ) ;
60680: LD_ADDR_VAR 0 4
60684: PUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 305
60694: ST_TO_ADDR
// exit ;
60695: POP
60696: POP
60697: GO 60703
// end ; end ;
60699: GO 60578
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 4
60707: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60708: LD_INT 0
60710: PPUSH
60711: PPUSH
60712: PPUSH
// if not side or side > 8 then
60713: LD_VAR 0 1
60717: NOT
60718: PUSH
60719: LD_VAR 0 1
60723: PUSH
60724: LD_INT 8
60726: GREATER
60727: OR
60728: IFFALSE 60732
// exit ;
60730: GO 60919
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60732: LD_ADDR_VAR 0 4
60736: PUSH
60737: LD_INT 22
60739: PUSH
60740: LD_VAR 0 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 21
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PPUSH
60763: CALL_OW 69
60767: ST_TO_ADDR
// if not tmp then
60768: LD_VAR 0 4
60772: NOT
60773: IFFALSE 60777
// exit ;
60775: GO 60919
// enable_addtolog := true ;
60777: LD_ADDR_OWVAR 81
60781: PUSH
60782: LD_INT 1
60784: ST_TO_ADDR
// AddToLog ( [ ) ;
60785: LD_STRING [
60787: PPUSH
60788: CALL_OW 561
// for i in tmp do
60792: LD_ADDR_VAR 0 3
60796: PUSH
60797: LD_VAR 0 4
60801: PUSH
60802: FOR_IN
60803: IFFALSE 60910
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60805: LD_STRING [
60807: PUSH
60808: LD_VAR 0 3
60812: PPUSH
60813: CALL_OW 266
60817: STR
60818: PUSH
60819: LD_STRING , 
60821: STR
60822: PUSH
60823: LD_VAR 0 3
60827: PPUSH
60828: CALL_OW 250
60832: STR
60833: PUSH
60834: LD_STRING , 
60836: STR
60837: PUSH
60838: LD_VAR 0 3
60842: PPUSH
60843: CALL_OW 251
60847: STR
60848: PUSH
60849: LD_STRING , 
60851: STR
60852: PUSH
60853: LD_VAR 0 3
60857: PPUSH
60858: CALL_OW 254
60862: STR
60863: PUSH
60864: LD_STRING , 
60866: STR
60867: PUSH
60868: LD_VAR 0 3
60872: PPUSH
60873: LD_INT 1
60875: PPUSH
60876: CALL_OW 268
60880: STR
60881: PUSH
60882: LD_STRING , 
60884: STR
60885: PUSH
60886: LD_VAR 0 3
60890: PPUSH
60891: LD_INT 2
60893: PPUSH
60894: CALL_OW 268
60898: STR
60899: PUSH
60900: LD_STRING ],
60902: STR
60903: PPUSH
60904: CALL_OW 561
// end ;
60908: GO 60802
60910: POP
60911: POP
// AddToLog ( ]; ) ;
60912: LD_STRING ];
60914: PPUSH
60915: CALL_OW 561
// end ;
60919: LD_VAR 0 2
60923: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60924: LD_INT 0
60926: PPUSH
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
// if not area or not rate or not max then
60931: LD_VAR 0 1
60935: NOT
60936: PUSH
60937: LD_VAR 0 2
60941: NOT
60942: OR
60943: PUSH
60944: LD_VAR 0 4
60948: NOT
60949: OR
60950: IFFALSE 60954
// exit ;
60952: GO 61146
// while 1 do
60954: LD_INT 1
60956: IFFALSE 61146
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60958: LD_ADDR_VAR 0 9
60962: PUSH
60963: LD_VAR 0 1
60967: PPUSH
60968: LD_INT 1
60970: PPUSH
60971: CALL_OW 287
60975: PUSH
60976: LD_INT 10
60978: MUL
60979: ST_TO_ADDR
// r := rate / 10 ;
60980: LD_ADDR_VAR 0 7
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 10
60992: DIVREAL
60993: ST_TO_ADDR
// time := 1 1$00 ;
60994: LD_ADDR_VAR 0 8
60998: PUSH
60999: LD_INT 2100
61001: ST_TO_ADDR
// if amount < min then
61002: LD_VAR 0 9
61006: PUSH
61007: LD_VAR 0 3
61011: LESS
61012: IFFALSE 61030
// r := r * 2 else
61014: LD_ADDR_VAR 0 7
61018: PUSH
61019: LD_VAR 0 7
61023: PUSH
61024: LD_INT 2
61026: MUL
61027: ST_TO_ADDR
61028: GO 61056
// if amount > max then
61030: LD_VAR 0 9
61034: PUSH
61035: LD_VAR 0 4
61039: GREATER
61040: IFFALSE 61056
// r := r / 2 ;
61042: LD_ADDR_VAR 0 7
61046: PUSH
61047: LD_VAR 0 7
61051: PUSH
61052: LD_INT 2
61054: DIVREAL
61055: ST_TO_ADDR
// time := time / r ;
61056: LD_ADDR_VAR 0 8
61060: PUSH
61061: LD_VAR 0 8
61065: PUSH
61066: LD_VAR 0 7
61070: DIVREAL
61071: ST_TO_ADDR
// if time < 0 then
61072: LD_VAR 0 8
61076: PUSH
61077: LD_INT 0
61079: LESS
61080: IFFALSE 61097
// time := time * - 1 ;
61082: LD_ADDR_VAR 0 8
61086: PUSH
61087: LD_VAR 0 8
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: MUL
61096: ST_TO_ADDR
// wait ( time ) ;
61097: LD_VAR 0 8
61101: PPUSH
61102: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61106: LD_INT 35
61108: PPUSH
61109: LD_INT 875
61111: PPUSH
61112: CALL_OW 12
61116: PPUSH
61117: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61121: LD_INT 1
61123: PPUSH
61124: LD_INT 5
61126: PPUSH
61127: CALL_OW 12
61131: PPUSH
61132: LD_VAR 0 1
61136: PPUSH
61137: LD_INT 1
61139: PPUSH
61140: CALL_OW 55
// end ;
61144: GO 60954
// end ;
61146: LD_VAR 0 5
61150: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61151: LD_INT 0
61153: PPUSH
61154: PPUSH
61155: PPUSH
61156: PPUSH
61157: PPUSH
61158: PPUSH
61159: PPUSH
61160: PPUSH
// if not turrets or not factories then
61161: LD_VAR 0 1
61165: NOT
61166: PUSH
61167: LD_VAR 0 2
61171: NOT
61172: OR
61173: IFFALSE 61177
// exit ;
61175: GO 61484
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61177: LD_ADDR_VAR 0 10
61181: PUSH
61182: LD_INT 5
61184: PUSH
61185: LD_INT 6
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 5
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 24
61219: PUSH
61220: LD_INT 25
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 23
61229: PUSH
61230: LD_INT 27
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 42
61243: PUSH
61244: LD_INT 43
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 44
61253: PUSH
61254: LD_INT 46
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 45
61263: PUSH
61264: LD_INT 47
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: ST_TO_ADDR
// result := [ ] ;
61281: LD_ADDR_VAR 0 3
61285: PUSH
61286: EMPTY
61287: ST_TO_ADDR
// for i in turrets do
61288: LD_ADDR_VAR 0 4
61292: PUSH
61293: LD_VAR 0 1
61297: PUSH
61298: FOR_IN
61299: IFFALSE 61482
// begin nat := GetNation ( i ) ;
61301: LD_ADDR_VAR 0 7
61305: PUSH
61306: LD_VAR 0 4
61310: PPUSH
61311: CALL_OW 248
61315: ST_TO_ADDR
// weapon := 0 ;
61316: LD_ADDR_VAR 0 8
61320: PUSH
61321: LD_INT 0
61323: ST_TO_ADDR
// if not nat then
61324: LD_VAR 0 7
61328: NOT
61329: IFFALSE 61333
// continue ;
61331: GO 61298
// for j in list [ nat ] do
61333: LD_ADDR_VAR 0 5
61337: PUSH
61338: LD_VAR 0 10
61342: PUSH
61343: LD_VAR 0 7
61347: ARRAY
61348: PUSH
61349: FOR_IN
61350: IFFALSE 61391
// if GetBWeapon ( i ) = j [ 1 ] then
61352: LD_VAR 0 4
61356: PPUSH
61357: CALL_OW 269
61361: PUSH
61362: LD_VAR 0 5
61366: PUSH
61367: LD_INT 1
61369: ARRAY
61370: EQUAL
61371: IFFALSE 61389
// begin weapon := j [ 2 ] ;
61373: LD_ADDR_VAR 0 8
61377: PUSH
61378: LD_VAR 0 5
61382: PUSH
61383: LD_INT 2
61385: ARRAY
61386: ST_TO_ADDR
// break ;
61387: GO 61391
// end ;
61389: GO 61349
61391: POP
61392: POP
// if not weapon then
61393: LD_VAR 0 8
61397: NOT
61398: IFFALSE 61402
// continue ;
61400: GO 61298
// for k in factories do
61402: LD_ADDR_VAR 0 6
61406: PUSH
61407: LD_VAR 0 2
61411: PUSH
61412: FOR_IN
61413: IFFALSE 61478
// begin weapons := AvailableWeaponList ( k ) ;
61415: LD_ADDR_VAR 0 9
61419: PUSH
61420: LD_VAR 0 6
61424: PPUSH
61425: CALL_OW 478
61429: ST_TO_ADDR
// if not weapons then
61430: LD_VAR 0 9
61434: NOT
61435: IFFALSE 61439
// continue ;
61437: GO 61412
// if weapon in weapons then
61439: LD_VAR 0 8
61443: PUSH
61444: LD_VAR 0 9
61448: IN
61449: IFFALSE 61476
// begin result := [ i , weapon ] ;
61451: LD_ADDR_VAR 0 3
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_VAR 0 8
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: ST_TO_ADDR
// exit ;
61470: POP
61471: POP
61472: POP
61473: POP
61474: GO 61484
// end ; end ;
61476: GO 61412
61478: POP
61479: POP
// end ;
61480: GO 61298
61482: POP
61483: POP
// end ;
61484: LD_VAR 0 3
61488: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61489: LD_INT 0
61491: PPUSH
// if not side or side > 8 then
61492: LD_VAR 0 3
61496: NOT
61497: PUSH
61498: LD_VAR 0 3
61502: PUSH
61503: LD_INT 8
61505: GREATER
61506: OR
61507: IFFALSE 61511
// exit ;
61509: GO 61570
// if not range then
61511: LD_VAR 0 4
61515: NOT
61516: IFFALSE 61527
// range := - 12 ;
61518: LD_ADDR_VAR 0 4
61522: PUSH
61523: LD_INT 12
61525: NEG
61526: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61527: LD_VAR 0 1
61531: PPUSH
61532: LD_VAR 0 2
61536: PPUSH
61537: LD_VAR 0 3
61541: PPUSH
61542: LD_VAR 0 4
61546: PPUSH
61547: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61551: LD_VAR 0 1
61555: PPUSH
61556: LD_VAR 0 2
61560: PPUSH
61561: LD_VAR 0 3
61565: PPUSH
61566: CALL_OW 331
// end ;
61570: LD_VAR 0 5
61574: RET
// export function Video ( mode ) ; begin
61575: LD_INT 0
61577: PPUSH
// ingame_video = mode ;
61578: LD_ADDR_OWVAR 52
61582: PUSH
61583: LD_VAR 0 1
61587: ST_TO_ADDR
// interface_hidden = mode ;
61588: LD_ADDR_OWVAR 54
61592: PUSH
61593: LD_VAR 0 1
61597: ST_TO_ADDR
// end ;
61598: LD_VAR 0 2
61602: RET
// export function Join ( array , element ) ; begin
61603: LD_INT 0
61605: PPUSH
// result := array ^ element ;
61606: LD_ADDR_VAR 0 3
61610: PUSH
61611: LD_VAR 0 1
61615: PUSH
61616: LD_VAR 0 2
61620: ADD
61621: ST_TO_ADDR
// end ;
61622: LD_VAR 0 3
61626: RET
// export function JoinUnion ( array , element ) ; begin
61627: LD_INT 0
61629: PPUSH
// result := array union element ;
61630: LD_ADDR_VAR 0 3
61634: PUSH
61635: LD_VAR 0 1
61639: PUSH
61640: LD_VAR 0 2
61644: UNION
61645: ST_TO_ADDR
// end ;
61646: LD_VAR 0 3
61650: RET
// export function GetBehemoths ( side ) ; begin
61651: LD_INT 0
61653: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61654: LD_ADDR_VAR 0 2
61658: PUSH
61659: LD_INT 22
61661: PUSH
61662: LD_VAR 0 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 31
61673: PUSH
61674: LD_INT 25
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PPUSH
61685: CALL_OW 69
61689: ST_TO_ADDR
// end ;
61690: LD_VAR 0 2
61694: RET
// export function Shuffle ( array ) ; var i , index ; begin
61695: LD_INT 0
61697: PPUSH
61698: PPUSH
61699: PPUSH
// result := [ ] ;
61700: LD_ADDR_VAR 0 2
61704: PUSH
61705: EMPTY
61706: ST_TO_ADDR
// if not array then
61707: LD_VAR 0 1
61711: NOT
61712: IFFALSE 61716
// exit ;
61714: GO 61815
// Randomize ;
61716: CALL_OW 10
// for i = array downto 1 do
61720: LD_ADDR_VAR 0 3
61724: PUSH
61725: DOUBLE
61726: LD_VAR 0 1
61730: INC
61731: ST_TO_ADDR
61732: LD_INT 1
61734: PUSH
61735: FOR_DOWNTO
61736: IFFALSE 61813
// begin index := rand ( 1 , array ) ;
61738: LD_ADDR_VAR 0 4
61742: PUSH
61743: LD_INT 1
61745: PPUSH
61746: LD_VAR 0 1
61750: PPUSH
61751: CALL_OW 12
61755: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61756: LD_ADDR_VAR 0 2
61760: PUSH
61761: LD_VAR 0 2
61765: PPUSH
61766: LD_VAR 0 2
61770: PUSH
61771: LD_INT 1
61773: PLUS
61774: PPUSH
61775: LD_VAR 0 1
61779: PUSH
61780: LD_VAR 0 4
61784: ARRAY
61785: PPUSH
61786: CALL_OW 2
61790: ST_TO_ADDR
// array := Delete ( array , index ) ;
61791: LD_ADDR_VAR 0 1
61795: PUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: LD_VAR 0 4
61805: PPUSH
61806: CALL_OW 3
61810: ST_TO_ADDR
// end ;
61811: GO 61735
61813: POP
61814: POP
// end ; end_of_file
61815: LD_VAR 0 2
61819: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61820: GO 61822
61822: DISABLE
// begin ru_radar := 98 ;
61823: LD_ADDR_EXP 29
61827: PUSH
61828: LD_INT 98
61830: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61831: LD_ADDR_EXP 30
61835: PUSH
61836: LD_INT 89
61838: ST_TO_ADDR
// us_hack := 99 ;
61839: LD_ADDR_EXP 31
61843: PUSH
61844: LD_INT 99
61846: ST_TO_ADDR
// us_artillery := 97 ;
61847: LD_ADDR_EXP 32
61851: PUSH
61852: LD_INT 97
61854: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61855: LD_ADDR_EXP 33
61859: PUSH
61860: LD_INT 91
61862: ST_TO_ADDR
// end ; end_of_file
61863: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61864: LD_INT 0
61866: PPUSH
61867: PPUSH
// skirmish := false ;
61868: LD_ADDR_EXP 34
61872: PUSH
61873: LD_INT 0
61875: ST_TO_ADDR
// debug_mc := false ;
61876: LD_ADDR_EXP 35
61880: PUSH
61881: LD_INT 0
61883: ST_TO_ADDR
// mc_bases := [ ] ;
61884: LD_ADDR_EXP 36
61888: PUSH
61889: EMPTY
61890: ST_TO_ADDR
// mc_sides := [ ] ;
61891: LD_ADDR_EXP 62
61895: PUSH
61896: EMPTY
61897: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61898: LD_ADDR_EXP 37
61902: PUSH
61903: EMPTY
61904: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61905: LD_ADDR_EXP 38
61909: PUSH
61910: EMPTY
61911: ST_TO_ADDR
// mc_need_heal := [ ] ;
61912: LD_ADDR_EXP 39
61916: PUSH
61917: EMPTY
61918: ST_TO_ADDR
// mc_healers := [ ] ;
61919: LD_ADDR_EXP 40
61923: PUSH
61924: EMPTY
61925: ST_TO_ADDR
// mc_build_list := [ ] ;
61926: LD_ADDR_EXP 41
61930: PUSH
61931: EMPTY
61932: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
61933: LD_ADDR_EXP 68
61937: PUSH
61938: EMPTY
61939: ST_TO_ADDR
// mc_builders := [ ] ;
61940: LD_ADDR_EXP 42
61944: PUSH
61945: EMPTY
61946: ST_TO_ADDR
// mc_construct_list := [ ] ;
61947: LD_ADDR_EXP 43
61951: PUSH
61952: EMPTY
61953: ST_TO_ADDR
// mc_turret_list := [ ] ;
61954: LD_ADDR_EXP 44
61958: PUSH
61959: EMPTY
61960: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
61961: LD_ADDR_EXP 45
61965: PUSH
61966: EMPTY
61967: ST_TO_ADDR
// mc_miners := [ ] ;
61968: LD_ADDR_EXP 50
61972: PUSH
61973: EMPTY
61974: ST_TO_ADDR
// mc_mines := [ ] ;
61975: LD_ADDR_EXP 49
61979: PUSH
61980: EMPTY
61981: ST_TO_ADDR
// mc_minefields := [ ] ;
61982: LD_ADDR_EXP 51
61986: PUSH
61987: EMPTY
61988: ST_TO_ADDR
// mc_crates := [ ] ;
61989: LD_ADDR_EXP 52
61993: PUSH
61994: EMPTY
61995: ST_TO_ADDR
// mc_crates_collector := [ ] ;
61996: LD_ADDR_EXP 53
62000: PUSH
62001: EMPTY
62002: ST_TO_ADDR
// mc_crates_area := [ ] ;
62003: LD_ADDR_EXP 54
62007: PUSH
62008: EMPTY
62009: ST_TO_ADDR
// mc_vehicles := [ ] ;
62010: LD_ADDR_EXP 55
62014: PUSH
62015: EMPTY
62016: ST_TO_ADDR
// mc_attack := [ ] ;
62017: LD_ADDR_EXP 56
62021: PUSH
62022: EMPTY
62023: ST_TO_ADDR
// mc_produce := [ ] ;
62024: LD_ADDR_EXP 57
62028: PUSH
62029: EMPTY
62030: ST_TO_ADDR
// mc_defender := [ ] ;
62031: LD_ADDR_EXP 58
62035: PUSH
62036: EMPTY
62037: ST_TO_ADDR
// mc_parking := [ ] ;
62038: LD_ADDR_EXP 60
62042: PUSH
62043: EMPTY
62044: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62045: LD_ADDR_EXP 46
62049: PUSH
62050: EMPTY
62051: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62052: LD_ADDR_EXP 48
62056: PUSH
62057: EMPTY
62058: ST_TO_ADDR
// mc_scan := [ ] ;
62059: LD_ADDR_EXP 59
62063: PUSH
62064: EMPTY
62065: ST_TO_ADDR
// mc_scan_area := [ ] ;
62066: LD_ADDR_EXP 61
62070: PUSH
62071: EMPTY
62072: ST_TO_ADDR
// mc_tech := [ ] ;
62073: LD_ADDR_EXP 63
62077: PUSH
62078: EMPTY
62079: ST_TO_ADDR
// mc_class := [ ] ;
62080: LD_ADDR_EXP 77
62084: PUSH
62085: EMPTY
62086: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62087: LD_ADDR_EXP 78
62091: PUSH
62092: EMPTY
62093: ST_TO_ADDR
// end ;
62094: LD_VAR 0 1
62098: RET
// export function MC_Kill ( base ) ; begin
62099: LD_INT 0
62101: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62102: LD_ADDR_EXP 36
62106: PUSH
62107: LD_EXP 36
62111: PPUSH
62112: LD_VAR 0 1
62116: PPUSH
62117: EMPTY
62118: PPUSH
62119: CALL_OW 1
62123: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62124: LD_ADDR_EXP 37
62128: PUSH
62129: LD_EXP 37
62133: PPUSH
62134: LD_VAR 0 1
62138: PPUSH
62139: EMPTY
62140: PPUSH
62141: CALL_OW 1
62145: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62146: LD_ADDR_EXP 38
62150: PUSH
62151: LD_EXP 38
62155: PPUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: EMPTY
62162: PPUSH
62163: CALL_OW 1
62167: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62168: LD_ADDR_EXP 39
62172: PUSH
62173: LD_EXP 39
62177: PPUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: EMPTY
62184: PPUSH
62185: CALL_OW 1
62189: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62190: LD_ADDR_EXP 40
62194: PUSH
62195: LD_EXP 40
62199: PPUSH
62200: LD_VAR 0 1
62204: PPUSH
62205: EMPTY
62206: PPUSH
62207: CALL_OW 1
62211: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62212: LD_ADDR_EXP 41
62216: PUSH
62217: LD_EXP 41
62221: PPUSH
62222: LD_VAR 0 1
62226: PPUSH
62227: EMPTY
62228: PPUSH
62229: CALL_OW 1
62233: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62234: LD_ADDR_EXP 42
62238: PUSH
62239: LD_EXP 42
62243: PPUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: EMPTY
62250: PPUSH
62251: CALL_OW 1
62255: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62256: LD_ADDR_EXP 43
62260: PUSH
62261: LD_EXP 43
62265: PPUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: EMPTY
62272: PPUSH
62273: CALL_OW 1
62277: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62278: LD_ADDR_EXP 44
62282: PUSH
62283: LD_EXP 44
62287: PPUSH
62288: LD_VAR 0 1
62292: PPUSH
62293: EMPTY
62294: PPUSH
62295: CALL_OW 1
62299: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62300: LD_ADDR_EXP 45
62304: PUSH
62305: LD_EXP 45
62309: PPUSH
62310: LD_VAR 0 1
62314: PPUSH
62315: EMPTY
62316: PPUSH
62317: CALL_OW 1
62321: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62322: LD_ADDR_EXP 46
62326: PUSH
62327: LD_EXP 46
62331: PPUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: EMPTY
62338: PPUSH
62339: CALL_OW 1
62343: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62344: LD_ADDR_EXP 47
62348: PUSH
62349: LD_EXP 47
62353: PPUSH
62354: LD_VAR 0 1
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: CALL_OW 1
62366: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62367: LD_ADDR_EXP 48
62371: PUSH
62372: LD_EXP 48
62376: PPUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: EMPTY
62383: PPUSH
62384: CALL_OW 1
62388: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62389: LD_ADDR_EXP 49
62393: PUSH
62394: LD_EXP 49
62398: PPUSH
62399: LD_VAR 0 1
62403: PPUSH
62404: EMPTY
62405: PPUSH
62406: CALL_OW 1
62410: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62411: LD_ADDR_EXP 50
62415: PUSH
62416: LD_EXP 50
62420: PPUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: EMPTY
62427: PPUSH
62428: CALL_OW 1
62432: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62433: LD_ADDR_EXP 51
62437: PUSH
62438: LD_EXP 51
62442: PPUSH
62443: LD_VAR 0 1
62447: PPUSH
62448: EMPTY
62449: PPUSH
62450: CALL_OW 1
62454: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62455: LD_ADDR_EXP 52
62459: PUSH
62460: LD_EXP 52
62464: PPUSH
62465: LD_VAR 0 1
62469: PPUSH
62470: EMPTY
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62477: LD_ADDR_EXP 53
62481: PUSH
62482: LD_EXP 53
62486: PPUSH
62487: LD_VAR 0 1
62491: PPUSH
62492: EMPTY
62493: PPUSH
62494: CALL_OW 1
62498: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62499: LD_ADDR_EXP 54
62503: PUSH
62504: LD_EXP 54
62508: PPUSH
62509: LD_VAR 0 1
62513: PPUSH
62514: EMPTY
62515: PPUSH
62516: CALL_OW 1
62520: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62521: LD_ADDR_EXP 55
62525: PUSH
62526: LD_EXP 55
62530: PPUSH
62531: LD_VAR 0 1
62535: PPUSH
62536: EMPTY
62537: PPUSH
62538: CALL_OW 1
62542: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62543: LD_ADDR_EXP 56
62547: PUSH
62548: LD_EXP 56
62552: PPUSH
62553: LD_VAR 0 1
62557: PPUSH
62558: EMPTY
62559: PPUSH
62560: CALL_OW 1
62564: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62565: LD_ADDR_EXP 57
62569: PUSH
62570: LD_EXP 57
62574: PPUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: EMPTY
62581: PPUSH
62582: CALL_OW 1
62586: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62587: LD_ADDR_EXP 58
62591: PUSH
62592: LD_EXP 58
62596: PPUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: EMPTY
62603: PPUSH
62604: CALL_OW 1
62608: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62609: LD_ADDR_EXP 59
62613: PUSH
62614: LD_EXP 59
62618: PPUSH
62619: LD_VAR 0 1
62623: PPUSH
62624: EMPTY
62625: PPUSH
62626: CALL_OW 1
62630: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62631: LD_ADDR_EXP 60
62635: PUSH
62636: LD_EXP 60
62640: PPUSH
62641: LD_VAR 0 1
62645: PPUSH
62646: EMPTY
62647: PPUSH
62648: CALL_OW 1
62652: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62653: LD_ADDR_EXP 61
62657: PUSH
62658: LD_EXP 61
62662: PPUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: EMPTY
62669: PPUSH
62670: CALL_OW 1
62674: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62675: LD_ADDR_EXP 63
62679: PUSH
62680: LD_EXP 63
62684: PPUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: EMPTY
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62697: LD_ADDR_EXP 65
62701: PUSH
62702: LD_EXP 65
62706: PPUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: EMPTY
62713: PPUSH
62714: CALL_OW 1
62718: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62719: LD_ADDR_EXP 66
62723: PUSH
62724: LD_EXP 66
62728: PPUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: EMPTY
62735: PPUSH
62736: CALL_OW 1
62740: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62741: LD_ADDR_EXP 67
62745: PUSH
62746: LD_EXP 67
62750: PPUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: EMPTY
62757: PPUSH
62758: CALL_OW 1
62762: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62763: LD_ADDR_EXP 68
62767: PUSH
62768: LD_EXP 68
62772: PPUSH
62773: LD_VAR 0 1
62777: PPUSH
62778: EMPTY
62779: PPUSH
62780: CALL_OW 1
62784: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62785: LD_ADDR_EXP 69
62789: PUSH
62790: LD_EXP 69
62794: PPUSH
62795: LD_VAR 0 1
62799: PPUSH
62800: EMPTY
62801: PPUSH
62802: CALL_OW 1
62806: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62807: LD_ADDR_EXP 70
62811: PUSH
62812: LD_EXP 70
62816: PPUSH
62817: LD_VAR 0 1
62821: PPUSH
62822: EMPTY
62823: PPUSH
62824: CALL_OW 1
62828: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62829: LD_ADDR_EXP 71
62833: PUSH
62834: LD_EXP 71
62838: PPUSH
62839: LD_VAR 0 1
62843: PPUSH
62844: EMPTY
62845: PPUSH
62846: CALL_OW 1
62850: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62851: LD_ADDR_EXP 72
62855: PUSH
62856: LD_EXP 72
62860: PPUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: EMPTY
62867: PPUSH
62868: CALL_OW 1
62872: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62873: LD_ADDR_EXP 73
62877: PUSH
62878: LD_EXP 73
62882: PPUSH
62883: LD_VAR 0 1
62887: PPUSH
62888: EMPTY
62889: PPUSH
62890: CALL_OW 1
62894: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62895: LD_ADDR_EXP 74
62899: PUSH
62900: LD_EXP 74
62904: PPUSH
62905: LD_VAR 0 1
62909: PPUSH
62910: EMPTY
62911: PPUSH
62912: CALL_OW 1
62916: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62917: LD_ADDR_EXP 75
62921: PUSH
62922: LD_EXP 75
62926: PPUSH
62927: LD_VAR 0 1
62931: PPUSH
62932: EMPTY
62933: PPUSH
62934: CALL_OW 1
62938: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
62939: LD_ADDR_EXP 76
62943: PUSH
62944: LD_EXP 76
62948: PPUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: EMPTY
62955: PPUSH
62956: CALL_OW 1
62960: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
62961: LD_ADDR_EXP 77
62965: PUSH
62966: LD_EXP 77
62970: PPUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: EMPTY
62977: PPUSH
62978: CALL_OW 1
62982: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
62983: LD_ADDR_EXP 78
62987: PUSH
62988: LD_EXP 78
62992: PPUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: LD_INT 0
63000: PPUSH
63001: CALL_OW 1
63005: ST_TO_ADDR
// end ;
63006: LD_VAR 0 2
63010: RET
// export function MC_Add ( side , units ) ; var base ; begin
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
// base := mc_bases + 1 ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_EXP 36
63024: PUSH
63025: LD_INT 1
63027: PLUS
63028: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63029: LD_ADDR_EXP 62
63033: PUSH
63034: LD_EXP 62
63038: PPUSH
63039: LD_VAR 0 4
63043: PPUSH
63044: LD_VAR 0 1
63048: PPUSH
63049: CALL_OW 1
63053: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63054: LD_ADDR_EXP 36
63058: PUSH
63059: LD_EXP 36
63063: PPUSH
63064: LD_VAR 0 4
63068: PPUSH
63069: LD_VAR 0 2
63073: PPUSH
63074: CALL_OW 1
63078: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63079: LD_ADDR_EXP 37
63083: PUSH
63084: LD_EXP 37
63088: PPUSH
63089: LD_VAR 0 4
63093: PPUSH
63094: EMPTY
63095: PPUSH
63096: CALL_OW 1
63100: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63101: LD_ADDR_EXP 38
63105: PUSH
63106: LD_EXP 38
63110: PPUSH
63111: LD_VAR 0 4
63115: PPUSH
63116: EMPTY
63117: PPUSH
63118: CALL_OW 1
63122: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63123: LD_ADDR_EXP 39
63127: PUSH
63128: LD_EXP 39
63132: PPUSH
63133: LD_VAR 0 4
63137: PPUSH
63138: EMPTY
63139: PPUSH
63140: CALL_OW 1
63144: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63145: LD_ADDR_EXP 40
63149: PUSH
63150: LD_EXP 40
63154: PPUSH
63155: LD_VAR 0 4
63159: PPUSH
63160: EMPTY
63161: PPUSH
63162: CALL_OW 1
63166: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63167: LD_ADDR_EXP 41
63171: PUSH
63172: LD_EXP 41
63176: PPUSH
63177: LD_VAR 0 4
63181: PPUSH
63182: EMPTY
63183: PPUSH
63184: CALL_OW 1
63188: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63189: LD_ADDR_EXP 42
63193: PUSH
63194: LD_EXP 42
63198: PPUSH
63199: LD_VAR 0 4
63203: PPUSH
63204: EMPTY
63205: PPUSH
63206: CALL_OW 1
63210: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63211: LD_ADDR_EXP 43
63215: PUSH
63216: LD_EXP 43
63220: PPUSH
63221: LD_VAR 0 4
63225: PPUSH
63226: EMPTY
63227: PPUSH
63228: CALL_OW 1
63232: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63233: LD_ADDR_EXP 44
63237: PUSH
63238: LD_EXP 44
63242: PPUSH
63243: LD_VAR 0 4
63247: PPUSH
63248: EMPTY
63249: PPUSH
63250: CALL_OW 1
63254: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63255: LD_ADDR_EXP 45
63259: PUSH
63260: LD_EXP 45
63264: PPUSH
63265: LD_VAR 0 4
63269: PPUSH
63270: EMPTY
63271: PPUSH
63272: CALL_OW 1
63276: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63277: LD_ADDR_EXP 46
63281: PUSH
63282: LD_EXP 46
63286: PPUSH
63287: LD_VAR 0 4
63291: PPUSH
63292: EMPTY
63293: PPUSH
63294: CALL_OW 1
63298: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63299: LD_ADDR_EXP 47
63303: PUSH
63304: LD_EXP 47
63308: PPUSH
63309: LD_VAR 0 4
63313: PPUSH
63314: LD_INT 0
63316: PPUSH
63317: CALL_OW 1
63321: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63322: LD_ADDR_EXP 48
63326: PUSH
63327: LD_EXP 48
63331: PPUSH
63332: LD_VAR 0 4
63336: PPUSH
63337: EMPTY
63338: PPUSH
63339: CALL_OW 1
63343: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63344: LD_ADDR_EXP 49
63348: PUSH
63349: LD_EXP 49
63353: PPUSH
63354: LD_VAR 0 4
63358: PPUSH
63359: EMPTY
63360: PPUSH
63361: CALL_OW 1
63365: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63366: LD_ADDR_EXP 50
63370: PUSH
63371: LD_EXP 50
63375: PPUSH
63376: LD_VAR 0 4
63380: PPUSH
63381: EMPTY
63382: PPUSH
63383: CALL_OW 1
63387: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63388: LD_ADDR_EXP 51
63392: PUSH
63393: LD_EXP 51
63397: PPUSH
63398: LD_VAR 0 4
63402: PPUSH
63403: EMPTY
63404: PPUSH
63405: CALL_OW 1
63409: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63410: LD_ADDR_EXP 52
63414: PUSH
63415: LD_EXP 52
63419: PPUSH
63420: LD_VAR 0 4
63424: PPUSH
63425: EMPTY
63426: PPUSH
63427: CALL_OW 1
63431: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63432: LD_ADDR_EXP 53
63436: PUSH
63437: LD_EXP 53
63441: PPUSH
63442: LD_VAR 0 4
63446: PPUSH
63447: EMPTY
63448: PPUSH
63449: CALL_OW 1
63453: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63454: LD_ADDR_EXP 54
63458: PUSH
63459: LD_EXP 54
63463: PPUSH
63464: LD_VAR 0 4
63468: PPUSH
63469: EMPTY
63470: PPUSH
63471: CALL_OW 1
63475: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63476: LD_ADDR_EXP 55
63480: PUSH
63481: LD_EXP 55
63485: PPUSH
63486: LD_VAR 0 4
63490: PPUSH
63491: EMPTY
63492: PPUSH
63493: CALL_OW 1
63497: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63498: LD_ADDR_EXP 56
63502: PUSH
63503: LD_EXP 56
63507: PPUSH
63508: LD_VAR 0 4
63512: PPUSH
63513: EMPTY
63514: PPUSH
63515: CALL_OW 1
63519: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63520: LD_ADDR_EXP 57
63524: PUSH
63525: LD_EXP 57
63529: PPUSH
63530: LD_VAR 0 4
63534: PPUSH
63535: EMPTY
63536: PPUSH
63537: CALL_OW 1
63541: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63542: LD_ADDR_EXP 58
63546: PUSH
63547: LD_EXP 58
63551: PPUSH
63552: LD_VAR 0 4
63556: PPUSH
63557: EMPTY
63558: PPUSH
63559: CALL_OW 1
63563: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63564: LD_ADDR_EXP 59
63568: PUSH
63569: LD_EXP 59
63573: PPUSH
63574: LD_VAR 0 4
63578: PPUSH
63579: EMPTY
63580: PPUSH
63581: CALL_OW 1
63585: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63586: LD_ADDR_EXP 60
63590: PUSH
63591: LD_EXP 60
63595: PPUSH
63596: LD_VAR 0 4
63600: PPUSH
63601: EMPTY
63602: PPUSH
63603: CALL_OW 1
63607: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63608: LD_ADDR_EXP 61
63612: PUSH
63613: LD_EXP 61
63617: PPUSH
63618: LD_VAR 0 4
63622: PPUSH
63623: EMPTY
63624: PPUSH
63625: CALL_OW 1
63629: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63630: LD_ADDR_EXP 63
63634: PUSH
63635: LD_EXP 63
63639: PPUSH
63640: LD_VAR 0 4
63644: PPUSH
63645: EMPTY
63646: PPUSH
63647: CALL_OW 1
63651: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63652: LD_ADDR_EXP 65
63656: PUSH
63657: LD_EXP 65
63661: PPUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: EMPTY
63668: PPUSH
63669: CALL_OW 1
63673: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63674: LD_ADDR_EXP 66
63678: PUSH
63679: LD_EXP 66
63683: PPUSH
63684: LD_VAR 0 4
63688: PPUSH
63689: EMPTY
63690: PPUSH
63691: CALL_OW 1
63695: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63696: LD_ADDR_EXP 67
63700: PUSH
63701: LD_EXP 67
63705: PPUSH
63706: LD_VAR 0 4
63710: PPUSH
63711: EMPTY
63712: PPUSH
63713: CALL_OW 1
63717: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63718: LD_ADDR_EXP 68
63722: PUSH
63723: LD_EXP 68
63727: PPUSH
63728: LD_VAR 0 4
63732: PPUSH
63733: EMPTY
63734: PPUSH
63735: CALL_OW 1
63739: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63740: LD_ADDR_EXP 69
63744: PUSH
63745: LD_EXP 69
63749: PPUSH
63750: LD_VAR 0 4
63754: PPUSH
63755: EMPTY
63756: PPUSH
63757: CALL_OW 1
63761: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63762: LD_ADDR_EXP 70
63766: PUSH
63767: LD_EXP 70
63771: PPUSH
63772: LD_VAR 0 4
63776: PPUSH
63777: EMPTY
63778: PPUSH
63779: CALL_OW 1
63783: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63784: LD_ADDR_EXP 71
63788: PUSH
63789: LD_EXP 71
63793: PPUSH
63794: LD_VAR 0 4
63798: PPUSH
63799: EMPTY
63800: PPUSH
63801: CALL_OW 1
63805: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63806: LD_ADDR_EXP 72
63810: PUSH
63811: LD_EXP 72
63815: PPUSH
63816: LD_VAR 0 4
63820: PPUSH
63821: EMPTY
63822: PPUSH
63823: CALL_OW 1
63827: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63828: LD_ADDR_EXP 73
63832: PUSH
63833: LD_EXP 73
63837: PPUSH
63838: LD_VAR 0 4
63842: PPUSH
63843: EMPTY
63844: PPUSH
63845: CALL_OW 1
63849: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63850: LD_ADDR_EXP 74
63854: PUSH
63855: LD_EXP 74
63859: PPUSH
63860: LD_VAR 0 4
63864: PPUSH
63865: EMPTY
63866: PPUSH
63867: CALL_OW 1
63871: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63872: LD_ADDR_EXP 75
63876: PUSH
63877: LD_EXP 75
63881: PPUSH
63882: LD_VAR 0 4
63886: PPUSH
63887: EMPTY
63888: PPUSH
63889: CALL_OW 1
63893: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63894: LD_ADDR_EXP 76
63898: PUSH
63899: LD_EXP 76
63903: PPUSH
63904: LD_VAR 0 4
63908: PPUSH
63909: EMPTY
63910: PPUSH
63911: CALL_OW 1
63915: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63916: LD_ADDR_EXP 77
63920: PUSH
63921: LD_EXP 77
63925: PPUSH
63926: LD_VAR 0 4
63930: PPUSH
63931: EMPTY
63932: PPUSH
63933: CALL_OW 1
63937: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63938: LD_ADDR_EXP 78
63942: PUSH
63943: LD_EXP 78
63947: PPUSH
63948: LD_VAR 0 4
63952: PPUSH
63953: LD_INT 0
63955: PPUSH
63956: CALL_OW 1
63960: ST_TO_ADDR
// result := base ;
63961: LD_ADDR_VAR 0 3
63965: PUSH
63966: LD_VAR 0 4
63970: ST_TO_ADDR
// end ;
63971: LD_VAR 0 3
63975: RET
// export function MC_Start ( ) ; var i ; begin
63976: LD_INT 0
63978: PPUSH
63979: PPUSH
// for i = 1 to mc_bases do
63980: LD_ADDR_VAR 0 2
63984: PUSH
63985: DOUBLE
63986: LD_INT 1
63988: DEC
63989: ST_TO_ADDR
63990: LD_EXP 36
63994: PUSH
63995: FOR_TO
63996: IFFALSE 65073
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
63998: LD_ADDR_EXP 36
64002: PUSH
64003: LD_EXP 36
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: LD_EXP 36
64017: PUSH
64018: LD_VAR 0 2
64022: ARRAY
64023: PUSH
64024: LD_INT 0
64026: DIFF
64027: PPUSH
64028: CALL_OW 1
64032: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64033: LD_ADDR_EXP 37
64037: PUSH
64038: LD_EXP 37
64042: PPUSH
64043: LD_VAR 0 2
64047: PPUSH
64048: EMPTY
64049: PPUSH
64050: CALL_OW 1
64054: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64055: LD_ADDR_EXP 38
64059: PUSH
64060: LD_EXP 38
64064: PPUSH
64065: LD_VAR 0 2
64069: PPUSH
64070: EMPTY
64071: PPUSH
64072: CALL_OW 1
64076: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64077: LD_ADDR_EXP 39
64081: PUSH
64082: LD_EXP 39
64086: PPUSH
64087: LD_VAR 0 2
64091: PPUSH
64092: EMPTY
64093: PPUSH
64094: CALL_OW 1
64098: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64099: LD_ADDR_EXP 40
64103: PUSH
64104: LD_EXP 40
64108: PPUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: EMPTY
64115: PUSH
64116: EMPTY
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PPUSH
64122: CALL_OW 1
64126: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64127: LD_ADDR_EXP 41
64131: PUSH
64132: LD_EXP 41
64136: PPUSH
64137: LD_VAR 0 2
64141: PPUSH
64142: EMPTY
64143: PPUSH
64144: CALL_OW 1
64148: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64149: LD_ADDR_EXP 68
64153: PUSH
64154: LD_EXP 68
64158: PPUSH
64159: LD_VAR 0 2
64163: PPUSH
64164: EMPTY
64165: PPUSH
64166: CALL_OW 1
64170: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64171: LD_ADDR_EXP 42
64175: PUSH
64176: LD_EXP 42
64180: PPUSH
64181: LD_VAR 0 2
64185: PPUSH
64186: EMPTY
64187: PPUSH
64188: CALL_OW 1
64192: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64193: LD_ADDR_EXP 43
64197: PUSH
64198: LD_EXP 43
64202: PPUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: EMPTY
64209: PPUSH
64210: CALL_OW 1
64214: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64215: LD_ADDR_EXP 44
64219: PUSH
64220: LD_EXP 44
64224: PPUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: LD_EXP 36
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PPUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 30
64246: PUSH
64247: LD_INT 32
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 30
64256: PUSH
64257: LD_INT 33
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: PPUSH
64269: CALL_OW 72
64273: PPUSH
64274: CALL_OW 1
64278: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64279: LD_ADDR_EXP 45
64283: PUSH
64284: LD_EXP 45
64288: PPUSH
64289: LD_VAR 0 2
64293: PPUSH
64294: LD_EXP 36
64298: PUSH
64299: LD_VAR 0 2
64303: ARRAY
64304: PPUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 30
64310: PUSH
64311: LD_INT 32
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 30
64320: PUSH
64321: LD_INT 31
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 58
64335: PUSH
64336: EMPTY
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PPUSH
64343: CALL_OW 72
64347: PPUSH
64348: CALL_OW 1
64352: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64353: LD_ADDR_EXP 46
64357: PUSH
64358: LD_EXP 46
64362: PPUSH
64363: LD_VAR 0 2
64367: PPUSH
64368: EMPTY
64369: PPUSH
64370: CALL_OW 1
64374: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64375: LD_ADDR_EXP 50
64379: PUSH
64380: LD_EXP 50
64384: PPUSH
64385: LD_VAR 0 2
64389: PPUSH
64390: EMPTY
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64397: LD_ADDR_EXP 49
64401: PUSH
64402: LD_EXP 49
64406: PPUSH
64407: LD_VAR 0 2
64411: PPUSH
64412: EMPTY
64413: PPUSH
64414: CALL_OW 1
64418: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64419: LD_ADDR_EXP 51
64423: PUSH
64424: LD_EXP 51
64428: PPUSH
64429: LD_VAR 0 2
64433: PPUSH
64434: EMPTY
64435: PPUSH
64436: CALL_OW 1
64440: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64441: LD_ADDR_EXP 52
64445: PUSH
64446: LD_EXP 52
64450: PPUSH
64451: LD_VAR 0 2
64455: PPUSH
64456: EMPTY
64457: PPUSH
64458: CALL_OW 1
64462: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64463: LD_ADDR_EXP 53
64467: PUSH
64468: LD_EXP 53
64472: PPUSH
64473: LD_VAR 0 2
64477: PPUSH
64478: EMPTY
64479: PPUSH
64480: CALL_OW 1
64484: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64485: LD_ADDR_EXP 54
64489: PUSH
64490: LD_EXP 54
64494: PPUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: EMPTY
64501: PPUSH
64502: CALL_OW 1
64506: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64507: LD_ADDR_EXP 55
64511: PUSH
64512: LD_EXP 55
64516: PPUSH
64517: LD_VAR 0 2
64521: PPUSH
64522: EMPTY
64523: PPUSH
64524: CALL_OW 1
64528: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64529: LD_ADDR_EXP 56
64533: PUSH
64534: LD_EXP 56
64538: PPUSH
64539: LD_VAR 0 2
64543: PPUSH
64544: EMPTY
64545: PPUSH
64546: CALL_OW 1
64550: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64551: LD_ADDR_EXP 57
64555: PUSH
64556: LD_EXP 57
64560: PPUSH
64561: LD_VAR 0 2
64565: PPUSH
64566: EMPTY
64567: PPUSH
64568: CALL_OW 1
64572: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64573: LD_ADDR_EXP 58
64577: PUSH
64578: LD_EXP 58
64582: PPUSH
64583: LD_VAR 0 2
64587: PPUSH
64588: EMPTY
64589: PPUSH
64590: CALL_OW 1
64594: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64595: LD_ADDR_EXP 47
64599: PUSH
64600: LD_EXP 47
64604: PPUSH
64605: LD_VAR 0 2
64609: PPUSH
64610: LD_INT 0
64612: PPUSH
64613: CALL_OW 1
64617: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64618: LD_ADDR_EXP 60
64622: PUSH
64623: LD_EXP 60
64627: PPUSH
64628: LD_VAR 0 2
64632: PPUSH
64633: LD_INT 0
64635: PPUSH
64636: CALL_OW 1
64640: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64641: LD_ADDR_EXP 48
64645: PUSH
64646: LD_EXP 48
64650: PPUSH
64651: LD_VAR 0 2
64655: PPUSH
64656: EMPTY
64657: PPUSH
64658: CALL_OW 1
64662: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64663: LD_ADDR_EXP 59
64667: PUSH
64668: LD_EXP 59
64672: PPUSH
64673: LD_VAR 0 2
64677: PPUSH
64678: LD_INT 0
64680: PPUSH
64681: CALL_OW 1
64685: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64686: LD_ADDR_EXP 61
64690: PUSH
64691: LD_EXP 61
64695: PPUSH
64696: LD_VAR 0 2
64700: PPUSH
64701: EMPTY
64702: PPUSH
64703: CALL_OW 1
64707: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64708: LD_ADDR_EXP 64
64712: PUSH
64713: LD_EXP 64
64717: PPUSH
64718: LD_VAR 0 2
64722: PPUSH
64723: LD_INT 0
64725: PPUSH
64726: CALL_OW 1
64730: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64731: LD_ADDR_EXP 65
64735: PUSH
64736: LD_EXP 65
64740: PPUSH
64741: LD_VAR 0 2
64745: PPUSH
64746: EMPTY
64747: PPUSH
64748: CALL_OW 1
64752: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64753: LD_ADDR_EXP 66
64757: PUSH
64758: LD_EXP 66
64762: PPUSH
64763: LD_VAR 0 2
64767: PPUSH
64768: EMPTY
64769: PPUSH
64770: CALL_OW 1
64774: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64775: LD_ADDR_EXP 67
64779: PUSH
64780: LD_EXP 67
64784: PPUSH
64785: LD_VAR 0 2
64789: PPUSH
64790: EMPTY
64791: PPUSH
64792: CALL_OW 1
64796: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64797: LD_ADDR_EXP 69
64801: PUSH
64802: LD_EXP 69
64806: PPUSH
64807: LD_VAR 0 2
64811: PPUSH
64812: LD_EXP 36
64816: PUSH
64817: LD_VAR 0 2
64821: ARRAY
64822: PPUSH
64823: LD_INT 2
64825: PUSH
64826: LD_INT 30
64828: PUSH
64829: LD_INT 6
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 30
64838: PUSH
64839: LD_INT 7
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 30
64848: PUSH
64849: LD_INT 8
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 72
64866: PPUSH
64867: CALL_OW 1
64871: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64872: LD_ADDR_EXP 70
64876: PUSH
64877: LD_EXP 70
64881: PPUSH
64882: LD_VAR 0 2
64886: PPUSH
64887: EMPTY
64888: PPUSH
64889: CALL_OW 1
64893: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64894: LD_ADDR_EXP 71
64898: PUSH
64899: LD_EXP 71
64903: PPUSH
64904: LD_VAR 0 2
64908: PPUSH
64909: EMPTY
64910: PPUSH
64911: CALL_OW 1
64915: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
64916: LD_ADDR_EXP 72
64920: PUSH
64921: LD_EXP 72
64925: PPUSH
64926: LD_VAR 0 2
64930: PPUSH
64931: EMPTY
64932: PPUSH
64933: CALL_OW 1
64937: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
64938: LD_ADDR_EXP 73
64942: PUSH
64943: LD_EXP 73
64947: PPUSH
64948: LD_VAR 0 2
64952: PPUSH
64953: EMPTY
64954: PPUSH
64955: CALL_OW 1
64959: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
64960: LD_ADDR_EXP 74
64964: PUSH
64965: LD_EXP 74
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: EMPTY
64976: PPUSH
64977: CALL_OW 1
64981: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
64982: LD_ADDR_EXP 75
64986: PUSH
64987: LD_EXP 75
64991: PPUSH
64992: LD_VAR 0 2
64996: PPUSH
64997: EMPTY
64998: PPUSH
64999: CALL_OW 1
65003: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65004: LD_ADDR_EXP 76
65008: PUSH
65009: LD_EXP 76
65013: PPUSH
65014: LD_VAR 0 2
65018: PPUSH
65019: EMPTY
65020: PPUSH
65021: CALL_OW 1
65025: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65026: LD_ADDR_EXP 77
65030: PUSH
65031: LD_EXP 77
65035: PPUSH
65036: LD_VAR 0 2
65040: PPUSH
65041: EMPTY
65042: PPUSH
65043: CALL_OW 1
65047: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65048: LD_ADDR_EXP 78
65052: PUSH
65053: LD_EXP 78
65057: PPUSH
65058: LD_VAR 0 2
65062: PPUSH
65063: LD_INT 0
65065: PPUSH
65066: CALL_OW 1
65070: ST_TO_ADDR
// end ;
65071: GO 63995
65073: POP
65074: POP
// MC_InitSides ( ) ;
65075: CALL 65361 0 0
// MC_InitResearch ( ) ;
65079: CALL 65100 0 0
// CustomInitMacro ( ) ;
65083: CALL 1428 0 0
// skirmish := true ;
65087: LD_ADDR_EXP 34
65091: PUSH
65092: LD_INT 1
65094: ST_TO_ADDR
// end ;
65095: LD_VAR 0 1
65099: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65100: LD_INT 0
65102: PPUSH
65103: PPUSH
65104: PPUSH
65105: PPUSH
65106: PPUSH
65107: PPUSH
// if not mc_bases then
65108: LD_EXP 36
65112: NOT
65113: IFFALSE 65117
// exit ;
65115: GO 65356
// for i = 1 to 8 do
65117: LD_ADDR_VAR 0 2
65121: PUSH
65122: DOUBLE
65123: LD_INT 1
65125: DEC
65126: ST_TO_ADDR
65127: LD_INT 8
65129: PUSH
65130: FOR_TO
65131: IFFALSE 65157
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65133: LD_ADDR_EXP 63
65137: PUSH
65138: LD_EXP 63
65142: PPUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: EMPTY
65149: PPUSH
65150: CALL_OW 1
65154: ST_TO_ADDR
65155: GO 65130
65157: POP
65158: POP
// tmp := [ ] ;
65159: LD_ADDR_VAR 0 5
65163: PUSH
65164: EMPTY
65165: ST_TO_ADDR
// for i = 1 to mc_sides do
65166: LD_ADDR_VAR 0 2
65170: PUSH
65171: DOUBLE
65172: LD_INT 1
65174: DEC
65175: ST_TO_ADDR
65176: LD_EXP 62
65180: PUSH
65181: FOR_TO
65182: IFFALSE 65240
// if not mc_sides [ i ] in tmp then
65184: LD_EXP 62
65188: PUSH
65189: LD_VAR 0 2
65193: ARRAY
65194: PUSH
65195: LD_VAR 0 5
65199: IN
65200: NOT
65201: IFFALSE 65238
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65203: LD_ADDR_VAR 0 5
65207: PUSH
65208: LD_VAR 0 5
65212: PPUSH
65213: LD_VAR 0 5
65217: PUSH
65218: LD_INT 1
65220: PLUS
65221: PPUSH
65222: LD_EXP 62
65226: PUSH
65227: LD_VAR 0 2
65231: ARRAY
65232: PPUSH
65233: CALL_OW 2
65237: ST_TO_ADDR
65238: GO 65181
65240: POP
65241: POP
// if not tmp then
65242: LD_VAR 0 5
65246: NOT
65247: IFFALSE 65251
// exit ;
65249: GO 65356
// for j in tmp do
65251: LD_ADDR_VAR 0 3
65255: PUSH
65256: LD_VAR 0 5
65260: PUSH
65261: FOR_IN
65262: IFFALSE 65354
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65264: LD_ADDR_VAR 0 6
65268: PUSH
65269: LD_INT 22
65271: PUSH
65272: LD_VAR 0 3
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PPUSH
65281: CALL_OW 69
65285: ST_TO_ADDR
// if not un then
65286: LD_VAR 0 6
65290: NOT
65291: IFFALSE 65295
// continue ;
65293: GO 65261
// nation := GetNation ( un [ 1 ] ) ;
65295: LD_ADDR_VAR 0 4
65299: PUSH
65300: LD_VAR 0 6
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PPUSH
65309: CALL_OW 248
65313: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65314: LD_ADDR_EXP 63
65318: PUSH
65319: LD_EXP 63
65323: PPUSH
65324: LD_VAR 0 3
65328: PPUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: LD_VAR 0 4
65338: PPUSH
65339: LD_INT 1
65341: PPUSH
65342: CALL 19342 0 3
65346: PPUSH
65347: CALL_OW 1
65351: ST_TO_ADDR
// end ;
65352: GO 65261
65354: POP
65355: POP
// end ;
65356: LD_VAR 0 1
65360: RET
// export function MC_InitSides ( ) ; var i ; begin
65361: LD_INT 0
65363: PPUSH
65364: PPUSH
// if not mc_bases then
65365: LD_EXP 36
65369: NOT
65370: IFFALSE 65374
// exit ;
65372: GO 65448
// for i = 1 to mc_bases do
65374: LD_ADDR_VAR 0 2
65378: PUSH
65379: DOUBLE
65380: LD_INT 1
65382: DEC
65383: ST_TO_ADDR
65384: LD_EXP 36
65388: PUSH
65389: FOR_TO
65390: IFFALSE 65446
// if mc_bases [ i ] then
65392: LD_EXP 36
65396: PUSH
65397: LD_VAR 0 2
65401: ARRAY
65402: IFFALSE 65444
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65404: LD_ADDR_EXP 62
65408: PUSH
65409: LD_EXP 62
65413: PPUSH
65414: LD_VAR 0 2
65418: PPUSH
65419: LD_EXP 36
65423: PUSH
65424: LD_VAR 0 2
65428: ARRAY
65429: PUSH
65430: LD_INT 1
65432: ARRAY
65433: PPUSH
65434: CALL_OW 255
65438: PPUSH
65439: CALL_OW 1
65443: ST_TO_ADDR
65444: GO 65389
65446: POP
65447: POP
// end ;
65448: LD_VAR 0 1
65452: RET
// every 0 0$01 trigger skirmish do
65453: LD_EXP 34
65457: IFFALSE 65611
65459: GO 65461
65461: DISABLE
// begin enable ;
65462: ENABLE
// MC_CheckBuildings ( ) ;
65463: CALL 70100 0 0
// MC_CheckPeopleLife ( ) ;
65467: CALL 70225 0 0
// RaiseSailEvent ( 100 ) ;
65471: LD_INT 100
65473: PPUSH
65474: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65478: LD_INT 103
65480: PPUSH
65481: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65485: LD_INT 104
65487: PPUSH
65488: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65492: LD_INT 105
65494: PPUSH
65495: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65499: LD_INT 106
65501: PPUSH
65502: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65506: LD_INT 107
65508: PPUSH
65509: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65513: LD_INT 108
65515: PPUSH
65516: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65520: LD_INT 109
65522: PPUSH
65523: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65527: LD_INT 110
65529: PPUSH
65530: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65534: LD_INT 111
65536: PPUSH
65537: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65541: LD_INT 112
65543: PPUSH
65544: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65548: LD_INT 113
65550: PPUSH
65551: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65555: LD_INT 120
65557: PPUSH
65558: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65562: LD_INT 121
65564: PPUSH
65565: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65569: LD_INT 122
65571: PPUSH
65572: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65576: LD_INT 123
65578: PPUSH
65579: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65583: LD_INT 124
65585: PPUSH
65586: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65590: LD_INT 125
65592: PPUSH
65593: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65597: LD_INT 126
65599: PPUSH
65600: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65604: LD_INT 200
65606: PPUSH
65607: CALL_OW 427
// end ;
65611: END
// on SailEvent ( event ) do begin if event < 100 then
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 100
65619: LESS
65620: IFFALSE 65631
// CustomEvent ( event ) ;
65622: LD_VAR 0 1
65626: PPUSH
65627: CALL 18541 0 1
// if event = 100 then
65631: LD_VAR 0 1
65635: PUSH
65636: LD_INT 100
65638: EQUAL
65639: IFFALSE 65645
// MC_ClassManager ( ) ;
65641: CALL 66037 0 0
// if event = 101 then
65645: LD_VAR 0 1
65649: PUSH
65650: LD_INT 101
65652: EQUAL
65653: IFFALSE 65659
// MC_RepairBuildings ( ) ;
65655: CALL 70821 0 0
// if event = 102 then
65659: LD_VAR 0 1
65663: PUSH
65664: LD_INT 102
65666: EQUAL
65667: IFFALSE 65673
// MC_Heal ( ) ;
65669: CALL 71227 0 0
// if event = 103 then
65673: LD_VAR 0 1
65677: PUSH
65678: LD_INT 103
65680: EQUAL
65681: IFFALSE 65687
// MC_Build ( ) ;
65683: CALL 71649 0 0
// if event = 104 then
65687: LD_VAR 0 1
65691: PUSH
65692: LD_INT 104
65694: EQUAL
65695: IFFALSE 65701
// MC_TurretWeapon ( ) ;
65697: CALL 73262 0 0
// if event = 105 then
65701: LD_VAR 0 1
65705: PUSH
65706: LD_INT 105
65708: EQUAL
65709: IFFALSE 65715
// MC_BuildUpgrade ( ) ;
65711: CALL 72813 0 0
// if event = 106 then
65715: LD_VAR 0 1
65719: PUSH
65720: LD_INT 106
65722: EQUAL
65723: IFFALSE 65729
// MC_PlantMines ( ) ;
65725: CALL 73692 0 0
// if event = 107 then
65729: LD_VAR 0 1
65733: PUSH
65734: LD_INT 107
65736: EQUAL
65737: IFFALSE 65743
// MC_CollectCrates ( ) ;
65739: CALL 74726 0 0
// if event = 108 then
65743: LD_VAR 0 1
65747: PUSH
65748: LD_INT 108
65750: EQUAL
65751: IFFALSE 65757
// MC_LinkRemoteControl ( ) ;
65753: CALL 76483 0 0
// if event = 109 then
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 109
65764: EQUAL
65765: IFFALSE 65771
// MC_ProduceVehicle ( ) ;
65767: CALL 76664 0 0
// if event = 110 then
65771: LD_VAR 0 1
65775: PUSH
65776: LD_INT 110
65778: EQUAL
65779: IFFALSE 65785
// MC_SendAttack ( ) ;
65781: CALL 77145 0 0
// if event = 111 then
65785: LD_VAR 0 1
65789: PUSH
65790: LD_INT 111
65792: EQUAL
65793: IFFALSE 65799
// MC_Defend ( ) ;
65795: CALL 77253 0 0
// if event = 112 then
65799: LD_VAR 0 1
65803: PUSH
65804: LD_INT 112
65806: EQUAL
65807: IFFALSE 65813
// MC_Research ( ) ;
65809: CALL 77858 0 0
// if event = 113 then
65813: LD_VAR 0 1
65817: PUSH
65818: LD_INT 113
65820: EQUAL
65821: IFFALSE 65827
// MC_MinesTrigger ( ) ;
65823: CALL 78972 0 0
// if event = 120 then
65827: LD_VAR 0 1
65831: PUSH
65832: LD_INT 120
65834: EQUAL
65835: IFFALSE 65841
// MC_RepairVehicle ( ) ;
65837: CALL 79071 0 0
// if event = 121 then
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 121
65848: EQUAL
65849: IFFALSE 65855
// MC_TameApe ( ) ;
65851: CALL 79778 0 0
// if event = 122 then
65855: LD_VAR 0 1
65859: PUSH
65860: LD_INT 122
65862: EQUAL
65863: IFFALSE 65869
// MC_ChangeApeClass ( ) ;
65865: CALL 80607 0 0
// if event = 123 then
65869: LD_VAR 0 1
65873: PUSH
65874: LD_INT 123
65876: EQUAL
65877: IFFALSE 65883
// MC_Bazooka ( ) ;
65879: CALL 81257 0 0
// if event = 124 then
65883: LD_VAR 0 1
65887: PUSH
65888: LD_INT 124
65890: EQUAL
65891: IFFALSE 65897
// MC_TeleportExit ( ) ;
65893: CALL 81455 0 0
// if event = 125 then
65897: LD_VAR 0 1
65901: PUSH
65902: LD_INT 125
65904: EQUAL
65905: IFFALSE 65911
// MC_Deposits ( ) ;
65907: CALL 82102 0 0
// if event = 126 then
65911: LD_VAR 0 1
65915: PUSH
65916: LD_INT 126
65918: EQUAL
65919: IFFALSE 65925
// MC_RemoteDriver ( ) ;
65921: CALL 82727 0 0
// if event = 200 then
65925: LD_VAR 0 1
65929: PUSH
65930: LD_INT 200
65932: EQUAL
65933: IFFALSE 65939
// MC_Idle ( ) ;
65935: CALL 84460 0 0
// end ;
65939: PPOPN 1
65941: END
// export function MC_Reset ( base , tag ) ; var i ; begin
65942: LD_INT 0
65944: PPUSH
65945: PPUSH
// if not mc_bases [ base ] or not tag then
65946: LD_EXP 36
65950: PUSH
65951: LD_VAR 0 1
65955: ARRAY
65956: NOT
65957: PUSH
65958: LD_VAR 0 2
65962: NOT
65963: OR
65964: IFFALSE 65968
// exit ;
65966: GO 66032
// for i in mc_bases [ base ] union mc_ape [ base ] do
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_EXP 36
65977: PUSH
65978: LD_VAR 0 1
65982: ARRAY
65983: PUSH
65984: LD_EXP 65
65988: PUSH
65989: LD_VAR 0 1
65993: ARRAY
65994: UNION
65995: PUSH
65996: FOR_IN
65997: IFFALSE 66030
// if GetTag ( i ) = tag then
65999: LD_VAR 0 4
66003: PPUSH
66004: CALL_OW 110
66008: PUSH
66009: LD_VAR 0 2
66013: EQUAL
66014: IFFALSE 66028
// SetTag ( i , 0 ) ;
66016: LD_VAR 0 4
66020: PPUSH
66021: LD_INT 0
66023: PPUSH
66024: CALL_OW 109
66028: GO 65996
66030: POP
66031: POP
// end ;
66032: LD_VAR 0 3
66036: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66037: LD_INT 0
66039: PPUSH
66040: PPUSH
66041: PPUSH
66042: PPUSH
66043: PPUSH
66044: PPUSH
66045: PPUSH
66046: PPUSH
// if not mc_bases then
66047: LD_EXP 36
66051: NOT
66052: IFFALSE 66056
// exit ;
66054: GO 66514
// for i = 1 to mc_bases do
66056: LD_ADDR_VAR 0 2
66060: PUSH
66061: DOUBLE
66062: LD_INT 1
66064: DEC
66065: ST_TO_ADDR
66066: LD_EXP 36
66070: PUSH
66071: FOR_TO
66072: IFFALSE 66512
// begin tmp := MC_ClassCheckReq ( i ) ;
66074: LD_ADDR_VAR 0 4
66078: PUSH
66079: LD_VAR 0 2
66083: PPUSH
66084: CALL 66519 0 1
66088: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66089: LD_ADDR_EXP 77
66093: PUSH
66094: LD_EXP 77
66098: PPUSH
66099: LD_VAR 0 2
66103: PPUSH
66104: LD_VAR 0 4
66108: PPUSH
66109: CALL_OW 1
66113: ST_TO_ADDR
// if not tmp then
66114: LD_VAR 0 4
66118: NOT
66119: IFFALSE 66123
// continue ;
66121: GO 66071
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66123: LD_ADDR_VAR 0 6
66127: PUSH
66128: LD_EXP 36
66132: PUSH
66133: LD_VAR 0 2
66137: ARRAY
66138: PPUSH
66139: LD_INT 2
66141: PUSH
66142: LD_INT 30
66144: PUSH
66145: LD_INT 4
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 30
66154: PUSH
66155: LD_INT 5
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: PPUSH
66167: CALL_OW 72
66171: PUSH
66172: LD_EXP 36
66176: PUSH
66177: LD_VAR 0 2
66181: ARRAY
66182: PPUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 30
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 30
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: PPUSH
66211: CALL_OW 72
66215: PUSH
66216: LD_EXP 36
66220: PUSH
66221: LD_VAR 0 2
66225: ARRAY
66226: PPUSH
66227: LD_INT 30
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PPUSH
66237: CALL_OW 72
66241: PUSH
66242: LD_EXP 36
66246: PUSH
66247: LD_VAR 0 2
66251: ARRAY
66252: PPUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 30
66258: PUSH
66259: LD_INT 6
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 30
66268: PUSH
66269: LD_INT 7
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 30
66278: PUSH
66279: LD_INT 8
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: PPUSH
66292: CALL_OW 72
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// for j = 1 to 4 do
66303: LD_ADDR_VAR 0 3
66307: PUSH
66308: DOUBLE
66309: LD_INT 1
66311: DEC
66312: ST_TO_ADDR
66313: LD_INT 4
66315: PUSH
66316: FOR_TO
66317: IFFALSE 66508
// begin if not tmp [ j ] then
66319: LD_VAR 0 4
66323: PUSH
66324: LD_VAR 0 3
66328: ARRAY
66329: NOT
66330: IFFALSE 66334
// continue ;
66332: GO 66316
// for p in tmp [ j ] do
66334: LD_ADDR_VAR 0 5
66338: PUSH
66339: LD_VAR 0 4
66343: PUSH
66344: LD_VAR 0 3
66348: ARRAY
66349: PUSH
66350: FOR_IN
66351: IFFALSE 66504
// begin if not b [ j ] then
66353: LD_VAR 0 6
66357: PUSH
66358: LD_VAR 0 3
66362: ARRAY
66363: NOT
66364: IFFALSE 66368
// break ;
66366: GO 66504
// e := 0 ;
66368: LD_ADDR_VAR 0 7
66372: PUSH
66373: LD_INT 0
66375: ST_TO_ADDR
// for k in b [ j ] do
66376: LD_ADDR_VAR 0 8
66380: PUSH
66381: LD_VAR 0 6
66385: PUSH
66386: LD_VAR 0 3
66390: ARRAY
66391: PUSH
66392: FOR_IN
66393: IFFALSE 66420
// if IsNotFull ( k ) then
66395: LD_VAR 0 8
66399: PPUSH
66400: CALL 23331 0 1
66404: IFFALSE 66418
// begin e := k ;
66406: LD_ADDR_VAR 0 7
66410: PUSH
66411: LD_VAR 0 8
66415: ST_TO_ADDR
// break ;
66416: GO 66420
// end ;
66418: GO 66392
66420: POP
66421: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66422: LD_VAR 0 7
66426: PUSH
66427: LD_VAR 0 5
66431: PPUSH
66432: LD_VAR 0 7
66436: PPUSH
66437: CALL 60365 0 2
66441: NOT
66442: AND
66443: IFFALSE 66502
// begin if IsInUnit ( p ) then
66445: LD_VAR 0 5
66449: PPUSH
66450: CALL_OW 310
66454: IFFALSE 66465
// ComExitBuilding ( p ) ;
66456: LD_VAR 0 5
66460: PPUSH
66461: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66465: LD_VAR 0 5
66469: PPUSH
66470: LD_VAR 0 7
66474: PPUSH
66475: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66479: LD_VAR 0 5
66483: PPUSH
66484: LD_VAR 0 3
66488: PPUSH
66489: CALL_OW 183
// AddComExitBuilding ( p ) ;
66493: LD_VAR 0 5
66497: PPUSH
66498: CALL_OW 182
// end ; end ;
66502: GO 66350
66504: POP
66505: POP
// end ;
66506: GO 66316
66508: POP
66509: POP
// end ;
66510: GO 66071
66512: POP
66513: POP
// end ;
66514: LD_VAR 0 1
66518: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66519: LD_INT 0
66521: PPUSH
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
66528: PPUSH
66529: PPUSH
66530: PPUSH
66531: PPUSH
66532: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66533: LD_VAR 0 1
66537: NOT
66538: PUSH
66539: LD_EXP 36
66543: PUSH
66544: LD_VAR 0 1
66548: ARRAY
66549: NOT
66550: OR
66551: PUSH
66552: LD_EXP 36
66556: PUSH
66557: LD_VAR 0 1
66561: ARRAY
66562: PPUSH
66563: LD_INT 2
66565: PUSH
66566: LD_INT 30
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 30
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: PPUSH
66591: CALL_OW 72
66595: NOT
66596: OR
66597: IFFALSE 66601
// exit ;
66599: GO 70095
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66601: LD_ADDR_VAR 0 4
66605: PUSH
66606: LD_EXP 36
66610: PUSH
66611: LD_VAR 0 1
66615: ARRAY
66616: PPUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 25
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 25
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 25
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 25
66652: PUSH
66653: LD_INT 4
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 25
66662: PUSH
66663: LD_INT 5
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 25
66672: PUSH
66673: LD_INT 8
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 25
66682: PUSH
66683: LD_INT 9
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: PPUSH
66700: CALL_OW 72
66704: ST_TO_ADDR
// for i in tmp do
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: LD_VAR 0 4
66714: PUSH
66715: FOR_IN
66716: IFFALSE 66747
// if GetTag ( i ) then
66718: LD_VAR 0 3
66722: PPUSH
66723: CALL_OW 110
66727: IFFALSE 66745
// tmp := tmp diff i ;
66729: LD_ADDR_VAR 0 4
66733: PUSH
66734: LD_VAR 0 4
66738: PUSH
66739: LD_VAR 0 3
66743: DIFF
66744: ST_TO_ADDR
66745: GO 66715
66747: POP
66748: POP
// if not tmp then
66749: LD_VAR 0 4
66753: NOT
66754: IFFALSE 66758
// exit ;
66756: GO 70095
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66758: LD_ADDR_VAR 0 5
66762: PUSH
66763: LD_EXP 36
66767: PUSH
66768: LD_VAR 0 1
66772: ARRAY
66773: PPUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 25
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 25
66789: PUSH
66790: LD_INT 5
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 25
66799: PUSH
66800: LD_INT 8
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 25
66809: PUSH
66810: LD_INT 9
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: PPUSH
66824: CALL_OW 72
66828: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66829: LD_ADDR_VAR 0 6
66833: PUSH
66834: LD_EXP 36
66838: PUSH
66839: LD_VAR 0 1
66843: ARRAY
66844: PPUSH
66845: LD_INT 25
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PPUSH
66855: CALL_OW 72
66859: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66860: LD_ADDR_VAR 0 7
66864: PUSH
66865: LD_EXP 36
66869: PUSH
66870: LD_VAR 0 1
66874: ARRAY
66875: PPUSH
66876: LD_INT 25
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PPUSH
66886: CALL_OW 72
66890: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66891: LD_ADDR_VAR 0 8
66895: PUSH
66896: LD_EXP 36
66900: PUSH
66901: LD_VAR 0 1
66905: ARRAY
66906: PPUSH
66907: LD_INT 25
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 24
66919: PUSH
66920: LD_INT 251
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PPUSH
66931: CALL_OW 72
66935: ST_TO_ADDR
// if mc_scan [ base ] then
66936: LD_EXP 59
66940: PUSH
66941: LD_VAR 0 1
66945: ARRAY
66946: IFFALSE 67407
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
66948: LD_ADDR_EXP 78
66952: PUSH
66953: LD_EXP 78
66957: PPUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: LD_INT 4
66965: PPUSH
66966: CALL_OW 1
66970: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66971: LD_ADDR_VAR 0 12
66975: PUSH
66976: LD_EXP 36
66980: PUSH
66981: LD_VAR 0 1
66985: ARRAY
66986: PPUSH
66987: LD_INT 2
66989: PUSH
66990: LD_INT 30
66992: PUSH
66993: LD_INT 4
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 30
67002: PUSH
67003: LD_INT 5
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: PPUSH
67015: CALL_OW 72
67019: ST_TO_ADDR
// if not b then
67020: LD_VAR 0 12
67024: NOT
67025: IFFALSE 67029
// exit ;
67027: GO 70095
// p := [ ] ;
67029: LD_ADDR_VAR 0 11
67033: PUSH
67034: EMPTY
67035: ST_TO_ADDR
// if sci >= 2 then
67036: LD_VAR 0 8
67040: PUSH
67041: LD_INT 2
67043: GREATEREQUAL
67044: IFFALSE 67075
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67046: LD_ADDR_VAR 0 8
67050: PUSH
67051: LD_VAR 0 8
67055: PUSH
67056: LD_INT 1
67058: ARRAY
67059: PUSH
67060: LD_VAR 0 8
67064: PUSH
67065: LD_INT 2
67067: ARRAY
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: ST_TO_ADDR
67073: GO 67136
// if sci = 1 then
67075: LD_VAR 0 8
67079: PUSH
67080: LD_INT 1
67082: EQUAL
67083: IFFALSE 67104
// sci := [ sci [ 1 ] ] else
67085: LD_ADDR_VAR 0 8
67089: PUSH
67090: LD_VAR 0 8
67094: PUSH
67095: LD_INT 1
67097: ARRAY
67098: PUSH
67099: EMPTY
67100: LIST
67101: ST_TO_ADDR
67102: GO 67136
// if sci = 0 then
67104: LD_VAR 0 8
67108: PUSH
67109: LD_INT 0
67111: EQUAL
67112: IFFALSE 67136
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67114: LD_ADDR_VAR 0 11
67118: PUSH
67119: LD_VAR 0 4
67123: PPUSH
67124: LD_INT 4
67126: PPUSH
67127: CALL 60228 0 2
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: ST_TO_ADDR
// if eng > 4 then
67136: LD_VAR 0 6
67140: PUSH
67141: LD_INT 4
67143: GREATER
67144: IFFALSE 67190
// for i = eng downto 4 do
67146: LD_ADDR_VAR 0 3
67150: PUSH
67151: DOUBLE
67152: LD_VAR 0 6
67156: INC
67157: ST_TO_ADDR
67158: LD_INT 4
67160: PUSH
67161: FOR_DOWNTO
67162: IFFALSE 67188
// eng := eng diff eng [ i ] ;
67164: LD_ADDR_VAR 0 6
67168: PUSH
67169: LD_VAR 0 6
67173: PUSH
67174: LD_VAR 0 6
67178: PUSH
67179: LD_VAR 0 3
67183: ARRAY
67184: DIFF
67185: ST_TO_ADDR
67186: GO 67161
67188: POP
67189: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67190: LD_ADDR_VAR 0 4
67194: PUSH
67195: LD_VAR 0 4
67199: PUSH
67200: LD_VAR 0 5
67204: PUSH
67205: LD_VAR 0 6
67209: UNION
67210: PUSH
67211: LD_VAR 0 7
67215: UNION
67216: PUSH
67217: LD_VAR 0 8
67221: UNION
67222: DIFF
67223: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67224: LD_ADDR_VAR 0 13
67228: PUSH
67229: LD_EXP 36
67233: PUSH
67234: LD_VAR 0 1
67238: ARRAY
67239: PPUSH
67240: LD_INT 2
67242: PUSH
67243: LD_INT 30
67245: PUSH
67246: LD_INT 32
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 30
67255: PUSH
67256: LD_INT 31
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: PPUSH
67268: CALL_OW 72
67272: PUSH
67273: LD_EXP 36
67277: PUSH
67278: LD_VAR 0 1
67282: ARRAY
67283: PPUSH
67284: LD_INT 2
67286: PUSH
67287: LD_INT 30
67289: PUSH
67290: LD_INT 4
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 30
67299: PUSH
67300: LD_INT 5
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: PPUSH
67312: CALL_OW 72
67316: PUSH
67317: LD_INT 6
67319: MUL
67320: PLUS
67321: ST_TO_ADDR
// if bcount < tmp then
67322: LD_VAR 0 13
67326: PUSH
67327: LD_VAR 0 4
67331: LESS
67332: IFFALSE 67378
// for i = tmp downto bcount do
67334: LD_ADDR_VAR 0 3
67338: PUSH
67339: DOUBLE
67340: LD_VAR 0 4
67344: INC
67345: ST_TO_ADDR
67346: LD_VAR 0 13
67350: PUSH
67351: FOR_DOWNTO
67352: IFFALSE 67376
// tmp := Delete ( tmp , tmp ) ;
67354: LD_ADDR_VAR 0 4
67358: PUSH
67359: LD_VAR 0 4
67363: PPUSH
67364: LD_VAR 0 4
67368: PPUSH
67369: CALL_OW 3
67373: ST_TO_ADDR
67374: GO 67351
67376: POP
67377: POP
// result := [ tmp , 0 , 0 , p ] ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: LD_VAR 0 4
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: LD_VAR 0 11
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// exit ;
67405: GO 70095
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67407: LD_EXP 36
67411: PUSH
67412: LD_VAR 0 1
67416: ARRAY
67417: PPUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 30
67423: PUSH
67424: LD_INT 6
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 30
67433: PUSH
67434: LD_INT 7
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 30
67443: PUSH
67444: LD_INT 8
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: PPUSH
67457: CALL_OW 72
67461: NOT
67462: PUSH
67463: LD_EXP 36
67467: PUSH
67468: LD_VAR 0 1
67472: ARRAY
67473: PPUSH
67474: LD_INT 30
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL_OW 72
67488: NOT
67489: AND
67490: IFFALSE 67562
// begin if eng = tmp then
67492: LD_VAR 0 6
67496: PUSH
67497: LD_VAR 0 4
67501: EQUAL
67502: IFFALSE 67506
// exit ;
67504: GO 70095
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67506: LD_ADDR_EXP 78
67510: PUSH
67511: LD_EXP 78
67515: PPUSH
67516: LD_VAR 0 1
67520: PPUSH
67521: LD_INT 1
67523: PPUSH
67524: CALL_OW 1
67528: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67529: LD_ADDR_VAR 0 2
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: LD_VAR 0 4
67541: PUSH
67542: LD_VAR 0 6
67546: DIFF
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// exit ;
67560: GO 70095
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67562: LD_EXP 63
67566: PUSH
67567: LD_EXP 62
67571: PUSH
67572: LD_VAR 0 1
67576: ARRAY
67577: ARRAY
67578: PUSH
67579: LD_EXP 36
67583: PUSH
67584: LD_VAR 0 1
67588: ARRAY
67589: PPUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 30
67595: PUSH
67596: LD_INT 6
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 30
67605: PUSH
67606: LD_INT 7
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 30
67615: PUSH
67616: LD_INT 8
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: PPUSH
67629: CALL_OW 72
67633: AND
67634: PUSH
67635: LD_EXP 36
67639: PUSH
67640: LD_VAR 0 1
67644: ARRAY
67645: PPUSH
67646: LD_INT 30
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PPUSH
67656: CALL_OW 72
67660: NOT
67661: AND
67662: IFFALSE 67876
// begin if sci >= 6 then
67664: LD_VAR 0 8
67668: PUSH
67669: LD_INT 6
67671: GREATEREQUAL
67672: IFFALSE 67676
// exit ;
67674: GO 70095
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67676: LD_ADDR_EXP 78
67680: PUSH
67681: LD_EXP 78
67685: PPUSH
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_INT 2
67693: PPUSH
67694: CALL_OW 1
67698: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67699: LD_ADDR_VAR 0 9
67703: PUSH
67704: LD_VAR 0 4
67708: PUSH
67709: LD_VAR 0 8
67713: DIFF
67714: PPUSH
67715: LD_INT 4
67717: PPUSH
67718: CALL 60228 0 2
67722: ST_TO_ADDR
// p := [ ] ;
67723: LD_ADDR_VAR 0 11
67727: PUSH
67728: EMPTY
67729: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67730: LD_VAR 0 8
67734: PUSH
67735: LD_INT 6
67737: LESS
67738: PUSH
67739: LD_VAR 0 9
67743: PUSH
67744: LD_INT 6
67746: GREATER
67747: AND
67748: IFFALSE 67829
// begin for i = 1 to 6 - sci do
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: DOUBLE
67756: LD_INT 1
67758: DEC
67759: ST_TO_ADDR
67760: LD_INT 6
67762: PUSH
67763: LD_VAR 0 8
67767: MINUS
67768: PUSH
67769: FOR_TO
67770: IFFALSE 67825
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67772: LD_ADDR_VAR 0 11
67776: PUSH
67777: LD_VAR 0 11
67781: PPUSH
67782: LD_VAR 0 11
67786: PUSH
67787: LD_INT 1
67789: PLUS
67790: PPUSH
67791: LD_VAR 0 9
67795: PUSH
67796: LD_INT 1
67798: ARRAY
67799: PPUSH
67800: CALL_OW 2
67804: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67805: LD_ADDR_VAR 0 9
67809: PUSH
67810: LD_VAR 0 9
67814: PPUSH
67815: LD_INT 1
67817: PPUSH
67818: CALL_OW 3
67822: ST_TO_ADDR
// end ;
67823: GO 67769
67825: POP
67826: POP
// end else
67827: GO 67849
// if sort then
67829: LD_VAR 0 9
67833: IFFALSE 67849
// p := sort [ 1 ] ;
67835: LD_ADDR_VAR 0 11
67839: PUSH
67840: LD_VAR 0 9
67844: PUSH
67845: LD_INT 1
67847: ARRAY
67848: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67849: LD_ADDR_VAR 0 2
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: LD_VAR 0 11
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: ST_TO_ADDR
// exit ;
67874: GO 70095
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67876: LD_EXP 63
67880: PUSH
67881: LD_EXP 62
67885: PUSH
67886: LD_VAR 0 1
67890: ARRAY
67891: ARRAY
67892: PUSH
67893: LD_EXP 36
67897: PUSH
67898: LD_VAR 0 1
67902: ARRAY
67903: PPUSH
67904: LD_INT 2
67906: PUSH
67907: LD_INT 30
67909: PUSH
67910: LD_INT 6
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 30
67919: PUSH
67920: LD_INT 7
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 30
67929: PUSH
67930: LD_INT 8
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: PPUSH
67943: CALL_OW 72
67947: AND
67948: PUSH
67949: LD_EXP 36
67953: PUSH
67954: LD_VAR 0 1
67958: ARRAY
67959: PPUSH
67960: LD_INT 30
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PPUSH
67970: CALL_OW 72
67974: AND
67975: IFFALSE 68709
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
67977: LD_ADDR_EXP 78
67981: PUSH
67982: LD_EXP 78
67986: PPUSH
67987: LD_VAR 0 1
67991: PPUSH
67992: LD_INT 3
67994: PPUSH
67995: CALL_OW 1
67999: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68000: LD_ADDR_VAR 0 2
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: LD_INT 0
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: ST_TO_ADDR
// if not eng then
68023: LD_VAR 0 6
68027: NOT
68028: IFFALSE 68091
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68030: LD_ADDR_VAR 0 11
68034: PUSH
68035: LD_VAR 0 4
68039: PPUSH
68040: LD_INT 2
68042: PPUSH
68043: CALL 60228 0 2
68047: PUSH
68048: LD_INT 1
68050: ARRAY
68051: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68052: LD_ADDR_VAR 0 2
68056: PUSH
68057: LD_VAR 0 2
68061: PPUSH
68062: LD_INT 2
68064: PPUSH
68065: LD_VAR 0 11
68069: PPUSH
68070: CALL_OW 1
68074: ST_TO_ADDR
// tmp := tmp diff p ;
68075: LD_ADDR_VAR 0 4
68079: PUSH
68080: LD_VAR 0 4
68084: PUSH
68085: LD_VAR 0 11
68089: DIFF
68090: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68091: LD_VAR 0 4
68095: PUSH
68096: LD_VAR 0 8
68100: PUSH
68101: LD_INT 6
68103: LESS
68104: AND
68105: IFFALSE 68293
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68107: LD_ADDR_VAR 0 9
68111: PUSH
68112: LD_VAR 0 4
68116: PUSH
68117: LD_VAR 0 8
68121: PUSH
68122: LD_VAR 0 7
68126: UNION
68127: DIFF
68128: PPUSH
68129: LD_INT 4
68131: PPUSH
68132: CALL 60228 0 2
68136: ST_TO_ADDR
// p := [ ] ;
68137: LD_ADDR_VAR 0 11
68141: PUSH
68142: EMPTY
68143: ST_TO_ADDR
// if sort then
68144: LD_VAR 0 9
68148: IFFALSE 68264
// for i = 1 to 6 - sci do
68150: LD_ADDR_VAR 0 3
68154: PUSH
68155: DOUBLE
68156: LD_INT 1
68158: DEC
68159: ST_TO_ADDR
68160: LD_INT 6
68162: PUSH
68163: LD_VAR 0 8
68167: MINUS
68168: PUSH
68169: FOR_TO
68170: IFFALSE 68262
// begin if i = sort then
68172: LD_VAR 0 3
68176: PUSH
68177: LD_VAR 0 9
68181: EQUAL
68182: IFFALSE 68186
// break ;
68184: GO 68262
// if GetClass ( i ) = 4 then
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 257
68195: PUSH
68196: LD_INT 4
68198: EQUAL
68199: IFFALSE 68203
// continue ;
68201: GO 68169
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68203: LD_ADDR_VAR 0 11
68207: PUSH
68208: LD_VAR 0 11
68212: PPUSH
68213: LD_VAR 0 11
68217: PUSH
68218: LD_INT 1
68220: PLUS
68221: PPUSH
68222: LD_VAR 0 9
68226: PUSH
68227: LD_VAR 0 3
68231: ARRAY
68232: PPUSH
68233: CALL_OW 2
68237: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68238: LD_ADDR_VAR 0 4
68242: PUSH
68243: LD_VAR 0 4
68247: PUSH
68248: LD_VAR 0 9
68252: PUSH
68253: LD_VAR 0 3
68257: ARRAY
68258: DIFF
68259: ST_TO_ADDR
// end ;
68260: GO 68169
68262: POP
68263: POP
// if p then
68264: LD_VAR 0 11
68268: IFFALSE 68293
// result := Replace ( result , 4 , p ) ;
68270: LD_ADDR_VAR 0 2
68274: PUSH
68275: LD_VAR 0 2
68279: PPUSH
68280: LD_INT 4
68282: PPUSH
68283: LD_VAR 0 11
68287: PPUSH
68288: CALL_OW 1
68292: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68293: LD_VAR 0 4
68297: PUSH
68298: LD_VAR 0 7
68302: PUSH
68303: LD_INT 6
68305: LESS
68306: AND
68307: IFFALSE 68495
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68309: LD_ADDR_VAR 0 9
68313: PUSH
68314: LD_VAR 0 4
68318: PUSH
68319: LD_VAR 0 8
68323: PUSH
68324: LD_VAR 0 7
68328: UNION
68329: DIFF
68330: PPUSH
68331: LD_INT 3
68333: PPUSH
68334: CALL 60228 0 2
68338: ST_TO_ADDR
// p := [ ] ;
68339: LD_ADDR_VAR 0 11
68343: PUSH
68344: EMPTY
68345: ST_TO_ADDR
// if sort then
68346: LD_VAR 0 9
68350: IFFALSE 68466
// for i = 1 to 6 - mech do
68352: LD_ADDR_VAR 0 3
68356: PUSH
68357: DOUBLE
68358: LD_INT 1
68360: DEC
68361: ST_TO_ADDR
68362: LD_INT 6
68364: PUSH
68365: LD_VAR 0 7
68369: MINUS
68370: PUSH
68371: FOR_TO
68372: IFFALSE 68464
// begin if i = sort then
68374: LD_VAR 0 3
68378: PUSH
68379: LD_VAR 0 9
68383: EQUAL
68384: IFFALSE 68388
// break ;
68386: GO 68464
// if GetClass ( i ) = 3 then
68388: LD_VAR 0 3
68392: PPUSH
68393: CALL_OW 257
68397: PUSH
68398: LD_INT 3
68400: EQUAL
68401: IFFALSE 68405
// continue ;
68403: GO 68371
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68405: LD_ADDR_VAR 0 11
68409: PUSH
68410: LD_VAR 0 11
68414: PPUSH
68415: LD_VAR 0 11
68419: PUSH
68420: LD_INT 1
68422: PLUS
68423: PPUSH
68424: LD_VAR 0 9
68428: PUSH
68429: LD_VAR 0 3
68433: ARRAY
68434: PPUSH
68435: CALL_OW 2
68439: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68440: LD_ADDR_VAR 0 4
68444: PUSH
68445: LD_VAR 0 4
68449: PUSH
68450: LD_VAR 0 9
68454: PUSH
68455: LD_VAR 0 3
68459: ARRAY
68460: DIFF
68461: ST_TO_ADDR
// end ;
68462: GO 68371
68464: POP
68465: POP
// if p then
68466: LD_VAR 0 11
68470: IFFALSE 68495
// result := Replace ( result , 3 , p ) ;
68472: LD_ADDR_VAR 0 2
68476: PUSH
68477: LD_VAR 0 2
68481: PPUSH
68482: LD_INT 3
68484: PPUSH
68485: LD_VAR 0 11
68489: PPUSH
68490: CALL_OW 1
68494: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68495: LD_VAR 0 4
68499: PUSH
68500: LD_INT 6
68502: GREATER
68503: PUSH
68504: LD_VAR 0 6
68508: PUSH
68509: LD_INT 6
68511: LESS
68512: AND
68513: IFFALSE 68707
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68515: LD_ADDR_VAR 0 9
68519: PUSH
68520: LD_VAR 0 4
68524: PUSH
68525: LD_VAR 0 8
68529: PUSH
68530: LD_VAR 0 7
68534: UNION
68535: PUSH
68536: LD_VAR 0 6
68540: UNION
68541: DIFF
68542: PPUSH
68543: LD_INT 2
68545: PPUSH
68546: CALL 60228 0 2
68550: ST_TO_ADDR
// p := [ ] ;
68551: LD_ADDR_VAR 0 11
68555: PUSH
68556: EMPTY
68557: ST_TO_ADDR
// if sort then
68558: LD_VAR 0 9
68562: IFFALSE 68678
// for i = 1 to 6 - eng do
68564: LD_ADDR_VAR 0 3
68568: PUSH
68569: DOUBLE
68570: LD_INT 1
68572: DEC
68573: ST_TO_ADDR
68574: LD_INT 6
68576: PUSH
68577: LD_VAR 0 6
68581: MINUS
68582: PUSH
68583: FOR_TO
68584: IFFALSE 68676
// begin if i = sort then
68586: LD_VAR 0 3
68590: PUSH
68591: LD_VAR 0 9
68595: EQUAL
68596: IFFALSE 68600
// break ;
68598: GO 68676
// if GetClass ( i ) = 2 then
68600: LD_VAR 0 3
68604: PPUSH
68605: CALL_OW 257
68609: PUSH
68610: LD_INT 2
68612: EQUAL
68613: IFFALSE 68617
// continue ;
68615: GO 68583
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68617: LD_ADDR_VAR 0 11
68621: PUSH
68622: LD_VAR 0 11
68626: PPUSH
68627: LD_VAR 0 11
68631: PUSH
68632: LD_INT 1
68634: PLUS
68635: PPUSH
68636: LD_VAR 0 9
68640: PUSH
68641: LD_VAR 0 3
68645: ARRAY
68646: PPUSH
68647: CALL_OW 2
68651: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68652: LD_ADDR_VAR 0 4
68656: PUSH
68657: LD_VAR 0 4
68661: PUSH
68662: LD_VAR 0 9
68666: PUSH
68667: LD_VAR 0 3
68671: ARRAY
68672: DIFF
68673: ST_TO_ADDR
// end ;
68674: GO 68583
68676: POP
68677: POP
// if p then
68678: LD_VAR 0 11
68682: IFFALSE 68707
// result := Replace ( result , 2 , p ) ;
68684: LD_ADDR_VAR 0 2
68688: PUSH
68689: LD_VAR 0 2
68693: PPUSH
68694: LD_INT 2
68696: PPUSH
68697: LD_VAR 0 11
68701: PPUSH
68702: CALL_OW 1
68706: ST_TO_ADDR
// end ; exit ;
68707: GO 70095
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68709: LD_EXP 63
68713: PUSH
68714: LD_EXP 62
68718: PUSH
68719: LD_VAR 0 1
68723: ARRAY
68724: ARRAY
68725: NOT
68726: PUSH
68727: LD_EXP 36
68731: PUSH
68732: LD_VAR 0 1
68736: ARRAY
68737: PPUSH
68738: LD_INT 30
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PPUSH
68748: CALL_OW 72
68752: AND
68753: PUSH
68754: LD_EXP 41
68758: PUSH
68759: LD_VAR 0 1
68763: ARRAY
68764: AND
68765: IFFALSE 69373
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68767: LD_ADDR_EXP 78
68771: PUSH
68772: LD_EXP 78
68776: PPUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_INT 5
68784: PPUSH
68785: CALL_OW 1
68789: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68790: LD_ADDR_VAR 0 2
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: ST_TO_ADDR
// if sci > 1 then
68813: LD_VAR 0 8
68817: PUSH
68818: LD_INT 1
68820: GREATER
68821: IFFALSE 68849
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68823: LD_ADDR_VAR 0 4
68827: PUSH
68828: LD_VAR 0 4
68832: PUSH
68833: LD_VAR 0 8
68837: PUSH
68838: LD_VAR 0 8
68842: PUSH
68843: LD_INT 1
68845: ARRAY
68846: DIFF
68847: DIFF
68848: ST_TO_ADDR
// if tmp and not sci then
68849: LD_VAR 0 4
68853: PUSH
68854: LD_VAR 0 8
68858: NOT
68859: AND
68860: IFFALSE 68929
// begin sort := SortBySkill ( tmp , 4 ) ;
68862: LD_ADDR_VAR 0 9
68866: PUSH
68867: LD_VAR 0 4
68871: PPUSH
68872: LD_INT 4
68874: PPUSH
68875: CALL 60228 0 2
68879: ST_TO_ADDR
// if sort then
68880: LD_VAR 0 9
68884: IFFALSE 68900
// p := sort [ 1 ] ;
68886: LD_ADDR_VAR 0 11
68890: PUSH
68891: LD_VAR 0 9
68895: PUSH
68896: LD_INT 1
68898: ARRAY
68899: ST_TO_ADDR
// if p then
68900: LD_VAR 0 11
68904: IFFALSE 68929
// result := Replace ( result , 4 , p ) ;
68906: LD_ADDR_VAR 0 2
68910: PUSH
68911: LD_VAR 0 2
68915: PPUSH
68916: LD_INT 4
68918: PPUSH
68919: LD_VAR 0 11
68923: PPUSH
68924: CALL_OW 1
68928: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
68929: LD_ADDR_VAR 0 4
68933: PUSH
68934: LD_VAR 0 4
68938: PUSH
68939: LD_VAR 0 7
68943: DIFF
68944: ST_TO_ADDR
// if tmp and mech < 6 then
68945: LD_VAR 0 4
68949: PUSH
68950: LD_VAR 0 7
68954: PUSH
68955: LD_INT 6
68957: LESS
68958: AND
68959: IFFALSE 69147
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68961: LD_ADDR_VAR 0 9
68965: PUSH
68966: LD_VAR 0 4
68970: PUSH
68971: LD_VAR 0 8
68975: PUSH
68976: LD_VAR 0 7
68980: UNION
68981: DIFF
68982: PPUSH
68983: LD_INT 3
68985: PPUSH
68986: CALL 60228 0 2
68990: ST_TO_ADDR
// p := [ ] ;
68991: LD_ADDR_VAR 0 11
68995: PUSH
68996: EMPTY
68997: ST_TO_ADDR
// if sort then
68998: LD_VAR 0 9
69002: IFFALSE 69118
// for i = 1 to 6 - mech do
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: DOUBLE
69010: LD_INT 1
69012: DEC
69013: ST_TO_ADDR
69014: LD_INT 6
69016: PUSH
69017: LD_VAR 0 7
69021: MINUS
69022: PUSH
69023: FOR_TO
69024: IFFALSE 69116
// begin if i = sort then
69026: LD_VAR 0 3
69030: PUSH
69031: LD_VAR 0 9
69035: EQUAL
69036: IFFALSE 69040
// break ;
69038: GO 69116
// if GetClass ( i ) = 3 then
69040: LD_VAR 0 3
69044: PPUSH
69045: CALL_OW 257
69049: PUSH
69050: LD_INT 3
69052: EQUAL
69053: IFFALSE 69057
// continue ;
69055: GO 69023
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69057: LD_ADDR_VAR 0 11
69061: PUSH
69062: LD_VAR 0 11
69066: PPUSH
69067: LD_VAR 0 11
69071: PUSH
69072: LD_INT 1
69074: PLUS
69075: PPUSH
69076: LD_VAR 0 9
69080: PUSH
69081: LD_VAR 0 3
69085: ARRAY
69086: PPUSH
69087: CALL_OW 2
69091: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69092: LD_ADDR_VAR 0 4
69096: PUSH
69097: LD_VAR 0 4
69101: PUSH
69102: LD_VAR 0 9
69106: PUSH
69107: LD_VAR 0 3
69111: ARRAY
69112: DIFF
69113: ST_TO_ADDR
// end ;
69114: GO 69023
69116: POP
69117: POP
// if p then
69118: LD_VAR 0 11
69122: IFFALSE 69147
// result := Replace ( result , 3 , p ) ;
69124: LD_ADDR_VAR 0 2
69128: PUSH
69129: LD_VAR 0 2
69133: PPUSH
69134: LD_INT 3
69136: PPUSH
69137: LD_VAR 0 11
69141: PPUSH
69142: CALL_OW 1
69146: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69147: LD_ADDR_VAR 0 4
69151: PUSH
69152: LD_VAR 0 4
69156: PUSH
69157: LD_VAR 0 6
69161: DIFF
69162: ST_TO_ADDR
// if tmp and eng < 6 then
69163: LD_VAR 0 4
69167: PUSH
69168: LD_VAR 0 6
69172: PUSH
69173: LD_INT 6
69175: LESS
69176: AND
69177: IFFALSE 69371
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69179: LD_ADDR_VAR 0 9
69183: PUSH
69184: LD_VAR 0 4
69188: PUSH
69189: LD_VAR 0 8
69193: PUSH
69194: LD_VAR 0 7
69198: UNION
69199: PUSH
69200: LD_VAR 0 6
69204: UNION
69205: DIFF
69206: PPUSH
69207: LD_INT 2
69209: PPUSH
69210: CALL 60228 0 2
69214: ST_TO_ADDR
// p := [ ] ;
69215: LD_ADDR_VAR 0 11
69219: PUSH
69220: EMPTY
69221: ST_TO_ADDR
// if sort then
69222: LD_VAR 0 9
69226: IFFALSE 69342
// for i = 1 to 6 - eng do
69228: LD_ADDR_VAR 0 3
69232: PUSH
69233: DOUBLE
69234: LD_INT 1
69236: DEC
69237: ST_TO_ADDR
69238: LD_INT 6
69240: PUSH
69241: LD_VAR 0 6
69245: MINUS
69246: PUSH
69247: FOR_TO
69248: IFFALSE 69340
// begin if i = sort then
69250: LD_VAR 0 3
69254: PUSH
69255: LD_VAR 0 9
69259: EQUAL
69260: IFFALSE 69264
// break ;
69262: GO 69340
// if GetClass ( i ) = 2 then
69264: LD_VAR 0 3
69268: PPUSH
69269: CALL_OW 257
69273: PUSH
69274: LD_INT 2
69276: EQUAL
69277: IFFALSE 69281
// continue ;
69279: GO 69247
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69281: LD_ADDR_VAR 0 11
69285: PUSH
69286: LD_VAR 0 11
69290: PPUSH
69291: LD_VAR 0 11
69295: PUSH
69296: LD_INT 1
69298: PLUS
69299: PPUSH
69300: LD_VAR 0 9
69304: PUSH
69305: LD_VAR 0 3
69309: ARRAY
69310: PPUSH
69311: CALL_OW 2
69315: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69316: LD_ADDR_VAR 0 4
69320: PUSH
69321: LD_VAR 0 4
69325: PUSH
69326: LD_VAR 0 9
69330: PUSH
69331: LD_VAR 0 3
69335: ARRAY
69336: DIFF
69337: ST_TO_ADDR
// end ;
69338: GO 69247
69340: POP
69341: POP
// if p then
69342: LD_VAR 0 11
69346: IFFALSE 69371
// result := Replace ( result , 2 , p ) ;
69348: LD_ADDR_VAR 0 2
69352: PUSH
69353: LD_VAR 0 2
69357: PPUSH
69358: LD_INT 2
69360: PPUSH
69361: LD_VAR 0 11
69365: PPUSH
69366: CALL_OW 1
69370: ST_TO_ADDR
// end ; exit ;
69371: GO 70095
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69373: LD_EXP 63
69377: PUSH
69378: LD_EXP 62
69382: PUSH
69383: LD_VAR 0 1
69387: ARRAY
69388: ARRAY
69389: NOT
69390: PUSH
69391: LD_EXP 36
69395: PUSH
69396: LD_VAR 0 1
69400: ARRAY
69401: PPUSH
69402: LD_INT 30
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PPUSH
69412: CALL_OW 72
69416: AND
69417: PUSH
69418: LD_EXP 41
69422: PUSH
69423: LD_VAR 0 1
69427: ARRAY
69428: NOT
69429: AND
69430: IFFALSE 70095
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69432: LD_ADDR_EXP 78
69436: PUSH
69437: LD_EXP 78
69441: PPUSH
69442: LD_VAR 0 1
69446: PPUSH
69447: LD_INT 6
69449: PPUSH
69450: CALL_OW 1
69454: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69455: LD_ADDR_VAR 0 2
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: ST_TO_ADDR
// if sci >= 1 then
69478: LD_VAR 0 8
69482: PUSH
69483: LD_INT 1
69485: GREATEREQUAL
69486: IFFALSE 69508
// tmp := tmp diff sci [ 1 ] ;
69488: LD_ADDR_VAR 0 4
69492: PUSH
69493: LD_VAR 0 4
69497: PUSH
69498: LD_VAR 0 8
69502: PUSH
69503: LD_INT 1
69505: ARRAY
69506: DIFF
69507: ST_TO_ADDR
// if tmp and not sci then
69508: LD_VAR 0 4
69512: PUSH
69513: LD_VAR 0 8
69517: NOT
69518: AND
69519: IFFALSE 69588
// begin sort := SortBySkill ( tmp , 4 ) ;
69521: LD_ADDR_VAR 0 9
69525: PUSH
69526: LD_VAR 0 4
69530: PPUSH
69531: LD_INT 4
69533: PPUSH
69534: CALL 60228 0 2
69538: ST_TO_ADDR
// if sort then
69539: LD_VAR 0 9
69543: IFFALSE 69559
// p := sort [ 1 ] ;
69545: LD_ADDR_VAR 0 11
69549: PUSH
69550: LD_VAR 0 9
69554: PUSH
69555: LD_INT 1
69557: ARRAY
69558: ST_TO_ADDR
// if p then
69559: LD_VAR 0 11
69563: IFFALSE 69588
// result := Replace ( result , 4 , p ) ;
69565: LD_ADDR_VAR 0 2
69569: PUSH
69570: LD_VAR 0 2
69574: PPUSH
69575: LD_INT 4
69577: PPUSH
69578: LD_VAR 0 11
69582: PPUSH
69583: CALL_OW 1
69587: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69588: LD_ADDR_VAR 0 4
69592: PUSH
69593: LD_VAR 0 4
69597: PUSH
69598: LD_VAR 0 7
69602: DIFF
69603: ST_TO_ADDR
// if tmp and mech < 6 then
69604: LD_VAR 0 4
69608: PUSH
69609: LD_VAR 0 7
69613: PUSH
69614: LD_INT 6
69616: LESS
69617: AND
69618: IFFALSE 69800
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69620: LD_ADDR_VAR 0 9
69624: PUSH
69625: LD_VAR 0 4
69629: PUSH
69630: LD_VAR 0 7
69634: DIFF
69635: PPUSH
69636: LD_INT 3
69638: PPUSH
69639: CALL 60228 0 2
69643: ST_TO_ADDR
// p := [ ] ;
69644: LD_ADDR_VAR 0 11
69648: PUSH
69649: EMPTY
69650: ST_TO_ADDR
// if sort then
69651: LD_VAR 0 9
69655: IFFALSE 69771
// for i = 1 to 6 - mech do
69657: LD_ADDR_VAR 0 3
69661: PUSH
69662: DOUBLE
69663: LD_INT 1
69665: DEC
69666: ST_TO_ADDR
69667: LD_INT 6
69669: PUSH
69670: LD_VAR 0 7
69674: MINUS
69675: PUSH
69676: FOR_TO
69677: IFFALSE 69769
// begin if i = sort then
69679: LD_VAR 0 3
69683: PUSH
69684: LD_VAR 0 9
69688: EQUAL
69689: IFFALSE 69693
// break ;
69691: GO 69769
// if GetClass ( i ) = 3 then
69693: LD_VAR 0 3
69697: PPUSH
69698: CALL_OW 257
69702: PUSH
69703: LD_INT 3
69705: EQUAL
69706: IFFALSE 69710
// continue ;
69708: GO 69676
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69710: LD_ADDR_VAR 0 11
69714: PUSH
69715: LD_VAR 0 11
69719: PPUSH
69720: LD_VAR 0 11
69724: PUSH
69725: LD_INT 1
69727: PLUS
69728: PPUSH
69729: LD_VAR 0 9
69733: PUSH
69734: LD_VAR 0 3
69738: ARRAY
69739: PPUSH
69740: CALL_OW 2
69744: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69745: LD_ADDR_VAR 0 4
69749: PUSH
69750: LD_VAR 0 4
69754: PUSH
69755: LD_VAR 0 9
69759: PUSH
69760: LD_VAR 0 3
69764: ARRAY
69765: DIFF
69766: ST_TO_ADDR
// end ;
69767: GO 69676
69769: POP
69770: POP
// if p then
69771: LD_VAR 0 11
69775: IFFALSE 69800
// result := Replace ( result , 3 , p ) ;
69777: LD_ADDR_VAR 0 2
69781: PUSH
69782: LD_VAR 0 2
69786: PPUSH
69787: LD_INT 3
69789: PPUSH
69790: LD_VAR 0 11
69794: PPUSH
69795: CALL_OW 1
69799: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69800: LD_ADDR_VAR 0 4
69804: PUSH
69805: LD_VAR 0 4
69809: PUSH
69810: LD_VAR 0 6
69814: DIFF
69815: ST_TO_ADDR
// if tmp and eng < 4 then
69816: LD_VAR 0 4
69820: PUSH
69821: LD_VAR 0 6
69825: PUSH
69826: LD_INT 4
69828: LESS
69829: AND
69830: IFFALSE 70020
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69832: LD_ADDR_VAR 0 9
69836: PUSH
69837: LD_VAR 0 4
69841: PUSH
69842: LD_VAR 0 7
69846: PUSH
69847: LD_VAR 0 6
69851: UNION
69852: DIFF
69853: PPUSH
69854: LD_INT 2
69856: PPUSH
69857: CALL 60228 0 2
69861: ST_TO_ADDR
// p := [ ] ;
69862: LD_ADDR_VAR 0 11
69866: PUSH
69867: EMPTY
69868: ST_TO_ADDR
// if sort then
69869: LD_VAR 0 9
69873: IFFALSE 69989
// for i = 1 to 4 - eng do
69875: LD_ADDR_VAR 0 3
69879: PUSH
69880: DOUBLE
69881: LD_INT 1
69883: DEC
69884: ST_TO_ADDR
69885: LD_INT 4
69887: PUSH
69888: LD_VAR 0 6
69892: MINUS
69893: PUSH
69894: FOR_TO
69895: IFFALSE 69987
// begin if i = sort then
69897: LD_VAR 0 3
69901: PUSH
69902: LD_VAR 0 9
69906: EQUAL
69907: IFFALSE 69911
// break ;
69909: GO 69987
// if GetClass ( i ) = 2 then
69911: LD_VAR 0 3
69915: PPUSH
69916: CALL_OW 257
69920: PUSH
69921: LD_INT 2
69923: EQUAL
69924: IFFALSE 69928
// continue ;
69926: GO 69894
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69928: LD_ADDR_VAR 0 11
69932: PUSH
69933: LD_VAR 0 11
69937: PPUSH
69938: LD_VAR 0 11
69942: PUSH
69943: LD_INT 1
69945: PLUS
69946: PPUSH
69947: LD_VAR 0 9
69951: PUSH
69952: LD_VAR 0 3
69956: ARRAY
69957: PPUSH
69958: CALL_OW 2
69962: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69963: LD_ADDR_VAR 0 4
69967: PUSH
69968: LD_VAR 0 4
69972: PUSH
69973: LD_VAR 0 9
69977: PUSH
69978: LD_VAR 0 3
69982: ARRAY
69983: DIFF
69984: ST_TO_ADDR
// end ;
69985: GO 69894
69987: POP
69988: POP
// if p then
69989: LD_VAR 0 11
69993: IFFALSE 70018
// result := Replace ( result , 2 , p ) ;
69995: LD_ADDR_VAR 0 2
69999: PUSH
70000: LD_VAR 0 2
70004: PPUSH
70005: LD_INT 2
70007: PPUSH
70008: LD_VAR 0 11
70012: PPUSH
70013: CALL_OW 1
70017: ST_TO_ADDR
// end else
70018: GO 70064
// for i = eng downto 5 do
70020: LD_ADDR_VAR 0 3
70024: PUSH
70025: DOUBLE
70026: LD_VAR 0 6
70030: INC
70031: ST_TO_ADDR
70032: LD_INT 5
70034: PUSH
70035: FOR_DOWNTO
70036: IFFALSE 70062
// tmp := tmp union eng [ i ] ;
70038: LD_ADDR_VAR 0 4
70042: PUSH
70043: LD_VAR 0 4
70047: PUSH
70048: LD_VAR 0 6
70052: PUSH
70053: LD_VAR 0 3
70057: ARRAY
70058: UNION
70059: ST_TO_ADDR
70060: GO 70035
70062: POP
70063: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70064: LD_ADDR_VAR 0 2
70068: PUSH
70069: LD_VAR 0 2
70073: PPUSH
70074: LD_INT 1
70076: PPUSH
70077: LD_VAR 0 4
70081: PUSH
70082: LD_VAR 0 5
70086: DIFF
70087: PPUSH
70088: CALL_OW 1
70092: ST_TO_ADDR
// exit ;
70093: GO 70095
// end ; end ;
70095: LD_VAR 0 2
70099: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70100: LD_INT 0
70102: PPUSH
70103: PPUSH
70104: PPUSH
// if not mc_bases then
70105: LD_EXP 36
70109: NOT
70110: IFFALSE 70114
// exit ;
70112: GO 70220
// for i = 1 to mc_bases do
70114: LD_ADDR_VAR 0 2
70118: PUSH
70119: DOUBLE
70120: LD_INT 1
70122: DEC
70123: ST_TO_ADDR
70124: LD_EXP 36
70128: PUSH
70129: FOR_TO
70130: IFFALSE 70211
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70132: LD_ADDR_VAR 0 3
70136: PUSH
70137: LD_EXP 36
70141: PUSH
70142: LD_VAR 0 2
70146: ARRAY
70147: PPUSH
70148: LD_INT 21
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 3
70160: PUSH
70161: LD_INT 24
70163: PUSH
70164: LD_INT 1000
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PPUSH
70179: CALL_OW 72
70183: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70184: LD_ADDR_EXP 37
70188: PUSH
70189: LD_EXP 37
70193: PPUSH
70194: LD_VAR 0 2
70198: PPUSH
70199: LD_VAR 0 3
70203: PPUSH
70204: CALL_OW 1
70208: ST_TO_ADDR
// end ;
70209: GO 70129
70211: POP
70212: POP
// RaiseSailEvent ( 101 ) ;
70213: LD_INT 101
70215: PPUSH
70216: CALL_OW 427
// end ;
70220: LD_VAR 0 1
70224: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70225: LD_INT 0
70227: PPUSH
70228: PPUSH
70229: PPUSH
70230: PPUSH
70231: PPUSH
70232: PPUSH
70233: PPUSH
// if not mc_bases then
70234: LD_EXP 36
70238: NOT
70239: IFFALSE 70243
// exit ;
70241: GO 70816
// for i = 1 to mc_bases do
70243: LD_ADDR_VAR 0 2
70247: PUSH
70248: DOUBLE
70249: LD_INT 1
70251: DEC
70252: ST_TO_ADDR
70253: LD_EXP 36
70257: PUSH
70258: FOR_TO
70259: IFFALSE 70807
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70261: LD_ADDR_VAR 0 5
70265: PUSH
70266: LD_EXP 36
70270: PUSH
70271: LD_VAR 0 2
70275: ARRAY
70276: PUSH
70277: LD_EXP 65
70281: PUSH
70282: LD_VAR 0 2
70286: ARRAY
70287: UNION
70288: PPUSH
70289: LD_INT 21
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: LD_INT 54
70307: PUSH
70308: EMPTY
70309: LIST
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 3
70317: PUSH
70318: LD_INT 24
70320: PUSH
70321: LD_INT 800
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 72
70345: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70346: LD_ADDR_VAR 0 6
70350: PUSH
70351: LD_EXP 36
70355: PUSH
70356: LD_VAR 0 2
70360: ARRAY
70361: PPUSH
70362: LD_INT 21
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: LD_INT 54
70380: PUSH
70381: EMPTY
70382: LIST
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: LD_INT 24
70393: PUSH
70394: LD_INT 250
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: LIST
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PPUSH
70414: CALL_OW 72
70418: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70419: LD_ADDR_VAR 0 7
70423: PUSH
70424: LD_VAR 0 5
70428: PUSH
70429: LD_VAR 0 6
70433: DIFF
70434: ST_TO_ADDR
// if not need_heal_1 then
70435: LD_VAR 0 6
70439: NOT
70440: IFFALSE 70473
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70442: LD_ADDR_EXP 39
70446: PUSH
70447: LD_EXP 39
70451: PPUSH
70452: LD_VAR 0 2
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PPUSH
70464: EMPTY
70465: PPUSH
70466: CALL 26004 0 3
70470: ST_TO_ADDR
70471: GO 70543
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70473: LD_ADDR_EXP 39
70477: PUSH
70478: LD_EXP 39
70482: PPUSH
70483: LD_VAR 0 2
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PPUSH
70495: LD_EXP 39
70499: PUSH
70500: LD_VAR 0 2
70504: ARRAY
70505: PUSH
70506: LD_INT 1
70508: ARRAY
70509: PPUSH
70510: LD_INT 3
70512: PUSH
70513: LD_INT 24
70515: PUSH
70516: LD_INT 1000
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PPUSH
70527: CALL_OW 72
70531: PUSH
70532: LD_VAR 0 6
70536: UNION
70537: PPUSH
70538: CALL 26004 0 3
70542: ST_TO_ADDR
// if not need_heal_2 then
70543: LD_VAR 0 7
70547: NOT
70548: IFFALSE 70581
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70550: LD_ADDR_EXP 39
70554: PUSH
70555: LD_EXP 39
70559: PPUSH
70560: LD_VAR 0 2
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PPUSH
70572: EMPTY
70573: PPUSH
70574: CALL 26004 0 3
70578: ST_TO_ADDR
70579: GO 70613
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70581: LD_ADDR_EXP 39
70585: PUSH
70586: LD_EXP 39
70590: PPUSH
70591: LD_VAR 0 2
70595: PUSH
70596: LD_INT 2
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PPUSH
70603: LD_VAR 0 7
70607: PPUSH
70608: CALL 26004 0 3
70612: ST_TO_ADDR
// if need_heal_2 then
70613: LD_VAR 0 7
70617: IFFALSE 70789
// for j in need_heal_2 do
70619: LD_ADDR_VAR 0 3
70623: PUSH
70624: LD_VAR 0 7
70628: PUSH
70629: FOR_IN
70630: IFFALSE 70787
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70632: LD_ADDR_VAR 0 5
70636: PUSH
70637: LD_EXP 36
70641: PUSH
70642: LD_VAR 0 2
70646: ARRAY
70647: PPUSH
70648: LD_INT 2
70650: PUSH
70651: LD_INT 30
70653: PUSH
70654: LD_INT 6
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 30
70663: PUSH
70664: LD_INT 7
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 30
70673: PUSH
70674: LD_INT 8
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 30
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 30
70693: PUSH
70694: LD_INT 1
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 25
70703: PUSH
70704: LD_INT 4
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: PPUSH
70720: CALL_OW 72
70724: ST_TO_ADDR
// if tmp then
70725: LD_VAR 0 5
70729: IFFALSE 70785
// begin k := NearestUnitToUnit ( tmp , j ) ;
70731: LD_ADDR_VAR 0 4
70735: PUSH
70736: LD_VAR 0 5
70740: PPUSH
70741: LD_VAR 0 3
70745: PPUSH
70746: CALL_OW 74
70750: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70751: LD_VAR 0 3
70755: PPUSH
70756: LD_VAR 0 4
70760: PPUSH
70761: CALL_OW 296
70765: PUSH
70766: LD_INT 7
70768: GREATER
70769: IFFALSE 70785
// ComMoveUnit ( j , k ) ;
70771: LD_VAR 0 3
70775: PPUSH
70776: LD_VAR 0 4
70780: PPUSH
70781: CALL_OW 112
// end ; end ;
70785: GO 70629
70787: POP
70788: POP
// if not need_heal_1 and not need_heal_2 then
70789: LD_VAR 0 6
70793: NOT
70794: PUSH
70795: LD_VAR 0 7
70799: NOT
70800: AND
70801: IFFALSE 70805
// continue ;
70803: GO 70258
// end ;
70805: GO 70258
70807: POP
70808: POP
// RaiseSailEvent ( 102 ) ;
70809: LD_INT 102
70811: PPUSH
70812: CALL_OW 427
// end ;
70816: LD_VAR 0 1
70820: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70821: LD_INT 0
70823: PPUSH
70824: PPUSH
70825: PPUSH
70826: PPUSH
70827: PPUSH
// if not mc_bases then
70828: LD_EXP 36
70832: NOT
70833: IFFALSE 70837
// exit ;
70835: GO 71222
// for i = 1 to mc_bases do
70837: LD_ADDR_VAR 0 2
70841: PUSH
70842: DOUBLE
70843: LD_INT 1
70845: DEC
70846: ST_TO_ADDR
70847: LD_EXP 36
70851: PUSH
70852: FOR_TO
70853: IFFALSE 71220
// begin if not mc_building_need_repair [ i ] then
70855: LD_EXP 37
70859: PUSH
70860: LD_VAR 0 2
70864: ARRAY
70865: NOT
70866: IFFALSE 70904
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70868: LD_ADDR_EXP 38
70872: PUSH
70873: LD_EXP 38
70877: PPUSH
70878: LD_VAR 0 2
70882: PPUSH
70883: EMPTY
70884: PPUSH
70885: CALL_OW 1
70889: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70890: LD_VAR 0 2
70894: PPUSH
70895: LD_INT 101
70897: PPUSH
70898: CALL 65942 0 2
// continue ;
70902: GO 70852
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70904: LD_ADDR_EXP 42
70908: PUSH
70909: LD_EXP 42
70913: PPUSH
70914: LD_VAR 0 2
70918: PPUSH
70919: EMPTY
70920: PPUSH
70921: CALL_OW 1
70925: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70926: LD_VAR 0 2
70930: PPUSH
70931: LD_INT 103
70933: PPUSH
70934: CALL 65942 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
70938: LD_ADDR_VAR 0 5
70942: PUSH
70943: LD_EXP 36
70947: PUSH
70948: LD_VAR 0 2
70952: ARRAY
70953: PUSH
70954: LD_EXP 65
70958: PUSH
70959: LD_VAR 0 2
70963: ARRAY
70964: UNION
70965: PPUSH
70966: LD_INT 2
70968: PUSH
70969: LD_INT 25
70971: PUSH
70972: LD_INT 2
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 25
70981: PUSH
70982: LD_INT 16
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: PUSH
70994: EMPTY
70995: LIST
70996: PPUSH
70997: CALL_OW 72
71001: ST_TO_ADDR
// if not tmp then
71002: LD_VAR 0 5
71006: NOT
71007: IFFALSE 71011
// continue ;
71009: GO 70852
// for j in tmp do
71011: LD_ADDR_VAR 0 3
71015: PUSH
71016: LD_VAR 0 5
71020: PUSH
71021: FOR_IN
71022: IFFALSE 71216
// begin if mc_need_heal [ i ] then
71024: LD_EXP 39
71028: PUSH
71029: LD_VAR 0 2
71033: ARRAY
71034: IFFALSE 71082
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71036: LD_VAR 0 3
71040: PUSH
71041: LD_EXP 39
71045: PUSH
71046: LD_VAR 0 2
71050: ARRAY
71051: PUSH
71052: LD_INT 1
71054: ARRAY
71055: IN
71056: PUSH
71057: LD_VAR 0 3
71061: PUSH
71062: LD_EXP 39
71066: PUSH
71067: LD_VAR 0 2
71071: ARRAY
71072: PUSH
71073: LD_INT 2
71075: ARRAY
71076: IN
71077: OR
71078: IFFALSE 71082
// continue ;
71080: GO 71021
// if IsInUnit ( j ) then
71082: LD_VAR 0 3
71086: PPUSH
71087: CALL_OW 310
71091: IFFALSE 71102
// ComExitBuilding ( j ) ;
71093: LD_VAR 0 3
71097: PPUSH
71098: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71102: LD_VAR 0 3
71106: PUSH
71107: LD_EXP 38
71111: PUSH
71112: LD_VAR 0 2
71116: ARRAY
71117: IN
71118: NOT
71119: IFFALSE 71177
// begin SetTag ( j , 101 ) ;
71121: LD_VAR 0 3
71125: PPUSH
71126: LD_INT 101
71128: PPUSH
71129: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71133: LD_ADDR_EXP 38
71137: PUSH
71138: LD_EXP 38
71142: PPUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_EXP 38
71152: PUSH
71153: LD_VAR 0 2
71157: ARRAY
71158: PUSH
71159: LD_INT 1
71161: PLUS
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PPUSH
71167: LD_VAR 0 3
71171: PPUSH
71172: CALL 26004 0 3
71176: ST_TO_ADDR
// end ; wait ( 1 ) ;
71177: LD_INT 1
71179: PPUSH
71180: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71184: LD_VAR 0 3
71188: PPUSH
71189: LD_EXP 37
71193: PUSH
71194: LD_VAR 0 2
71198: ARRAY
71199: PPUSH
71200: LD_VAR 0 3
71204: PPUSH
71205: CALL_OW 74
71209: PPUSH
71210: CALL_OW 130
// end ;
71214: GO 71021
71216: POP
71217: POP
// end ;
71218: GO 70852
71220: POP
71221: POP
// end ;
71222: LD_VAR 0 1
71226: RET
// export function MC_Heal ; var i , j , tmp ; begin
71227: LD_INT 0
71229: PPUSH
71230: PPUSH
71231: PPUSH
71232: PPUSH
// if not mc_bases then
71233: LD_EXP 36
71237: NOT
71238: IFFALSE 71242
// exit ;
71240: GO 71644
// for i = 1 to mc_bases do
71242: LD_ADDR_VAR 0 2
71246: PUSH
71247: DOUBLE
71248: LD_INT 1
71250: DEC
71251: ST_TO_ADDR
71252: LD_EXP 36
71256: PUSH
71257: FOR_TO
71258: IFFALSE 71642
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71260: LD_EXP 39
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: NOT
71275: PUSH
71276: LD_EXP 39
71280: PUSH
71281: LD_VAR 0 2
71285: ARRAY
71286: PUSH
71287: LD_INT 2
71289: ARRAY
71290: NOT
71291: AND
71292: IFFALSE 71330
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71294: LD_ADDR_EXP 40
71298: PUSH
71299: LD_EXP 40
71303: PPUSH
71304: LD_VAR 0 2
71308: PPUSH
71309: EMPTY
71310: PPUSH
71311: CALL_OW 1
71315: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71316: LD_VAR 0 2
71320: PPUSH
71321: LD_INT 102
71323: PPUSH
71324: CALL 65942 0 2
// continue ;
71328: GO 71257
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71330: LD_ADDR_VAR 0 4
71334: PUSH
71335: LD_EXP 36
71339: PUSH
71340: LD_VAR 0 2
71344: ARRAY
71345: PPUSH
71346: LD_INT 25
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PPUSH
71356: CALL_OW 72
71360: ST_TO_ADDR
// if not tmp then
71361: LD_VAR 0 4
71365: NOT
71366: IFFALSE 71370
// continue ;
71368: GO 71257
// if mc_taming [ i ] then
71370: LD_EXP 67
71374: PUSH
71375: LD_VAR 0 2
71379: ARRAY
71380: IFFALSE 71404
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71382: LD_ADDR_EXP 67
71386: PUSH
71387: LD_EXP 67
71391: PPUSH
71392: LD_VAR 0 2
71396: PPUSH
71397: EMPTY
71398: PPUSH
71399: CALL_OW 1
71403: ST_TO_ADDR
// for j in tmp do
71404: LD_ADDR_VAR 0 3
71408: PUSH
71409: LD_VAR 0 4
71413: PUSH
71414: FOR_IN
71415: IFFALSE 71638
// begin if IsInUnit ( j ) then
71417: LD_VAR 0 3
71421: PPUSH
71422: CALL_OW 310
71426: IFFALSE 71437
// ComExitBuilding ( j ) ;
71428: LD_VAR 0 3
71432: PPUSH
71433: CALL_OW 122
// if not j in mc_healers [ i ] then
71437: LD_VAR 0 3
71441: PUSH
71442: LD_EXP 40
71446: PUSH
71447: LD_VAR 0 2
71451: ARRAY
71452: IN
71453: NOT
71454: IFFALSE 71500
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
71456: LD_ADDR_EXP 40
71460: PUSH
71461: LD_EXP 40
71465: PPUSH
71466: LD_VAR 0 2
71470: PUSH
71471: LD_EXP 40
71475: PUSH
71476: LD_VAR 0 2
71480: ARRAY
71481: PUSH
71482: LD_INT 1
71484: PLUS
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PPUSH
71490: LD_VAR 0 3
71494: PPUSH
71495: CALL 26004 0 3
71499: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71500: LD_VAR 0 3
71504: PPUSH
71505: CALL_OW 110
71509: PUSH
71510: LD_INT 102
71512: NONEQUAL
71513: IFFALSE 71527
// SetTag ( j , 102 ) ;
71515: LD_VAR 0 3
71519: PPUSH
71520: LD_INT 102
71522: PPUSH
71523: CALL_OW 109
// Wait ( 3 ) ;
71527: LD_INT 3
71529: PPUSH
71530: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
71534: LD_EXP 39
71538: PUSH
71539: LD_VAR 0 2
71543: ARRAY
71544: PUSH
71545: LD_INT 1
71547: ARRAY
71548: IFFALSE 71580
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71550: LD_VAR 0 3
71554: PPUSH
71555: LD_EXP 39
71559: PUSH
71560: LD_VAR 0 2
71564: ARRAY
71565: PUSH
71566: LD_INT 1
71568: ARRAY
71569: PUSH
71570: LD_INT 1
71572: ARRAY
71573: PPUSH
71574: CALL_OW 128
71578: GO 71636
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71580: LD_VAR 0 3
71584: PPUSH
71585: CALL_OW 314
71589: NOT
71590: PUSH
71591: LD_EXP 39
71595: PUSH
71596: LD_VAR 0 2
71600: ARRAY
71601: PUSH
71602: LD_INT 2
71604: ARRAY
71605: AND
71606: IFFALSE 71636
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71608: LD_VAR 0 3
71612: PPUSH
71613: LD_EXP 39
71617: PUSH
71618: LD_VAR 0 2
71622: ARRAY
71623: PUSH
71624: LD_INT 2
71626: ARRAY
71627: PUSH
71628: LD_INT 1
71630: ARRAY
71631: PPUSH
71632: CALL_OW 128
// end ;
71636: GO 71414
71638: POP
71639: POP
// end ;
71640: GO 71257
71642: POP
71643: POP
// end ;
71644: LD_VAR 0 1
71648: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71649: LD_INT 0
71651: PPUSH
71652: PPUSH
71653: PPUSH
71654: PPUSH
71655: PPUSH
// if not mc_bases then
71656: LD_EXP 36
71660: NOT
71661: IFFALSE 71665
// exit ;
71663: GO 72808
// for i = 1 to mc_bases do
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: DOUBLE
71671: LD_INT 1
71673: DEC
71674: ST_TO_ADDR
71675: LD_EXP 36
71679: PUSH
71680: FOR_TO
71681: IFFALSE 72806
// begin if mc_scan [ i ] then
71683: LD_EXP 59
71687: PUSH
71688: LD_VAR 0 2
71692: ARRAY
71693: IFFALSE 71697
// continue ;
71695: GO 71680
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71697: LD_EXP 41
71701: PUSH
71702: LD_VAR 0 2
71706: ARRAY
71707: NOT
71708: PUSH
71709: LD_EXP 43
71713: PUSH
71714: LD_VAR 0 2
71718: ARRAY
71719: NOT
71720: AND
71721: PUSH
71722: LD_EXP 42
71726: PUSH
71727: LD_VAR 0 2
71731: ARRAY
71732: AND
71733: IFFALSE 71771
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71735: LD_ADDR_EXP 42
71739: PUSH
71740: LD_EXP 42
71744: PPUSH
71745: LD_VAR 0 2
71749: PPUSH
71750: EMPTY
71751: PPUSH
71752: CALL_OW 1
71756: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71757: LD_VAR 0 2
71761: PPUSH
71762: LD_INT 103
71764: PPUSH
71765: CALL 65942 0 2
// continue ;
71769: GO 71680
// end ; if mc_construct_list [ i ] then
71771: LD_EXP 43
71775: PUSH
71776: LD_VAR 0 2
71780: ARRAY
71781: IFFALSE 72001
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71783: LD_ADDR_VAR 0 4
71787: PUSH
71788: LD_EXP 36
71792: PUSH
71793: LD_VAR 0 2
71797: ARRAY
71798: PPUSH
71799: LD_INT 25
71801: PUSH
71802: LD_INT 2
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PPUSH
71809: CALL_OW 72
71813: PUSH
71814: LD_EXP 38
71818: PUSH
71819: LD_VAR 0 2
71823: ARRAY
71824: DIFF
71825: ST_TO_ADDR
// if not tmp then
71826: LD_VAR 0 4
71830: NOT
71831: IFFALSE 71835
// continue ;
71833: GO 71680
// for j in tmp do
71835: LD_ADDR_VAR 0 3
71839: PUSH
71840: LD_VAR 0 4
71844: PUSH
71845: FOR_IN
71846: IFFALSE 71997
// begin if not mc_builders [ i ] then
71848: LD_EXP 42
71852: PUSH
71853: LD_VAR 0 2
71857: ARRAY
71858: NOT
71859: IFFALSE 71917
// begin SetTag ( j , 103 ) ;
71861: LD_VAR 0 3
71865: PPUSH
71866: LD_INT 103
71868: PPUSH
71869: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71873: LD_ADDR_EXP 42
71877: PUSH
71878: LD_EXP 42
71882: PPUSH
71883: LD_VAR 0 2
71887: PUSH
71888: LD_EXP 42
71892: PUSH
71893: LD_VAR 0 2
71897: ARRAY
71898: PUSH
71899: LD_INT 1
71901: PLUS
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PPUSH
71907: LD_VAR 0 3
71911: PPUSH
71912: CALL 26004 0 3
71916: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71917: LD_VAR 0 3
71921: PPUSH
71922: CALL_OW 310
71926: IFFALSE 71937
// ComExitBuilding ( j ) ;
71928: LD_VAR 0 3
71932: PPUSH
71933: CALL_OW 122
// wait ( 3 ) ;
71937: LD_INT 3
71939: PPUSH
71940: CALL_OW 67
// if not mc_construct_list [ i ] then
71944: LD_EXP 43
71948: PUSH
71949: LD_VAR 0 2
71953: ARRAY
71954: NOT
71955: IFFALSE 71959
// break ;
71957: GO 71997
// if not HasTask ( j ) then
71959: LD_VAR 0 3
71963: PPUSH
71964: CALL_OW 314
71968: NOT
71969: IFFALSE 71995
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
71971: LD_VAR 0 3
71975: PPUSH
71976: LD_EXP 43
71980: PUSH
71981: LD_VAR 0 2
71985: ARRAY
71986: PUSH
71987: LD_INT 1
71989: ARRAY
71990: PPUSH
71991: CALL 28855 0 2
// end ;
71995: GO 71845
71997: POP
71998: POP
// end else
71999: GO 72804
// if mc_build_list [ i ] then
72001: LD_EXP 41
72005: PUSH
72006: LD_VAR 0 2
72010: ARRAY
72011: IFFALSE 72804
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_EXP 36
72022: PUSH
72023: LD_VAR 0 2
72027: ARRAY
72028: PPUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 30
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 30
72044: PUSH
72045: LD_INT 1
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: PPUSH
72057: CALL_OW 72
72061: ST_TO_ADDR
// if depot then
72062: LD_VAR 0 5
72066: IFFALSE 72084
// depot := depot [ 1 ] else
72068: LD_ADDR_VAR 0 5
72072: PUSH
72073: LD_VAR 0 5
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: ST_TO_ADDR
72082: GO 72092
// depot := 0 ;
72084: LD_ADDR_VAR 0 5
72088: PUSH
72089: LD_INT 0
72091: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72092: LD_EXP 41
72096: PUSH
72097: LD_VAR 0 2
72101: ARRAY
72102: PUSH
72103: LD_INT 1
72105: ARRAY
72106: PUSH
72107: LD_INT 1
72109: ARRAY
72110: PPUSH
72111: CALL 28685 0 1
72115: PUSH
72116: LD_EXP 36
72120: PUSH
72121: LD_VAR 0 2
72125: ARRAY
72126: PPUSH
72127: LD_INT 2
72129: PUSH
72130: LD_INT 30
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 30
72142: PUSH
72143: LD_INT 3
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: LIST
72154: PPUSH
72155: CALL_OW 72
72159: NOT
72160: AND
72161: IFFALSE 72266
// begin for j = 1 to mc_build_list [ i ] do
72163: LD_ADDR_VAR 0 3
72167: PUSH
72168: DOUBLE
72169: LD_INT 1
72171: DEC
72172: ST_TO_ADDR
72173: LD_EXP 41
72177: PUSH
72178: LD_VAR 0 2
72182: ARRAY
72183: PUSH
72184: FOR_TO
72185: IFFALSE 72264
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72187: LD_EXP 41
72191: PUSH
72192: LD_VAR 0 2
72196: ARRAY
72197: PUSH
72198: LD_VAR 0 3
72202: ARRAY
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: PUSH
72208: LD_INT 2
72210: EQUAL
72211: IFFALSE 72262
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72213: LD_ADDR_EXP 41
72217: PUSH
72218: LD_EXP 41
72222: PPUSH
72223: LD_VAR 0 2
72227: PPUSH
72228: LD_EXP 41
72232: PUSH
72233: LD_VAR 0 2
72237: ARRAY
72238: PPUSH
72239: LD_VAR 0 3
72243: PPUSH
72244: LD_INT 1
72246: PPUSH
72247: LD_INT 0
72249: PPUSH
72250: CALL 25422 0 4
72254: PPUSH
72255: CALL_OW 1
72259: ST_TO_ADDR
// break ;
72260: GO 72264
// end ;
72262: GO 72184
72264: POP
72265: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72266: LD_EXP 41
72270: PUSH
72271: LD_VAR 0 2
72275: ARRAY
72276: PUSH
72277: LD_INT 1
72279: ARRAY
72280: PUSH
72281: LD_INT 1
72283: ARRAY
72284: PUSH
72285: LD_INT 0
72287: EQUAL
72288: PUSH
72289: LD_VAR 0 5
72293: PUSH
72294: LD_VAR 0 5
72298: PPUSH
72299: LD_EXP 41
72303: PUSH
72304: LD_VAR 0 2
72308: ARRAY
72309: PUSH
72310: LD_INT 1
72312: ARRAY
72313: PUSH
72314: LD_INT 1
72316: ARRAY
72317: PPUSH
72318: LD_EXP 41
72322: PUSH
72323: LD_VAR 0 2
72327: ARRAY
72328: PUSH
72329: LD_INT 1
72331: ARRAY
72332: PUSH
72333: LD_INT 2
72335: ARRAY
72336: PPUSH
72337: LD_EXP 41
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: PUSH
72348: LD_INT 1
72350: ARRAY
72351: PUSH
72352: LD_INT 3
72354: ARRAY
72355: PPUSH
72356: LD_EXP 41
72360: PUSH
72361: LD_VAR 0 2
72365: ARRAY
72366: PUSH
72367: LD_INT 1
72369: ARRAY
72370: PUSH
72371: LD_INT 4
72373: ARRAY
72374: PPUSH
72375: CALL 33401 0 5
72379: AND
72380: OR
72381: IFFALSE 72662
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72383: LD_ADDR_VAR 0 4
72387: PUSH
72388: LD_EXP 36
72392: PUSH
72393: LD_VAR 0 2
72397: ARRAY
72398: PPUSH
72399: LD_INT 25
72401: PUSH
72402: LD_INT 2
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PPUSH
72409: CALL_OW 72
72413: PUSH
72414: LD_EXP 38
72418: PUSH
72419: LD_VAR 0 2
72423: ARRAY
72424: DIFF
72425: ST_TO_ADDR
// if not tmp then
72426: LD_VAR 0 4
72430: NOT
72431: IFFALSE 72435
// continue ;
72433: GO 71680
// for j in tmp do
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_VAR 0 4
72444: PUSH
72445: FOR_IN
72446: IFFALSE 72658
// begin if not mc_builders [ i ] then
72448: LD_EXP 42
72452: PUSH
72453: LD_VAR 0 2
72457: ARRAY
72458: NOT
72459: IFFALSE 72517
// begin SetTag ( j , 103 ) ;
72461: LD_VAR 0 3
72465: PPUSH
72466: LD_INT 103
72468: PPUSH
72469: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72473: LD_ADDR_EXP 42
72477: PUSH
72478: LD_EXP 42
72482: PPUSH
72483: LD_VAR 0 2
72487: PUSH
72488: LD_EXP 42
72492: PUSH
72493: LD_VAR 0 2
72497: ARRAY
72498: PUSH
72499: LD_INT 1
72501: PLUS
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PPUSH
72507: LD_VAR 0 3
72511: PPUSH
72512: CALL 26004 0 3
72516: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72517: LD_VAR 0 3
72521: PPUSH
72522: CALL_OW 310
72526: IFFALSE 72537
// ComExitBuilding ( j ) ;
72528: LD_VAR 0 3
72532: PPUSH
72533: CALL_OW 122
// wait ( 3 ) ;
72537: LD_INT 3
72539: PPUSH
72540: CALL_OW 67
// if not mc_build_list [ i ] then
72544: LD_EXP 41
72548: PUSH
72549: LD_VAR 0 2
72553: ARRAY
72554: NOT
72555: IFFALSE 72559
// break ;
72557: GO 72658
// if not HasTask ( j ) then
72559: LD_VAR 0 3
72563: PPUSH
72564: CALL_OW 314
72568: NOT
72569: IFFALSE 72656
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72571: LD_VAR 0 3
72575: PPUSH
72576: LD_EXP 41
72580: PUSH
72581: LD_VAR 0 2
72585: ARRAY
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PUSH
72591: LD_INT 1
72593: ARRAY
72594: PPUSH
72595: LD_EXP 41
72599: PUSH
72600: LD_VAR 0 2
72604: ARRAY
72605: PUSH
72606: LD_INT 1
72608: ARRAY
72609: PUSH
72610: LD_INT 2
72612: ARRAY
72613: PPUSH
72614: LD_EXP 41
72618: PUSH
72619: LD_VAR 0 2
72623: ARRAY
72624: PUSH
72625: LD_INT 1
72627: ARRAY
72628: PUSH
72629: LD_INT 3
72631: ARRAY
72632: PPUSH
72633: LD_EXP 41
72637: PUSH
72638: LD_VAR 0 2
72642: ARRAY
72643: PUSH
72644: LD_INT 1
72646: ARRAY
72647: PUSH
72648: LD_INT 4
72650: ARRAY
72651: PPUSH
72652: CALL_OW 145
// end ;
72656: GO 72445
72658: POP
72659: POP
// end else
72660: GO 72804
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72662: LD_EXP 36
72666: PUSH
72667: LD_VAR 0 2
72671: ARRAY
72672: PPUSH
72673: LD_EXP 41
72677: PUSH
72678: LD_VAR 0 2
72682: ARRAY
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PUSH
72688: LD_INT 1
72690: ARRAY
72691: PPUSH
72692: LD_EXP 41
72696: PUSH
72697: LD_VAR 0 2
72701: ARRAY
72702: PUSH
72703: LD_INT 1
72705: ARRAY
72706: PUSH
72707: LD_INT 2
72709: ARRAY
72710: PPUSH
72711: LD_EXP 41
72715: PUSH
72716: LD_VAR 0 2
72720: ARRAY
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PUSH
72726: LD_INT 3
72728: ARRAY
72729: PPUSH
72730: LD_EXP 41
72734: PUSH
72735: LD_VAR 0 2
72739: ARRAY
72740: PUSH
72741: LD_INT 1
72743: ARRAY
72744: PUSH
72745: LD_INT 4
72747: ARRAY
72748: PPUSH
72749: CALL 32755 0 5
72753: NOT
72754: IFFALSE 72804
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72756: LD_ADDR_EXP 41
72760: PUSH
72761: LD_EXP 41
72765: PPUSH
72766: LD_VAR 0 2
72770: PPUSH
72771: LD_EXP 41
72775: PUSH
72776: LD_VAR 0 2
72780: ARRAY
72781: PPUSH
72782: LD_INT 1
72784: PPUSH
72785: LD_INT 1
72787: NEG
72788: PPUSH
72789: LD_INT 0
72791: PPUSH
72792: CALL 25422 0 4
72796: PPUSH
72797: CALL_OW 1
72801: ST_TO_ADDR
// continue ;
72802: GO 71680
// end ; end ; end ;
72804: GO 71680
72806: POP
72807: POP
// end ;
72808: LD_VAR 0 1
72812: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72813: LD_INT 0
72815: PPUSH
72816: PPUSH
72817: PPUSH
72818: PPUSH
72819: PPUSH
72820: PPUSH
// if not mc_bases then
72821: LD_EXP 36
72825: NOT
72826: IFFALSE 72830
// exit ;
72828: GO 73257
// for i = 1 to mc_bases do
72830: LD_ADDR_VAR 0 2
72834: PUSH
72835: DOUBLE
72836: LD_INT 1
72838: DEC
72839: ST_TO_ADDR
72840: LD_EXP 36
72844: PUSH
72845: FOR_TO
72846: IFFALSE 73255
// begin tmp := mc_build_upgrade [ i ] ;
72848: LD_ADDR_VAR 0 4
72852: PUSH
72853: LD_EXP 68
72857: PUSH
72858: LD_VAR 0 2
72862: ARRAY
72863: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72864: LD_ADDR_VAR 0 6
72868: PUSH
72869: LD_EXP 69
72873: PUSH
72874: LD_VAR 0 2
72878: ARRAY
72879: PPUSH
72880: LD_INT 2
72882: PUSH
72883: LD_INT 30
72885: PUSH
72886: LD_INT 6
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 30
72895: PUSH
72896: LD_INT 7
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: PPUSH
72908: CALL_OW 72
72912: ST_TO_ADDR
// if not tmp and not lab then
72913: LD_VAR 0 4
72917: NOT
72918: PUSH
72919: LD_VAR 0 6
72923: NOT
72924: AND
72925: IFFALSE 72929
// continue ;
72927: GO 72845
// if tmp then
72929: LD_VAR 0 4
72933: IFFALSE 73053
// for j in tmp do
72935: LD_ADDR_VAR 0 3
72939: PUSH
72940: LD_VAR 0 4
72944: PUSH
72945: FOR_IN
72946: IFFALSE 73051
// begin if UpgradeCost ( j ) then
72948: LD_VAR 0 3
72952: PPUSH
72953: CALL 32415 0 1
72957: IFFALSE 73049
// begin ComUpgrade ( j ) ;
72959: LD_VAR 0 3
72963: PPUSH
72964: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
72968: LD_ADDR_EXP 68
72972: PUSH
72973: LD_EXP 68
72977: PPUSH
72978: LD_VAR 0 2
72982: PPUSH
72983: LD_EXP 68
72987: PUSH
72988: LD_VAR 0 2
72992: ARRAY
72993: PUSH
72994: LD_VAR 0 3
72998: DIFF
72999: PPUSH
73000: CALL_OW 1
73004: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73005: LD_ADDR_EXP 43
73009: PUSH
73010: LD_EXP 43
73014: PPUSH
73015: LD_VAR 0 2
73019: PUSH
73020: LD_EXP 43
73024: PUSH
73025: LD_VAR 0 2
73029: ARRAY
73030: PUSH
73031: LD_INT 1
73033: PLUS
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PPUSH
73039: LD_VAR 0 3
73043: PPUSH
73044: CALL 26004 0 3
73048: ST_TO_ADDR
// end ; end ;
73049: GO 72945
73051: POP
73052: POP
// if not lab or not mc_lab_upgrade [ i ] then
73053: LD_VAR 0 6
73057: NOT
73058: PUSH
73059: LD_EXP 70
73063: PUSH
73064: LD_VAR 0 2
73068: ARRAY
73069: NOT
73070: OR
73071: IFFALSE 73075
// continue ;
73073: GO 72845
// for j in lab do
73075: LD_ADDR_VAR 0 3
73079: PUSH
73080: LD_VAR 0 6
73084: PUSH
73085: FOR_IN
73086: IFFALSE 73251
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73088: LD_VAR 0 3
73092: PPUSH
73093: CALL_OW 266
73097: PUSH
73098: LD_INT 6
73100: PUSH
73101: LD_INT 7
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: IN
73108: PUSH
73109: LD_VAR 0 3
73113: PPUSH
73114: CALL_OW 461
73118: PUSH
73119: LD_INT 1
73121: NONEQUAL
73122: AND
73123: IFFALSE 73249
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73125: LD_VAR 0 3
73129: PPUSH
73130: LD_EXP 70
73134: PUSH
73135: LD_VAR 0 2
73139: ARRAY
73140: PUSH
73141: LD_INT 1
73143: ARRAY
73144: PPUSH
73145: CALL 32620 0 2
73149: IFFALSE 73249
// begin ComCancel ( j ) ;
73151: LD_VAR 0 3
73155: PPUSH
73156: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73160: LD_VAR 0 3
73164: PPUSH
73165: LD_EXP 70
73169: PUSH
73170: LD_VAR 0 2
73174: ARRAY
73175: PUSH
73176: LD_INT 1
73178: ARRAY
73179: PPUSH
73180: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73184: LD_VAR 0 3
73188: PUSH
73189: LD_EXP 43
73193: PUSH
73194: LD_VAR 0 2
73198: ARRAY
73199: IN
73200: NOT
73201: IFFALSE 73247
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73203: LD_ADDR_EXP 43
73207: PUSH
73208: LD_EXP 43
73212: PPUSH
73213: LD_VAR 0 2
73217: PUSH
73218: LD_EXP 43
73222: PUSH
73223: LD_VAR 0 2
73227: ARRAY
73228: PUSH
73229: LD_INT 1
73231: PLUS
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PPUSH
73237: LD_VAR 0 3
73241: PPUSH
73242: CALL 26004 0 3
73246: ST_TO_ADDR
// break ;
73247: GO 73251
// end ; end ; end ;
73249: GO 73085
73251: POP
73252: POP
// end ;
73253: GO 72845
73255: POP
73256: POP
// end ;
73257: LD_VAR 0 1
73261: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73262: LD_INT 0
73264: PPUSH
73265: PPUSH
73266: PPUSH
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
73271: PPUSH
73272: PPUSH
// if not mc_bases then
73273: LD_EXP 36
73277: NOT
73278: IFFALSE 73282
// exit ;
73280: GO 73687
// for i = 1 to mc_bases do
73282: LD_ADDR_VAR 0 2
73286: PUSH
73287: DOUBLE
73288: LD_INT 1
73290: DEC
73291: ST_TO_ADDR
73292: LD_EXP 36
73296: PUSH
73297: FOR_TO
73298: IFFALSE 73685
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73300: LD_EXP 44
73304: PUSH
73305: LD_VAR 0 2
73309: ARRAY
73310: NOT
73311: PUSH
73312: LD_EXP 36
73316: PUSH
73317: LD_VAR 0 2
73321: ARRAY
73322: PPUSH
73323: LD_INT 30
73325: PUSH
73326: LD_INT 3
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PPUSH
73333: CALL_OW 72
73337: NOT
73338: OR
73339: IFFALSE 73343
// continue ;
73341: GO 73297
// busy := false ;
73343: LD_ADDR_VAR 0 8
73347: PUSH
73348: LD_INT 0
73350: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73351: LD_ADDR_VAR 0 4
73355: PUSH
73356: LD_EXP 36
73360: PUSH
73361: LD_VAR 0 2
73365: ARRAY
73366: PPUSH
73367: LD_INT 30
73369: PUSH
73370: LD_INT 3
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PPUSH
73377: CALL_OW 72
73381: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73382: LD_ADDR_VAR 0 6
73386: PUSH
73387: LD_EXP 44
73391: PUSH
73392: LD_VAR 0 2
73396: ARRAY
73397: PPUSH
73398: LD_INT 2
73400: PUSH
73401: LD_INT 30
73403: PUSH
73404: LD_INT 32
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 30
73413: PUSH
73414: LD_INT 33
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: LIST
73425: PPUSH
73426: CALL_OW 72
73430: ST_TO_ADDR
// if not t then
73431: LD_VAR 0 6
73435: NOT
73436: IFFALSE 73440
// continue ;
73438: GO 73297
// for j in tmp do
73440: LD_ADDR_VAR 0 3
73444: PUSH
73445: LD_VAR 0 4
73449: PUSH
73450: FOR_IN
73451: IFFALSE 73481
// if not BuildingStatus ( j ) = bs_idle then
73453: LD_VAR 0 3
73457: PPUSH
73458: CALL_OW 461
73462: PUSH
73463: LD_INT 2
73465: EQUAL
73466: NOT
73467: IFFALSE 73479
// begin busy := true ;
73469: LD_ADDR_VAR 0 8
73473: PUSH
73474: LD_INT 1
73476: ST_TO_ADDR
// break ;
73477: GO 73481
// end ;
73479: GO 73450
73481: POP
73482: POP
// if busy then
73483: LD_VAR 0 8
73487: IFFALSE 73491
// continue ;
73489: GO 73297
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73491: LD_ADDR_VAR 0 7
73495: PUSH
73496: LD_VAR 0 6
73500: PPUSH
73501: LD_INT 35
73503: PUSH
73504: LD_INT 0
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PPUSH
73511: CALL_OW 72
73515: ST_TO_ADDR
// if tw then
73516: LD_VAR 0 7
73520: IFFALSE 73597
// begin tw := tw [ 1 ] ;
73522: LD_ADDR_VAR 0 7
73526: PUSH
73527: LD_VAR 0 7
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73536: LD_ADDR_VAR 0 9
73540: PUSH
73541: LD_VAR 0 7
73545: PPUSH
73546: LD_EXP 61
73550: PUSH
73551: LD_VAR 0 2
73555: ARRAY
73556: PPUSH
73557: CALL 30974 0 2
73561: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73562: LD_EXP 75
73566: PUSH
73567: LD_VAR 0 2
73571: ARRAY
73572: IFFALSE 73595
// if not weapon in mc_allowed_tower_weapons [ i ] then
73574: LD_VAR 0 9
73578: PUSH
73579: LD_EXP 75
73583: PUSH
73584: LD_VAR 0 2
73588: ARRAY
73589: IN
73590: NOT
73591: IFFALSE 73595
// continue ;
73593: GO 73297
// end else
73595: GO 73660
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73597: LD_ADDR_VAR 0 5
73601: PUSH
73602: LD_EXP 44
73606: PUSH
73607: LD_VAR 0 2
73611: ARRAY
73612: PPUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: CALL 61151 0 2
73622: ST_TO_ADDR
// if not tmp2 then
73623: LD_VAR 0 5
73627: NOT
73628: IFFALSE 73632
// continue ;
73630: GO 73297
// tw := tmp2 [ 1 ] ;
73632: LD_ADDR_VAR 0 7
73636: PUSH
73637: LD_VAR 0 5
73641: PUSH
73642: LD_INT 1
73644: ARRAY
73645: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73646: LD_ADDR_VAR 0 9
73650: PUSH
73651: LD_VAR 0 5
73655: PUSH
73656: LD_INT 2
73658: ARRAY
73659: ST_TO_ADDR
// end ; if not weapon then
73660: LD_VAR 0 9
73664: NOT
73665: IFFALSE 73669
// continue ;
73667: GO 73297
// ComPlaceWeapon ( tw , weapon ) ;
73669: LD_VAR 0 7
73673: PPUSH
73674: LD_VAR 0 9
73678: PPUSH
73679: CALL_OW 148
// end ;
73683: GO 73297
73685: POP
73686: POP
// end ;
73687: LD_VAR 0 1
73691: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73692: LD_INT 0
73694: PPUSH
73695: PPUSH
73696: PPUSH
73697: PPUSH
73698: PPUSH
73699: PPUSH
// if not mc_bases then
73700: LD_EXP 36
73704: NOT
73705: IFFALSE 73709
// exit ;
73707: GO 74721
// for i = 1 to mc_bases do
73709: LD_ADDR_VAR 0 2
73713: PUSH
73714: DOUBLE
73715: LD_INT 1
73717: DEC
73718: ST_TO_ADDR
73719: LD_EXP 36
73723: PUSH
73724: FOR_TO
73725: IFFALSE 74719
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73727: LD_EXP 49
73731: PUSH
73732: LD_VAR 0 2
73736: ARRAY
73737: NOT
73738: PUSH
73739: LD_EXP 49
73743: PUSH
73744: LD_VAR 0 2
73748: ARRAY
73749: PUSH
73750: LD_EXP 50
73754: PUSH
73755: LD_VAR 0 2
73759: ARRAY
73760: EQUAL
73761: OR
73762: IFFALSE 73766
// continue ;
73764: GO 73724
// if mc_miners [ i ] then
73766: LD_EXP 50
73770: PUSH
73771: LD_VAR 0 2
73775: ARRAY
73776: IFFALSE 74406
// begin k := 1 ;
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: LD_INT 1
73785: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73786: LD_ADDR_VAR 0 3
73790: PUSH
73791: DOUBLE
73792: LD_EXP 50
73796: PUSH
73797: LD_VAR 0 2
73801: ARRAY
73802: INC
73803: ST_TO_ADDR
73804: LD_INT 1
73806: PUSH
73807: FOR_DOWNTO
73808: IFFALSE 74404
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73810: LD_EXP 50
73814: PUSH
73815: LD_VAR 0 2
73819: ARRAY
73820: PUSH
73821: LD_VAR 0 3
73825: ARRAY
73826: PPUSH
73827: CALL_OW 301
73831: PUSH
73832: LD_EXP 50
73836: PUSH
73837: LD_VAR 0 2
73841: ARRAY
73842: PUSH
73843: LD_VAR 0 3
73847: ARRAY
73848: PPUSH
73849: CALL_OW 257
73853: PUSH
73854: LD_INT 1
73856: NONEQUAL
73857: OR
73858: IFFALSE 73921
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73860: LD_ADDR_VAR 0 5
73864: PUSH
73865: LD_EXP 50
73869: PUSH
73870: LD_VAR 0 2
73874: ARRAY
73875: PUSH
73876: LD_EXP 50
73880: PUSH
73881: LD_VAR 0 2
73885: ARRAY
73886: PUSH
73887: LD_VAR 0 3
73891: ARRAY
73892: DIFF
73893: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73894: LD_ADDR_EXP 50
73898: PUSH
73899: LD_EXP 50
73903: PPUSH
73904: LD_VAR 0 2
73908: PPUSH
73909: LD_VAR 0 5
73913: PPUSH
73914: CALL_OW 1
73918: ST_TO_ADDR
// continue ;
73919: GO 73807
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
73921: LD_EXP 50
73925: PUSH
73926: LD_VAR 0 2
73930: ARRAY
73931: PUSH
73932: LD_VAR 0 3
73936: ARRAY
73937: PPUSH
73938: CALL 25940 0 1
73942: PUSH
73943: LD_EXP 50
73947: PUSH
73948: LD_VAR 0 2
73952: ARRAY
73953: PUSH
73954: LD_VAR 0 3
73958: ARRAY
73959: PPUSH
73960: CALL_OW 255
73964: PPUSH
73965: LD_EXP 49
73969: PUSH
73970: LD_VAR 0 2
73974: ARRAY
73975: PUSH
73976: LD_VAR 0 4
73980: ARRAY
73981: PUSH
73982: LD_INT 1
73984: ARRAY
73985: PPUSH
73986: LD_EXP 49
73990: PUSH
73991: LD_VAR 0 2
73995: ARRAY
73996: PUSH
73997: LD_VAR 0 4
74001: ARRAY
74002: PUSH
74003: LD_INT 2
74005: ARRAY
74006: PPUSH
74007: LD_INT 15
74009: PPUSH
74010: CALL 26900 0 4
74014: PUSH
74015: LD_INT 4
74017: ARRAY
74018: PUSH
74019: LD_EXP 50
74023: PUSH
74024: LD_VAR 0 2
74028: ARRAY
74029: PUSH
74030: LD_VAR 0 3
74034: ARRAY
74035: PPUSH
74036: LD_INT 10
74038: PPUSH
74039: CALL 28597 0 2
74043: PUSH
74044: LD_INT 4
74046: ARRAY
74047: OR
74048: AND
74049: IFFALSE 74072
// ComStop ( mc_miners [ i ] [ j ] ) ;
74051: LD_EXP 50
74055: PUSH
74056: LD_VAR 0 2
74060: ARRAY
74061: PUSH
74062: LD_VAR 0 3
74066: ARRAY
74067: PPUSH
74068: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74072: LD_EXP 50
74076: PUSH
74077: LD_VAR 0 2
74081: ARRAY
74082: PUSH
74083: LD_VAR 0 3
74087: ARRAY
74088: PPUSH
74089: CALL_OW 257
74093: PUSH
74094: LD_INT 1
74096: EQUAL
74097: PUSH
74098: LD_EXP 50
74102: PUSH
74103: LD_VAR 0 2
74107: ARRAY
74108: PUSH
74109: LD_VAR 0 3
74113: ARRAY
74114: PPUSH
74115: CALL_OW 459
74119: NOT
74120: AND
74121: PUSH
74122: LD_EXP 50
74126: PUSH
74127: LD_VAR 0 2
74131: ARRAY
74132: PUSH
74133: LD_VAR 0 3
74137: ARRAY
74138: PPUSH
74139: CALL_OW 255
74143: PPUSH
74144: LD_EXP 49
74148: PUSH
74149: LD_VAR 0 2
74153: ARRAY
74154: PUSH
74155: LD_VAR 0 4
74159: ARRAY
74160: PUSH
74161: LD_INT 1
74163: ARRAY
74164: PPUSH
74165: LD_EXP 49
74169: PUSH
74170: LD_VAR 0 2
74174: ARRAY
74175: PUSH
74176: LD_VAR 0 4
74180: ARRAY
74181: PUSH
74182: LD_INT 2
74184: ARRAY
74185: PPUSH
74186: LD_INT 15
74188: PPUSH
74189: CALL 26900 0 4
74193: PUSH
74194: LD_INT 4
74196: ARRAY
74197: PUSH
74198: LD_INT 0
74200: EQUAL
74201: AND
74202: PUSH
74203: LD_EXP 50
74207: PUSH
74208: LD_VAR 0 2
74212: ARRAY
74213: PUSH
74214: LD_VAR 0 3
74218: ARRAY
74219: PPUSH
74220: CALL_OW 314
74224: NOT
74225: AND
74226: IFFALSE 74402
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74228: LD_EXP 50
74232: PUSH
74233: LD_VAR 0 2
74237: ARRAY
74238: PUSH
74239: LD_VAR 0 3
74243: ARRAY
74244: PPUSH
74245: CALL_OW 310
74249: IFFALSE 74272
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74251: LD_EXP 50
74255: PUSH
74256: LD_VAR 0 2
74260: ARRAY
74261: PUSH
74262: LD_VAR 0 3
74266: ARRAY
74267: PPUSH
74268: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74272: LD_EXP 50
74276: PUSH
74277: LD_VAR 0 2
74281: ARRAY
74282: PUSH
74283: LD_VAR 0 3
74287: ARRAY
74288: PPUSH
74289: CALL_OW 314
74293: NOT
74294: IFFALSE 74362
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74296: LD_EXP 50
74300: PUSH
74301: LD_VAR 0 2
74305: ARRAY
74306: PUSH
74307: LD_VAR 0 3
74311: ARRAY
74312: PPUSH
74313: LD_EXP 49
74317: PUSH
74318: LD_VAR 0 2
74322: ARRAY
74323: PUSH
74324: LD_VAR 0 4
74328: ARRAY
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: PPUSH
74334: LD_EXP 49
74338: PUSH
74339: LD_VAR 0 2
74343: ARRAY
74344: PUSH
74345: LD_VAR 0 4
74349: ARRAY
74350: PUSH
74351: LD_INT 2
74353: ARRAY
74354: PPUSH
74355: LD_INT 0
74357: PPUSH
74358: CALL_OW 193
// k := k + 1 ;
74362: LD_ADDR_VAR 0 4
74366: PUSH
74367: LD_VAR 0 4
74371: PUSH
74372: LD_INT 1
74374: PLUS
74375: ST_TO_ADDR
// if k > mc_mines [ i ] then
74376: LD_VAR 0 4
74380: PUSH
74381: LD_EXP 49
74385: PUSH
74386: LD_VAR 0 2
74390: ARRAY
74391: GREATER
74392: IFFALSE 74402
// k := 1 ;
74394: LD_ADDR_VAR 0 4
74398: PUSH
74399: LD_INT 1
74401: ST_TO_ADDR
// end ; end ;
74402: GO 73807
74404: POP
74405: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74406: LD_ADDR_VAR 0 5
74410: PUSH
74411: LD_EXP 36
74415: PUSH
74416: LD_VAR 0 2
74420: ARRAY
74421: PPUSH
74422: LD_INT 2
74424: PUSH
74425: LD_INT 30
74427: PUSH
74428: LD_INT 4
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 30
74437: PUSH
74438: LD_INT 5
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 30
74447: PUSH
74448: LD_INT 32
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: PPUSH
74461: CALL_OW 72
74465: ST_TO_ADDR
// if not tmp then
74466: LD_VAR 0 5
74470: NOT
74471: IFFALSE 74475
// continue ;
74473: GO 73724
// list := [ ] ;
74475: LD_ADDR_VAR 0 6
74479: PUSH
74480: EMPTY
74481: ST_TO_ADDR
// for j in tmp do
74482: LD_ADDR_VAR 0 3
74486: PUSH
74487: LD_VAR 0 5
74491: PUSH
74492: FOR_IN
74493: IFFALSE 74562
// begin for k in UnitsInside ( j ) do
74495: LD_ADDR_VAR 0 4
74499: PUSH
74500: LD_VAR 0 3
74504: PPUSH
74505: CALL_OW 313
74509: PUSH
74510: FOR_IN
74511: IFFALSE 74558
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74513: LD_VAR 0 4
74517: PPUSH
74518: CALL_OW 257
74522: PUSH
74523: LD_INT 1
74525: EQUAL
74526: PUSH
74527: LD_VAR 0 4
74531: PPUSH
74532: CALL_OW 459
74536: NOT
74537: AND
74538: IFFALSE 74556
// list := list ^ k ;
74540: LD_ADDR_VAR 0 6
74544: PUSH
74545: LD_VAR 0 6
74549: PUSH
74550: LD_VAR 0 4
74554: ADD
74555: ST_TO_ADDR
74556: GO 74510
74558: POP
74559: POP
// end ;
74560: GO 74492
74562: POP
74563: POP
// list := list diff mc_miners [ i ] ;
74564: LD_ADDR_VAR 0 6
74568: PUSH
74569: LD_VAR 0 6
74573: PUSH
74574: LD_EXP 50
74578: PUSH
74579: LD_VAR 0 2
74583: ARRAY
74584: DIFF
74585: ST_TO_ADDR
// if not list then
74586: LD_VAR 0 6
74590: NOT
74591: IFFALSE 74595
// continue ;
74593: GO 73724
// k := mc_mines [ i ] - mc_miners [ i ] ;
74595: LD_ADDR_VAR 0 4
74599: PUSH
74600: LD_EXP 49
74604: PUSH
74605: LD_VAR 0 2
74609: ARRAY
74610: PUSH
74611: LD_EXP 50
74615: PUSH
74616: LD_VAR 0 2
74620: ARRAY
74621: MINUS
74622: ST_TO_ADDR
// if k > list then
74623: LD_VAR 0 4
74627: PUSH
74628: LD_VAR 0 6
74632: GREATER
74633: IFFALSE 74645
// k := list ;
74635: LD_ADDR_VAR 0 4
74639: PUSH
74640: LD_VAR 0 6
74644: ST_TO_ADDR
// for j = 1 to k do
74645: LD_ADDR_VAR 0 3
74649: PUSH
74650: DOUBLE
74651: LD_INT 1
74653: DEC
74654: ST_TO_ADDR
74655: LD_VAR 0 4
74659: PUSH
74660: FOR_TO
74661: IFFALSE 74715
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74663: LD_ADDR_EXP 50
74667: PUSH
74668: LD_EXP 50
74672: PPUSH
74673: LD_VAR 0 2
74677: PUSH
74678: LD_EXP 50
74682: PUSH
74683: LD_VAR 0 2
74687: ARRAY
74688: PUSH
74689: LD_INT 1
74691: PLUS
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PPUSH
74697: LD_VAR 0 6
74701: PUSH
74702: LD_VAR 0 3
74706: ARRAY
74707: PPUSH
74708: CALL 26004 0 3
74712: ST_TO_ADDR
74713: GO 74660
74715: POP
74716: POP
// end ;
74717: GO 73724
74719: POP
74720: POP
// end ;
74721: LD_VAR 0 1
74725: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74726: LD_INT 0
74728: PPUSH
74729: PPUSH
74730: PPUSH
74731: PPUSH
74732: PPUSH
74733: PPUSH
74734: PPUSH
74735: PPUSH
74736: PPUSH
74737: PPUSH
// if not mc_bases then
74738: LD_EXP 36
74742: NOT
74743: IFFALSE 74747
// exit ;
74745: GO 76478
// for i = 1 to mc_bases do
74747: LD_ADDR_VAR 0 2
74751: PUSH
74752: DOUBLE
74753: LD_INT 1
74755: DEC
74756: ST_TO_ADDR
74757: LD_EXP 36
74761: PUSH
74762: FOR_TO
74763: IFFALSE 76476
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74765: LD_EXP 36
74769: PUSH
74770: LD_VAR 0 2
74774: ARRAY
74775: NOT
74776: PUSH
74777: LD_EXP 43
74781: PUSH
74782: LD_VAR 0 2
74786: ARRAY
74787: OR
74788: IFFALSE 74792
// continue ;
74790: GO 74762
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74792: LD_EXP 52
74796: PUSH
74797: LD_VAR 0 2
74801: ARRAY
74802: NOT
74803: PUSH
74804: LD_EXP 53
74808: PUSH
74809: LD_VAR 0 2
74813: ARRAY
74814: AND
74815: IFFALSE 74853
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74817: LD_ADDR_EXP 53
74821: PUSH
74822: LD_EXP 53
74826: PPUSH
74827: LD_VAR 0 2
74831: PPUSH
74832: EMPTY
74833: PPUSH
74834: CALL_OW 1
74838: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74839: LD_VAR 0 2
74843: PPUSH
74844: LD_INT 107
74846: PPUSH
74847: CALL 65942 0 2
// continue ;
74851: GO 74762
// end ; target := [ ] ;
74853: LD_ADDR_VAR 0 6
74857: PUSH
74858: EMPTY
74859: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74860: LD_ADDR_VAR 0 3
74864: PUSH
74865: DOUBLE
74866: LD_EXP 52
74870: PUSH
74871: LD_VAR 0 2
74875: ARRAY
74876: INC
74877: ST_TO_ADDR
74878: LD_INT 1
74880: PUSH
74881: FOR_DOWNTO
74882: IFFALSE 75142
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74884: LD_EXP 52
74888: PUSH
74889: LD_VAR 0 2
74893: ARRAY
74894: PUSH
74895: LD_VAR 0 3
74899: ARRAY
74900: PUSH
74901: LD_INT 2
74903: ARRAY
74904: PPUSH
74905: LD_EXP 52
74909: PUSH
74910: LD_VAR 0 2
74914: ARRAY
74915: PUSH
74916: LD_VAR 0 3
74920: ARRAY
74921: PUSH
74922: LD_INT 3
74924: ARRAY
74925: PPUSH
74926: CALL_OW 488
74930: PUSH
74931: LD_EXP 52
74935: PUSH
74936: LD_VAR 0 2
74940: ARRAY
74941: PUSH
74942: LD_VAR 0 3
74946: ARRAY
74947: PUSH
74948: LD_INT 2
74950: ARRAY
74951: PPUSH
74952: LD_EXP 52
74956: PUSH
74957: LD_VAR 0 2
74961: ARRAY
74962: PUSH
74963: LD_VAR 0 3
74967: ARRAY
74968: PUSH
74969: LD_INT 3
74971: ARRAY
74972: PPUSH
74973: CALL_OW 284
74977: PUSH
74978: LD_INT 0
74980: EQUAL
74981: AND
74982: IFFALSE 75037
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
74984: LD_ADDR_VAR 0 5
74988: PUSH
74989: LD_EXP 52
74993: PUSH
74994: LD_VAR 0 2
74998: ARRAY
74999: PPUSH
75000: LD_VAR 0 3
75004: PPUSH
75005: CALL_OW 3
75009: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75010: LD_ADDR_EXP 52
75014: PUSH
75015: LD_EXP 52
75019: PPUSH
75020: LD_VAR 0 2
75024: PPUSH
75025: LD_VAR 0 5
75029: PPUSH
75030: CALL_OW 1
75034: ST_TO_ADDR
// continue ;
75035: GO 74881
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75037: LD_EXP 36
75041: PUSH
75042: LD_VAR 0 2
75046: ARRAY
75047: PUSH
75048: LD_INT 1
75050: ARRAY
75051: PPUSH
75052: CALL_OW 255
75056: PPUSH
75057: LD_EXP 52
75061: PUSH
75062: LD_VAR 0 2
75066: ARRAY
75067: PUSH
75068: LD_VAR 0 3
75072: ARRAY
75073: PUSH
75074: LD_INT 2
75076: ARRAY
75077: PPUSH
75078: LD_EXP 52
75082: PUSH
75083: LD_VAR 0 2
75087: ARRAY
75088: PUSH
75089: LD_VAR 0 3
75093: ARRAY
75094: PUSH
75095: LD_INT 3
75097: ARRAY
75098: PPUSH
75099: LD_INT 30
75101: PPUSH
75102: CALL 26900 0 4
75106: PUSH
75107: LD_INT 4
75109: ARRAY
75110: PUSH
75111: LD_INT 0
75113: EQUAL
75114: IFFALSE 75140
// begin target := mc_crates [ i ] [ j ] ;
75116: LD_ADDR_VAR 0 6
75120: PUSH
75121: LD_EXP 52
75125: PUSH
75126: LD_VAR 0 2
75130: ARRAY
75131: PUSH
75132: LD_VAR 0 3
75136: ARRAY
75137: ST_TO_ADDR
// break ;
75138: GO 75142
// end ; end ;
75140: GO 74881
75142: POP
75143: POP
// if not target then
75144: LD_VAR 0 6
75148: NOT
75149: IFFALSE 75153
// continue ;
75151: GO 74762
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75153: LD_ADDR_VAR 0 7
75157: PUSH
75158: LD_EXP 55
75162: PUSH
75163: LD_VAR 0 2
75167: ARRAY
75168: PPUSH
75169: LD_INT 2
75171: PUSH
75172: LD_INT 3
75174: PUSH
75175: LD_INT 58
75177: PUSH
75178: EMPTY
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 61
75187: PUSH
75188: EMPTY
75189: LIST
75190: PUSH
75191: LD_INT 33
75193: PUSH
75194: LD_INT 5
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 33
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 2
75220: PUSH
75221: LD_INT 34
75223: PUSH
75224: LD_INT 32
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 34
75233: PUSH
75234: LD_INT 51
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 34
75243: PUSH
75244: LD_INT 12
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PPUSH
75261: CALL_OW 72
75265: ST_TO_ADDR
// if not cargo then
75266: LD_VAR 0 7
75270: NOT
75271: IFFALSE 75914
// begin if mc_crates_collector [ i ] < 5 then
75273: LD_EXP 53
75277: PUSH
75278: LD_VAR 0 2
75282: ARRAY
75283: PUSH
75284: LD_INT 5
75286: LESS
75287: IFFALSE 75653
// begin if mc_ape [ i ] then
75289: LD_EXP 65
75293: PUSH
75294: LD_VAR 0 2
75298: ARRAY
75299: IFFALSE 75346
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75301: LD_ADDR_VAR 0 5
75305: PUSH
75306: LD_EXP 65
75310: PUSH
75311: LD_VAR 0 2
75315: ARRAY
75316: PPUSH
75317: LD_INT 25
75319: PUSH
75320: LD_INT 16
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 24
75329: PUSH
75330: LD_INT 750
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PPUSH
75341: CALL_OW 72
75345: ST_TO_ADDR
// if not tmp then
75346: LD_VAR 0 5
75350: NOT
75351: IFFALSE 75398
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75353: LD_ADDR_VAR 0 5
75357: PUSH
75358: LD_EXP 36
75362: PUSH
75363: LD_VAR 0 2
75367: ARRAY
75368: PPUSH
75369: LD_INT 25
75371: PUSH
75372: LD_INT 2
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 24
75381: PUSH
75382: LD_INT 750
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PPUSH
75393: CALL_OW 72
75397: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75398: LD_EXP 65
75402: PUSH
75403: LD_VAR 0 2
75407: ARRAY
75408: PUSH
75409: LD_EXP 36
75413: PUSH
75414: LD_VAR 0 2
75418: ARRAY
75419: PPUSH
75420: LD_INT 25
75422: PUSH
75423: LD_INT 2
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 24
75432: PUSH
75433: LD_INT 750
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PPUSH
75444: CALL_OW 72
75448: AND
75449: PUSH
75450: LD_VAR 0 5
75454: PUSH
75455: LD_INT 5
75457: LESS
75458: AND
75459: IFFALSE 75541
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
75461: LD_ADDR_VAR 0 3
75465: PUSH
75466: LD_EXP 36
75470: PUSH
75471: LD_VAR 0 2
75475: ARRAY
75476: PPUSH
75477: LD_INT 25
75479: PUSH
75480: LD_INT 2
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 24
75489: PUSH
75490: LD_INT 750
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PPUSH
75501: CALL_OW 72
75505: PUSH
75506: FOR_IN
75507: IFFALSE 75539
// begin tmp := tmp union j ;
75509: LD_ADDR_VAR 0 5
75513: PUSH
75514: LD_VAR 0 5
75518: PUSH
75519: LD_VAR 0 3
75523: UNION
75524: ST_TO_ADDR
// if tmp >= 5 then
75525: LD_VAR 0 5
75529: PUSH
75530: LD_INT 5
75532: GREATEREQUAL
75533: IFFALSE 75537
// break ;
75535: GO 75539
// end ;
75537: GO 75506
75539: POP
75540: POP
// end ; if not tmp then
75541: LD_VAR 0 5
75545: NOT
75546: IFFALSE 75550
// continue ;
75548: GO 74762
// for j in tmp do
75550: LD_ADDR_VAR 0 3
75554: PUSH
75555: LD_VAR 0 5
75559: PUSH
75560: FOR_IN
75561: IFFALSE 75651
// if not GetTag ( j ) then
75563: LD_VAR 0 3
75567: PPUSH
75568: CALL_OW 110
75572: NOT
75573: IFFALSE 75649
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75575: LD_ADDR_EXP 53
75579: PUSH
75580: LD_EXP 53
75584: PPUSH
75585: LD_VAR 0 2
75589: PUSH
75590: LD_EXP 53
75594: PUSH
75595: LD_VAR 0 2
75599: ARRAY
75600: PUSH
75601: LD_INT 1
75603: PLUS
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PPUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL 26004 0 3
75618: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75619: LD_VAR 0 3
75623: PPUSH
75624: LD_INT 107
75626: PPUSH
75627: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
75631: LD_EXP 53
75635: PUSH
75636: LD_VAR 0 2
75640: ARRAY
75641: PUSH
75642: LD_INT 5
75644: GREATEREQUAL
75645: IFFALSE 75649
// break ;
75647: GO 75651
// end ;
75649: GO 75560
75651: POP
75652: POP
// end ; if mc_crates_collector [ i ] and target then
75653: LD_EXP 53
75657: PUSH
75658: LD_VAR 0 2
75662: ARRAY
75663: PUSH
75664: LD_VAR 0 6
75668: AND
75669: IFFALSE 75912
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75671: LD_EXP 53
75675: PUSH
75676: LD_VAR 0 2
75680: ARRAY
75681: PUSH
75682: LD_VAR 0 6
75686: PUSH
75687: LD_INT 1
75689: ARRAY
75690: LESS
75691: IFFALSE 75711
// tmp := mc_crates_collector [ i ] else
75693: LD_ADDR_VAR 0 5
75697: PUSH
75698: LD_EXP 53
75702: PUSH
75703: LD_VAR 0 2
75707: ARRAY
75708: ST_TO_ADDR
75709: GO 75725
// tmp := target [ 1 ] ;
75711: LD_ADDR_VAR 0 5
75715: PUSH
75716: LD_VAR 0 6
75720: PUSH
75721: LD_INT 1
75723: ARRAY
75724: ST_TO_ADDR
// k := 0 ;
75725: LD_ADDR_VAR 0 4
75729: PUSH
75730: LD_INT 0
75732: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75733: LD_ADDR_VAR 0 3
75737: PUSH
75738: LD_EXP 53
75742: PUSH
75743: LD_VAR 0 2
75747: ARRAY
75748: PUSH
75749: FOR_IN
75750: IFFALSE 75910
// begin k := k + 1 ;
75752: LD_ADDR_VAR 0 4
75756: PUSH
75757: LD_VAR 0 4
75761: PUSH
75762: LD_INT 1
75764: PLUS
75765: ST_TO_ADDR
// if k > tmp then
75766: LD_VAR 0 4
75770: PUSH
75771: LD_VAR 0 5
75775: GREATER
75776: IFFALSE 75780
// break ;
75778: GO 75910
// if not GetClass ( j ) in [ 2 , 16 ] then
75780: LD_VAR 0 3
75784: PPUSH
75785: CALL_OW 257
75789: PUSH
75790: LD_INT 2
75792: PUSH
75793: LD_INT 16
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: IN
75800: NOT
75801: IFFALSE 75854
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75803: LD_ADDR_EXP 53
75807: PUSH
75808: LD_EXP 53
75812: PPUSH
75813: LD_VAR 0 2
75817: PPUSH
75818: LD_EXP 53
75822: PUSH
75823: LD_VAR 0 2
75827: ARRAY
75828: PUSH
75829: LD_VAR 0 3
75833: DIFF
75834: PPUSH
75835: CALL_OW 1
75839: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75840: LD_VAR 0 3
75844: PPUSH
75845: LD_INT 0
75847: PPUSH
75848: CALL_OW 109
// continue ;
75852: GO 75749
// end ; if IsInUnit ( j ) then
75854: LD_VAR 0 3
75858: PPUSH
75859: CALL_OW 310
75863: IFFALSE 75874
// ComExitBuilding ( j ) ;
75865: LD_VAR 0 3
75869: PPUSH
75870: CALL_OW 122
// wait ( 3 ) ;
75874: LD_INT 3
75876: PPUSH
75877: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75881: LD_VAR 0 3
75885: PPUSH
75886: LD_VAR 0 6
75890: PUSH
75891: LD_INT 2
75893: ARRAY
75894: PPUSH
75895: LD_VAR 0 6
75899: PUSH
75900: LD_INT 3
75902: ARRAY
75903: PPUSH
75904: CALL_OW 117
// end ;
75908: GO 75749
75910: POP
75911: POP
// end ; end else
75912: GO 76474
// begin for j in cargo do
75914: LD_ADDR_VAR 0 3
75918: PUSH
75919: LD_VAR 0 7
75923: PUSH
75924: FOR_IN
75925: IFFALSE 76472
// begin if GetTag ( j ) <> 0 then
75927: LD_VAR 0 3
75931: PPUSH
75932: CALL_OW 110
75936: PUSH
75937: LD_INT 0
75939: NONEQUAL
75940: IFFALSE 75944
// continue ;
75942: GO 75924
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
75944: LD_VAR 0 3
75948: PPUSH
75949: CALL_OW 256
75953: PUSH
75954: LD_INT 1000
75956: LESS
75957: PUSH
75958: LD_VAR 0 3
75962: PPUSH
75963: LD_EXP 60
75967: PUSH
75968: LD_VAR 0 2
75972: ARRAY
75973: PPUSH
75974: CALL_OW 308
75978: NOT
75979: AND
75980: IFFALSE 76002
// ComMoveToArea ( j , mc_parking [ i ] ) ;
75982: LD_VAR 0 3
75986: PPUSH
75987: LD_EXP 60
75991: PUSH
75992: LD_VAR 0 2
75996: ARRAY
75997: PPUSH
75998: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76002: LD_VAR 0 3
76006: PPUSH
76007: CALL_OW 256
76011: PUSH
76012: LD_INT 1000
76014: LESS
76015: PUSH
76016: LD_VAR 0 3
76020: PPUSH
76021: LD_EXP 60
76025: PUSH
76026: LD_VAR 0 2
76030: ARRAY
76031: PPUSH
76032: CALL_OW 308
76036: AND
76037: IFFALSE 76041
// continue ;
76039: GO 75924
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76041: LD_VAR 0 3
76045: PPUSH
76046: CALL_OW 262
76050: PUSH
76051: LD_INT 2
76053: EQUAL
76054: PUSH
76055: LD_VAR 0 3
76059: PPUSH
76060: CALL_OW 261
76064: PUSH
76065: LD_INT 15
76067: LESS
76068: AND
76069: IFFALSE 76073
// continue ;
76071: GO 75924
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76073: LD_VAR 0 3
76077: PPUSH
76078: CALL_OW 262
76082: PUSH
76083: LD_INT 1
76085: EQUAL
76086: PUSH
76087: LD_VAR 0 3
76091: PPUSH
76092: CALL_OW 261
76096: PUSH
76097: LD_INT 10
76099: LESS
76100: AND
76101: IFFALSE 76411
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76103: LD_ADDR_VAR 0 8
76107: PUSH
76108: LD_EXP 36
76112: PUSH
76113: LD_VAR 0 2
76117: ARRAY
76118: PPUSH
76119: LD_INT 2
76121: PUSH
76122: LD_INT 30
76124: PUSH
76125: LD_INT 0
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 30
76134: PUSH
76135: LD_INT 1
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: PPUSH
76147: CALL_OW 72
76151: ST_TO_ADDR
// if not depot then
76152: LD_VAR 0 8
76156: NOT
76157: IFFALSE 76161
// continue ;
76159: GO 75924
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76161: LD_VAR 0 3
76165: PPUSH
76166: LD_VAR 0 8
76170: PPUSH
76171: LD_VAR 0 3
76175: PPUSH
76176: CALL_OW 74
76180: PPUSH
76181: CALL_OW 296
76185: PUSH
76186: LD_INT 6
76188: LESS
76189: IFFALSE 76205
// SetFuel ( j , 100 ) else
76191: LD_VAR 0 3
76195: PPUSH
76196: LD_INT 100
76198: PPUSH
76199: CALL_OW 240
76203: GO 76411
// if GetFuel ( j ) = 0 then
76205: LD_VAR 0 3
76209: PPUSH
76210: CALL_OW 261
76214: PUSH
76215: LD_INT 0
76217: EQUAL
76218: IFFALSE 76411
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76220: LD_ADDR_EXP 55
76224: PUSH
76225: LD_EXP 55
76229: PPUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: LD_EXP 55
76239: PUSH
76240: LD_VAR 0 2
76244: ARRAY
76245: PUSH
76246: LD_VAR 0 3
76250: DIFF
76251: PPUSH
76252: CALL_OW 1
76256: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76257: LD_VAR 0 3
76261: PPUSH
76262: CALL_OW 263
76266: PUSH
76267: LD_INT 1
76269: EQUAL
76270: IFFALSE 76286
// ComExitVehicle ( IsInUnit ( j ) ) ;
76272: LD_VAR 0 3
76276: PPUSH
76277: CALL_OW 310
76281: PPUSH
76282: CALL_OW 121
// if GetControl ( j ) = control_remote then
76286: LD_VAR 0 3
76290: PPUSH
76291: CALL_OW 263
76295: PUSH
76296: LD_INT 2
76298: EQUAL
76299: IFFALSE 76310
// ComUnlink ( j ) ;
76301: LD_VAR 0 3
76305: PPUSH
76306: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76310: LD_ADDR_VAR 0 9
76314: PUSH
76315: LD_VAR 0 2
76319: PPUSH
76320: LD_INT 3
76322: PPUSH
76323: CALL 85457 0 2
76327: ST_TO_ADDR
// if fac then
76328: LD_VAR 0 9
76332: IFFALSE 76409
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76334: LD_ADDR_VAR 0 10
76338: PUSH
76339: LD_VAR 0 9
76343: PPUSH
76344: LD_VAR 0 3
76348: PPUSH
76349: CALL_OW 265
76353: PPUSH
76354: LD_VAR 0 3
76358: PPUSH
76359: CALL_OW 262
76363: PPUSH
76364: LD_VAR 0 3
76368: PPUSH
76369: CALL_OW 263
76373: PPUSH
76374: LD_VAR 0 3
76378: PPUSH
76379: CALL_OW 264
76383: PPUSH
76384: CALL 23597 0 5
76388: ST_TO_ADDR
// if components then
76389: LD_VAR 0 10
76393: IFFALSE 76409
// MC_InsertProduceList ( i , components ) ;
76395: LD_VAR 0 2
76399: PPUSH
76400: LD_VAR 0 10
76404: PPUSH
76405: CALL 85085 0 2
// end ; continue ;
76409: GO 75924
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76411: LD_VAR 0 3
76415: PPUSH
76416: LD_INT 1
76418: PPUSH
76419: CALL_OW 289
76423: PUSH
76424: LD_INT 100
76426: LESS
76427: PUSH
76428: LD_VAR 0 3
76432: PPUSH
76433: CALL_OW 314
76437: NOT
76438: AND
76439: IFFALSE 76468
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76441: LD_VAR 0 3
76445: PPUSH
76446: LD_VAR 0 6
76450: PUSH
76451: LD_INT 2
76453: ARRAY
76454: PPUSH
76455: LD_VAR 0 6
76459: PUSH
76460: LD_INT 3
76462: ARRAY
76463: PPUSH
76464: CALL_OW 117
// break ;
76468: GO 76472
// end ;
76470: GO 75924
76472: POP
76473: POP
// end ; end ;
76474: GO 74762
76476: POP
76477: POP
// end ;
76478: LD_VAR 0 1
76482: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76483: LD_INT 0
76485: PPUSH
76486: PPUSH
76487: PPUSH
76488: PPUSH
// if not mc_bases then
76489: LD_EXP 36
76493: NOT
76494: IFFALSE 76498
// exit ;
76496: GO 76659
// for i = 1 to mc_bases do
76498: LD_ADDR_VAR 0 2
76502: PUSH
76503: DOUBLE
76504: LD_INT 1
76506: DEC
76507: ST_TO_ADDR
76508: LD_EXP 36
76512: PUSH
76513: FOR_TO
76514: IFFALSE 76657
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76516: LD_ADDR_VAR 0 4
76520: PUSH
76521: LD_EXP 55
76525: PUSH
76526: LD_VAR 0 2
76530: ARRAY
76531: PUSH
76532: LD_EXP 58
76536: PUSH
76537: LD_VAR 0 2
76541: ARRAY
76542: UNION
76543: PPUSH
76544: LD_INT 33
76546: PUSH
76547: LD_INT 2
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PPUSH
76554: CALL_OW 72
76558: ST_TO_ADDR
// if tmp then
76559: LD_VAR 0 4
76563: IFFALSE 76655
// for j in tmp do
76565: LD_ADDR_VAR 0 3
76569: PUSH
76570: LD_VAR 0 4
76574: PUSH
76575: FOR_IN
76576: IFFALSE 76653
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76578: LD_VAR 0 3
76582: PPUSH
76583: CALL_OW 312
76587: NOT
76588: PUSH
76589: LD_VAR 0 3
76593: PPUSH
76594: CALL_OW 256
76598: PUSH
76599: LD_INT 250
76601: GREATEREQUAL
76602: AND
76603: IFFALSE 76616
// Connect ( j ) else
76605: LD_VAR 0 3
76609: PPUSH
76610: CALL 28937 0 1
76614: GO 76651
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76616: LD_VAR 0 3
76620: PPUSH
76621: CALL_OW 256
76625: PUSH
76626: LD_INT 250
76628: LESS
76629: PUSH
76630: LD_VAR 0 3
76634: PPUSH
76635: CALL_OW 312
76639: AND
76640: IFFALSE 76651
// ComUnlink ( j ) ;
76642: LD_VAR 0 3
76646: PPUSH
76647: CALL_OW 136
76651: GO 76575
76653: POP
76654: POP
// end ;
76655: GO 76513
76657: POP
76658: POP
// end ;
76659: LD_VAR 0 1
76663: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76664: LD_INT 0
76666: PPUSH
76667: PPUSH
76668: PPUSH
76669: PPUSH
76670: PPUSH
// if not mc_bases then
76671: LD_EXP 36
76675: NOT
76676: IFFALSE 76680
// exit ;
76678: GO 77140
// for i = 1 to mc_bases do
76680: LD_ADDR_VAR 0 2
76684: PUSH
76685: DOUBLE
76686: LD_INT 1
76688: DEC
76689: ST_TO_ADDR
76690: LD_EXP 36
76694: PUSH
76695: FOR_TO
76696: IFFALSE 77138
// begin if not mc_produce [ i ] then
76698: LD_EXP 57
76702: PUSH
76703: LD_VAR 0 2
76707: ARRAY
76708: NOT
76709: IFFALSE 76713
// continue ;
76711: GO 76695
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76713: LD_ADDR_VAR 0 5
76717: PUSH
76718: LD_EXP 36
76722: PUSH
76723: LD_VAR 0 2
76727: ARRAY
76728: PPUSH
76729: LD_INT 30
76731: PUSH
76732: LD_INT 3
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PPUSH
76739: CALL_OW 72
76743: ST_TO_ADDR
// if not fac then
76744: LD_VAR 0 5
76748: NOT
76749: IFFALSE 76753
// continue ;
76751: GO 76695
// for j in fac do
76753: LD_ADDR_VAR 0 3
76757: PUSH
76758: LD_VAR 0 5
76762: PUSH
76763: FOR_IN
76764: IFFALSE 77134
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76766: LD_VAR 0 3
76770: PPUSH
76771: CALL_OW 461
76775: PUSH
76776: LD_INT 2
76778: NONEQUAL
76779: PUSH
76780: LD_VAR 0 3
76784: PPUSH
76785: LD_INT 15
76787: PPUSH
76788: CALL 28597 0 2
76792: PUSH
76793: LD_INT 4
76795: ARRAY
76796: OR
76797: PUSH
76798: LD_VAR 0 3
76802: PPUSH
76803: CALL_OW 313
76807: PUSH
76808: LD_INT 0
76810: EQUAL
76811: OR
76812: IFFALSE 76816
// continue ;
76814: GO 76763
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76816: LD_VAR 0 3
76820: PPUSH
76821: LD_EXP 57
76825: PUSH
76826: LD_VAR 0 2
76830: ARRAY
76831: PUSH
76832: LD_INT 1
76834: ARRAY
76835: PUSH
76836: LD_INT 1
76838: ARRAY
76839: PPUSH
76840: LD_EXP 57
76844: PUSH
76845: LD_VAR 0 2
76849: ARRAY
76850: PUSH
76851: LD_INT 1
76853: ARRAY
76854: PUSH
76855: LD_INT 2
76857: ARRAY
76858: PPUSH
76859: LD_EXP 57
76863: PUSH
76864: LD_VAR 0 2
76868: ARRAY
76869: PUSH
76870: LD_INT 1
76872: ARRAY
76873: PUSH
76874: LD_INT 3
76876: ARRAY
76877: PPUSH
76878: LD_EXP 57
76882: PUSH
76883: LD_VAR 0 2
76887: ARRAY
76888: PUSH
76889: LD_INT 1
76891: ARRAY
76892: PUSH
76893: LD_INT 4
76895: ARRAY
76896: PPUSH
76897: CALL_OW 448
76901: PUSH
76902: LD_VAR 0 3
76906: PPUSH
76907: LD_EXP 57
76911: PUSH
76912: LD_VAR 0 2
76916: ARRAY
76917: PUSH
76918: LD_INT 1
76920: ARRAY
76921: PUSH
76922: LD_INT 1
76924: ARRAY
76925: PUSH
76926: LD_EXP 57
76930: PUSH
76931: LD_VAR 0 2
76935: ARRAY
76936: PUSH
76937: LD_INT 1
76939: ARRAY
76940: PUSH
76941: LD_INT 2
76943: ARRAY
76944: PUSH
76945: LD_EXP 57
76949: PUSH
76950: LD_VAR 0 2
76954: ARRAY
76955: PUSH
76956: LD_INT 1
76958: ARRAY
76959: PUSH
76960: LD_INT 3
76962: ARRAY
76963: PUSH
76964: LD_EXP 57
76968: PUSH
76969: LD_VAR 0 2
76973: ARRAY
76974: PUSH
76975: LD_INT 1
76977: ARRAY
76978: PUSH
76979: LD_INT 4
76981: ARRAY
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: PPUSH
76989: CALL 32268 0 2
76993: AND
76994: IFFALSE 77132
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
76996: LD_VAR 0 3
77000: PPUSH
77001: LD_EXP 57
77005: PUSH
77006: LD_VAR 0 2
77010: ARRAY
77011: PUSH
77012: LD_INT 1
77014: ARRAY
77015: PUSH
77016: LD_INT 1
77018: ARRAY
77019: PPUSH
77020: LD_EXP 57
77024: PUSH
77025: LD_VAR 0 2
77029: ARRAY
77030: PUSH
77031: LD_INT 1
77033: ARRAY
77034: PUSH
77035: LD_INT 2
77037: ARRAY
77038: PPUSH
77039: LD_EXP 57
77043: PUSH
77044: LD_VAR 0 2
77048: ARRAY
77049: PUSH
77050: LD_INT 1
77052: ARRAY
77053: PUSH
77054: LD_INT 3
77056: ARRAY
77057: PPUSH
77058: LD_EXP 57
77062: PUSH
77063: LD_VAR 0 2
77067: ARRAY
77068: PUSH
77069: LD_INT 1
77071: ARRAY
77072: PUSH
77073: LD_INT 4
77075: ARRAY
77076: PPUSH
77077: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77081: LD_ADDR_VAR 0 4
77085: PUSH
77086: LD_EXP 57
77090: PUSH
77091: LD_VAR 0 2
77095: ARRAY
77096: PPUSH
77097: LD_INT 1
77099: PPUSH
77100: CALL_OW 3
77104: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77105: LD_ADDR_EXP 57
77109: PUSH
77110: LD_EXP 57
77114: PPUSH
77115: LD_VAR 0 2
77119: PPUSH
77120: LD_VAR 0 4
77124: PPUSH
77125: CALL_OW 1
77129: ST_TO_ADDR
// break ;
77130: GO 77134
// end ; end ;
77132: GO 76763
77134: POP
77135: POP
// end ;
77136: GO 76695
77138: POP
77139: POP
// end ;
77140: LD_VAR 0 1
77144: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77145: LD_INT 0
77147: PPUSH
77148: PPUSH
77149: PPUSH
// if not mc_bases then
77150: LD_EXP 36
77154: NOT
77155: IFFALSE 77159
// exit ;
77157: GO 77248
// for i = 1 to mc_bases do
77159: LD_ADDR_VAR 0 2
77163: PUSH
77164: DOUBLE
77165: LD_INT 1
77167: DEC
77168: ST_TO_ADDR
77169: LD_EXP 36
77173: PUSH
77174: FOR_TO
77175: IFFALSE 77246
// begin if mc_attack [ i ] then
77177: LD_EXP 56
77181: PUSH
77182: LD_VAR 0 2
77186: ARRAY
77187: IFFALSE 77244
// begin tmp := mc_attack [ i ] [ 1 ] ;
77189: LD_ADDR_VAR 0 3
77193: PUSH
77194: LD_EXP 56
77198: PUSH
77199: LD_VAR 0 2
77203: ARRAY
77204: PUSH
77205: LD_INT 1
77207: ARRAY
77208: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77209: LD_ADDR_EXP 56
77213: PUSH
77214: LD_EXP 56
77218: PPUSH
77219: LD_VAR 0 2
77223: PPUSH
77224: EMPTY
77225: PPUSH
77226: CALL_OW 1
77230: ST_TO_ADDR
// Attack ( tmp ) ;
77231: LD_VAR 0 3
77235: PPUSH
77236: CALL 54457 0 1
// exit ;
77240: POP
77241: POP
77242: GO 77248
// end ; end ;
77244: GO 77174
77246: POP
77247: POP
// end ;
77248: LD_VAR 0 1
77252: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77253: LD_INT 0
77255: PPUSH
77256: PPUSH
77257: PPUSH
77258: PPUSH
77259: PPUSH
77260: PPUSH
77261: PPUSH
// if not mc_bases then
77262: LD_EXP 36
77266: NOT
77267: IFFALSE 77271
// exit ;
77269: GO 77853
// for i = 1 to mc_bases do
77271: LD_ADDR_VAR 0 2
77275: PUSH
77276: DOUBLE
77277: LD_INT 1
77279: DEC
77280: ST_TO_ADDR
77281: LD_EXP 36
77285: PUSH
77286: FOR_TO
77287: IFFALSE 77851
// begin if not mc_bases [ i ] then
77289: LD_EXP 36
77293: PUSH
77294: LD_VAR 0 2
77298: ARRAY
77299: NOT
77300: IFFALSE 77304
// continue ;
77302: GO 77286
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77304: LD_ADDR_VAR 0 7
77308: PUSH
77309: LD_EXP 36
77313: PUSH
77314: LD_VAR 0 2
77318: ARRAY
77319: PUSH
77320: LD_INT 1
77322: ARRAY
77323: PPUSH
77324: CALL 22901 0 1
77328: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77329: LD_ADDR_EXP 59
77333: PUSH
77334: LD_EXP 59
77338: PPUSH
77339: LD_VAR 0 2
77343: PPUSH
77344: LD_EXP 36
77348: PUSH
77349: LD_VAR 0 2
77353: ARRAY
77354: PUSH
77355: LD_INT 1
77357: ARRAY
77358: PPUSH
77359: CALL_OW 255
77363: PPUSH
77364: LD_EXP 61
77368: PUSH
77369: LD_VAR 0 2
77373: ARRAY
77374: PPUSH
77375: CALL 20898 0 2
77379: PPUSH
77380: CALL_OW 1
77384: ST_TO_ADDR
// if not mc_scan [ i ] then
77385: LD_EXP 59
77389: PUSH
77390: LD_VAR 0 2
77394: ARRAY
77395: NOT
77396: IFFALSE 77551
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77398: LD_ADDR_VAR 0 4
77402: PUSH
77403: LD_EXP 36
77407: PUSH
77408: LD_VAR 0 2
77412: ARRAY
77413: PPUSH
77414: LD_INT 2
77416: PUSH
77417: LD_INT 25
77419: PUSH
77420: LD_INT 5
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PUSH
77427: LD_INT 25
77429: PUSH
77430: LD_INT 8
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 25
77439: PUSH
77440: LD_INT 9
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: PPUSH
77453: CALL_OW 72
77457: ST_TO_ADDR
// if not tmp then
77458: LD_VAR 0 4
77462: NOT
77463: IFFALSE 77467
// continue ;
77465: GO 77286
// for j in tmp do
77467: LD_ADDR_VAR 0 3
77471: PUSH
77472: LD_VAR 0 4
77476: PUSH
77477: FOR_IN
77478: IFFALSE 77549
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77480: LD_VAR 0 3
77484: PPUSH
77485: CALL_OW 310
77489: PPUSH
77490: CALL_OW 266
77494: PUSH
77495: LD_INT 5
77497: EQUAL
77498: PUSH
77499: LD_VAR 0 3
77503: PPUSH
77504: CALL_OW 257
77508: PUSH
77509: LD_INT 1
77511: EQUAL
77512: AND
77513: PUSH
77514: LD_VAR 0 3
77518: PPUSH
77519: CALL_OW 459
77523: NOT
77524: AND
77525: PUSH
77526: LD_VAR 0 7
77530: AND
77531: IFFALSE 77547
// ComChangeProfession ( j , class ) ;
77533: LD_VAR 0 3
77537: PPUSH
77538: LD_VAR 0 7
77542: PPUSH
77543: CALL_OW 123
77547: GO 77477
77549: POP
77550: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77551: LD_EXP 59
77555: PUSH
77556: LD_VAR 0 2
77560: ARRAY
77561: PUSH
77562: LD_EXP 58
77566: PUSH
77567: LD_VAR 0 2
77571: ARRAY
77572: NOT
77573: AND
77574: PUSH
77575: LD_EXP 36
77579: PUSH
77580: LD_VAR 0 2
77584: ARRAY
77585: PPUSH
77586: LD_INT 30
77588: PUSH
77589: LD_INT 32
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PPUSH
77596: CALL_OW 72
77600: NOT
77601: AND
77602: PUSH
77603: LD_EXP 36
77607: PUSH
77608: LD_VAR 0 2
77612: ARRAY
77613: PPUSH
77614: LD_INT 2
77616: PUSH
77617: LD_INT 30
77619: PUSH
77620: LD_INT 4
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 30
77629: PUSH
77630: LD_INT 5
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: LIST
77641: PPUSH
77642: CALL_OW 72
77646: NOT
77647: AND
77648: IFFALSE 77780
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77650: LD_ADDR_VAR 0 4
77654: PUSH
77655: LD_EXP 36
77659: PUSH
77660: LD_VAR 0 2
77664: ARRAY
77665: PPUSH
77666: LD_INT 2
77668: PUSH
77669: LD_INT 25
77671: PUSH
77672: LD_INT 1
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PUSH
77679: LD_INT 25
77681: PUSH
77682: LD_INT 5
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: LD_INT 25
77691: PUSH
77692: LD_INT 8
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: PUSH
77699: LD_INT 25
77701: PUSH
77702: LD_INT 9
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: PPUSH
77716: CALL_OW 72
77720: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77721: LD_ADDR_VAR 0 4
77725: PUSH
77726: LD_VAR 0 4
77730: PUSH
77731: LD_VAR 0 4
77735: PPUSH
77736: LD_INT 18
77738: PPUSH
77739: CALL 59240 0 2
77743: DIFF
77744: ST_TO_ADDR
// if tmp then
77745: LD_VAR 0 4
77749: IFFALSE 77780
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77751: LD_VAR 0 2
77755: PPUSH
77756: LD_VAR 0 4
77760: PPUSH
77761: LD_EXP 61
77765: PUSH
77766: LD_VAR 0 2
77770: ARRAY
77771: PPUSH
77772: CALL 20933 0 3
// exit ;
77776: POP
77777: POP
77778: GO 77853
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77780: LD_EXP 59
77784: PUSH
77785: LD_VAR 0 2
77789: ARRAY
77790: PUSH
77791: LD_EXP 58
77795: PUSH
77796: LD_VAR 0 2
77800: ARRAY
77801: AND
77802: IFFALSE 77849
// begin tmp := mc_defender [ i ] ;
77804: LD_ADDR_VAR 0 4
77808: PUSH
77809: LD_EXP 58
77813: PUSH
77814: LD_VAR 0 2
77818: ARRAY
77819: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77820: LD_VAR 0 2
77824: PPUSH
77825: LD_VAR 0 4
77829: PPUSH
77830: LD_EXP 59
77834: PUSH
77835: LD_VAR 0 2
77839: ARRAY
77840: PPUSH
77841: CALL 21431 0 3
// exit ;
77845: POP
77846: POP
77847: GO 77853
// end ; end ;
77849: GO 77286
77851: POP
77852: POP
// end ;
77853: LD_VAR 0 1
77857: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77858: LD_INT 0
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
77869: PPUSH
77870: PPUSH
// if not mc_bases then
77871: LD_EXP 36
77875: NOT
77876: IFFALSE 77880
// exit ;
77878: GO 78967
// for i = 1 to mc_bases do
77880: LD_ADDR_VAR 0 2
77884: PUSH
77885: DOUBLE
77886: LD_INT 1
77888: DEC
77889: ST_TO_ADDR
77890: LD_EXP 36
77894: PUSH
77895: FOR_TO
77896: IFFALSE 78965
// begin tmp := mc_lab [ i ] ;
77898: LD_ADDR_VAR 0 6
77902: PUSH
77903: LD_EXP 69
77907: PUSH
77908: LD_VAR 0 2
77912: ARRAY
77913: ST_TO_ADDR
// if not tmp then
77914: LD_VAR 0 6
77918: NOT
77919: IFFALSE 77923
// continue ;
77921: GO 77895
// idle_lab := 0 ;
77923: LD_ADDR_VAR 0 11
77927: PUSH
77928: LD_INT 0
77930: ST_TO_ADDR
// for j in tmp do
77931: LD_ADDR_VAR 0 3
77935: PUSH
77936: LD_VAR 0 6
77940: PUSH
77941: FOR_IN
77942: IFFALSE 78961
// begin researching := false ;
77944: LD_ADDR_VAR 0 10
77948: PUSH
77949: LD_INT 0
77951: ST_TO_ADDR
// side := GetSide ( j ) ;
77952: LD_ADDR_VAR 0 4
77956: PUSH
77957: LD_VAR 0 3
77961: PPUSH
77962: CALL_OW 255
77966: ST_TO_ADDR
// if not mc_tech [ side ] then
77967: LD_EXP 63
77971: PUSH
77972: LD_VAR 0 4
77976: ARRAY
77977: NOT
77978: IFFALSE 77982
// continue ;
77980: GO 77941
// if BuildingStatus ( j ) = bs_idle then
77982: LD_VAR 0 3
77986: PPUSH
77987: CALL_OW 461
77991: PUSH
77992: LD_INT 2
77994: EQUAL
77995: IFFALSE 78183
// begin if idle_lab and UnitsInside ( j ) < 6 then
77997: LD_VAR 0 11
78001: PUSH
78002: LD_VAR 0 3
78006: PPUSH
78007: CALL_OW 313
78011: PUSH
78012: LD_INT 6
78014: LESS
78015: AND
78016: IFFALSE 78087
// begin tmp2 := UnitsInside ( idle_lab ) ;
78018: LD_ADDR_VAR 0 9
78022: PUSH
78023: LD_VAR 0 11
78027: PPUSH
78028: CALL_OW 313
78032: ST_TO_ADDR
// if tmp2 then
78033: LD_VAR 0 9
78037: IFFALSE 78079
// for x in tmp2 do
78039: LD_ADDR_VAR 0 7
78043: PUSH
78044: LD_VAR 0 9
78048: PUSH
78049: FOR_IN
78050: IFFALSE 78077
// begin ComExitBuilding ( x ) ;
78052: LD_VAR 0 7
78056: PPUSH
78057: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78061: LD_VAR 0 7
78065: PPUSH
78066: LD_VAR 0 3
78070: PPUSH
78071: CALL_OW 180
// end ;
78075: GO 78049
78077: POP
78078: POP
// idle_lab := 0 ;
78079: LD_ADDR_VAR 0 11
78083: PUSH
78084: LD_INT 0
78086: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78087: LD_ADDR_VAR 0 5
78091: PUSH
78092: LD_EXP 63
78096: PUSH
78097: LD_VAR 0 4
78101: ARRAY
78102: PUSH
78103: FOR_IN
78104: IFFALSE 78164
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78106: LD_VAR 0 3
78110: PPUSH
78111: LD_VAR 0 5
78115: PPUSH
78116: CALL_OW 430
78120: PUSH
78121: LD_VAR 0 4
78125: PPUSH
78126: LD_VAR 0 5
78130: PPUSH
78131: CALL 20003 0 2
78135: AND
78136: IFFALSE 78162
// begin researching := true ;
78138: LD_ADDR_VAR 0 10
78142: PUSH
78143: LD_INT 1
78145: ST_TO_ADDR
// ComResearch ( j , t ) ;
78146: LD_VAR 0 3
78150: PPUSH
78151: LD_VAR 0 5
78155: PPUSH
78156: CALL_OW 124
// break ;
78160: GO 78164
// end ;
78162: GO 78103
78164: POP
78165: POP
// if not researching then
78166: LD_VAR 0 10
78170: NOT
78171: IFFALSE 78183
// idle_lab := j ;
78173: LD_ADDR_VAR 0 11
78177: PUSH
78178: LD_VAR 0 3
78182: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78183: LD_VAR 0 3
78187: PPUSH
78188: CALL_OW 461
78192: PUSH
78193: LD_INT 10
78195: EQUAL
78196: IFFALSE 78784
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78198: LD_EXP 65
78202: PUSH
78203: LD_VAR 0 2
78207: ARRAY
78208: NOT
78209: PUSH
78210: LD_EXP 66
78214: PUSH
78215: LD_VAR 0 2
78219: ARRAY
78220: NOT
78221: AND
78222: PUSH
78223: LD_EXP 63
78227: PUSH
78228: LD_VAR 0 4
78232: ARRAY
78233: PUSH
78234: LD_INT 1
78236: GREATER
78237: AND
78238: IFFALSE 78369
// begin ComCancel ( j ) ;
78240: LD_VAR 0 3
78244: PPUSH
78245: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78249: LD_ADDR_EXP 63
78253: PUSH
78254: LD_EXP 63
78258: PPUSH
78259: LD_VAR 0 4
78263: PPUSH
78264: LD_EXP 63
78268: PUSH
78269: LD_VAR 0 4
78273: ARRAY
78274: PPUSH
78275: LD_EXP 63
78279: PUSH
78280: LD_VAR 0 4
78284: ARRAY
78285: PUSH
78286: LD_INT 1
78288: MINUS
78289: PPUSH
78290: LD_EXP 63
78294: PUSH
78295: LD_VAR 0 4
78299: ARRAY
78300: PPUSH
78301: LD_INT 0
78303: PPUSH
78304: CALL 25422 0 4
78308: PPUSH
78309: CALL_OW 1
78313: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78314: LD_ADDR_EXP 63
78318: PUSH
78319: LD_EXP 63
78323: PPUSH
78324: LD_VAR 0 4
78328: PPUSH
78329: LD_EXP 63
78333: PUSH
78334: LD_VAR 0 4
78338: ARRAY
78339: PPUSH
78340: LD_EXP 63
78344: PUSH
78345: LD_VAR 0 4
78349: ARRAY
78350: PPUSH
78351: LD_INT 1
78353: PPUSH
78354: LD_INT 0
78356: PPUSH
78357: CALL 25422 0 4
78361: PPUSH
78362: CALL_OW 1
78366: ST_TO_ADDR
// continue ;
78367: GO 77941
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78369: LD_EXP 65
78373: PUSH
78374: LD_VAR 0 2
78378: ARRAY
78379: PUSH
78380: LD_EXP 66
78384: PUSH
78385: LD_VAR 0 2
78389: ARRAY
78390: NOT
78391: AND
78392: IFFALSE 78519
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78394: LD_ADDR_EXP 66
78398: PUSH
78399: LD_EXP 66
78403: PPUSH
78404: LD_VAR 0 2
78408: PUSH
78409: LD_EXP 66
78413: PUSH
78414: LD_VAR 0 2
78418: ARRAY
78419: PUSH
78420: LD_INT 1
78422: PLUS
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PPUSH
78428: LD_EXP 65
78432: PUSH
78433: LD_VAR 0 2
78437: ARRAY
78438: PUSH
78439: LD_INT 1
78441: ARRAY
78442: PPUSH
78443: CALL 26004 0 3
78447: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
78448: LD_EXP 65
78452: PUSH
78453: LD_VAR 0 2
78457: ARRAY
78458: PUSH
78459: LD_INT 1
78461: ARRAY
78462: PPUSH
78463: LD_INT 112
78465: PPUSH
78466: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78470: LD_ADDR_VAR 0 9
78474: PUSH
78475: LD_EXP 65
78479: PUSH
78480: LD_VAR 0 2
78484: ARRAY
78485: PPUSH
78486: LD_INT 1
78488: PPUSH
78489: CALL_OW 3
78493: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78494: LD_ADDR_EXP 65
78498: PUSH
78499: LD_EXP 65
78503: PPUSH
78504: LD_VAR 0 2
78508: PPUSH
78509: LD_VAR 0 9
78513: PPUSH
78514: CALL_OW 1
78518: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78519: LD_EXP 65
78523: PUSH
78524: LD_VAR 0 2
78528: ARRAY
78529: PUSH
78530: LD_EXP 66
78534: PUSH
78535: LD_VAR 0 2
78539: ARRAY
78540: AND
78541: PUSH
78542: LD_EXP 66
78546: PUSH
78547: LD_VAR 0 2
78551: ARRAY
78552: PUSH
78553: LD_INT 1
78555: ARRAY
78556: PPUSH
78557: CALL_OW 310
78561: NOT
78562: AND
78563: PUSH
78564: LD_VAR 0 3
78568: PPUSH
78569: CALL_OW 313
78573: PUSH
78574: LD_INT 6
78576: EQUAL
78577: AND
78578: IFFALSE 78634
// begin tmp2 := UnitsInside ( j ) ;
78580: LD_ADDR_VAR 0 9
78584: PUSH
78585: LD_VAR 0 3
78589: PPUSH
78590: CALL_OW 313
78594: ST_TO_ADDR
// if tmp2 = 6 then
78595: LD_VAR 0 9
78599: PUSH
78600: LD_INT 6
78602: EQUAL
78603: IFFALSE 78634
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78605: LD_VAR 0 9
78609: PUSH
78610: LD_INT 1
78612: ARRAY
78613: PPUSH
78614: LD_INT 112
78616: PPUSH
78617: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78621: LD_VAR 0 9
78625: PUSH
78626: LD_INT 1
78628: ARRAY
78629: PPUSH
78630: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78634: LD_EXP 66
78638: PUSH
78639: LD_VAR 0 2
78643: ARRAY
78644: PUSH
78645: LD_EXP 66
78649: PUSH
78650: LD_VAR 0 2
78654: ARRAY
78655: PUSH
78656: LD_INT 1
78658: ARRAY
78659: PPUSH
78660: CALL_OW 314
78664: NOT
78665: AND
78666: PUSH
78667: LD_EXP 66
78671: PUSH
78672: LD_VAR 0 2
78676: ARRAY
78677: PUSH
78678: LD_INT 1
78680: ARRAY
78681: PPUSH
78682: CALL_OW 310
78686: NOT
78687: AND
78688: IFFALSE 78714
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78690: LD_EXP 66
78694: PUSH
78695: LD_VAR 0 2
78699: ARRAY
78700: PUSH
78701: LD_INT 1
78703: ARRAY
78704: PPUSH
78705: LD_VAR 0 3
78709: PPUSH
78710: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78714: LD_EXP 66
78718: PUSH
78719: LD_VAR 0 2
78723: ARRAY
78724: PUSH
78725: LD_INT 1
78727: ARRAY
78728: PPUSH
78729: CALL_OW 310
78733: PUSH
78734: LD_EXP 66
78738: PUSH
78739: LD_VAR 0 2
78743: ARRAY
78744: PUSH
78745: LD_INT 1
78747: ARRAY
78748: PPUSH
78749: CALL_OW 310
78753: PPUSH
78754: CALL_OW 461
78758: PUSH
78759: LD_INT 3
78761: NONEQUAL
78762: AND
78763: IFFALSE 78784
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78765: LD_EXP 66
78769: PUSH
78770: LD_VAR 0 2
78774: ARRAY
78775: PUSH
78776: LD_INT 1
78778: ARRAY
78779: PPUSH
78780: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78784: LD_VAR 0 3
78788: PPUSH
78789: CALL_OW 461
78793: PUSH
78794: LD_INT 6
78796: EQUAL
78797: PUSH
78798: LD_VAR 0 6
78802: PUSH
78803: LD_INT 1
78805: GREATER
78806: AND
78807: IFFALSE 78959
// begin sci := [ ] ;
78809: LD_ADDR_VAR 0 8
78813: PUSH
78814: EMPTY
78815: ST_TO_ADDR
// for x in ( tmp diff j ) do
78816: LD_ADDR_VAR 0 7
78820: PUSH
78821: LD_VAR 0 6
78825: PUSH
78826: LD_VAR 0 3
78830: DIFF
78831: PUSH
78832: FOR_IN
78833: IFFALSE 78885
// begin if sci = 6 then
78835: LD_VAR 0 8
78839: PUSH
78840: LD_INT 6
78842: EQUAL
78843: IFFALSE 78847
// break ;
78845: GO 78885
// if BuildingStatus ( x ) = bs_idle then
78847: LD_VAR 0 7
78851: PPUSH
78852: CALL_OW 461
78856: PUSH
78857: LD_INT 2
78859: EQUAL
78860: IFFALSE 78883
// sci := sci ^ UnitsInside ( x ) ;
78862: LD_ADDR_VAR 0 8
78866: PUSH
78867: LD_VAR 0 8
78871: PUSH
78872: LD_VAR 0 7
78876: PPUSH
78877: CALL_OW 313
78881: ADD
78882: ST_TO_ADDR
// end ;
78883: GO 78832
78885: POP
78886: POP
// if not sci then
78887: LD_VAR 0 8
78891: NOT
78892: IFFALSE 78896
// continue ;
78894: GO 77941
// for x in sci do
78896: LD_ADDR_VAR 0 7
78900: PUSH
78901: LD_VAR 0 8
78905: PUSH
78906: FOR_IN
78907: IFFALSE 78957
// if IsInUnit ( x ) and not HasTask ( x ) then
78909: LD_VAR 0 7
78913: PPUSH
78914: CALL_OW 310
78918: PUSH
78919: LD_VAR 0 7
78923: PPUSH
78924: CALL_OW 314
78928: NOT
78929: AND
78930: IFFALSE 78955
// begin ComExitBuilding ( x ) ;
78932: LD_VAR 0 7
78936: PPUSH
78937: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78941: LD_VAR 0 7
78945: PPUSH
78946: LD_VAR 0 3
78950: PPUSH
78951: CALL_OW 180
// end ;
78955: GO 78906
78957: POP
78958: POP
// end ; end ;
78959: GO 77941
78961: POP
78962: POP
// end ;
78963: GO 77895
78965: POP
78966: POP
// end ;
78967: LD_VAR 0 1
78971: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
78972: LD_INT 0
78974: PPUSH
78975: PPUSH
// if not mc_bases then
78976: LD_EXP 36
78980: NOT
78981: IFFALSE 78985
// exit ;
78983: GO 79066
// for i = 1 to mc_bases do
78985: LD_ADDR_VAR 0 2
78989: PUSH
78990: DOUBLE
78991: LD_INT 1
78993: DEC
78994: ST_TO_ADDR
78995: LD_EXP 36
78999: PUSH
79000: FOR_TO
79001: IFFALSE 79064
// if mc_mines [ i ] and mc_miners [ i ] then
79003: LD_EXP 49
79007: PUSH
79008: LD_VAR 0 2
79012: ARRAY
79013: PUSH
79014: LD_EXP 50
79018: PUSH
79019: LD_VAR 0 2
79023: ARRAY
79024: AND
79025: IFFALSE 79062
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79027: LD_EXP 50
79031: PUSH
79032: LD_VAR 0 2
79036: ARRAY
79037: PUSH
79038: LD_INT 1
79040: ARRAY
79041: PPUSH
79042: CALL_OW 255
79046: PPUSH
79047: LD_EXP 49
79051: PUSH
79052: LD_VAR 0 2
79056: ARRAY
79057: PPUSH
79058: CALL 23054 0 2
79062: GO 79000
79064: POP
79065: POP
// end ;
79066: LD_VAR 0 1
79070: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79071: LD_INT 0
79073: PPUSH
79074: PPUSH
79075: PPUSH
79076: PPUSH
79077: PPUSH
79078: PPUSH
79079: PPUSH
79080: PPUSH
// if not mc_bases or not mc_parking then
79081: LD_EXP 36
79085: NOT
79086: PUSH
79087: LD_EXP 60
79091: NOT
79092: OR
79093: IFFALSE 79097
// exit ;
79095: GO 79773
// for i = 1 to mc_bases do
79097: LD_ADDR_VAR 0 2
79101: PUSH
79102: DOUBLE
79103: LD_INT 1
79105: DEC
79106: ST_TO_ADDR
79107: LD_EXP 36
79111: PUSH
79112: FOR_TO
79113: IFFALSE 79771
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79115: LD_EXP 36
79119: PUSH
79120: LD_VAR 0 2
79124: ARRAY
79125: NOT
79126: PUSH
79127: LD_EXP 60
79131: PUSH
79132: LD_VAR 0 2
79136: ARRAY
79137: NOT
79138: OR
79139: IFFALSE 79143
// continue ;
79141: GO 79112
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79143: LD_ADDR_VAR 0 5
79147: PUSH
79148: LD_EXP 36
79152: PUSH
79153: LD_VAR 0 2
79157: ARRAY
79158: PUSH
79159: LD_INT 1
79161: ARRAY
79162: PPUSH
79163: CALL_OW 255
79167: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79168: LD_ADDR_VAR 0 6
79172: PUSH
79173: LD_EXP 36
79177: PUSH
79178: LD_VAR 0 2
79182: ARRAY
79183: PPUSH
79184: LD_INT 30
79186: PUSH
79187: LD_INT 3
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PPUSH
79194: CALL_OW 72
79198: ST_TO_ADDR
// if not fac then
79199: LD_VAR 0 6
79203: NOT
79204: IFFALSE 79255
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79206: LD_ADDR_VAR 0 6
79210: PUSH
79211: LD_EXP 36
79215: PUSH
79216: LD_VAR 0 2
79220: ARRAY
79221: PPUSH
79222: LD_INT 2
79224: PUSH
79225: LD_INT 30
79227: PUSH
79228: LD_INT 0
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: PUSH
79235: LD_INT 30
79237: PUSH
79238: LD_INT 1
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: LIST
79249: PPUSH
79250: CALL_OW 72
79254: ST_TO_ADDR
// if not fac then
79255: LD_VAR 0 6
79259: NOT
79260: IFFALSE 79264
// continue ;
79262: GO 79112
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79264: LD_ADDR_VAR 0 7
79268: PUSH
79269: LD_EXP 60
79273: PUSH
79274: LD_VAR 0 2
79278: ARRAY
79279: PPUSH
79280: LD_INT 22
79282: PUSH
79283: LD_VAR 0 5
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 21
79294: PUSH
79295: LD_INT 2
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: LD_INT 3
79304: PUSH
79305: LD_INT 24
79307: PUSH
79308: LD_INT 1000
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: LIST
79323: PPUSH
79324: CALL_OW 70
79328: PUSH
79329: LD_INT 22
79331: PUSH
79332: LD_VAR 0 5
79336: PUSH
79337: EMPTY
79338: LIST
79339: LIST
79340: PUSH
79341: LD_INT 91
79343: PUSH
79344: LD_VAR 0 6
79348: PUSH
79349: LD_INT 1
79351: ARRAY
79352: PUSH
79353: LD_INT 25
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: LIST
79360: PUSH
79361: LD_INT 21
79363: PUSH
79364: LD_INT 2
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 3
79373: PUSH
79374: LD_INT 24
79376: PUSH
79377: LD_INT 1000
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: LIST
79392: LIST
79393: PPUSH
79394: CALL_OW 69
79398: UNION
79399: ST_TO_ADDR
// if not vehs then
79400: LD_VAR 0 7
79404: NOT
79405: IFFALSE 79431
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79407: LD_ADDR_EXP 48
79411: PUSH
79412: LD_EXP 48
79416: PPUSH
79417: LD_VAR 0 2
79421: PPUSH
79422: EMPTY
79423: PPUSH
79424: CALL_OW 1
79428: ST_TO_ADDR
// continue ;
79429: GO 79112
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79431: LD_ADDR_VAR 0 8
79435: PUSH
79436: LD_EXP 36
79440: PUSH
79441: LD_VAR 0 2
79445: ARRAY
79446: PPUSH
79447: LD_INT 30
79449: PUSH
79450: LD_INT 3
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PPUSH
79457: CALL_OW 72
79461: ST_TO_ADDR
// if tmp then
79462: LD_VAR 0 8
79466: IFFALSE 79569
// begin for j in tmp do
79468: LD_ADDR_VAR 0 3
79472: PUSH
79473: LD_VAR 0 8
79477: PUSH
79478: FOR_IN
79479: IFFALSE 79567
// for k in UnitsInside ( j ) do
79481: LD_ADDR_VAR 0 4
79485: PUSH
79486: LD_VAR 0 3
79490: PPUSH
79491: CALL_OW 313
79495: PUSH
79496: FOR_IN
79497: IFFALSE 79563
// if k then
79499: LD_VAR 0 4
79503: IFFALSE 79561
// if not k in mc_repair_vehicle [ i ] then
79505: LD_VAR 0 4
79509: PUSH
79510: LD_EXP 48
79514: PUSH
79515: LD_VAR 0 2
79519: ARRAY
79520: IN
79521: NOT
79522: IFFALSE 79561
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79524: LD_ADDR_EXP 48
79528: PUSH
79529: LD_EXP 48
79533: PPUSH
79534: LD_VAR 0 2
79538: PPUSH
79539: LD_EXP 48
79543: PUSH
79544: LD_VAR 0 2
79548: ARRAY
79549: PUSH
79550: LD_VAR 0 4
79554: UNION
79555: PPUSH
79556: CALL_OW 1
79560: ST_TO_ADDR
79561: GO 79496
79563: POP
79564: POP
79565: GO 79478
79567: POP
79568: POP
// end ; if not mc_repair_vehicle [ i ] then
79569: LD_EXP 48
79573: PUSH
79574: LD_VAR 0 2
79578: ARRAY
79579: NOT
79580: IFFALSE 79584
// continue ;
79582: GO 79112
// for j in mc_repair_vehicle [ i ] do
79584: LD_ADDR_VAR 0 3
79588: PUSH
79589: LD_EXP 48
79593: PUSH
79594: LD_VAR 0 2
79598: ARRAY
79599: PUSH
79600: FOR_IN
79601: IFFALSE 79767
// begin if GetClass ( j ) <> 3 then
79603: LD_VAR 0 3
79607: PPUSH
79608: CALL_OW 257
79612: PUSH
79613: LD_INT 3
79615: NONEQUAL
79616: IFFALSE 79657
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79618: LD_ADDR_EXP 48
79622: PUSH
79623: LD_EXP 48
79627: PPUSH
79628: LD_VAR 0 2
79632: PPUSH
79633: LD_EXP 48
79637: PUSH
79638: LD_VAR 0 2
79642: ARRAY
79643: PUSH
79644: LD_VAR 0 3
79648: DIFF
79649: PPUSH
79650: CALL_OW 1
79654: ST_TO_ADDR
// continue ;
79655: GO 79600
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79657: LD_VAR 0 3
79661: PPUSH
79662: CALL_OW 311
79666: NOT
79667: PUSH
79668: LD_VAR 0 3
79672: PUSH
79673: LD_EXP 39
79677: PUSH
79678: LD_VAR 0 2
79682: ARRAY
79683: PUSH
79684: LD_INT 1
79686: ARRAY
79687: IN
79688: NOT
79689: AND
79690: PUSH
79691: LD_VAR 0 3
79695: PUSH
79696: LD_EXP 39
79700: PUSH
79701: LD_VAR 0 2
79705: ARRAY
79706: PUSH
79707: LD_INT 2
79709: ARRAY
79710: IN
79711: NOT
79712: AND
79713: IFFALSE 79765
// begin if IsInUnit ( j ) then
79715: LD_VAR 0 3
79719: PPUSH
79720: CALL_OW 310
79724: IFFALSE 79735
// ComExitBuilding ( j ) ;
79726: LD_VAR 0 3
79730: PPUSH
79731: CALL_OW 122
// if not HasTask ( j ) then
79735: LD_VAR 0 3
79739: PPUSH
79740: CALL_OW 314
79744: NOT
79745: IFFALSE 79765
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79747: LD_VAR 0 3
79751: PPUSH
79752: LD_VAR 0 7
79756: PUSH
79757: LD_INT 1
79759: ARRAY
79760: PPUSH
79761: CALL_OW 189
// end ; end ;
79765: GO 79600
79767: POP
79768: POP
// end ;
79769: GO 79112
79771: POP
79772: POP
// end ;
79773: LD_VAR 0 1
79777: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79778: LD_INT 0
79780: PPUSH
79781: PPUSH
79782: PPUSH
79783: PPUSH
79784: PPUSH
79785: PPUSH
79786: PPUSH
79787: PPUSH
79788: PPUSH
79789: PPUSH
79790: PPUSH
// if not mc_bases then
79791: LD_EXP 36
79795: NOT
79796: IFFALSE 79800
// exit ;
79798: GO 80602
// for i = 1 to mc_bases do
79800: LD_ADDR_VAR 0 2
79804: PUSH
79805: DOUBLE
79806: LD_INT 1
79808: DEC
79809: ST_TO_ADDR
79810: LD_EXP 36
79814: PUSH
79815: FOR_TO
79816: IFFALSE 80600
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79818: LD_EXP 64
79822: PUSH
79823: LD_VAR 0 2
79827: ARRAY
79828: NOT
79829: PUSH
79830: LD_EXP 39
79834: PUSH
79835: LD_VAR 0 2
79839: ARRAY
79840: PUSH
79841: LD_INT 1
79843: ARRAY
79844: OR
79845: PUSH
79846: LD_EXP 39
79850: PUSH
79851: LD_VAR 0 2
79855: ARRAY
79856: PUSH
79857: LD_INT 2
79859: ARRAY
79860: OR
79861: PUSH
79862: LD_EXP 62
79866: PUSH
79867: LD_VAR 0 2
79871: ARRAY
79872: PPUSH
79873: LD_INT 1
79875: PPUSH
79876: CALL_OW 325
79880: NOT
79881: OR
79882: PUSH
79883: LD_EXP 59
79887: PUSH
79888: LD_VAR 0 2
79892: ARRAY
79893: OR
79894: IFFALSE 79898
// continue ;
79896: GO 79815
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79898: LD_ADDR_VAR 0 8
79902: PUSH
79903: LD_EXP 36
79907: PUSH
79908: LD_VAR 0 2
79912: ARRAY
79913: PPUSH
79914: LD_INT 25
79916: PUSH
79917: LD_INT 4
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 50
79926: PUSH
79927: EMPTY
79928: LIST
79929: PUSH
79930: LD_INT 3
79932: PUSH
79933: LD_INT 60
79935: PUSH
79936: EMPTY
79937: LIST
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: LIST
79947: PPUSH
79948: CALL_OW 72
79952: PUSH
79953: LD_EXP 40
79957: PUSH
79958: LD_VAR 0 2
79962: ARRAY
79963: DIFF
79964: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79965: LD_ADDR_VAR 0 9
79969: PUSH
79970: LD_EXP 36
79974: PUSH
79975: LD_VAR 0 2
79979: ARRAY
79980: PPUSH
79981: LD_INT 2
79983: PUSH
79984: LD_INT 30
79986: PUSH
79987: LD_INT 0
79989: PUSH
79990: EMPTY
79991: LIST
79992: LIST
79993: PUSH
79994: LD_INT 30
79996: PUSH
79997: LD_INT 1
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: LIST
80008: PPUSH
80009: CALL_OW 72
80013: ST_TO_ADDR
// if not tmp or not dep then
80014: LD_VAR 0 8
80018: NOT
80019: PUSH
80020: LD_VAR 0 9
80024: NOT
80025: OR
80026: IFFALSE 80030
// continue ;
80028: GO 79815
// side := GetSide ( tmp [ 1 ] ) ;
80030: LD_ADDR_VAR 0 11
80034: PUSH
80035: LD_VAR 0 8
80039: PUSH
80040: LD_INT 1
80042: ARRAY
80043: PPUSH
80044: CALL_OW 255
80048: ST_TO_ADDR
// dep := dep [ 1 ] ;
80049: LD_ADDR_VAR 0 9
80053: PUSH
80054: LD_VAR 0 9
80058: PUSH
80059: LD_INT 1
80061: ARRAY
80062: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80063: LD_ADDR_VAR 0 7
80067: PUSH
80068: LD_EXP 64
80072: PUSH
80073: LD_VAR 0 2
80077: ARRAY
80078: PPUSH
80079: LD_INT 22
80081: PUSH
80082: LD_INT 0
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: PUSH
80089: LD_INT 25
80091: PUSH
80092: LD_INT 12
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: EMPTY
80100: LIST
80101: LIST
80102: PPUSH
80103: CALL_OW 70
80107: PUSH
80108: LD_INT 22
80110: PUSH
80111: LD_INT 0
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PUSH
80118: LD_INT 25
80120: PUSH
80121: LD_INT 12
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: PUSH
80128: LD_INT 91
80130: PUSH
80131: LD_VAR 0 9
80135: PUSH
80136: LD_INT 20
80138: PUSH
80139: EMPTY
80140: LIST
80141: LIST
80142: LIST
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: LIST
80148: PPUSH
80149: CALL_OW 69
80153: UNION
80154: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80155: LD_ADDR_VAR 0 10
80159: PUSH
80160: LD_EXP 64
80164: PUSH
80165: LD_VAR 0 2
80169: ARRAY
80170: PPUSH
80171: LD_INT 81
80173: PUSH
80174: LD_VAR 0 11
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PPUSH
80183: CALL_OW 70
80187: ST_TO_ADDR
// if not apes or danger_at_area then
80188: LD_VAR 0 7
80192: NOT
80193: PUSH
80194: LD_VAR 0 10
80198: OR
80199: IFFALSE 80249
// begin if mc_taming [ i ] then
80201: LD_EXP 67
80205: PUSH
80206: LD_VAR 0 2
80210: ARRAY
80211: IFFALSE 80247
// begin MC_Reset ( i , 121 ) ;
80213: LD_VAR 0 2
80217: PPUSH
80218: LD_INT 121
80220: PPUSH
80221: CALL 65942 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80225: LD_ADDR_EXP 67
80229: PUSH
80230: LD_EXP 67
80234: PPUSH
80235: LD_VAR 0 2
80239: PPUSH
80240: EMPTY
80241: PPUSH
80242: CALL_OW 1
80246: ST_TO_ADDR
// end ; continue ;
80247: GO 79815
// end ; for j in tmp do
80249: LD_ADDR_VAR 0 3
80253: PUSH
80254: LD_VAR 0 8
80258: PUSH
80259: FOR_IN
80260: IFFALSE 80596
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80262: LD_VAR 0 3
80266: PUSH
80267: LD_EXP 67
80271: PUSH
80272: LD_VAR 0 2
80276: ARRAY
80277: IN
80278: NOT
80279: PUSH
80280: LD_EXP 67
80284: PUSH
80285: LD_VAR 0 2
80289: ARRAY
80290: PUSH
80291: LD_INT 3
80293: LESS
80294: AND
80295: IFFALSE 80353
// begin SetTag ( j , 121 ) ;
80297: LD_VAR 0 3
80301: PPUSH
80302: LD_INT 121
80304: PPUSH
80305: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80309: LD_ADDR_EXP 67
80313: PUSH
80314: LD_EXP 67
80318: PPUSH
80319: LD_VAR 0 2
80323: PUSH
80324: LD_EXP 67
80328: PUSH
80329: LD_VAR 0 2
80333: ARRAY
80334: PUSH
80335: LD_INT 1
80337: PLUS
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: PPUSH
80343: LD_VAR 0 3
80347: PPUSH
80348: CALL 26004 0 3
80352: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80353: LD_VAR 0 3
80357: PUSH
80358: LD_EXP 67
80362: PUSH
80363: LD_VAR 0 2
80367: ARRAY
80368: IN
80369: IFFALSE 80594
// begin if GetClass ( j ) <> 4 then
80371: LD_VAR 0 3
80375: PPUSH
80376: CALL_OW 257
80380: PUSH
80381: LD_INT 4
80383: NONEQUAL
80384: IFFALSE 80437
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80386: LD_ADDR_EXP 67
80390: PUSH
80391: LD_EXP 67
80395: PPUSH
80396: LD_VAR 0 2
80400: PPUSH
80401: LD_EXP 67
80405: PUSH
80406: LD_VAR 0 2
80410: ARRAY
80411: PUSH
80412: LD_VAR 0 3
80416: DIFF
80417: PPUSH
80418: CALL_OW 1
80422: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80423: LD_VAR 0 3
80427: PPUSH
80428: LD_INT 0
80430: PPUSH
80431: CALL_OW 109
// continue ;
80435: GO 80259
// end ; if IsInUnit ( j ) then
80437: LD_VAR 0 3
80441: PPUSH
80442: CALL_OW 310
80446: IFFALSE 80457
// ComExitBuilding ( j ) ;
80448: LD_VAR 0 3
80452: PPUSH
80453: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
80457: LD_ADDR_VAR 0 6
80461: PUSH
80462: LD_VAR 0 7
80466: PPUSH
80467: LD_VAR 0 3
80471: PPUSH
80472: CALL_OW 74
80476: ST_TO_ADDR
// if not ape then
80477: LD_VAR 0 6
80481: NOT
80482: IFFALSE 80486
// break ;
80484: GO 80596
// x := GetX ( ape ) ;
80486: LD_ADDR_VAR 0 4
80490: PUSH
80491: LD_VAR 0 6
80495: PPUSH
80496: CALL_OW 250
80500: ST_TO_ADDR
// y := GetY ( ape ) ;
80501: LD_ADDR_VAR 0 5
80505: PUSH
80506: LD_VAR 0 6
80510: PPUSH
80511: CALL_OW 251
80515: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80516: LD_VAR 0 4
80520: PPUSH
80521: LD_VAR 0 5
80525: PPUSH
80526: CALL_OW 488
80530: NOT
80531: PUSH
80532: LD_VAR 0 11
80536: PPUSH
80537: LD_VAR 0 4
80541: PPUSH
80542: LD_VAR 0 5
80546: PPUSH
80547: LD_INT 20
80549: PPUSH
80550: CALL 26900 0 4
80554: PUSH
80555: LD_INT 4
80557: ARRAY
80558: OR
80559: IFFALSE 80563
// break ;
80561: GO 80596
// if not HasTask ( j ) then
80563: LD_VAR 0 3
80567: PPUSH
80568: CALL_OW 314
80572: NOT
80573: IFFALSE 80594
// ComTameXY ( j , x , y ) ;
80575: LD_VAR 0 3
80579: PPUSH
80580: LD_VAR 0 4
80584: PPUSH
80585: LD_VAR 0 5
80589: PPUSH
80590: CALL_OW 131
// end ; end ;
80594: GO 80259
80596: POP
80597: POP
// end ;
80598: GO 79815
80600: POP
80601: POP
// end ;
80602: LD_VAR 0 1
80606: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80607: LD_INT 0
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
80613: PPUSH
80614: PPUSH
80615: PPUSH
80616: PPUSH
// if not mc_bases then
80617: LD_EXP 36
80621: NOT
80622: IFFALSE 80626
// exit ;
80624: GO 81252
// for i = 1 to mc_bases do
80626: LD_ADDR_VAR 0 2
80630: PUSH
80631: DOUBLE
80632: LD_INT 1
80634: DEC
80635: ST_TO_ADDR
80636: LD_EXP 36
80640: PUSH
80641: FOR_TO
80642: IFFALSE 81250
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80644: LD_EXP 65
80648: PUSH
80649: LD_VAR 0 2
80653: ARRAY
80654: NOT
80655: PUSH
80656: LD_EXP 65
80660: PUSH
80661: LD_VAR 0 2
80665: ARRAY
80666: PPUSH
80667: LD_INT 25
80669: PUSH
80670: LD_INT 12
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PPUSH
80677: CALL_OW 72
80681: NOT
80682: OR
80683: IFFALSE 80687
// continue ;
80685: GO 80641
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80687: LD_ADDR_VAR 0 5
80691: PUSH
80692: LD_EXP 65
80696: PUSH
80697: LD_VAR 0 2
80701: ARRAY
80702: PUSH
80703: LD_INT 1
80705: ARRAY
80706: PPUSH
80707: CALL_OW 255
80711: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80712: LD_VAR 0 5
80716: PPUSH
80717: LD_INT 2
80719: PPUSH
80720: CALL_OW 325
80724: IFFALSE 80977
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80726: LD_ADDR_VAR 0 4
80730: PUSH
80731: LD_EXP 65
80735: PUSH
80736: LD_VAR 0 2
80740: ARRAY
80741: PPUSH
80742: LD_INT 25
80744: PUSH
80745: LD_INT 16
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: PPUSH
80752: CALL_OW 72
80756: ST_TO_ADDR
// if tmp < 6 then
80757: LD_VAR 0 4
80761: PUSH
80762: LD_INT 6
80764: LESS
80765: IFFALSE 80977
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80767: LD_ADDR_VAR 0 6
80771: PUSH
80772: LD_EXP 36
80776: PUSH
80777: LD_VAR 0 2
80781: ARRAY
80782: PPUSH
80783: LD_INT 2
80785: PUSH
80786: LD_INT 30
80788: PUSH
80789: LD_INT 0
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: LD_INT 30
80798: PUSH
80799: LD_INT 1
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: LIST
80810: PPUSH
80811: CALL_OW 72
80815: ST_TO_ADDR
// if depot then
80816: LD_VAR 0 6
80820: IFFALSE 80977
// begin selected := 0 ;
80822: LD_ADDR_VAR 0 7
80826: PUSH
80827: LD_INT 0
80829: ST_TO_ADDR
// for j in depot do
80830: LD_ADDR_VAR 0 3
80834: PUSH
80835: LD_VAR 0 6
80839: PUSH
80840: FOR_IN
80841: IFFALSE 80872
// begin if UnitsInside ( j ) < 6 then
80843: LD_VAR 0 3
80847: PPUSH
80848: CALL_OW 313
80852: PUSH
80853: LD_INT 6
80855: LESS
80856: IFFALSE 80870
// begin selected := j ;
80858: LD_ADDR_VAR 0 7
80862: PUSH
80863: LD_VAR 0 3
80867: ST_TO_ADDR
// break ;
80868: GO 80872
// end ; end ;
80870: GO 80840
80872: POP
80873: POP
// if selected then
80874: LD_VAR 0 7
80878: IFFALSE 80977
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80880: LD_ADDR_VAR 0 3
80884: PUSH
80885: LD_EXP 65
80889: PUSH
80890: LD_VAR 0 2
80894: ARRAY
80895: PPUSH
80896: LD_INT 25
80898: PUSH
80899: LD_INT 12
80901: PUSH
80902: EMPTY
80903: LIST
80904: LIST
80905: PPUSH
80906: CALL_OW 72
80910: PUSH
80911: FOR_IN
80912: IFFALSE 80975
// if not HasTask ( j ) then
80914: LD_VAR 0 3
80918: PPUSH
80919: CALL_OW 314
80923: NOT
80924: IFFALSE 80973
// begin if not IsInUnit ( j ) then
80926: LD_VAR 0 3
80930: PPUSH
80931: CALL_OW 310
80935: NOT
80936: IFFALSE 80952
// ComEnterUnit ( j , selected ) ;
80938: LD_VAR 0 3
80942: PPUSH
80943: LD_VAR 0 7
80947: PPUSH
80948: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
80952: LD_VAR 0 3
80956: PPUSH
80957: LD_INT 16
80959: PPUSH
80960: CALL_OW 183
// AddComExitBuilding ( j ) ;
80964: LD_VAR 0 3
80968: PPUSH
80969: CALL_OW 182
// end ;
80973: GO 80911
80975: POP
80976: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
80977: LD_VAR 0 5
80981: PPUSH
80982: LD_INT 11
80984: PPUSH
80985: CALL_OW 325
80989: IFFALSE 81248
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80991: LD_ADDR_VAR 0 4
80995: PUSH
80996: LD_EXP 65
81000: PUSH
81001: LD_VAR 0 2
81005: ARRAY
81006: PPUSH
81007: LD_INT 25
81009: PUSH
81010: LD_INT 16
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PPUSH
81017: CALL_OW 72
81021: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81022: LD_VAR 0 4
81026: PUSH
81027: LD_INT 6
81029: GREATEREQUAL
81030: PUSH
81031: LD_VAR 0 5
81035: PPUSH
81036: LD_INT 2
81038: PPUSH
81039: CALL_OW 325
81043: NOT
81044: OR
81045: IFFALSE 81248
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81047: LD_ADDR_VAR 0 8
81051: PUSH
81052: LD_EXP 36
81056: PUSH
81057: LD_VAR 0 2
81061: ARRAY
81062: PPUSH
81063: LD_INT 2
81065: PUSH
81066: LD_INT 30
81068: PUSH
81069: LD_INT 4
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PUSH
81076: LD_INT 30
81078: PUSH
81079: LD_INT 5
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: EMPTY
81087: LIST
81088: LIST
81089: LIST
81090: PPUSH
81091: CALL_OW 72
81095: ST_TO_ADDR
// if barracks then
81096: LD_VAR 0 8
81100: IFFALSE 81248
// begin selected := 0 ;
81102: LD_ADDR_VAR 0 7
81106: PUSH
81107: LD_INT 0
81109: ST_TO_ADDR
// for j in barracks do
81110: LD_ADDR_VAR 0 3
81114: PUSH
81115: LD_VAR 0 8
81119: PUSH
81120: FOR_IN
81121: IFFALSE 81152
// begin if UnitsInside ( j ) < 6 then
81123: LD_VAR 0 3
81127: PPUSH
81128: CALL_OW 313
81132: PUSH
81133: LD_INT 6
81135: LESS
81136: IFFALSE 81150
// begin selected := j ;
81138: LD_ADDR_VAR 0 7
81142: PUSH
81143: LD_VAR 0 3
81147: ST_TO_ADDR
// break ;
81148: GO 81152
// end ; end ;
81150: GO 81120
81152: POP
81153: POP
// if selected then
81154: LD_VAR 0 7
81158: IFFALSE 81248
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81160: LD_ADDR_VAR 0 3
81164: PUSH
81165: LD_EXP 65
81169: PUSH
81170: LD_VAR 0 2
81174: ARRAY
81175: PPUSH
81176: LD_INT 25
81178: PUSH
81179: LD_INT 12
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PPUSH
81186: CALL_OW 72
81190: PUSH
81191: FOR_IN
81192: IFFALSE 81246
// if not IsInUnit ( j ) and not HasTask ( j ) then
81194: LD_VAR 0 3
81198: PPUSH
81199: CALL_OW 310
81203: NOT
81204: PUSH
81205: LD_VAR 0 3
81209: PPUSH
81210: CALL_OW 314
81214: NOT
81215: AND
81216: IFFALSE 81244
// begin ComEnterUnit ( j , selected ) ;
81218: LD_VAR 0 3
81222: PPUSH
81223: LD_VAR 0 7
81227: PPUSH
81228: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81232: LD_VAR 0 3
81236: PPUSH
81237: LD_INT 15
81239: PPUSH
81240: CALL_OW 183
// end ;
81244: GO 81191
81246: POP
81247: POP
// end ; end ; end ; end ; end ;
81248: GO 80641
81250: POP
81251: POP
// end ;
81252: LD_VAR 0 1
81256: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81257: LD_INT 0
81259: PPUSH
81260: PPUSH
81261: PPUSH
81262: PPUSH
// if not mc_bases then
81263: LD_EXP 36
81267: NOT
81268: IFFALSE 81272
// exit ;
81270: GO 81450
// for i = 1 to mc_bases do
81272: LD_ADDR_VAR 0 2
81276: PUSH
81277: DOUBLE
81278: LD_INT 1
81280: DEC
81281: ST_TO_ADDR
81282: LD_EXP 36
81286: PUSH
81287: FOR_TO
81288: IFFALSE 81448
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81290: LD_ADDR_VAR 0 4
81294: PUSH
81295: LD_EXP 36
81299: PUSH
81300: LD_VAR 0 2
81304: ARRAY
81305: PPUSH
81306: LD_INT 25
81308: PUSH
81309: LD_INT 9
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PPUSH
81316: CALL_OW 72
81320: ST_TO_ADDR
// if not tmp then
81321: LD_VAR 0 4
81325: NOT
81326: IFFALSE 81330
// continue ;
81328: GO 81287
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81330: LD_EXP 62
81334: PUSH
81335: LD_VAR 0 2
81339: ARRAY
81340: PPUSH
81341: LD_INT 29
81343: PPUSH
81344: CALL_OW 325
81348: NOT
81349: PUSH
81350: LD_EXP 62
81354: PUSH
81355: LD_VAR 0 2
81359: ARRAY
81360: PPUSH
81361: LD_INT 28
81363: PPUSH
81364: CALL_OW 325
81368: NOT
81369: AND
81370: IFFALSE 81374
// continue ;
81372: GO 81287
// for j in tmp do
81374: LD_ADDR_VAR 0 3
81378: PUSH
81379: LD_VAR 0 4
81383: PUSH
81384: FOR_IN
81385: IFFALSE 81444
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81387: LD_VAR 0 3
81391: PUSH
81392: LD_EXP 39
81396: PUSH
81397: LD_VAR 0 2
81401: ARRAY
81402: PUSH
81403: LD_INT 1
81405: ARRAY
81406: IN
81407: NOT
81408: PUSH
81409: LD_VAR 0 3
81413: PUSH
81414: LD_EXP 39
81418: PUSH
81419: LD_VAR 0 2
81423: ARRAY
81424: PUSH
81425: LD_INT 2
81427: ARRAY
81428: IN
81429: NOT
81430: AND
81431: IFFALSE 81442
// ComSpaceTimeShoot ( j ) ;
81433: LD_VAR 0 3
81437: PPUSH
81438: CALL 20094 0 1
81442: GO 81384
81444: POP
81445: POP
// end ;
81446: GO 81287
81448: POP
81449: POP
// end ;
81450: LD_VAR 0 1
81454: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81455: LD_INT 0
81457: PPUSH
81458: PPUSH
81459: PPUSH
81460: PPUSH
81461: PPUSH
81462: PPUSH
81463: PPUSH
81464: PPUSH
81465: PPUSH
// if not mc_bases then
81466: LD_EXP 36
81470: NOT
81471: IFFALSE 81475
// exit ;
81473: GO 82097
// for i = 1 to mc_bases do
81475: LD_ADDR_VAR 0 2
81479: PUSH
81480: DOUBLE
81481: LD_INT 1
81483: DEC
81484: ST_TO_ADDR
81485: LD_EXP 36
81489: PUSH
81490: FOR_TO
81491: IFFALSE 82095
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81493: LD_EXP 71
81497: PUSH
81498: LD_VAR 0 2
81502: ARRAY
81503: NOT
81504: PUSH
81505: LD_INT 38
81507: PPUSH
81508: LD_EXP 62
81512: PUSH
81513: LD_VAR 0 2
81517: ARRAY
81518: PPUSH
81519: CALL_OW 321
81523: PUSH
81524: LD_INT 2
81526: NONEQUAL
81527: OR
81528: IFFALSE 81532
// continue ;
81530: GO 81490
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81532: LD_ADDR_VAR 0 8
81536: PUSH
81537: LD_EXP 36
81541: PUSH
81542: LD_VAR 0 2
81546: ARRAY
81547: PPUSH
81548: LD_INT 30
81550: PUSH
81551: LD_INT 34
81553: PUSH
81554: EMPTY
81555: LIST
81556: LIST
81557: PPUSH
81558: CALL_OW 72
81562: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81563: LD_ADDR_VAR 0 9
81567: PUSH
81568: LD_EXP 36
81572: PUSH
81573: LD_VAR 0 2
81577: ARRAY
81578: PPUSH
81579: LD_INT 25
81581: PUSH
81582: LD_INT 4
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: PPUSH
81589: CALL_OW 72
81593: PPUSH
81594: LD_INT 0
81596: PPUSH
81597: CALL 59240 0 2
81601: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81602: LD_VAR 0 9
81606: NOT
81607: PUSH
81608: LD_VAR 0 8
81612: NOT
81613: OR
81614: PUSH
81615: LD_EXP 36
81619: PUSH
81620: LD_VAR 0 2
81624: ARRAY
81625: PPUSH
81626: LD_INT 124
81628: PPUSH
81629: CALL 59240 0 2
81633: OR
81634: IFFALSE 81638
// continue ;
81636: GO 81490
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81638: LD_EXP 72
81642: PUSH
81643: LD_VAR 0 2
81647: ARRAY
81648: PUSH
81649: LD_EXP 71
81653: PUSH
81654: LD_VAR 0 2
81658: ARRAY
81659: LESS
81660: PUSH
81661: LD_EXP 72
81665: PUSH
81666: LD_VAR 0 2
81670: ARRAY
81671: PUSH
81672: LD_VAR 0 8
81676: LESS
81677: AND
81678: IFFALSE 82093
// begin tmp := sci [ 1 ] ;
81680: LD_ADDR_VAR 0 7
81684: PUSH
81685: LD_VAR 0 9
81689: PUSH
81690: LD_INT 1
81692: ARRAY
81693: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81694: LD_VAR 0 7
81698: PPUSH
81699: LD_INT 124
81701: PPUSH
81702: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81706: LD_ADDR_VAR 0 3
81710: PUSH
81711: DOUBLE
81712: LD_EXP 71
81716: PUSH
81717: LD_VAR 0 2
81721: ARRAY
81722: INC
81723: ST_TO_ADDR
81724: LD_EXP 71
81728: PUSH
81729: LD_VAR 0 2
81733: ARRAY
81734: PUSH
81735: FOR_DOWNTO
81736: IFFALSE 82079
// begin if IsInUnit ( tmp ) then
81738: LD_VAR 0 7
81742: PPUSH
81743: CALL_OW 310
81747: IFFALSE 81758
// ComExitBuilding ( tmp ) ;
81749: LD_VAR 0 7
81753: PPUSH
81754: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
81758: LD_INT 35
81760: PPUSH
81761: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81765: LD_VAR 0 7
81769: PPUSH
81770: CALL_OW 310
81774: NOT
81775: PUSH
81776: LD_VAR 0 7
81780: PPUSH
81781: CALL_OW 314
81785: NOT
81786: AND
81787: IFFALSE 81758
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81789: LD_ADDR_VAR 0 6
81793: PUSH
81794: LD_VAR 0 7
81798: PPUSH
81799: CALL_OW 250
81803: PUSH
81804: LD_VAR 0 7
81808: PPUSH
81809: CALL_OW 251
81813: PUSH
81814: EMPTY
81815: LIST
81816: LIST
81817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81818: LD_INT 35
81820: PPUSH
81821: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81825: LD_ADDR_VAR 0 4
81829: PUSH
81830: LD_EXP 71
81834: PUSH
81835: LD_VAR 0 2
81839: ARRAY
81840: PUSH
81841: LD_VAR 0 3
81845: ARRAY
81846: PUSH
81847: LD_INT 1
81849: ARRAY
81850: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81851: LD_ADDR_VAR 0 5
81855: PUSH
81856: LD_EXP 71
81860: PUSH
81861: LD_VAR 0 2
81865: ARRAY
81866: PUSH
81867: LD_VAR 0 3
81871: ARRAY
81872: PUSH
81873: LD_INT 2
81875: ARRAY
81876: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81877: LD_VAR 0 7
81881: PPUSH
81882: LD_INT 10
81884: PPUSH
81885: CALL 28597 0 2
81889: PUSH
81890: LD_INT 4
81892: ARRAY
81893: IFFALSE 81931
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81895: LD_VAR 0 7
81899: PPUSH
81900: LD_VAR 0 6
81904: PUSH
81905: LD_INT 1
81907: ARRAY
81908: PPUSH
81909: LD_VAR 0 6
81913: PUSH
81914: LD_INT 2
81916: ARRAY
81917: PPUSH
81918: CALL_OW 111
// wait ( 0 0$10 ) ;
81922: LD_INT 350
81924: PPUSH
81925: CALL_OW 67
// end else
81929: GO 81957
// begin ComMoveXY ( tmp , x , y ) ;
81931: LD_VAR 0 7
81935: PPUSH
81936: LD_VAR 0 4
81940: PPUSH
81941: LD_VAR 0 5
81945: PPUSH
81946: CALL_OW 111
// wait ( 0 0$3 ) ;
81950: LD_INT 105
81952: PPUSH
81953: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
81957: LD_VAR 0 7
81961: PPUSH
81962: LD_VAR 0 4
81966: PPUSH
81967: LD_VAR 0 5
81971: PPUSH
81972: CALL_OW 307
81976: IFFALSE 81818
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
81978: LD_VAR 0 7
81982: PPUSH
81983: LD_VAR 0 4
81987: PPUSH
81988: LD_VAR 0 5
81992: PPUSH
81993: LD_VAR 0 8
81997: PUSH
81998: LD_VAR 0 3
82002: ARRAY
82003: PPUSH
82004: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82008: LD_INT 35
82010: PPUSH
82011: CALL_OW 67
// until not HasTask ( tmp ) ;
82015: LD_VAR 0 7
82019: PPUSH
82020: CALL_OW 314
82024: NOT
82025: IFFALSE 82008
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82027: LD_ADDR_EXP 72
82031: PUSH
82032: LD_EXP 72
82036: PPUSH
82037: LD_VAR 0 2
82041: PUSH
82042: LD_EXP 72
82046: PUSH
82047: LD_VAR 0 2
82051: ARRAY
82052: PUSH
82053: LD_INT 1
82055: PLUS
82056: PUSH
82057: EMPTY
82058: LIST
82059: LIST
82060: PPUSH
82061: LD_VAR 0 8
82065: PUSH
82066: LD_VAR 0 3
82070: ARRAY
82071: PPUSH
82072: CALL 26004 0 3
82076: ST_TO_ADDR
// end ;
82077: GO 81735
82079: POP
82080: POP
// MC_Reset ( i , 124 ) ;
82081: LD_VAR 0 2
82085: PPUSH
82086: LD_INT 124
82088: PPUSH
82089: CALL 65942 0 2
// end ; end ;
82093: GO 81490
82095: POP
82096: POP
// end ;
82097: LD_VAR 0 1
82101: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82102: LD_INT 0
82104: PPUSH
82105: PPUSH
82106: PPUSH
// if not mc_bases then
82107: LD_EXP 36
82111: NOT
82112: IFFALSE 82116
// exit ;
82114: GO 82722
// for i = 1 to mc_bases do
82116: LD_ADDR_VAR 0 2
82120: PUSH
82121: DOUBLE
82122: LD_INT 1
82124: DEC
82125: ST_TO_ADDR
82126: LD_EXP 36
82130: PUSH
82131: FOR_TO
82132: IFFALSE 82720
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82134: LD_ADDR_VAR 0 3
82138: PUSH
82139: LD_EXP 36
82143: PUSH
82144: LD_VAR 0 2
82148: ARRAY
82149: PPUSH
82150: LD_INT 25
82152: PUSH
82153: LD_INT 4
82155: PUSH
82156: EMPTY
82157: LIST
82158: LIST
82159: PPUSH
82160: CALL_OW 72
82164: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82165: LD_VAR 0 3
82169: NOT
82170: PUSH
82171: LD_EXP 73
82175: PUSH
82176: LD_VAR 0 2
82180: ARRAY
82181: NOT
82182: OR
82183: PUSH
82184: LD_EXP 36
82188: PUSH
82189: LD_VAR 0 2
82193: ARRAY
82194: PPUSH
82195: LD_INT 2
82197: PUSH
82198: LD_INT 30
82200: PUSH
82201: LD_INT 0
82203: PUSH
82204: EMPTY
82205: LIST
82206: LIST
82207: PUSH
82208: LD_INT 30
82210: PUSH
82211: LD_INT 1
82213: PUSH
82214: EMPTY
82215: LIST
82216: LIST
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: LIST
82222: PPUSH
82223: CALL_OW 72
82227: NOT
82228: OR
82229: IFFALSE 82279
// begin if mc_deposits_finder [ i ] then
82231: LD_EXP 74
82235: PUSH
82236: LD_VAR 0 2
82240: ARRAY
82241: IFFALSE 82277
// begin MC_Reset ( i , 125 ) ;
82243: LD_VAR 0 2
82247: PPUSH
82248: LD_INT 125
82250: PPUSH
82251: CALL 65942 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82255: LD_ADDR_EXP 74
82259: PUSH
82260: LD_EXP 74
82264: PPUSH
82265: LD_VAR 0 2
82269: PPUSH
82270: EMPTY
82271: PPUSH
82272: CALL_OW 1
82276: ST_TO_ADDR
// end ; continue ;
82277: GO 82131
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82279: LD_EXP 73
82283: PUSH
82284: LD_VAR 0 2
82288: ARRAY
82289: PUSH
82290: LD_INT 1
82292: ARRAY
82293: PUSH
82294: LD_INT 3
82296: ARRAY
82297: PUSH
82298: LD_INT 1
82300: EQUAL
82301: PUSH
82302: LD_INT 20
82304: PPUSH
82305: LD_EXP 62
82309: PUSH
82310: LD_VAR 0 2
82314: ARRAY
82315: PPUSH
82316: CALL_OW 321
82320: PUSH
82321: LD_INT 2
82323: NONEQUAL
82324: AND
82325: IFFALSE 82375
// begin if mc_deposits_finder [ i ] then
82327: LD_EXP 74
82331: PUSH
82332: LD_VAR 0 2
82336: ARRAY
82337: IFFALSE 82373
// begin MC_Reset ( i , 125 ) ;
82339: LD_VAR 0 2
82343: PPUSH
82344: LD_INT 125
82346: PPUSH
82347: CALL 65942 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82351: LD_ADDR_EXP 74
82355: PUSH
82356: LD_EXP 74
82360: PPUSH
82361: LD_VAR 0 2
82365: PPUSH
82366: EMPTY
82367: PPUSH
82368: CALL_OW 1
82372: ST_TO_ADDR
// end ; continue ;
82373: GO 82131
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82375: LD_EXP 73
82379: PUSH
82380: LD_VAR 0 2
82384: ARRAY
82385: PUSH
82386: LD_INT 1
82388: ARRAY
82389: PUSH
82390: LD_INT 1
82392: ARRAY
82393: PPUSH
82394: LD_EXP 73
82398: PUSH
82399: LD_VAR 0 2
82403: ARRAY
82404: PUSH
82405: LD_INT 1
82407: ARRAY
82408: PUSH
82409: LD_INT 2
82411: ARRAY
82412: PPUSH
82413: LD_EXP 62
82417: PUSH
82418: LD_VAR 0 2
82422: ARRAY
82423: PPUSH
82424: CALL_OW 440
82428: IFFALSE 82471
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82430: LD_ADDR_EXP 73
82434: PUSH
82435: LD_EXP 73
82439: PPUSH
82440: LD_VAR 0 2
82444: PPUSH
82445: LD_EXP 73
82449: PUSH
82450: LD_VAR 0 2
82454: ARRAY
82455: PPUSH
82456: LD_INT 1
82458: PPUSH
82459: CALL_OW 3
82463: PPUSH
82464: CALL_OW 1
82468: ST_TO_ADDR
82469: GO 82718
// begin if not mc_deposits_finder [ i ] then
82471: LD_EXP 74
82475: PUSH
82476: LD_VAR 0 2
82480: ARRAY
82481: NOT
82482: IFFALSE 82534
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82484: LD_ADDR_EXP 74
82488: PUSH
82489: LD_EXP 74
82493: PPUSH
82494: LD_VAR 0 2
82498: PPUSH
82499: LD_VAR 0 3
82503: PUSH
82504: LD_INT 1
82506: ARRAY
82507: PUSH
82508: EMPTY
82509: LIST
82510: PPUSH
82511: CALL_OW 1
82515: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82516: LD_VAR 0 3
82520: PUSH
82521: LD_INT 1
82523: ARRAY
82524: PPUSH
82525: LD_INT 125
82527: PPUSH
82528: CALL_OW 109
// end else
82532: GO 82718
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82534: LD_EXP 74
82538: PUSH
82539: LD_VAR 0 2
82543: ARRAY
82544: PUSH
82545: LD_INT 1
82547: ARRAY
82548: PPUSH
82549: CALL_OW 310
82553: IFFALSE 82576
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82555: LD_EXP 74
82559: PUSH
82560: LD_VAR 0 2
82564: ARRAY
82565: PUSH
82566: LD_INT 1
82568: ARRAY
82569: PPUSH
82570: CALL_OW 122
82574: GO 82718
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82576: LD_EXP 74
82580: PUSH
82581: LD_VAR 0 2
82585: ARRAY
82586: PUSH
82587: LD_INT 1
82589: ARRAY
82590: PPUSH
82591: CALL_OW 314
82595: NOT
82596: PUSH
82597: LD_EXP 74
82601: PUSH
82602: LD_VAR 0 2
82606: ARRAY
82607: PUSH
82608: LD_INT 1
82610: ARRAY
82611: PPUSH
82612: LD_EXP 73
82616: PUSH
82617: LD_VAR 0 2
82621: ARRAY
82622: PUSH
82623: LD_INT 1
82625: ARRAY
82626: PUSH
82627: LD_INT 1
82629: ARRAY
82630: PPUSH
82631: LD_EXP 73
82635: PUSH
82636: LD_VAR 0 2
82640: ARRAY
82641: PUSH
82642: LD_INT 1
82644: ARRAY
82645: PUSH
82646: LD_INT 2
82648: ARRAY
82649: PPUSH
82650: CALL_OW 297
82654: PUSH
82655: LD_INT 6
82657: GREATER
82658: AND
82659: IFFALSE 82718
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82661: LD_EXP 74
82665: PUSH
82666: LD_VAR 0 2
82670: ARRAY
82671: PUSH
82672: LD_INT 1
82674: ARRAY
82675: PPUSH
82676: LD_EXP 73
82680: PUSH
82681: LD_VAR 0 2
82685: ARRAY
82686: PUSH
82687: LD_INT 1
82689: ARRAY
82690: PUSH
82691: LD_INT 1
82693: ARRAY
82694: PPUSH
82695: LD_EXP 73
82699: PUSH
82700: LD_VAR 0 2
82704: ARRAY
82705: PUSH
82706: LD_INT 1
82708: ARRAY
82709: PUSH
82710: LD_INT 2
82712: ARRAY
82713: PPUSH
82714: CALL_OW 111
// end ; end ; end ;
82718: GO 82131
82720: POP
82721: POP
// end ;
82722: LD_VAR 0 1
82726: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82727: LD_INT 0
82729: PPUSH
82730: PPUSH
82731: PPUSH
82732: PPUSH
82733: PPUSH
82734: PPUSH
82735: PPUSH
82736: PPUSH
82737: PPUSH
82738: PPUSH
82739: PPUSH
// if not mc_bases then
82740: LD_EXP 36
82744: NOT
82745: IFFALSE 82749
// exit ;
82747: GO 83473
// for i = 1 to mc_bases do
82749: LD_ADDR_VAR 0 2
82753: PUSH
82754: DOUBLE
82755: LD_INT 1
82757: DEC
82758: ST_TO_ADDR
82759: LD_EXP 36
82763: PUSH
82764: FOR_TO
82765: IFFALSE 83471
// begin if not mc_bases [ i ] then
82767: LD_EXP 36
82771: PUSH
82772: LD_VAR 0 2
82776: ARRAY
82777: NOT
82778: IFFALSE 82782
// continue ;
82780: GO 82764
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82782: LD_ADDR_VAR 0 7
82786: PUSH
82787: LD_EXP 36
82791: PUSH
82792: LD_VAR 0 2
82796: ARRAY
82797: PUSH
82798: LD_INT 1
82800: ARRAY
82801: PPUSH
82802: CALL_OW 248
82806: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82807: LD_VAR 0 7
82811: PUSH
82812: LD_INT 3
82814: EQUAL
82815: PUSH
82816: LD_EXP 55
82820: PUSH
82821: LD_VAR 0 2
82825: ARRAY
82826: PUSH
82827: LD_EXP 58
82831: PUSH
82832: LD_VAR 0 2
82836: ARRAY
82837: UNION
82838: PPUSH
82839: LD_INT 33
82841: PUSH
82842: LD_INT 2
82844: PUSH
82845: EMPTY
82846: LIST
82847: LIST
82848: PPUSH
82849: CALL_OW 72
82853: NOT
82854: OR
82855: IFFALSE 82859
// continue ;
82857: GO 82764
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82859: LD_ADDR_VAR 0 9
82863: PUSH
82864: LD_EXP 36
82868: PUSH
82869: LD_VAR 0 2
82873: ARRAY
82874: PPUSH
82875: LD_INT 30
82877: PUSH
82878: LD_INT 36
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PPUSH
82885: CALL_OW 72
82889: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82890: LD_ADDR_VAR 0 10
82894: PUSH
82895: LD_EXP 55
82899: PUSH
82900: LD_VAR 0 2
82904: ARRAY
82905: PPUSH
82906: LD_INT 34
82908: PUSH
82909: LD_INT 31
82911: PUSH
82912: EMPTY
82913: LIST
82914: LIST
82915: PPUSH
82916: CALL_OW 72
82920: ST_TO_ADDR
// if not cts and not mcts then
82921: LD_VAR 0 9
82925: NOT
82926: PUSH
82927: LD_VAR 0 10
82931: NOT
82932: AND
82933: IFFALSE 82937
// continue ;
82935: GO 82764
// x := cts ;
82937: LD_ADDR_VAR 0 11
82941: PUSH
82942: LD_VAR 0 9
82946: ST_TO_ADDR
// if not x then
82947: LD_VAR 0 11
82951: NOT
82952: IFFALSE 82964
// x := mcts ;
82954: LD_ADDR_VAR 0 11
82958: PUSH
82959: LD_VAR 0 10
82963: ST_TO_ADDR
// if mc_remote_driver [ i ] then
82964: LD_EXP 76
82968: PUSH
82969: LD_VAR 0 2
82973: ARRAY
82974: IFFALSE 83243
// for j in mc_remote_driver [ i ] do
82976: LD_ADDR_VAR 0 3
82980: PUSH
82981: LD_EXP 76
82985: PUSH
82986: LD_VAR 0 2
82990: ARRAY
82991: PUSH
82992: FOR_IN
82993: IFFALSE 83241
// begin if GetClass ( j ) <> 3 then
82995: LD_VAR 0 3
82999: PPUSH
83000: CALL_OW 257
83004: PUSH
83005: LD_INT 3
83007: NONEQUAL
83008: IFFALSE 83061
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83010: LD_ADDR_EXP 76
83014: PUSH
83015: LD_EXP 76
83019: PPUSH
83020: LD_VAR 0 2
83024: PPUSH
83025: LD_EXP 76
83029: PUSH
83030: LD_VAR 0 2
83034: ARRAY
83035: PUSH
83036: LD_VAR 0 3
83040: DIFF
83041: PPUSH
83042: CALL_OW 1
83046: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83047: LD_VAR 0 3
83051: PPUSH
83052: LD_INT 0
83054: PPUSH
83055: CALL_OW 109
// continue ;
83059: GO 82992
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83061: LD_VAR 0 3
83065: PPUSH
83066: CALL_OW 310
83070: NOT
83071: PUSH
83072: LD_VAR 0 3
83076: PPUSH
83077: CALL_OW 310
83081: PPUSH
83082: CALL_OW 266
83086: PUSH
83087: LD_INT 36
83089: NONEQUAL
83090: PUSH
83091: LD_VAR 0 3
83095: PPUSH
83096: CALL 59328 0 1
83100: NOT
83101: AND
83102: OR
83103: IFFALSE 83239
// begin if IsInUnit ( j ) then
83105: LD_VAR 0 3
83109: PPUSH
83110: CALL_OW 310
83114: IFFALSE 83125
// ComExitBuilding ( j ) ;
83116: LD_VAR 0 3
83120: PPUSH
83121: CALL_OW 122
// ct := 0 ;
83125: LD_ADDR_VAR 0 8
83129: PUSH
83130: LD_INT 0
83132: ST_TO_ADDR
// for k in x do
83133: LD_ADDR_VAR 0 4
83137: PUSH
83138: LD_VAR 0 11
83142: PUSH
83143: FOR_IN
83144: IFFALSE 83217
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83146: LD_VAR 0 4
83150: PPUSH
83151: CALL_OW 264
83155: PUSH
83156: LD_INT 31
83158: EQUAL
83159: PUSH
83160: LD_VAR 0 4
83164: PPUSH
83165: CALL_OW 311
83169: NOT
83170: AND
83171: PUSH
83172: LD_VAR 0 4
83176: PPUSH
83177: CALL_OW 266
83181: PUSH
83182: LD_INT 36
83184: EQUAL
83185: PUSH
83186: LD_VAR 0 4
83190: PPUSH
83191: CALL_OW 313
83195: PUSH
83196: LD_INT 3
83198: LESS
83199: AND
83200: OR
83201: IFFALSE 83215
// begin ct := k ;
83203: LD_ADDR_VAR 0 8
83207: PUSH
83208: LD_VAR 0 4
83212: ST_TO_ADDR
// break ;
83213: GO 83217
// end ;
83215: GO 83143
83217: POP
83218: POP
// if ct then
83219: LD_VAR 0 8
83223: IFFALSE 83239
// ComEnterUnit ( j , ct ) ;
83225: LD_VAR 0 3
83229: PPUSH
83230: LD_VAR 0 8
83234: PPUSH
83235: CALL_OW 120
// end ; end ;
83239: GO 82992
83241: POP
83242: POP
// places := 0 ;
83243: LD_ADDR_VAR 0 5
83247: PUSH
83248: LD_INT 0
83250: ST_TO_ADDR
// for j = 1 to x do
83251: LD_ADDR_VAR 0 3
83255: PUSH
83256: DOUBLE
83257: LD_INT 1
83259: DEC
83260: ST_TO_ADDR
83261: LD_VAR 0 11
83265: PUSH
83266: FOR_TO
83267: IFFALSE 83322
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83269: LD_VAR 0 11
83273: PUSH
83274: LD_VAR 0 3
83278: ARRAY
83279: PPUSH
83280: CALL_OW 264
83284: PUSH
83285: LD_INT 31
83287: EQUAL
83288: IFFALSE 83306
// places := places + 1 else
83290: LD_ADDR_VAR 0 5
83294: PUSH
83295: LD_VAR 0 5
83299: PUSH
83300: LD_INT 1
83302: PLUS
83303: ST_TO_ADDR
83304: GO 83320
// places := places + 3 ;
83306: LD_ADDR_VAR 0 5
83310: PUSH
83311: LD_VAR 0 5
83315: PUSH
83316: LD_INT 3
83318: PLUS
83319: ST_TO_ADDR
83320: GO 83266
83322: POP
83323: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83324: LD_ADDR_VAR 0 6
83328: PUSH
83329: LD_EXP 36
83333: PUSH
83334: LD_VAR 0 2
83338: ARRAY
83339: PPUSH
83340: LD_INT 25
83342: PUSH
83343: LD_INT 3
83345: PUSH
83346: EMPTY
83347: LIST
83348: LIST
83349: PPUSH
83350: CALL_OW 72
83354: PUSH
83355: LD_EXP 76
83359: PUSH
83360: LD_VAR 0 2
83364: ARRAY
83365: DIFF
83366: PPUSH
83367: LD_INT 3
83369: PPUSH
83370: CALL 60228 0 2
83374: ST_TO_ADDR
// if not tmp then
83375: LD_VAR 0 6
83379: NOT
83380: IFFALSE 83384
// continue ;
83382: GO 82764
// places := places - mc_remote_driver [ i ] ;
83384: LD_ADDR_VAR 0 5
83388: PUSH
83389: LD_VAR 0 5
83393: PUSH
83394: LD_EXP 76
83398: PUSH
83399: LD_VAR 0 2
83403: ARRAY
83404: MINUS
83405: ST_TO_ADDR
// if places then
83406: LD_VAR 0 5
83410: IFFALSE 83469
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
83412: LD_ADDR_EXP 76
83416: PUSH
83417: LD_EXP 76
83421: PPUSH
83422: LD_VAR 0 2
83426: PPUSH
83427: LD_EXP 76
83431: PUSH
83432: LD_VAR 0 2
83436: ARRAY
83437: PUSH
83438: LD_VAR 0 6
83442: PUSH
83443: LD_INT 1
83445: ARRAY
83446: UNION
83447: PPUSH
83448: CALL_OW 1
83452: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83453: LD_VAR 0 6
83457: PUSH
83458: LD_INT 1
83460: ARRAY
83461: PPUSH
83462: LD_INT 126
83464: PPUSH
83465: CALL_OW 109
// end ; end ;
83469: GO 82764
83471: POP
83472: POP
// end ;
83473: LD_VAR 0 1
83477: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83478: LD_INT 0
83480: PPUSH
83481: PPUSH
83482: PPUSH
83483: PPUSH
83484: PPUSH
83485: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83486: LD_VAR 0 1
83490: NOT
83491: PUSH
83492: LD_VAR 0 2
83496: NOT
83497: OR
83498: PUSH
83499: LD_VAR 0 3
83503: NOT
83504: OR
83505: PUSH
83506: LD_VAR 0 4
83510: PUSH
83511: LD_INT 1
83513: PUSH
83514: LD_INT 2
83516: PUSH
83517: LD_INT 3
83519: PUSH
83520: LD_INT 4
83522: PUSH
83523: LD_INT 5
83525: PUSH
83526: LD_INT 8
83528: PUSH
83529: LD_INT 9
83531: PUSH
83532: LD_INT 15
83534: PUSH
83535: LD_INT 16
83537: PUSH
83538: EMPTY
83539: LIST
83540: LIST
83541: LIST
83542: LIST
83543: LIST
83544: LIST
83545: LIST
83546: LIST
83547: LIST
83548: IN
83549: NOT
83550: OR
83551: IFFALSE 83555
// exit ;
83553: GO 84455
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83555: LD_ADDR_VAR 0 2
83559: PUSH
83560: LD_VAR 0 2
83564: PPUSH
83565: LD_INT 21
83567: PUSH
83568: LD_INT 3
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PUSH
83575: LD_INT 24
83577: PUSH
83578: LD_INT 250
83580: PUSH
83581: EMPTY
83582: LIST
83583: LIST
83584: PUSH
83585: EMPTY
83586: LIST
83587: LIST
83588: PPUSH
83589: CALL_OW 72
83593: ST_TO_ADDR
// case class of 1 , 15 :
83594: LD_VAR 0 4
83598: PUSH
83599: LD_INT 1
83601: DOUBLE
83602: EQUAL
83603: IFTRUE 83613
83605: LD_INT 15
83607: DOUBLE
83608: EQUAL
83609: IFTRUE 83613
83611: GO 83698
83613: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83614: LD_ADDR_VAR 0 8
83618: PUSH
83619: LD_VAR 0 2
83623: PPUSH
83624: LD_INT 2
83626: PUSH
83627: LD_INT 30
83629: PUSH
83630: LD_INT 32
83632: PUSH
83633: EMPTY
83634: LIST
83635: LIST
83636: PUSH
83637: LD_INT 30
83639: PUSH
83640: LD_INT 31
83642: PUSH
83643: EMPTY
83644: LIST
83645: LIST
83646: PUSH
83647: EMPTY
83648: LIST
83649: LIST
83650: LIST
83651: PPUSH
83652: CALL_OW 72
83656: PUSH
83657: LD_VAR 0 2
83661: PPUSH
83662: LD_INT 2
83664: PUSH
83665: LD_INT 30
83667: PUSH
83668: LD_INT 4
83670: PUSH
83671: EMPTY
83672: LIST
83673: LIST
83674: PUSH
83675: LD_INT 30
83677: PUSH
83678: LD_INT 5
83680: PUSH
83681: EMPTY
83682: LIST
83683: LIST
83684: PUSH
83685: EMPTY
83686: LIST
83687: LIST
83688: LIST
83689: PPUSH
83690: CALL_OW 72
83694: ADD
83695: ST_TO_ADDR
83696: GO 83944
83698: LD_INT 2
83700: DOUBLE
83701: EQUAL
83702: IFTRUE 83712
83704: LD_INT 16
83706: DOUBLE
83707: EQUAL
83708: IFTRUE 83712
83710: GO 83758
83712: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83713: LD_ADDR_VAR 0 8
83717: PUSH
83718: LD_VAR 0 2
83722: PPUSH
83723: LD_INT 2
83725: PUSH
83726: LD_INT 30
83728: PUSH
83729: LD_INT 0
83731: PUSH
83732: EMPTY
83733: LIST
83734: LIST
83735: PUSH
83736: LD_INT 30
83738: PUSH
83739: LD_INT 1
83741: PUSH
83742: EMPTY
83743: LIST
83744: LIST
83745: PUSH
83746: EMPTY
83747: LIST
83748: LIST
83749: LIST
83750: PPUSH
83751: CALL_OW 72
83755: ST_TO_ADDR
83756: GO 83944
83758: LD_INT 3
83760: DOUBLE
83761: EQUAL
83762: IFTRUE 83766
83764: GO 83812
83766: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83767: LD_ADDR_VAR 0 8
83771: PUSH
83772: LD_VAR 0 2
83776: PPUSH
83777: LD_INT 2
83779: PUSH
83780: LD_INT 30
83782: PUSH
83783: LD_INT 2
83785: PUSH
83786: EMPTY
83787: LIST
83788: LIST
83789: PUSH
83790: LD_INT 30
83792: PUSH
83793: LD_INT 3
83795: PUSH
83796: EMPTY
83797: LIST
83798: LIST
83799: PUSH
83800: EMPTY
83801: LIST
83802: LIST
83803: LIST
83804: PPUSH
83805: CALL_OW 72
83809: ST_TO_ADDR
83810: GO 83944
83812: LD_INT 4
83814: DOUBLE
83815: EQUAL
83816: IFTRUE 83820
83818: GO 83877
83820: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83821: LD_ADDR_VAR 0 8
83825: PUSH
83826: LD_VAR 0 2
83830: PPUSH
83831: LD_INT 2
83833: PUSH
83834: LD_INT 30
83836: PUSH
83837: LD_INT 6
83839: PUSH
83840: EMPTY
83841: LIST
83842: LIST
83843: PUSH
83844: LD_INT 30
83846: PUSH
83847: LD_INT 7
83849: PUSH
83850: EMPTY
83851: LIST
83852: LIST
83853: PUSH
83854: LD_INT 30
83856: PUSH
83857: LD_INT 8
83859: PUSH
83860: EMPTY
83861: LIST
83862: LIST
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: LIST
83868: LIST
83869: PPUSH
83870: CALL_OW 72
83874: ST_TO_ADDR
83875: GO 83944
83877: LD_INT 5
83879: DOUBLE
83880: EQUAL
83881: IFTRUE 83897
83883: LD_INT 8
83885: DOUBLE
83886: EQUAL
83887: IFTRUE 83897
83889: LD_INT 9
83891: DOUBLE
83892: EQUAL
83893: IFTRUE 83897
83895: GO 83943
83897: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83898: LD_ADDR_VAR 0 8
83902: PUSH
83903: LD_VAR 0 2
83907: PPUSH
83908: LD_INT 2
83910: PUSH
83911: LD_INT 30
83913: PUSH
83914: LD_INT 4
83916: PUSH
83917: EMPTY
83918: LIST
83919: LIST
83920: PUSH
83921: LD_INT 30
83923: PUSH
83924: LD_INT 5
83926: PUSH
83927: EMPTY
83928: LIST
83929: LIST
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: LIST
83935: PPUSH
83936: CALL_OW 72
83940: ST_TO_ADDR
83941: GO 83944
83943: POP
// if not tmp then
83944: LD_VAR 0 8
83948: NOT
83949: IFFALSE 83953
// exit ;
83951: GO 84455
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
83953: LD_VAR 0 4
83957: PUSH
83958: LD_INT 1
83960: PUSH
83961: LD_INT 15
83963: PUSH
83964: EMPTY
83965: LIST
83966: LIST
83967: IN
83968: PUSH
83969: LD_EXP 45
83973: PUSH
83974: LD_VAR 0 1
83978: ARRAY
83979: AND
83980: IFFALSE 84136
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
83982: LD_ADDR_VAR 0 9
83986: PUSH
83987: LD_EXP 45
83991: PUSH
83992: LD_VAR 0 1
83996: ARRAY
83997: PUSH
83998: LD_INT 1
84000: ARRAY
84001: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84002: LD_VAR 0 9
84006: PUSH
84007: LD_EXP 46
84011: PUSH
84012: LD_VAR 0 1
84016: ARRAY
84017: IN
84018: NOT
84019: IFFALSE 84134
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84021: LD_ADDR_EXP 46
84025: PUSH
84026: LD_EXP 46
84030: PPUSH
84031: LD_VAR 0 1
84035: PUSH
84036: LD_EXP 46
84040: PUSH
84041: LD_VAR 0 1
84045: ARRAY
84046: PUSH
84047: LD_INT 1
84049: PLUS
84050: PUSH
84051: EMPTY
84052: LIST
84053: LIST
84054: PPUSH
84055: LD_VAR 0 9
84059: PPUSH
84060: CALL 26004 0 3
84064: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84065: LD_ADDR_EXP 45
84069: PUSH
84070: LD_EXP 45
84074: PPUSH
84075: LD_VAR 0 1
84079: PPUSH
84080: LD_EXP 45
84084: PUSH
84085: LD_VAR 0 1
84089: ARRAY
84090: PUSH
84091: LD_VAR 0 9
84095: DIFF
84096: PPUSH
84097: CALL_OW 1
84101: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84102: LD_VAR 0 3
84106: PPUSH
84107: LD_EXP 46
84111: PUSH
84112: LD_VAR 0 1
84116: ARRAY
84117: PUSH
84118: LD_EXP 46
84122: PUSH
84123: LD_VAR 0 1
84127: ARRAY
84128: ARRAY
84129: PPUSH
84130: CALL_OW 120
// end ; exit ;
84134: GO 84455
// end ; if tmp > 1 then
84136: LD_VAR 0 8
84140: PUSH
84141: LD_INT 1
84143: GREATER
84144: IFFALSE 84248
// for i = 2 to tmp do
84146: LD_ADDR_VAR 0 6
84150: PUSH
84151: DOUBLE
84152: LD_INT 2
84154: DEC
84155: ST_TO_ADDR
84156: LD_VAR 0 8
84160: PUSH
84161: FOR_TO
84162: IFFALSE 84246
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84164: LD_VAR 0 8
84168: PUSH
84169: LD_VAR 0 6
84173: ARRAY
84174: PPUSH
84175: CALL_OW 461
84179: PUSH
84180: LD_INT 6
84182: EQUAL
84183: IFFALSE 84244
// begin x := tmp [ i ] ;
84185: LD_ADDR_VAR 0 9
84189: PUSH
84190: LD_VAR 0 8
84194: PUSH
84195: LD_VAR 0 6
84199: ARRAY
84200: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84201: LD_ADDR_VAR 0 8
84205: PUSH
84206: LD_VAR 0 8
84210: PPUSH
84211: LD_VAR 0 6
84215: PPUSH
84216: CALL_OW 3
84220: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84221: LD_ADDR_VAR 0 8
84225: PUSH
84226: LD_VAR 0 8
84230: PPUSH
84231: LD_INT 1
84233: PPUSH
84234: LD_VAR 0 9
84238: PPUSH
84239: CALL_OW 2
84243: ST_TO_ADDR
// end ;
84244: GO 84161
84246: POP
84247: POP
// for i in tmp do
84248: LD_ADDR_VAR 0 6
84252: PUSH
84253: LD_VAR 0 8
84257: PUSH
84258: FOR_IN
84259: IFFALSE 84328
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84261: LD_VAR 0 6
84265: PPUSH
84266: CALL_OW 313
84270: PUSH
84271: LD_INT 6
84273: LESS
84274: PUSH
84275: LD_VAR 0 6
84279: PPUSH
84280: CALL_OW 266
84284: PUSH
84285: LD_INT 31
84287: PUSH
84288: LD_INT 32
84290: PUSH
84291: EMPTY
84292: LIST
84293: LIST
84294: IN
84295: NOT
84296: AND
84297: PUSH
84298: LD_VAR 0 6
84302: PPUSH
84303: CALL_OW 313
84307: PUSH
84308: LD_INT 0
84310: EQUAL
84311: OR
84312: IFFALSE 84326
// begin j := i ;
84314: LD_ADDR_VAR 0 7
84318: PUSH
84319: LD_VAR 0 6
84323: ST_TO_ADDR
// break ;
84324: GO 84328
// end ; end ;
84326: GO 84258
84328: POP
84329: POP
// if j then
84330: LD_VAR 0 7
84334: IFFALSE 84352
// ComEnterUnit ( unit , j ) else
84336: LD_VAR 0 3
84340: PPUSH
84341: LD_VAR 0 7
84345: PPUSH
84346: CALL_OW 120
84350: GO 84455
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84352: LD_ADDR_VAR 0 10
84356: PUSH
84357: LD_VAR 0 2
84361: PPUSH
84362: LD_INT 2
84364: PUSH
84365: LD_INT 30
84367: PUSH
84368: LD_INT 0
84370: PUSH
84371: EMPTY
84372: LIST
84373: LIST
84374: PUSH
84375: LD_INT 30
84377: PUSH
84378: LD_INT 1
84380: PUSH
84381: EMPTY
84382: LIST
84383: LIST
84384: PUSH
84385: EMPTY
84386: LIST
84387: LIST
84388: LIST
84389: PPUSH
84390: CALL_OW 72
84394: ST_TO_ADDR
// if depot then
84395: LD_VAR 0 10
84399: IFFALSE 84455
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84401: LD_ADDR_VAR 0 10
84405: PUSH
84406: LD_VAR 0 10
84410: PPUSH
84411: LD_VAR 0 3
84415: PPUSH
84416: CALL_OW 74
84420: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84421: LD_VAR 0 3
84425: PPUSH
84426: LD_VAR 0 10
84430: PPUSH
84431: CALL_OW 296
84435: PUSH
84436: LD_INT 10
84438: GREATER
84439: IFFALSE 84455
// ComStandNearbyBuilding ( unit , depot ) ;
84441: LD_VAR 0 3
84445: PPUSH
84446: LD_VAR 0 10
84450: PPUSH
84451: CALL 20711 0 2
// end ; end ; end ;
84455: LD_VAR 0 5
84459: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84460: LD_INT 0
84462: PPUSH
84463: PPUSH
84464: PPUSH
84465: PPUSH
// if not mc_bases then
84466: LD_EXP 36
84470: NOT
84471: IFFALSE 84475
// exit ;
84473: GO 84714
// for i = 1 to mc_bases do
84475: LD_ADDR_VAR 0 2
84479: PUSH
84480: DOUBLE
84481: LD_INT 1
84483: DEC
84484: ST_TO_ADDR
84485: LD_EXP 36
84489: PUSH
84490: FOR_TO
84491: IFFALSE 84712
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84493: LD_ADDR_VAR 0 4
84497: PUSH
84498: LD_EXP 36
84502: PUSH
84503: LD_VAR 0 2
84507: ARRAY
84508: PPUSH
84509: LD_INT 21
84511: PUSH
84512: LD_INT 1
84514: PUSH
84515: EMPTY
84516: LIST
84517: LIST
84518: PPUSH
84519: CALL_OW 72
84523: PUSH
84524: LD_EXP 65
84528: PUSH
84529: LD_VAR 0 2
84533: ARRAY
84534: UNION
84535: ST_TO_ADDR
// if not tmp then
84536: LD_VAR 0 4
84540: NOT
84541: IFFALSE 84545
// continue ;
84543: GO 84490
// for j in tmp do
84545: LD_ADDR_VAR 0 3
84549: PUSH
84550: LD_VAR 0 4
84554: PUSH
84555: FOR_IN
84556: IFFALSE 84708
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84558: LD_VAR 0 3
84562: PPUSH
84563: CALL_OW 110
84567: NOT
84568: PUSH
84569: LD_VAR 0 3
84573: PPUSH
84574: CALL_OW 314
84578: NOT
84579: AND
84580: PUSH
84581: LD_VAR 0 3
84585: PPUSH
84586: CALL_OW 311
84590: NOT
84591: AND
84592: PUSH
84593: LD_VAR 0 3
84597: PPUSH
84598: CALL_OW 310
84602: NOT
84603: AND
84604: PUSH
84605: LD_VAR 0 3
84609: PUSH
84610: LD_EXP 39
84614: PUSH
84615: LD_VAR 0 2
84619: ARRAY
84620: PUSH
84621: LD_INT 1
84623: ARRAY
84624: IN
84625: NOT
84626: AND
84627: PUSH
84628: LD_VAR 0 3
84632: PUSH
84633: LD_EXP 39
84637: PUSH
84638: LD_VAR 0 2
84642: ARRAY
84643: PUSH
84644: LD_INT 2
84646: ARRAY
84647: IN
84648: NOT
84649: AND
84650: PUSH
84651: LD_VAR 0 3
84655: PUSH
84656: LD_EXP 48
84660: PUSH
84661: LD_VAR 0 2
84665: ARRAY
84666: IN
84667: NOT
84668: AND
84669: IFFALSE 84706
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84671: LD_VAR 0 2
84675: PPUSH
84676: LD_EXP 36
84680: PUSH
84681: LD_VAR 0 2
84685: ARRAY
84686: PPUSH
84687: LD_VAR 0 3
84691: PPUSH
84692: LD_VAR 0 3
84696: PPUSH
84697: CALL_OW 257
84701: PPUSH
84702: CALL 83478 0 4
// end ;
84706: GO 84555
84708: POP
84709: POP
// end ;
84710: GO 84490
84712: POP
84713: POP
// end ;
84714: LD_VAR 0 1
84718: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84719: LD_INT 0
84721: PPUSH
84722: PPUSH
84723: PPUSH
84724: PPUSH
84725: PPUSH
84726: PPUSH
// if not mc_bases [ base ] then
84727: LD_EXP 36
84731: PUSH
84732: LD_VAR 0 1
84736: ARRAY
84737: NOT
84738: IFFALSE 84742
// exit ;
84740: GO 84924
// tmp := [ ] ;
84742: LD_ADDR_VAR 0 6
84746: PUSH
84747: EMPTY
84748: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84749: LD_ADDR_VAR 0 7
84753: PUSH
84754: LD_VAR 0 3
84758: PPUSH
84759: LD_INT 0
84761: PPUSH
84762: CALL_OW 517
84766: ST_TO_ADDR
// if not list then
84767: LD_VAR 0 7
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 84924
// for i = 1 to amount do
84776: LD_ADDR_VAR 0 5
84780: PUSH
84781: DOUBLE
84782: LD_INT 1
84784: DEC
84785: ST_TO_ADDR
84786: LD_VAR 0 2
84790: PUSH
84791: FOR_TO
84792: IFFALSE 84872
// begin x := rand ( 1 , list [ 1 ] ) ;
84794: LD_ADDR_VAR 0 8
84798: PUSH
84799: LD_INT 1
84801: PPUSH
84802: LD_VAR 0 7
84806: PUSH
84807: LD_INT 1
84809: ARRAY
84810: PPUSH
84811: CALL_OW 12
84815: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84816: LD_ADDR_VAR 0 6
84820: PUSH
84821: LD_VAR 0 6
84825: PPUSH
84826: LD_VAR 0 5
84830: PPUSH
84831: LD_VAR 0 7
84835: PUSH
84836: LD_INT 1
84838: ARRAY
84839: PUSH
84840: LD_VAR 0 8
84844: ARRAY
84845: PUSH
84846: LD_VAR 0 7
84850: PUSH
84851: LD_INT 2
84853: ARRAY
84854: PUSH
84855: LD_VAR 0 8
84859: ARRAY
84860: PUSH
84861: EMPTY
84862: LIST
84863: LIST
84864: PPUSH
84865: CALL_OW 1
84869: ST_TO_ADDR
// end ;
84870: GO 84791
84872: POP
84873: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84874: LD_ADDR_EXP 49
84878: PUSH
84879: LD_EXP 49
84883: PPUSH
84884: LD_VAR 0 1
84888: PPUSH
84889: LD_VAR 0 6
84893: PPUSH
84894: CALL_OW 1
84898: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84899: LD_ADDR_EXP 51
84903: PUSH
84904: LD_EXP 51
84908: PPUSH
84909: LD_VAR 0 1
84913: PPUSH
84914: LD_VAR 0 3
84918: PPUSH
84919: CALL_OW 1
84923: ST_TO_ADDR
// end ;
84924: LD_VAR 0 4
84928: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
84929: LD_INT 0
84931: PPUSH
// if not mc_bases [ base ] then
84932: LD_EXP 36
84936: PUSH
84937: LD_VAR 0 1
84941: ARRAY
84942: NOT
84943: IFFALSE 84947
// exit ;
84945: GO 84972
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
84947: LD_ADDR_EXP 41
84951: PUSH
84952: LD_EXP 41
84956: PPUSH
84957: LD_VAR 0 1
84961: PPUSH
84962: LD_VAR 0 2
84966: PPUSH
84967: CALL_OW 1
84971: ST_TO_ADDR
// end ;
84972: LD_VAR 0 3
84976: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
84977: LD_INT 0
84979: PPUSH
// if not mc_bases [ base ] then
84980: LD_EXP 36
84984: PUSH
84985: LD_VAR 0 1
84989: ARRAY
84990: NOT
84991: IFFALSE 84995
// exit ;
84993: GO 85032
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
84995: LD_ADDR_EXP 41
84999: PUSH
85000: LD_EXP 41
85004: PPUSH
85005: LD_VAR 0 1
85009: PPUSH
85010: LD_EXP 41
85014: PUSH
85015: LD_VAR 0 1
85019: ARRAY
85020: PUSH
85021: LD_VAR 0 2
85025: UNION
85026: PPUSH
85027: CALL_OW 1
85031: ST_TO_ADDR
// end ;
85032: LD_VAR 0 3
85036: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85037: LD_INT 0
85039: PPUSH
// if not mc_bases [ base ] then
85040: LD_EXP 36
85044: PUSH
85045: LD_VAR 0 1
85049: ARRAY
85050: NOT
85051: IFFALSE 85055
// exit ;
85053: GO 85080
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85055: LD_ADDR_EXP 57
85059: PUSH
85060: LD_EXP 57
85064: PPUSH
85065: LD_VAR 0 1
85069: PPUSH
85070: LD_VAR 0 2
85074: PPUSH
85075: CALL_OW 1
85079: ST_TO_ADDR
// end ;
85080: LD_VAR 0 3
85084: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85085: LD_INT 0
85087: PPUSH
// if not mc_bases [ base ] then
85088: LD_EXP 36
85092: PUSH
85093: LD_VAR 0 1
85097: ARRAY
85098: NOT
85099: IFFALSE 85103
// exit ;
85101: GO 85140
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85103: LD_ADDR_EXP 57
85107: PUSH
85108: LD_EXP 57
85112: PPUSH
85113: LD_VAR 0 1
85117: PPUSH
85118: LD_EXP 57
85122: PUSH
85123: LD_VAR 0 1
85127: ARRAY
85128: PUSH
85129: LD_VAR 0 2
85133: ADD
85134: PPUSH
85135: CALL_OW 1
85139: ST_TO_ADDR
// end ;
85140: LD_VAR 0 3
85144: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85145: LD_INT 0
85147: PPUSH
// if not mc_bases [ base ] then
85148: LD_EXP 36
85152: PUSH
85153: LD_VAR 0 1
85157: ARRAY
85158: NOT
85159: IFFALSE 85163
// exit ;
85161: GO 85217
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85163: LD_ADDR_EXP 58
85167: PUSH
85168: LD_EXP 58
85172: PPUSH
85173: LD_VAR 0 1
85177: PPUSH
85178: LD_VAR 0 2
85182: PPUSH
85183: CALL_OW 1
85187: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85188: LD_ADDR_EXP 47
85192: PUSH
85193: LD_EXP 47
85197: PPUSH
85198: LD_VAR 0 1
85202: PPUSH
85203: LD_VAR 0 2
85207: PUSH
85208: LD_INT 0
85210: PLUS
85211: PPUSH
85212: CALL_OW 1
85216: ST_TO_ADDR
// end ;
85217: LD_VAR 0 3
85221: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85222: LD_INT 0
85224: PPUSH
// if not mc_bases [ base ] then
85225: LD_EXP 36
85229: PUSH
85230: LD_VAR 0 1
85234: ARRAY
85235: NOT
85236: IFFALSE 85240
// exit ;
85238: GO 85265
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85240: LD_ADDR_EXP 47
85244: PUSH
85245: LD_EXP 47
85249: PPUSH
85250: LD_VAR 0 1
85254: PPUSH
85255: LD_VAR 0 2
85259: PPUSH
85260: CALL_OW 1
85264: ST_TO_ADDR
// end ;
85265: LD_VAR 0 3
85269: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85270: LD_INT 0
85272: PPUSH
85273: PPUSH
85274: PPUSH
85275: PPUSH
// if not mc_bases [ base ] then
85276: LD_EXP 36
85280: PUSH
85281: LD_VAR 0 1
85285: ARRAY
85286: NOT
85287: IFFALSE 85291
// exit ;
85289: GO 85356
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85291: LD_ADDR_EXP 56
85295: PUSH
85296: LD_EXP 56
85300: PPUSH
85301: LD_VAR 0 1
85305: PUSH
85306: LD_EXP 56
85310: PUSH
85311: LD_VAR 0 1
85315: ARRAY
85316: PUSH
85317: LD_INT 1
85319: PLUS
85320: PUSH
85321: EMPTY
85322: LIST
85323: LIST
85324: PPUSH
85325: LD_VAR 0 1
85329: PUSH
85330: LD_VAR 0 2
85334: PUSH
85335: LD_VAR 0 3
85339: PUSH
85340: LD_VAR 0 4
85344: PUSH
85345: EMPTY
85346: LIST
85347: LIST
85348: LIST
85349: LIST
85350: PPUSH
85351: CALL 26004 0 3
85355: ST_TO_ADDR
// end ;
85356: LD_VAR 0 5
85360: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85361: LD_INT 0
85363: PPUSH
// if not mc_bases [ base ] then
85364: LD_EXP 36
85368: PUSH
85369: LD_VAR 0 1
85373: ARRAY
85374: NOT
85375: IFFALSE 85379
// exit ;
85377: GO 85404
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85379: LD_ADDR_EXP 73
85383: PUSH
85384: LD_EXP 73
85388: PPUSH
85389: LD_VAR 0 1
85393: PPUSH
85394: LD_VAR 0 2
85398: PPUSH
85399: CALL_OW 1
85403: ST_TO_ADDR
// end ;
85404: LD_VAR 0 3
85408: RET
// export function MC_GetMinesField ( base ) ; begin
85409: LD_INT 0
85411: PPUSH
// result := mc_mines [ base ] ;
85412: LD_ADDR_VAR 0 2
85416: PUSH
85417: LD_EXP 49
85421: PUSH
85422: LD_VAR 0 1
85426: ARRAY
85427: ST_TO_ADDR
// end ;
85428: LD_VAR 0 2
85432: RET
// export function MC_GetProduceList ( base ) ; begin
85433: LD_INT 0
85435: PPUSH
// result := mc_produce [ base ] ;
85436: LD_ADDR_VAR 0 2
85440: PUSH
85441: LD_EXP 57
85445: PUSH
85446: LD_VAR 0 1
85450: ARRAY
85451: ST_TO_ADDR
// end ;
85452: LD_VAR 0 2
85456: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85457: LD_INT 0
85459: PPUSH
85460: PPUSH
// if not mc_bases then
85461: LD_EXP 36
85465: NOT
85466: IFFALSE 85470
// exit ;
85468: GO 85535
// if mc_bases [ base ] then
85470: LD_EXP 36
85474: PUSH
85475: LD_VAR 0 1
85479: ARRAY
85480: IFFALSE 85535
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85482: LD_ADDR_VAR 0 3
85486: PUSH
85487: LD_EXP 36
85491: PUSH
85492: LD_VAR 0 1
85496: ARRAY
85497: PPUSH
85498: LD_INT 30
85500: PUSH
85501: LD_VAR 0 2
85505: PUSH
85506: EMPTY
85507: LIST
85508: LIST
85509: PPUSH
85510: CALL_OW 72
85514: ST_TO_ADDR
// if result then
85515: LD_VAR 0 3
85519: IFFALSE 85535
// result := result [ 1 ] ;
85521: LD_ADDR_VAR 0 3
85525: PUSH
85526: LD_VAR 0 3
85530: PUSH
85531: LD_INT 1
85533: ARRAY
85534: ST_TO_ADDR
// end ; end ;
85535: LD_VAR 0 3
85539: RET
// export function MC_SetTame ( base , area ) ; begin
85540: LD_INT 0
85542: PPUSH
// if not mc_bases or not base then
85543: LD_EXP 36
85547: NOT
85548: PUSH
85549: LD_VAR 0 1
85553: NOT
85554: OR
85555: IFFALSE 85559
// exit ;
85557: GO 85584
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85559: LD_ADDR_EXP 64
85563: PUSH
85564: LD_EXP 64
85568: PPUSH
85569: LD_VAR 0 1
85573: PPUSH
85574: LD_VAR 0 2
85578: PPUSH
85579: CALL_OW 1
85583: ST_TO_ADDR
// end ;
85584: LD_VAR 0 3
85588: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85589: LD_INT 0
85591: PPUSH
85592: PPUSH
// if not mc_bases or not base then
85593: LD_EXP 36
85597: NOT
85598: PUSH
85599: LD_VAR 0 1
85603: NOT
85604: OR
85605: IFFALSE 85609
// exit ;
85607: GO 85711
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85609: LD_ADDR_VAR 0 4
85613: PUSH
85614: LD_EXP 36
85618: PUSH
85619: LD_VAR 0 1
85623: ARRAY
85624: PPUSH
85625: LD_INT 30
85627: PUSH
85628: LD_VAR 0 2
85632: PUSH
85633: EMPTY
85634: LIST
85635: LIST
85636: PPUSH
85637: CALL_OW 72
85641: ST_TO_ADDR
// if not tmp then
85642: LD_VAR 0 4
85646: NOT
85647: IFFALSE 85651
// exit ;
85649: GO 85711
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85651: LD_ADDR_EXP 68
85655: PUSH
85656: LD_EXP 68
85660: PPUSH
85661: LD_VAR 0 1
85665: PPUSH
85666: LD_EXP 68
85670: PUSH
85671: LD_VAR 0 1
85675: ARRAY
85676: PPUSH
85677: LD_EXP 68
85681: PUSH
85682: LD_VAR 0 1
85686: ARRAY
85687: PUSH
85688: LD_INT 1
85690: PLUS
85691: PPUSH
85692: LD_VAR 0 4
85696: PUSH
85697: LD_INT 1
85699: ARRAY
85700: PPUSH
85701: CALL_OW 2
85705: PPUSH
85706: CALL_OW 1
85710: ST_TO_ADDR
// end ;
85711: LD_VAR 0 3
85715: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85716: LD_INT 0
85718: PPUSH
85719: PPUSH
// if not mc_bases or not base or not kinds then
85720: LD_EXP 36
85724: NOT
85725: PUSH
85726: LD_VAR 0 1
85730: NOT
85731: OR
85732: PUSH
85733: LD_VAR 0 2
85737: NOT
85738: OR
85739: IFFALSE 85743
// exit ;
85741: GO 85804
// for i in kinds do
85743: LD_ADDR_VAR 0 4
85747: PUSH
85748: LD_VAR 0 2
85752: PUSH
85753: FOR_IN
85754: IFFALSE 85802
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85756: LD_ADDR_EXP 70
85760: PUSH
85761: LD_EXP 70
85765: PPUSH
85766: LD_VAR 0 1
85770: PUSH
85771: LD_EXP 70
85775: PUSH
85776: LD_VAR 0 1
85780: ARRAY
85781: PUSH
85782: LD_INT 1
85784: PLUS
85785: PUSH
85786: EMPTY
85787: LIST
85788: LIST
85789: PPUSH
85790: LD_VAR 0 4
85794: PPUSH
85795: CALL 26004 0 3
85799: ST_TO_ADDR
85800: GO 85753
85802: POP
85803: POP
// end ;
85804: LD_VAR 0 3
85808: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85809: LD_INT 0
85811: PPUSH
// if not mc_bases or not base or not areas then
85812: LD_EXP 36
85816: NOT
85817: PUSH
85818: LD_VAR 0 1
85822: NOT
85823: OR
85824: PUSH
85825: LD_VAR 0 2
85829: NOT
85830: OR
85831: IFFALSE 85835
// exit ;
85833: GO 85860
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85835: LD_ADDR_EXP 54
85839: PUSH
85840: LD_EXP 54
85844: PPUSH
85845: LD_VAR 0 1
85849: PPUSH
85850: LD_VAR 0 2
85854: PPUSH
85855: CALL_OW 1
85859: ST_TO_ADDR
// end ;
85860: LD_VAR 0 3
85864: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85865: LD_INT 0
85867: PPUSH
// if not mc_bases or not base or not teleports_exit then
85868: LD_EXP 36
85872: NOT
85873: PUSH
85874: LD_VAR 0 1
85878: NOT
85879: OR
85880: PUSH
85881: LD_VAR 0 2
85885: NOT
85886: OR
85887: IFFALSE 85891
// exit ;
85889: GO 85916
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85891: LD_ADDR_EXP 71
85895: PUSH
85896: LD_EXP 71
85900: PPUSH
85901: LD_VAR 0 1
85905: PPUSH
85906: LD_VAR 0 2
85910: PPUSH
85911: CALL_OW 1
85915: ST_TO_ADDR
// end ;
85916: LD_VAR 0 3
85920: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
85921: LD_INT 0
85923: PPUSH
85924: PPUSH
85925: PPUSH
// if not mc_bases or not base or not ext_list then
85926: LD_EXP 36
85930: NOT
85931: PUSH
85932: LD_VAR 0 1
85936: NOT
85937: OR
85938: PUSH
85939: LD_VAR 0 5
85943: NOT
85944: OR
85945: IFFALSE 85949
// exit ;
85947: GO 86122
// tmp := GetFacExtXYD ( x , y , d ) ;
85949: LD_ADDR_VAR 0 8
85953: PUSH
85954: LD_VAR 0 2
85958: PPUSH
85959: LD_VAR 0 3
85963: PPUSH
85964: LD_VAR 0 4
85968: PPUSH
85969: CALL 59358 0 3
85973: ST_TO_ADDR
// if not tmp then
85974: LD_VAR 0 8
85978: NOT
85979: IFFALSE 85983
// exit ;
85981: GO 86122
// for i in tmp do
85983: LD_ADDR_VAR 0 7
85987: PUSH
85988: LD_VAR 0 8
85992: PUSH
85993: FOR_IN
85994: IFFALSE 86120
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
85996: LD_ADDR_EXP 41
86000: PUSH
86001: LD_EXP 41
86005: PPUSH
86006: LD_VAR 0 1
86010: PPUSH
86011: LD_EXP 41
86015: PUSH
86016: LD_VAR 0 1
86020: ARRAY
86021: PPUSH
86022: LD_EXP 41
86026: PUSH
86027: LD_VAR 0 1
86031: ARRAY
86032: PUSH
86033: LD_INT 1
86035: PLUS
86036: PPUSH
86037: LD_VAR 0 5
86041: PUSH
86042: LD_INT 1
86044: ARRAY
86045: PUSH
86046: LD_VAR 0 7
86050: PUSH
86051: LD_INT 1
86053: ARRAY
86054: PUSH
86055: LD_VAR 0 7
86059: PUSH
86060: LD_INT 2
86062: ARRAY
86063: PUSH
86064: LD_VAR 0 7
86068: PUSH
86069: LD_INT 3
86071: ARRAY
86072: PUSH
86073: EMPTY
86074: LIST
86075: LIST
86076: LIST
86077: LIST
86078: PPUSH
86079: CALL_OW 2
86083: PPUSH
86084: CALL_OW 1
86088: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86089: LD_ADDR_VAR 0 5
86093: PUSH
86094: LD_VAR 0 5
86098: PPUSH
86099: LD_INT 1
86101: PPUSH
86102: CALL_OW 3
86106: ST_TO_ADDR
// if not ext_list then
86107: LD_VAR 0 5
86111: NOT
86112: IFFALSE 86118
// exit ;
86114: POP
86115: POP
86116: GO 86122
// end ;
86118: GO 85993
86120: POP
86121: POP
// end ;
86122: LD_VAR 0 6
86126: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86127: LD_INT 0
86129: PPUSH
// if not mc_bases or not base or not weapon_list then
86130: LD_EXP 36
86134: NOT
86135: PUSH
86136: LD_VAR 0 1
86140: NOT
86141: OR
86142: PUSH
86143: LD_VAR 0 2
86147: NOT
86148: OR
86149: IFFALSE 86153
// exit ;
86151: GO 86178
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86153: LD_ADDR_EXP 75
86157: PUSH
86158: LD_EXP 75
86162: PPUSH
86163: LD_VAR 0 1
86167: PPUSH
86168: LD_VAR 0 2
86172: PPUSH
86173: CALL_OW 1
86177: ST_TO_ADDR
// end ;
86178: LD_VAR 0 3
86182: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86183: LD_INT 0
86185: PPUSH
// if not mc_bases or not base or not tech_list then
86186: LD_EXP 36
86190: NOT
86191: PUSH
86192: LD_VAR 0 1
86196: NOT
86197: OR
86198: PUSH
86199: LD_VAR 0 2
86203: NOT
86204: OR
86205: IFFALSE 86209
// exit ;
86207: GO 86234
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86209: LD_ADDR_EXP 63
86213: PUSH
86214: LD_EXP 63
86218: PPUSH
86219: LD_VAR 0 1
86223: PPUSH
86224: LD_VAR 0 2
86228: PPUSH
86229: CALL_OW 1
86233: ST_TO_ADDR
// end ;
86234: LD_VAR 0 3
86238: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86239: LD_INT 0
86241: PPUSH
// if not mc_bases or not parking_area or not base then
86242: LD_EXP 36
86246: NOT
86247: PUSH
86248: LD_VAR 0 2
86252: NOT
86253: OR
86254: PUSH
86255: LD_VAR 0 1
86259: NOT
86260: OR
86261: IFFALSE 86265
// exit ;
86263: GO 86290
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86265: LD_ADDR_EXP 60
86269: PUSH
86270: LD_EXP 60
86274: PPUSH
86275: LD_VAR 0 1
86279: PPUSH
86280: LD_VAR 0 2
86284: PPUSH
86285: CALL_OW 1
86289: ST_TO_ADDR
// end ;
86290: LD_VAR 0 3
86294: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86295: LD_INT 0
86297: PPUSH
// if not mc_bases or not base or not scan_area then
86298: LD_EXP 36
86302: NOT
86303: PUSH
86304: LD_VAR 0 1
86308: NOT
86309: OR
86310: PUSH
86311: LD_VAR 0 2
86315: NOT
86316: OR
86317: IFFALSE 86321
// exit ;
86319: GO 86346
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86321: LD_ADDR_EXP 61
86325: PUSH
86326: LD_EXP 61
86330: PPUSH
86331: LD_VAR 0 1
86335: PPUSH
86336: LD_VAR 0 2
86340: PPUSH
86341: CALL_OW 1
86345: ST_TO_ADDR
// end ;
86346: LD_VAR 0 3
86350: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86351: LD_INT 0
86353: PPUSH
86354: PPUSH
// if not mc_bases or not base then
86355: LD_EXP 36
86359: NOT
86360: PUSH
86361: LD_VAR 0 1
86365: NOT
86366: OR
86367: IFFALSE 86371
// exit ;
86369: GO 86435
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86371: LD_ADDR_VAR 0 3
86375: PUSH
86376: LD_INT 1
86378: PUSH
86379: LD_INT 2
86381: PUSH
86382: LD_INT 3
86384: PUSH
86385: LD_INT 4
86387: PUSH
86388: LD_INT 11
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: LIST
86395: LIST
86396: LIST
86397: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
86398: LD_ADDR_EXP 63
86402: PUSH
86403: LD_EXP 63
86407: PPUSH
86408: LD_VAR 0 1
86412: PPUSH
86413: LD_EXP 63
86417: PUSH
86418: LD_VAR 0 1
86422: ARRAY
86423: PUSH
86424: LD_VAR 0 3
86428: DIFF
86429: PPUSH
86430: CALL_OW 1
86434: ST_TO_ADDR
// end ;
86435: LD_VAR 0 2
86439: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86440: LD_INT 0
86442: PPUSH
// result := mc_vehicles [ base ] ;
86443: LD_ADDR_VAR 0 3
86447: PUSH
86448: LD_EXP 55
86452: PUSH
86453: LD_VAR 0 1
86457: ARRAY
86458: ST_TO_ADDR
// if onlyCombat then
86459: LD_VAR 0 2
86463: IFFALSE 86628
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86465: LD_ADDR_VAR 0 3
86469: PUSH
86470: LD_VAR 0 3
86474: PUSH
86475: LD_VAR 0 3
86479: PPUSH
86480: LD_INT 2
86482: PUSH
86483: LD_INT 34
86485: PUSH
86486: LD_INT 12
86488: PUSH
86489: EMPTY
86490: LIST
86491: LIST
86492: PUSH
86493: LD_INT 34
86495: PUSH
86496: LD_INT 51
86498: PUSH
86499: EMPTY
86500: LIST
86501: LIST
86502: PUSH
86503: LD_INT 34
86505: PUSH
86506: LD_EXP 30
86510: PUSH
86511: EMPTY
86512: LIST
86513: LIST
86514: PUSH
86515: LD_INT 34
86517: PUSH
86518: LD_INT 32
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PUSH
86525: LD_INT 34
86527: PUSH
86528: LD_INT 13
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 34
86537: PUSH
86538: LD_INT 52
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: PUSH
86545: LD_INT 34
86547: PUSH
86548: LD_INT 14
86550: PUSH
86551: EMPTY
86552: LIST
86553: LIST
86554: PUSH
86555: LD_INT 34
86557: PUSH
86558: LD_INT 53
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: LD_INT 34
86567: PUSH
86568: LD_EXP 29
86572: PUSH
86573: EMPTY
86574: LIST
86575: LIST
86576: PUSH
86577: LD_INT 34
86579: PUSH
86580: LD_INT 31
86582: PUSH
86583: EMPTY
86584: LIST
86585: LIST
86586: PUSH
86587: LD_INT 34
86589: PUSH
86590: LD_INT 48
86592: PUSH
86593: EMPTY
86594: LIST
86595: LIST
86596: PUSH
86597: LD_INT 34
86599: PUSH
86600: LD_INT 8
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PUSH
86607: EMPTY
86608: LIST
86609: LIST
86610: LIST
86611: LIST
86612: LIST
86613: LIST
86614: LIST
86615: LIST
86616: LIST
86617: LIST
86618: LIST
86619: LIST
86620: LIST
86621: PPUSH
86622: CALL_OW 72
86626: DIFF
86627: ST_TO_ADDR
// end ; end_of_file
86628: LD_VAR 0 3
86632: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86633: LD_INT 0
86635: PPUSH
86636: PPUSH
86637: PPUSH
// if not mc_bases or not skirmish then
86638: LD_EXP 36
86642: NOT
86643: PUSH
86644: LD_EXP 34
86648: NOT
86649: OR
86650: IFFALSE 86654
// exit ;
86652: GO 86819
// for i = 1 to mc_bases do
86654: LD_ADDR_VAR 0 4
86658: PUSH
86659: DOUBLE
86660: LD_INT 1
86662: DEC
86663: ST_TO_ADDR
86664: LD_EXP 36
86668: PUSH
86669: FOR_TO
86670: IFFALSE 86817
// begin if sci in mc_bases [ i ] then
86672: LD_VAR 0 2
86676: PUSH
86677: LD_EXP 36
86681: PUSH
86682: LD_VAR 0 4
86686: ARRAY
86687: IN
86688: IFFALSE 86815
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86690: LD_ADDR_EXP 65
86694: PUSH
86695: LD_EXP 65
86699: PPUSH
86700: LD_VAR 0 4
86704: PUSH
86705: LD_EXP 65
86709: PUSH
86710: LD_VAR 0 4
86714: ARRAY
86715: PUSH
86716: LD_INT 1
86718: PLUS
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PPUSH
86724: LD_VAR 0 1
86728: PPUSH
86729: CALL 26004 0 3
86733: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86734: LD_ADDR_VAR 0 5
86738: PUSH
86739: LD_EXP 36
86743: PUSH
86744: LD_VAR 0 4
86748: ARRAY
86749: PPUSH
86750: LD_INT 2
86752: PUSH
86753: LD_INT 30
86755: PUSH
86756: LD_INT 0
86758: PUSH
86759: EMPTY
86760: LIST
86761: LIST
86762: PUSH
86763: LD_INT 30
86765: PUSH
86766: LD_INT 1
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: PUSH
86773: EMPTY
86774: LIST
86775: LIST
86776: LIST
86777: PPUSH
86778: CALL_OW 72
86782: PPUSH
86783: LD_VAR 0 1
86787: PPUSH
86788: CALL_OW 74
86792: ST_TO_ADDR
// if tmp then
86793: LD_VAR 0 5
86797: IFFALSE 86813
// ComStandNearbyBuilding ( ape , tmp ) ;
86799: LD_VAR 0 1
86803: PPUSH
86804: LD_VAR 0 5
86808: PPUSH
86809: CALL 20711 0 2
// break ;
86813: GO 86817
// end ; end ;
86815: GO 86669
86817: POP
86818: POP
// end ;
86819: LD_VAR 0 3
86823: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86824: LD_INT 0
86826: PPUSH
86827: PPUSH
86828: PPUSH
// if not mc_bases or not skirmish then
86829: LD_EXP 36
86833: NOT
86834: PUSH
86835: LD_EXP 34
86839: NOT
86840: OR
86841: IFFALSE 86845
// exit ;
86843: GO 86934
// for i = 1 to mc_bases do
86845: LD_ADDR_VAR 0 4
86849: PUSH
86850: DOUBLE
86851: LD_INT 1
86853: DEC
86854: ST_TO_ADDR
86855: LD_EXP 36
86859: PUSH
86860: FOR_TO
86861: IFFALSE 86932
// begin if building in mc_busy_turret_list [ i ] then
86863: LD_VAR 0 1
86867: PUSH
86868: LD_EXP 46
86872: PUSH
86873: LD_VAR 0 4
86877: ARRAY
86878: IN
86879: IFFALSE 86930
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86881: LD_ADDR_VAR 0 5
86885: PUSH
86886: LD_EXP 46
86890: PUSH
86891: LD_VAR 0 4
86895: ARRAY
86896: PUSH
86897: LD_VAR 0 1
86901: DIFF
86902: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86903: LD_ADDR_EXP 46
86907: PUSH
86908: LD_EXP 46
86912: PPUSH
86913: LD_VAR 0 4
86917: PPUSH
86918: LD_VAR 0 5
86922: PPUSH
86923: CALL_OW 1
86927: ST_TO_ADDR
// break ;
86928: GO 86932
// end ; end ;
86930: GO 86860
86932: POP
86933: POP
// end ;
86934: LD_VAR 0 3
86938: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
86939: LD_INT 0
86941: PPUSH
86942: PPUSH
86943: PPUSH
// if not mc_bases or not skirmish then
86944: LD_EXP 36
86948: NOT
86949: PUSH
86950: LD_EXP 34
86954: NOT
86955: OR
86956: IFFALSE 86960
// exit ;
86958: GO 87159
// for i = 1 to mc_bases do
86960: LD_ADDR_VAR 0 5
86964: PUSH
86965: DOUBLE
86966: LD_INT 1
86968: DEC
86969: ST_TO_ADDR
86970: LD_EXP 36
86974: PUSH
86975: FOR_TO
86976: IFFALSE 87157
// if building in mc_bases [ i ] then
86978: LD_VAR 0 1
86982: PUSH
86983: LD_EXP 36
86987: PUSH
86988: LD_VAR 0 5
86992: ARRAY
86993: IN
86994: IFFALSE 87155
// begin tmp := mc_bases [ i ] diff building ;
86996: LD_ADDR_VAR 0 6
87000: PUSH
87001: LD_EXP 36
87005: PUSH
87006: LD_VAR 0 5
87010: ARRAY
87011: PUSH
87012: LD_VAR 0 1
87016: DIFF
87017: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87018: LD_ADDR_EXP 36
87022: PUSH
87023: LD_EXP 36
87027: PPUSH
87028: LD_VAR 0 5
87032: PPUSH
87033: LD_VAR 0 6
87037: PPUSH
87038: CALL_OW 1
87042: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87043: LD_VAR 0 1
87047: PUSH
87048: LD_EXP 44
87052: PUSH
87053: LD_VAR 0 5
87057: ARRAY
87058: IN
87059: IFFALSE 87098
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87061: LD_ADDR_EXP 44
87065: PUSH
87066: LD_EXP 44
87070: PPUSH
87071: LD_VAR 0 5
87075: PPUSH
87076: LD_EXP 44
87080: PUSH
87081: LD_VAR 0 5
87085: ARRAY
87086: PUSH
87087: LD_VAR 0 1
87091: DIFF
87092: PPUSH
87093: CALL_OW 1
87097: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87098: LD_VAR 0 1
87102: PUSH
87103: LD_EXP 45
87107: PUSH
87108: LD_VAR 0 5
87112: ARRAY
87113: IN
87114: IFFALSE 87153
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87116: LD_ADDR_EXP 45
87120: PUSH
87121: LD_EXP 45
87125: PPUSH
87126: LD_VAR 0 5
87130: PPUSH
87131: LD_EXP 45
87135: PUSH
87136: LD_VAR 0 5
87140: ARRAY
87141: PUSH
87142: LD_VAR 0 1
87146: DIFF
87147: PPUSH
87148: CALL_OW 1
87152: ST_TO_ADDR
// break ;
87153: GO 87157
// end ;
87155: GO 86975
87157: POP
87158: POP
// end ;
87159: LD_VAR 0 4
87163: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87164: LD_INT 0
87166: PPUSH
87167: PPUSH
87168: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87169: LD_EXP 36
87173: NOT
87174: PUSH
87175: LD_EXP 34
87179: NOT
87180: OR
87181: PUSH
87182: LD_VAR 0 3
87186: PUSH
87187: LD_EXP 62
87191: IN
87192: NOT
87193: OR
87194: IFFALSE 87198
// exit ;
87196: GO 87321
// for i = 1 to mc_vehicles do
87198: LD_ADDR_VAR 0 6
87202: PUSH
87203: DOUBLE
87204: LD_INT 1
87206: DEC
87207: ST_TO_ADDR
87208: LD_EXP 55
87212: PUSH
87213: FOR_TO
87214: IFFALSE 87319
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87216: LD_VAR 0 2
87220: PUSH
87221: LD_EXP 55
87225: PUSH
87226: LD_VAR 0 6
87230: ARRAY
87231: IN
87232: PUSH
87233: LD_VAR 0 1
87237: PUSH
87238: LD_EXP 55
87242: PUSH
87243: LD_VAR 0 6
87247: ARRAY
87248: IN
87249: OR
87250: IFFALSE 87317
// begin tmp := mc_vehicles [ i ] diff old ;
87252: LD_ADDR_VAR 0 7
87256: PUSH
87257: LD_EXP 55
87261: PUSH
87262: LD_VAR 0 6
87266: ARRAY
87267: PUSH
87268: LD_VAR 0 2
87272: DIFF
87273: ST_TO_ADDR
// tmp := tmp diff new ;
87274: LD_ADDR_VAR 0 7
87278: PUSH
87279: LD_VAR 0 7
87283: PUSH
87284: LD_VAR 0 1
87288: DIFF
87289: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87290: LD_ADDR_EXP 55
87294: PUSH
87295: LD_EXP 55
87299: PPUSH
87300: LD_VAR 0 6
87304: PPUSH
87305: LD_VAR 0 7
87309: PPUSH
87310: CALL_OW 1
87314: ST_TO_ADDR
// break ;
87315: GO 87319
// end ;
87317: GO 87213
87319: POP
87320: POP
// end ;
87321: LD_VAR 0 5
87325: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87326: LD_INT 0
87328: PPUSH
87329: PPUSH
87330: PPUSH
87331: PPUSH
// if not mc_bases or not skirmish then
87332: LD_EXP 36
87336: NOT
87337: PUSH
87338: LD_EXP 34
87342: NOT
87343: OR
87344: IFFALSE 87348
// exit ;
87346: GO 87725
// side := GetSide ( vehicle ) ;
87348: LD_ADDR_VAR 0 5
87352: PUSH
87353: LD_VAR 0 1
87357: PPUSH
87358: CALL_OW 255
87362: ST_TO_ADDR
// for i = 1 to mc_bases do
87363: LD_ADDR_VAR 0 4
87367: PUSH
87368: DOUBLE
87369: LD_INT 1
87371: DEC
87372: ST_TO_ADDR
87373: LD_EXP 36
87377: PUSH
87378: FOR_TO
87379: IFFALSE 87723
// begin if factory in mc_bases [ i ] then
87381: LD_VAR 0 2
87385: PUSH
87386: LD_EXP 36
87390: PUSH
87391: LD_VAR 0 4
87395: ARRAY
87396: IN
87397: IFFALSE 87721
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
87399: LD_EXP 58
87403: PUSH
87404: LD_VAR 0 4
87408: ARRAY
87409: PUSH
87410: LD_EXP 47
87414: PUSH
87415: LD_VAR 0 4
87419: ARRAY
87420: LESS
87421: PUSH
87422: LD_VAR 0 1
87426: PPUSH
87427: CALL_OW 264
87431: PUSH
87432: LD_INT 31
87434: PUSH
87435: LD_INT 32
87437: PUSH
87438: LD_INT 51
87440: PUSH
87441: LD_EXP 30
87445: PUSH
87446: LD_INT 12
87448: PUSH
87449: LD_INT 30
87451: PUSH
87452: LD_EXP 29
87456: PUSH
87457: LD_INT 11
87459: PUSH
87460: LD_INT 53
87462: PUSH
87463: LD_INT 14
87465: PUSH
87466: LD_EXP 33
87470: PUSH
87471: LD_INT 29
87473: PUSH
87474: LD_EXP 31
87478: PUSH
87479: LD_INT 13
87481: PUSH
87482: LD_INT 52
87484: PUSH
87485: LD_INT 48
87487: PUSH
87488: LD_INT 8
87490: PUSH
87491: EMPTY
87492: LIST
87493: LIST
87494: LIST
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: LIST
87500: LIST
87501: LIST
87502: LIST
87503: LIST
87504: LIST
87505: LIST
87506: LIST
87507: LIST
87508: LIST
87509: IN
87510: NOT
87511: AND
87512: IFFALSE 87560
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
87514: LD_ADDR_EXP 58
87518: PUSH
87519: LD_EXP 58
87523: PPUSH
87524: LD_VAR 0 4
87528: PUSH
87529: LD_EXP 58
87533: PUSH
87534: LD_VAR 0 4
87538: ARRAY
87539: PUSH
87540: LD_INT 1
87542: PLUS
87543: PUSH
87544: EMPTY
87545: LIST
87546: LIST
87547: PPUSH
87548: LD_VAR 0 1
87552: PPUSH
87553: CALL 26004 0 3
87557: ST_TO_ADDR
87558: GO 87604
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87560: LD_ADDR_EXP 55
87564: PUSH
87565: LD_EXP 55
87569: PPUSH
87570: LD_VAR 0 4
87574: PUSH
87575: LD_EXP 55
87579: PUSH
87580: LD_VAR 0 4
87584: ARRAY
87585: PUSH
87586: LD_INT 1
87588: PLUS
87589: PUSH
87590: EMPTY
87591: LIST
87592: LIST
87593: PPUSH
87594: LD_VAR 0 1
87598: PPUSH
87599: CALL 26004 0 3
87603: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
87604: LD_VAR 0 1
87608: PPUSH
87609: CALL_OW 263
87613: PUSH
87614: LD_INT 2
87616: EQUAL
87617: IFFALSE 87637
// begin repeat wait ( 0 0$1 ) ;
87619: LD_INT 35
87621: PPUSH
87622: CALL_OW 67
// until IsControledBy ( vehicle ) ;
87626: LD_VAR 0 1
87630: PPUSH
87631: CALL_OW 312
87635: IFFALSE 87619
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87637: LD_VAR 0 1
87641: PPUSH
87642: LD_EXP 60
87646: PUSH
87647: LD_VAR 0 4
87651: ARRAY
87652: PPUSH
87653: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
87657: LD_VAR 0 1
87661: PPUSH
87662: CALL_OW 263
87666: PUSH
87667: LD_INT 1
87669: NONEQUAL
87670: IFFALSE 87674
// break ;
87672: GO 87723
// repeat wait ( 0 0$1 ) ;
87674: LD_INT 35
87676: PPUSH
87677: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87681: LD_VAR 0 1
87685: PPUSH
87686: LD_EXP 60
87690: PUSH
87691: LD_VAR 0 4
87695: ARRAY
87696: PPUSH
87697: CALL_OW 308
87701: IFFALSE 87674
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87703: LD_VAR 0 1
87707: PPUSH
87708: CALL_OW 311
87712: PPUSH
87713: CALL_OW 121
// exit ;
87717: POP
87718: POP
87719: GO 87725
// end ; end ;
87721: GO 87378
87723: POP
87724: POP
// end ;
87725: LD_VAR 0 3
87729: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87730: LD_INT 0
87732: PPUSH
87733: PPUSH
87734: PPUSH
87735: PPUSH
// if not mc_bases or not skirmish then
87736: LD_EXP 36
87740: NOT
87741: PUSH
87742: LD_EXP 34
87746: NOT
87747: OR
87748: IFFALSE 87752
// exit ;
87750: GO 88105
// repeat wait ( 0 0$1 ) ;
87752: LD_INT 35
87754: PPUSH
87755: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87759: LD_VAR 0 2
87763: PPUSH
87764: LD_VAR 0 3
87768: PPUSH
87769: CALL_OW 284
87773: IFFALSE 87752
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87775: LD_VAR 0 2
87779: PPUSH
87780: LD_VAR 0 3
87784: PPUSH
87785: CALL_OW 283
87789: PUSH
87790: LD_INT 4
87792: EQUAL
87793: IFFALSE 87797
// exit ;
87795: GO 88105
// for i = 1 to mc_bases do
87797: LD_ADDR_VAR 0 7
87801: PUSH
87802: DOUBLE
87803: LD_INT 1
87805: DEC
87806: ST_TO_ADDR
87807: LD_EXP 36
87811: PUSH
87812: FOR_TO
87813: IFFALSE 88103
// begin if mc_crates_area [ i ] then
87815: LD_EXP 54
87819: PUSH
87820: LD_VAR 0 7
87824: ARRAY
87825: IFFALSE 87936
// for j in mc_crates_area [ i ] do
87827: LD_ADDR_VAR 0 8
87831: PUSH
87832: LD_EXP 54
87836: PUSH
87837: LD_VAR 0 7
87841: ARRAY
87842: PUSH
87843: FOR_IN
87844: IFFALSE 87934
// if InArea ( x , y , j ) then
87846: LD_VAR 0 2
87850: PPUSH
87851: LD_VAR 0 3
87855: PPUSH
87856: LD_VAR 0 8
87860: PPUSH
87861: CALL_OW 309
87865: IFFALSE 87932
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87867: LD_ADDR_EXP 52
87871: PUSH
87872: LD_EXP 52
87876: PPUSH
87877: LD_VAR 0 7
87881: PUSH
87882: LD_EXP 52
87886: PUSH
87887: LD_VAR 0 7
87891: ARRAY
87892: PUSH
87893: LD_INT 1
87895: PLUS
87896: PUSH
87897: EMPTY
87898: LIST
87899: LIST
87900: PPUSH
87901: LD_VAR 0 4
87905: PUSH
87906: LD_VAR 0 2
87910: PUSH
87911: LD_VAR 0 3
87915: PUSH
87916: EMPTY
87917: LIST
87918: LIST
87919: LIST
87920: PPUSH
87921: CALL 26004 0 3
87925: ST_TO_ADDR
// exit ;
87926: POP
87927: POP
87928: POP
87929: POP
87930: GO 88105
// end ;
87932: GO 87843
87934: POP
87935: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
87936: LD_ADDR_VAR 0 9
87940: PUSH
87941: LD_EXP 36
87945: PUSH
87946: LD_VAR 0 7
87950: ARRAY
87951: PPUSH
87952: LD_INT 2
87954: PUSH
87955: LD_INT 30
87957: PUSH
87958: LD_INT 0
87960: PUSH
87961: EMPTY
87962: LIST
87963: LIST
87964: PUSH
87965: LD_INT 30
87967: PUSH
87968: LD_INT 1
87970: PUSH
87971: EMPTY
87972: LIST
87973: LIST
87974: PUSH
87975: EMPTY
87976: LIST
87977: LIST
87978: LIST
87979: PPUSH
87980: CALL_OW 72
87984: ST_TO_ADDR
// if not depot then
87985: LD_VAR 0 9
87989: NOT
87990: IFFALSE 87994
// continue ;
87992: GO 87812
// for j in depot do
87994: LD_ADDR_VAR 0 8
87998: PUSH
87999: LD_VAR 0 9
88003: PUSH
88004: FOR_IN
88005: IFFALSE 88099
// if GetDistUnitXY ( j , x , y ) < 30 then
88007: LD_VAR 0 8
88011: PPUSH
88012: LD_VAR 0 2
88016: PPUSH
88017: LD_VAR 0 3
88021: PPUSH
88022: CALL_OW 297
88026: PUSH
88027: LD_INT 30
88029: LESS
88030: IFFALSE 88097
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88032: LD_ADDR_EXP 52
88036: PUSH
88037: LD_EXP 52
88041: PPUSH
88042: LD_VAR 0 7
88046: PUSH
88047: LD_EXP 52
88051: PUSH
88052: LD_VAR 0 7
88056: ARRAY
88057: PUSH
88058: LD_INT 1
88060: PLUS
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: PPUSH
88066: LD_VAR 0 4
88070: PUSH
88071: LD_VAR 0 2
88075: PUSH
88076: LD_VAR 0 3
88080: PUSH
88081: EMPTY
88082: LIST
88083: LIST
88084: LIST
88085: PPUSH
88086: CALL 26004 0 3
88090: ST_TO_ADDR
// exit ;
88091: POP
88092: POP
88093: POP
88094: POP
88095: GO 88105
// end ;
88097: GO 88004
88099: POP
88100: POP
// end ;
88101: GO 87812
88103: POP
88104: POP
// end ;
88105: LD_VAR 0 6
88109: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88110: LD_INT 0
88112: PPUSH
88113: PPUSH
88114: PPUSH
88115: PPUSH
// if not mc_bases or not skirmish then
88116: LD_EXP 36
88120: NOT
88121: PUSH
88122: LD_EXP 34
88126: NOT
88127: OR
88128: IFFALSE 88132
// exit ;
88130: GO 88409
// side := GetSide ( lab ) ;
88132: LD_ADDR_VAR 0 4
88136: PUSH
88137: LD_VAR 0 2
88141: PPUSH
88142: CALL_OW 255
88146: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88147: LD_VAR 0 4
88151: PUSH
88152: LD_EXP 62
88156: IN
88157: NOT
88158: PUSH
88159: LD_EXP 63
88163: NOT
88164: OR
88165: PUSH
88166: LD_EXP 36
88170: NOT
88171: OR
88172: IFFALSE 88176
// exit ;
88174: GO 88409
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88176: LD_ADDR_EXP 63
88180: PUSH
88181: LD_EXP 63
88185: PPUSH
88186: LD_VAR 0 4
88190: PPUSH
88191: LD_EXP 63
88195: PUSH
88196: LD_VAR 0 4
88200: ARRAY
88201: PUSH
88202: LD_VAR 0 1
88206: DIFF
88207: PPUSH
88208: CALL_OW 1
88212: ST_TO_ADDR
// for i = 1 to mc_bases do
88213: LD_ADDR_VAR 0 5
88217: PUSH
88218: DOUBLE
88219: LD_INT 1
88221: DEC
88222: ST_TO_ADDR
88223: LD_EXP 36
88227: PUSH
88228: FOR_TO
88229: IFFALSE 88407
// begin if lab in mc_bases [ i ] then
88231: LD_VAR 0 2
88235: PUSH
88236: LD_EXP 36
88240: PUSH
88241: LD_VAR 0 5
88245: ARRAY
88246: IN
88247: IFFALSE 88405
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88249: LD_VAR 0 1
88253: PUSH
88254: LD_INT 11
88256: PUSH
88257: LD_INT 4
88259: PUSH
88260: LD_INT 3
88262: PUSH
88263: LD_INT 2
88265: PUSH
88266: EMPTY
88267: LIST
88268: LIST
88269: LIST
88270: LIST
88271: IN
88272: PUSH
88273: LD_EXP 66
88277: PUSH
88278: LD_VAR 0 5
88282: ARRAY
88283: AND
88284: IFFALSE 88405
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88286: LD_ADDR_VAR 0 6
88290: PUSH
88291: LD_EXP 66
88295: PUSH
88296: LD_VAR 0 5
88300: ARRAY
88301: PUSH
88302: LD_INT 1
88304: ARRAY
88305: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88306: LD_ADDR_EXP 66
88310: PUSH
88311: LD_EXP 66
88315: PPUSH
88316: LD_VAR 0 5
88320: PPUSH
88321: EMPTY
88322: PPUSH
88323: CALL_OW 1
88327: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88328: LD_VAR 0 6
88332: PPUSH
88333: LD_INT 0
88335: PPUSH
88336: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88340: LD_VAR 0 6
88344: PPUSH
88345: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88349: LD_ADDR_EXP 65
88353: PUSH
88354: LD_EXP 65
88358: PPUSH
88359: LD_VAR 0 5
88363: PPUSH
88364: LD_EXP 65
88368: PUSH
88369: LD_VAR 0 5
88373: ARRAY
88374: PPUSH
88375: LD_INT 1
88377: PPUSH
88378: LD_VAR 0 6
88382: PPUSH
88383: CALL_OW 2
88387: PPUSH
88388: CALL_OW 1
88392: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
88393: LD_VAR 0 5
88397: PPUSH
88398: LD_INT 112
88400: PPUSH
88401: CALL 65942 0 2
// end ; end ; end ;
88405: GO 88228
88407: POP
88408: POP
// end ;
88409: LD_VAR 0 3
88413: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
88414: LD_INT 0
88416: PPUSH
88417: PPUSH
88418: PPUSH
88419: PPUSH
88420: PPUSH
88421: PPUSH
88422: PPUSH
88423: PPUSH
// if not mc_bases or not skirmish then
88424: LD_EXP 36
88428: NOT
88429: PUSH
88430: LD_EXP 34
88434: NOT
88435: OR
88436: IFFALSE 88440
// exit ;
88438: GO 89532
// for i = 1 to mc_bases do
88440: LD_ADDR_VAR 0 3
88444: PUSH
88445: DOUBLE
88446: LD_INT 1
88448: DEC
88449: ST_TO_ADDR
88450: LD_EXP 36
88454: PUSH
88455: FOR_TO
88456: IFFALSE 89530
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88458: LD_VAR 0 1
88462: PUSH
88463: LD_EXP 36
88467: PUSH
88468: LD_VAR 0 3
88472: ARRAY
88473: IN
88474: PUSH
88475: LD_VAR 0 1
88479: PUSH
88480: LD_EXP 43
88484: PUSH
88485: LD_VAR 0 3
88489: ARRAY
88490: IN
88491: OR
88492: PUSH
88493: LD_VAR 0 1
88497: PUSH
88498: LD_EXP 58
88502: PUSH
88503: LD_VAR 0 3
88507: ARRAY
88508: IN
88509: OR
88510: PUSH
88511: LD_VAR 0 1
88515: PUSH
88516: LD_EXP 55
88520: PUSH
88521: LD_VAR 0 3
88525: ARRAY
88526: IN
88527: OR
88528: PUSH
88529: LD_VAR 0 1
88533: PUSH
88534: LD_EXP 65
88538: PUSH
88539: LD_VAR 0 3
88543: ARRAY
88544: IN
88545: OR
88546: PUSH
88547: LD_VAR 0 1
88551: PUSH
88552: LD_EXP 66
88556: PUSH
88557: LD_VAR 0 3
88561: ARRAY
88562: IN
88563: OR
88564: IFFALSE 89528
// begin if un in mc_ape [ i ] then
88566: LD_VAR 0 1
88570: PUSH
88571: LD_EXP 65
88575: PUSH
88576: LD_VAR 0 3
88580: ARRAY
88581: IN
88582: IFFALSE 88621
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88584: LD_ADDR_EXP 65
88588: PUSH
88589: LD_EXP 65
88593: PPUSH
88594: LD_VAR 0 3
88598: PPUSH
88599: LD_EXP 65
88603: PUSH
88604: LD_VAR 0 3
88608: ARRAY
88609: PUSH
88610: LD_VAR 0 1
88614: DIFF
88615: PPUSH
88616: CALL_OW 1
88620: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88621: LD_VAR 0 1
88625: PUSH
88626: LD_EXP 66
88630: PUSH
88631: LD_VAR 0 3
88635: ARRAY
88636: IN
88637: IFFALSE 88661
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88639: LD_ADDR_EXP 66
88643: PUSH
88644: LD_EXP 66
88648: PPUSH
88649: LD_VAR 0 3
88653: PPUSH
88654: EMPTY
88655: PPUSH
88656: CALL_OW 1
88660: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88661: LD_VAR 0 1
88665: PPUSH
88666: CALL_OW 247
88670: PUSH
88671: LD_INT 2
88673: EQUAL
88674: PUSH
88675: LD_VAR 0 1
88679: PPUSH
88680: CALL_OW 110
88684: PUSH
88685: LD_INT 20
88687: EQUAL
88688: PUSH
88689: LD_VAR 0 1
88693: PUSH
88694: LD_EXP 58
88698: PUSH
88699: LD_VAR 0 3
88703: ARRAY
88704: IN
88705: OR
88706: AND
88707: IFFALSE 88868
// begin if un in mc_defender [ i ] then
88709: LD_VAR 0 1
88713: PUSH
88714: LD_EXP 58
88718: PUSH
88719: LD_VAR 0 3
88723: ARRAY
88724: IN
88725: IFFALSE 88764
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88727: LD_ADDR_EXP 58
88731: PUSH
88732: LD_EXP 58
88736: PPUSH
88737: LD_VAR 0 3
88741: PPUSH
88742: LD_EXP 58
88746: PUSH
88747: LD_VAR 0 3
88751: ARRAY
88752: PUSH
88753: LD_VAR 0 1
88757: DIFF
88758: PPUSH
88759: CALL_OW 1
88763: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
88764: LD_ADDR_VAR 0 8
88768: PUSH
88769: LD_VAR 0 3
88773: PPUSH
88774: LD_INT 3
88776: PPUSH
88777: CALL 85457 0 2
88781: ST_TO_ADDR
// if fac then
88782: LD_VAR 0 8
88786: IFFALSE 88868
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88788: LD_ADDR_VAR 0 9
88792: PUSH
88793: LD_VAR 0 8
88797: PPUSH
88798: LD_VAR 0 1
88802: PPUSH
88803: CALL_OW 265
88807: PPUSH
88808: LD_VAR 0 1
88812: PPUSH
88813: CALL_OW 262
88817: PPUSH
88818: LD_VAR 0 1
88822: PPUSH
88823: CALL_OW 263
88827: PPUSH
88828: LD_VAR 0 1
88832: PPUSH
88833: CALL_OW 264
88837: PPUSH
88838: CALL 23597 0 5
88842: ST_TO_ADDR
// if components then
88843: LD_VAR 0 9
88847: IFFALSE 88866
// MC_InsertProduceList ( i , [ components ] ) ;
88849: LD_VAR 0 3
88853: PPUSH
88854: LD_VAR 0 9
88858: PUSH
88859: EMPTY
88860: LIST
88861: PPUSH
88862: CALL 85085 0 2
// break ;
88866: GO 89530
// end ; end ; if GetType ( un ) = unit_building then
88868: LD_VAR 0 1
88872: PPUSH
88873: CALL_OW 247
88877: PUSH
88878: LD_INT 3
88880: EQUAL
88881: IFFALSE 89196
// begin btype := GetBType ( un ) ;
88883: LD_ADDR_VAR 0 5
88887: PUSH
88888: LD_VAR 0 1
88892: PPUSH
88893: CALL_OW 266
88897: ST_TO_ADDR
// if btype = b_warehouse then
88898: LD_VAR 0 5
88902: PUSH
88903: LD_INT 1
88905: EQUAL
88906: IFFALSE 88924
// begin btype := b_depot ;
88908: LD_ADDR_VAR 0 5
88912: PUSH
88913: LD_INT 0
88915: ST_TO_ADDR
// pos := 1 ;
88916: LD_ADDR_VAR 0 6
88920: PUSH
88921: LD_INT 1
88923: ST_TO_ADDR
// end ; if btype = b_factory then
88924: LD_VAR 0 5
88928: PUSH
88929: LD_INT 3
88931: EQUAL
88932: IFFALSE 88950
// begin btype := b_workshop ;
88934: LD_ADDR_VAR 0 5
88938: PUSH
88939: LD_INT 2
88941: ST_TO_ADDR
// pos := 1 ;
88942: LD_ADDR_VAR 0 6
88946: PUSH
88947: LD_INT 1
88949: ST_TO_ADDR
// end ; if btype = b_barracks then
88950: LD_VAR 0 5
88954: PUSH
88955: LD_INT 5
88957: EQUAL
88958: IFFALSE 88968
// btype := b_armoury ;
88960: LD_ADDR_VAR 0 5
88964: PUSH
88965: LD_INT 4
88967: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
88968: LD_VAR 0 5
88972: PUSH
88973: LD_INT 7
88975: PUSH
88976: LD_INT 8
88978: PUSH
88979: EMPTY
88980: LIST
88981: LIST
88982: IN
88983: IFFALSE 88993
// btype := b_lab ;
88985: LD_ADDR_VAR 0 5
88989: PUSH
88990: LD_INT 6
88992: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
88993: LD_ADDR_EXP 41
88997: PUSH
88998: LD_EXP 41
89002: PPUSH
89003: LD_VAR 0 3
89007: PUSH
89008: LD_EXP 41
89012: PUSH
89013: LD_VAR 0 3
89017: ARRAY
89018: PUSH
89019: LD_INT 1
89021: PLUS
89022: PUSH
89023: EMPTY
89024: LIST
89025: LIST
89026: PPUSH
89027: LD_VAR 0 5
89031: PUSH
89032: LD_VAR 0 1
89036: PPUSH
89037: CALL_OW 250
89041: PUSH
89042: LD_VAR 0 1
89046: PPUSH
89047: CALL_OW 251
89051: PUSH
89052: LD_VAR 0 1
89056: PPUSH
89057: CALL_OW 254
89061: PUSH
89062: EMPTY
89063: LIST
89064: LIST
89065: LIST
89066: LIST
89067: PPUSH
89068: CALL 26004 0 3
89072: ST_TO_ADDR
// if pos = 1 then
89073: LD_VAR 0 6
89077: PUSH
89078: LD_INT 1
89080: EQUAL
89081: IFFALSE 89196
// begin tmp := mc_build_list [ i ] ;
89083: LD_ADDR_VAR 0 7
89087: PUSH
89088: LD_EXP 41
89092: PUSH
89093: LD_VAR 0 3
89097: ARRAY
89098: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89099: LD_VAR 0 7
89103: PPUSH
89104: LD_INT 2
89106: PUSH
89107: LD_INT 30
89109: PUSH
89110: LD_INT 0
89112: PUSH
89113: EMPTY
89114: LIST
89115: LIST
89116: PUSH
89117: LD_INT 30
89119: PUSH
89120: LD_INT 1
89122: PUSH
89123: EMPTY
89124: LIST
89125: LIST
89126: PUSH
89127: EMPTY
89128: LIST
89129: LIST
89130: LIST
89131: PPUSH
89132: CALL_OW 72
89136: IFFALSE 89146
// pos := 2 ;
89138: LD_ADDR_VAR 0 6
89142: PUSH
89143: LD_INT 2
89145: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89146: LD_ADDR_VAR 0 7
89150: PUSH
89151: LD_VAR 0 7
89155: PPUSH
89156: LD_VAR 0 6
89160: PPUSH
89161: LD_VAR 0 7
89165: PPUSH
89166: CALL 26330 0 3
89170: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89171: LD_ADDR_EXP 41
89175: PUSH
89176: LD_EXP 41
89180: PPUSH
89181: LD_VAR 0 3
89185: PPUSH
89186: LD_VAR 0 7
89190: PPUSH
89191: CALL_OW 1
89195: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89196: LD_VAR 0 1
89200: PUSH
89201: LD_EXP 36
89205: PUSH
89206: LD_VAR 0 3
89210: ARRAY
89211: IN
89212: IFFALSE 89251
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89214: LD_ADDR_EXP 36
89218: PUSH
89219: LD_EXP 36
89223: PPUSH
89224: LD_VAR 0 3
89228: PPUSH
89229: LD_EXP 36
89233: PUSH
89234: LD_VAR 0 3
89238: ARRAY
89239: PUSH
89240: LD_VAR 0 1
89244: DIFF
89245: PPUSH
89246: CALL_OW 1
89250: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89251: LD_VAR 0 1
89255: PUSH
89256: LD_EXP 43
89260: PUSH
89261: LD_VAR 0 3
89265: ARRAY
89266: IN
89267: IFFALSE 89306
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89269: LD_ADDR_EXP 43
89273: PUSH
89274: LD_EXP 43
89278: PPUSH
89279: LD_VAR 0 3
89283: PPUSH
89284: LD_EXP 43
89288: PUSH
89289: LD_VAR 0 3
89293: ARRAY
89294: PUSH
89295: LD_VAR 0 1
89299: DIFF
89300: PPUSH
89301: CALL_OW 1
89305: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89306: LD_VAR 0 1
89310: PUSH
89311: LD_EXP 55
89315: PUSH
89316: LD_VAR 0 3
89320: ARRAY
89321: IN
89322: IFFALSE 89361
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89324: LD_ADDR_EXP 55
89328: PUSH
89329: LD_EXP 55
89333: PPUSH
89334: LD_VAR 0 3
89338: PPUSH
89339: LD_EXP 55
89343: PUSH
89344: LD_VAR 0 3
89348: ARRAY
89349: PUSH
89350: LD_VAR 0 1
89354: DIFF
89355: PPUSH
89356: CALL_OW 1
89360: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89361: LD_VAR 0 1
89365: PUSH
89366: LD_EXP 58
89370: PUSH
89371: LD_VAR 0 3
89375: ARRAY
89376: IN
89377: IFFALSE 89416
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89379: LD_ADDR_EXP 58
89383: PUSH
89384: LD_EXP 58
89388: PPUSH
89389: LD_VAR 0 3
89393: PPUSH
89394: LD_EXP 58
89398: PUSH
89399: LD_VAR 0 3
89403: ARRAY
89404: PUSH
89405: LD_VAR 0 1
89409: DIFF
89410: PPUSH
89411: CALL_OW 1
89415: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89416: LD_VAR 0 1
89420: PUSH
89421: LD_EXP 45
89425: PUSH
89426: LD_VAR 0 3
89430: ARRAY
89431: IN
89432: IFFALSE 89471
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89434: LD_ADDR_EXP 45
89438: PUSH
89439: LD_EXP 45
89443: PPUSH
89444: LD_VAR 0 3
89448: PPUSH
89449: LD_EXP 45
89453: PUSH
89454: LD_VAR 0 3
89458: ARRAY
89459: PUSH
89460: LD_VAR 0 1
89464: DIFF
89465: PPUSH
89466: CALL_OW 1
89470: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89471: LD_VAR 0 1
89475: PUSH
89476: LD_EXP 44
89480: PUSH
89481: LD_VAR 0 3
89485: ARRAY
89486: IN
89487: IFFALSE 89526
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89489: LD_ADDR_EXP 44
89493: PUSH
89494: LD_EXP 44
89498: PPUSH
89499: LD_VAR 0 3
89503: PPUSH
89504: LD_EXP 44
89508: PUSH
89509: LD_VAR 0 3
89513: ARRAY
89514: PUSH
89515: LD_VAR 0 1
89519: DIFF
89520: PPUSH
89521: CALL_OW 1
89525: ST_TO_ADDR
// end ; break ;
89526: GO 89530
// end ;
89528: GO 88455
89530: POP
89531: POP
// end ;
89532: LD_VAR 0 2
89536: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89537: LD_INT 0
89539: PPUSH
89540: PPUSH
89541: PPUSH
// if not mc_bases or not skirmish then
89542: LD_EXP 36
89546: NOT
89547: PUSH
89548: LD_EXP 34
89552: NOT
89553: OR
89554: IFFALSE 89558
// exit ;
89556: GO 89773
// for i = 1 to mc_bases do
89558: LD_ADDR_VAR 0 3
89562: PUSH
89563: DOUBLE
89564: LD_INT 1
89566: DEC
89567: ST_TO_ADDR
89568: LD_EXP 36
89572: PUSH
89573: FOR_TO
89574: IFFALSE 89771
// begin if building in mc_construct_list [ i ] then
89576: LD_VAR 0 1
89580: PUSH
89581: LD_EXP 43
89585: PUSH
89586: LD_VAR 0 3
89590: ARRAY
89591: IN
89592: IFFALSE 89769
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89594: LD_ADDR_EXP 43
89598: PUSH
89599: LD_EXP 43
89603: PPUSH
89604: LD_VAR 0 3
89608: PPUSH
89609: LD_EXP 43
89613: PUSH
89614: LD_VAR 0 3
89618: ARRAY
89619: PUSH
89620: LD_VAR 0 1
89624: DIFF
89625: PPUSH
89626: CALL_OW 1
89630: ST_TO_ADDR
// if building in mc_lab [ i ] then
89631: LD_VAR 0 1
89635: PUSH
89636: LD_EXP 69
89640: PUSH
89641: LD_VAR 0 3
89645: ARRAY
89646: IN
89647: IFFALSE 89702
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89649: LD_ADDR_EXP 70
89653: PUSH
89654: LD_EXP 70
89658: PPUSH
89659: LD_VAR 0 3
89663: PPUSH
89664: LD_EXP 70
89668: PUSH
89669: LD_VAR 0 3
89673: ARRAY
89674: PPUSH
89675: LD_INT 1
89677: PPUSH
89678: LD_EXP 70
89682: PUSH
89683: LD_VAR 0 3
89687: ARRAY
89688: PPUSH
89689: LD_INT 0
89691: PPUSH
89692: CALL 25422 0 4
89696: PPUSH
89697: CALL_OW 1
89701: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89702: LD_VAR 0 1
89706: PUSH
89707: LD_EXP 36
89711: PUSH
89712: LD_VAR 0 3
89716: ARRAY
89717: IN
89718: NOT
89719: IFFALSE 89765
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89721: LD_ADDR_EXP 36
89725: PUSH
89726: LD_EXP 36
89730: PPUSH
89731: LD_VAR 0 3
89735: PUSH
89736: LD_EXP 36
89740: PUSH
89741: LD_VAR 0 3
89745: ARRAY
89746: PUSH
89747: LD_INT 1
89749: PLUS
89750: PUSH
89751: EMPTY
89752: LIST
89753: LIST
89754: PPUSH
89755: LD_VAR 0 1
89759: PPUSH
89760: CALL 26004 0 3
89764: ST_TO_ADDR
// exit ;
89765: POP
89766: POP
89767: GO 89773
// end ; end ;
89769: GO 89573
89771: POP
89772: POP
// end ;
89773: LD_VAR 0 2
89777: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89778: LD_INT 0
89780: PPUSH
89781: PPUSH
89782: PPUSH
89783: PPUSH
89784: PPUSH
89785: PPUSH
89786: PPUSH
// if not mc_bases or not skirmish then
89787: LD_EXP 36
89791: NOT
89792: PUSH
89793: LD_EXP 34
89797: NOT
89798: OR
89799: IFFALSE 89803
// exit ;
89801: GO 90464
// for i = 1 to mc_bases do
89803: LD_ADDR_VAR 0 3
89807: PUSH
89808: DOUBLE
89809: LD_INT 1
89811: DEC
89812: ST_TO_ADDR
89813: LD_EXP 36
89817: PUSH
89818: FOR_TO
89819: IFFALSE 90462
// begin if building in mc_construct_list [ i ] then
89821: LD_VAR 0 1
89825: PUSH
89826: LD_EXP 43
89830: PUSH
89831: LD_VAR 0 3
89835: ARRAY
89836: IN
89837: IFFALSE 90460
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89839: LD_ADDR_EXP 43
89843: PUSH
89844: LD_EXP 43
89848: PPUSH
89849: LD_VAR 0 3
89853: PPUSH
89854: LD_EXP 43
89858: PUSH
89859: LD_VAR 0 3
89863: ARRAY
89864: PUSH
89865: LD_VAR 0 1
89869: DIFF
89870: PPUSH
89871: CALL_OW 1
89875: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89876: LD_ADDR_EXP 36
89880: PUSH
89881: LD_EXP 36
89885: PPUSH
89886: LD_VAR 0 3
89890: PUSH
89891: LD_EXP 36
89895: PUSH
89896: LD_VAR 0 3
89900: ARRAY
89901: PUSH
89902: LD_INT 1
89904: PLUS
89905: PUSH
89906: EMPTY
89907: LIST
89908: LIST
89909: PPUSH
89910: LD_VAR 0 1
89914: PPUSH
89915: CALL 26004 0 3
89919: ST_TO_ADDR
// btype := GetBType ( building ) ;
89920: LD_ADDR_VAR 0 5
89924: PUSH
89925: LD_VAR 0 1
89929: PPUSH
89930: CALL_OW 266
89934: ST_TO_ADDR
// side := GetSide ( building ) ;
89935: LD_ADDR_VAR 0 8
89939: PUSH
89940: LD_VAR 0 1
89944: PPUSH
89945: CALL_OW 255
89949: ST_TO_ADDR
// if btype = b_lab then
89950: LD_VAR 0 5
89954: PUSH
89955: LD_INT 6
89957: EQUAL
89958: IFFALSE 90008
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
89960: LD_ADDR_EXP 69
89964: PUSH
89965: LD_EXP 69
89969: PPUSH
89970: LD_VAR 0 3
89974: PUSH
89975: LD_EXP 69
89979: PUSH
89980: LD_VAR 0 3
89984: ARRAY
89985: PUSH
89986: LD_INT 1
89988: PLUS
89989: PUSH
89990: EMPTY
89991: LIST
89992: LIST
89993: PPUSH
89994: LD_VAR 0 1
89998: PPUSH
89999: CALL 26004 0 3
90003: ST_TO_ADDR
// exit ;
90004: POP
90005: POP
90006: GO 90464
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90008: LD_VAR 0 5
90012: PUSH
90013: LD_INT 0
90015: PUSH
90016: LD_INT 2
90018: PUSH
90019: LD_INT 4
90021: PUSH
90022: EMPTY
90023: LIST
90024: LIST
90025: LIST
90026: IN
90027: IFFALSE 90151
// begin if btype = b_armoury then
90029: LD_VAR 0 5
90033: PUSH
90034: LD_INT 4
90036: EQUAL
90037: IFFALSE 90047
// btype := b_barracks ;
90039: LD_ADDR_VAR 0 5
90043: PUSH
90044: LD_INT 5
90046: ST_TO_ADDR
// if btype = b_depot then
90047: LD_VAR 0 5
90051: PUSH
90052: LD_INT 0
90054: EQUAL
90055: IFFALSE 90065
// btype := b_warehouse ;
90057: LD_ADDR_VAR 0 5
90061: PUSH
90062: LD_INT 1
90064: ST_TO_ADDR
// if btype = b_workshop then
90065: LD_VAR 0 5
90069: PUSH
90070: LD_INT 2
90072: EQUAL
90073: IFFALSE 90083
// btype := b_factory ;
90075: LD_ADDR_VAR 0 5
90079: PUSH
90080: LD_INT 3
90082: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90083: LD_VAR 0 5
90087: PPUSH
90088: LD_VAR 0 8
90092: PPUSH
90093: CALL_OW 323
90097: PUSH
90098: LD_INT 1
90100: EQUAL
90101: IFFALSE 90147
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90103: LD_ADDR_EXP 68
90107: PUSH
90108: LD_EXP 68
90112: PPUSH
90113: LD_VAR 0 3
90117: PUSH
90118: LD_EXP 68
90122: PUSH
90123: LD_VAR 0 3
90127: ARRAY
90128: PUSH
90129: LD_INT 1
90131: PLUS
90132: PUSH
90133: EMPTY
90134: LIST
90135: LIST
90136: PPUSH
90137: LD_VAR 0 1
90141: PPUSH
90142: CALL 26004 0 3
90146: ST_TO_ADDR
// exit ;
90147: POP
90148: POP
90149: GO 90464
// end ; if btype in [ b_bunker , b_turret ] then
90151: LD_VAR 0 5
90155: PUSH
90156: LD_INT 32
90158: PUSH
90159: LD_INT 33
90161: PUSH
90162: EMPTY
90163: LIST
90164: LIST
90165: IN
90166: IFFALSE 90456
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90168: LD_ADDR_EXP 44
90172: PUSH
90173: LD_EXP 44
90177: PPUSH
90178: LD_VAR 0 3
90182: PUSH
90183: LD_EXP 44
90187: PUSH
90188: LD_VAR 0 3
90192: ARRAY
90193: PUSH
90194: LD_INT 1
90196: PLUS
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: PPUSH
90202: LD_VAR 0 1
90206: PPUSH
90207: CALL 26004 0 3
90211: ST_TO_ADDR
// if btype = b_bunker then
90212: LD_VAR 0 5
90216: PUSH
90217: LD_INT 32
90219: EQUAL
90220: IFFALSE 90456
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90222: LD_ADDR_EXP 45
90226: PUSH
90227: LD_EXP 45
90231: PPUSH
90232: LD_VAR 0 3
90236: PUSH
90237: LD_EXP 45
90241: PUSH
90242: LD_VAR 0 3
90246: ARRAY
90247: PUSH
90248: LD_INT 1
90250: PLUS
90251: PUSH
90252: EMPTY
90253: LIST
90254: LIST
90255: PPUSH
90256: LD_VAR 0 1
90260: PPUSH
90261: CALL 26004 0 3
90265: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90266: LD_ADDR_VAR 0 6
90270: PUSH
90271: LD_EXP 36
90275: PUSH
90276: LD_VAR 0 3
90280: ARRAY
90281: PPUSH
90282: LD_INT 25
90284: PUSH
90285: LD_INT 1
90287: PUSH
90288: EMPTY
90289: LIST
90290: LIST
90291: PUSH
90292: LD_INT 3
90294: PUSH
90295: LD_INT 54
90297: PUSH
90298: EMPTY
90299: LIST
90300: PUSH
90301: EMPTY
90302: LIST
90303: LIST
90304: PUSH
90305: EMPTY
90306: LIST
90307: LIST
90308: PPUSH
90309: CALL_OW 72
90313: ST_TO_ADDR
// if tmp then
90314: LD_VAR 0 6
90318: IFFALSE 90324
// exit ;
90320: POP
90321: POP
90322: GO 90464
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90324: LD_ADDR_VAR 0 6
90328: PUSH
90329: LD_EXP 36
90333: PUSH
90334: LD_VAR 0 3
90338: ARRAY
90339: PPUSH
90340: LD_INT 2
90342: PUSH
90343: LD_INT 30
90345: PUSH
90346: LD_INT 4
90348: PUSH
90349: EMPTY
90350: LIST
90351: LIST
90352: PUSH
90353: LD_INT 30
90355: PUSH
90356: LD_INT 5
90358: PUSH
90359: EMPTY
90360: LIST
90361: LIST
90362: PUSH
90363: EMPTY
90364: LIST
90365: LIST
90366: LIST
90367: PPUSH
90368: CALL_OW 72
90372: ST_TO_ADDR
// if not tmp then
90373: LD_VAR 0 6
90377: NOT
90378: IFFALSE 90384
// exit ;
90380: POP
90381: POP
90382: GO 90464
// for j in tmp do
90384: LD_ADDR_VAR 0 4
90388: PUSH
90389: LD_VAR 0 6
90393: PUSH
90394: FOR_IN
90395: IFFALSE 90454
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90397: LD_ADDR_VAR 0 7
90401: PUSH
90402: LD_VAR 0 4
90406: PPUSH
90407: CALL_OW 313
90411: PPUSH
90412: LD_INT 25
90414: PUSH
90415: LD_INT 1
90417: PUSH
90418: EMPTY
90419: LIST
90420: LIST
90421: PPUSH
90422: CALL_OW 72
90426: ST_TO_ADDR
// if units then
90427: LD_VAR 0 7
90431: IFFALSE 90452
// begin ComExitBuilding ( units [ 1 ] ) ;
90433: LD_VAR 0 7
90437: PUSH
90438: LD_INT 1
90440: ARRAY
90441: PPUSH
90442: CALL_OW 122
// exit ;
90446: POP
90447: POP
90448: POP
90449: POP
90450: GO 90464
// end ; end ;
90452: GO 90394
90454: POP
90455: POP
// end ; end ; exit ;
90456: POP
90457: POP
90458: GO 90464
// end ; end ;
90460: GO 89818
90462: POP
90463: POP
// end ;
90464: LD_VAR 0 2
90468: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90469: LD_INT 0
90471: PPUSH
90472: PPUSH
90473: PPUSH
90474: PPUSH
90475: PPUSH
90476: PPUSH
90477: PPUSH
// if not mc_bases or not skirmish then
90478: LD_EXP 36
90482: NOT
90483: PUSH
90484: LD_EXP 34
90488: NOT
90489: OR
90490: IFFALSE 90494
// exit ;
90492: GO 90725
// btype := GetBType ( building ) ;
90494: LD_ADDR_VAR 0 6
90498: PUSH
90499: LD_VAR 0 1
90503: PPUSH
90504: CALL_OW 266
90508: ST_TO_ADDR
// x := GetX ( building ) ;
90509: LD_ADDR_VAR 0 7
90513: PUSH
90514: LD_VAR 0 1
90518: PPUSH
90519: CALL_OW 250
90523: ST_TO_ADDR
// y := GetY ( building ) ;
90524: LD_ADDR_VAR 0 8
90528: PUSH
90529: LD_VAR 0 1
90533: PPUSH
90534: CALL_OW 251
90538: ST_TO_ADDR
// d := GetDir ( building ) ;
90539: LD_ADDR_VAR 0 9
90543: PUSH
90544: LD_VAR 0 1
90548: PPUSH
90549: CALL_OW 254
90553: ST_TO_ADDR
// for i = 1 to mc_bases do
90554: LD_ADDR_VAR 0 4
90558: PUSH
90559: DOUBLE
90560: LD_INT 1
90562: DEC
90563: ST_TO_ADDR
90564: LD_EXP 36
90568: PUSH
90569: FOR_TO
90570: IFFALSE 90723
// begin if not mc_build_list [ i ] then
90572: LD_EXP 41
90576: PUSH
90577: LD_VAR 0 4
90581: ARRAY
90582: NOT
90583: IFFALSE 90587
// continue ;
90585: GO 90569
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90587: LD_VAR 0 6
90591: PUSH
90592: LD_VAR 0 7
90596: PUSH
90597: LD_VAR 0 8
90601: PUSH
90602: LD_VAR 0 9
90606: PUSH
90607: EMPTY
90608: LIST
90609: LIST
90610: LIST
90611: LIST
90612: PPUSH
90613: LD_EXP 41
90617: PUSH
90618: LD_VAR 0 4
90622: ARRAY
90623: PUSH
90624: LD_INT 1
90626: ARRAY
90627: PPUSH
90628: CALL 32173 0 2
90632: IFFALSE 90721
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90634: LD_ADDR_EXP 41
90638: PUSH
90639: LD_EXP 41
90643: PPUSH
90644: LD_VAR 0 4
90648: PPUSH
90649: LD_EXP 41
90653: PUSH
90654: LD_VAR 0 4
90658: ARRAY
90659: PPUSH
90660: LD_INT 1
90662: PPUSH
90663: CALL_OW 3
90667: PPUSH
90668: CALL_OW 1
90672: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90673: LD_ADDR_EXP 43
90677: PUSH
90678: LD_EXP 43
90682: PPUSH
90683: LD_VAR 0 4
90687: PUSH
90688: LD_EXP 43
90692: PUSH
90693: LD_VAR 0 4
90697: ARRAY
90698: PUSH
90699: LD_INT 1
90701: PLUS
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: PPUSH
90707: LD_VAR 0 1
90711: PPUSH
90712: CALL 26004 0 3
90716: ST_TO_ADDR
// exit ;
90717: POP
90718: POP
90719: GO 90725
// end ; end ;
90721: GO 90569
90723: POP
90724: POP
// end ;
90725: LD_VAR 0 3
90729: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90730: LD_INT 0
90732: PPUSH
90733: PPUSH
90734: PPUSH
// if not mc_bases or not skirmish then
90735: LD_EXP 36
90739: NOT
90740: PUSH
90741: LD_EXP 34
90745: NOT
90746: OR
90747: IFFALSE 90751
// exit ;
90749: GO 90941
// for i = 1 to mc_bases do
90751: LD_ADDR_VAR 0 4
90755: PUSH
90756: DOUBLE
90757: LD_INT 1
90759: DEC
90760: ST_TO_ADDR
90761: LD_EXP 36
90765: PUSH
90766: FOR_TO
90767: IFFALSE 90854
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90769: LD_VAR 0 1
90773: PUSH
90774: LD_EXP 44
90778: PUSH
90779: LD_VAR 0 4
90783: ARRAY
90784: IN
90785: PUSH
90786: LD_VAR 0 1
90790: PUSH
90791: LD_EXP 45
90795: PUSH
90796: LD_VAR 0 4
90800: ARRAY
90801: IN
90802: NOT
90803: AND
90804: IFFALSE 90852
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90806: LD_ADDR_EXP 45
90810: PUSH
90811: LD_EXP 45
90815: PPUSH
90816: LD_VAR 0 4
90820: PUSH
90821: LD_EXP 45
90825: PUSH
90826: LD_VAR 0 4
90830: ARRAY
90831: PUSH
90832: LD_INT 1
90834: PLUS
90835: PUSH
90836: EMPTY
90837: LIST
90838: LIST
90839: PPUSH
90840: LD_VAR 0 1
90844: PPUSH
90845: CALL 26004 0 3
90849: ST_TO_ADDR
// break ;
90850: GO 90854
// end ; end ;
90852: GO 90766
90854: POP
90855: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90856: LD_VAR 0 1
90860: PPUSH
90861: CALL_OW 257
90865: PUSH
90866: LD_EXP 62
90870: IN
90871: PUSH
90872: LD_VAR 0 1
90876: PPUSH
90877: CALL_OW 266
90881: PUSH
90882: LD_INT 5
90884: EQUAL
90885: AND
90886: PUSH
90887: LD_VAR 0 2
90891: PPUSH
90892: CALL_OW 110
90896: PUSH
90897: LD_INT 18
90899: NONEQUAL
90900: AND
90901: IFFALSE 90941
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90903: LD_VAR 0 2
90907: PPUSH
90908: CALL_OW 257
90912: PUSH
90913: LD_INT 5
90915: PUSH
90916: LD_INT 8
90918: PUSH
90919: LD_INT 9
90921: PUSH
90922: EMPTY
90923: LIST
90924: LIST
90925: LIST
90926: IN
90927: IFFALSE 90941
// SetClass ( unit , 1 ) ;
90929: LD_VAR 0 2
90933: PPUSH
90934: LD_INT 1
90936: PPUSH
90937: CALL_OW 336
// end ;
90941: LD_VAR 0 3
90945: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
90946: LD_INT 0
90948: PPUSH
90949: PPUSH
// if not mc_bases or not skirmish then
90950: LD_EXP 36
90954: NOT
90955: PUSH
90956: LD_EXP 34
90960: NOT
90961: OR
90962: IFFALSE 90966
// exit ;
90964: GO 91082
// if GetLives ( abandoned_vehicle ) > 250 then
90966: LD_VAR 0 2
90970: PPUSH
90971: CALL_OW 256
90975: PUSH
90976: LD_INT 250
90978: GREATER
90979: IFFALSE 90983
// exit ;
90981: GO 91082
// for i = 1 to mc_bases do
90983: LD_ADDR_VAR 0 6
90987: PUSH
90988: DOUBLE
90989: LD_INT 1
90991: DEC
90992: ST_TO_ADDR
90993: LD_EXP 36
90997: PUSH
90998: FOR_TO
90999: IFFALSE 91080
// begin if driver in mc_bases [ i ] then
91001: LD_VAR 0 1
91005: PUSH
91006: LD_EXP 36
91010: PUSH
91011: LD_VAR 0 6
91015: ARRAY
91016: IN
91017: IFFALSE 91078
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91019: LD_VAR 0 1
91023: PPUSH
91024: LD_EXP 36
91028: PUSH
91029: LD_VAR 0 6
91033: ARRAY
91034: PPUSH
91035: LD_INT 2
91037: PUSH
91038: LD_INT 30
91040: PUSH
91041: LD_INT 0
91043: PUSH
91044: EMPTY
91045: LIST
91046: LIST
91047: PUSH
91048: LD_INT 30
91050: PUSH
91051: LD_INT 1
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: PUSH
91058: EMPTY
91059: LIST
91060: LIST
91061: LIST
91062: PPUSH
91063: CALL_OW 72
91067: PUSH
91068: LD_INT 1
91070: ARRAY
91071: PPUSH
91072: CALL_OW 112
// break ;
91076: GO 91080
// end ; end ;
91078: GO 90998
91080: POP
91081: POP
// end ;
91082: LD_VAR 0 5
91086: RET
