// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 623 0 0
// SetDiplomacy ;
  35: CALL 835 0 0
// PrepareGame ;
  39: CALL 917 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// if not Difficulty or debug then
  76: LD_OWVAR 67
  80: NOT
  81: PUSH
  82: LD_EXP 1
  86: OR
  87: IFFALSE 97
// Difficulty := 2 ;
  89: LD_ADDR_OWVAR 67
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
  97: LD_ADDR_EXP 23
 101: PUSH
 102: LD_INT 1
 104: PPUSH
 105: CALL_OW 426
 109: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 110: LD_ADDR_EXP 24
 114: PUSH
 115: LD_INT 2
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 123: LD_ADDR_EXP 26
 127: PUSH
 128: LD_INT 3
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not cratesSpawn then
 136: LD_EXP 26
 140: NOT
 141: IFFALSE 151
// cratesSpawn := 2 ;
 143: LD_ADDR_EXP 26
 147: PUSH
 148: LD_INT 2
 150: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 151: LD_ADDR_EXP 25
 155: PUSH
 156: LD_INT 4
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// if not commander then
 164: LD_EXP 25
 168: NOT
 169: IFFALSE 179
// commander := 3 ;
 171: LD_ADDR_EXP 25
 175: PUSH
 176: LD_INT 3
 178: ST_TO_ADDR
// if not debug then
 179: LD_EXP 1
 183: NOT
 184: IFFALSE 188
// exit ;
 186: GO 245
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 188: LD_ADDR_OWVAR 47
 192: PUSH
 193: LD_STRING Difficulty: 
 195: PUSH
 196: LD_OWVAR 67
 200: STR
 201: PUSH
 202: LD_STRING sibBomb: 
 204: PUSH
 205: LD_EXP 23
 209: STR
 210: PUSH
 211: LD_STRING reinforceAllowed: 
 213: PUSH
 214: LD_EXP 24
 218: STR
 219: PUSH
 220: LD_STRING cratesSpawn: 
 222: PUSH
 223: LD_EXP 26
 227: STR
 228: PUSH
 229: LD_STRING commander: 
 231: PUSH
 232: LD_EXP 25
 236: STR
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// end ;
 245: LD_VAR 0 1
 249: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 250: LD_EXP 3
 254: PUSH
 255: LD_EXP 2
 259: PUSH
 260: LD_INT 1
 262: EQUAL
 263: AND
 264: PUSH
 265: LD_EXP 4
 269: NOT
 270: AND
 271: IFFALSE 294
 273: GO 275
 275: DISABLE
// begin enable ;
 276: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 277: LD_ADDR_OWVAR 47
 281: PUSH
 282: LD_STRING #SkrTime
 284: PUSH
 285: LD_OWVAR 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: ST_TO_ADDR
// end ;
 294: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 295: LD_EXP 19
 299: PUSH
 300: LD_EXP 3
 304: AND
 305: PUSH
 306: LD_EXP 2
 310: PUSH
 311: LD_INT 1
 313: EQUAL
 314: AND
 315: IFFALSE 376
 317: GO 319
 319: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 320: LD_EXP 19
 324: PUSH
 325: LD_INT 1
 327: ARRAY
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: LD_EXP 19
 337: PUSH
 338: LD_INT 1
 340: ARRAY
 341: PUSH
 342: LD_INT 2
 344: ARRAY
 345: PPUSH
 346: LD_EXP 19
 350: PUSH
 351: LD_INT 1
 353: ARRAY
 354: PUSH
 355: LD_INT 3
 357: ARRAY
 358: PPUSH
 359: LD_EXP 19
 363: PUSH
 364: LD_INT 1
 366: ARRAY
 367: PUSH
 368: LD_INT 4
 370: ARRAY
 371: PPUSH
 372: CALL 61006 0 4
 376: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 377: LD_EXP 19
 381: PUSH
 382: LD_EXP 3
 386: AND
 387: PUSH
 388: LD_EXP 2
 392: PUSH
 393: LD_INT 1
 395: EQUAL
 396: AND
 397: IFFALSE 458
 399: GO 401
 401: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 402: LD_EXP 19
 406: PUSH
 407: LD_INT 2
 409: ARRAY
 410: PUSH
 411: LD_INT 1
 413: ARRAY
 414: PPUSH
 415: LD_EXP 19
 419: PUSH
 420: LD_INT 2
 422: ARRAY
 423: PUSH
 424: LD_INT 2
 426: ARRAY
 427: PPUSH
 428: LD_EXP 19
 432: PUSH
 433: LD_INT 2
 435: ARRAY
 436: PUSH
 437: LD_INT 3
 439: ARRAY
 440: PPUSH
 441: LD_EXP 19
 445: PUSH
 446: LD_INT 2
 448: ARRAY
 449: PUSH
 450: LD_INT 4
 452: ARRAY
 453: PPUSH
 454: CALL 61006 0 4
 458: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 459: LD_EXP 19
 463: PUSH
 464: LD_EXP 3
 468: AND
 469: PUSH
 470: LD_EXP 2
 474: PUSH
 475: LD_INT 1
 477: EQUAL
 478: AND
 479: IFFALSE 540
 481: GO 483
 483: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 484: LD_EXP 19
 488: PUSH
 489: LD_INT 3
 491: ARRAY
 492: PUSH
 493: LD_INT 1
 495: ARRAY
 496: PPUSH
 497: LD_EXP 19
 501: PUSH
 502: LD_INT 3
 504: ARRAY
 505: PUSH
 506: LD_INT 2
 508: ARRAY
 509: PPUSH
 510: LD_EXP 19
 514: PUSH
 515: LD_INT 3
 517: ARRAY
 518: PUSH
 519: LD_INT 3
 521: ARRAY
 522: PPUSH
 523: LD_EXP 19
 527: PUSH
 528: LD_INT 3
 530: ARRAY
 531: PUSH
 532: LD_INT 4
 534: ARRAY
 535: PPUSH
 536: CALL 61006 0 4
 540: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 541: LD_EXP 19
 545: PUSH
 546: LD_EXP 3
 550: AND
 551: PUSH
 552: LD_EXP 2
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: AND
 561: IFFALSE 622
 563: GO 565
 565: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 566: LD_EXP 19
 570: PUSH
 571: LD_INT 4
 573: ARRAY
 574: PUSH
 575: LD_INT 1
 577: ARRAY
 578: PPUSH
 579: LD_EXP 19
 583: PUSH
 584: LD_INT 4
 586: ARRAY
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_EXP 19
 596: PUSH
 597: LD_INT 4
 599: ARRAY
 600: PUSH
 601: LD_INT 3
 603: ARRAY
 604: PPUSH
 605: LD_EXP 19
 609: PUSH
 610: LD_INT 4
 612: ARRAY
 613: PUSH
 614: LD_INT 4
 616: ARRAY
 617: PPUSH
 618: CALL 61006 0 4
 622: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 623: LD_INT 0
 625: PPUSH
 626: PPUSH
 627: PPUSH
 628: PPUSH
 629: PPUSH
// if GameType = 1 then
 630: LD_EXP 2
 634: PUSH
 635: LD_INT 1
 637: EQUAL
 638: IFFALSE 707
// begin ban_techs := [ ] ;
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: EMPTY
 646: ST_TO_ADDR
// if sibBombAllowed < 2 then
 647: LD_EXP 23
 651: PUSH
 652: LD_INT 2
 654: LESS
 655: IFFALSE 668
// ban_techs := [ tech_sibFiss ] ;
 657: LD_ADDR_VAR 0 4
 661: PUSH
 662: LD_INT 25
 664: PUSH
 665: EMPTY
 666: LIST
 667: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 668: LD_ADDR_VAR 0 5
 672: PUSH
 673: LD_INT 46
 675: PUSH
 676: LD_INT 47
 678: PUSH
 679: LD_INT 48
 681: PUSH
 682: LD_INT 49
 684: PUSH
 685: LD_INT 50
 687: PUSH
 688: LD_INT 39
 690: PUSH
 691: LD_INT 69
 693: PUSH
 694: LD_INT 40
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// end ; for i = 1 to 8 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 8
 719: PUSH
 720: FOR_TO
 721: IFFALSE 805
// begin if res_techs then
 723: LD_VAR 0 5
 727: IFFALSE 763
// for j in res_techs do
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_VAR 0 5
 738: PUSH
 739: FOR_IN
 740: IFFALSE 761
// SetTech ( j , i , state_researched ) ;
 742: LD_VAR 0 3
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 2
 754: PPUSH
 755: CALL_OW 322
 759: GO 739
 761: POP
 762: POP
// if ban_techs then
 763: LD_VAR 0 4
 767: IFFALSE 803
// for j in ban_techs do
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: PUSH
 779: FOR_IN
 780: IFFALSE 801
// SetTech ( j , i , state_disabled ) ;
 782: LD_VAR 0 3
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 322
 799: GO 779
 801: POP
 802: POP
// end ;
 803: GO 720
 805: POP
 806: POP
// if sibBombAllowed = 1 then
 807: LD_EXP 23
 811: PUSH
 812: LD_INT 1
 814: EQUAL
 815: IFFALSE 830
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 817: LD_INT 25
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL_OW 322
// end ;
 830: LD_VAR 0 1
 834: RET
// export function SetDiplomacy ; begin
 835: LD_INT 0
 837: PPUSH
// if GameType = 1 then
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: EQUAL
 846: IFFALSE 912
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 4
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 864: LD_INT 3
 866: PPUSH
 867: LD_INT 6
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 880: LD_INT 3
 882: PPUSH
 883: LD_INT 8
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 896: LD_INT 6
 898: PPUSH
 899: LD_INT 8
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 1
 907: PPUSH
 908: CALL_OW 80
// end ; end ;
 912: LD_VAR 0 1
 916: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
// if GameType = 1 then
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 1
 930: EQUAL
 931: IFFALSE 1423
// begin game := false ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_INT 0
 940: ST_TO_ADDR
// your_side := 1 ;
 941: LD_ADDR_OWVAR 2
 945: PUSH
 946: LD_INT 1
 948: ST_TO_ADDR
// mc_amer := 1 ;
 949: LD_ADDR_EXP 5
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// mc_leg := 2 ;
 957: LD_ADDR_EXP 6
 961: PUSH
 962: LD_INT 2
 964: ST_TO_ADDR
// mc_rus_1 := 3 ;
 965: LD_ADDR_EXP 7
 969: PUSH
 970: LD_INT 3
 972: ST_TO_ADDR
// mc_rus_2 := 4 ;
 973: LD_ADDR_EXP 8
 977: PUSH
 978: LD_INT 4
 980: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 981: LD_ADDR_EXP 19
 985: PUSH
 986: LD_INT 5
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 200
 997: PUSH
 998: LD_INT 250
1000: PUSH
1001: LD_INT 300
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 26
1013: ARRAY
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 8
1026: PUSH
1027: LD_INT 50
1029: PUSH
1030: LD_INT 500
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: PUSH
1039: LD_INT 17
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 50
1047: PUSH
1048: LD_INT 300
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 18
1059: PUSH
1060: LD_INT 4
1062: PUSH
1063: LD_INT 5
1065: PUSH
1066: LD_INT 6
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 26
1078: ARRAY
1079: PUSH
1080: LD_INT 30
1082: PUSH
1083: LD_INT 300
1085: PUSH
1086: LD_INT 450
1088: PUSH
1089: LD_INT 500
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 26
1101: ARRAY
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_INT 190
1122: PUSH
1123: LD_INT 193
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 182
1136: PUSH
1137: LD_INT 117
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 43
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 114
1164: PUSH
1165: LD_INT 152
1167: PUSH
1168: LD_INT 2
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 85
1178: PUSH
1179: LD_INT 38
1181: PUSH
1182: LD_INT 2
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// for i in sources do
1197: LD_ADDR_VAR 0 2
1201: PUSH
1202: LD_VAR 0 4
1206: PUSH
1207: FOR_IN
1208: IFFALSE 1243
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1210: LD_VAR 0 2
1214: PUSH
1215: LD_INT 1
1217: ARRAY
1218: PPUSH
1219: LD_VAR 0 2
1223: PUSH
1224: LD_INT 2
1226: ARRAY
1227: PPUSH
1228: LD_VAR 0 2
1232: PUSH
1233: LD_INT 3
1235: ARRAY
1236: PPUSH
1237: CALL_OW 62
1241: GO 1207
1243: POP
1244: POP
// disableGlobalTimer := false ;
1245: LD_ADDR_EXP 4
1249: PUSH
1250: LD_INT 0
1252: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1253: LD_ADDR_EXP 15
1257: PUSH
1258: LD_INT 0
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 7
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PUSH
1275: LD_OWVAR 67
1279: ARRAY
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: ST_TO_ADDR
// ruOutpost := [ ] ;
1285: LD_ADDR_EXP 14
1289: PUSH
1290: EMPTY
1291: ST_TO_ADDR
// staticMines := [ ] ;
1292: LD_ADDR_EXP 16
1296: PUSH
1297: EMPTY
1298: ST_TO_ADDR
// baseCaptured := false ;
1299: LD_ADDR_EXP 17
1303: PUSH
1304: LD_INT 0
1306: ST_TO_ADDR
// legDestCounter := 0 ;
1307: LD_ADDR_EXP 18
1311: PUSH
1312: LD_INT 0
1314: ST_TO_ADDR
// legOfferAccepted := false ;
1315: LD_ADDR_EXP 20
1319: PUSH
1320: LD_INT 0
1322: ST_TO_ADDR
// legChangeSide := false ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: LD_INT 0
1330: ST_TO_ADDR
// allyDestCounter := 0 ;
1331: LD_ADDR_EXP 22
1335: PUSH
1336: LD_INT 0
1338: ST_TO_ADDR
// outpostEscape := false ;
1339: LD_ADDR_EXP 27
1343: PUSH
1344: LD_INT 0
1346: ST_TO_ADDR
// dialogueMineDetected := false ;
1347: LD_ADDR_EXP 28
1351: PUSH
1352: LD_INT 0
1354: ST_TO_ADDR
// PrepareAmericans ;
1355: CALL 7239 0 0
// PrepareLegion ;
1359: CALL 5504 0 0
// PrepareRussians ;
1363: CALL 2470 0 0
// playerForces := PreparePlayer ;
1367: LD_ADDR_EXP 10
1371: PUSH
1372: CALL 8482 0 0
1376: ST_TO_ADDR
// AnimateTrees ( true ) ;
1377: LD_INT 1
1379: PPUSH
1380: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 3
1389: PPUSH
1390: LD_INT 8
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL 53754 0 9
// MC_Start ;
1415: CALL 64058 0 0
// Action ;
1419: CALL 10678 0 0
// end ; end ;
1423: LD_VAR 0 1
1427: RET
// export function CustomInitMacro ; begin
1428: LD_INT 0
1430: PPUSH
// if GameType <> 1 then
1431: LD_EXP 2
1435: PUSH
1436: LD_INT 1
1438: NONEQUAL
1439: IFFALSE 1443
// exit ;
1441: GO 2465
// MC_SetScanArea ( mc_amer , amerBase ) ;
1443: LD_EXP 5
1447: PPUSH
1448: LD_INT 3
1450: PPUSH
1451: CALL 86377 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1455: LD_EXP 5
1459: PPUSH
1460: LD_INT 4
1462: PPUSH
1463: CALL 86321 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1467: LD_EXP 5
1471: PPUSH
1472: LD_INT 11
1474: PUSH
1475: LD_INT 6
1477: PUSH
1478: LD_INT 7
1480: PUSH
1481: LD_INT 9
1483: PUSH
1484: LD_INT 10
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: PPUSH
1494: CALL 86209 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1498: LD_EXP 5
1502: PPUSH
1503: LD_INT 5
1505: PPUSH
1506: CALL 85891 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1510: LD_EXP 5
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL 85622 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1522: LD_EXP 5
1526: PPUSH
1527: LD_INT 4
1529: PPUSH
1530: CALL 85304 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1534: LD_EXP 5
1538: PPUSH
1539: LD_INT 3
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: LD_INT 2
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 3
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 9
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 7
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 6
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL 85119 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1621: LD_EXP 5
1625: PPUSH
1626: LD_INT 33
1628: PUSH
1629: LD_INT 114
1631: PUSH
1632: LD_INT 16
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_INT 32
1646: PUSH
1647: LD_INT 110
1649: PUSH
1650: LD_INT 12
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL 85011 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1670: LD_EXP 5
1674: PPUSH
1675: LD_INT 10
1677: PUSH
1678: LD_INT 15
1680: PUSH
1681: LD_INT 12
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL 85798 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1697: LD_EXP 6
1701: PPUSH
1702: LD_INT 6
1704: PPUSH
1705: CALL 86377 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1709: LD_EXP 6
1713: PPUSH
1714: LD_INT 7
1716: PPUSH
1717: CALL 86321 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1721: LD_EXP 6
1725: PPUSH
1726: LD_INT 30
1728: PUSH
1729: LD_INT 27
1731: PUSH
1732: LD_INT 28
1734: PUSH
1735: LD_INT 25
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PPUSH
1744: CALL 86209 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1748: LD_EXP 6
1752: PPUSH
1753: LD_INT 17
1755: PPUSH
1756: CALL 85891 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1760: LD_EXP 6
1764: PPUSH
1765: LD_INT 6
1767: PPUSH
1768: CALL 85622 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1772: LD_EXP 6
1776: PPUSH
1777: LD_INT 5
1779: PPUSH
1780: CALL 85304 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1784: LD_EXP 6
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 9
1794: PPUSH
1795: CALL 84801 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1799: LD_EXP 6
1803: PPUSH
1804: LD_INT 4
1806: PUSH
1807: LD_INT 157
1809: PUSH
1810: LD_INT 144
1812: PUSH
1813: LD_INT 0
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 32
1824: PUSH
1825: LD_INT 151
1827: PUSH
1828: LD_INT 142
1830: PUSH
1831: LD_INT 0
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 32
1842: PUSH
1843: LD_INT 161
1845: PUSH
1846: LD_INT 145
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 32
1860: PUSH
1861: LD_INT 140
1863: PUSH
1864: LD_INT 133
1866: PUSH
1867: LD_INT 0
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL 85011 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1886: LD_EXP 6
1890: PPUSH
1891: LD_INT 13
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 1
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 13
1911: PUSH
1912: LD_INT 2
1914: PUSH
1915: LD_INT 1
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 13
1929: PUSH
1930: LD_INT 1
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: LD_INT 27
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 13
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: LD_INT 2
1953: PUSH
1954: LD_INT 27
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 13
1965: PUSH
1966: LD_INT 1
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 27
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 13
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 2
1989: PUSH
1990: LD_INT 28
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 13
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 2
2007: PUSH
2008: LD_INT 28
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 13
2019: PUSH
2020: LD_INT 1
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL 85119 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2049: LD_EXP 7
2053: PPUSH
2054: LD_INT 15
2056: PPUSH
2057: CALL 86377 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2061: LD_EXP 7
2065: PPUSH
2066: LD_INT 16
2068: PPUSH
2069: CALL 86321 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2073: LD_EXP 7
2077: PPUSH
2078: LD_INT 43
2080: PUSH
2081: LD_INT 47
2083: PUSH
2084: LD_INT 45
2086: PUSH
2087: LD_INT 49
2089: PUSH
2090: LD_INT 46
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL 86209 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2104: LD_EXP 7
2108: PPUSH
2109: LD_INT 13
2111: PPUSH
2112: CALL 85891 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2116: LD_EXP 7
2120: PPUSH
2121: LD_INT 15
2123: PPUSH
2124: CALL 85622 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2128: LD_EXP 7
2132: PPUSH
2133: LD_INT 5
2135: PPUSH
2136: CALL 85304 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2140: LD_EXP 7
2144: PPUSH
2145: LD_INT 23
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 3
2153: PUSH
2154: LD_INT 46
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 23
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 46
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 23
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: LD_INT 45
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 23
2201: PUSH
2202: LD_INT 1
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 47
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 21
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: LD_INT 51
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL 85119 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2246: LD_EXP 8
2250: PPUSH
2251: LD_INT 11
2253: PPUSH
2254: CALL 86377 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2258: LD_EXP 8
2262: PPUSH
2263: LD_INT 12
2265: PPUSH
2266: CALL 86321 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2270: LD_EXP 8
2274: PPUSH
2275: LD_INT 43
2277: PUSH
2278: LD_INT 47
2280: PUSH
2281: LD_INT 45
2283: PUSH
2284: LD_INT 49
2286: PUSH
2287: LD_INT 46
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 86209 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 13
2308: PPUSH
2309: CALL 85891 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 11
2320: PPUSH
2321: CALL 85622 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL 85304 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2337: LD_EXP 8
2341: PPUSH
2342: LD_INT 115
2344: PUSH
2345: LD_INT 201
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: PPUSH
2355: CALL 85947 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2359: LD_EXP 8
2363: PPUSH
2364: LD_INT 24
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: LD_INT 46
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 24
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: LD_INT 46
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 24
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 3
2408: PUSH
2409: LD_INT 46
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 24
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 3
2426: PUSH
2427: LD_INT 46
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 24
2438: PUSH
2439: LD_INT 3
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: LD_INT 46
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: PPUSH
2461: CALL 85119 0 2
// end ;
2465: LD_VAR 0 1
2469: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2470: LD_INT 0
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2480: LD_INT 0
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: LD_INT 3
2488: PPUSH
2489: LD_INT 0
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: LD_INT 14
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL 53754 0 9
// side := 3 ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2519: LD_INT 38
2521: PPUSH
2522: LD_VAR 0 5
2526: PPUSH
2527: LD_INT 2
2529: PPUSH
2530: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2534: LD_INT 39
2536: PPUSH
2537: LD_VAR 0 5
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2549: LD_INT 34
2551: PPUSH
2552: LD_VAR 0 5
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2564: LD_ADDR_VAR 0 4
2568: PUSH
2569: LD_INT 0
2571: PUSH
2572: LD_INT 208
2574: PUSH
2575: LD_INT 163
2577: PUSH
2578: LD_INT 4
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 194
2600: PUSH
2601: LD_INT 161
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: LD_INT 0
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 17
2623: PUSH
2624: LD_INT 190
2626: PUSH
2627: LD_INT 161
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: LD_INT 0
2635: PUSH
2636: LD_INT 0
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: LD_INT 200
2652: PUSH
2653: LD_INT 145
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 0
2661: PUSH
2662: LD_INT 0
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 32
2675: PUSH
2676: LD_INT 192
2678: PUSH
2679: LD_INT 144
2681: PUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 0
2687: PUSH
2688: LD_INT 0
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 26
2701: PUSH
2702: LD_INT 216
2704: PUSH
2705: LD_INT 172
2707: PUSH
2708: LD_INT 3
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: LD_INT 0
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 26
2727: PUSH
2728: LD_INT 218
2730: PUSH
2731: LD_INT 176
2733: PUSH
2734: LD_INT 3
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 0
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 29
2753: PUSH
2754: LD_INT 182
2756: PUSH
2757: LD_INT 149
2759: PUSH
2760: LD_INT 3
2762: PUSH
2763: LD_INT 0
2765: PUSH
2766: LD_INT 0
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 8
2779: PUSH
2780: LD_INT 201
2782: PUSH
2783: LD_INT 171
2785: PUSH
2786: LD_INT 0
2788: PUSH
2789: LD_INT 10
2791: PUSH
2792: LD_INT 11
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 32
2805: PUSH
2806: LD_INT 188
2808: PUSH
2809: LD_INT 167
2811: PUSH
2812: LD_INT 0
2814: PUSH
2815: LD_INT 0
2817: PUSH
2818: LD_INT 0
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 32
2831: PUSH
2832: LD_INT 202
2834: PUSH
2835: LD_INT 179
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 32
2857: PUSH
2858: LD_INT 209
2860: PUSH
2861: LD_INT 182
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: LD_INT 0
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 32
2883: PUSH
2884: LD_INT 220
2886: PUSH
2887: LD_INT 183
2889: PUSH
2890: LD_INT 5
2892: PUSH
2893: LD_INT 0
2895: PUSH
2896: LD_INT 0
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 32
2909: PUSH
2910: LD_INT 225
2912: PUSH
2913: LD_INT 181
2915: PUSH
2916: LD_INT 5
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: LD_INT 0
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 26
2935: PUSH
2936: LD_INT 220
2938: PUSH
2939: LD_INT 174
2941: PUSH
2942: LD_INT 5
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: LD_INT 0
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: LD_INT 84
2964: PUSH
2965: LD_INT 128
2967: PUSH
2968: LD_INT 4
2970: PUSH
2971: LD_INT 0
2973: PUSH
2974: LD_INT 0
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 3
2987: PUSH
2988: LD_INT 68
2990: PUSH
2991: LD_INT 121
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 0
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 19
3013: PUSH
3014: LD_INT 72
3016: PUSH
3017: LD_INT 125
3019: PUSH
3020: LD_INT 5
3022: PUSH
3023: LD_INT 0
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 18
3039: PUSH
3040: LD_INT 68
3042: PUSH
3043: LD_INT 124
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: LD_INT 0
3051: PUSH
3052: LD_INT 0
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 24
3065: PUSH
3066: LD_INT 64
3068: PUSH
3069: LD_INT 121
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: LD_INT 0
3077: PUSH
3078: LD_INT 0
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 17
3091: PUSH
3092: LD_INT 65
3094: PUSH
3095: LD_INT 118
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 0
3103: PUSH
3104: LD_INT 0
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: PUSH
3115: LD_INT 21
3117: PUSH
3118: LD_INT 68
3120: PUSH
3121: LD_INT 117
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 0
3129: PUSH
3130: LD_INT 0
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 8
3143: PUSH
3144: LD_INT 68
3146: PUSH
3147: LD_INT 130
3149: PUSH
3150: LD_INT 1
3152: PUSH
3153: LD_INT 14
3155: PUSH
3156: LD_INT 10
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 8
3169: PUSH
3170: LD_INT 67
3172: PUSH
3173: LD_INT 110
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: LD_INT 11
3181: PUSH
3182: LD_INT 12
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 28
3195: PUSH
3196: LD_INT 85
3198: PUSH
3199: LD_INT 108
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 0
3207: PUSH
3208: LD_INT 0
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 28
3221: PUSH
3222: LD_INT 85
3224: PUSH
3225: LD_INT 124
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 0
3233: PUSH
3234: LD_INT 0
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 97
3250: PUSH
3251: LD_INT 119
3253: PUSH
3254: LD_INT 2
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 0
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 5
3273: PUSH
3274: LD_INT 111
3276: PUSH
3277: LD_INT 138
3279: PUSH
3280: LD_INT 4
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 33
3299: PUSH
3300: LD_INT 104
3302: PUSH
3303: LD_INT 130
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 0
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 33
3325: PUSH
3326: LD_INT 110
3328: PUSH
3329: LD_INT 142
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 0
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 33
3351: PUSH
3352: LD_INT 91
3354: PUSH
3355: LD_INT 131
3357: PUSH
3358: LD_INT 5
3360: PUSH
3361: LD_INT 0
3363: PUSH
3364: LD_INT 0
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 33
3377: PUSH
3378: LD_INT 107
3380: PUSH
3381: LD_INT 157
3383: PUSH
3384: LD_INT 5
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: LD_INT 0
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 33
3403: PUSH
3404: LD_INT 104
3406: PUSH
3407: LD_INT 160
3409: PUSH
3410: LD_INT 5
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: LD_INT 0
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 33
3429: PUSH
3430: LD_INT 101
3432: PUSH
3433: LD_INT 162
3435: PUSH
3436: LD_INT 5
3438: PUSH
3439: LD_INT 0
3441: PUSH
3442: LD_INT 0
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 32
3455: PUSH
3456: LD_INT 87
3458: PUSH
3459: LD_INT 157
3461: PUSH
3462: LD_INT 5
3464: PUSH
3465: LD_INT 0
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: LD_INT 32
3481: PUSH
3482: LD_INT 105
3484: PUSH
3485: LD_INT 158
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: LD_INT 0
3493: PUSH
3494: LD_INT 0
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 33
3507: PUSH
3508: LD_INT 91
3510: PUSH
3511: LD_INT 118
3513: PUSH
3514: LD_INT 4
3516: PUSH
3517: LD_INT 0
3519: PUSH
3520: LD_INT 0
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 33
3533: PUSH
3534: LD_INT 89
3536: PUSH
3537: LD_INT 107
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: LD_INT 0
3545: PUSH
3546: LD_INT 0
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 5
3559: PUSH
3560: LD_INT 86
3562: PUSH
3563: LD_INT 96
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 0
3571: PUSH
3572: LD_INT 0
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 33
3585: PUSH
3586: LD_INT 91
3588: PUSH
3589: LD_INT 102
3591: PUSH
3592: LD_INT 4
3594: PUSH
3595: LD_INT 0
3597: PUSH
3598: LD_INT 0
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 32
3611: PUSH
3612: LD_INT 80
3614: PUSH
3615: LD_INT 95
3617: PUSH
3618: LD_INT 3
3620: PUSH
3621: LD_INT 0
3623: PUSH
3624: LD_INT 0
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 28
3637: PUSH
3638: LD_INT 77
3640: PUSH
3641: LD_INT 105
3643: PUSH
3644: LD_INT 3
3646: PUSH
3647: LD_INT 0
3649: PUSH
3650: LD_INT 0
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 28
3663: PUSH
3664: LD_INT 85
3666: PUSH
3667: LD_INT 113
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: LD_INT 0
3675: PUSH
3676: LD_INT 0
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 28
3689: PUSH
3690: LD_INT 55
3692: PUSH
3693: LD_INT 97
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: LD_INT 0
3701: PUSH
3702: LD_INT 0
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 28
3715: PUSH
3716: LD_INT 88
3718: PUSH
3719: LD_INT 128
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 0
3727: PUSH
3728: LD_INT 0
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: LD_INT 69
3744: PUSH
3745: LD_INT 101
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 0
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 1
3767: PUSH
3768: LD_INT 34
3770: PUSH
3771: LD_INT 23
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 0
3779: PUSH
3780: LD_INT 0
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 8
3793: PUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: LD_INT 11
3805: PUSH
3806: LD_INT 10
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: LD_INT 15
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 14
3831: PUSH
3832: LD_INT 12
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 29
3845: PUSH
3846: LD_INT 55
3848: PUSH
3849: LD_INT 35
3851: PUSH
3852: LD_INT 2
3854: PUSH
3855: LD_INT 0
3857: PUSH
3858: LD_INT 0
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 29
3871: PUSH
3872: LD_INT 24
3874: PUSH
3875: LD_INT 44
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 0
3883: PUSH
3884: LD_INT 0
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 34
3897: PUSH
3898: LD_INT 34
3900: PUSH
3901: LD_INT 32
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 0
3909: PUSH
3910: LD_INT 0
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 3
3923: PUSH
3924: LD_INT 14
3926: PUSH
3927: LD_INT 16
3929: PUSH
3930: LD_INT 1
3932: PUSH
3933: LD_INT 0
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: PUSH
3947: LD_INT 24
3949: PUSH
3950: LD_INT 10
3952: PUSH
3953: LD_INT 16
3955: PUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 0
3961: PUSH
3962: LD_INT 0
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 11
3978: PUSH
3979: LD_INT 13
3981: PUSH
3982: LD_INT 2
3984: PUSH
3985: LD_INT 0
3987: PUSH
3988: LD_INT 0
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 18
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 12
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 0
4013: PUSH
4014: LD_INT 0
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 16
4027: PUSH
4028: LD_INT 14
4030: PUSH
4031: LD_INT 19
4033: PUSH
4034: LD_INT 0
4036: PUSH
4037: LD_INT 0
4039: PUSH
4040: LD_INT 0
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 17
4053: PUSH
4054: LD_INT 18
4056: PUSH
4057: LD_INT 20
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 28
4079: PUSH
4080: LD_INT 10
4082: PUSH
4083: LD_INT 5
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: LD_INT 0
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 28
4105: PUSH
4106: LD_INT 8
4108: PUSH
4109: LD_INT 8
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 0
4117: PUSH
4118: LD_INT 0
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_INT 26
4131: PUSH
4132: LD_INT 19
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: LD_INT 0
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 26
4157: PUSH
4158: LD_INT 30
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: LD_INT 1
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 5
4183: PUSH
4184: LD_INT 59
4186: PUSH
4187: LD_INT 20
4189: PUSH
4190: LD_INT 4
4192: PUSH
4193: LD_INT 0
4195: PUSH
4196: LD_INT 0
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 32
4209: PUSH
4210: LD_INT 60
4212: PUSH
4213: LD_INT 24
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: LD_INT 0
4221: PUSH
4222: LD_INT 0
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 32
4235: PUSH
4236: LD_INT 61
4238: PUSH
4239: LD_INT 45
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 32
4261: PUSH
4262: LD_INT 52
4264: PUSH
4265: LD_INT 51
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: LD_INT 0
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 56
4290: PUSH
4291: LD_INT 51
4293: PUSH
4294: LD_INT 5
4296: PUSH
4297: LD_INT 0
4299: PUSH
4300: LD_INT 0
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 33
4313: PUSH
4314: LD_INT 62
4316: PUSH
4317: LD_INT 49
4319: PUSH
4320: LD_INT 5
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 33
4339: PUSH
4340: LD_INT 41
4342: PUSH
4343: LD_INT 47
4345: PUSH
4346: LD_INT 5
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 33
4365: PUSH
4366: LD_INT 33
4368: PUSH
4369: LD_INT 52
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: LD_INT 0
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 5
4391: PUSH
4392: LD_INT 31
4394: PUSH
4395: LD_INT 40
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: LD_INT 0
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 33
4417: PUSH
4418: LD_INT 65
4420: PUSH
4421: LD_INT 37
4423: PUSH
4424: LD_INT 5
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 33
4443: PUSH
4444: LD_INT 63
4446: PUSH
4447: LD_INT 29
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 0
4455: PUSH
4456: LD_INT 0
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 33
4469: PUSH
4470: LD_INT 54
4472: PUSH
4473: LD_INT 11
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: LD_INT 0
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 33
4495: PUSH
4496: LD_INT 56
4498: PUSH
4499: LD_INT 15
4501: PUSH
4502: LD_INT 4
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 33
4521: PUSH
4522: LD_INT 51
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 4
4530: PUSH
4531: LD_INT 0
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 26
4547: PUSH
4548: LD_INT 39
4550: PUSH
4551: LD_INT 25
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 26
4573: PUSH
4574: LD_INT 37
4576: PUSH
4577: LD_INT 21
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 0
4585: PUSH
4586: LD_INT 0
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 35
4602: PUSH
4603: LD_INT 17
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: LD_INT 0
4611: PUSH
4612: LD_INT 0
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: PUSH
4623: LD_INT 33
4625: PUSH
4626: LD_INT 35
4628: PUSH
4629: LD_INT 28
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: LD_INT 0
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 33
4651: PUSH
4652: LD_INT 28
4654: PUSH
4655: LD_INT 46
4657: PUSH
4658: LD_INT 5
4660: PUSH
4661: LD_INT 0
4663: PUSH
4664: LD_INT 0
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 33
4677: PUSH
4678: LD_INT 31
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 4
4686: PUSH
4687: LD_INT 0
4689: PUSH
4690: LD_INT 0
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 26
4703: PUSH
4704: LD_INT 54
4706: PUSH
4707: LD_INT 38
4709: PUSH
4710: LD_INT 4
4712: PUSH
4713: LD_INT 0
4715: PUSH
4716: LD_INT 0
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 33
4729: PUSH
4730: LD_INT 207
4732: PUSH
4733: LD_INT 167
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 0
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 43
4758: PUSH
4759: LD_INT 2
4761: PUSH
4762: LD_INT 4
4764: PUSH
4765: LD_INT 0
4767: PUSH
4768: LD_INT 0
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: ST_TO_ADDR
// for i in tmp do
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_VAR 0 4
4875: PUSH
4876: FOR_IN
4877: IFFALSE 5108
// begin uc_side := side ;
4879: LD_ADDR_OWVAR 20
4883: PUSH
4884: LD_VAR 0 5
4888: ST_TO_ADDR
// uc_nation := nation_russian ;
4889: LD_ADDR_OWVAR 21
4893: PUSH
4894: LD_INT 3
4896: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4897: LD_ADDR_OWVAR 42
4901: PUSH
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4911: LD_ADDR_OWVAR 43
4915: PUSH
4916: LD_INT 5
4918: PPUSH
4919: LD_INT 6
4921: PPUSH
4922: CALL_OW 12
4926: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4927: LD_ADDR_OWVAR 44
4931: PUSH
4932: LD_VAR 0 2
4936: PUSH
4937: LD_INT 5
4939: ARRAY
4940: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4941: LD_ADDR_OWVAR 45
4945: PUSH
4946: LD_VAR 0 2
4950: PUSH
4951: LD_INT 6
4953: ARRAY
4954: ST_TO_ADDR
// sr := 0 ;
4955: LD_ADDR_VAR 0 6
4959: PUSH
4960: LD_INT 0
4962: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PUSH
4972: LD_INT 29
4974: EQUAL
4975: IFFALSE 4987
// sr := mat_oil else
4977: LD_ADDR_VAR 0 6
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
4985: GO 5009
// if i [ 1 ] = b_siberite_mine then
4987: LD_VAR 0 2
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 30
4998: EQUAL
4999: IFFALSE 5009
// sr := mat_siberit ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_INT 3
5008: ST_TO_ADDR
// if sr then
5009: LD_VAR 0 6
5013: IFFALSE 5069
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 2
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 2
5028: PUSH
5029: LD_INT 3
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5042: LD_VAR 0 2
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PPUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 3
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 5
5064: PPUSH
5065: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 2
5081: ARRAY
5082: PPUSH
5083: LD_VAR 0 2
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_VAR 0 2
5096: PUSH
5097: LD_INT 4
5099: ARRAY
5100: PPUSH
5101: CALL_OW 47
5105: ST_TO_ADDR
// end ;
5106: GO 4876
5108: POP
5109: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5110: LD_ADDR_VAR 0 7
5114: PUSH
5115: LD_INT 22
5117: PUSH
5118: LD_VAR 0 5
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 30
5129: PUSH
5130: LD_INT 1
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PPUSH
5141: CALL_OW 69
5145: ST_TO_ADDR
// if not depot then
5146: LD_VAR 0 7
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5499
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5155: LD_ADDR_VAR 0 8
5159: PUSH
5160: LD_INT 84
5162: PPUSH
5163: LD_INT 128
5165: PPUSH
5166: CALL_OW 428
5170: PPUSH
5171: LD_INT 15
5173: PPUSH
5174: LD_INT 0
5176: PPUSH
5177: LD_INT 6
5179: PUSH
5180: LD_INT 7
5182: PUSH
5183: LD_INT 8
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_OWVAR 67
5195: ARRAY
5196: PPUSH
5197: LD_INT 3000
5199: PUSH
5200: LD_INT 300
5202: PUSH
5203: LD_INT 100
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: PPUSH
5211: LD_INT 12
5213: PUSH
5214: LD_INT 6
5216: PUSH
5217: LD_INT 6
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL 29355 0 6
5233: ST_TO_ADDR
// if not base then
5234: LD_VAR 0 8
5238: NOT
5239: IFFALSE 5243
// exit ;
5241: GO 5499
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5243: LD_ADDR_EXP 36
5247: PUSH
5248: LD_EXP 36
5252: PPUSH
5253: LD_EXP 7
5257: PPUSH
5258: LD_VAR 0 8
5262: PPUSH
5263: CALL_OW 1
5267: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5268: LD_ADDR_VAR 0 8
5272: PUSH
5273: LD_INT 34
5275: PPUSH
5276: LD_INT 23
5278: PPUSH
5279: CALL_OW 428
5283: PPUSH
5284: LD_INT 11
5286: PPUSH
5287: LD_INT 0
5289: PPUSH
5290: LD_INT 6
5292: PUSH
5293: LD_INT 7
5295: PUSH
5296: LD_INT 8
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: PUSH
5304: LD_OWVAR 67
5308: ARRAY
5309: PPUSH
5310: LD_INT 20000
5312: PUSH
5313: LD_INT 3000
5315: PUSH
5316: LD_INT 1000
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: LD_INT 12
5326: PUSH
5327: LD_INT 6
5329: PUSH
5330: LD_INT 6
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: PPUSH
5342: CALL 29355 0 6
5346: ST_TO_ADDR
// if not base then
5347: LD_VAR 0 8
5351: NOT
5352: IFFALSE 5356
// exit ;
5354: GO 5499
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5356: LD_ADDR_EXP 36
5360: PUSH
5361: LD_EXP 36
5365: PPUSH
5366: LD_EXP 8
5370: PPUSH
5371: LD_VAR 0 8
5375: PPUSH
5376: CALL_OW 1
5380: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5381: LD_ADDR_EXP 14
5385: PUSH
5386: LD_INT 22
5388: PUSH
5389: LD_INT 3
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 30
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 69
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 25
5421: PPUSH
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 6
5427: PUSH
5428: LD_INT 7
5430: PUSH
5431: LD_INT 8
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: LD_OWVAR 67
5443: ARRAY
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 100
5450: PUSH
5451: LD_INT 10
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 6
5461: PUSH
5462: LD_INT 7
5464: PUSH
5465: LD_INT 8
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_OWVAR 67
5477: ARRAY
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: LD_INT 0
5484: PUSH
5485: LD_INT 1
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL 29355 0 6
5498: ST_TO_ADDR
// end ;
5499: LD_VAR 0 1
5503: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5504: LD_INT 0
5506: PPUSH
5507: PPUSH
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5517: LD_INT 0
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: LD_INT 6
5525: PPUSH
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: LD_INT 0
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: LD_INT 8
5540: PPUSH
5541: LD_INT 0
5543: PPUSH
5544: CALL 53754 0 9
// side := 8 ;
5548: LD_ADDR_VAR 0 8
5552: PUSH
5553: LD_INT 8
5555: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5556: LD_ADDR_VAR 0 5
5560: PUSH
5561: LD_INT 20
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 517
5571: ST_TO_ADDR
// if Difficulty > 2 then
5572: LD_OWVAR 67
5576: PUSH
5577: LD_INT 2
5579: GREATER
5580: IFFALSE 5724
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5582: LD_ADDR_VAR 0 6
5586: PUSH
5587: LD_INT 27
5589: PPUSH
5590: LD_INT 0
5592: PPUSH
5593: CALL_OW 517
5597: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 6
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5722
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5620: LD_ADDR_VAR 0 5
5624: PUSH
5625: LD_VAR 0 5
5629: PPUSH
5630: LD_INT 1
5632: PUSH
5633: LD_VAR 0 5
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PUSH
5642: LD_INT 1
5644: PLUS
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PPUSH
5650: LD_VAR 0 6
5654: PUSH
5655: LD_INT 1
5657: ARRAY
5658: PUSH
5659: LD_VAR 0 2
5663: ARRAY
5664: PPUSH
5665: CALL 26068 0 3
5669: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5670: LD_ADDR_VAR 0 5
5674: PUSH
5675: LD_VAR 0 5
5679: PPUSH
5680: LD_INT 2
5682: PUSH
5683: LD_VAR 0 5
5687: PUSH
5688: LD_INT 2
5690: ARRAY
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PPUSH
5700: LD_VAR 0 6
5704: PUSH
5705: LD_INT 2
5707: ARRAY
5708: PUSH
5709: LD_VAR 0 2
5713: ARRAY
5714: PPUSH
5715: CALL 26068 0 3
5719: ST_TO_ADDR
// end ;
5720: GO 5617
5722: POP
5723: POP
// end ; if tmp then
5724: LD_VAR 0 5
5728: IFFALSE 5856
// begin for i = 1 to tmp [ 1 ] do
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: DOUBLE
5736: LD_INT 1
5738: DEC
5739: ST_TO_ADDR
5740: LD_VAR 0 5
5744: PUSH
5745: LD_INT 1
5747: ARRAY
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5854
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 2
5765: ARRAY
5766: PPUSH
5767: LD_VAR 0 5
5771: PUSH
5772: LD_INT 2
5774: ARRAY
5775: PUSH
5776: LD_VAR 0 2
5780: ARRAY
5781: PPUSH
5782: LD_VAR 0 8
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5794: LD_ADDR_EXP 16
5798: PUSH
5799: LD_EXP 16
5803: PPUSH
5804: LD_EXP 16
5808: PUSH
5809: LD_INT 1
5811: PLUS
5812: PPUSH
5813: LD_VAR 0 5
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PUSH
5822: LD_VAR 0 2
5826: ARRAY
5827: PUSH
5828: LD_VAR 0 5
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PUSH
5837: LD_VAR 0 2
5841: ARRAY
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 2
5851: ST_TO_ADDR
// end ;
5852: GO 5749
5854: POP
5855: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5856: LD_ADDR_VAR 0 7
5860: PUSH
5861: LD_INT 165
5863: PUSH
5864: LD_INT 156
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 143
5873: PUSH
5874: LD_INT 145
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 152
5883: PUSH
5884: LD_INT 165
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 123
5893: PUSH
5894: LD_INT 153
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 161
5903: PUSH
5904: LD_INT 215
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 172
5913: PUSH
5914: LD_INT 100
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: LD_INT 148
5923: PUSH
5924: LD_INT 83
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: LD_INT 122
5933: PUSH
5934: LD_INT 68
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 105
5943: PUSH
5944: LD_INT 74
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 113
5953: PUSH
5954: LD_INT 97
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: ST_TO_ADDR
// for i in cameras do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: LD_VAR 0 7
5982: PUSH
5983: FOR_IN
5984: IFFALSE 6015
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5986: LD_VAR 0 2
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: LD_VAR 0 2
5999: PUSH
6000: LD_INT 2
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 8
6008: PPUSH
6009: CALL_OW 244
6013: GO 5983
6015: POP
6016: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6017: LD_ADDR_VAR 0 5
6021: PUSH
6022: LD_INT 1
6024: PUSH
6025: LD_INT 144
6027: PUSH
6028: LD_INT 110
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: LD_INT 0
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: LD_INT 151
6053: PUSH
6054: LD_INT 118
6056: PUSH
6057: LD_INT 0
6059: PUSH
6060: LD_INT 0
6062: PUSH
6063: LD_INT 0
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 8
6076: PUSH
6077: LD_INT 158
6079: PUSH
6080: LD_INT 110
6082: PUSH
6083: LD_INT 4
6085: PUSH
6086: LD_INT 10
6088: PUSH
6089: LD_INT 15
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 23
6102: PUSH
6103: LD_INT 154
6105: PUSH
6106: LD_INT 121
6108: PUSH
6109: LD_INT 5
6111: PUSH
6112: LD_INT 0
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 20
6128: PUSH
6129: LD_INT 155
6131: PUSH
6132: LD_INT 118
6134: PUSH
6135: LD_INT 4
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 21
6154: PUSH
6155: LD_INT 151
6157: PUSH
6158: LD_INT 122
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 18
6180: PUSH
6181: LD_INT 148
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 17
6206: PUSH
6207: LD_INT 147
6209: PUSH
6210: LD_INT 114
6212: PUSH
6213: LD_INT 2
6215: PUSH
6216: LD_INT 0
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 29
6232: PUSH
6233: LD_INT 163
6235: PUSH
6236: LD_INT 120
6238: PUSH
6239: LD_INT 5
6241: PUSH
6242: LD_INT 0
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 27
6258: PUSH
6259: LD_INT 137
6261: PUSH
6262: LD_INT 116
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 27
6284: PUSH
6285: LD_INT 133
6287: PUSH
6288: LD_INT 111
6290: PUSH
6291: LD_INT 1
6293: PUSH
6294: LD_INT 0
6296: PUSH
6297: LD_INT 0
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 27
6310: PUSH
6311: LD_INT 132
6313: PUSH
6314: LD_INT 106
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 26
6336: PUSH
6337: LD_INT 137
6339: PUSH
6340: LD_INT 111
6342: PUSH
6343: LD_INT 0
6345: PUSH
6346: LD_INT 0
6348: PUSH
6349: LD_INT 0
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 8
6362: PUSH
6363: LD_INT 141
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 1
6371: PUSH
6372: LD_INT 13
6374: PUSH
6375: LD_INT 11
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 30
6388: PUSH
6389: LD_INT 140
6391: PUSH
6392: LD_INT 128
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 0
6400: PUSH
6401: LD_INT 0
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 5
6414: PUSH
6415: LD_INT 146
6417: PUSH
6418: LD_INT 96
6420: PUSH
6421: LD_INT 3
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 32
6440: PUSH
6441: LD_INT 150
6443: PUSH
6444: LD_INT 98
6446: PUSH
6447: LD_INT 3
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 32
6466: PUSH
6467: LD_INT 142
6469: PUSH
6470: LD_INT 95
6472: PUSH
6473: LD_INT 3
6475: PUSH
6476: LD_INT 0
6478: PUSH
6479: LD_INT 0
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 32
6492: PUSH
6493: LD_INT 159
6495: PUSH
6496: LD_INT 104
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 0
6504: PUSH
6505: LD_INT 0
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 32
6518: PUSH
6519: LD_INT 133
6521: PUSH
6522: LD_INT 95
6524: PUSH
6525: LD_INT 3
6527: PUSH
6528: LD_INT 0
6530: PUSH
6531: LD_INT 0
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 32
6544: PUSH
6545: LD_INT 131
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: LD_INT 0
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 32
6570: PUSH
6571: LD_INT 164
6573: PUSH
6574: LD_INT 144
6576: PUSH
6577: LD_INT 0
6579: PUSH
6580: LD_INT 0
6582: PUSH
6583: LD_INT 0
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 32
6596: PUSH
6597: LD_INT 146
6599: PUSH
6600: LD_INT 139
6602: PUSH
6603: LD_INT 0
6605: PUSH
6606: LD_INT 0
6608: PUSH
6609: LD_INT 0
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 26
6622: PUSH
6623: LD_INT 143
6625: PUSH
6626: LD_INT 122
6628: PUSH
6629: LD_INT 4
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 26
6648: PUSH
6649: LD_INT 164
6651: PUSH
6652: LD_INT 116
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 0
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: ST_TO_ADDR
// for i in tmp do
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_VAR 0 5
6708: PUSH
6709: FOR_IN
6710: IFFALSE 6941
// begin uc_side := side ;
6712: LD_ADDR_OWVAR 20
6716: PUSH
6717: LD_VAR 0 8
6721: ST_TO_ADDR
// uc_nation := nation_arabian ;
6722: LD_ADDR_OWVAR 21
6726: PUSH
6727: LD_INT 2
6729: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6730: LD_ADDR_OWVAR 42
6734: PUSH
6735: LD_VAR 0 2
6739: PUSH
6740: LD_INT 1
6742: ARRAY
6743: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6744: LD_ADDR_OWVAR 43
6748: PUSH
6749: LD_INT 5
6751: PPUSH
6752: LD_INT 6
6754: PPUSH
6755: CALL_OW 12
6759: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6760: LD_ADDR_OWVAR 44
6764: PUSH
6765: LD_VAR 0 2
6769: PUSH
6770: LD_INT 5
6772: ARRAY
6773: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6774: LD_ADDR_OWVAR 45
6778: PUSH
6779: LD_VAR 0 2
6783: PUSH
6784: LD_INT 6
6786: ARRAY
6787: ST_TO_ADDR
// sr := 0 ;
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6796: LD_VAR 0 2
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PUSH
6805: LD_INT 29
6807: EQUAL
6808: IFFALSE 6820
// sr := mat_oil else
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: LD_INT 2
6817: ST_TO_ADDR
6818: GO 6842
// if i [ 1 ] = b_siberite_mine then
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 1
6827: ARRAY
6828: PUSH
6829: LD_INT 30
6831: EQUAL
6832: IFFALSE 6842
// sr := mat_siberit ;
6834: LD_ADDR_VAR 0 9
6838: PUSH
6839: LD_INT 3
6841: ST_TO_ADDR
// if sr then
6842: LD_VAR 0 9
6846: IFFALSE 6902
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6848: LD_VAR 0 2
6852: PUSH
6853: LD_INT 2
6855: ARRAY
6856: PPUSH
6857: LD_VAR 0 2
6861: PUSH
6862: LD_INT 3
6864: ARRAY
6865: PPUSH
6866: LD_VAR 0 9
6870: PPUSH
6871: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6875: LD_VAR 0 2
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 3
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 8
6897: PPUSH
6898: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 2
6920: PUSH
6921: LD_INT 3
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 2
6929: PUSH
6930: LD_INT 4
6932: ARRAY
6933: PPUSH
6934: CALL_OW 47
6938: ST_TO_ADDR
// end ;
6939: GO 6709
6941: POP
6942: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6943: LD_ADDR_VAR 0 10
6947: PUSH
6948: LD_INT 22
6950: PUSH
6951: LD_VAR 0 8
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: ST_TO_ADDR
// if not depot then
6979: LD_VAR 0 10
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7234
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6988: LD_ADDR_VAR 0 11
6992: PUSH
6993: LD_VAR 0 10
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_INT 6
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: LD_INT 7
7010: PUSH
7011: LD_INT 8
7013: PUSH
7014: LD_INT 10
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: ARRAY
7027: PPUSH
7028: LD_INT 3000
7030: PUSH
7031: LD_INT 300
7033: PUSH
7034: LD_INT 100
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: PPUSH
7042: LD_INT 14
7044: PUSH
7045: LD_INT 6
7047: PUSH
7048: LD_INT 6
7050: PUSH
7051: LD_INT 5
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL 29355 0 6
7064: ST_TO_ADDR
// if not base then
7065: LD_VAR 0 11
7069: NOT
7070: IFFALSE 7074
// exit ;
7072: GO 7234
// if Difficulty > 1 then
7074: LD_OWVAR 67
7078: PUSH
7079: LD_INT 1
7081: GREATER
7082: IFFALSE 7155
// begin InitHc ;
7084: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7088: LD_INT 1
7090: PPUSH
7091: LD_INT 5
7093: PPUSH
7094: LD_INT 5
7096: PUSH
7097: LD_INT 8
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_OWVAR 67
7108: PUSH
7109: LD_INT 1
7111: MINUS
7112: ARRAY
7113: PPUSH
7114: CALL_OW 380
// for i = 1 to Difficulty do
7118: LD_ADDR_VAR 0 2
7122: PUSH
7123: DOUBLE
7124: LD_INT 1
7126: DEC
7127: ST_TO_ADDR
7128: LD_OWVAR 67
7132: PUSH
7133: FOR_TO
7134: IFFALSE 7153
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7136: CALL_OW 44
7140: PPUSH
7141: LD_INT 24
7143: PPUSH
7144: LD_INT 0
7146: PPUSH
7147: CALL_OW 49
7151: GO 7133
7153: POP
7154: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7155: LD_ADDR_EXP 36
7159: PUSH
7160: LD_EXP 36
7164: PPUSH
7165: LD_EXP 6
7169: PPUSH
7170: LD_VAR 0 11
7174: PPUSH
7175: CALL_OW 1
7179: ST_TO_ADDR
// hc_gallery := ru ;
7180: LD_ADDR_OWVAR 33
7184: PUSH
7185: LD_STRING ru
7187: ST_TO_ADDR
// hc_face_number := 44 ;
7188: LD_ADDR_OWVAR 34
7192: PUSH
7193: LD_INT 44
7195: ST_TO_ADDR
// hc_name := Robert Farmer ;
7196: LD_ADDR_OWVAR 26
7200: PUSH
7201: LD_STRING Robert Farmer
7203: ST_TO_ADDR
// hc_sex := sex_male ;
7204: LD_ADDR_OWVAR 27
7208: PUSH
7209: LD_INT 1
7211: ST_TO_ADDR
// hc_class := 1 ;
7212: LD_ADDR_OWVAR 28
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
// Farmer := CreateHuman ;
7220: LD_ADDR_EXP 13
7224: PUSH
7225: CALL_OW 44
7229: ST_TO_ADDR
// InitHc ;
7230: CALL_OW 19
// end ;
7234: LD_VAR 0 1
7238: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7239: LD_INT 0
7241: PPUSH
7242: PPUSH
7243: PPUSH
7244: PPUSH
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7249: LD_INT 0
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 4
7257: PPUSH
7258: LD_INT 0
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: LD_INT 0
7269: PPUSH
7270: LD_INT 10
7272: PPUSH
7273: LD_INT 0
7275: PPUSH
7276: CALL 53754 0 9
// side := 4 ;
7280: LD_ADDR_VAR 0 5
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7288: LD_ADDR_VAR 0 4
7292: PUSH
7293: LD_INT 1
7295: PUSH
7296: LD_INT 144
7298: PUSH
7299: LD_INT 18
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 0
7307: PUSH
7308: LD_INT 0
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 137
7324: PUSH
7325: LD_INT 8
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 0
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 20
7347: PUSH
7348: LD_INT 141
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 0
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 25
7373: PUSH
7374: LD_INT 137
7376: PUSH
7377: LD_INT 5
7379: PUSH
7380: LD_INT 3
7382: PUSH
7383: LD_INT 0
7385: PUSH
7386: LD_INT 0
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 18
7399: PUSH
7400: LD_INT 137
7402: PUSH
7403: LD_INT 12
7405: PUSH
7406: LD_INT 0
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: LD_INT 0
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 17
7425: PUSH
7426: LD_INT 133
7428: PUSH
7429: LD_INT 4
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 16
7451: PUSH
7452: LD_INT 140
7454: PUSH
7455: LD_INT 11
7457: PUSH
7458: LD_INT 5
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 8
7477: PUSH
7478: LD_INT 149
7480: PUSH
7481: LD_INT 26
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 10
7489: PUSH
7490: LD_INT 15
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 8
7503: PUSH
7504: LD_INT 142
7506: PUSH
7507: LD_INT 26
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: LD_INT 11
7515: PUSH
7516: LD_INT 12
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 27
7529: PUSH
7530: LD_INT 153
7532: PUSH
7533: LD_INT 32
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: LD_INT 0
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 27
7555: PUSH
7556: LD_INT 145
7558: PUSH
7559: LD_INT 32
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 27
7581: PUSH
7582: LD_INT 138
7584: PUSH
7585: LD_INT 2
7587: PUSH
7588: LD_INT 4
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: LD_INT 0
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 27
7607: PUSH
7608: LD_INT 144
7610: PUSH
7611: LD_INT 13
7613: PUSH
7614: LD_INT 0
7616: PUSH
7617: LD_INT 0
7619: PUSH
7620: LD_INT 0
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 26
7633: PUSH
7634: LD_INT 124
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: LD_INT 4
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 121
7662: PUSH
7663: LD_INT 2
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_INT 0
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 118
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 1
7694: PUSH
7695: LD_INT 0
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 29
7711: PUSH
7712: LD_INT 159
7714: PUSH
7715: LD_INT 47
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 0
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 32
7737: PUSH
7738: LD_INT 146
7740: PUSH
7741: LD_INT 41
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 33
7763: PUSH
7764: LD_INT 136
7766: PUSH
7767: LD_INT 37
7769: PUSH
7770: LD_INT 0
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 33
7789: PUSH
7790: LD_INT 132
7792: PUSH
7793: LD_INT 34
7795: PUSH
7796: LD_INT 0
7798: PUSH
7799: LD_INT 0
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 36
7815: PUSH
7816: LD_INT 124
7818: PUSH
7819: LD_INT 7
7821: PUSH
7822: LD_INT 1
7824: PUSH
7825: LD_INT 0
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 5
7841: PUSH
7842: LD_INT 124
7844: PUSH
7845: LD_INT 19
7847: PUSH
7848: LD_INT 0
7850: PUSH
7851: LD_INT 0
7853: PUSH
7854: LD_INT 0
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 32
7867: PUSH
7868: LD_INT 127
7870: PUSH
7871: LD_INT 23
7873: PUSH
7874: LD_INT 0
7876: PUSH
7877: LD_INT 0
7879: PUSH
7880: LD_INT 0
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: ST_TO_ADDR
// for i in tmp do
7916: LD_ADDR_VAR 0 2
7920: PUSH
7921: LD_VAR 0 4
7925: PUSH
7926: FOR_IN
7927: IFFALSE 8158
// begin uc_side := side ;
7929: LD_ADDR_OWVAR 20
7933: PUSH
7934: LD_VAR 0 5
7938: ST_TO_ADDR
// uc_nation := nation_american ;
7939: LD_ADDR_OWVAR 21
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7947: LD_ADDR_OWVAR 42
7951: PUSH
7952: LD_VAR 0 2
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7961: LD_ADDR_OWVAR 43
7965: PUSH
7966: LD_INT 5
7968: PPUSH
7969: LD_INT 6
7971: PPUSH
7972: CALL_OW 12
7976: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7977: LD_ADDR_OWVAR 44
7981: PUSH
7982: LD_VAR 0 2
7986: PUSH
7987: LD_INT 5
7989: ARRAY
7990: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7991: LD_ADDR_OWVAR 45
7995: PUSH
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 6
8003: ARRAY
8004: ST_TO_ADDR
// sr := 0 ;
8005: LD_ADDR_VAR 0 6
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8013: LD_VAR 0 2
8017: PUSH
8018: LD_INT 1
8020: ARRAY
8021: PUSH
8022: LD_INT 29
8024: EQUAL
8025: IFFALSE 8037
// sr := mat_oil else
8027: LD_ADDR_VAR 0 6
8031: PUSH
8032: LD_INT 2
8034: ST_TO_ADDR
8035: GO 8059
// if i [ 1 ] = b_siberite_mine then
8037: LD_VAR 0 2
8041: PUSH
8042: LD_INT 1
8044: ARRAY
8045: PUSH
8046: LD_INT 30
8048: EQUAL
8049: IFFALSE 8059
// sr := mat_siberit ;
8051: LD_ADDR_VAR 0 6
8055: PUSH
8056: LD_INT 3
8058: ST_TO_ADDR
// if sr then
8059: LD_VAR 0 6
8063: IFFALSE 8119
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8065: LD_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: ARRAY
8073: PPUSH
8074: LD_VAR 0 2
8078: PUSH
8079: LD_INT 3
8081: ARRAY
8082: PPUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8092: LD_VAR 0 2
8096: PUSH
8097: LD_INT 2
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 2
8105: PUSH
8106: LD_INT 3
8108: ARRAY
8109: PPUSH
8110: LD_VAR 0 5
8114: PPUSH
8115: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 3
8140: ARRAY
8141: PPUSH
8142: LD_VAR 0 2
8146: PUSH
8147: LD_INT 4
8149: ARRAY
8150: PPUSH
8151: CALL_OW 47
8155: ST_TO_ADDR
// end ;
8156: GO 7926
8158: POP
8159: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8160: LD_ADDR_VAR 0 8
8164: PUSH
8165: LD_INT 22
8167: PUSH
8168: LD_VAR 0 5
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: ST_TO_ADDR
// if not depot then
8196: LD_VAR 0 8
8200: NOT
8201: IFFALSE 8205
// exit ;
8203: GO 8477
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8205: LD_ADDR_VAR 0 7
8209: PUSH
8210: LD_VAR 0 8
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_INT 3
8221: PPUSH
8222: LD_STRING theta3
8224: PPUSH
8225: LD_INT 8
8227: PUSH
8228: LD_INT 7
8230: PUSH
8231: LD_INT 6
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: LD_OWVAR 67
8243: ARRAY
8244: PPUSH
8245: LD_INT 2500
8247: PUSH
8248: LD_INT 2000
8250: PUSH
8251: LD_INT 1750
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PUSH
8259: LD_OWVAR 67
8263: ARRAY
8264: PUSH
8265: LD_INT 300
8267: PUSH
8268: LD_INT 250
8270: PUSH
8271: LD_INT 200
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: PUSH
8279: LD_OWVAR 67
8283: ARRAY
8284: PUSH
8285: LD_INT 80
8287: PUSH
8288: LD_INT 60
8290: PUSH
8291: LD_INT 50
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_OWVAR 67
8303: ARRAY
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PPUSH
8310: LD_INT 7
8312: PUSH
8313: LD_INT 6
8315: PUSH
8316: LD_INT 5
8318: PUSH
8319: LD_INT 5
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL 29355 0 6
8332: ST_TO_ADDR
// if not base then
8333: LD_VAR 0 7
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8477
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8342: LD_ADDR_EXP 36
8346: PUSH
8347: LD_EXP 36
8351: PPUSH
8352: LD_EXP 5
8356: PPUSH
8357: LD_VAR 0 7
8361: PPUSH
8362: CALL_OW 1
8366: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 1
8372: PPUSH
8373: LD_INT 7
8375: PPUSH
8376: CALL_OW 380
// allyCommander := CreateHuman ;
8380: LD_ADDR_EXP 11
8384: PUSH
8385: CALL_OW 44
8389: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8390: LD_EXP 11
8394: PPUSH
8395: LD_INT 139
8397: PPUSH
8398: LD_INT 15
8400: PPUSH
8401: LD_INT 0
8403: PPUSH
8404: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 137
8415: PPUSH
8416: LD_INT 15
8418: PPUSH
8419: CALL_OW 118
// hc_gallery := us ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING us
8430: ST_TO_ADDR
// hc_face_number := 7 ;
8431: LD_ADDR_OWVAR 34
8435: PUSH
8436: LD_INT 7
8438: ST_TO_ADDR
// hc_name := Arthur Powell ;
8439: LD_ADDR_OWVAR 26
8443: PUSH
8444: LD_STRING Arthur Powell
8446: ST_TO_ADDR
// hc_sex := sex_male ;
8447: LD_ADDR_OWVAR 27
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// hc_class := 1 ;
8455: LD_ADDR_OWVAR 28
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// Powell := CreateHuman ;
8463: LD_ADDR_EXP 12
8467: PUSH
8468: CALL_OW 44
8472: ST_TO_ADDR
// InitHc ;
8473: CALL_OW 19
// end ;
8477: LD_VAR 0 1
8481: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8482: LD_INT 0
8484: PPUSH
8485: PPUSH
8486: PPUSH
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
// side := 1 ;
8493: LD_ADDR_VAR 0 3
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8501: LD_ADDR_VAR 0 1
8505: PUSH
8506: EMPTY
8507: PUSH
8508: EMPTY
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: ST_TO_ADDR
// uc_side := side ;
8514: LD_ADDR_OWVAR 20
8518: PUSH
8519: LD_VAR 0 3
8523: ST_TO_ADDR
// uc_nation := nation_american ;
8524: LD_ADDR_OWVAR 21
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// InitHc ;
8532: CALL_OW 19
// InitVc ;
8536: CALL_OW 20
// hc_importance := 0 ;
8540: LD_ADDR_OWVAR 32
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8548: LD_ADDR_VAR 0 7
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// if commander = 2 then
8567: LD_EXP 25
8571: PUSH
8572: LD_INT 2
8574: EQUAL
8575: IFFALSE 8596
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8577: LD_ADDR_VAR 0 7
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 4
8587: PUSH
8588: LD_INT 4
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: ST_TO_ADDR
// if commander = 3 then
8596: LD_EXP 25
8600: PUSH
8601: LD_INT 3
8603: EQUAL
8604: IFFALSE 8625
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8606: LD_ADDR_VAR 0 7
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 5
8616: PUSH
8617: LD_INT 5
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8625: LD_ADDR_VAR 0 8
8629: PUSH
8630: LD_INT 2
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: LD_INT 1
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if commander = 2 then
8644: LD_EXP 25
8648: PUSH
8649: LD_INT 2
8651: EQUAL
8652: IFFALSE 8673
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8654: LD_ADDR_VAR 0 8
8658: PUSH
8659: LD_INT 1
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: ST_TO_ADDR
// if commander = 3 then
8673: LD_EXP 25
8677: PUSH
8678: LD_INT 3
8680: EQUAL
8681: IFFALSE 8702
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8683: LD_ADDR_VAR 0 8
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8702: LD_ADDR_VAR 0 9
8706: PUSH
8707: LD_INT 5
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: ST_TO_ADDR
// if commander = 2 then
8721: LD_EXP 25
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 8750
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8731: LD_ADDR_VAR 0 9
8735: PUSH
8736: LD_INT 7
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: LD_INT 6
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// if commander = 3 then
8750: LD_EXP 25
8754: PUSH
8755: LD_INT 3
8757: EQUAL
8758: IFFALSE 8779
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8760: LD_ADDR_VAR 0 9
8764: PUSH
8765: LD_INT 9
8767: PUSH
8768: LD_INT 10
8770: PUSH
8771: LD_INT 7
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8779: LD_ADDR_VAR 0 5
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: LD_INT 5
8789: PUSH
8790: LD_INT 4
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: PUSH
8798: LD_OWVAR 67
8802: ARRAY
8803: ST_TO_ADDR
// if commander = 2 then
8804: LD_EXP 25
8808: PUSH
8809: LD_INT 2
8811: EQUAL
8812: IFFALSE 8828
// tanks := tanks + 3 ;
8814: LD_ADDR_VAR 0 5
8818: PUSH
8819: LD_VAR 0 5
8823: PUSH
8824: LD_INT 3
8826: PLUS
8827: ST_TO_ADDR
// for i = 1 to tanks do
8828: LD_ADDR_VAR 0 2
8832: PUSH
8833: DOUBLE
8834: LD_INT 1
8836: DEC
8837: ST_TO_ADDR
8838: LD_VAR 0 5
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8954
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8846: LD_VAR 0 7
8850: PUSH
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: MOD
8859: PUSH
8860: LD_INT 1
8862: PLUS
8863: ARRAY
8864: PPUSH
8865: LD_VAR 0 8
8869: PUSH
8870: LD_INT 1
8872: PPUSH
8873: LD_INT 3
8875: PPUSH
8876: CALL_OW 12
8880: ARRAY
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: LD_VAR 0 9
8889: PUSH
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 3
8897: MOD
8898: PUSH
8899: LD_INT 1
8901: PLUS
8902: ARRAY
8903: PPUSH
8904: LD_INT 60
8906: PPUSH
8907: LD_INT 70
8909: PPUSH
8910: CALL_OW 12
8914: PPUSH
8915: CALL 25946 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8919: LD_ADDR_VAR 0 1
8923: PUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 1
8931: PPUSH
8932: LD_VAR 0 1
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: PUSH
8941: CALL_OW 45
8945: ADD
8946: PPUSH
8947: CALL_OW 1
8951: ST_TO_ADDR
// end ;
8952: GO 8843
8954: POP
8955: POP
// cl := 1 ;
8956: LD_ADDR_VAR 0 6
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// for i = 1 to 10 do
8964: LD_ADDR_VAR 0 2
8968: PUSH
8969: DOUBLE
8970: LD_INT 1
8972: DEC
8973: ST_TO_ADDR
8974: LD_INT 10
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9093
// begin if i mod 4 = 0 then
8980: LD_VAR 0 2
8984: PUSH
8985: LD_INT 4
8987: MOD
8988: PUSH
8989: LD_INT 0
8991: EQUAL
8992: IFFALSE 9008
// cl := cl + 1 ;
8994: LD_ADDR_VAR 0 6
8998: PUSH
8999: LD_VAR 0 6
9003: PUSH
9004: LD_INT 1
9006: PLUS
9007: ST_TO_ADDR
// if cl = 2 then
9008: LD_VAR 0 6
9012: PUSH
9013: LD_INT 2
9015: EQUAL
9016: IFFALSE 9026
// cl := 3 ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: LD_INT 3
9025: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9026: LD_INT 0
9028: PPUSH
9029: LD_VAR 0 6
9033: PPUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 6
9039: PUSH
9040: LD_INT 5
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_OWVAR 67
9052: ARRAY
9053: PPUSH
9054: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9058: LD_ADDR_VAR 0 1
9062: PUSH
9063: LD_VAR 0 1
9067: PPUSH
9068: LD_INT 2
9070: PPUSH
9071: LD_VAR 0 1
9075: PUSH
9076: LD_INT 2
9078: ARRAY
9079: PUSH
9080: CALL_OW 44
9084: ADD
9085: PPUSH
9086: CALL_OW 1
9090: ST_TO_ADDR
// end ;
9091: GO 8977
9093: POP
9094: POP
// if commander = 1 then
9095: LD_EXP 25
9099: PUSH
9100: LD_INT 1
9102: EQUAL
9103: IFFALSE 9171
// for i = 1 to 4 do
9105: LD_ADDR_VAR 0 2
9109: PUSH
9110: DOUBLE
9111: LD_INT 1
9113: DEC
9114: ST_TO_ADDR
9115: LD_INT 4
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9169
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9121: LD_INT 0
9123: PPUSH
9124: LD_INT 1
9126: PPUSH
9127: LD_INT 8
9129: PPUSH
9130: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 2
9146: PPUSH
9147: LD_VAR 0 1
9151: PUSH
9152: LD_INT 2
9154: ARRAY
9155: PUSH
9156: CALL_OW 44
9160: ADD
9161: PPUSH
9162: CALL_OW 1
9166: ST_TO_ADDR
// end ;
9167: GO 9118
9169: POP
9170: POP
// techs := [ ] ;
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: EMPTY
9177: ST_TO_ADDR
// if commander = 1 then
9178: LD_EXP 25
9182: PUSH
9183: LD_INT 1
9185: EQUAL
9186: IFFALSE 9211
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9188: LD_ADDR_VAR 0 4
9192: PUSH
9193: LD_INT 51
9195: PUSH
9196: LD_INT 52
9198: PUSH
9199: LD_INT 53
9201: PUSH
9202: LD_INT 12
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
// if commander = 2 then
9211: LD_EXP 25
9215: PUSH
9216: LD_INT 2
9218: EQUAL
9219: IFFALSE 9256
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: LD_INT 48
9228: PUSH
9229: LD_INT 47
9231: PUSH
9232: LD_INT 46
9234: PUSH
9235: LD_INT 45
9237: PUSH
9238: LD_INT 35
9240: PUSH
9241: LD_INT 60
9243: PUSH
9244: LD_INT 6
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if commander = 3 then
9256: LD_EXP 25
9260: PUSH
9261: LD_INT 3
9263: EQUAL
9264: IFFALSE 9313
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9266: LD_ADDR_VAR 0 4
9270: PUSH
9271: LD_INT 27
9273: PUSH
9274: LD_INT 36
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: LD_INT 57
9282: PUSH
9283: LD_INT 58
9285: PUSH
9286: LD_INT 47
9288: PUSH
9289: LD_INT 46
9291: PUSH
9292: LD_INT 51
9294: PUSH
9295: LD_INT 69
9297: PUSH
9298: LD_INT 39
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: ST_TO_ADDR
// if techs then
9313: LD_VAR 0 4
9317: IFFALSE 9351
// for i in techs do
9319: LD_ADDR_VAR 0 2
9323: PUSH
9324: LD_VAR 0 4
9328: PUSH
9329: FOR_IN
9330: IFFALSE 9349
// SetTech ( i , 1 , state_researched ) ;
9332: LD_VAR 0 2
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: CALL_OW 322
9347: GO 9329
9349: POP
9350: POP
// hc_gallery := skirmish ;
9351: LD_ADDR_OWVAR 33
9355: PUSH
9356: LD_STRING skirmish
9358: ST_TO_ADDR
// hc_face_number := commander ;
9359: LD_ADDR_OWVAR 34
9363: PUSH
9364: LD_EXP 25
9368: ST_TO_ADDR
// hc_importance := 100 ;
9369: LD_ADDR_OWVAR 32
9373: PUSH
9374: LD_INT 100
9376: ST_TO_ADDR
// case commander of 1 :
9377: LD_EXP 25
9381: PUSH
9382: LD_INT 1
9384: DOUBLE
9385: EQUAL
9386: IFTRUE 9390
9388: GO 9414
9390: POP
// begin hc_name := Jeff Ironside ;
9391: LD_ADDR_OWVAR 26
9395: PUSH
9396: LD_STRING Jeff Ironside
9398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9399: LD_INT 1
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: LD_INT 7
9407: PPUSH
9408: CALL_OW 380
// end ; 2 :
9412: GO 9479
9414: LD_INT 2
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9446
9422: POP
// begin hc_name := Paul Johnson ;
9423: LD_ADDR_OWVAR 26
9427: PUSH
9428: LD_STRING Paul Johnson
9430: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9431: LD_INT 1
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: LD_INT 7
9439: PPUSH
9440: CALL_OW 380
// end ; 3 :
9444: GO 9479
9446: LD_INT 3
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9478
9454: POP
// begin hc_name := Lisa Stuart ;
9455: LD_ADDR_OWVAR 26
9459: PUSH
9460: LD_STRING Lisa Stuart
9462: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9463: LD_INT 2
9465: PPUSH
9466: LD_INT 4
9468: PPUSH
9469: LD_INT 7
9471: PPUSH
9472: CALL_OW 380
// end ; end ;
9476: GO 9479
9478: POP
// playerCommander := CreateHuman ;
9479: LD_ADDR_EXP 9
9483: PUSH
9484: CALL_OW 44
9488: ST_TO_ADDR
// hc_importance := 0 ;
9489: LD_ADDR_OWVAR 32
9493: PUSH
9494: LD_INT 0
9496: ST_TO_ADDR
// hc_gallery :=  ;
9497: LD_ADDR_OWVAR 33
9501: PUSH
9502: LD_STRING 
9504: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 2
9517: PPUSH
9518: LD_VAR 0 1
9522: PUSH
9523: LD_INT 2
9525: ARRAY
9526: PUSH
9527: LD_EXP 9
9531: ADD
9532: PPUSH
9533: CALL_OW 1
9537: ST_TO_ADDR
// end ;
9538: LD_VAR 0 1
9542: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9543: LD_INT 0
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
// uc_side := 1 ;
9551: LD_ADDR_OWVAR 20
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// uc_nation := 1 ;
9559: LD_ADDR_OWVAR 21
9563: PUSH
9564: LD_INT 1
9566: ST_TO_ADDR
// InitHc ;
9567: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: LD_OWVAR 67
9594: ARRAY
9595: ST_TO_ADDR
// for i = 1 to peopleAmount do
9596: LD_ADDR_VAR 0 2
9600: PUSH
9601: DOUBLE
9602: LD_INT 1
9604: DEC
9605: ST_TO_ADDR
9606: LD_VAR 0 3
9610: PUSH
9611: FOR_TO
9612: IFFALSE 9661
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9614: LD_INT 0
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: LD_INT 7
9622: PUSH
9623: LD_INT 6
9625: PUSH
9626: LD_INT 5
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_OWVAR 67
9638: ARRAY
9639: PPUSH
9640: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9644: CALL_OW 44
9648: PPUSH
9649: LD_INT 19
9651: PPUSH
9652: LD_INT 0
9654: PPUSH
9655: CALL 60599 0 3
// end ;
9659: GO 9611
9661: POP
9662: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: LD_INT 3
9671: PPUSH
9672: LD_INT 13
9674: PPUSH
9675: LD_INT 58
9677: PPUSH
9678: CALL 25946 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9682: CALL_OW 45
9686: PPUSH
9687: LD_INT 19
9689: PPUSH
9690: LD_INT 0
9692: PPUSH
9693: CALL 60599 0 3
// if commander = 1 then
9697: LD_EXP 25
9701: PUSH
9702: LD_INT 1
9704: EQUAL
9705: IFFALSE 9716
// wait ( 6 6$00 ) else
9707: LD_INT 12600
9709: PPUSH
9710: CALL_OW 67
9714: GO 9723
// wait ( 8 8$00 ) ;
9716: LD_INT 16800
9718: PPUSH
9719: CALL_OW 67
// uc_side := 1 ;
9723: LD_ADDR_OWVAR 20
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// uc_nation := 1 ;
9731: LD_ADDR_OWVAR 21
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// InitVc ;
9739: CALL_OW 20
// InitHc ;
9743: CALL_OW 19
// for i = 1 to 5 do
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: DOUBLE
9753: LD_INT 1
9755: DEC
9756: ST_TO_ADDR
9757: LD_INT 5
9759: PUSH
9760: FOR_TO
9761: IFFALSE 10005
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9763: LD_INT 4
9765: PUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 3
9784: MOD
9785: PUSH
9786: LD_INT 1
9788: PLUS
9789: ARRAY
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 1
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: LD_INT 3
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: PUSH
9808: LD_VAR 0 2
9812: PUSH
9813: LD_INT 3
9815: MOD
9816: PUSH
9817: LD_INT 1
9819: PLUS
9820: ARRAY
9821: PPUSH
9822: LD_INT 6
9824: PUSH
9825: LD_INT 12
9827: PUSH
9828: LD_INT 11
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_VAR 0 2
9840: PUSH
9841: LD_INT 3
9843: MOD
9844: PUSH
9845: LD_INT 1
9847: PLUS
9848: ARRAY
9849: PPUSH
9850: LD_INT 40
9852: PPUSH
9853: LD_INT 55
9855: PPUSH
9856: CALL_OW 12
9860: PPUSH
9861: CALL 25946 0 5
// veh := CreateVehicle ;
9865: LD_ADDR_VAR 0 6
9869: PUSH
9870: CALL_OW 45
9874: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9875: LD_VAR 0 6
9879: PPUSH
9880: LD_INT 19
9882: PPUSH
9883: LD_INT 0
9885: PPUSH
9886: CALL 60599 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL_OW 264
9899: PUSH
9900: LD_INT 12
9902: EQUAL
9903: IFFALSE 9935
// begin AddCargo ( veh , mat_cans , 70 ) ;
9905: LD_VAR 0 6
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: LD_INT 70
9915: PPUSH
9916: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9920: LD_VAR 0 6
9924: PPUSH
9925: LD_INT 3
9927: PPUSH
9928: LD_INT 30
9930: PPUSH
9931: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9935: LD_VAR 0 6
9939: PPUSH
9940: CALL_OW 263
9944: PUSH
9945: LD_INT 1
9947: EQUAL
9948: IFFALSE 10003
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9950: LD_INT 1
9952: PPUSH
9953: LD_INT 3
9955: PPUSH
9956: LD_INT 6
9958: PPUSH
9959: CALL_OW 380
// un := CreateHuman ;
9963: LD_ADDR_VAR 0 5
9967: PUSH
9968: CALL_OW 44
9972: ST_TO_ADDR
// tmp := tmp ^ un ;
9973: LD_ADDR_VAR 0 4
9977: PUSH
9978: LD_VAR 0 4
9982: PUSH
9983: LD_VAR 0 5
9987: ADD
9988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9989: LD_VAR 0 5
9993: PPUSH
9994: LD_VAR 0 6
9998: PPUSH
9999: CALL_OW 52
// end ; end ;
10003: GO 9760
10005: POP
10006: POP
// if tmp then
10007: LD_VAR 0 4
10011: IFFALSE 10075
// begin CenterNowOnUnits ( tmp ) ;
10013: LD_VAR 0 4
10017: PPUSH
10018: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10022: LD_VAR 0 4
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PPUSH
10031: LD_STRING DAR-1
10033: PPUSH
10034: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10038: LD_EXP 9
10042: PPUSH
10043: LD_STRING D
10045: PUSH
10046: LD_STRING I
10048: PUSH
10049: LD_STRING J
10051: PUSH
10052: LD_STRING S
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: LD_EXP 25
10064: ARRAY
10065: STR
10066: PUSH
10067: LD_STRING -1-DAR
10069: STR
10070: PPUSH
10071: CALL_OW 88
// end ; if not reinforceAllowed then
10075: LD_EXP 24
10079: NOT
10080: IFFALSE 10084
// exit ;
10082: GO 10238
// wait ( 25 25$00 ) ;
10084: LD_INT 52500
10086: PPUSH
10087: CALL_OW 67
// uc_side := 1 ;
10091: LD_ADDR_OWVAR 20
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// uc_nation := 1 ;
10099: LD_ADDR_OWVAR 21
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// InitVc ;
10107: CALL_OW 20
// InitHc ;
10111: CALL_OW 19
// for i = 1 to 4 do
10115: LD_ADDR_VAR 0 2
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_INT 4
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10236
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10131: LD_INT 5
10133: PPUSH
10134: LD_INT 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: LD_INT 6
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL 25946 0 5
// veh := CreateVehicle ;
10150: LD_ADDR_VAR 0 6
10154: PUSH
10155: CALL_OW 45
10159: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10160: LD_VAR 0 6
10164: PPUSH
10165: LD_INT 19
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL 60599 0 3
// if GetControl ( veh ) = control_manual then
10175: LD_VAR 0 6
10179: PPUSH
10180: CALL_OW 263
10184: PUSH
10185: LD_INT 1
10187: EQUAL
10188: IFFALSE 10234
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10190: LD_INT 0
10192: PPUSH
10193: LD_INT 3
10195: PPUSH
10196: LD_INT 7
10198: PUSH
10199: LD_INT 6
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: PUSH
10210: LD_OWVAR 67
10214: ARRAY
10215: PPUSH
10216: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10220: CALL_OW 44
10224: PPUSH
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 52
// end ; end ;
10234: GO 10128
10236: POP
10237: POP
// end ;
10238: LD_VAR 0 1
10242: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10243: LD_INT 0
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
// uc_side := 8 ;
10250: LD_ADDR_OWVAR 20
10254: PUSH
10255: LD_INT 8
10257: ST_TO_ADDR
// uc_nation := nation_arabian ;
10258: LD_ADDR_OWVAR 21
10262: PUSH
10263: LD_INT 2
10265: ST_TO_ADDR
// for i = 1 to 2 do
10266: LD_ADDR_VAR 0 2
10270: PUSH
10271: DOUBLE
10272: LD_INT 1
10274: DEC
10275: ST_TO_ADDR
10276: LD_INT 2
10278: PUSH
10279: FOR_TO
10280: IFFALSE 10360
// for j = 1 to 4 do
10282: LD_ADDR_VAR 0 4
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_INT 4
10294: PUSH
10295: FOR_TO
10296: IFFALSE 10356
// begin PrepareHuman ( false , j , 8 ) ;
10298: LD_INT 0
10300: PPUSH
10301: LD_VAR 0 4
10305: PPUSH
10306: LD_INT 8
10308: PPUSH
10309: CALL_OW 380
// un := CreateHuman ;
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: CALL_OW 44
10322: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 23
10330: PPUSH
10331: LD_INT 0
10333: PPUSH
10334: CALL_OW 49
// tmp := tmp union un ;
10338: LD_ADDR_VAR 0 5
10342: PUSH
10343: LD_VAR 0 5
10347: PUSH
10348: LD_VAR 0 3
10352: UNION
10353: ST_TO_ADDR
// end ;
10354: GO 10295
10356: POP
10357: POP
10358: GO 10279
10360: POP
10361: POP
// for i in tmp do
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: LD_VAR 0 5
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10392
// ComMoveXY ( i , 150 , 136 ) ;
10375: LD_VAR 0 2
10379: PPUSH
10380: LD_INT 150
10382: PPUSH
10383: LD_INT 136
10385: PPUSH
10386: CALL_OW 111
10390: GO 10372
10392: POP
10393: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10394: LD_ADDR_EXP 36
10398: PUSH
10399: LD_EXP 36
10403: PPUSH
10404: LD_EXP 6
10408: PPUSH
10409: LD_EXP 36
10413: PUSH
10414: LD_EXP 6
10418: ARRAY
10419: PUSH
10420: LD_VAR 0 5
10424: UNION
10425: PPUSH
10426: CALL_OW 1
10430: ST_TO_ADDR
// end ;
10431: LD_VAR 0 1
10435: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10436: LD_OWVAR 67
10440: PUSH
10441: LD_INT 1
10443: GREATER
10444: PUSH
10445: LD_INT 31
10447: PPUSH
10448: LD_INT 3
10450: PPUSH
10451: CALL_OW 321
10455: PUSH
10456: LD_INT 2
10458: EQUAL
10459: AND
10460: IFFALSE 10677
10462: GO 10464
10464: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10465: LD_EXP 7
10469: PPUSH
10470: LD_INT 33
10472: PUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 159
10478: PUSH
10479: LD_INT 5
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 33
10490: PUSH
10491: LD_INT 105
10493: PUSH
10494: LD_INT 158
10496: PUSH
10497: LD_INT 5
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 96
10511: PUSH
10512: LD_INT 136
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 33
10526: PUSH
10527: LD_INT 94
10529: PUSH
10530: LD_INT 133
10532: PUSH
10533: LD_INT 4
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 33
10544: PUSH
10545: LD_INT 84
10547: PUSH
10548: LD_INT 102
10550: PUSH
10551: LD_INT 4
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL 85059 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10571: LD_EXP 8
10575: PPUSH
10576: LD_INT 33
10578: PUSH
10579: LD_INT 50
10581: PUSH
10582: LD_INT 17
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 33
10596: PUSH
10597: LD_INT 52
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 4
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 33
10614: PUSH
10615: LD_INT 53
10617: PUSH
10618: LD_INT 23
10620: PUSH
10621: LD_INT 4
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 45
10635: PUSH
10636: LD_INT 32
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 33
10650: PUSH
10651: LD_INT 45
10653: PUSH
10654: LD_INT 39
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL 85059 0 2
// end ; end_of_file
10677: END
// export function Action ; var i , tmp ; begin
10678: LD_INT 0
10680: PPUSH
10681: PPUSH
10682: PPUSH
// InGameOn ;
10683: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10687: LD_INT 225
10689: PPUSH
10690: LD_INT 217
10692: PPUSH
10693: CALL_OW 86
// for i in playerForces [ 2 ] do
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_EXP 10
10706: PUSH
10707: LD_INT 2
10709: ARRAY
10710: PUSH
10711: FOR_IN
10712: IFFALSE 10845
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10714: LD_EXP 10
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PUSH
10723: LD_VAR 0 2
10727: PPUSH
10728: CALL_OW 257
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: LD_INT 4
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: IN
10743: AND
10744: IFFALSE 10828
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10746: LD_EXP 10
10750: PUSH
10751: LD_INT 1
10753: ARRAY
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PPUSH
10759: LD_INT 19
10761: PPUSH
10762: LD_INT 0
10764: PPUSH
10765: CALL 60599 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10769: LD_VAR 0 2
10773: PPUSH
10774: LD_EXP 10
10778: PUSH
10779: LD_INT 1
10781: ARRAY
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PPUSH
10787: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10791: LD_ADDR_EXP 10
10795: PUSH
10796: LD_EXP 10
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: LD_EXP 10
10808: PUSH
10809: LD_INT 1
10811: ARRAY
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 3
10820: PPUSH
10821: CALL_OW 1
10825: ST_TO_ADDR
// end else
10826: GO 10843
// PlaceUnitInArea ( i , startArea , false ) ;
10828: LD_VAR 0 2
10832: PPUSH
10833: LD_INT 19
10835: PPUSH
10836: LD_INT 0
10838: PPUSH
10839: CALL 60599 0 3
// end ;
10843: GO 10711
10845: POP
10846: POP
// wait ( 0 0$2 ) ;
10847: LD_INT 70
10849: PPUSH
10850: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10854: LD_EXP 9
10858: PPUSH
10859: LD_STRING D
10861: PUSH
10862: LD_STRING I
10864: PUSH
10865: LD_STRING J
10867: PUSH
10868: LD_STRING S
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: PUSH
10876: LD_EXP 25
10880: ARRAY
10881: STR
10882: PUSH
10883: LD_STRING -1
10885: STR
10886: PPUSH
10887: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10891: LD_EXP 12
10895: PPUSH
10896: LD_STRING DP-1
10898: PPUSH
10899: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10903: LD_EXP 12
10907: PPUSH
10908: LD_STRING DP-2
10910: PPUSH
10911: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10915: LD_EXP 9
10919: PPUSH
10920: LD_STRING D
10922: PUSH
10923: LD_STRING I
10925: PUSH
10926: LD_STRING J
10928: PUSH
10929: LD_STRING S
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: PUSH
10937: LD_EXP 25
10941: ARRAY
10942: STR
10943: PUSH
10944: LD_STRING -2
10946: STR
10947: PPUSH
10948: CALL_OW 88
// InGameOff ;
10952: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10956: LD_STRING O1
10958: PPUSH
10959: CALL_OW 337
// game := true ;
10963: LD_ADDR_EXP 3
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10971: LD_INT 175
10973: PPUSH
10974: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10978: LD_EXP 9
10982: PPUSH
10983: LD_STRING D
10985: PUSH
10986: LD_STRING I
10988: PUSH
10989: LD_STRING J
10991: PUSH
10992: LD_STRING S
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: LD_EXP 25
11004: ARRAY
11005: STR
11006: PUSH
11007: LD_STRING -3
11009: STR
11010: PPUSH
11011: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11015: LD_INT 35
11017: PPUSH
11018: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11022: LD_EXP 15
11026: PUSH
11027: LD_INT 1
11029: ARRAY
11030: PUSH
11031: LD_EXP 15
11035: PUSH
11036: LD_INT 2
11038: ARRAY
11039: GREATEREQUAL
11040: IFFALSE 11015
// outpostEscape := true ;
11042: LD_ADDR_EXP 27
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11050: LD_ADDR_VAR 0 3
11054: PUSH
11055: LD_EXP 14
11059: PPUSH
11060: LD_INT 26
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 72
11074: ST_TO_ADDR
// if tmp then
11075: LD_VAR 0 3
11079: IFFALSE 11097
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PPUSH
11090: LD_STRING DR-1-Escape
11092: PPUSH
11093: CALL_OW 88
// wait ( 0 0$1 ) ;
11097: LD_INT 35
11099: PPUSH
11100: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11104: LD_EXP 9
11108: PPUSH
11109: LD_STRING D
11111: PUSH
11112: LD_STRING I
11114: PUSH
11115: LD_STRING J
11117: PUSH
11118: LD_STRING S
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: LD_EXP 25
11130: ARRAY
11131: STR
11132: PUSH
11133: LD_STRING -1-Escape
11135: STR
11136: PPUSH
11137: CALL_OW 88
// for i in ruOutpost do
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_EXP 14
11150: PUSH
11151: FOR_IN
11152: IFFALSE 11206
// begin if IsInUnit ( i ) then
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 310
11163: IFFALSE 11174
// ComExitBuilding ( i ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11174: LD_VAR 0 2
11178: PPUSH
11179: LD_INT 179
11181: PPUSH
11182: LD_INT 102
11184: PPUSH
11185: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 28
11196: PPUSH
11197: LD_INT 20
11199: PPUSH
11200: CALL_OW 171
// end ;
11204: GO 11151
11206: POP
11207: POP
// tmp := [ ] ;
11208: LD_ADDR_VAR 0 3
11212: PUSH
11213: EMPTY
11214: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11215: LD_INT 35
11217: PPUSH
11218: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_EXP 14
11231: PPUSH
11232: LD_INT 95
11234: PUSH
11235: LD_INT 11
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 72
11246: ST_TO_ADDR
// if tmp then
11247: LD_VAR 0 3
11251: IFFALSE 11330
// for i in tmp do
11253: LD_ADDR_VAR 0 2
11257: PUSH
11258: LD_VAR 0 3
11262: PUSH
11263: FOR_IN
11264: IFFALSE 11328
// begin ruOutpost := ruOutpost diff i ;
11266: LD_ADDR_EXP 14
11270: PUSH
11271: LD_EXP 14
11275: PUSH
11276: LD_VAR 0 2
11280: DIFF
11281: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11282: LD_ADDR_EXP 36
11286: PUSH
11287: LD_EXP 36
11291: PPUSH
11292: LD_EXP 8
11296: PUSH
11297: LD_EXP 36
11301: PUSH
11302: LD_EXP 8
11306: ARRAY
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PPUSH
11316: LD_VAR 0 2
11320: PPUSH
11321: CALL 26068 0 3
11325: ST_TO_ADDR
// end ;
11326: GO 11263
11328: POP
11329: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11330: LD_EXP 14
11334: PPUSH
11335: LD_INT 21
11337: PUSH
11338: LD_INT 1
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 72
11349: NOT
11350: IFFALSE 11215
// ruOutpost := [ ] ;
11352: LD_ADDR_EXP 14
11356: PUSH
11357: EMPTY
11358: ST_TO_ADDR
// end ;
11359: LD_VAR 0 1
11363: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11364: LD_EXP 27
11368: IFFALSE 11557
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11377: LD_INT 875
11379: PPUSH
11380: LD_INT 1225
11382: PPUSH
11383: CALL_OW 12
11387: PPUSH
11388: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11392: LD_ADDR_VAR 0 2
11396: PUSH
11397: LD_INT 208
11399: PUSH
11400: LD_INT 166
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 218
11409: PUSH
11410: LD_INT 174
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 201
11419: PUSH
11420: LD_INT 173
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 189
11429: PUSH
11430: LD_INT 167
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 191
11439: PUSH
11440: LD_INT 160
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 209
11449: PUSH
11450: LD_INT 181
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 192
11459: PUSH
11460: LD_INT 162
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 197
11469: PUSH
11470: LD_INT 166
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11487: LD_ADDR_VAR 0 1
11491: PUSH
11492: DOUBLE
11493: LD_INT 1
11495: DEC
11496: ST_TO_ADDR
11497: LD_INT 5
11499: PUSH
11500: LD_OWVAR 67
11504: PLUS
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11555
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PUSH
11520: LD_INT 1
11522: ARRAY
11523: PPUSH
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 2
11537: ARRAY
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11546: LD_INT 28
11548: PPUSH
11549: CALL_OW 67
// end ;
11553: GO 11506
11555: POP
11556: POP
// end ;
11557: PPOPN 2
11559: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11560: LD_EXP 27
11564: NOT
11565: IFFALSE 12219
11567: GO 11569
11569: DISABLE
11570: LD_INT 0
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// begin enable ;
11579: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11580: LD_ADDR_VAR 0 1
11584: PUSH
11585: LD_EXP 14
11589: PPUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PPUSH
11614: CALL_OW 72
11618: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11619: LD_ADDR_VAR 0 2
11623: PUSH
11624: LD_EXP 14
11628: PPUSH
11629: LD_INT 22
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 72
11657: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11658: LD_ADDR_VAR 0 3
11662: PUSH
11663: LD_EXP 14
11667: PPUSH
11668: LD_INT 22
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 21
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 24
11693: PUSH
11694: LD_INT 1000
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 72
11714: ST_TO_ADDR
// if engs and buildings then
11715: LD_VAR 0 2
11719: PUSH
11720: LD_VAR 0 3
11724: AND
11725: IFFALSE 11798
// begin for i in engs do
11727: LD_ADDR_VAR 0 5
11731: PUSH
11732: LD_VAR 0 2
11736: PUSH
11737: FOR_IN
11738: IFFALSE 11794
// if IsInUnit ( i ) then
11740: LD_VAR 0 5
11744: PPUSH
11745: CALL_OW 310
11749: IFFALSE 11762
// ComExitBuilding ( i ) else
11751: LD_VAR 0 5
11755: PPUSH
11756: CALL_OW 122
11760: GO 11792
// if not HasTask ( i ) then
11762: LD_VAR 0 5
11766: PPUSH
11767: CALL_OW 314
11771: NOT
11772: IFFALSE 11792
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11774: LD_VAR 0 5
11778: PPUSH
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 1
11786: ARRAY
11787: PPUSH
11788: CALL_OW 130
11792: GO 11737
11794: POP
11795: POP
// end else
11796: GO 11901
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11798: LD_VAR 0 3
11802: NOT
11803: PUSH
11804: LD_EXP 14
11808: PPUSH
11809: LD_INT 30
11811: PUSH
11812: LD_INT 0
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 72
11823: AND
11824: PUSH
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 3
11832: PUSH
11833: LD_INT 54
11835: PUSH
11836: EMPTY
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 72
11847: AND
11848: IFFALSE 11901
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11850: LD_VAR 0 2
11854: PPUSH
11855: LD_INT 3
11857: PUSH
11858: LD_INT 54
11860: PUSH
11861: EMPTY
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 72
11872: PPUSH
11873: LD_EXP 14
11877: PPUSH
11878: LD_INT 30
11880: PUSH
11881: LD_INT 0
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: CALL_OW 120
// if not tmp then
11901: LD_VAR 0 1
11905: NOT
11906: IFFALSE 11910
// exit ;
11908: GO 12219
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11910: LD_INT 26
11912: PPUSH
11913: LD_INT 81
11915: PUSH
11916: LD_INT 3
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 70
11927: PUSH
11928: LD_INT 1
11930: GREATER
11931: IFFALSE 11987
// begin for i in tmp do
11933: LD_ADDR_VAR 0 5
11937: PUSH
11938: LD_VAR 0 1
11942: PUSH
11943: FOR_IN
11944: IFFALSE 11983
// begin if IsInUnit ( i ) then
11946: LD_VAR 0 5
11950: PPUSH
11951: CALL_OW 310
11955: IFFALSE 11966
// ComExitBuilding ( i ) ;
11957: LD_VAR 0 5
11961: PPUSH
11962: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11966: LD_VAR 0 5
11970: PPUSH
11971: LD_INT 204
11973: PPUSH
11974: LD_INT 164
11976: PPUSH
11977: CALL_OW 174
// end ;
11981: GO 11943
11983: POP
11984: POP
// end else
11985: GO 12219
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 3
11994: PUSH
11995: LD_INT 54
11997: PUSH
11998: EMPTY
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 72
12009: IFFALSE 12219
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12011: LD_ADDR_VAR 0 4
12015: PUSH
12016: LD_EXP 14
12020: PPUSH
12021: LD_INT 30
12023: PUSH
12024: LD_INT 32
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 58
12033: PUSH
12034: EMPTY
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12046: LD_VAR 0 4
12050: NOT
12051: PUSH
12052: LD_EXP 14
12056: PPUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 5
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 72
12071: AND
12072: IFFALSE 12109
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_EXP 14
12083: PPUSH
12084: LD_INT 30
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PPUSH
12094: CALL_OW 72
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: CALL_OW 120
// exit ;
12107: GO 12219
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12109: LD_ADDR_VAR 0 6
12113: PUSH
12114: LD_VAR 0 1
12118: PPUSH
12119: LD_INT 3
12121: PUSH
12122: LD_INT 54
12124: PUSH
12125: EMPTY
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 72
12136: ST_TO_ADDR
// if j < empty then
12137: LD_VAR 0 6
12141: PUSH
12142: LD_VAR 0 4
12146: LESS
12147: IFFALSE 12161
// k := j else
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_VAR 0 6
12158: ST_TO_ADDR
12159: GO 12171
// k := empty ;
12161: LD_ADDR_VAR 0 7
12165: PUSH
12166: LD_VAR 0 4
12170: ST_TO_ADDR
// for i = 1 to k do
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: DOUBLE
12177: LD_INT 1
12179: DEC
12180: ST_TO_ADDR
12181: LD_VAR 0 7
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12217
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12189: LD_VAR 0 6
12193: PUSH
12194: LD_VAR 0 5
12198: ARRAY
12199: PPUSH
12200: LD_VAR 0 4
12204: PUSH
12205: LD_VAR 0 5
12209: ARRAY
12210: PPUSH
12211: CALL_OW 120
12215: GO 12186
12217: POP
12218: POP
// end ; end ;
12219: PPOPN 7
12221: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12222: LD_EXP 2
12226: PUSH
12227: LD_INT 1
12229: EQUAL
12230: PUSH
12231: LD_EXP 27
12235: AND
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_INT 1
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 92
12249: PUSH
12250: LD_INT 208
12252: PUSH
12253: LD_INT 163
12255: PUSH
12256: LD_INT 8
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 69
12273: AND
12274: PUSH
12275: LD_INT 22
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 21
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 92
12297: PUSH
12298: LD_INT 208
12300: PUSH
12301: LD_INT 163
12303: PUSH
12304: LD_INT 14
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: PPUSH
12318: CALL_OW 69
12322: NOT
12323: AND
12324: IFFALSE 12629
12326: GO 12328
12328: DISABLE
12329: LD_INT 0
12331: PPUSH
// begin InGameOn ;
12332: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12336: LD_EXP 9
12340: PPUSH
12341: CALL_OW 87
// wait ( 0 0$1 ) ;
12345: LD_INT 35
12347: PPUSH
12348: CALL_OW 67
// DialogueOn ;
12352: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12356: LD_EXP 9
12360: PPUSH
12361: LD_STRING D
12363: PUSH
12364: LD_STRING I
12366: PUSH
12367: LD_STRING J
12369: PUSH
12370: LD_STRING S
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_EXP 25
12382: ARRAY
12383: STR
12384: PUSH
12385: LD_STRING -1-BaseCaptured
12387: STR
12388: PPUSH
12389: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12393: LD_EXP 12
12397: PPUSH
12398: LD_STRING DP-1-BaseCaptured
12400: PPUSH
12401: CALL_OW 94
// if sibBombAllowed then
12405: LD_EXP 23
12409: IFFALSE 12551
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12411: LD_EXP 9
12415: PPUSH
12416: LD_STRING D
12418: PUSH
12419: LD_STRING I
12421: PUSH
12422: LD_STRING J
12424: PUSH
12425: LD_STRING S
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: LD_EXP 25
12437: ARRAY
12438: STR
12439: PUSH
12440: LD_STRING -2-BaseCaptured
12442: STR
12443: PPUSH
12444: CALL_OW 88
// if commander = 1 then
12448: LD_EXP 25
12452: PUSH
12453: LD_INT 1
12455: EQUAL
12456: IFFALSE 12470
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12458: LD_EXP 12
12462: PPUSH
12463: LD_STRING DP-2b-BaseCaptured
12465: PPUSH
12466: CALL_OW 94
// if commander = 2 then
12470: LD_EXP 25
12474: PUSH
12475: LD_INT 2
12477: EQUAL
12478: IFFALSE 12492
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12480: LD_EXP 12
12484: PPUSH
12485: LD_STRING DP-2-BaseCaptured
12487: PPUSH
12488: CALL_OW 94
// if commander = 3 then
12492: LD_EXP 25
12496: PUSH
12497: LD_INT 3
12499: EQUAL
12500: IFFALSE 12514
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12502: LD_EXP 12
12506: PPUSH
12507: LD_STRING DP-2a-BaseCaptured
12509: PPUSH
12510: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12514: LD_EXP 9
12518: PPUSH
12519: LD_STRING D
12521: PUSH
12522: LD_STRING I
12524: PUSH
12525: LD_STRING J
12527: PUSH
12528: LD_STRING S
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PUSH
12536: LD_EXP 25
12540: ARRAY
12541: STR
12542: PUSH
12543: LD_STRING -3-BaseCaptured
12545: STR
12546: PPUSH
12547: CALL_OW 88
// end ; DialogueOff ;
12551: CALL_OW 7
// InGameOff ;
12555: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12559: LD_STRING O2
12561: PPUSH
12562: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12566: LD_ADDR_VAR 0 1
12570: PUSH
12571: LD_EXP 14
12575: PPUSH
12576: LD_INT 21
12578: PUSH
12579: LD_INT 3
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: FOR_IN
12592: IFFALSE 12608
// SetSide ( i , 1 ) ;
12594: LD_VAR 0 1
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 235
12606: GO 12591
12608: POP
12609: POP
// baseCaptured := true ;
12610: LD_ADDR_EXP 17
12614: PUSH
12615: LD_INT 1
12617: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12618: LD_INT 1225
12620: PPUSH
12621: CALL_OW 67
// PrepareReinforcements ;
12625: CALL 9543 0 0
// end ;
12629: PPOPN 1
12631: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12632: LD_INT 22
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 92
12644: PUSH
12645: LD_INT 167
12647: PUSH
12648: LD_INT 197
12650: PUSH
12651: LD_INT 20
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: PUSH
12669: LD_INT 3
12671: GREATER
12672: IFFALSE 12689
12674: GO 12676
12676: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12677: LD_EXP 12
12681: PPUSH
12682: LD_STRING DP-RuAttack
12684: PPUSH
12685: CALL_OW 94
12689: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12690: LD_EXP 1
12694: NOT
12695: PUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_INT 168
12701: PPUSH
12702: LD_INT 74
12704: PPUSH
12705: CALL_OW 293
12709: AND
12710: PUSH
12711: LD_INT 168
12713: PPUSH
12714: LD_INT 72
12716: PPUSH
12717: CALL_OW 553
12721: AND
12722: IFFALSE 12774
12724: GO 12726
12726: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12727: LD_INT 168
12729: PPUSH
12730: LD_INT 72
12732: PPUSH
12733: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12737: LD_EXP 9
12741: PPUSH
12742: LD_STRING D
12744: PUSH
12745: LD_STRING I
12747: PUSH
12748: LD_STRING J
12750: PUSH
12751: LD_STRING S
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: LD_EXP 25
12763: ARRAY
12764: STR
12765: PUSH
12766: LD_STRING -1-Blockade
12768: STR
12769: PPUSH
12770: CALL_OW 88
// end ;
12774: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12775: LD_EXP 2
12779: PUSH
12780: LD_INT 1
12782: EQUAL
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 101
12796: PUSH
12797: LD_INT 4
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: AND
12813: IFFALSE 13345
12815: GO 12817
12817: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12818: LD_INT 4
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 343
// DialogueOn ;
12828: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12832: LD_EXP 11
12836: PPUSH
12837: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12841: LD_EXP 11
12845: PPUSH
12846: LD_STRING DM-1-Contact
12848: PPUSH
12849: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12853: LD_EXP 9
12857: PPUSH
12858: LD_STRING D
12860: PUSH
12861: LD_STRING I
12863: PUSH
12864: LD_STRING J
12866: PUSH
12867: LD_STRING S
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: LD_EXP 25
12879: ARRAY
12880: STR
12881: PUSH
12882: LD_STRING -1-Contact
12884: STR
12885: PPUSH
12886: CALL_OW 88
// if commander = 1 then
12890: LD_EXP 25
12894: PUSH
12895: LD_INT 1
12897: EQUAL
12898: IFFALSE 13030
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12900: LD_EXP 11
12904: PPUSH
12905: LD_STRING DM-2-Contact
12907: PPUSH
12908: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12912: LD_EXP 9
12916: PPUSH
12917: LD_STRING DI-2-Contact
12919: PPUSH
12920: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12924: LD_INT 22
12926: PUSH
12927: LD_INT 8
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PPUSH
12948: CALL_OW 69
12952: PUSH
12953: LD_INT 8
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 81
12963: PUSH
12964: LD_INT 2
12966: EQUAL
12967: AND
12968: IFFALSE 12994
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12970: LD_EXP 11
12974: PPUSH
12975: LD_STRING DM-3-Contact
12977: PPUSH
12978: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12982: LD_EXP 9
12986: PPUSH
12987: LD_STRING DI-3-Contact
12989: PPUSH
12990: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12994: LD_EXP 11
12998: PPUSH
12999: LD_STRING DM-4-Contact
13001: PPUSH
13002: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13006: LD_EXP 9
13010: PPUSH
13011: LD_STRING DI-4-Contact
13013: PPUSH
13014: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13018: LD_EXP 11
13022: PPUSH
13023: LD_STRING DM-5-Contact
13025: PPUSH
13026: CALL_OW 94
// end ; if commander = 2 then
13030: LD_EXP 25
13034: PUSH
13035: LD_INT 2
13037: EQUAL
13038: IFFALSE 13170
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13040: LD_EXP 11
13044: PPUSH
13045: LD_STRING DM-2c-Contact
13047: PPUSH
13048: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13052: LD_EXP 9
13056: PPUSH
13057: LD_STRING DJ-2-Contact
13059: PPUSH
13060: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13064: LD_INT 22
13066: PUSH
13067: LD_INT 8
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 21
13076: PUSH
13077: LD_INT 1
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: PUSH
13093: LD_INT 8
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 81
13103: PUSH
13104: LD_INT 2
13106: EQUAL
13107: AND
13108: IFFALSE 13134
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13110: LD_EXP 11
13114: PPUSH
13115: LD_STRING DM-3-Contact
13117: PPUSH
13118: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13122: LD_EXP 9
13126: PPUSH
13127: LD_STRING DJ-3-Contact
13129: PPUSH
13130: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13134: LD_EXP 11
13138: PPUSH
13139: LD_STRING DM-4-Contact
13141: PPUSH
13142: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13146: LD_EXP 9
13150: PPUSH
13151: LD_STRING DJ-4-Contact
13153: PPUSH
13154: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13158: LD_EXP 11
13162: PPUSH
13163: LD_STRING DM-5a-Contact
13165: PPUSH
13166: CALL_OW 94
// end ; if commander = 3 then
13170: LD_EXP 25
13174: PUSH
13175: LD_INT 3
13177: EQUAL
13178: IFFALSE 13334
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13180: LD_EXP 11
13184: PPUSH
13185: LD_STRING DM-2a-Contact
13187: PPUSH
13188: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13192: LD_EXP 9
13196: PPUSH
13197: LD_STRING DS-2a-Contact
13199: PPUSH
13200: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13204: LD_EXP 11
13208: PPUSH
13209: LD_STRING DM-2b-Contact
13211: PPUSH
13212: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13216: LD_EXP 9
13220: PPUSH
13221: LD_STRING DS-2b-Contact
13223: PPUSH
13224: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13228: LD_INT 22
13230: PUSH
13231: LD_INT 8
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 21
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL_OW 69
13256: PUSH
13257: LD_INT 8
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 81
13267: PUSH
13268: LD_INT 2
13270: EQUAL
13271: AND
13272: IFFALSE 13298
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13274: LD_EXP 11
13278: PPUSH
13279: LD_STRING DM-3-Contact
13281: PPUSH
13282: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13286: LD_EXP 9
13290: PPUSH
13291: LD_STRING DS-3-Contact
13293: PPUSH
13294: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13298: LD_EXP 11
13302: PPUSH
13303: LD_STRING DM-4-Contact
13305: PPUSH
13306: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13310: LD_EXP 9
13314: PPUSH
13315: LD_STRING DS-4-Contact
13317: PPUSH
13318: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13322: LD_EXP 11
13326: PPUSH
13327: LD_STRING DM-5-Contact
13329: PPUSH
13330: CALL_OW 94
// end ; DialogueOff ;
13334: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13338: LD_STRING O3
13340: PPUSH
13341: CALL_OW 337
// end ;
13345: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13346: LD_EXP 2
13350: PUSH
13351: LD_INT 1
13353: EQUAL
13354: PUSH
13355: LD_EXP 18
13359: PUSH
13360: LD_INT 15
13362: PUSH
13363: LD_INT 20
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_OWVAR 67
13378: ARRAY
13379: GREATEREQUAL
13380: AND
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 8
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: AND
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 8
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 3
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: PUSH
13441: LD_INT 5
13443: GREATEREQUAL
13444: AND
13445: IFFALSE 13968
13447: GO 13449
13449: DISABLE
13450: LD_INT 0
13452: PPUSH
13453: PPUSH
13454: PPUSH
13455: PPUSH
// begin DialogueOn ;
13456: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13460: LD_EXP 13
13464: PPUSH
13465: LD_STRING DF-1-Leg
13467: PPUSH
13468: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13472: LD_EXP 9
13476: PPUSH
13477: LD_STRING D
13479: PUSH
13480: LD_STRING I
13482: PUSH
13483: LD_STRING J
13485: PUSH
13486: LD_STRING S
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PUSH
13494: LD_EXP 25
13498: ARRAY
13499: STR
13500: PUSH
13501: LD_STRING -1-Leg
13503: STR
13504: PPUSH
13505: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13509: LD_EXP 13
13513: PPUSH
13514: LD_STRING DF-2-Leg
13516: PPUSH
13517: CALL_OW 94
// DialogueOff ;
13521: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13525: LD_STRING QLegionOffer
13527: PPUSH
13528: CALL_OW 97
13532: PUSH
13533: LD_INT 1
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13544
13541: POP
// ; 2 :
13542: GO 13558
13544: LD_INT 2
13546: DOUBLE
13547: EQUAL
13548: IFTRUE 13552
13550: GO 13557
13552: POP
// exit ; end ;
13553: GO 13968
13555: GO 13558
13557: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13558: LD_EXP 9
13562: PPUSH
13563: LD_STRING D
13565: PUSH
13566: LD_STRING I
13568: PUSH
13569: LD_STRING J
13571: PUSH
13572: LD_STRING S
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_EXP 25
13584: ARRAY
13585: STR
13586: PUSH
13587: LD_STRING -2-Leg
13589: STR
13590: PPUSH
13591: CALL_OW 88
// legOfferAccepted := true ;
13595: LD_ADDR_EXP 20
13599: PUSH
13600: LD_INT 1
13602: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13603: LD_INT 21
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13613: LD_INT 190
13615: PPUSH
13616: LD_INT 227
13618: PPUSH
13619: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_INT 16800
13630: PUSH
13631: LD_INT 14700
13633: PUSH
13634: LD_INT 12600
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: PUSH
13642: LD_OWVAR 67
13646: ARRAY
13647: ST_TO_ADDR
// sib := 100 ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_INT 100
13655: ST_TO_ADDR
// disableGlobalTimer := true ;
13656: LD_ADDR_EXP 4
13660: PUSH
13661: LD_INT 1
13663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13664: LD_INT 35
13666: PPUSH
13667: CALL_OW 67
// time := time - 0 0$1 ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_VAR 0 1
13680: PUSH
13681: LD_INT 35
13683: MINUS
13684: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13685: LD_ADDR_VAR 0 3
13689: PUSH
13690: LD_INT 21
13692: PPUSH
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 287
13700: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13701: LD_ADDR_OWVAR 47
13705: PUSH
13706: LD_STRING #SkrTime
13708: PUSH
13709: LD_OWVAR 1
13713: PUSH
13714: LD_STRING #Skr-LegOffer
13716: PUSH
13717: LD_VAR 0 2
13721: PUSH
13722: LD_VAR 0 1
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: ST_TO_ADDR
// if sources then
13734: LD_VAR 0 3
13738: IFFALSE 13770
// begin sib := sib - sources * 10 ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_VAR 0 2
13749: PUSH
13750: LD_VAR 0 3
13754: PUSH
13755: LD_INT 10
13757: MUL
13758: MINUS
13759: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13760: LD_INT 21
13762: PPUSH
13763: LD_INT 3
13765: PPUSH
13766: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13770: LD_VAR 0 1
13774: PUSH
13775: LD_INT 0
13777: EQUAL
13778: PUSH
13779: LD_VAR 0 2
13783: PUSH
13784: LD_INT 0
13786: LESSEQUAL
13787: OR
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_INT 8
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: NOT
13804: OR
13805: IFFALSE 13664
// SetAreaMapShow ( legOfferArea , 0 ) ;
13807: LD_INT 21
13809: PPUSH
13810: LD_INT 0
13812: PPUSH
13813: CALL_OW 424
// disableGlobalTimer := false ;
13817: LD_ADDR_EXP 4
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// if sib <= 0 then
13825: LD_VAR 0 2
13829: PUSH
13830: LD_INT 0
13832: LESSEQUAL
13833: IFFALSE 13949
// begin legChangeSide := true ;
13835: LD_ADDR_EXP 21
13839: PUSH
13840: LD_INT 1
13842: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13843: LD_EXP 13
13847: PPUSH
13848: LD_STRING DF-4y-Leg
13850: PPUSH
13851: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13855: LD_STRING O3a
13857: PPUSH
13858: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13862: LD_INT 8
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13872: LD_INT 8
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13888: LD_INT 8
13890: PPUSH
13891: LD_INT 4
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13904: LD_INT 8
13906: PPUSH
13907: LD_INT 6
13909: PPUSH
13910: LD_INT 2
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 3
13925: PPUSH
13926: LD_INT 2
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 80
// wait ( 0 0$30 ) ;
13936: LD_INT 1050
13938: PPUSH
13939: CALL_OW 67
// PrepareLegionReinforcements ;
13943: CALL 10243 0 0
// end else
13947: GO 13968
// begin ChangeMissionObjectives ( O3 ) ;
13949: LD_STRING O3
13951: PPUSH
13952: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13956: LD_EXP 13
13960: PPUSH
13961: LD_STRING DF-4n-Leg
13963: PPUSH
13964: CALL_OW 94
// end ; end ;
13968: PPOPN 4
13970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13971: LD_INT 22
13973: PUSH
13974: LD_INT 8
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 1
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: PUSH
14000: LD_INT 0
14002: EQUAL
14003: PUSH
14004: LD_INT 8
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 81
14014: PUSH
14015: LD_INT 2
14017: EQUAL
14018: AND
14019: IFFALSE 14031
14021: GO 14023
14023: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14024: LD_STRING O3a
14026: PPUSH
14027: CALL_OW 337
14031: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14032: LD_EXP 2
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: PUSH
14041: LD_EXP 3
14045: AND
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 21
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 69
14075: PUSH
14076: LD_INT 0
14078: EQUAL
14079: AND
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 30
14093: PUSH
14094: LD_INT 1
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 69
14109: PUSH
14110: LD_INT 0
14112: EQUAL
14113: AND
14114: IFFALSE 14352
14116: GO 14118
14118: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14119: LD_EXP 9
14123: PPUSH
14124: LD_STRING D
14126: PUSH
14127: LD_STRING I
14129: PUSH
14130: LD_STRING J
14132: PUSH
14133: LD_STRING S
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_EXP 25
14145: ARRAY
14146: STR
14147: PUSH
14148: LD_STRING -1-Win
14150: STR
14151: PPUSH
14152: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14156: LD_OWVAR 1
14160: PUSH
14161: LD_INT 315000
14163: PUSH
14164: LD_INT 273000
14166: PUSH
14167: LD_INT 231000
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: LD_OWVAR 67
14179: ARRAY
14180: GREATEREQUAL
14181: IFFALSE 14196
// AddMedal ( med1 , - 1 ) else
14183: LD_STRING med1
14185: PPUSH
14186: LD_INT 1
14188: NEG
14189: PPUSH
14190: CALL_OW 101
14194: GO 14206
// AddMedal ( med1 , 1 ) ;
14196: LD_STRING med1
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14206: LD_EXP 22
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 15
14216: PUSH
14217: LD_INT 10
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_OWVAR 67
14229: ARRAY
14230: GREATEREQUAL
14231: IFFALSE 14246
// AddMedal ( med2 , - 1 ) else
14233: LD_STRING med2
14235: PPUSH
14236: LD_INT 1
14238: NEG
14239: PPUSH
14240: CALL_OW 101
14244: GO 14256
// AddMedal ( med2 , 1 ) ;
14246: LD_STRING med2
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14256: LD_INT 8
14258: PPUSH
14259: LD_INT 1
14261: PPUSH
14262: CALL_OW 81
14266: PUSH
14267: LD_INT 1
14269: EQUAL
14270: IFFALSE 14284
// AddMedal ( med3 , 2 ) else
14272: LD_STRING med3
14274: PPUSH
14275: LD_INT 2
14277: PPUSH
14278: CALL_OW 101
14282: GO 14341
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14284: LD_INT 22
14286: PUSH
14287: LD_INT 8
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 21
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PPUSH
14308: CALL_OW 69
14312: PUSH
14313: LD_INT 0
14315: EQUAL
14316: IFFALSE 14330
// AddMedal ( med3 , 1 ) else
14318: LD_STRING med3
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 101
14328: GO 14341
// AddMedal ( med3 , - 1 ) ;
14330: LD_STRING med3
14332: PPUSH
14333: LD_INT 1
14335: NEG
14336: PPUSH
14337: CALL_OW 101
// GiveMedals ( MAIN ) ;
14341: LD_STRING MAIN
14343: PPUSH
14344: CALL_OW 102
// YouWin ;
14348: CALL_OW 103
// end ;
14352: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14353: LD_EXP 2
14357: PUSH
14358: LD_INT 1
14360: EQUAL
14361: PUSH
14362: LD_EXP 16
14366: AND
14367: PUSH
14368: LD_INT 20
14370: PPUSH
14371: LD_INT 81
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 70
14385: AND
14386: IFFALSE 14665
14388: GO 14390
14390: DISABLE
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
// begin enable ;
14398: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_INT 20
14406: PPUSH
14407: LD_INT 81
14409: PUSH
14410: LD_INT 8
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 70
14421: ST_TO_ADDR
// if not tmp then
14422: LD_VAR 0 3
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14665
// for i in tmp do
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_VAR 0 3
14440: PUSH
14441: FOR_IN
14442: IFFALSE 14663
// begin x := GetX ( i ) ;
14444: LD_ADDR_VAR 0 4
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 250
14458: ST_TO_ADDR
// y := GetY ( i ) ;
14459: LD_ADDR_VAR 0 5
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 251
14473: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14474: LD_VAR 0 4
14478: PPUSH
14479: LD_VAR 0 5
14483: PPUSH
14484: CALL_OW 458
14488: IFFALSE 14661
// begin LaunchMineAtPos ( x , y , 8 ) ;
14490: LD_VAR 0 4
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: LD_INT 8
14502: PPUSH
14503: CALL_OW 456
// if not dialogueMineDetected then
14507: LD_EXP 28
14511: NOT
14512: IFFALSE 14573
// begin CenterNowOnXY ( x , y ) ;
14514: LD_VAR 0 4
14518: PPUSH
14519: LD_VAR 0 5
14523: PPUSH
14524: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14528: LD_EXP 9
14532: PPUSH
14533: LD_STRING D
14535: PUSH
14536: LD_STRING I
14538: PUSH
14539: LD_STRING J
14541: PUSH
14542: LD_STRING S
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: LD_EXP 25
14554: ARRAY
14555: STR
14556: PUSH
14557: LD_STRING -1-Mine
14559: STR
14560: PPUSH
14561: CALL_OW 88
// dialogueMineDetected := true ;
14565: LD_ADDR_EXP 28
14569: PUSH
14570: LD_INT 1
14572: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: DOUBLE
14579: LD_INT 1
14581: DEC
14582: ST_TO_ADDR
14583: LD_EXP 16
14587: PUSH
14588: FOR_TO
14589: IFFALSE 14659
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14591: LD_EXP 16
14595: PUSH
14596: LD_VAR 0 2
14600: ARRAY
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PUSH
14606: LD_VAR 0 4
14610: EQUAL
14611: PUSH
14612: LD_EXP 16
14616: PUSH
14617: LD_VAR 0 2
14621: ARRAY
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: PUSH
14627: LD_VAR 0 5
14631: EQUAL
14632: AND
14633: IFFALSE 14657
// begin staticMines := Delete ( staticMines , j ) ;
14635: LD_ADDR_EXP 16
14639: PUSH
14640: LD_EXP 16
14644: PPUSH
14645: LD_VAR 0 2
14649: PPUSH
14650: CALL_OW 3
14654: ST_TO_ADDR
// break ;
14655: GO 14659
// end ;
14657: GO 14588
14659: POP
14660: POP
// end ; end ;
14661: GO 14441
14663: POP
14664: POP
// end ;
14665: PPOPN 5
14667: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14668: LD_EXP 2
14672: PUSH
14673: LD_INT 1
14675: EQUAL
14676: PUSH
14677: LD_EXP 3
14681: AND
14682: PUSH
14683: LD_EXP 23
14687: AND
14688: PUSH
14689: LD_EXP 36
14693: PUSH
14694: LD_EXP 7
14698: ARRAY
14699: PPUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 3
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 72
14714: AND
14715: IFFALSE 14919
14717: GO 14719
14719: DISABLE
14720: LD_INT 0
14722: PPUSH
14723: PPUSH
// begin enable ;
14724: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14725: LD_EXP 7
14729: PPUSH
14730: LD_INT 23
14732: PUSH
14733: LD_INT 3
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: LD_INT 48
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: PPUSH
14751: CALL 85167 0 2
// repeat wait ( 0 0$1 ) ;
14755: LD_INT 35
14757: PPUSH
14758: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14762: LD_INT 22
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 34
14774: PUSH
14775: LD_INT 48
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: IFFALSE 14755
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14792: LD_ADDR_VAR 0 1
14796: PUSH
14797: LD_INT 22
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 34
14809: PUSH
14810: LD_INT 48
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14826: LD_ADDR_VAR 0 2
14830: PUSH
14831: LD_INT 81
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 21
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: ST_TO_ADDR
// if e then
14860: LD_VAR 0 2
14864: IFFALSE 14890
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_VAR 0 2
14875: PPUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 1
14883: ARRAY
14884: PPUSH
14885: CALL_OW 74
14889: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: LD_VAR 0 2
14899: PPUSH
14900: CALL_OW 250
14904: PPUSH
14905: LD_VAR 0 2
14909: PPUSH
14910: CALL_OW 251
14914: PPUSH
14915: CALL_OW 116
// end ;
14919: PPOPN 2
14921: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14922: LD_OWVAR 67
14926: PUSH
14927: LD_INT 1
14929: GREATER
14930: PUSH
14931: LD_EXP 36
14935: PUSH
14936: LD_EXP 7
14940: ARRAY
14941: PPUSH
14942: LD_INT 25
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 72
14956: AND
14957: PUSH
14958: LD_EXP 2
14962: PUSH
14963: LD_INT 1
14965: EQUAL
14966: AND
14967: PUSH
14968: LD_EXP 3
14972: AND
14973: PUSH
14974: LD_INT 23
14976: PPUSH
14977: LD_INT 3
14979: PPUSH
14980: CALL_OW 321
14984: PUSH
14985: LD_INT 2
14987: EQUAL
14988: AND
14989: IFFALSE 15116
14991: GO 14993
14993: DISABLE
14994: LD_INT 0
14996: PPUSH
14997: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_EXP 36
15007: PUSH
15008: LD_EXP 7
15012: ARRAY
15013: PPUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PPUSH
15024: CALL_OW 72
15028: ST_TO_ADDR
// if not tmp then
15029: LD_VAR 0 1
15033: NOT
15034: IFFALSE 15038
// exit ;
15036: GO 15116
// for i in tmp do
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_VAR 0 1
15047: PUSH
15048: FOR_IN
15049: IFFALSE 15095
// begin SetTag ( i , 29 ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: LD_INT 29
15058: PPUSH
15059: CALL_OW 109
// ComExitBuilding ( i ) ;
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15072: LD_VAR 0 2
15076: PPUSH
15077: LD_INT 37
15079: PPUSH
15080: LD_INT 97
15082: PPUSH
15083: LD_INT 133
15085: PPUSH
15086: LD_INT 0
15088: PPUSH
15089: CALL_OW 230
// end ;
15093: GO 15048
15095: POP
15096: POP
// wait ( 1 1$00 ) ;
15097: LD_INT 2100
15099: PPUSH
15100: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15104: LD_EXP 7
15108: PPUSH
15109: LD_INT 29
15111: PPUSH
15112: CALL 66024 0 2
// end ;
15116: PPOPN 2
15118: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15119: LD_EXP 2
15123: PUSH
15124: LD_INT 1
15126: EQUAL
15127: PUSH
15128: LD_INT 84
15130: PPUSH
15131: LD_INT 128
15133: PPUSH
15134: CALL_OW 428
15138: PPUSH
15139: CALL_OW 266
15143: PUSH
15144: LD_INT 1
15146: EQUAL
15147: AND
15148: IFFALSE 15321
15150: GO 15152
15152: DISABLE
15153: LD_INT 0
15155: PPUSH
15156: PPUSH
// begin enable ;
15157: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15158: LD_ADDR_VAR 0 2
15162: PUSH
15163: LD_INT 84
15165: PPUSH
15166: LD_INT 128
15168: PPUSH
15169: CALL_OW 428
15173: ST_TO_ADDR
// uc_side := 3 ;
15174: LD_ADDR_OWVAR 20
15178: PUSH
15179: LD_INT 3
15181: ST_TO_ADDR
// uc_nation := 3 ;
15182: LD_ADDR_OWVAR 21
15186: PUSH
15187: LD_INT 3
15189: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15190: LD_INT 21
15192: PPUSH
15193: LD_INT 3
15195: PPUSH
15196: LD_INT 3
15198: PPUSH
15199: LD_INT 51
15201: PPUSH
15202: LD_INT 0
15204: PPUSH
15205: CALL 25946 0 5
// veh := CreateVehicle ;
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: CALL_OW 45
15218: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15219: LD_VAR 0 1
15223: PPUSH
15224: LD_INT 126
15226: PPUSH
15227: LD_INT 227
15229: PPUSH
15230: LD_INT 0
15232: PPUSH
15233: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15237: LD_VAR 0 1
15241: PPUSH
15242: LD_INT 2
15244: PPUSH
15245: LD_INT 100
15247: PPUSH
15248: CALL_OW 290
// ComGive ( veh , depot ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_VAR 0 2
15261: PPUSH
15262: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 126
15273: PPUSH
15274: LD_INT 227
15276: PPUSH
15277: CALL_OW 171
// wait ( 0 0$10 ) ;
15281: LD_INT 350
15283: PPUSH
15284: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 126
15302: PPUSH
15303: LD_INT 227
15305: PPUSH
15306: CALL_OW 307
15310: IFFALSE 15288
// RemoveUnit ( veh ) ;
15312: LD_VAR 0 1
15316: PPUSH
15317: CALL_OW 64
// end ;
15321: PPOPN 2
15323: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15324: LD_EXP 2
15328: PUSH
15329: LD_INT 1
15331: EQUAL
15332: PUSH
15333: LD_EXP 27
15337: AND
15338: PUSH
15339: LD_EXP 25
15343: PUSH
15344: LD_INT 2
15346: EQUAL
15347: AND
15348: IFFALSE 15540
15350: GO 15352
15352: DISABLE
15353: LD_INT 0
15355: PPUSH
15356: PPUSH
// begin enable ;
15357: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15358: LD_OWVAR 1
15362: PUSH
15363: LD_INT 105000
15365: PUSH
15366: LD_INT 84000
15368: PUSH
15369: LD_INT 63000
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: LD_OWVAR 67
15381: ARRAY
15382: GREATEREQUAL
15383: IFFALSE 15386
// disable ;
15385: DISABLE
// uc_side := 4 ;
15386: LD_ADDR_OWVAR 20
15390: PUSH
15391: LD_INT 4
15393: ST_TO_ADDR
// uc_nation := 1 ;
15394: LD_ADDR_OWVAR 21
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15402: LD_INT 2
15404: PPUSH
15405: LD_INT 3
15407: PPUSH
15408: LD_INT 3
15410: PPUSH
15411: LD_INT 12
15413: PPUSH
15414: LD_INT 0
15416: PPUSH
15417: CALL 25946 0 5
// veh := CreateVehicle ;
15421: LD_ADDR_VAR 0 1
15425: PUSH
15426: CALL_OW 45
15430: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15431: LD_VAR 0 1
15435: PPUSH
15436: LD_INT 229
15438: PPUSH
15439: LD_INT 226
15441: PPUSH
15442: LD_INT 0
15444: PPUSH
15445: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15449: LD_VAR 0 1
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: LD_INT 100
15459: PPUSH
15460: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15464: LD_VAR 0 1
15468: PPUSH
15469: LD_INT 25
15471: PPUSH
15472: CALL_OW 173
// AddComUnload ( veh ) ;
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 229
15492: PPUSH
15493: LD_INT 226
15495: PPUSH
15496: CALL_OW 171
// wait ( 0 0$10 ) ;
15500: LD_INT 350
15502: PPUSH
15503: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15507: LD_INT 35
15509: PPUSH
15510: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 229
15521: PPUSH
15522: LD_INT 226
15524: PPUSH
15525: CALL_OW 307
15529: IFFALSE 15507
// RemoveUnit ( veh ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 64
// end ;
15540: PPOPN 2
15542: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15543: LD_EXP 2
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: PUSH
15552: LD_EXP 3
15556: AND
15557: PUSH
15558: LD_EXP 24
15562: AND
15563: IFFALSE 15896
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin enable ;
15575: ENABLE
// tmp := [ ] ;
15576: LD_ADDR_VAR 0 4
15580: PUSH
15581: EMPTY
15582: ST_TO_ADDR
// if commander = 1 then
15583: LD_EXP 25
15587: PUSH
15588: LD_INT 1
15590: EQUAL
15591: IFFALSE 15603
// amount := 3 else
15593: LD_ADDR_VAR 0 5
15597: PUSH
15598: LD_INT 3
15600: ST_TO_ADDR
15601: GO 15611
// amount := 2 ;
15603: LD_ADDR_VAR 0 5
15607: PUSH
15608: LD_INT 2
15610: ST_TO_ADDR
// for i = 1 to amount do
15611: LD_ADDR_VAR 0 1
15615: PUSH
15616: DOUBLE
15617: LD_INT 1
15619: DEC
15620: ST_TO_ADDR
15621: LD_VAR 0 5
15625: PUSH
15626: FOR_TO
15627: IFFALSE 15791
// begin wait ( 0 0$5 ) ;
15629: LD_INT 175
15631: PPUSH
15632: CALL_OW 67
// for j = 1 to 3 do
15636: LD_ADDR_VAR 0 2
15640: PUSH
15641: DOUBLE
15642: LD_INT 1
15644: DEC
15645: ST_TO_ADDR
15646: LD_INT 3
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15787
// begin uc_side := 4 ;
15652: LD_ADDR_OWVAR 20
15656: PUSH
15657: LD_INT 4
15659: ST_TO_ADDR
// uc_nation := 1 ;
15660: LD_ADDR_OWVAR 21
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15668: LD_INT 3
15670: PUSH
15671: LD_INT 5
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 2
15683: PPUSH
15684: CALL_OW 12
15688: ARRAY
15689: PPUSH
15690: LD_INT 3
15692: PPUSH
15693: LD_INT 3
15695: PPUSH
15696: LD_INT 9
15698: PUSH
15699: LD_INT 5
15701: PUSH
15702: LD_INT 7
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 1
15712: PPUSH
15713: LD_INT 3
15715: PPUSH
15716: CALL_OW 12
15720: ARRAY
15721: PPUSH
15722: LD_INT 100
15724: PPUSH
15725: CALL 25946 0 5
// veh := CreateVehicle ;
15729: LD_ADDR_VAR 0 3
15733: PUSH
15734: CALL_OW 45
15738: ST_TO_ADDR
// tmp := tmp ^ veh ;
15739: LD_ADDR_VAR 0 4
15743: PUSH
15744: LD_VAR 0 4
15748: PUSH
15749: LD_VAR 0 3
15753: ADD
15754: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_INT 22
15762: PPUSH
15763: LD_INT 0
15765: PPUSH
15766: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15770: LD_VAR 0 3
15774: PPUSH
15775: LD_INT 119
15777: PPUSH
15778: LD_INT 215
15780: PPUSH
15781: CALL_OW 111
// end ;
15785: GO 15649
15787: POP
15788: POP
// end ;
15789: GO 15626
15791: POP
15792: POP
// wait ( 0 0$3 ) ;
15793: LD_INT 105
15795: PPUSH
15796: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15800: LD_INT 35
15802: PPUSH
15803: CALL_OW 67
// for i in tmp do
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: LD_VAR 0 4
15816: PUSH
15817: FOR_IN
15818: IFFALSE 15885
// if IsDead ( i ) then
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 301
15829: IFFALSE 15849
// tmp := tmp diff i else
15831: LD_ADDR_VAR 0 4
15835: PUSH
15836: LD_VAR 0 4
15840: PUSH
15841: LD_VAR 0 1
15845: DIFF
15846: ST_TO_ADDR
15847: GO 15883
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_INT 81
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 74
15878: PPUSH
15879: CALL_OW 115
15883: GO 15817
15885: POP
15886: POP
// until tmp = [ ] ;
15887: LD_VAR 0 4
15891: PUSH
15892: EMPTY
15893: EQUAL
15894: IFFALSE 15800
// end ;
15896: PPOPN 5
15898: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15899: LD_EXP 2
15903: PUSH
15904: LD_INT 1
15906: EQUAL
15907: PUSH
15908: LD_EXP 3
15912: AND
15913: IFFALSE 16014
15915: GO 15917
15917: DISABLE
15918: LD_INT 0
15920: PPUSH
15921: PPUSH
// begin enable ;
15922: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_INT 3
15930: PUSH
15931: LD_INT 22
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 32
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: ST_TO_ADDR
// if tmp then
15964: LD_VAR 0 2
15968: IFFALSE 16014
// for i in tmp do
15970: LD_ADDR_VAR 0 1
15974: PUSH
15975: LD_VAR 0 2
15979: PUSH
15980: FOR_IN
15981: IFFALSE 16012
// if GetFuel ( i ) < 3 then
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 261
15992: PUSH
15993: LD_INT 3
15995: LESS
15996: IFFALSE 16010
// SetFuel ( i , 3 ) ;
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 3
16005: PPUSH
16006: CALL_OW 240
16010: GO 15980
16012: POP
16013: POP
// end ;
16014: PPOPN 2
16016: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16017: LD_EXP 3
16021: PUSH
16022: LD_INT 8
16024: PPUSH
16025: LD_INT 4
16027: PPUSH
16028: CALL_OW 81
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: AND
16037: IFFALSE 16247
16039: GO 16041
16041: DISABLE
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
// begin enable ;
16047: ENABLE
// tmp := [ ] ;
16048: LD_ADDR_VAR 0 3
16052: PUSH
16053: EMPTY
16054: ST_TO_ADDR
// for i = 1 to 4 do
16055: LD_ADDR_VAR 0 1
16059: PUSH
16060: DOUBLE
16061: LD_INT 1
16063: DEC
16064: ST_TO_ADDR
16065: LD_INT 4
16067: PUSH
16068: FOR_TO
16069: IFFALSE 16213
// begin uc_side := 8 ;
16071: LD_ADDR_OWVAR 20
16075: PUSH
16076: LD_INT 8
16078: ST_TO_ADDR
// uc_nation := nation_arabian ;
16079: LD_ADDR_OWVAR 21
16083: PUSH
16084: LD_INT 2
16086: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16087: LD_INT 11
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: LD_INT 5
16095: PPUSH
16096: LD_INT 24
16098: PUSH
16099: LD_INT 23
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 1
16108: PPUSH
16109: LD_INT 2
16111: PPUSH
16112: CALL_OW 12
16116: ARRAY
16117: PPUSH
16118: LD_INT 60
16120: PPUSH
16121: LD_INT 80
16123: PPUSH
16124: CALL_OW 12
16128: PPUSH
16129: CALL 25946 0 5
// un := CreateVehicle ;
16133: LD_ADDR_VAR 0 2
16137: PUSH
16138: CALL_OW 45
16142: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16143: LD_VAR 0 2
16147: PPUSH
16148: LD_INT 2
16150: PPUSH
16151: CALL_OW 233
// tmp := tmp ^ un ;
16155: LD_ADDR_VAR 0 3
16159: PUSH
16160: LD_VAR 0 3
16164: PUSH
16165: LD_VAR 0 2
16169: ADD
16170: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16171: LD_VAR 0 2
16175: PPUSH
16176: LD_INT 88
16178: PPUSH
16179: LD_INT 2
16181: PPUSH
16182: LD_INT 0
16184: PPUSH
16185: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16189: LD_VAR 0 2
16193: PPUSH
16194: LD_INT 93
16196: PPUSH
16197: LD_INT 13
16199: PPUSH
16200: CALL_OW 111
// wait ( 0 0$2 ) ;
16204: LD_INT 70
16206: PPUSH
16207: CALL_OW 67
// end ;
16211: GO 16068
16213: POP
16214: POP
// for i in tmp do
16215: LD_ADDR_VAR 0 1
16219: PUSH
16220: LD_VAR 0 3
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16245
// AddComMoveXY ( i , 136 , 19 ) ;
16228: LD_VAR 0 1
16232: PPUSH
16233: LD_INT 136
16235: PPUSH
16236: LD_INT 19
16238: PPUSH
16239: CALL_OW 171
16243: GO 16225
16245: POP
16246: POP
// end ;
16247: PPOPN 3
16249: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16250: LD_EXP 3
16254: PUSH
16255: LD_EXP 6
16259: PPUSH
16260: LD_INT 1
16262: PPUSH
16263: CALL 86522 0 2
16267: NOT
16268: AND
16269: IFFALSE 17188
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
// begin enable ;
16280: ENABLE
// base := mc_leg ;
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_EXP 6
16290: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16291: LD_INT 22
16293: PUSH
16294: LD_INT 8
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 23
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 30
16313: PUSH
16314: LD_INT 3
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 17188
// if Prob ( 40 ) then
16335: LD_INT 40
16337: PPUSH
16338: CALL_OW 13
16342: IFFALSE 16471
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16344: LD_VAR 0 2
16348: PPUSH
16349: LD_INT 13
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: LD_INT 28
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 13
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 28
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 13
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: LD_INT 2
16393: PUSH
16394: LD_INT 28
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 13
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 28
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 13
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: LD_INT 2
16429: PUSH
16430: LD_INT 28
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 13
16441: PUSH
16442: LD_INT 1
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: LD_INT 26
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PPUSH
16465: CALL 85167 0 2
// end else
16469: GO 16688
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 13
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 27
16487: PUSH
16488: LD_INT 26
16490: PUSH
16491: LD_INT 26
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: PPUSH
16502: LD_INT 3
16504: PPUSH
16505: CALL_OW 12
16509: ARRAY
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 13
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 2
16525: PUSH
16526: LD_INT 27
16528: PUSH
16529: LD_INT 26
16531: PUSH
16532: LD_INT 26
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 1
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: CALL_OW 12
16550: ARRAY
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 13
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: LD_INT 26
16569: PUSH
16570: LD_INT 26
16572: PUSH
16573: LD_INT 29
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: PPUSH
16584: LD_INT 3
16586: PPUSH
16587: CALL_OW 12
16591: ARRAY
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 13
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: LD_INT 2
16607: PUSH
16608: LD_INT 26
16610: PUSH
16611: LD_INT 29
16613: PUSH
16614: LD_INT 29
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 1
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: CALL_OW 12
16632: ARRAY
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 13
16642: PUSH
16643: LD_INT 1
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 29
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 13
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: LD_INT 2
16666: PUSH
16667: LD_INT 26
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL 85167 0 2
// end ; repeat wait ( 0 0$1 ) ;
16688: LD_INT 35
16690: PPUSH
16691: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL 86522 0 2
16707: PUSH
16708: LD_INT 6
16710: GREATEREQUAL
16711: PUSH
16712: LD_OWVAR 1
16716: PUSH
16717: LD_INT 21000
16719: MOD
16720: PUSH
16721: LD_INT 0
16723: EQUAL
16724: OR
16725: IFFALSE 16688
// wait ( 0 0$30 ) ;
16727: LD_INT 1050
16729: PPUSH
16730: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16734: LD_ADDR_VAR 0 3
16738: PUSH
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_INT 1
16746: PPUSH
16747: CALL 86522 0 2
16751: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16752: LD_ADDR_EXP 55
16756: PUSH
16757: LD_EXP 55
16761: PPUSH
16762: LD_VAR 0 2
16766: PPUSH
16767: LD_EXP 55
16771: PUSH
16772: LD_VAR 0 2
16776: ARRAY
16777: PUSH
16778: LD_VAR 0 3
16782: DIFF
16783: PPUSH
16784: CALL_OW 1
16788: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 0
16796: PPUSH
16797: LD_INT 2
16799: PPUSH
16800: CALL_OW 12
16804: ST_TO_ADDR
// if legChangeSide then
16805: LD_EXP 21
16809: IFFALSE 16819
// target := 2 ;
16811: LD_ADDR_VAR 0 4
16815: PUSH
16816: LD_INT 2
16818: ST_TO_ADDR
// if target = 2 then
16819: LD_VAR 0 4
16823: PUSH
16824: LD_INT 2
16826: EQUAL
16827: IFFALSE 16955
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16829: LD_ADDR_VAR 0 3
16833: PUSH
16834: LD_VAR 0 3
16838: PPUSH
16839: LD_INT 24
16841: PUSH
16842: LD_INT 250
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 72
16853: ST_TO_ADDR
// for i in tmp do
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_VAR 0 3
16863: PUSH
16864: FOR_IN
16865: IFFALSE 16905
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_INT 112
16874: PPUSH
16875: LD_INT 64
16877: PPUSH
16878: CALL_OW 297
16882: PUSH
16883: LD_INT 9
16885: GREATER
16886: IFFALSE 16903
// ComMoveXY ( i , 112 , 64 ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 111
16903: GO 16864
16905: POP
16906: POP
// wait ( 0 0$1 ) ;
16907: LD_INT 35
16909: PPUSH
16910: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16914: LD_VAR 0 3
16918: PPUSH
16919: LD_INT 92
16921: PUSH
16922: LD_INT 112
16924: PUSH
16925: LD_INT 64
16927: PUSH
16928: LD_INT 9
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PPUSH
16937: CALL_OW 72
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_INT 1
16949: MINUS
16950: GREATEREQUAL
16951: IFFALSE 16829
// end else
16953: GO 17079
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_INT 24
16967: PUSH
16968: LD_INT 250
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PPUSH
16975: CALL_OW 72
16979: ST_TO_ADDR
// for i in tmp do
16980: LD_ADDR_VAR 0 1
16984: PUSH
16985: LD_VAR 0 3
16989: PUSH
16990: FOR_IN
16991: IFFALSE 17031
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_INT 174
17000: PPUSH
17001: LD_INT 94
17003: PPUSH
17004: CALL_OW 297
17008: PUSH
17009: LD_INT 9
17011: GREATER
17012: IFFALSE 17029
// ComMoveXY ( i , 174 , 94 ) ;
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 111
17029: GO 16990
17031: POP
17032: POP
// wait ( 0 0$1 ) ;
17033: LD_INT 35
17035: PPUSH
17036: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 92
17047: PUSH
17048: LD_INT 174
17050: PUSH
17051: LD_INT 94
17053: PUSH
17054: LD_INT 9
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: PPUSH
17063: CALL_OW 72
17067: PUSH
17068: LD_VAR 0 3
17072: PUSH
17073: LD_INT 1
17075: MINUS
17076: GREATEREQUAL
17077: IFFALSE 16955
// end ; repeat wait ( 0 0$1 ) ;
17079: LD_INT 35
17081: PPUSH
17082: CALL_OW 67
// for i in tmp do
17086: LD_ADDR_VAR 0 1
17090: PUSH
17091: LD_VAR 0 3
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17179
// begin if GetLives ( i ) > 251 then
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 256
17108: PUSH
17109: LD_INT 251
17111: GREATER
17112: IFFALSE 17150
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17114: LD_VAR 0 1
17118: PPUSH
17119: LD_INT 81
17121: PUSH
17122: LD_INT 8
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: PPUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 74
17143: PPUSH
17144: CALL_OW 115
17148: GO 17177
// if IsDead ( i ) then
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 301
17159: IFFALSE 17177
// tmp := tmp diff i ;
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_VAR 0 3
17170: PUSH
17171: LD_VAR 0 1
17175: DIFF
17176: ST_TO_ADDR
// end ;
17177: GO 17096
17179: POP
17180: POP
// until not tmp ;
17181: LD_VAR 0 3
17185: NOT
17186: IFFALSE 17079
// end ;
17188: PPOPN 4
17190: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17191: LD_EXP 3
17195: PUSH
17196: LD_EXP 8
17200: PPUSH
17201: LD_INT 1
17203: PPUSH
17204: CALL 86522 0 2
17208: NOT
17209: AND
17210: IFFALSE 18198
17212: GO 17214
17214: DISABLE
17215: LD_INT 0
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
// begin enable ;
17222: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17223: LD_EXP 36
17227: PUSH
17228: LD_EXP 8
17232: ARRAY
17233: PPUSH
17234: LD_INT 22
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 30
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PPUSH
17258: CALL_OW 72
17262: NOT
17263: IFFALSE 17267
// exit ;
17265: GO 18198
// base := mc_rus_2 ;
17267: LD_ADDR_VAR 0 2
17271: PUSH
17272: LD_EXP 8
17276: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17277: LD_ADDR_VAR 0 5
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: LD_INT 34
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: ST_TO_ADDR
// if Prob ( 40 ) then
17311: LD_INT 40
17313: PPUSH
17314: CALL_OW 13
17318: IFFALSE 17447
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17320: LD_VAR 0 2
17324: PPUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: LD_INT 49
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 3
17351: PUSH
17352: LD_INT 49
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_INT 3
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 49
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 24
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: LD_INT 3
17387: PUSH
17388: LD_INT 46
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 24
17399: PUSH
17400: LD_INT 3
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: LD_INT 46
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 24
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: LD_INT 46
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL 85167 0 2
// end else
17445: GO 17572
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17447: LD_VAR 0 2
17451: PPUSH
17452: LD_INT 24
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 47
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 24
17472: PUSH
17473: LD_INT 3
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: LD_INT 47
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 24
17490: PUSH
17491: LD_INT 3
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: LD_INT 47
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 24
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 46
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 24
17526: PUSH
17527: LD_INT 3
17529: PUSH
17530: LD_INT 3
17532: PUSH
17533: LD_INT 46
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 24
17544: PUSH
17545: LD_INT 3
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: LD_INT 46
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL 85167 0 2
// end ; if Difficulty > 1 then
17572: LD_OWVAR 67
17576: PUSH
17577: LD_INT 1
17579: GREATER
17580: IFFALSE 17612
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17582: LD_VAR 0 2
17586: PPUSH
17587: LD_INT 24
17589: PUSH
17590: LD_INT 3
17592: PUSH
17593: LD_INT 3
17595: PUSH
17596: LD_INT 47
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: PPUSH
17608: CALL 85167 0 2
// repeat wait ( 0 0$1 ) ;
17612: LD_INT 35
17614: PPUSH
17615: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17619: LD_VAR 0 2
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL 86522 0 2
17631: PUSH
17632: LD_INT 6
17634: PUSH
17635: LD_INT 7
17637: PUSH
17638: LD_INT 7
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PUSH
17646: LD_OWVAR 67
17650: ARRAY
17651: GREATEREQUAL
17652: PUSH
17653: LD_OWVAR 1
17657: PUSH
17658: LD_INT 21000
17660: MOD
17661: PUSH
17662: LD_INT 0
17664: EQUAL
17665: OR
17666: IFFALSE 17612
// wait ( 0 0$45 ) ;
17668: LD_INT 1575
17670: PPUSH
17671: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17675: LD_ADDR_VAR 0 3
17679: PUSH
17680: LD_VAR 0 2
17684: PPUSH
17685: LD_INT 1
17687: PPUSH
17688: CALL 86522 0 2
17692: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17693: LD_ADDR_EXP 55
17697: PUSH
17698: LD_EXP 55
17702: PPUSH
17703: LD_VAR 0 2
17707: PPUSH
17708: LD_EXP 55
17712: PUSH
17713: LD_VAR 0 2
17717: ARRAY
17718: PUSH
17719: LD_VAR 0 3
17723: DIFF
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17730: LD_ADDR_VAR 0 4
17734: PUSH
17735: LD_INT 0
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 12
17745: ST_TO_ADDR
// if target then
17746: LD_VAR 0 4
17750: IFFALSE 17878
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17752: LD_ADDR_VAR 0 3
17756: PUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_INT 24
17764: PUSH
17765: LD_INT 250
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 72
17776: ST_TO_ADDR
// for i in tmp do
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_VAR 0 3
17786: PUSH
17787: FOR_IN
17788: IFFALSE 17828
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_INT 84
17797: PPUSH
17798: LD_INT 32
17800: PPUSH
17801: CALL_OW 297
17805: PUSH
17806: LD_INT 9
17808: GREATER
17809: IFFALSE 17826
// ComMoveXY ( i , 84 , 32 ) ;
17811: LD_VAR 0 1
17815: PPUSH
17816: LD_INT 84
17818: PPUSH
17819: LD_INT 32
17821: PPUSH
17822: CALL_OW 111
17826: GO 17787
17828: POP
17829: POP
// wait ( 0 0$1 ) ;
17830: LD_INT 35
17832: PPUSH
17833: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_INT 92
17844: PUSH
17845: LD_INT 84
17847: PUSH
17848: LD_INT 32
17850: PUSH
17851: LD_INT 9
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 72
17864: PUSH
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 1
17872: MINUS
17873: GREATEREQUAL
17874: IFFALSE 17752
// end else
17876: GO 18038
// begin if teleport then
17878: LD_VAR 0 5
17882: IFFALSE 17902
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17884: LD_VAR 0 3
17888: PPUSH
17889: LD_VAR 0 5
17893: PUSH
17894: LD_INT 1
17896: ARRAY
17897: PPUSH
17898: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17902: LD_ADDR_VAR 0 3
17906: PUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 24
17914: PUSH
17915: LD_INT 250
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PPUSH
17922: CALL_OW 72
17926: ST_TO_ADDR
// for i in tmp do
17927: LD_ADDR_VAR 0 1
17931: PUSH
17932: LD_VAR 0 3
17936: PUSH
17937: FOR_IN
17938: IFFALSE 17990
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17940: LD_VAR 0 1
17944: PPUSH
17945: LD_INT 140
17947: PPUSH
17948: LD_INT 219
17950: PPUSH
17951: CALL_OW 297
17955: PUSH
17956: LD_INT 9
17958: GREATER
17959: PUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 314
17969: NOT
17970: AND
17971: IFFALSE 17988
// AddComMoveXY ( i , 140 , 219 ) ;
17973: LD_VAR 0 1
17977: PPUSH
17978: LD_INT 140
17980: PPUSH
17981: LD_INT 219
17983: PPUSH
17984: CALL_OW 171
17988: GO 17937
17990: POP
17991: POP
// wait ( 0 0$1 ) ;
17992: LD_INT 35
17994: PPUSH
17995: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17999: LD_VAR 0 3
18003: PPUSH
18004: LD_INT 92
18006: PUSH
18007: LD_INT 140
18009: PUSH
18010: LD_INT 219
18012: PUSH
18013: LD_INT 9
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 72
18026: PUSH
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 1
18034: MINUS
18035: GREATEREQUAL
18036: IFFALSE 17902
// end ; repeat wait ( 0 0$1 ) ;
18038: LD_INT 35
18040: PPUSH
18041: CALL_OW 67
// for i in tmp do
18045: LD_ADDR_VAR 0 1
18049: PUSH
18050: LD_VAR 0 3
18054: PUSH
18055: FOR_IN
18056: IFFALSE 18189
// begin if GetLives ( i ) > 251 then
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 256
18067: PUSH
18068: LD_INT 251
18070: GREATER
18071: IFFALSE 18160
// begin if GetWeapon ( i ) = ru_time_lapser then
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 264
18082: PUSH
18083: LD_INT 49
18085: EQUAL
18086: IFFALSE 18124
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18088: LD_VAR 0 1
18092: PPUSH
18093: LD_INT 81
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PPUSH
18103: CALL_OW 69
18107: PPUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 74
18117: PPUSH
18118: CALL_OW 112
18122: GO 18158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18124: LD_VAR 0 1
18128: PPUSH
18129: LD_INT 81
18131: PUSH
18132: LD_INT 3
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: PPUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 74
18153: PPUSH
18154: CALL_OW 115
// end else
18158: GO 18187
// if IsDead ( i ) then
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 301
18169: IFFALSE 18187
// tmp := tmp diff i ;
18171: LD_ADDR_VAR 0 3
18175: PUSH
18176: LD_VAR 0 3
18180: PUSH
18181: LD_VAR 0 1
18185: DIFF
18186: ST_TO_ADDR
// end ;
18187: GO 18055
18189: POP
18190: POP
// until not tmp ;
18191: LD_VAR 0 3
18195: NOT
18196: IFFALSE 18038
// end ;
18198: PPOPN 5
18200: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18201: LD_EXP 3
18205: PUSH
18206: LD_EXP 5
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL 86522 0 2
18218: NOT
18219: AND
18220: IFFALSE 18602
18222: GO 18224
18224: DISABLE
18225: LD_INT 0
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
// begin enable ;
18231: ENABLE
// base := mc_amer ;
18232: LD_ADDR_VAR 0 2
18236: PUSH
18237: LD_EXP 5
18241: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18242: LD_INT 22
18244: PUSH
18245: LD_INT 4
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 23
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 30
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: NOT
18282: IFFALSE 18286
// exit ;
18284: GO 18602
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18286: LD_VAR 0 2
18290: PPUSH
18291: LD_INT 3
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: LD_INT 5
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 3
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: LD_INT 2
18317: PUSH
18318: LD_INT 9
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: LD_INT 7
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 7
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 7
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL 85167 0 2
// repeat wait ( 0 0$1 ) ;
18392: LD_INT 35
18394: PPUSH
18395: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18399: LD_VAR 0 2
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL 86522 0 2
18411: PUSH
18412: LD_INT 5
18414: GREATEREQUAL
18415: PUSH
18416: LD_OWVAR 1
18420: PUSH
18421: LD_INT 21000
18423: MOD
18424: PUSH
18425: LD_INT 0
18427: EQUAL
18428: OR
18429: IFFALSE 18392
// wait ( 0 0$30 ) ;
18431: LD_INT 1050
18433: PPUSH
18434: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL 86522 0 2
18455: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18456: LD_ADDR_EXP 55
18460: PUSH
18461: LD_EXP 55
18465: PPUSH
18466: LD_VAR 0 2
18470: PPUSH
18471: LD_EXP 55
18475: PUSH
18476: LD_VAR 0 2
18480: ARRAY
18481: PUSH
18482: LD_VAR 0 3
18486: DIFF
18487: PPUSH
18488: CALL_OW 1
18492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18493: LD_INT 35
18495: PPUSH
18496: CALL_OW 67
// for i in tmp do
18500: LD_ADDR_VAR 0 1
18504: PUSH
18505: LD_VAR 0 3
18509: PUSH
18510: FOR_IN
18511: IFFALSE 18593
// begin if GetLives ( i ) > 251 then
18513: LD_VAR 0 1
18517: PPUSH
18518: CALL_OW 256
18522: PUSH
18523: LD_INT 251
18525: GREATER
18526: IFFALSE 18564
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_INT 81
18535: PUSH
18536: LD_INT 4
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PPUSH
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 74
18557: PPUSH
18558: CALL_OW 115
18562: GO 18591
// if IsDead ( i ) then
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 301
18573: IFFALSE 18591
// tmp := tmp diff i ;
18575: LD_ADDR_VAR 0 3
18579: PUSH
18580: LD_VAR 0 3
18584: PUSH
18585: LD_VAR 0 1
18589: DIFF
18590: ST_TO_ADDR
// end ;
18591: GO 18510
18593: POP
18594: POP
// until not tmp ;
18595: LD_VAR 0 3
18599: NOT
18600: IFFALSE 18493
// end ; end_of_file
18602: PPOPN 4
18604: END
// export function CustomEvent ( event ) ; begin
18605: LD_INT 0
18607: PPUSH
// end ;
18608: LD_VAR 0 2
18612: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18613: LD_VAR 0 1
18617: PUSH
18618: LD_INT 1
18620: EQUAL
18621: PUSH
18622: LD_VAR 0 2
18626: PUSH
18627: LD_INT 4
18629: EQUAL
18630: AND
18631: IFFALSE 18659
// begin SayRadio ( Powell , DP-Lost ) ;
18633: LD_EXP 12
18637: PPUSH
18638: LD_STRING DP-Lost
18640: PPUSH
18641: CALL_OW 94
// wait ( 0 0$2 ) ;
18645: LD_INT 70
18647: PPUSH
18648: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18652: LD_STRING FriendlyFire
18654: PPUSH
18655: CALL_OW 104
// end ; end ;
18659: PPOPN 2
18661: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 88496 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 90551 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 89619 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 89860 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 88192 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 87812 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 87408 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 87246 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 87021 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 86906 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 90812 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 91028 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 86715 0 2
// end ; end_of_file
19340: PPOPN 2
19342: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19343: LD_INT 0
19345: PPUSH
19346: PPUSH
// if exist_mode then
19347: LD_VAR 0 2
19351: IFFALSE 19376
// unit := CreateCharacter ( prefix & ident ) else
19353: LD_ADDR_VAR 0 5
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: LD_VAR 0 1
19367: STR
19368: PPUSH
19369: CALL_OW 34
19373: ST_TO_ADDR
19374: GO 19391
// unit := NewCharacter ( ident ) ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 25
19390: ST_TO_ADDR
// result := unit ;
19391: LD_ADDR_VAR 0 4
19395: PUSH
19396: LD_VAR 0 5
19400: ST_TO_ADDR
// end ;
19401: LD_VAR 0 4
19405: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19406: LD_INT 0
19408: PPUSH
19409: PPUSH
// if not side or not nation then
19410: LD_VAR 0 1
19414: NOT
19415: PUSH
19416: LD_VAR 0 2
19420: NOT
19421: OR
19422: IFFALSE 19426
// exit ;
19424: GO 20062
// case nation of nation_american :
19426: LD_VAR 0 2
19430: PUSH
19431: LD_INT 1
19433: DOUBLE
19434: EQUAL
19435: IFTRUE 19439
19437: GO 19609
19439: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19440: LD_ADDR_VAR 0 4
19444: PUSH
19445: LD_INT 35
19447: PUSH
19448: LD_INT 45
19450: PUSH
19451: LD_INT 46
19453: PUSH
19454: LD_INT 47
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: LD_INT 6
19465: PUSH
19466: LD_INT 15
19468: PUSH
19469: LD_INT 16
19471: PUSH
19472: LD_INT 7
19474: PUSH
19475: LD_INT 12
19477: PUSH
19478: LD_INT 13
19480: PUSH
19481: LD_INT 10
19483: PUSH
19484: LD_INT 14
19486: PUSH
19487: LD_INT 20
19489: PUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 22
19495: PUSH
19496: LD_INT 25
19498: PUSH
19499: LD_INT 32
19501: PUSH
19502: LD_INT 27
19504: PUSH
19505: LD_INT 36
19507: PUSH
19508: LD_INT 69
19510: PUSH
19511: LD_INT 39
19513: PUSH
19514: LD_INT 34
19516: PUSH
19517: LD_INT 40
19519: PUSH
19520: LD_INT 48
19522: PUSH
19523: LD_INT 49
19525: PUSH
19526: LD_INT 50
19528: PUSH
19529: LD_INT 51
19531: PUSH
19532: LD_INT 52
19534: PUSH
19535: LD_INT 53
19537: PUSH
19538: LD_INT 54
19540: PUSH
19541: LD_INT 55
19543: PUSH
19544: LD_INT 56
19546: PUSH
19547: LD_INT 57
19549: PUSH
19550: LD_INT 58
19552: PUSH
19553: LD_INT 59
19555: PUSH
19556: LD_INT 60
19558: PUSH
19559: LD_INT 61
19561: PUSH
19562: LD_INT 62
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: ST_TO_ADDR
19607: GO 19986
19609: LD_INT 2
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19795
19617: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: LD_INT 35
19625: PUSH
19626: LD_INT 45
19628: PUSH
19629: LD_INT 46
19631: PUSH
19632: LD_INT 47
19634: PUSH
19635: LD_INT 70
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: LD_INT 11
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: LD_INT 4
19649: PUSH
19650: LD_INT 5
19652: PUSH
19653: LD_INT 6
19655: PUSH
19656: LD_INT 15
19658: PUSH
19659: LD_INT 18
19661: PUSH
19662: LD_INT 7
19664: PUSH
19665: LD_INT 17
19667: PUSH
19668: LD_INT 8
19670: PUSH
19671: LD_INT 20
19673: PUSH
19674: LD_INT 21
19676: PUSH
19677: LD_INT 22
19679: PUSH
19680: LD_INT 72
19682: PUSH
19683: LD_INT 26
19685: PUSH
19686: LD_INT 69
19688: PUSH
19689: LD_INT 39
19691: PUSH
19692: LD_INT 40
19694: PUSH
19695: LD_INT 41
19697: PUSH
19698: LD_INT 42
19700: PUSH
19701: LD_INT 43
19703: PUSH
19704: LD_INT 48
19706: PUSH
19707: LD_INT 49
19709: PUSH
19710: LD_INT 50
19712: PUSH
19713: LD_INT 51
19715: PUSH
19716: LD_INT 52
19718: PUSH
19719: LD_INT 53
19721: PUSH
19722: LD_INT 54
19724: PUSH
19725: LD_INT 55
19727: PUSH
19728: LD_INT 56
19730: PUSH
19731: LD_INT 60
19733: PUSH
19734: LD_INT 61
19736: PUSH
19737: LD_INT 62
19739: PUSH
19740: LD_INT 66
19742: PUSH
19743: LD_INT 67
19745: PUSH
19746: LD_INT 68
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: ST_TO_ADDR
19793: GO 19986
19795: LD_INT 3
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 19985
19803: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19804: LD_ADDR_VAR 0 4
19808: PUSH
19809: LD_INT 46
19811: PUSH
19812: LD_INT 47
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 11
19823: PUSH
19824: LD_INT 9
19826: PUSH
19827: LD_INT 20
19829: PUSH
19830: LD_INT 19
19832: PUSH
19833: LD_INT 21
19835: PUSH
19836: LD_INT 24
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_INT 25
19844: PUSH
19845: LD_INT 28
19847: PUSH
19848: LD_INT 29
19850: PUSH
19851: LD_INT 30
19853: PUSH
19854: LD_INT 31
19856: PUSH
19857: LD_INT 37
19859: PUSH
19860: LD_INT 38
19862: PUSH
19863: LD_INT 32
19865: PUSH
19866: LD_INT 27
19868: PUSH
19869: LD_INT 33
19871: PUSH
19872: LD_INT 69
19874: PUSH
19875: LD_INT 39
19877: PUSH
19878: LD_INT 34
19880: PUSH
19881: LD_INT 40
19883: PUSH
19884: LD_INT 71
19886: PUSH
19887: LD_INT 23
19889: PUSH
19890: LD_INT 44
19892: PUSH
19893: LD_INT 48
19895: PUSH
19896: LD_INT 49
19898: PUSH
19899: LD_INT 50
19901: PUSH
19902: LD_INT 51
19904: PUSH
19905: LD_INT 52
19907: PUSH
19908: LD_INT 53
19910: PUSH
19911: LD_INT 54
19913: PUSH
19914: LD_INT 55
19916: PUSH
19917: LD_INT 56
19919: PUSH
19920: LD_INT 57
19922: PUSH
19923: LD_INT 58
19925: PUSH
19926: LD_INT 59
19928: PUSH
19929: LD_INT 63
19931: PUSH
19932: LD_INT 64
19934: PUSH
19935: LD_INT 65
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: ST_TO_ADDR
19983: GO 19986
19985: POP
// if state > - 1 and state < 3 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: GREATER
19995: PUSH
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 3
20003: LESS
20004: AND
20005: IFFALSE 20062
// for i in result do
20007: LD_ADDR_VAR 0 5
20011: PUSH
20012: LD_VAR 0 4
20016: PUSH
20017: FOR_IN
20018: IFFALSE 20060
// if GetTech ( i , side ) <> state then
20020: LD_VAR 0 5
20024: PPUSH
20025: LD_VAR 0 1
20029: PPUSH
20030: CALL_OW 321
20034: PUSH
20035: LD_VAR 0 3
20039: NONEQUAL
20040: IFFALSE 20058
// result := result diff i ;
20042: LD_ADDR_VAR 0 4
20046: PUSH
20047: LD_VAR 0 4
20051: PUSH
20052: LD_VAR 0 5
20056: DIFF
20057: ST_TO_ADDR
20058: GO 20017
20060: POP
20061: POP
// end ;
20062: LD_VAR 0 4
20066: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20067: LD_INT 0
20069: PPUSH
20070: PPUSH
20071: PPUSH
// result := true ;
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20080: LD_ADDR_VAR 0 5
20084: PUSH
20085: LD_VAR 0 2
20089: PPUSH
20090: CALL_OW 480
20094: ST_TO_ADDR
// if not tmp then
20095: LD_VAR 0 5
20099: NOT
20100: IFFALSE 20104
// exit ;
20102: GO 20153
// for i in tmp do
20104: LD_ADDR_VAR 0 4
20108: PUSH
20109: LD_VAR 0 5
20113: PUSH
20114: FOR_IN
20115: IFFALSE 20151
// if GetTech ( i , side ) <> state_researched then
20117: LD_VAR 0 4
20121: PPUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 321
20131: PUSH
20132: LD_INT 2
20134: NONEQUAL
20135: IFFALSE 20149
// begin result := false ;
20137: LD_ADDR_VAR 0 3
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// exit ;
20145: POP
20146: POP
20147: GO 20153
// end ;
20149: GO 20114
20151: POP
20152: POP
// end ;
20153: LD_VAR 0 3
20157: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20173: LD_VAR 0 1
20177: NOT
20178: PUSH
20179: LD_VAR 0 1
20183: PPUSH
20184: CALL_OW 257
20188: PUSH
20189: LD_INT 9
20191: NONEQUAL
20192: OR
20193: IFFALSE 20197
// exit ;
20195: GO 20770
// side := GetSide ( unit ) ;
20197: LD_ADDR_VAR 0 9
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 255
20211: ST_TO_ADDR
// tech_space := tech_spacanom ;
20212: LD_ADDR_VAR 0 12
20216: PUSH
20217: LD_INT 29
20219: ST_TO_ADDR
// tech_time := tech_taurad ;
20220: LD_ADDR_VAR 0 13
20224: PUSH
20225: LD_INT 28
20227: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20228: LD_ADDR_VAR 0 11
20232: PUSH
20233: LD_VAR 0 1
20237: PPUSH
20238: CALL_OW 310
20242: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20243: LD_VAR 0 11
20247: PPUSH
20248: CALL_OW 247
20252: PUSH
20253: LD_INT 2
20255: EQUAL
20256: IFFALSE 20260
// exit ;
20258: GO 20770
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20260: LD_ADDR_VAR 0 8
20264: PUSH
20265: LD_INT 81
20267: PUSH
20268: LD_VAR 0 9
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 3
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 3
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 69
20302: ST_TO_ADDR
// if not tmp then
20303: LD_VAR 0 8
20307: NOT
20308: IFFALSE 20312
// exit ;
20310: GO 20770
// if in_unit then
20312: LD_VAR 0 11
20316: IFFALSE 20340
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20318: LD_ADDR_VAR 0 10
20322: PUSH
20323: LD_VAR 0 8
20327: PPUSH
20328: LD_VAR 0 11
20332: PPUSH
20333: CALL_OW 74
20337: ST_TO_ADDR
20338: GO 20360
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20340: LD_ADDR_VAR 0 10
20344: PUSH
20345: LD_VAR 0 8
20349: PPUSH
20350: LD_VAR 0 1
20354: PPUSH
20355: CALL_OW 74
20359: ST_TO_ADDR
// if not enemy then
20360: LD_VAR 0 10
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20770
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20369: LD_VAR 0 11
20373: PUSH
20374: LD_VAR 0 11
20378: PPUSH
20379: LD_VAR 0 10
20383: PPUSH
20384: CALL_OW 296
20388: PUSH
20389: LD_INT 13
20391: GREATER
20392: AND
20393: PUSH
20394: LD_VAR 0 1
20398: PPUSH
20399: LD_VAR 0 10
20403: PPUSH
20404: CALL_OW 296
20408: PUSH
20409: LD_INT 12
20411: GREATER
20412: OR
20413: IFFALSE 20417
// exit ;
20415: GO 20770
// missile := [ 1 ] ;
20417: LD_ADDR_VAR 0 14
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20428: LD_VAR 0 9
20432: PPUSH
20433: LD_VAR 0 12
20437: PPUSH
20438: CALL_OW 325
20442: IFFALSE 20471
// missile := Insert ( missile , missile + 1 , 2 ) ;
20444: LD_ADDR_VAR 0 14
20448: PUSH
20449: LD_VAR 0 14
20453: PPUSH
20454: LD_VAR 0 14
20458: PUSH
20459: LD_INT 1
20461: PLUS
20462: PPUSH
20463: LD_INT 2
20465: PPUSH
20466: CALL_OW 2
20470: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20471: LD_VAR 0 9
20475: PPUSH
20476: LD_VAR 0 13
20480: PPUSH
20481: CALL_OW 325
20485: PUSH
20486: LD_VAR 0 10
20490: PPUSH
20491: CALL_OW 255
20495: PPUSH
20496: LD_VAR 0 13
20500: PPUSH
20501: CALL_OW 325
20505: NOT
20506: AND
20507: IFFALSE 20536
// missile := Insert ( missile , missile + 1 , 3 ) ;
20509: LD_ADDR_VAR 0 14
20513: PUSH
20514: LD_VAR 0 14
20518: PPUSH
20519: LD_VAR 0 14
20523: PUSH
20524: LD_INT 1
20526: PLUS
20527: PPUSH
20528: LD_INT 3
20530: PPUSH
20531: CALL_OW 2
20535: ST_TO_ADDR
// if missile < 2 then
20536: LD_VAR 0 14
20540: PUSH
20541: LD_INT 2
20543: LESS
20544: IFFALSE 20548
// exit ;
20546: GO 20770
// x := GetX ( enemy ) ;
20548: LD_ADDR_VAR 0 4
20552: PUSH
20553: LD_VAR 0 10
20557: PPUSH
20558: CALL_OW 250
20562: ST_TO_ADDR
// y := GetY ( enemy ) ;
20563: LD_ADDR_VAR 0 5
20567: PUSH
20568: LD_VAR 0 10
20572: PPUSH
20573: CALL_OW 251
20577: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20578: LD_ADDR_VAR 0 6
20582: PUSH
20583: LD_VAR 0 4
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: CALL_OW 12
20599: PLUS
20600: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20601: LD_ADDR_VAR 0 7
20605: PUSH
20606: LD_VAR 0 5
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: CALL_OW 12
20622: PLUS
20623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20624: LD_VAR 0 6
20628: PPUSH
20629: LD_VAR 0 7
20633: PPUSH
20634: CALL_OW 488
20638: NOT
20639: IFFALSE 20661
// begin _x := x ;
20641: LD_ADDR_VAR 0 6
20645: PUSH
20646: LD_VAR 0 4
20650: ST_TO_ADDR
// _y := y ;
20651: LD_ADDR_VAR 0 7
20655: PUSH
20656: LD_VAR 0 5
20660: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: LD_INT 1
20668: PPUSH
20669: LD_VAR 0 14
20673: PPUSH
20674: CALL_OW 12
20678: ST_TO_ADDR
// case i of 1 :
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 1
20686: DOUBLE
20687: EQUAL
20688: IFTRUE 20692
20690: GO 20709
20692: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20693: LD_VAR 0 1
20697: PPUSH
20698: LD_VAR 0 10
20702: PPUSH
20703: CALL_OW 115
20707: GO 20770
20709: LD_INT 2
20711: DOUBLE
20712: EQUAL
20713: IFTRUE 20717
20715: GO 20739
20717: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20718: LD_VAR 0 1
20722: PPUSH
20723: LD_VAR 0 6
20727: PPUSH
20728: LD_VAR 0 7
20732: PPUSH
20733: CALL_OW 153
20737: GO 20770
20739: LD_INT 3
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20769
20747: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_VAR 0 6
20757: PPUSH
20758: LD_VAR 0 7
20762: PPUSH
20763: CALL_OW 154
20767: GO 20770
20769: POP
// end ;
20770: LD_VAR 0 2
20774: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20775: LD_INT 0
20777: PPUSH
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
// if not unit or not building then
20783: LD_VAR 0 1
20787: NOT
20788: PUSH
20789: LD_VAR 0 2
20793: NOT
20794: OR
20795: IFFALSE 20799
// exit ;
20797: GO 20957
// x := GetX ( building ) ;
20799: LD_ADDR_VAR 0 5
20803: PUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: CALL_OW 250
20813: ST_TO_ADDR
// y := GetY ( building ) ;
20814: LD_ADDR_VAR 0 6
20818: PUSH
20819: LD_VAR 0 2
20823: PPUSH
20824: CALL_OW 251
20828: ST_TO_ADDR
// for i = 0 to 5 do
20829: LD_ADDR_VAR 0 4
20833: PUSH
20834: DOUBLE
20835: LD_INT 0
20837: DEC
20838: ST_TO_ADDR
20839: LD_INT 5
20841: PUSH
20842: FOR_TO
20843: IFFALSE 20955
// begin _x := ShiftX ( x , i , 3 ) ;
20845: LD_ADDR_VAR 0 7
20849: PUSH
20850: LD_VAR 0 5
20854: PPUSH
20855: LD_VAR 0 4
20859: PPUSH
20860: LD_INT 3
20862: PPUSH
20863: CALL_OW 272
20867: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20868: LD_ADDR_VAR 0 8
20872: PUSH
20873: LD_VAR 0 6
20877: PPUSH
20878: LD_VAR 0 4
20882: PPUSH
20883: LD_INT 3
20885: PPUSH
20886: CALL_OW 273
20890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20891: LD_VAR 0 7
20895: PPUSH
20896: LD_VAR 0 8
20900: PPUSH
20901: CALL_OW 488
20905: NOT
20906: IFFALSE 20910
// continue ;
20908: GO 20842
// if HexInfo ( _x , _y ) = 0 then
20910: LD_VAR 0 7
20914: PPUSH
20915: LD_VAR 0 8
20919: PPUSH
20920: CALL_OW 428
20924: PUSH
20925: LD_INT 0
20927: EQUAL
20928: IFFALSE 20953
// begin ComMoveXY ( unit , _x , _y ) ;
20930: LD_VAR 0 1
20934: PPUSH
20935: LD_VAR 0 7
20939: PPUSH
20940: LD_VAR 0 8
20944: PPUSH
20945: CALL_OW 111
// exit ;
20949: POP
20950: POP
20951: GO 20957
// end ; end ;
20953: GO 20842
20955: POP
20956: POP
// end ;
20957: LD_VAR 0 3
20961: RET
// export function ScanBase ( side , base_area ) ; begin
20962: LD_INT 0
20964: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20965: LD_ADDR_VAR 0 3
20969: PUSH
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_INT 81
20977: PUSH
20978: LD_VAR 0 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PPUSH
20987: CALL_OW 70
20991: ST_TO_ADDR
// end ;
20992: LD_VAR 0 3
20996: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21004: LD_VAR 0 1
21008: NOT
21009: PUSH
21010: LD_EXP 36
21014: PUSH
21015: LD_VAR 0 1
21019: ARRAY
21020: NOT
21021: OR
21022: PUSH
21023: LD_VAR 0 2
21027: NOT
21028: OR
21029: PUSH
21030: LD_VAR 0 3
21034: NOT
21035: OR
21036: IFFALSE 21040
// exit ;
21038: GO 21490
// side := mc_sides [ base ] ;
21040: LD_ADDR_VAR 0 6
21044: PUSH
21045: LD_EXP 62
21049: PUSH
21050: LD_VAR 0 1
21054: ARRAY
21055: ST_TO_ADDR
// if not side then
21056: LD_VAR 0 6
21060: NOT
21061: IFFALSE 21065
// exit ;
21063: GO 21490
// for i in solds do
21065: LD_ADDR_VAR 0 7
21069: PUSH
21070: LD_VAR 0 2
21074: PUSH
21075: FOR_IN
21076: IFFALSE 21137
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21078: LD_VAR 0 7
21082: PPUSH
21083: CALL_OW 310
21087: PPUSH
21088: CALL_OW 266
21092: PUSH
21093: LD_INT 32
21095: PUSH
21096: LD_INT 31
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: IN
21103: IFFALSE 21123
// solds := solds diff i else
21105: LD_ADDR_VAR 0 2
21109: PUSH
21110: LD_VAR 0 2
21114: PUSH
21115: LD_VAR 0 7
21119: DIFF
21120: ST_TO_ADDR
21121: GO 21135
// SetTag ( i , 18 ) ;
21123: LD_VAR 0 7
21127: PPUSH
21128: LD_INT 18
21130: PPUSH
21131: CALL_OW 109
21135: GO 21075
21137: POP
21138: POP
// if not solds then
21139: LD_VAR 0 2
21143: NOT
21144: IFFALSE 21148
// exit ;
21146: GO 21490
// repeat wait ( 0 0$1 ) ;
21148: LD_INT 35
21150: PPUSH
21151: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21155: LD_ADDR_VAR 0 5
21159: PUSH
21160: LD_VAR 0 6
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: CALL 20962 0 2
21174: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21175: LD_VAR 0 5
21179: NOT
21180: PUSH
21181: LD_VAR 0 5
21185: PUSH
21186: LD_INT 3
21188: GREATER
21189: OR
21190: PUSH
21191: LD_EXP 58
21195: PUSH
21196: LD_VAR 0 1
21200: ARRAY
21201: OR
21202: IFFALSE 21243
// begin for i in solds do
21204: LD_ADDR_VAR 0 7
21208: PUSH
21209: LD_VAR 0 2
21213: PUSH
21214: FOR_IN
21215: IFFALSE 21239
// if HasTask ( i ) then
21217: LD_VAR 0 7
21221: PPUSH
21222: CALL_OW 314
21226: IFFALSE 21237
// ComStop ( i ) ;
21228: LD_VAR 0 7
21232: PPUSH
21233: CALL_OW 141
21237: GO 21214
21239: POP
21240: POP
// break ;
21241: GO 21478
// end ; for i in solds do
21243: LD_ADDR_VAR 0 7
21247: PUSH
21248: LD_VAR 0 2
21252: PUSH
21253: FOR_IN
21254: IFFALSE 21470
// begin if IsInUnit ( i ) then
21256: LD_VAR 0 7
21260: PPUSH
21261: CALL_OW 310
21265: IFFALSE 21276
// ComExitBuilding ( i ) ;
21267: LD_VAR 0 7
21271: PPUSH
21272: CALL_OW 122
// if GetLives ( i ) > 333 then
21276: LD_VAR 0 7
21280: PPUSH
21281: CALL_OW 256
21285: PUSH
21286: LD_INT 333
21288: GREATER
21289: IFFALSE 21317
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21291: LD_VAR 0 7
21295: PPUSH
21296: LD_VAR 0 5
21300: PPUSH
21301: LD_VAR 0 7
21305: PPUSH
21306: CALL_OW 74
21310: PPUSH
21311: CALL_OW 115
21315: GO 21468
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21317: LD_ADDR_VAR 0 8
21321: PUSH
21322: LD_EXP 36
21326: PUSH
21327: LD_VAR 0 1
21331: ARRAY
21332: PPUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 30
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 30
21358: PUSH
21359: LD_INT 6
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 72
21376: PPUSH
21377: LD_VAR 0 7
21381: PPUSH
21382: CALL_OW 74
21386: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21387: LD_VAR 0 7
21391: PPUSH
21392: LD_VAR 0 8
21396: PPUSH
21397: CALL_OW 250
21401: PPUSH
21402: LD_INT 3
21404: PPUSH
21405: LD_INT 5
21407: PPUSH
21408: CALL_OW 272
21412: PPUSH
21413: LD_VAR 0 8
21417: PPUSH
21418: CALL_OW 251
21422: PPUSH
21423: LD_INT 3
21425: PPUSH
21426: LD_INT 5
21428: PPUSH
21429: CALL_OW 273
21433: PPUSH
21434: CALL_OW 111
// SetTag ( i , 0 ) ;
21438: LD_VAR 0 7
21442: PPUSH
21443: LD_INT 0
21445: PPUSH
21446: CALL_OW 109
// solds := solds diff i ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_VAR 0 2
21459: PUSH
21460: LD_VAR 0 7
21464: DIFF
21465: ST_TO_ADDR
// continue ;
21466: GO 21253
// end ; end ;
21468: GO 21253
21470: POP
21471: POP
// until solds ;
21472: LD_VAR 0 2
21476: IFFALSE 21148
// MC_Reset ( base , 18 ) ;
21478: LD_VAR 0 1
21482: PPUSH
21483: LD_INT 18
21485: PPUSH
21486: CALL 66024 0 2
// end ;
21490: LD_VAR 0 4
21494: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
21501: PPUSH
21502: PPUSH
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21513: LD_ADDR_VAR 0 12
21517: PUSH
21518: LD_EXP 36
21522: PUSH
21523: LD_VAR 0 1
21527: ARRAY
21528: PPUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 3
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PPUSH
21539: CALL_OW 72
21543: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21544: LD_ADDR_VAR 0 8
21548: PUSH
21549: LD_EXP 36
21553: PUSH
21554: LD_VAR 0 1
21558: ARRAY
21559: PPUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 25
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 5
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 25
21585: PUSH
21586: LD_INT 8
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 25
21595: PUSH
21596: LD_INT 9
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: PPUSH
21610: CALL_OW 72
21614: ST_TO_ADDR
// if not defenders and not solds then
21615: LD_VAR 0 2
21619: NOT
21620: PUSH
21621: LD_VAR 0 8
21625: NOT
21626: AND
21627: IFFALSE 21631
// exit ;
21629: GO 22960
// depot_under_attack := false ;
21631: LD_ADDR_VAR 0 16
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sold_defenders := [ ] ;
21639: LD_ADDR_VAR 0 17
21643: PUSH
21644: EMPTY
21645: ST_TO_ADDR
// if mechs then
21646: LD_VAR 0 12
21650: IFFALSE 21779
// for i in defenders do
21652: LD_ADDR_VAR 0 5
21656: PUSH
21657: LD_VAR 0 2
21661: PUSH
21662: FOR_IN
21663: IFFALSE 21777
// begin SetTag ( i , 20 ) ;
21665: LD_VAR 0 5
21669: PPUSH
21670: LD_INT 20
21672: PPUSH
21673: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21677: LD_VAR 0 5
21681: PPUSH
21682: CALL_OW 263
21686: PUSH
21687: LD_INT 1
21689: EQUAL
21690: PUSH
21691: LD_VAR 0 5
21695: PPUSH
21696: CALL_OW 311
21700: NOT
21701: AND
21702: PUSH
21703: LD_VAR 0 12
21707: AND
21708: IFFALSE 21775
// begin un := mechs [ 1 ] ;
21710: LD_ADDR_VAR 0 10
21714: PUSH
21715: LD_VAR 0 12
21719: PUSH
21720: LD_INT 1
21722: ARRAY
21723: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21724: LD_VAR 0 10
21728: PPUSH
21729: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21733: LD_VAR 0 10
21737: PPUSH
21738: LD_VAR 0 5
21742: PPUSH
21743: CALL_OW 180
// SetTag ( un , 19 ) ;
21747: LD_VAR 0 10
21751: PPUSH
21752: LD_INT 19
21754: PPUSH
21755: CALL_OW 109
// mechs := mechs diff un ;
21759: LD_ADDR_VAR 0 12
21763: PUSH
21764: LD_VAR 0 12
21768: PUSH
21769: LD_VAR 0 10
21773: DIFF
21774: ST_TO_ADDR
// end ; end ;
21775: GO 21662
21777: POP
21778: POP
// if solds then
21779: LD_VAR 0 8
21783: IFFALSE 21842
// for i in solds do
21785: LD_ADDR_VAR 0 5
21789: PUSH
21790: LD_VAR 0 8
21794: PUSH
21795: FOR_IN
21796: IFFALSE 21840
// if not GetTag ( i ) then
21798: LD_VAR 0 5
21802: PPUSH
21803: CALL_OW 110
21807: NOT
21808: IFFALSE 21838
// begin defenders := defenders union i ;
21810: LD_ADDR_VAR 0 2
21814: PUSH
21815: LD_VAR 0 2
21819: PUSH
21820: LD_VAR 0 5
21824: UNION
21825: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21826: LD_VAR 0 5
21830: PPUSH
21831: LD_INT 18
21833: PPUSH
21834: CALL_OW 109
// end ;
21838: GO 21795
21840: POP
21841: POP
// repeat wait ( 0 0$1 ) ;
21842: LD_INT 35
21844: PPUSH
21845: CALL_OW 67
// enemy := mc_scan [ base ] ;
21849: LD_ADDR_VAR 0 3
21853: PUSH
21854: LD_EXP 59
21858: PUSH
21859: LD_VAR 0 1
21863: ARRAY
21864: ST_TO_ADDR
// for i in defenders do
21865: LD_ADDR_VAR 0 5
21869: PUSH
21870: LD_VAR 0 2
21874: PUSH
21875: FOR_IN
21876: IFFALSE 22561
// begin e := NearestUnitToUnit ( enemy , i ) ;
21878: LD_ADDR_VAR 0 13
21882: PUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_VAR 0 5
21892: PPUSH
21893: CALL_OW 74
21897: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21898: LD_ADDR_VAR 0 16
21902: PUSH
21903: LD_EXP 36
21907: PUSH
21908: LD_VAR 0 1
21912: ARRAY
21913: PPUSH
21914: LD_INT 2
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: LD_INT 0
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 30
21929: PUSH
21930: LD_INT 1
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: PPUSH
21942: CALL_OW 72
21946: NOT
21947: PUSH
21948: LD_EXP 36
21952: PUSH
21953: LD_VAR 0 1
21957: ARRAY
21958: PPUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 30
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 72
21991: PPUSH
21992: CALL_OW 256
21996: PUSH
21997: LD_INT 600
21999: LESS
22000: OR
22001: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22002: LD_VAR 0 5
22006: PPUSH
22007: CALL_OW 247
22011: PUSH
22012: LD_INT 2
22014: DOUBLE
22015: EQUAL
22016: IFTRUE 22020
22018: GO 22267
22020: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22021: LD_VAR 0 5
22025: PPUSH
22026: CALL_OW 256
22030: PUSH
22031: LD_INT 650
22033: GREATER
22034: PUSH
22035: LD_VAR 0 5
22039: PPUSH
22040: LD_VAR 0 13
22044: PPUSH
22045: CALL_OW 296
22049: PUSH
22050: LD_INT 40
22052: LESS
22053: AND
22054: IFFALSE 22072
// ComAttackUnit ( i , e ) else
22056: LD_VAR 0 5
22060: PPUSH
22061: LD_VAR 0 13
22065: PPUSH
22066: CALL_OW 115
22070: GO 22150
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22072: LD_VAR 0 5
22076: PPUSH
22077: LD_VAR 0 13
22081: PPUSH
22082: CALL_OW 296
22086: PUSH
22087: LD_INT 30
22089: GREATEREQUAL
22090: PUSH
22091: LD_VAR 0 5
22095: PPUSH
22096: CALL_OW 256
22100: PUSH
22101: LD_INT 650
22103: LESSEQUAL
22104: OR
22105: PUSH
22106: LD_VAR 0 5
22110: PPUSH
22111: LD_EXP 60
22115: PUSH
22116: LD_VAR 0 1
22120: ARRAY
22121: PPUSH
22122: CALL_OW 308
22126: NOT
22127: AND
22128: IFFALSE 22150
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22130: LD_VAR 0 5
22134: PPUSH
22135: LD_EXP 60
22139: PUSH
22140: LD_VAR 0 1
22144: ARRAY
22145: PPUSH
22146: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22150: LD_VAR 0 5
22154: PPUSH
22155: CALL_OW 256
22159: PUSH
22160: LD_INT 998
22162: LESS
22163: PUSH
22164: LD_VAR 0 5
22168: PPUSH
22169: CALL_OW 263
22173: PUSH
22174: LD_INT 1
22176: EQUAL
22177: AND
22178: PUSH
22179: LD_VAR 0 5
22183: PPUSH
22184: CALL_OW 311
22188: AND
22189: PUSH
22190: LD_VAR 0 5
22194: PPUSH
22195: LD_EXP 60
22199: PUSH
22200: LD_VAR 0 1
22204: ARRAY
22205: PPUSH
22206: CALL_OW 308
22210: AND
22211: IFFALSE 22265
// begin mech := IsDrivenBy ( i ) ;
22213: LD_ADDR_VAR 0 9
22217: PUSH
22218: LD_VAR 0 5
22222: PPUSH
22223: CALL_OW 311
22227: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22228: LD_VAR 0 9
22232: PPUSH
22233: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22237: LD_VAR 0 9
22241: PPUSH
22242: LD_VAR 0 5
22246: PPUSH
22247: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22251: LD_VAR 0 9
22255: PPUSH
22256: LD_VAR 0 5
22260: PPUSH
22261: CALL_OW 180
// end ; end ; unit_human :
22265: GO 22532
22267: LD_INT 1
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22531
22275: POP
// begin b := IsInUnit ( i ) ;
22276: LD_ADDR_VAR 0 18
22280: PUSH
22281: LD_VAR 0 5
22285: PPUSH
22286: CALL_OW 310
22290: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22291: LD_ADDR_VAR 0 19
22295: PUSH
22296: LD_VAR 0 18
22300: NOT
22301: PUSH
22302: LD_VAR 0 18
22306: PPUSH
22307: CALL_OW 266
22311: PUSH
22312: LD_INT 32
22314: PUSH
22315: LD_INT 31
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: IN
22322: OR
22323: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22324: LD_VAR 0 16
22328: PUSH
22329: LD_VAR 0 2
22333: PPUSH
22334: LD_INT 21
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 72
22348: PUSH
22349: LD_INT 1
22351: LESSEQUAL
22352: OR
22353: PUSH
22354: LD_VAR 0 19
22358: AND
22359: PUSH
22360: LD_VAR 0 5
22364: PUSH
22365: LD_VAR 0 17
22369: IN
22370: NOT
22371: AND
22372: IFFALSE 22465
// begin if b then
22374: LD_VAR 0 18
22378: IFFALSE 22427
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22380: LD_VAR 0 18
22384: PPUSH
22385: LD_VAR 0 3
22389: PPUSH
22390: LD_VAR 0 18
22394: PPUSH
22395: CALL_OW 74
22399: PPUSH
22400: CALL_OW 296
22404: PUSH
22405: LD_INT 10
22407: LESS
22408: PUSH
22409: LD_VAR 0 18
22413: PPUSH
22414: CALL_OW 461
22418: PUSH
22419: LD_INT 7
22421: NONEQUAL
22422: AND
22423: IFFALSE 22427
// continue ;
22425: GO 21875
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22427: LD_ADDR_VAR 0 17
22431: PUSH
22432: LD_VAR 0 17
22436: PPUSH
22437: LD_VAR 0 17
22441: PUSH
22442: LD_INT 1
22444: PLUS
22445: PPUSH
22446: LD_VAR 0 5
22450: PPUSH
22451: CALL_OW 1
22455: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22456: LD_VAR 0 5
22460: PPUSH
22461: CALL_OW 122
// end ; if sold_defenders then
22465: LD_VAR 0 17
22469: IFFALSE 22529
// if i in sold_defenders then
22471: LD_VAR 0 5
22475: PUSH
22476: LD_VAR 0 17
22480: IN
22481: IFFALSE 22529
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22483: LD_VAR 0 5
22487: PPUSH
22488: CALL_OW 314
22492: NOT
22493: PUSH
22494: LD_VAR 0 5
22498: PPUSH
22499: LD_VAR 0 13
22503: PPUSH
22504: CALL_OW 296
22508: PUSH
22509: LD_INT 30
22511: LESS
22512: AND
22513: IFFALSE 22529
// ComAttackUnit ( i , e ) ;
22515: LD_VAR 0 5
22519: PPUSH
22520: LD_VAR 0 13
22524: PPUSH
22525: CALL_OW 115
// end ; end ; end ;
22529: GO 22532
22531: POP
// if IsDead ( i ) then
22532: LD_VAR 0 5
22536: PPUSH
22537: CALL_OW 301
22541: IFFALSE 22559
// defenders := defenders diff i ;
22543: LD_ADDR_VAR 0 2
22547: PUSH
22548: LD_VAR 0 2
22552: PUSH
22553: LD_VAR 0 5
22557: DIFF
22558: ST_TO_ADDR
// end ;
22559: GO 21875
22561: POP
22562: POP
// until not enemy or not defenders ;
22563: LD_VAR 0 3
22567: NOT
22568: PUSH
22569: LD_VAR 0 2
22573: NOT
22574: OR
22575: IFFALSE 21842
// MC_Reset ( base , 18 ) ;
22577: LD_VAR 0 1
22581: PPUSH
22582: LD_INT 18
22584: PPUSH
22585: CALL 66024 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_VAR 0 2
22598: PUSH
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 25
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 25
22619: PUSH
22620: LD_INT 5
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 25
22629: PUSH
22630: LD_INT 8
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 25
22639: PUSH
22640: LD_INT 9
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 72
22658: DIFF
22659: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22660: LD_VAR 0 3
22664: NOT
22665: PUSH
22666: LD_VAR 0 2
22670: PPUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PPUSH
22681: CALL_OW 72
22685: AND
22686: IFFALSE 22948
// begin tmp := FilterByTag ( defenders , 19 ) ;
22688: LD_ADDR_VAR 0 11
22692: PUSH
22693: LD_VAR 0 2
22697: PPUSH
22698: LD_INT 19
22700: PPUSH
22701: CALL 59322 0 2
22705: ST_TO_ADDR
// if tmp then
22706: LD_VAR 0 11
22710: IFFALSE 22780
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22712: LD_ADDR_VAR 0 11
22716: PUSH
22717: LD_VAR 0 11
22721: PPUSH
22722: LD_INT 25
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PPUSH
22732: CALL_OW 72
22736: ST_TO_ADDR
// if tmp then
22737: LD_VAR 0 11
22741: IFFALSE 22780
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22743: LD_ADDR_EXP 48
22747: PUSH
22748: LD_EXP 48
22752: PPUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_EXP 48
22762: PUSH
22763: LD_VAR 0 1
22767: ARRAY
22768: PUSH
22769: LD_VAR 0 11
22773: UNION
22774: PPUSH
22775: CALL_OW 1
22779: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22780: LD_VAR 0 1
22784: PPUSH
22785: LD_INT 19
22787: PPUSH
22788: CALL 66024 0 2
// repeat wait ( 0 0$1 ) ;
22792: LD_INT 35
22794: PPUSH
22795: CALL_OW 67
// for i in defenders do
22799: LD_ADDR_VAR 0 5
22803: PUSH
22804: LD_VAR 0 2
22808: PUSH
22809: FOR_IN
22810: IFFALSE 22899
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22812: LD_VAR 0 5
22816: PPUSH
22817: LD_EXP 60
22821: PUSH
22822: LD_VAR 0 1
22826: ARRAY
22827: PPUSH
22828: CALL_OW 308
22832: NOT
22833: IFFALSE 22857
// ComMoveToArea ( i , mc_parking [ base ] ) else
22835: LD_VAR 0 5
22839: PPUSH
22840: LD_EXP 60
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PPUSH
22851: CALL_OW 113
22855: GO 22897
// if GetControl ( i ) = control_manual then
22857: LD_VAR 0 5
22861: PPUSH
22862: CALL_OW 263
22866: PUSH
22867: LD_INT 1
22869: EQUAL
22870: IFFALSE 22897
// if IsDrivenBy ( i ) then
22872: LD_VAR 0 5
22876: PPUSH
22877: CALL_OW 311
22881: IFFALSE 22897
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22883: LD_VAR 0 5
22887: PPUSH
22888: CALL_OW 311
22892: PPUSH
22893: CALL_OW 121
// end ;
22897: GO 22809
22899: POP
22900: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22901: LD_VAR 0 2
22905: PPUSH
22906: LD_INT 95
22908: PUSH
22909: LD_EXP 60
22913: PUSH
22914: LD_VAR 0 1
22918: ARRAY
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL_OW 72
22928: PUSH
22929: LD_VAR 0 2
22933: EQUAL
22934: PUSH
22935: LD_EXP 59
22939: PUSH
22940: LD_VAR 0 1
22944: ARRAY
22945: OR
22946: IFFALSE 22792
// end ; MC_Reset ( base , 20 ) ;
22948: LD_VAR 0 1
22952: PPUSH
22953: LD_INT 20
22955: PPUSH
22956: CALL 66024 0 2
// end ;
22960: LD_VAR 0 4
22964: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
// result := false ;
22971: LD_ADDR_VAR 0 2
22975: PUSH
22976: LD_INT 0
22978: ST_TO_ADDR
// side := GetSide ( unit ) ;
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 255
22993: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22994: LD_ADDR_VAR 0 4
22998: PUSH
22999: LD_VAR 0 1
23003: PPUSH
23004: CALL_OW 248
23008: ST_TO_ADDR
// case nat of 1 :
23009: LD_VAR 0 4
23013: PUSH
23014: LD_INT 1
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23033
23022: POP
// tech := tech_lassight ; 2 :
23023: LD_ADDR_VAR 0 5
23027: PUSH
23028: LD_INT 12
23030: ST_TO_ADDR
23031: GO 23072
23033: LD_INT 2
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23052
23041: POP
// tech := tech_mortar ; 3 :
23042: LD_ADDR_VAR 0 5
23046: PUSH
23047: LD_INT 41
23049: ST_TO_ADDR
23050: GO 23072
23052: LD_INT 3
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23071
23060: POP
// tech := tech_bazooka ; end ;
23061: LD_ADDR_VAR 0 5
23065: PUSH
23066: LD_INT 44
23068: ST_TO_ADDR
23069: GO 23072
23071: POP
// if Researched ( side , tech ) then
23072: LD_VAR 0 3
23076: PPUSH
23077: LD_VAR 0 5
23081: PPUSH
23082: CALL_OW 325
23086: IFFALSE 23113
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23088: LD_ADDR_VAR 0 2
23092: PUSH
23093: LD_INT 5
23095: PUSH
23096: LD_INT 8
23098: PUSH
23099: LD_INT 9
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: LD_VAR 0 4
23111: ARRAY
23112: ST_TO_ADDR
// end ;
23113: LD_VAR 0 2
23117: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
23122: PPUSH
// if not mines then
23123: LD_VAR 0 2
23127: NOT
23128: IFFALSE 23132
// exit ;
23130: GO 23276
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23132: LD_ADDR_VAR 0 5
23136: PUSH
23137: LD_INT 81
23139: PUSH
23140: LD_VAR 0 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 3
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 3
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 69
23174: ST_TO_ADDR
// for i in mines do
23175: LD_ADDR_VAR 0 4
23179: PUSH
23180: LD_VAR 0 2
23184: PUSH
23185: FOR_IN
23186: IFFALSE 23274
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23188: LD_VAR 0 4
23192: PUSH
23193: LD_INT 1
23195: ARRAY
23196: PPUSH
23197: LD_VAR 0 4
23201: PUSH
23202: LD_INT 2
23204: ARRAY
23205: PPUSH
23206: CALL_OW 458
23210: NOT
23211: IFFALSE 23215
// continue ;
23213: GO 23185
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23215: LD_VAR 0 4
23219: PUSH
23220: LD_INT 1
23222: ARRAY
23223: PPUSH
23224: LD_VAR 0 4
23228: PUSH
23229: LD_INT 2
23231: ARRAY
23232: PPUSH
23233: CALL_OW 428
23237: PUSH
23238: LD_VAR 0 5
23242: IN
23243: IFFALSE 23272
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23245: LD_VAR 0 4
23249: PUSH
23250: LD_INT 1
23252: ARRAY
23253: PPUSH
23254: LD_VAR 0 4
23258: PUSH
23259: LD_INT 2
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 456
// end ;
23272: GO 23185
23274: POP
23275: POP
// end ;
23276: LD_VAR 0 3
23280: RET
// export function Count ( array ) ; var i ; begin
23281: LD_INT 0
23283: PPUSH
23284: PPUSH
// result := 0 ;
23285: LD_ADDR_VAR 0 2
23289: PUSH
23290: LD_INT 0
23292: ST_TO_ADDR
// for i in array do
23293: LD_ADDR_VAR 0 3
23297: PUSH
23298: LD_VAR 0 1
23302: PUSH
23303: FOR_IN
23304: IFFALSE 23328
// if i then
23306: LD_VAR 0 3
23310: IFFALSE 23326
// result := result + 1 ;
23312: LD_ADDR_VAR 0 2
23316: PUSH
23317: LD_VAR 0 2
23321: PUSH
23322: LD_INT 1
23324: PLUS
23325: ST_TO_ADDR
23326: GO 23303
23328: POP
23329: POP
// end ;
23330: LD_VAR 0 2
23334: RET
// export function IsEmpty ( building ) ; begin
23335: LD_INT 0
23337: PPUSH
// if not building then
23338: LD_VAR 0 1
23342: NOT
23343: IFFALSE 23347
// exit ;
23345: GO 23390
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: LD_VAR 0 1
23356: PUSH
23357: LD_INT 22
23359: PUSH
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 255
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 58
23376: PUSH
23377: EMPTY
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 69
23388: IN
23389: ST_TO_ADDR
// end ;
23390: LD_VAR 0 2
23394: RET
// export function IsNotFull ( building ) ; begin
23395: LD_INT 0
23397: PPUSH
// if not building then
23398: LD_VAR 0 1
23402: NOT
23403: IFFALSE 23407
// exit ;
23405: GO 23426
// result := UnitsInside ( building ) < 6 ;
23407: LD_ADDR_VAR 0 2
23411: PUSH
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 313
23421: PUSH
23422: LD_INT 6
23424: LESS
23425: ST_TO_ADDR
// end ;
23426: LD_VAR 0 2
23430: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23431: LD_INT 0
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
// tmp := [ ] ;
23437: LD_ADDR_VAR 0 3
23441: PUSH
23442: EMPTY
23443: ST_TO_ADDR
// list := [ ] ;
23444: LD_ADDR_VAR 0 5
23448: PUSH
23449: EMPTY
23450: ST_TO_ADDR
// for i = 16 to 25 do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 16
23459: DEC
23460: ST_TO_ADDR
23461: LD_INT 25
23463: PUSH
23464: FOR_TO
23465: IFFALSE 23538
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23467: LD_ADDR_VAR 0 3
23471: PUSH
23472: LD_VAR 0 3
23476: PUSH
23477: LD_INT 22
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 255
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 91
23496: PUSH
23497: LD_VAR 0 1
23501: PUSH
23502: LD_INT 6
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 30
23512: PUSH
23513: LD_VAR 0 4
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: PPUSH
23530: CALL_OW 69
23534: ADD
23535: ST_TO_ADDR
23536: GO 23464
23538: POP
23539: POP
// for i = 1 to tmp do
23540: LD_ADDR_VAR 0 4
23544: PUSH
23545: DOUBLE
23546: LD_INT 1
23548: DEC
23549: ST_TO_ADDR
23550: LD_VAR 0 3
23554: PUSH
23555: FOR_TO
23556: IFFALSE 23644
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_VAR 0 5
23567: PUSH
23568: LD_VAR 0 3
23572: PUSH
23573: LD_VAR 0 4
23577: ARRAY
23578: PPUSH
23579: CALL_OW 266
23583: PUSH
23584: LD_VAR 0 3
23588: PUSH
23589: LD_VAR 0 4
23593: ARRAY
23594: PPUSH
23595: CALL_OW 250
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: LD_VAR 0 4
23609: ARRAY
23610: PPUSH
23611: CALL_OW 251
23615: PUSH
23616: LD_VAR 0 3
23620: PUSH
23621: LD_VAR 0 4
23625: ARRAY
23626: PPUSH
23627: CALL_OW 254
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: ADD
23641: ST_TO_ADDR
23642: GO 23555
23644: POP
23645: POP
// result := list ;
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: LD_VAR 0 5
23655: ST_TO_ADDR
// end ;
23656: LD_VAR 0 2
23660: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23661: LD_INT 0
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
// if not factory then
23670: LD_VAR 0 1
23674: NOT
23675: IFFALSE 23679
// exit ;
23677: GO 24211
// if control = control_apeman then
23679: LD_VAR 0 4
23683: PUSH
23684: LD_INT 5
23686: EQUAL
23687: IFFALSE 23796
// begin tmp := UnitsInside ( factory ) ;
23689: LD_ADDR_VAR 0 8
23693: PUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL_OW 313
23703: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23704: LD_VAR 0 8
23708: PPUSH
23709: LD_INT 25
23711: PUSH
23712: LD_INT 12
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 72
23723: NOT
23724: IFFALSE 23734
// control := control_manual ;
23726: LD_ADDR_VAR 0 4
23730: PUSH
23731: LD_INT 1
23733: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23734: LD_ADDR_VAR 0 8
23738: PUSH
23739: LD_VAR 0 1
23743: PPUSH
23744: CALL 23431 0 1
23748: ST_TO_ADDR
// if tmp then
23749: LD_VAR 0 8
23753: IFFALSE 23796
// begin for i in tmp do
23755: LD_ADDR_VAR 0 7
23759: PUSH
23760: LD_VAR 0 8
23764: PUSH
23765: FOR_IN
23766: IFFALSE 23794
// if i [ 1 ] = b_ext_radar then
23768: LD_VAR 0 7
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PUSH
23777: LD_INT 20
23779: EQUAL
23780: IFFALSE 23792
// begin control := control_remote ;
23782: LD_ADDR_VAR 0 4
23786: PUSH
23787: LD_INT 2
23789: ST_TO_ADDR
// break ;
23790: GO 23794
// end ;
23792: GO 23765
23794: POP
23795: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23796: LD_VAR 0 1
23800: PPUSH
23801: LD_VAR 0 2
23805: PPUSH
23806: LD_VAR 0 3
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: LD_VAR 0 5
23820: PPUSH
23821: CALL_OW 448
23825: IFFALSE 23860
// begin result := [ chassis , engine , control , weapon ] ;
23827: LD_ADDR_VAR 0 6
23831: PUSH
23832: LD_VAR 0 2
23836: PUSH
23837: LD_VAR 0 3
23841: PUSH
23842: LD_VAR 0 4
23846: PUSH
23847: LD_VAR 0 5
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: ST_TO_ADDR
// exit ;
23858: GO 24211
// end ; _chassis := AvailableChassisList ( factory ) ;
23860: LD_ADDR_VAR 0 9
23864: PUSH
23865: LD_VAR 0 1
23869: PPUSH
23870: CALL_OW 475
23874: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23875: LD_ADDR_VAR 0 11
23879: PUSH
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL_OW 476
23889: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23890: LD_ADDR_VAR 0 12
23894: PUSH
23895: LD_VAR 0 1
23899: PPUSH
23900: CALL_OW 477
23904: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23905: LD_ADDR_VAR 0 10
23909: PUSH
23910: LD_VAR 0 1
23914: PPUSH
23915: CALL_OW 478
23919: ST_TO_ADDR
// if not chassis in _chassis then
23920: LD_VAR 0 2
23924: PUSH
23925: LD_VAR 0 9
23929: IN
23930: NOT
23931: IFFALSE 23957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23933: LD_ADDR_VAR 0 2
23937: PUSH
23938: LD_VAR 0 9
23942: PUSH
23943: LD_INT 1
23945: PPUSH
23946: LD_VAR 0 9
23950: PPUSH
23951: CALL_OW 12
23955: ARRAY
23956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23957: LD_VAR 0 2
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: CALL 24216 0 2
23971: NOT
23972: IFFALSE 24031
// repeat engine := _engine [ 1 ] ;
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_VAR 0 11
23983: PUSH
23984: LD_INT 1
23986: ARRAY
23987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23988: LD_ADDR_VAR 0 11
23992: PUSH
23993: LD_VAR 0 11
23997: PPUSH
23998: LD_INT 1
24000: PPUSH
24001: CALL_OW 3
24005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24006: LD_VAR 0 2
24010: PPUSH
24011: LD_VAR 0 3
24015: PPUSH
24016: CALL 24216 0 2
24020: PUSH
24021: LD_VAR 0 11
24025: PUSH
24026: EMPTY
24027: EQUAL
24028: OR
24029: IFFALSE 23974
// if not control in _control then
24031: LD_VAR 0 4
24035: PUSH
24036: LD_VAR 0 12
24040: IN
24041: NOT
24042: IFFALSE 24068
// control := _control [ rand ( 1 , _control ) ] ;
24044: LD_ADDR_VAR 0 4
24048: PUSH
24049: LD_VAR 0 12
24053: PUSH
24054: LD_INT 1
24056: PPUSH
24057: LD_VAR 0 12
24061: PPUSH
24062: CALL_OW 12
24066: ARRAY
24067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 5
24077: PPUSH
24078: CALL 24436 0 2
24082: NOT
24083: IFFALSE 24142
// repeat weapon := _weapon [ 1 ] ;
24085: LD_ADDR_VAR 0 5
24089: PUSH
24090: LD_VAR 0 10
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24099: LD_ADDR_VAR 0 10
24103: PUSH
24104: LD_VAR 0 10
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 3
24116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_VAR 0 5
24126: PPUSH
24127: CALL 24436 0 2
24131: PUSH
24132: LD_VAR 0 10
24136: PUSH
24137: EMPTY
24138: EQUAL
24139: OR
24140: IFFALSE 24085
// result := [ ] ;
24142: LD_ADDR_VAR 0 6
24146: PUSH
24147: EMPTY
24148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24149: LD_VAR 0 1
24153: PPUSH
24154: LD_VAR 0 2
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: LD_VAR 0 4
24168: PPUSH
24169: LD_VAR 0 5
24173: PPUSH
24174: CALL_OW 448
24178: IFFALSE 24211
// result := [ chassis , engine , control , weapon ] ;
24180: LD_ADDR_VAR 0 6
24184: PUSH
24185: LD_VAR 0 2
24189: PUSH
24190: LD_VAR 0 3
24194: PUSH
24195: LD_VAR 0 4
24199: PUSH
24200: LD_VAR 0 5
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: ST_TO_ADDR
// end ;
24211: LD_VAR 0 6
24215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24216: LD_INT 0
24218: PPUSH
// if not chassis or not engine then
24219: LD_VAR 0 1
24223: NOT
24224: PUSH
24225: LD_VAR 0 2
24229: NOT
24230: OR
24231: IFFALSE 24235
// exit ;
24233: GO 24431
// case engine of engine_solar :
24235: LD_VAR 0 2
24239: PUSH
24240: LD_INT 2
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24286
24248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_INT 11
24256: PUSH
24257: LD_INT 12
24259: PUSH
24260: LD_INT 13
24262: PUSH
24263: LD_INT 14
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: LD_INT 3
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: ST_TO_ADDR
24284: GO 24415
24286: LD_INT 1
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24356
24294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: LD_INT 11
24302: PUSH
24303: LD_INT 12
24305: PUSH
24306: LD_INT 13
24308: PUSH
24309: LD_INT 14
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 4
24323: PUSH
24324: LD_INT 5
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 23
24332: PUSH
24333: LD_INT 22
24335: PUSH
24336: LD_INT 24
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 24415
24356: LD_INT 3
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24414
24364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: LD_INT 13
24372: PUSH
24373: LD_INT 14
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 3
24381: PUSH
24382: LD_INT 4
24384: PUSH
24385: LD_INT 5
24387: PUSH
24388: LD_INT 21
24390: PUSH
24391: LD_INT 22
24393: PUSH
24394: LD_INT 23
24396: PUSH
24397: LD_INT 24
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: ST_TO_ADDR
24412: GO 24415
24414: POP
// result := ( chassis in result ) ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_VAR 0 1
24424: PUSH
24425: LD_VAR 0 3
24429: IN
24430: ST_TO_ADDR
// end ;
24431: LD_VAR 0 3
24435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24436: LD_INT 0
24438: PPUSH
// if not chassis or not weapon then
24439: LD_VAR 0 1
24443: NOT
24444: PUSH
24445: LD_VAR 0 2
24449: NOT
24450: OR
24451: IFFALSE 24455
// exit ;
24453: GO 25481
// case weapon of us_machine_gun :
24455: LD_VAR 0 2
24459: PUSH
24460: LD_INT 2
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24498
24468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: LD_INT 4
24485: PUSH
24486: LD_INT 5
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: ST_TO_ADDR
24496: GO 25465
24498: LD_INT 3
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24506
24504: GO 24536
24506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24507: LD_ADDR_VAR 0 3
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: LD_INT 3
24520: PUSH
24521: LD_INT 4
24523: PUSH
24524: LD_INT 5
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: ST_TO_ADDR
24534: GO 25465
24536: LD_INT 11
24538: DOUBLE
24539: EQUAL
24540: IFTRUE 24544
24542: GO 24574
24544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 3
24558: PUSH
24559: LD_INT 4
24561: PUSH
24562: LD_INT 5
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
24572: GO 25465
24574: LD_INT 4
24576: DOUBLE
24577: EQUAL
24578: IFTRUE 24582
24580: GO 24608
24582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 4
24596: PUSH
24597: LD_INT 5
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
24606: GO 25465
24608: LD_INT 5
24610: DOUBLE
24611: EQUAL
24612: IFTRUE 24616
24614: GO 24642
24616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 3
24627: PUSH
24628: LD_INT 4
24630: PUSH
24631: LD_INT 5
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: ST_TO_ADDR
24640: GO 25465
24642: LD_INT 9
24644: DOUBLE
24645: EQUAL
24646: IFTRUE 24650
24648: GO 24676
24650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: LD_INT 4
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: ST_TO_ADDR
24674: GO 25465
24676: LD_INT 7
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24710
24684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: LD_INT 3
24695: PUSH
24696: LD_INT 4
24698: PUSH
24699: LD_INT 5
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: ST_TO_ADDR
24708: GO 25465
24710: LD_INT 12
24712: DOUBLE
24713: EQUAL
24714: IFTRUE 24718
24716: GO 24744
24718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24719: LD_ADDR_VAR 0 3
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: LD_INT 4
24732: PUSH
24733: LD_INT 5
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: ST_TO_ADDR
24742: GO 25465
24744: LD_INT 13
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24778
24752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24753: LD_ADDR_VAR 0 3
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: LD_INT 4
24766: PUSH
24767: LD_INT 5
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
24776: GO 25465
24778: LD_INT 14
24780: DOUBLE
24781: EQUAL
24782: IFTRUE 24786
24784: GO 24804
24786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24787: LD_ADDR_VAR 0 3
24791: PUSH
24792: LD_INT 4
24794: PUSH
24795: LD_INT 5
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: ST_TO_ADDR
24802: GO 25465
24804: LD_INT 6
24806: DOUBLE
24807: EQUAL
24808: IFTRUE 24812
24810: GO 24830
24812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24813: LD_ADDR_VAR 0 3
24817: PUSH
24818: LD_INT 4
24820: PUSH
24821: LD_INT 5
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: ST_TO_ADDR
24828: GO 25465
24830: LD_INT 10
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24838
24836: GO 24856
24838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24839: LD_ADDR_VAR 0 3
24843: PUSH
24844: LD_INT 4
24846: PUSH
24847: LD_INT 5
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25465
24856: LD_INT 22
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24890
24864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 11
24872: PUSH
24873: LD_INT 12
24875: PUSH
24876: LD_INT 13
24878: PUSH
24879: LD_INT 14
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25465
24890: LD_INT 23
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24924
24898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 11
24906: PUSH
24907: LD_INT 12
24909: PUSH
24910: LD_INT 13
24912: PUSH
24913: LD_INT 14
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
24922: GO 25465
24924: LD_INT 24
24926: DOUBLE
24927: EQUAL
24928: IFTRUE 24932
24930: GO 24958
24932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24933: LD_ADDR_VAR 0 3
24937: PUSH
24938: LD_INT 11
24940: PUSH
24941: LD_INT 12
24943: PUSH
24944: LD_INT 13
24946: PUSH
24947: LD_INT 14
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
24956: GO 25465
24958: LD_INT 30
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24992
24966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_INT 11
24974: PUSH
24975: LD_INT 12
24977: PUSH
24978: LD_INT 13
24980: PUSH
24981: LD_INT 14
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25465
24992: LD_INT 25
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25018
25000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 13
25008: PUSH
25009: LD_INT 14
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: ST_TO_ADDR
25016: GO 25465
25018: LD_INT 27
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25044
25026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25027: LD_ADDR_VAR 0 3
25031: PUSH
25032: LD_INT 13
25034: PUSH
25035: LD_INT 14
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: ST_TO_ADDR
25042: GO 25465
25044: LD_INT 28
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25070
25052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: LD_INT 14
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: ST_TO_ADDR
25068: GO 25465
25070: LD_INT 29
25072: DOUBLE
25073: EQUAL
25074: IFTRUE 25078
25076: GO 25096
25078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25079: LD_ADDR_VAR 0 3
25083: PUSH
25084: LD_INT 13
25086: PUSH
25087: LD_INT 14
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: ST_TO_ADDR
25094: GO 25465
25096: LD_INT 31
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25122
25104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25105: LD_ADDR_VAR 0 3
25109: PUSH
25110: LD_INT 13
25112: PUSH
25113: LD_INT 14
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: ST_TO_ADDR
25120: GO 25465
25122: LD_INT 26
25124: DOUBLE
25125: EQUAL
25126: IFTRUE 25130
25128: GO 25148
25130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_INT 13
25138: PUSH
25139: LD_INT 14
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: ST_TO_ADDR
25146: GO 25465
25148: LD_INT 42
25150: DOUBLE
25151: EQUAL
25152: IFTRUE 25156
25154: GO 25182
25156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_INT 21
25164: PUSH
25165: LD_INT 22
25167: PUSH
25168: LD_INT 23
25170: PUSH
25171: LD_INT 24
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
25180: GO 25465
25182: LD_INT 43
25184: DOUBLE
25185: EQUAL
25186: IFTRUE 25190
25188: GO 25216
25190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25191: LD_ADDR_VAR 0 3
25195: PUSH
25196: LD_INT 21
25198: PUSH
25199: LD_INT 22
25201: PUSH
25202: LD_INT 23
25204: PUSH
25205: LD_INT 24
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: ST_TO_ADDR
25214: GO 25465
25216: LD_INT 44
25218: DOUBLE
25219: EQUAL
25220: IFTRUE 25224
25222: GO 25250
25224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_INT 21
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_INT 23
25238: PUSH
25239: LD_INT 24
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: ST_TO_ADDR
25248: GO 25465
25250: LD_INT 45
25252: DOUBLE
25253: EQUAL
25254: IFTRUE 25258
25256: GO 25284
25258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: LD_INT 21
25266: PUSH
25267: LD_INT 22
25269: PUSH
25270: LD_INT 23
25272: PUSH
25273: LD_INT 24
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
25282: GO 25465
25284: LD_INT 49
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25318
25292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 21
25300: PUSH
25301: LD_INT 22
25303: PUSH
25304: LD_INT 23
25306: PUSH
25307: LD_INT 24
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: ST_TO_ADDR
25316: GO 25465
25318: LD_INT 51
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25352
25326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_INT 21
25334: PUSH
25335: LD_INT 22
25337: PUSH
25338: LD_INT 23
25340: PUSH
25341: LD_INT 24
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: ST_TO_ADDR
25350: GO 25465
25352: LD_INT 52
25354: DOUBLE
25355: EQUAL
25356: IFTRUE 25360
25358: GO 25386
25360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_INT 21
25368: PUSH
25369: LD_INT 22
25371: PUSH
25372: LD_INT 23
25374: PUSH
25375: LD_INT 24
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: ST_TO_ADDR
25384: GO 25465
25386: LD_INT 53
25388: DOUBLE
25389: EQUAL
25390: IFTRUE 25394
25392: GO 25412
25394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25395: LD_ADDR_VAR 0 3
25399: PUSH
25400: LD_INT 23
25402: PUSH
25403: LD_INT 24
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: ST_TO_ADDR
25410: GO 25465
25412: LD_INT 46
25414: DOUBLE
25415: EQUAL
25416: IFTRUE 25420
25418: GO 25438
25420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25421: LD_ADDR_VAR 0 3
25425: PUSH
25426: LD_INT 23
25428: PUSH
25429: LD_INT 24
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: ST_TO_ADDR
25436: GO 25465
25438: LD_INT 47
25440: DOUBLE
25441: EQUAL
25442: IFTRUE 25446
25444: GO 25464
25446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25447: LD_ADDR_VAR 0 3
25451: PUSH
25452: LD_INT 23
25454: PUSH
25455: LD_INT 24
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: ST_TO_ADDR
25462: GO 25465
25464: POP
// result := ( chassis in result ) ;
25465: LD_ADDR_VAR 0 3
25469: PUSH
25470: LD_VAR 0 1
25474: PUSH
25475: LD_VAR 0 3
25479: IN
25480: ST_TO_ADDR
// end ;
25481: LD_VAR 0 3
25485: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25486: LD_INT 0
25488: PPUSH
25489: PPUSH
25490: PPUSH
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
// result := array ;
25495: LD_ADDR_VAR 0 5
25499: PUSH
25500: LD_VAR 0 1
25504: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25505: LD_VAR 0 1
25509: NOT
25510: PUSH
25511: LD_VAR 0 2
25515: NOT
25516: OR
25517: PUSH
25518: LD_VAR 0 3
25522: NOT
25523: OR
25524: PUSH
25525: LD_VAR 0 2
25529: PUSH
25530: LD_VAR 0 1
25534: GREATER
25535: OR
25536: PUSH
25537: LD_VAR 0 3
25541: PUSH
25542: LD_VAR 0 1
25546: GREATER
25547: OR
25548: IFFALSE 25552
// exit ;
25550: GO 25848
// if direction then
25552: LD_VAR 0 4
25556: IFFALSE 25620
// begin d := 1 ;
25558: LD_ADDR_VAR 0 9
25562: PUSH
25563: LD_INT 1
25565: ST_TO_ADDR
// if i_from > i_to then
25566: LD_VAR 0 2
25570: PUSH
25571: LD_VAR 0 3
25575: GREATER
25576: IFFALSE 25602
// length := ( array - i_from ) + i_to else
25578: LD_ADDR_VAR 0 11
25582: PUSH
25583: LD_VAR 0 1
25587: PUSH
25588: LD_VAR 0 2
25592: MINUS
25593: PUSH
25594: LD_VAR 0 3
25598: PLUS
25599: ST_TO_ADDR
25600: GO 25618
// length := i_to - i_from ;
25602: LD_ADDR_VAR 0 11
25606: PUSH
25607: LD_VAR 0 3
25611: PUSH
25612: LD_VAR 0 2
25616: MINUS
25617: ST_TO_ADDR
// end else
25618: GO 25681
// begin d := - 1 ;
25620: LD_ADDR_VAR 0 9
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: ST_TO_ADDR
// if i_from > i_to then
25629: LD_VAR 0 2
25633: PUSH
25634: LD_VAR 0 3
25638: GREATER
25639: IFFALSE 25659
// length := i_from - i_to else
25641: LD_ADDR_VAR 0 11
25645: PUSH
25646: LD_VAR 0 2
25650: PUSH
25651: LD_VAR 0 3
25655: MINUS
25656: ST_TO_ADDR
25657: GO 25681
// length := ( array - i_to ) + i_from ;
25659: LD_ADDR_VAR 0 11
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_VAR 0 3
25673: MINUS
25674: PUSH
25675: LD_VAR 0 2
25679: PLUS
25680: ST_TO_ADDR
// end ; if not length then
25681: LD_VAR 0 11
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 25848
// tmp := array ;
25690: LD_ADDR_VAR 0 10
25694: PUSH
25695: LD_VAR 0 1
25699: ST_TO_ADDR
// for i = 1 to length do
25700: LD_ADDR_VAR 0 6
25704: PUSH
25705: DOUBLE
25706: LD_INT 1
25708: DEC
25709: ST_TO_ADDR
25710: LD_VAR 0 11
25714: PUSH
25715: FOR_TO
25716: IFFALSE 25836
// begin for j = 1 to array do
25718: LD_ADDR_VAR 0 7
25722: PUSH
25723: DOUBLE
25724: LD_INT 1
25726: DEC
25727: ST_TO_ADDR
25728: LD_VAR 0 1
25732: PUSH
25733: FOR_TO
25734: IFFALSE 25822
// begin k := j + d ;
25736: LD_ADDR_VAR 0 8
25740: PUSH
25741: LD_VAR 0 7
25745: PUSH
25746: LD_VAR 0 9
25750: PLUS
25751: ST_TO_ADDR
// if k > array then
25752: LD_VAR 0 8
25756: PUSH
25757: LD_VAR 0 1
25761: GREATER
25762: IFFALSE 25772
// k := 1 ;
25764: LD_ADDR_VAR 0 8
25768: PUSH
25769: LD_INT 1
25771: ST_TO_ADDR
// if not k then
25772: LD_VAR 0 8
25776: NOT
25777: IFFALSE 25789
// k := array ;
25779: LD_ADDR_VAR 0 8
25783: PUSH
25784: LD_VAR 0 1
25788: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25789: LD_ADDR_VAR 0 10
25793: PUSH
25794: LD_VAR 0 10
25798: PPUSH
25799: LD_VAR 0 8
25803: PPUSH
25804: LD_VAR 0 1
25808: PUSH
25809: LD_VAR 0 7
25813: ARRAY
25814: PPUSH
25815: CALL_OW 1
25819: ST_TO_ADDR
// end ;
25820: GO 25733
25822: POP
25823: POP
// array := tmp ;
25824: LD_ADDR_VAR 0 1
25828: PUSH
25829: LD_VAR 0 10
25833: ST_TO_ADDR
// end ;
25834: GO 25715
25836: POP
25837: POP
// result := array ;
25838: LD_ADDR_VAR 0 5
25842: PUSH
25843: LD_VAR 0 1
25847: ST_TO_ADDR
// end ;
25848: LD_VAR 0 5
25852: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
// result := 0 ;
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// if not array or not value in array then
25865: LD_VAR 0 1
25869: NOT
25870: PUSH
25871: LD_VAR 0 2
25875: PUSH
25876: LD_VAR 0 1
25880: IN
25881: NOT
25882: OR
25883: IFFALSE 25887
// exit ;
25885: GO 25941
// for i = 1 to array do
25887: LD_ADDR_VAR 0 4
25891: PUSH
25892: DOUBLE
25893: LD_INT 1
25895: DEC
25896: ST_TO_ADDR
25897: LD_VAR 0 1
25901: PUSH
25902: FOR_TO
25903: IFFALSE 25939
// if value = array [ i ] then
25905: LD_VAR 0 2
25909: PUSH
25910: LD_VAR 0 1
25914: PUSH
25915: LD_VAR 0 4
25919: ARRAY
25920: EQUAL
25921: IFFALSE 25937
// begin result := i ;
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_VAR 0 4
25932: ST_TO_ADDR
// exit ;
25933: POP
25934: POP
25935: GO 25941
// end ;
25937: GO 25902
25939: POP
25940: POP
// end ;
25941: LD_VAR 0 3
25945: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25946: LD_INT 0
25948: PPUSH
// vc_chassis := chassis ;
25949: LD_ADDR_OWVAR 37
25953: PUSH
25954: LD_VAR 0 1
25958: ST_TO_ADDR
// vc_engine := engine ;
25959: LD_ADDR_OWVAR 39
25963: PUSH
25964: LD_VAR 0 2
25968: ST_TO_ADDR
// vc_control := control ;
25969: LD_ADDR_OWVAR 38
25973: PUSH
25974: LD_VAR 0 3
25978: ST_TO_ADDR
// vc_weapon := weapon ;
25979: LD_ADDR_OWVAR 40
25983: PUSH
25984: LD_VAR 0 4
25988: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25989: LD_ADDR_OWVAR 41
25993: PUSH
25994: LD_VAR 0 5
25998: ST_TO_ADDR
// end ;
25999: LD_VAR 0 6
26003: RET
// export function WantPlant ( unit ) ; var task ; begin
26004: LD_INT 0
26006: PPUSH
26007: PPUSH
// result := false ;
26008: LD_ADDR_VAR 0 2
26012: PUSH
26013: LD_INT 0
26015: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 437
26030: ST_TO_ADDR
// if task then
26031: LD_VAR 0 3
26035: IFFALSE 26063
// if task [ 1 ] [ 1 ] = p then
26037: LD_VAR 0 3
26041: PUSH
26042: LD_INT 1
26044: ARRAY
26045: PUSH
26046: LD_INT 1
26048: ARRAY
26049: PUSH
26050: LD_STRING p
26052: EQUAL
26053: IFFALSE 26063
// result := true ;
26055: LD_ADDR_VAR 0 2
26059: PUSH
26060: LD_INT 1
26062: ST_TO_ADDR
// end ;
26063: LD_VAR 0 2
26067: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26068: LD_INT 0
26070: PPUSH
26071: PPUSH
26072: PPUSH
26073: PPUSH
// if pos < 1 then
26074: LD_VAR 0 2
26078: PUSH
26079: LD_INT 1
26081: LESS
26082: IFFALSE 26086
// exit ;
26084: GO 26389
// if pos = 1 then
26086: LD_VAR 0 2
26090: PUSH
26091: LD_INT 1
26093: EQUAL
26094: IFFALSE 26127
// result := Replace ( arr , pos [ 1 ] , value ) else
26096: LD_ADDR_VAR 0 4
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: LD_VAR 0 2
26110: PUSH
26111: LD_INT 1
26113: ARRAY
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: CALL_OW 1
26124: ST_TO_ADDR
26125: GO 26389
// begin tmp := arr ;
26127: LD_ADDR_VAR 0 6
26131: PUSH
26132: LD_VAR 0 1
26136: ST_TO_ADDR
// s_arr := [ tmp ] ;
26137: LD_ADDR_VAR 0 7
26141: PUSH
26142: LD_VAR 0 6
26146: PUSH
26147: EMPTY
26148: LIST
26149: ST_TO_ADDR
// for i = 1 to pos - 1 do
26150: LD_ADDR_VAR 0 5
26154: PUSH
26155: DOUBLE
26156: LD_INT 1
26158: DEC
26159: ST_TO_ADDR
26160: LD_VAR 0 2
26164: PUSH
26165: LD_INT 1
26167: MINUS
26168: PUSH
26169: FOR_TO
26170: IFFALSE 26215
// begin tmp := tmp [ pos [ i ] ] ;
26172: LD_ADDR_VAR 0 6
26176: PUSH
26177: LD_VAR 0 6
26181: PUSH
26182: LD_VAR 0 2
26186: PUSH
26187: LD_VAR 0 5
26191: ARRAY
26192: ARRAY
26193: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26194: LD_ADDR_VAR 0 7
26198: PUSH
26199: LD_VAR 0 7
26203: PUSH
26204: LD_VAR 0 6
26208: PUSH
26209: EMPTY
26210: LIST
26211: ADD
26212: ST_TO_ADDR
// end ;
26213: GO 26169
26215: POP
26216: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26217: LD_ADDR_VAR 0 6
26221: PUSH
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_VAR 0 2
26231: PUSH
26232: LD_VAR 0 2
26236: ARRAY
26237: PPUSH
26238: LD_VAR 0 3
26242: PPUSH
26243: CALL_OW 1
26247: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26248: LD_ADDR_VAR 0 7
26252: PUSH
26253: LD_VAR 0 7
26257: PPUSH
26258: LD_VAR 0 7
26262: PPUSH
26263: LD_VAR 0 6
26267: PPUSH
26268: CALL_OW 1
26272: ST_TO_ADDR
// for i = s_arr downto 2 do
26273: LD_ADDR_VAR 0 5
26277: PUSH
26278: DOUBLE
26279: LD_VAR 0 7
26283: INC
26284: ST_TO_ADDR
26285: LD_INT 2
26287: PUSH
26288: FOR_DOWNTO
26289: IFFALSE 26373
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26291: LD_ADDR_VAR 0 6
26295: PUSH
26296: LD_VAR 0 7
26300: PUSH
26301: LD_VAR 0 5
26305: PUSH
26306: LD_INT 1
26308: MINUS
26309: ARRAY
26310: PPUSH
26311: LD_VAR 0 2
26315: PUSH
26316: LD_VAR 0 5
26320: PUSH
26321: LD_INT 1
26323: MINUS
26324: ARRAY
26325: PPUSH
26326: LD_VAR 0 7
26330: PUSH
26331: LD_VAR 0 5
26335: ARRAY
26336: PPUSH
26337: CALL_OW 1
26341: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26342: LD_ADDR_VAR 0 7
26346: PUSH
26347: LD_VAR 0 7
26351: PPUSH
26352: LD_VAR 0 5
26356: PUSH
26357: LD_INT 1
26359: MINUS
26360: PPUSH
26361: LD_VAR 0 6
26365: PPUSH
26366: CALL_OW 1
26370: ST_TO_ADDR
// end ;
26371: GO 26288
26373: POP
26374: POP
// result := s_arr [ 1 ] ;
26375: LD_ADDR_VAR 0 4
26379: PUSH
26380: LD_VAR 0 7
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: ST_TO_ADDR
// end ; end ;
26389: LD_VAR 0 4
26393: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26394: LD_INT 0
26396: PPUSH
26397: PPUSH
// if not list then
26398: LD_VAR 0 1
26402: NOT
26403: IFFALSE 26407
// exit ;
26405: GO 26498
// i := list [ pos1 ] ;
26407: LD_ADDR_VAR 0 5
26411: PUSH
26412: LD_VAR 0 1
26416: PUSH
26417: LD_VAR 0 2
26421: ARRAY
26422: ST_TO_ADDR
// if not i then
26423: LD_VAR 0 5
26427: NOT
26428: IFFALSE 26432
// exit ;
26430: GO 26498
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26432: LD_ADDR_VAR 0 1
26436: PUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_VAR 0 2
26446: PPUSH
26447: LD_VAR 0 1
26451: PUSH
26452: LD_VAR 0 3
26456: ARRAY
26457: PPUSH
26458: CALL_OW 1
26462: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26463: LD_ADDR_VAR 0 1
26467: PUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: LD_VAR 0 3
26477: PPUSH
26478: LD_VAR 0 5
26482: PPUSH
26483: CALL_OW 1
26487: ST_TO_ADDR
// result := list ;
26488: LD_ADDR_VAR 0 4
26492: PUSH
26493: LD_VAR 0 1
26497: ST_TO_ADDR
// end ;
26498: LD_VAR 0 4
26502: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26503: LD_INT 0
26505: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26506: LD_ADDR_VAR 0 5
26510: PUSH
26511: LD_VAR 0 1
26515: PPUSH
26516: CALL_OW 250
26520: PPUSH
26521: LD_VAR 0 1
26525: PPUSH
26526: CALL_OW 251
26530: PPUSH
26531: LD_VAR 0 2
26535: PPUSH
26536: LD_VAR 0 3
26540: PPUSH
26541: LD_VAR 0 4
26545: PPUSH
26546: CALL 26556 0 5
26550: ST_TO_ADDR
// end ;
26551: LD_VAR 0 5
26555: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26556: LD_INT 0
26558: PPUSH
26559: PPUSH
26560: PPUSH
26561: PPUSH
// if not list then
26562: LD_VAR 0 3
26566: NOT
26567: IFFALSE 26571
// exit ;
26569: GO 26959
// result := [ ] ;
26571: LD_ADDR_VAR 0 6
26575: PUSH
26576: EMPTY
26577: ST_TO_ADDR
// for i in list do
26578: LD_ADDR_VAR 0 7
26582: PUSH
26583: LD_VAR 0 3
26587: PUSH
26588: FOR_IN
26589: IFFALSE 26791
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26591: LD_ADDR_VAR 0 9
26595: PUSH
26596: LD_VAR 0 7
26600: PPUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_VAR 0 2
26610: PPUSH
26611: CALL_OW 297
26615: ST_TO_ADDR
// if not result then
26616: LD_VAR 0 6
26620: NOT
26621: IFFALSE 26647
// result := [ [ i , tmp ] ] else
26623: LD_ADDR_VAR 0 6
26627: PUSH
26628: LD_VAR 0 7
26632: PUSH
26633: LD_VAR 0 9
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: ST_TO_ADDR
26645: GO 26789
// begin if result [ result ] [ 2 ] < tmp then
26647: LD_VAR 0 6
26651: PUSH
26652: LD_VAR 0 6
26656: ARRAY
26657: PUSH
26658: LD_INT 2
26660: ARRAY
26661: PUSH
26662: LD_VAR 0 9
26666: LESS
26667: IFFALSE 26709
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26669: LD_ADDR_VAR 0 6
26673: PUSH
26674: LD_VAR 0 6
26678: PPUSH
26679: LD_VAR 0 6
26683: PUSH
26684: LD_INT 1
26686: PLUS
26687: PPUSH
26688: LD_VAR 0 7
26692: PUSH
26693: LD_VAR 0 9
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PPUSH
26702: CALL_OW 2
26706: ST_TO_ADDR
26707: GO 26789
// for j = 1 to result do
26709: LD_ADDR_VAR 0 8
26713: PUSH
26714: DOUBLE
26715: LD_INT 1
26717: DEC
26718: ST_TO_ADDR
26719: LD_VAR 0 6
26723: PUSH
26724: FOR_TO
26725: IFFALSE 26787
// begin if tmp < result [ j ] [ 2 ] then
26727: LD_VAR 0 9
26731: PUSH
26732: LD_VAR 0 6
26736: PUSH
26737: LD_VAR 0 8
26741: ARRAY
26742: PUSH
26743: LD_INT 2
26745: ARRAY
26746: LESS
26747: IFFALSE 26785
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26749: LD_ADDR_VAR 0 6
26753: PUSH
26754: LD_VAR 0 6
26758: PPUSH
26759: LD_VAR 0 8
26763: PPUSH
26764: LD_VAR 0 7
26768: PUSH
26769: LD_VAR 0 9
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 2
26782: ST_TO_ADDR
// break ;
26783: GO 26787
// end ; end ;
26785: GO 26724
26787: POP
26788: POP
// end ; end ;
26789: GO 26588
26791: POP
26792: POP
// if result and not asc then
26793: LD_VAR 0 6
26797: PUSH
26798: LD_VAR 0 4
26802: NOT
26803: AND
26804: IFFALSE 26879
// begin tmp := result ;
26806: LD_ADDR_VAR 0 9
26810: PUSH
26811: LD_VAR 0 6
26815: ST_TO_ADDR
// for i = tmp downto 1 do
26816: LD_ADDR_VAR 0 7
26820: PUSH
26821: DOUBLE
26822: LD_VAR 0 9
26826: INC
26827: ST_TO_ADDR
26828: LD_INT 1
26830: PUSH
26831: FOR_DOWNTO
26832: IFFALSE 26877
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26834: LD_ADDR_VAR 0 6
26838: PUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 9
26848: PUSH
26849: LD_VAR 0 7
26853: MINUS
26854: PUSH
26855: LD_INT 1
26857: PLUS
26858: PPUSH
26859: LD_VAR 0 9
26863: PUSH
26864: LD_VAR 0 7
26868: ARRAY
26869: PPUSH
26870: CALL_OW 1
26874: ST_TO_ADDR
26875: GO 26831
26877: POP
26878: POP
// end ; tmp := [ ] ;
26879: LD_ADDR_VAR 0 9
26883: PUSH
26884: EMPTY
26885: ST_TO_ADDR
// if mode then
26886: LD_VAR 0 5
26890: IFFALSE 26959
// begin for i = 1 to result do
26892: LD_ADDR_VAR 0 7
26896: PUSH
26897: DOUBLE
26898: LD_INT 1
26900: DEC
26901: ST_TO_ADDR
26902: LD_VAR 0 6
26906: PUSH
26907: FOR_TO
26908: IFFALSE 26947
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26910: LD_ADDR_VAR 0 9
26914: PUSH
26915: LD_VAR 0 9
26919: PPUSH
26920: LD_VAR 0 7
26924: PPUSH
26925: LD_VAR 0 6
26929: PUSH
26930: LD_VAR 0 7
26934: ARRAY
26935: PUSH
26936: LD_INT 1
26938: ARRAY
26939: PPUSH
26940: CALL_OW 1
26944: ST_TO_ADDR
26945: GO 26907
26947: POP
26948: POP
// result := tmp ;
26949: LD_ADDR_VAR 0 6
26953: PUSH
26954: LD_VAR 0 9
26958: ST_TO_ADDR
// end ; end ;
26959: LD_VAR 0 6
26963: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26972: LD_ADDR_VAR 0 5
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// if not x or not y then
26994: LD_VAR 0 2
26998: NOT
26999: PUSH
27000: LD_VAR 0 3
27004: NOT
27005: OR
27006: IFFALSE 27010
// exit ;
27008: GO 28656
// if not range then
27010: LD_VAR 0 4
27014: NOT
27015: IFFALSE 27025
// range := 10 ;
27017: LD_ADDR_VAR 0 4
27021: PUSH
27022: LD_INT 10
27024: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27025: LD_ADDR_VAR 0 8
27029: PUSH
27030: LD_INT 81
27032: PUSH
27033: LD_VAR 0 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 92
27044: PUSH
27045: LD_VAR 0 2
27049: PUSH
27050: LD_VAR 0 3
27054: PUSH
27055: LD_VAR 0 4
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 3
27068: PUSH
27069: LD_INT 21
27071: PUSH
27072: LD_INT 3
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: PPUSH
27088: CALL_OW 69
27092: ST_TO_ADDR
// if not tmp then
27093: LD_VAR 0 8
27097: NOT
27098: IFFALSE 27102
// exit ;
27100: GO 28656
// for i in tmp do
27102: LD_ADDR_VAR 0 6
27106: PUSH
27107: LD_VAR 0 8
27111: PUSH
27112: FOR_IN
27113: IFFALSE 28631
// begin points := [ 0 , 0 , 0 ] ;
27115: LD_ADDR_VAR 0 9
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// bpoints := 1 ;
27134: LD_ADDR_VAR 0 10
27138: PUSH
27139: LD_INT 1
27141: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27142: LD_VAR 0 6
27146: PPUSH
27147: CALL_OW 247
27151: PUSH
27152: LD_INT 1
27154: DOUBLE
27155: EQUAL
27156: IFTRUE 27160
27158: GO 27738
27160: POP
// begin if GetClass ( i ) = 1 then
27161: LD_VAR 0 6
27165: PPUSH
27166: CALL_OW 257
27170: PUSH
27171: LD_INT 1
27173: EQUAL
27174: IFFALSE 27195
// points := [ 10 , 5 , 3 ] ;
27176: LD_ADDR_VAR 0 9
27180: PUSH
27181: LD_INT 10
27183: PUSH
27184: LD_INT 5
27186: PUSH
27187: LD_INT 3
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: LIST
27194: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27195: LD_VAR 0 6
27199: PPUSH
27200: CALL_OW 257
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: LD_INT 4
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: IN
27219: IFFALSE 27240
// points := [ 3 , 2 , 1 ] ;
27221: LD_ADDR_VAR 0 9
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27240: LD_VAR 0 6
27244: PPUSH
27245: CALL_OW 257
27249: PUSH
27250: LD_INT 5
27252: EQUAL
27253: IFFALSE 27274
// points := [ 130 , 5 , 2 ] ;
27255: LD_ADDR_VAR 0 9
27259: PUSH
27260: LD_INT 130
27262: PUSH
27263: LD_INT 5
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27274: LD_VAR 0 6
27278: PPUSH
27279: CALL_OW 257
27283: PUSH
27284: LD_INT 8
27286: EQUAL
27287: IFFALSE 27308
// points := [ 35 , 35 , 30 ] ;
27289: LD_ADDR_VAR 0 9
27293: PUSH
27294: LD_INT 35
27296: PUSH
27297: LD_INT 35
27299: PUSH
27300: LD_INT 30
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27308: LD_VAR 0 6
27312: PPUSH
27313: CALL_OW 257
27317: PUSH
27318: LD_INT 9
27320: EQUAL
27321: IFFALSE 27342
// points := [ 20 , 55 , 40 ] ;
27323: LD_ADDR_VAR 0 9
27327: PUSH
27328: LD_INT 20
27330: PUSH
27331: LD_INT 55
27333: PUSH
27334: LD_INT 40
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27342: LD_VAR 0 6
27346: PPUSH
27347: CALL_OW 257
27351: PUSH
27352: LD_INT 12
27354: PUSH
27355: LD_INT 16
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: IN
27362: IFFALSE 27383
// points := [ 5 , 3 , 2 ] ;
27364: LD_ADDR_VAR 0 9
27368: PUSH
27369: LD_INT 5
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27383: LD_VAR 0 6
27387: PPUSH
27388: CALL_OW 257
27392: PUSH
27393: LD_INT 17
27395: EQUAL
27396: IFFALSE 27417
// points := [ 100 , 50 , 75 ] ;
27398: LD_ADDR_VAR 0 9
27402: PUSH
27403: LD_INT 100
27405: PUSH
27406: LD_INT 50
27408: PUSH
27409: LD_INT 75
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27417: LD_VAR 0 6
27421: PPUSH
27422: CALL_OW 257
27426: PUSH
27427: LD_INT 15
27429: EQUAL
27430: IFFALSE 27451
// points := [ 10 , 5 , 3 ] ;
27432: LD_ADDR_VAR 0 9
27436: PUSH
27437: LD_INT 10
27439: PUSH
27440: LD_INT 5
27442: PUSH
27443: LD_INT 3
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27451: LD_VAR 0 6
27455: PPUSH
27456: CALL_OW 257
27460: PUSH
27461: LD_INT 14
27463: EQUAL
27464: IFFALSE 27485
// points := [ 10 , 0 , 0 ] ;
27466: LD_ADDR_VAR 0 9
27470: PUSH
27471: LD_INT 10
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 257
27494: PUSH
27495: LD_INT 11
27497: EQUAL
27498: IFFALSE 27519
// points := [ 30 , 10 , 5 ] ;
27500: LD_ADDR_VAR 0 9
27504: PUSH
27505: LD_INT 30
27507: PUSH
27508: LD_INT 10
27510: PUSH
27511: LD_INT 5
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27519: LD_VAR 0 1
27523: PPUSH
27524: LD_INT 5
27526: PPUSH
27527: CALL_OW 321
27531: PUSH
27532: LD_INT 2
27534: EQUAL
27535: IFFALSE 27552
// bpoints := bpoints * 1.8 ;
27537: LD_ADDR_VAR 0 10
27541: PUSH
27542: LD_VAR 0 10
27546: PUSH
27547: LD_REAL  1.80000000000000E+0000
27550: MUL
27551: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27552: LD_VAR 0 6
27556: PPUSH
27557: CALL_OW 257
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: IN
27580: PUSH
27581: LD_VAR 0 1
27585: PPUSH
27586: LD_INT 51
27588: PPUSH
27589: CALL_OW 321
27593: PUSH
27594: LD_INT 2
27596: EQUAL
27597: AND
27598: IFFALSE 27615
// bpoints := bpoints * 1.2 ;
27600: LD_ADDR_VAR 0 10
27604: PUSH
27605: LD_VAR 0 10
27609: PUSH
27610: LD_REAL  1.20000000000000E+0000
27613: MUL
27614: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27615: LD_VAR 0 6
27619: PPUSH
27620: CALL_OW 257
27624: PUSH
27625: LD_INT 5
27627: PUSH
27628: LD_INT 7
27630: PUSH
27631: LD_INT 9
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: IN
27639: PUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: LD_INT 52
27647: PPUSH
27648: CALL_OW 321
27652: PUSH
27653: LD_INT 2
27655: EQUAL
27656: AND
27657: IFFALSE 27674
// bpoints := bpoints * 1.5 ;
27659: LD_ADDR_VAR 0 10
27663: PUSH
27664: LD_VAR 0 10
27668: PUSH
27669: LD_REAL  1.50000000000000E+0000
27672: MUL
27673: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27674: LD_VAR 0 1
27678: PPUSH
27679: LD_INT 66
27681: PPUSH
27682: CALL_OW 321
27686: PUSH
27687: LD_INT 2
27689: EQUAL
27690: IFFALSE 27707
// bpoints := bpoints * 1.1 ;
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 10
27701: PUSH
27702: LD_REAL  1.10000000000000E+0000
27705: MUL
27706: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27707: LD_ADDR_VAR 0 10
27711: PUSH
27712: LD_VAR 0 10
27716: PUSH
27717: LD_VAR 0 6
27721: PPUSH
27722: LD_INT 1
27724: PPUSH
27725: CALL_OW 259
27729: PUSH
27730: LD_REAL  1.15000000000000E+0000
27733: MUL
27734: MUL
27735: ST_TO_ADDR
// end ; unit_vehicle :
27736: GO 28560
27738: LD_INT 2
27740: DOUBLE
27741: EQUAL
27742: IFTRUE 27746
27744: GO 28548
27746: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27747: LD_VAR 0 6
27751: PPUSH
27752: CALL_OW 264
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 42
27762: PUSH
27763: LD_INT 24
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: IN
27771: IFFALSE 27792
// points := [ 25 , 5 , 3 ] ;
27773: LD_ADDR_VAR 0 9
27777: PUSH
27778: LD_INT 25
27780: PUSH
27781: LD_INT 5
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27792: LD_VAR 0 6
27796: PPUSH
27797: CALL_OW 264
27801: PUSH
27802: LD_INT 4
27804: PUSH
27805: LD_INT 43
27807: PUSH
27808: LD_INT 25
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: IN
27816: IFFALSE 27837
// points := [ 40 , 15 , 5 ] ;
27818: LD_ADDR_VAR 0 9
27822: PUSH
27823: LD_INT 40
27825: PUSH
27826: LD_INT 15
27828: PUSH
27829: LD_INT 5
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27837: LD_VAR 0 6
27841: PPUSH
27842: CALL_OW 264
27846: PUSH
27847: LD_INT 3
27849: PUSH
27850: LD_INT 23
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: IN
27857: IFFALSE 27878
// points := [ 7 , 25 , 8 ] ;
27859: LD_ADDR_VAR 0 9
27863: PUSH
27864: LD_INT 7
27866: PUSH
27867: LD_INT 25
27869: PUSH
27870: LD_INT 8
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27878: LD_VAR 0 6
27882: PPUSH
27883: CALL_OW 264
27887: PUSH
27888: LD_INT 5
27890: PUSH
27891: LD_INT 27
27893: PUSH
27894: LD_INT 44
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: IN
27902: IFFALSE 27923
// points := [ 14 , 50 , 16 ] ;
27904: LD_ADDR_VAR 0 9
27908: PUSH
27909: LD_INT 14
27911: PUSH
27912: LD_INT 50
27914: PUSH
27915: LD_INT 16
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27923: LD_VAR 0 6
27927: PPUSH
27928: CALL_OW 264
27932: PUSH
27933: LD_INT 6
27935: PUSH
27936: LD_INT 46
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: IN
27943: IFFALSE 27964
// points := [ 32 , 120 , 70 ] ;
27945: LD_ADDR_VAR 0 9
27949: PUSH
27950: LD_INT 32
27952: PUSH
27953: LD_INT 120
27955: PUSH
27956: LD_INT 70
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27964: LD_VAR 0 6
27968: PPUSH
27969: CALL_OW 264
27973: PUSH
27974: LD_INT 7
27976: PUSH
27977: LD_INT 28
27979: PUSH
27980: LD_INT 45
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: IN
27988: IFFALSE 28009
// points := [ 35 , 20 , 45 ] ;
27990: LD_ADDR_VAR 0 9
27994: PUSH
27995: LD_INT 35
27997: PUSH
27998: LD_INT 20
28000: PUSH
28001: LD_INT 45
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28009: LD_VAR 0 6
28013: PPUSH
28014: CALL_OW 264
28018: PUSH
28019: LD_INT 47
28021: PUSH
28022: EMPTY
28023: LIST
28024: IN
28025: IFFALSE 28046
// points := [ 67 , 45 , 75 ] ;
28027: LD_ADDR_VAR 0 9
28031: PUSH
28032: LD_INT 67
28034: PUSH
28035: LD_INT 45
28037: PUSH
28038: LD_INT 75
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28046: LD_VAR 0 6
28050: PPUSH
28051: CALL_OW 264
28055: PUSH
28056: LD_INT 26
28058: PUSH
28059: EMPTY
28060: LIST
28061: IN
28062: IFFALSE 28083
// points := [ 120 , 30 , 80 ] ;
28064: LD_ADDR_VAR 0 9
28068: PUSH
28069: LD_INT 120
28071: PUSH
28072: LD_INT 30
28074: PUSH
28075: LD_INT 80
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 264
28092: PUSH
28093: LD_INT 22
28095: PUSH
28096: EMPTY
28097: LIST
28098: IN
28099: IFFALSE 28120
// points := [ 40 , 1 , 1 ] ;
28101: LD_ADDR_VAR 0 9
28105: PUSH
28106: LD_INT 40
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28120: LD_VAR 0 6
28124: PPUSH
28125: CALL_OW 264
28129: PUSH
28130: LD_INT 29
28132: PUSH
28133: EMPTY
28134: LIST
28135: IN
28136: IFFALSE 28157
// points := [ 70 , 200 , 400 ] ;
28138: LD_ADDR_VAR 0 9
28142: PUSH
28143: LD_INT 70
28145: PUSH
28146: LD_INT 200
28148: PUSH
28149: LD_INT 400
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28157: LD_VAR 0 6
28161: PPUSH
28162: CALL_OW 264
28166: PUSH
28167: LD_INT 14
28169: PUSH
28170: LD_INT 53
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: IN
28177: IFFALSE 28198
// points := [ 40 , 10 , 20 ] ;
28179: LD_ADDR_VAR 0 9
28183: PUSH
28184: LD_INT 40
28186: PUSH
28187: LD_INT 10
28189: PUSH
28190: LD_INT 20
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28198: LD_VAR 0 6
28202: PPUSH
28203: CALL_OW 264
28207: PUSH
28208: LD_INT 9
28210: PUSH
28211: EMPTY
28212: LIST
28213: IN
28214: IFFALSE 28235
// points := [ 5 , 70 , 20 ] ;
28216: LD_ADDR_VAR 0 9
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: LD_INT 70
28226: PUSH
28227: LD_INT 20
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28235: LD_VAR 0 6
28239: PPUSH
28240: CALL_OW 264
28244: PUSH
28245: LD_INT 10
28247: PUSH
28248: EMPTY
28249: LIST
28250: IN
28251: IFFALSE 28272
// points := [ 35 , 110 , 70 ] ;
28253: LD_ADDR_VAR 0 9
28257: PUSH
28258: LD_INT 35
28260: PUSH
28261: LD_INT 110
28263: PUSH
28264: LD_INT 70
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28272: LD_VAR 0 6
28276: PPUSH
28277: CALL_OW 265
28281: PUSH
28282: LD_INT 25
28284: EQUAL
28285: IFFALSE 28306
// points := [ 80 , 65 , 100 ] ;
28287: LD_ADDR_VAR 0 9
28291: PUSH
28292: LD_INT 80
28294: PUSH
28295: LD_INT 65
28297: PUSH
28298: LD_INT 100
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28306: LD_VAR 0 6
28310: PPUSH
28311: CALL_OW 263
28315: PUSH
28316: LD_INT 1
28318: EQUAL
28319: IFFALSE 28354
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28321: LD_ADDR_VAR 0 10
28325: PUSH
28326: LD_VAR 0 10
28330: PUSH
28331: LD_VAR 0 6
28335: PPUSH
28336: CALL_OW 311
28340: PPUSH
28341: LD_INT 3
28343: PPUSH
28344: CALL_OW 259
28348: PUSH
28349: LD_INT 4
28351: MUL
28352: MUL
28353: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28354: LD_VAR 0 6
28358: PPUSH
28359: CALL_OW 263
28363: PUSH
28364: LD_INT 2
28366: EQUAL
28367: IFFALSE 28418
// begin j := IsControledBy ( i ) ;
28369: LD_ADDR_VAR 0 7
28373: PUSH
28374: LD_VAR 0 6
28378: PPUSH
28379: CALL_OW 312
28383: ST_TO_ADDR
// if j then
28384: LD_VAR 0 7
28388: IFFALSE 28418
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28390: LD_ADDR_VAR 0 10
28394: PUSH
28395: LD_VAR 0 10
28399: PUSH
28400: LD_VAR 0 7
28404: PPUSH
28405: LD_INT 3
28407: PPUSH
28408: CALL_OW 259
28412: PUSH
28413: LD_INT 3
28415: MUL
28416: MUL
28417: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 264
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: LD_INT 6
28433: PUSH
28434: LD_INT 46
28436: PUSH
28437: LD_INT 44
28439: PUSH
28440: LD_INT 47
28442: PUSH
28443: LD_INT 45
28445: PUSH
28446: LD_INT 28
28448: PUSH
28449: LD_INT 7
28451: PUSH
28452: LD_INT 27
28454: PUSH
28455: LD_INT 29
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: IN
28470: PUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: LD_INT 52
28478: PPUSH
28479: CALL_OW 321
28483: PUSH
28484: LD_INT 2
28486: EQUAL
28487: AND
28488: IFFALSE 28505
// bpoints := bpoints * 1.2 ;
28490: LD_ADDR_VAR 0 10
28494: PUSH
28495: LD_VAR 0 10
28499: PUSH
28500: LD_REAL  1.20000000000000E+0000
28503: MUL
28504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28505: LD_VAR 0 6
28509: PPUSH
28510: CALL_OW 264
28514: PUSH
28515: LD_INT 6
28517: PUSH
28518: LD_INT 46
28520: PUSH
28521: LD_INT 47
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: IN
28529: IFFALSE 28546
// bpoints := bpoints * 1.2 ;
28531: LD_ADDR_VAR 0 10
28535: PUSH
28536: LD_VAR 0 10
28540: PUSH
28541: LD_REAL  1.20000000000000E+0000
28544: MUL
28545: ST_TO_ADDR
// end ; unit_building :
28546: GO 28560
28548: LD_INT 3
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28559
28556: POP
// ; end ;
28557: GO 28560
28559: POP
// for j = 1 to 3 do
28560: LD_ADDR_VAR 0 7
28564: PUSH
28565: DOUBLE
28566: LD_INT 1
28568: DEC
28569: ST_TO_ADDR
28570: LD_INT 3
28572: PUSH
28573: FOR_TO
28574: IFFALSE 28627
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_VAR 0 5
28585: PPUSH
28586: LD_VAR 0 7
28590: PPUSH
28591: LD_VAR 0 5
28595: PUSH
28596: LD_VAR 0 7
28600: ARRAY
28601: PUSH
28602: LD_VAR 0 9
28606: PUSH
28607: LD_VAR 0 7
28611: ARRAY
28612: PUSH
28613: LD_VAR 0 10
28617: MUL
28618: PLUS
28619: PPUSH
28620: CALL_OW 1
28624: ST_TO_ADDR
28625: GO 28573
28627: POP
28628: POP
// end ;
28629: GO 27112
28631: POP
28632: POP
// result := Replace ( result , 4 , tmp ) ;
28633: LD_ADDR_VAR 0 5
28637: PUSH
28638: LD_VAR 0 5
28642: PPUSH
28643: LD_INT 4
28645: PPUSH
28646: LD_VAR 0 8
28650: PPUSH
28651: CALL_OW 1
28655: ST_TO_ADDR
// end ;
28656: LD_VAR 0 5
28660: RET
// export function DangerAtRange ( unit , range ) ; begin
28661: LD_INT 0
28663: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28664: LD_ADDR_VAR 0 3
28668: PUSH
28669: LD_VAR 0 1
28673: PPUSH
28674: CALL_OW 255
28678: PPUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 250
28688: PPUSH
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL_OW 251
28698: PPUSH
28699: LD_VAR 0 2
28703: PPUSH
28704: CALL 26964 0 4
28708: ST_TO_ADDR
// end ;
28709: LD_VAR 0 3
28713: RET
// export function DangerInArea ( side , area ) ; begin
28714: LD_INT 0
28716: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_INT 81
28729: PUSH
28730: LD_VAR 0 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PPUSH
28739: CALL_OW 70
28743: ST_TO_ADDR
// end ;
28744: LD_VAR 0 3
28748: RET
// export function IsExtension ( b ) ; begin
28749: LD_INT 0
28751: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28752: LD_ADDR_VAR 0 2
28756: PUSH
28757: LD_VAR 0 1
28761: PUSH
28762: LD_INT 23
28764: PUSH
28765: LD_INT 20
28767: PUSH
28768: LD_INT 22
28770: PUSH
28771: LD_INT 17
28773: PUSH
28774: LD_INT 24
28776: PUSH
28777: LD_INT 21
28779: PUSH
28780: LD_INT 19
28782: PUSH
28783: LD_INT 16
28785: PUSH
28786: LD_INT 25
28788: PUSH
28789: LD_INT 18
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: IN
28804: ST_TO_ADDR
// end ;
28805: LD_VAR 0 2
28809: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28810: LD_INT 0
28812: PPUSH
28813: PPUSH
28814: PPUSH
// result := [ ] ;
28815: LD_ADDR_VAR 0 3
28819: PUSH
28820: EMPTY
28821: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28822: LD_ADDR_VAR 0 4
28826: PUSH
28827: LD_VAR 0 2
28831: PPUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PPUSH
28842: CALL_OW 70
28846: ST_TO_ADDR
// if not tmp then
28847: LD_VAR 0 4
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 28914
// for i in tmp do
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: LD_VAR 0 4
28865: PUSH
28866: FOR_IN
28867: IFFALSE 28902
// if GetBase ( i ) <> base then
28869: LD_VAR 0 5
28873: PPUSH
28874: CALL_OW 274
28878: PUSH
28879: LD_VAR 0 1
28883: NONEQUAL
28884: IFFALSE 28900
// ComLinkToBase ( base , i ) ;
28886: LD_VAR 0 1
28890: PPUSH
28891: LD_VAR 0 5
28895: PPUSH
28896: CALL_OW 169
28900: GO 28866
28902: POP
28903: POP
// result := tmp ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_VAR 0 4
28913: ST_TO_ADDR
// end ;
28914: LD_VAR 0 3
28918: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
// if BuildingStatus ( b ) = bs_build then
28923: LD_VAR 0 2
28927: PPUSH
28928: CALL_OW 461
28932: PUSH
28933: LD_INT 1
28935: EQUAL
28936: IFFALSE 28996
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28938: LD_VAR 0 1
28942: PPUSH
28943: LD_STRING h
28945: PUSH
28946: LD_VAR 0 2
28950: PPUSH
28951: CALL_OW 250
28955: PUSH
28956: LD_VAR 0 2
28960: PPUSH
28961: CALL_OW 251
28965: PUSH
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: PPUSH
28992: CALL_OW 446
// end ;
28996: LD_VAR 0 3
29000: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29001: LD_INT 0
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29009: LD_VAR 0 1
29013: NOT
29014: PUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL_OW 263
29024: PUSH
29025: LD_INT 2
29027: EQUAL
29028: NOT
29029: OR
29030: IFFALSE 29034
// exit ;
29032: GO 29350
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29034: LD_ADDR_VAR 0 6
29038: PUSH
29039: LD_INT 22
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 255
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 30
29061: PUSH
29062: LD_INT 36
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 34
29071: PUSH
29072: LD_INT 31
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not tmp then
29093: LD_VAR 0 6
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29350
// result := [ ] ;
29102: LD_ADDR_VAR 0 2
29106: PUSH
29107: EMPTY
29108: ST_TO_ADDR
// for i in tmp do
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_VAR 0 6
29118: PUSH
29119: FOR_IN
29120: IFFALSE 29191
// begin t := UnitsInside ( i ) ;
29122: LD_ADDR_VAR 0 4
29126: PUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 313
29136: ST_TO_ADDR
// if t then
29137: LD_VAR 0 4
29141: IFFALSE 29189
// for j in t do
29143: LD_ADDR_VAR 0 7
29147: PUSH
29148: LD_VAR 0 4
29152: PUSH
29153: FOR_IN
29154: IFFALSE 29187
// result := Insert ( result , result + 1 , j ) ;
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_VAR 0 2
29165: PPUSH
29166: LD_VAR 0 2
29170: PUSH
29171: LD_INT 1
29173: PLUS
29174: PPUSH
29175: LD_VAR 0 7
29179: PPUSH
29180: CALL_OW 2
29184: ST_TO_ADDR
29185: GO 29153
29187: POP
29188: POP
// end ;
29189: GO 29119
29191: POP
29192: POP
// if not result then
29193: LD_VAR 0 2
29197: NOT
29198: IFFALSE 29202
// exit ;
29200: GO 29350
// mech := result [ 1 ] ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: LD_VAR 0 2
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: ST_TO_ADDR
// if result > 1 then
29216: LD_VAR 0 2
29220: PUSH
29221: LD_INT 1
29223: GREATER
29224: IFFALSE 29336
// for i = 2 to result do
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: DOUBLE
29232: LD_INT 2
29234: DEC
29235: ST_TO_ADDR
29236: LD_VAR 0 2
29240: PUSH
29241: FOR_TO
29242: IFFALSE 29334
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29244: LD_ADDR_VAR 0 4
29248: PUSH
29249: LD_VAR 0 2
29253: PUSH
29254: LD_VAR 0 3
29258: ARRAY
29259: PPUSH
29260: LD_INT 3
29262: PPUSH
29263: CALL_OW 259
29267: PUSH
29268: LD_VAR 0 2
29272: PUSH
29273: LD_VAR 0 3
29277: ARRAY
29278: PPUSH
29279: CALL_OW 432
29283: MINUS
29284: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29285: LD_VAR 0 4
29289: PUSH
29290: LD_VAR 0 5
29294: PPUSH
29295: LD_INT 3
29297: PPUSH
29298: CALL_OW 259
29302: PUSH
29303: LD_VAR 0 5
29307: PPUSH
29308: CALL_OW 432
29312: MINUS
29313: GREATEREQUAL
29314: IFFALSE 29332
// mech := result [ i ] ;
29316: LD_ADDR_VAR 0 5
29320: PUSH
29321: LD_VAR 0 2
29325: PUSH
29326: LD_VAR 0 3
29330: ARRAY
29331: ST_TO_ADDR
// end ;
29332: GO 29241
29334: POP
29335: POP
// ComLinkTo ( vehicle , mech ) ;
29336: LD_VAR 0 1
29340: PPUSH
29341: LD_VAR 0 5
29345: PPUSH
29346: CALL_OW 135
// end ;
29350: LD_VAR 0 2
29354: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29355: LD_INT 0
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
// result := [ ] ;
29370: LD_ADDR_VAR 0 7
29374: PUSH
29375: EMPTY
29376: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29377: LD_VAR 0 1
29381: PPUSH
29382: CALL_OW 266
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: IN
29397: NOT
29398: IFFALSE 29402
// exit ;
29400: GO 31033
// if name then
29402: LD_VAR 0 3
29406: IFFALSE 29422
// SetBName ( base_dep , name ) ;
29408: LD_VAR 0 1
29412: PPUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: CALL_OW 500
// base := GetBase ( base_dep ) ;
29422: LD_ADDR_VAR 0 15
29426: PUSH
29427: LD_VAR 0 1
29431: PPUSH
29432: CALL_OW 274
29436: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29437: LD_ADDR_VAR 0 16
29441: PUSH
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 255
29451: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29452: LD_ADDR_VAR 0 17
29456: PUSH
29457: LD_VAR 0 1
29461: PPUSH
29462: CALL_OW 248
29466: ST_TO_ADDR
// if sources then
29467: LD_VAR 0 5
29471: IFFALSE 29518
// for i = 1 to 3 do
29473: LD_ADDR_VAR 0 8
29477: PUSH
29478: DOUBLE
29479: LD_INT 1
29481: DEC
29482: ST_TO_ADDR
29483: LD_INT 3
29485: PUSH
29486: FOR_TO
29487: IFFALSE 29516
// AddResourceType ( base , i , sources [ i ] ) ;
29489: LD_VAR 0 15
29493: PPUSH
29494: LD_VAR 0 8
29498: PPUSH
29499: LD_VAR 0 5
29503: PUSH
29504: LD_VAR 0 8
29508: ARRAY
29509: PPUSH
29510: CALL_OW 276
29514: GO 29486
29516: POP
29517: POP
// buildings := GetBaseBuildings ( base , area ) ;
29518: LD_ADDR_VAR 0 18
29522: PUSH
29523: LD_VAR 0 15
29527: PPUSH
29528: LD_VAR 0 2
29532: PPUSH
29533: CALL 28810 0 2
29537: ST_TO_ADDR
// InitHc ;
29538: CALL_OW 19
// InitUc ;
29542: CALL_OW 18
// uc_side := side ;
29546: LD_ADDR_OWVAR 20
29550: PUSH
29551: LD_VAR 0 16
29555: ST_TO_ADDR
// uc_nation := nation ;
29556: LD_ADDR_OWVAR 21
29560: PUSH
29561: LD_VAR 0 17
29565: ST_TO_ADDR
// if buildings then
29566: LD_VAR 0 18
29570: IFFALSE 30892
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29572: LD_ADDR_VAR 0 19
29576: PUSH
29577: LD_VAR 0 18
29581: PPUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 30
29587: PUSH
29588: LD_INT 29
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 30
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 72
29614: ST_TO_ADDR
// if tmp then
29615: LD_VAR 0 19
29619: IFFALSE 29667
// for i in tmp do
29621: LD_ADDR_VAR 0 8
29625: PUSH
29626: LD_VAR 0 19
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29665
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29634: LD_VAR 0 8
29638: PPUSH
29639: CALL_OW 250
29643: PPUSH
29644: LD_VAR 0 8
29648: PPUSH
29649: CALL_OW 251
29653: PPUSH
29654: LD_VAR 0 16
29658: PPUSH
29659: CALL_OW 441
29663: GO 29631
29665: POP
29666: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29667: LD_VAR 0 18
29671: PPUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_INT 32
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 33
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: PPUSH
29700: CALL_OW 72
29704: IFFALSE 29792
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29706: LD_ADDR_VAR 0 8
29710: PUSH
29711: LD_VAR 0 18
29715: PPUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 30
29721: PUSH
29722: LD_INT 32
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 30
29731: PUSH
29732: LD_INT 33
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 72
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29790
// begin if not GetBWeapon ( i ) then
29752: LD_VAR 0 8
29756: PPUSH
29757: CALL_OW 269
29761: NOT
29762: IFFALSE 29788
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29764: LD_VAR 0 8
29768: PPUSH
29769: LD_VAR 0 8
29773: PPUSH
29774: LD_VAR 0 2
29778: PPUSH
29779: CALL 31038 0 2
29783: PPUSH
29784: CALL_OW 431
// end ;
29788: GO 29749
29790: POP
29791: POP
// end ; for i = 1 to personel do
29792: LD_ADDR_VAR 0 8
29796: PUSH
29797: DOUBLE
29798: LD_INT 1
29800: DEC
29801: ST_TO_ADDR
29802: LD_VAR 0 6
29806: PUSH
29807: FOR_TO
29808: IFFALSE 30872
// begin if i > 4 then
29810: LD_VAR 0 8
29814: PUSH
29815: LD_INT 4
29817: GREATER
29818: IFFALSE 29822
// break ;
29820: GO 30872
// case i of 1 :
29822: LD_VAR 0 8
29826: PUSH
29827: LD_INT 1
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29915
29835: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29836: LD_ADDR_VAR 0 12
29840: PUSH
29841: LD_VAR 0 18
29845: PPUSH
29846: LD_INT 22
29848: PUSH
29849: LD_VAR 0 16
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 58
29860: PUSH
29861: EMPTY
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 30
29869: PUSH
29870: LD_INT 32
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 30
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 30
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: PPUSH
29908: CALL_OW 72
29912: ST_TO_ADDR
29913: GO 30137
29915: LD_INT 2
29917: DOUBLE
29918: EQUAL
29919: IFTRUE 29923
29921: GO 29985
29923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29924: LD_ADDR_VAR 0 12
29928: PUSH
29929: LD_VAR 0 18
29933: PPUSH
29934: LD_INT 22
29936: PUSH
29937: LD_VAR 0 16
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: PUSH
29949: LD_INT 30
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 30
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PPUSH
29978: CALL_OW 72
29982: ST_TO_ADDR
29983: GO 30137
29985: LD_INT 3
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30055
29993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29994: LD_ADDR_VAR 0 12
29998: PUSH
29999: LD_VAR 0 18
30003: PPUSH
30004: LD_INT 22
30006: PUSH
30007: LD_VAR 0 16
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: LD_INT 30
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 30
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PPUSH
30048: CALL_OW 72
30052: ST_TO_ADDR
30053: GO 30137
30055: LD_INT 4
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30136
30063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30064: LD_ADDR_VAR 0 12
30068: PUSH
30069: LD_VAR 0 18
30073: PPUSH
30074: LD_INT 22
30076: PUSH
30077: LD_VAR 0 16
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 6
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 30
30101: PUSH
30102: LD_INT 7
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 30
30111: PUSH
30112: LD_INT 8
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PPUSH
30129: CALL_OW 72
30133: ST_TO_ADDR
30134: GO 30137
30136: POP
// if i = 1 then
30137: LD_VAR 0 8
30141: PUSH
30142: LD_INT 1
30144: EQUAL
30145: IFFALSE 30256
// begin tmp := [ ] ;
30147: LD_ADDR_VAR 0 19
30151: PUSH
30152: EMPTY
30153: ST_TO_ADDR
// for j in f do
30154: LD_ADDR_VAR 0 9
30158: PUSH
30159: LD_VAR 0 12
30163: PUSH
30164: FOR_IN
30165: IFFALSE 30238
// if GetBType ( j ) = b_bunker then
30167: LD_VAR 0 9
30171: PPUSH
30172: CALL_OW 266
30176: PUSH
30177: LD_INT 32
30179: EQUAL
30180: IFFALSE 30207
// tmp := Insert ( tmp , 1 , j ) else
30182: LD_ADDR_VAR 0 19
30186: PUSH
30187: LD_VAR 0 19
30191: PPUSH
30192: LD_INT 1
30194: PPUSH
30195: LD_VAR 0 9
30199: PPUSH
30200: CALL_OW 2
30204: ST_TO_ADDR
30205: GO 30236
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30207: LD_ADDR_VAR 0 19
30211: PUSH
30212: LD_VAR 0 19
30216: PPUSH
30217: LD_VAR 0 19
30221: PUSH
30222: LD_INT 1
30224: PLUS
30225: PPUSH
30226: LD_VAR 0 9
30230: PPUSH
30231: CALL_OW 2
30235: ST_TO_ADDR
30236: GO 30164
30238: POP
30239: POP
// if tmp then
30240: LD_VAR 0 19
30244: IFFALSE 30256
// f := tmp ;
30246: LD_ADDR_VAR 0 12
30250: PUSH
30251: LD_VAR 0 19
30255: ST_TO_ADDR
// end ; x := personel [ i ] ;
30256: LD_ADDR_VAR 0 13
30260: PUSH
30261: LD_VAR 0 6
30265: PUSH
30266: LD_VAR 0 8
30270: ARRAY
30271: ST_TO_ADDR
// if x = - 1 then
30272: LD_VAR 0 13
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: EQUAL
30281: IFFALSE 30490
// begin for j in f do
30283: LD_ADDR_VAR 0 9
30287: PUSH
30288: LD_VAR 0 12
30292: PUSH
30293: FOR_IN
30294: IFFALSE 30486
// repeat InitHc ;
30296: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30300: LD_VAR 0 9
30304: PPUSH
30305: CALL_OW 266
30309: PUSH
30310: LD_INT 5
30312: EQUAL
30313: IFFALSE 30383
// begin if UnitsInside ( j ) < 3 then
30315: LD_VAR 0 9
30319: PPUSH
30320: CALL_OW 313
30324: PUSH
30325: LD_INT 3
30327: LESS
30328: IFFALSE 30364
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30330: LD_INT 0
30332: PPUSH
30333: LD_INT 5
30335: PUSH
30336: LD_INT 8
30338: PUSH
30339: LD_INT 9
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: PUSH
30347: LD_VAR 0 17
30351: ARRAY
30352: PPUSH
30353: LD_VAR 0 4
30357: PPUSH
30358: CALL_OW 380
30362: GO 30381
// PrepareHuman ( false , i , skill ) ;
30364: LD_INT 0
30366: PPUSH
30367: LD_VAR 0 8
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: CALL_OW 380
// end else
30381: GO 30400
// PrepareHuman ( false , i , skill ) ;
30383: LD_INT 0
30385: PPUSH
30386: LD_VAR 0 8
30390: PPUSH
30391: LD_VAR 0 4
30395: PPUSH
30396: CALL_OW 380
// un := CreateHuman ;
30400: LD_ADDR_VAR 0 14
30404: PUSH
30405: CALL_OW 44
30409: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30410: LD_ADDR_VAR 0 7
30414: PUSH
30415: LD_VAR 0 7
30419: PPUSH
30420: LD_INT 1
30422: PPUSH
30423: LD_VAR 0 14
30427: PPUSH
30428: CALL_OW 2
30432: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30433: LD_VAR 0 14
30437: PPUSH
30438: LD_VAR 0 9
30442: PPUSH
30443: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30447: LD_VAR 0 9
30451: PPUSH
30452: CALL_OW 313
30456: PUSH
30457: LD_INT 6
30459: EQUAL
30460: PUSH
30461: LD_VAR 0 9
30465: PPUSH
30466: CALL_OW 266
30470: PUSH
30471: LD_INT 32
30473: PUSH
30474: LD_INT 31
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: IN
30481: OR
30482: IFFALSE 30296
30484: GO 30293
30486: POP
30487: POP
// end else
30488: GO 30870
// for j = 1 to x do
30490: LD_ADDR_VAR 0 9
30494: PUSH
30495: DOUBLE
30496: LD_INT 1
30498: DEC
30499: ST_TO_ADDR
30500: LD_VAR 0 13
30504: PUSH
30505: FOR_TO
30506: IFFALSE 30868
// begin InitHc ;
30508: CALL_OW 19
// if not f then
30512: LD_VAR 0 12
30516: NOT
30517: IFFALSE 30606
// begin PrepareHuman ( false , i , skill ) ;
30519: LD_INT 0
30521: PPUSH
30522: LD_VAR 0 8
30526: PPUSH
30527: LD_VAR 0 4
30531: PPUSH
30532: CALL_OW 380
// un := CreateHuman ;
30536: LD_ADDR_VAR 0 14
30540: PUSH
30541: CALL_OW 44
30545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30546: LD_ADDR_VAR 0 7
30550: PUSH
30551: LD_VAR 0 7
30555: PPUSH
30556: LD_INT 1
30558: PPUSH
30559: LD_VAR 0 14
30563: PPUSH
30564: CALL_OW 2
30568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30569: LD_VAR 0 14
30573: PPUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 250
30583: PPUSH
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 251
30593: PPUSH
30594: LD_INT 10
30596: PPUSH
30597: LD_INT 0
30599: PPUSH
30600: CALL_OW 50
// continue ;
30604: GO 30505
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30606: LD_VAR 0 12
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: PPUSH
30615: CALL_OW 313
30619: PUSH
30620: LD_VAR 0 12
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: CALL_OW 266
30633: PUSH
30634: LD_INT 32
30636: PUSH
30637: LD_INT 31
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: IN
30644: AND
30645: PUSH
30646: LD_VAR 0 12
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: CALL_OW 313
30659: PUSH
30660: LD_INT 6
30662: EQUAL
30663: OR
30664: IFFALSE 30684
// f := Delete ( f , 1 ) ;
30666: LD_ADDR_VAR 0 12
30670: PUSH
30671: LD_VAR 0 12
30675: PPUSH
30676: LD_INT 1
30678: PPUSH
30679: CALL_OW 3
30683: ST_TO_ADDR
// if not f then
30684: LD_VAR 0 12
30688: NOT
30689: IFFALSE 30707
// begin x := x + 2 ;
30691: LD_ADDR_VAR 0 13
30695: PUSH
30696: LD_VAR 0 13
30700: PUSH
30701: LD_INT 2
30703: PLUS
30704: ST_TO_ADDR
// continue ;
30705: GO 30505
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30707: LD_VAR 0 12
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PPUSH
30716: CALL_OW 266
30720: PUSH
30721: LD_INT 5
30723: EQUAL
30724: IFFALSE 30798
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30726: LD_VAR 0 12
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: CALL_OW 313
30739: PUSH
30740: LD_INT 3
30742: LESS
30743: IFFALSE 30779
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30745: LD_INT 0
30747: PPUSH
30748: LD_INT 5
30750: PUSH
30751: LD_INT 8
30753: PUSH
30754: LD_INT 9
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: PUSH
30762: LD_VAR 0 17
30766: ARRAY
30767: PPUSH
30768: LD_VAR 0 4
30772: PPUSH
30773: CALL_OW 380
30777: GO 30796
// PrepareHuman ( false , i , skill ) ;
30779: LD_INT 0
30781: PPUSH
30782: LD_VAR 0 8
30786: PPUSH
30787: LD_VAR 0 4
30791: PPUSH
30792: CALL_OW 380
// end else
30796: GO 30815
// PrepareHuman ( false , i , skill ) ;
30798: LD_INT 0
30800: PPUSH
30801: LD_VAR 0 8
30805: PPUSH
30806: LD_VAR 0 4
30810: PPUSH
30811: CALL_OW 380
// un := CreateHuman ;
30815: LD_ADDR_VAR 0 14
30819: PUSH
30820: CALL_OW 44
30824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30825: LD_ADDR_VAR 0 7
30829: PUSH
30830: LD_VAR 0 7
30834: PPUSH
30835: LD_INT 1
30837: PPUSH
30838: LD_VAR 0 14
30842: PPUSH
30843: CALL_OW 2
30847: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30848: LD_VAR 0 14
30852: PPUSH
30853: LD_VAR 0 12
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: PPUSH
30862: CALL_OW 52
// end ;
30866: GO 30505
30868: POP
30869: POP
// end ;
30870: GO 29807
30872: POP
30873: POP
// result := result ^ buildings ;
30874: LD_ADDR_VAR 0 7
30878: PUSH
30879: LD_VAR 0 7
30883: PUSH
30884: LD_VAR 0 18
30888: ADD
30889: ST_TO_ADDR
// end else
30890: GO 31033
// begin for i = 1 to personel do
30892: LD_ADDR_VAR 0 8
30896: PUSH
30897: DOUBLE
30898: LD_INT 1
30900: DEC
30901: ST_TO_ADDR
30902: LD_VAR 0 6
30906: PUSH
30907: FOR_TO
30908: IFFALSE 31031
// begin if i > 4 then
30910: LD_VAR 0 8
30914: PUSH
30915: LD_INT 4
30917: GREATER
30918: IFFALSE 30922
// break ;
30920: GO 31031
// x := personel [ i ] ;
30922: LD_ADDR_VAR 0 13
30926: PUSH
30927: LD_VAR 0 6
30931: PUSH
30932: LD_VAR 0 8
30936: ARRAY
30937: ST_TO_ADDR
// if x = - 1 then
30938: LD_VAR 0 13
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: EQUAL
30947: IFFALSE 30951
// continue ;
30949: GO 30907
// PrepareHuman ( false , i , skill ) ;
30951: LD_INT 0
30953: PPUSH
30954: LD_VAR 0 8
30958: PPUSH
30959: LD_VAR 0 4
30963: PPUSH
30964: CALL_OW 380
// un := CreateHuman ;
30968: LD_ADDR_VAR 0 14
30972: PUSH
30973: CALL_OW 44
30977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30978: LD_VAR 0 14
30982: PPUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 250
30992: PPUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 251
31002: PPUSH
31003: LD_INT 10
31005: PPUSH
31006: LD_INT 0
31008: PPUSH
31009: CALL_OW 50
// result := result ^ un ;
31013: LD_ADDR_VAR 0 7
31017: PUSH
31018: LD_VAR 0 7
31022: PUSH
31023: LD_VAR 0 14
31027: ADD
31028: ST_TO_ADDR
// end ;
31029: GO 30907
31031: POP
31032: POP
// end ; end ;
31033: LD_VAR 0 7
31037: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31038: LD_INT 0
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
// result := false ;
31056: LD_ADDR_VAR 0 3
31060: PUSH
31061: LD_INT 0
31063: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31064: LD_VAR 0 1
31068: NOT
31069: PUSH
31070: LD_VAR 0 1
31074: PPUSH
31075: CALL_OW 266
31079: PUSH
31080: LD_INT 32
31082: PUSH
31083: LD_INT 33
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: IN
31090: NOT
31091: OR
31092: IFFALSE 31096
// exit ;
31094: GO 32232
// nat := GetNation ( tower ) ;
31096: LD_ADDR_VAR 0 12
31100: PUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 248
31110: ST_TO_ADDR
// side := GetSide ( tower ) ;
31111: LD_ADDR_VAR 0 16
31115: PUSH
31116: LD_VAR 0 1
31120: PPUSH
31121: CALL_OW 255
31125: ST_TO_ADDR
// x := GetX ( tower ) ;
31126: LD_ADDR_VAR 0 10
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 250
31140: ST_TO_ADDR
// y := GetY ( tower ) ;
31141: LD_ADDR_VAR 0 11
31145: PUSH
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 251
31155: ST_TO_ADDR
// if not x or not y then
31156: LD_VAR 0 10
31160: NOT
31161: PUSH
31162: LD_VAR 0 11
31166: NOT
31167: OR
31168: IFFALSE 31172
// exit ;
31170: GO 32232
// weapon := 0 ;
31172: LD_ADDR_VAR 0 18
31176: PUSH
31177: LD_INT 0
31179: ST_TO_ADDR
// fac_list := [ ] ;
31180: LD_ADDR_VAR 0 17
31184: PUSH
31185: EMPTY
31186: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31187: LD_ADDR_VAR 0 6
31191: PUSH
31192: LD_VAR 0 1
31196: PPUSH
31197: CALL_OW 274
31201: PPUSH
31202: LD_VAR 0 2
31206: PPUSH
31207: CALL 28810 0 2
31211: PPUSH
31212: LD_INT 30
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PPUSH
31222: CALL_OW 72
31226: ST_TO_ADDR
// if not factories then
31227: LD_VAR 0 6
31231: NOT
31232: IFFALSE 31236
// exit ;
31234: GO 32232
// for i in factories do
31236: LD_ADDR_VAR 0 8
31240: PUSH
31241: LD_VAR 0 6
31245: PUSH
31246: FOR_IN
31247: IFFALSE 31272
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31249: LD_ADDR_VAR 0 17
31253: PUSH
31254: LD_VAR 0 17
31258: PUSH
31259: LD_VAR 0 8
31263: PPUSH
31264: CALL_OW 478
31268: UNION
31269: ST_TO_ADDR
31270: GO 31246
31272: POP
31273: POP
// if not fac_list then
31274: LD_VAR 0 17
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 32232
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31283: LD_ADDR_VAR 0 5
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: LD_INT 9
31296: PUSH
31297: LD_INT 10
31299: PUSH
31300: LD_INT 6
31302: PUSH
31303: LD_INT 7
31305: PUSH
31306: LD_INT 11
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 27
31320: PUSH
31321: LD_INT 28
31323: PUSH
31324: LD_INT 26
31326: PUSH
31327: LD_INT 30
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 43
31338: PUSH
31339: LD_INT 44
31341: PUSH
31342: LD_INT 46
31344: PUSH
31345: LD_INT 45
31347: PUSH
31348: LD_INT 47
31350: PUSH
31351: LD_INT 49
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: LD_VAR 0 12
31371: ARRAY
31372: ST_TO_ADDR
// for i in list do
31373: LD_ADDR_VAR 0 8
31377: PUSH
31378: LD_VAR 0 5
31382: PUSH
31383: FOR_IN
31384: IFFALSE 31417
// if not i in fac_list then
31386: LD_VAR 0 8
31390: PUSH
31391: LD_VAR 0 17
31395: IN
31396: NOT
31397: IFFALSE 31415
// list := list diff i ;
31399: LD_ADDR_VAR 0 5
31403: PUSH
31404: LD_VAR 0 5
31408: PUSH
31409: LD_VAR 0 8
31413: DIFF
31414: ST_TO_ADDR
31415: GO 31383
31417: POP
31418: POP
// if not list then
31419: LD_VAR 0 5
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 32232
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31428: LD_VAR 0 12
31432: PUSH
31433: LD_INT 3
31435: EQUAL
31436: PUSH
31437: LD_INT 49
31439: PUSH
31440: LD_VAR 0 5
31444: IN
31445: AND
31446: PUSH
31447: LD_INT 31
31449: PPUSH
31450: LD_VAR 0 16
31454: PPUSH
31455: CALL_OW 321
31459: PUSH
31460: LD_INT 2
31462: EQUAL
31463: AND
31464: IFFALSE 31524
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31466: LD_INT 22
31468: PUSH
31469: LD_VAR 0 16
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 35
31480: PUSH
31481: LD_INT 49
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 91
31490: PUSH
31491: LD_VAR 0 1
31495: PUSH
31496: LD_INT 10
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: PPUSH
31509: CALL_OW 69
31513: NOT
31514: IFFALSE 31524
// weapon := ru_time_lapser ;
31516: LD_ADDR_VAR 0 18
31520: PUSH
31521: LD_INT 49
31523: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31524: LD_VAR 0 12
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: LD_INT 2
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: IN
31539: PUSH
31540: LD_INT 11
31542: PUSH
31543: LD_VAR 0 5
31547: IN
31548: PUSH
31549: LD_INT 30
31551: PUSH
31552: LD_VAR 0 5
31556: IN
31557: OR
31558: AND
31559: PUSH
31560: LD_INT 6
31562: PPUSH
31563: LD_VAR 0 16
31567: PPUSH
31568: CALL_OW 321
31572: PUSH
31573: LD_INT 2
31575: EQUAL
31576: AND
31577: IFFALSE 31742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31579: LD_INT 22
31581: PUSH
31582: LD_VAR 0 16
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: LD_INT 35
31596: PUSH
31597: LD_INT 11
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 35
31606: PUSH
31607: LD_INT 30
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 91
31621: PUSH
31622: LD_VAR 0 1
31626: PUSH
31627: LD_INT 18
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: PPUSH
31640: CALL_OW 69
31644: NOT
31645: PUSH
31646: LD_INT 22
31648: PUSH
31649: LD_VAR 0 16
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 30
31663: PUSH
31664: LD_INT 32
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 30
31673: PUSH
31674: LD_INT 33
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 91
31688: PUSH
31689: LD_VAR 0 1
31693: PUSH
31694: LD_INT 12
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: PPUSH
31710: CALL_OW 69
31714: PUSH
31715: LD_INT 2
31717: GREATER
31718: AND
31719: IFFALSE 31742
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31721: LD_ADDR_VAR 0 18
31725: PUSH
31726: LD_INT 11
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_VAR 0 12
31740: ARRAY
31741: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31742: LD_VAR 0 18
31746: NOT
31747: PUSH
31748: LD_INT 40
31750: PPUSH
31751: LD_VAR 0 16
31755: PPUSH
31756: CALL_OW 321
31760: PUSH
31761: LD_INT 2
31763: EQUAL
31764: AND
31765: PUSH
31766: LD_INT 7
31768: PUSH
31769: LD_VAR 0 5
31773: IN
31774: PUSH
31775: LD_INT 28
31777: PUSH
31778: LD_VAR 0 5
31782: IN
31783: OR
31784: PUSH
31785: LD_INT 45
31787: PUSH
31788: LD_VAR 0 5
31792: IN
31793: OR
31794: AND
31795: IFFALSE 32049
// begin hex := GetHexInfo ( x , y ) ;
31797: LD_ADDR_VAR 0 4
31801: PUSH
31802: LD_VAR 0 10
31806: PPUSH
31807: LD_VAR 0 11
31811: PPUSH
31812: CALL_OW 546
31816: ST_TO_ADDR
// if hex [ 1 ] then
31817: LD_VAR 0 4
31821: PUSH
31822: LD_INT 1
31824: ARRAY
31825: IFFALSE 31829
// exit ;
31827: GO 32232
// height := hex [ 2 ] ;
31829: LD_ADDR_VAR 0 15
31833: PUSH
31834: LD_VAR 0 4
31838: PUSH
31839: LD_INT 2
31841: ARRAY
31842: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31843: LD_ADDR_VAR 0 14
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 3
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: ST_TO_ADDR
// for i in tmp do
31866: LD_ADDR_VAR 0 8
31870: PUSH
31871: LD_VAR 0 14
31875: PUSH
31876: FOR_IN
31877: IFFALSE 32047
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31879: LD_ADDR_VAR 0 9
31883: PUSH
31884: LD_VAR 0 10
31888: PPUSH
31889: LD_VAR 0 8
31893: PPUSH
31894: LD_INT 5
31896: PPUSH
31897: CALL_OW 272
31901: PUSH
31902: LD_VAR 0 11
31906: PPUSH
31907: LD_VAR 0 8
31911: PPUSH
31912: LD_INT 5
31914: PPUSH
31915: CALL_OW 273
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31924: LD_VAR 0 9
31928: PUSH
31929: LD_INT 1
31931: ARRAY
31932: PPUSH
31933: LD_VAR 0 9
31937: PUSH
31938: LD_INT 2
31940: ARRAY
31941: PPUSH
31942: CALL_OW 488
31946: IFFALSE 32045
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31948: LD_ADDR_VAR 0 4
31952: PUSH
31953: LD_VAR 0 9
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: PPUSH
31962: LD_VAR 0 9
31966: PUSH
31967: LD_INT 2
31969: ARRAY
31970: PPUSH
31971: CALL_OW 546
31975: ST_TO_ADDR
// if hex [ 1 ] then
31976: LD_VAR 0 4
31980: PUSH
31981: LD_INT 1
31983: ARRAY
31984: IFFALSE 31988
// continue ;
31986: GO 31876
// h := hex [ 2 ] ;
31988: LD_ADDR_VAR 0 13
31992: PUSH
31993: LD_VAR 0 4
31997: PUSH
31998: LD_INT 2
32000: ARRAY
32001: ST_TO_ADDR
// if h + 7 < height then
32002: LD_VAR 0 13
32006: PUSH
32007: LD_INT 7
32009: PLUS
32010: PUSH
32011: LD_VAR 0 15
32015: LESS
32016: IFFALSE 32045
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32018: LD_ADDR_VAR 0 18
32022: PUSH
32023: LD_INT 7
32025: PUSH
32026: LD_INT 28
32028: PUSH
32029: LD_INT 45
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: PUSH
32037: LD_VAR 0 12
32041: ARRAY
32042: ST_TO_ADDR
// break ;
32043: GO 32047
// end ; end ; end ;
32045: GO 31876
32047: POP
32048: POP
// end ; if not weapon then
32049: LD_VAR 0 18
32053: NOT
32054: IFFALSE 32114
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32056: LD_ADDR_VAR 0 5
32060: PUSH
32061: LD_VAR 0 5
32065: PUSH
32066: LD_INT 11
32068: PUSH
32069: LD_INT 30
32071: PUSH
32072: LD_INT 49
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: DIFF
32080: ST_TO_ADDR
// if not list then
32081: LD_VAR 0 5
32085: NOT
32086: IFFALSE 32090
// exit ;
32088: GO 32232
// weapon := list [ rand ( 1 , list ) ] ;
32090: LD_ADDR_VAR 0 18
32094: PUSH
32095: LD_VAR 0 5
32099: PUSH
32100: LD_INT 1
32102: PPUSH
32103: LD_VAR 0 5
32107: PPUSH
32108: CALL_OW 12
32112: ARRAY
32113: ST_TO_ADDR
// end ; if weapon then
32114: LD_VAR 0 18
32118: IFFALSE 32232
// begin tmp := CostOfWeapon ( weapon ) ;
32120: LD_ADDR_VAR 0 14
32124: PUSH
32125: LD_VAR 0 18
32129: PPUSH
32130: CALL_OW 451
32134: ST_TO_ADDR
// j := GetBase ( tower ) ;
32135: LD_ADDR_VAR 0 9
32139: PUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 274
32149: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32150: LD_VAR 0 9
32154: PPUSH
32155: LD_INT 1
32157: PPUSH
32158: CALL_OW 275
32162: PUSH
32163: LD_VAR 0 14
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: GREATEREQUAL
32172: PUSH
32173: LD_VAR 0 9
32177: PPUSH
32178: LD_INT 2
32180: PPUSH
32181: CALL_OW 275
32185: PUSH
32186: LD_VAR 0 14
32190: PUSH
32191: LD_INT 2
32193: ARRAY
32194: GREATEREQUAL
32195: AND
32196: PUSH
32197: LD_VAR 0 9
32201: PPUSH
32202: LD_INT 3
32204: PPUSH
32205: CALL_OW 275
32209: PUSH
32210: LD_VAR 0 14
32214: PUSH
32215: LD_INT 3
32217: ARRAY
32218: GREATEREQUAL
32219: AND
32220: IFFALSE 32232
// result := weapon ;
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_VAR 0 18
32231: ST_TO_ADDR
// end ; end ;
32232: LD_VAR 0 3
32236: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32237: LD_INT 0
32239: PPUSH
32240: PPUSH
// result := true ;
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 1
32248: ST_TO_ADDR
// if array1 = array2 then
32249: LD_VAR 0 1
32253: PUSH
32254: LD_VAR 0 2
32258: EQUAL
32259: IFFALSE 32319
// begin for i = 1 to array1 do
32261: LD_ADDR_VAR 0 4
32265: PUSH
32266: DOUBLE
32267: LD_INT 1
32269: DEC
32270: ST_TO_ADDR
32271: LD_VAR 0 1
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32315
// if array1 [ i ] <> array2 [ i ] then
32279: LD_VAR 0 1
32283: PUSH
32284: LD_VAR 0 4
32288: ARRAY
32289: PUSH
32290: LD_VAR 0 2
32294: PUSH
32295: LD_VAR 0 4
32299: ARRAY
32300: NONEQUAL
32301: IFFALSE 32313
// begin result := false ;
32303: LD_ADDR_VAR 0 3
32307: PUSH
32308: LD_INT 0
32310: ST_TO_ADDR
// break ;
32311: GO 32315
// end ;
32313: GO 32276
32315: POP
32316: POP
// end else
32317: GO 32327
// result := false ;
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_INT 0
32326: ST_TO_ADDR
// end ;
32327: LD_VAR 0 3
32331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32332: LD_INT 0
32334: PPUSH
32335: PPUSH
32336: PPUSH
// pom := GetBase ( fac ) ;
32337: LD_ADDR_VAR 0 5
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 274
32351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32352: LD_ADDR_VAR 0 4
32356: PUSH
32357: LD_VAR 0 2
32361: PUSH
32362: LD_INT 1
32364: ARRAY
32365: PPUSH
32366: LD_VAR 0 2
32370: PUSH
32371: LD_INT 2
32373: ARRAY
32374: PPUSH
32375: LD_VAR 0 2
32379: PUSH
32380: LD_INT 3
32382: ARRAY
32383: PPUSH
32384: LD_VAR 0 2
32388: PUSH
32389: LD_INT 4
32391: ARRAY
32392: PPUSH
32393: CALL_OW 449
32397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: LD_VAR 0 5
32407: PPUSH
32408: LD_INT 1
32410: PPUSH
32411: CALL_OW 275
32415: PUSH
32416: LD_VAR 0 4
32420: PUSH
32421: LD_INT 1
32423: ARRAY
32424: GREATEREQUAL
32425: PUSH
32426: LD_VAR 0 5
32430: PPUSH
32431: LD_INT 2
32433: PPUSH
32434: CALL_OW 275
32438: PUSH
32439: LD_VAR 0 4
32443: PUSH
32444: LD_INT 2
32446: ARRAY
32447: GREATEREQUAL
32448: AND
32449: PUSH
32450: LD_VAR 0 5
32454: PPUSH
32455: LD_INT 3
32457: PPUSH
32458: CALL_OW 275
32462: PUSH
32463: LD_VAR 0 4
32467: PUSH
32468: LD_INT 3
32470: ARRAY
32471: GREATEREQUAL
32472: AND
32473: ST_TO_ADDR
// end ;
32474: LD_VAR 0 3
32478: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32479: LD_INT 0
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
// pom := GetBase ( building ) ;
32485: LD_ADDR_VAR 0 3
32489: PUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 274
32499: ST_TO_ADDR
// if not pom then
32500: LD_VAR 0 3
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32679
// btype := GetBType ( building ) ;
32509: LD_ADDR_VAR 0 5
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 266
32523: ST_TO_ADDR
// if btype = b_armoury then
32524: LD_VAR 0 5
32528: PUSH
32529: LD_INT 4
32531: EQUAL
32532: IFFALSE 32542
// btype := b_barracks ;
32534: LD_ADDR_VAR 0 5
32538: PUSH
32539: LD_INT 5
32541: ST_TO_ADDR
// if btype = b_depot then
32542: LD_VAR 0 5
32546: PUSH
32547: LD_INT 0
32549: EQUAL
32550: IFFALSE 32560
// btype := b_warehouse ;
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: LD_INT 1
32559: ST_TO_ADDR
// if btype = b_workshop then
32560: LD_VAR 0 5
32564: PUSH
32565: LD_INT 2
32567: EQUAL
32568: IFFALSE 32578
// btype := b_factory ;
32570: LD_ADDR_VAR 0 5
32574: PUSH
32575: LD_INT 3
32577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32578: LD_ADDR_VAR 0 4
32582: PUSH
32583: LD_VAR 0 5
32587: PPUSH
32588: LD_VAR 0 1
32592: PPUSH
32593: CALL_OW 248
32597: PPUSH
32598: CALL_OW 450
32602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32603: LD_ADDR_VAR 0 2
32607: PUSH
32608: LD_VAR 0 3
32612: PPUSH
32613: LD_INT 1
32615: PPUSH
32616: CALL_OW 275
32620: PUSH
32621: LD_VAR 0 4
32625: PUSH
32626: LD_INT 1
32628: ARRAY
32629: GREATEREQUAL
32630: PUSH
32631: LD_VAR 0 3
32635: PPUSH
32636: LD_INT 2
32638: PPUSH
32639: CALL_OW 275
32643: PUSH
32644: LD_VAR 0 4
32648: PUSH
32649: LD_INT 2
32651: ARRAY
32652: GREATEREQUAL
32653: AND
32654: PUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: LD_INT 3
32662: PPUSH
32663: CALL_OW 275
32667: PUSH
32668: LD_VAR 0 4
32672: PUSH
32673: LD_INT 3
32675: ARRAY
32676: GREATEREQUAL
32677: AND
32678: ST_TO_ADDR
// end ;
32679: LD_VAR 0 2
32683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32684: LD_INT 0
32686: PPUSH
32687: PPUSH
32688: PPUSH
// pom := GetBase ( building ) ;
32689: LD_ADDR_VAR 0 4
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 274
32703: ST_TO_ADDR
// if not pom then
32704: LD_VAR 0 4
32708: NOT
32709: IFFALSE 32713
// exit ;
32711: GO 32814
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32713: LD_ADDR_VAR 0 5
32717: PUSH
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 248
32732: PPUSH
32733: CALL_OW 450
32737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32738: LD_ADDR_VAR 0 3
32742: PUSH
32743: LD_VAR 0 4
32747: PPUSH
32748: LD_INT 1
32750: PPUSH
32751: CALL_OW 275
32755: PUSH
32756: LD_VAR 0 5
32760: PUSH
32761: LD_INT 1
32763: ARRAY
32764: GREATEREQUAL
32765: PUSH
32766: LD_VAR 0 4
32770: PPUSH
32771: LD_INT 2
32773: PPUSH
32774: CALL_OW 275
32778: PUSH
32779: LD_VAR 0 5
32783: PUSH
32784: LD_INT 2
32786: ARRAY
32787: GREATEREQUAL
32788: AND
32789: PUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: LD_INT 3
32797: PPUSH
32798: CALL_OW 275
32802: PUSH
32803: LD_VAR 0 5
32807: PUSH
32808: LD_INT 3
32810: ARRAY
32811: GREATEREQUAL
32812: AND
32813: ST_TO_ADDR
// end ;
32814: LD_VAR 0 3
32818: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32819: LD_INT 0
32821: PPUSH
32822: PPUSH
32823: PPUSH
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
32828: PPUSH
32829: PPUSH
32830: PPUSH
// result := false ;
32831: LD_ADDR_VAR 0 6
32835: PUSH
32836: LD_INT 0
32838: ST_TO_ADDR
// if not base or not btype or not x or not y then
32839: LD_VAR 0 1
32843: NOT
32844: PUSH
32845: LD_VAR 0 2
32849: NOT
32850: OR
32851: PUSH
32852: LD_VAR 0 3
32856: NOT
32857: OR
32858: PUSH
32859: LD_VAR 0 4
32863: NOT
32864: OR
32865: IFFALSE 32869
// exit ;
32867: GO 33478
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32869: LD_ADDR_VAR 0 12
32873: PUSH
32874: LD_VAR 0 2
32878: PPUSH
32879: LD_VAR 0 3
32883: PPUSH
32884: LD_VAR 0 4
32888: PPUSH
32889: LD_VAR 0 5
32893: PPUSH
32894: LD_VAR 0 1
32898: PUSH
32899: LD_INT 1
32901: ARRAY
32902: PPUSH
32903: CALL_OW 248
32907: PPUSH
32908: LD_INT 0
32910: PPUSH
32911: CALL 34315 0 6
32915: ST_TO_ADDR
// if not hexes then
32916: LD_VAR 0 12
32920: NOT
32921: IFFALSE 32925
// exit ;
32923: GO 33478
// for i = 1 to hexes do
32925: LD_ADDR_VAR 0 7
32929: PUSH
32930: DOUBLE
32931: LD_INT 1
32933: DEC
32934: ST_TO_ADDR
32935: LD_VAR 0 12
32939: PUSH
32940: FOR_TO
32941: IFFALSE 33476
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32943: LD_ADDR_VAR 0 11
32947: PUSH
32948: LD_VAR 0 12
32952: PUSH
32953: LD_VAR 0 7
32957: ARRAY
32958: PUSH
32959: LD_INT 1
32961: ARRAY
32962: PPUSH
32963: LD_VAR 0 12
32967: PUSH
32968: LD_VAR 0 7
32972: ARRAY
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: PPUSH
32978: CALL_OW 428
32982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32983: LD_VAR 0 12
32987: PUSH
32988: LD_VAR 0 7
32992: ARRAY
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: LD_VAR 0 12
33002: PUSH
33003: LD_VAR 0 7
33007: ARRAY
33008: PUSH
33009: LD_INT 2
33011: ARRAY
33012: PPUSH
33013: CALL_OW 351
33017: PUSH
33018: LD_VAR 0 12
33022: PUSH
33023: LD_VAR 0 7
33027: ARRAY
33028: PUSH
33029: LD_INT 1
33031: ARRAY
33032: PPUSH
33033: LD_VAR 0 12
33037: PUSH
33038: LD_VAR 0 7
33042: ARRAY
33043: PUSH
33044: LD_INT 2
33046: ARRAY
33047: PPUSH
33048: CALL_OW 488
33052: NOT
33053: OR
33054: PUSH
33055: LD_VAR 0 11
33059: PPUSH
33060: CALL_OW 247
33064: PUSH
33065: LD_INT 3
33067: EQUAL
33068: OR
33069: IFFALSE 33075
// exit ;
33071: POP
33072: POP
33073: GO 33478
// if not tmp or not tmp in base then
33075: LD_VAR 0 11
33079: NOT
33080: PUSH
33081: LD_VAR 0 11
33085: PUSH
33086: LD_VAR 0 1
33090: IN
33091: NOT
33092: OR
33093: IFFALSE 33097
// continue ;
33095: GO 32940
// result := true ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_INT 1
33104: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33105: LD_ADDR_VAR 0 15
33109: PUSH
33110: LD_VAR 0 1
33114: PPUSH
33115: LD_INT 22
33117: PUSH
33118: LD_VAR 0 11
33122: PPUSH
33123: CALL_OW 255
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 30
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 30
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PPUSH
33164: CALL_OW 72
33168: ST_TO_ADDR
// if dep then
33169: LD_VAR 0 15
33173: IFFALSE 33309
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33175: LD_ADDR_VAR 0 14
33179: PUSH
33180: LD_VAR 0 15
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: PPUSH
33189: CALL_OW 250
33193: PPUSH
33194: LD_VAR 0 15
33198: PUSH
33199: LD_INT 1
33201: ARRAY
33202: PPUSH
33203: CALL_OW 254
33207: PPUSH
33208: LD_INT 5
33210: PPUSH
33211: CALL_OW 272
33215: PUSH
33216: LD_VAR 0 15
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: PPUSH
33225: CALL_OW 251
33229: PPUSH
33230: LD_VAR 0 15
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 254
33243: PPUSH
33244: LD_INT 5
33246: PPUSH
33247: CALL_OW 273
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33256: LD_VAR 0 14
33260: PUSH
33261: LD_INT 1
33263: ARRAY
33264: PPUSH
33265: LD_VAR 0 14
33269: PUSH
33270: LD_INT 2
33272: ARRAY
33273: PPUSH
33274: CALL_OW 488
33278: IFFALSE 33309
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33280: LD_VAR 0 11
33284: PPUSH
33285: LD_VAR 0 14
33289: PUSH
33290: LD_INT 1
33292: ARRAY
33293: PPUSH
33294: LD_VAR 0 14
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: PPUSH
33303: CALL_OW 111
// continue ;
33307: GO 32940
// end ; end ; r := GetDir ( tmp ) ;
33309: LD_ADDR_VAR 0 13
33313: PUSH
33314: LD_VAR 0 11
33318: PPUSH
33319: CALL_OW 254
33323: ST_TO_ADDR
// if r = 5 then
33324: LD_VAR 0 13
33328: PUSH
33329: LD_INT 5
33331: EQUAL
33332: IFFALSE 33342
// r := 0 ;
33334: LD_ADDR_VAR 0 13
33338: PUSH
33339: LD_INT 0
33341: ST_TO_ADDR
// for j = r to 5 do
33342: LD_ADDR_VAR 0 8
33346: PUSH
33347: DOUBLE
33348: LD_VAR 0 13
33352: DEC
33353: ST_TO_ADDR
33354: LD_INT 5
33356: PUSH
33357: FOR_TO
33358: IFFALSE 33472
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33360: LD_ADDR_VAR 0 9
33364: PUSH
33365: LD_VAR 0 11
33369: PPUSH
33370: CALL_OW 250
33374: PPUSH
33375: LD_VAR 0 8
33379: PPUSH
33380: LD_INT 2
33382: PPUSH
33383: CALL_OW 272
33387: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33388: LD_ADDR_VAR 0 10
33392: PUSH
33393: LD_VAR 0 11
33397: PPUSH
33398: CALL_OW 251
33402: PPUSH
33403: LD_VAR 0 8
33407: PPUSH
33408: LD_INT 2
33410: PPUSH
33411: CALL_OW 273
33415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33416: LD_VAR 0 9
33420: PPUSH
33421: LD_VAR 0 10
33425: PPUSH
33426: CALL_OW 488
33430: PUSH
33431: LD_VAR 0 9
33435: PPUSH
33436: LD_VAR 0 10
33440: PPUSH
33441: CALL_OW 428
33445: NOT
33446: AND
33447: IFFALSE 33470
// begin ComMoveXY ( tmp , _x , _y ) ;
33449: LD_VAR 0 11
33453: PPUSH
33454: LD_VAR 0 9
33458: PPUSH
33459: LD_VAR 0 10
33463: PPUSH
33464: CALL_OW 111
// break ;
33468: GO 33472
// end ; end ;
33470: GO 33357
33472: POP
33473: POP
// end ;
33474: GO 32940
33476: POP
33477: POP
// end ;
33478: LD_VAR 0 6
33482: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33483: LD_INT 0
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
// result := false ;
33495: LD_ADDR_VAR 0 6
33499: PUSH
33500: LD_INT 0
33502: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33503: LD_VAR 0 1
33507: NOT
33508: PUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL_OW 266
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: IN
33529: NOT
33530: OR
33531: PUSH
33532: LD_VAR 0 2
33536: NOT
33537: OR
33538: PUSH
33539: LD_VAR 0 5
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: IN
33570: NOT
33571: OR
33572: PUSH
33573: LD_VAR 0 3
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: CALL_OW 488
33587: NOT
33588: OR
33589: IFFALSE 33593
// exit ;
33591: GO 34310
// pom := GetBase ( depot ) ;
33593: LD_ADDR_VAR 0 10
33597: PUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 274
33607: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33608: LD_ADDR_VAR 0 11
33612: PUSH
33613: LD_VAR 0 2
33617: PPUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 248
33627: PPUSH
33628: CALL_OW 450
33632: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33633: LD_VAR 0 10
33637: PPUSH
33638: LD_INT 1
33640: PPUSH
33641: CALL_OW 275
33645: PUSH
33646: LD_VAR 0 11
33650: PUSH
33651: LD_INT 1
33653: ARRAY
33654: GREATEREQUAL
33655: PUSH
33656: LD_VAR 0 10
33660: PPUSH
33661: LD_INT 2
33663: PPUSH
33664: CALL_OW 275
33668: PUSH
33669: LD_VAR 0 11
33673: PUSH
33674: LD_INT 2
33676: ARRAY
33677: GREATEREQUAL
33678: AND
33679: PUSH
33680: LD_VAR 0 10
33684: PPUSH
33685: LD_INT 3
33687: PPUSH
33688: CALL_OW 275
33692: PUSH
33693: LD_VAR 0 11
33697: PUSH
33698: LD_INT 3
33700: ARRAY
33701: GREATEREQUAL
33702: AND
33703: NOT
33704: IFFALSE 33708
// exit ;
33706: GO 34310
// if GetBType ( depot ) = b_depot then
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 266
33717: PUSH
33718: LD_INT 0
33720: EQUAL
33721: IFFALSE 33733
// dist := 28 else
33723: LD_ADDR_VAR 0 14
33727: PUSH
33728: LD_INT 28
33730: ST_TO_ADDR
33731: GO 33741
// dist := 36 ;
33733: LD_ADDR_VAR 0 14
33737: PUSH
33738: LD_INT 36
33740: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33741: LD_VAR 0 1
33745: PPUSH
33746: LD_VAR 0 3
33750: PPUSH
33751: LD_VAR 0 4
33755: PPUSH
33756: CALL_OW 297
33760: PUSH
33761: LD_VAR 0 14
33765: GREATER
33766: IFFALSE 33770
// exit ;
33768: GO 34310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33770: LD_ADDR_VAR 0 12
33774: PUSH
33775: LD_VAR 0 2
33779: PPUSH
33780: LD_VAR 0 3
33784: PPUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: LD_VAR 0 5
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 248
33804: PPUSH
33805: LD_INT 0
33807: PPUSH
33808: CALL 34315 0 6
33812: ST_TO_ADDR
// if not hexes then
33813: LD_VAR 0 12
33817: NOT
33818: IFFALSE 33822
// exit ;
33820: GO 34310
// hex := GetHexInfo ( x , y ) ;
33822: LD_ADDR_VAR 0 15
33826: PUSH
33827: LD_VAR 0 3
33831: PPUSH
33832: LD_VAR 0 4
33836: PPUSH
33837: CALL_OW 546
33841: ST_TO_ADDR
// if hex [ 1 ] then
33842: LD_VAR 0 15
33846: PUSH
33847: LD_INT 1
33849: ARRAY
33850: IFFALSE 33854
// exit ;
33852: GO 34310
// height := hex [ 2 ] ;
33854: LD_ADDR_VAR 0 13
33858: PUSH
33859: LD_VAR 0 15
33863: PUSH
33864: LD_INT 2
33866: ARRAY
33867: ST_TO_ADDR
// for i = 1 to hexes do
33868: LD_ADDR_VAR 0 7
33872: PUSH
33873: DOUBLE
33874: LD_INT 1
33876: DEC
33877: ST_TO_ADDR
33878: LD_VAR 0 12
33882: PUSH
33883: FOR_TO
33884: IFFALSE 34214
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33886: LD_VAR 0 12
33890: PUSH
33891: LD_VAR 0 7
33895: ARRAY
33896: PUSH
33897: LD_INT 1
33899: ARRAY
33900: PPUSH
33901: LD_VAR 0 12
33905: PUSH
33906: LD_VAR 0 7
33910: ARRAY
33911: PUSH
33912: LD_INT 2
33914: ARRAY
33915: PPUSH
33916: CALL_OW 488
33920: NOT
33921: PUSH
33922: LD_VAR 0 12
33926: PUSH
33927: LD_VAR 0 7
33931: ARRAY
33932: PUSH
33933: LD_INT 1
33935: ARRAY
33936: PPUSH
33937: LD_VAR 0 12
33941: PUSH
33942: LD_VAR 0 7
33946: ARRAY
33947: PUSH
33948: LD_INT 2
33950: ARRAY
33951: PPUSH
33952: CALL_OW 428
33956: PUSH
33957: LD_INT 0
33959: GREATER
33960: OR
33961: PUSH
33962: LD_VAR 0 12
33966: PUSH
33967: LD_VAR 0 7
33971: ARRAY
33972: PUSH
33973: LD_INT 1
33975: ARRAY
33976: PPUSH
33977: LD_VAR 0 12
33981: PUSH
33982: LD_VAR 0 7
33986: ARRAY
33987: PUSH
33988: LD_INT 2
33990: ARRAY
33991: PPUSH
33992: CALL_OW 351
33996: OR
33997: IFFALSE 34003
// exit ;
33999: POP
34000: POP
34001: GO 34310
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34003: LD_ADDR_VAR 0 8
34007: PUSH
34008: LD_VAR 0 12
34012: PUSH
34013: LD_VAR 0 7
34017: ARRAY
34018: PUSH
34019: LD_INT 1
34021: ARRAY
34022: PPUSH
34023: LD_VAR 0 12
34027: PUSH
34028: LD_VAR 0 7
34032: ARRAY
34033: PUSH
34034: LD_INT 2
34036: ARRAY
34037: PPUSH
34038: CALL_OW 546
34042: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34043: LD_VAR 0 8
34047: PUSH
34048: LD_INT 1
34050: ARRAY
34051: PUSH
34052: LD_VAR 0 8
34056: PUSH
34057: LD_INT 2
34059: ARRAY
34060: PUSH
34061: LD_VAR 0 13
34065: PUSH
34066: LD_INT 2
34068: PLUS
34069: GREATER
34070: OR
34071: PUSH
34072: LD_VAR 0 8
34076: PUSH
34077: LD_INT 2
34079: ARRAY
34080: PUSH
34081: LD_VAR 0 13
34085: PUSH
34086: LD_INT 2
34088: MINUS
34089: LESS
34090: OR
34091: PUSH
34092: LD_VAR 0 8
34096: PUSH
34097: LD_INT 3
34099: ARRAY
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 8
34106: PUSH
34107: LD_INT 9
34109: PUSH
34110: LD_INT 10
34112: PUSH
34113: LD_INT 11
34115: PUSH
34116: LD_INT 12
34118: PUSH
34119: LD_INT 13
34121: PUSH
34122: LD_INT 16
34124: PUSH
34125: LD_INT 17
34127: PUSH
34128: LD_INT 18
34130: PUSH
34131: LD_INT 19
34133: PUSH
34134: LD_INT 20
34136: PUSH
34137: LD_INT 21
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: IN
34155: NOT
34156: OR
34157: PUSH
34158: LD_VAR 0 8
34162: PUSH
34163: LD_INT 5
34165: ARRAY
34166: NOT
34167: OR
34168: PUSH
34169: LD_VAR 0 8
34173: PUSH
34174: LD_INT 6
34176: ARRAY
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 7
34186: PUSH
34187: LD_INT 9
34189: PUSH
34190: LD_INT 10
34192: PUSH
34193: LD_INT 11
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: IN
34204: NOT
34205: OR
34206: IFFALSE 34212
// exit ;
34208: POP
34209: POP
34210: GO 34310
// end ;
34212: GO 33883
34214: POP
34215: POP
// side := GetSide ( depot ) ;
34216: LD_ADDR_VAR 0 9
34220: PUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 255
34230: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34231: LD_VAR 0 9
34235: PPUSH
34236: LD_VAR 0 3
34240: PPUSH
34241: LD_VAR 0 4
34245: PPUSH
34246: LD_INT 20
34248: PPUSH
34249: CALL 26964 0 4
34253: PUSH
34254: LD_INT 4
34256: ARRAY
34257: IFFALSE 34261
// exit ;
34259: GO 34310
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34261: LD_VAR 0 2
34265: PUSH
34266: LD_INT 29
34268: PUSH
34269: LD_INT 30
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: IN
34276: PUSH
34277: LD_VAR 0 3
34281: PPUSH
34282: LD_VAR 0 4
34286: PPUSH
34287: LD_VAR 0 9
34291: PPUSH
34292: CALL_OW 440
34296: NOT
34297: AND
34298: IFFALSE 34302
// exit ;
34300: GO 34310
// result := true ;
34302: LD_ADDR_VAR 0 6
34306: PUSH
34307: LD_INT 1
34309: ST_TO_ADDR
// end ;
34310: LD_VAR 0 6
34314: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34315: LD_INT 0
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
// result = [ ] ;
34375: LD_ADDR_VAR 0 7
34379: PUSH
34380: EMPTY
34381: ST_TO_ADDR
// temp_list = [ ] ;
34382: LD_ADDR_VAR 0 9
34386: PUSH
34387: EMPTY
34388: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34389: LD_VAR 0 4
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 3
34405: PUSH
34406: LD_INT 4
34408: PUSH
34409: LD_INT 5
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: IN
34420: NOT
34421: PUSH
34422: LD_VAR 0 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: IN
34437: PUSH
34438: LD_VAR 0 5
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: IN
34457: NOT
34458: AND
34459: OR
34460: IFFALSE 34464
// exit ;
34462: GO 52849
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34464: LD_VAR 0 1
34468: PUSH
34469: LD_INT 6
34471: PUSH
34472: LD_INT 7
34474: PUSH
34475: LD_INT 8
34477: PUSH
34478: LD_INT 13
34480: PUSH
34481: LD_INT 12
34483: PUSH
34484: LD_INT 15
34486: PUSH
34487: LD_INT 11
34489: PUSH
34490: LD_INT 14
34492: PUSH
34493: LD_INT 10
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: IN
34507: IFFALSE 34517
// btype = b_lab ;
34509: LD_ADDR_VAR 0 1
34513: PUSH
34514: LD_INT 6
34516: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34517: LD_VAR 0 6
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: IN
34536: NOT
34537: PUSH
34538: LD_VAR 0 1
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 6
34557: PUSH
34558: LD_INT 36
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: LD_INT 5
34566: PUSH
34567: LD_INT 31
34569: PUSH
34570: LD_INT 32
34572: PUSH
34573: LD_INT 33
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: IN
34589: NOT
34590: PUSH
34591: LD_VAR 0 6
34595: PUSH
34596: LD_INT 1
34598: EQUAL
34599: AND
34600: OR
34601: PUSH
34602: LD_VAR 0 1
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: IN
34617: NOT
34618: PUSH
34619: LD_VAR 0 6
34623: PUSH
34624: LD_INT 2
34626: EQUAL
34627: AND
34628: OR
34629: IFFALSE 34639
// mode = 0 ;
34631: LD_ADDR_VAR 0 6
34635: PUSH
34636: LD_INT 0
34638: ST_TO_ADDR
// case mode of 0 :
34639: LD_VAR 0 6
34643: PUSH
34644: LD_INT 0
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34652
34650: GO 46105
34652: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34653: LD_ADDR_VAR 0 11
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34846: LD_ADDR_VAR 0 12
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 2
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35042: LD_ADDR_VAR 0 13
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: LD_INT 3
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: NEG
35214: PUSH
35215: LD_INT 3
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35241: LD_ADDR_VAR 0 14
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: LD_INT 3
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35437: LD_ADDR_VAR 0 15
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 3
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35630: LD_ADDR_VAR 0 16
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35823: LD_ADDR_VAR 0 17
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36053: LD_ADDR_VAR 0 18
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36283: LD_ADDR_VAR 0 19
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36513: LD_ADDR_VAR 0 20
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36743: LD_ADDR_VAR 0 21
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36973: LD_ADDR_VAR 0 22
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: NEG
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37203: LD_ADDR_VAR 0 23
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 3
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37483: LD_ADDR_VAR 0 24
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37759: LD_ADDR_VAR 0 25
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38033: LD_ADDR_VAR 0 26
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 3
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38309: LD_ADDR_VAR 0 27
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 3
38542: NEG
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 3
38554: NEG
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38589: LD_ADDR_VAR 0 28
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: LD_INT 3
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 3
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38871: LD_ADDR_VAR 0 29
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: LD_INT 3
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39150: LD_ADDR_VAR 0 30
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 3
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39428: LD_ADDR_VAR 0 31
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 3
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39706: LD_ADDR_VAR 0 32
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 3
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39984: LD_ADDR_VAR 0 33
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40263: LD_ADDR_VAR 0 34
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40543: LD_ADDR_VAR 0 35
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40655: LD_ADDR_VAR 0 36
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40767: LD_ADDR_VAR 0 37
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40879: LD_ADDR_VAR 0 38
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40991: LD_ADDR_VAR 0 39
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41103: LD_ADDR_VAR 0 40
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41215: LD_ADDR_VAR 0 41
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 2
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 3
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: NEG
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 3
41524: NEG
41525: PUSH
41526: LD_INT 3
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41565: LD_ADDR_VAR 0 42
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: LD_INT 3
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41915: LD_ADDR_VAR 0 43
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 3
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 3
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42263: LD_ADDR_VAR 0 44
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 3
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 3
42537: NEG
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 3
42560: NEG
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 3
42572: NEG
42573: PUSH
42574: LD_INT 3
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42613: LD_ADDR_VAR 0 45
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: NEG
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42963: LD_ADDR_VAR 0 46
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 3
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43311: LD_ADDR_VAR 0 47
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43462: LD_ADDR_VAR 0 48
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43609: LD_ADDR_VAR 0 49
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43753: LD_ADDR_VAR 0 50
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43897: LD_ADDR_VAR 0 51
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44044: LD_ADDR_VAR 0 52
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44195: LD_ADDR_VAR 0 53
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44425: LD_ADDR_VAR 0 54
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44655: LD_ADDR_VAR 0 55
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44885: LD_ADDR_VAR 0 56
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45115: LD_ADDR_VAR 0 57
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45345: LD_ADDR_VAR 0 58
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45575: LD_ADDR_VAR 0 59
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45663: LD_ADDR_VAR 0 60
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45751: LD_ADDR_VAR 0 61
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45839: LD_ADDR_VAR 0 62
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45927: LD_ADDR_VAR 0 63
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46015: LD_ADDR_VAR 0 64
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// end ; 1 :
46103: GO 52000
46105: LD_INT 1
46107: DOUBLE
46108: EQUAL
46109: IFTRUE 46113
46111: GO 48736
46113: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46114: LD_ADDR_VAR 0 11
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46158: LD_ADDR_VAR 0 12
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46199: LD_ADDR_VAR 0 13
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46239: LD_ADDR_VAR 0 14
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46280: LD_ADDR_VAR 0 15
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46324: LD_ADDR_VAR 0 16
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46370: LD_ADDR_VAR 0 17
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 3
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46414: LD_ADDR_VAR 0 18
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46455: LD_ADDR_VAR 0 19
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46495: LD_ADDR_VAR 0 20
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46536: LD_ADDR_VAR 0 21
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46580: LD_ADDR_VAR 0 22
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: LD_INT 3
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46626: LD_ADDR_VAR 0 23
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: LIST
46669: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46670: LD_ADDR_VAR 0 24
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 4
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46711: LD_ADDR_VAR 0 25
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46751: LD_ADDR_VAR 0 26
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 4
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46792: LD_ADDR_VAR 0 27
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 4
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46836: LD_ADDR_VAR 0 28
46840: PUSH
46841: LD_INT 3
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 4
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46882: LD_ADDR_VAR 0 29
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 4
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 5
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 5
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 6
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 6
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 5
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47037: LD_ADDR_VAR 0 30
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 4
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 4
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 5
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 6
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 6
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47180: LD_ADDR_VAR 0 31
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 4
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 4
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 4
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 5
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 5
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 6
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 6
47287: PUSH
47288: LD_INT 6
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 5
47297: PUSH
47298: LD_INT 6
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47319: LD_ADDR_VAR 0 32
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 5
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 4
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 6
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 6
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 5
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47462: LD_ADDR_VAR 0 33
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 4
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 4
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 4
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 5
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 5
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 6
47582: NEG
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 6
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47617: LD_ADDR_VAR 0 34
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 3
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: LD_INT 4
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 4
47672: NEG
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 4
47684: NEG
47685: PUSH
47686: LD_INT 4
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 4
47696: NEG
47697: PUSH
47698: LD_INT 5
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 5
47708: NEG
47709: PUSH
47710: LD_INT 4
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 5
47720: NEG
47721: PUSH
47722: LD_INT 5
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 5
47732: NEG
47733: PUSH
47734: LD_INT 6
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 6
47744: NEG
47745: PUSH
47746: LD_INT 5
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 6
47756: NEG
47757: PUSH
47758: LD_INT 6
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47780: LD_ADDR_VAR 0 41
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 3
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47824: LD_ADDR_VAR 0 42
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47865: LD_ADDR_VAR 0 43
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47905: LD_ADDR_VAR 0 44
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47946: LD_ADDR_VAR 0 45
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47990: LD_ADDR_VAR 0 46
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48036: LD_ADDR_VAR 0 47
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48069: LD_ADDR_VAR 0 48
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48100: LD_ADDR_VAR 0 49
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48129: LD_ADDR_VAR 0 50
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48158: LD_ADDR_VAR 0 51
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48189: LD_ADDR_VAR 0 52
48193: PUSH
48194: LD_INT 3
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48222: LD_ADDR_VAR 0 53
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48266: LD_ADDR_VAR 0 54
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48307: LD_ADDR_VAR 0 55
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48347: LD_ADDR_VAR 0 56
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48388: LD_ADDR_VAR 0 57
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48432: LD_ADDR_VAR 0 58
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48478: LD_ADDR_VAR 0 59
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48522: LD_ADDR_VAR 0 60
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48563: LD_ADDR_VAR 0 61
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48603: LD_ADDR_VAR 0 62
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48644: LD_ADDR_VAR 0 63
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48688: LD_ADDR_VAR 0 64
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// end ; 2 :
48734: GO 52000
48736: LD_INT 2
48738: DOUBLE
48739: EQUAL
48740: IFTRUE 48744
48742: GO 51999
48744: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48745: LD_ADDR_VAR 0 29
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 4
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 5
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 5
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 5
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 4
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 4
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: LD_INT 4
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 4
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 5
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 5
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 4
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 5
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 4
49084: NEG
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 4
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 4
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 4
49130: NEG
49131: PUSH
49132: LD_INT 4
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 4
49142: NEG
49143: PUSH
49144: LD_INT 5
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 4
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 4
49178: NEG
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 5
49190: NEG
49191: PUSH
49192: LD_INT 4
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 5
49202: NEG
49203: PUSH
49204: LD_INT 5
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: LD_INT 5
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 5
49226: NEG
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49283: LD_ADDR_VAR 0 30
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 4
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 5
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 5
49320: PUSH
49321: LD_INT 5
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 4
49330: PUSH
49331: LD_INT 5
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 4
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 5
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 5
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 4
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 4
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 4
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 4
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 5
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 5
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 5
49552: NEG
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 4
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 4
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: LD_INT 4
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 4
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 4
49671: NEG
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 4
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 5
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 4
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 5
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: LD_INT 5
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49830: LD_ADDR_VAR 0 31
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 4
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 4
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 5
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 5
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 5
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 4
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 4
50032: NEG
50033: PUSH
50034: LD_INT 4
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 4
50044: NEG
50045: PUSH
50046: LD_INT 5
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: LD_INT 4
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 3
50068: NEG
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 4
50080: NEG
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 5
50092: NEG
50093: PUSH
50094: LD_INT 4
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 5
50104: NEG
50105: PUSH
50106: LD_INT 5
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: LD_INT 5
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 5
50128: NEG
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 4
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 4
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 4
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 4
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 5
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 5
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 4
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 5
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50380: LD_ADDR_VAR 0 32
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 4
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 5
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 5
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 5
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 4
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 4
50549: NEG
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 4
50561: NEG
50562: PUSH
50563: LD_INT 4
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 4
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 4
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 4
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 5
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 4
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 4
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 5
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 5
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 4
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 4
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: LD_INT 4
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 4
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 5
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 5
50822: PUSH
50823: LD_INT 5
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: LD_INT 5
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 4
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 5
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: LD_INT 5
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50927: LD_ADDR_VAR 0 33
50931: PUSH
50932: LD_INT 4
50934: NEG
50935: PUSH
50936: LD_INT 4
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 4
50946: NEG
50947: PUSH
50948: LD_INT 5
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: LD_INT 4
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 4
50982: NEG
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 5
50994: NEG
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 5
51006: NEG
51007: PUSH
51008: LD_INT 5
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 5
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 5
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 4
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 4
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: LD_INT 4
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 4
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 4
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 5
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 5
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 4
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 5
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 4
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 5
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51465: LD_ADDR_VAR 0 34
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 4
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 5
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 4
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 5
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: LD_INT 5
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 4
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: LD_INT 4
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: LD_INT 3
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 5
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 5
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 4
51707: PUSH
51708: LD_INT 5
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 4
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 5
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 5
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 4
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 4
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 5
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 5
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 5
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// end ; end ;
51997: GO 52000
51999: POP
// case btype of b_depot , b_warehouse :
52000: LD_VAR 0 1
52004: PUSH
52005: LD_INT 0
52007: DOUBLE
52008: EQUAL
52009: IFTRUE 52019
52011: LD_INT 1
52013: DOUBLE
52014: EQUAL
52015: IFTRUE 52019
52017: GO 52220
52019: POP
// case nation of nation_american :
52020: LD_VAR 0 5
52024: PUSH
52025: LD_INT 1
52027: DOUBLE
52028: EQUAL
52029: IFTRUE 52033
52031: GO 52089
52033: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52034: LD_ADDR_VAR 0 9
52038: PUSH
52039: LD_VAR 0 11
52043: PUSH
52044: LD_VAR 0 12
52048: PUSH
52049: LD_VAR 0 13
52053: PUSH
52054: LD_VAR 0 14
52058: PUSH
52059: LD_VAR 0 15
52063: PUSH
52064: LD_VAR 0 16
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: PUSH
52077: LD_VAR 0 4
52081: PUSH
52082: LD_INT 1
52084: PLUS
52085: ARRAY
52086: ST_TO_ADDR
52087: GO 52218
52089: LD_INT 2
52091: DOUBLE
52092: EQUAL
52093: IFTRUE 52097
52095: GO 52153
52097: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52098: LD_ADDR_VAR 0 9
52102: PUSH
52103: LD_VAR 0 17
52107: PUSH
52108: LD_VAR 0 18
52112: PUSH
52113: LD_VAR 0 19
52117: PUSH
52118: LD_VAR 0 20
52122: PUSH
52123: LD_VAR 0 21
52127: PUSH
52128: LD_VAR 0 22
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: PUSH
52141: LD_VAR 0 4
52145: PUSH
52146: LD_INT 1
52148: PLUS
52149: ARRAY
52150: ST_TO_ADDR
52151: GO 52218
52153: LD_INT 3
52155: DOUBLE
52156: EQUAL
52157: IFTRUE 52161
52159: GO 52217
52161: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52162: LD_ADDR_VAR 0 9
52166: PUSH
52167: LD_VAR 0 23
52171: PUSH
52172: LD_VAR 0 24
52176: PUSH
52177: LD_VAR 0 25
52181: PUSH
52182: LD_VAR 0 26
52186: PUSH
52187: LD_VAR 0 27
52191: PUSH
52192: LD_VAR 0 28
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: PUSH
52205: LD_VAR 0 4
52209: PUSH
52210: LD_INT 1
52212: PLUS
52213: ARRAY
52214: ST_TO_ADDR
52215: GO 52218
52217: POP
52218: GO 52767
52220: LD_INT 2
52222: DOUBLE
52223: EQUAL
52224: IFTRUE 52234
52226: LD_INT 3
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52234
52232: GO 52290
52234: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52235: LD_ADDR_VAR 0 9
52239: PUSH
52240: LD_VAR 0 29
52244: PUSH
52245: LD_VAR 0 30
52249: PUSH
52250: LD_VAR 0 31
52254: PUSH
52255: LD_VAR 0 32
52259: PUSH
52260: LD_VAR 0 33
52264: PUSH
52265: LD_VAR 0 34
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: LD_VAR 0 4
52282: PUSH
52283: LD_INT 1
52285: PLUS
52286: ARRAY
52287: ST_TO_ADDR
52288: GO 52767
52290: LD_INT 16
52292: DOUBLE
52293: EQUAL
52294: IFTRUE 52346
52296: LD_INT 17
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52346
52302: LD_INT 18
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52346
52308: LD_INT 19
52310: DOUBLE
52311: EQUAL
52312: IFTRUE 52346
52314: LD_INT 20
52316: DOUBLE
52317: EQUAL
52318: IFTRUE 52346
52320: LD_INT 21
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52346
52326: LD_INT 23
52328: DOUBLE
52329: EQUAL
52330: IFTRUE 52346
52332: LD_INT 24
52334: DOUBLE
52335: EQUAL
52336: IFTRUE 52346
52338: LD_INT 25
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52346
52344: GO 52402
52346: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52347: LD_ADDR_VAR 0 9
52351: PUSH
52352: LD_VAR 0 35
52356: PUSH
52357: LD_VAR 0 36
52361: PUSH
52362: LD_VAR 0 37
52366: PUSH
52367: LD_VAR 0 38
52371: PUSH
52372: LD_VAR 0 39
52376: PUSH
52377: LD_VAR 0 40
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: PUSH
52390: LD_VAR 0 4
52394: PUSH
52395: LD_INT 1
52397: PLUS
52398: ARRAY
52399: ST_TO_ADDR
52400: GO 52767
52402: LD_INT 6
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52458
52408: LD_INT 7
52410: DOUBLE
52411: EQUAL
52412: IFTRUE 52458
52414: LD_INT 8
52416: DOUBLE
52417: EQUAL
52418: IFTRUE 52458
52420: LD_INT 13
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52458
52426: LD_INT 12
52428: DOUBLE
52429: EQUAL
52430: IFTRUE 52458
52432: LD_INT 15
52434: DOUBLE
52435: EQUAL
52436: IFTRUE 52458
52438: LD_INT 11
52440: DOUBLE
52441: EQUAL
52442: IFTRUE 52458
52444: LD_INT 14
52446: DOUBLE
52447: EQUAL
52448: IFTRUE 52458
52450: LD_INT 10
52452: DOUBLE
52453: EQUAL
52454: IFTRUE 52458
52456: GO 52514
52458: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52459: LD_ADDR_VAR 0 9
52463: PUSH
52464: LD_VAR 0 41
52468: PUSH
52469: LD_VAR 0 42
52473: PUSH
52474: LD_VAR 0 43
52478: PUSH
52479: LD_VAR 0 44
52483: PUSH
52484: LD_VAR 0 45
52488: PUSH
52489: LD_VAR 0 46
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: PUSH
52502: LD_VAR 0 4
52506: PUSH
52507: LD_INT 1
52509: PLUS
52510: ARRAY
52511: ST_TO_ADDR
52512: GO 52767
52514: LD_INT 36
52516: DOUBLE
52517: EQUAL
52518: IFTRUE 52522
52520: GO 52578
52522: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52523: LD_ADDR_VAR 0 9
52527: PUSH
52528: LD_VAR 0 47
52532: PUSH
52533: LD_VAR 0 48
52537: PUSH
52538: LD_VAR 0 49
52542: PUSH
52543: LD_VAR 0 50
52547: PUSH
52548: LD_VAR 0 51
52552: PUSH
52553: LD_VAR 0 52
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: PUSH
52566: LD_VAR 0 4
52570: PUSH
52571: LD_INT 1
52573: PLUS
52574: ARRAY
52575: ST_TO_ADDR
52576: GO 52767
52578: LD_INT 4
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52604
52584: LD_INT 5
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52604
52590: LD_INT 34
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52604
52596: LD_INT 37
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52604
52602: GO 52660
52604: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52605: LD_ADDR_VAR 0 9
52609: PUSH
52610: LD_VAR 0 53
52614: PUSH
52615: LD_VAR 0 54
52619: PUSH
52620: LD_VAR 0 55
52624: PUSH
52625: LD_VAR 0 56
52629: PUSH
52630: LD_VAR 0 57
52634: PUSH
52635: LD_VAR 0 58
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: PUSH
52648: LD_VAR 0 4
52652: PUSH
52653: LD_INT 1
52655: PLUS
52656: ARRAY
52657: ST_TO_ADDR
52658: GO 52767
52660: LD_INT 31
52662: DOUBLE
52663: EQUAL
52664: IFTRUE 52710
52666: LD_INT 32
52668: DOUBLE
52669: EQUAL
52670: IFTRUE 52710
52672: LD_INT 33
52674: DOUBLE
52675: EQUAL
52676: IFTRUE 52710
52678: LD_INT 27
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52710
52684: LD_INT 26
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52710
52690: LD_INT 28
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52710
52696: LD_INT 29
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52710
52702: LD_INT 30
52704: DOUBLE
52705: EQUAL
52706: IFTRUE 52710
52708: GO 52766
52710: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52711: LD_ADDR_VAR 0 9
52715: PUSH
52716: LD_VAR 0 59
52720: PUSH
52721: LD_VAR 0 60
52725: PUSH
52726: LD_VAR 0 61
52730: PUSH
52731: LD_VAR 0 62
52735: PUSH
52736: LD_VAR 0 63
52740: PUSH
52741: LD_VAR 0 64
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_VAR 0 4
52758: PUSH
52759: LD_INT 1
52761: PLUS
52762: ARRAY
52763: ST_TO_ADDR
52764: GO 52767
52766: POP
// temp_list2 = [ ] ;
52767: LD_ADDR_VAR 0 10
52771: PUSH
52772: EMPTY
52773: ST_TO_ADDR
// for i in temp_list do
52774: LD_ADDR_VAR 0 8
52778: PUSH
52779: LD_VAR 0 9
52783: PUSH
52784: FOR_IN
52785: IFFALSE 52837
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52787: LD_ADDR_VAR 0 10
52791: PUSH
52792: LD_VAR 0 10
52796: PUSH
52797: LD_VAR 0 8
52801: PUSH
52802: LD_INT 1
52804: ARRAY
52805: PUSH
52806: LD_VAR 0 2
52810: PLUS
52811: PUSH
52812: LD_VAR 0 8
52816: PUSH
52817: LD_INT 2
52819: ARRAY
52820: PUSH
52821: LD_VAR 0 3
52825: PLUS
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: ADD
52834: ST_TO_ADDR
52835: GO 52784
52837: POP
52838: POP
// result = temp_list2 ;
52839: LD_ADDR_VAR 0 7
52843: PUSH
52844: LD_VAR 0 10
52848: ST_TO_ADDR
// end ;
52849: LD_VAR 0 7
52853: RET
// export function EnemyInRange ( unit , dist ) ; begin
52854: LD_INT 0
52856: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52857: LD_ADDR_VAR 0 3
52861: PUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 255
52871: PPUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: CALL_OW 250
52881: PPUSH
52882: LD_VAR 0 1
52886: PPUSH
52887: CALL_OW 251
52891: PPUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: CALL 26964 0 4
52901: PUSH
52902: LD_INT 4
52904: ARRAY
52905: ST_TO_ADDR
// end ;
52906: LD_VAR 0 3
52910: RET
// export function PlayerSeeMe ( unit ) ; begin
52911: LD_INT 0
52913: PPUSH
// result := See ( your_side , unit ) ;
52914: LD_ADDR_VAR 0 2
52918: PUSH
52919: LD_OWVAR 2
52923: PPUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: CALL_OW 292
52933: ST_TO_ADDR
// end ;
52934: LD_VAR 0 2
52938: RET
// export function ReverseDir ( unit ) ; begin
52939: LD_INT 0
52941: PPUSH
// if not unit then
52942: LD_VAR 0 1
52946: NOT
52947: IFFALSE 52951
// exit ;
52949: GO 52997
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52951: LD_ADDR_VAR 0 2
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 4
52961: PUSH
52962: LD_INT 5
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: PUSH
52982: LD_VAR 0 1
52986: PPUSH
52987: CALL_OW 254
52991: PUSH
52992: LD_INT 1
52994: PLUS
52995: ARRAY
52996: ST_TO_ADDR
// end ;
52997: LD_VAR 0 2
53001: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53002: LD_INT 0
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
// if not hexes then
53009: LD_VAR 0 2
53013: NOT
53014: IFFALSE 53018
// exit ;
53016: GO 53166
// dist := 9999 ;
53018: LD_ADDR_VAR 0 5
53022: PUSH
53023: LD_INT 9999
53025: ST_TO_ADDR
// for i = 1 to hexes do
53026: LD_ADDR_VAR 0 4
53030: PUSH
53031: DOUBLE
53032: LD_INT 1
53034: DEC
53035: ST_TO_ADDR
53036: LD_VAR 0 2
53040: PUSH
53041: FOR_TO
53042: IFFALSE 53154
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53044: LD_VAR 0 1
53048: PPUSH
53049: LD_VAR 0 2
53053: PUSH
53054: LD_VAR 0 4
53058: ARRAY
53059: PUSH
53060: LD_INT 1
53062: ARRAY
53063: PPUSH
53064: LD_VAR 0 2
53068: PUSH
53069: LD_VAR 0 4
53073: ARRAY
53074: PUSH
53075: LD_INT 2
53077: ARRAY
53078: PPUSH
53079: CALL_OW 297
53083: PUSH
53084: LD_VAR 0 5
53088: LESS
53089: IFFALSE 53152
// begin hex := hexes [ i ] ;
53091: LD_ADDR_VAR 0 7
53095: PUSH
53096: LD_VAR 0 2
53100: PUSH
53101: LD_VAR 0 4
53105: ARRAY
53106: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53107: LD_ADDR_VAR 0 5
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: LD_VAR 0 2
53121: PUSH
53122: LD_VAR 0 4
53126: ARRAY
53127: PUSH
53128: LD_INT 1
53130: ARRAY
53131: PPUSH
53132: LD_VAR 0 2
53136: PUSH
53137: LD_VAR 0 4
53141: ARRAY
53142: PUSH
53143: LD_INT 2
53145: ARRAY
53146: PPUSH
53147: CALL_OW 297
53151: ST_TO_ADDR
// end ; end ;
53152: GO 53041
53154: POP
53155: POP
// result := hex ;
53156: LD_ADDR_VAR 0 3
53160: PUSH
53161: LD_VAR 0 7
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 3
53170: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53171: LD_INT 0
53173: PPUSH
53174: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53175: LD_VAR 0 1
53179: NOT
53180: PUSH
53181: LD_VAR 0 1
53185: PUSH
53186: LD_INT 21
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 23
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PPUSH
53210: CALL_OW 69
53214: IN
53215: NOT
53216: OR
53217: IFFALSE 53221
// exit ;
53219: GO 53268
// for i = 1 to 3 do
53221: LD_ADDR_VAR 0 3
53225: PUSH
53226: DOUBLE
53227: LD_INT 1
53229: DEC
53230: ST_TO_ADDR
53231: LD_INT 3
53233: PUSH
53234: FOR_TO
53235: IFFALSE 53266
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 250
53246: PPUSH
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 251
53256: PPUSH
53257: LD_INT 1
53259: PPUSH
53260: CALL_OW 453
53264: GO 53234
53266: POP
53267: POP
// end ;
53268: LD_VAR 0 2
53272: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53273: LD_INT 0
53275: PPUSH
53276: PPUSH
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53281: LD_VAR 0 1
53285: NOT
53286: PUSH
53287: LD_VAR 0 2
53291: NOT
53292: OR
53293: PUSH
53294: LD_VAR 0 1
53298: PPUSH
53299: CALL_OW 314
53303: OR
53304: IFFALSE 53308
// exit ;
53306: GO 53749
// x := GetX ( enemy_unit ) ;
53308: LD_ADDR_VAR 0 7
53312: PUSH
53313: LD_VAR 0 2
53317: PPUSH
53318: CALL_OW 250
53322: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53323: LD_ADDR_VAR 0 8
53327: PUSH
53328: LD_VAR 0 2
53332: PPUSH
53333: CALL_OW 251
53337: ST_TO_ADDR
// if not x or not y then
53338: LD_VAR 0 7
53342: NOT
53343: PUSH
53344: LD_VAR 0 8
53348: NOT
53349: OR
53350: IFFALSE 53354
// exit ;
53352: GO 53749
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53354: LD_ADDR_VAR 0 6
53358: PUSH
53359: LD_VAR 0 7
53363: PPUSH
53364: LD_INT 0
53366: PPUSH
53367: LD_INT 4
53369: PPUSH
53370: CALL_OW 272
53374: PUSH
53375: LD_VAR 0 8
53379: PPUSH
53380: LD_INT 0
53382: PPUSH
53383: LD_INT 4
53385: PPUSH
53386: CALL_OW 273
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_VAR 0 7
53399: PPUSH
53400: LD_INT 1
53402: PPUSH
53403: LD_INT 4
53405: PPUSH
53406: CALL_OW 272
53410: PUSH
53411: LD_VAR 0 8
53415: PPUSH
53416: LD_INT 1
53418: PPUSH
53419: LD_INT 4
53421: PPUSH
53422: CALL_OW 273
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_VAR 0 7
53435: PPUSH
53436: LD_INT 2
53438: PPUSH
53439: LD_INT 4
53441: PPUSH
53442: CALL_OW 272
53446: PUSH
53447: LD_VAR 0 8
53451: PPUSH
53452: LD_INT 2
53454: PPUSH
53455: LD_INT 4
53457: PPUSH
53458: CALL_OW 273
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_VAR 0 7
53471: PPUSH
53472: LD_INT 3
53474: PPUSH
53475: LD_INT 4
53477: PPUSH
53478: CALL_OW 272
53482: PUSH
53483: LD_VAR 0 8
53487: PPUSH
53488: LD_INT 3
53490: PPUSH
53491: LD_INT 4
53493: PPUSH
53494: CALL_OW 273
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_VAR 0 7
53507: PPUSH
53508: LD_INT 4
53510: PPUSH
53511: LD_INT 4
53513: PPUSH
53514: CALL_OW 272
53518: PUSH
53519: LD_VAR 0 8
53523: PPUSH
53524: LD_INT 4
53526: PPUSH
53527: LD_INT 4
53529: PPUSH
53530: CALL_OW 273
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_VAR 0 7
53543: PPUSH
53544: LD_INT 5
53546: PPUSH
53547: LD_INT 4
53549: PPUSH
53550: CALL_OW 272
53554: PUSH
53555: LD_VAR 0 8
53559: PPUSH
53560: LD_INT 5
53562: PPUSH
53563: LD_INT 4
53565: PPUSH
53566: CALL_OW 273
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// for i = tmp downto 1 do
53583: LD_ADDR_VAR 0 4
53587: PUSH
53588: DOUBLE
53589: LD_VAR 0 6
53593: INC
53594: ST_TO_ADDR
53595: LD_INT 1
53597: PUSH
53598: FOR_DOWNTO
53599: IFFALSE 53700
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53601: LD_VAR 0 6
53605: PUSH
53606: LD_VAR 0 4
53610: ARRAY
53611: PUSH
53612: LD_INT 1
53614: ARRAY
53615: PPUSH
53616: LD_VAR 0 6
53620: PUSH
53621: LD_VAR 0 4
53625: ARRAY
53626: PUSH
53627: LD_INT 2
53629: ARRAY
53630: PPUSH
53631: CALL_OW 488
53635: NOT
53636: PUSH
53637: LD_VAR 0 6
53641: PUSH
53642: LD_VAR 0 4
53646: ARRAY
53647: PUSH
53648: LD_INT 1
53650: ARRAY
53651: PPUSH
53652: LD_VAR 0 6
53656: PUSH
53657: LD_VAR 0 4
53661: ARRAY
53662: PUSH
53663: LD_INT 2
53665: ARRAY
53666: PPUSH
53667: CALL_OW 428
53671: PUSH
53672: LD_INT 0
53674: NONEQUAL
53675: OR
53676: IFFALSE 53698
// tmp := Delete ( tmp , i ) ;
53678: LD_ADDR_VAR 0 6
53682: PUSH
53683: LD_VAR 0 6
53687: PPUSH
53688: LD_VAR 0 4
53692: PPUSH
53693: CALL_OW 3
53697: ST_TO_ADDR
53698: GO 53598
53700: POP
53701: POP
// j := GetClosestHex ( unit , tmp ) ;
53702: LD_ADDR_VAR 0 5
53706: PUSH
53707: LD_VAR 0 1
53711: PPUSH
53712: LD_VAR 0 6
53716: PPUSH
53717: CALL 53002 0 2
53721: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53722: LD_VAR 0 1
53726: PPUSH
53727: LD_VAR 0 5
53731: PUSH
53732: LD_INT 1
53734: ARRAY
53735: PPUSH
53736: LD_VAR 0 5
53740: PUSH
53741: LD_INT 2
53743: ARRAY
53744: PPUSH
53745: CALL_OW 111
// end ;
53749: LD_VAR 0 3
53753: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53754: LD_INT 0
53756: PPUSH
53757: PPUSH
53758: PPUSH
// uc_side = 0 ;
53759: LD_ADDR_OWVAR 20
53763: PUSH
53764: LD_INT 0
53766: ST_TO_ADDR
// uc_nation = 0 ;
53767: LD_ADDR_OWVAR 21
53771: PUSH
53772: LD_INT 0
53774: ST_TO_ADDR
// InitHc ;
53775: CALL_OW 19
// InitVc ;
53779: CALL_OW 20
// if mastodonts then
53783: LD_VAR 0 6
53787: IFFALSE 53854
// for i = 1 to mastodonts do
53789: LD_ADDR_VAR 0 11
53793: PUSH
53794: DOUBLE
53795: LD_INT 1
53797: DEC
53798: ST_TO_ADDR
53799: LD_VAR 0 6
53803: PUSH
53804: FOR_TO
53805: IFFALSE 53852
// begin vc_chassis := 31 ;
53807: LD_ADDR_OWVAR 37
53811: PUSH
53812: LD_INT 31
53814: ST_TO_ADDR
// vc_control := control_rider ;
53815: LD_ADDR_OWVAR 38
53819: PUSH
53820: LD_INT 4
53822: ST_TO_ADDR
// animal := CreateVehicle ;
53823: LD_ADDR_VAR 0 12
53827: PUSH
53828: CALL_OW 45
53832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53833: LD_VAR 0 12
53837: PPUSH
53838: LD_VAR 0 8
53842: PPUSH
53843: LD_INT 0
53845: PPUSH
53846: CALL 60599 0 3
// end ;
53850: GO 53804
53852: POP
53853: POP
// if horses then
53854: LD_VAR 0 5
53858: IFFALSE 53925
// for i = 1 to horses do
53860: LD_ADDR_VAR 0 11
53864: PUSH
53865: DOUBLE
53866: LD_INT 1
53868: DEC
53869: ST_TO_ADDR
53870: LD_VAR 0 5
53874: PUSH
53875: FOR_TO
53876: IFFALSE 53923
// begin hc_class := 21 ;
53878: LD_ADDR_OWVAR 28
53882: PUSH
53883: LD_INT 21
53885: ST_TO_ADDR
// hc_gallery :=  ;
53886: LD_ADDR_OWVAR 33
53890: PUSH
53891: LD_STRING 
53893: ST_TO_ADDR
// animal := CreateHuman ;
53894: LD_ADDR_VAR 0 12
53898: PUSH
53899: CALL_OW 44
53903: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53904: LD_VAR 0 12
53908: PPUSH
53909: LD_VAR 0 8
53913: PPUSH
53914: LD_INT 0
53916: PPUSH
53917: CALL 60599 0 3
// end ;
53921: GO 53875
53923: POP
53924: POP
// if birds then
53925: LD_VAR 0 1
53929: IFFALSE 53996
// for i = 1 to birds do
53931: LD_ADDR_VAR 0 11
53935: PUSH
53936: DOUBLE
53937: LD_INT 1
53939: DEC
53940: ST_TO_ADDR
53941: LD_VAR 0 1
53945: PUSH
53946: FOR_TO
53947: IFFALSE 53994
// begin hc_class = 18 ;
53949: LD_ADDR_OWVAR 28
53953: PUSH
53954: LD_INT 18
53956: ST_TO_ADDR
// hc_gallery =  ;
53957: LD_ADDR_OWVAR 33
53961: PUSH
53962: LD_STRING 
53964: ST_TO_ADDR
// animal := CreateHuman ;
53965: LD_ADDR_VAR 0 12
53969: PUSH
53970: CALL_OW 44
53974: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53975: LD_VAR 0 12
53979: PPUSH
53980: LD_VAR 0 8
53984: PPUSH
53985: LD_INT 0
53987: PPUSH
53988: CALL 60599 0 3
// end ;
53992: GO 53946
53994: POP
53995: POP
// if tigers then
53996: LD_VAR 0 2
54000: IFFALSE 54084
// for i = 1 to tigers do
54002: LD_ADDR_VAR 0 11
54006: PUSH
54007: DOUBLE
54008: LD_INT 1
54010: DEC
54011: ST_TO_ADDR
54012: LD_VAR 0 2
54016: PUSH
54017: FOR_TO
54018: IFFALSE 54082
// begin hc_class = class_tiger ;
54020: LD_ADDR_OWVAR 28
54024: PUSH
54025: LD_INT 14
54027: ST_TO_ADDR
// hc_gallery =  ;
54028: LD_ADDR_OWVAR 33
54032: PUSH
54033: LD_STRING 
54035: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54036: LD_ADDR_OWVAR 35
54040: PUSH
54041: LD_INT 7
54043: NEG
54044: PPUSH
54045: LD_INT 7
54047: PPUSH
54048: CALL_OW 12
54052: ST_TO_ADDR
// animal := CreateHuman ;
54053: LD_ADDR_VAR 0 12
54057: PUSH
54058: CALL_OW 44
54062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54063: LD_VAR 0 12
54067: PPUSH
54068: LD_VAR 0 8
54072: PPUSH
54073: LD_INT 0
54075: PPUSH
54076: CALL 60599 0 3
// end ;
54080: GO 54017
54082: POP
54083: POP
// if apemans then
54084: LD_VAR 0 3
54088: IFFALSE 54211
// for i = 1 to apemans do
54090: LD_ADDR_VAR 0 11
54094: PUSH
54095: DOUBLE
54096: LD_INT 1
54098: DEC
54099: ST_TO_ADDR
54100: LD_VAR 0 3
54104: PUSH
54105: FOR_TO
54106: IFFALSE 54209
// begin hc_class = class_apeman ;
54108: LD_ADDR_OWVAR 28
54112: PUSH
54113: LD_INT 12
54115: ST_TO_ADDR
// hc_gallery =  ;
54116: LD_ADDR_OWVAR 33
54120: PUSH
54121: LD_STRING 
54123: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54124: LD_ADDR_OWVAR 35
54128: PUSH
54129: LD_INT 5
54131: NEG
54132: PPUSH
54133: LD_INT 5
54135: PPUSH
54136: CALL_OW 12
54140: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54141: LD_ADDR_OWVAR 31
54145: PUSH
54146: LD_INT 1
54148: PPUSH
54149: LD_INT 3
54151: PPUSH
54152: CALL_OW 12
54156: PUSH
54157: LD_INT 1
54159: PPUSH
54160: LD_INT 3
54162: PPUSH
54163: CALL_OW 12
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// animal := CreateHuman ;
54180: LD_ADDR_VAR 0 12
54184: PUSH
54185: CALL_OW 44
54189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54190: LD_VAR 0 12
54194: PPUSH
54195: LD_VAR 0 8
54199: PPUSH
54200: LD_INT 0
54202: PPUSH
54203: CALL 60599 0 3
// end ;
54207: GO 54105
54209: POP
54210: POP
// if enchidnas then
54211: LD_VAR 0 4
54215: IFFALSE 54282
// for i = 1 to enchidnas do
54217: LD_ADDR_VAR 0 11
54221: PUSH
54222: DOUBLE
54223: LD_INT 1
54225: DEC
54226: ST_TO_ADDR
54227: LD_VAR 0 4
54231: PUSH
54232: FOR_TO
54233: IFFALSE 54280
// begin hc_class = 13 ;
54235: LD_ADDR_OWVAR 28
54239: PUSH
54240: LD_INT 13
54242: ST_TO_ADDR
// hc_gallery =  ;
54243: LD_ADDR_OWVAR 33
54247: PUSH
54248: LD_STRING 
54250: ST_TO_ADDR
// animal := CreateHuman ;
54251: LD_ADDR_VAR 0 12
54255: PUSH
54256: CALL_OW 44
54260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54261: LD_VAR 0 12
54265: PPUSH
54266: LD_VAR 0 8
54270: PPUSH
54271: LD_INT 0
54273: PPUSH
54274: CALL 60599 0 3
// end ;
54278: GO 54232
54280: POP
54281: POP
// if fishes then
54282: LD_VAR 0 7
54286: IFFALSE 54353
// for i = 1 to fishes do
54288: LD_ADDR_VAR 0 11
54292: PUSH
54293: DOUBLE
54294: LD_INT 1
54296: DEC
54297: ST_TO_ADDR
54298: LD_VAR 0 7
54302: PUSH
54303: FOR_TO
54304: IFFALSE 54351
// begin hc_class = 20 ;
54306: LD_ADDR_OWVAR 28
54310: PUSH
54311: LD_INT 20
54313: ST_TO_ADDR
// hc_gallery =  ;
54314: LD_ADDR_OWVAR 33
54318: PUSH
54319: LD_STRING 
54321: ST_TO_ADDR
// animal := CreateHuman ;
54322: LD_ADDR_VAR 0 12
54326: PUSH
54327: CALL_OW 44
54331: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54332: LD_VAR 0 12
54336: PPUSH
54337: LD_VAR 0 9
54341: PPUSH
54342: LD_INT 0
54344: PPUSH
54345: CALL 60599 0 3
// end ;
54349: GO 54303
54351: POP
54352: POP
// end ;
54353: LD_VAR 0 10
54357: RET
// export function WantHeal ( sci , unit ) ; begin
54358: LD_INT 0
54360: PPUSH
// if GetTaskList ( sci ) > 0 then
54361: LD_VAR 0 1
54365: PPUSH
54366: CALL_OW 437
54370: PUSH
54371: LD_INT 0
54373: GREATER
54374: IFFALSE 54444
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54376: LD_VAR 0 1
54380: PPUSH
54381: CALL_OW 437
54385: PUSH
54386: LD_INT 1
54388: ARRAY
54389: PUSH
54390: LD_INT 1
54392: ARRAY
54393: PUSH
54394: LD_STRING l
54396: EQUAL
54397: PUSH
54398: LD_VAR 0 1
54402: PPUSH
54403: CALL_OW 437
54407: PUSH
54408: LD_INT 1
54410: ARRAY
54411: PUSH
54412: LD_INT 4
54414: ARRAY
54415: PUSH
54416: LD_VAR 0 2
54420: EQUAL
54421: AND
54422: IFFALSE 54434
// result := true else
54424: LD_ADDR_VAR 0 3
54428: PUSH
54429: LD_INT 1
54431: ST_TO_ADDR
54432: GO 54442
// result := false ;
54434: LD_ADDR_VAR 0 3
54438: PUSH
54439: LD_INT 0
54441: ST_TO_ADDR
// end else
54442: GO 54452
// result := false ;
54444: LD_ADDR_VAR 0 3
54448: PUSH
54449: LD_INT 0
54451: ST_TO_ADDR
// end ;
54452: LD_VAR 0 3
54456: RET
// export function HealTarget ( sci ) ; begin
54457: LD_INT 0
54459: PPUSH
// if not sci then
54460: LD_VAR 0 1
54464: NOT
54465: IFFALSE 54469
// exit ;
54467: GO 54534
// result := 0 ;
54469: LD_ADDR_VAR 0 2
54473: PUSH
54474: LD_INT 0
54476: ST_TO_ADDR
// if GetTaskList ( sci ) then
54477: LD_VAR 0 1
54481: PPUSH
54482: CALL_OW 437
54486: IFFALSE 54534
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL_OW 437
54497: PUSH
54498: LD_INT 1
54500: ARRAY
54501: PUSH
54502: LD_INT 1
54504: ARRAY
54505: PUSH
54506: LD_STRING l
54508: EQUAL
54509: IFFALSE 54534
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54511: LD_ADDR_VAR 0 2
54515: PUSH
54516: LD_VAR 0 1
54520: PPUSH
54521: CALL_OW 437
54525: PUSH
54526: LD_INT 1
54528: ARRAY
54529: PUSH
54530: LD_INT 4
54532: ARRAY
54533: ST_TO_ADDR
// end ;
54534: LD_VAR 0 2
54538: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
// if not list then
54575: LD_VAR 0 1
54579: NOT
54580: IFFALSE 54584
// exit ;
54582: GO 59210
// base := list [ 1 ] ;
54584: LD_ADDR_VAR 0 3
54588: PUSH
54589: LD_VAR 0 1
54593: PUSH
54594: LD_INT 1
54596: ARRAY
54597: ST_TO_ADDR
// group := list [ 2 ] ;
54598: LD_ADDR_VAR 0 4
54602: PUSH
54603: LD_VAR 0 1
54607: PUSH
54608: LD_INT 2
54610: ARRAY
54611: ST_TO_ADDR
// path := list [ 3 ] ;
54612: LD_ADDR_VAR 0 5
54616: PUSH
54617: LD_VAR 0 1
54621: PUSH
54622: LD_INT 3
54624: ARRAY
54625: ST_TO_ADDR
// flags := list [ 4 ] ;
54626: LD_ADDR_VAR 0 6
54630: PUSH
54631: LD_VAR 0 1
54635: PUSH
54636: LD_INT 4
54638: ARRAY
54639: ST_TO_ADDR
// mined := [ ] ;
54640: LD_ADDR_VAR 0 27
54644: PUSH
54645: EMPTY
54646: ST_TO_ADDR
// bombed := [ ] ;
54647: LD_ADDR_VAR 0 28
54651: PUSH
54652: EMPTY
54653: ST_TO_ADDR
// healers := [ ] ;
54654: LD_ADDR_VAR 0 31
54658: PUSH
54659: EMPTY
54660: ST_TO_ADDR
// to_heal := [ ] ;
54661: LD_ADDR_VAR 0 30
54665: PUSH
54666: EMPTY
54667: ST_TO_ADDR
// repairs := [ ] ;
54668: LD_ADDR_VAR 0 33
54672: PUSH
54673: EMPTY
54674: ST_TO_ADDR
// to_repair := [ ] ;
54675: LD_ADDR_VAR 0 32
54679: PUSH
54680: EMPTY
54681: ST_TO_ADDR
// if not group or not path then
54682: LD_VAR 0 4
54686: NOT
54687: PUSH
54688: LD_VAR 0 5
54692: NOT
54693: OR
54694: IFFALSE 54698
// exit ;
54696: GO 59210
// side := GetSide ( group [ 1 ] ) ;
54698: LD_ADDR_VAR 0 35
54702: PUSH
54703: LD_VAR 0 4
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PPUSH
54712: CALL_OW 255
54716: ST_TO_ADDR
// if flags then
54717: LD_VAR 0 6
54721: IFFALSE 54865
// begin f_ignore_area := flags [ 1 ] ;
54723: LD_ADDR_VAR 0 17
54727: PUSH
54728: LD_VAR 0 6
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54737: LD_ADDR_VAR 0 18
54741: PUSH
54742: LD_VAR 0 6
54746: PUSH
54747: LD_INT 2
54749: ARRAY
54750: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54751: LD_ADDR_VAR 0 19
54755: PUSH
54756: LD_VAR 0 6
54760: PUSH
54761: LD_INT 3
54763: ARRAY
54764: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54765: LD_ADDR_VAR 0 20
54769: PUSH
54770: LD_VAR 0 6
54774: PUSH
54775: LD_INT 4
54777: ARRAY
54778: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54779: LD_ADDR_VAR 0 21
54783: PUSH
54784: LD_VAR 0 6
54788: PUSH
54789: LD_INT 5
54791: ARRAY
54792: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54793: LD_ADDR_VAR 0 22
54797: PUSH
54798: LD_VAR 0 6
54802: PUSH
54803: LD_INT 6
54805: ARRAY
54806: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54807: LD_ADDR_VAR 0 23
54811: PUSH
54812: LD_VAR 0 6
54816: PUSH
54817: LD_INT 7
54819: ARRAY
54820: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54821: LD_ADDR_VAR 0 24
54825: PUSH
54826: LD_VAR 0 6
54830: PUSH
54831: LD_INT 8
54833: ARRAY
54834: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54835: LD_ADDR_VAR 0 25
54839: PUSH
54840: LD_VAR 0 6
54844: PUSH
54845: LD_INT 9
54847: ARRAY
54848: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54849: LD_ADDR_VAR 0 26
54853: PUSH
54854: LD_VAR 0 6
54858: PUSH
54859: LD_INT 10
54861: ARRAY
54862: ST_TO_ADDR
// end else
54863: GO 54945
// begin f_ignore_area := false ;
54865: LD_ADDR_VAR 0 17
54869: PUSH
54870: LD_INT 0
54872: ST_TO_ADDR
// f_capture := false ;
54873: LD_ADDR_VAR 0 18
54877: PUSH
54878: LD_INT 0
54880: ST_TO_ADDR
// f_ignore_civ := false ;
54881: LD_ADDR_VAR 0 19
54885: PUSH
54886: LD_INT 0
54888: ST_TO_ADDR
// f_murder := false ;
54889: LD_ADDR_VAR 0 20
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// f_mines := false ;
54897: LD_ADDR_VAR 0 21
54901: PUSH
54902: LD_INT 0
54904: ST_TO_ADDR
// f_repair := false ;
54905: LD_ADDR_VAR 0 22
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
// f_heal := false ;
54913: LD_ADDR_VAR 0 23
54917: PUSH
54918: LD_INT 0
54920: ST_TO_ADDR
// f_spacetime := false ;
54921: LD_ADDR_VAR 0 24
54925: PUSH
54926: LD_INT 0
54928: ST_TO_ADDR
// f_attack_depot := false ;
54929: LD_ADDR_VAR 0 25
54933: PUSH
54934: LD_INT 0
54936: ST_TO_ADDR
// f_crawl := false ;
54937: LD_ADDR_VAR 0 26
54941: PUSH
54942: LD_INT 0
54944: ST_TO_ADDR
// end ; if f_heal then
54945: LD_VAR 0 23
54949: IFFALSE 54976
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54951: LD_ADDR_VAR 0 31
54955: PUSH
54956: LD_VAR 0 4
54960: PPUSH
54961: LD_INT 25
54963: PUSH
54964: LD_INT 4
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PPUSH
54971: CALL_OW 72
54975: ST_TO_ADDR
// if f_repair then
54976: LD_VAR 0 22
54980: IFFALSE 55007
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54982: LD_ADDR_VAR 0 33
54986: PUSH
54987: LD_VAR 0 4
54991: PPUSH
54992: LD_INT 25
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PPUSH
55002: CALL_OW 72
55006: ST_TO_ADDR
// units_path := [ ] ;
55007: LD_ADDR_VAR 0 16
55011: PUSH
55012: EMPTY
55013: ST_TO_ADDR
// for i = 1 to group do
55014: LD_ADDR_VAR 0 7
55018: PUSH
55019: DOUBLE
55020: LD_INT 1
55022: DEC
55023: ST_TO_ADDR
55024: LD_VAR 0 4
55028: PUSH
55029: FOR_TO
55030: IFFALSE 55059
// units_path := Replace ( units_path , i , path ) ;
55032: LD_ADDR_VAR 0 16
55036: PUSH
55037: LD_VAR 0 16
55041: PPUSH
55042: LD_VAR 0 7
55046: PPUSH
55047: LD_VAR 0 5
55051: PPUSH
55052: CALL_OW 1
55056: ST_TO_ADDR
55057: GO 55029
55059: POP
55060: POP
// repeat for i = group downto 1 do
55061: LD_ADDR_VAR 0 7
55065: PUSH
55066: DOUBLE
55067: LD_VAR 0 4
55071: INC
55072: ST_TO_ADDR
55073: LD_INT 1
55075: PUSH
55076: FOR_DOWNTO
55077: IFFALSE 59173
// begin wait ( 5 ) ;
55079: LD_INT 5
55081: PPUSH
55082: CALL_OW 67
// tmp := [ ] ;
55086: LD_ADDR_VAR 0 14
55090: PUSH
55091: EMPTY
55092: ST_TO_ADDR
// attacking := false ;
55093: LD_ADDR_VAR 0 29
55097: PUSH
55098: LD_INT 0
55100: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55101: LD_VAR 0 4
55105: PUSH
55106: LD_VAR 0 7
55110: ARRAY
55111: PPUSH
55112: CALL_OW 301
55116: PUSH
55117: LD_VAR 0 4
55121: PUSH
55122: LD_VAR 0 7
55126: ARRAY
55127: NOT
55128: OR
55129: IFFALSE 55238
// begin if GetType ( group [ i ] ) = unit_human then
55131: LD_VAR 0 4
55135: PUSH
55136: LD_VAR 0 7
55140: ARRAY
55141: PPUSH
55142: CALL_OW 247
55146: PUSH
55147: LD_INT 1
55149: EQUAL
55150: IFFALSE 55196
// begin to_heal := to_heal diff group [ i ] ;
55152: LD_ADDR_VAR 0 30
55156: PUSH
55157: LD_VAR 0 30
55161: PUSH
55162: LD_VAR 0 4
55166: PUSH
55167: LD_VAR 0 7
55171: ARRAY
55172: DIFF
55173: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55174: LD_ADDR_VAR 0 31
55178: PUSH
55179: LD_VAR 0 31
55183: PUSH
55184: LD_VAR 0 4
55188: PUSH
55189: LD_VAR 0 7
55193: ARRAY
55194: DIFF
55195: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55196: LD_ADDR_VAR 0 4
55200: PUSH
55201: LD_VAR 0 4
55205: PPUSH
55206: LD_VAR 0 7
55210: PPUSH
55211: CALL_OW 3
55215: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55216: LD_ADDR_VAR 0 16
55220: PUSH
55221: LD_VAR 0 16
55225: PPUSH
55226: LD_VAR 0 7
55230: PPUSH
55231: CALL_OW 3
55235: ST_TO_ADDR
// continue ;
55236: GO 55076
// end ; if f_repair then
55238: LD_VAR 0 22
55242: IFFALSE 55731
// begin if GetType ( group [ i ] ) = unit_vehicle then
55244: LD_VAR 0 4
55248: PUSH
55249: LD_VAR 0 7
55253: ARRAY
55254: PPUSH
55255: CALL_OW 247
55259: PUSH
55260: LD_INT 2
55262: EQUAL
55263: IFFALSE 55453
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55265: LD_VAR 0 4
55269: PUSH
55270: LD_VAR 0 7
55274: ARRAY
55275: PPUSH
55276: CALL_OW 256
55280: PUSH
55281: LD_INT 700
55283: LESS
55284: PUSH
55285: LD_VAR 0 4
55289: PUSH
55290: LD_VAR 0 7
55294: ARRAY
55295: PUSH
55296: LD_VAR 0 32
55300: IN
55301: NOT
55302: AND
55303: IFFALSE 55327
// to_repair := to_repair union group [ i ] ;
55305: LD_ADDR_VAR 0 32
55309: PUSH
55310: LD_VAR 0 32
55314: PUSH
55315: LD_VAR 0 4
55319: PUSH
55320: LD_VAR 0 7
55324: ARRAY
55325: UNION
55326: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55327: LD_VAR 0 4
55331: PUSH
55332: LD_VAR 0 7
55336: ARRAY
55337: PPUSH
55338: CALL_OW 256
55342: PUSH
55343: LD_INT 1000
55345: EQUAL
55346: PUSH
55347: LD_VAR 0 4
55351: PUSH
55352: LD_VAR 0 7
55356: ARRAY
55357: PUSH
55358: LD_VAR 0 32
55362: IN
55363: AND
55364: IFFALSE 55388
// to_repair := to_repair diff group [ i ] ;
55366: LD_ADDR_VAR 0 32
55370: PUSH
55371: LD_VAR 0 32
55375: PUSH
55376: LD_VAR 0 4
55380: PUSH
55381: LD_VAR 0 7
55385: ARRAY
55386: DIFF
55387: ST_TO_ADDR
// if group [ i ] in to_repair then
55388: LD_VAR 0 4
55392: PUSH
55393: LD_VAR 0 7
55397: ARRAY
55398: PUSH
55399: LD_VAR 0 32
55403: IN
55404: IFFALSE 55451
// begin if not IsInArea ( group [ i ] , f_repair ) then
55406: LD_VAR 0 4
55410: PUSH
55411: LD_VAR 0 7
55415: ARRAY
55416: PPUSH
55417: LD_VAR 0 22
55421: PPUSH
55422: CALL_OW 308
55426: NOT
55427: IFFALSE 55449
// ComMoveToArea ( group [ i ] , f_repair ) ;
55429: LD_VAR 0 4
55433: PUSH
55434: LD_VAR 0 7
55438: ARRAY
55439: PPUSH
55440: LD_VAR 0 22
55444: PPUSH
55445: CALL_OW 113
// continue ;
55449: GO 55076
// end ; end else
55451: GO 55731
// if group [ i ] in repairs then
55453: LD_VAR 0 4
55457: PUSH
55458: LD_VAR 0 7
55462: ARRAY
55463: PUSH
55464: LD_VAR 0 33
55468: IN
55469: IFFALSE 55731
// begin if IsInUnit ( group [ i ] ) then
55471: LD_VAR 0 4
55475: PUSH
55476: LD_VAR 0 7
55480: ARRAY
55481: PPUSH
55482: CALL_OW 310
55486: IFFALSE 55554
// begin z := IsInUnit ( group [ i ] ) ;
55488: LD_ADDR_VAR 0 13
55492: PUSH
55493: LD_VAR 0 4
55497: PUSH
55498: LD_VAR 0 7
55502: ARRAY
55503: PPUSH
55504: CALL_OW 310
55508: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55509: LD_VAR 0 13
55513: PUSH
55514: LD_VAR 0 32
55518: IN
55519: PUSH
55520: LD_VAR 0 13
55524: PPUSH
55525: LD_VAR 0 22
55529: PPUSH
55530: CALL_OW 308
55534: AND
55535: IFFALSE 55552
// ComExitVehicle ( group [ i ] ) ;
55537: LD_VAR 0 4
55541: PUSH
55542: LD_VAR 0 7
55546: ARRAY
55547: PPUSH
55548: CALL_OW 121
// end else
55552: GO 55731
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55554: LD_ADDR_VAR 0 13
55558: PUSH
55559: LD_VAR 0 4
55563: PPUSH
55564: LD_INT 95
55566: PUSH
55567: LD_VAR 0 22
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 58
55578: PUSH
55579: EMPTY
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PPUSH
55586: CALL_OW 72
55590: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55591: LD_VAR 0 4
55595: PUSH
55596: LD_VAR 0 7
55600: ARRAY
55601: PPUSH
55602: CALL_OW 314
55606: NOT
55607: IFFALSE 55729
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55609: LD_ADDR_VAR 0 10
55613: PUSH
55614: LD_VAR 0 13
55618: PPUSH
55619: LD_VAR 0 4
55623: PUSH
55624: LD_VAR 0 7
55628: ARRAY
55629: PPUSH
55630: CALL_OW 74
55634: ST_TO_ADDR
// if not x then
55635: LD_VAR 0 10
55639: NOT
55640: IFFALSE 55644
// continue ;
55642: GO 55076
// if GetLives ( x ) < 1000 then
55644: LD_VAR 0 10
55648: PPUSH
55649: CALL_OW 256
55653: PUSH
55654: LD_INT 1000
55656: LESS
55657: IFFALSE 55681
// ComRepairVehicle ( group [ i ] , x ) else
55659: LD_VAR 0 4
55663: PUSH
55664: LD_VAR 0 7
55668: ARRAY
55669: PPUSH
55670: LD_VAR 0 10
55674: PPUSH
55675: CALL_OW 129
55679: GO 55729
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55681: LD_VAR 0 23
55685: PUSH
55686: LD_VAR 0 4
55690: PUSH
55691: LD_VAR 0 7
55695: ARRAY
55696: PPUSH
55697: CALL_OW 256
55701: PUSH
55702: LD_INT 1000
55704: LESS
55705: AND
55706: NOT
55707: IFFALSE 55729
// ComEnterUnit ( group [ i ] , x ) ;
55709: LD_VAR 0 4
55713: PUSH
55714: LD_VAR 0 7
55718: ARRAY
55719: PPUSH
55720: LD_VAR 0 10
55724: PPUSH
55725: CALL_OW 120
// end ; continue ;
55729: GO 55076
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55731: LD_VAR 0 23
55735: PUSH
55736: LD_VAR 0 4
55740: PUSH
55741: LD_VAR 0 7
55745: ARRAY
55746: PPUSH
55747: CALL_OW 247
55751: PUSH
55752: LD_INT 1
55754: EQUAL
55755: AND
55756: IFFALSE 56234
// begin if group [ i ] in healers then
55758: LD_VAR 0 4
55762: PUSH
55763: LD_VAR 0 7
55767: ARRAY
55768: PUSH
55769: LD_VAR 0 31
55773: IN
55774: IFFALSE 56047
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55776: LD_VAR 0 4
55780: PUSH
55781: LD_VAR 0 7
55785: ARRAY
55786: PPUSH
55787: LD_VAR 0 23
55791: PPUSH
55792: CALL_OW 308
55796: NOT
55797: PUSH
55798: LD_VAR 0 4
55802: PUSH
55803: LD_VAR 0 7
55807: ARRAY
55808: PPUSH
55809: CALL_OW 314
55813: NOT
55814: AND
55815: IFFALSE 55839
// ComMoveToArea ( group [ i ] , f_heal ) else
55817: LD_VAR 0 4
55821: PUSH
55822: LD_VAR 0 7
55826: ARRAY
55827: PPUSH
55828: LD_VAR 0 23
55832: PPUSH
55833: CALL_OW 113
55837: GO 56045
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55839: LD_VAR 0 4
55843: PUSH
55844: LD_VAR 0 7
55848: ARRAY
55849: PPUSH
55850: CALL 54457 0 1
55854: PPUSH
55855: CALL_OW 256
55859: PUSH
55860: LD_INT 1000
55862: EQUAL
55863: IFFALSE 55882
// ComStop ( group [ i ] ) else
55865: LD_VAR 0 4
55869: PUSH
55870: LD_VAR 0 7
55874: ARRAY
55875: PPUSH
55876: CALL_OW 141
55880: GO 56045
// if not HasTask ( group [ i ] ) and to_heal then
55882: LD_VAR 0 4
55886: PUSH
55887: LD_VAR 0 7
55891: ARRAY
55892: PPUSH
55893: CALL_OW 314
55897: NOT
55898: PUSH
55899: LD_VAR 0 30
55903: AND
55904: IFFALSE 56045
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55906: LD_ADDR_VAR 0 13
55910: PUSH
55911: LD_VAR 0 30
55915: PPUSH
55916: LD_INT 3
55918: PUSH
55919: LD_INT 54
55921: PUSH
55922: EMPTY
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PPUSH
55929: CALL_OW 72
55933: PPUSH
55934: LD_VAR 0 4
55938: PUSH
55939: LD_VAR 0 7
55943: ARRAY
55944: PPUSH
55945: CALL_OW 74
55949: ST_TO_ADDR
// if z then
55950: LD_VAR 0 13
55954: IFFALSE 56045
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55956: LD_INT 91
55958: PUSH
55959: LD_VAR 0 13
55963: PUSH
55964: LD_INT 10
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 81
55974: PUSH
55975: LD_VAR 0 13
55979: PPUSH
55980: CALL_OW 255
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PPUSH
55993: CALL_OW 69
55997: PUSH
55998: LD_INT 0
56000: EQUAL
56001: IFFALSE 56025
// ComHeal ( group [ i ] , z ) else
56003: LD_VAR 0 4
56007: PUSH
56008: LD_VAR 0 7
56012: ARRAY
56013: PPUSH
56014: LD_VAR 0 13
56018: PPUSH
56019: CALL_OW 128
56023: GO 56045
// ComMoveToArea ( group [ i ] , f_heal ) ;
56025: LD_VAR 0 4
56029: PUSH
56030: LD_VAR 0 7
56034: ARRAY
56035: PPUSH
56036: LD_VAR 0 23
56040: PPUSH
56041: CALL_OW 113
// end ; continue ;
56045: GO 55076
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56047: LD_VAR 0 4
56051: PUSH
56052: LD_VAR 0 7
56056: ARRAY
56057: PPUSH
56058: CALL_OW 256
56062: PUSH
56063: LD_INT 700
56065: LESS
56066: PUSH
56067: LD_VAR 0 4
56071: PUSH
56072: LD_VAR 0 7
56076: ARRAY
56077: PUSH
56078: LD_VAR 0 30
56082: IN
56083: NOT
56084: AND
56085: IFFALSE 56109
// to_heal := to_heal union group [ i ] ;
56087: LD_ADDR_VAR 0 30
56091: PUSH
56092: LD_VAR 0 30
56096: PUSH
56097: LD_VAR 0 4
56101: PUSH
56102: LD_VAR 0 7
56106: ARRAY
56107: UNION
56108: ST_TO_ADDR
// if group [ i ] in to_heal then
56109: LD_VAR 0 4
56113: PUSH
56114: LD_VAR 0 7
56118: ARRAY
56119: PUSH
56120: LD_VAR 0 30
56124: IN
56125: IFFALSE 56234
// begin if GetLives ( group [ i ] ) = 1000 then
56127: LD_VAR 0 4
56131: PUSH
56132: LD_VAR 0 7
56136: ARRAY
56137: PPUSH
56138: CALL_OW 256
56142: PUSH
56143: LD_INT 1000
56145: EQUAL
56146: IFFALSE 56172
// to_heal := to_heal diff group [ i ] else
56148: LD_ADDR_VAR 0 30
56152: PUSH
56153: LD_VAR 0 30
56157: PUSH
56158: LD_VAR 0 4
56162: PUSH
56163: LD_VAR 0 7
56167: ARRAY
56168: DIFF
56169: ST_TO_ADDR
56170: GO 56234
// begin if not IsInArea ( group [ i ] , to_heal ) then
56172: LD_VAR 0 4
56176: PUSH
56177: LD_VAR 0 7
56181: ARRAY
56182: PPUSH
56183: LD_VAR 0 30
56187: PPUSH
56188: CALL_OW 308
56192: NOT
56193: IFFALSE 56217
// ComMoveToArea ( group [ i ] , f_heal ) else
56195: LD_VAR 0 4
56199: PUSH
56200: LD_VAR 0 7
56204: ARRAY
56205: PPUSH
56206: LD_VAR 0 23
56210: PPUSH
56211: CALL_OW 113
56215: GO 56232
// ComHold ( group [ i ] ) ;
56217: LD_VAR 0 4
56221: PUSH
56222: LD_VAR 0 7
56226: ARRAY
56227: PPUSH
56228: CALL_OW 140
// continue ;
56232: GO 55076
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56234: LD_VAR 0 4
56238: PUSH
56239: LD_VAR 0 7
56243: ARRAY
56244: PPUSH
56245: LD_INT 10
56247: PPUSH
56248: CALL 52854 0 2
56252: NOT
56253: PUSH
56254: LD_VAR 0 16
56258: PUSH
56259: LD_VAR 0 7
56263: ARRAY
56264: PUSH
56265: EMPTY
56266: EQUAL
56267: NOT
56268: AND
56269: IFFALSE 56535
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56271: LD_VAR 0 4
56275: PUSH
56276: LD_VAR 0 7
56280: ARRAY
56281: PPUSH
56282: CALL_OW 262
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: IN
56297: IFFALSE 56338
// if GetFuel ( group [ i ] ) < 10 then
56299: LD_VAR 0 4
56303: PUSH
56304: LD_VAR 0 7
56308: ARRAY
56309: PPUSH
56310: CALL_OW 261
56314: PUSH
56315: LD_INT 10
56317: LESS
56318: IFFALSE 56338
// SetFuel ( group [ i ] , 12 ) ;
56320: LD_VAR 0 4
56324: PUSH
56325: LD_VAR 0 7
56329: ARRAY
56330: PPUSH
56331: LD_INT 12
56333: PPUSH
56334: CALL_OW 240
// if units_path [ i ] then
56338: LD_VAR 0 16
56342: PUSH
56343: LD_VAR 0 7
56347: ARRAY
56348: IFFALSE 56533
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56350: LD_VAR 0 4
56354: PUSH
56355: LD_VAR 0 7
56359: ARRAY
56360: PPUSH
56361: LD_VAR 0 16
56365: PUSH
56366: LD_VAR 0 7
56370: ARRAY
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: PPUSH
56380: LD_VAR 0 16
56384: PUSH
56385: LD_VAR 0 7
56389: ARRAY
56390: PUSH
56391: LD_INT 1
56393: ARRAY
56394: PUSH
56395: LD_INT 2
56397: ARRAY
56398: PPUSH
56399: CALL_OW 297
56403: PUSH
56404: LD_INT 6
56406: GREATER
56407: IFFALSE 56482
// begin if not HasTask ( group [ i ] ) then
56409: LD_VAR 0 4
56413: PUSH
56414: LD_VAR 0 7
56418: ARRAY
56419: PPUSH
56420: CALL_OW 314
56424: NOT
56425: IFFALSE 56480
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56427: LD_VAR 0 4
56431: PUSH
56432: LD_VAR 0 7
56436: ARRAY
56437: PPUSH
56438: LD_VAR 0 16
56442: PUSH
56443: LD_VAR 0 7
56447: ARRAY
56448: PUSH
56449: LD_INT 1
56451: ARRAY
56452: PUSH
56453: LD_INT 1
56455: ARRAY
56456: PPUSH
56457: LD_VAR 0 16
56461: PUSH
56462: LD_VAR 0 7
56466: ARRAY
56467: PUSH
56468: LD_INT 1
56470: ARRAY
56471: PUSH
56472: LD_INT 2
56474: ARRAY
56475: PPUSH
56476: CALL_OW 114
// end else
56480: GO 56533
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56482: LD_ADDR_VAR 0 15
56486: PUSH
56487: LD_VAR 0 16
56491: PUSH
56492: LD_VAR 0 7
56496: ARRAY
56497: PPUSH
56498: LD_INT 1
56500: PPUSH
56501: CALL_OW 3
56505: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56506: LD_ADDR_VAR 0 16
56510: PUSH
56511: LD_VAR 0 16
56515: PPUSH
56516: LD_VAR 0 7
56520: PPUSH
56521: LD_VAR 0 15
56525: PPUSH
56526: CALL_OW 1
56530: ST_TO_ADDR
// continue ;
56531: GO 55076
// end ; end ; end else
56533: GO 59171
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56535: LD_ADDR_VAR 0 14
56539: PUSH
56540: LD_INT 81
56542: PUSH
56543: LD_VAR 0 4
56547: PUSH
56548: LD_VAR 0 7
56552: ARRAY
56553: PPUSH
56554: CALL_OW 255
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PPUSH
56563: CALL_OW 69
56567: ST_TO_ADDR
// if not tmp then
56568: LD_VAR 0 14
56572: NOT
56573: IFFALSE 56577
// continue ;
56575: GO 55076
// if f_ignore_area then
56577: LD_VAR 0 17
56581: IFFALSE 56669
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56583: LD_ADDR_VAR 0 15
56587: PUSH
56588: LD_VAR 0 14
56592: PPUSH
56593: LD_INT 3
56595: PUSH
56596: LD_INT 92
56598: PUSH
56599: LD_VAR 0 17
56603: PUSH
56604: LD_INT 1
56606: ARRAY
56607: PUSH
56608: LD_VAR 0 17
56612: PUSH
56613: LD_INT 2
56615: ARRAY
56616: PUSH
56617: LD_VAR 0 17
56621: PUSH
56622: LD_INT 3
56624: ARRAY
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PPUSH
56636: CALL_OW 72
56640: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56641: LD_VAR 0 14
56645: PUSH
56646: LD_VAR 0 15
56650: DIFF
56651: IFFALSE 56669
// tmp := tmp diff tmp2 ;
56653: LD_ADDR_VAR 0 14
56657: PUSH
56658: LD_VAR 0 14
56662: PUSH
56663: LD_VAR 0 15
56667: DIFF
56668: ST_TO_ADDR
// end ; if not f_murder then
56669: LD_VAR 0 20
56673: NOT
56674: IFFALSE 56732
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56676: LD_ADDR_VAR 0 15
56680: PUSH
56681: LD_VAR 0 14
56685: PPUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 50
56691: PUSH
56692: EMPTY
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PPUSH
56699: CALL_OW 72
56703: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56704: LD_VAR 0 14
56708: PUSH
56709: LD_VAR 0 15
56713: DIFF
56714: IFFALSE 56732
// tmp := tmp diff tmp2 ;
56716: LD_ADDR_VAR 0 14
56720: PUSH
56721: LD_VAR 0 14
56725: PUSH
56726: LD_VAR 0 15
56730: DIFF
56731: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56732: LD_ADDR_VAR 0 14
56736: PUSH
56737: LD_VAR 0 4
56741: PUSH
56742: LD_VAR 0 7
56746: ARRAY
56747: PPUSH
56748: LD_VAR 0 14
56752: PPUSH
56753: LD_INT 1
56755: PPUSH
56756: LD_INT 1
56758: PPUSH
56759: CALL 26503 0 4
56763: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56764: LD_VAR 0 4
56768: PUSH
56769: LD_VAR 0 7
56773: ARRAY
56774: PPUSH
56775: CALL_OW 257
56779: PUSH
56780: LD_INT 1
56782: EQUAL
56783: IFFALSE 57231
// begin if WantPlant ( group [ i ] ) then
56785: LD_VAR 0 4
56789: PUSH
56790: LD_VAR 0 7
56794: ARRAY
56795: PPUSH
56796: CALL 26004 0 1
56800: IFFALSE 56804
// continue ;
56802: GO 55076
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56804: LD_VAR 0 18
56808: PUSH
56809: LD_VAR 0 4
56813: PUSH
56814: LD_VAR 0 7
56818: ARRAY
56819: PPUSH
56820: CALL_OW 310
56824: NOT
56825: AND
56826: PUSH
56827: LD_VAR 0 14
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: PUSH
56836: LD_VAR 0 14
56840: PPUSH
56841: LD_INT 21
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 58
56853: PUSH
56854: EMPTY
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PPUSH
56861: CALL_OW 72
56865: IN
56866: AND
56867: IFFALSE 56903
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56869: LD_VAR 0 4
56873: PUSH
56874: LD_VAR 0 7
56878: ARRAY
56879: PPUSH
56880: LD_VAR 0 14
56884: PUSH
56885: LD_INT 1
56887: ARRAY
56888: PPUSH
56889: CALL_OW 120
// attacking := true ;
56893: LD_ADDR_VAR 0 29
56897: PUSH
56898: LD_INT 1
56900: ST_TO_ADDR
// continue ;
56901: GO 55076
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56903: LD_VAR 0 26
56907: PUSH
56908: LD_VAR 0 4
56912: PUSH
56913: LD_VAR 0 7
56917: ARRAY
56918: PPUSH
56919: CALL_OW 257
56923: PUSH
56924: LD_INT 1
56926: EQUAL
56927: AND
56928: PUSH
56929: LD_VAR 0 4
56933: PUSH
56934: LD_VAR 0 7
56938: ARRAY
56939: PPUSH
56940: CALL_OW 256
56944: PUSH
56945: LD_INT 800
56947: LESS
56948: AND
56949: PUSH
56950: LD_VAR 0 4
56954: PUSH
56955: LD_VAR 0 7
56959: ARRAY
56960: PPUSH
56961: CALL_OW 318
56965: NOT
56966: AND
56967: IFFALSE 56984
// ComCrawl ( group [ i ] ) ;
56969: LD_VAR 0 4
56973: PUSH
56974: LD_VAR 0 7
56978: ARRAY
56979: PPUSH
56980: CALL_OW 137
// if f_mines then
56984: LD_VAR 0 21
56988: IFFALSE 57231
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56990: LD_VAR 0 14
56994: PUSH
56995: LD_INT 1
56997: ARRAY
56998: PPUSH
56999: CALL_OW 247
57003: PUSH
57004: LD_INT 3
57006: EQUAL
57007: PUSH
57008: LD_VAR 0 14
57012: PUSH
57013: LD_INT 1
57015: ARRAY
57016: PUSH
57017: LD_VAR 0 27
57021: IN
57022: NOT
57023: AND
57024: IFFALSE 57231
// begin x := GetX ( tmp [ 1 ] ) ;
57026: LD_ADDR_VAR 0 10
57030: PUSH
57031: LD_VAR 0 14
57035: PUSH
57036: LD_INT 1
57038: ARRAY
57039: PPUSH
57040: CALL_OW 250
57044: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57045: LD_ADDR_VAR 0 11
57049: PUSH
57050: LD_VAR 0 14
57054: PUSH
57055: LD_INT 1
57057: ARRAY
57058: PPUSH
57059: CALL_OW 251
57063: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57064: LD_ADDR_VAR 0 12
57068: PUSH
57069: LD_VAR 0 4
57073: PUSH
57074: LD_VAR 0 7
57078: ARRAY
57079: PPUSH
57080: CALL 52939 0 1
57084: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57085: LD_VAR 0 4
57089: PUSH
57090: LD_VAR 0 7
57094: ARRAY
57095: PPUSH
57096: LD_VAR 0 10
57100: PPUSH
57101: LD_VAR 0 11
57105: PPUSH
57106: LD_VAR 0 14
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PPUSH
57115: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57119: LD_VAR 0 4
57123: PUSH
57124: LD_VAR 0 7
57128: ARRAY
57129: PPUSH
57130: LD_VAR 0 10
57134: PPUSH
57135: LD_VAR 0 12
57139: PPUSH
57140: LD_INT 7
57142: PPUSH
57143: CALL_OW 272
57147: PPUSH
57148: LD_VAR 0 11
57152: PPUSH
57153: LD_VAR 0 12
57157: PPUSH
57158: LD_INT 7
57160: PPUSH
57161: CALL_OW 273
57165: PPUSH
57166: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57170: LD_VAR 0 4
57174: PUSH
57175: LD_VAR 0 7
57179: ARRAY
57180: PPUSH
57181: LD_INT 71
57183: PPUSH
57184: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57188: LD_ADDR_VAR 0 27
57192: PUSH
57193: LD_VAR 0 27
57197: PPUSH
57198: LD_VAR 0 27
57202: PUSH
57203: LD_INT 1
57205: PLUS
57206: PPUSH
57207: LD_VAR 0 14
57211: PUSH
57212: LD_INT 1
57214: ARRAY
57215: PPUSH
57216: CALL_OW 1
57220: ST_TO_ADDR
// attacking := true ;
57221: LD_ADDR_VAR 0 29
57225: PUSH
57226: LD_INT 1
57228: ST_TO_ADDR
// continue ;
57229: GO 55076
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57231: LD_VAR 0 4
57235: PUSH
57236: LD_VAR 0 7
57240: ARRAY
57241: PPUSH
57242: CALL_OW 257
57246: PUSH
57247: LD_INT 17
57249: EQUAL
57250: PUSH
57251: LD_VAR 0 4
57255: PUSH
57256: LD_VAR 0 7
57260: ARRAY
57261: PPUSH
57262: CALL_OW 110
57266: PUSH
57267: LD_INT 71
57269: EQUAL
57270: NOT
57271: AND
57272: IFFALSE 57418
// begin attacking := false ;
57274: LD_ADDR_VAR 0 29
57278: PUSH
57279: LD_INT 0
57281: ST_TO_ADDR
// k := 5 ;
57282: LD_ADDR_VAR 0 9
57286: PUSH
57287: LD_INT 5
57289: ST_TO_ADDR
// if tmp < k then
57290: LD_VAR 0 14
57294: PUSH
57295: LD_VAR 0 9
57299: LESS
57300: IFFALSE 57312
// k := tmp ;
57302: LD_ADDR_VAR 0 9
57306: PUSH
57307: LD_VAR 0 14
57311: ST_TO_ADDR
// for j = 1 to k do
57312: LD_ADDR_VAR 0 8
57316: PUSH
57317: DOUBLE
57318: LD_INT 1
57320: DEC
57321: ST_TO_ADDR
57322: LD_VAR 0 9
57326: PUSH
57327: FOR_TO
57328: IFFALSE 57416
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57330: LD_VAR 0 14
57334: PUSH
57335: LD_VAR 0 8
57339: ARRAY
57340: PUSH
57341: LD_VAR 0 14
57345: PPUSH
57346: LD_INT 58
57348: PUSH
57349: EMPTY
57350: LIST
57351: PPUSH
57352: CALL_OW 72
57356: IN
57357: NOT
57358: IFFALSE 57414
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57360: LD_VAR 0 4
57364: PUSH
57365: LD_VAR 0 7
57369: ARRAY
57370: PPUSH
57371: LD_VAR 0 14
57375: PUSH
57376: LD_VAR 0 8
57380: ARRAY
57381: PPUSH
57382: CALL_OW 115
// attacking := true ;
57386: LD_ADDR_VAR 0 29
57390: PUSH
57391: LD_INT 1
57393: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57394: LD_VAR 0 4
57398: PUSH
57399: LD_VAR 0 7
57403: ARRAY
57404: PPUSH
57405: LD_INT 71
57407: PPUSH
57408: CALL_OW 109
// continue ;
57412: GO 57327
// end ; end ;
57414: GO 57327
57416: POP
57417: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57418: LD_VAR 0 4
57422: PUSH
57423: LD_VAR 0 7
57427: ARRAY
57428: PPUSH
57429: CALL_OW 257
57433: PUSH
57434: LD_INT 8
57436: EQUAL
57437: PUSH
57438: LD_VAR 0 4
57442: PUSH
57443: LD_VAR 0 7
57447: ARRAY
57448: PPUSH
57449: CALL_OW 264
57453: PUSH
57454: LD_INT 28
57456: PUSH
57457: LD_INT 45
57459: PUSH
57460: LD_INT 7
57462: PUSH
57463: LD_INT 47
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: IN
57472: OR
57473: IFFALSE 57703
// begin attacking := false ;
57475: LD_ADDR_VAR 0 29
57479: PUSH
57480: LD_INT 0
57482: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57483: LD_VAR 0 14
57487: PUSH
57488: LD_INT 1
57490: ARRAY
57491: PPUSH
57492: CALL_OW 266
57496: PUSH
57497: LD_INT 32
57499: PUSH
57500: LD_INT 31
57502: PUSH
57503: LD_INT 33
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: LD_INT 5
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: IN
57519: IFFALSE 57703
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57521: LD_ADDR_VAR 0 9
57525: PUSH
57526: LD_VAR 0 14
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: PPUSH
57535: CALL_OW 266
57539: PPUSH
57540: LD_VAR 0 14
57544: PUSH
57545: LD_INT 1
57547: ARRAY
57548: PPUSH
57549: CALL_OW 250
57553: PPUSH
57554: LD_VAR 0 14
57558: PUSH
57559: LD_INT 1
57561: ARRAY
57562: PPUSH
57563: CALL_OW 251
57567: PPUSH
57568: LD_VAR 0 14
57572: PUSH
57573: LD_INT 1
57575: ARRAY
57576: PPUSH
57577: CALL_OW 254
57581: PPUSH
57582: LD_VAR 0 14
57586: PUSH
57587: LD_INT 1
57589: ARRAY
57590: PPUSH
57591: CALL_OW 248
57595: PPUSH
57596: LD_INT 0
57598: PPUSH
57599: CALL 34315 0 6
57603: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57604: LD_ADDR_VAR 0 8
57608: PUSH
57609: LD_VAR 0 4
57613: PUSH
57614: LD_VAR 0 7
57618: ARRAY
57619: PPUSH
57620: LD_VAR 0 9
57624: PPUSH
57625: CALL 53002 0 2
57629: ST_TO_ADDR
// if j then
57630: LD_VAR 0 8
57634: IFFALSE 57703
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57636: LD_VAR 0 8
57640: PUSH
57641: LD_INT 1
57643: ARRAY
57644: PPUSH
57645: LD_VAR 0 8
57649: PUSH
57650: LD_INT 2
57652: ARRAY
57653: PPUSH
57654: CALL_OW 488
57658: IFFALSE 57703
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57660: LD_VAR 0 4
57664: PUSH
57665: LD_VAR 0 7
57669: ARRAY
57670: PPUSH
57671: LD_VAR 0 8
57675: PUSH
57676: LD_INT 1
57678: ARRAY
57679: PPUSH
57680: LD_VAR 0 8
57684: PUSH
57685: LD_INT 2
57687: ARRAY
57688: PPUSH
57689: CALL_OW 116
// attacking := true ;
57693: LD_ADDR_VAR 0 29
57697: PUSH
57698: LD_INT 1
57700: ST_TO_ADDR
// continue ;
57701: GO 55076
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57703: LD_VAR 0 4
57707: PUSH
57708: LD_VAR 0 7
57712: ARRAY
57713: PPUSH
57714: CALL_OW 265
57718: PUSH
57719: LD_INT 11
57721: EQUAL
57722: IFFALSE 58000
// begin k := 10 ;
57724: LD_ADDR_VAR 0 9
57728: PUSH
57729: LD_INT 10
57731: ST_TO_ADDR
// x := 0 ;
57732: LD_ADDR_VAR 0 10
57736: PUSH
57737: LD_INT 0
57739: ST_TO_ADDR
// if tmp < k then
57740: LD_VAR 0 14
57744: PUSH
57745: LD_VAR 0 9
57749: LESS
57750: IFFALSE 57762
// k := tmp ;
57752: LD_ADDR_VAR 0 9
57756: PUSH
57757: LD_VAR 0 14
57761: ST_TO_ADDR
// for j = k downto 1 do
57762: LD_ADDR_VAR 0 8
57766: PUSH
57767: DOUBLE
57768: LD_VAR 0 9
57772: INC
57773: ST_TO_ADDR
57774: LD_INT 1
57776: PUSH
57777: FOR_DOWNTO
57778: IFFALSE 57853
// begin if GetType ( tmp [ j ] ) = unit_human then
57780: LD_VAR 0 14
57784: PUSH
57785: LD_VAR 0 8
57789: ARRAY
57790: PPUSH
57791: CALL_OW 247
57795: PUSH
57796: LD_INT 1
57798: EQUAL
57799: IFFALSE 57851
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57801: LD_VAR 0 4
57805: PUSH
57806: LD_VAR 0 7
57810: ARRAY
57811: PPUSH
57812: LD_VAR 0 14
57816: PUSH
57817: LD_VAR 0 8
57821: ARRAY
57822: PPUSH
57823: CALL 53273 0 2
// x := tmp [ j ] ;
57827: LD_ADDR_VAR 0 10
57831: PUSH
57832: LD_VAR 0 14
57836: PUSH
57837: LD_VAR 0 8
57841: ARRAY
57842: ST_TO_ADDR
// attacking := true ;
57843: LD_ADDR_VAR 0 29
57847: PUSH
57848: LD_INT 1
57850: ST_TO_ADDR
// end ; end ;
57851: GO 57777
57853: POP
57854: POP
// if not x then
57855: LD_VAR 0 10
57859: NOT
57860: IFFALSE 58000
// begin attacking := true ;
57862: LD_ADDR_VAR 0 29
57866: PUSH
57867: LD_INT 1
57869: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57870: LD_VAR 0 4
57874: PUSH
57875: LD_VAR 0 7
57879: ARRAY
57880: PPUSH
57881: CALL_OW 250
57885: PPUSH
57886: LD_VAR 0 4
57890: PUSH
57891: LD_VAR 0 7
57895: ARRAY
57896: PPUSH
57897: CALL_OW 251
57901: PPUSH
57902: CALL_OW 546
57906: PUSH
57907: LD_INT 2
57909: ARRAY
57910: PUSH
57911: LD_VAR 0 14
57915: PUSH
57916: LD_INT 1
57918: ARRAY
57919: PPUSH
57920: CALL_OW 250
57924: PPUSH
57925: LD_VAR 0 14
57929: PUSH
57930: LD_INT 1
57932: ARRAY
57933: PPUSH
57934: CALL_OW 251
57938: PPUSH
57939: CALL_OW 546
57943: PUSH
57944: LD_INT 2
57946: ARRAY
57947: EQUAL
57948: IFFALSE 57976
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57950: LD_VAR 0 4
57954: PUSH
57955: LD_VAR 0 7
57959: ARRAY
57960: PPUSH
57961: LD_VAR 0 14
57965: PUSH
57966: LD_INT 1
57968: ARRAY
57969: PPUSH
57970: CALL 53273 0 2
57974: GO 58000
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57976: LD_VAR 0 4
57980: PUSH
57981: LD_VAR 0 7
57985: ARRAY
57986: PPUSH
57987: LD_VAR 0 14
57991: PUSH
57992: LD_INT 1
57994: ARRAY
57995: PPUSH
57996: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58000: LD_VAR 0 4
58004: PUSH
58005: LD_VAR 0 7
58009: ARRAY
58010: PPUSH
58011: CALL_OW 264
58015: PUSH
58016: LD_INT 29
58018: EQUAL
58019: IFFALSE 58385
// begin if WantsToAttack ( group [ i ] ) in bombed then
58021: LD_VAR 0 4
58025: PUSH
58026: LD_VAR 0 7
58030: ARRAY
58031: PPUSH
58032: CALL_OW 319
58036: PUSH
58037: LD_VAR 0 28
58041: IN
58042: IFFALSE 58046
// continue ;
58044: GO 55076
// k := 8 ;
58046: LD_ADDR_VAR 0 9
58050: PUSH
58051: LD_INT 8
58053: ST_TO_ADDR
// x := 0 ;
58054: LD_ADDR_VAR 0 10
58058: PUSH
58059: LD_INT 0
58061: ST_TO_ADDR
// if tmp < k then
58062: LD_VAR 0 14
58066: PUSH
58067: LD_VAR 0 9
58071: LESS
58072: IFFALSE 58084
// k := tmp ;
58074: LD_ADDR_VAR 0 9
58078: PUSH
58079: LD_VAR 0 14
58083: ST_TO_ADDR
// for j = 1 to k do
58084: LD_ADDR_VAR 0 8
58088: PUSH
58089: DOUBLE
58090: LD_INT 1
58092: DEC
58093: ST_TO_ADDR
58094: LD_VAR 0 9
58098: PUSH
58099: FOR_TO
58100: IFFALSE 58232
// begin if GetType ( tmp [ j ] ) = unit_building then
58102: LD_VAR 0 14
58106: PUSH
58107: LD_VAR 0 8
58111: ARRAY
58112: PPUSH
58113: CALL_OW 247
58117: PUSH
58118: LD_INT 3
58120: EQUAL
58121: IFFALSE 58230
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58123: LD_VAR 0 14
58127: PUSH
58128: LD_VAR 0 8
58132: ARRAY
58133: PUSH
58134: LD_VAR 0 28
58138: IN
58139: NOT
58140: PUSH
58141: LD_VAR 0 14
58145: PUSH
58146: LD_VAR 0 8
58150: ARRAY
58151: PPUSH
58152: CALL_OW 313
58156: AND
58157: IFFALSE 58230
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58159: LD_VAR 0 4
58163: PUSH
58164: LD_VAR 0 7
58168: ARRAY
58169: PPUSH
58170: LD_VAR 0 14
58174: PUSH
58175: LD_VAR 0 8
58179: ARRAY
58180: PPUSH
58181: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58185: LD_ADDR_VAR 0 28
58189: PUSH
58190: LD_VAR 0 28
58194: PPUSH
58195: LD_VAR 0 28
58199: PUSH
58200: LD_INT 1
58202: PLUS
58203: PPUSH
58204: LD_VAR 0 14
58208: PUSH
58209: LD_VAR 0 8
58213: ARRAY
58214: PPUSH
58215: CALL_OW 1
58219: ST_TO_ADDR
// attacking := true ;
58220: LD_ADDR_VAR 0 29
58224: PUSH
58225: LD_INT 1
58227: ST_TO_ADDR
// break ;
58228: GO 58232
// end ; end ;
58230: GO 58099
58232: POP
58233: POP
// if not attacking and f_attack_depot then
58234: LD_VAR 0 29
58238: NOT
58239: PUSH
58240: LD_VAR 0 25
58244: AND
58245: IFFALSE 58340
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58247: LD_ADDR_VAR 0 13
58251: PUSH
58252: LD_VAR 0 14
58256: PPUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 30
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 30
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: PPUSH
58285: CALL_OW 72
58289: ST_TO_ADDR
// if z then
58290: LD_VAR 0 13
58294: IFFALSE 58340
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58296: LD_VAR 0 4
58300: PUSH
58301: LD_VAR 0 7
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 13
58311: PPUSH
58312: LD_VAR 0 4
58316: PUSH
58317: LD_VAR 0 7
58321: ARRAY
58322: PPUSH
58323: CALL_OW 74
58327: PPUSH
58328: CALL_OW 115
// attacking := true ;
58332: LD_ADDR_VAR 0 29
58336: PUSH
58337: LD_INT 1
58339: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58340: LD_VAR 0 4
58344: PUSH
58345: LD_VAR 0 7
58349: ARRAY
58350: PPUSH
58351: CALL_OW 256
58355: PUSH
58356: LD_INT 500
58358: LESS
58359: IFFALSE 58385
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58361: LD_VAR 0 4
58365: PUSH
58366: LD_VAR 0 7
58370: ARRAY
58371: PPUSH
58372: LD_VAR 0 14
58376: PUSH
58377: LD_INT 1
58379: ARRAY
58380: PPUSH
58381: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58385: LD_VAR 0 4
58389: PUSH
58390: LD_VAR 0 7
58394: ARRAY
58395: PPUSH
58396: CALL_OW 264
58400: PUSH
58401: LD_INT 49
58403: EQUAL
58404: IFFALSE 58525
// begin if not HasTask ( group [ i ] ) then
58406: LD_VAR 0 4
58410: PUSH
58411: LD_VAR 0 7
58415: ARRAY
58416: PPUSH
58417: CALL_OW 314
58421: NOT
58422: IFFALSE 58525
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58424: LD_ADDR_VAR 0 9
58428: PUSH
58429: LD_INT 81
58431: PUSH
58432: LD_VAR 0 4
58436: PUSH
58437: LD_VAR 0 7
58441: ARRAY
58442: PPUSH
58443: CALL_OW 255
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PPUSH
58452: CALL_OW 69
58456: PPUSH
58457: LD_VAR 0 4
58461: PUSH
58462: LD_VAR 0 7
58466: ARRAY
58467: PPUSH
58468: CALL_OW 74
58472: ST_TO_ADDR
// if k then
58473: LD_VAR 0 9
58477: IFFALSE 58525
// if GetDistUnits ( group [ i ] , k ) > 10 then
58479: LD_VAR 0 4
58483: PUSH
58484: LD_VAR 0 7
58488: ARRAY
58489: PPUSH
58490: LD_VAR 0 9
58494: PPUSH
58495: CALL_OW 296
58499: PUSH
58500: LD_INT 10
58502: GREATER
58503: IFFALSE 58525
// ComMoveUnit ( group [ i ] , k ) ;
58505: LD_VAR 0 4
58509: PUSH
58510: LD_VAR 0 7
58514: ARRAY
58515: PPUSH
58516: LD_VAR 0 9
58520: PPUSH
58521: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58525: LD_VAR 0 4
58529: PUSH
58530: LD_VAR 0 7
58534: ARRAY
58535: PPUSH
58536: CALL_OW 256
58540: PUSH
58541: LD_INT 250
58543: LESS
58544: PUSH
58545: LD_VAR 0 4
58549: PUSH
58550: LD_VAR 0 7
58554: ARRAY
58555: PUSH
58556: LD_INT 21
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 23
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PPUSH
58580: CALL_OW 69
58584: IN
58585: AND
58586: IFFALSE 58711
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58588: LD_ADDR_VAR 0 9
58592: PUSH
58593: LD_OWVAR 3
58597: PUSH
58598: LD_VAR 0 4
58602: PUSH
58603: LD_VAR 0 7
58607: ARRAY
58608: DIFF
58609: PPUSH
58610: LD_VAR 0 4
58614: PUSH
58615: LD_VAR 0 7
58619: ARRAY
58620: PPUSH
58621: CALL_OW 74
58625: ST_TO_ADDR
// if not k then
58626: LD_VAR 0 9
58630: NOT
58631: IFFALSE 58635
// continue ;
58633: GO 55076
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58635: LD_VAR 0 9
58639: PUSH
58640: LD_INT 81
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_VAR 0 7
58652: ARRAY
58653: PPUSH
58654: CALL_OW 255
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PPUSH
58663: CALL_OW 69
58667: IN
58668: PUSH
58669: LD_VAR 0 9
58673: PPUSH
58674: LD_VAR 0 4
58678: PUSH
58679: LD_VAR 0 7
58683: ARRAY
58684: PPUSH
58685: CALL_OW 296
58689: PUSH
58690: LD_INT 5
58692: LESS
58693: AND
58694: IFFALSE 58711
// ComAutodestruct ( group [ i ] ) ;
58696: LD_VAR 0 4
58700: PUSH
58701: LD_VAR 0 7
58705: ARRAY
58706: PPUSH
58707: CALL 53171 0 1
// end ; if f_attack_depot then
58711: LD_VAR 0 25
58715: IFFALSE 58827
// begin k := 6 ;
58717: LD_ADDR_VAR 0 9
58721: PUSH
58722: LD_INT 6
58724: ST_TO_ADDR
// if tmp < k then
58725: LD_VAR 0 14
58729: PUSH
58730: LD_VAR 0 9
58734: LESS
58735: IFFALSE 58747
// k := tmp ;
58737: LD_ADDR_VAR 0 9
58741: PUSH
58742: LD_VAR 0 14
58746: ST_TO_ADDR
// for j = 1 to k do
58747: LD_ADDR_VAR 0 8
58751: PUSH
58752: DOUBLE
58753: LD_INT 1
58755: DEC
58756: ST_TO_ADDR
58757: LD_VAR 0 9
58761: PUSH
58762: FOR_TO
58763: IFFALSE 58825
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58765: LD_VAR 0 8
58769: PPUSH
58770: CALL_OW 266
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: IN
58785: IFFALSE 58823
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58787: LD_VAR 0 4
58791: PUSH
58792: LD_VAR 0 7
58796: ARRAY
58797: PPUSH
58798: LD_VAR 0 14
58802: PUSH
58803: LD_VAR 0 8
58807: ARRAY
58808: PPUSH
58809: CALL_OW 115
// attacking := true ;
58813: LD_ADDR_VAR 0 29
58817: PUSH
58818: LD_INT 1
58820: ST_TO_ADDR
// break ;
58821: GO 58825
// end ;
58823: GO 58762
58825: POP
58826: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58827: LD_VAR 0 4
58831: PUSH
58832: LD_VAR 0 7
58836: ARRAY
58837: PPUSH
58838: CALL_OW 302
58842: PUSH
58843: LD_VAR 0 29
58847: NOT
58848: AND
58849: IFFALSE 59171
// begin if GetTag ( group [ i ] ) = 71 then
58851: LD_VAR 0 4
58855: PUSH
58856: LD_VAR 0 7
58860: ARRAY
58861: PPUSH
58862: CALL_OW 110
58866: PUSH
58867: LD_INT 71
58869: EQUAL
58870: IFFALSE 58911
// begin if HasTask ( group [ i ] ) then
58872: LD_VAR 0 4
58876: PUSH
58877: LD_VAR 0 7
58881: ARRAY
58882: PPUSH
58883: CALL_OW 314
58887: IFFALSE 58893
// continue else
58889: GO 55076
58891: GO 58911
// SetTag ( group [ i ] , 0 ) ;
58893: LD_VAR 0 4
58897: PUSH
58898: LD_VAR 0 7
58902: ARRAY
58903: PPUSH
58904: LD_INT 0
58906: PPUSH
58907: CALL_OW 109
// end ; k := 8 ;
58911: LD_ADDR_VAR 0 9
58915: PUSH
58916: LD_INT 8
58918: ST_TO_ADDR
// x := 0 ;
58919: LD_ADDR_VAR 0 10
58923: PUSH
58924: LD_INT 0
58926: ST_TO_ADDR
// if tmp < k then
58927: LD_VAR 0 14
58931: PUSH
58932: LD_VAR 0 9
58936: LESS
58937: IFFALSE 58949
// k := tmp ;
58939: LD_ADDR_VAR 0 9
58943: PUSH
58944: LD_VAR 0 14
58948: ST_TO_ADDR
// for j = 1 to k do
58949: LD_ADDR_VAR 0 8
58953: PUSH
58954: DOUBLE
58955: LD_INT 1
58957: DEC
58958: ST_TO_ADDR
58959: LD_VAR 0 9
58963: PUSH
58964: FOR_TO
58965: IFFALSE 59063
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58967: LD_VAR 0 14
58971: PUSH
58972: LD_VAR 0 8
58976: ARRAY
58977: PPUSH
58978: CALL_OW 247
58982: PUSH
58983: LD_INT 1
58985: EQUAL
58986: PUSH
58987: LD_VAR 0 14
58991: PUSH
58992: LD_VAR 0 8
58996: ARRAY
58997: PPUSH
58998: CALL_OW 256
59002: PUSH
59003: LD_INT 250
59005: LESS
59006: PUSH
59007: LD_VAR 0 20
59011: AND
59012: PUSH
59013: LD_VAR 0 20
59017: NOT
59018: PUSH
59019: LD_VAR 0 14
59023: PUSH
59024: LD_VAR 0 8
59028: ARRAY
59029: PPUSH
59030: CALL_OW 256
59034: PUSH
59035: LD_INT 250
59037: GREATEREQUAL
59038: AND
59039: OR
59040: AND
59041: IFFALSE 59061
// begin x := tmp [ j ] ;
59043: LD_ADDR_VAR 0 10
59047: PUSH
59048: LD_VAR 0 14
59052: PUSH
59053: LD_VAR 0 8
59057: ARRAY
59058: ST_TO_ADDR
// break ;
59059: GO 59063
// end ;
59061: GO 58964
59063: POP
59064: POP
// if x then
59065: LD_VAR 0 10
59069: IFFALSE 59093
// ComAttackUnit ( group [ i ] , x ) else
59071: LD_VAR 0 4
59075: PUSH
59076: LD_VAR 0 7
59080: ARRAY
59081: PPUSH
59082: LD_VAR 0 10
59086: PPUSH
59087: CALL_OW 115
59091: GO 59117
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59093: LD_VAR 0 4
59097: PUSH
59098: LD_VAR 0 7
59102: ARRAY
59103: PPUSH
59104: LD_VAR 0 14
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PPUSH
59113: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59117: LD_VAR 0 4
59121: PUSH
59122: LD_VAR 0 7
59126: ARRAY
59127: PPUSH
59128: CALL_OW 314
59132: NOT
59133: IFFALSE 59171
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59135: LD_VAR 0 4
59139: PUSH
59140: LD_VAR 0 7
59144: ARRAY
59145: PPUSH
59146: LD_VAR 0 14
59150: PPUSH
59151: LD_VAR 0 4
59155: PUSH
59156: LD_VAR 0 7
59160: ARRAY
59161: PPUSH
59162: CALL_OW 74
59166: PPUSH
59167: CALL_OW 115
// end ; end ; end ;
59171: GO 55076
59173: POP
59174: POP
// wait ( 0 0$1 ) ;
59175: LD_INT 35
59177: PPUSH
59178: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59182: LD_VAR 0 4
59186: PUSH
59187: EMPTY
59188: EQUAL
59189: PUSH
59190: LD_INT 81
59192: PUSH
59193: LD_VAR 0 35
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PPUSH
59202: CALL_OW 69
59206: NOT
59207: OR
59208: IFFALSE 55061
// end ;
59210: LD_VAR 0 2
59214: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59215: LD_INT 0
59217: PPUSH
59218: PPUSH
59219: PPUSH
59220: PPUSH
// if not base_units then
59221: LD_VAR 0 1
59225: NOT
59226: IFFALSE 59230
// exit ;
59228: GO 59317
// result := false ;
59230: LD_ADDR_VAR 0 2
59234: PUSH
59235: LD_INT 0
59237: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59238: LD_ADDR_VAR 0 5
59242: PUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: LD_INT 21
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PPUSH
59258: CALL_OW 72
59262: ST_TO_ADDR
// if not tmp then
59263: LD_VAR 0 5
59267: NOT
59268: IFFALSE 59272
// exit ;
59270: GO 59317
// for i in tmp do
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: LD_VAR 0 5
59281: PUSH
59282: FOR_IN
59283: IFFALSE 59315
// begin result := EnemyInRange ( i , 22 ) ;
59285: LD_ADDR_VAR 0 2
59289: PUSH
59290: LD_VAR 0 3
59294: PPUSH
59295: LD_INT 22
59297: PPUSH
59298: CALL 52854 0 2
59302: ST_TO_ADDR
// if result then
59303: LD_VAR 0 2
59307: IFFALSE 59313
// exit ;
59309: POP
59310: POP
59311: GO 59317
// end ;
59313: GO 59282
59315: POP
59316: POP
// end ;
59317: LD_VAR 0 2
59321: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59322: LD_INT 0
59324: PPUSH
59325: PPUSH
// if not units then
59326: LD_VAR 0 1
59330: NOT
59331: IFFALSE 59335
// exit ;
59333: GO 59405
// result := [ ] ;
59335: LD_ADDR_VAR 0 3
59339: PUSH
59340: EMPTY
59341: ST_TO_ADDR
// for i in units do
59342: LD_ADDR_VAR 0 4
59346: PUSH
59347: LD_VAR 0 1
59351: PUSH
59352: FOR_IN
59353: IFFALSE 59403
// if GetTag ( i ) = tag then
59355: LD_VAR 0 4
59359: PPUSH
59360: CALL_OW 110
59364: PUSH
59365: LD_VAR 0 2
59369: EQUAL
59370: IFFALSE 59401
// result := Insert ( result , result + 1 , i ) ;
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: LD_VAR 0 3
59381: PPUSH
59382: LD_VAR 0 3
59386: PUSH
59387: LD_INT 1
59389: PLUS
59390: PPUSH
59391: LD_VAR 0 4
59395: PPUSH
59396: CALL_OW 2
59400: ST_TO_ADDR
59401: GO 59352
59403: POP
59404: POP
// end ;
59405: LD_VAR 0 3
59409: RET
// export function IsDriver ( un ) ; begin
59410: LD_INT 0
59412: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59413: LD_ADDR_VAR 0 2
59417: PUSH
59418: LD_VAR 0 1
59422: PUSH
59423: LD_INT 55
59425: PUSH
59426: EMPTY
59427: LIST
59428: PPUSH
59429: CALL_OW 69
59433: IN
59434: ST_TO_ADDR
// end ;
59435: LD_VAR 0 2
59439: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59440: LD_INT 0
59442: PPUSH
59443: PPUSH
// list := [ ] ;
59444: LD_ADDR_VAR 0 5
59448: PUSH
59449: EMPTY
59450: ST_TO_ADDR
// case d of 0 :
59451: LD_VAR 0 3
59455: PUSH
59456: LD_INT 0
59458: DOUBLE
59459: EQUAL
59460: IFTRUE 59464
59462: GO 59597
59464: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59465: LD_ADDR_VAR 0 5
59469: PUSH
59470: LD_VAR 0 1
59474: PUSH
59475: LD_INT 4
59477: MINUS
59478: PUSH
59479: LD_VAR 0 2
59483: PUSH
59484: LD_INT 4
59486: MINUS
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: PUSH
59496: LD_VAR 0 1
59500: PUSH
59501: LD_INT 3
59503: MINUS
59504: PUSH
59505: LD_VAR 0 2
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_INT 4
59525: PLUS
59526: PUSH
59527: LD_VAR 0 2
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: PUSH
59540: LD_VAR 0 1
59544: PUSH
59545: LD_INT 3
59547: PLUS
59548: PUSH
59549: LD_VAR 0 2
59553: PUSH
59554: LD_INT 3
59556: PLUS
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: PUSH
59566: LD_VAR 0 1
59570: PUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_INT 4
59578: PLUS
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// end ; 1 :
59595: GO 60295
59597: LD_INT 1
59599: DOUBLE
59600: EQUAL
59601: IFTRUE 59605
59603: GO 59738
59605: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_VAR 0 2
59620: PUSH
59621: LD_INT 4
59623: MINUS
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 1
59637: PUSH
59638: LD_INT 3
59640: MINUS
59641: PUSH
59642: LD_VAR 0 2
59646: PUSH
59647: LD_INT 3
59649: MINUS
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: PUSH
59659: LD_VAR 0 1
59663: PUSH
59664: LD_INT 4
59666: MINUS
59667: PUSH
59668: LD_VAR 0 2
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: PUSH
59681: LD_VAR 0 1
59685: PUSH
59686: LD_VAR 0 2
59690: PUSH
59691: LD_INT 3
59693: PLUS
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: LD_VAR 0 1
59707: PUSH
59708: LD_INT 4
59710: PLUS
59711: PUSH
59712: LD_VAR 0 2
59716: PUSH
59717: LD_INT 4
59719: PLUS
59720: PUSH
59721: LD_INT 5
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: ST_TO_ADDR
// end ; 2 :
59736: GO 60295
59738: LD_INT 2
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59875
59746: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59747: LD_ADDR_VAR 0 5
59751: PUSH
59752: LD_VAR 0 1
59756: PUSH
59757: LD_VAR 0 2
59761: PUSH
59762: LD_INT 3
59764: MINUS
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: PUSH
59774: LD_VAR 0 1
59778: PUSH
59779: LD_INT 4
59781: PLUS
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: PUSH
59796: LD_VAR 0 1
59800: PUSH
59801: LD_VAR 0 2
59805: PUSH
59806: LD_INT 4
59808: PLUS
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: PUSH
59818: LD_VAR 0 1
59822: PUSH
59823: LD_INT 3
59825: MINUS
59826: PUSH
59827: LD_VAR 0 2
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: PUSH
59840: LD_VAR 0 1
59844: PUSH
59845: LD_INT 4
59847: MINUS
59848: PUSH
59849: LD_VAR 0 2
59853: PUSH
59854: LD_INT 4
59856: MINUS
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: ST_TO_ADDR
// end ; 3 :
59873: GO 60295
59875: LD_INT 3
59877: DOUBLE
59878: EQUAL
59879: IFTRUE 59883
59881: GO 60016
59883: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59884: LD_ADDR_VAR 0 5
59888: PUSH
59889: LD_VAR 0 1
59893: PUSH
59894: LD_INT 3
59896: PLUS
59897: PUSH
59898: LD_VAR 0 2
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: PUSH
59911: LD_VAR 0 1
59915: PUSH
59916: LD_INT 4
59918: PLUS
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: LD_INT 4
59927: PLUS
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: PUSH
59937: LD_VAR 0 1
59941: PUSH
59942: LD_INT 4
59944: MINUS
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_VAR 0 1
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 4
59971: MINUS
59972: PUSH
59973: LD_INT 3
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: PUSH
59981: LD_VAR 0 1
59985: PUSH
59986: LD_INT 3
59988: MINUS
59989: PUSH
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 3
59997: MINUS
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// end ; 4 :
60014: GO 60295
60016: LD_INT 4
60018: DOUBLE
60019: EQUAL
60020: IFTRUE 60024
60022: GO 60157
60024: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60025: LD_ADDR_VAR 0 5
60029: PUSH
60030: LD_VAR 0 1
60034: PUSH
60035: LD_VAR 0 2
60039: PUSH
60040: LD_INT 4
60042: PLUS
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: LIST
60051: PUSH
60052: LD_VAR 0 1
60056: PUSH
60057: LD_INT 3
60059: PLUS
60060: PUSH
60061: LD_VAR 0 2
60065: PUSH
60066: LD_INT 3
60068: PLUS
60069: PUSH
60070: LD_INT 5
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 4
60085: PLUS
60086: PUSH
60087: LD_VAR 0 2
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_INT 3
60112: MINUS
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: PUSH
60122: LD_VAR 0 1
60126: PUSH
60127: LD_INT 4
60129: MINUS
60130: PUSH
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 4
60138: MINUS
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// end ; 5 :
60155: GO 60295
60157: LD_INT 5
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60165
60163: GO 60294
60165: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60166: LD_ADDR_VAR 0 5
60170: PUSH
60171: LD_VAR 0 1
60175: PUSH
60176: LD_INT 4
60178: MINUS
60179: PUSH
60180: LD_VAR 0 2
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: PUSH
60193: LD_VAR 0 1
60197: PUSH
60198: LD_VAR 0 2
60202: PUSH
60203: LD_INT 4
60205: MINUS
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: PUSH
60215: LD_VAR 0 1
60219: PUSH
60220: LD_INT 4
60222: PLUS
60223: PUSH
60224: LD_VAR 0 2
60228: PUSH
60229: LD_INT 4
60231: PLUS
60232: PUSH
60233: LD_INT 5
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_INT 3
60248: PLUS
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: PUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_VAR 0 2
60272: PUSH
60273: LD_INT 3
60275: PLUS
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: ST_TO_ADDR
// end ; end ;
60292: GO 60295
60294: POP
// result := list ;
60295: LD_ADDR_VAR 0 4
60299: PUSH
60300: LD_VAR 0 5
60304: ST_TO_ADDR
// end ;
60305: LD_VAR 0 4
60309: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60310: LD_INT 0
60312: PPUSH
60313: PPUSH
60314: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60315: LD_VAR 0 1
60319: NOT
60320: PUSH
60321: LD_VAR 0 2
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: LD_INT 4
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: IN
60344: NOT
60345: OR
60346: IFFALSE 60350
// exit ;
60348: GO 60442
// tmp := [ ] ;
60350: LD_ADDR_VAR 0 5
60354: PUSH
60355: EMPTY
60356: ST_TO_ADDR
// for i in units do
60357: LD_ADDR_VAR 0 4
60361: PUSH
60362: LD_VAR 0 1
60366: PUSH
60367: FOR_IN
60368: IFFALSE 60411
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60370: LD_ADDR_VAR 0 5
60374: PUSH
60375: LD_VAR 0 5
60379: PPUSH
60380: LD_VAR 0 5
60384: PUSH
60385: LD_INT 1
60387: PLUS
60388: PPUSH
60389: LD_VAR 0 4
60393: PPUSH
60394: LD_VAR 0 2
60398: PPUSH
60399: CALL_OW 259
60403: PPUSH
60404: CALL_OW 2
60408: ST_TO_ADDR
60409: GO 60367
60411: POP
60412: POP
// if not tmp then
60413: LD_VAR 0 5
60417: NOT
60418: IFFALSE 60422
// exit ;
60420: GO 60442
// result := SortListByListDesc ( units , tmp ) ;
60422: LD_ADDR_VAR 0 3
60426: PUSH
60427: LD_VAR 0 1
60431: PPUSH
60432: LD_VAR 0 5
60436: PPUSH
60437: CALL_OW 77
60441: ST_TO_ADDR
// end ;
60442: LD_VAR 0 3
60446: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60447: LD_INT 0
60449: PPUSH
60450: PPUSH
60451: PPUSH
// x := GetX ( building ) ;
60452: LD_ADDR_VAR 0 4
60456: PUSH
60457: LD_VAR 0 2
60461: PPUSH
60462: CALL_OW 250
60466: ST_TO_ADDR
// y := GetY ( building ) ;
60467: LD_ADDR_VAR 0 5
60471: PUSH
60472: LD_VAR 0 2
60476: PPUSH
60477: CALL_OW 251
60481: ST_TO_ADDR
// if GetTaskList ( unit ) then
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 437
60491: IFFALSE 60586
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60493: LD_STRING e
60495: PUSH
60496: LD_VAR 0 1
60500: PPUSH
60501: CALL_OW 437
60505: PUSH
60506: LD_INT 1
60508: ARRAY
60509: PUSH
60510: LD_INT 1
60512: ARRAY
60513: EQUAL
60514: PUSH
60515: LD_VAR 0 4
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 437
60529: PUSH
60530: LD_INT 1
60532: ARRAY
60533: PUSH
60534: LD_INT 2
60536: ARRAY
60537: EQUAL
60538: AND
60539: PUSH
60540: LD_VAR 0 5
60544: PUSH
60545: LD_VAR 0 1
60549: PPUSH
60550: CALL_OW 437
60554: PUSH
60555: LD_INT 1
60557: ARRAY
60558: PUSH
60559: LD_INT 3
60561: ARRAY
60562: EQUAL
60563: AND
60564: IFFALSE 60576
// result := true else
60566: LD_ADDR_VAR 0 3
60570: PUSH
60571: LD_INT 1
60573: ST_TO_ADDR
60574: GO 60584
// result := false ;
60576: LD_ADDR_VAR 0 3
60580: PUSH
60581: LD_INT 0
60583: ST_TO_ADDR
// end else
60584: GO 60594
// result := false ;
60586: LD_ADDR_VAR 0 3
60590: PUSH
60591: LD_INT 0
60593: ST_TO_ADDR
// end ;
60594: LD_VAR 0 3
60598: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60599: LD_INT 0
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
// if not unit or not area then
60605: LD_VAR 0 1
60609: NOT
60610: PUSH
60611: LD_VAR 0 2
60615: NOT
60616: OR
60617: IFFALSE 60621
// exit ;
60619: GO 60785
// tmp := AreaToList ( area , i ) ;
60621: LD_ADDR_VAR 0 6
60625: PUSH
60626: LD_VAR 0 2
60630: PPUSH
60631: LD_VAR 0 5
60635: PPUSH
60636: CALL_OW 517
60640: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60641: LD_ADDR_VAR 0 5
60645: PUSH
60646: DOUBLE
60647: LD_INT 1
60649: DEC
60650: ST_TO_ADDR
60651: LD_VAR 0 6
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PUSH
60660: FOR_TO
60661: IFFALSE 60783
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60663: LD_ADDR_VAR 0 7
60667: PUSH
60668: LD_VAR 0 6
60672: PUSH
60673: LD_INT 1
60675: ARRAY
60676: PUSH
60677: LD_VAR 0 5
60681: ARRAY
60682: PUSH
60683: LD_VAR 0 6
60687: PUSH
60688: LD_INT 2
60690: ARRAY
60691: PUSH
60692: LD_VAR 0 5
60696: ARRAY
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60702: LD_VAR 0 7
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PPUSH
60711: LD_VAR 0 7
60715: PUSH
60716: LD_INT 2
60718: ARRAY
60719: PPUSH
60720: CALL_OW 428
60724: PUSH
60725: LD_INT 0
60727: EQUAL
60728: IFFALSE 60781
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60730: LD_VAR 0 1
60734: PPUSH
60735: LD_VAR 0 7
60739: PUSH
60740: LD_INT 1
60742: ARRAY
60743: PPUSH
60744: LD_VAR 0 7
60748: PUSH
60749: LD_INT 2
60751: ARRAY
60752: PPUSH
60753: LD_VAR 0 3
60757: PPUSH
60758: CALL_OW 48
// result := IsPlaced ( unit ) ;
60762: LD_ADDR_VAR 0 4
60766: PUSH
60767: LD_VAR 0 1
60771: PPUSH
60772: CALL_OW 305
60776: ST_TO_ADDR
// exit ;
60777: POP
60778: POP
60779: GO 60785
// end ; end ;
60781: GO 60660
60783: POP
60784: POP
// end ;
60785: LD_VAR 0 4
60789: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60790: LD_INT 0
60792: PPUSH
60793: PPUSH
60794: PPUSH
// if not side or side > 8 then
60795: LD_VAR 0 1
60799: NOT
60800: PUSH
60801: LD_VAR 0 1
60805: PUSH
60806: LD_INT 8
60808: GREATER
60809: OR
60810: IFFALSE 60814
// exit ;
60812: GO 61001
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60814: LD_ADDR_VAR 0 4
60818: PUSH
60819: LD_INT 22
60821: PUSH
60822: LD_VAR 0 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 21
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PPUSH
60845: CALL_OW 69
60849: ST_TO_ADDR
// if not tmp then
60850: LD_VAR 0 4
60854: NOT
60855: IFFALSE 60859
// exit ;
60857: GO 61001
// enable_addtolog := true ;
60859: LD_ADDR_OWVAR 81
60863: PUSH
60864: LD_INT 1
60866: ST_TO_ADDR
// AddToLog ( [ ) ;
60867: LD_STRING [
60869: PPUSH
60870: CALL_OW 561
// for i in tmp do
60874: LD_ADDR_VAR 0 3
60878: PUSH
60879: LD_VAR 0 4
60883: PUSH
60884: FOR_IN
60885: IFFALSE 60992
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60887: LD_STRING [
60889: PUSH
60890: LD_VAR 0 3
60894: PPUSH
60895: CALL_OW 266
60899: STR
60900: PUSH
60901: LD_STRING , 
60903: STR
60904: PUSH
60905: LD_VAR 0 3
60909: PPUSH
60910: CALL_OW 250
60914: STR
60915: PUSH
60916: LD_STRING , 
60918: STR
60919: PUSH
60920: LD_VAR 0 3
60924: PPUSH
60925: CALL_OW 251
60929: STR
60930: PUSH
60931: LD_STRING , 
60933: STR
60934: PUSH
60935: LD_VAR 0 3
60939: PPUSH
60940: CALL_OW 254
60944: STR
60945: PUSH
60946: LD_STRING , 
60948: STR
60949: PUSH
60950: LD_VAR 0 3
60954: PPUSH
60955: LD_INT 1
60957: PPUSH
60958: CALL_OW 268
60962: STR
60963: PUSH
60964: LD_STRING , 
60966: STR
60967: PUSH
60968: LD_VAR 0 3
60972: PPUSH
60973: LD_INT 2
60975: PPUSH
60976: CALL_OW 268
60980: STR
60981: PUSH
60982: LD_STRING ],
60984: STR
60985: PPUSH
60986: CALL_OW 561
// end ;
60990: GO 60884
60992: POP
60993: POP
// AddToLog ( ]; ) ;
60994: LD_STRING ];
60996: PPUSH
60997: CALL_OW 561
// end ;
61001: LD_VAR 0 2
61005: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61006: LD_INT 0
61008: PPUSH
61009: PPUSH
61010: PPUSH
61011: PPUSH
61012: PPUSH
// if not area or not rate or not max then
61013: LD_VAR 0 1
61017: NOT
61018: PUSH
61019: LD_VAR 0 2
61023: NOT
61024: OR
61025: PUSH
61026: LD_VAR 0 4
61030: NOT
61031: OR
61032: IFFALSE 61036
// exit ;
61034: GO 61228
// while 1 do
61036: LD_INT 1
61038: IFFALSE 61228
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61040: LD_ADDR_VAR 0 9
61044: PUSH
61045: LD_VAR 0 1
61049: PPUSH
61050: LD_INT 1
61052: PPUSH
61053: CALL_OW 287
61057: PUSH
61058: LD_INT 10
61060: MUL
61061: ST_TO_ADDR
// r := rate / 10 ;
61062: LD_ADDR_VAR 0 7
61066: PUSH
61067: LD_VAR 0 2
61071: PUSH
61072: LD_INT 10
61074: DIVREAL
61075: ST_TO_ADDR
// time := 1 1$00 ;
61076: LD_ADDR_VAR 0 8
61080: PUSH
61081: LD_INT 2100
61083: ST_TO_ADDR
// if amount < min then
61084: LD_VAR 0 9
61088: PUSH
61089: LD_VAR 0 3
61093: LESS
61094: IFFALSE 61112
// r := r * 2 else
61096: LD_ADDR_VAR 0 7
61100: PUSH
61101: LD_VAR 0 7
61105: PUSH
61106: LD_INT 2
61108: MUL
61109: ST_TO_ADDR
61110: GO 61138
// if amount > max then
61112: LD_VAR 0 9
61116: PUSH
61117: LD_VAR 0 4
61121: GREATER
61122: IFFALSE 61138
// r := r / 2 ;
61124: LD_ADDR_VAR 0 7
61128: PUSH
61129: LD_VAR 0 7
61133: PUSH
61134: LD_INT 2
61136: DIVREAL
61137: ST_TO_ADDR
// time := time / r ;
61138: LD_ADDR_VAR 0 8
61142: PUSH
61143: LD_VAR 0 8
61147: PUSH
61148: LD_VAR 0 7
61152: DIVREAL
61153: ST_TO_ADDR
// if time < 0 then
61154: LD_VAR 0 8
61158: PUSH
61159: LD_INT 0
61161: LESS
61162: IFFALSE 61179
// time := time * - 1 ;
61164: LD_ADDR_VAR 0 8
61168: PUSH
61169: LD_VAR 0 8
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: MUL
61178: ST_TO_ADDR
// wait ( time ) ;
61179: LD_VAR 0 8
61183: PPUSH
61184: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61188: LD_INT 35
61190: PPUSH
61191: LD_INT 875
61193: PPUSH
61194: CALL_OW 12
61198: PPUSH
61199: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61203: LD_INT 1
61205: PPUSH
61206: LD_INT 5
61208: PPUSH
61209: CALL_OW 12
61213: PPUSH
61214: LD_VAR 0 1
61218: PPUSH
61219: LD_INT 1
61221: PPUSH
61222: CALL_OW 55
// end ;
61226: GO 61036
// end ;
61228: LD_VAR 0 5
61232: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61233: LD_INT 0
61235: PPUSH
61236: PPUSH
61237: PPUSH
61238: PPUSH
61239: PPUSH
61240: PPUSH
61241: PPUSH
61242: PPUSH
// if not turrets or not factories then
61243: LD_VAR 0 1
61247: NOT
61248: PUSH
61249: LD_VAR 0 2
61253: NOT
61254: OR
61255: IFFALSE 61259
// exit ;
61257: GO 61566
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61259: LD_ADDR_VAR 0 10
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: LD_INT 6
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 24
61301: PUSH
61302: LD_INT 25
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 23
61311: PUSH
61312: LD_INT 27
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 42
61325: PUSH
61326: LD_INT 43
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 44
61335: PUSH
61336: LD_INT 46
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 45
61345: PUSH
61346: LD_INT 47
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// result := [ ] ;
61363: LD_ADDR_VAR 0 3
61367: PUSH
61368: EMPTY
61369: ST_TO_ADDR
// for i in turrets do
61370: LD_ADDR_VAR 0 4
61374: PUSH
61375: LD_VAR 0 1
61379: PUSH
61380: FOR_IN
61381: IFFALSE 61564
// begin nat := GetNation ( i ) ;
61383: LD_ADDR_VAR 0 7
61387: PUSH
61388: LD_VAR 0 4
61392: PPUSH
61393: CALL_OW 248
61397: ST_TO_ADDR
// weapon := 0 ;
61398: LD_ADDR_VAR 0 8
61402: PUSH
61403: LD_INT 0
61405: ST_TO_ADDR
// if not nat then
61406: LD_VAR 0 7
61410: NOT
61411: IFFALSE 61415
// continue ;
61413: GO 61380
// for j in list [ nat ] do
61415: LD_ADDR_VAR 0 5
61419: PUSH
61420: LD_VAR 0 10
61424: PUSH
61425: LD_VAR 0 7
61429: ARRAY
61430: PUSH
61431: FOR_IN
61432: IFFALSE 61473
// if GetBWeapon ( i ) = j [ 1 ] then
61434: LD_VAR 0 4
61438: PPUSH
61439: CALL_OW 269
61443: PUSH
61444: LD_VAR 0 5
61448: PUSH
61449: LD_INT 1
61451: ARRAY
61452: EQUAL
61453: IFFALSE 61471
// begin weapon := j [ 2 ] ;
61455: LD_ADDR_VAR 0 8
61459: PUSH
61460: LD_VAR 0 5
61464: PUSH
61465: LD_INT 2
61467: ARRAY
61468: ST_TO_ADDR
// break ;
61469: GO 61473
// end ;
61471: GO 61431
61473: POP
61474: POP
// if not weapon then
61475: LD_VAR 0 8
61479: NOT
61480: IFFALSE 61484
// continue ;
61482: GO 61380
// for k in factories do
61484: LD_ADDR_VAR 0 6
61488: PUSH
61489: LD_VAR 0 2
61493: PUSH
61494: FOR_IN
61495: IFFALSE 61560
// begin weapons := AvailableWeaponList ( k ) ;
61497: LD_ADDR_VAR 0 9
61501: PUSH
61502: LD_VAR 0 6
61506: PPUSH
61507: CALL_OW 478
61511: ST_TO_ADDR
// if not weapons then
61512: LD_VAR 0 9
61516: NOT
61517: IFFALSE 61521
// continue ;
61519: GO 61494
// if weapon in weapons then
61521: LD_VAR 0 8
61525: PUSH
61526: LD_VAR 0 9
61530: IN
61531: IFFALSE 61558
// begin result := [ i , weapon ] ;
61533: LD_ADDR_VAR 0 3
61537: PUSH
61538: LD_VAR 0 4
61542: PUSH
61543: LD_VAR 0 8
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: ST_TO_ADDR
// exit ;
61552: POP
61553: POP
61554: POP
61555: POP
61556: GO 61566
// end ; end ;
61558: GO 61494
61560: POP
61561: POP
// end ;
61562: GO 61380
61564: POP
61565: POP
// end ;
61566: LD_VAR 0 3
61570: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61571: LD_INT 0
61573: PPUSH
// if not side or side > 8 then
61574: LD_VAR 0 3
61578: NOT
61579: PUSH
61580: LD_VAR 0 3
61584: PUSH
61585: LD_INT 8
61587: GREATER
61588: OR
61589: IFFALSE 61593
// exit ;
61591: GO 61652
// if not range then
61593: LD_VAR 0 4
61597: NOT
61598: IFFALSE 61609
// range := - 12 ;
61600: LD_ADDR_VAR 0 4
61604: PUSH
61605: LD_INT 12
61607: NEG
61608: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: LD_VAR 0 3
61623: PPUSH
61624: LD_VAR 0 4
61628: PPUSH
61629: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61633: LD_VAR 0 1
61637: PPUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_VAR 0 3
61647: PPUSH
61648: CALL_OW 331
// end ;
61652: LD_VAR 0 5
61656: RET
// export function Video ( mode ) ; begin
61657: LD_INT 0
61659: PPUSH
// ingame_video = mode ;
61660: LD_ADDR_OWVAR 52
61664: PUSH
61665: LD_VAR 0 1
61669: ST_TO_ADDR
// interface_hidden = mode ;
61670: LD_ADDR_OWVAR 54
61674: PUSH
61675: LD_VAR 0 1
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 2
61684: RET
// export function Join ( array , element ) ; begin
61685: LD_INT 0
61687: PPUSH
// result := array ^ element ;
61688: LD_ADDR_VAR 0 3
61692: PUSH
61693: LD_VAR 0 1
61697: PUSH
61698: LD_VAR 0 2
61702: ADD
61703: ST_TO_ADDR
// end ;
61704: LD_VAR 0 3
61708: RET
// export function JoinUnion ( array , element ) ; begin
61709: LD_INT 0
61711: PPUSH
// result := array union element ;
61712: LD_ADDR_VAR 0 3
61716: PUSH
61717: LD_VAR 0 1
61721: PUSH
61722: LD_VAR 0 2
61726: UNION
61727: ST_TO_ADDR
// end ;
61728: LD_VAR 0 3
61732: RET
// export function GetBehemoths ( side ) ; begin
61733: LD_INT 0
61735: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61736: LD_ADDR_VAR 0 2
61740: PUSH
61741: LD_INT 22
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 31
61755: PUSH
61756: LD_INT 25
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PPUSH
61767: CALL_OW 69
61771: ST_TO_ADDR
// end ;
61772: LD_VAR 0 2
61776: RET
// export function Shuffle ( array ) ; var i , index ; begin
61777: LD_INT 0
61779: PPUSH
61780: PPUSH
61781: PPUSH
// result := [ ] ;
61782: LD_ADDR_VAR 0 2
61786: PUSH
61787: EMPTY
61788: ST_TO_ADDR
// if not array then
61789: LD_VAR 0 1
61793: NOT
61794: IFFALSE 61798
// exit ;
61796: GO 61897
// Randomize ;
61798: CALL_OW 10
// for i = array downto 1 do
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: DOUBLE
61808: LD_VAR 0 1
61812: INC
61813: ST_TO_ADDR
61814: LD_INT 1
61816: PUSH
61817: FOR_DOWNTO
61818: IFFALSE 61895
// begin index := rand ( 1 , array ) ;
61820: LD_ADDR_VAR 0 4
61824: PUSH
61825: LD_INT 1
61827: PPUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL_OW 12
61837: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61838: LD_ADDR_VAR 0 2
61842: PUSH
61843: LD_VAR 0 2
61847: PPUSH
61848: LD_VAR 0 2
61852: PUSH
61853: LD_INT 1
61855: PLUS
61856: PPUSH
61857: LD_VAR 0 1
61861: PUSH
61862: LD_VAR 0 4
61866: ARRAY
61867: PPUSH
61868: CALL_OW 2
61872: ST_TO_ADDR
// array := Delete ( array , index ) ;
61873: LD_ADDR_VAR 0 1
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: LD_VAR 0 4
61887: PPUSH
61888: CALL_OW 3
61892: ST_TO_ADDR
// end ;
61893: GO 61817
61895: POP
61896: POP
// end ; end_of_file
61897: LD_VAR 0 2
61901: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61902: GO 61904
61904: DISABLE
// begin ru_radar := 98 ;
61905: LD_ADDR_EXP 29
61909: PUSH
61910: LD_INT 98
61912: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61913: LD_ADDR_EXP 30
61917: PUSH
61918: LD_INT 89
61920: ST_TO_ADDR
// us_hack := 99 ;
61921: LD_ADDR_EXP 31
61925: PUSH
61926: LD_INT 99
61928: ST_TO_ADDR
// us_artillery := 97 ;
61929: LD_ADDR_EXP 32
61933: PUSH
61934: LD_INT 97
61936: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61937: LD_ADDR_EXP 33
61941: PUSH
61942: LD_INT 91
61944: ST_TO_ADDR
// end ; end_of_file
61945: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61946: LD_INT 0
61948: PPUSH
61949: PPUSH
// skirmish := false ;
61950: LD_ADDR_EXP 34
61954: PUSH
61955: LD_INT 0
61957: ST_TO_ADDR
// debug_mc := false ;
61958: LD_ADDR_EXP 35
61962: PUSH
61963: LD_INT 0
61965: ST_TO_ADDR
// mc_bases := [ ] ;
61966: LD_ADDR_EXP 36
61970: PUSH
61971: EMPTY
61972: ST_TO_ADDR
// mc_sides := [ ] ;
61973: LD_ADDR_EXP 62
61977: PUSH
61978: EMPTY
61979: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61980: LD_ADDR_EXP 37
61984: PUSH
61985: EMPTY
61986: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61987: LD_ADDR_EXP 38
61991: PUSH
61992: EMPTY
61993: ST_TO_ADDR
// mc_need_heal := [ ] ;
61994: LD_ADDR_EXP 39
61998: PUSH
61999: EMPTY
62000: ST_TO_ADDR
// mc_healers := [ ] ;
62001: LD_ADDR_EXP 40
62005: PUSH
62006: EMPTY
62007: ST_TO_ADDR
// mc_build_list := [ ] ;
62008: LD_ADDR_EXP 41
62012: PUSH
62013: EMPTY
62014: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62015: LD_ADDR_EXP 68
62019: PUSH
62020: EMPTY
62021: ST_TO_ADDR
// mc_builders := [ ] ;
62022: LD_ADDR_EXP 42
62026: PUSH
62027: EMPTY
62028: ST_TO_ADDR
// mc_construct_list := [ ] ;
62029: LD_ADDR_EXP 43
62033: PUSH
62034: EMPTY
62035: ST_TO_ADDR
// mc_turret_list := [ ] ;
62036: LD_ADDR_EXP 44
62040: PUSH
62041: EMPTY
62042: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62043: LD_ADDR_EXP 45
62047: PUSH
62048: EMPTY
62049: ST_TO_ADDR
// mc_miners := [ ] ;
62050: LD_ADDR_EXP 50
62054: PUSH
62055: EMPTY
62056: ST_TO_ADDR
// mc_mines := [ ] ;
62057: LD_ADDR_EXP 49
62061: PUSH
62062: EMPTY
62063: ST_TO_ADDR
// mc_minefields := [ ] ;
62064: LD_ADDR_EXP 51
62068: PUSH
62069: EMPTY
62070: ST_TO_ADDR
// mc_crates := [ ] ;
62071: LD_ADDR_EXP 52
62075: PUSH
62076: EMPTY
62077: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62078: LD_ADDR_EXP 53
62082: PUSH
62083: EMPTY
62084: ST_TO_ADDR
// mc_crates_area := [ ] ;
62085: LD_ADDR_EXP 54
62089: PUSH
62090: EMPTY
62091: ST_TO_ADDR
// mc_vehicles := [ ] ;
62092: LD_ADDR_EXP 55
62096: PUSH
62097: EMPTY
62098: ST_TO_ADDR
// mc_attack := [ ] ;
62099: LD_ADDR_EXP 56
62103: PUSH
62104: EMPTY
62105: ST_TO_ADDR
// mc_produce := [ ] ;
62106: LD_ADDR_EXP 57
62110: PUSH
62111: EMPTY
62112: ST_TO_ADDR
// mc_defender := [ ] ;
62113: LD_ADDR_EXP 58
62117: PUSH
62118: EMPTY
62119: ST_TO_ADDR
// mc_parking := [ ] ;
62120: LD_ADDR_EXP 60
62124: PUSH
62125: EMPTY
62126: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62127: LD_ADDR_EXP 46
62131: PUSH
62132: EMPTY
62133: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62134: LD_ADDR_EXP 48
62138: PUSH
62139: EMPTY
62140: ST_TO_ADDR
// mc_scan := [ ] ;
62141: LD_ADDR_EXP 59
62145: PUSH
62146: EMPTY
62147: ST_TO_ADDR
// mc_scan_area := [ ] ;
62148: LD_ADDR_EXP 61
62152: PUSH
62153: EMPTY
62154: ST_TO_ADDR
// mc_tech := [ ] ;
62155: LD_ADDR_EXP 63
62159: PUSH
62160: EMPTY
62161: ST_TO_ADDR
// mc_class := [ ] ;
62162: LD_ADDR_EXP 77
62166: PUSH
62167: EMPTY
62168: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62169: LD_ADDR_EXP 78
62173: PUSH
62174: EMPTY
62175: ST_TO_ADDR
// end ;
62176: LD_VAR 0 1
62180: RET
// export function MC_Kill ( base ) ; begin
62181: LD_INT 0
62183: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62184: LD_ADDR_EXP 36
62188: PUSH
62189: LD_EXP 36
62193: PPUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: EMPTY
62200: PPUSH
62201: CALL_OW 1
62205: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62206: LD_ADDR_EXP 37
62210: PUSH
62211: LD_EXP 37
62215: PPUSH
62216: LD_VAR 0 1
62220: PPUSH
62221: EMPTY
62222: PPUSH
62223: CALL_OW 1
62227: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62228: LD_ADDR_EXP 38
62232: PUSH
62233: LD_EXP 38
62237: PPUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: EMPTY
62244: PPUSH
62245: CALL_OW 1
62249: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62250: LD_ADDR_EXP 39
62254: PUSH
62255: LD_EXP 39
62259: PPUSH
62260: LD_VAR 0 1
62264: PPUSH
62265: EMPTY
62266: PPUSH
62267: CALL_OW 1
62271: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62272: LD_ADDR_EXP 40
62276: PUSH
62277: LD_EXP 40
62281: PPUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: EMPTY
62288: PPUSH
62289: CALL_OW 1
62293: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62294: LD_ADDR_EXP 41
62298: PUSH
62299: LD_EXP 41
62303: PPUSH
62304: LD_VAR 0 1
62308: PPUSH
62309: EMPTY
62310: PPUSH
62311: CALL_OW 1
62315: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62316: LD_ADDR_EXP 42
62320: PUSH
62321: LD_EXP 42
62325: PPUSH
62326: LD_VAR 0 1
62330: PPUSH
62331: EMPTY
62332: PPUSH
62333: CALL_OW 1
62337: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62338: LD_ADDR_EXP 43
62342: PUSH
62343: LD_EXP 43
62347: PPUSH
62348: LD_VAR 0 1
62352: PPUSH
62353: EMPTY
62354: PPUSH
62355: CALL_OW 1
62359: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62360: LD_ADDR_EXP 44
62364: PUSH
62365: LD_EXP 44
62369: PPUSH
62370: LD_VAR 0 1
62374: PPUSH
62375: EMPTY
62376: PPUSH
62377: CALL_OW 1
62381: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62382: LD_ADDR_EXP 45
62386: PUSH
62387: LD_EXP 45
62391: PPUSH
62392: LD_VAR 0 1
62396: PPUSH
62397: EMPTY
62398: PPUSH
62399: CALL_OW 1
62403: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62404: LD_ADDR_EXP 46
62408: PUSH
62409: LD_EXP 46
62413: PPUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: EMPTY
62420: PPUSH
62421: CALL_OW 1
62425: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62426: LD_ADDR_EXP 47
62430: PUSH
62431: LD_EXP 47
62435: PPUSH
62436: LD_VAR 0 1
62440: PPUSH
62441: LD_INT 0
62443: PPUSH
62444: CALL_OW 1
62448: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62449: LD_ADDR_EXP 48
62453: PUSH
62454: LD_EXP 48
62458: PPUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: EMPTY
62465: PPUSH
62466: CALL_OW 1
62470: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62471: LD_ADDR_EXP 49
62475: PUSH
62476: LD_EXP 49
62480: PPUSH
62481: LD_VAR 0 1
62485: PPUSH
62486: EMPTY
62487: PPUSH
62488: CALL_OW 1
62492: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62493: LD_ADDR_EXP 50
62497: PUSH
62498: LD_EXP 50
62502: PPUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: EMPTY
62509: PPUSH
62510: CALL_OW 1
62514: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62515: LD_ADDR_EXP 51
62519: PUSH
62520: LD_EXP 51
62524: PPUSH
62525: LD_VAR 0 1
62529: PPUSH
62530: EMPTY
62531: PPUSH
62532: CALL_OW 1
62536: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62537: LD_ADDR_EXP 52
62541: PUSH
62542: LD_EXP 52
62546: PPUSH
62547: LD_VAR 0 1
62551: PPUSH
62552: EMPTY
62553: PPUSH
62554: CALL_OW 1
62558: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62559: LD_ADDR_EXP 53
62563: PUSH
62564: LD_EXP 53
62568: PPUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: EMPTY
62575: PPUSH
62576: CALL_OW 1
62580: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62581: LD_ADDR_EXP 54
62585: PUSH
62586: LD_EXP 54
62590: PPUSH
62591: LD_VAR 0 1
62595: PPUSH
62596: EMPTY
62597: PPUSH
62598: CALL_OW 1
62602: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62603: LD_ADDR_EXP 55
62607: PUSH
62608: LD_EXP 55
62612: PPUSH
62613: LD_VAR 0 1
62617: PPUSH
62618: EMPTY
62619: PPUSH
62620: CALL_OW 1
62624: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62625: LD_ADDR_EXP 56
62629: PUSH
62630: LD_EXP 56
62634: PPUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: EMPTY
62641: PPUSH
62642: CALL_OW 1
62646: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62647: LD_ADDR_EXP 57
62651: PUSH
62652: LD_EXP 57
62656: PPUSH
62657: LD_VAR 0 1
62661: PPUSH
62662: EMPTY
62663: PPUSH
62664: CALL_OW 1
62668: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62669: LD_ADDR_EXP 58
62673: PUSH
62674: LD_EXP 58
62678: PPUSH
62679: LD_VAR 0 1
62683: PPUSH
62684: EMPTY
62685: PPUSH
62686: CALL_OW 1
62690: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62691: LD_ADDR_EXP 59
62695: PUSH
62696: LD_EXP 59
62700: PPUSH
62701: LD_VAR 0 1
62705: PPUSH
62706: EMPTY
62707: PPUSH
62708: CALL_OW 1
62712: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62713: LD_ADDR_EXP 60
62717: PUSH
62718: LD_EXP 60
62722: PPUSH
62723: LD_VAR 0 1
62727: PPUSH
62728: EMPTY
62729: PPUSH
62730: CALL_OW 1
62734: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62735: LD_ADDR_EXP 61
62739: PUSH
62740: LD_EXP 61
62744: PPUSH
62745: LD_VAR 0 1
62749: PPUSH
62750: EMPTY
62751: PPUSH
62752: CALL_OW 1
62756: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62757: LD_ADDR_EXP 63
62761: PUSH
62762: LD_EXP 63
62766: PPUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: EMPTY
62773: PPUSH
62774: CALL_OW 1
62778: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62779: LD_ADDR_EXP 65
62783: PUSH
62784: LD_EXP 65
62788: PPUSH
62789: LD_VAR 0 1
62793: PPUSH
62794: EMPTY
62795: PPUSH
62796: CALL_OW 1
62800: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62801: LD_ADDR_EXP 66
62805: PUSH
62806: LD_EXP 66
62810: PPUSH
62811: LD_VAR 0 1
62815: PPUSH
62816: EMPTY
62817: PPUSH
62818: CALL_OW 1
62822: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62823: LD_ADDR_EXP 67
62827: PUSH
62828: LD_EXP 67
62832: PPUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: EMPTY
62839: PPUSH
62840: CALL_OW 1
62844: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62845: LD_ADDR_EXP 68
62849: PUSH
62850: LD_EXP 68
62854: PPUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: EMPTY
62861: PPUSH
62862: CALL_OW 1
62866: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62867: LD_ADDR_EXP 69
62871: PUSH
62872: LD_EXP 69
62876: PPUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: EMPTY
62883: PPUSH
62884: CALL_OW 1
62888: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62889: LD_ADDR_EXP 70
62893: PUSH
62894: LD_EXP 70
62898: PPUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: EMPTY
62905: PPUSH
62906: CALL_OW 1
62910: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62911: LD_ADDR_EXP 71
62915: PUSH
62916: LD_EXP 71
62920: PPUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: EMPTY
62927: PPUSH
62928: CALL_OW 1
62932: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62933: LD_ADDR_EXP 72
62937: PUSH
62938: LD_EXP 72
62942: PPUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: EMPTY
62949: PPUSH
62950: CALL_OW 1
62954: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62955: LD_ADDR_EXP 73
62959: PUSH
62960: LD_EXP 73
62964: PPUSH
62965: LD_VAR 0 1
62969: PPUSH
62970: EMPTY
62971: PPUSH
62972: CALL_OW 1
62976: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62977: LD_ADDR_EXP 74
62981: PUSH
62982: LD_EXP 74
62986: PPUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: EMPTY
62993: PPUSH
62994: CALL_OW 1
62998: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62999: LD_ADDR_EXP 75
63003: PUSH
63004: LD_EXP 75
63008: PPUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: EMPTY
63015: PPUSH
63016: CALL_OW 1
63020: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63021: LD_ADDR_EXP 76
63025: PUSH
63026: LD_EXP 76
63030: PPUSH
63031: LD_VAR 0 1
63035: PPUSH
63036: EMPTY
63037: PPUSH
63038: CALL_OW 1
63042: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63043: LD_ADDR_EXP 77
63047: PUSH
63048: LD_EXP 77
63052: PPUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: EMPTY
63059: PPUSH
63060: CALL_OW 1
63064: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63065: LD_ADDR_EXP 78
63069: PUSH
63070: LD_EXP 78
63074: PPUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_INT 0
63082: PPUSH
63083: CALL_OW 1
63087: ST_TO_ADDR
// end ;
63088: LD_VAR 0 2
63092: RET
// export function MC_Add ( side , units ) ; var base ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
// base := mc_bases + 1 ;
63097: LD_ADDR_VAR 0 4
63101: PUSH
63102: LD_EXP 36
63106: PUSH
63107: LD_INT 1
63109: PLUS
63110: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63111: LD_ADDR_EXP 62
63115: PUSH
63116: LD_EXP 62
63120: PPUSH
63121: LD_VAR 0 4
63125: PPUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL_OW 1
63135: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63136: LD_ADDR_EXP 36
63140: PUSH
63141: LD_EXP 36
63145: PPUSH
63146: LD_VAR 0 4
63150: PPUSH
63151: LD_VAR 0 2
63155: PPUSH
63156: CALL_OW 1
63160: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63161: LD_ADDR_EXP 37
63165: PUSH
63166: LD_EXP 37
63170: PPUSH
63171: LD_VAR 0 4
63175: PPUSH
63176: EMPTY
63177: PPUSH
63178: CALL_OW 1
63182: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63183: LD_ADDR_EXP 38
63187: PUSH
63188: LD_EXP 38
63192: PPUSH
63193: LD_VAR 0 4
63197: PPUSH
63198: EMPTY
63199: PPUSH
63200: CALL_OW 1
63204: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63205: LD_ADDR_EXP 39
63209: PUSH
63210: LD_EXP 39
63214: PPUSH
63215: LD_VAR 0 4
63219: PPUSH
63220: EMPTY
63221: PPUSH
63222: CALL_OW 1
63226: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63227: LD_ADDR_EXP 40
63231: PUSH
63232: LD_EXP 40
63236: PPUSH
63237: LD_VAR 0 4
63241: PPUSH
63242: EMPTY
63243: PPUSH
63244: CALL_OW 1
63248: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63249: LD_ADDR_EXP 41
63253: PUSH
63254: LD_EXP 41
63258: PPUSH
63259: LD_VAR 0 4
63263: PPUSH
63264: EMPTY
63265: PPUSH
63266: CALL_OW 1
63270: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63271: LD_ADDR_EXP 42
63275: PUSH
63276: LD_EXP 42
63280: PPUSH
63281: LD_VAR 0 4
63285: PPUSH
63286: EMPTY
63287: PPUSH
63288: CALL_OW 1
63292: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63293: LD_ADDR_EXP 43
63297: PUSH
63298: LD_EXP 43
63302: PPUSH
63303: LD_VAR 0 4
63307: PPUSH
63308: EMPTY
63309: PPUSH
63310: CALL_OW 1
63314: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63315: LD_ADDR_EXP 44
63319: PUSH
63320: LD_EXP 44
63324: PPUSH
63325: LD_VAR 0 4
63329: PPUSH
63330: EMPTY
63331: PPUSH
63332: CALL_OW 1
63336: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63337: LD_ADDR_EXP 45
63341: PUSH
63342: LD_EXP 45
63346: PPUSH
63347: LD_VAR 0 4
63351: PPUSH
63352: EMPTY
63353: PPUSH
63354: CALL_OW 1
63358: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63359: LD_ADDR_EXP 46
63363: PUSH
63364: LD_EXP 46
63368: PPUSH
63369: LD_VAR 0 4
63373: PPUSH
63374: EMPTY
63375: PPUSH
63376: CALL_OW 1
63380: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63381: LD_ADDR_EXP 47
63385: PUSH
63386: LD_EXP 47
63390: PPUSH
63391: LD_VAR 0 4
63395: PPUSH
63396: LD_INT 0
63398: PPUSH
63399: CALL_OW 1
63403: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63404: LD_ADDR_EXP 48
63408: PUSH
63409: LD_EXP 48
63413: PPUSH
63414: LD_VAR 0 4
63418: PPUSH
63419: EMPTY
63420: PPUSH
63421: CALL_OW 1
63425: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63426: LD_ADDR_EXP 49
63430: PUSH
63431: LD_EXP 49
63435: PPUSH
63436: LD_VAR 0 4
63440: PPUSH
63441: EMPTY
63442: PPUSH
63443: CALL_OW 1
63447: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63448: LD_ADDR_EXP 50
63452: PUSH
63453: LD_EXP 50
63457: PPUSH
63458: LD_VAR 0 4
63462: PPUSH
63463: EMPTY
63464: PPUSH
63465: CALL_OW 1
63469: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63470: LD_ADDR_EXP 51
63474: PUSH
63475: LD_EXP 51
63479: PPUSH
63480: LD_VAR 0 4
63484: PPUSH
63485: EMPTY
63486: PPUSH
63487: CALL_OW 1
63491: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63492: LD_ADDR_EXP 52
63496: PUSH
63497: LD_EXP 52
63501: PPUSH
63502: LD_VAR 0 4
63506: PPUSH
63507: EMPTY
63508: PPUSH
63509: CALL_OW 1
63513: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63514: LD_ADDR_EXP 53
63518: PUSH
63519: LD_EXP 53
63523: PPUSH
63524: LD_VAR 0 4
63528: PPUSH
63529: EMPTY
63530: PPUSH
63531: CALL_OW 1
63535: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63536: LD_ADDR_EXP 54
63540: PUSH
63541: LD_EXP 54
63545: PPUSH
63546: LD_VAR 0 4
63550: PPUSH
63551: EMPTY
63552: PPUSH
63553: CALL_OW 1
63557: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63558: LD_ADDR_EXP 55
63562: PUSH
63563: LD_EXP 55
63567: PPUSH
63568: LD_VAR 0 4
63572: PPUSH
63573: EMPTY
63574: PPUSH
63575: CALL_OW 1
63579: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63580: LD_ADDR_EXP 56
63584: PUSH
63585: LD_EXP 56
63589: PPUSH
63590: LD_VAR 0 4
63594: PPUSH
63595: EMPTY
63596: PPUSH
63597: CALL_OW 1
63601: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63602: LD_ADDR_EXP 57
63606: PUSH
63607: LD_EXP 57
63611: PPUSH
63612: LD_VAR 0 4
63616: PPUSH
63617: EMPTY
63618: PPUSH
63619: CALL_OW 1
63623: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63624: LD_ADDR_EXP 58
63628: PUSH
63629: LD_EXP 58
63633: PPUSH
63634: LD_VAR 0 4
63638: PPUSH
63639: EMPTY
63640: PPUSH
63641: CALL_OW 1
63645: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63646: LD_ADDR_EXP 59
63650: PUSH
63651: LD_EXP 59
63655: PPUSH
63656: LD_VAR 0 4
63660: PPUSH
63661: EMPTY
63662: PPUSH
63663: CALL_OW 1
63667: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63668: LD_ADDR_EXP 60
63672: PUSH
63673: LD_EXP 60
63677: PPUSH
63678: LD_VAR 0 4
63682: PPUSH
63683: EMPTY
63684: PPUSH
63685: CALL_OW 1
63689: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63690: LD_ADDR_EXP 61
63694: PUSH
63695: LD_EXP 61
63699: PPUSH
63700: LD_VAR 0 4
63704: PPUSH
63705: EMPTY
63706: PPUSH
63707: CALL_OW 1
63711: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63712: LD_ADDR_EXP 63
63716: PUSH
63717: LD_EXP 63
63721: PPUSH
63722: LD_VAR 0 4
63726: PPUSH
63727: EMPTY
63728: PPUSH
63729: CALL_OW 1
63733: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63734: LD_ADDR_EXP 65
63738: PUSH
63739: LD_EXP 65
63743: PPUSH
63744: LD_VAR 0 4
63748: PPUSH
63749: EMPTY
63750: PPUSH
63751: CALL_OW 1
63755: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63756: LD_ADDR_EXP 66
63760: PUSH
63761: LD_EXP 66
63765: PPUSH
63766: LD_VAR 0 4
63770: PPUSH
63771: EMPTY
63772: PPUSH
63773: CALL_OW 1
63777: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63778: LD_ADDR_EXP 67
63782: PUSH
63783: LD_EXP 67
63787: PPUSH
63788: LD_VAR 0 4
63792: PPUSH
63793: EMPTY
63794: PPUSH
63795: CALL_OW 1
63799: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63800: LD_ADDR_EXP 68
63804: PUSH
63805: LD_EXP 68
63809: PPUSH
63810: LD_VAR 0 4
63814: PPUSH
63815: EMPTY
63816: PPUSH
63817: CALL_OW 1
63821: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63822: LD_ADDR_EXP 69
63826: PUSH
63827: LD_EXP 69
63831: PPUSH
63832: LD_VAR 0 4
63836: PPUSH
63837: EMPTY
63838: PPUSH
63839: CALL_OW 1
63843: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63844: LD_ADDR_EXP 70
63848: PUSH
63849: LD_EXP 70
63853: PPUSH
63854: LD_VAR 0 4
63858: PPUSH
63859: EMPTY
63860: PPUSH
63861: CALL_OW 1
63865: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63866: LD_ADDR_EXP 71
63870: PUSH
63871: LD_EXP 71
63875: PPUSH
63876: LD_VAR 0 4
63880: PPUSH
63881: EMPTY
63882: PPUSH
63883: CALL_OW 1
63887: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63888: LD_ADDR_EXP 72
63892: PUSH
63893: LD_EXP 72
63897: PPUSH
63898: LD_VAR 0 4
63902: PPUSH
63903: EMPTY
63904: PPUSH
63905: CALL_OW 1
63909: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63910: LD_ADDR_EXP 73
63914: PUSH
63915: LD_EXP 73
63919: PPUSH
63920: LD_VAR 0 4
63924: PPUSH
63925: EMPTY
63926: PPUSH
63927: CALL_OW 1
63931: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63932: LD_ADDR_EXP 74
63936: PUSH
63937: LD_EXP 74
63941: PPUSH
63942: LD_VAR 0 4
63946: PPUSH
63947: EMPTY
63948: PPUSH
63949: CALL_OW 1
63953: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63954: LD_ADDR_EXP 75
63958: PUSH
63959: LD_EXP 75
63963: PPUSH
63964: LD_VAR 0 4
63968: PPUSH
63969: EMPTY
63970: PPUSH
63971: CALL_OW 1
63975: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63976: LD_ADDR_EXP 76
63980: PUSH
63981: LD_EXP 76
63985: PPUSH
63986: LD_VAR 0 4
63990: PPUSH
63991: EMPTY
63992: PPUSH
63993: CALL_OW 1
63997: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63998: LD_ADDR_EXP 77
64002: PUSH
64003: LD_EXP 77
64007: PPUSH
64008: LD_VAR 0 4
64012: PPUSH
64013: EMPTY
64014: PPUSH
64015: CALL_OW 1
64019: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64020: LD_ADDR_EXP 78
64024: PUSH
64025: LD_EXP 78
64029: PPUSH
64030: LD_VAR 0 4
64034: PPUSH
64035: LD_INT 0
64037: PPUSH
64038: CALL_OW 1
64042: ST_TO_ADDR
// result := base ;
64043: LD_ADDR_VAR 0 3
64047: PUSH
64048: LD_VAR 0 4
64052: ST_TO_ADDR
// end ;
64053: LD_VAR 0 3
64057: RET
// export function MC_Start ( ) ; var i ; begin
64058: LD_INT 0
64060: PPUSH
64061: PPUSH
// for i = 1 to mc_bases do
64062: LD_ADDR_VAR 0 2
64066: PUSH
64067: DOUBLE
64068: LD_INT 1
64070: DEC
64071: ST_TO_ADDR
64072: LD_EXP 36
64076: PUSH
64077: FOR_TO
64078: IFFALSE 65155
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64080: LD_ADDR_EXP 36
64084: PUSH
64085: LD_EXP 36
64089: PPUSH
64090: LD_VAR 0 2
64094: PPUSH
64095: LD_EXP 36
64099: PUSH
64100: LD_VAR 0 2
64104: ARRAY
64105: PUSH
64106: LD_INT 0
64108: DIFF
64109: PPUSH
64110: CALL_OW 1
64114: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64115: LD_ADDR_EXP 37
64119: PUSH
64120: LD_EXP 37
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: EMPTY
64131: PPUSH
64132: CALL_OW 1
64136: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64137: LD_ADDR_EXP 38
64141: PUSH
64142: LD_EXP 38
64146: PPUSH
64147: LD_VAR 0 2
64151: PPUSH
64152: EMPTY
64153: PPUSH
64154: CALL_OW 1
64158: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64159: LD_ADDR_EXP 39
64163: PUSH
64164: LD_EXP 39
64168: PPUSH
64169: LD_VAR 0 2
64173: PPUSH
64174: EMPTY
64175: PPUSH
64176: CALL_OW 1
64180: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64181: LD_ADDR_EXP 40
64185: PUSH
64186: LD_EXP 40
64190: PPUSH
64191: LD_VAR 0 2
64195: PPUSH
64196: EMPTY
64197: PUSH
64198: EMPTY
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PPUSH
64204: CALL_OW 1
64208: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64209: LD_ADDR_EXP 41
64213: PUSH
64214: LD_EXP 41
64218: PPUSH
64219: LD_VAR 0 2
64223: PPUSH
64224: EMPTY
64225: PPUSH
64226: CALL_OW 1
64230: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64231: LD_ADDR_EXP 68
64235: PUSH
64236: LD_EXP 68
64240: PPUSH
64241: LD_VAR 0 2
64245: PPUSH
64246: EMPTY
64247: PPUSH
64248: CALL_OW 1
64252: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64253: LD_ADDR_EXP 42
64257: PUSH
64258: LD_EXP 42
64262: PPUSH
64263: LD_VAR 0 2
64267: PPUSH
64268: EMPTY
64269: PPUSH
64270: CALL_OW 1
64274: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64275: LD_ADDR_EXP 43
64279: PUSH
64280: LD_EXP 43
64284: PPUSH
64285: LD_VAR 0 2
64289: PPUSH
64290: EMPTY
64291: PPUSH
64292: CALL_OW 1
64296: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64297: LD_ADDR_EXP 44
64301: PUSH
64302: LD_EXP 44
64306: PPUSH
64307: LD_VAR 0 2
64311: PPUSH
64312: LD_EXP 36
64316: PUSH
64317: LD_VAR 0 2
64321: ARRAY
64322: PPUSH
64323: LD_INT 2
64325: PUSH
64326: LD_INT 30
64328: PUSH
64329: LD_INT 32
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 30
64338: PUSH
64339: LD_INT 33
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: PPUSH
64351: CALL_OW 72
64355: PPUSH
64356: CALL_OW 1
64360: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64361: LD_ADDR_EXP 45
64365: PUSH
64366: LD_EXP 45
64370: PPUSH
64371: LD_VAR 0 2
64375: PPUSH
64376: LD_EXP 36
64380: PUSH
64381: LD_VAR 0 2
64385: ARRAY
64386: PPUSH
64387: LD_INT 2
64389: PUSH
64390: LD_INT 30
64392: PUSH
64393: LD_INT 32
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 30
64402: PUSH
64403: LD_INT 31
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 58
64417: PUSH
64418: EMPTY
64419: LIST
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PPUSH
64425: CALL_OW 72
64429: PPUSH
64430: CALL_OW 1
64434: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64435: LD_ADDR_EXP 46
64439: PUSH
64440: LD_EXP 46
64444: PPUSH
64445: LD_VAR 0 2
64449: PPUSH
64450: EMPTY
64451: PPUSH
64452: CALL_OW 1
64456: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64457: LD_ADDR_EXP 50
64461: PUSH
64462: LD_EXP 50
64466: PPUSH
64467: LD_VAR 0 2
64471: PPUSH
64472: EMPTY
64473: PPUSH
64474: CALL_OW 1
64478: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64479: LD_ADDR_EXP 49
64483: PUSH
64484: LD_EXP 49
64488: PPUSH
64489: LD_VAR 0 2
64493: PPUSH
64494: EMPTY
64495: PPUSH
64496: CALL_OW 1
64500: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64501: LD_ADDR_EXP 51
64505: PUSH
64506: LD_EXP 51
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: EMPTY
64517: PPUSH
64518: CALL_OW 1
64522: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64523: LD_ADDR_EXP 52
64527: PUSH
64528: LD_EXP 52
64532: PPUSH
64533: LD_VAR 0 2
64537: PPUSH
64538: EMPTY
64539: PPUSH
64540: CALL_OW 1
64544: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64545: LD_ADDR_EXP 53
64549: PUSH
64550: LD_EXP 53
64554: PPUSH
64555: LD_VAR 0 2
64559: PPUSH
64560: EMPTY
64561: PPUSH
64562: CALL_OW 1
64566: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64567: LD_ADDR_EXP 54
64571: PUSH
64572: LD_EXP 54
64576: PPUSH
64577: LD_VAR 0 2
64581: PPUSH
64582: EMPTY
64583: PPUSH
64584: CALL_OW 1
64588: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64589: LD_ADDR_EXP 55
64593: PUSH
64594: LD_EXP 55
64598: PPUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: EMPTY
64605: PPUSH
64606: CALL_OW 1
64610: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64611: LD_ADDR_EXP 56
64615: PUSH
64616: LD_EXP 56
64620: PPUSH
64621: LD_VAR 0 2
64625: PPUSH
64626: EMPTY
64627: PPUSH
64628: CALL_OW 1
64632: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64633: LD_ADDR_EXP 57
64637: PUSH
64638: LD_EXP 57
64642: PPUSH
64643: LD_VAR 0 2
64647: PPUSH
64648: EMPTY
64649: PPUSH
64650: CALL_OW 1
64654: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64655: LD_ADDR_EXP 58
64659: PUSH
64660: LD_EXP 58
64664: PPUSH
64665: LD_VAR 0 2
64669: PPUSH
64670: EMPTY
64671: PPUSH
64672: CALL_OW 1
64676: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64677: LD_ADDR_EXP 47
64681: PUSH
64682: LD_EXP 47
64686: PPUSH
64687: LD_VAR 0 2
64691: PPUSH
64692: LD_INT 0
64694: PPUSH
64695: CALL_OW 1
64699: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64700: LD_ADDR_EXP 60
64704: PUSH
64705: LD_EXP 60
64709: PPUSH
64710: LD_VAR 0 2
64714: PPUSH
64715: LD_INT 0
64717: PPUSH
64718: CALL_OW 1
64722: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64723: LD_ADDR_EXP 48
64727: PUSH
64728: LD_EXP 48
64732: PPUSH
64733: LD_VAR 0 2
64737: PPUSH
64738: EMPTY
64739: PPUSH
64740: CALL_OW 1
64744: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64745: LD_ADDR_EXP 59
64749: PUSH
64750: LD_EXP 59
64754: PPUSH
64755: LD_VAR 0 2
64759: PPUSH
64760: LD_INT 0
64762: PPUSH
64763: CALL_OW 1
64767: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64768: LD_ADDR_EXP 61
64772: PUSH
64773: LD_EXP 61
64777: PPUSH
64778: LD_VAR 0 2
64782: PPUSH
64783: EMPTY
64784: PPUSH
64785: CALL_OW 1
64789: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64790: LD_ADDR_EXP 64
64794: PUSH
64795: LD_EXP 64
64799: PPUSH
64800: LD_VAR 0 2
64804: PPUSH
64805: LD_INT 0
64807: PPUSH
64808: CALL_OW 1
64812: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64813: LD_ADDR_EXP 65
64817: PUSH
64818: LD_EXP 65
64822: PPUSH
64823: LD_VAR 0 2
64827: PPUSH
64828: EMPTY
64829: PPUSH
64830: CALL_OW 1
64834: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64835: LD_ADDR_EXP 66
64839: PUSH
64840: LD_EXP 66
64844: PPUSH
64845: LD_VAR 0 2
64849: PPUSH
64850: EMPTY
64851: PPUSH
64852: CALL_OW 1
64856: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64857: LD_ADDR_EXP 67
64861: PUSH
64862: LD_EXP 67
64866: PPUSH
64867: LD_VAR 0 2
64871: PPUSH
64872: EMPTY
64873: PPUSH
64874: CALL_OW 1
64878: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64879: LD_ADDR_EXP 69
64883: PUSH
64884: LD_EXP 69
64888: PPUSH
64889: LD_VAR 0 2
64893: PPUSH
64894: LD_EXP 36
64898: PUSH
64899: LD_VAR 0 2
64903: ARRAY
64904: PPUSH
64905: LD_INT 2
64907: PUSH
64908: LD_INT 30
64910: PUSH
64911: LD_INT 6
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 30
64920: PUSH
64921: LD_INT 7
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 30
64930: PUSH
64931: LD_INT 8
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: PPUSH
64944: CALL_OW 72
64948: PPUSH
64949: CALL_OW 1
64953: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64954: LD_ADDR_EXP 70
64958: PUSH
64959: LD_EXP 70
64963: PPUSH
64964: LD_VAR 0 2
64968: PPUSH
64969: EMPTY
64970: PPUSH
64971: CALL_OW 1
64975: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64976: LD_ADDR_EXP 71
64980: PUSH
64981: LD_EXP 71
64985: PPUSH
64986: LD_VAR 0 2
64990: PPUSH
64991: EMPTY
64992: PPUSH
64993: CALL_OW 1
64997: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
64998: LD_ADDR_EXP 72
65002: PUSH
65003: LD_EXP 72
65007: PPUSH
65008: LD_VAR 0 2
65012: PPUSH
65013: EMPTY
65014: PPUSH
65015: CALL_OW 1
65019: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65020: LD_ADDR_EXP 73
65024: PUSH
65025: LD_EXP 73
65029: PPUSH
65030: LD_VAR 0 2
65034: PPUSH
65035: EMPTY
65036: PPUSH
65037: CALL_OW 1
65041: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65042: LD_ADDR_EXP 74
65046: PUSH
65047: LD_EXP 74
65051: PPUSH
65052: LD_VAR 0 2
65056: PPUSH
65057: EMPTY
65058: PPUSH
65059: CALL_OW 1
65063: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65064: LD_ADDR_EXP 75
65068: PUSH
65069: LD_EXP 75
65073: PPUSH
65074: LD_VAR 0 2
65078: PPUSH
65079: EMPTY
65080: PPUSH
65081: CALL_OW 1
65085: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65086: LD_ADDR_EXP 76
65090: PUSH
65091: LD_EXP 76
65095: PPUSH
65096: LD_VAR 0 2
65100: PPUSH
65101: EMPTY
65102: PPUSH
65103: CALL_OW 1
65107: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65108: LD_ADDR_EXP 77
65112: PUSH
65113: LD_EXP 77
65117: PPUSH
65118: LD_VAR 0 2
65122: PPUSH
65123: EMPTY
65124: PPUSH
65125: CALL_OW 1
65129: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65130: LD_ADDR_EXP 78
65134: PUSH
65135: LD_EXP 78
65139: PPUSH
65140: LD_VAR 0 2
65144: PPUSH
65145: LD_INT 0
65147: PPUSH
65148: CALL_OW 1
65152: ST_TO_ADDR
// end ;
65153: GO 64077
65155: POP
65156: POP
// MC_InitSides ( ) ;
65157: CALL 65443 0 0
// MC_InitResearch ( ) ;
65161: CALL 65182 0 0
// CustomInitMacro ( ) ;
65165: CALL 1428 0 0
// skirmish := true ;
65169: LD_ADDR_EXP 34
65173: PUSH
65174: LD_INT 1
65176: ST_TO_ADDR
// end ;
65177: LD_VAR 0 1
65181: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65182: LD_INT 0
65184: PPUSH
65185: PPUSH
65186: PPUSH
65187: PPUSH
65188: PPUSH
65189: PPUSH
// if not mc_bases then
65190: LD_EXP 36
65194: NOT
65195: IFFALSE 65199
// exit ;
65197: GO 65438
// for i = 1 to 8 do
65199: LD_ADDR_VAR 0 2
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_INT 8
65211: PUSH
65212: FOR_TO
65213: IFFALSE 65239
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65215: LD_ADDR_EXP 63
65219: PUSH
65220: LD_EXP 63
65224: PPUSH
65225: LD_VAR 0 2
65229: PPUSH
65230: EMPTY
65231: PPUSH
65232: CALL_OW 1
65236: ST_TO_ADDR
65237: GO 65212
65239: POP
65240: POP
// tmp := [ ] ;
65241: LD_ADDR_VAR 0 5
65245: PUSH
65246: EMPTY
65247: ST_TO_ADDR
// for i = 1 to mc_sides do
65248: LD_ADDR_VAR 0 2
65252: PUSH
65253: DOUBLE
65254: LD_INT 1
65256: DEC
65257: ST_TO_ADDR
65258: LD_EXP 62
65262: PUSH
65263: FOR_TO
65264: IFFALSE 65322
// if not mc_sides [ i ] in tmp then
65266: LD_EXP 62
65270: PUSH
65271: LD_VAR 0 2
65275: ARRAY
65276: PUSH
65277: LD_VAR 0 5
65281: IN
65282: NOT
65283: IFFALSE 65320
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65285: LD_ADDR_VAR 0 5
65289: PUSH
65290: LD_VAR 0 5
65294: PPUSH
65295: LD_VAR 0 5
65299: PUSH
65300: LD_INT 1
65302: PLUS
65303: PPUSH
65304: LD_EXP 62
65308: PUSH
65309: LD_VAR 0 2
65313: ARRAY
65314: PPUSH
65315: CALL_OW 2
65319: ST_TO_ADDR
65320: GO 65263
65322: POP
65323: POP
// if not tmp then
65324: LD_VAR 0 5
65328: NOT
65329: IFFALSE 65333
// exit ;
65331: GO 65438
// for j in tmp do
65333: LD_ADDR_VAR 0 3
65337: PUSH
65338: LD_VAR 0 5
65342: PUSH
65343: FOR_IN
65344: IFFALSE 65436
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65346: LD_ADDR_VAR 0 6
65350: PUSH
65351: LD_INT 22
65353: PUSH
65354: LD_VAR 0 3
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PPUSH
65363: CALL_OW 69
65367: ST_TO_ADDR
// if not un then
65368: LD_VAR 0 6
65372: NOT
65373: IFFALSE 65377
// continue ;
65375: GO 65343
// nation := GetNation ( un [ 1 ] ) ;
65377: LD_ADDR_VAR 0 4
65381: PUSH
65382: LD_VAR 0 6
65386: PUSH
65387: LD_INT 1
65389: ARRAY
65390: PPUSH
65391: CALL_OW 248
65395: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65396: LD_ADDR_EXP 63
65400: PUSH
65401: LD_EXP 63
65405: PPUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: LD_VAR 0 3
65415: PPUSH
65416: LD_VAR 0 4
65420: PPUSH
65421: LD_INT 1
65423: PPUSH
65424: CALL 19406 0 3
65428: PPUSH
65429: CALL_OW 1
65433: ST_TO_ADDR
// end ;
65434: GO 65343
65436: POP
65437: POP
// end ;
65438: LD_VAR 0 1
65442: RET
// export function MC_InitSides ( ) ; var i ; begin
65443: LD_INT 0
65445: PPUSH
65446: PPUSH
// if not mc_bases then
65447: LD_EXP 36
65451: NOT
65452: IFFALSE 65456
// exit ;
65454: GO 65530
// for i = 1 to mc_bases do
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: DOUBLE
65462: LD_INT 1
65464: DEC
65465: ST_TO_ADDR
65466: LD_EXP 36
65470: PUSH
65471: FOR_TO
65472: IFFALSE 65528
// if mc_bases [ i ] then
65474: LD_EXP 36
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: IFFALSE 65526
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65486: LD_ADDR_EXP 62
65490: PUSH
65491: LD_EXP 62
65495: PPUSH
65496: LD_VAR 0 2
65500: PPUSH
65501: LD_EXP 36
65505: PUSH
65506: LD_VAR 0 2
65510: ARRAY
65511: PUSH
65512: LD_INT 1
65514: ARRAY
65515: PPUSH
65516: CALL_OW 255
65520: PPUSH
65521: CALL_OW 1
65525: ST_TO_ADDR
65526: GO 65471
65528: POP
65529: POP
// end ;
65530: LD_VAR 0 1
65534: RET
// every 0 0$01 trigger skirmish do
65535: LD_EXP 34
65539: IFFALSE 65693
65541: GO 65543
65543: DISABLE
// begin enable ;
65544: ENABLE
// MC_CheckBuildings ( ) ;
65545: CALL 70182 0 0
// MC_CheckPeopleLife ( ) ;
65549: CALL 70307 0 0
// RaiseSailEvent ( 100 ) ;
65553: LD_INT 100
65555: PPUSH
65556: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65560: LD_INT 103
65562: PPUSH
65563: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65567: LD_INT 104
65569: PPUSH
65570: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65574: LD_INT 105
65576: PPUSH
65577: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65581: LD_INT 106
65583: PPUSH
65584: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65588: LD_INT 107
65590: PPUSH
65591: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65595: LD_INT 108
65597: PPUSH
65598: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65602: LD_INT 109
65604: PPUSH
65605: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65609: LD_INT 110
65611: PPUSH
65612: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65616: LD_INT 111
65618: PPUSH
65619: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65623: LD_INT 112
65625: PPUSH
65626: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65630: LD_INT 113
65632: PPUSH
65633: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65637: LD_INT 120
65639: PPUSH
65640: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65644: LD_INT 121
65646: PPUSH
65647: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65651: LD_INT 122
65653: PPUSH
65654: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65658: LD_INT 123
65660: PPUSH
65661: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65665: LD_INT 124
65667: PPUSH
65668: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65672: LD_INT 125
65674: PPUSH
65675: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65679: LD_INT 126
65681: PPUSH
65682: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65686: LD_INT 200
65688: PPUSH
65689: CALL_OW 427
// end ;
65693: END
// on SailEvent ( event ) do begin if event < 100 then
65694: LD_VAR 0 1
65698: PUSH
65699: LD_INT 100
65701: LESS
65702: IFFALSE 65713
// CustomEvent ( event ) ;
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL 18605 0 1
// if event = 100 then
65713: LD_VAR 0 1
65717: PUSH
65718: LD_INT 100
65720: EQUAL
65721: IFFALSE 65727
// MC_ClassManager ( ) ;
65723: CALL 66119 0 0
// if event = 101 then
65727: LD_VAR 0 1
65731: PUSH
65732: LD_INT 101
65734: EQUAL
65735: IFFALSE 65741
// MC_RepairBuildings ( ) ;
65737: CALL 70903 0 0
// if event = 102 then
65741: LD_VAR 0 1
65745: PUSH
65746: LD_INT 102
65748: EQUAL
65749: IFFALSE 65755
// MC_Heal ( ) ;
65751: CALL 71309 0 0
// if event = 103 then
65755: LD_VAR 0 1
65759: PUSH
65760: LD_INT 103
65762: EQUAL
65763: IFFALSE 65769
// MC_Build ( ) ;
65765: CALL 71731 0 0
// if event = 104 then
65769: LD_VAR 0 1
65773: PUSH
65774: LD_INT 104
65776: EQUAL
65777: IFFALSE 65783
// MC_TurretWeapon ( ) ;
65779: CALL 73344 0 0
// if event = 105 then
65783: LD_VAR 0 1
65787: PUSH
65788: LD_INT 105
65790: EQUAL
65791: IFFALSE 65797
// MC_BuildUpgrade ( ) ;
65793: CALL 72895 0 0
// if event = 106 then
65797: LD_VAR 0 1
65801: PUSH
65802: LD_INT 106
65804: EQUAL
65805: IFFALSE 65811
// MC_PlantMines ( ) ;
65807: CALL 73774 0 0
// if event = 107 then
65811: LD_VAR 0 1
65815: PUSH
65816: LD_INT 107
65818: EQUAL
65819: IFFALSE 65825
// MC_CollectCrates ( ) ;
65821: CALL 74808 0 0
// if event = 108 then
65825: LD_VAR 0 1
65829: PUSH
65830: LD_INT 108
65832: EQUAL
65833: IFFALSE 65839
// MC_LinkRemoteControl ( ) ;
65835: CALL 76565 0 0
// if event = 109 then
65839: LD_VAR 0 1
65843: PUSH
65844: LD_INT 109
65846: EQUAL
65847: IFFALSE 65853
// MC_ProduceVehicle ( ) ;
65849: CALL 76746 0 0
// if event = 110 then
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 110
65860: EQUAL
65861: IFFALSE 65867
// MC_SendAttack ( ) ;
65863: CALL 77227 0 0
// if event = 111 then
65867: LD_VAR 0 1
65871: PUSH
65872: LD_INT 111
65874: EQUAL
65875: IFFALSE 65881
// MC_Defend ( ) ;
65877: CALL 77335 0 0
// if event = 112 then
65881: LD_VAR 0 1
65885: PUSH
65886: LD_INT 112
65888: EQUAL
65889: IFFALSE 65895
// MC_Research ( ) ;
65891: CALL 77940 0 0
// if event = 113 then
65895: LD_VAR 0 1
65899: PUSH
65900: LD_INT 113
65902: EQUAL
65903: IFFALSE 65909
// MC_MinesTrigger ( ) ;
65905: CALL 79054 0 0
// if event = 120 then
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 120
65916: EQUAL
65917: IFFALSE 65923
// MC_RepairVehicle ( ) ;
65919: CALL 79153 0 0
// if event = 121 then
65923: LD_VAR 0 1
65927: PUSH
65928: LD_INT 121
65930: EQUAL
65931: IFFALSE 65937
// MC_TameApe ( ) ;
65933: CALL 79860 0 0
// if event = 122 then
65937: LD_VAR 0 1
65941: PUSH
65942: LD_INT 122
65944: EQUAL
65945: IFFALSE 65951
// MC_ChangeApeClass ( ) ;
65947: CALL 80689 0 0
// if event = 123 then
65951: LD_VAR 0 1
65955: PUSH
65956: LD_INT 123
65958: EQUAL
65959: IFFALSE 65965
// MC_Bazooka ( ) ;
65961: CALL 81339 0 0
// if event = 124 then
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 124
65972: EQUAL
65973: IFFALSE 65979
// MC_TeleportExit ( ) ;
65975: CALL 81537 0 0
// if event = 125 then
65979: LD_VAR 0 1
65983: PUSH
65984: LD_INT 125
65986: EQUAL
65987: IFFALSE 65993
// MC_Deposits ( ) ;
65989: CALL 82184 0 0
// if event = 126 then
65993: LD_VAR 0 1
65997: PUSH
65998: LD_INT 126
66000: EQUAL
66001: IFFALSE 66007
// MC_RemoteDriver ( ) ;
66003: CALL 82809 0 0
// if event = 200 then
66007: LD_VAR 0 1
66011: PUSH
66012: LD_INT 200
66014: EQUAL
66015: IFFALSE 66021
// MC_Idle ( ) ;
66017: CALL 84542 0 0
// end ;
66021: PPOPN 1
66023: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66024: LD_INT 0
66026: PPUSH
66027: PPUSH
// if not mc_bases [ base ] or not tag then
66028: LD_EXP 36
66032: PUSH
66033: LD_VAR 0 1
66037: ARRAY
66038: NOT
66039: PUSH
66040: LD_VAR 0 2
66044: NOT
66045: OR
66046: IFFALSE 66050
// exit ;
66048: GO 66114
// for i in mc_bases [ base ] union mc_ape [ base ] do
66050: LD_ADDR_VAR 0 4
66054: PUSH
66055: LD_EXP 36
66059: PUSH
66060: LD_VAR 0 1
66064: ARRAY
66065: PUSH
66066: LD_EXP 65
66070: PUSH
66071: LD_VAR 0 1
66075: ARRAY
66076: UNION
66077: PUSH
66078: FOR_IN
66079: IFFALSE 66112
// if GetTag ( i ) = tag then
66081: LD_VAR 0 4
66085: PPUSH
66086: CALL_OW 110
66090: PUSH
66091: LD_VAR 0 2
66095: EQUAL
66096: IFFALSE 66110
// SetTag ( i , 0 ) ;
66098: LD_VAR 0 4
66102: PPUSH
66103: LD_INT 0
66105: PPUSH
66106: CALL_OW 109
66110: GO 66078
66112: POP
66113: POP
// end ;
66114: LD_VAR 0 3
66118: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
// if not mc_bases then
66129: LD_EXP 36
66133: NOT
66134: IFFALSE 66138
// exit ;
66136: GO 66596
// for i = 1 to mc_bases do
66138: LD_ADDR_VAR 0 2
66142: PUSH
66143: DOUBLE
66144: LD_INT 1
66146: DEC
66147: ST_TO_ADDR
66148: LD_EXP 36
66152: PUSH
66153: FOR_TO
66154: IFFALSE 66594
// begin tmp := MC_ClassCheckReq ( i ) ;
66156: LD_ADDR_VAR 0 4
66160: PUSH
66161: LD_VAR 0 2
66165: PPUSH
66166: CALL 66601 0 1
66170: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66171: LD_ADDR_EXP 77
66175: PUSH
66176: LD_EXP 77
66180: PPUSH
66181: LD_VAR 0 2
66185: PPUSH
66186: LD_VAR 0 4
66190: PPUSH
66191: CALL_OW 1
66195: ST_TO_ADDR
// if not tmp then
66196: LD_VAR 0 4
66200: NOT
66201: IFFALSE 66205
// continue ;
66203: GO 66153
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_EXP 36
66214: PUSH
66215: LD_VAR 0 2
66219: ARRAY
66220: PPUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 30
66226: PUSH
66227: LD_INT 4
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 30
66236: PUSH
66237: LD_INT 5
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: PPUSH
66249: CALL_OW 72
66253: PUSH
66254: LD_EXP 36
66258: PUSH
66259: LD_VAR 0 2
66263: ARRAY
66264: PPUSH
66265: LD_INT 2
66267: PUSH
66268: LD_INT 30
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 30
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: PPUSH
66293: CALL_OW 72
66297: PUSH
66298: LD_EXP 36
66302: PUSH
66303: LD_VAR 0 2
66307: ARRAY
66308: PPUSH
66309: LD_INT 30
66311: PUSH
66312: LD_INT 3
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PPUSH
66319: CALL_OW 72
66323: PUSH
66324: LD_EXP 36
66328: PUSH
66329: LD_VAR 0 2
66333: ARRAY
66334: PPUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 30
66340: PUSH
66341: LD_INT 6
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 30
66350: PUSH
66351: LD_INT 7
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 30
66360: PUSH
66361: LD_INT 8
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: PPUSH
66374: CALL_OW 72
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// for j = 1 to 4 do
66385: LD_ADDR_VAR 0 3
66389: PUSH
66390: DOUBLE
66391: LD_INT 1
66393: DEC
66394: ST_TO_ADDR
66395: LD_INT 4
66397: PUSH
66398: FOR_TO
66399: IFFALSE 66590
// begin if not tmp [ j ] then
66401: LD_VAR 0 4
66405: PUSH
66406: LD_VAR 0 3
66410: ARRAY
66411: NOT
66412: IFFALSE 66416
// continue ;
66414: GO 66398
// for p in tmp [ j ] do
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: LD_VAR 0 4
66425: PUSH
66426: LD_VAR 0 3
66430: ARRAY
66431: PUSH
66432: FOR_IN
66433: IFFALSE 66586
// begin if not b [ j ] then
66435: LD_VAR 0 6
66439: PUSH
66440: LD_VAR 0 3
66444: ARRAY
66445: NOT
66446: IFFALSE 66450
// break ;
66448: GO 66586
// e := 0 ;
66450: LD_ADDR_VAR 0 7
66454: PUSH
66455: LD_INT 0
66457: ST_TO_ADDR
// for k in b [ j ] do
66458: LD_ADDR_VAR 0 8
66462: PUSH
66463: LD_VAR 0 6
66467: PUSH
66468: LD_VAR 0 3
66472: ARRAY
66473: PUSH
66474: FOR_IN
66475: IFFALSE 66502
// if IsNotFull ( k ) then
66477: LD_VAR 0 8
66481: PPUSH
66482: CALL 23395 0 1
66486: IFFALSE 66500
// begin e := k ;
66488: LD_ADDR_VAR 0 7
66492: PUSH
66493: LD_VAR 0 8
66497: ST_TO_ADDR
// break ;
66498: GO 66502
// end ;
66500: GO 66474
66502: POP
66503: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66504: LD_VAR 0 7
66508: PUSH
66509: LD_VAR 0 5
66513: PPUSH
66514: LD_VAR 0 7
66518: PPUSH
66519: CALL 60447 0 2
66523: NOT
66524: AND
66525: IFFALSE 66584
// begin if IsInUnit ( p ) then
66527: LD_VAR 0 5
66531: PPUSH
66532: CALL_OW 310
66536: IFFALSE 66547
// ComExitBuilding ( p ) ;
66538: LD_VAR 0 5
66542: PPUSH
66543: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66547: LD_VAR 0 5
66551: PPUSH
66552: LD_VAR 0 7
66556: PPUSH
66557: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66561: LD_VAR 0 5
66565: PPUSH
66566: LD_VAR 0 3
66570: PPUSH
66571: CALL_OW 183
// AddComExitBuilding ( p ) ;
66575: LD_VAR 0 5
66579: PPUSH
66580: CALL_OW 182
// end ; end ;
66584: GO 66432
66586: POP
66587: POP
// end ;
66588: GO 66398
66590: POP
66591: POP
// end ;
66592: GO 66153
66594: POP
66595: POP
// end ;
66596: LD_VAR 0 1
66600: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66601: LD_INT 0
66603: PPUSH
66604: PPUSH
66605: PPUSH
66606: PPUSH
66607: PPUSH
66608: PPUSH
66609: PPUSH
66610: PPUSH
66611: PPUSH
66612: PPUSH
66613: PPUSH
66614: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66615: LD_VAR 0 1
66619: NOT
66620: PUSH
66621: LD_EXP 36
66625: PUSH
66626: LD_VAR 0 1
66630: ARRAY
66631: NOT
66632: OR
66633: PUSH
66634: LD_EXP 36
66638: PUSH
66639: LD_VAR 0 1
66643: ARRAY
66644: PPUSH
66645: LD_INT 2
66647: PUSH
66648: LD_INT 30
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 30
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PPUSH
66673: CALL_OW 72
66677: NOT
66678: OR
66679: IFFALSE 66683
// exit ;
66681: GO 70177
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66683: LD_ADDR_VAR 0 4
66687: PUSH
66688: LD_EXP 36
66692: PUSH
66693: LD_VAR 0 1
66697: ARRAY
66698: PPUSH
66699: LD_INT 2
66701: PUSH
66702: LD_INT 25
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 25
66714: PUSH
66715: LD_INT 2
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 25
66724: PUSH
66725: LD_INT 3
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 25
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 25
66744: PUSH
66745: LD_INT 5
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 25
66754: PUSH
66755: LD_INT 8
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 25
66764: PUSH
66765: LD_INT 9
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: PPUSH
66782: CALL_OW 72
66786: ST_TO_ADDR
// for i in tmp do
66787: LD_ADDR_VAR 0 3
66791: PUSH
66792: LD_VAR 0 4
66796: PUSH
66797: FOR_IN
66798: IFFALSE 66829
// if GetTag ( i ) then
66800: LD_VAR 0 3
66804: PPUSH
66805: CALL_OW 110
66809: IFFALSE 66827
// tmp := tmp diff i ;
66811: LD_ADDR_VAR 0 4
66815: PUSH
66816: LD_VAR 0 4
66820: PUSH
66821: LD_VAR 0 3
66825: DIFF
66826: ST_TO_ADDR
66827: GO 66797
66829: POP
66830: POP
// if not tmp then
66831: LD_VAR 0 4
66835: NOT
66836: IFFALSE 66840
// exit ;
66838: GO 70177
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66840: LD_ADDR_VAR 0 5
66844: PUSH
66845: LD_EXP 36
66849: PUSH
66850: LD_VAR 0 1
66854: ARRAY
66855: PPUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 25
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 25
66871: PUSH
66872: LD_INT 5
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 25
66881: PUSH
66882: LD_INT 8
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 25
66891: PUSH
66892: LD_INT 9
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 72
66910: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66911: LD_ADDR_VAR 0 6
66915: PUSH
66916: LD_EXP 36
66920: PUSH
66921: LD_VAR 0 1
66925: ARRAY
66926: PPUSH
66927: LD_INT 25
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PPUSH
66937: CALL_OW 72
66941: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66942: LD_ADDR_VAR 0 7
66946: PUSH
66947: LD_EXP 36
66951: PUSH
66952: LD_VAR 0 1
66956: ARRAY
66957: PPUSH
66958: LD_INT 25
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PPUSH
66968: CALL_OW 72
66972: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66973: LD_ADDR_VAR 0 8
66977: PUSH
66978: LD_EXP 36
66982: PUSH
66983: LD_VAR 0 1
66987: ARRAY
66988: PPUSH
66989: LD_INT 25
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 24
67001: PUSH
67002: LD_INT 251
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PPUSH
67013: CALL_OW 72
67017: ST_TO_ADDR
// if mc_scan [ base ] then
67018: LD_EXP 59
67022: PUSH
67023: LD_VAR 0 1
67027: ARRAY
67028: IFFALSE 67489
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67030: LD_ADDR_EXP 78
67034: PUSH
67035: LD_EXP 78
67039: PPUSH
67040: LD_VAR 0 1
67044: PPUSH
67045: LD_INT 4
67047: PPUSH
67048: CALL_OW 1
67052: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67053: LD_ADDR_VAR 0 12
67057: PUSH
67058: LD_EXP 36
67062: PUSH
67063: LD_VAR 0 1
67067: ARRAY
67068: PPUSH
67069: LD_INT 2
67071: PUSH
67072: LD_INT 30
67074: PUSH
67075: LD_INT 4
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 30
67084: PUSH
67085: LD_INT 5
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: PPUSH
67097: CALL_OW 72
67101: ST_TO_ADDR
// if not b then
67102: LD_VAR 0 12
67106: NOT
67107: IFFALSE 67111
// exit ;
67109: GO 70177
// p := [ ] ;
67111: LD_ADDR_VAR 0 11
67115: PUSH
67116: EMPTY
67117: ST_TO_ADDR
// if sci >= 2 then
67118: LD_VAR 0 8
67122: PUSH
67123: LD_INT 2
67125: GREATEREQUAL
67126: IFFALSE 67157
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67128: LD_ADDR_VAR 0 8
67132: PUSH
67133: LD_VAR 0 8
67137: PUSH
67138: LD_INT 1
67140: ARRAY
67141: PUSH
67142: LD_VAR 0 8
67146: PUSH
67147: LD_INT 2
67149: ARRAY
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: ST_TO_ADDR
67155: GO 67218
// if sci = 1 then
67157: LD_VAR 0 8
67161: PUSH
67162: LD_INT 1
67164: EQUAL
67165: IFFALSE 67186
// sci := [ sci [ 1 ] ] else
67167: LD_ADDR_VAR 0 8
67171: PUSH
67172: LD_VAR 0 8
67176: PUSH
67177: LD_INT 1
67179: ARRAY
67180: PUSH
67181: EMPTY
67182: LIST
67183: ST_TO_ADDR
67184: GO 67218
// if sci = 0 then
67186: LD_VAR 0 8
67190: PUSH
67191: LD_INT 0
67193: EQUAL
67194: IFFALSE 67218
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67196: LD_ADDR_VAR 0 11
67200: PUSH
67201: LD_VAR 0 4
67205: PPUSH
67206: LD_INT 4
67208: PPUSH
67209: CALL 60310 0 2
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: ST_TO_ADDR
// if eng > 4 then
67218: LD_VAR 0 6
67222: PUSH
67223: LD_INT 4
67225: GREATER
67226: IFFALSE 67272
// for i = eng downto 4 do
67228: LD_ADDR_VAR 0 3
67232: PUSH
67233: DOUBLE
67234: LD_VAR 0 6
67238: INC
67239: ST_TO_ADDR
67240: LD_INT 4
67242: PUSH
67243: FOR_DOWNTO
67244: IFFALSE 67270
// eng := eng diff eng [ i ] ;
67246: LD_ADDR_VAR 0 6
67250: PUSH
67251: LD_VAR 0 6
67255: PUSH
67256: LD_VAR 0 6
67260: PUSH
67261: LD_VAR 0 3
67265: ARRAY
67266: DIFF
67267: ST_TO_ADDR
67268: GO 67243
67270: POP
67271: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67272: LD_ADDR_VAR 0 4
67276: PUSH
67277: LD_VAR 0 4
67281: PUSH
67282: LD_VAR 0 5
67286: PUSH
67287: LD_VAR 0 6
67291: UNION
67292: PUSH
67293: LD_VAR 0 7
67297: UNION
67298: PUSH
67299: LD_VAR 0 8
67303: UNION
67304: DIFF
67305: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67306: LD_ADDR_VAR 0 13
67310: PUSH
67311: LD_EXP 36
67315: PUSH
67316: LD_VAR 0 1
67320: ARRAY
67321: PPUSH
67322: LD_INT 2
67324: PUSH
67325: LD_INT 30
67327: PUSH
67328: LD_INT 32
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 30
67337: PUSH
67338: LD_INT 31
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 72
67354: PUSH
67355: LD_EXP 36
67359: PUSH
67360: LD_VAR 0 1
67364: ARRAY
67365: PPUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 30
67371: PUSH
67372: LD_INT 4
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 30
67381: PUSH
67382: LD_INT 5
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: PPUSH
67394: CALL_OW 72
67398: PUSH
67399: LD_INT 6
67401: MUL
67402: PLUS
67403: ST_TO_ADDR
// if bcount < tmp then
67404: LD_VAR 0 13
67408: PUSH
67409: LD_VAR 0 4
67413: LESS
67414: IFFALSE 67460
// for i = tmp downto bcount do
67416: LD_ADDR_VAR 0 3
67420: PUSH
67421: DOUBLE
67422: LD_VAR 0 4
67426: INC
67427: ST_TO_ADDR
67428: LD_VAR 0 13
67432: PUSH
67433: FOR_DOWNTO
67434: IFFALSE 67458
// tmp := Delete ( tmp , tmp ) ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_VAR 0 4
67445: PPUSH
67446: LD_VAR 0 4
67450: PPUSH
67451: CALL_OW 3
67455: ST_TO_ADDR
67456: GO 67433
67458: POP
67459: POP
// result := [ tmp , 0 , 0 , p ] ;
67460: LD_ADDR_VAR 0 2
67464: PUSH
67465: LD_VAR 0 4
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: LD_VAR 0 11
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: ST_TO_ADDR
// exit ;
67487: GO 70177
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67489: LD_EXP 36
67493: PUSH
67494: LD_VAR 0 1
67498: ARRAY
67499: PPUSH
67500: LD_INT 2
67502: PUSH
67503: LD_INT 30
67505: PUSH
67506: LD_INT 6
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 30
67515: PUSH
67516: LD_INT 7
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 30
67525: PUSH
67526: LD_INT 8
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: PPUSH
67539: CALL_OW 72
67543: NOT
67544: PUSH
67545: LD_EXP 36
67549: PUSH
67550: LD_VAR 0 1
67554: ARRAY
67555: PPUSH
67556: LD_INT 30
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PPUSH
67566: CALL_OW 72
67570: NOT
67571: AND
67572: IFFALSE 67644
// begin if eng = tmp then
67574: LD_VAR 0 6
67578: PUSH
67579: LD_VAR 0 4
67583: EQUAL
67584: IFFALSE 67588
// exit ;
67586: GO 70177
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67588: LD_ADDR_EXP 78
67592: PUSH
67593: LD_EXP 78
67597: PPUSH
67598: LD_VAR 0 1
67602: PPUSH
67603: LD_INT 1
67605: PPUSH
67606: CALL_OW 1
67610: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_VAR 0 4
67623: PUSH
67624: LD_VAR 0 6
67628: DIFF
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// exit ;
67642: GO 70177
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67644: LD_EXP 63
67648: PUSH
67649: LD_EXP 62
67653: PUSH
67654: LD_VAR 0 1
67658: ARRAY
67659: ARRAY
67660: PUSH
67661: LD_EXP 36
67665: PUSH
67666: LD_VAR 0 1
67670: ARRAY
67671: PPUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 30
67677: PUSH
67678: LD_INT 6
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 30
67687: PUSH
67688: LD_INT 7
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 30
67697: PUSH
67698: LD_INT 8
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: PPUSH
67711: CALL_OW 72
67715: AND
67716: PUSH
67717: LD_EXP 36
67721: PUSH
67722: LD_VAR 0 1
67726: ARRAY
67727: PPUSH
67728: LD_INT 30
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PPUSH
67738: CALL_OW 72
67742: NOT
67743: AND
67744: IFFALSE 67958
// begin if sci >= 6 then
67746: LD_VAR 0 8
67750: PUSH
67751: LD_INT 6
67753: GREATEREQUAL
67754: IFFALSE 67758
// exit ;
67756: GO 70177
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67758: LD_ADDR_EXP 78
67762: PUSH
67763: LD_EXP 78
67767: PPUSH
67768: LD_VAR 0 1
67772: PPUSH
67773: LD_INT 2
67775: PPUSH
67776: CALL_OW 1
67780: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67781: LD_ADDR_VAR 0 9
67785: PUSH
67786: LD_VAR 0 4
67790: PUSH
67791: LD_VAR 0 8
67795: DIFF
67796: PPUSH
67797: LD_INT 4
67799: PPUSH
67800: CALL 60310 0 2
67804: ST_TO_ADDR
// p := [ ] ;
67805: LD_ADDR_VAR 0 11
67809: PUSH
67810: EMPTY
67811: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67812: LD_VAR 0 8
67816: PUSH
67817: LD_INT 6
67819: LESS
67820: PUSH
67821: LD_VAR 0 9
67825: PUSH
67826: LD_INT 6
67828: GREATER
67829: AND
67830: IFFALSE 67911
// begin for i = 1 to 6 - sci do
67832: LD_ADDR_VAR 0 3
67836: PUSH
67837: DOUBLE
67838: LD_INT 1
67840: DEC
67841: ST_TO_ADDR
67842: LD_INT 6
67844: PUSH
67845: LD_VAR 0 8
67849: MINUS
67850: PUSH
67851: FOR_TO
67852: IFFALSE 67907
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67854: LD_ADDR_VAR 0 11
67858: PUSH
67859: LD_VAR 0 11
67863: PPUSH
67864: LD_VAR 0 11
67868: PUSH
67869: LD_INT 1
67871: PLUS
67872: PPUSH
67873: LD_VAR 0 9
67877: PUSH
67878: LD_INT 1
67880: ARRAY
67881: PPUSH
67882: CALL_OW 2
67886: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67887: LD_ADDR_VAR 0 9
67891: PUSH
67892: LD_VAR 0 9
67896: PPUSH
67897: LD_INT 1
67899: PPUSH
67900: CALL_OW 3
67904: ST_TO_ADDR
// end ;
67905: GO 67851
67907: POP
67908: POP
// end else
67909: GO 67931
// if sort then
67911: LD_VAR 0 9
67915: IFFALSE 67931
// p := sort [ 1 ] ;
67917: LD_ADDR_VAR 0 11
67921: PUSH
67922: LD_VAR 0 9
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67931: LD_ADDR_VAR 0 2
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_VAR 0 11
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: ST_TO_ADDR
// exit ;
67956: GO 70177
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67958: LD_EXP 63
67962: PUSH
67963: LD_EXP 62
67967: PUSH
67968: LD_VAR 0 1
67972: ARRAY
67973: ARRAY
67974: PUSH
67975: LD_EXP 36
67979: PUSH
67980: LD_VAR 0 1
67984: ARRAY
67985: PPUSH
67986: LD_INT 2
67988: PUSH
67989: LD_INT 30
67991: PUSH
67992: LD_INT 6
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 30
68001: PUSH
68002: LD_INT 7
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 30
68011: PUSH
68012: LD_INT 8
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: PPUSH
68025: CALL_OW 72
68029: AND
68030: PUSH
68031: LD_EXP 36
68035: PUSH
68036: LD_VAR 0 1
68040: ARRAY
68041: PPUSH
68042: LD_INT 30
68044: PUSH
68045: LD_INT 3
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PPUSH
68052: CALL_OW 72
68056: AND
68057: IFFALSE 68791
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68059: LD_ADDR_EXP 78
68063: PUSH
68064: LD_EXP 78
68068: PPUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: LD_INT 3
68076: PPUSH
68077: CALL_OW 1
68081: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68082: LD_ADDR_VAR 0 2
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: ST_TO_ADDR
// if not eng then
68105: LD_VAR 0 6
68109: NOT
68110: IFFALSE 68173
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68112: LD_ADDR_VAR 0 11
68116: PUSH
68117: LD_VAR 0 4
68121: PPUSH
68122: LD_INT 2
68124: PPUSH
68125: CALL 60310 0 2
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68134: LD_ADDR_VAR 0 2
68138: PUSH
68139: LD_VAR 0 2
68143: PPUSH
68144: LD_INT 2
68146: PPUSH
68147: LD_VAR 0 11
68151: PPUSH
68152: CALL_OW 1
68156: ST_TO_ADDR
// tmp := tmp diff p ;
68157: LD_ADDR_VAR 0 4
68161: PUSH
68162: LD_VAR 0 4
68166: PUSH
68167: LD_VAR 0 11
68171: DIFF
68172: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68173: LD_VAR 0 4
68177: PUSH
68178: LD_VAR 0 8
68182: PUSH
68183: LD_INT 6
68185: LESS
68186: AND
68187: IFFALSE 68375
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68189: LD_ADDR_VAR 0 9
68193: PUSH
68194: LD_VAR 0 4
68198: PUSH
68199: LD_VAR 0 8
68203: PUSH
68204: LD_VAR 0 7
68208: UNION
68209: DIFF
68210: PPUSH
68211: LD_INT 4
68213: PPUSH
68214: CALL 60310 0 2
68218: ST_TO_ADDR
// p := [ ] ;
68219: LD_ADDR_VAR 0 11
68223: PUSH
68224: EMPTY
68225: ST_TO_ADDR
// if sort then
68226: LD_VAR 0 9
68230: IFFALSE 68346
// for i = 1 to 6 - sci do
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: DOUBLE
68238: LD_INT 1
68240: DEC
68241: ST_TO_ADDR
68242: LD_INT 6
68244: PUSH
68245: LD_VAR 0 8
68249: MINUS
68250: PUSH
68251: FOR_TO
68252: IFFALSE 68344
// begin if i = sort then
68254: LD_VAR 0 3
68258: PUSH
68259: LD_VAR 0 9
68263: EQUAL
68264: IFFALSE 68268
// break ;
68266: GO 68344
// if GetClass ( i ) = 4 then
68268: LD_VAR 0 3
68272: PPUSH
68273: CALL_OW 257
68277: PUSH
68278: LD_INT 4
68280: EQUAL
68281: IFFALSE 68285
// continue ;
68283: GO 68251
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68285: LD_ADDR_VAR 0 11
68289: PUSH
68290: LD_VAR 0 11
68294: PPUSH
68295: LD_VAR 0 11
68299: PUSH
68300: LD_INT 1
68302: PLUS
68303: PPUSH
68304: LD_VAR 0 9
68308: PUSH
68309: LD_VAR 0 3
68313: ARRAY
68314: PPUSH
68315: CALL_OW 2
68319: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68320: LD_ADDR_VAR 0 4
68324: PUSH
68325: LD_VAR 0 4
68329: PUSH
68330: LD_VAR 0 9
68334: PUSH
68335: LD_VAR 0 3
68339: ARRAY
68340: DIFF
68341: ST_TO_ADDR
// end ;
68342: GO 68251
68344: POP
68345: POP
// if p then
68346: LD_VAR 0 11
68350: IFFALSE 68375
// result := Replace ( result , 4 , p ) ;
68352: LD_ADDR_VAR 0 2
68356: PUSH
68357: LD_VAR 0 2
68361: PPUSH
68362: LD_INT 4
68364: PPUSH
68365: LD_VAR 0 11
68369: PPUSH
68370: CALL_OW 1
68374: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68375: LD_VAR 0 4
68379: PUSH
68380: LD_VAR 0 7
68384: PUSH
68385: LD_INT 6
68387: LESS
68388: AND
68389: IFFALSE 68577
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68391: LD_ADDR_VAR 0 9
68395: PUSH
68396: LD_VAR 0 4
68400: PUSH
68401: LD_VAR 0 8
68405: PUSH
68406: LD_VAR 0 7
68410: UNION
68411: DIFF
68412: PPUSH
68413: LD_INT 3
68415: PPUSH
68416: CALL 60310 0 2
68420: ST_TO_ADDR
// p := [ ] ;
68421: LD_ADDR_VAR 0 11
68425: PUSH
68426: EMPTY
68427: ST_TO_ADDR
// if sort then
68428: LD_VAR 0 9
68432: IFFALSE 68548
// for i = 1 to 6 - mech do
68434: LD_ADDR_VAR 0 3
68438: PUSH
68439: DOUBLE
68440: LD_INT 1
68442: DEC
68443: ST_TO_ADDR
68444: LD_INT 6
68446: PUSH
68447: LD_VAR 0 7
68451: MINUS
68452: PUSH
68453: FOR_TO
68454: IFFALSE 68546
// begin if i = sort then
68456: LD_VAR 0 3
68460: PUSH
68461: LD_VAR 0 9
68465: EQUAL
68466: IFFALSE 68470
// break ;
68468: GO 68546
// if GetClass ( i ) = 3 then
68470: LD_VAR 0 3
68474: PPUSH
68475: CALL_OW 257
68479: PUSH
68480: LD_INT 3
68482: EQUAL
68483: IFFALSE 68487
// continue ;
68485: GO 68453
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68487: LD_ADDR_VAR 0 11
68491: PUSH
68492: LD_VAR 0 11
68496: PPUSH
68497: LD_VAR 0 11
68501: PUSH
68502: LD_INT 1
68504: PLUS
68505: PPUSH
68506: LD_VAR 0 9
68510: PUSH
68511: LD_VAR 0 3
68515: ARRAY
68516: PPUSH
68517: CALL_OW 2
68521: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68522: LD_ADDR_VAR 0 4
68526: PUSH
68527: LD_VAR 0 4
68531: PUSH
68532: LD_VAR 0 9
68536: PUSH
68537: LD_VAR 0 3
68541: ARRAY
68542: DIFF
68543: ST_TO_ADDR
// end ;
68544: GO 68453
68546: POP
68547: POP
// if p then
68548: LD_VAR 0 11
68552: IFFALSE 68577
// result := Replace ( result , 3 , p ) ;
68554: LD_ADDR_VAR 0 2
68558: PUSH
68559: LD_VAR 0 2
68563: PPUSH
68564: LD_INT 3
68566: PPUSH
68567: LD_VAR 0 11
68571: PPUSH
68572: CALL_OW 1
68576: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68577: LD_VAR 0 4
68581: PUSH
68582: LD_INT 6
68584: GREATER
68585: PUSH
68586: LD_VAR 0 6
68590: PUSH
68591: LD_INT 6
68593: LESS
68594: AND
68595: IFFALSE 68789
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68597: LD_ADDR_VAR 0 9
68601: PUSH
68602: LD_VAR 0 4
68606: PUSH
68607: LD_VAR 0 8
68611: PUSH
68612: LD_VAR 0 7
68616: UNION
68617: PUSH
68618: LD_VAR 0 6
68622: UNION
68623: DIFF
68624: PPUSH
68625: LD_INT 2
68627: PPUSH
68628: CALL 60310 0 2
68632: ST_TO_ADDR
// p := [ ] ;
68633: LD_ADDR_VAR 0 11
68637: PUSH
68638: EMPTY
68639: ST_TO_ADDR
// if sort then
68640: LD_VAR 0 9
68644: IFFALSE 68760
// for i = 1 to 6 - eng do
68646: LD_ADDR_VAR 0 3
68650: PUSH
68651: DOUBLE
68652: LD_INT 1
68654: DEC
68655: ST_TO_ADDR
68656: LD_INT 6
68658: PUSH
68659: LD_VAR 0 6
68663: MINUS
68664: PUSH
68665: FOR_TO
68666: IFFALSE 68758
// begin if i = sort then
68668: LD_VAR 0 3
68672: PUSH
68673: LD_VAR 0 9
68677: EQUAL
68678: IFFALSE 68682
// break ;
68680: GO 68758
// if GetClass ( i ) = 2 then
68682: LD_VAR 0 3
68686: PPUSH
68687: CALL_OW 257
68691: PUSH
68692: LD_INT 2
68694: EQUAL
68695: IFFALSE 68699
// continue ;
68697: GO 68665
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68699: LD_ADDR_VAR 0 11
68703: PUSH
68704: LD_VAR 0 11
68708: PPUSH
68709: LD_VAR 0 11
68713: PUSH
68714: LD_INT 1
68716: PLUS
68717: PPUSH
68718: LD_VAR 0 9
68722: PUSH
68723: LD_VAR 0 3
68727: ARRAY
68728: PPUSH
68729: CALL_OW 2
68733: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68734: LD_ADDR_VAR 0 4
68738: PUSH
68739: LD_VAR 0 4
68743: PUSH
68744: LD_VAR 0 9
68748: PUSH
68749: LD_VAR 0 3
68753: ARRAY
68754: DIFF
68755: ST_TO_ADDR
// end ;
68756: GO 68665
68758: POP
68759: POP
// if p then
68760: LD_VAR 0 11
68764: IFFALSE 68789
// result := Replace ( result , 2 , p ) ;
68766: LD_ADDR_VAR 0 2
68770: PUSH
68771: LD_VAR 0 2
68775: PPUSH
68776: LD_INT 2
68778: PPUSH
68779: LD_VAR 0 11
68783: PPUSH
68784: CALL_OW 1
68788: ST_TO_ADDR
// end ; exit ;
68789: GO 70177
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68791: LD_EXP 63
68795: PUSH
68796: LD_EXP 62
68800: PUSH
68801: LD_VAR 0 1
68805: ARRAY
68806: ARRAY
68807: NOT
68808: PUSH
68809: LD_EXP 36
68813: PUSH
68814: LD_VAR 0 1
68818: ARRAY
68819: PPUSH
68820: LD_INT 30
68822: PUSH
68823: LD_INT 3
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PPUSH
68830: CALL_OW 72
68834: AND
68835: PUSH
68836: LD_EXP 41
68840: PUSH
68841: LD_VAR 0 1
68845: ARRAY
68846: AND
68847: IFFALSE 69455
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68849: LD_ADDR_EXP 78
68853: PUSH
68854: LD_EXP 78
68858: PPUSH
68859: LD_VAR 0 1
68863: PPUSH
68864: LD_INT 5
68866: PPUSH
68867: CALL_OW 1
68871: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68872: LD_ADDR_VAR 0 2
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: ST_TO_ADDR
// if sci > 1 then
68895: LD_VAR 0 8
68899: PUSH
68900: LD_INT 1
68902: GREATER
68903: IFFALSE 68931
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: LD_VAR 0 4
68914: PUSH
68915: LD_VAR 0 8
68919: PUSH
68920: LD_VAR 0 8
68924: PUSH
68925: LD_INT 1
68927: ARRAY
68928: DIFF
68929: DIFF
68930: ST_TO_ADDR
// if tmp and not sci then
68931: LD_VAR 0 4
68935: PUSH
68936: LD_VAR 0 8
68940: NOT
68941: AND
68942: IFFALSE 69011
// begin sort := SortBySkill ( tmp , 4 ) ;
68944: LD_ADDR_VAR 0 9
68948: PUSH
68949: LD_VAR 0 4
68953: PPUSH
68954: LD_INT 4
68956: PPUSH
68957: CALL 60310 0 2
68961: ST_TO_ADDR
// if sort then
68962: LD_VAR 0 9
68966: IFFALSE 68982
// p := sort [ 1 ] ;
68968: LD_ADDR_VAR 0 11
68972: PUSH
68973: LD_VAR 0 9
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: ST_TO_ADDR
// if p then
68982: LD_VAR 0 11
68986: IFFALSE 69011
// result := Replace ( result , 4 , p ) ;
68988: LD_ADDR_VAR 0 2
68992: PUSH
68993: LD_VAR 0 2
68997: PPUSH
68998: LD_INT 4
69000: PPUSH
69001: LD_VAR 0 11
69005: PPUSH
69006: CALL_OW 1
69010: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69011: LD_ADDR_VAR 0 4
69015: PUSH
69016: LD_VAR 0 4
69020: PUSH
69021: LD_VAR 0 7
69025: DIFF
69026: ST_TO_ADDR
// if tmp and mech < 6 then
69027: LD_VAR 0 4
69031: PUSH
69032: LD_VAR 0 7
69036: PUSH
69037: LD_INT 6
69039: LESS
69040: AND
69041: IFFALSE 69229
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69043: LD_ADDR_VAR 0 9
69047: PUSH
69048: LD_VAR 0 4
69052: PUSH
69053: LD_VAR 0 8
69057: PUSH
69058: LD_VAR 0 7
69062: UNION
69063: DIFF
69064: PPUSH
69065: LD_INT 3
69067: PPUSH
69068: CALL 60310 0 2
69072: ST_TO_ADDR
// p := [ ] ;
69073: LD_ADDR_VAR 0 11
69077: PUSH
69078: EMPTY
69079: ST_TO_ADDR
// if sort then
69080: LD_VAR 0 9
69084: IFFALSE 69200
// for i = 1 to 6 - mech do
69086: LD_ADDR_VAR 0 3
69090: PUSH
69091: DOUBLE
69092: LD_INT 1
69094: DEC
69095: ST_TO_ADDR
69096: LD_INT 6
69098: PUSH
69099: LD_VAR 0 7
69103: MINUS
69104: PUSH
69105: FOR_TO
69106: IFFALSE 69198
// begin if i = sort then
69108: LD_VAR 0 3
69112: PUSH
69113: LD_VAR 0 9
69117: EQUAL
69118: IFFALSE 69122
// break ;
69120: GO 69198
// if GetClass ( i ) = 3 then
69122: LD_VAR 0 3
69126: PPUSH
69127: CALL_OW 257
69131: PUSH
69132: LD_INT 3
69134: EQUAL
69135: IFFALSE 69139
// continue ;
69137: GO 69105
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69139: LD_ADDR_VAR 0 11
69143: PUSH
69144: LD_VAR 0 11
69148: PPUSH
69149: LD_VAR 0 11
69153: PUSH
69154: LD_INT 1
69156: PLUS
69157: PPUSH
69158: LD_VAR 0 9
69162: PUSH
69163: LD_VAR 0 3
69167: ARRAY
69168: PPUSH
69169: CALL_OW 2
69173: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69174: LD_ADDR_VAR 0 4
69178: PUSH
69179: LD_VAR 0 4
69183: PUSH
69184: LD_VAR 0 9
69188: PUSH
69189: LD_VAR 0 3
69193: ARRAY
69194: DIFF
69195: ST_TO_ADDR
// end ;
69196: GO 69105
69198: POP
69199: POP
// if p then
69200: LD_VAR 0 11
69204: IFFALSE 69229
// result := Replace ( result , 3 , p ) ;
69206: LD_ADDR_VAR 0 2
69210: PUSH
69211: LD_VAR 0 2
69215: PPUSH
69216: LD_INT 3
69218: PPUSH
69219: LD_VAR 0 11
69223: PPUSH
69224: CALL_OW 1
69228: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69229: LD_ADDR_VAR 0 4
69233: PUSH
69234: LD_VAR 0 4
69238: PUSH
69239: LD_VAR 0 6
69243: DIFF
69244: ST_TO_ADDR
// if tmp and eng < 6 then
69245: LD_VAR 0 4
69249: PUSH
69250: LD_VAR 0 6
69254: PUSH
69255: LD_INT 6
69257: LESS
69258: AND
69259: IFFALSE 69453
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69261: LD_ADDR_VAR 0 9
69265: PUSH
69266: LD_VAR 0 4
69270: PUSH
69271: LD_VAR 0 8
69275: PUSH
69276: LD_VAR 0 7
69280: UNION
69281: PUSH
69282: LD_VAR 0 6
69286: UNION
69287: DIFF
69288: PPUSH
69289: LD_INT 2
69291: PPUSH
69292: CALL 60310 0 2
69296: ST_TO_ADDR
// p := [ ] ;
69297: LD_ADDR_VAR 0 11
69301: PUSH
69302: EMPTY
69303: ST_TO_ADDR
// if sort then
69304: LD_VAR 0 9
69308: IFFALSE 69424
// for i = 1 to 6 - eng do
69310: LD_ADDR_VAR 0 3
69314: PUSH
69315: DOUBLE
69316: LD_INT 1
69318: DEC
69319: ST_TO_ADDR
69320: LD_INT 6
69322: PUSH
69323: LD_VAR 0 6
69327: MINUS
69328: PUSH
69329: FOR_TO
69330: IFFALSE 69422
// begin if i = sort then
69332: LD_VAR 0 3
69336: PUSH
69337: LD_VAR 0 9
69341: EQUAL
69342: IFFALSE 69346
// break ;
69344: GO 69422
// if GetClass ( i ) = 2 then
69346: LD_VAR 0 3
69350: PPUSH
69351: CALL_OW 257
69355: PUSH
69356: LD_INT 2
69358: EQUAL
69359: IFFALSE 69363
// continue ;
69361: GO 69329
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69363: LD_ADDR_VAR 0 11
69367: PUSH
69368: LD_VAR 0 11
69372: PPUSH
69373: LD_VAR 0 11
69377: PUSH
69378: LD_INT 1
69380: PLUS
69381: PPUSH
69382: LD_VAR 0 9
69386: PUSH
69387: LD_VAR 0 3
69391: ARRAY
69392: PPUSH
69393: CALL_OW 2
69397: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69398: LD_ADDR_VAR 0 4
69402: PUSH
69403: LD_VAR 0 4
69407: PUSH
69408: LD_VAR 0 9
69412: PUSH
69413: LD_VAR 0 3
69417: ARRAY
69418: DIFF
69419: ST_TO_ADDR
// end ;
69420: GO 69329
69422: POP
69423: POP
// if p then
69424: LD_VAR 0 11
69428: IFFALSE 69453
// result := Replace ( result , 2 , p ) ;
69430: LD_ADDR_VAR 0 2
69434: PUSH
69435: LD_VAR 0 2
69439: PPUSH
69440: LD_INT 2
69442: PPUSH
69443: LD_VAR 0 11
69447: PPUSH
69448: CALL_OW 1
69452: ST_TO_ADDR
// end ; exit ;
69453: GO 70177
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69455: LD_EXP 63
69459: PUSH
69460: LD_EXP 62
69464: PUSH
69465: LD_VAR 0 1
69469: ARRAY
69470: ARRAY
69471: NOT
69472: PUSH
69473: LD_EXP 36
69477: PUSH
69478: LD_VAR 0 1
69482: ARRAY
69483: PPUSH
69484: LD_INT 30
69486: PUSH
69487: LD_INT 3
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PPUSH
69494: CALL_OW 72
69498: AND
69499: PUSH
69500: LD_EXP 41
69504: PUSH
69505: LD_VAR 0 1
69509: ARRAY
69510: NOT
69511: AND
69512: IFFALSE 70177
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69514: LD_ADDR_EXP 78
69518: PUSH
69519: LD_EXP 78
69523: PPUSH
69524: LD_VAR 0 1
69528: PPUSH
69529: LD_INT 6
69531: PPUSH
69532: CALL_OW 1
69536: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69537: LD_ADDR_VAR 0 2
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: ST_TO_ADDR
// if sci >= 1 then
69560: LD_VAR 0 8
69564: PUSH
69565: LD_INT 1
69567: GREATEREQUAL
69568: IFFALSE 69590
// tmp := tmp diff sci [ 1 ] ;
69570: LD_ADDR_VAR 0 4
69574: PUSH
69575: LD_VAR 0 4
69579: PUSH
69580: LD_VAR 0 8
69584: PUSH
69585: LD_INT 1
69587: ARRAY
69588: DIFF
69589: ST_TO_ADDR
// if tmp and not sci then
69590: LD_VAR 0 4
69594: PUSH
69595: LD_VAR 0 8
69599: NOT
69600: AND
69601: IFFALSE 69670
// begin sort := SortBySkill ( tmp , 4 ) ;
69603: LD_ADDR_VAR 0 9
69607: PUSH
69608: LD_VAR 0 4
69612: PPUSH
69613: LD_INT 4
69615: PPUSH
69616: CALL 60310 0 2
69620: ST_TO_ADDR
// if sort then
69621: LD_VAR 0 9
69625: IFFALSE 69641
// p := sort [ 1 ] ;
69627: LD_ADDR_VAR 0 11
69631: PUSH
69632: LD_VAR 0 9
69636: PUSH
69637: LD_INT 1
69639: ARRAY
69640: ST_TO_ADDR
// if p then
69641: LD_VAR 0 11
69645: IFFALSE 69670
// result := Replace ( result , 4 , p ) ;
69647: LD_ADDR_VAR 0 2
69651: PUSH
69652: LD_VAR 0 2
69656: PPUSH
69657: LD_INT 4
69659: PPUSH
69660: LD_VAR 0 11
69664: PPUSH
69665: CALL_OW 1
69669: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69670: LD_ADDR_VAR 0 4
69674: PUSH
69675: LD_VAR 0 4
69679: PUSH
69680: LD_VAR 0 7
69684: DIFF
69685: ST_TO_ADDR
// if tmp and mech < 6 then
69686: LD_VAR 0 4
69690: PUSH
69691: LD_VAR 0 7
69695: PUSH
69696: LD_INT 6
69698: LESS
69699: AND
69700: IFFALSE 69882
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69702: LD_ADDR_VAR 0 9
69706: PUSH
69707: LD_VAR 0 4
69711: PUSH
69712: LD_VAR 0 7
69716: DIFF
69717: PPUSH
69718: LD_INT 3
69720: PPUSH
69721: CALL 60310 0 2
69725: ST_TO_ADDR
// p := [ ] ;
69726: LD_ADDR_VAR 0 11
69730: PUSH
69731: EMPTY
69732: ST_TO_ADDR
// if sort then
69733: LD_VAR 0 9
69737: IFFALSE 69853
// for i = 1 to 6 - mech do
69739: LD_ADDR_VAR 0 3
69743: PUSH
69744: DOUBLE
69745: LD_INT 1
69747: DEC
69748: ST_TO_ADDR
69749: LD_INT 6
69751: PUSH
69752: LD_VAR 0 7
69756: MINUS
69757: PUSH
69758: FOR_TO
69759: IFFALSE 69851
// begin if i = sort then
69761: LD_VAR 0 3
69765: PUSH
69766: LD_VAR 0 9
69770: EQUAL
69771: IFFALSE 69775
// break ;
69773: GO 69851
// if GetClass ( i ) = 3 then
69775: LD_VAR 0 3
69779: PPUSH
69780: CALL_OW 257
69784: PUSH
69785: LD_INT 3
69787: EQUAL
69788: IFFALSE 69792
// continue ;
69790: GO 69758
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69792: LD_ADDR_VAR 0 11
69796: PUSH
69797: LD_VAR 0 11
69801: PPUSH
69802: LD_VAR 0 11
69806: PUSH
69807: LD_INT 1
69809: PLUS
69810: PPUSH
69811: LD_VAR 0 9
69815: PUSH
69816: LD_VAR 0 3
69820: ARRAY
69821: PPUSH
69822: CALL_OW 2
69826: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69827: LD_ADDR_VAR 0 4
69831: PUSH
69832: LD_VAR 0 4
69836: PUSH
69837: LD_VAR 0 9
69841: PUSH
69842: LD_VAR 0 3
69846: ARRAY
69847: DIFF
69848: ST_TO_ADDR
// end ;
69849: GO 69758
69851: POP
69852: POP
// if p then
69853: LD_VAR 0 11
69857: IFFALSE 69882
// result := Replace ( result , 3 , p ) ;
69859: LD_ADDR_VAR 0 2
69863: PUSH
69864: LD_VAR 0 2
69868: PPUSH
69869: LD_INT 3
69871: PPUSH
69872: LD_VAR 0 11
69876: PPUSH
69877: CALL_OW 1
69881: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69882: LD_ADDR_VAR 0 4
69886: PUSH
69887: LD_VAR 0 4
69891: PUSH
69892: LD_VAR 0 6
69896: DIFF
69897: ST_TO_ADDR
// if tmp and eng < 4 then
69898: LD_VAR 0 4
69902: PUSH
69903: LD_VAR 0 6
69907: PUSH
69908: LD_INT 4
69910: LESS
69911: AND
69912: IFFALSE 70102
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69914: LD_ADDR_VAR 0 9
69918: PUSH
69919: LD_VAR 0 4
69923: PUSH
69924: LD_VAR 0 7
69928: PUSH
69929: LD_VAR 0 6
69933: UNION
69934: DIFF
69935: PPUSH
69936: LD_INT 2
69938: PPUSH
69939: CALL 60310 0 2
69943: ST_TO_ADDR
// p := [ ] ;
69944: LD_ADDR_VAR 0 11
69948: PUSH
69949: EMPTY
69950: ST_TO_ADDR
// if sort then
69951: LD_VAR 0 9
69955: IFFALSE 70071
// for i = 1 to 4 - eng do
69957: LD_ADDR_VAR 0 3
69961: PUSH
69962: DOUBLE
69963: LD_INT 1
69965: DEC
69966: ST_TO_ADDR
69967: LD_INT 4
69969: PUSH
69970: LD_VAR 0 6
69974: MINUS
69975: PUSH
69976: FOR_TO
69977: IFFALSE 70069
// begin if i = sort then
69979: LD_VAR 0 3
69983: PUSH
69984: LD_VAR 0 9
69988: EQUAL
69989: IFFALSE 69993
// break ;
69991: GO 70069
// if GetClass ( i ) = 2 then
69993: LD_VAR 0 3
69997: PPUSH
69998: CALL_OW 257
70002: PUSH
70003: LD_INT 2
70005: EQUAL
70006: IFFALSE 70010
// continue ;
70008: GO 69976
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70010: LD_ADDR_VAR 0 11
70014: PUSH
70015: LD_VAR 0 11
70019: PPUSH
70020: LD_VAR 0 11
70024: PUSH
70025: LD_INT 1
70027: PLUS
70028: PPUSH
70029: LD_VAR 0 9
70033: PUSH
70034: LD_VAR 0 3
70038: ARRAY
70039: PPUSH
70040: CALL_OW 2
70044: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70045: LD_ADDR_VAR 0 4
70049: PUSH
70050: LD_VAR 0 4
70054: PUSH
70055: LD_VAR 0 9
70059: PUSH
70060: LD_VAR 0 3
70064: ARRAY
70065: DIFF
70066: ST_TO_ADDR
// end ;
70067: GO 69976
70069: POP
70070: POP
// if p then
70071: LD_VAR 0 11
70075: IFFALSE 70100
// result := Replace ( result , 2 , p ) ;
70077: LD_ADDR_VAR 0 2
70081: PUSH
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_INT 2
70089: PPUSH
70090: LD_VAR 0 11
70094: PPUSH
70095: CALL_OW 1
70099: ST_TO_ADDR
// end else
70100: GO 70146
// for i = eng downto 5 do
70102: LD_ADDR_VAR 0 3
70106: PUSH
70107: DOUBLE
70108: LD_VAR 0 6
70112: INC
70113: ST_TO_ADDR
70114: LD_INT 5
70116: PUSH
70117: FOR_DOWNTO
70118: IFFALSE 70144
// tmp := tmp union eng [ i ] ;
70120: LD_ADDR_VAR 0 4
70124: PUSH
70125: LD_VAR 0 4
70129: PUSH
70130: LD_VAR 0 6
70134: PUSH
70135: LD_VAR 0 3
70139: ARRAY
70140: UNION
70141: ST_TO_ADDR
70142: GO 70117
70144: POP
70145: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70146: LD_ADDR_VAR 0 2
70150: PUSH
70151: LD_VAR 0 2
70155: PPUSH
70156: LD_INT 1
70158: PPUSH
70159: LD_VAR 0 4
70163: PUSH
70164: LD_VAR 0 5
70168: DIFF
70169: PPUSH
70170: CALL_OW 1
70174: ST_TO_ADDR
// exit ;
70175: GO 70177
// end ; end ;
70177: LD_VAR 0 2
70181: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70182: LD_INT 0
70184: PPUSH
70185: PPUSH
70186: PPUSH
// if not mc_bases then
70187: LD_EXP 36
70191: NOT
70192: IFFALSE 70196
// exit ;
70194: GO 70302
// for i = 1 to mc_bases do
70196: LD_ADDR_VAR 0 2
70200: PUSH
70201: DOUBLE
70202: LD_INT 1
70204: DEC
70205: ST_TO_ADDR
70206: LD_EXP 36
70210: PUSH
70211: FOR_TO
70212: IFFALSE 70293
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70214: LD_ADDR_VAR 0 3
70218: PUSH
70219: LD_EXP 36
70223: PUSH
70224: LD_VAR 0 2
70228: ARRAY
70229: PPUSH
70230: LD_INT 21
70232: PUSH
70233: LD_INT 3
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: LD_INT 24
70245: PUSH
70246: LD_INT 1000
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PPUSH
70261: CALL_OW 72
70265: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70266: LD_ADDR_EXP 37
70270: PUSH
70271: LD_EXP 37
70275: PPUSH
70276: LD_VAR 0 2
70280: PPUSH
70281: LD_VAR 0 3
70285: PPUSH
70286: CALL_OW 1
70290: ST_TO_ADDR
// end ;
70291: GO 70211
70293: POP
70294: POP
// RaiseSailEvent ( 101 ) ;
70295: LD_INT 101
70297: PPUSH
70298: CALL_OW 427
// end ;
70302: LD_VAR 0 1
70306: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70307: LD_INT 0
70309: PPUSH
70310: PPUSH
70311: PPUSH
70312: PPUSH
70313: PPUSH
70314: PPUSH
70315: PPUSH
// if not mc_bases then
70316: LD_EXP 36
70320: NOT
70321: IFFALSE 70325
// exit ;
70323: GO 70898
// for i = 1 to mc_bases do
70325: LD_ADDR_VAR 0 2
70329: PUSH
70330: DOUBLE
70331: LD_INT 1
70333: DEC
70334: ST_TO_ADDR
70335: LD_EXP 36
70339: PUSH
70340: FOR_TO
70341: IFFALSE 70889
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70343: LD_ADDR_VAR 0 5
70347: PUSH
70348: LD_EXP 36
70352: PUSH
70353: LD_VAR 0 2
70357: ARRAY
70358: PUSH
70359: LD_EXP 65
70363: PUSH
70364: LD_VAR 0 2
70368: ARRAY
70369: UNION
70370: PPUSH
70371: LD_INT 21
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: LD_INT 3
70386: PUSH
70387: LD_INT 54
70389: PUSH
70390: EMPTY
70391: LIST
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 3
70399: PUSH
70400: LD_INT 24
70402: PUSH
70403: LD_INT 800
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PPUSH
70423: CALL_OW 72
70427: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70428: LD_ADDR_VAR 0 6
70432: PUSH
70433: LD_EXP 36
70437: PUSH
70438: LD_VAR 0 2
70442: ARRAY
70443: PPUSH
70444: LD_INT 21
70446: PUSH
70447: LD_INT 1
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: PUSH
70457: LD_INT 3
70459: PUSH
70460: LD_INT 54
70462: PUSH
70463: EMPTY
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: LD_INT 24
70475: PUSH
70476: LD_INT 250
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PPUSH
70496: CALL_OW 72
70500: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70501: LD_ADDR_VAR 0 7
70505: PUSH
70506: LD_VAR 0 5
70510: PUSH
70511: LD_VAR 0 6
70515: DIFF
70516: ST_TO_ADDR
// if not need_heal_1 then
70517: LD_VAR 0 6
70521: NOT
70522: IFFALSE 70555
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70524: LD_ADDR_EXP 39
70528: PUSH
70529: LD_EXP 39
70533: PPUSH
70534: LD_VAR 0 2
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PPUSH
70546: EMPTY
70547: PPUSH
70548: CALL 26068 0 3
70552: ST_TO_ADDR
70553: GO 70625
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70555: LD_ADDR_EXP 39
70559: PUSH
70560: LD_EXP 39
70564: PPUSH
70565: LD_VAR 0 2
70569: PUSH
70570: LD_INT 1
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PPUSH
70577: LD_EXP 39
70581: PUSH
70582: LD_VAR 0 2
70586: ARRAY
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PPUSH
70592: LD_INT 3
70594: PUSH
70595: LD_INT 24
70597: PUSH
70598: LD_INT 1000
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PPUSH
70609: CALL_OW 72
70613: PUSH
70614: LD_VAR 0 6
70618: UNION
70619: PPUSH
70620: CALL 26068 0 3
70624: ST_TO_ADDR
// if not need_heal_2 then
70625: LD_VAR 0 7
70629: NOT
70630: IFFALSE 70663
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70632: LD_ADDR_EXP 39
70636: PUSH
70637: LD_EXP 39
70641: PPUSH
70642: LD_VAR 0 2
70646: PUSH
70647: LD_INT 2
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PPUSH
70654: EMPTY
70655: PPUSH
70656: CALL 26068 0 3
70660: ST_TO_ADDR
70661: GO 70695
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70663: LD_ADDR_EXP 39
70667: PUSH
70668: LD_EXP 39
70672: PPUSH
70673: LD_VAR 0 2
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PPUSH
70685: LD_VAR 0 7
70689: PPUSH
70690: CALL 26068 0 3
70694: ST_TO_ADDR
// if need_heal_2 then
70695: LD_VAR 0 7
70699: IFFALSE 70871
// for j in need_heal_2 do
70701: LD_ADDR_VAR 0 3
70705: PUSH
70706: LD_VAR 0 7
70710: PUSH
70711: FOR_IN
70712: IFFALSE 70869
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70714: LD_ADDR_VAR 0 5
70718: PUSH
70719: LD_EXP 36
70723: PUSH
70724: LD_VAR 0 2
70728: ARRAY
70729: PPUSH
70730: LD_INT 2
70732: PUSH
70733: LD_INT 30
70735: PUSH
70736: LD_INT 6
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 30
70745: PUSH
70746: LD_INT 7
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 30
70755: PUSH
70756: LD_INT 8
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 30
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 30
70775: PUSH
70776: LD_INT 1
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 25
70785: PUSH
70786: LD_INT 4
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: PPUSH
70802: CALL_OW 72
70806: ST_TO_ADDR
// if tmp then
70807: LD_VAR 0 5
70811: IFFALSE 70867
// begin k := NearestUnitToUnit ( tmp , j ) ;
70813: LD_ADDR_VAR 0 4
70817: PUSH
70818: LD_VAR 0 5
70822: PPUSH
70823: LD_VAR 0 3
70827: PPUSH
70828: CALL_OW 74
70832: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70833: LD_VAR 0 3
70837: PPUSH
70838: LD_VAR 0 4
70842: PPUSH
70843: CALL_OW 296
70847: PUSH
70848: LD_INT 7
70850: GREATER
70851: IFFALSE 70867
// ComMoveUnit ( j , k ) ;
70853: LD_VAR 0 3
70857: PPUSH
70858: LD_VAR 0 4
70862: PPUSH
70863: CALL_OW 112
// end ; end ;
70867: GO 70711
70869: POP
70870: POP
// if not need_heal_1 and not need_heal_2 then
70871: LD_VAR 0 6
70875: NOT
70876: PUSH
70877: LD_VAR 0 7
70881: NOT
70882: AND
70883: IFFALSE 70887
// continue ;
70885: GO 70340
// end ;
70887: GO 70340
70889: POP
70890: POP
// RaiseSailEvent ( 102 ) ;
70891: LD_INT 102
70893: PPUSH
70894: CALL_OW 427
// end ;
70898: LD_VAR 0 1
70902: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70903: LD_INT 0
70905: PPUSH
70906: PPUSH
70907: PPUSH
70908: PPUSH
70909: PPUSH
// if not mc_bases then
70910: LD_EXP 36
70914: NOT
70915: IFFALSE 70919
// exit ;
70917: GO 71304
// for i = 1 to mc_bases do
70919: LD_ADDR_VAR 0 2
70923: PUSH
70924: DOUBLE
70925: LD_INT 1
70927: DEC
70928: ST_TO_ADDR
70929: LD_EXP 36
70933: PUSH
70934: FOR_TO
70935: IFFALSE 71302
// begin if not mc_building_need_repair [ i ] then
70937: LD_EXP 37
70941: PUSH
70942: LD_VAR 0 2
70946: ARRAY
70947: NOT
70948: IFFALSE 70986
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70950: LD_ADDR_EXP 38
70954: PUSH
70955: LD_EXP 38
70959: PPUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: EMPTY
70966: PPUSH
70967: CALL_OW 1
70971: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70972: LD_VAR 0 2
70976: PPUSH
70977: LD_INT 101
70979: PPUSH
70980: CALL 66024 0 2
// continue ;
70984: GO 70934
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70986: LD_ADDR_EXP 42
70990: PUSH
70991: LD_EXP 42
70995: PPUSH
70996: LD_VAR 0 2
71000: PPUSH
71001: EMPTY
71002: PPUSH
71003: CALL_OW 1
71007: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71008: LD_VAR 0 2
71012: PPUSH
71013: LD_INT 103
71015: PPUSH
71016: CALL 66024 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71020: LD_ADDR_VAR 0 5
71024: PUSH
71025: LD_EXP 36
71029: PUSH
71030: LD_VAR 0 2
71034: ARRAY
71035: PUSH
71036: LD_EXP 65
71040: PUSH
71041: LD_VAR 0 2
71045: ARRAY
71046: UNION
71047: PPUSH
71048: LD_INT 2
71050: PUSH
71051: LD_INT 25
71053: PUSH
71054: LD_INT 2
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 25
71063: PUSH
71064: LD_INT 16
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: PUSH
71076: EMPTY
71077: LIST
71078: PPUSH
71079: CALL_OW 72
71083: ST_TO_ADDR
// if not tmp then
71084: LD_VAR 0 5
71088: NOT
71089: IFFALSE 71093
// continue ;
71091: GO 70934
// for j in tmp do
71093: LD_ADDR_VAR 0 3
71097: PUSH
71098: LD_VAR 0 5
71102: PUSH
71103: FOR_IN
71104: IFFALSE 71298
// begin if mc_need_heal [ i ] then
71106: LD_EXP 39
71110: PUSH
71111: LD_VAR 0 2
71115: ARRAY
71116: IFFALSE 71164
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71118: LD_VAR 0 3
71122: PUSH
71123: LD_EXP 39
71127: PUSH
71128: LD_VAR 0 2
71132: ARRAY
71133: PUSH
71134: LD_INT 1
71136: ARRAY
71137: IN
71138: PUSH
71139: LD_VAR 0 3
71143: PUSH
71144: LD_EXP 39
71148: PUSH
71149: LD_VAR 0 2
71153: ARRAY
71154: PUSH
71155: LD_INT 2
71157: ARRAY
71158: IN
71159: OR
71160: IFFALSE 71164
// continue ;
71162: GO 71103
// if IsInUnit ( j ) then
71164: LD_VAR 0 3
71168: PPUSH
71169: CALL_OW 310
71173: IFFALSE 71184
// ComExitBuilding ( j ) ;
71175: LD_VAR 0 3
71179: PPUSH
71180: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71184: LD_VAR 0 3
71188: PUSH
71189: LD_EXP 38
71193: PUSH
71194: LD_VAR 0 2
71198: ARRAY
71199: IN
71200: NOT
71201: IFFALSE 71259
// begin SetTag ( j , 101 ) ;
71203: LD_VAR 0 3
71207: PPUSH
71208: LD_INT 101
71210: PPUSH
71211: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71215: LD_ADDR_EXP 38
71219: PUSH
71220: LD_EXP 38
71224: PPUSH
71225: LD_VAR 0 2
71229: PUSH
71230: LD_EXP 38
71234: PUSH
71235: LD_VAR 0 2
71239: ARRAY
71240: PUSH
71241: LD_INT 1
71243: PLUS
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PPUSH
71249: LD_VAR 0 3
71253: PPUSH
71254: CALL 26068 0 3
71258: ST_TO_ADDR
// end ; wait ( 1 ) ;
71259: LD_INT 1
71261: PPUSH
71262: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71266: LD_VAR 0 3
71270: PPUSH
71271: LD_EXP 37
71275: PUSH
71276: LD_VAR 0 2
71280: ARRAY
71281: PPUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: CALL_OW 74
71291: PPUSH
71292: CALL_OW 130
// end ;
71296: GO 71103
71298: POP
71299: POP
// end ;
71300: GO 70934
71302: POP
71303: POP
// end ;
71304: LD_VAR 0 1
71308: RET
// export function MC_Heal ; var i , j , tmp ; begin
71309: LD_INT 0
71311: PPUSH
71312: PPUSH
71313: PPUSH
71314: PPUSH
// if not mc_bases then
71315: LD_EXP 36
71319: NOT
71320: IFFALSE 71324
// exit ;
71322: GO 71726
// for i = 1 to mc_bases do
71324: LD_ADDR_VAR 0 2
71328: PUSH
71329: DOUBLE
71330: LD_INT 1
71332: DEC
71333: ST_TO_ADDR
71334: LD_EXP 36
71338: PUSH
71339: FOR_TO
71340: IFFALSE 71724
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71342: LD_EXP 39
71346: PUSH
71347: LD_VAR 0 2
71351: ARRAY
71352: PUSH
71353: LD_INT 1
71355: ARRAY
71356: NOT
71357: PUSH
71358: LD_EXP 39
71362: PUSH
71363: LD_VAR 0 2
71367: ARRAY
71368: PUSH
71369: LD_INT 2
71371: ARRAY
71372: NOT
71373: AND
71374: IFFALSE 71412
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71376: LD_ADDR_EXP 40
71380: PUSH
71381: LD_EXP 40
71385: PPUSH
71386: LD_VAR 0 2
71390: PPUSH
71391: EMPTY
71392: PPUSH
71393: CALL_OW 1
71397: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71398: LD_VAR 0 2
71402: PPUSH
71403: LD_INT 102
71405: PPUSH
71406: CALL 66024 0 2
// continue ;
71410: GO 71339
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71412: LD_ADDR_VAR 0 4
71416: PUSH
71417: LD_EXP 36
71421: PUSH
71422: LD_VAR 0 2
71426: ARRAY
71427: PPUSH
71428: LD_INT 25
71430: PUSH
71431: LD_INT 4
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PPUSH
71438: CALL_OW 72
71442: ST_TO_ADDR
// if not tmp then
71443: LD_VAR 0 4
71447: NOT
71448: IFFALSE 71452
// continue ;
71450: GO 71339
// if mc_taming [ i ] then
71452: LD_EXP 67
71456: PUSH
71457: LD_VAR 0 2
71461: ARRAY
71462: IFFALSE 71486
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71464: LD_ADDR_EXP 67
71468: PUSH
71469: LD_EXP 67
71473: PPUSH
71474: LD_VAR 0 2
71478: PPUSH
71479: EMPTY
71480: PPUSH
71481: CALL_OW 1
71485: ST_TO_ADDR
// for j in tmp do
71486: LD_ADDR_VAR 0 3
71490: PUSH
71491: LD_VAR 0 4
71495: PUSH
71496: FOR_IN
71497: IFFALSE 71720
// begin if IsInUnit ( j ) then
71499: LD_VAR 0 3
71503: PPUSH
71504: CALL_OW 310
71508: IFFALSE 71519
// ComExitBuilding ( j ) ;
71510: LD_VAR 0 3
71514: PPUSH
71515: CALL_OW 122
// if not j in mc_healers [ i ] then
71519: LD_VAR 0 3
71523: PUSH
71524: LD_EXP 40
71528: PUSH
71529: LD_VAR 0 2
71533: ARRAY
71534: IN
71535: NOT
71536: IFFALSE 71582
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
71538: LD_ADDR_EXP 40
71542: PUSH
71543: LD_EXP 40
71547: PPUSH
71548: LD_VAR 0 2
71552: PUSH
71553: LD_EXP 40
71557: PUSH
71558: LD_VAR 0 2
71562: ARRAY
71563: PUSH
71564: LD_INT 1
71566: PLUS
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PPUSH
71572: LD_VAR 0 3
71576: PPUSH
71577: CALL 26068 0 3
71581: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71582: LD_VAR 0 3
71586: PPUSH
71587: CALL_OW 110
71591: PUSH
71592: LD_INT 102
71594: NONEQUAL
71595: IFFALSE 71609
// SetTag ( j , 102 ) ;
71597: LD_VAR 0 3
71601: PPUSH
71602: LD_INT 102
71604: PPUSH
71605: CALL_OW 109
// Wait ( 3 ) ;
71609: LD_INT 3
71611: PPUSH
71612: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
71616: LD_EXP 39
71620: PUSH
71621: LD_VAR 0 2
71625: ARRAY
71626: PUSH
71627: LD_INT 1
71629: ARRAY
71630: IFFALSE 71662
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71632: LD_VAR 0 3
71636: PPUSH
71637: LD_EXP 39
71641: PUSH
71642: LD_VAR 0 2
71646: ARRAY
71647: PUSH
71648: LD_INT 1
71650: ARRAY
71651: PUSH
71652: LD_INT 1
71654: ARRAY
71655: PPUSH
71656: CALL_OW 128
71660: GO 71718
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71662: LD_VAR 0 3
71666: PPUSH
71667: CALL_OW 314
71671: NOT
71672: PUSH
71673: LD_EXP 39
71677: PUSH
71678: LD_VAR 0 2
71682: ARRAY
71683: PUSH
71684: LD_INT 2
71686: ARRAY
71687: AND
71688: IFFALSE 71718
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71690: LD_VAR 0 3
71694: PPUSH
71695: LD_EXP 39
71699: PUSH
71700: LD_VAR 0 2
71704: ARRAY
71705: PUSH
71706: LD_INT 2
71708: ARRAY
71709: PUSH
71710: LD_INT 1
71712: ARRAY
71713: PPUSH
71714: CALL_OW 128
// end ;
71718: GO 71496
71720: POP
71721: POP
// end ;
71722: GO 71339
71724: POP
71725: POP
// end ;
71726: LD_VAR 0 1
71730: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71731: LD_INT 0
71733: PPUSH
71734: PPUSH
71735: PPUSH
71736: PPUSH
71737: PPUSH
// if not mc_bases then
71738: LD_EXP 36
71742: NOT
71743: IFFALSE 71747
// exit ;
71745: GO 72890
// for i = 1 to mc_bases do
71747: LD_ADDR_VAR 0 2
71751: PUSH
71752: DOUBLE
71753: LD_INT 1
71755: DEC
71756: ST_TO_ADDR
71757: LD_EXP 36
71761: PUSH
71762: FOR_TO
71763: IFFALSE 72888
// begin if mc_scan [ i ] then
71765: LD_EXP 59
71769: PUSH
71770: LD_VAR 0 2
71774: ARRAY
71775: IFFALSE 71779
// continue ;
71777: GO 71762
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71779: LD_EXP 41
71783: PUSH
71784: LD_VAR 0 2
71788: ARRAY
71789: NOT
71790: PUSH
71791: LD_EXP 43
71795: PUSH
71796: LD_VAR 0 2
71800: ARRAY
71801: NOT
71802: AND
71803: PUSH
71804: LD_EXP 42
71808: PUSH
71809: LD_VAR 0 2
71813: ARRAY
71814: AND
71815: IFFALSE 71853
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71817: LD_ADDR_EXP 42
71821: PUSH
71822: LD_EXP 42
71826: PPUSH
71827: LD_VAR 0 2
71831: PPUSH
71832: EMPTY
71833: PPUSH
71834: CALL_OW 1
71838: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71839: LD_VAR 0 2
71843: PPUSH
71844: LD_INT 103
71846: PPUSH
71847: CALL 66024 0 2
// continue ;
71851: GO 71762
// end ; if mc_construct_list [ i ] then
71853: LD_EXP 43
71857: PUSH
71858: LD_VAR 0 2
71862: ARRAY
71863: IFFALSE 72083
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71865: LD_ADDR_VAR 0 4
71869: PUSH
71870: LD_EXP 36
71874: PUSH
71875: LD_VAR 0 2
71879: ARRAY
71880: PPUSH
71881: LD_INT 25
71883: PUSH
71884: LD_INT 2
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PPUSH
71891: CALL_OW 72
71895: PUSH
71896: LD_EXP 38
71900: PUSH
71901: LD_VAR 0 2
71905: ARRAY
71906: DIFF
71907: ST_TO_ADDR
// if not tmp then
71908: LD_VAR 0 4
71912: NOT
71913: IFFALSE 71917
// continue ;
71915: GO 71762
// for j in tmp do
71917: LD_ADDR_VAR 0 3
71921: PUSH
71922: LD_VAR 0 4
71926: PUSH
71927: FOR_IN
71928: IFFALSE 72079
// begin if not mc_builders [ i ] then
71930: LD_EXP 42
71934: PUSH
71935: LD_VAR 0 2
71939: ARRAY
71940: NOT
71941: IFFALSE 71999
// begin SetTag ( j , 103 ) ;
71943: LD_VAR 0 3
71947: PPUSH
71948: LD_INT 103
71950: PPUSH
71951: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71955: LD_ADDR_EXP 42
71959: PUSH
71960: LD_EXP 42
71964: PPUSH
71965: LD_VAR 0 2
71969: PUSH
71970: LD_EXP 42
71974: PUSH
71975: LD_VAR 0 2
71979: ARRAY
71980: PUSH
71981: LD_INT 1
71983: PLUS
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PPUSH
71989: LD_VAR 0 3
71993: PPUSH
71994: CALL 26068 0 3
71998: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 310
72008: IFFALSE 72019
// ComExitBuilding ( j ) ;
72010: LD_VAR 0 3
72014: PPUSH
72015: CALL_OW 122
// wait ( 3 ) ;
72019: LD_INT 3
72021: PPUSH
72022: CALL_OW 67
// if not mc_construct_list [ i ] then
72026: LD_EXP 43
72030: PUSH
72031: LD_VAR 0 2
72035: ARRAY
72036: NOT
72037: IFFALSE 72041
// break ;
72039: GO 72079
// if not HasTask ( j ) then
72041: LD_VAR 0 3
72045: PPUSH
72046: CALL_OW 314
72050: NOT
72051: IFFALSE 72077
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72053: LD_VAR 0 3
72057: PPUSH
72058: LD_EXP 43
72062: PUSH
72063: LD_VAR 0 2
72067: ARRAY
72068: PUSH
72069: LD_INT 1
72071: ARRAY
72072: PPUSH
72073: CALL 28919 0 2
// end ;
72077: GO 71927
72079: POP
72080: POP
// end else
72081: GO 72886
// if mc_build_list [ i ] then
72083: LD_EXP 41
72087: PUSH
72088: LD_VAR 0 2
72092: ARRAY
72093: IFFALSE 72886
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72095: LD_ADDR_VAR 0 5
72099: PUSH
72100: LD_EXP 36
72104: PUSH
72105: LD_VAR 0 2
72109: ARRAY
72110: PPUSH
72111: LD_INT 2
72113: PUSH
72114: LD_INT 30
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 30
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: LIST
72138: PPUSH
72139: CALL_OW 72
72143: ST_TO_ADDR
// if depot then
72144: LD_VAR 0 5
72148: IFFALSE 72166
// depot := depot [ 1 ] else
72150: LD_ADDR_VAR 0 5
72154: PUSH
72155: LD_VAR 0 5
72159: PUSH
72160: LD_INT 1
72162: ARRAY
72163: ST_TO_ADDR
72164: GO 72174
// depot := 0 ;
72166: LD_ADDR_VAR 0 5
72170: PUSH
72171: LD_INT 0
72173: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72174: LD_EXP 41
72178: PUSH
72179: LD_VAR 0 2
72183: ARRAY
72184: PUSH
72185: LD_INT 1
72187: ARRAY
72188: PUSH
72189: LD_INT 1
72191: ARRAY
72192: PPUSH
72193: CALL 28749 0 1
72197: PUSH
72198: LD_EXP 36
72202: PUSH
72203: LD_VAR 0 2
72207: ARRAY
72208: PPUSH
72209: LD_INT 2
72211: PUSH
72212: LD_INT 30
72214: PUSH
72215: LD_INT 2
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 30
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: PPUSH
72237: CALL_OW 72
72241: NOT
72242: AND
72243: IFFALSE 72348
// begin for j = 1 to mc_build_list [ i ] do
72245: LD_ADDR_VAR 0 3
72249: PUSH
72250: DOUBLE
72251: LD_INT 1
72253: DEC
72254: ST_TO_ADDR
72255: LD_EXP 41
72259: PUSH
72260: LD_VAR 0 2
72264: ARRAY
72265: PUSH
72266: FOR_TO
72267: IFFALSE 72346
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72269: LD_EXP 41
72273: PUSH
72274: LD_VAR 0 2
72278: ARRAY
72279: PUSH
72280: LD_VAR 0 3
72284: ARRAY
72285: PUSH
72286: LD_INT 1
72288: ARRAY
72289: PUSH
72290: LD_INT 2
72292: EQUAL
72293: IFFALSE 72344
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72295: LD_ADDR_EXP 41
72299: PUSH
72300: LD_EXP 41
72304: PPUSH
72305: LD_VAR 0 2
72309: PPUSH
72310: LD_EXP 41
72314: PUSH
72315: LD_VAR 0 2
72319: ARRAY
72320: PPUSH
72321: LD_VAR 0 3
72325: PPUSH
72326: LD_INT 1
72328: PPUSH
72329: LD_INT 0
72331: PPUSH
72332: CALL 25486 0 4
72336: PPUSH
72337: CALL_OW 1
72341: ST_TO_ADDR
// break ;
72342: GO 72346
// end ;
72344: GO 72266
72346: POP
72347: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72348: LD_EXP 41
72352: PUSH
72353: LD_VAR 0 2
72357: ARRAY
72358: PUSH
72359: LD_INT 1
72361: ARRAY
72362: PUSH
72363: LD_INT 1
72365: ARRAY
72366: PUSH
72367: LD_INT 0
72369: EQUAL
72370: PUSH
72371: LD_VAR 0 5
72375: PUSH
72376: LD_VAR 0 5
72380: PPUSH
72381: LD_EXP 41
72385: PUSH
72386: LD_VAR 0 2
72390: ARRAY
72391: PUSH
72392: LD_INT 1
72394: ARRAY
72395: PUSH
72396: LD_INT 1
72398: ARRAY
72399: PPUSH
72400: LD_EXP 41
72404: PUSH
72405: LD_VAR 0 2
72409: ARRAY
72410: PUSH
72411: LD_INT 1
72413: ARRAY
72414: PUSH
72415: LD_INT 2
72417: ARRAY
72418: PPUSH
72419: LD_EXP 41
72423: PUSH
72424: LD_VAR 0 2
72428: ARRAY
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PUSH
72434: LD_INT 3
72436: ARRAY
72437: PPUSH
72438: LD_EXP 41
72442: PUSH
72443: LD_VAR 0 2
72447: ARRAY
72448: PUSH
72449: LD_INT 1
72451: ARRAY
72452: PUSH
72453: LD_INT 4
72455: ARRAY
72456: PPUSH
72457: CALL 33483 0 5
72461: AND
72462: OR
72463: IFFALSE 72744
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72465: LD_ADDR_VAR 0 4
72469: PUSH
72470: LD_EXP 36
72474: PUSH
72475: LD_VAR 0 2
72479: ARRAY
72480: PPUSH
72481: LD_INT 25
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PPUSH
72491: CALL_OW 72
72495: PUSH
72496: LD_EXP 38
72500: PUSH
72501: LD_VAR 0 2
72505: ARRAY
72506: DIFF
72507: ST_TO_ADDR
// if not tmp then
72508: LD_VAR 0 4
72512: NOT
72513: IFFALSE 72517
// continue ;
72515: GO 71762
// for j in tmp do
72517: LD_ADDR_VAR 0 3
72521: PUSH
72522: LD_VAR 0 4
72526: PUSH
72527: FOR_IN
72528: IFFALSE 72740
// begin if not mc_builders [ i ] then
72530: LD_EXP 42
72534: PUSH
72535: LD_VAR 0 2
72539: ARRAY
72540: NOT
72541: IFFALSE 72599
// begin SetTag ( j , 103 ) ;
72543: LD_VAR 0 3
72547: PPUSH
72548: LD_INT 103
72550: PPUSH
72551: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72555: LD_ADDR_EXP 42
72559: PUSH
72560: LD_EXP 42
72564: PPUSH
72565: LD_VAR 0 2
72569: PUSH
72570: LD_EXP 42
72574: PUSH
72575: LD_VAR 0 2
72579: ARRAY
72580: PUSH
72581: LD_INT 1
72583: PLUS
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PPUSH
72589: LD_VAR 0 3
72593: PPUSH
72594: CALL 26068 0 3
72598: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72599: LD_VAR 0 3
72603: PPUSH
72604: CALL_OW 310
72608: IFFALSE 72619
// ComExitBuilding ( j ) ;
72610: LD_VAR 0 3
72614: PPUSH
72615: CALL_OW 122
// wait ( 3 ) ;
72619: LD_INT 3
72621: PPUSH
72622: CALL_OW 67
// if not mc_build_list [ i ] then
72626: LD_EXP 41
72630: PUSH
72631: LD_VAR 0 2
72635: ARRAY
72636: NOT
72637: IFFALSE 72641
// break ;
72639: GO 72740
// if not HasTask ( j ) then
72641: LD_VAR 0 3
72645: PPUSH
72646: CALL_OW 314
72650: NOT
72651: IFFALSE 72738
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72653: LD_VAR 0 3
72657: PPUSH
72658: LD_EXP 41
72662: PUSH
72663: LD_VAR 0 2
72667: ARRAY
72668: PUSH
72669: LD_INT 1
72671: ARRAY
72672: PUSH
72673: LD_INT 1
72675: ARRAY
72676: PPUSH
72677: LD_EXP 41
72681: PUSH
72682: LD_VAR 0 2
72686: ARRAY
72687: PUSH
72688: LD_INT 1
72690: ARRAY
72691: PUSH
72692: LD_INT 2
72694: ARRAY
72695: PPUSH
72696: LD_EXP 41
72700: PUSH
72701: LD_VAR 0 2
72705: ARRAY
72706: PUSH
72707: LD_INT 1
72709: ARRAY
72710: PUSH
72711: LD_INT 3
72713: ARRAY
72714: PPUSH
72715: LD_EXP 41
72719: PUSH
72720: LD_VAR 0 2
72724: ARRAY
72725: PUSH
72726: LD_INT 1
72728: ARRAY
72729: PUSH
72730: LD_INT 4
72732: ARRAY
72733: PPUSH
72734: CALL_OW 145
// end ;
72738: GO 72527
72740: POP
72741: POP
// end else
72742: GO 72886
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72744: LD_EXP 36
72748: PUSH
72749: LD_VAR 0 2
72753: ARRAY
72754: PPUSH
72755: LD_EXP 41
72759: PUSH
72760: LD_VAR 0 2
72764: ARRAY
72765: PUSH
72766: LD_INT 1
72768: ARRAY
72769: PUSH
72770: LD_INT 1
72772: ARRAY
72773: PPUSH
72774: LD_EXP 41
72778: PUSH
72779: LD_VAR 0 2
72783: ARRAY
72784: PUSH
72785: LD_INT 1
72787: ARRAY
72788: PUSH
72789: LD_INT 2
72791: ARRAY
72792: PPUSH
72793: LD_EXP 41
72797: PUSH
72798: LD_VAR 0 2
72802: ARRAY
72803: PUSH
72804: LD_INT 1
72806: ARRAY
72807: PUSH
72808: LD_INT 3
72810: ARRAY
72811: PPUSH
72812: LD_EXP 41
72816: PUSH
72817: LD_VAR 0 2
72821: ARRAY
72822: PUSH
72823: LD_INT 1
72825: ARRAY
72826: PUSH
72827: LD_INT 4
72829: ARRAY
72830: PPUSH
72831: CALL 32819 0 5
72835: NOT
72836: IFFALSE 72886
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72838: LD_ADDR_EXP 41
72842: PUSH
72843: LD_EXP 41
72847: PPUSH
72848: LD_VAR 0 2
72852: PPUSH
72853: LD_EXP 41
72857: PUSH
72858: LD_VAR 0 2
72862: ARRAY
72863: PPUSH
72864: LD_INT 1
72866: PPUSH
72867: LD_INT 1
72869: NEG
72870: PPUSH
72871: LD_INT 0
72873: PPUSH
72874: CALL 25486 0 4
72878: PPUSH
72879: CALL_OW 1
72883: ST_TO_ADDR
// continue ;
72884: GO 71762
// end ; end ; end ;
72886: GO 71762
72888: POP
72889: POP
// end ;
72890: LD_VAR 0 1
72894: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72895: LD_INT 0
72897: PPUSH
72898: PPUSH
72899: PPUSH
72900: PPUSH
72901: PPUSH
72902: PPUSH
// if not mc_bases then
72903: LD_EXP 36
72907: NOT
72908: IFFALSE 72912
// exit ;
72910: GO 73339
// for i = 1 to mc_bases do
72912: LD_ADDR_VAR 0 2
72916: PUSH
72917: DOUBLE
72918: LD_INT 1
72920: DEC
72921: ST_TO_ADDR
72922: LD_EXP 36
72926: PUSH
72927: FOR_TO
72928: IFFALSE 73337
// begin tmp := mc_build_upgrade [ i ] ;
72930: LD_ADDR_VAR 0 4
72934: PUSH
72935: LD_EXP 68
72939: PUSH
72940: LD_VAR 0 2
72944: ARRAY
72945: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72946: LD_ADDR_VAR 0 6
72950: PUSH
72951: LD_EXP 69
72955: PUSH
72956: LD_VAR 0 2
72960: ARRAY
72961: PPUSH
72962: LD_INT 2
72964: PUSH
72965: LD_INT 30
72967: PUSH
72968: LD_INT 6
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 30
72977: PUSH
72978: LD_INT 7
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: LIST
72989: PPUSH
72990: CALL_OW 72
72994: ST_TO_ADDR
// if not tmp and not lab then
72995: LD_VAR 0 4
72999: NOT
73000: PUSH
73001: LD_VAR 0 6
73005: NOT
73006: AND
73007: IFFALSE 73011
// continue ;
73009: GO 72927
// if tmp then
73011: LD_VAR 0 4
73015: IFFALSE 73135
// for j in tmp do
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: LD_VAR 0 4
73026: PUSH
73027: FOR_IN
73028: IFFALSE 73133
// begin if UpgradeCost ( j ) then
73030: LD_VAR 0 3
73034: PPUSH
73035: CALL 32479 0 1
73039: IFFALSE 73131
// begin ComUpgrade ( j ) ;
73041: LD_VAR 0 3
73045: PPUSH
73046: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73050: LD_ADDR_EXP 68
73054: PUSH
73055: LD_EXP 68
73059: PPUSH
73060: LD_VAR 0 2
73064: PPUSH
73065: LD_EXP 68
73069: PUSH
73070: LD_VAR 0 2
73074: ARRAY
73075: PUSH
73076: LD_VAR 0 3
73080: DIFF
73081: PPUSH
73082: CALL_OW 1
73086: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73087: LD_ADDR_EXP 43
73091: PUSH
73092: LD_EXP 43
73096: PPUSH
73097: LD_VAR 0 2
73101: PUSH
73102: LD_EXP 43
73106: PUSH
73107: LD_VAR 0 2
73111: ARRAY
73112: PUSH
73113: LD_INT 1
73115: PLUS
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PPUSH
73121: LD_VAR 0 3
73125: PPUSH
73126: CALL 26068 0 3
73130: ST_TO_ADDR
// end ; end ;
73131: GO 73027
73133: POP
73134: POP
// if not lab or not mc_lab_upgrade [ i ] then
73135: LD_VAR 0 6
73139: NOT
73140: PUSH
73141: LD_EXP 70
73145: PUSH
73146: LD_VAR 0 2
73150: ARRAY
73151: NOT
73152: OR
73153: IFFALSE 73157
// continue ;
73155: GO 72927
// for j in lab do
73157: LD_ADDR_VAR 0 3
73161: PUSH
73162: LD_VAR 0 6
73166: PUSH
73167: FOR_IN
73168: IFFALSE 73333
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73170: LD_VAR 0 3
73174: PPUSH
73175: CALL_OW 266
73179: PUSH
73180: LD_INT 6
73182: PUSH
73183: LD_INT 7
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: IN
73190: PUSH
73191: LD_VAR 0 3
73195: PPUSH
73196: CALL_OW 461
73200: PUSH
73201: LD_INT 1
73203: NONEQUAL
73204: AND
73205: IFFALSE 73331
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73207: LD_VAR 0 3
73211: PPUSH
73212: LD_EXP 70
73216: PUSH
73217: LD_VAR 0 2
73221: ARRAY
73222: PUSH
73223: LD_INT 1
73225: ARRAY
73226: PPUSH
73227: CALL 32684 0 2
73231: IFFALSE 73331
// begin ComCancel ( j ) ;
73233: LD_VAR 0 3
73237: PPUSH
73238: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73242: LD_VAR 0 3
73246: PPUSH
73247: LD_EXP 70
73251: PUSH
73252: LD_VAR 0 2
73256: ARRAY
73257: PUSH
73258: LD_INT 1
73260: ARRAY
73261: PPUSH
73262: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73266: LD_VAR 0 3
73270: PUSH
73271: LD_EXP 43
73275: PUSH
73276: LD_VAR 0 2
73280: ARRAY
73281: IN
73282: NOT
73283: IFFALSE 73329
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73285: LD_ADDR_EXP 43
73289: PUSH
73290: LD_EXP 43
73294: PPUSH
73295: LD_VAR 0 2
73299: PUSH
73300: LD_EXP 43
73304: PUSH
73305: LD_VAR 0 2
73309: ARRAY
73310: PUSH
73311: LD_INT 1
73313: PLUS
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PPUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL 26068 0 3
73328: ST_TO_ADDR
// break ;
73329: GO 73333
// end ; end ; end ;
73331: GO 73167
73333: POP
73334: POP
// end ;
73335: GO 72927
73337: POP
73338: POP
// end ;
73339: LD_VAR 0 1
73343: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73344: LD_INT 0
73346: PPUSH
73347: PPUSH
73348: PPUSH
73349: PPUSH
73350: PPUSH
73351: PPUSH
73352: PPUSH
73353: PPUSH
73354: PPUSH
// if not mc_bases then
73355: LD_EXP 36
73359: NOT
73360: IFFALSE 73364
// exit ;
73362: GO 73769
// for i = 1 to mc_bases do
73364: LD_ADDR_VAR 0 2
73368: PUSH
73369: DOUBLE
73370: LD_INT 1
73372: DEC
73373: ST_TO_ADDR
73374: LD_EXP 36
73378: PUSH
73379: FOR_TO
73380: IFFALSE 73767
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73382: LD_EXP 44
73386: PUSH
73387: LD_VAR 0 2
73391: ARRAY
73392: NOT
73393: PUSH
73394: LD_EXP 36
73398: PUSH
73399: LD_VAR 0 2
73403: ARRAY
73404: PPUSH
73405: LD_INT 30
73407: PUSH
73408: LD_INT 3
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PPUSH
73415: CALL_OW 72
73419: NOT
73420: OR
73421: IFFALSE 73425
// continue ;
73423: GO 73379
// busy := false ;
73425: LD_ADDR_VAR 0 8
73429: PUSH
73430: LD_INT 0
73432: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73433: LD_ADDR_VAR 0 4
73437: PUSH
73438: LD_EXP 36
73442: PUSH
73443: LD_VAR 0 2
73447: ARRAY
73448: PPUSH
73449: LD_INT 30
73451: PUSH
73452: LD_INT 3
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PPUSH
73459: CALL_OW 72
73463: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73464: LD_ADDR_VAR 0 6
73468: PUSH
73469: LD_EXP 44
73473: PUSH
73474: LD_VAR 0 2
73478: ARRAY
73479: PPUSH
73480: LD_INT 2
73482: PUSH
73483: LD_INT 30
73485: PUSH
73486: LD_INT 32
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 30
73495: PUSH
73496: LD_INT 33
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: LIST
73507: PPUSH
73508: CALL_OW 72
73512: ST_TO_ADDR
// if not t then
73513: LD_VAR 0 6
73517: NOT
73518: IFFALSE 73522
// continue ;
73520: GO 73379
// for j in tmp do
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: LD_VAR 0 4
73531: PUSH
73532: FOR_IN
73533: IFFALSE 73563
// if not BuildingStatus ( j ) = bs_idle then
73535: LD_VAR 0 3
73539: PPUSH
73540: CALL_OW 461
73544: PUSH
73545: LD_INT 2
73547: EQUAL
73548: NOT
73549: IFFALSE 73561
// begin busy := true ;
73551: LD_ADDR_VAR 0 8
73555: PUSH
73556: LD_INT 1
73558: ST_TO_ADDR
// break ;
73559: GO 73563
// end ;
73561: GO 73532
73563: POP
73564: POP
// if busy then
73565: LD_VAR 0 8
73569: IFFALSE 73573
// continue ;
73571: GO 73379
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73573: LD_ADDR_VAR 0 7
73577: PUSH
73578: LD_VAR 0 6
73582: PPUSH
73583: LD_INT 35
73585: PUSH
73586: LD_INT 0
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PPUSH
73593: CALL_OW 72
73597: ST_TO_ADDR
// if tw then
73598: LD_VAR 0 7
73602: IFFALSE 73679
// begin tw := tw [ 1 ] ;
73604: LD_ADDR_VAR 0 7
73608: PUSH
73609: LD_VAR 0 7
73613: PUSH
73614: LD_INT 1
73616: ARRAY
73617: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73618: LD_ADDR_VAR 0 9
73622: PUSH
73623: LD_VAR 0 7
73627: PPUSH
73628: LD_EXP 61
73632: PUSH
73633: LD_VAR 0 2
73637: ARRAY
73638: PPUSH
73639: CALL 31038 0 2
73643: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73644: LD_EXP 75
73648: PUSH
73649: LD_VAR 0 2
73653: ARRAY
73654: IFFALSE 73677
// if not weapon in mc_allowed_tower_weapons [ i ] then
73656: LD_VAR 0 9
73660: PUSH
73661: LD_EXP 75
73665: PUSH
73666: LD_VAR 0 2
73670: ARRAY
73671: IN
73672: NOT
73673: IFFALSE 73677
// continue ;
73675: GO 73379
// end else
73677: GO 73742
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73679: LD_ADDR_VAR 0 5
73683: PUSH
73684: LD_EXP 44
73688: PUSH
73689: LD_VAR 0 2
73693: ARRAY
73694: PPUSH
73695: LD_VAR 0 4
73699: PPUSH
73700: CALL 61233 0 2
73704: ST_TO_ADDR
// if not tmp2 then
73705: LD_VAR 0 5
73709: NOT
73710: IFFALSE 73714
// continue ;
73712: GO 73379
// tw := tmp2 [ 1 ] ;
73714: LD_ADDR_VAR 0 7
73718: PUSH
73719: LD_VAR 0 5
73723: PUSH
73724: LD_INT 1
73726: ARRAY
73727: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73728: LD_ADDR_VAR 0 9
73732: PUSH
73733: LD_VAR 0 5
73737: PUSH
73738: LD_INT 2
73740: ARRAY
73741: ST_TO_ADDR
// end ; if not weapon then
73742: LD_VAR 0 9
73746: NOT
73747: IFFALSE 73751
// continue ;
73749: GO 73379
// ComPlaceWeapon ( tw , weapon ) ;
73751: LD_VAR 0 7
73755: PPUSH
73756: LD_VAR 0 9
73760: PPUSH
73761: CALL_OW 148
// end ;
73765: GO 73379
73767: POP
73768: POP
// end ;
73769: LD_VAR 0 1
73773: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73774: LD_INT 0
73776: PPUSH
73777: PPUSH
73778: PPUSH
73779: PPUSH
73780: PPUSH
73781: PPUSH
// if not mc_bases then
73782: LD_EXP 36
73786: NOT
73787: IFFALSE 73791
// exit ;
73789: GO 74803
// for i = 1 to mc_bases do
73791: LD_ADDR_VAR 0 2
73795: PUSH
73796: DOUBLE
73797: LD_INT 1
73799: DEC
73800: ST_TO_ADDR
73801: LD_EXP 36
73805: PUSH
73806: FOR_TO
73807: IFFALSE 74801
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73809: LD_EXP 49
73813: PUSH
73814: LD_VAR 0 2
73818: ARRAY
73819: NOT
73820: PUSH
73821: LD_EXP 49
73825: PUSH
73826: LD_VAR 0 2
73830: ARRAY
73831: PUSH
73832: LD_EXP 50
73836: PUSH
73837: LD_VAR 0 2
73841: ARRAY
73842: EQUAL
73843: OR
73844: IFFALSE 73848
// continue ;
73846: GO 73806
// if mc_miners [ i ] then
73848: LD_EXP 50
73852: PUSH
73853: LD_VAR 0 2
73857: ARRAY
73858: IFFALSE 74488
// begin k := 1 ;
73860: LD_ADDR_VAR 0 4
73864: PUSH
73865: LD_INT 1
73867: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73868: LD_ADDR_VAR 0 3
73872: PUSH
73873: DOUBLE
73874: LD_EXP 50
73878: PUSH
73879: LD_VAR 0 2
73883: ARRAY
73884: INC
73885: ST_TO_ADDR
73886: LD_INT 1
73888: PUSH
73889: FOR_DOWNTO
73890: IFFALSE 74486
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73892: LD_EXP 50
73896: PUSH
73897: LD_VAR 0 2
73901: ARRAY
73902: PUSH
73903: LD_VAR 0 3
73907: ARRAY
73908: PPUSH
73909: CALL_OW 301
73913: PUSH
73914: LD_EXP 50
73918: PUSH
73919: LD_VAR 0 2
73923: ARRAY
73924: PUSH
73925: LD_VAR 0 3
73929: ARRAY
73930: PPUSH
73931: CALL_OW 257
73935: PUSH
73936: LD_INT 1
73938: NONEQUAL
73939: OR
73940: IFFALSE 74003
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73942: LD_ADDR_VAR 0 5
73946: PUSH
73947: LD_EXP 50
73951: PUSH
73952: LD_VAR 0 2
73956: ARRAY
73957: PUSH
73958: LD_EXP 50
73962: PUSH
73963: LD_VAR 0 2
73967: ARRAY
73968: PUSH
73969: LD_VAR 0 3
73973: ARRAY
73974: DIFF
73975: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73976: LD_ADDR_EXP 50
73980: PUSH
73981: LD_EXP 50
73985: PPUSH
73986: LD_VAR 0 2
73990: PPUSH
73991: LD_VAR 0 5
73995: PPUSH
73996: CALL_OW 1
74000: ST_TO_ADDR
// continue ;
74001: GO 73889
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74003: LD_EXP 50
74007: PUSH
74008: LD_VAR 0 2
74012: ARRAY
74013: PUSH
74014: LD_VAR 0 3
74018: ARRAY
74019: PPUSH
74020: CALL 26004 0 1
74024: PUSH
74025: LD_EXP 50
74029: PUSH
74030: LD_VAR 0 2
74034: ARRAY
74035: PUSH
74036: LD_VAR 0 3
74040: ARRAY
74041: PPUSH
74042: CALL_OW 255
74046: PPUSH
74047: LD_EXP 49
74051: PUSH
74052: LD_VAR 0 2
74056: ARRAY
74057: PUSH
74058: LD_VAR 0 4
74062: ARRAY
74063: PUSH
74064: LD_INT 1
74066: ARRAY
74067: PPUSH
74068: LD_EXP 49
74072: PUSH
74073: LD_VAR 0 2
74077: ARRAY
74078: PUSH
74079: LD_VAR 0 4
74083: ARRAY
74084: PUSH
74085: LD_INT 2
74087: ARRAY
74088: PPUSH
74089: LD_INT 15
74091: PPUSH
74092: CALL 26964 0 4
74096: PUSH
74097: LD_INT 4
74099: ARRAY
74100: PUSH
74101: LD_EXP 50
74105: PUSH
74106: LD_VAR 0 2
74110: ARRAY
74111: PUSH
74112: LD_VAR 0 3
74116: ARRAY
74117: PPUSH
74118: LD_INT 10
74120: PPUSH
74121: CALL 28661 0 2
74125: PUSH
74126: LD_INT 4
74128: ARRAY
74129: OR
74130: AND
74131: IFFALSE 74154
// ComStop ( mc_miners [ i ] [ j ] ) ;
74133: LD_EXP 50
74137: PUSH
74138: LD_VAR 0 2
74142: ARRAY
74143: PUSH
74144: LD_VAR 0 3
74148: ARRAY
74149: PPUSH
74150: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74154: LD_EXP 50
74158: PUSH
74159: LD_VAR 0 2
74163: ARRAY
74164: PUSH
74165: LD_VAR 0 3
74169: ARRAY
74170: PPUSH
74171: CALL_OW 257
74175: PUSH
74176: LD_INT 1
74178: EQUAL
74179: PUSH
74180: LD_EXP 50
74184: PUSH
74185: LD_VAR 0 2
74189: ARRAY
74190: PUSH
74191: LD_VAR 0 3
74195: ARRAY
74196: PPUSH
74197: CALL_OW 459
74201: NOT
74202: AND
74203: PUSH
74204: LD_EXP 50
74208: PUSH
74209: LD_VAR 0 2
74213: ARRAY
74214: PUSH
74215: LD_VAR 0 3
74219: ARRAY
74220: PPUSH
74221: CALL_OW 255
74225: PPUSH
74226: LD_EXP 49
74230: PUSH
74231: LD_VAR 0 2
74235: ARRAY
74236: PUSH
74237: LD_VAR 0 4
74241: ARRAY
74242: PUSH
74243: LD_INT 1
74245: ARRAY
74246: PPUSH
74247: LD_EXP 49
74251: PUSH
74252: LD_VAR 0 2
74256: ARRAY
74257: PUSH
74258: LD_VAR 0 4
74262: ARRAY
74263: PUSH
74264: LD_INT 2
74266: ARRAY
74267: PPUSH
74268: LD_INT 15
74270: PPUSH
74271: CALL 26964 0 4
74275: PUSH
74276: LD_INT 4
74278: ARRAY
74279: PUSH
74280: LD_INT 0
74282: EQUAL
74283: AND
74284: PUSH
74285: LD_EXP 50
74289: PUSH
74290: LD_VAR 0 2
74294: ARRAY
74295: PUSH
74296: LD_VAR 0 3
74300: ARRAY
74301: PPUSH
74302: CALL_OW 314
74306: NOT
74307: AND
74308: IFFALSE 74484
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74310: LD_EXP 50
74314: PUSH
74315: LD_VAR 0 2
74319: ARRAY
74320: PUSH
74321: LD_VAR 0 3
74325: ARRAY
74326: PPUSH
74327: CALL_OW 310
74331: IFFALSE 74354
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74333: LD_EXP 50
74337: PUSH
74338: LD_VAR 0 2
74342: ARRAY
74343: PUSH
74344: LD_VAR 0 3
74348: ARRAY
74349: PPUSH
74350: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74354: LD_EXP 50
74358: PUSH
74359: LD_VAR 0 2
74363: ARRAY
74364: PUSH
74365: LD_VAR 0 3
74369: ARRAY
74370: PPUSH
74371: CALL_OW 314
74375: NOT
74376: IFFALSE 74444
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74378: LD_EXP 50
74382: PUSH
74383: LD_VAR 0 2
74387: ARRAY
74388: PUSH
74389: LD_VAR 0 3
74393: ARRAY
74394: PPUSH
74395: LD_EXP 49
74399: PUSH
74400: LD_VAR 0 2
74404: ARRAY
74405: PUSH
74406: LD_VAR 0 4
74410: ARRAY
74411: PUSH
74412: LD_INT 1
74414: ARRAY
74415: PPUSH
74416: LD_EXP 49
74420: PUSH
74421: LD_VAR 0 2
74425: ARRAY
74426: PUSH
74427: LD_VAR 0 4
74431: ARRAY
74432: PUSH
74433: LD_INT 2
74435: ARRAY
74436: PPUSH
74437: LD_INT 0
74439: PPUSH
74440: CALL_OW 193
// k := k + 1 ;
74444: LD_ADDR_VAR 0 4
74448: PUSH
74449: LD_VAR 0 4
74453: PUSH
74454: LD_INT 1
74456: PLUS
74457: ST_TO_ADDR
// if k > mc_mines [ i ] then
74458: LD_VAR 0 4
74462: PUSH
74463: LD_EXP 49
74467: PUSH
74468: LD_VAR 0 2
74472: ARRAY
74473: GREATER
74474: IFFALSE 74484
// k := 1 ;
74476: LD_ADDR_VAR 0 4
74480: PUSH
74481: LD_INT 1
74483: ST_TO_ADDR
// end ; end ;
74484: GO 73889
74486: POP
74487: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74488: LD_ADDR_VAR 0 5
74492: PUSH
74493: LD_EXP 36
74497: PUSH
74498: LD_VAR 0 2
74502: ARRAY
74503: PPUSH
74504: LD_INT 2
74506: PUSH
74507: LD_INT 30
74509: PUSH
74510: LD_INT 4
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 30
74519: PUSH
74520: LD_INT 5
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 30
74529: PUSH
74530: LD_INT 32
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: PPUSH
74543: CALL_OW 72
74547: ST_TO_ADDR
// if not tmp then
74548: LD_VAR 0 5
74552: NOT
74553: IFFALSE 74557
// continue ;
74555: GO 73806
// list := [ ] ;
74557: LD_ADDR_VAR 0 6
74561: PUSH
74562: EMPTY
74563: ST_TO_ADDR
// for j in tmp do
74564: LD_ADDR_VAR 0 3
74568: PUSH
74569: LD_VAR 0 5
74573: PUSH
74574: FOR_IN
74575: IFFALSE 74644
// begin for k in UnitsInside ( j ) do
74577: LD_ADDR_VAR 0 4
74581: PUSH
74582: LD_VAR 0 3
74586: PPUSH
74587: CALL_OW 313
74591: PUSH
74592: FOR_IN
74593: IFFALSE 74640
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74595: LD_VAR 0 4
74599: PPUSH
74600: CALL_OW 257
74604: PUSH
74605: LD_INT 1
74607: EQUAL
74608: PUSH
74609: LD_VAR 0 4
74613: PPUSH
74614: CALL_OW 459
74618: NOT
74619: AND
74620: IFFALSE 74638
// list := list ^ k ;
74622: LD_ADDR_VAR 0 6
74626: PUSH
74627: LD_VAR 0 6
74631: PUSH
74632: LD_VAR 0 4
74636: ADD
74637: ST_TO_ADDR
74638: GO 74592
74640: POP
74641: POP
// end ;
74642: GO 74574
74644: POP
74645: POP
// list := list diff mc_miners [ i ] ;
74646: LD_ADDR_VAR 0 6
74650: PUSH
74651: LD_VAR 0 6
74655: PUSH
74656: LD_EXP 50
74660: PUSH
74661: LD_VAR 0 2
74665: ARRAY
74666: DIFF
74667: ST_TO_ADDR
// if not list then
74668: LD_VAR 0 6
74672: NOT
74673: IFFALSE 74677
// continue ;
74675: GO 73806
// k := mc_mines [ i ] - mc_miners [ i ] ;
74677: LD_ADDR_VAR 0 4
74681: PUSH
74682: LD_EXP 49
74686: PUSH
74687: LD_VAR 0 2
74691: ARRAY
74692: PUSH
74693: LD_EXP 50
74697: PUSH
74698: LD_VAR 0 2
74702: ARRAY
74703: MINUS
74704: ST_TO_ADDR
// if k > list then
74705: LD_VAR 0 4
74709: PUSH
74710: LD_VAR 0 6
74714: GREATER
74715: IFFALSE 74727
// k := list ;
74717: LD_ADDR_VAR 0 4
74721: PUSH
74722: LD_VAR 0 6
74726: ST_TO_ADDR
// for j = 1 to k do
74727: LD_ADDR_VAR 0 3
74731: PUSH
74732: DOUBLE
74733: LD_INT 1
74735: DEC
74736: ST_TO_ADDR
74737: LD_VAR 0 4
74741: PUSH
74742: FOR_TO
74743: IFFALSE 74797
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74745: LD_ADDR_EXP 50
74749: PUSH
74750: LD_EXP 50
74754: PPUSH
74755: LD_VAR 0 2
74759: PUSH
74760: LD_EXP 50
74764: PUSH
74765: LD_VAR 0 2
74769: ARRAY
74770: PUSH
74771: LD_INT 1
74773: PLUS
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PPUSH
74779: LD_VAR 0 6
74783: PUSH
74784: LD_VAR 0 3
74788: ARRAY
74789: PPUSH
74790: CALL 26068 0 3
74794: ST_TO_ADDR
74795: GO 74742
74797: POP
74798: POP
// end ;
74799: GO 73806
74801: POP
74802: POP
// end ;
74803: LD_VAR 0 1
74807: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74808: LD_INT 0
74810: PPUSH
74811: PPUSH
74812: PPUSH
74813: PPUSH
74814: PPUSH
74815: PPUSH
74816: PPUSH
74817: PPUSH
74818: PPUSH
74819: PPUSH
// if not mc_bases then
74820: LD_EXP 36
74824: NOT
74825: IFFALSE 74829
// exit ;
74827: GO 76560
// for i = 1 to mc_bases do
74829: LD_ADDR_VAR 0 2
74833: PUSH
74834: DOUBLE
74835: LD_INT 1
74837: DEC
74838: ST_TO_ADDR
74839: LD_EXP 36
74843: PUSH
74844: FOR_TO
74845: IFFALSE 76558
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74847: LD_EXP 36
74851: PUSH
74852: LD_VAR 0 2
74856: ARRAY
74857: NOT
74858: PUSH
74859: LD_EXP 43
74863: PUSH
74864: LD_VAR 0 2
74868: ARRAY
74869: OR
74870: IFFALSE 74874
// continue ;
74872: GO 74844
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74874: LD_EXP 52
74878: PUSH
74879: LD_VAR 0 2
74883: ARRAY
74884: NOT
74885: PUSH
74886: LD_EXP 53
74890: PUSH
74891: LD_VAR 0 2
74895: ARRAY
74896: AND
74897: IFFALSE 74935
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74899: LD_ADDR_EXP 53
74903: PUSH
74904: LD_EXP 53
74908: PPUSH
74909: LD_VAR 0 2
74913: PPUSH
74914: EMPTY
74915: PPUSH
74916: CALL_OW 1
74920: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74921: LD_VAR 0 2
74925: PPUSH
74926: LD_INT 107
74928: PPUSH
74929: CALL 66024 0 2
// continue ;
74933: GO 74844
// end ; target := [ ] ;
74935: LD_ADDR_VAR 0 6
74939: PUSH
74940: EMPTY
74941: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74942: LD_ADDR_VAR 0 3
74946: PUSH
74947: DOUBLE
74948: LD_EXP 52
74952: PUSH
74953: LD_VAR 0 2
74957: ARRAY
74958: INC
74959: ST_TO_ADDR
74960: LD_INT 1
74962: PUSH
74963: FOR_DOWNTO
74964: IFFALSE 75224
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74966: LD_EXP 52
74970: PUSH
74971: LD_VAR 0 2
74975: ARRAY
74976: PUSH
74977: LD_VAR 0 3
74981: ARRAY
74982: PUSH
74983: LD_INT 2
74985: ARRAY
74986: PPUSH
74987: LD_EXP 52
74991: PUSH
74992: LD_VAR 0 2
74996: ARRAY
74997: PUSH
74998: LD_VAR 0 3
75002: ARRAY
75003: PUSH
75004: LD_INT 3
75006: ARRAY
75007: PPUSH
75008: CALL_OW 488
75012: PUSH
75013: LD_EXP 52
75017: PUSH
75018: LD_VAR 0 2
75022: ARRAY
75023: PUSH
75024: LD_VAR 0 3
75028: ARRAY
75029: PUSH
75030: LD_INT 2
75032: ARRAY
75033: PPUSH
75034: LD_EXP 52
75038: PUSH
75039: LD_VAR 0 2
75043: ARRAY
75044: PUSH
75045: LD_VAR 0 3
75049: ARRAY
75050: PUSH
75051: LD_INT 3
75053: ARRAY
75054: PPUSH
75055: CALL_OW 284
75059: PUSH
75060: LD_INT 0
75062: EQUAL
75063: AND
75064: IFFALSE 75119
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75066: LD_ADDR_VAR 0 5
75070: PUSH
75071: LD_EXP 52
75075: PUSH
75076: LD_VAR 0 2
75080: ARRAY
75081: PPUSH
75082: LD_VAR 0 3
75086: PPUSH
75087: CALL_OW 3
75091: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75092: LD_ADDR_EXP 52
75096: PUSH
75097: LD_EXP 52
75101: PPUSH
75102: LD_VAR 0 2
75106: PPUSH
75107: LD_VAR 0 5
75111: PPUSH
75112: CALL_OW 1
75116: ST_TO_ADDR
// continue ;
75117: GO 74963
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75119: LD_EXP 36
75123: PUSH
75124: LD_VAR 0 2
75128: ARRAY
75129: PUSH
75130: LD_INT 1
75132: ARRAY
75133: PPUSH
75134: CALL_OW 255
75138: PPUSH
75139: LD_EXP 52
75143: PUSH
75144: LD_VAR 0 2
75148: ARRAY
75149: PUSH
75150: LD_VAR 0 3
75154: ARRAY
75155: PUSH
75156: LD_INT 2
75158: ARRAY
75159: PPUSH
75160: LD_EXP 52
75164: PUSH
75165: LD_VAR 0 2
75169: ARRAY
75170: PUSH
75171: LD_VAR 0 3
75175: ARRAY
75176: PUSH
75177: LD_INT 3
75179: ARRAY
75180: PPUSH
75181: LD_INT 30
75183: PPUSH
75184: CALL 26964 0 4
75188: PUSH
75189: LD_INT 4
75191: ARRAY
75192: PUSH
75193: LD_INT 0
75195: EQUAL
75196: IFFALSE 75222
// begin target := mc_crates [ i ] [ j ] ;
75198: LD_ADDR_VAR 0 6
75202: PUSH
75203: LD_EXP 52
75207: PUSH
75208: LD_VAR 0 2
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 3
75218: ARRAY
75219: ST_TO_ADDR
// break ;
75220: GO 75224
// end ; end ;
75222: GO 74963
75224: POP
75225: POP
// if not target then
75226: LD_VAR 0 6
75230: NOT
75231: IFFALSE 75235
// continue ;
75233: GO 74844
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75235: LD_ADDR_VAR 0 7
75239: PUSH
75240: LD_EXP 55
75244: PUSH
75245: LD_VAR 0 2
75249: ARRAY
75250: PPUSH
75251: LD_INT 2
75253: PUSH
75254: LD_INT 3
75256: PUSH
75257: LD_INT 58
75259: PUSH
75260: EMPTY
75261: LIST
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 61
75269: PUSH
75270: EMPTY
75271: LIST
75272: PUSH
75273: LD_INT 33
75275: PUSH
75276: LD_INT 5
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 33
75285: PUSH
75286: LD_INT 3
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 2
75302: PUSH
75303: LD_INT 34
75305: PUSH
75306: LD_INT 32
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 34
75315: PUSH
75316: LD_INT 51
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 34
75325: PUSH
75326: LD_INT 12
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PPUSH
75343: CALL_OW 72
75347: ST_TO_ADDR
// if not cargo then
75348: LD_VAR 0 7
75352: NOT
75353: IFFALSE 75996
// begin if mc_crates_collector [ i ] < 5 then
75355: LD_EXP 53
75359: PUSH
75360: LD_VAR 0 2
75364: ARRAY
75365: PUSH
75366: LD_INT 5
75368: LESS
75369: IFFALSE 75735
// begin if mc_ape [ i ] then
75371: LD_EXP 65
75375: PUSH
75376: LD_VAR 0 2
75380: ARRAY
75381: IFFALSE 75428
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: LD_EXP 65
75392: PUSH
75393: LD_VAR 0 2
75397: ARRAY
75398: PPUSH
75399: LD_INT 25
75401: PUSH
75402: LD_INT 16
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 24
75411: PUSH
75412: LD_INT 750
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PPUSH
75423: CALL_OW 72
75427: ST_TO_ADDR
// if not tmp then
75428: LD_VAR 0 5
75432: NOT
75433: IFFALSE 75480
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75435: LD_ADDR_VAR 0 5
75439: PUSH
75440: LD_EXP 36
75444: PUSH
75445: LD_VAR 0 2
75449: ARRAY
75450: PPUSH
75451: LD_INT 25
75453: PUSH
75454: LD_INT 2
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 24
75463: PUSH
75464: LD_INT 750
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PPUSH
75475: CALL_OW 72
75479: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75480: LD_EXP 65
75484: PUSH
75485: LD_VAR 0 2
75489: ARRAY
75490: PUSH
75491: LD_EXP 36
75495: PUSH
75496: LD_VAR 0 2
75500: ARRAY
75501: PPUSH
75502: LD_INT 25
75504: PUSH
75505: LD_INT 2
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 24
75514: PUSH
75515: LD_INT 750
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PPUSH
75526: CALL_OW 72
75530: AND
75531: PUSH
75532: LD_VAR 0 5
75536: PUSH
75537: LD_INT 5
75539: LESS
75540: AND
75541: IFFALSE 75623
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
75543: LD_ADDR_VAR 0 3
75547: PUSH
75548: LD_EXP 36
75552: PUSH
75553: LD_VAR 0 2
75557: ARRAY
75558: PPUSH
75559: LD_INT 25
75561: PUSH
75562: LD_INT 2
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 24
75571: PUSH
75572: LD_INT 750
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PPUSH
75583: CALL_OW 72
75587: PUSH
75588: FOR_IN
75589: IFFALSE 75621
// begin tmp := tmp union j ;
75591: LD_ADDR_VAR 0 5
75595: PUSH
75596: LD_VAR 0 5
75600: PUSH
75601: LD_VAR 0 3
75605: UNION
75606: ST_TO_ADDR
// if tmp >= 5 then
75607: LD_VAR 0 5
75611: PUSH
75612: LD_INT 5
75614: GREATEREQUAL
75615: IFFALSE 75619
// break ;
75617: GO 75621
// end ;
75619: GO 75588
75621: POP
75622: POP
// end ; if not tmp then
75623: LD_VAR 0 5
75627: NOT
75628: IFFALSE 75632
// continue ;
75630: GO 74844
// for j in tmp do
75632: LD_ADDR_VAR 0 3
75636: PUSH
75637: LD_VAR 0 5
75641: PUSH
75642: FOR_IN
75643: IFFALSE 75733
// if not GetTag ( j ) then
75645: LD_VAR 0 3
75649: PPUSH
75650: CALL_OW 110
75654: NOT
75655: IFFALSE 75731
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75657: LD_ADDR_EXP 53
75661: PUSH
75662: LD_EXP 53
75666: PPUSH
75667: LD_VAR 0 2
75671: PUSH
75672: LD_EXP 53
75676: PUSH
75677: LD_VAR 0 2
75681: ARRAY
75682: PUSH
75683: LD_INT 1
75685: PLUS
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PPUSH
75691: LD_VAR 0 3
75695: PPUSH
75696: CALL 26068 0 3
75700: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75701: LD_VAR 0 3
75705: PPUSH
75706: LD_INT 107
75708: PPUSH
75709: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
75713: LD_EXP 53
75717: PUSH
75718: LD_VAR 0 2
75722: ARRAY
75723: PUSH
75724: LD_INT 5
75726: GREATEREQUAL
75727: IFFALSE 75731
// break ;
75729: GO 75733
// end ;
75731: GO 75642
75733: POP
75734: POP
// end ; if mc_crates_collector [ i ] and target then
75735: LD_EXP 53
75739: PUSH
75740: LD_VAR 0 2
75744: ARRAY
75745: PUSH
75746: LD_VAR 0 6
75750: AND
75751: IFFALSE 75994
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75753: LD_EXP 53
75757: PUSH
75758: LD_VAR 0 2
75762: ARRAY
75763: PUSH
75764: LD_VAR 0 6
75768: PUSH
75769: LD_INT 1
75771: ARRAY
75772: LESS
75773: IFFALSE 75793
// tmp := mc_crates_collector [ i ] else
75775: LD_ADDR_VAR 0 5
75779: PUSH
75780: LD_EXP 53
75784: PUSH
75785: LD_VAR 0 2
75789: ARRAY
75790: ST_TO_ADDR
75791: GO 75807
// tmp := target [ 1 ] ;
75793: LD_ADDR_VAR 0 5
75797: PUSH
75798: LD_VAR 0 6
75802: PUSH
75803: LD_INT 1
75805: ARRAY
75806: ST_TO_ADDR
// k := 0 ;
75807: LD_ADDR_VAR 0 4
75811: PUSH
75812: LD_INT 0
75814: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75815: LD_ADDR_VAR 0 3
75819: PUSH
75820: LD_EXP 53
75824: PUSH
75825: LD_VAR 0 2
75829: ARRAY
75830: PUSH
75831: FOR_IN
75832: IFFALSE 75992
// begin k := k + 1 ;
75834: LD_ADDR_VAR 0 4
75838: PUSH
75839: LD_VAR 0 4
75843: PUSH
75844: LD_INT 1
75846: PLUS
75847: ST_TO_ADDR
// if k > tmp then
75848: LD_VAR 0 4
75852: PUSH
75853: LD_VAR 0 5
75857: GREATER
75858: IFFALSE 75862
// break ;
75860: GO 75992
// if not GetClass ( j ) in [ 2 , 16 ] then
75862: LD_VAR 0 3
75866: PPUSH
75867: CALL_OW 257
75871: PUSH
75872: LD_INT 2
75874: PUSH
75875: LD_INT 16
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: IN
75882: NOT
75883: IFFALSE 75936
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75885: LD_ADDR_EXP 53
75889: PUSH
75890: LD_EXP 53
75894: PPUSH
75895: LD_VAR 0 2
75899: PPUSH
75900: LD_EXP 53
75904: PUSH
75905: LD_VAR 0 2
75909: ARRAY
75910: PUSH
75911: LD_VAR 0 3
75915: DIFF
75916: PPUSH
75917: CALL_OW 1
75921: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75922: LD_VAR 0 3
75926: PPUSH
75927: LD_INT 0
75929: PPUSH
75930: CALL_OW 109
// continue ;
75934: GO 75831
// end ; if IsInUnit ( j ) then
75936: LD_VAR 0 3
75940: PPUSH
75941: CALL_OW 310
75945: IFFALSE 75956
// ComExitBuilding ( j ) ;
75947: LD_VAR 0 3
75951: PPUSH
75952: CALL_OW 122
// wait ( 3 ) ;
75956: LD_INT 3
75958: PPUSH
75959: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75963: LD_VAR 0 3
75967: PPUSH
75968: LD_VAR 0 6
75972: PUSH
75973: LD_INT 2
75975: ARRAY
75976: PPUSH
75977: LD_VAR 0 6
75981: PUSH
75982: LD_INT 3
75984: ARRAY
75985: PPUSH
75986: CALL_OW 117
// end ;
75990: GO 75831
75992: POP
75993: POP
// end ; end else
75994: GO 76556
// begin for j in cargo do
75996: LD_ADDR_VAR 0 3
76000: PUSH
76001: LD_VAR 0 7
76005: PUSH
76006: FOR_IN
76007: IFFALSE 76554
// begin if GetTag ( j ) <> 0 then
76009: LD_VAR 0 3
76013: PPUSH
76014: CALL_OW 110
76018: PUSH
76019: LD_INT 0
76021: NONEQUAL
76022: IFFALSE 76026
// continue ;
76024: GO 76006
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76026: LD_VAR 0 3
76030: PPUSH
76031: CALL_OW 256
76035: PUSH
76036: LD_INT 1000
76038: LESS
76039: PUSH
76040: LD_VAR 0 3
76044: PPUSH
76045: LD_EXP 60
76049: PUSH
76050: LD_VAR 0 2
76054: ARRAY
76055: PPUSH
76056: CALL_OW 308
76060: NOT
76061: AND
76062: IFFALSE 76084
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76064: LD_VAR 0 3
76068: PPUSH
76069: LD_EXP 60
76073: PUSH
76074: LD_VAR 0 2
76078: ARRAY
76079: PPUSH
76080: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76084: LD_VAR 0 3
76088: PPUSH
76089: CALL_OW 256
76093: PUSH
76094: LD_INT 1000
76096: LESS
76097: PUSH
76098: LD_VAR 0 3
76102: PPUSH
76103: LD_EXP 60
76107: PUSH
76108: LD_VAR 0 2
76112: ARRAY
76113: PPUSH
76114: CALL_OW 308
76118: AND
76119: IFFALSE 76123
// continue ;
76121: GO 76006
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76123: LD_VAR 0 3
76127: PPUSH
76128: CALL_OW 262
76132: PUSH
76133: LD_INT 2
76135: EQUAL
76136: PUSH
76137: LD_VAR 0 3
76141: PPUSH
76142: CALL_OW 261
76146: PUSH
76147: LD_INT 15
76149: LESS
76150: AND
76151: IFFALSE 76155
// continue ;
76153: GO 76006
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76155: LD_VAR 0 3
76159: PPUSH
76160: CALL_OW 262
76164: PUSH
76165: LD_INT 1
76167: EQUAL
76168: PUSH
76169: LD_VAR 0 3
76173: PPUSH
76174: CALL_OW 261
76178: PUSH
76179: LD_INT 10
76181: LESS
76182: AND
76183: IFFALSE 76493
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76185: LD_ADDR_VAR 0 8
76189: PUSH
76190: LD_EXP 36
76194: PUSH
76195: LD_VAR 0 2
76199: ARRAY
76200: PPUSH
76201: LD_INT 2
76203: PUSH
76204: LD_INT 30
76206: PUSH
76207: LD_INT 0
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: LD_INT 30
76216: PUSH
76217: LD_INT 1
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: LIST
76228: PPUSH
76229: CALL_OW 72
76233: ST_TO_ADDR
// if not depot then
76234: LD_VAR 0 8
76238: NOT
76239: IFFALSE 76243
// continue ;
76241: GO 76006
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76243: LD_VAR 0 3
76247: PPUSH
76248: LD_VAR 0 8
76252: PPUSH
76253: LD_VAR 0 3
76257: PPUSH
76258: CALL_OW 74
76262: PPUSH
76263: CALL_OW 296
76267: PUSH
76268: LD_INT 6
76270: LESS
76271: IFFALSE 76287
// SetFuel ( j , 100 ) else
76273: LD_VAR 0 3
76277: PPUSH
76278: LD_INT 100
76280: PPUSH
76281: CALL_OW 240
76285: GO 76493
// if GetFuel ( j ) = 0 then
76287: LD_VAR 0 3
76291: PPUSH
76292: CALL_OW 261
76296: PUSH
76297: LD_INT 0
76299: EQUAL
76300: IFFALSE 76493
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76302: LD_ADDR_EXP 55
76306: PUSH
76307: LD_EXP 55
76311: PPUSH
76312: LD_VAR 0 2
76316: PPUSH
76317: LD_EXP 55
76321: PUSH
76322: LD_VAR 0 2
76326: ARRAY
76327: PUSH
76328: LD_VAR 0 3
76332: DIFF
76333: PPUSH
76334: CALL_OW 1
76338: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76339: LD_VAR 0 3
76343: PPUSH
76344: CALL_OW 263
76348: PUSH
76349: LD_INT 1
76351: EQUAL
76352: IFFALSE 76368
// ComExitVehicle ( IsInUnit ( j ) ) ;
76354: LD_VAR 0 3
76358: PPUSH
76359: CALL_OW 310
76363: PPUSH
76364: CALL_OW 121
// if GetControl ( j ) = control_remote then
76368: LD_VAR 0 3
76372: PPUSH
76373: CALL_OW 263
76377: PUSH
76378: LD_INT 2
76380: EQUAL
76381: IFFALSE 76392
// ComUnlink ( j ) ;
76383: LD_VAR 0 3
76387: PPUSH
76388: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76392: LD_ADDR_VAR 0 9
76396: PUSH
76397: LD_VAR 0 2
76401: PPUSH
76402: LD_INT 3
76404: PPUSH
76405: CALL 85539 0 2
76409: ST_TO_ADDR
// if fac then
76410: LD_VAR 0 9
76414: IFFALSE 76491
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76416: LD_ADDR_VAR 0 10
76420: PUSH
76421: LD_VAR 0 9
76425: PPUSH
76426: LD_VAR 0 3
76430: PPUSH
76431: CALL_OW 265
76435: PPUSH
76436: LD_VAR 0 3
76440: PPUSH
76441: CALL_OW 262
76445: PPUSH
76446: LD_VAR 0 3
76450: PPUSH
76451: CALL_OW 263
76455: PPUSH
76456: LD_VAR 0 3
76460: PPUSH
76461: CALL_OW 264
76465: PPUSH
76466: CALL 23661 0 5
76470: ST_TO_ADDR
// if components then
76471: LD_VAR 0 10
76475: IFFALSE 76491
// MC_InsertProduceList ( i , components ) ;
76477: LD_VAR 0 2
76481: PPUSH
76482: LD_VAR 0 10
76486: PPUSH
76487: CALL 85167 0 2
// end ; continue ;
76491: GO 76006
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76493: LD_VAR 0 3
76497: PPUSH
76498: LD_INT 1
76500: PPUSH
76501: CALL_OW 289
76505: PUSH
76506: LD_INT 100
76508: LESS
76509: PUSH
76510: LD_VAR 0 3
76514: PPUSH
76515: CALL_OW 314
76519: NOT
76520: AND
76521: IFFALSE 76550
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76523: LD_VAR 0 3
76527: PPUSH
76528: LD_VAR 0 6
76532: PUSH
76533: LD_INT 2
76535: ARRAY
76536: PPUSH
76537: LD_VAR 0 6
76541: PUSH
76542: LD_INT 3
76544: ARRAY
76545: PPUSH
76546: CALL_OW 117
// break ;
76550: GO 76554
// end ;
76552: GO 76006
76554: POP
76555: POP
// end ; end ;
76556: GO 74844
76558: POP
76559: POP
// end ;
76560: LD_VAR 0 1
76564: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76565: LD_INT 0
76567: PPUSH
76568: PPUSH
76569: PPUSH
76570: PPUSH
// if not mc_bases then
76571: LD_EXP 36
76575: NOT
76576: IFFALSE 76580
// exit ;
76578: GO 76741
// for i = 1 to mc_bases do
76580: LD_ADDR_VAR 0 2
76584: PUSH
76585: DOUBLE
76586: LD_INT 1
76588: DEC
76589: ST_TO_ADDR
76590: LD_EXP 36
76594: PUSH
76595: FOR_TO
76596: IFFALSE 76739
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76598: LD_ADDR_VAR 0 4
76602: PUSH
76603: LD_EXP 55
76607: PUSH
76608: LD_VAR 0 2
76612: ARRAY
76613: PUSH
76614: LD_EXP 58
76618: PUSH
76619: LD_VAR 0 2
76623: ARRAY
76624: UNION
76625: PPUSH
76626: LD_INT 33
76628: PUSH
76629: LD_INT 2
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PPUSH
76636: CALL_OW 72
76640: ST_TO_ADDR
// if tmp then
76641: LD_VAR 0 4
76645: IFFALSE 76737
// for j in tmp do
76647: LD_ADDR_VAR 0 3
76651: PUSH
76652: LD_VAR 0 4
76656: PUSH
76657: FOR_IN
76658: IFFALSE 76735
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76660: LD_VAR 0 3
76664: PPUSH
76665: CALL_OW 312
76669: NOT
76670: PUSH
76671: LD_VAR 0 3
76675: PPUSH
76676: CALL_OW 256
76680: PUSH
76681: LD_INT 250
76683: GREATEREQUAL
76684: AND
76685: IFFALSE 76698
// Connect ( j ) else
76687: LD_VAR 0 3
76691: PPUSH
76692: CALL 29001 0 1
76696: GO 76733
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76698: LD_VAR 0 3
76702: PPUSH
76703: CALL_OW 256
76707: PUSH
76708: LD_INT 250
76710: LESS
76711: PUSH
76712: LD_VAR 0 3
76716: PPUSH
76717: CALL_OW 312
76721: AND
76722: IFFALSE 76733
// ComUnlink ( j ) ;
76724: LD_VAR 0 3
76728: PPUSH
76729: CALL_OW 136
76733: GO 76657
76735: POP
76736: POP
// end ;
76737: GO 76595
76739: POP
76740: POP
// end ;
76741: LD_VAR 0 1
76745: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76746: LD_INT 0
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
76752: PPUSH
// if not mc_bases then
76753: LD_EXP 36
76757: NOT
76758: IFFALSE 76762
// exit ;
76760: GO 77222
// for i = 1 to mc_bases do
76762: LD_ADDR_VAR 0 2
76766: PUSH
76767: DOUBLE
76768: LD_INT 1
76770: DEC
76771: ST_TO_ADDR
76772: LD_EXP 36
76776: PUSH
76777: FOR_TO
76778: IFFALSE 77220
// begin if not mc_produce [ i ] then
76780: LD_EXP 57
76784: PUSH
76785: LD_VAR 0 2
76789: ARRAY
76790: NOT
76791: IFFALSE 76795
// continue ;
76793: GO 76777
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76795: LD_ADDR_VAR 0 5
76799: PUSH
76800: LD_EXP 36
76804: PUSH
76805: LD_VAR 0 2
76809: ARRAY
76810: PPUSH
76811: LD_INT 30
76813: PUSH
76814: LD_INT 3
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PPUSH
76821: CALL_OW 72
76825: ST_TO_ADDR
// if not fac then
76826: LD_VAR 0 5
76830: NOT
76831: IFFALSE 76835
// continue ;
76833: GO 76777
// for j in fac do
76835: LD_ADDR_VAR 0 3
76839: PUSH
76840: LD_VAR 0 5
76844: PUSH
76845: FOR_IN
76846: IFFALSE 77216
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76848: LD_VAR 0 3
76852: PPUSH
76853: CALL_OW 461
76857: PUSH
76858: LD_INT 2
76860: NONEQUAL
76861: PUSH
76862: LD_VAR 0 3
76866: PPUSH
76867: LD_INT 15
76869: PPUSH
76870: CALL 28661 0 2
76874: PUSH
76875: LD_INT 4
76877: ARRAY
76878: OR
76879: PUSH
76880: LD_VAR 0 3
76884: PPUSH
76885: CALL_OW 313
76889: PUSH
76890: LD_INT 0
76892: EQUAL
76893: OR
76894: IFFALSE 76898
// continue ;
76896: GO 76845
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76898: LD_VAR 0 3
76902: PPUSH
76903: LD_EXP 57
76907: PUSH
76908: LD_VAR 0 2
76912: ARRAY
76913: PUSH
76914: LD_INT 1
76916: ARRAY
76917: PUSH
76918: LD_INT 1
76920: ARRAY
76921: PPUSH
76922: LD_EXP 57
76926: PUSH
76927: LD_VAR 0 2
76931: ARRAY
76932: PUSH
76933: LD_INT 1
76935: ARRAY
76936: PUSH
76937: LD_INT 2
76939: ARRAY
76940: PPUSH
76941: LD_EXP 57
76945: PUSH
76946: LD_VAR 0 2
76950: ARRAY
76951: PUSH
76952: LD_INT 1
76954: ARRAY
76955: PUSH
76956: LD_INT 3
76958: ARRAY
76959: PPUSH
76960: LD_EXP 57
76964: PUSH
76965: LD_VAR 0 2
76969: ARRAY
76970: PUSH
76971: LD_INT 1
76973: ARRAY
76974: PUSH
76975: LD_INT 4
76977: ARRAY
76978: PPUSH
76979: CALL_OW 448
76983: PUSH
76984: LD_VAR 0 3
76988: PPUSH
76989: LD_EXP 57
76993: PUSH
76994: LD_VAR 0 2
76998: ARRAY
76999: PUSH
77000: LD_INT 1
77002: ARRAY
77003: PUSH
77004: LD_INT 1
77006: ARRAY
77007: PUSH
77008: LD_EXP 57
77012: PUSH
77013: LD_VAR 0 2
77017: ARRAY
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: PUSH
77023: LD_INT 2
77025: ARRAY
77026: PUSH
77027: LD_EXP 57
77031: PUSH
77032: LD_VAR 0 2
77036: ARRAY
77037: PUSH
77038: LD_INT 1
77040: ARRAY
77041: PUSH
77042: LD_INT 3
77044: ARRAY
77045: PUSH
77046: LD_EXP 57
77050: PUSH
77051: LD_VAR 0 2
77055: ARRAY
77056: PUSH
77057: LD_INT 1
77059: ARRAY
77060: PUSH
77061: LD_INT 4
77063: ARRAY
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: PPUSH
77071: CALL 32332 0 2
77075: AND
77076: IFFALSE 77214
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77078: LD_VAR 0 3
77082: PPUSH
77083: LD_EXP 57
77087: PUSH
77088: LD_VAR 0 2
77092: ARRAY
77093: PUSH
77094: LD_INT 1
77096: ARRAY
77097: PUSH
77098: LD_INT 1
77100: ARRAY
77101: PPUSH
77102: LD_EXP 57
77106: PUSH
77107: LD_VAR 0 2
77111: ARRAY
77112: PUSH
77113: LD_INT 1
77115: ARRAY
77116: PUSH
77117: LD_INT 2
77119: ARRAY
77120: PPUSH
77121: LD_EXP 57
77125: PUSH
77126: LD_VAR 0 2
77130: ARRAY
77131: PUSH
77132: LD_INT 1
77134: ARRAY
77135: PUSH
77136: LD_INT 3
77138: ARRAY
77139: PPUSH
77140: LD_EXP 57
77144: PUSH
77145: LD_VAR 0 2
77149: ARRAY
77150: PUSH
77151: LD_INT 1
77153: ARRAY
77154: PUSH
77155: LD_INT 4
77157: ARRAY
77158: PPUSH
77159: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77163: LD_ADDR_VAR 0 4
77167: PUSH
77168: LD_EXP 57
77172: PUSH
77173: LD_VAR 0 2
77177: ARRAY
77178: PPUSH
77179: LD_INT 1
77181: PPUSH
77182: CALL_OW 3
77186: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77187: LD_ADDR_EXP 57
77191: PUSH
77192: LD_EXP 57
77196: PPUSH
77197: LD_VAR 0 2
77201: PPUSH
77202: LD_VAR 0 4
77206: PPUSH
77207: CALL_OW 1
77211: ST_TO_ADDR
// break ;
77212: GO 77216
// end ; end ;
77214: GO 76845
77216: POP
77217: POP
// end ;
77218: GO 76777
77220: POP
77221: POP
// end ;
77222: LD_VAR 0 1
77226: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77227: LD_INT 0
77229: PPUSH
77230: PPUSH
77231: PPUSH
// if not mc_bases then
77232: LD_EXP 36
77236: NOT
77237: IFFALSE 77241
// exit ;
77239: GO 77330
// for i = 1 to mc_bases do
77241: LD_ADDR_VAR 0 2
77245: PUSH
77246: DOUBLE
77247: LD_INT 1
77249: DEC
77250: ST_TO_ADDR
77251: LD_EXP 36
77255: PUSH
77256: FOR_TO
77257: IFFALSE 77328
// begin if mc_attack [ i ] then
77259: LD_EXP 56
77263: PUSH
77264: LD_VAR 0 2
77268: ARRAY
77269: IFFALSE 77326
// begin tmp := mc_attack [ i ] [ 1 ] ;
77271: LD_ADDR_VAR 0 3
77275: PUSH
77276: LD_EXP 56
77280: PUSH
77281: LD_VAR 0 2
77285: ARRAY
77286: PUSH
77287: LD_INT 1
77289: ARRAY
77290: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77291: LD_ADDR_EXP 56
77295: PUSH
77296: LD_EXP 56
77300: PPUSH
77301: LD_VAR 0 2
77305: PPUSH
77306: EMPTY
77307: PPUSH
77308: CALL_OW 1
77312: ST_TO_ADDR
// Attack ( tmp ) ;
77313: LD_VAR 0 3
77317: PPUSH
77318: CALL 54539 0 1
// exit ;
77322: POP
77323: POP
77324: GO 77330
// end ; end ;
77326: GO 77256
77328: POP
77329: POP
// end ;
77330: LD_VAR 0 1
77334: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77335: LD_INT 0
77337: PPUSH
77338: PPUSH
77339: PPUSH
77340: PPUSH
77341: PPUSH
77342: PPUSH
77343: PPUSH
// if not mc_bases then
77344: LD_EXP 36
77348: NOT
77349: IFFALSE 77353
// exit ;
77351: GO 77935
// for i = 1 to mc_bases do
77353: LD_ADDR_VAR 0 2
77357: PUSH
77358: DOUBLE
77359: LD_INT 1
77361: DEC
77362: ST_TO_ADDR
77363: LD_EXP 36
77367: PUSH
77368: FOR_TO
77369: IFFALSE 77933
// begin if not mc_bases [ i ] then
77371: LD_EXP 36
77375: PUSH
77376: LD_VAR 0 2
77380: ARRAY
77381: NOT
77382: IFFALSE 77386
// continue ;
77384: GO 77368
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77386: LD_ADDR_VAR 0 7
77390: PUSH
77391: LD_EXP 36
77395: PUSH
77396: LD_VAR 0 2
77400: ARRAY
77401: PUSH
77402: LD_INT 1
77404: ARRAY
77405: PPUSH
77406: CALL 22965 0 1
77410: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77411: LD_ADDR_EXP 59
77415: PUSH
77416: LD_EXP 59
77420: PPUSH
77421: LD_VAR 0 2
77425: PPUSH
77426: LD_EXP 36
77430: PUSH
77431: LD_VAR 0 2
77435: ARRAY
77436: PUSH
77437: LD_INT 1
77439: ARRAY
77440: PPUSH
77441: CALL_OW 255
77445: PPUSH
77446: LD_EXP 61
77450: PUSH
77451: LD_VAR 0 2
77455: ARRAY
77456: PPUSH
77457: CALL 20962 0 2
77461: PPUSH
77462: CALL_OW 1
77466: ST_TO_ADDR
// if not mc_scan [ i ] then
77467: LD_EXP 59
77471: PUSH
77472: LD_VAR 0 2
77476: ARRAY
77477: NOT
77478: IFFALSE 77633
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77480: LD_ADDR_VAR 0 4
77484: PUSH
77485: LD_EXP 36
77489: PUSH
77490: LD_VAR 0 2
77494: ARRAY
77495: PPUSH
77496: LD_INT 2
77498: PUSH
77499: LD_INT 25
77501: PUSH
77502: LD_INT 5
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 25
77511: PUSH
77512: LD_INT 8
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 25
77521: PUSH
77522: LD_INT 9
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: PPUSH
77535: CALL_OW 72
77539: ST_TO_ADDR
// if not tmp then
77540: LD_VAR 0 4
77544: NOT
77545: IFFALSE 77549
// continue ;
77547: GO 77368
// for j in tmp do
77549: LD_ADDR_VAR 0 3
77553: PUSH
77554: LD_VAR 0 4
77558: PUSH
77559: FOR_IN
77560: IFFALSE 77631
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77562: LD_VAR 0 3
77566: PPUSH
77567: CALL_OW 310
77571: PPUSH
77572: CALL_OW 266
77576: PUSH
77577: LD_INT 5
77579: EQUAL
77580: PUSH
77581: LD_VAR 0 3
77585: PPUSH
77586: CALL_OW 257
77590: PUSH
77591: LD_INT 1
77593: EQUAL
77594: AND
77595: PUSH
77596: LD_VAR 0 3
77600: PPUSH
77601: CALL_OW 459
77605: NOT
77606: AND
77607: PUSH
77608: LD_VAR 0 7
77612: AND
77613: IFFALSE 77629
// ComChangeProfession ( j , class ) ;
77615: LD_VAR 0 3
77619: PPUSH
77620: LD_VAR 0 7
77624: PPUSH
77625: CALL_OW 123
77629: GO 77559
77631: POP
77632: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77633: LD_EXP 59
77637: PUSH
77638: LD_VAR 0 2
77642: ARRAY
77643: PUSH
77644: LD_EXP 58
77648: PUSH
77649: LD_VAR 0 2
77653: ARRAY
77654: NOT
77655: AND
77656: PUSH
77657: LD_EXP 36
77661: PUSH
77662: LD_VAR 0 2
77666: ARRAY
77667: PPUSH
77668: LD_INT 30
77670: PUSH
77671: LD_INT 32
77673: PUSH
77674: EMPTY
77675: LIST
77676: LIST
77677: PPUSH
77678: CALL_OW 72
77682: NOT
77683: AND
77684: PUSH
77685: LD_EXP 36
77689: PUSH
77690: LD_VAR 0 2
77694: ARRAY
77695: PPUSH
77696: LD_INT 2
77698: PUSH
77699: LD_INT 30
77701: PUSH
77702: LD_INT 4
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 30
77711: PUSH
77712: LD_INT 5
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: LIST
77723: PPUSH
77724: CALL_OW 72
77728: NOT
77729: AND
77730: IFFALSE 77862
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77732: LD_ADDR_VAR 0 4
77736: PUSH
77737: LD_EXP 36
77741: PUSH
77742: LD_VAR 0 2
77746: ARRAY
77747: PPUSH
77748: LD_INT 2
77750: PUSH
77751: LD_INT 25
77753: PUSH
77754: LD_INT 1
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PUSH
77761: LD_INT 25
77763: PUSH
77764: LD_INT 5
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 25
77773: PUSH
77774: LD_INT 8
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 25
77783: PUSH
77784: LD_INT 9
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: PPUSH
77798: CALL_OW 72
77802: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77803: LD_ADDR_VAR 0 4
77807: PUSH
77808: LD_VAR 0 4
77812: PUSH
77813: LD_VAR 0 4
77817: PPUSH
77818: LD_INT 18
77820: PPUSH
77821: CALL 59322 0 2
77825: DIFF
77826: ST_TO_ADDR
// if tmp then
77827: LD_VAR 0 4
77831: IFFALSE 77862
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77833: LD_VAR 0 2
77837: PPUSH
77838: LD_VAR 0 4
77842: PPUSH
77843: LD_EXP 61
77847: PUSH
77848: LD_VAR 0 2
77852: ARRAY
77853: PPUSH
77854: CALL 20997 0 3
// exit ;
77858: POP
77859: POP
77860: GO 77935
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77862: LD_EXP 59
77866: PUSH
77867: LD_VAR 0 2
77871: ARRAY
77872: PUSH
77873: LD_EXP 58
77877: PUSH
77878: LD_VAR 0 2
77882: ARRAY
77883: AND
77884: IFFALSE 77931
// begin tmp := mc_defender [ i ] ;
77886: LD_ADDR_VAR 0 4
77890: PUSH
77891: LD_EXP 58
77895: PUSH
77896: LD_VAR 0 2
77900: ARRAY
77901: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77902: LD_VAR 0 2
77906: PPUSH
77907: LD_VAR 0 4
77911: PPUSH
77912: LD_EXP 59
77916: PUSH
77917: LD_VAR 0 2
77921: ARRAY
77922: PPUSH
77923: CALL 21495 0 3
// exit ;
77927: POP
77928: POP
77929: GO 77935
// end ; end ;
77931: GO 77368
77933: POP
77934: POP
// end ;
77935: LD_VAR 0 1
77939: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77940: LD_INT 0
77942: PPUSH
77943: PPUSH
77944: PPUSH
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
77950: PPUSH
77951: PPUSH
77952: PPUSH
// if not mc_bases then
77953: LD_EXP 36
77957: NOT
77958: IFFALSE 77962
// exit ;
77960: GO 79049
// for i = 1 to mc_bases do
77962: LD_ADDR_VAR 0 2
77966: PUSH
77967: DOUBLE
77968: LD_INT 1
77970: DEC
77971: ST_TO_ADDR
77972: LD_EXP 36
77976: PUSH
77977: FOR_TO
77978: IFFALSE 79047
// begin tmp := mc_lab [ i ] ;
77980: LD_ADDR_VAR 0 6
77984: PUSH
77985: LD_EXP 69
77989: PUSH
77990: LD_VAR 0 2
77994: ARRAY
77995: ST_TO_ADDR
// if not tmp then
77996: LD_VAR 0 6
78000: NOT
78001: IFFALSE 78005
// continue ;
78003: GO 77977
// idle_lab := 0 ;
78005: LD_ADDR_VAR 0 11
78009: PUSH
78010: LD_INT 0
78012: ST_TO_ADDR
// for j in tmp do
78013: LD_ADDR_VAR 0 3
78017: PUSH
78018: LD_VAR 0 6
78022: PUSH
78023: FOR_IN
78024: IFFALSE 79043
// begin researching := false ;
78026: LD_ADDR_VAR 0 10
78030: PUSH
78031: LD_INT 0
78033: ST_TO_ADDR
// side := GetSide ( j ) ;
78034: LD_ADDR_VAR 0 4
78038: PUSH
78039: LD_VAR 0 3
78043: PPUSH
78044: CALL_OW 255
78048: ST_TO_ADDR
// if not mc_tech [ side ] then
78049: LD_EXP 63
78053: PUSH
78054: LD_VAR 0 4
78058: ARRAY
78059: NOT
78060: IFFALSE 78064
// continue ;
78062: GO 78023
// if BuildingStatus ( j ) = bs_idle then
78064: LD_VAR 0 3
78068: PPUSH
78069: CALL_OW 461
78073: PUSH
78074: LD_INT 2
78076: EQUAL
78077: IFFALSE 78265
// begin if idle_lab and UnitsInside ( j ) < 6 then
78079: LD_VAR 0 11
78083: PUSH
78084: LD_VAR 0 3
78088: PPUSH
78089: CALL_OW 313
78093: PUSH
78094: LD_INT 6
78096: LESS
78097: AND
78098: IFFALSE 78169
// begin tmp2 := UnitsInside ( idle_lab ) ;
78100: LD_ADDR_VAR 0 9
78104: PUSH
78105: LD_VAR 0 11
78109: PPUSH
78110: CALL_OW 313
78114: ST_TO_ADDR
// if tmp2 then
78115: LD_VAR 0 9
78119: IFFALSE 78161
// for x in tmp2 do
78121: LD_ADDR_VAR 0 7
78125: PUSH
78126: LD_VAR 0 9
78130: PUSH
78131: FOR_IN
78132: IFFALSE 78159
// begin ComExitBuilding ( x ) ;
78134: LD_VAR 0 7
78138: PPUSH
78139: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78143: LD_VAR 0 7
78147: PPUSH
78148: LD_VAR 0 3
78152: PPUSH
78153: CALL_OW 180
// end ;
78157: GO 78131
78159: POP
78160: POP
// idle_lab := 0 ;
78161: LD_ADDR_VAR 0 11
78165: PUSH
78166: LD_INT 0
78168: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78169: LD_ADDR_VAR 0 5
78173: PUSH
78174: LD_EXP 63
78178: PUSH
78179: LD_VAR 0 4
78183: ARRAY
78184: PUSH
78185: FOR_IN
78186: IFFALSE 78246
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78188: LD_VAR 0 3
78192: PPUSH
78193: LD_VAR 0 5
78197: PPUSH
78198: CALL_OW 430
78202: PUSH
78203: LD_VAR 0 4
78207: PPUSH
78208: LD_VAR 0 5
78212: PPUSH
78213: CALL 20067 0 2
78217: AND
78218: IFFALSE 78244
// begin researching := true ;
78220: LD_ADDR_VAR 0 10
78224: PUSH
78225: LD_INT 1
78227: ST_TO_ADDR
// ComResearch ( j , t ) ;
78228: LD_VAR 0 3
78232: PPUSH
78233: LD_VAR 0 5
78237: PPUSH
78238: CALL_OW 124
// break ;
78242: GO 78246
// end ;
78244: GO 78185
78246: POP
78247: POP
// if not researching then
78248: LD_VAR 0 10
78252: NOT
78253: IFFALSE 78265
// idle_lab := j ;
78255: LD_ADDR_VAR 0 11
78259: PUSH
78260: LD_VAR 0 3
78264: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78265: LD_VAR 0 3
78269: PPUSH
78270: CALL_OW 461
78274: PUSH
78275: LD_INT 10
78277: EQUAL
78278: IFFALSE 78866
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78280: LD_EXP 65
78284: PUSH
78285: LD_VAR 0 2
78289: ARRAY
78290: NOT
78291: PUSH
78292: LD_EXP 66
78296: PUSH
78297: LD_VAR 0 2
78301: ARRAY
78302: NOT
78303: AND
78304: PUSH
78305: LD_EXP 63
78309: PUSH
78310: LD_VAR 0 4
78314: ARRAY
78315: PUSH
78316: LD_INT 1
78318: GREATER
78319: AND
78320: IFFALSE 78451
// begin ComCancel ( j ) ;
78322: LD_VAR 0 3
78326: PPUSH
78327: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78331: LD_ADDR_EXP 63
78335: PUSH
78336: LD_EXP 63
78340: PPUSH
78341: LD_VAR 0 4
78345: PPUSH
78346: LD_EXP 63
78350: PUSH
78351: LD_VAR 0 4
78355: ARRAY
78356: PPUSH
78357: LD_EXP 63
78361: PUSH
78362: LD_VAR 0 4
78366: ARRAY
78367: PUSH
78368: LD_INT 1
78370: MINUS
78371: PPUSH
78372: LD_EXP 63
78376: PUSH
78377: LD_VAR 0 4
78381: ARRAY
78382: PPUSH
78383: LD_INT 0
78385: PPUSH
78386: CALL 25486 0 4
78390: PPUSH
78391: CALL_OW 1
78395: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78396: LD_ADDR_EXP 63
78400: PUSH
78401: LD_EXP 63
78405: PPUSH
78406: LD_VAR 0 4
78410: PPUSH
78411: LD_EXP 63
78415: PUSH
78416: LD_VAR 0 4
78420: ARRAY
78421: PPUSH
78422: LD_EXP 63
78426: PUSH
78427: LD_VAR 0 4
78431: ARRAY
78432: PPUSH
78433: LD_INT 1
78435: PPUSH
78436: LD_INT 0
78438: PPUSH
78439: CALL 25486 0 4
78443: PPUSH
78444: CALL_OW 1
78448: ST_TO_ADDR
// continue ;
78449: GO 78023
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78451: LD_EXP 65
78455: PUSH
78456: LD_VAR 0 2
78460: ARRAY
78461: PUSH
78462: LD_EXP 66
78466: PUSH
78467: LD_VAR 0 2
78471: ARRAY
78472: NOT
78473: AND
78474: IFFALSE 78601
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78476: LD_ADDR_EXP 66
78480: PUSH
78481: LD_EXP 66
78485: PPUSH
78486: LD_VAR 0 2
78490: PUSH
78491: LD_EXP 66
78495: PUSH
78496: LD_VAR 0 2
78500: ARRAY
78501: PUSH
78502: LD_INT 1
78504: PLUS
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PPUSH
78510: LD_EXP 65
78514: PUSH
78515: LD_VAR 0 2
78519: ARRAY
78520: PUSH
78521: LD_INT 1
78523: ARRAY
78524: PPUSH
78525: CALL 26068 0 3
78529: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
78530: LD_EXP 65
78534: PUSH
78535: LD_VAR 0 2
78539: ARRAY
78540: PUSH
78541: LD_INT 1
78543: ARRAY
78544: PPUSH
78545: LD_INT 112
78547: PPUSH
78548: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78552: LD_ADDR_VAR 0 9
78556: PUSH
78557: LD_EXP 65
78561: PUSH
78562: LD_VAR 0 2
78566: ARRAY
78567: PPUSH
78568: LD_INT 1
78570: PPUSH
78571: CALL_OW 3
78575: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78576: LD_ADDR_EXP 65
78580: PUSH
78581: LD_EXP 65
78585: PPUSH
78586: LD_VAR 0 2
78590: PPUSH
78591: LD_VAR 0 9
78595: PPUSH
78596: CALL_OW 1
78600: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78601: LD_EXP 65
78605: PUSH
78606: LD_VAR 0 2
78610: ARRAY
78611: PUSH
78612: LD_EXP 66
78616: PUSH
78617: LD_VAR 0 2
78621: ARRAY
78622: AND
78623: PUSH
78624: LD_EXP 66
78628: PUSH
78629: LD_VAR 0 2
78633: ARRAY
78634: PUSH
78635: LD_INT 1
78637: ARRAY
78638: PPUSH
78639: CALL_OW 310
78643: NOT
78644: AND
78645: PUSH
78646: LD_VAR 0 3
78650: PPUSH
78651: CALL_OW 313
78655: PUSH
78656: LD_INT 6
78658: EQUAL
78659: AND
78660: IFFALSE 78716
// begin tmp2 := UnitsInside ( j ) ;
78662: LD_ADDR_VAR 0 9
78666: PUSH
78667: LD_VAR 0 3
78671: PPUSH
78672: CALL_OW 313
78676: ST_TO_ADDR
// if tmp2 = 6 then
78677: LD_VAR 0 9
78681: PUSH
78682: LD_INT 6
78684: EQUAL
78685: IFFALSE 78716
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78687: LD_VAR 0 9
78691: PUSH
78692: LD_INT 1
78694: ARRAY
78695: PPUSH
78696: LD_INT 112
78698: PPUSH
78699: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78703: LD_VAR 0 9
78707: PUSH
78708: LD_INT 1
78710: ARRAY
78711: PPUSH
78712: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78716: LD_EXP 66
78720: PUSH
78721: LD_VAR 0 2
78725: ARRAY
78726: PUSH
78727: LD_EXP 66
78731: PUSH
78732: LD_VAR 0 2
78736: ARRAY
78737: PUSH
78738: LD_INT 1
78740: ARRAY
78741: PPUSH
78742: CALL_OW 314
78746: NOT
78747: AND
78748: PUSH
78749: LD_EXP 66
78753: PUSH
78754: LD_VAR 0 2
78758: ARRAY
78759: PUSH
78760: LD_INT 1
78762: ARRAY
78763: PPUSH
78764: CALL_OW 310
78768: NOT
78769: AND
78770: IFFALSE 78796
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78772: LD_EXP 66
78776: PUSH
78777: LD_VAR 0 2
78781: ARRAY
78782: PUSH
78783: LD_INT 1
78785: ARRAY
78786: PPUSH
78787: LD_VAR 0 3
78791: PPUSH
78792: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78796: LD_EXP 66
78800: PUSH
78801: LD_VAR 0 2
78805: ARRAY
78806: PUSH
78807: LD_INT 1
78809: ARRAY
78810: PPUSH
78811: CALL_OW 310
78815: PUSH
78816: LD_EXP 66
78820: PUSH
78821: LD_VAR 0 2
78825: ARRAY
78826: PUSH
78827: LD_INT 1
78829: ARRAY
78830: PPUSH
78831: CALL_OW 310
78835: PPUSH
78836: CALL_OW 461
78840: PUSH
78841: LD_INT 3
78843: NONEQUAL
78844: AND
78845: IFFALSE 78866
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78847: LD_EXP 66
78851: PUSH
78852: LD_VAR 0 2
78856: ARRAY
78857: PUSH
78858: LD_INT 1
78860: ARRAY
78861: PPUSH
78862: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78866: LD_VAR 0 3
78870: PPUSH
78871: CALL_OW 461
78875: PUSH
78876: LD_INT 6
78878: EQUAL
78879: PUSH
78880: LD_VAR 0 6
78884: PUSH
78885: LD_INT 1
78887: GREATER
78888: AND
78889: IFFALSE 79041
// begin sci := [ ] ;
78891: LD_ADDR_VAR 0 8
78895: PUSH
78896: EMPTY
78897: ST_TO_ADDR
// for x in ( tmp diff j ) do
78898: LD_ADDR_VAR 0 7
78902: PUSH
78903: LD_VAR 0 6
78907: PUSH
78908: LD_VAR 0 3
78912: DIFF
78913: PUSH
78914: FOR_IN
78915: IFFALSE 78967
// begin if sci = 6 then
78917: LD_VAR 0 8
78921: PUSH
78922: LD_INT 6
78924: EQUAL
78925: IFFALSE 78929
// break ;
78927: GO 78967
// if BuildingStatus ( x ) = bs_idle then
78929: LD_VAR 0 7
78933: PPUSH
78934: CALL_OW 461
78938: PUSH
78939: LD_INT 2
78941: EQUAL
78942: IFFALSE 78965
// sci := sci ^ UnitsInside ( x ) ;
78944: LD_ADDR_VAR 0 8
78948: PUSH
78949: LD_VAR 0 8
78953: PUSH
78954: LD_VAR 0 7
78958: PPUSH
78959: CALL_OW 313
78963: ADD
78964: ST_TO_ADDR
// end ;
78965: GO 78914
78967: POP
78968: POP
// if not sci then
78969: LD_VAR 0 8
78973: NOT
78974: IFFALSE 78978
// continue ;
78976: GO 78023
// for x in sci do
78978: LD_ADDR_VAR 0 7
78982: PUSH
78983: LD_VAR 0 8
78987: PUSH
78988: FOR_IN
78989: IFFALSE 79039
// if IsInUnit ( x ) and not HasTask ( x ) then
78991: LD_VAR 0 7
78995: PPUSH
78996: CALL_OW 310
79000: PUSH
79001: LD_VAR 0 7
79005: PPUSH
79006: CALL_OW 314
79010: NOT
79011: AND
79012: IFFALSE 79037
// begin ComExitBuilding ( x ) ;
79014: LD_VAR 0 7
79018: PPUSH
79019: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79023: LD_VAR 0 7
79027: PPUSH
79028: LD_VAR 0 3
79032: PPUSH
79033: CALL_OW 180
// end ;
79037: GO 78988
79039: POP
79040: POP
// end ; end ;
79041: GO 78023
79043: POP
79044: POP
// end ;
79045: GO 77977
79047: POP
79048: POP
// end ;
79049: LD_VAR 0 1
79053: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79054: LD_INT 0
79056: PPUSH
79057: PPUSH
// if not mc_bases then
79058: LD_EXP 36
79062: NOT
79063: IFFALSE 79067
// exit ;
79065: GO 79148
// for i = 1 to mc_bases do
79067: LD_ADDR_VAR 0 2
79071: PUSH
79072: DOUBLE
79073: LD_INT 1
79075: DEC
79076: ST_TO_ADDR
79077: LD_EXP 36
79081: PUSH
79082: FOR_TO
79083: IFFALSE 79146
// if mc_mines [ i ] and mc_miners [ i ] then
79085: LD_EXP 49
79089: PUSH
79090: LD_VAR 0 2
79094: ARRAY
79095: PUSH
79096: LD_EXP 50
79100: PUSH
79101: LD_VAR 0 2
79105: ARRAY
79106: AND
79107: IFFALSE 79144
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79109: LD_EXP 50
79113: PUSH
79114: LD_VAR 0 2
79118: ARRAY
79119: PUSH
79120: LD_INT 1
79122: ARRAY
79123: PPUSH
79124: CALL_OW 255
79128: PPUSH
79129: LD_EXP 49
79133: PUSH
79134: LD_VAR 0 2
79138: ARRAY
79139: PPUSH
79140: CALL 23118 0 2
79144: GO 79082
79146: POP
79147: POP
// end ;
79148: LD_VAR 0 1
79152: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79153: LD_INT 0
79155: PPUSH
79156: PPUSH
79157: PPUSH
79158: PPUSH
79159: PPUSH
79160: PPUSH
79161: PPUSH
79162: PPUSH
// if not mc_bases or not mc_parking then
79163: LD_EXP 36
79167: NOT
79168: PUSH
79169: LD_EXP 60
79173: NOT
79174: OR
79175: IFFALSE 79179
// exit ;
79177: GO 79855
// for i = 1 to mc_bases do
79179: LD_ADDR_VAR 0 2
79183: PUSH
79184: DOUBLE
79185: LD_INT 1
79187: DEC
79188: ST_TO_ADDR
79189: LD_EXP 36
79193: PUSH
79194: FOR_TO
79195: IFFALSE 79853
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79197: LD_EXP 36
79201: PUSH
79202: LD_VAR 0 2
79206: ARRAY
79207: NOT
79208: PUSH
79209: LD_EXP 60
79213: PUSH
79214: LD_VAR 0 2
79218: ARRAY
79219: NOT
79220: OR
79221: IFFALSE 79225
// continue ;
79223: GO 79194
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79225: LD_ADDR_VAR 0 5
79229: PUSH
79230: LD_EXP 36
79234: PUSH
79235: LD_VAR 0 2
79239: ARRAY
79240: PUSH
79241: LD_INT 1
79243: ARRAY
79244: PPUSH
79245: CALL_OW 255
79249: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79250: LD_ADDR_VAR 0 6
79254: PUSH
79255: LD_EXP 36
79259: PUSH
79260: LD_VAR 0 2
79264: ARRAY
79265: PPUSH
79266: LD_INT 30
79268: PUSH
79269: LD_INT 3
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PPUSH
79276: CALL_OW 72
79280: ST_TO_ADDR
// if not fac then
79281: LD_VAR 0 6
79285: NOT
79286: IFFALSE 79337
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79288: LD_ADDR_VAR 0 6
79292: PUSH
79293: LD_EXP 36
79297: PUSH
79298: LD_VAR 0 2
79302: ARRAY
79303: PPUSH
79304: LD_INT 2
79306: PUSH
79307: LD_INT 30
79309: PUSH
79310: LD_INT 0
79312: PUSH
79313: EMPTY
79314: LIST
79315: LIST
79316: PUSH
79317: LD_INT 30
79319: PUSH
79320: LD_INT 1
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: LIST
79331: PPUSH
79332: CALL_OW 72
79336: ST_TO_ADDR
// if not fac then
79337: LD_VAR 0 6
79341: NOT
79342: IFFALSE 79346
// continue ;
79344: GO 79194
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79346: LD_ADDR_VAR 0 7
79350: PUSH
79351: LD_EXP 60
79355: PUSH
79356: LD_VAR 0 2
79360: ARRAY
79361: PPUSH
79362: LD_INT 22
79364: PUSH
79365: LD_VAR 0 5
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: LD_INT 21
79376: PUSH
79377: LD_INT 2
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 3
79386: PUSH
79387: LD_INT 24
79389: PUSH
79390: LD_INT 1000
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: LIST
79405: PPUSH
79406: CALL_OW 70
79410: PUSH
79411: LD_INT 22
79413: PUSH
79414: LD_VAR 0 5
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: LD_INT 91
79425: PUSH
79426: LD_VAR 0 6
79430: PUSH
79431: LD_INT 1
79433: ARRAY
79434: PUSH
79435: LD_INT 25
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: LIST
79442: PUSH
79443: LD_INT 21
79445: PUSH
79446: LD_INT 2
79448: PUSH
79449: EMPTY
79450: LIST
79451: LIST
79452: PUSH
79453: LD_INT 3
79455: PUSH
79456: LD_INT 24
79458: PUSH
79459: LD_INT 1000
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: PPUSH
79476: CALL_OW 69
79480: UNION
79481: ST_TO_ADDR
// if not vehs then
79482: LD_VAR 0 7
79486: NOT
79487: IFFALSE 79513
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79489: LD_ADDR_EXP 48
79493: PUSH
79494: LD_EXP 48
79498: PPUSH
79499: LD_VAR 0 2
79503: PPUSH
79504: EMPTY
79505: PPUSH
79506: CALL_OW 1
79510: ST_TO_ADDR
// continue ;
79511: GO 79194
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79513: LD_ADDR_VAR 0 8
79517: PUSH
79518: LD_EXP 36
79522: PUSH
79523: LD_VAR 0 2
79527: ARRAY
79528: PPUSH
79529: LD_INT 30
79531: PUSH
79532: LD_INT 3
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PPUSH
79539: CALL_OW 72
79543: ST_TO_ADDR
// if tmp then
79544: LD_VAR 0 8
79548: IFFALSE 79651
// begin for j in tmp do
79550: LD_ADDR_VAR 0 3
79554: PUSH
79555: LD_VAR 0 8
79559: PUSH
79560: FOR_IN
79561: IFFALSE 79649
// for k in UnitsInside ( j ) do
79563: LD_ADDR_VAR 0 4
79567: PUSH
79568: LD_VAR 0 3
79572: PPUSH
79573: CALL_OW 313
79577: PUSH
79578: FOR_IN
79579: IFFALSE 79645
// if k then
79581: LD_VAR 0 4
79585: IFFALSE 79643
// if not k in mc_repair_vehicle [ i ] then
79587: LD_VAR 0 4
79591: PUSH
79592: LD_EXP 48
79596: PUSH
79597: LD_VAR 0 2
79601: ARRAY
79602: IN
79603: NOT
79604: IFFALSE 79643
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79606: LD_ADDR_EXP 48
79610: PUSH
79611: LD_EXP 48
79615: PPUSH
79616: LD_VAR 0 2
79620: PPUSH
79621: LD_EXP 48
79625: PUSH
79626: LD_VAR 0 2
79630: ARRAY
79631: PUSH
79632: LD_VAR 0 4
79636: UNION
79637: PPUSH
79638: CALL_OW 1
79642: ST_TO_ADDR
79643: GO 79578
79645: POP
79646: POP
79647: GO 79560
79649: POP
79650: POP
// end ; if not mc_repair_vehicle [ i ] then
79651: LD_EXP 48
79655: PUSH
79656: LD_VAR 0 2
79660: ARRAY
79661: NOT
79662: IFFALSE 79666
// continue ;
79664: GO 79194
// for j in mc_repair_vehicle [ i ] do
79666: LD_ADDR_VAR 0 3
79670: PUSH
79671: LD_EXP 48
79675: PUSH
79676: LD_VAR 0 2
79680: ARRAY
79681: PUSH
79682: FOR_IN
79683: IFFALSE 79849
// begin if GetClass ( j ) <> 3 then
79685: LD_VAR 0 3
79689: PPUSH
79690: CALL_OW 257
79694: PUSH
79695: LD_INT 3
79697: NONEQUAL
79698: IFFALSE 79739
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79700: LD_ADDR_EXP 48
79704: PUSH
79705: LD_EXP 48
79709: PPUSH
79710: LD_VAR 0 2
79714: PPUSH
79715: LD_EXP 48
79719: PUSH
79720: LD_VAR 0 2
79724: ARRAY
79725: PUSH
79726: LD_VAR 0 3
79730: DIFF
79731: PPUSH
79732: CALL_OW 1
79736: ST_TO_ADDR
// continue ;
79737: GO 79682
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79739: LD_VAR 0 3
79743: PPUSH
79744: CALL_OW 311
79748: NOT
79749: PUSH
79750: LD_VAR 0 3
79754: PUSH
79755: LD_EXP 39
79759: PUSH
79760: LD_VAR 0 2
79764: ARRAY
79765: PUSH
79766: LD_INT 1
79768: ARRAY
79769: IN
79770: NOT
79771: AND
79772: PUSH
79773: LD_VAR 0 3
79777: PUSH
79778: LD_EXP 39
79782: PUSH
79783: LD_VAR 0 2
79787: ARRAY
79788: PUSH
79789: LD_INT 2
79791: ARRAY
79792: IN
79793: NOT
79794: AND
79795: IFFALSE 79847
// begin if IsInUnit ( j ) then
79797: LD_VAR 0 3
79801: PPUSH
79802: CALL_OW 310
79806: IFFALSE 79817
// ComExitBuilding ( j ) ;
79808: LD_VAR 0 3
79812: PPUSH
79813: CALL_OW 122
// if not HasTask ( j ) then
79817: LD_VAR 0 3
79821: PPUSH
79822: CALL_OW 314
79826: NOT
79827: IFFALSE 79847
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79829: LD_VAR 0 3
79833: PPUSH
79834: LD_VAR 0 7
79838: PUSH
79839: LD_INT 1
79841: ARRAY
79842: PPUSH
79843: CALL_OW 189
// end ; end ;
79847: GO 79682
79849: POP
79850: POP
// end ;
79851: GO 79194
79853: POP
79854: POP
// end ;
79855: LD_VAR 0 1
79859: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79860: LD_INT 0
79862: PPUSH
79863: PPUSH
79864: PPUSH
79865: PPUSH
79866: PPUSH
79867: PPUSH
79868: PPUSH
79869: PPUSH
79870: PPUSH
79871: PPUSH
79872: PPUSH
// if not mc_bases then
79873: LD_EXP 36
79877: NOT
79878: IFFALSE 79882
// exit ;
79880: GO 80684
// for i = 1 to mc_bases do
79882: LD_ADDR_VAR 0 2
79886: PUSH
79887: DOUBLE
79888: LD_INT 1
79890: DEC
79891: ST_TO_ADDR
79892: LD_EXP 36
79896: PUSH
79897: FOR_TO
79898: IFFALSE 80682
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79900: LD_EXP 64
79904: PUSH
79905: LD_VAR 0 2
79909: ARRAY
79910: NOT
79911: PUSH
79912: LD_EXP 39
79916: PUSH
79917: LD_VAR 0 2
79921: ARRAY
79922: PUSH
79923: LD_INT 1
79925: ARRAY
79926: OR
79927: PUSH
79928: LD_EXP 39
79932: PUSH
79933: LD_VAR 0 2
79937: ARRAY
79938: PUSH
79939: LD_INT 2
79941: ARRAY
79942: OR
79943: PUSH
79944: LD_EXP 62
79948: PUSH
79949: LD_VAR 0 2
79953: ARRAY
79954: PPUSH
79955: LD_INT 1
79957: PPUSH
79958: CALL_OW 325
79962: NOT
79963: OR
79964: PUSH
79965: LD_EXP 59
79969: PUSH
79970: LD_VAR 0 2
79974: ARRAY
79975: OR
79976: IFFALSE 79980
// continue ;
79978: GO 79897
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79980: LD_ADDR_VAR 0 8
79984: PUSH
79985: LD_EXP 36
79989: PUSH
79990: LD_VAR 0 2
79994: ARRAY
79995: PPUSH
79996: LD_INT 25
79998: PUSH
79999: LD_INT 4
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: PUSH
80006: LD_INT 50
80008: PUSH
80009: EMPTY
80010: LIST
80011: PUSH
80012: LD_INT 3
80014: PUSH
80015: LD_INT 60
80017: PUSH
80018: EMPTY
80019: LIST
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: EMPTY
80026: LIST
80027: LIST
80028: LIST
80029: PPUSH
80030: CALL_OW 72
80034: PUSH
80035: LD_EXP 40
80039: PUSH
80040: LD_VAR 0 2
80044: ARRAY
80045: DIFF
80046: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80047: LD_ADDR_VAR 0 9
80051: PUSH
80052: LD_EXP 36
80056: PUSH
80057: LD_VAR 0 2
80061: ARRAY
80062: PPUSH
80063: LD_INT 2
80065: PUSH
80066: LD_INT 30
80068: PUSH
80069: LD_INT 0
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: PUSH
80076: LD_INT 30
80078: PUSH
80079: LD_INT 1
80081: PUSH
80082: EMPTY
80083: LIST
80084: LIST
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: LIST
80090: PPUSH
80091: CALL_OW 72
80095: ST_TO_ADDR
// if not tmp or not dep then
80096: LD_VAR 0 8
80100: NOT
80101: PUSH
80102: LD_VAR 0 9
80106: NOT
80107: OR
80108: IFFALSE 80112
// continue ;
80110: GO 79897
// side := GetSide ( tmp [ 1 ] ) ;
80112: LD_ADDR_VAR 0 11
80116: PUSH
80117: LD_VAR 0 8
80121: PUSH
80122: LD_INT 1
80124: ARRAY
80125: PPUSH
80126: CALL_OW 255
80130: ST_TO_ADDR
// dep := dep [ 1 ] ;
80131: LD_ADDR_VAR 0 9
80135: PUSH
80136: LD_VAR 0 9
80140: PUSH
80141: LD_INT 1
80143: ARRAY
80144: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80145: LD_ADDR_VAR 0 7
80149: PUSH
80150: LD_EXP 64
80154: PUSH
80155: LD_VAR 0 2
80159: ARRAY
80160: PPUSH
80161: LD_INT 22
80163: PUSH
80164: LD_INT 0
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: LD_INT 25
80173: PUSH
80174: LD_INT 12
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PPUSH
80185: CALL_OW 70
80189: PUSH
80190: LD_INT 22
80192: PUSH
80193: LD_INT 0
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PUSH
80200: LD_INT 25
80202: PUSH
80203: LD_INT 12
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: PUSH
80210: LD_INT 91
80212: PUSH
80213: LD_VAR 0 9
80217: PUSH
80218: LD_INT 20
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: LIST
80225: PUSH
80226: EMPTY
80227: LIST
80228: LIST
80229: LIST
80230: PPUSH
80231: CALL_OW 69
80235: UNION
80236: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80237: LD_ADDR_VAR 0 10
80241: PUSH
80242: LD_EXP 64
80246: PUSH
80247: LD_VAR 0 2
80251: ARRAY
80252: PPUSH
80253: LD_INT 81
80255: PUSH
80256: LD_VAR 0 11
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: PPUSH
80265: CALL_OW 70
80269: ST_TO_ADDR
// if not apes or danger_at_area then
80270: LD_VAR 0 7
80274: NOT
80275: PUSH
80276: LD_VAR 0 10
80280: OR
80281: IFFALSE 80331
// begin if mc_taming [ i ] then
80283: LD_EXP 67
80287: PUSH
80288: LD_VAR 0 2
80292: ARRAY
80293: IFFALSE 80329
// begin MC_Reset ( i , 121 ) ;
80295: LD_VAR 0 2
80299: PPUSH
80300: LD_INT 121
80302: PPUSH
80303: CALL 66024 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80307: LD_ADDR_EXP 67
80311: PUSH
80312: LD_EXP 67
80316: PPUSH
80317: LD_VAR 0 2
80321: PPUSH
80322: EMPTY
80323: PPUSH
80324: CALL_OW 1
80328: ST_TO_ADDR
// end ; continue ;
80329: GO 79897
// end ; for j in tmp do
80331: LD_ADDR_VAR 0 3
80335: PUSH
80336: LD_VAR 0 8
80340: PUSH
80341: FOR_IN
80342: IFFALSE 80678
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80344: LD_VAR 0 3
80348: PUSH
80349: LD_EXP 67
80353: PUSH
80354: LD_VAR 0 2
80358: ARRAY
80359: IN
80360: NOT
80361: PUSH
80362: LD_EXP 67
80366: PUSH
80367: LD_VAR 0 2
80371: ARRAY
80372: PUSH
80373: LD_INT 3
80375: LESS
80376: AND
80377: IFFALSE 80435
// begin SetTag ( j , 121 ) ;
80379: LD_VAR 0 3
80383: PPUSH
80384: LD_INT 121
80386: PPUSH
80387: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80391: LD_ADDR_EXP 67
80395: PUSH
80396: LD_EXP 67
80400: PPUSH
80401: LD_VAR 0 2
80405: PUSH
80406: LD_EXP 67
80410: PUSH
80411: LD_VAR 0 2
80415: ARRAY
80416: PUSH
80417: LD_INT 1
80419: PLUS
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PPUSH
80425: LD_VAR 0 3
80429: PPUSH
80430: CALL 26068 0 3
80434: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80435: LD_VAR 0 3
80439: PUSH
80440: LD_EXP 67
80444: PUSH
80445: LD_VAR 0 2
80449: ARRAY
80450: IN
80451: IFFALSE 80676
// begin if GetClass ( j ) <> 4 then
80453: LD_VAR 0 3
80457: PPUSH
80458: CALL_OW 257
80462: PUSH
80463: LD_INT 4
80465: NONEQUAL
80466: IFFALSE 80519
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80468: LD_ADDR_EXP 67
80472: PUSH
80473: LD_EXP 67
80477: PPUSH
80478: LD_VAR 0 2
80482: PPUSH
80483: LD_EXP 67
80487: PUSH
80488: LD_VAR 0 2
80492: ARRAY
80493: PUSH
80494: LD_VAR 0 3
80498: DIFF
80499: PPUSH
80500: CALL_OW 1
80504: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80505: LD_VAR 0 3
80509: PPUSH
80510: LD_INT 0
80512: PPUSH
80513: CALL_OW 109
// continue ;
80517: GO 80341
// end ; if IsInUnit ( j ) then
80519: LD_VAR 0 3
80523: PPUSH
80524: CALL_OW 310
80528: IFFALSE 80539
// ComExitBuilding ( j ) ;
80530: LD_VAR 0 3
80534: PPUSH
80535: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
80539: LD_ADDR_VAR 0 6
80543: PUSH
80544: LD_VAR 0 7
80548: PPUSH
80549: LD_VAR 0 3
80553: PPUSH
80554: CALL_OW 74
80558: ST_TO_ADDR
// if not ape then
80559: LD_VAR 0 6
80563: NOT
80564: IFFALSE 80568
// break ;
80566: GO 80678
// x := GetX ( ape ) ;
80568: LD_ADDR_VAR 0 4
80572: PUSH
80573: LD_VAR 0 6
80577: PPUSH
80578: CALL_OW 250
80582: ST_TO_ADDR
// y := GetY ( ape ) ;
80583: LD_ADDR_VAR 0 5
80587: PUSH
80588: LD_VAR 0 6
80592: PPUSH
80593: CALL_OW 251
80597: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80598: LD_VAR 0 4
80602: PPUSH
80603: LD_VAR 0 5
80607: PPUSH
80608: CALL_OW 488
80612: NOT
80613: PUSH
80614: LD_VAR 0 11
80618: PPUSH
80619: LD_VAR 0 4
80623: PPUSH
80624: LD_VAR 0 5
80628: PPUSH
80629: LD_INT 20
80631: PPUSH
80632: CALL 26964 0 4
80636: PUSH
80637: LD_INT 4
80639: ARRAY
80640: OR
80641: IFFALSE 80645
// break ;
80643: GO 80678
// if not HasTask ( j ) then
80645: LD_VAR 0 3
80649: PPUSH
80650: CALL_OW 314
80654: NOT
80655: IFFALSE 80676
// ComTameXY ( j , x , y ) ;
80657: LD_VAR 0 3
80661: PPUSH
80662: LD_VAR 0 4
80666: PPUSH
80667: LD_VAR 0 5
80671: PPUSH
80672: CALL_OW 131
// end ; end ;
80676: GO 80341
80678: POP
80679: POP
// end ;
80680: GO 79897
80682: POP
80683: POP
// end ;
80684: LD_VAR 0 1
80688: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80689: LD_INT 0
80691: PPUSH
80692: PPUSH
80693: PPUSH
80694: PPUSH
80695: PPUSH
80696: PPUSH
80697: PPUSH
80698: PPUSH
// if not mc_bases then
80699: LD_EXP 36
80703: NOT
80704: IFFALSE 80708
// exit ;
80706: GO 81334
// for i = 1 to mc_bases do
80708: LD_ADDR_VAR 0 2
80712: PUSH
80713: DOUBLE
80714: LD_INT 1
80716: DEC
80717: ST_TO_ADDR
80718: LD_EXP 36
80722: PUSH
80723: FOR_TO
80724: IFFALSE 81332
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80726: LD_EXP 65
80730: PUSH
80731: LD_VAR 0 2
80735: ARRAY
80736: NOT
80737: PUSH
80738: LD_EXP 65
80742: PUSH
80743: LD_VAR 0 2
80747: ARRAY
80748: PPUSH
80749: LD_INT 25
80751: PUSH
80752: LD_INT 12
80754: PUSH
80755: EMPTY
80756: LIST
80757: LIST
80758: PPUSH
80759: CALL_OW 72
80763: NOT
80764: OR
80765: IFFALSE 80769
// continue ;
80767: GO 80723
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80769: LD_ADDR_VAR 0 5
80773: PUSH
80774: LD_EXP 65
80778: PUSH
80779: LD_VAR 0 2
80783: ARRAY
80784: PUSH
80785: LD_INT 1
80787: ARRAY
80788: PPUSH
80789: CALL_OW 255
80793: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80794: LD_VAR 0 5
80798: PPUSH
80799: LD_INT 2
80801: PPUSH
80802: CALL_OW 325
80806: IFFALSE 81059
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80808: LD_ADDR_VAR 0 4
80812: PUSH
80813: LD_EXP 65
80817: PUSH
80818: LD_VAR 0 2
80822: ARRAY
80823: PPUSH
80824: LD_INT 25
80826: PUSH
80827: LD_INT 16
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PPUSH
80834: CALL_OW 72
80838: ST_TO_ADDR
// if tmp < 6 then
80839: LD_VAR 0 4
80843: PUSH
80844: LD_INT 6
80846: LESS
80847: IFFALSE 81059
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80849: LD_ADDR_VAR 0 6
80853: PUSH
80854: LD_EXP 36
80858: PUSH
80859: LD_VAR 0 2
80863: ARRAY
80864: PPUSH
80865: LD_INT 2
80867: PUSH
80868: LD_INT 30
80870: PUSH
80871: LD_INT 0
80873: PUSH
80874: EMPTY
80875: LIST
80876: LIST
80877: PUSH
80878: LD_INT 30
80880: PUSH
80881: LD_INT 1
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: PUSH
80888: EMPTY
80889: LIST
80890: LIST
80891: LIST
80892: PPUSH
80893: CALL_OW 72
80897: ST_TO_ADDR
// if depot then
80898: LD_VAR 0 6
80902: IFFALSE 81059
// begin selected := 0 ;
80904: LD_ADDR_VAR 0 7
80908: PUSH
80909: LD_INT 0
80911: ST_TO_ADDR
// for j in depot do
80912: LD_ADDR_VAR 0 3
80916: PUSH
80917: LD_VAR 0 6
80921: PUSH
80922: FOR_IN
80923: IFFALSE 80954
// begin if UnitsInside ( j ) < 6 then
80925: LD_VAR 0 3
80929: PPUSH
80930: CALL_OW 313
80934: PUSH
80935: LD_INT 6
80937: LESS
80938: IFFALSE 80952
// begin selected := j ;
80940: LD_ADDR_VAR 0 7
80944: PUSH
80945: LD_VAR 0 3
80949: ST_TO_ADDR
// break ;
80950: GO 80954
// end ; end ;
80952: GO 80922
80954: POP
80955: POP
// if selected then
80956: LD_VAR 0 7
80960: IFFALSE 81059
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80962: LD_ADDR_VAR 0 3
80966: PUSH
80967: LD_EXP 65
80971: PUSH
80972: LD_VAR 0 2
80976: ARRAY
80977: PPUSH
80978: LD_INT 25
80980: PUSH
80981: LD_INT 12
80983: PUSH
80984: EMPTY
80985: LIST
80986: LIST
80987: PPUSH
80988: CALL_OW 72
80992: PUSH
80993: FOR_IN
80994: IFFALSE 81057
// if not HasTask ( j ) then
80996: LD_VAR 0 3
81000: PPUSH
81001: CALL_OW 314
81005: NOT
81006: IFFALSE 81055
// begin if not IsInUnit ( j ) then
81008: LD_VAR 0 3
81012: PPUSH
81013: CALL_OW 310
81017: NOT
81018: IFFALSE 81034
// ComEnterUnit ( j , selected ) ;
81020: LD_VAR 0 3
81024: PPUSH
81025: LD_VAR 0 7
81029: PPUSH
81030: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81034: LD_VAR 0 3
81038: PPUSH
81039: LD_INT 16
81041: PPUSH
81042: CALL_OW 183
// AddComExitBuilding ( j ) ;
81046: LD_VAR 0 3
81050: PPUSH
81051: CALL_OW 182
// end ;
81055: GO 80993
81057: POP
81058: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81059: LD_VAR 0 5
81063: PPUSH
81064: LD_INT 11
81066: PPUSH
81067: CALL_OW 325
81071: IFFALSE 81330
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81073: LD_ADDR_VAR 0 4
81077: PUSH
81078: LD_EXP 65
81082: PUSH
81083: LD_VAR 0 2
81087: ARRAY
81088: PPUSH
81089: LD_INT 25
81091: PUSH
81092: LD_INT 16
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PPUSH
81099: CALL_OW 72
81103: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81104: LD_VAR 0 4
81108: PUSH
81109: LD_INT 6
81111: GREATEREQUAL
81112: PUSH
81113: LD_VAR 0 5
81117: PPUSH
81118: LD_INT 2
81120: PPUSH
81121: CALL_OW 325
81125: NOT
81126: OR
81127: IFFALSE 81330
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81129: LD_ADDR_VAR 0 8
81133: PUSH
81134: LD_EXP 36
81138: PUSH
81139: LD_VAR 0 2
81143: ARRAY
81144: PPUSH
81145: LD_INT 2
81147: PUSH
81148: LD_INT 30
81150: PUSH
81151: LD_INT 4
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_INT 30
81160: PUSH
81161: LD_INT 5
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PUSH
81168: EMPTY
81169: LIST
81170: LIST
81171: LIST
81172: PPUSH
81173: CALL_OW 72
81177: ST_TO_ADDR
// if barracks then
81178: LD_VAR 0 8
81182: IFFALSE 81330
// begin selected := 0 ;
81184: LD_ADDR_VAR 0 7
81188: PUSH
81189: LD_INT 0
81191: ST_TO_ADDR
// for j in barracks do
81192: LD_ADDR_VAR 0 3
81196: PUSH
81197: LD_VAR 0 8
81201: PUSH
81202: FOR_IN
81203: IFFALSE 81234
// begin if UnitsInside ( j ) < 6 then
81205: LD_VAR 0 3
81209: PPUSH
81210: CALL_OW 313
81214: PUSH
81215: LD_INT 6
81217: LESS
81218: IFFALSE 81232
// begin selected := j ;
81220: LD_ADDR_VAR 0 7
81224: PUSH
81225: LD_VAR 0 3
81229: ST_TO_ADDR
// break ;
81230: GO 81234
// end ; end ;
81232: GO 81202
81234: POP
81235: POP
// if selected then
81236: LD_VAR 0 7
81240: IFFALSE 81330
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81242: LD_ADDR_VAR 0 3
81246: PUSH
81247: LD_EXP 65
81251: PUSH
81252: LD_VAR 0 2
81256: ARRAY
81257: PPUSH
81258: LD_INT 25
81260: PUSH
81261: LD_INT 12
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PPUSH
81268: CALL_OW 72
81272: PUSH
81273: FOR_IN
81274: IFFALSE 81328
// if not IsInUnit ( j ) and not HasTask ( j ) then
81276: LD_VAR 0 3
81280: PPUSH
81281: CALL_OW 310
81285: NOT
81286: PUSH
81287: LD_VAR 0 3
81291: PPUSH
81292: CALL_OW 314
81296: NOT
81297: AND
81298: IFFALSE 81326
// begin ComEnterUnit ( j , selected ) ;
81300: LD_VAR 0 3
81304: PPUSH
81305: LD_VAR 0 7
81309: PPUSH
81310: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81314: LD_VAR 0 3
81318: PPUSH
81319: LD_INT 15
81321: PPUSH
81322: CALL_OW 183
// end ;
81326: GO 81273
81328: POP
81329: POP
// end ; end ; end ; end ; end ;
81330: GO 80723
81332: POP
81333: POP
// end ;
81334: LD_VAR 0 1
81338: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81339: LD_INT 0
81341: PPUSH
81342: PPUSH
81343: PPUSH
81344: PPUSH
// if not mc_bases then
81345: LD_EXP 36
81349: NOT
81350: IFFALSE 81354
// exit ;
81352: GO 81532
// for i = 1 to mc_bases do
81354: LD_ADDR_VAR 0 2
81358: PUSH
81359: DOUBLE
81360: LD_INT 1
81362: DEC
81363: ST_TO_ADDR
81364: LD_EXP 36
81368: PUSH
81369: FOR_TO
81370: IFFALSE 81530
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81372: LD_ADDR_VAR 0 4
81376: PUSH
81377: LD_EXP 36
81381: PUSH
81382: LD_VAR 0 2
81386: ARRAY
81387: PPUSH
81388: LD_INT 25
81390: PUSH
81391: LD_INT 9
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: PPUSH
81398: CALL_OW 72
81402: ST_TO_ADDR
// if not tmp then
81403: LD_VAR 0 4
81407: NOT
81408: IFFALSE 81412
// continue ;
81410: GO 81369
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81412: LD_EXP 62
81416: PUSH
81417: LD_VAR 0 2
81421: ARRAY
81422: PPUSH
81423: LD_INT 29
81425: PPUSH
81426: CALL_OW 325
81430: NOT
81431: PUSH
81432: LD_EXP 62
81436: PUSH
81437: LD_VAR 0 2
81441: ARRAY
81442: PPUSH
81443: LD_INT 28
81445: PPUSH
81446: CALL_OW 325
81450: NOT
81451: AND
81452: IFFALSE 81456
// continue ;
81454: GO 81369
// for j in tmp do
81456: LD_ADDR_VAR 0 3
81460: PUSH
81461: LD_VAR 0 4
81465: PUSH
81466: FOR_IN
81467: IFFALSE 81526
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81469: LD_VAR 0 3
81473: PUSH
81474: LD_EXP 39
81478: PUSH
81479: LD_VAR 0 2
81483: ARRAY
81484: PUSH
81485: LD_INT 1
81487: ARRAY
81488: IN
81489: NOT
81490: PUSH
81491: LD_VAR 0 3
81495: PUSH
81496: LD_EXP 39
81500: PUSH
81501: LD_VAR 0 2
81505: ARRAY
81506: PUSH
81507: LD_INT 2
81509: ARRAY
81510: IN
81511: NOT
81512: AND
81513: IFFALSE 81524
// ComSpaceTimeShoot ( j ) ;
81515: LD_VAR 0 3
81519: PPUSH
81520: CALL 20158 0 1
81524: GO 81466
81526: POP
81527: POP
// end ;
81528: GO 81369
81530: POP
81531: POP
// end ;
81532: LD_VAR 0 1
81536: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81537: LD_INT 0
81539: PPUSH
81540: PPUSH
81541: PPUSH
81542: PPUSH
81543: PPUSH
81544: PPUSH
81545: PPUSH
81546: PPUSH
81547: PPUSH
// if not mc_bases then
81548: LD_EXP 36
81552: NOT
81553: IFFALSE 81557
// exit ;
81555: GO 82179
// for i = 1 to mc_bases do
81557: LD_ADDR_VAR 0 2
81561: PUSH
81562: DOUBLE
81563: LD_INT 1
81565: DEC
81566: ST_TO_ADDR
81567: LD_EXP 36
81571: PUSH
81572: FOR_TO
81573: IFFALSE 82177
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81575: LD_EXP 71
81579: PUSH
81580: LD_VAR 0 2
81584: ARRAY
81585: NOT
81586: PUSH
81587: LD_INT 38
81589: PPUSH
81590: LD_EXP 62
81594: PUSH
81595: LD_VAR 0 2
81599: ARRAY
81600: PPUSH
81601: CALL_OW 321
81605: PUSH
81606: LD_INT 2
81608: NONEQUAL
81609: OR
81610: IFFALSE 81614
// continue ;
81612: GO 81572
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81614: LD_ADDR_VAR 0 8
81618: PUSH
81619: LD_EXP 36
81623: PUSH
81624: LD_VAR 0 2
81628: ARRAY
81629: PPUSH
81630: LD_INT 30
81632: PUSH
81633: LD_INT 34
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PPUSH
81640: CALL_OW 72
81644: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81645: LD_ADDR_VAR 0 9
81649: PUSH
81650: LD_EXP 36
81654: PUSH
81655: LD_VAR 0 2
81659: ARRAY
81660: PPUSH
81661: LD_INT 25
81663: PUSH
81664: LD_INT 4
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: PPUSH
81671: CALL_OW 72
81675: PPUSH
81676: LD_INT 0
81678: PPUSH
81679: CALL 59322 0 2
81683: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81684: LD_VAR 0 9
81688: NOT
81689: PUSH
81690: LD_VAR 0 8
81694: NOT
81695: OR
81696: PUSH
81697: LD_EXP 36
81701: PUSH
81702: LD_VAR 0 2
81706: ARRAY
81707: PPUSH
81708: LD_INT 124
81710: PPUSH
81711: CALL 59322 0 2
81715: OR
81716: IFFALSE 81720
// continue ;
81718: GO 81572
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81720: LD_EXP 72
81724: PUSH
81725: LD_VAR 0 2
81729: ARRAY
81730: PUSH
81731: LD_EXP 71
81735: PUSH
81736: LD_VAR 0 2
81740: ARRAY
81741: LESS
81742: PUSH
81743: LD_EXP 72
81747: PUSH
81748: LD_VAR 0 2
81752: ARRAY
81753: PUSH
81754: LD_VAR 0 8
81758: LESS
81759: AND
81760: IFFALSE 82175
// begin tmp := sci [ 1 ] ;
81762: LD_ADDR_VAR 0 7
81766: PUSH
81767: LD_VAR 0 9
81771: PUSH
81772: LD_INT 1
81774: ARRAY
81775: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81776: LD_VAR 0 7
81780: PPUSH
81781: LD_INT 124
81783: PPUSH
81784: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81788: LD_ADDR_VAR 0 3
81792: PUSH
81793: DOUBLE
81794: LD_EXP 71
81798: PUSH
81799: LD_VAR 0 2
81803: ARRAY
81804: INC
81805: ST_TO_ADDR
81806: LD_EXP 71
81810: PUSH
81811: LD_VAR 0 2
81815: ARRAY
81816: PUSH
81817: FOR_DOWNTO
81818: IFFALSE 82161
// begin if IsInUnit ( tmp ) then
81820: LD_VAR 0 7
81824: PPUSH
81825: CALL_OW 310
81829: IFFALSE 81840
// ComExitBuilding ( tmp ) ;
81831: LD_VAR 0 7
81835: PPUSH
81836: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
81840: LD_INT 35
81842: PPUSH
81843: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81847: LD_VAR 0 7
81851: PPUSH
81852: CALL_OW 310
81856: NOT
81857: PUSH
81858: LD_VAR 0 7
81862: PPUSH
81863: CALL_OW 314
81867: NOT
81868: AND
81869: IFFALSE 81840
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81871: LD_ADDR_VAR 0 6
81875: PUSH
81876: LD_VAR 0 7
81880: PPUSH
81881: CALL_OW 250
81885: PUSH
81886: LD_VAR 0 7
81890: PPUSH
81891: CALL_OW 251
81895: PUSH
81896: EMPTY
81897: LIST
81898: LIST
81899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81900: LD_INT 35
81902: PPUSH
81903: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81907: LD_ADDR_VAR 0 4
81911: PUSH
81912: LD_EXP 71
81916: PUSH
81917: LD_VAR 0 2
81921: ARRAY
81922: PUSH
81923: LD_VAR 0 3
81927: ARRAY
81928: PUSH
81929: LD_INT 1
81931: ARRAY
81932: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81933: LD_ADDR_VAR 0 5
81937: PUSH
81938: LD_EXP 71
81942: PUSH
81943: LD_VAR 0 2
81947: ARRAY
81948: PUSH
81949: LD_VAR 0 3
81953: ARRAY
81954: PUSH
81955: LD_INT 2
81957: ARRAY
81958: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81959: LD_VAR 0 7
81963: PPUSH
81964: LD_INT 10
81966: PPUSH
81967: CALL 28661 0 2
81971: PUSH
81972: LD_INT 4
81974: ARRAY
81975: IFFALSE 82013
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81977: LD_VAR 0 7
81981: PPUSH
81982: LD_VAR 0 6
81986: PUSH
81987: LD_INT 1
81989: ARRAY
81990: PPUSH
81991: LD_VAR 0 6
81995: PUSH
81996: LD_INT 2
81998: ARRAY
81999: PPUSH
82000: CALL_OW 111
// wait ( 0 0$10 ) ;
82004: LD_INT 350
82006: PPUSH
82007: CALL_OW 67
// end else
82011: GO 82039
// begin ComMoveXY ( tmp , x , y ) ;
82013: LD_VAR 0 7
82017: PPUSH
82018: LD_VAR 0 4
82022: PPUSH
82023: LD_VAR 0 5
82027: PPUSH
82028: CALL_OW 111
// wait ( 0 0$3 ) ;
82032: LD_INT 105
82034: PPUSH
82035: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82039: LD_VAR 0 7
82043: PPUSH
82044: LD_VAR 0 4
82048: PPUSH
82049: LD_VAR 0 5
82053: PPUSH
82054: CALL_OW 307
82058: IFFALSE 81900
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82060: LD_VAR 0 7
82064: PPUSH
82065: LD_VAR 0 4
82069: PPUSH
82070: LD_VAR 0 5
82074: PPUSH
82075: LD_VAR 0 8
82079: PUSH
82080: LD_VAR 0 3
82084: ARRAY
82085: PPUSH
82086: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82090: LD_INT 35
82092: PPUSH
82093: CALL_OW 67
// until not HasTask ( tmp ) ;
82097: LD_VAR 0 7
82101: PPUSH
82102: CALL_OW 314
82106: NOT
82107: IFFALSE 82090
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82109: LD_ADDR_EXP 72
82113: PUSH
82114: LD_EXP 72
82118: PPUSH
82119: LD_VAR 0 2
82123: PUSH
82124: LD_EXP 72
82128: PUSH
82129: LD_VAR 0 2
82133: ARRAY
82134: PUSH
82135: LD_INT 1
82137: PLUS
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PPUSH
82143: LD_VAR 0 8
82147: PUSH
82148: LD_VAR 0 3
82152: ARRAY
82153: PPUSH
82154: CALL 26068 0 3
82158: ST_TO_ADDR
// end ;
82159: GO 81817
82161: POP
82162: POP
// MC_Reset ( i , 124 ) ;
82163: LD_VAR 0 2
82167: PPUSH
82168: LD_INT 124
82170: PPUSH
82171: CALL 66024 0 2
// end ; end ;
82175: GO 81572
82177: POP
82178: POP
// end ;
82179: LD_VAR 0 1
82183: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82184: LD_INT 0
82186: PPUSH
82187: PPUSH
82188: PPUSH
// if not mc_bases then
82189: LD_EXP 36
82193: NOT
82194: IFFALSE 82198
// exit ;
82196: GO 82804
// for i = 1 to mc_bases do
82198: LD_ADDR_VAR 0 2
82202: PUSH
82203: DOUBLE
82204: LD_INT 1
82206: DEC
82207: ST_TO_ADDR
82208: LD_EXP 36
82212: PUSH
82213: FOR_TO
82214: IFFALSE 82802
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82216: LD_ADDR_VAR 0 3
82220: PUSH
82221: LD_EXP 36
82225: PUSH
82226: LD_VAR 0 2
82230: ARRAY
82231: PPUSH
82232: LD_INT 25
82234: PUSH
82235: LD_INT 4
82237: PUSH
82238: EMPTY
82239: LIST
82240: LIST
82241: PPUSH
82242: CALL_OW 72
82246: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82247: LD_VAR 0 3
82251: NOT
82252: PUSH
82253: LD_EXP 73
82257: PUSH
82258: LD_VAR 0 2
82262: ARRAY
82263: NOT
82264: OR
82265: PUSH
82266: LD_EXP 36
82270: PUSH
82271: LD_VAR 0 2
82275: ARRAY
82276: PPUSH
82277: LD_INT 2
82279: PUSH
82280: LD_INT 30
82282: PUSH
82283: LD_INT 0
82285: PUSH
82286: EMPTY
82287: LIST
82288: LIST
82289: PUSH
82290: LD_INT 30
82292: PUSH
82293: LD_INT 1
82295: PUSH
82296: EMPTY
82297: LIST
82298: LIST
82299: PUSH
82300: EMPTY
82301: LIST
82302: LIST
82303: LIST
82304: PPUSH
82305: CALL_OW 72
82309: NOT
82310: OR
82311: IFFALSE 82361
// begin if mc_deposits_finder [ i ] then
82313: LD_EXP 74
82317: PUSH
82318: LD_VAR 0 2
82322: ARRAY
82323: IFFALSE 82359
// begin MC_Reset ( i , 125 ) ;
82325: LD_VAR 0 2
82329: PPUSH
82330: LD_INT 125
82332: PPUSH
82333: CALL 66024 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82337: LD_ADDR_EXP 74
82341: PUSH
82342: LD_EXP 74
82346: PPUSH
82347: LD_VAR 0 2
82351: PPUSH
82352: EMPTY
82353: PPUSH
82354: CALL_OW 1
82358: ST_TO_ADDR
// end ; continue ;
82359: GO 82213
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82361: LD_EXP 73
82365: PUSH
82366: LD_VAR 0 2
82370: ARRAY
82371: PUSH
82372: LD_INT 1
82374: ARRAY
82375: PUSH
82376: LD_INT 3
82378: ARRAY
82379: PUSH
82380: LD_INT 1
82382: EQUAL
82383: PUSH
82384: LD_INT 20
82386: PPUSH
82387: LD_EXP 62
82391: PUSH
82392: LD_VAR 0 2
82396: ARRAY
82397: PPUSH
82398: CALL_OW 321
82402: PUSH
82403: LD_INT 2
82405: NONEQUAL
82406: AND
82407: IFFALSE 82457
// begin if mc_deposits_finder [ i ] then
82409: LD_EXP 74
82413: PUSH
82414: LD_VAR 0 2
82418: ARRAY
82419: IFFALSE 82455
// begin MC_Reset ( i , 125 ) ;
82421: LD_VAR 0 2
82425: PPUSH
82426: LD_INT 125
82428: PPUSH
82429: CALL 66024 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82433: LD_ADDR_EXP 74
82437: PUSH
82438: LD_EXP 74
82442: PPUSH
82443: LD_VAR 0 2
82447: PPUSH
82448: EMPTY
82449: PPUSH
82450: CALL_OW 1
82454: ST_TO_ADDR
// end ; continue ;
82455: GO 82213
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82457: LD_EXP 73
82461: PUSH
82462: LD_VAR 0 2
82466: ARRAY
82467: PUSH
82468: LD_INT 1
82470: ARRAY
82471: PUSH
82472: LD_INT 1
82474: ARRAY
82475: PPUSH
82476: LD_EXP 73
82480: PUSH
82481: LD_VAR 0 2
82485: ARRAY
82486: PUSH
82487: LD_INT 1
82489: ARRAY
82490: PUSH
82491: LD_INT 2
82493: ARRAY
82494: PPUSH
82495: LD_EXP 62
82499: PUSH
82500: LD_VAR 0 2
82504: ARRAY
82505: PPUSH
82506: CALL_OW 440
82510: IFFALSE 82553
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82512: LD_ADDR_EXP 73
82516: PUSH
82517: LD_EXP 73
82521: PPUSH
82522: LD_VAR 0 2
82526: PPUSH
82527: LD_EXP 73
82531: PUSH
82532: LD_VAR 0 2
82536: ARRAY
82537: PPUSH
82538: LD_INT 1
82540: PPUSH
82541: CALL_OW 3
82545: PPUSH
82546: CALL_OW 1
82550: ST_TO_ADDR
82551: GO 82800
// begin if not mc_deposits_finder [ i ] then
82553: LD_EXP 74
82557: PUSH
82558: LD_VAR 0 2
82562: ARRAY
82563: NOT
82564: IFFALSE 82616
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82566: LD_ADDR_EXP 74
82570: PUSH
82571: LD_EXP 74
82575: PPUSH
82576: LD_VAR 0 2
82580: PPUSH
82581: LD_VAR 0 3
82585: PUSH
82586: LD_INT 1
82588: ARRAY
82589: PUSH
82590: EMPTY
82591: LIST
82592: PPUSH
82593: CALL_OW 1
82597: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82598: LD_VAR 0 3
82602: PUSH
82603: LD_INT 1
82605: ARRAY
82606: PPUSH
82607: LD_INT 125
82609: PPUSH
82610: CALL_OW 109
// end else
82614: GO 82800
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82616: LD_EXP 74
82620: PUSH
82621: LD_VAR 0 2
82625: ARRAY
82626: PUSH
82627: LD_INT 1
82629: ARRAY
82630: PPUSH
82631: CALL_OW 310
82635: IFFALSE 82658
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82637: LD_EXP 74
82641: PUSH
82642: LD_VAR 0 2
82646: ARRAY
82647: PUSH
82648: LD_INT 1
82650: ARRAY
82651: PPUSH
82652: CALL_OW 122
82656: GO 82800
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82658: LD_EXP 74
82662: PUSH
82663: LD_VAR 0 2
82667: ARRAY
82668: PUSH
82669: LD_INT 1
82671: ARRAY
82672: PPUSH
82673: CALL_OW 314
82677: NOT
82678: PUSH
82679: LD_EXP 74
82683: PUSH
82684: LD_VAR 0 2
82688: ARRAY
82689: PUSH
82690: LD_INT 1
82692: ARRAY
82693: PPUSH
82694: LD_EXP 73
82698: PUSH
82699: LD_VAR 0 2
82703: ARRAY
82704: PUSH
82705: LD_INT 1
82707: ARRAY
82708: PUSH
82709: LD_INT 1
82711: ARRAY
82712: PPUSH
82713: LD_EXP 73
82717: PUSH
82718: LD_VAR 0 2
82722: ARRAY
82723: PUSH
82724: LD_INT 1
82726: ARRAY
82727: PUSH
82728: LD_INT 2
82730: ARRAY
82731: PPUSH
82732: CALL_OW 297
82736: PUSH
82737: LD_INT 6
82739: GREATER
82740: AND
82741: IFFALSE 82800
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82743: LD_EXP 74
82747: PUSH
82748: LD_VAR 0 2
82752: ARRAY
82753: PUSH
82754: LD_INT 1
82756: ARRAY
82757: PPUSH
82758: LD_EXP 73
82762: PUSH
82763: LD_VAR 0 2
82767: ARRAY
82768: PUSH
82769: LD_INT 1
82771: ARRAY
82772: PUSH
82773: LD_INT 1
82775: ARRAY
82776: PPUSH
82777: LD_EXP 73
82781: PUSH
82782: LD_VAR 0 2
82786: ARRAY
82787: PUSH
82788: LD_INT 1
82790: ARRAY
82791: PUSH
82792: LD_INT 2
82794: ARRAY
82795: PPUSH
82796: CALL_OW 111
// end ; end ; end ;
82800: GO 82213
82802: POP
82803: POP
// end ;
82804: LD_VAR 0 1
82808: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82809: LD_INT 0
82811: PPUSH
82812: PPUSH
82813: PPUSH
82814: PPUSH
82815: PPUSH
82816: PPUSH
82817: PPUSH
82818: PPUSH
82819: PPUSH
82820: PPUSH
82821: PPUSH
// if not mc_bases then
82822: LD_EXP 36
82826: NOT
82827: IFFALSE 82831
// exit ;
82829: GO 83555
// for i = 1 to mc_bases do
82831: LD_ADDR_VAR 0 2
82835: PUSH
82836: DOUBLE
82837: LD_INT 1
82839: DEC
82840: ST_TO_ADDR
82841: LD_EXP 36
82845: PUSH
82846: FOR_TO
82847: IFFALSE 83553
// begin if not mc_bases [ i ] then
82849: LD_EXP 36
82853: PUSH
82854: LD_VAR 0 2
82858: ARRAY
82859: NOT
82860: IFFALSE 82864
// continue ;
82862: GO 82846
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82864: LD_ADDR_VAR 0 7
82868: PUSH
82869: LD_EXP 36
82873: PUSH
82874: LD_VAR 0 2
82878: ARRAY
82879: PUSH
82880: LD_INT 1
82882: ARRAY
82883: PPUSH
82884: CALL_OW 248
82888: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82889: LD_VAR 0 7
82893: PUSH
82894: LD_INT 3
82896: EQUAL
82897: PUSH
82898: LD_EXP 55
82902: PUSH
82903: LD_VAR 0 2
82907: ARRAY
82908: PUSH
82909: LD_EXP 58
82913: PUSH
82914: LD_VAR 0 2
82918: ARRAY
82919: UNION
82920: PPUSH
82921: LD_INT 33
82923: PUSH
82924: LD_INT 2
82926: PUSH
82927: EMPTY
82928: LIST
82929: LIST
82930: PPUSH
82931: CALL_OW 72
82935: NOT
82936: OR
82937: IFFALSE 82941
// continue ;
82939: GO 82846
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82941: LD_ADDR_VAR 0 9
82945: PUSH
82946: LD_EXP 36
82950: PUSH
82951: LD_VAR 0 2
82955: ARRAY
82956: PPUSH
82957: LD_INT 30
82959: PUSH
82960: LD_INT 36
82962: PUSH
82963: EMPTY
82964: LIST
82965: LIST
82966: PPUSH
82967: CALL_OW 72
82971: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82972: LD_ADDR_VAR 0 10
82976: PUSH
82977: LD_EXP 55
82981: PUSH
82982: LD_VAR 0 2
82986: ARRAY
82987: PPUSH
82988: LD_INT 34
82990: PUSH
82991: LD_INT 31
82993: PUSH
82994: EMPTY
82995: LIST
82996: LIST
82997: PPUSH
82998: CALL_OW 72
83002: ST_TO_ADDR
// if not cts and not mcts then
83003: LD_VAR 0 9
83007: NOT
83008: PUSH
83009: LD_VAR 0 10
83013: NOT
83014: AND
83015: IFFALSE 83019
// continue ;
83017: GO 82846
// x := cts ;
83019: LD_ADDR_VAR 0 11
83023: PUSH
83024: LD_VAR 0 9
83028: ST_TO_ADDR
// if not x then
83029: LD_VAR 0 11
83033: NOT
83034: IFFALSE 83046
// x := mcts ;
83036: LD_ADDR_VAR 0 11
83040: PUSH
83041: LD_VAR 0 10
83045: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83046: LD_EXP 76
83050: PUSH
83051: LD_VAR 0 2
83055: ARRAY
83056: IFFALSE 83325
// for j in mc_remote_driver [ i ] do
83058: LD_ADDR_VAR 0 3
83062: PUSH
83063: LD_EXP 76
83067: PUSH
83068: LD_VAR 0 2
83072: ARRAY
83073: PUSH
83074: FOR_IN
83075: IFFALSE 83323
// begin if GetClass ( j ) <> 3 then
83077: LD_VAR 0 3
83081: PPUSH
83082: CALL_OW 257
83086: PUSH
83087: LD_INT 3
83089: NONEQUAL
83090: IFFALSE 83143
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83092: LD_ADDR_EXP 76
83096: PUSH
83097: LD_EXP 76
83101: PPUSH
83102: LD_VAR 0 2
83106: PPUSH
83107: LD_EXP 76
83111: PUSH
83112: LD_VAR 0 2
83116: ARRAY
83117: PUSH
83118: LD_VAR 0 3
83122: DIFF
83123: PPUSH
83124: CALL_OW 1
83128: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83129: LD_VAR 0 3
83133: PPUSH
83134: LD_INT 0
83136: PPUSH
83137: CALL_OW 109
// continue ;
83141: GO 83074
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83143: LD_VAR 0 3
83147: PPUSH
83148: CALL_OW 310
83152: NOT
83153: PUSH
83154: LD_VAR 0 3
83158: PPUSH
83159: CALL_OW 310
83163: PPUSH
83164: CALL_OW 266
83168: PUSH
83169: LD_INT 36
83171: NONEQUAL
83172: PUSH
83173: LD_VAR 0 3
83177: PPUSH
83178: CALL 59410 0 1
83182: NOT
83183: AND
83184: OR
83185: IFFALSE 83321
// begin if IsInUnit ( j ) then
83187: LD_VAR 0 3
83191: PPUSH
83192: CALL_OW 310
83196: IFFALSE 83207
// ComExitBuilding ( j ) ;
83198: LD_VAR 0 3
83202: PPUSH
83203: CALL_OW 122
// ct := 0 ;
83207: LD_ADDR_VAR 0 8
83211: PUSH
83212: LD_INT 0
83214: ST_TO_ADDR
// for k in x do
83215: LD_ADDR_VAR 0 4
83219: PUSH
83220: LD_VAR 0 11
83224: PUSH
83225: FOR_IN
83226: IFFALSE 83299
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83228: LD_VAR 0 4
83232: PPUSH
83233: CALL_OW 264
83237: PUSH
83238: LD_INT 31
83240: EQUAL
83241: PUSH
83242: LD_VAR 0 4
83246: PPUSH
83247: CALL_OW 311
83251: NOT
83252: AND
83253: PUSH
83254: LD_VAR 0 4
83258: PPUSH
83259: CALL_OW 266
83263: PUSH
83264: LD_INT 36
83266: EQUAL
83267: PUSH
83268: LD_VAR 0 4
83272: PPUSH
83273: CALL_OW 313
83277: PUSH
83278: LD_INT 3
83280: LESS
83281: AND
83282: OR
83283: IFFALSE 83297
// begin ct := k ;
83285: LD_ADDR_VAR 0 8
83289: PUSH
83290: LD_VAR 0 4
83294: ST_TO_ADDR
// break ;
83295: GO 83299
// end ;
83297: GO 83225
83299: POP
83300: POP
// if ct then
83301: LD_VAR 0 8
83305: IFFALSE 83321
// ComEnterUnit ( j , ct ) ;
83307: LD_VAR 0 3
83311: PPUSH
83312: LD_VAR 0 8
83316: PPUSH
83317: CALL_OW 120
// end ; end ;
83321: GO 83074
83323: POP
83324: POP
// places := 0 ;
83325: LD_ADDR_VAR 0 5
83329: PUSH
83330: LD_INT 0
83332: ST_TO_ADDR
// for j = 1 to x do
83333: LD_ADDR_VAR 0 3
83337: PUSH
83338: DOUBLE
83339: LD_INT 1
83341: DEC
83342: ST_TO_ADDR
83343: LD_VAR 0 11
83347: PUSH
83348: FOR_TO
83349: IFFALSE 83404
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83351: LD_VAR 0 11
83355: PUSH
83356: LD_VAR 0 3
83360: ARRAY
83361: PPUSH
83362: CALL_OW 264
83366: PUSH
83367: LD_INT 31
83369: EQUAL
83370: IFFALSE 83388
// places := places + 1 else
83372: LD_ADDR_VAR 0 5
83376: PUSH
83377: LD_VAR 0 5
83381: PUSH
83382: LD_INT 1
83384: PLUS
83385: ST_TO_ADDR
83386: GO 83402
// places := places + 3 ;
83388: LD_ADDR_VAR 0 5
83392: PUSH
83393: LD_VAR 0 5
83397: PUSH
83398: LD_INT 3
83400: PLUS
83401: ST_TO_ADDR
83402: GO 83348
83404: POP
83405: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83406: LD_ADDR_VAR 0 6
83410: PUSH
83411: LD_EXP 36
83415: PUSH
83416: LD_VAR 0 2
83420: ARRAY
83421: PPUSH
83422: LD_INT 25
83424: PUSH
83425: LD_INT 3
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: PPUSH
83432: CALL_OW 72
83436: PUSH
83437: LD_EXP 76
83441: PUSH
83442: LD_VAR 0 2
83446: ARRAY
83447: DIFF
83448: PPUSH
83449: LD_INT 3
83451: PPUSH
83452: CALL 60310 0 2
83456: ST_TO_ADDR
// if not tmp then
83457: LD_VAR 0 6
83461: NOT
83462: IFFALSE 83466
// continue ;
83464: GO 82846
// places := places - mc_remote_driver [ i ] ;
83466: LD_ADDR_VAR 0 5
83470: PUSH
83471: LD_VAR 0 5
83475: PUSH
83476: LD_EXP 76
83480: PUSH
83481: LD_VAR 0 2
83485: ARRAY
83486: MINUS
83487: ST_TO_ADDR
// if places then
83488: LD_VAR 0 5
83492: IFFALSE 83551
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
83494: LD_ADDR_EXP 76
83498: PUSH
83499: LD_EXP 76
83503: PPUSH
83504: LD_VAR 0 2
83508: PPUSH
83509: LD_EXP 76
83513: PUSH
83514: LD_VAR 0 2
83518: ARRAY
83519: PUSH
83520: LD_VAR 0 6
83524: PUSH
83525: LD_INT 1
83527: ARRAY
83528: UNION
83529: PPUSH
83530: CALL_OW 1
83534: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83535: LD_VAR 0 6
83539: PUSH
83540: LD_INT 1
83542: ARRAY
83543: PPUSH
83544: LD_INT 126
83546: PPUSH
83547: CALL_OW 109
// end ; end ;
83551: GO 82846
83553: POP
83554: POP
// end ;
83555: LD_VAR 0 1
83559: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83560: LD_INT 0
83562: PPUSH
83563: PPUSH
83564: PPUSH
83565: PPUSH
83566: PPUSH
83567: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83568: LD_VAR 0 1
83572: NOT
83573: PUSH
83574: LD_VAR 0 2
83578: NOT
83579: OR
83580: PUSH
83581: LD_VAR 0 3
83585: NOT
83586: OR
83587: PUSH
83588: LD_VAR 0 4
83592: PUSH
83593: LD_INT 1
83595: PUSH
83596: LD_INT 2
83598: PUSH
83599: LD_INT 3
83601: PUSH
83602: LD_INT 4
83604: PUSH
83605: LD_INT 5
83607: PUSH
83608: LD_INT 8
83610: PUSH
83611: LD_INT 9
83613: PUSH
83614: LD_INT 15
83616: PUSH
83617: LD_INT 16
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: LIST
83624: LIST
83625: LIST
83626: LIST
83627: LIST
83628: LIST
83629: LIST
83630: IN
83631: NOT
83632: OR
83633: IFFALSE 83637
// exit ;
83635: GO 84537
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83637: LD_ADDR_VAR 0 2
83641: PUSH
83642: LD_VAR 0 2
83646: PPUSH
83647: LD_INT 21
83649: PUSH
83650: LD_INT 3
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: PUSH
83657: LD_INT 24
83659: PUSH
83660: LD_INT 250
83662: PUSH
83663: EMPTY
83664: LIST
83665: LIST
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PPUSH
83671: CALL_OW 72
83675: ST_TO_ADDR
// case class of 1 , 15 :
83676: LD_VAR 0 4
83680: PUSH
83681: LD_INT 1
83683: DOUBLE
83684: EQUAL
83685: IFTRUE 83695
83687: LD_INT 15
83689: DOUBLE
83690: EQUAL
83691: IFTRUE 83695
83693: GO 83780
83695: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83696: LD_ADDR_VAR 0 8
83700: PUSH
83701: LD_VAR 0 2
83705: PPUSH
83706: LD_INT 2
83708: PUSH
83709: LD_INT 30
83711: PUSH
83712: LD_INT 32
83714: PUSH
83715: EMPTY
83716: LIST
83717: LIST
83718: PUSH
83719: LD_INT 30
83721: PUSH
83722: LD_INT 31
83724: PUSH
83725: EMPTY
83726: LIST
83727: LIST
83728: PUSH
83729: EMPTY
83730: LIST
83731: LIST
83732: LIST
83733: PPUSH
83734: CALL_OW 72
83738: PUSH
83739: LD_VAR 0 2
83743: PPUSH
83744: LD_INT 2
83746: PUSH
83747: LD_INT 30
83749: PUSH
83750: LD_INT 4
83752: PUSH
83753: EMPTY
83754: LIST
83755: LIST
83756: PUSH
83757: LD_INT 30
83759: PUSH
83760: LD_INT 5
83762: PUSH
83763: EMPTY
83764: LIST
83765: LIST
83766: PUSH
83767: EMPTY
83768: LIST
83769: LIST
83770: LIST
83771: PPUSH
83772: CALL_OW 72
83776: ADD
83777: ST_TO_ADDR
83778: GO 84026
83780: LD_INT 2
83782: DOUBLE
83783: EQUAL
83784: IFTRUE 83794
83786: LD_INT 16
83788: DOUBLE
83789: EQUAL
83790: IFTRUE 83794
83792: GO 83840
83794: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83795: LD_ADDR_VAR 0 8
83799: PUSH
83800: LD_VAR 0 2
83804: PPUSH
83805: LD_INT 2
83807: PUSH
83808: LD_INT 30
83810: PUSH
83811: LD_INT 0
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PUSH
83818: LD_INT 30
83820: PUSH
83821: LD_INT 1
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: PUSH
83828: EMPTY
83829: LIST
83830: LIST
83831: LIST
83832: PPUSH
83833: CALL_OW 72
83837: ST_TO_ADDR
83838: GO 84026
83840: LD_INT 3
83842: DOUBLE
83843: EQUAL
83844: IFTRUE 83848
83846: GO 83894
83848: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83849: LD_ADDR_VAR 0 8
83853: PUSH
83854: LD_VAR 0 2
83858: PPUSH
83859: LD_INT 2
83861: PUSH
83862: LD_INT 30
83864: PUSH
83865: LD_INT 2
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PUSH
83872: LD_INT 30
83874: PUSH
83875: LD_INT 3
83877: PUSH
83878: EMPTY
83879: LIST
83880: LIST
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: LIST
83886: PPUSH
83887: CALL_OW 72
83891: ST_TO_ADDR
83892: GO 84026
83894: LD_INT 4
83896: DOUBLE
83897: EQUAL
83898: IFTRUE 83902
83900: GO 83959
83902: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83903: LD_ADDR_VAR 0 8
83907: PUSH
83908: LD_VAR 0 2
83912: PPUSH
83913: LD_INT 2
83915: PUSH
83916: LD_INT 30
83918: PUSH
83919: LD_INT 6
83921: PUSH
83922: EMPTY
83923: LIST
83924: LIST
83925: PUSH
83926: LD_INT 30
83928: PUSH
83929: LD_INT 7
83931: PUSH
83932: EMPTY
83933: LIST
83934: LIST
83935: PUSH
83936: LD_INT 30
83938: PUSH
83939: LD_INT 8
83941: PUSH
83942: EMPTY
83943: LIST
83944: LIST
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: LIST
83950: LIST
83951: PPUSH
83952: CALL_OW 72
83956: ST_TO_ADDR
83957: GO 84026
83959: LD_INT 5
83961: DOUBLE
83962: EQUAL
83963: IFTRUE 83979
83965: LD_INT 8
83967: DOUBLE
83968: EQUAL
83969: IFTRUE 83979
83971: LD_INT 9
83973: DOUBLE
83974: EQUAL
83975: IFTRUE 83979
83977: GO 84025
83979: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83980: LD_ADDR_VAR 0 8
83984: PUSH
83985: LD_VAR 0 2
83989: PPUSH
83990: LD_INT 2
83992: PUSH
83993: LD_INT 30
83995: PUSH
83996: LD_INT 4
83998: PUSH
83999: EMPTY
84000: LIST
84001: LIST
84002: PUSH
84003: LD_INT 30
84005: PUSH
84006: LD_INT 5
84008: PUSH
84009: EMPTY
84010: LIST
84011: LIST
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: LIST
84017: PPUSH
84018: CALL_OW 72
84022: ST_TO_ADDR
84023: GO 84026
84025: POP
// if not tmp then
84026: LD_VAR 0 8
84030: NOT
84031: IFFALSE 84035
// exit ;
84033: GO 84537
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84035: LD_VAR 0 4
84039: PUSH
84040: LD_INT 1
84042: PUSH
84043: LD_INT 15
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: IN
84050: PUSH
84051: LD_EXP 45
84055: PUSH
84056: LD_VAR 0 1
84060: ARRAY
84061: AND
84062: IFFALSE 84218
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84064: LD_ADDR_VAR 0 9
84068: PUSH
84069: LD_EXP 45
84073: PUSH
84074: LD_VAR 0 1
84078: ARRAY
84079: PUSH
84080: LD_INT 1
84082: ARRAY
84083: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84084: LD_VAR 0 9
84088: PUSH
84089: LD_EXP 46
84093: PUSH
84094: LD_VAR 0 1
84098: ARRAY
84099: IN
84100: NOT
84101: IFFALSE 84216
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84103: LD_ADDR_EXP 46
84107: PUSH
84108: LD_EXP 46
84112: PPUSH
84113: LD_VAR 0 1
84117: PUSH
84118: LD_EXP 46
84122: PUSH
84123: LD_VAR 0 1
84127: ARRAY
84128: PUSH
84129: LD_INT 1
84131: PLUS
84132: PUSH
84133: EMPTY
84134: LIST
84135: LIST
84136: PPUSH
84137: LD_VAR 0 9
84141: PPUSH
84142: CALL 26068 0 3
84146: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84147: LD_ADDR_EXP 45
84151: PUSH
84152: LD_EXP 45
84156: PPUSH
84157: LD_VAR 0 1
84161: PPUSH
84162: LD_EXP 45
84166: PUSH
84167: LD_VAR 0 1
84171: ARRAY
84172: PUSH
84173: LD_VAR 0 9
84177: DIFF
84178: PPUSH
84179: CALL_OW 1
84183: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84184: LD_VAR 0 3
84188: PPUSH
84189: LD_EXP 46
84193: PUSH
84194: LD_VAR 0 1
84198: ARRAY
84199: PUSH
84200: LD_EXP 46
84204: PUSH
84205: LD_VAR 0 1
84209: ARRAY
84210: ARRAY
84211: PPUSH
84212: CALL_OW 120
// end ; exit ;
84216: GO 84537
// end ; if tmp > 1 then
84218: LD_VAR 0 8
84222: PUSH
84223: LD_INT 1
84225: GREATER
84226: IFFALSE 84330
// for i = 2 to tmp do
84228: LD_ADDR_VAR 0 6
84232: PUSH
84233: DOUBLE
84234: LD_INT 2
84236: DEC
84237: ST_TO_ADDR
84238: LD_VAR 0 8
84242: PUSH
84243: FOR_TO
84244: IFFALSE 84328
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84246: LD_VAR 0 8
84250: PUSH
84251: LD_VAR 0 6
84255: ARRAY
84256: PPUSH
84257: CALL_OW 461
84261: PUSH
84262: LD_INT 6
84264: EQUAL
84265: IFFALSE 84326
// begin x := tmp [ i ] ;
84267: LD_ADDR_VAR 0 9
84271: PUSH
84272: LD_VAR 0 8
84276: PUSH
84277: LD_VAR 0 6
84281: ARRAY
84282: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84283: LD_ADDR_VAR 0 8
84287: PUSH
84288: LD_VAR 0 8
84292: PPUSH
84293: LD_VAR 0 6
84297: PPUSH
84298: CALL_OW 3
84302: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84303: LD_ADDR_VAR 0 8
84307: PUSH
84308: LD_VAR 0 8
84312: PPUSH
84313: LD_INT 1
84315: PPUSH
84316: LD_VAR 0 9
84320: PPUSH
84321: CALL_OW 2
84325: ST_TO_ADDR
// end ;
84326: GO 84243
84328: POP
84329: POP
// for i in tmp do
84330: LD_ADDR_VAR 0 6
84334: PUSH
84335: LD_VAR 0 8
84339: PUSH
84340: FOR_IN
84341: IFFALSE 84410
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84343: LD_VAR 0 6
84347: PPUSH
84348: CALL_OW 313
84352: PUSH
84353: LD_INT 6
84355: LESS
84356: PUSH
84357: LD_VAR 0 6
84361: PPUSH
84362: CALL_OW 266
84366: PUSH
84367: LD_INT 31
84369: PUSH
84370: LD_INT 32
84372: PUSH
84373: EMPTY
84374: LIST
84375: LIST
84376: IN
84377: NOT
84378: AND
84379: PUSH
84380: LD_VAR 0 6
84384: PPUSH
84385: CALL_OW 313
84389: PUSH
84390: LD_INT 0
84392: EQUAL
84393: OR
84394: IFFALSE 84408
// begin j := i ;
84396: LD_ADDR_VAR 0 7
84400: PUSH
84401: LD_VAR 0 6
84405: ST_TO_ADDR
// break ;
84406: GO 84410
// end ; end ;
84408: GO 84340
84410: POP
84411: POP
// if j then
84412: LD_VAR 0 7
84416: IFFALSE 84434
// ComEnterUnit ( unit , j ) else
84418: LD_VAR 0 3
84422: PPUSH
84423: LD_VAR 0 7
84427: PPUSH
84428: CALL_OW 120
84432: GO 84537
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84434: LD_ADDR_VAR 0 10
84438: PUSH
84439: LD_VAR 0 2
84443: PPUSH
84444: LD_INT 2
84446: PUSH
84447: LD_INT 30
84449: PUSH
84450: LD_INT 0
84452: PUSH
84453: EMPTY
84454: LIST
84455: LIST
84456: PUSH
84457: LD_INT 30
84459: PUSH
84460: LD_INT 1
84462: PUSH
84463: EMPTY
84464: LIST
84465: LIST
84466: PUSH
84467: EMPTY
84468: LIST
84469: LIST
84470: LIST
84471: PPUSH
84472: CALL_OW 72
84476: ST_TO_ADDR
// if depot then
84477: LD_VAR 0 10
84481: IFFALSE 84537
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84483: LD_ADDR_VAR 0 10
84487: PUSH
84488: LD_VAR 0 10
84492: PPUSH
84493: LD_VAR 0 3
84497: PPUSH
84498: CALL_OW 74
84502: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84503: LD_VAR 0 3
84507: PPUSH
84508: LD_VAR 0 10
84512: PPUSH
84513: CALL_OW 296
84517: PUSH
84518: LD_INT 10
84520: GREATER
84521: IFFALSE 84537
// ComStandNearbyBuilding ( unit , depot ) ;
84523: LD_VAR 0 3
84527: PPUSH
84528: LD_VAR 0 10
84532: PPUSH
84533: CALL 20775 0 2
// end ; end ; end ;
84537: LD_VAR 0 5
84541: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84542: LD_INT 0
84544: PPUSH
84545: PPUSH
84546: PPUSH
84547: PPUSH
// if not mc_bases then
84548: LD_EXP 36
84552: NOT
84553: IFFALSE 84557
// exit ;
84555: GO 84796
// for i = 1 to mc_bases do
84557: LD_ADDR_VAR 0 2
84561: PUSH
84562: DOUBLE
84563: LD_INT 1
84565: DEC
84566: ST_TO_ADDR
84567: LD_EXP 36
84571: PUSH
84572: FOR_TO
84573: IFFALSE 84794
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84575: LD_ADDR_VAR 0 4
84579: PUSH
84580: LD_EXP 36
84584: PUSH
84585: LD_VAR 0 2
84589: ARRAY
84590: PPUSH
84591: LD_INT 21
84593: PUSH
84594: LD_INT 1
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: PPUSH
84601: CALL_OW 72
84605: PUSH
84606: LD_EXP 65
84610: PUSH
84611: LD_VAR 0 2
84615: ARRAY
84616: UNION
84617: ST_TO_ADDR
// if not tmp then
84618: LD_VAR 0 4
84622: NOT
84623: IFFALSE 84627
// continue ;
84625: GO 84572
// for j in tmp do
84627: LD_ADDR_VAR 0 3
84631: PUSH
84632: LD_VAR 0 4
84636: PUSH
84637: FOR_IN
84638: IFFALSE 84790
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84640: LD_VAR 0 3
84644: PPUSH
84645: CALL_OW 110
84649: NOT
84650: PUSH
84651: LD_VAR 0 3
84655: PPUSH
84656: CALL_OW 314
84660: NOT
84661: AND
84662: PUSH
84663: LD_VAR 0 3
84667: PPUSH
84668: CALL_OW 311
84672: NOT
84673: AND
84674: PUSH
84675: LD_VAR 0 3
84679: PPUSH
84680: CALL_OW 310
84684: NOT
84685: AND
84686: PUSH
84687: LD_VAR 0 3
84691: PUSH
84692: LD_EXP 39
84696: PUSH
84697: LD_VAR 0 2
84701: ARRAY
84702: PUSH
84703: LD_INT 1
84705: ARRAY
84706: IN
84707: NOT
84708: AND
84709: PUSH
84710: LD_VAR 0 3
84714: PUSH
84715: LD_EXP 39
84719: PUSH
84720: LD_VAR 0 2
84724: ARRAY
84725: PUSH
84726: LD_INT 2
84728: ARRAY
84729: IN
84730: NOT
84731: AND
84732: PUSH
84733: LD_VAR 0 3
84737: PUSH
84738: LD_EXP 48
84742: PUSH
84743: LD_VAR 0 2
84747: ARRAY
84748: IN
84749: NOT
84750: AND
84751: IFFALSE 84788
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84753: LD_VAR 0 2
84757: PPUSH
84758: LD_EXP 36
84762: PUSH
84763: LD_VAR 0 2
84767: ARRAY
84768: PPUSH
84769: LD_VAR 0 3
84773: PPUSH
84774: LD_VAR 0 3
84778: PPUSH
84779: CALL_OW 257
84783: PPUSH
84784: CALL 83560 0 4
// end ;
84788: GO 84637
84790: POP
84791: POP
// end ;
84792: GO 84572
84794: POP
84795: POP
// end ;
84796: LD_VAR 0 1
84800: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84801: LD_INT 0
84803: PPUSH
84804: PPUSH
84805: PPUSH
84806: PPUSH
84807: PPUSH
84808: PPUSH
// if not mc_bases [ base ] then
84809: LD_EXP 36
84813: PUSH
84814: LD_VAR 0 1
84818: ARRAY
84819: NOT
84820: IFFALSE 84824
// exit ;
84822: GO 85006
// tmp := [ ] ;
84824: LD_ADDR_VAR 0 6
84828: PUSH
84829: EMPTY
84830: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84831: LD_ADDR_VAR 0 7
84835: PUSH
84836: LD_VAR 0 3
84840: PPUSH
84841: LD_INT 0
84843: PPUSH
84844: CALL_OW 517
84848: ST_TO_ADDR
// if not list then
84849: LD_VAR 0 7
84853: NOT
84854: IFFALSE 84858
// exit ;
84856: GO 85006
// for i = 1 to amount do
84858: LD_ADDR_VAR 0 5
84862: PUSH
84863: DOUBLE
84864: LD_INT 1
84866: DEC
84867: ST_TO_ADDR
84868: LD_VAR 0 2
84872: PUSH
84873: FOR_TO
84874: IFFALSE 84954
// begin x := rand ( 1 , list [ 1 ] ) ;
84876: LD_ADDR_VAR 0 8
84880: PUSH
84881: LD_INT 1
84883: PPUSH
84884: LD_VAR 0 7
84888: PUSH
84889: LD_INT 1
84891: ARRAY
84892: PPUSH
84893: CALL_OW 12
84897: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84898: LD_ADDR_VAR 0 6
84902: PUSH
84903: LD_VAR 0 6
84907: PPUSH
84908: LD_VAR 0 5
84912: PPUSH
84913: LD_VAR 0 7
84917: PUSH
84918: LD_INT 1
84920: ARRAY
84921: PUSH
84922: LD_VAR 0 8
84926: ARRAY
84927: PUSH
84928: LD_VAR 0 7
84932: PUSH
84933: LD_INT 2
84935: ARRAY
84936: PUSH
84937: LD_VAR 0 8
84941: ARRAY
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: PPUSH
84947: CALL_OW 1
84951: ST_TO_ADDR
// end ;
84952: GO 84873
84954: POP
84955: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84956: LD_ADDR_EXP 49
84960: PUSH
84961: LD_EXP 49
84965: PPUSH
84966: LD_VAR 0 1
84970: PPUSH
84971: LD_VAR 0 6
84975: PPUSH
84976: CALL_OW 1
84980: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84981: LD_ADDR_EXP 51
84985: PUSH
84986: LD_EXP 51
84990: PPUSH
84991: LD_VAR 0 1
84995: PPUSH
84996: LD_VAR 0 3
85000: PPUSH
85001: CALL_OW 1
85005: ST_TO_ADDR
// end ;
85006: LD_VAR 0 4
85010: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85011: LD_INT 0
85013: PPUSH
// if not mc_bases [ base ] then
85014: LD_EXP 36
85018: PUSH
85019: LD_VAR 0 1
85023: ARRAY
85024: NOT
85025: IFFALSE 85029
// exit ;
85027: GO 85054
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85029: LD_ADDR_EXP 41
85033: PUSH
85034: LD_EXP 41
85038: PPUSH
85039: LD_VAR 0 1
85043: PPUSH
85044: LD_VAR 0 2
85048: PPUSH
85049: CALL_OW 1
85053: ST_TO_ADDR
// end ;
85054: LD_VAR 0 3
85058: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85059: LD_INT 0
85061: PPUSH
// if not mc_bases [ base ] then
85062: LD_EXP 36
85066: PUSH
85067: LD_VAR 0 1
85071: ARRAY
85072: NOT
85073: IFFALSE 85077
// exit ;
85075: GO 85114
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85077: LD_ADDR_EXP 41
85081: PUSH
85082: LD_EXP 41
85086: PPUSH
85087: LD_VAR 0 1
85091: PPUSH
85092: LD_EXP 41
85096: PUSH
85097: LD_VAR 0 1
85101: ARRAY
85102: PUSH
85103: LD_VAR 0 2
85107: UNION
85108: PPUSH
85109: CALL_OW 1
85113: ST_TO_ADDR
// end ;
85114: LD_VAR 0 3
85118: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85119: LD_INT 0
85121: PPUSH
// if not mc_bases [ base ] then
85122: LD_EXP 36
85126: PUSH
85127: LD_VAR 0 1
85131: ARRAY
85132: NOT
85133: IFFALSE 85137
// exit ;
85135: GO 85162
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85137: LD_ADDR_EXP 57
85141: PUSH
85142: LD_EXP 57
85146: PPUSH
85147: LD_VAR 0 1
85151: PPUSH
85152: LD_VAR 0 2
85156: PPUSH
85157: CALL_OW 1
85161: ST_TO_ADDR
// end ;
85162: LD_VAR 0 3
85166: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85167: LD_INT 0
85169: PPUSH
// if not mc_bases [ base ] then
85170: LD_EXP 36
85174: PUSH
85175: LD_VAR 0 1
85179: ARRAY
85180: NOT
85181: IFFALSE 85185
// exit ;
85183: GO 85222
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85185: LD_ADDR_EXP 57
85189: PUSH
85190: LD_EXP 57
85194: PPUSH
85195: LD_VAR 0 1
85199: PPUSH
85200: LD_EXP 57
85204: PUSH
85205: LD_VAR 0 1
85209: ARRAY
85210: PUSH
85211: LD_VAR 0 2
85215: ADD
85216: PPUSH
85217: CALL_OW 1
85221: ST_TO_ADDR
// end ;
85222: LD_VAR 0 3
85226: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85227: LD_INT 0
85229: PPUSH
// if not mc_bases [ base ] then
85230: LD_EXP 36
85234: PUSH
85235: LD_VAR 0 1
85239: ARRAY
85240: NOT
85241: IFFALSE 85245
// exit ;
85243: GO 85299
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85245: LD_ADDR_EXP 58
85249: PUSH
85250: LD_EXP 58
85254: PPUSH
85255: LD_VAR 0 1
85259: PPUSH
85260: LD_VAR 0 2
85264: PPUSH
85265: CALL_OW 1
85269: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85270: LD_ADDR_EXP 47
85274: PUSH
85275: LD_EXP 47
85279: PPUSH
85280: LD_VAR 0 1
85284: PPUSH
85285: LD_VAR 0 2
85289: PUSH
85290: LD_INT 0
85292: PLUS
85293: PPUSH
85294: CALL_OW 1
85298: ST_TO_ADDR
// end ;
85299: LD_VAR 0 3
85303: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85304: LD_INT 0
85306: PPUSH
// if not mc_bases [ base ] then
85307: LD_EXP 36
85311: PUSH
85312: LD_VAR 0 1
85316: ARRAY
85317: NOT
85318: IFFALSE 85322
// exit ;
85320: GO 85347
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85322: LD_ADDR_EXP 47
85326: PUSH
85327: LD_EXP 47
85331: PPUSH
85332: LD_VAR 0 1
85336: PPUSH
85337: LD_VAR 0 2
85341: PPUSH
85342: CALL_OW 1
85346: ST_TO_ADDR
// end ;
85347: LD_VAR 0 3
85351: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85352: LD_INT 0
85354: PPUSH
85355: PPUSH
85356: PPUSH
85357: PPUSH
// if not mc_bases [ base ] then
85358: LD_EXP 36
85362: PUSH
85363: LD_VAR 0 1
85367: ARRAY
85368: NOT
85369: IFFALSE 85373
// exit ;
85371: GO 85438
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85373: LD_ADDR_EXP 56
85377: PUSH
85378: LD_EXP 56
85382: PPUSH
85383: LD_VAR 0 1
85387: PUSH
85388: LD_EXP 56
85392: PUSH
85393: LD_VAR 0 1
85397: ARRAY
85398: PUSH
85399: LD_INT 1
85401: PLUS
85402: PUSH
85403: EMPTY
85404: LIST
85405: LIST
85406: PPUSH
85407: LD_VAR 0 1
85411: PUSH
85412: LD_VAR 0 2
85416: PUSH
85417: LD_VAR 0 3
85421: PUSH
85422: LD_VAR 0 4
85426: PUSH
85427: EMPTY
85428: LIST
85429: LIST
85430: LIST
85431: LIST
85432: PPUSH
85433: CALL 26068 0 3
85437: ST_TO_ADDR
// end ;
85438: LD_VAR 0 5
85442: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85443: LD_INT 0
85445: PPUSH
// if not mc_bases [ base ] then
85446: LD_EXP 36
85450: PUSH
85451: LD_VAR 0 1
85455: ARRAY
85456: NOT
85457: IFFALSE 85461
// exit ;
85459: GO 85486
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85461: LD_ADDR_EXP 73
85465: PUSH
85466: LD_EXP 73
85470: PPUSH
85471: LD_VAR 0 1
85475: PPUSH
85476: LD_VAR 0 2
85480: PPUSH
85481: CALL_OW 1
85485: ST_TO_ADDR
// end ;
85486: LD_VAR 0 3
85490: RET
// export function MC_GetMinesField ( base ) ; begin
85491: LD_INT 0
85493: PPUSH
// result := mc_mines [ base ] ;
85494: LD_ADDR_VAR 0 2
85498: PUSH
85499: LD_EXP 49
85503: PUSH
85504: LD_VAR 0 1
85508: ARRAY
85509: ST_TO_ADDR
// end ;
85510: LD_VAR 0 2
85514: RET
// export function MC_GetProduceList ( base ) ; begin
85515: LD_INT 0
85517: PPUSH
// result := mc_produce [ base ] ;
85518: LD_ADDR_VAR 0 2
85522: PUSH
85523: LD_EXP 57
85527: PUSH
85528: LD_VAR 0 1
85532: ARRAY
85533: ST_TO_ADDR
// end ;
85534: LD_VAR 0 2
85538: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85539: LD_INT 0
85541: PPUSH
85542: PPUSH
// if not mc_bases then
85543: LD_EXP 36
85547: NOT
85548: IFFALSE 85552
// exit ;
85550: GO 85617
// if mc_bases [ base ] then
85552: LD_EXP 36
85556: PUSH
85557: LD_VAR 0 1
85561: ARRAY
85562: IFFALSE 85617
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85564: LD_ADDR_VAR 0 3
85568: PUSH
85569: LD_EXP 36
85573: PUSH
85574: LD_VAR 0 1
85578: ARRAY
85579: PPUSH
85580: LD_INT 30
85582: PUSH
85583: LD_VAR 0 2
85587: PUSH
85588: EMPTY
85589: LIST
85590: LIST
85591: PPUSH
85592: CALL_OW 72
85596: ST_TO_ADDR
// if result then
85597: LD_VAR 0 3
85601: IFFALSE 85617
// result := result [ 1 ] ;
85603: LD_ADDR_VAR 0 3
85607: PUSH
85608: LD_VAR 0 3
85612: PUSH
85613: LD_INT 1
85615: ARRAY
85616: ST_TO_ADDR
// end ; end ;
85617: LD_VAR 0 3
85621: RET
// export function MC_SetTame ( base , area ) ; begin
85622: LD_INT 0
85624: PPUSH
// if not mc_bases or not base then
85625: LD_EXP 36
85629: NOT
85630: PUSH
85631: LD_VAR 0 1
85635: NOT
85636: OR
85637: IFFALSE 85641
// exit ;
85639: GO 85666
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85641: LD_ADDR_EXP 64
85645: PUSH
85646: LD_EXP 64
85650: PPUSH
85651: LD_VAR 0 1
85655: PPUSH
85656: LD_VAR 0 2
85660: PPUSH
85661: CALL_OW 1
85665: ST_TO_ADDR
// end ;
85666: LD_VAR 0 3
85670: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85671: LD_INT 0
85673: PPUSH
85674: PPUSH
// if not mc_bases or not base then
85675: LD_EXP 36
85679: NOT
85680: PUSH
85681: LD_VAR 0 1
85685: NOT
85686: OR
85687: IFFALSE 85691
// exit ;
85689: GO 85793
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85691: LD_ADDR_VAR 0 4
85695: PUSH
85696: LD_EXP 36
85700: PUSH
85701: LD_VAR 0 1
85705: ARRAY
85706: PPUSH
85707: LD_INT 30
85709: PUSH
85710: LD_VAR 0 2
85714: PUSH
85715: EMPTY
85716: LIST
85717: LIST
85718: PPUSH
85719: CALL_OW 72
85723: ST_TO_ADDR
// if not tmp then
85724: LD_VAR 0 4
85728: NOT
85729: IFFALSE 85733
// exit ;
85731: GO 85793
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85733: LD_ADDR_EXP 68
85737: PUSH
85738: LD_EXP 68
85742: PPUSH
85743: LD_VAR 0 1
85747: PPUSH
85748: LD_EXP 68
85752: PUSH
85753: LD_VAR 0 1
85757: ARRAY
85758: PPUSH
85759: LD_EXP 68
85763: PUSH
85764: LD_VAR 0 1
85768: ARRAY
85769: PUSH
85770: LD_INT 1
85772: PLUS
85773: PPUSH
85774: LD_VAR 0 4
85778: PUSH
85779: LD_INT 1
85781: ARRAY
85782: PPUSH
85783: CALL_OW 2
85787: PPUSH
85788: CALL_OW 1
85792: ST_TO_ADDR
// end ;
85793: LD_VAR 0 3
85797: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85798: LD_INT 0
85800: PPUSH
85801: PPUSH
// if not mc_bases or not base or not kinds then
85802: LD_EXP 36
85806: NOT
85807: PUSH
85808: LD_VAR 0 1
85812: NOT
85813: OR
85814: PUSH
85815: LD_VAR 0 2
85819: NOT
85820: OR
85821: IFFALSE 85825
// exit ;
85823: GO 85886
// for i in kinds do
85825: LD_ADDR_VAR 0 4
85829: PUSH
85830: LD_VAR 0 2
85834: PUSH
85835: FOR_IN
85836: IFFALSE 85884
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85838: LD_ADDR_EXP 70
85842: PUSH
85843: LD_EXP 70
85847: PPUSH
85848: LD_VAR 0 1
85852: PUSH
85853: LD_EXP 70
85857: PUSH
85858: LD_VAR 0 1
85862: ARRAY
85863: PUSH
85864: LD_INT 1
85866: PLUS
85867: PUSH
85868: EMPTY
85869: LIST
85870: LIST
85871: PPUSH
85872: LD_VAR 0 4
85876: PPUSH
85877: CALL 26068 0 3
85881: ST_TO_ADDR
85882: GO 85835
85884: POP
85885: POP
// end ;
85886: LD_VAR 0 3
85890: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85891: LD_INT 0
85893: PPUSH
// if not mc_bases or not base or not areas then
85894: LD_EXP 36
85898: NOT
85899: PUSH
85900: LD_VAR 0 1
85904: NOT
85905: OR
85906: PUSH
85907: LD_VAR 0 2
85911: NOT
85912: OR
85913: IFFALSE 85917
// exit ;
85915: GO 85942
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85917: LD_ADDR_EXP 54
85921: PUSH
85922: LD_EXP 54
85926: PPUSH
85927: LD_VAR 0 1
85931: PPUSH
85932: LD_VAR 0 2
85936: PPUSH
85937: CALL_OW 1
85941: ST_TO_ADDR
// end ;
85942: LD_VAR 0 3
85946: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85947: LD_INT 0
85949: PPUSH
// if not mc_bases or not base or not teleports_exit then
85950: LD_EXP 36
85954: NOT
85955: PUSH
85956: LD_VAR 0 1
85960: NOT
85961: OR
85962: PUSH
85963: LD_VAR 0 2
85967: NOT
85968: OR
85969: IFFALSE 85973
// exit ;
85971: GO 85998
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85973: LD_ADDR_EXP 71
85977: PUSH
85978: LD_EXP 71
85982: PPUSH
85983: LD_VAR 0 1
85987: PPUSH
85988: LD_VAR 0 2
85992: PPUSH
85993: CALL_OW 1
85997: ST_TO_ADDR
// end ;
85998: LD_VAR 0 3
86002: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86003: LD_INT 0
86005: PPUSH
86006: PPUSH
86007: PPUSH
// if not mc_bases or not base or not ext_list then
86008: LD_EXP 36
86012: NOT
86013: PUSH
86014: LD_VAR 0 1
86018: NOT
86019: OR
86020: PUSH
86021: LD_VAR 0 5
86025: NOT
86026: OR
86027: IFFALSE 86031
// exit ;
86029: GO 86204
// tmp := GetFacExtXYD ( x , y , d ) ;
86031: LD_ADDR_VAR 0 8
86035: PUSH
86036: LD_VAR 0 2
86040: PPUSH
86041: LD_VAR 0 3
86045: PPUSH
86046: LD_VAR 0 4
86050: PPUSH
86051: CALL 59440 0 3
86055: ST_TO_ADDR
// if not tmp then
86056: LD_VAR 0 8
86060: NOT
86061: IFFALSE 86065
// exit ;
86063: GO 86204
// for i in tmp do
86065: LD_ADDR_VAR 0 7
86069: PUSH
86070: LD_VAR 0 8
86074: PUSH
86075: FOR_IN
86076: IFFALSE 86202
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86078: LD_ADDR_EXP 41
86082: PUSH
86083: LD_EXP 41
86087: PPUSH
86088: LD_VAR 0 1
86092: PPUSH
86093: LD_EXP 41
86097: PUSH
86098: LD_VAR 0 1
86102: ARRAY
86103: PPUSH
86104: LD_EXP 41
86108: PUSH
86109: LD_VAR 0 1
86113: ARRAY
86114: PUSH
86115: LD_INT 1
86117: PLUS
86118: PPUSH
86119: LD_VAR 0 5
86123: PUSH
86124: LD_INT 1
86126: ARRAY
86127: PUSH
86128: LD_VAR 0 7
86132: PUSH
86133: LD_INT 1
86135: ARRAY
86136: PUSH
86137: LD_VAR 0 7
86141: PUSH
86142: LD_INT 2
86144: ARRAY
86145: PUSH
86146: LD_VAR 0 7
86150: PUSH
86151: LD_INT 3
86153: ARRAY
86154: PUSH
86155: EMPTY
86156: LIST
86157: LIST
86158: LIST
86159: LIST
86160: PPUSH
86161: CALL_OW 2
86165: PPUSH
86166: CALL_OW 1
86170: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86171: LD_ADDR_VAR 0 5
86175: PUSH
86176: LD_VAR 0 5
86180: PPUSH
86181: LD_INT 1
86183: PPUSH
86184: CALL_OW 3
86188: ST_TO_ADDR
// if not ext_list then
86189: LD_VAR 0 5
86193: NOT
86194: IFFALSE 86200
// exit ;
86196: POP
86197: POP
86198: GO 86204
// end ;
86200: GO 86075
86202: POP
86203: POP
// end ;
86204: LD_VAR 0 6
86208: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86209: LD_INT 0
86211: PPUSH
// if not mc_bases or not base or not weapon_list then
86212: LD_EXP 36
86216: NOT
86217: PUSH
86218: LD_VAR 0 1
86222: NOT
86223: OR
86224: PUSH
86225: LD_VAR 0 2
86229: NOT
86230: OR
86231: IFFALSE 86235
// exit ;
86233: GO 86260
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86235: LD_ADDR_EXP 75
86239: PUSH
86240: LD_EXP 75
86244: PPUSH
86245: LD_VAR 0 1
86249: PPUSH
86250: LD_VAR 0 2
86254: PPUSH
86255: CALL_OW 1
86259: ST_TO_ADDR
// end ;
86260: LD_VAR 0 3
86264: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86265: LD_INT 0
86267: PPUSH
// if not mc_bases or not base or not tech_list then
86268: LD_EXP 36
86272: NOT
86273: PUSH
86274: LD_VAR 0 1
86278: NOT
86279: OR
86280: PUSH
86281: LD_VAR 0 2
86285: NOT
86286: OR
86287: IFFALSE 86291
// exit ;
86289: GO 86316
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86291: LD_ADDR_EXP 63
86295: PUSH
86296: LD_EXP 63
86300: PPUSH
86301: LD_VAR 0 1
86305: PPUSH
86306: LD_VAR 0 2
86310: PPUSH
86311: CALL_OW 1
86315: ST_TO_ADDR
// end ;
86316: LD_VAR 0 3
86320: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86321: LD_INT 0
86323: PPUSH
// if not mc_bases or not parking_area or not base then
86324: LD_EXP 36
86328: NOT
86329: PUSH
86330: LD_VAR 0 2
86334: NOT
86335: OR
86336: PUSH
86337: LD_VAR 0 1
86341: NOT
86342: OR
86343: IFFALSE 86347
// exit ;
86345: GO 86372
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86347: LD_ADDR_EXP 60
86351: PUSH
86352: LD_EXP 60
86356: PPUSH
86357: LD_VAR 0 1
86361: PPUSH
86362: LD_VAR 0 2
86366: PPUSH
86367: CALL_OW 1
86371: ST_TO_ADDR
// end ;
86372: LD_VAR 0 3
86376: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86377: LD_INT 0
86379: PPUSH
// if not mc_bases or not base or not scan_area then
86380: LD_EXP 36
86384: NOT
86385: PUSH
86386: LD_VAR 0 1
86390: NOT
86391: OR
86392: PUSH
86393: LD_VAR 0 2
86397: NOT
86398: OR
86399: IFFALSE 86403
// exit ;
86401: GO 86428
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86403: LD_ADDR_EXP 61
86407: PUSH
86408: LD_EXP 61
86412: PPUSH
86413: LD_VAR 0 1
86417: PPUSH
86418: LD_VAR 0 2
86422: PPUSH
86423: CALL_OW 1
86427: ST_TO_ADDR
// end ;
86428: LD_VAR 0 3
86432: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86433: LD_INT 0
86435: PPUSH
86436: PPUSH
// if not mc_bases or not base then
86437: LD_EXP 36
86441: NOT
86442: PUSH
86443: LD_VAR 0 1
86447: NOT
86448: OR
86449: IFFALSE 86453
// exit ;
86451: GO 86517
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86453: LD_ADDR_VAR 0 3
86457: PUSH
86458: LD_INT 1
86460: PUSH
86461: LD_INT 2
86463: PUSH
86464: LD_INT 3
86466: PUSH
86467: LD_INT 4
86469: PUSH
86470: LD_INT 11
86472: PUSH
86473: EMPTY
86474: LIST
86475: LIST
86476: LIST
86477: LIST
86478: LIST
86479: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
86480: LD_ADDR_EXP 63
86484: PUSH
86485: LD_EXP 63
86489: PPUSH
86490: LD_VAR 0 1
86494: PPUSH
86495: LD_EXP 63
86499: PUSH
86500: LD_VAR 0 1
86504: ARRAY
86505: PUSH
86506: LD_VAR 0 3
86510: DIFF
86511: PPUSH
86512: CALL_OW 1
86516: ST_TO_ADDR
// end ;
86517: LD_VAR 0 2
86521: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86522: LD_INT 0
86524: PPUSH
// result := mc_vehicles [ base ] ;
86525: LD_ADDR_VAR 0 3
86529: PUSH
86530: LD_EXP 55
86534: PUSH
86535: LD_VAR 0 1
86539: ARRAY
86540: ST_TO_ADDR
// if onlyCombat then
86541: LD_VAR 0 2
86545: IFFALSE 86710
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86547: LD_ADDR_VAR 0 3
86551: PUSH
86552: LD_VAR 0 3
86556: PUSH
86557: LD_VAR 0 3
86561: PPUSH
86562: LD_INT 2
86564: PUSH
86565: LD_INT 34
86567: PUSH
86568: LD_INT 12
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 34
86577: PUSH
86578: LD_INT 51
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 34
86587: PUSH
86588: LD_EXP 30
86592: PUSH
86593: EMPTY
86594: LIST
86595: LIST
86596: PUSH
86597: LD_INT 34
86599: PUSH
86600: LD_INT 32
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PUSH
86607: LD_INT 34
86609: PUSH
86610: LD_INT 13
86612: PUSH
86613: EMPTY
86614: LIST
86615: LIST
86616: PUSH
86617: LD_INT 34
86619: PUSH
86620: LD_INT 52
86622: PUSH
86623: EMPTY
86624: LIST
86625: LIST
86626: PUSH
86627: LD_INT 34
86629: PUSH
86630: LD_INT 14
86632: PUSH
86633: EMPTY
86634: LIST
86635: LIST
86636: PUSH
86637: LD_INT 34
86639: PUSH
86640: LD_INT 53
86642: PUSH
86643: EMPTY
86644: LIST
86645: LIST
86646: PUSH
86647: LD_INT 34
86649: PUSH
86650: LD_EXP 29
86654: PUSH
86655: EMPTY
86656: LIST
86657: LIST
86658: PUSH
86659: LD_INT 34
86661: PUSH
86662: LD_INT 31
86664: PUSH
86665: EMPTY
86666: LIST
86667: LIST
86668: PUSH
86669: LD_INT 34
86671: PUSH
86672: LD_INT 48
86674: PUSH
86675: EMPTY
86676: LIST
86677: LIST
86678: PUSH
86679: LD_INT 34
86681: PUSH
86682: LD_INT 8
86684: PUSH
86685: EMPTY
86686: LIST
86687: LIST
86688: PUSH
86689: EMPTY
86690: LIST
86691: LIST
86692: LIST
86693: LIST
86694: LIST
86695: LIST
86696: LIST
86697: LIST
86698: LIST
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: PPUSH
86704: CALL_OW 72
86708: DIFF
86709: ST_TO_ADDR
// end ; end_of_file
86710: LD_VAR 0 3
86714: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86715: LD_INT 0
86717: PPUSH
86718: PPUSH
86719: PPUSH
// if not mc_bases or not skirmish then
86720: LD_EXP 36
86724: NOT
86725: PUSH
86726: LD_EXP 34
86730: NOT
86731: OR
86732: IFFALSE 86736
// exit ;
86734: GO 86901
// for i = 1 to mc_bases do
86736: LD_ADDR_VAR 0 4
86740: PUSH
86741: DOUBLE
86742: LD_INT 1
86744: DEC
86745: ST_TO_ADDR
86746: LD_EXP 36
86750: PUSH
86751: FOR_TO
86752: IFFALSE 86899
// begin if sci in mc_bases [ i ] then
86754: LD_VAR 0 2
86758: PUSH
86759: LD_EXP 36
86763: PUSH
86764: LD_VAR 0 4
86768: ARRAY
86769: IN
86770: IFFALSE 86897
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86772: LD_ADDR_EXP 65
86776: PUSH
86777: LD_EXP 65
86781: PPUSH
86782: LD_VAR 0 4
86786: PUSH
86787: LD_EXP 65
86791: PUSH
86792: LD_VAR 0 4
86796: ARRAY
86797: PUSH
86798: LD_INT 1
86800: PLUS
86801: PUSH
86802: EMPTY
86803: LIST
86804: LIST
86805: PPUSH
86806: LD_VAR 0 1
86810: PPUSH
86811: CALL 26068 0 3
86815: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86816: LD_ADDR_VAR 0 5
86820: PUSH
86821: LD_EXP 36
86825: PUSH
86826: LD_VAR 0 4
86830: ARRAY
86831: PPUSH
86832: LD_INT 2
86834: PUSH
86835: LD_INT 30
86837: PUSH
86838: LD_INT 0
86840: PUSH
86841: EMPTY
86842: LIST
86843: LIST
86844: PUSH
86845: LD_INT 30
86847: PUSH
86848: LD_INT 1
86850: PUSH
86851: EMPTY
86852: LIST
86853: LIST
86854: PUSH
86855: EMPTY
86856: LIST
86857: LIST
86858: LIST
86859: PPUSH
86860: CALL_OW 72
86864: PPUSH
86865: LD_VAR 0 1
86869: PPUSH
86870: CALL_OW 74
86874: ST_TO_ADDR
// if tmp then
86875: LD_VAR 0 5
86879: IFFALSE 86895
// ComStandNearbyBuilding ( ape , tmp ) ;
86881: LD_VAR 0 1
86885: PPUSH
86886: LD_VAR 0 5
86890: PPUSH
86891: CALL 20775 0 2
// break ;
86895: GO 86899
// end ; end ;
86897: GO 86751
86899: POP
86900: POP
// end ;
86901: LD_VAR 0 3
86905: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86906: LD_INT 0
86908: PPUSH
86909: PPUSH
86910: PPUSH
// if not mc_bases or not skirmish then
86911: LD_EXP 36
86915: NOT
86916: PUSH
86917: LD_EXP 34
86921: NOT
86922: OR
86923: IFFALSE 86927
// exit ;
86925: GO 87016
// for i = 1 to mc_bases do
86927: LD_ADDR_VAR 0 4
86931: PUSH
86932: DOUBLE
86933: LD_INT 1
86935: DEC
86936: ST_TO_ADDR
86937: LD_EXP 36
86941: PUSH
86942: FOR_TO
86943: IFFALSE 87014
// begin if building in mc_busy_turret_list [ i ] then
86945: LD_VAR 0 1
86949: PUSH
86950: LD_EXP 46
86954: PUSH
86955: LD_VAR 0 4
86959: ARRAY
86960: IN
86961: IFFALSE 87012
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86963: LD_ADDR_VAR 0 5
86967: PUSH
86968: LD_EXP 46
86972: PUSH
86973: LD_VAR 0 4
86977: ARRAY
86978: PUSH
86979: LD_VAR 0 1
86983: DIFF
86984: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86985: LD_ADDR_EXP 46
86989: PUSH
86990: LD_EXP 46
86994: PPUSH
86995: LD_VAR 0 4
86999: PPUSH
87000: LD_VAR 0 5
87004: PPUSH
87005: CALL_OW 1
87009: ST_TO_ADDR
// break ;
87010: GO 87014
// end ; end ;
87012: GO 86942
87014: POP
87015: POP
// end ;
87016: LD_VAR 0 3
87020: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87021: LD_INT 0
87023: PPUSH
87024: PPUSH
87025: PPUSH
// if not mc_bases or not skirmish then
87026: LD_EXP 36
87030: NOT
87031: PUSH
87032: LD_EXP 34
87036: NOT
87037: OR
87038: IFFALSE 87042
// exit ;
87040: GO 87241
// for i = 1 to mc_bases do
87042: LD_ADDR_VAR 0 5
87046: PUSH
87047: DOUBLE
87048: LD_INT 1
87050: DEC
87051: ST_TO_ADDR
87052: LD_EXP 36
87056: PUSH
87057: FOR_TO
87058: IFFALSE 87239
// if building in mc_bases [ i ] then
87060: LD_VAR 0 1
87064: PUSH
87065: LD_EXP 36
87069: PUSH
87070: LD_VAR 0 5
87074: ARRAY
87075: IN
87076: IFFALSE 87237
// begin tmp := mc_bases [ i ] diff building ;
87078: LD_ADDR_VAR 0 6
87082: PUSH
87083: LD_EXP 36
87087: PUSH
87088: LD_VAR 0 5
87092: ARRAY
87093: PUSH
87094: LD_VAR 0 1
87098: DIFF
87099: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87100: LD_ADDR_EXP 36
87104: PUSH
87105: LD_EXP 36
87109: PPUSH
87110: LD_VAR 0 5
87114: PPUSH
87115: LD_VAR 0 6
87119: PPUSH
87120: CALL_OW 1
87124: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87125: LD_VAR 0 1
87129: PUSH
87130: LD_EXP 44
87134: PUSH
87135: LD_VAR 0 5
87139: ARRAY
87140: IN
87141: IFFALSE 87180
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87143: LD_ADDR_EXP 44
87147: PUSH
87148: LD_EXP 44
87152: PPUSH
87153: LD_VAR 0 5
87157: PPUSH
87158: LD_EXP 44
87162: PUSH
87163: LD_VAR 0 5
87167: ARRAY
87168: PUSH
87169: LD_VAR 0 1
87173: DIFF
87174: PPUSH
87175: CALL_OW 1
87179: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87180: LD_VAR 0 1
87184: PUSH
87185: LD_EXP 45
87189: PUSH
87190: LD_VAR 0 5
87194: ARRAY
87195: IN
87196: IFFALSE 87235
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87198: LD_ADDR_EXP 45
87202: PUSH
87203: LD_EXP 45
87207: PPUSH
87208: LD_VAR 0 5
87212: PPUSH
87213: LD_EXP 45
87217: PUSH
87218: LD_VAR 0 5
87222: ARRAY
87223: PUSH
87224: LD_VAR 0 1
87228: DIFF
87229: PPUSH
87230: CALL_OW 1
87234: ST_TO_ADDR
// break ;
87235: GO 87239
// end ;
87237: GO 87057
87239: POP
87240: POP
// end ;
87241: LD_VAR 0 4
87245: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87246: LD_INT 0
87248: PPUSH
87249: PPUSH
87250: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87251: LD_EXP 36
87255: NOT
87256: PUSH
87257: LD_EXP 34
87261: NOT
87262: OR
87263: PUSH
87264: LD_VAR 0 3
87268: PUSH
87269: LD_EXP 62
87273: IN
87274: NOT
87275: OR
87276: IFFALSE 87280
// exit ;
87278: GO 87403
// for i = 1 to mc_vehicles do
87280: LD_ADDR_VAR 0 6
87284: PUSH
87285: DOUBLE
87286: LD_INT 1
87288: DEC
87289: ST_TO_ADDR
87290: LD_EXP 55
87294: PUSH
87295: FOR_TO
87296: IFFALSE 87401
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87298: LD_VAR 0 2
87302: PUSH
87303: LD_EXP 55
87307: PUSH
87308: LD_VAR 0 6
87312: ARRAY
87313: IN
87314: PUSH
87315: LD_VAR 0 1
87319: PUSH
87320: LD_EXP 55
87324: PUSH
87325: LD_VAR 0 6
87329: ARRAY
87330: IN
87331: OR
87332: IFFALSE 87399
// begin tmp := mc_vehicles [ i ] diff old ;
87334: LD_ADDR_VAR 0 7
87338: PUSH
87339: LD_EXP 55
87343: PUSH
87344: LD_VAR 0 6
87348: ARRAY
87349: PUSH
87350: LD_VAR 0 2
87354: DIFF
87355: ST_TO_ADDR
// tmp := tmp diff new ;
87356: LD_ADDR_VAR 0 7
87360: PUSH
87361: LD_VAR 0 7
87365: PUSH
87366: LD_VAR 0 1
87370: DIFF
87371: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87372: LD_ADDR_EXP 55
87376: PUSH
87377: LD_EXP 55
87381: PPUSH
87382: LD_VAR 0 6
87386: PPUSH
87387: LD_VAR 0 7
87391: PPUSH
87392: CALL_OW 1
87396: ST_TO_ADDR
// break ;
87397: GO 87401
// end ;
87399: GO 87295
87401: POP
87402: POP
// end ;
87403: LD_VAR 0 5
87407: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87408: LD_INT 0
87410: PPUSH
87411: PPUSH
87412: PPUSH
87413: PPUSH
// if not mc_bases or not skirmish then
87414: LD_EXP 36
87418: NOT
87419: PUSH
87420: LD_EXP 34
87424: NOT
87425: OR
87426: IFFALSE 87430
// exit ;
87428: GO 87807
// side := GetSide ( vehicle ) ;
87430: LD_ADDR_VAR 0 5
87434: PUSH
87435: LD_VAR 0 1
87439: PPUSH
87440: CALL_OW 255
87444: ST_TO_ADDR
// for i = 1 to mc_bases do
87445: LD_ADDR_VAR 0 4
87449: PUSH
87450: DOUBLE
87451: LD_INT 1
87453: DEC
87454: ST_TO_ADDR
87455: LD_EXP 36
87459: PUSH
87460: FOR_TO
87461: IFFALSE 87805
// begin if factory in mc_bases [ i ] then
87463: LD_VAR 0 2
87467: PUSH
87468: LD_EXP 36
87472: PUSH
87473: LD_VAR 0 4
87477: ARRAY
87478: IN
87479: IFFALSE 87803
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
87481: LD_EXP 58
87485: PUSH
87486: LD_VAR 0 4
87490: ARRAY
87491: PUSH
87492: LD_EXP 47
87496: PUSH
87497: LD_VAR 0 4
87501: ARRAY
87502: LESS
87503: PUSH
87504: LD_VAR 0 1
87508: PPUSH
87509: CALL_OW 264
87513: PUSH
87514: LD_INT 31
87516: PUSH
87517: LD_INT 32
87519: PUSH
87520: LD_INT 51
87522: PUSH
87523: LD_EXP 30
87527: PUSH
87528: LD_INT 12
87530: PUSH
87531: LD_INT 30
87533: PUSH
87534: LD_EXP 29
87538: PUSH
87539: LD_INT 11
87541: PUSH
87542: LD_INT 53
87544: PUSH
87545: LD_INT 14
87547: PUSH
87548: LD_EXP 33
87552: PUSH
87553: LD_INT 29
87555: PUSH
87556: LD_EXP 31
87560: PUSH
87561: LD_INT 13
87563: PUSH
87564: LD_INT 52
87566: PUSH
87567: LD_INT 48
87569: PUSH
87570: LD_INT 8
87572: PUSH
87573: EMPTY
87574: LIST
87575: LIST
87576: LIST
87577: LIST
87578: LIST
87579: LIST
87580: LIST
87581: LIST
87582: LIST
87583: LIST
87584: LIST
87585: LIST
87586: LIST
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: IN
87592: NOT
87593: AND
87594: IFFALSE 87642
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
87596: LD_ADDR_EXP 58
87600: PUSH
87601: LD_EXP 58
87605: PPUSH
87606: LD_VAR 0 4
87610: PUSH
87611: LD_EXP 58
87615: PUSH
87616: LD_VAR 0 4
87620: ARRAY
87621: PUSH
87622: LD_INT 1
87624: PLUS
87625: PUSH
87626: EMPTY
87627: LIST
87628: LIST
87629: PPUSH
87630: LD_VAR 0 1
87634: PPUSH
87635: CALL 26068 0 3
87639: ST_TO_ADDR
87640: GO 87686
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87642: LD_ADDR_EXP 55
87646: PUSH
87647: LD_EXP 55
87651: PPUSH
87652: LD_VAR 0 4
87656: PUSH
87657: LD_EXP 55
87661: PUSH
87662: LD_VAR 0 4
87666: ARRAY
87667: PUSH
87668: LD_INT 1
87670: PLUS
87671: PUSH
87672: EMPTY
87673: LIST
87674: LIST
87675: PPUSH
87676: LD_VAR 0 1
87680: PPUSH
87681: CALL 26068 0 3
87685: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
87686: LD_VAR 0 1
87690: PPUSH
87691: CALL_OW 263
87695: PUSH
87696: LD_INT 2
87698: EQUAL
87699: IFFALSE 87719
// begin repeat wait ( 0 0$1 ) ;
87701: LD_INT 35
87703: PPUSH
87704: CALL_OW 67
// until IsControledBy ( vehicle ) ;
87708: LD_VAR 0 1
87712: PPUSH
87713: CALL_OW 312
87717: IFFALSE 87701
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87719: LD_VAR 0 1
87723: PPUSH
87724: LD_EXP 60
87728: PUSH
87729: LD_VAR 0 4
87733: ARRAY
87734: PPUSH
87735: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
87739: LD_VAR 0 1
87743: PPUSH
87744: CALL_OW 263
87748: PUSH
87749: LD_INT 1
87751: NONEQUAL
87752: IFFALSE 87756
// break ;
87754: GO 87805
// repeat wait ( 0 0$1 ) ;
87756: LD_INT 35
87758: PPUSH
87759: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87763: LD_VAR 0 1
87767: PPUSH
87768: LD_EXP 60
87772: PUSH
87773: LD_VAR 0 4
87777: ARRAY
87778: PPUSH
87779: CALL_OW 308
87783: IFFALSE 87756
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87785: LD_VAR 0 1
87789: PPUSH
87790: CALL_OW 311
87794: PPUSH
87795: CALL_OW 121
// exit ;
87799: POP
87800: POP
87801: GO 87807
// end ; end ;
87803: GO 87460
87805: POP
87806: POP
// end ;
87807: LD_VAR 0 3
87811: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87812: LD_INT 0
87814: PPUSH
87815: PPUSH
87816: PPUSH
87817: PPUSH
// if not mc_bases or not skirmish then
87818: LD_EXP 36
87822: NOT
87823: PUSH
87824: LD_EXP 34
87828: NOT
87829: OR
87830: IFFALSE 87834
// exit ;
87832: GO 88187
// repeat wait ( 0 0$1 ) ;
87834: LD_INT 35
87836: PPUSH
87837: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87841: LD_VAR 0 2
87845: PPUSH
87846: LD_VAR 0 3
87850: PPUSH
87851: CALL_OW 284
87855: IFFALSE 87834
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87857: LD_VAR 0 2
87861: PPUSH
87862: LD_VAR 0 3
87866: PPUSH
87867: CALL_OW 283
87871: PUSH
87872: LD_INT 4
87874: EQUAL
87875: IFFALSE 87879
// exit ;
87877: GO 88187
// for i = 1 to mc_bases do
87879: LD_ADDR_VAR 0 7
87883: PUSH
87884: DOUBLE
87885: LD_INT 1
87887: DEC
87888: ST_TO_ADDR
87889: LD_EXP 36
87893: PUSH
87894: FOR_TO
87895: IFFALSE 88185
// begin if mc_crates_area [ i ] then
87897: LD_EXP 54
87901: PUSH
87902: LD_VAR 0 7
87906: ARRAY
87907: IFFALSE 88018
// for j in mc_crates_area [ i ] do
87909: LD_ADDR_VAR 0 8
87913: PUSH
87914: LD_EXP 54
87918: PUSH
87919: LD_VAR 0 7
87923: ARRAY
87924: PUSH
87925: FOR_IN
87926: IFFALSE 88016
// if InArea ( x , y , j ) then
87928: LD_VAR 0 2
87932: PPUSH
87933: LD_VAR 0 3
87937: PPUSH
87938: LD_VAR 0 8
87942: PPUSH
87943: CALL_OW 309
87947: IFFALSE 88014
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87949: LD_ADDR_EXP 52
87953: PUSH
87954: LD_EXP 52
87958: PPUSH
87959: LD_VAR 0 7
87963: PUSH
87964: LD_EXP 52
87968: PUSH
87969: LD_VAR 0 7
87973: ARRAY
87974: PUSH
87975: LD_INT 1
87977: PLUS
87978: PUSH
87979: EMPTY
87980: LIST
87981: LIST
87982: PPUSH
87983: LD_VAR 0 4
87987: PUSH
87988: LD_VAR 0 2
87992: PUSH
87993: LD_VAR 0 3
87997: PUSH
87998: EMPTY
87999: LIST
88000: LIST
88001: LIST
88002: PPUSH
88003: CALL 26068 0 3
88007: ST_TO_ADDR
// exit ;
88008: POP
88009: POP
88010: POP
88011: POP
88012: GO 88187
// end ;
88014: GO 87925
88016: POP
88017: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88018: LD_ADDR_VAR 0 9
88022: PUSH
88023: LD_EXP 36
88027: PUSH
88028: LD_VAR 0 7
88032: ARRAY
88033: PPUSH
88034: LD_INT 2
88036: PUSH
88037: LD_INT 30
88039: PUSH
88040: LD_INT 0
88042: PUSH
88043: EMPTY
88044: LIST
88045: LIST
88046: PUSH
88047: LD_INT 30
88049: PUSH
88050: LD_INT 1
88052: PUSH
88053: EMPTY
88054: LIST
88055: LIST
88056: PUSH
88057: EMPTY
88058: LIST
88059: LIST
88060: LIST
88061: PPUSH
88062: CALL_OW 72
88066: ST_TO_ADDR
// if not depot then
88067: LD_VAR 0 9
88071: NOT
88072: IFFALSE 88076
// continue ;
88074: GO 87894
// for j in depot do
88076: LD_ADDR_VAR 0 8
88080: PUSH
88081: LD_VAR 0 9
88085: PUSH
88086: FOR_IN
88087: IFFALSE 88181
// if GetDistUnitXY ( j , x , y ) < 30 then
88089: LD_VAR 0 8
88093: PPUSH
88094: LD_VAR 0 2
88098: PPUSH
88099: LD_VAR 0 3
88103: PPUSH
88104: CALL_OW 297
88108: PUSH
88109: LD_INT 30
88111: LESS
88112: IFFALSE 88179
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88114: LD_ADDR_EXP 52
88118: PUSH
88119: LD_EXP 52
88123: PPUSH
88124: LD_VAR 0 7
88128: PUSH
88129: LD_EXP 52
88133: PUSH
88134: LD_VAR 0 7
88138: ARRAY
88139: PUSH
88140: LD_INT 1
88142: PLUS
88143: PUSH
88144: EMPTY
88145: LIST
88146: LIST
88147: PPUSH
88148: LD_VAR 0 4
88152: PUSH
88153: LD_VAR 0 2
88157: PUSH
88158: LD_VAR 0 3
88162: PUSH
88163: EMPTY
88164: LIST
88165: LIST
88166: LIST
88167: PPUSH
88168: CALL 26068 0 3
88172: ST_TO_ADDR
// exit ;
88173: POP
88174: POP
88175: POP
88176: POP
88177: GO 88187
// end ;
88179: GO 88086
88181: POP
88182: POP
// end ;
88183: GO 87894
88185: POP
88186: POP
// end ;
88187: LD_VAR 0 6
88191: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88192: LD_INT 0
88194: PPUSH
88195: PPUSH
88196: PPUSH
88197: PPUSH
// if not mc_bases or not skirmish then
88198: LD_EXP 36
88202: NOT
88203: PUSH
88204: LD_EXP 34
88208: NOT
88209: OR
88210: IFFALSE 88214
// exit ;
88212: GO 88491
// side := GetSide ( lab ) ;
88214: LD_ADDR_VAR 0 4
88218: PUSH
88219: LD_VAR 0 2
88223: PPUSH
88224: CALL_OW 255
88228: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88229: LD_VAR 0 4
88233: PUSH
88234: LD_EXP 62
88238: IN
88239: NOT
88240: PUSH
88241: LD_EXP 63
88245: NOT
88246: OR
88247: PUSH
88248: LD_EXP 36
88252: NOT
88253: OR
88254: IFFALSE 88258
// exit ;
88256: GO 88491
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88258: LD_ADDR_EXP 63
88262: PUSH
88263: LD_EXP 63
88267: PPUSH
88268: LD_VAR 0 4
88272: PPUSH
88273: LD_EXP 63
88277: PUSH
88278: LD_VAR 0 4
88282: ARRAY
88283: PUSH
88284: LD_VAR 0 1
88288: DIFF
88289: PPUSH
88290: CALL_OW 1
88294: ST_TO_ADDR
// for i = 1 to mc_bases do
88295: LD_ADDR_VAR 0 5
88299: PUSH
88300: DOUBLE
88301: LD_INT 1
88303: DEC
88304: ST_TO_ADDR
88305: LD_EXP 36
88309: PUSH
88310: FOR_TO
88311: IFFALSE 88489
// begin if lab in mc_bases [ i ] then
88313: LD_VAR 0 2
88317: PUSH
88318: LD_EXP 36
88322: PUSH
88323: LD_VAR 0 5
88327: ARRAY
88328: IN
88329: IFFALSE 88487
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88331: LD_VAR 0 1
88335: PUSH
88336: LD_INT 11
88338: PUSH
88339: LD_INT 4
88341: PUSH
88342: LD_INT 3
88344: PUSH
88345: LD_INT 2
88347: PUSH
88348: EMPTY
88349: LIST
88350: LIST
88351: LIST
88352: LIST
88353: IN
88354: PUSH
88355: LD_EXP 66
88359: PUSH
88360: LD_VAR 0 5
88364: ARRAY
88365: AND
88366: IFFALSE 88487
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88368: LD_ADDR_VAR 0 6
88372: PUSH
88373: LD_EXP 66
88377: PUSH
88378: LD_VAR 0 5
88382: ARRAY
88383: PUSH
88384: LD_INT 1
88386: ARRAY
88387: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88388: LD_ADDR_EXP 66
88392: PUSH
88393: LD_EXP 66
88397: PPUSH
88398: LD_VAR 0 5
88402: PPUSH
88403: EMPTY
88404: PPUSH
88405: CALL_OW 1
88409: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88410: LD_VAR 0 6
88414: PPUSH
88415: LD_INT 0
88417: PPUSH
88418: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88422: LD_VAR 0 6
88426: PPUSH
88427: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88431: LD_ADDR_EXP 65
88435: PUSH
88436: LD_EXP 65
88440: PPUSH
88441: LD_VAR 0 5
88445: PPUSH
88446: LD_EXP 65
88450: PUSH
88451: LD_VAR 0 5
88455: ARRAY
88456: PPUSH
88457: LD_INT 1
88459: PPUSH
88460: LD_VAR 0 6
88464: PPUSH
88465: CALL_OW 2
88469: PPUSH
88470: CALL_OW 1
88474: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
88475: LD_VAR 0 5
88479: PPUSH
88480: LD_INT 112
88482: PPUSH
88483: CALL 66024 0 2
// end ; end ; end ;
88487: GO 88310
88489: POP
88490: POP
// end ;
88491: LD_VAR 0 3
88495: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
88496: LD_INT 0
88498: PPUSH
88499: PPUSH
88500: PPUSH
88501: PPUSH
88502: PPUSH
88503: PPUSH
88504: PPUSH
88505: PPUSH
// if not mc_bases or not skirmish then
88506: LD_EXP 36
88510: NOT
88511: PUSH
88512: LD_EXP 34
88516: NOT
88517: OR
88518: IFFALSE 88522
// exit ;
88520: GO 89614
// for i = 1 to mc_bases do
88522: LD_ADDR_VAR 0 3
88526: PUSH
88527: DOUBLE
88528: LD_INT 1
88530: DEC
88531: ST_TO_ADDR
88532: LD_EXP 36
88536: PUSH
88537: FOR_TO
88538: IFFALSE 89612
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88540: LD_VAR 0 1
88544: PUSH
88545: LD_EXP 36
88549: PUSH
88550: LD_VAR 0 3
88554: ARRAY
88555: IN
88556: PUSH
88557: LD_VAR 0 1
88561: PUSH
88562: LD_EXP 43
88566: PUSH
88567: LD_VAR 0 3
88571: ARRAY
88572: IN
88573: OR
88574: PUSH
88575: LD_VAR 0 1
88579: PUSH
88580: LD_EXP 58
88584: PUSH
88585: LD_VAR 0 3
88589: ARRAY
88590: IN
88591: OR
88592: PUSH
88593: LD_VAR 0 1
88597: PUSH
88598: LD_EXP 55
88602: PUSH
88603: LD_VAR 0 3
88607: ARRAY
88608: IN
88609: OR
88610: PUSH
88611: LD_VAR 0 1
88615: PUSH
88616: LD_EXP 65
88620: PUSH
88621: LD_VAR 0 3
88625: ARRAY
88626: IN
88627: OR
88628: PUSH
88629: LD_VAR 0 1
88633: PUSH
88634: LD_EXP 66
88638: PUSH
88639: LD_VAR 0 3
88643: ARRAY
88644: IN
88645: OR
88646: IFFALSE 89610
// begin if un in mc_ape [ i ] then
88648: LD_VAR 0 1
88652: PUSH
88653: LD_EXP 65
88657: PUSH
88658: LD_VAR 0 3
88662: ARRAY
88663: IN
88664: IFFALSE 88703
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88666: LD_ADDR_EXP 65
88670: PUSH
88671: LD_EXP 65
88675: PPUSH
88676: LD_VAR 0 3
88680: PPUSH
88681: LD_EXP 65
88685: PUSH
88686: LD_VAR 0 3
88690: ARRAY
88691: PUSH
88692: LD_VAR 0 1
88696: DIFF
88697: PPUSH
88698: CALL_OW 1
88702: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88703: LD_VAR 0 1
88707: PUSH
88708: LD_EXP 66
88712: PUSH
88713: LD_VAR 0 3
88717: ARRAY
88718: IN
88719: IFFALSE 88743
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88721: LD_ADDR_EXP 66
88725: PUSH
88726: LD_EXP 66
88730: PPUSH
88731: LD_VAR 0 3
88735: PPUSH
88736: EMPTY
88737: PPUSH
88738: CALL_OW 1
88742: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88743: LD_VAR 0 1
88747: PPUSH
88748: CALL_OW 247
88752: PUSH
88753: LD_INT 2
88755: EQUAL
88756: PUSH
88757: LD_VAR 0 1
88761: PPUSH
88762: CALL_OW 110
88766: PUSH
88767: LD_INT 20
88769: EQUAL
88770: PUSH
88771: LD_VAR 0 1
88775: PUSH
88776: LD_EXP 58
88780: PUSH
88781: LD_VAR 0 3
88785: ARRAY
88786: IN
88787: OR
88788: AND
88789: IFFALSE 88950
// begin if un in mc_defender [ i ] then
88791: LD_VAR 0 1
88795: PUSH
88796: LD_EXP 58
88800: PUSH
88801: LD_VAR 0 3
88805: ARRAY
88806: IN
88807: IFFALSE 88846
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88809: LD_ADDR_EXP 58
88813: PUSH
88814: LD_EXP 58
88818: PPUSH
88819: LD_VAR 0 3
88823: PPUSH
88824: LD_EXP 58
88828: PUSH
88829: LD_VAR 0 3
88833: ARRAY
88834: PUSH
88835: LD_VAR 0 1
88839: DIFF
88840: PPUSH
88841: CALL_OW 1
88845: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
88846: LD_ADDR_VAR 0 8
88850: PUSH
88851: LD_VAR 0 3
88855: PPUSH
88856: LD_INT 3
88858: PPUSH
88859: CALL 85539 0 2
88863: ST_TO_ADDR
// if fac then
88864: LD_VAR 0 8
88868: IFFALSE 88950
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88870: LD_ADDR_VAR 0 9
88874: PUSH
88875: LD_VAR 0 8
88879: PPUSH
88880: LD_VAR 0 1
88884: PPUSH
88885: CALL_OW 265
88889: PPUSH
88890: LD_VAR 0 1
88894: PPUSH
88895: CALL_OW 262
88899: PPUSH
88900: LD_VAR 0 1
88904: PPUSH
88905: CALL_OW 263
88909: PPUSH
88910: LD_VAR 0 1
88914: PPUSH
88915: CALL_OW 264
88919: PPUSH
88920: CALL 23661 0 5
88924: ST_TO_ADDR
// if components then
88925: LD_VAR 0 9
88929: IFFALSE 88948
// MC_InsertProduceList ( i , [ components ] ) ;
88931: LD_VAR 0 3
88935: PPUSH
88936: LD_VAR 0 9
88940: PUSH
88941: EMPTY
88942: LIST
88943: PPUSH
88944: CALL 85167 0 2
// break ;
88948: GO 89612
// end ; end ; if GetType ( un ) = unit_building then
88950: LD_VAR 0 1
88954: PPUSH
88955: CALL_OW 247
88959: PUSH
88960: LD_INT 3
88962: EQUAL
88963: IFFALSE 89278
// begin btype := GetBType ( un ) ;
88965: LD_ADDR_VAR 0 5
88969: PUSH
88970: LD_VAR 0 1
88974: PPUSH
88975: CALL_OW 266
88979: ST_TO_ADDR
// if btype = b_warehouse then
88980: LD_VAR 0 5
88984: PUSH
88985: LD_INT 1
88987: EQUAL
88988: IFFALSE 89006
// begin btype := b_depot ;
88990: LD_ADDR_VAR 0 5
88994: PUSH
88995: LD_INT 0
88997: ST_TO_ADDR
// pos := 1 ;
88998: LD_ADDR_VAR 0 6
89002: PUSH
89003: LD_INT 1
89005: ST_TO_ADDR
// end ; if btype = b_factory then
89006: LD_VAR 0 5
89010: PUSH
89011: LD_INT 3
89013: EQUAL
89014: IFFALSE 89032
// begin btype := b_workshop ;
89016: LD_ADDR_VAR 0 5
89020: PUSH
89021: LD_INT 2
89023: ST_TO_ADDR
// pos := 1 ;
89024: LD_ADDR_VAR 0 6
89028: PUSH
89029: LD_INT 1
89031: ST_TO_ADDR
// end ; if btype = b_barracks then
89032: LD_VAR 0 5
89036: PUSH
89037: LD_INT 5
89039: EQUAL
89040: IFFALSE 89050
// btype := b_armoury ;
89042: LD_ADDR_VAR 0 5
89046: PUSH
89047: LD_INT 4
89049: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89050: LD_VAR 0 5
89054: PUSH
89055: LD_INT 7
89057: PUSH
89058: LD_INT 8
89060: PUSH
89061: EMPTY
89062: LIST
89063: LIST
89064: IN
89065: IFFALSE 89075
// btype := b_lab ;
89067: LD_ADDR_VAR 0 5
89071: PUSH
89072: LD_INT 6
89074: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89075: LD_ADDR_EXP 41
89079: PUSH
89080: LD_EXP 41
89084: PPUSH
89085: LD_VAR 0 3
89089: PUSH
89090: LD_EXP 41
89094: PUSH
89095: LD_VAR 0 3
89099: ARRAY
89100: PUSH
89101: LD_INT 1
89103: PLUS
89104: PUSH
89105: EMPTY
89106: LIST
89107: LIST
89108: PPUSH
89109: LD_VAR 0 5
89113: PUSH
89114: LD_VAR 0 1
89118: PPUSH
89119: CALL_OW 250
89123: PUSH
89124: LD_VAR 0 1
89128: PPUSH
89129: CALL_OW 251
89133: PUSH
89134: LD_VAR 0 1
89138: PPUSH
89139: CALL_OW 254
89143: PUSH
89144: EMPTY
89145: LIST
89146: LIST
89147: LIST
89148: LIST
89149: PPUSH
89150: CALL 26068 0 3
89154: ST_TO_ADDR
// if pos = 1 then
89155: LD_VAR 0 6
89159: PUSH
89160: LD_INT 1
89162: EQUAL
89163: IFFALSE 89278
// begin tmp := mc_build_list [ i ] ;
89165: LD_ADDR_VAR 0 7
89169: PUSH
89170: LD_EXP 41
89174: PUSH
89175: LD_VAR 0 3
89179: ARRAY
89180: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89181: LD_VAR 0 7
89185: PPUSH
89186: LD_INT 2
89188: PUSH
89189: LD_INT 30
89191: PUSH
89192: LD_INT 0
89194: PUSH
89195: EMPTY
89196: LIST
89197: LIST
89198: PUSH
89199: LD_INT 30
89201: PUSH
89202: LD_INT 1
89204: PUSH
89205: EMPTY
89206: LIST
89207: LIST
89208: PUSH
89209: EMPTY
89210: LIST
89211: LIST
89212: LIST
89213: PPUSH
89214: CALL_OW 72
89218: IFFALSE 89228
// pos := 2 ;
89220: LD_ADDR_VAR 0 6
89224: PUSH
89225: LD_INT 2
89227: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89228: LD_ADDR_VAR 0 7
89232: PUSH
89233: LD_VAR 0 7
89237: PPUSH
89238: LD_VAR 0 6
89242: PPUSH
89243: LD_VAR 0 7
89247: PPUSH
89248: CALL 26394 0 3
89252: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89253: LD_ADDR_EXP 41
89257: PUSH
89258: LD_EXP 41
89262: PPUSH
89263: LD_VAR 0 3
89267: PPUSH
89268: LD_VAR 0 7
89272: PPUSH
89273: CALL_OW 1
89277: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89278: LD_VAR 0 1
89282: PUSH
89283: LD_EXP 36
89287: PUSH
89288: LD_VAR 0 3
89292: ARRAY
89293: IN
89294: IFFALSE 89333
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89296: LD_ADDR_EXP 36
89300: PUSH
89301: LD_EXP 36
89305: PPUSH
89306: LD_VAR 0 3
89310: PPUSH
89311: LD_EXP 36
89315: PUSH
89316: LD_VAR 0 3
89320: ARRAY
89321: PUSH
89322: LD_VAR 0 1
89326: DIFF
89327: PPUSH
89328: CALL_OW 1
89332: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89333: LD_VAR 0 1
89337: PUSH
89338: LD_EXP 43
89342: PUSH
89343: LD_VAR 0 3
89347: ARRAY
89348: IN
89349: IFFALSE 89388
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89351: LD_ADDR_EXP 43
89355: PUSH
89356: LD_EXP 43
89360: PPUSH
89361: LD_VAR 0 3
89365: PPUSH
89366: LD_EXP 43
89370: PUSH
89371: LD_VAR 0 3
89375: ARRAY
89376: PUSH
89377: LD_VAR 0 1
89381: DIFF
89382: PPUSH
89383: CALL_OW 1
89387: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89388: LD_VAR 0 1
89392: PUSH
89393: LD_EXP 55
89397: PUSH
89398: LD_VAR 0 3
89402: ARRAY
89403: IN
89404: IFFALSE 89443
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89406: LD_ADDR_EXP 55
89410: PUSH
89411: LD_EXP 55
89415: PPUSH
89416: LD_VAR 0 3
89420: PPUSH
89421: LD_EXP 55
89425: PUSH
89426: LD_VAR 0 3
89430: ARRAY
89431: PUSH
89432: LD_VAR 0 1
89436: DIFF
89437: PPUSH
89438: CALL_OW 1
89442: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89443: LD_VAR 0 1
89447: PUSH
89448: LD_EXP 58
89452: PUSH
89453: LD_VAR 0 3
89457: ARRAY
89458: IN
89459: IFFALSE 89498
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89461: LD_ADDR_EXP 58
89465: PUSH
89466: LD_EXP 58
89470: PPUSH
89471: LD_VAR 0 3
89475: PPUSH
89476: LD_EXP 58
89480: PUSH
89481: LD_VAR 0 3
89485: ARRAY
89486: PUSH
89487: LD_VAR 0 1
89491: DIFF
89492: PPUSH
89493: CALL_OW 1
89497: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89498: LD_VAR 0 1
89502: PUSH
89503: LD_EXP 45
89507: PUSH
89508: LD_VAR 0 3
89512: ARRAY
89513: IN
89514: IFFALSE 89553
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89516: LD_ADDR_EXP 45
89520: PUSH
89521: LD_EXP 45
89525: PPUSH
89526: LD_VAR 0 3
89530: PPUSH
89531: LD_EXP 45
89535: PUSH
89536: LD_VAR 0 3
89540: ARRAY
89541: PUSH
89542: LD_VAR 0 1
89546: DIFF
89547: PPUSH
89548: CALL_OW 1
89552: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89553: LD_VAR 0 1
89557: PUSH
89558: LD_EXP 44
89562: PUSH
89563: LD_VAR 0 3
89567: ARRAY
89568: IN
89569: IFFALSE 89608
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89571: LD_ADDR_EXP 44
89575: PUSH
89576: LD_EXP 44
89580: PPUSH
89581: LD_VAR 0 3
89585: PPUSH
89586: LD_EXP 44
89590: PUSH
89591: LD_VAR 0 3
89595: ARRAY
89596: PUSH
89597: LD_VAR 0 1
89601: DIFF
89602: PPUSH
89603: CALL_OW 1
89607: ST_TO_ADDR
// end ; break ;
89608: GO 89612
// end ;
89610: GO 88537
89612: POP
89613: POP
// end ;
89614: LD_VAR 0 2
89618: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89619: LD_INT 0
89621: PPUSH
89622: PPUSH
89623: PPUSH
// if not mc_bases or not skirmish then
89624: LD_EXP 36
89628: NOT
89629: PUSH
89630: LD_EXP 34
89634: NOT
89635: OR
89636: IFFALSE 89640
// exit ;
89638: GO 89855
// for i = 1 to mc_bases do
89640: LD_ADDR_VAR 0 3
89644: PUSH
89645: DOUBLE
89646: LD_INT 1
89648: DEC
89649: ST_TO_ADDR
89650: LD_EXP 36
89654: PUSH
89655: FOR_TO
89656: IFFALSE 89853
// begin if building in mc_construct_list [ i ] then
89658: LD_VAR 0 1
89662: PUSH
89663: LD_EXP 43
89667: PUSH
89668: LD_VAR 0 3
89672: ARRAY
89673: IN
89674: IFFALSE 89851
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89676: LD_ADDR_EXP 43
89680: PUSH
89681: LD_EXP 43
89685: PPUSH
89686: LD_VAR 0 3
89690: PPUSH
89691: LD_EXP 43
89695: PUSH
89696: LD_VAR 0 3
89700: ARRAY
89701: PUSH
89702: LD_VAR 0 1
89706: DIFF
89707: PPUSH
89708: CALL_OW 1
89712: ST_TO_ADDR
// if building in mc_lab [ i ] then
89713: LD_VAR 0 1
89717: PUSH
89718: LD_EXP 69
89722: PUSH
89723: LD_VAR 0 3
89727: ARRAY
89728: IN
89729: IFFALSE 89784
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89731: LD_ADDR_EXP 70
89735: PUSH
89736: LD_EXP 70
89740: PPUSH
89741: LD_VAR 0 3
89745: PPUSH
89746: LD_EXP 70
89750: PUSH
89751: LD_VAR 0 3
89755: ARRAY
89756: PPUSH
89757: LD_INT 1
89759: PPUSH
89760: LD_EXP 70
89764: PUSH
89765: LD_VAR 0 3
89769: ARRAY
89770: PPUSH
89771: LD_INT 0
89773: PPUSH
89774: CALL 25486 0 4
89778: PPUSH
89779: CALL_OW 1
89783: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89784: LD_VAR 0 1
89788: PUSH
89789: LD_EXP 36
89793: PUSH
89794: LD_VAR 0 3
89798: ARRAY
89799: IN
89800: NOT
89801: IFFALSE 89847
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89803: LD_ADDR_EXP 36
89807: PUSH
89808: LD_EXP 36
89812: PPUSH
89813: LD_VAR 0 3
89817: PUSH
89818: LD_EXP 36
89822: PUSH
89823: LD_VAR 0 3
89827: ARRAY
89828: PUSH
89829: LD_INT 1
89831: PLUS
89832: PUSH
89833: EMPTY
89834: LIST
89835: LIST
89836: PPUSH
89837: LD_VAR 0 1
89841: PPUSH
89842: CALL 26068 0 3
89846: ST_TO_ADDR
// exit ;
89847: POP
89848: POP
89849: GO 89855
// end ; end ;
89851: GO 89655
89853: POP
89854: POP
// end ;
89855: LD_VAR 0 2
89859: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89860: LD_INT 0
89862: PPUSH
89863: PPUSH
89864: PPUSH
89865: PPUSH
89866: PPUSH
89867: PPUSH
89868: PPUSH
// if not mc_bases or not skirmish then
89869: LD_EXP 36
89873: NOT
89874: PUSH
89875: LD_EXP 34
89879: NOT
89880: OR
89881: IFFALSE 89885
// exit ;
89883: GO 90546
// for i = 1 to mc_bases do
89885: LD_ADDR_VAR 0 3
89889: PUSH
89890: DOUBLE
89891: LD_INT 1
89893: DEC
89894: ST_TO_ADDR
89895: LD_EXP 36
89899: PUSH
89900: FOR_TO
89901: IFFALSE 90544
// begin if building in mc_construct_list [ i ] then
89903: LD_VAR 0 1
89907: PUSH
89908: LD_EXP 43
89912: PUSH
89913: LD_VAR 0 3
89917: ARRAY
89918: IN
89919: IFFALSE 90542
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89921: LD_ADDR_EXP 43
89925: PUSH
89926: LD_EXP 43
89930: PPUSH
89931: LD_VAR 0 3
89935: PPUSH
89936: LD_EXP 43
89940: PUSH
89941: LD_VAR 0 3
89945: ARRAY
89946: PUSH
89947: LD_VAR 0 1
89951: DIFF
89952: PPUSH
89953: CALL_OW 1
89957: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89958: LD_ADDR_EXP 36
89962: PUSH
89963: LD_EXP 36
89967: PPUSH
89968: LD_VAR 0 3
89972: PUSH
89973: LD_EXP 36
89977: PUSH
89978: LD_VAR 0 3
89982: ARRAY
89983: PUSH
89984: LD_INT 1
89986: PLUS
89987: PUSH
89988: EMPTY
89989: LIST
89990: LIST
89991: PPUSH
89992: LD_VAR 0 1
89996: PPUSH
89997: CALL 26068 0 3
90001: ST_TO_ADDR
// btype := GetBType ( building ) ;
90002: LD_ADDR_VAR 0 5
90006: PUSH
90007: LD_VAR 0 1
90011: PPUSH
90012: CALL_OW 266
90016: ST_TO_ADDR
// side := GetSide ( building ) ;
90017: LD_ADDR_VAR 0 8
90021: PUSH
90022: LD_VAR 0 1
90026: PPUSH
90027: CALL_OW 255
90031: ST_TO_ADDR
// if btype = b_lab then
90032: LD_VAR 0 5
90036: PUSH
90037: LD_INT 6
90039: EQUAL
90040: IFFALSE 90090
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90042: LD_ADDR_EXP 69
90046: PUSH
90047: LD_EXP 69
90051: PPUSH
90052: LD_VAR 0 3
90056: PUSH
90057: LD_EXP 69
90061: PUSH
90062: LD_VAR 0 3
90066: ARRAY
90067: PUSH
90068: LD_INT 1
90070: PLUS
90071: PUSH
90072: EMPTY
90073: LIST
90074: LIST
90075: PPUSH
90076: LD_VAR 0 1
90080: PPUSH
90081: CALL 26068 0 3
90085: ST_TO_ADDR
// exit ;
90086: POP
90087: POP
90088: GO 90546
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90090: LD_VAR 0 5
90094: PUSH
90095: LD_INT 0
90097: PUSH
90098: LD_INT 2
90100: PUSH
90101: LD_INT 4
90103: PUSH
90104: EMPTY
90105: LIST
90106: LIST
90107: LIST
90108: IN
90109: IFFALSE 90233
// begin if btype = b_armoury then
90111: LD_VAR 0 5
90115: PUSH
90116: LD_INT 4
90118: EQUAL
90119: IFFALSE 90129
// btype := b_barracks ;
90121: LD_ADDR_VAR 0 5
90125: PUSH
90126: LD_INT 5
90128: ST_TO_ADDR
// if btype = b_depot then
90129: LD_VAR 0 5
90133: PUSH
90134: LD_INT 0
90136: EQUAL
90137: IFFALSE 90147
// btype := b_warehouse ;
90139: LD_ADDR_VAR 0 5
90143: PUSH
90144: LD_INT 1
90146: ST_TO_ADDR
// if btype = b_workshop then
90147: LD_VAR 0 5
90151: PUSH
90152: LD_INT 2
90154: EQUAL
90155: IFFALSE 90165
// btype := b_factory ;
90157: LD_ADDR_VAR 0 5
90161: PUSH
90162: LD_INT 3
90164: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90165: LD_VAR 0 5
90169: PPUSH
90170: LD_VAR 0 8
90174: PPUSH
90175: CALL_OW 323
90179: PUSH
90180: LD_INT 1
90182: EQUAL
90183: IFFALSE 90229
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90185: LD_ADDR_EXP 68
90189: PUSH
90190: LD_EXP 68
90194: PPUSH
90195: LD_VAR 0 3
90199: PUSH
90200: LD_EXP 68
90204: PUSH
90205: LD_VAR 0 3
90209: ARRAY
90210: PUSH
90211: LD_INT 1
90213: PLUS
90214: PUSH
90215: EMPTY
90216: LIST
90217: LIST
90218: PPUSH
90219: LD_VAR 0 1
90223: PPUSH
90224: CALL 26068 0 3
90228: ST_TO_ADDR
// exit ;
90229: POP
90230: POP
90231: GO 90546
// end ; if btype in [ b_bunker , b_turret ] then
90233: LD_VAR 0 5
90237: PUSH
90238: LD_INT 32
90240: PUSH
90241: LD_INT 33
90243: PUSH
90244: EMPTY
90245: LIST
90246: LIST
90247: IN
90248: IFFALSE 90538
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90250: LD_ADDR_EXP 44
90254: PUSH
90255: LD_EXP 44
90259: PPUSH
90260: LD_VAR 0 3
90264: PUSH
90265: LD_EXP 44
90269: PUSH
90270: LD_VAR 0 3
90274: ARRAY
90275: PUSH
90276: LD_INT 1
90278: PLUS
90279: PUSH
90280: EMPTY
90281: LIST
90282: LIST
90283: PPUSH
90284: LD_VAR 0 1
90288: PPUSH
90289: CALL 26068 0 3
90293: ST_TO_ADDR
// if btype = b_bunker then
90294: LD_VAR 0 5
90298: PUSH
90299: LD_INT 32
90301: EQUAL
90302: IFFALSE 90538
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90304: LD_ADDR_EXP 45
90308: PUSH
90309: LD_EXP 45
90313: PPUSH
90314: LD_VAR 0 3
90318: PUSH
90319: LD_EXP 45
90323: PUSH
90324: LD_VAR 0 3
90328: ARRAY
90329: PUSH
90330: LD_INT 1
90332: PLUS
90333: PUSH
90334: EMPTY
90335: LIST
90336: LIST
90337: PPUSH
90338: LD_VAR 0 1
90342: PPUSH
90343: CALL 26068 0 3
90347: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90348: LD_ADDR_VAR 0 6
90352: PUSH
90353: LD_EXP 36
90357: PUSH
90358: LD_VAR 0 3
90362: ARRAY
90363: PPUSH
90364: LD_INT 25
90366: PUSH
90367: LD_INT 1
90369: PUSH
90370: EMPTY
90371: LIST
90372: LIST
90373: PUSH
90374: LD_INT 3
90376: PUSH
90377: LD_INT 54
90379: PUSH
90380: EMPTY
90381: LIST
90382: PUSH
90383: EMPTY
90384: LIST
90385: LIST
90386: PUSH
90387: EMPTY
90388: LIST
90389: LIST
90390: PPUSH
90391: CALL_OW 72
90395: ST_TO_ADDR
// if tmp then
90396: LD_VAR 0 6
90400: IFFALSE 90406
// exit ;
90402: POP
90403: POP
90404: GO 90546
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90406: LD_ADDR_VAR 0 6
90410: PUSH
90411: LD_EXP 36
90415: PUSH
90416: LD_VAR 0 3
90420: ARRAY
90421: PPUSH
90422: LD_INT 2
90424: PUSH
90425: LD_INT 30
90427: PUSH
90428: LD_INT 4
90430: PUSH
90431: EMPTY
90432: LIST
90433: LIST
90434: PUSH
90435: LD_INT 30
90437: PUSH
90438: LD_INT 5
90440: PUSH
90441: EMPTY
90442: LIST
90443: LIST
90444: PUSH
90445: EMPTY
90446: LIST
90447: LIST
90448: LIST
90449: PPUSH
90450: CALL_OW 72
90454: ST_TO_ADDR
// if not tmp then
90455: LD_VAR 0 6
90459: NOT
90460: IFFALSE 90466
// exit ;
90462: POP
90463: POP
90464: GO 90546
// for j in tmp do
90466: LD_ADDR_VAR 0 4
90470: PUSH
90471: LD_VAR 0 6
90475: PUSH
90476: FOR_IN
90477: IFFALSE 90536
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90479: LD_ADDR_VAR 0 7
90483: PUSH
90484: LD_VAR 0 4
90488: PPUSH
90489: CALL_OW 313
90493: PPUSH
90494: LD_INT 25
90496: PUSH
90497: LD_INT 1
90499: PUSH
90500: EMPTY
90501: LIST
90502: LIST
90503: PPUSH
90504: CALL_OW 72
90508: ST_TO_ADDR
// if units then
90509: LD_VAR 0 7
90513: IFFALSE 90534
// begin ComExitBuilding ( units [ 1 ] ) ;
90515: LD_VAR 0 7
90519: PUSH
90520: LD_INT 1
90522: ARRAY
90523: PPUSH
90524: CALL_OW 122
// exit ;
90528: POP
90529: POP
90530: POP
90531: POP
90532: GO 90546
// end ; end ;
90534: GO 90476
90536: POP
90537: POP
// end ; end ; exit ;
90538: POP
90539: POP
90540: GO 90546
// end ; end ;
90542: GO 89900
90544: POP
90545: POP
// end ;
90546: LD_VAR 0 2
90550: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90551: LD_INT 0
90553: PPUSH
90554: PPUSH
90555: PPUSH
90556: PPUSH
90557: PPUSH
90558: PPUSH
90559: PPUSH
// if not mc_bases or not skirmish then
90560: LD_EXP 36
90564: NOT
90565: PUSH
90566: LD_EXP 34
90570: NOT
90571: OR
90572: IFFALSE 90576
// exit ;
90574: GO 90807
// btype := GetBType ( building ) ;
90576: LD_ADDR_VAR 0 6
90580: PUSH
90581: LD_VAR 0 1
90585: PPUSH
90586: CALL_OW 266
90590: ST_TO_ADDR
// x := GetX ( building ) ;
90591: LD_ADDR_VAR 0 7
90595: PUSH
90596: LD_VAR 0 1
90600: PPUSH
90601: CALL_OW 250
90605: ST_TO_ADDR
// y := GetY ( building ) ;
90606: LD_ADDR_VAR 0 8
90610: PUSH
90611: LD_VAR 0 1
90615: PPUSH
90616: CALL_OW 251
90620: ST_TO_ADDR
// d := GetDir ( building ) ;
90621: LD_ADDR_VAR 0 9
90625: PUSH
90626: LD_VAR 0 1
90630: PPUSH
90631: CALL_OW 254
90635: ST_TO_ADDR
// for i = 1 to mc_bases do
90636: LD_ADDR_VAR 0 4
90640: PUSH
90641: DOUBLE
90642: LD_INT 1
90644: DEC
90645: ST_TO_ADDR
90646: LD_EXP 36
90650: PUSH
90651: FOR_TO
90652: IFFALSE 90805
// begin if not mc_build_list [ i ] then
90654: LD_EXP 41
90658: PUSH
90659: LD_VAR 0 4
90663: ARRAY
90664: NOT
90665: IFFALSE 90669
// continue ;
90667: GO 90651
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90669: LD_VAR 0 6
90673: PUSH
90674: LD_VAR 0 7
90678: PUSH
90679: LD_VAR 0 8
90683: PUSH
90684: LD_VAR 0 9
90688: PUSH
90689: EMPTY
90690: LIST
90691: LIST
90692: LIST
90693: LIST
90694: PPUSH
90695: LD_EXP 41
90699: PUSH
90700: LD_VAR 0 4
90704: ARRAY
90705: PUSH
90706: LD_INT 1
90708: ARRAY
90709: PPUSH
90710: CALL 32237 0 2
90714: IFFALSE 90803
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90716: LD_ADDR_EXP 41
90720: PUSH
90721: LD_EXP 41
90725: PPUSH
90726: LD_VAR 0 4
90730: PPUSH
90731: LD_EXP 41
90735: PUSH
90736: LD_VAR 0 4
90740: ARRAY
90741: PPUSH
90742: LD_INT 1
90744: PPUSH
90745: CALL_OW 3
90749: PPUSH
90750: CALL_OW 1
90754: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90755: LD_ADDR_EXP 43
90759: PUSH
90760: LD_EXP 43
90764: PPUSH
90765: LD_VAR 0 4
90769: PUSH
90770: LD_EXP 43
90774: PUSH
90775: LD_VAR 0 4
90779: ARRAY
90780: PUSH
90781: LD_INT 1
90783: PLUS
90784: PUSH
90785: EMPTY
90786: LIST
90787: LIST
90788: PPUSH
90789: LD_VAR 0 1
90793: PPUSH
90794: CALL 26068 0 3
90798: ST_TO_ADDR
// exit ;
90799: POP
90800: POP
90801: GO 90807
// end ; end ;
90803: GO 90651
90805: POP
90806: POP
// end ;
90807: LD_VAR 0 3
90811: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90812: LD_INT 0
90814: PPUSH
90815: PPUSH
90816: PPUSH
// if not mc_bases or not skirmish then
90817: LD_EXP 36
90821: NOT
90822: PUSH
90823: LD_EXP 34
90827: NOT
90828: OR
90829: IFFALSE 90833
// exit ;
90831: GO 91023
// for i = 1 to mc_bases do
90833: LD_ADDR_VAR 0 4
90837: PUSH
90838: DOUBLE
90839: LD_INT 1
90841: DEC
90842: ST_TO_ADDR
90843: LD_EXP 36
90847: PUSH
90848: FOR_TO
90849: IFFALSE 90936
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90851: LD_VAR 0 1
90855: PUSH
90856: LD_EXP 44
90860: PUSH
90861: LD_VAR 0 4
90865: ARRAY
90866: IN
90867: PUSH
90868: LD_VAR 0 1
90872: PUSH
90873: LD_EXP 45
90877: PUSH
90878: LD_VAR 0 4
90882: ARRAY
90883: IN
90884: NOT
90885: AND
90886: IFFALSE 90934
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90888: LD_ADDR_EXP 45
90892: PUSH
90893: LD_EXP 45
90897: PPUSH
90898: LD_VAR 0 4
90902: PUSH
90903: LD_EXP 45
90907: PUSH
90908: LD_VAR 0 4
90912: ARRAY
90913: PUSH
90914: LD_INT 1
90916: PLUS
90917: PUSH
90918: EMPTY
90919: LIST
90920: LIST
90921: PPUSH
90922: LD_VAR 0 1
90926: PPUSH
90927: CALL 26068 0 3
90931: ST_TO_ADDR
// break ;
90932: GO 90936
// end ; end ;
90934: GO 90848
90936: POP
90937: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90938: LD_VAR 0 1
90942: PPUSH
90943: CALL_OW 257
90947: PUSH
90948: LD_EXP 62
90952: IN
90953: PUSH
90954: LD_VAR 0 1
90958: PPUSH
90959: CALL_OW 266
90963: PUSH
90964: LD_INT 5
90966: EQUAL
90967: AND
90968: PUSH
90969: LD_VAR 0 2
90973: PPUSH
90974: CALL_OW 110
90978: PUSH
90979: LD_INT 18
90981: NONEQUAL
90982: AND
90983: IFFALSE 91023
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90985: LD_VAR 0 2
90989: PPUSH
90990: CALL_OW 257
90994: PUSH
90995: LD_INT 5
90997: PUSH
90998: LD_INT 8
91000: PUSH
91001: LD_INT 9
91003: PUSH
91004: EMPTY
91005: LIST
91006: LIST
91007: LIST
91008: IN
91009: IFFALSE 91023
// SetClass ( unit , 1 ) ;
91011: LD_VAR 0 2
91015: PPUSH
91016: LD_INT 1
91018: PPUSH
91019: CALL_OW 336
// end ;
91023: LD_VAR 0 3
91027: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91028: LD_INT 0
91030: PPUSH
91031: PPUSH
// if not mc_bases or not skirmish then
91032: LD_EXP 36
91036: NOT
91037: PUSH
91038: LD_EXP 34
91042: NOT
91043: OR
91044: IFFALSE 91048
// exit ;
91046: GO 91164
// if GetLives ( abandoned_vehicle ) > 250 then
91048: LD_VAR 0 2
91052: PPUSH
91053: CALL_OW 256
91057: PUSH
91058: LD_INT 250
91060: GREATER
91061: IFFALSE 91065
// exit ;
91063: GO 91164
// for i = 1 to mc_bases do
91065: LD_ADDR_VAR 0 6
91069: PUSH
91070: DOUBLE
91071: LD_INT 1
91073: DEC
91074: ST_TO_ADDR
91075: LD_EXP 36
91079: PUSH
91080: FOR_TO
91081: IFFALSE 91162
// begin if driver in mc_bases [ i ] then
91083: LD_VAR 0 1
91087: PUSH
91088: LD_EXP 36
91092: PUSH
91093: LD_VAR 0 6
91097: ARRAY
91098: IN
91099: IFFALSE 91160
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91101: LD_VAR 0 1
91105: PPUSH
91106: LD_EXP 36
91110: PUSH
91111: LD_VAR 0 6
91115: ARRAY
91116: PPUSH
91117: LD_INT 2
91119: PUSH
91120: LD_INT 30
91122: PUSH
91123: LD_INT 0
91125: PUSH
91126: EMPTY
91127: LIST
91128: LIST
91129: PUSH
91130: LD_INT 30
91132: PUSH
91133: LD_INT 1
91135: PUSH
91136: EMPTY
91137: LIST
91138: LIST
91139: PUSH
91140: EMPTY
91141: LIST
91142: LIST
91143: LIST
91144: PPUSH
91145: CALL_OW 72
91149: PUSH
91150: LD_INT 1
91152: ARRAY
91153: PPUSH
91154: CALL_OW 112
// break ;
91158: GO 91162
// end ; end ;
91160: GO 91080
91162: POP
91163: POP
// end ;
91164: LD_VAR 0 5
91168: RET
