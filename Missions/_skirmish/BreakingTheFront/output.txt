// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := false ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 60989 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 60989 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 60989 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 60989 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53737 0 9
// MC_Start ;
1394: CALL 64041 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 86360 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 86304 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 86192 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 85874 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 85605 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 85287 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 85102 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 84994 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 85781 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 86360 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 86304 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 86192 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 85874 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 85605 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 85287 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 84784 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 84994 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 85102 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 86360 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 86304 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 86192 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 85874 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 85605 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 85287 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 85102 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 86360 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 86304 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 86192 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 85874 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 85605 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 85287 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 85930 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 85102 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 53737 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29338 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29338 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29338 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 53737 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26051 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26051 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29338 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 53737 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29338 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 25929 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 60582 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 25929 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 60582 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 25929 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 60582 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 25929 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 60582 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 85042 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 85042 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 60582 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 60582 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26051 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 85150 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66007 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 25929 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 25929 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 25929 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 25929 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 86505 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 85150 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 85150 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 86505 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 86505 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 86505 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 85150 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 85150 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 85150 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 86505 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 86505 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 86505 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 85150 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 86505 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 86505 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 88479 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 90534 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 89602 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 89843 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 88175 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 87795 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 87391 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 87229 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 87004 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 86889 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 90795 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 91011 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 86698 0 2
// end ; end_of_file
19323: PPOPN 2
19325: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
// if exist_mode then
19330: LD_VAR 0 2
19334: IFFALSE 19359
// unit := CreateCharacter ( prefix & ident ) else
19336: LD_ADDR_VAR 0 5
19340: PUSH
19341: LD_VAR 0 3
19345: PUSH
19346: LD_VAR 0 1
19350: STR
19351: PPUSH
19352: CALL_OW 34
19356: ST_TO_ADDR
19357: GO 19374
// unit := NewCharacter ( ident ) ;
19359: LD_ADDR_VAR 0 5
19363: PUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 25
19373: ST_TO_ADDR
// result := unit ;
19374: LD_ADDR_VAR 0 4
19378: PUSH
19379: LD_VAR 0 5
19383: ST_TO_ADDR
// end ;
19384: LD_VAR 0 4
19388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
// if not side or not nation then
19393: LD_VAR 0 1
19397: NOT
19398: PUSH
19399: LD_VAR 0 2
19403: NOT
19404: OR
19405: IFFALSE 19409
// exit ;
19407: GO 20045
// case nation of nation_american :
19409: LD_VAR 0 2
19413: PUSH
19414: LD_INT 1
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19592
19422: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19423: LD_ADDR_VAR 0 4
19427: PUSH
19428: LD_INT 35
19430: PUSH
19431: LD_INT 45
19433: PUSH
19434: LD_INT 46
19436: PUSH
19437: LD_INT 47
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 6
19448: PUSH
19449: LD_INT 15
19451: PUSH
19452: LD_INT 16
19454: PUSH
19455: LD_INT 7
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 13
19463: PUSH
19464: LD_INT 10
19466: PUSH
19467: LD_INT 14
19469: PUSH
19470: LD_INT 20
19472: PUSH
19473: LD_INT 21
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 32
19484: PUSH
19485: LD_INT 27
19487: PUSH
19488: LD_INT 36
19490: PUSH
19491: LD_INT 69
19493: PUSH
19494: LD_INT 39
19496: PUSH
19497: LD_INT 34
19499: PUSH
19500: LD_INT 40
19502: PUSH
19503: LD_INT 48
19505: PUSH
19506: LD_INT 49
19508: PUSH
19509: LD_INT 50
19511: PUSH
19512: LD_INT 51
19514: PUSH
19515: LD_INT 52
19517: PUSH
19518: LD_INT 53
19520: PUSH
19521: LD_INT 54
19523: PUSH
19524: LD_INT 55
19526: PUSH
19527: LD_INT 56
19529: PUSH
19530: LD_INT 57
19532: PUSH
19533: LD_INT 58
19535: PUSH
19536: LD_INT 59
19538: PUSH
19539: LD_INT 60
19541: PUSH
19542: LD_INT 61
19544: PUSH
19545: LD_INT 62
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: ST_TO_ADDR
19590: GO 19969
19592: LD_INT 2
19594: DOUBLE
19595: EQUAL
19596: IFTRUE 19600
19598: GO 19778
19600: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19601: LD_ADDR_VAR 0 4
19605: PUSH
19606: LD_INT 35
19608: PUSH
19609: LD_INT 45
19611: PUSH
19612: LD_INT 46
19614: PUSH
19615: LD_INT 47
19617: PUSH
19618: LD_INT 70
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 11
19626: PUSH
19627: LD_INT 3
19629: PUSH
19630: LD_INT 4
19632: PUSH
19633: LD_INT 5
19635: PUSH
19636: LD_INT 6
19638: PUSH
19639: LD_INT 15
19641: PUSH
19642: LD_INT 18
19644: PUSH
19645: LD_INT 7
19647: PUSH
19648: LD_INT 17
19650: PUSH
19651: LD_INT 8
19653: PUSH
19654: LD_INT 20
19656: PUSH
19657: LD_INT 21
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: LD_INT 72
19665: PUSH
19666: LD_INT 26
19668: PUSH
19669: LD_INT 69
19671: PUSH
19672: LD_INT 39
19674: PUSH
19675: LD_INT 40
19677: PUSH
19678: LD_INT 41
19680: PUSH
19681: LD_INT 42
19683: PUSH
19684: LD_INT 43
19686: PUSH
19687: LD_INT 48
19689: PUSH
19690: LD_INT 49
19692: PUSH
19693: LD_INT 50
19695: PUSH
19696: LD_INT 51
19698: PUSH
19699: LD_INT 52
19701: PUSH
19702: LD_INT 53
19704: PUSH
19705: LD_INT 54
19707: PUSH
19708: LD_INT 55
19710: PUSH
19711: LD_INT 56
19713: PUSH
19714: LD_INT 60
19716: PUSH
19717: LD_INT 61
19719: PUSH
19720: LD_INT 62
19722: PUSH
19723: LD_INT 66
19725: PUSH
19726: LD_INT 67
19728: PUSH
19729: LD_INT 68
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
19776: GO 19969
19778: LD_INT 3
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19968
19786: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19787: LD_ADDR_VAR 0 4
19791: PUSH
19792: LD_INT 46
19794: PUSH
19795: LD_INT 47
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 11
19806: PUSH
19807: LD_INT 9
19809: PUSH
19810: LD_INT 20
19812: PUSH
19813: LD_INT 19
19815: PUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 24
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 25
19827: PUSH
19828: LD_INT 28
19830: PUSH
19831: LD_INT 29
19833: PUSH
19834: LD_INT 30
19836: PUSH
19837: LD_INT 31
19839: PUSH
19840: LD_INT 37
19842: PUSH
19843: LD_INT 38
19845: PUSH
19846: LD_INT 32
19848: PUSH
19849: LD_INT 27
19851: PUSH
19852: LD_INT 33
19854: PUSH
19855: LD_INT 69
19857: PUSH
19858: LD_INT 39
19860: PUSH
19861: LD_INT 34
19863: PUSH
19864: LD_INT 40
19866: PUSH
19867: LD_INT 71
19869: PUSH
19870: LD_INT 23
19872: PUSH
19873: LD_INT 44
19875: PUSH
19876: LD_INT 48
19878: PUSH
19879: LD_INT 49
19881: PUSH
19882: LD_INT 50
19884: PUSH
19885: LD_INT 51
19887: PUSH
19888: LD_INT 52
19890: PUSH
19891: LD_INT 53
19893: PUSH
19894: LD_INT 54
19896: PUSH
19897: LD_INT 55
19899: PUSH
19900: LD_INT 56
19902: PUSH
19903: LD_INT 57
19905: PUSH
19906: LD_INT 58
19908: PUSH
19909: LD_INT 59
19911: PUSH
19912: LD_INT 63
19914: PUSH
19915: LD_INT 64
19917: PUSH
19918: LD_INT 65
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: ST_TO_ADDR
19966: GO 19969
19968: POP
// if state > - 1 and state < 3 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: GREATER
19978: PUSH
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 3
19986: LESS
19987: AND
19988: IFFALSE 20045
// for i in result do
19990: LD_ADDR_VAR 0 5
19994: PUSH
19995: LD_VAR 0 4
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20043
// if GetTech ( i , side ) <> state then
20003: LD_VAR 0 5
20007: PPUSH
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 321
20017: PUSH
20018: LD_VAR 0 3
20022: NONEQUAL
20023: IFFALSE 20041
// result := result diff i ;
20025: LD_ADDR_VAR 0 4
20029: PUSH
20030: LD_VAR 0 4
20034: PUSH
20035: LD_VAR 0 5
20039: DIFF
20040: ST_TO_ADDR
20041: GO 20000
20043: POP
20044: POP
// end ;
20045: LD_VAR 0 4
20049: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
// result := true ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20063: LD_ADDR_VAR 0 5
20067: PUSH
20068: LD_VAR 0 2
20072: PPUSH
20073: CALL_OW 480
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 5
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20136
// for i in tmp do
20087: LD_ADDR_VAR 0 4
20091: PUSH
20092: LD_VAR 0 5
20096: PUSH
20097: FOR_IN
20098: IFFALSE 20134
// if GetTech ( i , side ) <> state_researched then
20100: LD_VAR 0 4
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 321
20114: PUSH
20115: LD_INT 2
20117: NONEQUAL
20118: IFFALSE 20132
// begin result := false ;
20120: LD_ADDR_VAR 0 3
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// exit ;
20128: POP
20129: POP
20130: GO 20136
// end ;
20132: GO 20097
20134: POP
20135: POP
// end ;
20136: LD_VAR 0 3
20140: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20141: LD_INT 0
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
20152: PPUSH
20153: PPUSH
20154: PPUSH
20155: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20156: LD_VAR 0 1
20160: NOT
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 257
20171: PUSH
20172: LD_INT 9
20174: NONEQUAL
20175: OR
20176: IFFALSE 20180
// exit ;
20178: GO 20753
// side := GetSide ( unit ) ;
20180: LD_ADDR_VAR 0 9
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 255
20194: ST_TO_ADDR
// tech_space := tech_spacanom ;
20195: LD_ADDR_VAR 0 12
20199: PUSH
20200: LD_INT 29
20202: ST_TO_ADDR
// tech_time := tech_taurad ;
20203: LD_ADDR_VAR 0 13
20207: PUSH
20208: LD_INT 28
20210: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20211: LD_ADDR_VAR 0 11
20215: PUSH
20216: LD_VAR 0 1
20220: PPUSH
20221: CALL_OW 310
20225: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20226: LD_VAR 0 11
20230: PPUSH
20231: CALL_OW 247
20235: PUSH
20236: LD_INT 2
20238: EQUAL
20239: IFFALSE 20243
// exit ;
20241: GO 20753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20243: LD_ADDR_VAR 0 8
20247: PUSH
20248: LD_INT 81
20250: PUSH
20251: LD_VAR 0 9
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PPUSH
20281: CALL_OW 69
20285: ST_TO_ADDR
// if not tmp then
20286: LD_VAR 0 8
20290: NOT
20291: IFFALSE 20295
// exit ;
20293: GO 20753
// if in_unit then
20295: LD_VAR 0 11
20299: IFFALSE 20323
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20301: LD_ADDR_VAR 0 10
20305: PUSH
20306: LD_VAR 0 8
20310: PPUSH
20311: LD_VAR 0 11
20315: PPUSH
20316: CALL_OW 74
20320: ST_TO_ADDR
20321: GO 20343
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20323: LD_ADDR_VAR 0 10
20327: PUSH
20328: LD_VAR 0 8
20332: PPUSH
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 74
20342: ST_TO_ADDR
// if not enemy then
20343: LD_VAR 0 10
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20753
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20352: LD_VAR 0 11
20356: PUSH
20357: LD_VAR 0 11
20361: PPUSH
20362: LD_VAR 0 10
20366: PPUSH
20367: CALL_OW 296
20371: PUSH
20372: LD_INT 13
20374: GREATER
20375: AND
20376: PUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 12
20394: GREATER
20395: OR
20396: IFFALSE 20400
// exit ;
20398: GO 20753
// missile := [ 1 ] ;
20400: LD_ADDR_VAR 0 14
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20411: LD_VAR 0 9
20415: PPUSH
20416: LD_VAR 0 12
20420: PPUSH
20421: CALL_OW 325
20425: IFFALSE 20454
// missile := Insert ( missile , missile + 1 , 2 ) ;
20427: LD_ADDR_VAR 0 14
20431: PUSH
20432: LD_VAR 0 14
20436: PPUSH
20437: LD_VAR 0 14
20441: PUSH
20442: LD_INT 1
20444: PLUS
20445: PPUSH
20446: LD_INT 2
20448: PPUSH
20449: CALL_OW 2
20453: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20454: LD_VAR 0 9
20458: PPUSH
20459: LD_VAR 0 13
20463: PPUSH
20464: CALL_OW 325
20468: PUSH
20469: LD_VAR 0 10
20473: PPUSH
20474: CALL_OW 255
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: NOT
20489: AND
20490: IFFALSE 20519
// missile := Insert ( missile , missile + 1 , 3 ) ;
20492: LD_ADDR_VAR 0 14
20496: PUSH
20497: LD_VAR 0 14
20501: PPUSH
20502: LD_VAR 0 14
20506: PUSH
20507: LD_INT 1
20509: PLUS
20510: PPUSH
20511: LD_INT 3
20513: PPUSH
20514: CALL_OW 2
20518: ST_TO_ADDR
// if missile < 2 then
20519: LD_VAR 0 14
20523: PUSH
20524: LD_INT 2
20526: LESS
20527: IFFALSE 20531
// exit ;
20529: GO 20753
// x := GetX ( enemy ) ;
20531: LD_ADDR_VAR 0 4
20535: PUSH
20536: LD_VAR 0 10
20540: PPUSH
20541: CALL_OW 250
20545: ST_TO_ADDR
// y := GetY ( enemy ) ;
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_VAR 0 10
20555: PPUSH
20556: CALL_OW 251
20560: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20561: LD_ADDR_VAR 0 6
20565: PUSH
20566: LD_VAR 0 4
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 12
20582: PLUS
20583: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20584: LD_ADDR_VAR 0 7
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PPUSH
20598: LD_INT 1
20600: PPUSH
20601: CALL_OW 12
20605: PLUS
20606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20607: LD_VAR 0 6
20611: PPUSH
20612: LD_VAR 0 7
20616: PPUSH
20617: CALL_OW 488
20621: NOT
20622: IFFALSE 20644
// begin _x := x ;
20624: LD_ADDR_VAR 0 6
20628: PUSH
20629: LD_VAR 0 4
20633: ST_TO_ADDR
// _y := y ;
20634: LD_ADDR_VAR 0 7
20638: PUSH
20639: LD_VAR 0 5
20643: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_INT 1
20651: PPUSH
20652: LD_VAR 0 14
20656: PPUSH
20657: CALL_OW 12
20661: ST_TO_ADDR
// case i of 1 :
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 1
20669: DOUBLE
20670: EQUAL
20671: IFTRUE 20675
20673: GO 20692
20675: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20676: LD_VAR 0 1
20680: PPUSH
20681: LD_VAR 0 10
20685: PPUSH
20686: CALL_OW 115
20690: GO 20753
20692: LD_INT 2
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20722
20700: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 6
20710: PPUSH
20711: LD_VAR 0 7
20715: PPUSH
20716: CALL_OW 153
20720: GO 20753
20722: LD_INT 3
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20752
20730: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_VAR 0 6
20740: PPUSH
20741: LD_VAR 0 7
20745: PPUSH
20746: CALL_OW 154
20750: GO 20753
20752: POP
// end ;
20753: LD_VAR 0 2
20757: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
// if not unit or not building then
20766: LD_VAR 0 1
20770: NOT
20771: PUSH
20772: LD_VAR 0 2
20776: NOT
20777: OR
20778: IFFALSE 20782
// exit ;
20780: GO 20940
// x := GetX ( building ) ;
20782: LD_ADDR_VAR 0 5
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 250
20796: ST_TO_ADDR
// y := GetY ( building ) ;
20797: LD_ADDR_VAR 0 6
20801: PUSH
20802: LD_VAR 0 2
20806: PPUSH
20807: CALL_OW 251
20811: ST_TO_ADDR
// for i = 0 to 5 do
20812: LD_ADDR_VAR 0 4
20816: PUSH
20817: DOUBLE
20818: LD_INT 0
20820: DEC
20821: ST_TO_ADDR
20822: LD_INT 5
20824: PUSH
20825: FOR_TO
20826: IFFALSE 20938
// begin _x := ShiftX ( x , i , 3 ) ;
20828: LD_ADDR_VAR 0 7
20832: PUSH
20833: LD_VAR 0 5
20837: PPUSH
20838: LD_VAR 0 4
20842: PPUSH
20843: LD_INT 3
20845: PPUSH
20846: CALL_OW 272
20850: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20851: LD_ADDR_VAR 0 8
20855: PUSH
20856: LD_VAR 0 6
20860: PPUSH
20861: LD_VAR 0 4
20865: PPUSH
20866: LD_INT 3
20868: PPUSH
20869: CALL_OW 273
20873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20874: LD_VAR 0 7
20878: PPUSH
20879: LD_VAR 0 8
20883: PPUSH
20884: CALL_OW 488
20888: NOT
20889: IFFALSE 20893
// continue ;
20891: GO 20825
// if HexInfo ( _x , _y ) = 0 then
20893: LD_VAR 0 7
20897: PPUSH
20898: LD_VAR 0 8
20902: PPUSH
20903: CALL_OW 428
20907: PUSH
20908: LD_INT 0
20910: EQUAL
20911: IFFALSE 20936
// begin ComMoveXY ( unit , _x , _y ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_VAR 0 7
20922: PPUSH
20923: LD_VAR 0 8
20927: PPUSH
20928: CALL_OW 111
// exit ;
20932: POP
20933: POP
20934: GO 20940
// end ; end ;
20936: GO 20825
20938: POP
20939: POP
// end ;
20940: LD_VAR 0 3
20944: RET
// export function ScanBase ( side , base_area ) ; begin
20945: LD_INT 0
20947: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: LD_VAR 0 2
20957: PPUSH
20958: LD_INT 81
20960: PUSH
20961: LD_VAR 0 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PPUSH
20970: CALL_OW 70
20974: ST_TO_ADDR
// end ;
20975: LD_VAR 0 3
20979: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
20984: PPUSH
20985: PPUSH
20986: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20987: LD_VAR 0 1
20991: NOT
20992: PUSH
20993: LD_EXP 36
20997: PUSH
20998: LD_VAR 0 1
21002: ARRAY
21003: NOT
21004: OR
21005: PUSH
21006: LD_VAR 0 2
21010: NOT
21011: OR
21012: PUSH
21013: LD_VAR 0 3
21017: NOT
21018: OR
21019: IFFALSE 21023
// exit ;
21021: GO 21473
// side := mc_sides [ base ] ;
21023: LD_ADDR_VAR 0 6
21027: PUSH
21028: LD_EXP 62
21032: PUSH
21033: LD_VAR 0 1
21037: ARRAY
21038: ST_TO_ADDR
// if not side then
21039: LD_VAR 0 6
21043: NOT
21044: IFFALSE 21048
// exit ;
21046: GO 21473
// for i in solds do
21048: LD_ADDR_VAR 0 7
21052: PUSH
21053: LD_VAR 0 2
21057: PUSH
21058: FOR_IN
21059: IFFALSE 21120
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21061: LD_VAR 0 7
21065: PPUSH
21066: CALL_OW 310
21070: PPUSH
21071: CALL_OW 266
21075: PUSH
21076: LD_INT 32
21078: PUSH
21079: LD_INT 31
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: IN
21086: IFFALSE 21106
// solds := solds diff i else
21088: LD_ADDR_VAR 0 2
21092: PUSH
21093: LD_VAR 0 2
21097: PUSH
21098: LD_VAR 0 7
21102: DIFF
21103: ST_TO_ADDR
21104: GO 21118
// SetTag ( i , 18 ) ;
21106: LD_VAR 0 7
21110: PPUSH
21111: LD_INT 18
21113: PPUSH
21114: CALL_OW 109
21118: GO 21058
21120: POP
21121: POP
// if not solds then
21122: LD_VAR 0 2
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21473
// repeat wait ( 0 0$1 ) ;
21131: LD_INT 35
21133: PPUSH
21134: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21138: LD_ADDR_VAR 0 5
21142: PUSH
21143: LD_VAR 0 6
21147: PPUSH
21148: LD_VAR 0 3
21152: PPUSH
21153: CALL 20945 0 2
21157: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21158: LD_VAR 0 5
21162: NOT
21163: PUSH
21164: LD_VAR 0 5
21168: PUSH
21169: LD_INT 3
21171: GREATER
21172: OR
21173: PUSH
21174: LD_EXP 58
21178: PUSH
21179: LD_VAR 0 1
21183: ARRAY
21184: OR
21185: IFFALSE 21226
// begin for i in solds do
21187: LD_ADDR_VAR 0 7
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: FOR_IN
21198: IFFALSE 21222
// if HasTask ( i ) then
21200: LD_VAR 0 7
21204: PPUSH
21205: CALL_OW 314
21209: IFFALSE 21220
// ComStop ( i ) ;
21211: LD_VAR 0 7
21215: PPUSH
21216: CALL_OW 141
21220: GO 21197
21222: POP
21223: POP
// break ;
21224: GO 21461
// end ; for i in solds do
21226: LD_ADDR_VAR 0 7
21230: PUSH
21231: LD_VAR 0 2
21235: PUSH
21236: FOR_IN
21237: IFFALSE 21453
// begin if IsInUnit ( i ) then
21239: LD_VAR 0 7
21243: PPUSH
21244: CALL_OW 310
21248: IFFALSE 21259
// ComExitBuilding ( i ) ;
21250: LD_VAR 0 7
21254: PPUSH
21255: CALL_OW 122
// if GetLives ( i ) > 333 then
21259: LD_VAR 0 7
21263: PPUSH
21264: CALL_OW 256
21268: PUSH
21269: LD_INT 333
21271: GREATER
21272: IFFALSE 21300
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21274: LD_VAR 0 7
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: LD_VAR 0 7
21288: PPUSH
21289: CALL_OW 74
21293: PPUSH
21294: CALL_OW 115
21298: GO 21451
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21300: LD_ADDR_VAR 0 8
21304: PUSH
21305: LD_EXP 36
21309: PUSH
21310: LD_VAR 0 1
21314: ARRAY
21315: PPUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 30
21341: PUSH
21342: LD_INT 6
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: PPUSH
21355: CALL_OW 72
21359: PPUSH
21360: LD_VAR 0 7
21364: PPUSH
21365: CALL_OW 74
21369: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21370: LD_VAR 0 7
21374: PPUSH
21375: LD_VAR 0 8
21379: PPUSH
21380: CALL_OW 250
21384: PPUSH
21385: LD_INT 3
21387: PPUSH
21388: LD_INT 5
21390: PPUSH
21391: CALL_OW 272
21395: PPUSH
21396: LD_VAR 0 8
21400: PPUSH
21401: CALL_OW 251
21405: PPUSH
21406: LD_INT 3
21408: PPUSH
21409: LD_INT 5
21411: PPUSH
21412: CALL_OW 273
21416: PPUSH
21417: CALL_OW 111
// SetTag ( i , 0 ) ;
21421: LD_VAR 0 7
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 109
// solds := solds diff i ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_VAR 0 2
21442: PUSH
21443: LD_VAR 0 7
21447: DIFF
21448: ST_TO_ADDR
// continue ;
21449: GO 21236
// end ; end ;
21451: GO 21236
21453: POP
21454: POP
// until solds ;
21455: LD_VAR 0 2
21459: IFFALSE 21131
// MC_Reset ( base , 18 ) ;
21461: LD_VAR 0 1
21465: PPUSH
21466: LD_INT 18
21468: PPUSH
21469: CALL 66007 0 2
// end ;
21473: LD_VAR 0 4
21477: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21478: LD_INT 0
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
21491: PPUSH
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21496: LD_ADDR_VAR 0 12
21500: PUSH
21501: LD_EXP 36
21505: PUSH
21506: LD_VAR 0 1
21510: ARRAY
21511: PPUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 3
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PPUSH
21522: CALL_OW 72
21526: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21527: LD_ADDR_VAR 0 8
21531: PUSH
21532: LD_EXP 36
21536: PUSH
21537: LD_VAR 0 1
21541: ARRAY
21542: PPUSH
21543: LD_INT 2
21545: PUSH
21546: LD_INT 25
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 25
21558: PUSH
21559: LD_INT 5
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 8
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 25
21578: PUSH
21579: LD_INT 9
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL_OW 72
21597: ST_TO_ADDR
// if not defenders and not solds then
21598: LD_VAR 0 2
21602: NOT
21603: PUSH
21604: LD_VAR 0 8
21608: NOT
21609: AND
21610: IFFALSE 21614
// exit ;
21612: GO 22943
// depot_under_attack := false ;
21614: LD_ADDR_VAR 0 16
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sold_defenders := [ ] ;
21622: LD_ADDR_VAR 0 17
21626: PUSH
21627: EMPTY
21628: ST_TO_ADDR
// if mechs then
21629: LD_VAR 0 12
21633: IFFALSE 21762
// for i in defenders do
21635: LD_ADDR_VAR 0 5
21639: PUSH
21640: LD_VAR 0 2
21644: PUSH
21645: FOR_IN
21646: IFFALSE 21760
// begin SetTag ( i , 20 ) ;
21648: LD_VAR 0 5
21652: PPUSH
21653: LD_INT 20
21655: PPUSH
21656: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL_OW 263
21669: PUSH
21670: LD_INT 1
21672: EQUAL
21673: PUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 311
21683: NOT
21684: AND
21685: PUSH
21686: LD_VAR 0 12
21690: AND
21691: IFFALSE 21758
// begin un := mechs [ 1 ] ;
21693: LD_ADDR_VAR 0 10
21697: PUSH
21698: LD_VAR 0 12
21702: PUSH
21703: LD_INT 1
21705: ARRAY
21706: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21707: LD_VAR 0 10
21711: PPUSH
21712: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21716: LD_VAR 0 10
21720: PPUSH
21721: LD_VAR 0 5
21725: PPUSH
21726: CALL_OW 180
// SetTag ( un , 19 ) ;
21730: LD_VAR 0 10
21734: PPUSH
21735: LD_INT 19
21737: PPUSH
21738: CALL_OW 109
// mechs := mechs diff un ;
21742: LD_ADDR_VAR 0 12
21746: PUSH
21747: LD_VAR 0 12
21751: PUSH
21752: LD_VAR 0 10
21756: DIFF
21757: ST_TO_ADDR
// end ; end ;
21758: GO 21645
21760: POP
21761: POP
// if solds then
21762: LD_VAR 0 8
21766: IFFALSE 21825
// for i in solds do
21768: LD_ADDR_VAR 0 5
21772: PUSH
21773: LD_VAR 0 8
21777: PUSH
21778: FOR_IN
21779: IFFALSE 21823
// if not GetTag ( i ) then
21781: LD_VAR 0 5
21785: PPUSH
21786: CALL_OW 110
21790: NOT
21791: IFFALSE 21821
// begin defenders := defenders union i ;
21793: LD_ADDR_VAR 0 2
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 5
21807: UNION
21808: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21809: LD_VAR 0 5
21813: PPUSH
21814: LD_INT 18
21816: PPUSH
21817: CALL_OW 109
// end ;
21821: GO 21778
21823: POP
21824: POP
// repeat wait ( 0 0$1 ) ;
21825: LD_INT 35
21827: PPUSH
21828: CALL_OW 67
// enemy := mc_scan [ base ] ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_EXP 59
21841: PUSH
21842: LD_VAR 0 1
21846: ARRAY
21847: ST_TO_ADDR
// for i in defenders do
21848: LD_ADDR_VAR 0 5
21852: PUSH
21853: LD_VAR 0 2
21857: PUSH
21858: FOR_IN
21859: IFFALSE 22544
// begin e := NearestUnitToUnit ( enemy , i ) ;
21861: LD_ADDR_VAR 0 13
21865: PUSH
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_VAR 0 5
21875: PPUSH
21876: CALL_OW 74
21880: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21881: LD_ADDR_VAR 0 16
21885: PUSH
21886: LD_EXP 36
21890: PUSH
21891: LD_VAR 0 1
21895: ARRAY
21896: PPUSH
21897: LD_INT 2
21899: PUSH
21900: LD_INT 30
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 30
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: PPUSH
21925: CALL_OW 72
21929: NOT
21930: PUSH
21931: LD_EXP 36
21935: PUSH
21936: LD_VAR 0 1
21940: ARRAY
21941: PPUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 30
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: PPUSH
21970: CALL_OW 72
21974: PPUSH
21975: CALL_OW 256
21979: PUSH
21980: LD_INT 600
21982: LESS
21983: OR
21984: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21985: LD_VAR 0 5
21989: PPUSH
21990: CALL_OW 247
21994: PUSH
21995: LD_INT 2
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22250
22003: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22004: LD_VAR 0 5
22008: PPUSH
22009: CALL_OW 256
22013: PUSH
22014: LD_INT 650
22016: GREATER
22017: PUSH
22018: LD_VAR 0 5
22022: PPUSH
22023: LD_VAR 0 13
22027: PPUSH
22028: CALL_OW 296
22032: PUSH
22033: LD_INT 40
22035: LESS
22036: AND
22037: IFFALSE 22055
// ComAttackUnit ( i , e ) else
22039: LD_VAR 0 5
22043: PPUSH
22044: LD_VAR 0 13
22048: PPUSH
22049: CALL_OW 115
22053: GO 22133
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22055: LD_VAR 0 5
22059: PPUSH
22060: LD_VAR 0 13
22064: PPUSH
22065: CALL_OW 296
22069: PUSH
22070: LD_INT 30
22072: GREATEREQUAL
22073: PUSH
22074: LD_VAR 0 5
22078: PPUSH
22079: CALL_OW 256
22083: PUSH
22084: LD_INT 650
22086: LESSEQUAL
22087: OR
22088: PUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: LD_EXP 60
22098: PUSH
22099: LD_VAR 0 1
22103: ARRAY
22104: PPUSH
22105: CALL_OW 308
22109: NOT
22110: AND
22111: IFFALSE 22133
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22113: LD_VAR 0 5
22117: PPUSH
22118: LD_EXP 60
22122: PUSH
22123: LD_VAR 0 1
22127: ARRAY
22128: PPUSH
22129: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22133: LD_VAR 0 5
22137: PPUSH
22138: CALL_OW 256
22142: PUSH
22143: LD_INT 998
22145: LESS
22146: PUSH
22147: LD_VAR 0 5
22151: PPUSH
22152: CALL_OW 263
22156: PUSH
22157: LD_INT 1
22159: EQUAL
22160: AND
22161: PUSH
22162: LD_VAR 0 5
22166: PPUSH
22167: CALL_OW 311
22171: AND
22172: PUSH
22173: LD_VAR 0 5
22177: PPUSH
22178: LD_EXP 60
22182: PUSH
22183: LD_VAR 0 1
22187: ARRAY
22188: PPUSH
22189: CALL_OW 308
22193: AND
22194: IFFALSE 22248
// begin mech := IsDrivenBy ( i ) ;
22196: LD_ADDR_VAR 0 9
22200: PUSH
22201: LD_VAR 0 5
22205: PPUSH
22206: CALL_OW 311
22210: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22211: LD_VAR 0 9
22215: PPUSH
22216: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22220: LD_VAR 0 9
22224: PPUSH
22225: LD_VAR 0 5
22229: PPUSH
22230: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22234: LD_VAR 0 9
22238: PPUSH
22239: LD_VAR 0 5
22243: PPUSH
22244: CALL_OW 180
// end ; end ; unit_human :
22248: GO 22515
22250: LD_INT 1
22252: DOUBLE
22253: EQUAL
22254: IFTRUE 22258
22256: GO 22514
22258: POP
// begin b := IsInUnit ( i ) ;
22259: LD_ADDR_VAR 0 18
22263: PUSH
22264: LD_VAR 0 5
22268: PPUSH
22269: CALL_OW 310
22273: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22274: LD_ADDR_VAR 0 19
22278: PUSH
22279: LD_VAR 0 18
22283: NOT
22284: PUSH
22285: LD_VAR 0 18
22289: PPUSH
22290: CALL_OW 266
22294: PUSH
22295: LD_INT 32
22297: PUSH
22298: LD_INT 31
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: IN
22305: OR
22306: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22307: LD_VAR 0 16
22311: PUSH
22312: LD_VAR 0 2
22316: PPUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PPUSH
22327: CALL_OW 72
22331: PUSH
22332: LD_INT 1
22334: LESSEQUAL
22335: OR
22336: PUSH
22337: LD_VAR 0 19
22341: AND
22342: PUSH
22343: LD_VAR 0 5
22347: PUSH
22348: LD_VAR 0 17
22352: IN
22353: NOT
22354: AND
22355: IFFALSE 22448
// begin if b then
22357: LD_VAR 0 18
22361: IFFALSE 22410
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22363: LD_VAR 0 18
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: LD_VAR 0 18
22377: PPUSH
22378: CALL_OW 74
22382: PPUSH
22383: CALL_OW 296
22387: PUSH
22388: LD_INT 10
22390: LESS
22391: PUSH
22392: LD_VAR 0 18
22396: PPUSH
22397: CALL_OW 461
22401: PUSH
22402: LD_INT 7
22404: NONEQUAL
22405: AND
22406: IFFALSE 22410
// continue ;
22408: GO 21858
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22410: LD_ADDR_VAR 0 17
22414: PUSH
22415: LD_VAR 0 17
22419: PPUSH
22420: LD_VAR 0 17
22424: PUSH
22425: LD_INT 1
22427: PLUS
22428: PPUSH
22429: LD_VAR 0 5
22433: PPUSH
22434: CALL_OW 1
22438: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22439: LD_VAR 0 5
22443: PPUSH
22444: CALL_OW 122
// end ; if sold_defenders then
22448: LD_VAR 0 17
22452: IFFALSE 22512
// if i in sold_defenders then
22454: LD_VAR 0 5
22458: PUSH
22459: LD_VAR 0 17
22463: IN
22464: IFFALSE 22512
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 314
22475: NOT
22476: PUSH
22477: LD_VAR 0 5
22481: PPUSH
22482: LD_VAR 0 13
22486: PPUSH
22487: CALL_OW 296
22491: PUSH
22492: LD_INT 30
22494: LESS
22495: AND
22496: IFFALSE 22512
// ComAttackUnit ( i , e ) ;
22498: LD_VAR 0 5
22502: PPUSH
22503: LD_VAR 0 13
22507: PPUSH
22508: CALL_OW 115
// end ; end ; end ;
22512: GO 22515
22514: POP
// if IsDead ( i ) then
22515: LD_VAR 0 5
22519: PPUSH
22520: CALL_OW 301
22524: IFFALSE 22542
// defenders := defenders diff i ;
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_VAR 0 2
22535: PUSH
22536: LD_VAR 0 5
22540: DIFF
22541: ST_TO_ADDR
// end ;
22542: GO 21858
22544: POP
22545: POP
// until not enemy or not defenders ;
22546: LD_VAR 0 3
22550: NOT
22551: PUSH
22552: LD_VAR 0 2
22556: NOT
22557: OR
22558: IFFALSE 21825
// MC_Reset ( base , 18 ) ;
22560: LD_VAR 0 1
22564: PPUSH
22565: LD_INT 18
22567: PPUSH
22568: CALL 66007 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22572: LD_ADDR_VAR 0 2
22576: PUSH
22577: LD_VAR 0 2
22581: PUSH
22582: LD_VAR 0 2
22586: PPUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 25
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 25
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 25
22622: PUSH
22623: LD_INT 9
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PPUSH
22637: CALL_OW 72
22641: DIFF
22642: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22643: LD_VAR 0 3
22647: NOT
22648: PUSH
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: AND
22669: IFFALSE 22931
// begin tmp := FilterByTag ( defenders , 19 ) ;
22671: LD_ADDR_VAR 0 11
22675: PUSH
22676: LD_VAR 0 2
22680: PPUSH
22681: LD_INT 19
22683: PPUSH
22684: CALL 59305 0 2
22688: ST_TO_ADDR
// if tmp then
22689: LD_VAR 0 11
22693: IFFALSE 22763
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22695: LD_ADDR_VAR 0 11
22699: PUSH
22700: LD_VAR 0 11
22704: PPUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 3
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 72
22719: ST_TO_ADDR
// if tmp then
22720: LD_VAR 0 11
22724: IFFALSE 22763
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22726: LD_ADDR_EXP 48
22730: PUSH
22731: LD_EXP 48
22735: PPUSH
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_EXP 48
22745: PUSH
22746: LD_VAR 0 1
22750: ARRAY
22751: PUSH
22752: LD_VAR 0 11
22756: UNION
22757: PPUSH
22758: CALL_OW 1
22762: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: LD_INT 19
22770: PPUSH
22771: CALL 66007 0 2
// repeat wait ( 0 0$1 ) ;
22775: LD_INT 35
22777: PPUSH
22778: CALL_OW 67
// for i in defenders do
22782: LD_ADDR_VAR 0 5
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: FOR_IN
22793: IFFALSE 22882
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22795: LD_VAR 0 5
22799: PPUSH
22800: LD_EXP 60
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: PPUSH
22811: CALL_OW 308
22815: NOT
22816: IFFALSE 22840
// ComMoveToArea ( i , mc_parking [ base ] ) else
22818: LD_VAR 0 5
22822: PPUSH
22823: LD_EXP 60
22827: PUSH
22828: LD_VAR 0 1
22832: ARRAY
22833: PPUSH
22834: CALL_OW 113
22838: GO 22880
// if GetControl ( i ) = control_manual then
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL_OW 263
22849: PUSH
22850: LD_INT 1
22852: EQUAL
22853: IFFALSE 22880
// if IsDrivenBy ( i ) then
22855: LD_VAR 0 5
22859: PPUSH
22860: CALL_OW 311
22864: IFFALSE 22880
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22866: LD_VAR 0 5
22870: PPUSH
22871: CALL_OW 311
22875: PPUSH
22876: CALL_OW 121
// end ;
22880: GO 22792
22882: POP
22883: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_INT 95
22891: PUSH
22892: LD_EXP 60
22896: PUSH
22897: LD_VAR 0 1
22901: ARRAY
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 72
22911: PUSH
22912: LD_VAR 0 2
22916: EQUAL
22917: PUSH
22918: LD_EXP 59
22922: PUSH
22923: LD_VAR 0 1
22927: ARRAY
22928: OR
22929: IFFALSE 22775
// end ; MC_Reset ( base , 20 ) ;
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_INT 20
22938: PPUSH
22939: CALL 66007 0 2
// end ;
22943: LD_VAR 0 4
22947: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
// result := false ;
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_INT 0
22961: ST_TO_ADDR
// side := GetSide ( unit ) ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 255
22976: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22977: LD_ADDR_VAR 0 4
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 248
22991: ST_TO_ADDR
// case nat of 1 :
22992: LD_VAR 0 4
22996: PUSH
22997: LD_INT 1
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23016
23005: POP
// tech := tech_lassight ; 2 :
23006: LD_ADDR_VAR 0 5
23010: PUSH
23011: LD_INT 12
23013: ST_TO_ADDR
23014: GO 23055
23016: LD_INT 2
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23035
23024: POP
// tech := tech_mortar ; 3 :
23025: LD_ADDR_VAR 0 5
23029: PUSH
23030: LD_INT 41
23032: ST_TO_ADDR
23033: GO 23055
23035: LD_INT 3
23037: DOUBLE
23038: EQUAL
23039: IFTRUE 23043
23041: GO 23054
23043: POP
// tech := tech_bazooka ; end ;
23044: LD_ADDR_VAR 0 5
23048: PUSH
23049: LD_INT 44
23051: ST_TO_ADDR
23052: GO 23055
23054: POP
// if Researched ( side , tech ) then
23055: LD_VAR 0 3
23059: PPUSH
23060: LD_VAR 0 5
23064: PPUSH
23065: CALL_OW 325
23069: IFFALSE 23096
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: LD_INT 5
23078: PUSH
23079: LD_INT 8
23081: PUSH
23082: LD_INT 9
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: PUSH
23090: LD_VAR 0 4
23094: ARRAY
23095: ST_TO_ADDR
// end ;
23096: LD_VAR 0 2
23100: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23101: LD_INT 0
23103: PPUSH
23104: PPUSH
23105: PPUSH
// if not mines then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23259
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23115: LD_ADDR_VAR 0 5
23119: PUSH
23120: LD_INT 81
23122: PUSH
23123: LD_VAR 0 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: LD_INT 21
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 69
23157: ST_TO_ADDR
// for i in mines do
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_VAR 0 2
23167: PUSH
23168: FOR_IN
23169: IFFALSE 23257
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23171: LD_VAR 0 4
23175: PUSH
23176: LD_INT 1
23178: ARRAY
23179: PPUSH
23180: LD_VAR 0 4
23184: PUSH
23185: LD_INT 2
23187: ARRAY
23188: PPUSH
23189: CALL_OW 458
23193: NOT
23194: IFFALSE 23198
// continue ;
23196: GO 23168
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23198: LD_VAR 0 4
23202: PUSH
23203: LD_INT 1
23205: ARRAY
23206: PPUSH
23207: LD_VAR 0 4
23211: PUSH
23212: LD_INT 2
23214: ARRAY
23215: PPUSH
23216: CALL_OW 428
23220: PUSH
23221: LD_VAR 0 5
23225: IN
23226: IFFALSE 23255
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23228: LD_VAR 0 4
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: PPUSH
23237: LD_VAR 0 4
23241: PUSH
23242: LD_INT 2
23244: ARRAY
23245: PPUSH
23246: LD_VAR 0 1
23250: PPUSH
23251: CALL_OW 456
// end ;
23255: GO 23168
23257: POP
23258: POP
// end ;
23259: LD_VAR 0 3
23263: RET
// export function Count ( array ) ; var i ; begin
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
// result := 0 ;
23268: LD_ADDR_VAR 0 2
23272: PUSH
23273: LD_INT 0
23275: ST_TO_ADDR
// for i in array do
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_VAR 0 1
23285: PUSH
23286: FOR_IN
23287: IFFALSE 23311
// if i then
23289: LD_VAR 0 3
23293: IFFALSE 23309
// result := result + 1 ;
23295: LD_ADDR_VAR 0 2
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: LD_INT 1
23307: PLUS
23308: ST_TO_ADDR
23309: GO 23286
23311: POP
23312: POP
// end ;
23313: LD_VAR 0 2
23317: RET
// export function IsEmpty ( building ) ; begin
23318: LD_INT 0
23320: PPUSH
// if not building then
23321: LD_VAR 0 1
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23373
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23330: LD_ADDR_VAR 0 2
23334: PUSH
23335: LD_VAR 0 1
23339: PUSH
23340: LD_INT 22
23342: PUSH
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 255
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 58
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: IN
23372: ST_TO_ADDR
// end ;
23373: LD_VAR 0 2
23377: RET
// export function IsNotFull ( building ) ; begin
23378: LD_INT 0
23380: PPUSH
// if not building then
23381: LD_VAR 0 1
23385: NOT
23386: IFFALSE 23390
// exit ;
23388: GO 23409
// result := UnitsInside ( building ) < 6 ;
23390: LD_ADDR_VAR 0 2
23394: PUSH
23395: LD_VAR 0 1
23399: PPUSH
23400: CALL_OW 313
23404: PUSH
23405: LD_INT 6
23407: LESS
23408: ST_TO_ADDR
// end ;
23409: LD_VAR 0 2
23413: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
// tmp := [ ] ;
23420: LD_ADDR_VAR 0 3
23424: PUSH
23425: EMPTY
23426: ST_TO_ADDR
// list := [ ] ;
23427: LD_ADDR_VAR 0 5
23431: PUSH
23432: EMPTY
23433: ST_TO_ADDR
// for i = 16 to 25 do
23434: LD_ADDR_VAR 0 4
23438: PUSH
23439: DOUBLE
23440: LD_INT 16
23442: DEC
23443: ST_TO_ADDR
23444: LD_INT 25
23446: PUSH
23447: FOR_TO
23448: IFFALSE 23521
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_VAR 0 3
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 255
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 91
23479: PUSH
23480: LD_VAR 0 1
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 30
23495: PUSH
23496: LD_VAR 0 4
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: ADD
23518: ST_TO_ADDR
23519: GO 23447
23521: POP
23522: POP
// for i = 1 to tmp do
23523: LD_ADDR_VAR 0 4
23527: PUSH
23528: DOUBLE
23529: LD_INT 1
23531: DEC
23532: ST_TO_ADDR
23533: LD_VAR 0 3
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23627
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23541: LD_ADDR_VAR 0 5
23545: PUSH
23546: LD_VAR 0 5
23550: PUSH
23551: LD_VAR 0 3
23555: PUSH
23556: LD_VAR 0 4
23560: ARRAY
23561: PPUSH
23562: CALL_OW 266
23566: PUSH
23567: LD_VAR 0 3
23571: PUSH
23572: LD_VAR 0 4
23576: ARRAY
23577: PPUSH
23578: CALL_OW 250
23582: PUSH
23583: LD_VAR 0 3
23587: PUSH
23588: LD_VAR 0 4
23592: ARRAY
23593: PPUSH
23594: CALL_OW 251
23598: PUSH
23599: LD_VAR 0 3
23603: PUSH
23604: LD_VAR 0 4
23608: ARRAY
23609: PPUSH
23610: CALL_OW 254
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: PUSH
23621: EMPTY
23622: LIST
23623: ADD
23624: ST_TO_ADDR
23625: GO 23538
23627: POP
23628: POP
// result := list ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_VAR 0 5
23638: ST_TO_ADDR
// end ;
23639: LD_VAR 0 2
23643: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
23651: PPUSH
23652: PPUSH
// if not factory then
23653: LD_VAR 0 1
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 24194
// if control = control_apeman then
23662: LD_VAR 0 4
23666: PUSH
23667: LD_INT 5
23669: EQUAL
23670: IFFALSE 23779
// begin tmp := UnitsInside ( factory ) ;
23672: LD_ADDR_VAR 0 8
23676: PUSH
23677: LD_VAR 0 1
23681: PPUSH
23682: CALL_OW 313
23686: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23687: LD_VAR 0 8
23691: PPUSH
23692: LD_INT 25
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PPUSH
23702: CALL_OW 72
23706: NOT
23707: IFFALSE 23717
// control := control_manual ;
23709: LD_ADDR_VAR 0 4
23713: PUSH
23714: LD_INT 1
23716: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23717: LD_ADDR_VAR 0 8
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL 23414 0 1
23731: ST_TO_ADDR
// if tmp then
23732: LD_VAR 0 8
23736: IFFALSE 23779
// begin for i in tmp do
23738: LD_ADDR_VAR 0 7
23742: PUSH
23743: LD_VAR 0 8
23747: PUSH
23748: FOR_IN
23749: IFFALSE 23777
// if i [ 1 ] = b_ext_radar then
23751: LD_VAR 0 7
23755: PUSH
23756: LD_INT 1
23758: ARRAY
23759: PUSH
23760: LD_INT 20
23762: EQUAL
23763: IFFALSE 23775
// begin control := control_remote ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_INT 2
23772: ST_TO_ADDR
// break ;
23773: GO 23777
// end ;
23775: GO 23748
23777: POP
23778: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 2
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: LD_VAR 0 4
23798: PPUSH
23799: LD_VAR 0 5
23803: PPUSH
23804: CALL_OW 448
23808: IFFALSE 23843
// begin result := [ chassis , engine , control , weapon ] ;
23810: LD_ADDR_VAR 0 6
23814: PUSH
23815: LD_VAR 0 2
23819: PUSH
23820: LD_VAR 0 3
23824: PUSH
23825: LD_VAR 0 4
23829: PUSH
23830: LD_VAR 0 5
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
// exit ;
23841: GO 24194
// end ; _chassis := AvailableChassisList ( factory ) ;
23843: LD_ADDR_VAR 0 9
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 475
23857: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23858: LD_ADDR_VAR 0 11
23862: PUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 476
23872: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23873: LD_ADDR_VAR 0 12
23877: PUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 477
23887: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23888: LD_ADDR_VAR 0 10
23892: PUSH
23893: LD_VAR 0 1
23897: PPUSH
23898: CALL_OW 478
23902: ST_TO_ADDR
// if not chassis in _chassis then
23903: LD_VAR 0 2
23907: PUSH
23908: LD_VAR 0 9
23912: IN
23913: NOT
23914: IFFALSE 23940
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23916: LD_ADDR_VAR 0 2
23920: PUSH
23921: LD_VAR 0 9
23925: PUSH
23926: LD_INT 1
23928: PPUSH
23929: LD_VAR 0 9
23933: PPUSH
23934: CALL_OW 12
23938: ARRAY
23939: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_VAR 0 3
23949: PPUSH
23950: CALL 24199 0 2
23954: NOT
23955: IFFALSE 24014
// repeat engine := _engine [ 1 ] ;
23957: LD_ADDR_VAR 0 3
23961: PUSH
23962: LD_VAR 0 11
23966: PUSH
23967: LD_INT 1
23969: ARRAY
23970: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23971: LD_ADDR_VAR 0 11
23975: PUSH
23976: LD_VAR 0 11
23980: PPUSH
23981: LD_INT 1
23983: PPUSH
23984: CALL_OW 3
23988: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: CALL 24199 0 2
24003: PUSH
24004: LD_VAR 0 11
24008: PUSH
24009: EMPTY
24010: EQUAL
24011: OR
24012: IFFALSE 23957
// if not control in _control then
24014: LD_VAR 0 4
24018: PUSH
24019: LD_VAR 0 12
24023: IN
24024: NOT
24025: IFFALSE 24051
// control := _control [ rand ( 1 , _control ) ] ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_VAR 0 12
24036: PUSH
24037: LD_INT 1
24039: PPUSH
24040: LD_VAR 0 12
24044: PPUSH
24045: CALL_OW 12
24049: ARRAY
24050: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: CALL 24419 0 2
24065: NOT
24066: IFFALSE 24125
// repeat weapon := _weapon [ 1 ] ;
24068: LD_ADDR_VAR 0 5
24072: PUSH
24073: LD_VAR 0 10
24077: PUSH
24078: LD_INT 1
24080: ARRAY
24081: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24082: LD_ADDR_VAR 0 10
24086: PUSH
24087: LD_VAR 0 10
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: CALL_OW 3
24099: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24100: LD_VAR 0 2
24104: PPUSH
24105: LD_VAR 0 5
24109: PPUSH
24110: CALL 24419 0 2
24114: PUSH
24115: LD_VAR 0 10
24119: PUSH
24120: EMPTY
24121: EQUAL
24122: OR
24123: IFFALSE 24068
// result := [ ] ;
24125: LD_ADDR_VAR 0 6
24129: PUSH
24130: EMPTY
24131: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24132: LD_VAR 0 1
24136: PPUSH
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_VAR 0 4
24151: PPUSH
24152: LD_VAR 0 5
24156: PPUSH
24157: CALL_OW 448
24161: IFFALSE 24194
// result := [ chassis , engine , control , weapon ] ;
24163: LD_ADDR_VAR 0 6
24167: PUSH
24168: LD_VAR 0 2
24172: PUSH
24173: LD_VAR 0 3
24177: PUSH
24178: LD_VAR 0 4
24182: PUSH
24183: LD_VAR 0 5
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: ST_TO_ADDR
// end ;
24194: LD_VAR 0 6
24198: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24199: LD_INT 0
24201: PPUSH
// if not chassis or not engine then
24202: LD_VAR 0 1
24206: NOT
24207: PUSH
24208: LD_VAR 0 2
24212: NOT
24213: OR
24214: IFFALSE 24218
// exit ;
24216: GO 24414
// case engine of engine_solar :
24218: LD_VAR 0 2
24222: PUSH
24223: LD_INT 2
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24269
24231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24232: LD_ADDR_VAR 0 3
24236: PUSH
24237: LD_INT 11
24239: PUSH
24240: LD_INT 12
24242: PUSH
24243: LD_INT 13
24245: PUSH
24246: LD_INT 14
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 24398
24269: LD_INT 1
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24339
24277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_INT 11
24285: PUSH
24286: LD_INT 12
24288: PUSH
24289: LD_INT 13
24291: PUSH
24292: LD_INT 14
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: LD_INT 4
24306: PUSH
24307: LD_INT 5
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 23
24315: PUSH
24316: LD_INT 22
24318: PUSH
24319: LD_INT 24
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: ST_TO_ADDR
24337: GO 24398
24339: LD_INT 3
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24397
24347: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_INT 13
24355: PUSH
24356: LD_INT 14
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: LD_INT 4
24367: PUSH
24368: LD_INT 5
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_INT 23
24379: PUSH
24380: LD_INT 24
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
24395: GO 24398
24397: POP
// result := ( chassis in result ) ;
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_VAR 0 1
24407: PUSH
24408: LD_VAR 0 3
24412: IN
24413: ST_TO_ADDR
// end ;
24414: LD_VAR 0 3
24418: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24419: LD_INT 0
24421: PPUSH
// if not chassis or not weapon then
24422: LD_VAR 0 1
24426: NOT
24427: PUSH
24428: LD_VAR 0 2
24432: NOT
24433: OR
24434: IFFALSE 24438
// exit ;
24436: GO 25464
// case weapon of us_machine_gun :
24438: LD_VAR 0 2
24442: PUSH
24443: LD_INT 2
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24481
24451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: ST_TO_ADDR
24479: GO 25448
24481: LD_INT 3
24483: DOUBLE
24484: EQUAL
24485: IFTRUE 24489
24487: GO 24519
24489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 4
24506: PUSH
24507: LD_INT 5
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 25448
24519: LD_INT 11
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24557
24527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24528: LD_ADDR_VAR 0 3
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: LD_INT 5
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 25448
24557: LD_INT 4
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24591
24565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24566: LD_ADDR_VAR 0 3
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: LD_INT 4
24579: PUSH
24580: LD_INT 5
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
24589: GO 25448
24591: LD_INT 5
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24625
24599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 4
24613: PUSH
24614: LD_INT 5
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
24623: GO 25448
24625: LD_INT 9
24627: DOUBLE
24628: EQUAL
24629: IFTRUE 24633
24631: GO 24659
24633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24634: LD_ADDR_VAR 0 3
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: LD_INT 4
24647: PUSH
24648: LD_INT 5
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: ST_TO_ADDR
24657: GO 25448
24659: LD_INT 7
24661: DOUBLE
24662: EQUAL
24663: IFTRUE 24667
24665: GO 24693
24667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: ST_TO_ADDR
24691: GO 25448
24693: LD_INT 12
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24727
24701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: LD_INT 5
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: ST_TO_ADDR
24725: GO 25448
24727: LD_INT 13
24729: DOUBLE
24730: EQUAL
24731: IFTRUE 24735
24733: GO 24761
24735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: ST_TO_ADDR
24759: GO 25448
24761: LD_INT 14
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24787
24769: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24770: LD_ADDR_VAR 0 3
24774: PUSH
24775: LD_INT 4
24777: PUSH
24778: LD_INT 5
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: ST_TO_ADDR
24785: GO 25448
24787: LD_INT 6
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24813
24795: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_INT 4
24803: PUSH
24804: LD_INT 5
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: ST_TO_ADDR
24811: GO 25448
24813: LD_INT 10
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24839
24821: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24822: LD_ADDR_VAR 0 3
24826: PUSH
24827: LD_INT 4
24829: PUSH
24830: LD_INT 5
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: ST_TO_ADDR
24837: GO 25448
24839: LD_INT 22
24841: DOUBLE
24842: EQUAL
24843: IFTRUE 24847
24845: GO 24873
24847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24848: LD_ADDR_VAR 0 3
24852: PUSH
24853: LD_INT 11
24855: PUSH
24856: LD_INT 12
24858: PUSH
24859: LD_INT 13
24861: PUSH
24862: LD_INT 14
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: ST_TO_ADDR
24871: GO 25448
24873: LD_INT 23
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24881
24879: GO 24907
24881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_INT 11
24889: PUSH
24890: LD_INT 12
24892: PUSH
24893: LD_INT 13
24895: PUSH
24896: LD_INT 14
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25448
24907: LD_INT 24
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24941
24915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_INT 11
24923: PUSH
24924: LD_INT 12
24926: PUSH
24927: LD_INT 13
24929: PUSH
24930: LD_INT 14
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25448
24941: LD_INT 30
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 24975
24949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_INT 11
24957: PUSH
24958: LD_INT 12
24960: PUSH
24961: LD_INT 13
24963: PUSH
24964: LD_INT 14
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
24973: GO 25448
24975: LD_INT 25
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25001
24983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 13
24991: PUSH
24992: LD_INT 14
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: ST_TO_ADDR
24999: GO 25448
25001: LD_INT 27
25003: DOUBLE
25004: EQUAL
25005: IFTRUE 25009
25007: GO 25027
25009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: LD_INT 13
25017: PUSH
25018: LD_INT 14
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: ST_TO_ADDR
25025: GO 25448
25027: LD_INT 28
25029: DOUBLE
25030: EQUAL
25031: IFTRUE 25035
25033: GO 25053
25035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 13
25043: PUSH
25044: LD_INT 14
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: ST_TO_ADDR
25051: GO 25448
25053: LD_INT 29
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25079
25061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25062: LD_ADDR_VAR 0 3
25066: PUSH
25067: LD_INT 13
25069: PUSH
25070: LD_INT 14
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: ST_TO_ADDR
25077: GO 25448
25079: LD_INT 31
25081: DOUBLE
25082: EQUAL
25083: IFTRUE 25087
25085: GO 25105
25087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: LD_INT 13
25095: PUSH
25096: LD_INT 14
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 25448
25105: LD_INT 26
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25131
25113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 13
25121: PUSH
25122: LD_INT 14
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: ST_TO_ADDR
25129: GO 25448
25131: LD_INT 42
25133: DOUBLE
25134: EQUAL
25135: IFTRUE 25139
25137: GO 25165
25139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 22
25150: PUSH
25151: LD_INT 23
25153: PUSH
25154: LD_INT 24
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: ST_TO_ADDR
25163: GO 25448
25165: LD_INT 43
25167: DOUBLE
25168: EQUAL
25169: IFTRUE 25173
25171: GO 25199
25173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: LD_INT 21
25181: PUSH
25182: LD_INT 22
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: ST_TO_ADDR
25197: GO 25448
25199: LD_INT 44
25201: DOUBLE
25202: EQUAL
25203: IFTRUE 25207
25205: GO 25233
25207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 21
25215: PUSH
25216: LD_INT 22
25218: PUSH
25219: LD_INT 23
25221: PUSH
25222: LD_INT 24
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: ST_TO_ADDR
25231: GO 25448
25233: LD_INT 45
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25267
25241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25242: LD_ADDR_VAR 0 3
25246: PUSH
25247: LD_INT 21
25249: PUSH
25250: LD_INT 22
25252: PUSH
25253: LD_INT 23
25255: PUSH
25256: LD_INT 24
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
25265: GO 25448
25267: LD_INT 49
25269: DOUBLE
25270: EQUAL
25271: IFTRUE 25275
25273: GO 25301
25275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 21
25283: PUSH
25284: LD_INT 22
25286: PUSH
25287: LD_INT 23
25289: PUSH
25290: LD_INT 24
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
25299: GO 25448
25301: LD_INT 51
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25335
25309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_INT 21
25317: PUSH
25318: LD_INT 22
25320: PUSH
25321: LD_INT 23
25323: PUSH
25324: LD_INT 24
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: ST_TO_ADDR
25333: GO 25448
25335: LD_INT 52
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25369
25343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25344: LD_ADDR_VAR 0 3
25348: PUSH
25349: LD_INT 21
25351: PUSH
25352: LD_INT 22
25354: PUSH
25355: LD_INT 23
25357: PUSH
25358: LD_INT 24
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
25367: GO 25448
25369: LD_INT 53
25371: DOUBLE
25372: EQUAL
25373: IFTRUE 25377
25375: GO 25395
25377: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25378: LD_ADDR_VAR 0 3
25382: PUSH
25383: LD_INT 23
25385: PUSH
25386: LD_INT 24
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: ST_TO_ADDR
25393: GO 25448
25395: LD_INT 46
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25421
25403: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 23
25411: PUSH
25412: LD_INT 24
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: ST_TO_ADDR
25419: GO 25448
25421: LD_INT 47
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25447
25429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 23
25437: PUSH
25438: LD_INT 24
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: ST_TO_ADDR
25445: GO 25448
25447: POP
// result := ( chassis in result ) ;
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_VAR 0 1
25457: PUSH
25458: LD_VAR 0 3
25462: IN
25463: ST_TO_ADDR
// end ;
25464: LD_VAR 0 3
25468: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25469: LD_INT 0
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
// result := array ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 1
25487: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25488: LD_VAR 0 1
25492: NOT
25493: PUSH
25494: LD_VAR 0 2
25498: NOT
25499: OR
25500: PUSH
25501: LD_VAR 0 3
25505: NOT
25506: OR
25507: PUSH
25508: LD_VAR 0 2
25512: PUSH
25513: LD_VAR 0 1
25517: GREATER
25518: OR
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: LD_VAR 0 1
25529: GREATER
25530: OR
25531: IFFALSE 25535
// exit ;
25533: GO 25831
// if direction then
25535: LD_VAR 0 4
25539: IFFALSE 25603
// begin d := 1 ;
25541: LD_ADDR_VAR 0 9
25545: PUSH
25546: LD_INT 1
25548: ST_TO_ADDR
// if i_from > i_to then
25549: LD_VAR 0 2
25553: PUSH
25554: LD_VAR 0 3
25558: GREATER
25559: IFFALSE 25585
// length := ( array - i_from ) + i_to else
25561: LD_ADDR_VAR 0 11
25565: PUSH
25566: LD_VAR 0 1
25570: PUSH
25571: LD_VAR 0 2
25575: MINUS
25576: PUSH
25577: LD_VAR 0 3
25581: PLUS
25582: ST_TO_ADDR
25583: GO 25601
// length := i_to - i_from ;
25585: LD_ADDR_VAR 0 11
25589: PUSH
25590: LD_VAR 0 3
25594: PUSH
25595: LD_VAR 0 2
25599: MINUS
25600: ST_TO_ADDR
// end else
25601: GO 25664
// begin d := - 1 ;
25603: LD_ADDR_VAR 0 9
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: ST_TO_ADDR
// if i_from > i_to then
25612: LD_VAR 0 2
25616: PUSH
25617: LD_VAR 0 3
25621: GREATER
25622: IFFALSE 25642
// length := i_from - i_to else
25624: LD_ADDR_VAR 0 11
25628: PUSH
25629: LD_VAR 0 2
25633: PUSH
25634: LD_VAR 0 3
25638: MINUS
25639: ST_TO_ADDR
25640: GO 25664
// length := ( array - i_to ) + i_from ;
25642: LD_ADDR_VAR 0 11
25646: PUSH
25647: LD_VAR 0 1
25651: PUSH
25652: LD_VAR 0 3
25656: MINUS
25657: PUSH
25658: LD_VAR 0 2
25662: PLUS
25663: ST_TO_ADDR
// end ; if not length then
25664: LD_VAR 0 11
25668: NOT
25669: IFFALSE 25673
// exit ;
25671: GO 25831
// tmp := array ;
25673: LD_ADDR_VAR 0 10
25677: PUSH
25678: LD_VAR 0 1
25682: ST_TO_ADDR
// for i = 1 to length do
25683: LD_ADDR_VAR 0 6
25687: PUSH
25688: DOUBLE
25689: LD_INT 1
25691: DEC
25692: ST_TO_ADDR
25693: LD_VAR 0 11
25697: PUSH
25698: FOR_TO
25699: IFFALSE 25819
// begin for j = 1 to array do
25701: LD_ADDR_VAR 0 7
25705: PUSH
25706: DOUBLE
25707: LD_INT 1
25709: DEC
25710: ST_TO_ADDR
25711: LD_VAR 0 1
25715: PUSH
25716: FOR_TO
25717: IFFALSE 25805
// begin k := j + d ;
25719: LD_ADDR_VAR 0 8
25723: PUSH
25724: LD_VAR 0 7
25728: PUSH
25729: LD_VAR 0 9
25733: PLUS
25734: ST_TO_ADDR
// if k > array then
25735: LD_VAR 0 8
25739: PUSH
25740: LD_VAR 0 1
25744: GREATER
25745: IFFALSE 25755
// k := 1 ;
25747: LD_ADDR_VAR 0 8
25751: PUSH
25752: LD_INT 1
25754: ST_TO_ADDR
// if not k then
25755: LD_VAR 0 8
25759: NOT
25760: IFFALSE 25772
// k := array ;
25762: LD_ADDR_VAR 0 8
25766: PUSH
25767: LD_VAR 0 1
25771: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25772: LD_ADDR_VAR 0 10
25776: PUSH
25777: LD_VAR 0 10
25781: PPUSH
25782: LD_VAR 0 8
25786: PPUSH
25787: LD_VAR 0 1
25791: PUSH
25792: LD_VAR 0 7
25796: ARRAY
25797: PPUSH
25798: CALL_OW 1
25802: ST_TO_ADDR
// end ;
25803: GO 25716
25805: POP
25806: POP
// array := tmp ;
25807: LD_ADDR_VAR 0 1
25811: PUSH
25812: LD_VAR 0 10
25816: ST_TO_ADDR
// end ;
25817: GO 25698
25819: POP
25820: POP
// result := array ;
25821: LD_ADDR_VAR 0 5
25825: PUSH
25826: LD_VAR 0 1
25830: ST_TO_ADDR
// end ;
25831: LD_VAR 0 5
25835: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25836: LD_INT 0
25838: PPUSH
25839: PPUSH
// result := 0 ;
25840: LD_ADDR_VAR 0 3
25844: PUSH
25845: LD_INT 0
25847: ST_TO_ADDR
// if not array or not value in array then
25848: LD_VAR 0 1
25852: NOT
25853: PUSH
25854: LD_VAR 0 2
25858: PUSH
25859: LD_VAR 0 1
25863: IN
25864: NOT
25865: OR
25866: IFFALSE 25870
// exit ;
25868: GO 25924
// for i = 1 to array do
25870: LD_ADDR_VAR 0 4
25874: PUSH
25875: DOUBLE
25876: LD_INT 1
25878: DEC
25879: ST_TO_ADDR
25880: LD_VAR 0 1
25884: PUSH
25885: FOR_TO
25886: IFFALSE 25922
// if value = array [ i ] then
25888: LD_VAR 0 2
25892: PUSH
25893: LD_VAR 0 1
25897: PUSH
25898: LD_VAR 0 4
25902: ARRAY
25903: EQUAL
25904: IFFALSE 25920
// begin result := i ;
25906: LD_ADDR_VAR 0 3
25910: PUSH
25911: LD_VAR 0 4
25915: ST_TO_ADDR
// exit ;
25916: POP
25917: POP
25918: GO 25924
// end ;
25920: GO 25885
25922: POP
25923: POP
// end ;
25924: LD_VAR 0 3
25928: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25929: LD_INT 0
25931: PPUSH
// vc_chassis := chassis ;
25932: LD_ADDR_OWVAR 37
25936: PUSH
25937: LD_VAR 0 1
25941: ST_TO_ADDR
// vc_engine := engine ;
25942: LD_ADDR_OWVAR 39
25946: PUSH
25947: LD_VAR 0 2
25951: ST_TO_ADDR
// vc_control := control ;
25952: LD_ADDR_OWVAR 38
25956: PUSH
25957: LD_VAR 0 3
25961: ST_TO_ADDR
// vc_weapon := weapon ;
25962: LD_ADDR_OWVAR 40
25966: PUSH
25967: LD_VAR 0 4
25971: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25972: LD_ADDR_OWVAR 41
25976: PUSH
25977: LD_VAR 0 5
25981: ST_TO_ADDR
// end ;
25982: LD_VAR 0 6
25986: RET
// export function WantPlant ( unit ) ; var task ; begin
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
// result := false ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 437
26013: ST_TO_ADDR
// if task then
26014: LD_VAR 0 3
26018: IFFALSE 26046
// if task [ 1 ] [ 1 ] = p then
26020: LD_VAR 0 3
26024: PUSH
26025: LD_INT 1
26027: ARRAY
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: PUSH
26033: LD_STRING p
26035: EQUAL
26036: IFFALSE 26046
// result := true ;
26038: LD_ADDR_VAR 0 2
26042: PUSH
26043: LD_INT 1
26045: ST_TO_ADDR
// end ;
26046: LD_VAR 0 2
26050: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26051: LD_INT 0
26053: PPUSH
26054: PPUSH
26055: PPUSH
26056: PPUSH
// if pos < 1 then
26057: LD_VAR 0 2
26061: PUSH
26062: LD_INT 1
26064: LESS
26065: IFFALSE 26069
// exit ;
26067: GO 26372
// if pos = 1 then
26069: LD_VAR 0 2
26073: PUSH
26074: LD_INT 1
26076: EQUAL
26077: IFFALSE 26110
// result := Replace ( arr , pos [ 1 ] , value ) else
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
26108: GO 26372
// begin tmp := arr ;
26110: LD_ADDR_VAR 0 6
26114: PUSH
26115: LD_VAR 0 1
26119: ST_TO_ADDR
// s_arr := [ tmp ] ;
26120: LD_ADDR_VAR 0 7
26124: PUSH
26125: LD_VAR 0 6
26129: PUSH
26130: EMPTY
26131: LIST
26132: ST_TO_ADDR
// for i = 1 to pos - 1 do
26133: LD_ADDR_VAR 0 5
26137: PUSH
26138: DOUBLE
26139: LD_INT 1
26141: DEC
26142: ST_TO_ADDR
26143: LD_VAR 0 2
26147: PUSH
26148: LD_INT 1
26150: MINUS
26151: PUSH
26152: FOR_TO
26153: IFFALSE 26198
// begin tmp := tmp [ pos [ i ] ] ;
26155: LD_ADDR_VAR 0 6
26159: PUSH
26160: LD_VAR 0 6
26164: PUSH
26165: LD_VAR 0 2
26169: PUSH
26170: LD_VAR 0 5
26174: ARRAY
26175: ARRAY
26176: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26177: LD_ADDR_VAR 0 7
26181: PUSH
26182: LD_VAR 0 7
26186: PUSH
26187: LD_VAR 0 6
26191: PUSH
26192: EMPTY
26193: LIST
26194: ADD
26195: ST_TO_ADDR
// end ;
26196: GO 26152
26198: POP
26199: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26200: LD_ADDR_VAR 0 6
26204: PUSH
26205: LD_VAR 0 6
26209: PPUSH
26210: LD_VAR 0 2
26214: PUSH
26215: LD_VAR 0 2
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 3
26225: PPUSH
26226: CALL_OW 1
26230: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26231: LD_ADDR_VAR 0 7
26235: PUSH
26236: LD_VAR 0 7
26240: PPUSH
26241: LD_VAR 0 7
26245: PPUSH
26246: LD_VAR 0 6
26250: PPUSH
26251: CALL_OW 1
26255: ST_TO_ADDR
// for i = s_arr downto 2 do
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: DOUBLE
26262: LD_VAR 0 7
26266: INC
26267: ST_TO_ADDR
26268: LD_INT 2
26270: PUSH
26271: FOR_DOWNTO
26272: IFFALSE 26356
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26274: LD_ADDR_VAR 0 6
26278: PUSH
26279: LD_VAR 0 7
26283: PUSH
26284: LD_VAR 0 5
26288: PUSH
26289: LD_INT 1
26291: MINUS
26292: ARRAY
26293: PPUSH
26294: LD_VAR 0 2
26298: PUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_INT 1
26306: MINUS
26307: ARRAY
26308: PPUSH
26309: LD_VAR 0 7
26313: PUSH
26314: LD_VAR 0 5
26318: ARRAY
26319: PPUSH
26320: CALL_OW 1
26324: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26325: LD_ADDR_VAR 0 7
26329: PUSH
26330: LD_VAR 0 7
26334: PPUSH
26335: LD_VAR 0 5
26339: PUSH
26340: LD_INT 1
26342: MINUS
26343: PPUSH
26344: LD_VAR 0 6
26348: PPUSH
26349: CALL_OW 1
26353: ST_TO_ADDR
// end ;
26354: GO 26271
26356: POP
26357: POP
// result := s_arr [ 1 ] ;
26358: LD_ADDR_VAR 0 4
26362: PUSH
26363: LD_VAR 0 7
26367: PUSH
26368: LD_INT 1
26370: ARRAY
26371: ST_TO_ADDR
// end ; end ;
26372: LD_VAR 0 4
26376: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26377: LD_INT 0
26379: PPUSH
26380: PPUSH
// if not list then
26381: LD_VAR 0 1
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26481
// i := list [ pos1 ] ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 1
26399: PUSH
26400: LD_VAR 0 2
26404: ARRAY
26405: ST_TO_ADDR
// if not i then
26406: LD_VAR 0 5
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26481
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26415: LD_ADDR_VAR 0 1
26419: PUSH
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_VAR 0 1
26434: PUSH
26435: LD_VAR 0 3
26439: ARRAY
26440: PPUSH
26441: CALL_OW 1
26445: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_VAR 0 3
26460: PPUSH
26461: LD_VAR 0 5
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// result := list ;
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: LD_VAR 0 1
26480: ST_TO_ADDR
// end ;
26481: LD_VAR 0 4
26485: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26486: LD_INT 0
26488: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26489: LD_ADDR_VAR 0 5
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 250
26503: PPUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 251
26513: PPUSH
26514: LD_VAR 0 2
26518: PPUSH
26519: LD_VAR 0 3
26523: PPUSH
26524: LD_VAR 0 4
26528: PPUSH
26529: CALL 26539 0 5
26533: ST_TO_ADDR
// end ;
26534: LD_VAR 0 5
26538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
// if not list then
26545: LD_VAR 0 3
26549: NOT
26550: IFFALSE 26554
// exit ;
26552: GO 26942
// result := [ ] ;
26554: LD_ADDR_VAR 0 6
26558: PUSH
26559: EMPTY
26560: ST_TO_ADDR
// for i in list do
26561: LD_ADDR_VAR 0 7
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: FOR_IN
26572: IFFALSE 26774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26574: LD_ADDR_VAR 0 9
26578: PUSH
26579: LD_VAR 0 7
26583: PPUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: CALL_OW 297
26598: ST_TO_ADDR
// if not result then
26599: LD_VAR 0 6
26603: NOT
26604: IFFALSE 26630
// result := [ [ i , tmp ] ] else
26606: LD_ADDR_VAR 0 6
26610: PUSH
26611: LD_VAR 0 7
26615: PUSH
26616: LD_VAR 0 9
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: ST_TO_ADDR
26628: GO 26772
// begin if result [ result ] [ 2 ] < tmp then
26630: LD_VAR 0 6
26634: PUSH
26635: LD_VAR 0 6
26639: ARRAY
26640: PUSH
26641: LD_INT 2
26643: ARRAY
26644: PUSH
26645: LD_VAR 0 9
26649: LESS
26650: IFFALSE 26692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26652: LD_ADDR_VAR 0 6
26656: PUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: LD_VAR 0 6
26666: PUSH
26667: LD_INT 1
26669: PLUS
26670: PPUSH
26671: LD_VAR 0 7
26675: PUSH
26676: LD_VAR 0 9
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 2
26689: ST_TO_ADDR
26690: GO 26772
// for j = 1 to result do
26692: LD_ADDR_VAR 0 8
26696: PUSH
26697: DOUBLE
26698: LD_INT 1
26700: DEC
26701: ST_TO_ADDR
26702: LD_VAR 0 6
26706: PUSH
26707: FOR_TO
26708: IFFALSE 26770
// begin if tmp < result [ j ] [ 2 ] then
26710: LD_VAR 0 9
26714: PUSH
26715: LD_VAR 0 6
26719: PUSH
26720: LD_VAR 0 8
26724: ARRAY
26725: PUSH
26726: LD_INT 2
26728: ARRAY
26729: LESS
26730: IFFALSE 26768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 8
26746: PPUSH
26747: LD_VAR 0 7
26751: PUSH
26752: LD_VAR 0 9
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PPUSH
26761: CALL_OW 2
26765: ST_TO_ADDR
// break ;
26766: GO 26770
// end ; end ;
26768: GO 26707
26770: POP
26771: POP
// end ; end ;
26772: GO 26571
26774: POP
26775: POP
// if result and not asc then
26776: LD_VAR 0 6
26780: PUSH
26781: LD_VAR 0 4
26785: NOT
26786: AND
26787: IFFALSE 26862
// begin tmp := result ;
26789: LD_ADDR_VAR 0 9
26793: PUSH
26794: LD_VAR 0 6
26798: ST_TO_ADDR
// for i = tmp downto 1 do
26799: LD_ADDR_VAR 0 7
26803: PUSH
26804: DOUBLE
26805: LD_VAR 0 9
26809: INC
26810: ST_TO_ADDR
26811: LD_INT 1
26813: PUSH
26814: FOR_DOWNTO
26815: IFFALSE 26860
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26817: LD_ADDR_VAR 0 6
26821: PUSH
26822: LD_VAR 0 6
26826: PPUSH
26827: LD_VAR 0 9
26831: PUSH
26832: LD_VAR 0 7
26836: MINUS
26837: PUSH
26838: LD_INT 1
26840: PLUS
26841: PPUSH
26842: LD_VAR 0 9
26846: PUSH
26847: LD_VAR 0 7
26851: ARRAY
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
26858: GO 26814
26860: POP
26861: POP
// end ; tmp := [ ] ;
26862: LD_ADDR_VAR 0 9
26866: PUSH
26867: EMPTY
26868: ST_TO_ADDR
// if mode then
26869: LD_VAR 0 5
26873: IFFALSE 26942
// begin for i = 1 to result do
26875: LD_ADDR_VAR 0 7
26879: PUSH
26880: DOUBLE
26881: LD_INT 1
26883: DEC
26884: ST_TO_ADDR
26885: LD_VAR 0 6
26889: PUSH
26890: FOR_TO
26891: IFFALSE 26930
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26893: LD_ADDR_VAR 0 9
26897: PUSH
26898: LD_VAR 0 9
26902: PPUSH
26903: LD_VAR 0 7
26907: PPUSH
26908: LD_VAR 0 6
26912: PUSH
26913: LD_VAR 0 7
26917: ARRAY
26918: PUSH
26919: LD_INT 1
26921: ARRAY
26922: PPUSH
26923: CALL_OW 1
26927: ST_TO_ADDR
26928: GO 26890
26930: POP
26931: POP
// result := tmp ;
26932: LD_ADDR_VAR 0 6
26936: PUSH
26937: LD_VAR 0 9
26941: ST_TO_ADDR
// end ; end ;
26942: LD_VAR 0 6
26946: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26947: LD_INT 0
26949: PPUSH
26950: PPUSH
26951: PPUSH
26952: PPUSH
26953: PPUSH
26954: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26955: LD_ADDR_VAR 0 5
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// if not x or not y then
26977: LD_VAR 0 2
26981: NOT
26982: PUSH
26983: LD_VAR 0 3
26987: NOT
26988: OR
26989: IFFALSE 26993
// exit ;
26991: GO 28639
// if not range then
26993: LD_VAR 0 4
26997: NOT
26998: IFFALSE 27008
// range := 10 ;
27000: LD_ADDR_VAR 0 4
27004: PUSH
27005: LD_INT 10
27007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_INT 81
27015: PUSH
27016: LD_VAR 0 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 92
27027: PUSH
27028: LD_VAR 0 2
27032: PUSH
27033: LD_VAR 0 3
27037: PUSH
27038: LD_VAR 0 4
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: LD_INT 21
27054: PUSH
27055: LD_INT 3
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if not tmp then
27076: LD_VAR 0 8
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 28639
// for i in tmp do
27085: LD_ADDR_VAR 0 6
27089: PUSH
27090: LD_VAR 0 8
27094: PUSH
27095: FOR_IN
27096: IFFALSE 28614
// begin points := [ 0 , 0 , 0 ] ;
27098: LD_ADDR_VAR 0 9
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// bpoints := 1 ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_INT 1
27124: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27125: LD_VAR 0 6
27129: PPUSH
27130: CALL_OW 247
27134: PUSH
27135: LD_INT 1
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27721
27143: POP
// begin if GetClass ( i ) = 1 then
27144: LD_VAR 0 6
27148: PPUSH
27149: CALL_OW 257
27153: PUSH
27154: LD_INT 1
27156: EQUAL
27157: IFFALSE 27178
// points := [ 10 , 5 , 3 ] ;
27159: LD_ADDR_VAR 0 9
27163: PUSH
27164: LD_INT 10
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27178: LD_VAR 0 6
27182: PPUSH
27183: CALL_OW 257
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: LD_INT 4
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: IN
27202: IFFALSE 27223
// points := [ 3 , 2 , 1 ] ;
27204: LD_ADDR_VAR 0 9
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27223: LD_VAR 0 6
27227: PPUSH
27228: CALL_OW 257
27232: PUSH
27233: LD_INT 5
27235: EQUAL
27236: IFFALSE 27257
// points := [ 130 , 5 , 2 ] ;
27238: LD_ADDR_VAR 0 9
27242: PUSH
27243: LD_INT 130
27245: PUSH
27246: LD_INT 5
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27257: LD_VAR 0 6
27261: PPUSH
27262: CALL_OW 257
27266: PUSH
27267: LD_INT 8
27269: EQUAL
27270: IFFALSE 27291
// points := [ 35 , 35 , 30 ] ;
27272: LD_ADDR_VAR 0 9
27276: PUSH
27277: LD_INT 35
27279: PUSH
27280: LD_INT 35
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27291: LD_VAR 0 6
27295: PPUSH
27296: CALL_OW 257
27300: PUSH
27301: LD_INT 9
27303: EQUAL
27304: IFFALSE 27325
// points := [ 20 , 55 , 40 ] ;
27306: LD_ADDR_VAR 0 9
27310: PUSH
27311: LD_INT 20
27313: PUSH
27314: LD_INT 55
27316: PUSH
27317: LD_INT 40
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27325: LD_VAR 0 6
27329: PPUSH
27330: CALL_OW 257
27334: PUSH
27335: LD_INT 12
27337: PUSH
27338: LD_INT 16
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: IN
27345: IFFALSE 27366
// points := [ 5 , 3 , 2 ] ;
27347: LD_ADDR_VAR 0 9
27351: PUSH
27352: LD_INT 5
27354: PUSH
27355: LD_INT 3
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 257
27375: PUSH
27376: LD_INT 17
27378: EQUAL
27379: IFFALSE 27400
// points := [ 100 , 50 , 75 ] ;
27381: LD_ADDR_VAR 0 9
27385: PUSH
27386: LD_INT 100
27388: PUSH
27389: LD_INT 50
27391: PUSH
27392: LD_INT 75
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27400: LD_VAR 0 6
27404: PPUSH
27405: CALL_OW 257
27409: PUSH
27410: LD_INT 15
27412: EQUAL
27413: IFFALSE 27434
// points := [ 10 , 5 , 3 ] ;
27415: LD_ADDR_VAR 0 9
27419: PUSH
27420: LD_INT 10
27422: PUSH
27423: LD_INT 5
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27434: LD_VAR 0 6
27438: PPUSH
27439: CALL_OW 257
27443: PUSH
27444: LD_INT 14
27446: EQUAL
27447: IFFALSE 27468
// points := [ 10 , 0 , 0 ] ;
27449: LD_ADDR_VAR 0 9
27453: PUSH
27454: LD_INT 10
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27468: LD_VAR 0 6
27472: PPUSH
27473: CALL_OW 257
27477: PUSH
27478: LD_INT 11
27480: EQUAL
27481: IFFALSE 27502
// points := [ 30 , 10 , 5 ] ;
27483: LD_ADDR_VAR 0 9
27487: PUSH
27488: LD_INT 30
27490: PUSH
27491: LD_INT 10
27493: PUSH
27494: LD_INT 5
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27502: LD_VAR 0 1
27506: PPUSH
27507: LD_INT 5
27509: PPUSH
27510: CALL_OW 321
27514: PUSH
27515: LD_INT 2
27517: EQUAL
27518: IFFALSE 27535
// bpoints := bpoints * 1.8 ;
27520: LD_ADDR_VAR 0 10
27524: PUSH
27525: LD_VAR 0 10
27529: PUSH
27530: LD_REAL  1.80000000000000E+0000
27533: MUL
27534: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 257
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 4
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: IN
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_INT 51
27571: PPUSH
27572: CALL_OW 321
27576: PUSH
27577: LD_INT 2
27579: EQUAL
27580: AND
27581: IFFALSE 27598
// bpoints := bpoints * 1.2 ;
27583: LD_ADDR_VAR 0 10
27587: PUSH
27588: LD_VAR 0 10
27592: PUSH
27593: LD_REAL  1.20000000000000E+0000
27596: MUL
27597: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 257
27607: PUSH
27608: LD_INT 5
27610: PUSH
27611: LD_INT 7
27613: PUSH
27614: LD_INT 9
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: IN
27622: PUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_INT 52
27630: PPUSH
27631: CALL_OW 321
27635: PUSH
27636: LD_INT 2
27638: EQUAL
27639: AND
27640: IFFALSE 27657
// bpoints := bpoints * 1.5 ;
27642: LD_ADDR_VAR 0 10
27646: PUSH
27647: LD_VAR 0 10
27651: PUSH
27652: LD_REAL  1.50000000000000E+0000
27655: MUL
27656: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_INT 66
27664: PPUSH
27665: CALL_OW 321
27669: PUSH
27670: LD_INT 2
27672: EQUAL
27673: IFFALSE 27690
// bpoints := bpoints * 1.1 ;
27675: LD_ADDR_VAR 0 10
27679: PUSH
27680: LD_VAR 0 10
27684: PUSH
27685: LD_REAL  1.10000000000000E+0000
27688: MUL
27689: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27690: LD_ADDR_VAR 0 10
27694: PUSH
27695: LD_VAR 0 10
27699: PUSH
27700: LD_VAR 0 6
27704: PPUSH
27705: LD_INT 1
27707: PPUSH
27708: CALL_OW 259
27712: PUSH
27713: LD_REAL  1.15000000000000E+0000
27716: MUL
27717: MUL
27718: ST_TO_ADDR
// end ; unit_vehicle :
27719: GO 28543
27721: LD_INT 2
27723: DOUBLE
27724: EQUAL
27725: IFTRUE 27729
27727: GO 28531
27729: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 264
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: LD_INT 42
27745: PUSH
27746: LD_INT 24
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: IN
27754: IFFALSE 27775
// points := [ 25 , 5 , 3 ] ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_INT 25
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27775: LD_VAR 0 6
27779: PPUSH
27780: CALL_OW 264
27784: PUSH
27785: LD_INT 4
27787: PUSH
27788: LD_INT 43
27790: PUSH
27791: LD_INT 25
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: IN
27799: IFFALSE 27820
// points := [ 40 , 15 , 5 ] ;
27801: LD_ADDR_VAR 0 9
27805: PUSH
27806: LD_INT 40
27808: PUSH
27809: LD_INT 15
27811: PUSH
27812: LD_INT 5
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27820: LD_VAR 0 6
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 23
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: IN
27840: IFFALSE 27861
// points := [ 7 , 25 , 8 ] ;
27842: LD_ADDR_VAR 0 9
27846: PUSH
27847: LD_INT 7
27849: PUSH
27850: LD_INT 25
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27861: LD_VAR 0 6
27865: PPUSH
27866: CALL_OW 264
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: LD_INT 27
27876: PUSH
27877: LD_INT 44
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: IN
27885: IFFALSE 27906
// points := [ 14 , 50 , 16 ] ;
27887: LD_ADDR_VAR 0 9
27891: PUSH
27892: LD_INT 14
27894: PUSH
27895: LD_INT 50
27897: PUSH
27898: LD_INT 16
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27906: LD_VAR 0 6
27910: PPUSH
27911: CALL_OW 264
27915: PUSH
27916: LD_INT 6
27918: PUSH
27919: LD_INT 46
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: IN
27926: IFFALSE 27947
// points := [ 32 , 120 , 70 ] ;
27928: LD_ADDR_VAR 0 9
27932: PUSH
27933: LD_INT 32
27935: PUSH
27936: LD_INT 120
27938: PUSH
27939: LD_INT 70
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27947: LD_VAR 0 6
27951: PPUSH
27952: CALL_OW 264
27956: PUSH
27957: LD_INT 7
27959: PUSH
27960: LD_INT 28
27962: PUSH
27963: LD_INT 45
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: IN
27971: IFFALSE 27992
// points := [ 35 , 20 , 45 ] ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_INT 35
27980: PUSH
27981: LD_INT 20
27983: PUSH
27984: LD_INT 45
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27992: LD_VAR 0 6
27996: PPUSH
27997: CALL_OW 264
28001: PUSH
28002: LD_INT 47
28004: PUSH
28005: EMPTY
28006: LIST
28007: IN
28008: IFFALSE 28029
// points := [ 67 , 45 , 75 ] ;
28010: LD_ADDR_VAR 0 9
28014: PUSH
28015: LD_INT 67
28017: PUSH
28018: LD_INT 45
28020: PUSH
28021: LD_INT 75
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28029: LD_VAR 0 6
28033: PPUSH
28034: CALL_OW 264
28038: PUSH
28039: LD_INT 26
28041: PUSH
28042: EMPTY
28043: LIST
28044: IN
28045: IFFALSE 28066
// points := [ 120 , 30 , 80 ] ;
28047: LD_ADDR_VAR 0 9
28051: PUSH
28052: LD_INT 120
28054: PUSH
28055: LD_INT 30
28057: PUSH
28058: LD_INT 80
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28066: LD_VAR 0 6
28070: PPUSH
28071: CALL_OW 264
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: EMPTY
28080: LIST
28081: IN
28082: IFFALSE 28103
// points := [ 40 , 1 , 1 ] ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_INT 40
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28103: LD_VAR 0 6
28107: PPUSH
28108: CALL_OW 264
28112: PUSH
28113: LD_INT 29
28115: PUSH
28116: EMPTY
28117: LIST
28118: IN
28119: IFFALSE 28140
// points := [ 70 , 200 , 400 ] ;
28121: LD_ADDR_VAR 0 9
28125: PUSH
28126: LD_INT 70
28128: PUSH
28129: LD_INT 200
28131: PUSH
28132: LD_INT 400
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28140: LD_VAR 0 6
28144: PPUSH
28145: CALL_OW 264
28149: PUSH
28150: LD_INT 14
28152: PUSH
28153: LD_INT 53
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: IN
28160: IFFALSE 28181
// points := [ 40 , 10 , 20 ] ;
28162: LD_ADDR_VAR 0 9
28166: PUSH
28167: LD_INT 40
28169: PUSH
28170: LD_INT 10
28172: PUSH
28173: LD_INT 20
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28181: LD_VAR 0 6
28185: PPUSH
28186: CALL_OW 264
28190: PUSH
28191: LD_INT 9
28193: PUSH
28194: EMPTY
28195: LIST
28196: IN
28197: IFFALSE 28218
// points := [ 5 , 70 , 20 ] ;
28199: LD_ADDR_VAR 0 9
28203: PUSH
28204: LD_INT 5
28206: PUSH
28207: LD_INT 70
28209: PUSH
28210: LD_INT 20
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28218: LD_VAR 0 6
28222: PPUSH
28223: CALL_OW 264
28227: PUSH
28228: LD_INT 10
28230: PUSH
28231: EMPTY
28232: LIST
28233: IN
28234: IFFALSE 28255
// points := [ 35 , 110 , 70 ] ;
28236: LD_ADDR_VAR 0 9
28240: PUSH
28241: LD_INT 35
28243: PUSH
28244: LD_INT 110
28246: PUSH
28247: LD_INT 70
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28255: LD_VAR 0 6
28259: PPUSH
28260: CALL_OW 265
28264: PUSH
28265: LD_INT 25
28267: EQUAL
28268: IFFALSE 28289
// points := [ 80 , 65 , 100 ] ;
28270: LD_ADDR_VAR 0 9
28274: PUSH
28275: LD_INT 80
28277: PUSH
28278: LD_INT 65
28280: PUSH
28281: LD_INT 100
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28289: LD_VAR 0 6
28293: PPUSH
28294: CALL_OW 263
28298: PUSH
28299: LD_INT 1
28301: EQUAL
28302: IFFALSE 28337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28304: LD_ADDR_VAR 0 10
28308: PUSH
28309: LD_VAR 0 10
28313: PUSH
28314: LD_VAR 0 6
28318: PPUSH
28319: CALL_OW 311
28323: PPUSH
28324: LD_INT 3
28326: PPUSH
28327: CALL_OW 259
28331: PUSH
28332: LD_INT 4
28334: MUL
28335: MUL
28336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28337: LD_VAR 0 6
28341: PPUSH
28342: CALL_OW 263
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: IFFALSE 28401
// begin j := IsControledBy ( i ) ;
28352: LD_ADDR_VAR 0 7
28356: PUSH
28357: LD_VAR 0 6
28361: PPUSH
28362: CALL_OW 312
28366: ST_TO_ADDR
// if j then
28367: LD_VAR 0 7
28371: IFFALSE 28401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28373: LD_ADDR_VAR 0 10
28377: PUSH
28378: LD_VAR 0 10
28382: PUSH
28383: LD_VAR 0 7
28387: PPUSH
28388: LD_INT 3
28390: PPUSH
28391: CALL_OW 259
28395: PUSH
28396: LD_INT 3
28398: MUL
28399: MUL
28400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28401: LD_VAR 0 6
28405: PPUSH
28406: CALL_OW 264
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: LD_INT 6
28416: PUSH
28417: LD_INT 46
28419: PUSH
28420: LD_INT 44
28422: PUSH
28423: LD_INT 47
28425: PUSH
28426: LD_INT 45
28428: PUSH
28429: LD_INT 28
28431: PUSH
28432: LD_INT 7
28434: PUSH
28435: LD_INT 27
28437: PUSH
28438: LD_INT 29
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: IN
28453: PUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: LD_INT 52
28461: PPUSH
28462: CALL_OW 321
28466: PUSH
28467: LD_INT 2
28469: EQUAL
28470: AND
28471: IFFALSE 28488
// bpoints := bpoints * 1.2 ;
28473: LD_ADDR_VAR 0 10
28477: PUSH
28478: LD_VAR 0 10
28482: PUSH
28483: LD_REAL  1.20000000000000E+0000
28486: MUL
28487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 6
28500: PUSH
28501: LD_INT 46
28503: PUSH
28504: LD_INT 47
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: IN
28512: IFFALSE 28529
// bpoints := bpoints * 1.2 ;
28514: LD_ADDR_VAR 0 10
28518: PUSH
28519: LD_VAR 0 10
28523: PUSH
28524: LD_REAL  1.20000000000000E+0000
28527: MUL
28528: ST_TO_ADDR
// end ; unit_building :
28529: GO 28543
28531: LD_INT 3
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28542
28539: POP
// ; end ;
28540: GO 28543
28542: POP
// for j = 1 to 3 do
28543: LD_ADDR_VAR 0 7
28547: PUSH
28548: DOUBLE
28549: LD_INT 1
28551: DEC
28552: ST_TO_ADDR
28553: LD_INT 3
28555: PUSH
28556: FOR_TO
28557: IFFALSE 28610
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28559: LD_ADDR_VAR 0 5
28563: PUSH
28564: LD_VAR 0 5
28568: PPUSH
28569: LD_VAR 0 7
28573: PPUSH
28574: LD_VAR 0 5
28578: PUSH
28579: LD_VAR 0 7
28583: ARRAY
28584: PUSH
28585: LD_VAR 0 9
28589: PUSH
28590: LD_VAR 0 7
28594: ARRAY
28595: PUSH
28596: LD_VAR 0 10
28600: MUL
28601: PLUS
28602: PPUSH
28603: CALL_OW 1
28607: ST_TO_ADDR
28608: GO 28556
28610: POP
28611: POP
// end ;
28612: GO 27095
28614: POP
28615: POP
// result := Replace ( result , 4 , tmp ) ;
28616: LD_ADDR_VAR 0 5
28620: PUSH
28621: LD_VAR 0 5
28625: PPUSH
28626: LD_INT 4
28628: PPUSH
28629: LD_VAR 0 8
28633: PPUSH
28634: CALL_OW 1
28638: ST_TO_ADDR
// end ;
28639: LD_VAR 0 5
28643: RET
// export function DangerAtRange ( unit , range ) ; begin
28644: LD_INT 0
28646: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 255
28661: PPUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 250
28671: PPUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 251
28681: PPUSH
28682: LD_VAR 0 2
28686: PPUSH
28687: CALL 26947 0 4
28691: ST_TO_ADDR
// end ;
28692: LD_VAR 0 3
28696: RET
// export function DangerInArea ( side , area ) ; begin
28697: LD_INT 0
28699: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28700: LD_ADDR_VAR 0 3
28704: PUSH
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_INT 81
28712: PUSH
28713: LD_VAR 0 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 70
28726: ST_TO_ADDR
// end ;
28727: LD_VAR 0 3
28731: RET
// export function IsExtension ( b ) ; begin
28732: LD_INT 0
28734: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_VAR 0 1
28744: PUSH
28745: LD_INT 23
28747: PUSH
28748: LD_INT 20
28750: PUSH
28751: LD_INT 22
28753: PUSH
28754: LD_INT 17
28756: PUSH
28757: LD_INT 24
28759: PUSH
28760: LD_INT 21
28762: PUSH
28763: LD_INT 19
28765: PUSH
28766: LD_INT 16
28768: PUSH
28769: LD_INT 25
28771: PUSH
28772: LD_INT 18
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: IN
28787: ST_TO_ADDR
// end ;
28788: LD_VAR 0 2
28792: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
// result := [ ] ;
28798: LD_ADDR_VAR 0 3
28802: PUSH
28803: EMPTY
28804: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28805: LD_ADDR_VAR 0 4
28809: PUSH
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 21
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PPUSH
28825: CALL_OW 70
28829: ST_TO_ADDR
// if not tmp then
28830: LD_VAR 0 4
28834: NOT
28835: IFFALSE 28839
// exit ;
28837: GO 28897
// for i in tmp do
28839: LD_ADDR_VAR 0 5
28843: PUSH
28844: LD_VAR 0 4
28848: PUSH
28849: FOR_IN
28850: IFFALSE 28885
// if GetBase ( i ) <> base then
28852: LD_VAR 0 5
28856: PPUSH
28857: CALL_OW 274
28861: PUSH
28862: LD_VAR 0 1
28866: NONEQUAL
28867: IFFALSE 28883
// ComLinkToBase ( base , i ) ;
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_VAR 0 5
28878: PPUSH
28879: CALL_OW 169
28883: GO 28849
28885: POP
28886: POP
// result := tmp ;
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_VAR 0 4
28896: ST_TO_ADDR
// end ;
28897: LD_VAR 0 3
28901: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
// if BuildingStatus ( b ) = bs_build then
28906: LD_VAR 0 2
28910: PPUSH
28911: CALL_OW 461
28915: PUSH
28916: LD_INT 1
28918: EQUAL
28919: IFFALSE 28979
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28921: LD_VAR 0 1
28925: PPUSH
28926: LD_STRING h
28928: PUSH
28929: LD_VAR 0 2
28933: PPUSH
28934: CALL_OW 250
28938: PUSH
28939: LD_VAR 0 2
28943: PPUSH
28944: CALL_OW 251
28948: PUSH
28949: LD_VAR 0 2
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: PPUSH
28975: CALL_OW 446
// end ;
28979: LD_VAR 0 3
28983: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28984: LD_INT 0
28986: PPUSH
28987: PPUSH
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28992: LD_VAR 0 1
28996: NOT
28997: PUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 263
29007: PUSH
29008: LD_INT 2
29010: EQUAL
29011: NOT
29012: OR
29013: IFFALSE 29017
// exit ;
29015: GO 29333
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29017: LD_ADDR_VAR 0 6
29021: PUSH
29022: LD_INT 22
29024: PUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 255
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: LD_INT 36
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 34
29054: PUSH
29055: LD_INT 31
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 69
29075: ST_TO_ADDR
// if not tmp then
29076: LD_VAR 0 6
29080: NOT
29081: IFFALSE 29085
// exit ;
29083: GO 29333
// result := [ ] ;
29085: LD_ADDR_VAR 0 2
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// for i in tmp do
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_VAR 0 6
29101: PUSH
29102: FOR_IN
29103: IFFALSE 29174
// begin t := UnitsInside ( i ) ;
29105: LD_ADDR_VAR 0 4
29109: PUSH
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 313
29119: ST_TO_ADDR
// if t then
29120: LD_VAR 0 4
29124: IFFALSE 29172
// for j in t do
29126: LD_ADDR_VAR 0 7
29130: PUSH
29131: LD_VAR 0 4
29135: PUSH
29136: FOR_IN
29137: IFFALSE 29170
// result := Insert ( result , result + 1 , j ) ;
29139: LD_ADDR_VAR 0 2
29143: PUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: LD_VAR 0 2
29153: PUSH
29154: LD_INT 1
29156: PLUS
29157: PPUSH
29158: LD_VAR 0 7
29162: PPUSH
29163: CALL_OW 2
29167: ST_TO_ADDR
29168: GO 29136
29170: POP
29171: POP
// end ;
29172: GO 29102
29174: POP
29175: POP
// if not result then
29176: LD_VAR 0 2
29180: NOT
29181: IFFALSE 29185
// exit ;
29183: GO 29333
// mech := result [ 1 ] ;
29185: LD_ADDR_VAR 0 5
29189: PUSH
29190: LD_VAR 0 2
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: ST_TO_ADDR
// if result > 1 then
29199: LD_VAR 0 2
29203: PUSH
29204: LD_INT 1
29206: GREATER
29207: IFFALSE 29319
// for i = 2 to result do
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: DOUBLE
29215: LD_INT 2
29217: DEC
29218: ST_TO_ADDR
29219: LD_VAR 0 2
29223: PUSH
29224: FOR_TO
29225: IFFALSE 29317
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_VAR 0 2
29236: PUSH
29237: LD_VAR 0 3
29241: ARRAY
29242: PPUSH
29243: LD_INT 3
29245: PPUSH
29246: CALL_OW 259
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: LD_VAR 0 3
29260: ARRAY
29261: PPUSH
29262: CALL_OW 432
29266: MINUS
29267: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29268: LD_VAR 0 4
29272: PUSH
29273: LD_VAR 0 5
29277: PPUSH
29278: LD_INT 3
29280: PPUSH
29281: CALL_OW 259
29285: PUSH
29286: LD_VAR 0 5
29290: PPUSH
29291: CALL_OW 432
29295: MINUS
29296: GREATEREQUAL
29297: IFFALSE 29315
// mech := result [ i ] ;
29299: LD_ADDR_VAR 0 5
29303: PUSH
29304: LD_VAR 0 2
29308: PUSH
29309: LD_VAR 0 3
29313: ARRAY
29314: ST_TO_ADDR
// end ;
29315: GO 29224
29317: POP
29318: POP
// ComLinkTo ( vehicle , mech ) ;
29319: LD_VAR 0 1
29323: PPUSH
29324: LD_VAR 0 5
29328: PPUSH
29329: CALL_OW 135
// end ;
29333: LD_VAR 0 2
29337: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
// result := [ ] ;
29353: LD_ADDR_VAR 0 7
29357: PUSH
29358: EMPTY
29359: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 266
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: IN
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 31016
// if name then
29385: LD_VAR 0 3
29389: IFFALSE 29405
// SetBName ( base_dep , name ) ;
29391: LD_VAR 0 1
29395: PPUSH
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 500
// base := GetBase ( base_dep ) ;
29405: LD_ADDR_VAR 0 15
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 274
29419: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29420: LD_ADDR_VAR 0 16
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 255
29434: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29435: LD_ADDR_VAR 0 17
29439: PUSH
29440: LD_VAR 0 1
29444: PPUSH
29445: CALL_OW 248
29449: ST_TO_ADDR
// if sources then
29450: LD_VAR 0 5
29454: IFFALSE 29501
// for i = 1 to 3 do
29456: LD_ADDR_VAR 0 8
29460: PUSH
29461: DOUBLE
29462: LD_INT 1
29464: DEC
29465: ST_TO_ADDR
29466: LD_INT 3
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29499
// AddResourceType ( base , i , sources [ i ] ) ;
29472: LD_VAR 0 15
29476: PPUSH
29477: LD_VAR 0 8
29481: PPUSH
29482: LD_VAR 0 5
29486: PUSH
29487: LD_VAR 0 8
29491: ARRAY
29492: PPUSH
29493: CALL_OW 276
29497: GO 29469
29499: POP
29500: POP
// buildings := GetBaseBuildings ( base , area ) ;
29501: LD_ADDR_VAR 0 18
29505: PUSH
29506: LD_VAR 0 15
29510: PPUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: CALL 28793 0 2
29520: ST_TO_ADDR
// InitHc ;
29521: CALL_OW 19
// InitUc ;
29525: CALL_OW 18
// uc_side := side ;
29529: LD_ADDR_OWVAR 20
29533: PUSH
29534: LD_VAR 0 16
29538: ST_TO_ADDR
// uc_nation := nation ;
29539: LD_ADDR_OWVAR 21
29543: PUSH
29544: LD_VAR 0 17
29548: ST_TO_ADDR
// if buildings then
29549: LD_VAR 0 18
29553: IFFALSE 30875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29555: LD_ADDR_VAR 0 19
29559: PUSH
29560: LD_VAR 0 18
29564: PPUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_INT 29
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: LD_INT 30
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 72
29597: ST_TO_ADDR
// if tmp then
29598: LD_VAR 0 19
29602: IFFALSE 29650
// for i in tmp do
29604: LD_ADDR_VAR 0 8
29608: PUSH
29609: LD_VAR 0 19
29613: PUSH
29614: FOR_IN
29615: IFFALSE 29648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29617: LD_VAR 0 8
29621: PPUSH
29622: CALL_OW 250
29626: PPUSH
29627: LD_VAR 0 8
29631: PPUSH
29632: CALL_OW 251
29636: PPUSH
29637: LD_VAR 0 16
29641: PPUSH
29642: CALL_OW 441
29646: GO 29614
29648: POP
29649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29650: LD_VAR 0 18
29654: PPUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 30
29660: PUSH
29661: LD_INT 32
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 30
29670: PUSH
29671: LD_INT 33
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 72
29687: IFFALSE 29775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29689: LD_ADDR_VAR 0 8
29693: PUSH
29694: LD_VAR 0 18
29698: PPUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 32
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 33
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: PPUSH
29727: CALL_OW 72
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29773
// begin if not GetBWeapon ( i ) then
29735: LD_VAR 0 8
29739: PPUSH
29740: CALL_OW 269
29744: NOT
29745: IFFALSE 29771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29747: LD_VAR 0 8
29751: PPUSH
29752: LD_VAR 0 8
29756: PPUSH
29757: LD_VAR 0 2
29761: PPUSH
29762: CALL 31021 0 2
29766: PPUSH
29767: CALL_OW 431
// end ;
29771: GO 29732
29773: POP
29774: POP
// end ; for i = 1 to personel do
29775: LD_ADDR_VAR 0 8
29779: PUSH
29780: DOUBLE
29781: LD_INT 1
29783: DEC
29784: ST_TO_ADDR
29785: LD_VAR 0 6
29789: PUSH
29790: FOR_TO
29791: IFFALSE 30855
// begin if i > 4 then
29793: LD_VAR 0 8
29797: PUSH
29798: LD_INT 4
29800: GREATER
29801: IFFALSE 29805
// break ;
29803: GO 30855
// case i of 1 :
29805: LD_VAR 0 8
29809: PUSH
29810: LD_INT 1
29812: DOUBLE
29813: EQUAL
29814: IFTRUE 29818
29816: GO 29898
29818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29819: LD_ADDR_VAR 0 12
29823: PUSH
29824: LD_VAR 0 18
29828: PPUSH
29829: LD_INT 22
29831: PUSH
29832: LD_VAR 0 16
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 58
29843: PUSH
29844: EMPTY
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 30
29852: PUSH
29853: LD_INT 32
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 30
29862: PUSH
29863: LD_INT 4
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 30
29872: PUSH
29873: LD_INT 5
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: PPUSH
29891: CALL_OW 72
29895: ST_TO_ADDR
29896: GO 30120
29898: LD_INT 2
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29968
29906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29907: LD_ADDR_VAR 0 12
29911: PUSH
29912: LD_VAR 0 18
29916: PPUSH
29917: LD_INT 22
29919: PUSH
29920: LD_VAR 0 16
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 30
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 30
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PPUSH
29961: CALL_OW 72
29965: ST_TO_ADDR
29966: GO 30120
29968: LD_INT 3
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 30038
29976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29977: LD_ADDR_VAR 0 12
29981: PUSH
29982: LD_VAR 0 18
29986: PPUSH
29987: LD_INT 22
29989: PUSH
29990: LD_VAR 0 16
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 30
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 30
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 72
30035: ST_TO_ADDR
30036: GO 30120
30038: LD_INT 4
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30119
30046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30047: LD_ADDR_VAR 0 12
30051: PUSH
30052: LD_VAR 0 18
30056: PPUSH
30057: LD_INT 22
30059: PUSH
30060: LD_VAR 0 16
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 30
30074: PUSH
30075: LD_INT 6
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 30
30084: PUSH
30085: LD_INT 7
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 8
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PPUSH
30112: CALL_OW 72
30116: ST_TO_ADDR
30117: GO 30120
30119: POP
// if i = 1 then
30120: LD_VAR 0 8
30124: PUSH
30125: LD_INT 1
30127: EQUAL
30128: IFFALSE 30239
// begin tmp := [ ] ;
30130: LD_ADDR_VAR 0 19
30134: PUSH
30135: EMPTY
30136: ST_TO_ADDR
// for j in f do
30137: LD_ADDR_VAR 0 9
30141: PUSH
30142: LD_VAR 0 12
30146: PUSH
30147: FOR_IN
30148: IFFALSE 30221
// if GetBType ( j ) = b_bunker then
30150: LD_VAR 0 9
30154: PPUSH
30155: CALL_OW 266
30159: PUSH
30160: LD_INT 32
30162: EQUAL
30163: IFFALSE 30190
// tmp := Insert ( tmp , 1 , j ) else
30165: LD_ADDR_VAR 0 19
30169: PUSH
30170: LD_VAR 0 19
30174: PPUSH
30175: LD_INT 1
30177: PPUSH
30178: LD_VAR 0 9
30182: PPUSH
30183: CALL_OW 2
30187: ST_TO_ADDR
30188: GO 30219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30190: LD_ADDR_VAR 0 19
30194: PUSH
30195: LD_VAR 0 19
30199: PPUSH
30200: LD_VAR 0 19
30204: PUSH
30205: LD_INT 1
30207: PLUS
30208: PPUSH
30209: LD_VAR 0 9
30213: PPUSH
30214: CALL_OW 2
30218: ST_TO_ADDR
30219: GO 30147
30221: POP
30222: POP
// if tmp then
30223: LD_VAR 0 19
30227: IFFALSE 30239
// f := tmp ;
30229: LD_ADDR_VAR 0 12
30233: PUSH
30234: LD_VAR 0 19
30238: ST_TO_ADDR
// end ; x := personel [ i ] ;
30239: LD_ADDR_VAR 0 13
30243: PUSH
30244: LD_VAR 0 6
30248: PUSH
30249: LD_VAR 0 8
30253: ARRAY
30254: ST_TO_ADDR
// if x = - 1 then
30255: LD_VAR 0 13
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: EQUAL
30264: IFFALSE 30473
// begin for j in f do
30266: LD_ADDR_VAR 0 9
30270: PUSH
30271: LD_VAR 0 12
30275: PUSH
30276: FOR_IN
30277: IFFALSE 30469
// repeat InitHc ;
30279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30283: LD_VAR 0 9
30287: PPUSH
30288: CALL_OW 266
30292: PUSH
30293: LD_INT 5
30295: EQUAL
30296: IFFALSE 30366
// begin if UnitsInside ( j ) < 3 then
30298: LD_VAR 0 9
30302: PPUSH
30303: CALL_OW 313
30307: PUSH
30308: LD_INT 3
30310: LESS
30311: IFFALSE 30347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30313: LD_INT 0
30315: PPUSH
30316: LD_INT 5
30318: PUSH
30319: LD_INT 8
30321: PUSH
30322: LD_INT 9
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: PUSH
30330: LD_VAR 0 17
30334: ARRAY
30335: PPUSH
30336: LD_VAR 0 4
30340: PPUSH
30341: CALL_OW 380
30345: GO 30364
// PrepareHuman ( false , i , skill ) ;
30347: LD_INT 0
30349: PPUSH
30350: LD_VAR 0 8
30354: PPUSH
30355: LD_VAR 0 4
30359: PPUSH
30360: CALL_OW 380
// end else
30364: GO 30383
// PrepareHuman ( false , i , skill ) ;
30366: LD_INT 0
30368: PPUSH
30369: LD_VAR 0 8
30373: PPUSH
30374: LD_VAR 0 4
30378: PPUSH
30379: CALL_OW 380
// un := CreateHuman ;
30383: LD_ADDR_VAR 0 14
30387: PUSH
30388: CALL_OW 44
30392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30393: LD_ADDR_VAR 0 7
30397: PUSH
30398: LD_VAR 0 7
30402: PPUSH
30403: LD_INT 1
30405: PPUSH
30406: LD_VAR 0 14
30410: PPUSH
30411: CALL_OW 2
30415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30416: LD_VAR 0 14
30420: PPUSH
30421: LD_VAR 0 9
30425: PPUSH
30426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30430: LD_VAR 0 9
30434: PPUSH
30435: CALL_OW 313
30439: PUSH
30440: LD_INT 6
30442: EQUAL
30443: PUSH
30444: LD_VAR 0 9
30448: PPUSH
30449: CALL_OW 266
30453: PUSH
30454: LD_INT 32
30456: PUSH
30457: LD_INT 31
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: IN
30464: OR
30465: IFFALSE 30279
30467: GO 30276
30469: POP
30470: POP
// end else
30471: GO 30853
// for j = 1 to x do
30473: LD_ADDR_VAR 0 9
30477: PUSH
30478: DOUBLE
30479: LD_INT 1
30481: DEC
30482: ST_TO_ADDR
30483: LD_VAR 0 13
30487: PUSH
30488: FOR_TO
30489: IFFALSE 30851
// begin InitHc ;
30491: CALL_OW 19
// if not f then
30495: LD_VAR 0 12
30499: NOT
30500: IFFALSE 30589
// begin PrepareHuman ( false , i , skill ) ;
30502: LD_INT 0
30504: PPUSH
30505: LD_VAR 0 8
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: CALL_OW 380
// un := CreateHuman ;
30519: LD_ADDR_VAR 0 14
30523: PUSH
30524: CALL_OW 44
30528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30529: LD_ADDR_VAR 0 7
30533: PUSH
30534: LD_VAR 0 7
30538: PPUSH
30539: LD_INT 1
30541: PPUSH
30542: LD_VAR 0 14
30546: PPUSH
30547: CALL_OW 2
30551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30552: LD_VAR 0 14
30556: PPUSH
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL_OW 250
30566: PPUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 251
30576: PPUSH
30577: LD_INT 10
30579: PPUSH
30580: LD_INT 0
30582: PPUSH
30583: CALL_OW 50
// continue ;
30587: GO 30488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30589: LD_VAR 0 12
30593: PUSH
30594: LD_INT 1
30596: ARRAY
30597: PPUSH
30598: CALL_OW 313
30602: PUSH
30603: LD_VAR 0 12
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PPUSH
30612: CALL_OW 266
30616: PUSH
30617: LD_INT 32
30619: PUSH
30620: LD_INT 31
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: IN
30627: AND
30628: PUSH
30629: LD_VAR 0 12
30633: PUSH
30634: LD_INT 1
30636: ARRAY
30637: PPUSH
30638: CALL_OW 313
30642: PUSH
30643: LD_INT 6
30645: EQUAL
30646: OR
30647: IFFALSE 30667
// f := Delete ( f , 1 ) ;
30649: LD_ADDR_VAR 0 12
30653: PUSH
30654: LD_VAR 0 12
30658: PPUSH
30659: LD_INT 1
30661: PPUSH
30662: CALL_OW 3
30666: ST_TO_ADDR
// if not f then
30667: LD_VAR 0 12
30671: NOT
30672: IFFALSE 30690
// begin x := x + 2 ;
30674: LD_ADDR_VAR 0 13
30678: PUSH
30679: LD_VAR 0 13
30683: PUSH
30684: LD_INT 2
30686: PLUS
30687: ST_TO_ADDR
// continue ;
30688: GO 30488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30690: LD_VAR 0 12
30694: PUSH
30695: LD_INT 1
30697: ARRAY
30698: PPUSH
30699: CALL_OW 266
30703: PUSH
30704: LD_INT 5
30706: EQUAL
30707: IFFALSE 30781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30709: LD_VAR 0 12
30713: PUSH
30714: LD_INT 1
30716: ARRAY
30717: PPUSH
30718: CALL_OW 313
30722: PUSH
30723: LD_INT 3
30725: LESS
30726: IFFALSE 30762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30728: LD_INT 0
30730: PPUSH
30731: LD_INT 5
30733: PUSH
30734: LD_INT 8
30736: PUSH
30737: LD_INT 9
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: LD_VAR 0 17
30749: ARRAY
30750: PPUSH
30751: LD_VAR 0 4
30755: PPUSH
30756: CALL_OW 380
30760: GO 30779
// PrepareHuman ( false , i , skill ) ;
30762: LD_INT 0
30764: PPUSH
30765: LD_VAR 0 8
30769: PPUSH
30770: LD_VAR 0 4
30774: PPUSH
30775: CALL_OW 380
// end else
30779: GO 30798
// PrepareHuman ( false , i , skill ) ;
30781: LD_INT 0
30783: PPUSH
30784: LD_VAR 0 8
30788: PPUSH
30789: LD_VAR 0 4
30793: PPUSH
30794: CALL_OW 380
// un := CreateHuman ;
30798: LD_ADDR_VAR 0 14
30802: PUSH
30803: CALL_OW 44
30807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30808: LD_ADDR_VAR 0 7
30812: PUSH
30813: LD_VAR 0 7
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: LD_VAR 0 14
30825: PPUSH
30826: CALL_OW 2
30830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30831: LD_VAR 0 14
30835: PPUSH
30836: LD_VAR 0 12
30840: PUSH
30841: LD_INT 1
30843: ARRAY
30844: PPUSH
30845: CALL_OW 52
// end ;
30849: GO 30488
30851: POP
30852: POP
// end ;
30853: GO 29790
30855: POP
30856: POP
// result := result ^ buildings ;
30857: LD_ADDR_VAR 0 7
30861: PUSH
30862: LD_VAR 0 7
30866: PUSH
30867: LD_VAR 0 18
30871: ADD
30872: ST_TO_ADDR
// end else
30873: GO 31016
// begin for i = 1 to personel do
30875: LD_ADDR_VAR 0 8
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_VAR 0 6
30889: PUSH
30890: FOR_TO
30891: IFFALSE 31014
// begin if i > 4 then
30893: LD_VAR 0 8
30897: PUSH
30898: LD_INT 4
30900: GREATER
30901: IFFALSE 30905
// break ;
30903: GO 31014
// x := personel [ i ] ;
30905: LD_ADDR_VAR 0 13
30909: PUSH
30910: LD_VAR 0 6
30914: PUSH
30915: LD_VAR 0 8
30919: ARRAY
30920: ST_TO_ADDR
// if x = - 1 then
30921: LD_VAR 0 13
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: EQUAL
30930: IFFALSE 30934
// continue ;
30932: GO 30890
// PrepareHuman ( false , i , skill ) ;
30934: LD_INT 0
30936: PPUSH
30937: LD_VAR 0 8
30941: PPUSH
30942: LD_VAR 0 4
30946: PPUSH
30947: CALL_OW 380
// un := CreateHuman ;
30951: LD_ADDR_VAR 0 14
30955: PUSH
30956: CALL_OW 44
30960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30961: LD_VAR 0 14
30965: PPUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 250
30975: PPUSH
30976: LD_VAR 0 1
30980: PPUSH
30981: CALL_OW 251
30985: PPUSH
30986: LD_INT 10
30988: PPUSH
30989: LD_INT 0
30991: PPUSH
30992: CALL_OW 50
// result := result ^ un ;
30996: LD_ADDR_VAR 0 7
31000: PUSH
31001: LD_VAR 0 7
31005: PUSH
31006: LD_VAR 0 14
31010: ADD
31011: ST_TO_ADDR
// end ;
31012: GO 30890
31014: POP
31015: POP
// end ; end ;
31016: LD_VAR 0 7
31020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31021: LD_INT 0
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
// result := false ;
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 0
31046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31047: LD_VAR 0 1
31051: NOT
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 266
31062: PUSH
31063: LD_INT 32
31065: PUSH
31066: LD_INT 33
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: IN
31073: NOT
31074: OR
31075: IFFALSE 31079
// exit ;
31077: GO 32215
// nat := GetNation ( tower ) ;
31079: LD_ADDR_VAR 0 12
31083: PUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL_OW 248
31093: ST_TO_ADDR
// side := GetSide ( tower ) ;
31094: LD_ADDR_VAR 0 16
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 255
31108: ST_TO_ADDR
// x := GetX ( tower ) ;
31109: LD_ADDR_VAR 0 10
31113: PUSH
31114: LD_VAR 0 1
31118: PPUSH
31119: CALL_OW 250
31123: ST_TO_ADDR
// y := GetY ( tower ) ;
31124: LD_ADDR_VAR 0 11
31128: PUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 251
31138: ST_TO_ADDR
// if not x or not y then
31139: LD_VAR 0 10
31143: NOT
31144: PUSH
31145: LD_VAR 0 11
31149: NOT
31150: OR
31151: IFFALSE 31155
// exit ;
31153: GO 32215
// weapon := 0 ;
31155: LD_ADDR_VAR 0 18
31159: PUSH
31160: LD_INT 0
31162: ST_TO_ADDR
// fac_list := [ ] ;
31163: LD_ADDR_VAR 0 17
31167: PUSH
31168: EMPTY
31169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31170: LD_ADDR_VAR 0 6
31174: PUSH
31175: LD_VAR 0 1
31179: PPUSH
31180: CALL_OW 274
31184: PPUSH
31185: LD_VAR 0 2
31189: PPUSH
31190: CALL 28793 0 2
31194: PPUSH
31195: LD_INT 30
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PPUSH
31205: CALL_OW 72
31209: ST_TO_ADDR
// if not factories then
31210: LD_VAR 0 6
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 32215
// for i in factories do
31219: LD_ADDR_VAR 0 8
31223: PUSH
31224: LD_VAR 0 6
31228: PUSH
31229: FOR_IN
31230: IFFALSE 31255
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31232: LD_ADDR_VAR 0 17
31236: PUSH
31237: LD_VAR 0 17
31241: PUSH
31242: LD_VAR 0 8
31246: PPUSH
31247: CALL_OW 478
31251: UNION
31252: ST_TO_ADDR
31253: GO 31229
31255: POP
31256: POP
// if not fac_list then
31257: LD_VAR 0 17
31261: NOT
31262: IFFALSE 31266
// exit ;
31264: GO 32215
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31266: LD_ADDR_VAR 0 5
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: LD_INT 5
31276: PUSH
31277: LD_INT 9
31279: PUSH
31280: LD_INT 10
31282: PUSH
31283: LD_INT 6
31285: PUSH
31286: LD_INT 7
31288: PUSH
31289: LD_INT 11
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 27
31303: PUSH
31304: LD_INT 28
31306: PUSH
31307: LD_INT 26
31309: PUSH
31310: LD_INT 30
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 43
31321: PUSH
31322: LD_INT 44
31324: PUSH
31325: LD_INT 46
31327: PUSH
31328: LD_INT 45
31330: PUSH
31331: LD_INT 47
31333: PUSH
31334: LD_INT 49
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: PUSH
31350: LD_VAR 0 12
31354: ARRAY
31355: ST_TO_ADDR
// for i in list do
31356: LD_ADDR_VAR 0 8
31360: PUSH
31361: LD_VAR 0 5
31365: PUSH
31366: FOR_IN
31367: IFFALSE 31400
// if not i in fac_list then
31369: LD_VAR 0 8
31373: PUSH
31374: LD_VAR 0 17
31378: IN
31379: NOT
31380: IFFALSE 31398
// list := list diff i ;
31382: LD_ADDR_VAR 0 5
31386: PUSH
31387: LD_VAR 0 5
31391: PUSH
31392: LD_VAR 0 8
31396: DIFF
31397: ST_TO_ADDR
31398: GO 31366
31400: POP
31401: POP
// if not list then
31402: LD_VAR 0 5
31406: NOT
31407: IFFALSE 31411
// exit ;
31409: GO 32215
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31411: LD_VAR 0 12
31415: PUSH
31416: LD_INT 3
31418: EQUAL
31419: PUSH
31420: LD_INT 49
31422: PUSH
31423: LD_VAR 0 5
31427: IN
31428: AND
31429: PUSH
31430: LD_INT 31
31432: PPUSH
31433: LD_VAR 0 16
31437: PPUSH
31438: CALL_OW 321
31442: PUSH
31443: LD_INT 2
31445: EQUAL
31446: AND
31447: IFFALSE 31507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31449: LD_INT 22
31451: PUSH
31452: LD_VAR 0 16
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 35
31463: PUSH
31464: LD_INT 49
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 91
31473: PUSH
31474: LD_VAR 0 1
31478: PUSH
31479: LD_INT 10
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: PPUSH
31492: CALL_OW 69
31496: NOT
31497: IFFALSE 31507
// weapon := ru_time_lapser ;
31499: LD_ADDR_VAR 0 18
31503: PUSH
31504: LD_INT 49
31506: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31507: LD_VAR 0 12
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: IN
31522: PUSH
31523: LD_INT 11
31525: PUSH
31526: LD_VAR 0 5
31530: IN
31531: PUSH
31532: LD_INT 30
31534: PUSH
31535: LD_VAR 0 5
31539: IN
31540: OR
31541: AND
31542: PUSH
31543: LD_INT 6
31545: PPUSH
31546: LD_VAR 0 16
31550: PPUSH
31551: CALL_OW 321
31555: PUSH
31556: LD_INT 2
31558: EQUAL
31559: AND
31560: IFFALSE 31725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31562: LD_INT 22
31564: PUSH
31565: LD_VAR 0 16
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 35
31579: PUSH
31580: LD_INT 11
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 35
31589: PUSH
31590: LD_INT 30
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 91
31604: PUSH
31605: LD_VAR 0 1
31609: PUSH
31610: LD_INT 18
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: PPUSH
31623: CALL_OW 69
31627: NOT
31628: PUSH
31629: LD_INT 22
31631: PUSH
31632: LD_VAR 0 16
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 30
31646: PUSH
31647: LD_INT 32
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 30
31656: PUSH
31657: LD_INT 33
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 91
31671: PUSH
31672: LD_VAR 0 1
31676: PUSH
31677: LD_INT 12
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: PPUSH
31693: CALL_OW 69
31697: PUSH
31698: LD_INT 2
31700: GREATER
31701: AND
31702: IFFALSE 31725
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31704: LD_ADDR_VAR 0 18
31708: PUSH
31709: LD_INT 11
31711: PUSH
31712: LD_INT 30
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_VAR 0 12
31723: ARRAY
31724: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31725: LD_VAR 0 18
31729: NOT
31730: PUSH
31731: LD_INT 40
31733: PPUSH
31734: LD_VAR 0 16
31738: PPUSH
31739: CALL_OW 321
31743: PUSH
31744: LD_INT 2
31746: EQUAL
31747: AND
31748: PUSH
31749: LD_INT 7
31751: PUSH
31752: LD_VAR 0 5
31756: IN
31757: PUSH
31758: LD_INT 28
31760: PUSH
31761: LD_VAR 0 5
31765: IN
31766: OR
31767: PUSH
31768: LD_INT 45
31770: PUSH
31771: LD_VAR 0 5
31775: IN
31776: OR
31777: AND
31778: IFFALSE 32032
// begin hex := GetHexInfo ( x , y ) ;
31780: LD_ADDR_VAR 0 4
31784: PUSH
31785: LD_VAR 0 10
31789: PPUSH
31790: LD_VAR 0 11
31794: PPUSH
31795: CALL_OW 546
31799: ST_TO_ADDR
// if hex [ 1 ] then
31800: LD_VAR 0 4
31804: PUSH
31805: LD_INT 1
31807: ARRAY
31808: IFFALSE 31812
// exit ;
31810: GO 32215
// height := hex [ 2 ] ;
31812: LD_ADDR_VAR 0 15
31816: PUSH
31817: LD_VAR 0 4
31821: PUSH
31822: LD_INT 2
31824: ARRAY
31825: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31826: LD_ADDR_VAR 0 14
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: LD_INT 5
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// for i in tmp do
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_VAR 0 14
31858: PUSH
31859: FOR_IN
31860: IFFALSE 32030
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31862: LD_ADDR_VAR 0 9
31866: PUSH
31867: LD_VAR 0 10
31871: PPUSH
31872: LD_VAR 0 8
31876: PPUSH
31877: LD_INT 5
31879: PPUSH
31880: CALL_OW 272
31884: PUSH
31885: LD_VAR 0 11
31889: PPUSH
31890: LD_VAR 0 8
31894: PPUSH
31895: LD_INT 5
31897: PPUSH
31898: CALL_OW 273
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31907: LD_VAR 0 9
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: LD_VAR 0 9
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: PPUSH
31925: CALL_OW 488
31929: IFFALSE 32028
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31931: LD_ADDR_VAR 0 4
31935: PUSH
31936: LD_VAR 0 9
31940: PUSH
31941: LD_INT 1
31943: ARRAY
31944: PPUSH
31945: LD_VAR 0 9
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: PPUSH
31954: CALL_OW 546
31958: ST_TO_ADDR
// if hex [ 1 ] then
31959: LD_VAR 0 4
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: IFFALSE 31971
// continue ;
31969: GO 31859
// h := hex [ 2 ] ;
31971: LD_ADDR_VAR 0 13
31975: PUSH
31976: LD_VAR 0 4
31980: PUSH
31981: LD_INT 2
31983: ARRAY
31984: ST_TO_ADDR
// if h + 7 < height then
31985: LD_VAR 0 13
31989: PUSH
31990: LD_INT 7
31992: PLUS
31993: PUSH
31994: LD_VAR 0 15
31998: LESS
31999: IFFALSE 32028
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32001: LD_ADDR_VAR 0 18
32005: PUSH
32006: LD_INT 7
32008: PUSH
32009: LD_INT 28
32011: PUSH
32012: LD_INT 45
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: PUSH
32020: LD_VAR 0 12
32024: ARRAY
32025: ST_TO_ADDR
// break ;
32026: GO 32030
// end ; end ; end ;
32028: GO 31859
32030: POP
32031: POP
// end ; if not weapon then
32032: LD_VAR 0 18
32036: NOT
32037: IFFALSE 32097
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32039: LD_ADDR_VAR 0 5
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: LD_INT 11
32051: PUSH
32052: LD_INT 30
32054: PUSH
32055: LD_INT 49
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: DIFF
32063: ST_TO_ADDR
// if not list then
32064: LD_VAR 0 5
32068: NOT
32069: IFFALSE 32073
// exit ;
32071: GO 32215
// weapon := list [ rand ( 1 , list ) ] ;
32073: LD_ADDR_VAR 0 18
32077: PUSH
32078: LD_VAR 0 5
32082: PUSH
32083: LD_INT 1
32085: PPUSH
32086: LD_VAR 0 5
32090: PPUSH
32091: CALL_OW 12
32095: ARRAY
32096: ST_TO_ADDR
// end ; if weapon then
32097: LD_VAR 0 18
32101: IFFALSE 32215
// begin tmp := CostOfWeapon ( weapon ) ;
32103: LD_ADDR_VAR 0 14
32107: PUSH
32108: LD_VAR 0 18
32112: PPUSH
32113: CALL_OW 451
32117: ST_TO_ADDR
// j := GetBase ( tower ) ;
32118: LD_ADDR_VAR 0 9
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 274
32132: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: CALL_OW 275
32145: PUSH
32146: LD_VAR 0 14
32150: PUSH
32151: LD_INT 1
32153: ARRAY
32154: GREATEREQUAL
32155: PUSH
32156: LD_VAR 0 9
32160: PPUSH
32161: LD_INT 2
32163: PPUSH
32164: CALL_OW 275
32168: PUSH
32169: LD_VAR 0 14
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: GREATEREQUAL
32178: AND
32179: PUSH
32180: LD_VAR 0 9
32184: PPUSH
32185: LD_INT 3
32187: PPUSH
32188: CALL_OW 275
32192: PUSH
32193: LD_VAR 0 14
32197: PUSH
32198: LD_INT 3
32200: ARRAY
32201: GREATEREQUAL
32202: AND
32203: IFFALSE 32215
// result := weapon ;
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_VAR 0 18
32214: ST_TO_ADDR
// end ; end ;
32215: LD_VAR 0 3
32219: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32220: LD_INT 0
32222: PPUSH
32223: PPUSH
// result := true ;
32224: LD_ADDR_VAR 0 3
32228: PUSH
32229: LD_INT 1
32231: ST_TO_ADDR
// if array1 = array2 then
32232: LD_VAR 0 1
32236: PUSH
32237: LD_VAR 0 2
32241: EQUAL
32242: IFFALSE 32302
// begin for i = 1 to array1 do
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: DOUBLE
32250: LD_INT 1
32252: DEC
32253: ST_TO_ADDR
32254: LD_VAR 0 1
32258: PUSH
32259: FOR_TO
32260: IFFALSE 32298
// if array1 [ i ] <> array2 [ i ] then
32262: LD_VAR 0 1
32266: PUSH
32267: LD_VAR 0 4
32271: ARRAY
32272: PUSH
32273: LD_VAR 0 2
32277: PUSH
32278: LD_VAR 0 4
32282: ARRAY
32283: NONEQUAL
32284: IFFALSE 32296
// begin result := false ;
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 0
32293: ST_TO_ADDR
// break ;
32294: GO 32298
// end ;
32296: GO 32259
32298: POP
32299: POP
// end else
32300: GO 32310
// result := false ;
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_INT 0
32309: ST_TO_ADDR
// end ;
32310: LD_VAR 0 3
32314: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32315: LD_INT 0
32317: PPUSH
32318: PPUSH
32319: PPUSH
// pom := GetBase ( fac ) ;
32320: LD_ADDR_VAR 0 5
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 274
32334: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32335: LD_ADDR_VAR 0 4
32339: PUSH
32340: LD_VAR 0 2
32344: PUSH
32345: LD_INT 1
32347: ARRAY
32348: PPUSH
32349: LD_VAR 0 2
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: PPUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_INT 3
32365: ARRAY
32366: PPUSH
32367: LD_VAR 0 2
32371: PUSH
32372: LD_INT 4
32374: ARRAY
32375: PPUSH
32376: CALL_OW 449
32380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32381: LD_ADDR_VAR 0 3
32385: PUSH
32386: LD_VAR 0 5
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: CALL_OW 275
32398: PUSH
32399: LD_VAR 0 4
32403: PUSH
32404: LD_INT 1
32406: ARRAY
32407: GREATEREQUAL
32408: PUSH
32409: LD_VAR 0 5
32413: PPUSH
32414: LD_INT 2
32416: PPUSH
32417: CALL_OW 275
32421: PUSH
32422: LD_VAR 0 4
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: GREATEREQUAL
32431: AND
32432: PUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_INT 3
32440: PPUSH
32441: CALL_OW 275
32445: PUSH
32446: LD_VAR 0 4
32450: PUSH
32451: LD_INT 3
32453: ARRAY
32454: GREATEREQUAL
32455: AND
32456: ST_TO_ADDR
// end ;
32457: LD_VAR 0 3
32461: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32462: LD_INT 0
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
// pom := GetBase ( building ) ;
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 274
32482: ST_TO_ADDR
// if not pom then
32483: LD_VAR 0 3
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32662
// btype := GetBType ( building ) ;
32492: LD_ADDR_VAR 0 5
32496: PUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 266
32506: ST_TO_ADDR
// if btype = b_armoury then
32507: LD_VAR 0 5
32511: PUSH
32512: LD_INT 4
32514: EQUAL
32515: IFFALSE 32525
// btype := b_barracks ;
32517: LD_ADDR_VAR 0 5
32521: PUSH
32522: LD_INT 5
32524: ST_TO_ADDR
// if btype = b_depot then
32525: LD_VAR 0 5
32529: PUSH
32530: LD_INT 0
32532: EQUAL
32533: IFFALSE 32543
// btype := b_warehouse ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_INT 1
32542: ST_TO_ADDR
// if btype = b_workshop then
32543: LD_VAR 0 5
32547: PUSH
32548: LD_INT 2
32550: EQUAL
32551: IFFALSE 32561
// btype := b_factory ;
32553: LD_ADDR_VAR 0 5
32557: PUSH
32558: LD_INT 3
32560: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 5
32570: PPUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 248
32580: PPUSH
32581: CALL_OW 450
32585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_VAR 0 3
32595: PPUSH
32596: LD_INT 1
32598: PPUSH
32599: CALL_OW 275
32603: PUSH
32604: LD_VAR 0 4
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: GREATEREQUAL
32613: PUSH
32614: LD_VAR 0 3
32618: PPUSH
32619: LD_INT 2
32621: PPUSH
32622: CALL_OW 275
32626: PUSH
32627: LD_VAR 0 4
32631: PUSH
32632: LD_INT 2
32634: ARRAY
32635: GREATEREQUAL
32636: AND
32637: PUSH
32638: LD_VAR 0 3
32642: PPUSH
32643: LD_INT 3
32645: PPUSH
32646: CALL_OW 275
32650: PUSH
32651: LD_VAR 0 4
32655: PUSH
32656: LD_INT 3
32658: ARRAY
32659: GREATEREQUAL
32660: AND
32661: ST_TO_ADDR
// end ;
32662: LD_VAR 0 2
32666: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32667: LD_INT 0
32669: PPUSH
32670: PPUSH
32671: PPUSH
// pom := GetBase ( building ) ;
32672: LD_ADDR_VAR 0 4
32676: PUSH
32677: LD_VAR 0 1
32681: PPUSH
32682: CALL_OW 274
32686: ST_TO_ADDR
// if not pom then
32687: LD_VAR 0 4
32691: NOT
32692: IFFALSE 32696
// exit ;
32694: GO 32797
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: LD_VAR 0 1
32710: PPUSH
32711: CALL_OW 248
32715: PPUSH
32716: CALL_OW 450
32720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: LD_INT 1
32733: PPUSH
32734: CALL_OW 275
32738: PUSH
32739: LD_VAR 0 5
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: GREATEREQUAL
32748: PUSH
32749: LD_VAR 0 4
32753: PPUSH
32754: LD_INT 2
32756: PPUSH
32757: CALL_OW 275
32761: PUSH
32762: LD_VAR 0 5
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: GREATEREQUAL
32771: AND
32772: PUSH
32773: LD_VAR 0 4
32777: PPUSH
32778: LD_INT 3
32780: PPUSH
32781: CALL_OW 275
32785: PUSH
32786: LD_VAR 0 5
32790: PUSH
32791: LD_INT 3
32793: ARRAY
32794: GREATEREQUAL
32795: AND
32796: ST_TO_ADDR
// end ;
32797: LD_VAR 0 3
32801: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32802: LD_INT 0
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
// result := false ;
32814: LD_ADDR_VAR 0 6
32818: PUSH
32819: LD_INT 0
32821: ST_TO_ADDR
// if not base or not btype or not x or not y then
32822: LD_VAR 0 1
32826: NOT
32827: PUSH
32828: LD_VAR 0 2
32832: NOT
32833: OR
32834: PUSH
32835: LD_VAR 0 3
32839: NOT
32840: OR
32841: PUSH
32842: LD_VAR 0 4
32846: NOT
32847: OR
32848: IFFALSE 32852
// exit ;
32850: GO 33461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32852: LD_ADDR_VAR 0 12
32856: PUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: LD_VAR 0 1
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PPUSH
32886: CALL_OW 248
32890: PPUSH
32891: LD_INT 0
32893: PPUSH
32894: CALL 34298 0 6
32898: ST_TO_ADDR
// if not hexes then
32899: LD_VAR 0 12
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 33461
// for i = 1 to hexes do
32908: LD_ADDR_VAR 0 7
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_VAR 0 12
32922: PUSH
32923: FOR_TO
32924: IFFALSE 33459
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32926: LD_ADDR_VAR 0 11
32930: PUSH
32931: LD_VAR 0 12
32935: PUSH
32936: LD_VAR 0 7
32940: ARRAY
32941: PUSH
32942: LD_INT 1
32944: ARRAY
32945: PPUSH
32946: LD_VAR 0 12
32950: PUSH
32951: LD_VAR 0 7
32955: ARRAY
32956: PUSH
32957: LD_INT 2
32959: ARRAY
32960: PPUSH
32961: CALL_OW 428
32965: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32966: LD_VAR 0 12
32970: PUSH
32971: LD_VAR 0 7
32975: ARRAY
32976: PUSH
32977: LD_INT 1
32979: ARRAY
32980: PPUSH
32981: LD_VAR 0 12
32985: PUSH
32986: LD_VAR 0 7
32990: ARRAY
32991: PUSH
32992: LD_INT 2
32994: ARRAY
32995: PPUSH
32996: CALL_OW 351
33000: PUSH
33001: LD_VAR 0 12
33005: PUSH
33006: LD_VAR 0 7
33010: ARRAY
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PPUSH
33016: LD_VAR 0 12
33020: PUSH
33021: LD_VAR 0 7
33025: ARRAY
33026: PUSH
33027: LD_INT 2
33029: ARRAY
33030: PPUSH
33031: CALL_OW 488
33035: NOT
33036: OR
33037: PUSH
33038: LD_VAR 0 11
33042: PPUSH
33043: CALL_OW 247
33047: PUSH
33048: LD_INT 3
33050: EQUAL
33051: OR
33052: IFFALSE 33058
// exit ;
33054: POP
33055: POP
33056: GO 33461
// if not tmp or not tmp in base then
33058: LD_VAR 0 11
33062: NOT
33063: PUSH
33064: LD_VAR 0 11
33068: PUSH
33069: LD_VAR 0 1
33073: IN
33074: NOT
33075: OR
33076: IFFALSE 33080
// continue ;
33078: GO 32923
// result := true ;
33080: LD_ADDR_VAR 0 6
33084: PUSH
33085: LD_INT 1
33087: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33088: LD_ADDR_VAR 0 15
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_INT 22
33100: PUSH
33101: LD_VAR 0 11
33105: PPUSH
33106: CALL_OW 255
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 30
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PPUSH
33147: CALL_OW 72
33151: ST_TO_ADDR
// if dep then
33152: LD_VAR 0 15
33156: IFFALSE 33292
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33158: LD_ADDR_VAR 0 14
33162: PUSH
33163: LD_VAR 0 15
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 250
33176: PPUSH
33177: LD_VAR 0 15
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: PPUSH
33186: CALL_OW 254
33190: PPUSH
33191: LD_INT 5
33193: PPUSH
33194: CALL_OW 272
33198: PUSH
33199: LD_VAR 0 15
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: PPUSH
33208: CALL_OW 251
33212: PPUSH
33213: LD_VAR 0 15
33217: PUSH
33218: LD_INT 1
33220: ARRAY
33221: PPUSH
33222: CALL_OW 254
33226: PPUSH
33227: LD_INT 5
33229: PPUSH
33230: CALL_OW 273
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33239: LD_VAR 0 14
33243: PUSH
33244: LD_INT 1
33246: ARRAY
33247: PPUSH
33248: LD_VAR 0 14
33252: PUSH
33253: LD_INT 2
33255: ARRAY
33256: PPUSH
33257: CALL_OW 488
33261: IFFALSE 33292
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33263: LD_VAR 0 11
33267: PPUSH
33268: LD_VAR 0 14
33272: PUSH
33273: LD_INT 1
33275: ARRAY
33276: PPUSH
33277: LD_VAR 0 14
33281: PUSH
33282: LD_INT 2
33284: ARRAY
33285: PPUSH
33286: CALL_OW 111
// continue ;
33290: GO 32923
// end ; end ; r := GetDir ( tmp ) ;
33292: LD_ADDR_VAR 0 13
33296: PUSH
33297: LD_VAR 0 11
33301: PPUSH
33302: CALL_OW 254
33306: ST_TO_ADDR
// if r = 5 then
33307: LD_VAR 0 13
33311: PUSH
33312: LD_INT 5
33314: EQUAL
33315: IFFALSE 33325
// r := 0 ;
33317: LD_ADDR_VAR 0 13
33321: PUSH
33322: LD_INT 0
33324: ST_TO_ADDR
// for j = r to 5 do
33325: LD_ADDR_VAR 0 8
33329: PUSH
33330: DOUBLE
33331: LD_VAR 0 13
33335: DEC
33336: ST_TO_ADDR
33337: LD_INT 5
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33455
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33343: LD_ADDR_VAR 0 9
33347: PUSH
33348: LD_VAR 0 11
33352: PPUSH
33353: CALL_OW 250
33357: PPUSH
33358: LD_VAR 0 8
33362: PPUSH
33363: LD_INT 2
33365: PPUSH
33366: CALL_OW 272
33370: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33371: LD_ADDR_VAR 0 10
33375: PUSH
33376: LD_VAR 0 11
33380: PPUSH
33381: CALL_OW 251
33385: PPUSH
33386: LD_VAR 0 8
33390: PPUSH
33391: LD_INT 2
33393: PPUSH
33394: CALL_OW 273
33398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33399: LD_VAR 0 9
33403: PPUSH
33404: LD_VAR 0 10
33408: PPUSH
33409: CALL_OW 488
33413: PUSH
33414: LD_VAR 0 9
33418: PPUSH
33419: LD_VAR 0 10
33423: PPUSH
33424: CALL_OW 428
33428: NOT
33429: AND
33430: IFFALSE 33453
// begin ComMoveXY ( tmp , _x , _y ) ;
33432: LD_VAR 0 11
33436: PPUSH
33437: LD_VAR 0 9
33441: PPUSH
33442: LD_VAR 0 10
33446: PPUSH
33447: CALL_OW 111
// break ;
33451: GO 33455
// end ; end ;
33453: GO 33340
33455: POP
33456: POP
// end ;
33457: GO 32923
33459: POP
33460: POP
// end ;
33461: LD_VAR 0 6
33465: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33466: LD_INT 0
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
// result := false ;
33478: LD_ADDR_VAR 0 6
33482: PUSH
33483: LD_INT 0
33485: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33486: LD_VAR 0 1
33490: NOT
33491: PUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 266
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: IN
33512: NOT
33513: OR
33514: PUSH
33515: LD_VAR 0 2
33519: NOT
33520: OR
33521: PUSH
33522: LD_VAR 0 5
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 4
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: IN
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 3
33560: PPUSH
33561: LD_VAR 0 4
33565: PPUSH
33566: CALL_OW 488
33570: NOT
33571: OR
33572: IFFALSE 33576
// exit ;
33574: GO 34293
// pom := GetBase ( depot ) ;
33576: LD_ADDR_VAR 0 10
33580: PUSH
33581: LD_VAR 0 1
33585: PPUSH
33586: CALL_OW 274
33590: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33591: LD_ADDR_VAR 0 11
33595: PUSH
33596: LD_VAR 0 2
33600: PPUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 248
33610: PPUSH
33611: CALL_OW 450
33615: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33616: LD_VAR 0 10
33620: PPUSH
33621: LD_INT 1
33623: PPUSH
33624: CALL_OW 275
33628: PUSH
33629: LD_VAR 0 11
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: GREATEREQUAL
33638: PUSH
33639: LD_VAR 0 10
33643: PPUSH
33644: LD_INT 2
33646: PPUSH
33647: CALL_OW 275
33651: PUSH
33652: LD_VAR 0 11
33656: PUSH
33657: LD_INT 2
33659: ARRAY
33660: GREATEREQUAL
33661: AND
33662: PUSH
33663: LD_VAR 0 10
33667: PPUSH
33668: LD_INT 3
33670: PPUSH
33671: CALL_OW 275
33675: PUSH
33676: LD_VAR 0 11
33680: PUSH
33681: LD_INT 3
33683: ARRAY
33684: GREATEREQUAL
33685: AND
33686: NOT
33687: IFFALSE 33691
// exit ;
33689: GO 34293
// if GetBType ( depot ) = b_depot then
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL_OW 266
33700: PUSH
33701: LD_INT 0
33703: EQUAL
33704: IFFALSE 33716
// dist := 28 else
33706: LD_ADDR_VAR 0 14
33710: PUSH
33711: LD_INT 28
33713: ST_TO_ADDR
33714: GO 33724
// dist := 36 ;
33716: LD_ADDR_VAR 0 14
33720: PUSH
33721: LD_INT 36
33723: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33724: LD_VAR 0 1
33728: PPUSH
33729: LD_VAR 0 3
33733: PPUSH
33734: LD_VAR 0 4
33738: PPUSH
33739: CALL_OW 297
33743: PUSH
33744: LD_VAR 0 14
33748: GREATER
33749: IFFALSE 33753
// exit ;
33751: GO 34293
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33753: LD_ADDR_VAR 0 12
33757: PUSH
33758: LD_VAR 0 2
33762: PPUSH
33763: LD_VAR 0 3
33767: PPUSH
33768: LD_VAR 0 4
33772: PPUSH
33773: LD_VAR 0 5
33777: PPUSH
33778: LD_VAR 0 1
33782: PPUSH
33783: CALL_OW 248
33787: PPUSH
33788: LD_INT 0
33790: PPUSH
33791: CALL 34298 0 6
33795: ST_TO_ADDR
// if not hexes then
33796: LD_VAR 0 12
33800: NOT
33801: IFFALSE 33805
// exit ;
33803: GO 34293
// hex := GetHexInfo ( x , y ) ;
33805: LD_ADDR_VAR 0 15
33809: PUSH
33810: LD_VAR 0 3
33814: PPUSH
33815: LD_VAR 0 4
33819: PPUSH
33820: CALL_OW 546
33824: ST_TO_ADDR
// if hex [ 1 ] then
33825: LD_VAR 0 15
33829: PUSH
33830: LD_INT 1
33832: ARRAY
33833: IFFALSE 33837
// exit ;
33835: GO 34293
// height := hex [ 2 ] ;
33837: LD_ADDR_VAR 0 13
33841: PUSH
33842: LD_VAR 0 15
33846: PUSH
33847: LD_INT 2
33849: ARRAY
33850: ST_TO_ADDR
// for i = 1 to hexes do
33851: LD_ADDR_VAR 0 7
33855: PUSH
33856: DOUBLE
33857: LD_INT 1
33859: DEC
33860: ST_TO_ADDR
33861: LD_VAR 0 12
33865: PUSH
33866: FOR_TO
33867: IFFALSE 34197
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33869: LD_VAR 0 12
33873: PUSH
33874: LD_VAR 0 7
33878: ARRAY
33879: PUSH
33880: LD_INT 1
33882: ARRAY
33883: PPUSH
33884: LD_VAR 0 12
33888: PUSH
33889: LD_VAR 0 7
33893: ARRAY
33894: PUSH
33895: LD_INT 2
33897: ARRAY
33898: PPUSH
33899: CALL_OW 488
33903: NOT
33904: PUSH
33905: LD_VAR 0 12
33909: PUSH
33910: LD_VAR 0 7
33914: ARRAY
33915: PUSH
33916: LD_INT 1
33918: ARRAY
33919: PPUSH
33920: LD_VAR 0 12
33924: PUSH
33925: LD_VAR 0 7
33929: ARRAY
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: PPUSH
33935: CALL_OW 428
33939: PUSH
33940: LD_INT 0
33942: GREATER
33943: OR
33944: PUSH
33945: LD_VAR 0 12
33949: PUSH
33950: LD_VAR 0 7
33954: ARRAY
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PPUSH
33960: LD_VAR 0 12
33964: PUSH
33965: LD_VAR 0 7
33969: ARRAY
33970: PUSH
33971: LD_INT 2
33973: ARRAY
33974: PPUSH
33975: CALL_OW 351
33979: OR
33980: IFFALSE 33986
// exit ;
33982: POP
33983: POP
33984: GO 34293
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: LD_VAR 0 12
33995: PUSH
33996: LD_VAR 0 7
34000: ARRAY
34001: PUSH
34002: LD_INT 1
34004: ARRAY
34005: PPUSH
34006: LD_VAR 0 12
34010: PUSH
34011: LD_VAR 0 7
34015: ARRAY
34016: PUSH
34017: LD_INT 2
34019: ARRAY
34020: PPUSH
34021: CALL_OW 546
34025: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34026: LD_VAR 0 8
34030: PUSH
34031: LD_INT 1
34033: ARRAY
34034: PUSH
34035: LD_VAR 0 8
34039: PUSH
34040: LD_INT 2
34042: ARRAY
34043: PUSH
34044: LD_VAR 0 13
34048: PUSH
34049: LD_INT 2
34051: PLUS
34052: GREATER
34053: OR
34054: PUSH
34055: LD_VAR 0 8
34059: PUSH
34060: LD_INT 2
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 13
34068: PUSH
34069: LD_INT 2
34071: MINUS
34072: LESS
34073: OR
34074: PUSH
34075: LD_VAR 0 8
34079: PUSH
34080: LD_INT 3
34082: ARRAY
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 8
34089: PUSH
34090: LD_INT 9
34092: PUSH
34093: LD_INT 10
34095: PUSH
34096: LD_INT 11
34098: PUSH
34099: LD_INT 12
34101: PUSH
34102: LD_INT 13
34104: PUSH
34105: LD_INT 16
34107: PUSH
34108: LD_INT 17
34110: PUSH
34111: LD_INT 18
34113: PUSH
34114: LD_INT 19
34116: PUSH
34117: LD_INT 20
34119: PUSH
34120: LD_INT 21
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: IN
34138: NOT
34139: OR
34140: PUSH
34141: LD_VAR 0 8
34145: PUSH
34146: LD_INT 5
34148: ARRAY
34149: NOT
34150: OR
34151: PUSH
34152: LD_VAR 0 8
34156: PUSH
34157: LD_INT 6
34159: ARRAY
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 7
34169: PUSH
34170: LD_INT 9
34172: PUSH
34173: LD_INT 10
34175: PUSH
34176: LD_INT 11
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: IN
34187: NOT
34188: OR
34189: IFFALSE 34195
// exit ;
34191: POP
34192: POP
34193: GO 34293
// end ;
34195: GO 33866
34197: POP
34198: POP
// side := GetSide ( depot ) ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 255
34213: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34214: LD_VAR 0 9
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: LD_VAR 0 4
34228: PPUSH
34229: LD_INT 20
34231: PPUSH
34232: CALL 26947 0 4
34236: PUSH
34237: LD_INT 4
34239: ARRAY
34240: IFFALSE 34244
// exit ;
34242: GO 34293
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34244: LD_VAR 0 2
34248: PUSH
34249: LD_INT 29
34251: PUSH
34252: LD_INT 30
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: IN
34259: PUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 9
34274: PPUSH
34275: CALL_OW 440
34279: NOT
34280: AND
34281: IFFALSE 34285
// exit ;
34283: GO 34293
// result := true ;
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: LD_INT 1
34292: ST_TO_ADDR
// end ;
34293: LD_VAR 0 6
34297: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34298: LD_INT 0
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
// result = [ ] ;
34358: LD_ADDR_VAR 0 7
34362: PUSH
34363: EMPTY
34364: ST_TO_ADDR
// temp_list = [ ] ;
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: EMPTY
34371: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34372: LD_VAR 0 4
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 3
34388: PUSH
34389: LD_INT 4
34391: PUSH
34392: LD_INT 5
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: IN
34403: NOT
34404: PUSH
34405: LD_VAR 0 1
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: IN
34420: PUSH
34421: LD_VAR 0 5
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: IN
34440: NOT
34441: AND
34442: OR
34443: IFFALSE 34447
// exit ;
34445: GO 52832
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34447: LD_VAR 0 1
34451: PUSH
34452: LD_INT 6
34454: PUSH
34455: LD_INT 7
34457: PUSH
34458: LD_INT 8
34460: PUSH
34461: LD_INT 13
34463: PUSH
34464: LD_INT 12
34466: PUSH
34467: LD_INT 15
34469: PUSH
34470: LD_INT 11
34472: PUSH
34473: LD_INT 14
34475: PUSH
34476: LD_INT 10
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: IN
34490: IFFALSE 34500
// btype = b_lab ;
34492: LD_ADDR_VAR 0 1
34496: PUSH
34497: LD_INT 6
34499: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34500: LD_VAR 0 6
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: IN
34519: NOT
34520: PUSH
34521: LD_VAR 0 1
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 6
34540: PUSH
34541: LD_INT 36
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 31
34552: PUSH
34553: LD_INT 32
34555: PUSH
34556: LD_INT 33
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: IN
34572: NOT
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_INT 1
34581: EQUAL
34582: AND
34583: OR
34584: PUSH
34585: LD_VAR 0 1
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: IN
34600: NOT
34601: PUSH
34602: LD_VAR 0 6
34606: PUSH
34607: LD_INT 2
34609: EQUAL
34610: AND
34611: OR
34612: IFFALSE 34622
// mode = 0 ;
34614: LD_ADDR_VAR 0 6
34618: PUSH
34619: LD_INT 0
34621: ST_TO_ADDR
// case mode of 0 :
34622: LD_VAR 0 6
34626: PUSH
34627: LD_INT 0
34629: DOUBLE
34630: EQUAL
34631: IFTRUE 34635
34633: GO 46088
34635: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34636: LD_ADDR_VAR 0 11
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34829: LD_ADDR_VAR 0 12
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35025: LD_ADDR_VAR 0 13
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35224: LD_ADDR_VAR 0 14
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 3
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35420: LD_ADDR_VAR 0 15
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35613: LD_ADDR_VAR 0 16
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35806: LD_ADDR_VAR 0 17
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: LD_INT 2
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36036: LD_ADDR_VAR 0 18
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: LD_INT 2
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36266: LD_ADDR_VAR 0 19
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36496: LD_ADDR_VAR 0 20
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36726: LD_ADDR_VAR 0 21
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36956: LD_ADDR_VAR 0 22
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: NEG
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: LD_INT 2
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37186: LD_ADDR_VAR 0 23
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 3
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37466: LD_ADDR_VAR 0 24
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 3
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37742: LD_ADDR_VAR 0 25
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38016: LD_ADDR_VAR 0 26
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38292: LD_ADDR_VAR 0 27
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: LD_INT 2
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38572: LD_ADDR_VAR 0 28
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 3
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38854: LD_ADDR_VAR 0 29
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39133: LD_ADDR_VAR 0 30
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 3
39376: NEG
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39411: LD_ADDR_VAR 0 31
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 3
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 3
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39689: LD_ADDR_VAR 0 32
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39967: LD_ADDR_VAR 0 33
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: LD_INT 3
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40246: LD_ADDR_VAR 0 34
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 3
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40526: LD_ADDR_VAR 0 35
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40638: LD_ADDR_VAR 0 36
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40750: LD_ADDR_VAR 0 37
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40862: LD_ADDR_VAR 0 38
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40974: LD_ADDR_VAR 0 39
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41086: LD_ADDR_VAR 0 40
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41198: LD_ADDR_VAR 0 41
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41548: LD_ADDR_VAR 0 42
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 3
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41898: LD_ADDR_VAR 0 43
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42246: LD_ADDR_VAR 0 44
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: NEG
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42596: LD_ADDR_VAR 0 45
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42946: LD_ADDR_VAR 0 46
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43294: LD_ADDR_VAR 0 47
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43445: LD_ADDR_VAR 0 48
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43592: LD_ADDR_VAR 0 49
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43736: LD_ADDR_VAR 0 50
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43880: LD_ADDR_VAR 0 51
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 52
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44178: LD_ADDR_VAR 0 53
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44408: LD_ADDR_VAR 0 54
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44638: LD_ADDR_VAR 0 55
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44868: LD_ADDR_VAR 0 56
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45098: LD_ADDR_VAR 0 57
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45328: LD_ADDR_VAR 0 58
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45558: LD_ADDR_VAR 0 59
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45646: LD_ADDR_VAR 0 60
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45734: LD_ADDR_VAR 0 61
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45822: LD_ADDR_VAR 0 62
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45910: LD_ADDR_VAR 0 63
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45998: LD_ADDR_VAR 0 64
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// end ; 1 :
46086: GO 51983
46088: LD_INT 1
46090: DOUBLE
46091: EQUAL
46092: IFTRUE 46096
46094: GO 48719
46096: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46097: LD_ADDR_VAR 0 11
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46141: LD_ADDR_VAR 0 12
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 3
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46182: LD_ADDR_VAR 0 13
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46222: LD_ADDR_VAR 0 14
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46263: LD_ADDR_VAR 0 15
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: NEG
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46307: LD_ADDR_VAR 0 16
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: NEG
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46353: LD_ADDR_VAR 0 17
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 3
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46397: LD_ADDR_VAR 0 18
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46438: LD_ADDR_VAR 0 19
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46478: LD_ADDR_VAR 0 20
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46519: LD_ADDR_VAR 0 21
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46563: LD_ADDR_VAR 0 22
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46609: LD_ADDR_VAR 0 23
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 3
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46653: LD_ADDR_VAR 0 24
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 4
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46694: LD_ADDR_VAR 0 25
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 4
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 4
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46734: LD_ADDR_VAR 0 26
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46775: LD_ADDR_VAR 0 27
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 4
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46819: LD_ADDR_VAR 0 28
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46865: LD_ADDR_VAR 0 29
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 5
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 5
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 4
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 6
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 6
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 5
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47020: LD_ADDR_VAR 0 30
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 4
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 5
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 6
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 6
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47163: LD_ADDR_VAR 0 31
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 4
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 4
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: LD_INT 4
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 5
47230: PUSH
47231: LD_INT 4
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 5
47240: PUSH
47241: LD_INT 5
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: LD_INT 5
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 6
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 6
47270: PUSH
47271: LD_INT 6
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: LD_INT 6
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47302: LD_ADDR_VAR 0 32
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 4
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 6
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 6
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 5
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47445: LD_ADDR_VAR 0 33
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 4
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 4
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 5
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 5
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 6
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 6
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47600: LD_ADDR_VAR 0 34
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: LD_INT 4
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 4
47655: NEG
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 4
47667: NEG
47668: PUSH
47669: LD_INT 4
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: LD_INT 5
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 5
47691: NEG
47692: PUSH
47693: LD_INT 4
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 5
47703: NEG
47704: PUSH
47705: LD_INT 5
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 5
47715: NEG
47716: PUSH
47717: LD_INT 6
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 6
47727: NEG
47728: PUSH
47729: LD_INT 5
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 6
47739: NEG
47740: PUSH
47741: LD_INT 6
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47763: LD_ADDR_VAR 0 41
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47807: LD_ADDR_VAR 0 42
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47848: LD_ADDR_VAR 0 43
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47888: LD_ADDR_VAR 0 44
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47929: LD_ADDR_VAR 0 45
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47973: LD_ADDR_VAR 0 46
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48019: LD_ADDR_VAR 0 47
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48052: LD_ADDR_VAR 0 48
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48083: LD_ADDR_VAR 0 49
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48112: LD_ADDR_VAR 0 50
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 3
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48141: LD_ADDR_VAR 0 51
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 52
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48205: LD_ADDR_VAR 0 53
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 3
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48249: LD_ADDR_VAR 0 54
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48290: LD_ADDR_VAR 0 55
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48330: LD_ADDR_VAR 0 56
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48371: LD_ADDR_VAR 0 57
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48415: LD_ADDR_VAR 0 58
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 59
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48505: LD_ADDR_VAR 0 60
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48546: LD_ADDR_VAR 0 61
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48586: LD_ADDR_VAR 0 62
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48627: LD_ADDR_VAR 0 63
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48671: LD_ADDR_VAR 0 64
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// end ; 2 :
48717: GO 51983
48719: LD_INT 2
48721: DOUBLE
48722: EQUAL
48723: IFTRUE 48727
48725: GO 51982
48727: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48728: LD_ADDR_VAR 0 29
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 5
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 5
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 4
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 5
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 4
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 5
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 4
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 4
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 4
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 4
49113: NEG
49114: PUSH
49115: LD_INT 4
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 4
49125: NEG
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 4
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 5
49173: NEG
49174: PUSH
49175: LD_INT 4
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 5
49185: NEG
49186: PUSH
49187: LD_INT 5
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: LD_INT 5
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49266: LD_ADDR_VAR 0 30
49270: PUSH
49271: LD_INT 4
49273: PUSH
49274: LD_INT 4
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 5
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 5
49303: PUSH
49304: LD_INT 5
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: LD_INT 5
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: LD_INT 4
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 5
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 5
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 4
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 4
49456: NEG
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 4
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 4
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 5
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 5
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 5
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 4
49630: NEG
49631: PUSH
49632: LD_INT 4
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 4
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 4
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 4
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 5
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 5
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49813: LD_ADDR_VAR 0 31
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 4
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 5
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 5
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 5
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 4
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 4
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 4
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 4
50015: NEG
50016: PUSH
50017: LD_INT 4
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 4
50027: NEG
50028: PUSH
50029: LD_INT 5
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: LD_INT 4
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 5
50075: NEG
50076: PUSH
50077: LD_INT 4
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 5
50087: NEG
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 5
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 5
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 4
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 4
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 4
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 5
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 5
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 5
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50363: LD_ADDR_VAR 0 32
50367: PUSH
50368: LD_INT 4
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 4
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 5
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 5
50449: NEG
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: NEG
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 4
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 4
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 5
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 4
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 4
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 5
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 5
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: LD_INT 5
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: LD_INT 5
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50910: LD_ADDR_VAR 0 33
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 4
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 5
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 4
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: LD_INT 4
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 5
50989: NEG
50990: PUSH
50991: LD_INT 5
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 5
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 5
51013: NEG
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 4
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 5
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 5
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 5
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 5
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 5
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51448: LD_ADDR_VAR 0 34
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 5
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 4
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 5
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 4
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 4
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: LD_INT 4
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 5
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: LD_INT 5
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: LD_INT 5
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 5
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 4
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 4
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 5
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 5
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 5
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// end ; end ;
51980: GO 51983
51982: POP
// case btype of b_depot , b_warehouse :
51983: LD_VAR 0 1
51987: PUSH
51988: LD_INT 0
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 52002
51994: LD_INT 1
51996: DOUBLE
51997: EQUAL
51998: IFTRUE 52002
52000: GO 52203
52002: POP
// case nation of nation_american :
52003: LD_VAR 0 5
52007: PUSH
52008: LD_INT 1
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52016
52014: GO 52072
52016: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52017: LD_ADDR_VAR 0 9
52021: PUSH
52022: LD_VAR 0 11
52026: PUSH
52027: LD_VAR 0 12
52031: PUSH
52032: LD_VAR 0 13
52036: PUSH
52037: LD_VAR 0 14
52041: PUSH
52042: LD_VAR 0 15
52046: PUSH
52047: LD_VAR 0 16
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: PUSH
52060: LD_VAR 0 4
52064: PUSH
52065: LD_INT 1
52067: PLUS
52068: ARRAY
52069: ST_TO_ADDR
52070: GO 52201
52072: LD_INT 2
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52080
52078: GO 52136
52080: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52081: LD_ADDR_VAR 0 9
52085: PUSH
52086: LD_VAR 0 17
52090: PUSH
52091: LD_VAR 0 18
52095: PUSH
52096: LD_VAR 0 19
52100: PUSH
52101: LD_VAR 0 20
52105: PUSH
52106: LD_VAR 0 21
52110: PUSH
52111: LD_VAR 0 22
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: PUSH
52124: LD_VAR 0 4
52128: PUSH
52129: LD_INT 1
52131: PLUS
52132: ARRAY
52133: ST_TO_ADDR
52134: GO 52201
52136: LD_INT 3
52138: DOUBLE
52139: EQUAL
52140: IFTRUE 52144
52142: GO 52200
52144: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52145: LD_ADDR_VAR 0 9
52149: PUSH
52150: LD_VAR 0 23
52154: PUSH
52155: LD_VAR 0 24
52159: PUSH
52160: LD_VAR 0 25
52164: PUSH
52165: LD_VAR 0 26
52169: PUSH
52170: LD_VAR 0 27
52174: PUSH
52175: LD_VAR 0 28
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: PUSH
52188: LD_VAR 0 4
52192: PUSH
52193: LD_INT 1
52195: PLUS
52196: ARRAY
52197: ST_TO_ADDR
52198: GO 52201
52200: POP
52201: GO 52750
52203: LD_INT 2
52205: DOUBLE
52206: EQUAL
52207: IFTRUE 52217
52209: LD_INT 3
52211: DOUBLE
52212: EQUAL
52213: IFTRUE 52217
52215: GO 52273
52217: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52218: LD_ADDR_VAR 0 9
52222: PUSH
52223: LD_VAR 0 29
52227: PUSH
52228: LD_VAR 0 30
52232: PUSH
52233: LD_VAR 0 31
52237: PUSH
52238: LD_VAR 0 32
52242: PUSH
52243: LD_VAR 0 33
52247: PUSH
52248: LD_VAR 0 34
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: LD_VAR 0 4
52265: PUSH
52266: LD_INT 1
52268: PLUS
52269: ARRAY
52270: ST_TO_ADDR
52271: GO 52750
52273: LD_INT 16
52275: DOUBLE
52276: EQUAL
52277: IFTRUE 52329
52279: LD_INT 17
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52329
52285: LD_INT 18
52287: DOUBLE
52288: EQUAL
52289: IFTRUE 52329
52291: LD_INT 19
52293: DOUBLE
52294: EQUAL
52295: IFTRUE 52329
52297: LD_INT 20
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52329
52303: LD_INT 21
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52329
52309: LD_INT 23
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52329
52315: LD_INT 24
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52329
52321: LD_INT 25
52323: DOUBLE
52324: EQUAL
52325: IFTRUE 52329
52327: GO 52385
52329: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52330: LD_ADDR_VAR 0 9
52334: PUSH
52335: LD_VAR 0 35
52339: PUSH
52340: LD_VAR 0 36
52344: PUSH
52345: LD_VAR 0 37
52349: PUSH
52350: LD_VAR 0 38
52354: PUSH
52355: LD_VAR 0 39
52359: PUSH
52360: LD_VAR 0 40
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: PUSH
52373: LD_VAR 0 4
52377: PUSH
52378: LD_INT 1
52380: PLUS
52381: ARRAY
52382: ST_TO_ADDR
52383: GO 52750
52385: LD_INT 6
52387: DOUBLE
52388: EQUAL
52389: IFTRUE 52441
52391: LD_INT 7
52393: DOUBLE
52394: EQUAL
52395: IFTRUE 52441
52397: LD_INT 8
52399: DOUBLE
52400: EQUAL
52401: IFTRUE 52441
52403: LD_INT 13
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52441
52409: LD_INT 12
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52441
52415: LD_INT 15
52417: DOUBLE
52418: EQUAL
52419: IFTRUE 52441
52421: LD_INT 11
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52441
52427: LD_INT 14
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52441
52433: LD_INT 10
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52441
52439: GO 52497
52441: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52442: LD_ADDR_VAR 0 9
52446: PUSH
52447: LD_VAR 0 41
52451: PUSH
52452: LD_VAR 0 42
52456: PUSH
52457: LD_VAR 0 43
52461: PUSH
52462: LD_VAR 0 44
52466: PUSH
52467: LD_VAR 0 45
52471: PUSH
52472: LD_VAR 0 46
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: PUSH
52485: LD_VAR 0 4
52489: PUSH
52490: LD_INT 1
52492: PLUS
52493: ARRAY
52494: ST_TO_ADDR
52495: GO 52750
52497: LD_INT 36
52499: DOUBLE
52500: EQUAL
52501: IFTRUE 52505
52503: GO 52561
52505: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52506: LD_ADDR_VAR 0 9
52510: PUSH
52511: LD_VAR 0 47
52515: PUSH
52516: LD_VAR 0 48
52520: PUSH
52521: LD_VAR 0 49
52525: PUSH
52526: LD_VAR 0 50
52530: PUSH
52531: LD_VAR 0 51
52535: PUSH
52536: LD_VAR 0 52
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: PUSH
52549: LD_VAR 0 4
52553: PUSH
52554: LD_INT 1
52556: PLUS
52557: ARRAY
52558: ST_TO_ADDR
52559: GO 52750
52561: LD_INT 4
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52587
52567: LD_INT 5
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52587
52573: LD_INT 34
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52587
52579: LD_INT 37
52581: DOUBLE
52582: EQUAL
52583: IFTRUE 52587
52585: GO 52643
52587: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52588: LD_ADDR_VAR 0 9
52592: PUSH
52593: LD_VAR 0 53
52597: PUSH
52598: LD_VAR 0 54
52602: PUSH
52603: LD_VAR 0 55
52607: PUSH
52608: LD_VAR 0 56
52612: PUSH
52613: LD_VAR 0 57
52617: PUSH
52618: LD_VAR 0 58
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: PUSH
52631: LD_VAR 0 4
52635: PUSH
52636: LD_INT 1
52638: PLUS
52639: ARRAY
52640: ST_TO_ADDR
52641: GO 52750
52643: LD_INT 31
52645: DOUBLE
52646: EQUAL
52647: IFTRUE 52693
52649: LD_INT 32
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52693
52655: LD_INT 33
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52693
52661: LD_INT 27
52663: DOUBLE
52664: EQUAL
52665: IFTRUE 52693
52667: LD_INT 26
52669: DOUBLE
52670: EQUAL
52671: IFTRUE 52693
52673: LD_INT 28
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52693
52679: LD_INT 29
52681: DOUBLE
52682: EQUAL
52683: IFTRUE 52693
52685: LD_INT 30
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52693
52691: GO 52749
52693: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52694: LD_ADDR_VAR 0 9
52698: PUSH
52699: LD_VAR 0 59
52703: PUSH
52704: LD_VAR 0 60
52708: PUSH
52709: LD_VAR 0 61
52713: PUSH
52714: LD_VAR 0 62
52718: PUSH
52719: LD_VAR 0 63
52723: PUSH
52724: LD_VAR 0 64
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: PUSH
52737: LD_VAR 0 4
52741: PUSH
52742: LD_INT 1
52744: PLUS
52745: ARRAY
52746: ST_TO_ADDR
52747: GO 52750
52749: POP
// temp_list2 = [ ] ;
52750: LD_ADDR_VAR 0 10
52754: PUSH
52755: EMPTY
52756: ST_TO_ADDR
// for i in temp_list do
52757: LD_ADDR_VAR 0 8
52761: PUSH
52762: LD_VAR 0 9
52766: PUSH
52767: FOR_IN
52768: IFFALSE 52820
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52770: LD_ADDR_VAR 0 10
52774: PUSH
52775: LD_VAR 0 10
52779: PUSH
52780: LD_VAR 0 8
52784: PUSH
52785: LD_INT 1
52787: ARRAY
52788: PUSH
52789: LD_VAR 0 2
52793: PLUS
52794: PUSH
52795: LD_VAR 0 8
52799: PUSH
52800: LD_INT 2
52802: ARRAY
52803: PUSH
52804: LD_VAR 0 3
52808: PLUS
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: EMPTY
52815: LIST
52816: ADD
52817: ST_TO_ADDR
52818: GO 52767
52820: POP
52821: POP
// result = temp_list2 ;
52822: LD_ADDR_VAR 0 7
52826: PUSH
52827: LD_VAR 0 10
52831: ST_TO_ADDR
// end ;
52832: LD_VAR 0 7
52836: RET
// export function EnemyInRange ( unit , dist ) ; begin
52837: LD_INT 0
52839: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52840: LD_ADDR_VAR 0 3
52844: PUSH
52845: LD_VAR 0 1
52849: PPUSH
52850: CALL_OW 255
52854: PPUSH
52855: LD_VAR 0 1
52859: PPUSH
52860: CALL_OW 250
52864: PPUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: CALL_OW 251
52874: PPUSH
52875: LD_VAR 0 2
52879: PPUSH
52880: CALL 26947 0 4
52884: PUSH
52885: LD_INT 4
52887: ARRAY
52888: ST_TO_ADDR
// end ;
52889: LD_VAR 0 3
52893: RET
// export function PlayerSeeMe ( unit ) ; begin
52894: LD_INT 0
52896: PPUSH
// result := See ( your_side , unit ) ;
52897: LD_ADDR_VAR 0 2
52901: PUSH
52902: LD_OWVAR 2
52906: PPUSH
52907: LD_VAR 0 1
52911: PPUSH
52912: CALL_OW 292
52916: ST_TO_ADDR
// end ;
52917: LD_VAR 0 2
52921: RET
// export function ReverseDir ( unit ) ; begin
52922: LD_INT 0
52924: PPUSH
// if not unit then
52925: LD_VAR 0 1
52929: NOT
52930: IFFALSE 52934
// exit ;
52932: GO 52980
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52934: LD_ADDR_VAR 0 2
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 4
52944: PUSH
52945: LD_INT 5
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 254
52974: PUSH
52975: LD_INT 1
52977: PLUS
52978: ARRAY
52979: ST_TO_ADDR
// end ;
52980: LD_VAR 0 2
52984: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52985: LD_INT 0
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
// if not hexes then
52992: LD_VAR 0 2
52996: NOT
52997: IFFALSE 53001
// exit ;
52999: GO 53149
// dist := 9999 ;
53001: LD_ADDR_VAR 0 5
53005: PUSH
53006: LD_INT 9999
53008: ST_TO_ADDR
// for i = 1 to hexes do
53009: LD_ADDR_VAR 0 4
53013: PUSH
53014: DOUBLE
53015: LD_INT 1
53017: DEC
53018: ST_TO_ADDR
53019: LD_VAR 0 2
53023: PUSH
53024: FOR_TO
53025: IFFALSE 53137
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53027: LD_VAR 0 1
53031: PPUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_VAR 0 4
53041: ARRAY
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: PPUSH
53047: LD_VAR 0 2
53051: PUSH
53052: LD_VAR 0 4
53056: ARRAY
53057: PUSH
53058: LD_INT 2
53060: ARRAY
53061: PPUSH
53062: CALL_OW 297
53066: PUSH
53067: LD_VAR 0 5
53071: LESS
53072: IFFALSE 53135
// begin hex := hexes [ i ] ;
53074: LD_ADDR_VAR 0 7
53078: PUSH
53079: LD_VAR 0 2
53083: PUSH
53084: LD_VAR 0 4
53088: ARRAY
53089: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53090: LD_ADDR_VAR 0 5
53094: PUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: LD_VAR 0 2
53104: PUSH
53105: LD_VAR 0 4
53109: ARRAY
53110: PUSH
53111: LD_INT 1
53113: ARRAY
53114: PPUSH
53115: LD_VAR 0 2
53119: PUSH
53120: LD_VAR 0 4
53124: ARRAY
53125: PUSH
53126: LD_INT 2
53128: ARRAY
53129: PPUSH
53130: CALL_OW 297
53134: ST_TO_ADDR
// end ; end ;
53135: GO 53024
53137: POP
53138: POP
// result := hex ;
53139: LD_ADDR_VAR 0 3
53143: PUSH
53144: LD_VAR 0 7
53148: ST_TO_ADDR
// end ;
53149: LD_VAR 0 3
53153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53154: LD_INT 0
53156: PPUSH
53157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53158: LD_VAR 0 1
53162: NOT
53163: PUSH
53164: LD_VAR 0 1
53168: PUSH
53169: LD_INT 21
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 23
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PPUSH
53193: CALL_OW 69
53197: IN
53198: NOT
53199: OR
53200: IFFALSE 53204
// exit ;
53202: GO 53251
// for i = 1 to 3 do
53204: LD_ADDR_VAR 0 3
53208: PUSH
53209: DOUBLE
53210: LD_INT 1
53212: DEC
53213: ST_TO_ADDR
53214: LD_INT 3
53216: PUSH
53217: FOR_TO
53218: IFFALSE 53249
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53220: LD_VAR 0 1
53224: PPUSH
53225: CALL_OW 250
53229: PPUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 251
53239: PPUSH
53240: LD_INT 1
53242: PPUSH
53243: CALL_OW 453
53247: GO 53217
53249: POP
53250: POP
// end ;
53251: LD_VAR 0 2
53255: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53256: LD_INT 0
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53264: LD_VAR 0 1
53268: NOT
53269: PUSH
53270: LD_VAR 0 2
53274: NOT
53275: OR
53276: PUSH
53277: LD_VAR 0 1
53281: PPUSH
53282: CALL_OW 314
53286: OR
53287: IFFALSE 53291
// exit ;
53289: GO 53732
// x := GetX ( enemy_unit ) ;
53291: LD_ADDR_VAR 0 7
53295: PUSH
53296: LD_VAR 0 2
53300: PPUSH
53301: CALL_OW 250
53305: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53306: LD_ADDR_VAR 0 8
53310: PUSH
53311: LD_VAR 0 2
53315: PPUSH
53316: CALL_OW 251
53320: ST_TO_ADDR
// if not x or not y then
53321: LD_VAR 0 7
53325: NOT
53326: PUSH
53327: LD_VAR 0 8
53331: NOT
53332: OR
53333: IFFALSE 53337
// exit ;
53335: GO 53732
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53337: LD_ADDR_VAR 0 6
53341: PUSH
53342: LD_VAR 0 7
53346: PPUSH
53347: LD_INT 0
53349: PPUSH
53350: LD_INT 4
53352: PPUSH
53353: CALL_OW 272
53357: PUSH
53358: LD_VAR 0 8
53362: PPUSH
53363: LD_INT 0
53365: PPUSH
53366: LD_INT 4
53368: PPUSH
53369: CALL_OW 273
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_VAR 0 7
53382: PPUSH
53383: LD_INT 1
53385: PPUSH
53386: LD_INT 4
53388: PPUSH
53389: CALL_OW 272
53393: PUSH
53394: LD_VAR 0 8
53398: PPUSH
53399: LD_INT 1
53401: PPUSH
53402: LD_INT 4
53404: PPUSH
53405: CALL_OW 273
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_VAR 0 7
53418: PPUSH
53419: LD_INT 2
53421: PPUSH
53422: LD_INT 4
53424: PPUSH
53425: CALL_OW 272
53429: PUSH
53430: LD_VAR 0 8
53434: PPUSH
53435: LD_INT 2
53437: PPUSH
53438: LD_INT 4
53440: PPUSH
53441: CALL_OW 273
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_VAR 0 7
53454: PPUSH
53455: LD_INT 3
53457: PPUSH
53458: LD_INT 4
53460: PPUSH
53461: CALL_OW 272
53465: PUSH
53466: LD_VAR 0 8
53470: PPUSH
53471: LD_INT 3
53473: PPUSH
53474: LD_INT 4
53476: PPUSH
53477: CALL_OW 273
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_VAR 0 7
53490: PPUSH
53491: LD_INT 4
53493: PPUSH
53494: LD_INT 4
53496: PPUSH
53497: CALL_OW 272
53501: PUSH
53502: LD_VAR 0 8
53506: PPUSH
53507: LD_INT 4
53509: PPUSH
53510: LD_INT 4
53512: PPUSH
53513: CALL_OW 273
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_VAR 0 7
53526: PPUSH
53527: LD_INT 5
53529: PPUSH
53530: LD_INT 4
53532: PPUSH
53533: CALL_OW 272
53537: PUSH
53538: LD_VAR 0 8
53542: PPUSH
53543: LD_INT 5
53545: PPUSH
53546: LD_INT 4
53548: PPUSH
53549: CALL_OW 273
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// for i = tmp downto 1 do
53566: LD_ADDR_VAR 0 4
53570: PUSH
53571: DOUBLE
53572: LD_VAR 0 6
53576: INC
53577: ST_TO_ADDR
53578: LD_INT 1
53580: PUSH
53581: FOR_DOWNTO
53582: IFFALSE 53683
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53584: LD_VAR 0 6
53588: PUSH
53589: LD_VAR 0 4
53593: ARRAY
53594: PUSH
53595: LD_INT 1
53597: ARRAY
53598: PPUSH
53599: LD_VAR 0 6
53603: PUSH
53604: LD_VAR 0 4
53608: ARRAY
53609: PUSH
53610: LD_INT 2
53612: ARRAY
53613: PPUSH
53614: CALL_OW 488
53618: NOT
53619: PUSH
53620: LD_VAR 0 6
53624: PUSH
53625: LD_VAR 0 4
53629: ARRAY
53630: PUSH
53631: LD_INT 1
53633: ARRAY
53634: PPUSH
53635: LD_VAR 0 6
53639: PUSH
53640: LD_VAR 0 4
53644: ARRAY
53645: PUSH
53646: LD_INT 2
53648: ARRAY
53649: PPUSH
53650: CALL_OW 428
53654: PUSH
53655: LD_INT 0
53657: NONEQUAL
53658: OR
53659: IFFALSE 53681
// tmp := Delete ( tmp , i ) ;
53661: LD_ADDR_VAR 0 6
53665: PUSH
53666: LD_VAR 0 6
53670: PPUSH
53671: LD_VAR 0 4
53675: PPUSH
53676: CALL_OW 3
53680: ST_TO_ADDR
53681: GO 53581
53683: POP
53684: POP
// j := GetClosestHex ( unit , tmp ) ;
53685: LD_ADDR_VAR 0 5
53689: PUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: LD_VAR 0 6
53699: PPUSH
53700: CALL 52985 0 2
53704: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53705: LD_VAR 0 1
53709: PPUSH
53710: LD_VAR 0 5
53714: PUSH
53715: LD_INT 1
53717: ARRAY
53718: PPUSH
53719: LD_VAR 0 5
53723: PUSH
53724: LD_INT 2
53726: ARRAY
53727: PPUSH
53728: CALL_OW 111
// end ;
53732: LD_VAR 0 3
53736: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53737: LD_INT 0
53739: PPUSH
53740: PPUSH
53741: PPUSH
// uc_side = 0 ;
53742: LD_ADDR_OWVAR 20
53746: PUSH
53747: LD_INT 0
53749: ST_TO_ADDR
// uc_nation = 0 ;
53750: LD_ADDR_OWVAR 21
53754: PUSH
53755: LD_INT 0
53757: ST_TO_ADDR
// InitHc ;
53758: CALL_OW 19
// InitVc ;
53762: CALL_OW 20
// if mastodonts then
53766: LD_VAR 0 6
53770: IFFALSE 53837
// for i = 1 to mastodonts do
53772: LD_ADDR_VAR 0 11
53776: PUSH
53777: DOUBLE
53778: LD_INT 1
53780: DEC
53781: ST_TO_ADDR
53782: LD_VAR 0 6
53786: PUSH
53787: FOR_TO
53788: IFFALSE 53835
// begin vc_chassis := 31 ;
53790: LD_ADDR_OWVAR 37
53794: PUSH
53795: LD_INT 31
53797: ST_TO_ADDR
// vc_control := control_rider ;
53798: LD_ADDR_OWVAR 38
53802: PUSH
53803: LD_INT 4
53805: ST_TO_ADDR
// animal := CreateVehicle ;
53806: LD_ADDR_VAR 0 12
53810: PUSH
53811: CALL_OW 45
53815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53816: LD_VAR 0 12
53820: PPUSH
53821: LD_VAR 0 8
53825: PPUSH
53826: LD_INT 0
53828: PPUSH
53829: CALL 60582 0 3
// end ;
53833: GO 53787
53835: POP
53836: POP
// if horses then
53837: LD_VAR 0 5
53841: IFFALSE 53908
// for i = 1 to horses do
53843: LD_ADDR_VAR 0 11
53847: PUSH
53848: DOUBLE
53849: LD_INT 1
53851: DEC
53852: ST_TO_ADDR
53853: LD_VAR 0 5
53857: PUSH
53858: FOR_TO
53859: IFFALSE 53906
// begin hc_class := 21 ;
53861: LD_ADDR_OWVAR 28
53865: PUSH
53866: LD_INT 21
53868: ST_TO_ADDR
// hc_gallery :=  ;
53869: LD_ADDR_OWVAR 33
53873: PUSH
53874: LD_STRING 
53876: ST_TO_ADDR
// animal := CreateHuman ;
53877: LD_ADDR_VAR 0 12
53881: PUSH
53882: CALL_OW 44
53886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53887: LD_VAR 0 12
53891: PPUSH
53892: LD_VAR 0 8
53896: PPUSH
53897: LD_INT 0
53899: PPUSH
53900: CALL 60582 0 3
// end ;
53904: GO 53858
53906: POP
53907: POP
// if birds then
53908: LD_VAR 0 1
53912: IFFALSE 53979
// for i = 1 to birds do
53914: LD_ADDR_VAR 0 11
53918: PUSH
53919: DOUBLE
53920: LD_INT 1
53922: DEC
53923: ST_TO_ADDR
53924: LD_VAR 0 1
53928: PUSH
53929: FOR_TO
53930: IFFALSE 53977
// begin hc_class = 18 ;
53932: LD_ADDR_OWVAR 28
53936: PUSH
53937: LD_INT 18
53939: ST_TO_ADDR
// hc_gallery =  ;
53940: LD_ADDR_OWVAR 33
53944: PUSH
53945: LD_STRING 
53947: ST_TO_ADDR
// animal := CreateHuman ;
53948: LD_ADDR_VAR 0 12
53952: PUSH
53953: CALL_OW 44
53957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53958: LD_VAR 0 12
53962: PPUSH
53963: LD_VAR 0 8
53967: PPUSH
53968: LD_INT 0
53970: PPUSH
53971: CALL 60582 0 3
// end ;
53975: GO 53929
53977: POP
53978: POP
// if tigers then
53979: LD_VAR 0 2
53983: IFFALSE 54067
// for i = 1 to tigers do
53985: LD_ADDR_VAR 0 11
53989: PUSH
53990: DOUBLE
53991: LD_INT 1
53993: DEC
53994: ST_TO_ADDR
53995: LD_VAR 0 2
53999: PUSH
54000: FOR_TO
54001: IFFALSE 54065
// begin hc_class = class_tiger ;
54003: LD_ADDR_OWVAR 28
54007: PUSH
54008: LD_INT 14
54010: ST_TO_ADDR
// hc_gallery =  ;
54011: LD_ADDR_OWVAR 33
54015: PUSH
54016: LD_STRING 
54018: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54019: LD_ADDR_OWVAR 35
54023: PUSH
54024: LD_INT 7
54026: NEG
54027: PPUSH
54028: LD_INT 7
54030: PPUSH
54031: CALL_OW 12
54035: ST_TO_ADDR
// animal := CreateHuman ;
54036: LD_ADDR_VAR 0 12
54040: PUSH
54041: CALL_OW 44
54045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54046: LD_VAR 0 12
54050: PPUSH
54051: LD_VAR 0 8
54055: PPUSH
54056: LD_INT 0
54058: PPUSH
54059: CALL 60582 0 3
// end ;
54063: GO 54000
54065: POP
54066: POP
// if apemans then
54067: LD_VAR 0 3
54071: IFFALSE 54194
// for i = 1 to apemans do
54073: LD_ADDR_VAR 0 11
54077: PUSH
54078: DOUBLE
54079: LD_INT 1
54081: DEC
54082: ST_TO_ADDR
54083: LD_VAR 0 3
54087: PUSH
54088: FOR_TO
54089: IFFALSE 54192
// begin hc_class = class_apeman ;
54091: LD_ADDR_OWVAR 28
54095: PUSH
54096: LD_INT 12
54098: ST_TO_ADDR
// hc_gallery =  ;
54099: LD_ADDR_OWVAR 33
54103: PUSH
54104: LD_STRING 
54106: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54107: LD_ADDR_OWVAR 35
54111: PUSH
54112: LD_INT 5
54114: NEG
54115: PPUSH
54116: LD_INT 5
54118: PPUSH
54119: CALL_OW 12
54123: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54124: LD_ADDR_OWVAR 31
54128: PUSH
54129: LD_INT 1
54131: PPUSH
54132: LD_INT 3
54134: PPUSH
54135: CALL_OW 12
54139: PUSH
54140: LD_INT 1
54142: PPUSH
54143: LD_INT 3
54145: PPUSH
54146: CALL_OW 12
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// animal := CreateHuman ;
54163: LD_ADDR_VAR 0 12
54167: PUSH
54168: CALL_OW 44
54172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54173: LD_VAR 0 12
54177: PPUSH
54178: LD_VAR 0 8
54182: PPUSH
54183: LD_INT 0
54185: PPUSH
54186: CALL 60582 0 3
// end ;
54190: GO 54088
54192: POP
54193: POP
// if enchidnas then
54194: LD_VAR 0 4
54198: IFFALSE 54265
// for i = 1 to enchidnas do
54200: LD_ADDR_VAR 0 11
54204: PUSH
54205: DOUBLE
54206: LD_INT 1
54208: DEC
54209: ST_TO_ADDR
54210: LD_VAR 0 4
54214: PUSH
54215: FOR_TO
54216: IFFALSE 54263
// begin hc_class = 13 ;
54218: LD_ADDR_OWVAR 28
54222: PUSH
54223: LD_INT 13
54225: ST_TO_ADDR
// hc_gallery =  ;
54226: LD_ADDR_OWVAR 33
54230: PUSH
54231: LD_STRING 
54233: ST_TO_ADDR
// animal := CreateHuman ;
54234: LD_ADDR_VAR 0 12
54238: PUSH
54239: CALL_OW 44
54243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54244: LD_VAR 0 12
54248: PPUSH
54249: LD_VAR 0 8
54253: PPUSH
54254: LD_INT 0
54256: PPUSH
54257: CALL 60582 0 3
// end ;
54261: GO 54215
54263: POP
54264: POP
// if fishes then
54265: LD_VAR 0 7
54269: IFFALSE 54336
// for i = 1 to fishes do
54271: LD_ADDR_VAR 0 11
54275: PUSH
54276: DOUBLE
54277: LD_INT 1
54279: DEC
54280: ST_TO_ADDR
54281: LD_VAR 0 7
54285: PUSH
54286: FOR_TO
54287: IFFALSE 54334
// begin hc_class = 20 ;
54289: LD_ADDR_OWVAR 28
54293: PUSH
54294: LD_INT 20
54296: ST_TO_ADDR
// hc_gallery =  ;
54297: LD_ADDR_OWVAR 33
54301: PUSH
54302: LD_STRING 
54304: ST_TO_ADDR
// animal := CreateHuman ;
54305: LD_ADDR_VAR 0 12
54309: PUSH
54310: CALL_OW 44
54314: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54315: LD_VAR 0 12
54319: PPUSH
54320: LD_VAR 0 9
54324: PPUSH
54325: LD_INT 0
54327: PPUSH
54328: CALL 60582 0 3
// end ;
54332: GO 54286
54334: POP
54335: POP
// end ;
54336: LD_VAR 0 10
54340: RET
// export function WantHeal ( sci , unit ) ; begin
54341: LD_INT 0
54343: PPUSH
// if GetTaskList ( sci ) > 0 then
54344: LD_VAR 0 1
54348: PPUSH
54349: CALL_OW 437
54353: PUSH
54354: LD_INT 0
54356: GREATER
54357: IFFALSE 54427
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54359: LD_VAR 0 1
54363: PPUSH
54364: CALL_OW 437
54368: PUSH
54369: LD_INT 1
54371: ARRAY
54372: PUSH
54373: LD_INT 1
54375: ARRAY
54376: PUSH
54377: LD_STRING l
54379: EQUAL
54380: PUSH
54381: LD_VAR 0 1
54385: PPUSH
54386: CALL_OW 437
54390: PUSH
54391: LD_INT 1
54393: ARRAY
54394: PUSH
54395: LD_INT 4
54397: ARRAY
54398: PUSH
54399: LD_VAR 0 2
54403: EQUAL
54404: AND
54405: IFFALSE 54417
// result := true else
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_INT 1
54414: ST_TO_ADDR
54415: GO 54425
// result := false ;
54417: LD_ADDR_VAR 0 3
54421: PUSH
54422: LD_INT 0
54424: ST_TO_ADDR
// end else
54425: GO 54435
// result := false ;
54427: LD_ADDR_VAR 0 3
54431: PUSH
54432: LD_INT 0
54434: ST_TO_ADDR
// end ;
54435: LD_VAR 0 3
54439: RET
// export function HealTarget ( sci ) ; begin
54440: LD_INT 0
54442: PPUSH
// if not sci then
54443: LD_VAR 0 1
54447: NOT
54448: IFFALSE 54452
// exit ;
54450: GO 54517
// result := 0 ;
54452: LD_ADDR_VAR 0 2
54456: PUSH
54457: LD_INT 0
54459: ST_TO_ADDR
// if GetTaskList ( sci ) then
54460: LD_VAR 0 1
54464: PPUSH
54465: CALL_OW 437
54469: IFFALSE 54517
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54471: LD_VAR 0 1
54475: PPUSH
54476: CALL_OW 437
54480: PUSH
54481: LD_INT 1
54483: ARRAY
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: PUSH
54489: LD_STRING l
54491: EQUAL
54492: IFFALSE 54517
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54494: LD_ADDR_VAR 0 2
54498: PUSH
54499: LD_VAR 0 1
54503: PPUSH
54504: CALL_OW 437
54508: PUSH
54509: LD_INT 1
54511: ARRAY
54512: PUSH
54513: LD_INT 4
54515: ARRAY
54516: ST_TO_ADDR
// end ;
54517: LD_VAR 0 2
54521: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54522: LD_INT 0
54524: PPUSH
54525: PPUSH
54526: PPUSH
54527: PPUSH
54528: PPUSH
54529: PPUSH
54530: PPUSH
54531: PPUSH
54532: PPUSH
54533: PPUSH
54534: PPUSH
54535: PPUSH
54536: PPUSH
54537: PPUSH
54538: PPUSH
54539: PPUSH
54540: PPUSH
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
// if not list then
54558: LD_VAR 0 1
54562: NOT
54563: IFFALSE 54567
// exit ;
54565: GO 59193
// base := list [ 1 ] ;
54567: LD_ADDR_VAR 0 3
54571: PUSH
54572: LD_VAR 0 1
54576: PUSH
54577: LD_INT 1
54579: ARRAY
54580: ST_TO_ADDR
// group := list [ 2 ] ;
54581: LD_ADDR_VAR 0 4
54585: PUSH
54586: LD_VAR 0 1
54590: PUSH
54591: LD_INT 2
54593: ARRAY
54594: ST_TO_ADDR
// path := list [ 3 ] ;
54595: LD_ADDR_VAR 0 5
54599: PUSH
54600: LD_VAR 0 1
54604: PUSH
54605: LD_INT 3
54607: ARRAY
54608: ST_TO_ADDR
// flags := list [ 4 ] ;
54609: LD_ADDR_VAR 0 6
54613: PUSH
54614: LD_VAR 0 1
54618: PUSH
54619: LD_INT 4
54621: ARRAY
54622: ST_TO_ADDR
// mined := [ ] ;
54623: LD_ADDR_VAR 0 27
54627: PUSH
54628: EMPTY
54629: ST_TO_ADDR
// bombed := [ ] ;
54630: LD_ADDR_VAR 0 28
54634: PUSH
54635: EMPTY
54636: ST_TO_ADDR
// healers := [ ] ;
54637: LD_ADDR_VAR 0 31
54641: PUSH
54642: EMPTY
54643: ST_TO_ADDR
// to_heal := [ ] ;
54644: LD_ADDR_VAR 0 30
54648: PUSH
54649: EMPTY
54650: ST_TO_ADDR
// repairs := [ ] ;
54651: LD_ADDR_VAR 0 33
54655: PUSH
54656: EMPTY
54657: ST_TO_ADDR
// to_repair := [ ] ;
54658: LD_ADDR_VAR 0 32
54662: PUSH
54663: EMPTY
54664: ST_TO_ADDR
// if not group or not path then
54665: LD_VAR 0 4
54669: NOT
54670: PUSH
54671: LD_VAR 0 5
54675: NOT
54676: OR
54677: IFFALSE 54681
// exit ;
54679: GO 59193
// side := GetSide ( group [ 1 ] ) ;
54681: LD_ADDR_VAR 0 35
54685: PUSH
54686: LD_VAR 0 4
54690: PUSH
54691: LD_INT 1
54693: ARRAY
54694: PPUSH
54695: CALL_OW 255
54699: ST_TO_ADDR
// if flags then
54700: LD_VAR 0 6
54704: IFFALSE 54848
// begin f_ignore_area := flags [ 1 ] ;
54706: LD_ADDR_VAR 0 17
54710: PUSH
54711: LD_VAR 0 6
54715: PUSH
54716: LD_INT 1
54718: ARRAY
54719: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54720: LD_ADDR_VAR 0 18
54724: PUSH
54725: LD_VAR 0 6
54729: PUSH
54730: LD_INT 2
54732: ARRAY
54733: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54734: LD_ADDR_VAR 0 19
54738: PUSH
54739: LD_VAR 0 6
54743: PUSH
54744: LD_INT 3
54746: ARRAY
54747: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54748: LD_ADDR_VAR 0 20
54752: PUSH
54753: LD_VAR 0 6
54757: PUSH
54758: LD_INT 4
54760: ARRAY
54761: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54762: LD_ADDR_VAR 0 21
54766: PUSH
54767: LD_VAR 0 6
54771: PUSH
54772: LD_INT 5
54774: ARRAY
54775: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54776: LD_ADDR_VAR 0 22
54780: PUSH
54781: LD_VAR 0 6
54785: PUSH
54786: LD_INT 6
54788: ARRAY
54789: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54790: LD_ADDR_VAR 0 23
54794: PUSH
54795: LD_VAR 0 6
54799: PUSH
54800: LD_INT 7
54802: ARRAY
54803: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54804: LD_ADDR_VAR 0 24
54808: PUSH
54809: LD_VAR 0 6
54813: PUSH
54814: LD_INT 8
54816: ARRAY
54817: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54818: LD_ADDR_VAR 0 25
54822: PUSH
54823: LD_VAR 0 6
54827: PUSH
54828: LD_INT 9
54830: ARRAY
54831: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54832: LD_ADDR_VAR 0 26
54836: PUSH
54837: LD_VAR 0 6
54841: PUSH
54842: LD_INT 10
54844: ARRAY
54845: ST_TO_ADDR
// end else
54846: GO 54928
// begin f_ignore_area := false ;
54848: LD_ADDR_VAR 0 17
54852: PUSH
54853: LD_INT 0
54855: ST_TO_ADDR
// f_capture := false ;
54856: LD_ADDR_VAR 0 18
54860: PUSH
54861: LD_INT 0
54863: ST_TO_ADDR
// f_ignore_civ := false ;
54864: LD_ADDR_VAR 0 19
54868: PUSH
54869: LD_INT 0
54871: ST_TO_ADDR
// f_murder := false ;
54872: LD_ADDR_VAR 0 20
54876: PUSH
54877: LD_INT 0
54879: ST_TO_ADDR
// f_mines := false ;
54880: LD_ADDR_VAR 0 21
54884: PUSH
54885: LD_INT 0
54887: ST_TO_ADDR
// f_repair := false ;
54888: LD_ADDR_VAR 0 22
54892: PUSH
54893: LD_INT 0
54895: ST_TO_ADDR
// f_heal := false ;
54896: LD_ADDR_VAR 0 23
54900: PUSH
54901: LD_INT 0
54903: ST_TO_ADDR
// f_spacetime := false ;
54904: LD_ADDR_VAR 0 24
54908: PUSH
54909: LD_INT 0
54911: ST_TO_ADDR
// f_attack_depot := false ;
54912: LD_ADDR_VAR 0 25
54916: PUSH
54917: LD_INT 0
54919: ST_TO_ADDR
// f_crawl := false ;
54920: LD_ADDR_VAR 0 26
54924: PUSH
54925: LD_INT 0
54927: ST_TO_ADDR
// end ; if f_heal then
54928: LD_VAR 0 23
54932: IFFALSE 54959
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54934: LD_ADDR_VAR 0 31
54938: PUSH
54939: LD_VAR 0 4
54943: PPUSH
54944: LD_INT 25
54946: PUSH
54947: LD_INT 4
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PPUSH
54954: CALL_OW 72
54958: ST_TO_ADDR
// if f_repair then
54959: LD_VAR 0 22
54963: IFFALSE 54990
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54965: LD_ADDR_VAR 0 33
54969: PUSH
54970: LD_VAR 0 4
54974: PPUSH
54975: LD_INT 25
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PPUSH
54985: CALL_OW 72
54989: ST_TO_ADDR
// units_path := [ ] ;
54990: LD_ADDR_VAR 0 16
54994: PUSH
54995: EMPTY
54996: ST_TO_ADDR
// for i = 1 to group do
54997: LD_ADDR_VAR 0 7
55001: PUSH
55002: DOUBLE
55003: LD_INT 1
55005: DEC
55006: ST_TO_ADDR
55007: LD_VAR 0 4
55011: PUSH
55012: FOR_TO
55013: IFFALSE 55042
// units_path := Replace ( units_path , i , path ) ;
55015: LD_ADDR_VAR 0 16
55019: PUSH
55020: LD_VAR 0 16
55024: PPUSH
55025: LD_VAR 0 7
55029: PPUSH
55030: LD_VAR 0 5
55034: PPUSH
55035: CALL_OW 1
55039: ST_TO_ADDR
55040: GO 55012
55042: POP
55043: POP
// repeat for i = group downto 1 do
55044: LD_ADDR_VAR 0 7
55048: PUSH
55049: DOUBLE
55050: LD_VAR 0 4
55054: INC
55055: ST_TO_ADDR
55056: LD_INT 1
55058: PUSH
55059: FOR_DOWNTO
55060: IFFALSE 59156
// begin wait ( 5 ) ;
55062: LD_INT 5
55064: PPUSH
55065: CALL_OW 67
// tmp := [ ] ;
55069: LD_ADDR_VAR 0 14
55073: PUSH
55074: EMPTY
55075: ST_TO_ADDR
// attacking := false ;
55076: LD_ADDR_VAR 0 29
55080: PUSH
55081: LD_INT 0
55083: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55084: LD_VAR 0 4
55088: PUSH
55089: LD_VAR 0 7
55093: ARRAY
55094: PPUSH
55095: CALL_OW 301
55099: PUSH
55100: LD_VAR 0 4
55104: PUSH
55105: LD_VAR 0 7
55109: ARRAY
55110: NOT
55111: OR
55112: IFFALSE 55221
// begin if GetType ( group [ i ] ) = unit_human then
55114: LD_VAR 0 4
55118: PUSH
55119: LD_VAR 0 7
55123: ARRAY
55124: PPUSH
55125: CALL_OW 247
55129: PUSH
55130: LD_INT 1
55132: EQUAL
55133: IFFALSE 55179
// begin to_heal := to_heal diff group [ i ] ;
55135: LD_ADDR_VAR 0 30
55139: PUSH
55140: LD_VAR 0 30
55144: PUSH
55145: LD_VAR 0 4
55149: PUSH
55150: LD_VAR 0 7
55154: ARRAY
55155: DIFF
55156: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55157: LD_ADDR_VAR 0 31
55161: PUSH
55162: LD_VAR 0 31
55166: PUSH
55167: LD_VAR 0 4
55171: PUSH
55172: LD_VAR 0 7
55176: ARRAY
55177: DIFF
55178: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55179: LD_ADDR_VAR 0 4
55183: PUSH
55184: LD_VAR 0 4
55188: PPUSH
55189: LD_VAR 0 7
55193: PPUSH
55194: CALL_OW 3
55198: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55199: LD_ADDR_VAR 0 16
55203: PUSH
55204: LD_VAR 0 16
55208: PPUSH
55209: LD_VAR 0 7
55213: PPUSH
55214: CALL_OW 3
55218: ST_TO_ADDR
// continue ;
55219: GO 55059
// end ; if f_repair then
55221: LD_VAR 0 22
55225: IFFALSE 55714
// begin if GetType ( group [ i ] ) = unit_vehicle then
55227: LD_VAR 0 4
55231: PUSH
55232: LD_VAR 0 7
55236: ARRAY
55237: PPUSH
55238: CALL_OW 247
55242: PUSH
55243: LD_INT 2
55245: EQUAL
55246: IFFALSE 55436
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55248: LD_VAR 0 4
55252: PUSH
55253: LD_VAR 0 7
55257: ARRAY
55258: PPUSH
55259: CALL_OW 256
55263: PUSH
55264: LD_INT 700
55266: LESS
55267: PUSH
55268: LD_VAR 0 4
55272: PUSH
55273: LD_VAR 0 7
55277: ARRAY
55278: PUSH
55279: LD_VAR 0 32
55283: IN
55284: NOT
55285: AND
55286: IFFALSE 55310
// to_repair := to_repair union group [ i ] ;
55288: LD_ADDR_VAR 0 32
55292: PUSH
55293: LD_VAR 0 32
55297: PUSH
55298: LD_VAR 0 4
55302: PUSH
55303: LD_VAR 0 7
55307: ARRAY
55308: UNION
55309: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55310: LD_VAR 0 4
55314: PUSH
55315: LD_VAR 0 7
55319: ARRAY
55320: PPUSH
55321: CALL_OW 256
55325: PUSH
55326: LD_INT 1000
55328: EQUAL
55329: PUSH
55330: LD_VAR 0 4
55334: PUSH
55335: LD_VAR 0 7
55339: ARRAY
55340: PUSH
55341: LD_VAR 0 32
55345: IN
55346: AND
55347: IFFALSE 55371
// to_repair := to_repair diff group [ i ] ;
55349: LD_ADDR_VAR 0 32
55353: PUSH
55354: LD_VAR 0 32
55358: PUSH
55359: LD_VAR 0 4
55363: PUSH
55364: LD_VAR 0 7
55368: ARRAY
55369: DIFF
55370: ST_TO_ADDR
// if group [ i ] in to_repair then
55371: LD_VAR 0 4
55375: PUSH
55376: LD_VAR 0 7
55380: ARRAY
55381: PUSH
55382: LD_VAR 0 32
55386: IN
55387: IFFALSE 55434
// begin if not IsInArea ( group [ i ] , f_repair ) then
55389: LD_VAR 0 4
55393: PUSH
55394: LD_VAR 0 7
55398: ARRAY
55399: PPUSH
55400: LD_VAR 0 22
55404: PPUSH
55405: CALL_OW 308
55409: NOT
55410: IFFALSE 55432
// ComMoveToArea ( group [ i ] , f_repair ) ;
55412: LD_VAR 0 4
55416: PUSH
55417: LD_VAR 0 7
55421: ARRAY
55422: PPUSH
55423: LD_VAR 0 22
55427: PPUSH
55428: CALL_OW 113
// continue ;
55432: GO 55059
// end ; end else
55434: GO 55714
// if group [ i ] in repairs then
55436: LD_VAR 0 4
55440: PUSH
55441: LD_VAR 0 7
55445: ARRAY
55446: PUSH
55447: LD_VAR 0 33
55451: IN
55452: IFFALSE 55714
// begin if IsInUnit ( group [ i ] ) then
55454: LD_VAR 0 4
55458: PUSH
55459: LD_VAR 0 7
55463: ARRAY
55464: PPUSH
55465: CALL_OW 310
55469: IFFALSE 55537
// begin z := IsInUnit ( group [ i ] ) ;
55471: LD_ADDR_VAR 0 13
55475: PUSH
55476: LD_VAR 0 4
55480: PUSH
55481: LD_VAR 0 7
55485: ARRAY
55486: PPUSH
55487: CALL_OW 310
55491: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55492: LD_VAR 0 13
55496: PUSH
55497: LD_VAR 0 32
55501: IN
55502: PUSH
55503: LD_VAR 0 13
55507: PPUSH
55508: LD_VAR 0 22
55512: PPUSH
55513: CALL_OW 308
55517: AND
55518: IFFALSE 55535
// ComExitVehicle ( group [ i ] ) ;
55520: LD_VAR 0 4
55524: PUSH
55525: LD_VAR 0 7
55529: ARRAY
55530: PPUSH
55531: CALL_OW 121
// end else
55535: GO 55714
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55537: LD_ADDR_VAR 0 13
55541: PUSH
55542: LD_VAR 0 4
55546: PPUSH
55547: LD_INT 95
55549: PUSH
55550: LD_VAR 0 22
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 58
55561: PUSH
55562: EMPTY
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PPUSH
55569: CALL_OW 72
55573: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55574: LD_VAR 0 4
55578: PUSH
55579: LD_VAR 0 7
55583: ARRAY
55584: PPUSH
55585: CALL_OW 314
55589: NOT
55590: IFFALSE 55712
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55592: LD_ADDR_VAR 0 10
55596: PUSH
55597: LD_VAR 0 13
55601: PPUSH
55602: LD_VAR 0 4
55606: PUSH
55607: LD_VAR 0 7
55611: ARRAY
55612: PPUSH
55613: CALL_OW 74
55617: ST_TO_ADDR
// if not x then
55618: LD_VAR 0 10
55622: NOT
55623: IFFALSE 55627
// continue ;
55625: GO 55059
// if GetLives ( x ) < 1000 then
55627: LD_VAR 0 10
55631: PPUSH
55632: CALL_OW 256
55636: PUSH
55637: LD_INT 1000
55639: LESS
55640: IFFALSE 55664
// ComRepairVehicle ( group [ i ] , x ) else
55642: LD_VAR 0 4
55646: PUSH
55647: LD_VAR 0 7
55651: ARRAY
55652: PPUSH
55653: LD_VAR 0 10
55657: PPUSH
55658: CALL_OW 129
55662: GO 55712
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55664: LD_VAR 0 23
55668: PUSH
55669: LD_VAR 0 4
55673: PUSH
55674: LD_VAR 0 7
55678: ARRAY
55679: PPUSH
55680: CALL_OW 256
55684: PUSH
55685: LD_INT 1000
55687: LESS
55688: AND
55689: NOT
55690: IFFALSE 55712
// ComEnterUnit ( group [ i ] , x ) ;
55692: LD_VAR 0 4
55696: PUSH
55697: LD_VAR 0 7
55701: ARRAY
55702: PPUSH
55703: LD_VAR 0 10
55707: PPUSH
55708: CALL_OW 120
// end ; continue ;
55712: GO 55059
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55714: LD_VAR 0 23
55718: PUSH
55719: LD_VAR 0 4
55723: PUSH
55724: LD_VAR 0 7
55728: ARRAY
55729: PPUSH
55730: CALL_OW 247
55734: PUSH
55735: LD_INT 1
55737: EQUAL
55738: AND
55739: IFFALSE 56217
// begin if group [ i ] in healers then
55741: LD_VAR 0 4
55745: PUSH
55746: LD_VAR 0 7
55750: ARRAY
55751: PUSH
55752: LD_VAR 0 31
55756: IN
55757: IFFALSE 56030
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55759: LD_VAR 0 4
55763: PUSH
55764: LD_VAR 0 7
55768: ARRAY
55769: PPUSH
55770: LD_VAR 0 23
55774: PPUSH
55775: CALL_OW 308
55779: NOT
55780: PUSH
55781: LD_VAR 0 4
55785: PUSH
55786: LD_VAR 0 7
55790: ARRAY
55791: PPUSH
55792: CALL_OW 314
55796: NOT
55797: AND
55798: IFFALSE 55822
// ComMoveToArea ( group [ i ] , f_heal ) else
55800: LD_VAR 0 4
55804: PUSH
55805: LD_VAR 0 7
55809: ARRAY
55810: PPUSH
55811: LD_VAR 0 23
55815: PPUSH
55816: CALL_OW 113
55820: GO 56028
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55822: LD_VAR 0 4
55826: PUSH
55827: LD_VAR 0 7
55831: ARRAY
55832: PPUSH
55833: CALL 54440 0 1
55837: PPUSH
55838: CALL_OW 256
55842: PUSH
55843: LD_INT 1000
55845: EQUAL
55846: IFFALSE 55865
// ComStop ( group [ i ] ) else
55848: LD_VAR 0 4
55852: PUSH
55853: LD_VAR 0 7
55857: ARRAY
55858: PPUSH
55859: CALL_OW 141
55863: GO 56028
// if not HasTask ( group [ i ] ) and to_heal then
55865: LD_VAR 0 4
55869: PUSH
55870: LD_VAR 0 7
55874: ARRAY
55875: PPUSH
55876: CALL_OW 314
55880: NOT
55881: PUSH
55882: LD_VAR 0 30
55886: AND
55887: IFFALSE 56028
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55889: LD_ADDR_VAR 0 13
55893: PUSH
55894: LD_VAR 0 30
55898: PPUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 54
55904: PUSH
55905: EMPTY
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PPUSH
55912: CALL_OW 72
55916: PPUSH
55917: LD_VAR 0 4
55921: PUSH
55922: LD_VAR 0 7
55926: ARRAY
55927: PPUSH
55928: CALL_OW 74
55932: ST_TO_ADDR
// if z then
55933: LD_VAR 0 13
55937: IFFALSE 56028
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55939: LD_INT 91
55941: PUSH
55942: LD_VAR 0 13
55946: PUSH
55947: LD_INT 10
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 81
55957: PUSH
55958: LD_VAR 0 13
55962: PPUSH
55963: CALL_OW 255
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PPUSH
55976: CALL_OW 69
55980: PUSH
55981: LD_INT 0
55983: EQUAL
55984: IFFALSE 56008
// ComHeal ( group [ i ] , z ) else
55986: LD_VAR 0 4
55990: PUSH
55991: LD_VAR 0 7
55995: ARRAY
55996: PPUSH
55997: LD_VAR 0 13
56001: PPUSH
56002: CALL_OW 128
56006: GO 56028
// ComMoveToArea ( group [ i ] , f_heal ) ;
56008: LD_VAR 0 4
56012: PUSH
56013: LD_VAR 0 7
56017: ARRAY
56018: PPUSH
56019: LD_VAR 0 23
56023: PPUSH
56024: CALL_OW 113
// end ; continue ;
56028: GO 55059
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56030: LD_VAR 0 4
56034: PUSH
56035: LD_VAR 0 7
56039: ARRAY
56040: PPUSH
56041: CALL_OW 256
56045: PUSH
56046: LD_INT 700
56048: LESS
56049: PUSH
56050: LD_VAR 0 4
56054: PUSH
56055: LD_VAR 0 7
56059: ARRAY
56060: PUSH
56061: LD_VAR 0 30
56065: IN
56066: NOT
56067: AND
56068: IFFALSE 56092
// to_heal := to_heal union group [ i ] ;
56070: LD_ADDR_VAR 0 30
56074: PUSH
56075: LD_VAR 0 30
56079: PUSH
56080: LD_VAR 0 4
56084: PUSH
56085: LD_VAR 0 7
56089: ARRAY
56090: UNION
56091: ST_TO_ADDR
// if group [ i ] in to_heal then
56092: LD_VAR 0 4
56096: PUSH
56097: LD_VAR 0 7
56101: ARRAY
56102: PUSH
56103: LD_VAR 0 30
56107: IN
56108: IFFALSE 56217
// begin if GetLives ( group [ i ] ) = 1000 then
56110: LD_VAR 0 4
56114: PUSH
56115: LD_VAR 0 7
56119: ARRAY
56120: PPUSH
56121: CALL_OW 256
56125: PUSH
56126: LD_INT 1000
56128: EQUAL
56129: IFFALSE 56155
// to_heal := to_heal diff group [ i ] else
56131: LD_ADDR_VAR 0 30
56135: PUSH
56136: LD_VAR 0 30
56140: PUSH
56141: LD_VAR 0 4
56145: PUSH
56146: LD_VAR 0 7
56150: ARRAY
56151: DIFF
56152: ST_TO_ADDR
56153: GO 56217
// begin if not IsInArea ( group [ i ] , to_heal ) then
56155: LD_VAR 0 4
56159: PUSH
56160: LD_VAR 0 7
56164: ARRAY
56165: PPUSH
56166: LD_VAR 0 30
56170: PPUSH
56171: CALL_OW 308
56175: NOT
56176: IFFALSE 56200
// ComMoveToArea ( group [ i ] , f_heal ) else
56178: LD_VAR 0 4
56182: PUSH
56183: LD_VAR 0 7
56187: ARRAY
56188: PPUSH
56189: LD_VAR 0 23
56193: PPUSH
56194: CALL_OW 113
56198: GO 56215
// ComHold ( group [ i ] ) ;
56200: LD_VAR 0 4
56204: PUSH
56205: LD_VAR 0 7
56209: ARRAY
56210: PPUSH
56211: CALL_OW 140
// continue ;
56215: GO 55059
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56217: LD_VAR 0 4
56221: PUSH
56222: LD_VAR 0 7
56226: ARRAY
56227: PPUSH
56228: LD_INT 10
56230: PPUSH
56231: CALL 52837 0 2
56235: NOT
56236: PUSH
56237: LD_VAR 0 16
56241: PUSH
56242: LD_VAR 0 7
56246: ARRAY
56247: PUSH
56248: EMPTY
56249: EQUAL
56250: NOT
56251: AND
56252: IFFALSE 56518
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56254: LD_VAR 0 4
56258: PUSH
56259: LD_VAR 0 7
56263: ARRAY
56264: PPUSH
56265: CALL_OW 262
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: IN
56280: IFFALSE 56321
// if GetFuel ( group [ i ] ) < 10 then
56282: LD_VAR 0 4
56286: PUSH
56287: LD_VAR 0 7
56291: ARRAY
56292: PPUSH
56293: CALL_OW 261
56297: PUSH
56298: LD_INT 10
56300: LESS
56301: IFFALSE 56321
// SetFuel ( group [ i ] , 12 ) ;
56303: LD_VAR 0 4
56307: PUSH
56308: LD_VAR 0 7
56312: ARRAY
56313: PPUSH
56314: LD_INT 12
56316: PPUSH
56317: CALL_OW 240
// if units_path [ i ] then
56321: LD_VAR 0 16
56325: PUSH
56326: LD_VAR 0 7
56330: ARRAY
56331: IFFALSE 56516
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56333: LD_VAR 0 4
56337: PUSH
56338: LD_VAR 0 7
56342: ARRAY
56343: PPUSH
56344: LD_VAR 0 16
56348: PUSH
56349: LD_VAR 0 7
56353: ARRAY
56354: PUSH
56355: LD_INT 1
56357: ARRAY
56358: PUSH
56359: LD_INT 1
56361: ARRAY
56362: PPUSH
56363: LD_VAR 0 16
56367: PUSH
56368: LD_VAR 0 7
56372: ARRAY
56373: PUSH
56374: LD_INT 1
56376: ARRAY
56377: PUSH
56378: LD_INT 2
56380: ARRAY
56381: PPUSH
56382: CALL_OW 297
56386: PUSH
56387: LD_INT 6
56389: GREATER
56390: IFFALSE 56465
// begin if not HasTask ( group [ i ] ) then
56392: LD_VAR 0 4
56396: PUSH
56397: LD_VAR 0 7
56401: ARRAY
56402: PPUSH
56403: CALL_OW 314
56407: NOT
56408: IFFALSE 56463
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56410: LD_VAR 0 4
56414: PUSH
56415: LD_VAR 0 7
56419: ARRAY
56420: PPUSH
56421: LD_VAR 0 16
56425: PUSH
56426: LD_VAR 0 7
56430: ARRAY
56431: PUSH
56432: LD_INT 1
56434: ARRAY
56435: PUSH
56436: LD_INT 1
56438: ARRAY
56439: PPUSH
56440: LD_VAR 0 16
56444: PUSH
56445: LD_VAR 0 7
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PUSH
56455: LD_INT 2
56457: ARRAY
56458: PPUSH
56459: CALL_OW 114
// end else
56463: GO 56516
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56465: LD_ADDR_VAR 0 15
56469: PUSH
56470: LD_VAR 0 16
56474: PUSH
56475: LD_VAR 0 7
56479: ARRAY
56480: PPUSH
56481: LD_INT 1
56483: PPUSH
56484: CALL_OW 3
56488: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56489: LD_ADDR_VAR 0 16
56493: PUSH
56494: LD_VAR 0 16
56498: PPUSH
56499: LD_VAR 0 7
56503: PPUSH
56504: LD_VAR 0 15
56508: PPUSH
56509: CALL_OW 1
56513: ST_TO_ADDR
// continue ;
56514: GO 55059
// end ; end ; end else
56516: GO 59154
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56518: LD_ADDR_VAR 0 14
56522: PUSH
56523: LD_INT 81
56525: PUSH
56526: LD_VAR 0 4
56530: PUSH
56531: LD_VAR 0 7
56535: ARRAY
56536: PPUSH
56537: CALL_OW 255
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PPUSH
56546: CALL_OW 69
56550: ST_TO_ADDR
// if not tmp then
56551: LD_VAR 0 14
56555: NOT
56556: IFFALSE 56560
// continue ;
56558: GO 55059
// if f_ignore_area then
56560: LD_VAR 0 17
56564: IFFALSE 56652
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56566: LD_ADDR_VAR 0 15
56570: PUSH
56571: LD_VAR 0 14
56575: PPUSH
56576: LD_INT 3
56578: PUSH
56579: LD_INT 92
56581: PUSH
56582: LD_VAR 0 17
56586: PUSH
56587: LD_INT 1
56589: ARRAY
56590: PUSH
56591: LD_VAR 0 17
56595: PUSH
56596: LD_INT 2
56598: ARRAY
56599: PUSH
56600: LD_VAR 0 17
56604: PUSH
56605: LD_INT 3
56607: ARRAY
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PPUSH
56619: CALL_OW 72
56623: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56624: LD_VAR 0 14
56628: PUSH
56629: LD_VAR 0 15
56633: DIFF
56634: IFFALSE 56652
// tmp := tmp diff tmp2 ;
56636: LD_ADDR_VAR 0 14
56640: PUSH
56641: LD_VAR 0 14
56645: PUSH
56646: LD_VAR 0 15
56650: DIFF
56651: ST_TO_ADDR
// end ; if not f_murder then
56652: LD_VAR 0 20
56656: NOT
56657: IFFALSE 56715
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56659: LD_ADDR_VAR 0 15
56663: PUSH
56664: LD_VAR 0 14
56668: PPUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 50
56674: PUSH
56675: EMPTY
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PPUSH
56682: CALL_OW 72
56686: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56687: LD_VAR 0 14
56691: PUSH
56692: LD_VAR 0 15
56696: DIFF
56697: IFFALSE 56715
// tmp := tmp diff tmp2 ;
56699: LD_ADDR_VAR 0 14
56703: PUSH
56704: LD_VAR 0 14
56708: PUSH
56709: LD_VAR 0 15
56713: DIFF
56714: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56715: LD_ADDR_VAR 0 14
56719: PUSH
56720: LD_VAR 0 4
56724: PUSH
56725: LD_VAR 0 7
56729: ARRAY
56730: PPUSH
56731: LD_VAR 0 14
56735: PPUSH
56736: LD_INT 1
56738: PPUSH
56739: LD_INT 1
56741: PPUSH
56742: CALL 26486 0 4
56746: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56747: LD_VAR 0 4
56751: PUSH
56752: LD_VAR 0 7
56756: ARRAY
56757: PPUSH
56758: CALL_OW 257
56762: PUSH
56763: LD_INT 1
56765: EQUAL
56766: IFFALSE 57214
// begin if WantPlant ( group [ i ] ) then
56768: LD_VAR 0 4
56772: PUSH
56773: LD_VAR 0 7
56777: ARRAY
56778: PPUSH
56779: CALL 25987 0 1
56783: IFFALSE 56787
// continue ;
56785: GO 55059
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56787: LD_VAR 0 18
56791: PUSH
56792: LD_VAR 0 4
56796: PUSH
56797: LD_VAR 0 7
56801: ARRAY
56802: PPUSH
56803: CALL_OW 310
56807: NOT
56808: AND
56809: PUSH
56810: LD_VAR 0 14
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PUSH
56819: LD_VAR 0 14
56823: PPUSH
56824: LD_INT 21
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 58
56836: PUSH
56837: EMPTY
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PPUSH
56844: CALL_OW 72
56848: IN
56849: AND
56850: IFFALSE 56886
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56852: LD_VAR 0 4
56856: PUSH
56857: LD_VAR 0 7
56861: ARRAY
56862: PPUSH
56863: LD_VAR 0 14
56867: PUSH
56868: LD_INT 1
56870: ARRAY
56871: PPUSH
56872: CALL_OW 120
// attacking := true ;
56876: LD_ADDR_VAR 0 29
56880: PUSH
56881: LD_INT 1
56883: ST_TO_ADDR
// continue ;
56884: GO 55059
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56886: LD_VAR 0 26
56890: PUSH
56891: LD_VAR 0 4
56895: PUSH
56896: LD_VAR 0 7
56900: ARRAY
56901: PPUSH
56902: CALL_OW 257
56906: PUSH
56907: LD_INT 1
56909: EQUAL
56910: AND
56911: PUSH
56912: LD_VAR 0 4
56916: PUSH
56917: LD_VAR 0 7
56921: ARRAY
56922: PPUSH
56923: CALL_OW 256
56927: PUSH
56928: LD_INT 800
56930: LESS
56931: AND
56932: PUSH
56933: LD_VAR 0 4
56937: PUSH
56938: LD_VAR 0 7
56942: ARRAY
56943: PPUSH
56944: CALL_OW 318
56948: NOT
56949: AND
56950: IFFALSE 56967
// ComCrawl ( group [ i ] ) ;
56952: LD_VAR 0 4
56956: PUSH
56957: LD_VAR 0 7
56961: ARRAY
56962: PPUSH
56963: CALL_OW 137
// if f_mines then
56967: LD_VAR 0 21
56971: IFFALSE 57214
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56973: LD_VAR 0 14
56977: PUSH
56978: LD_INT 1
56980: ARRAY
56981: PPUSH
56982: CALL_OW 247
56986: PUSH
56987: LD_INT 3
56989: EQUAL
56990: PUSH
56991: LD_VAR 0 14
56995: PUSH
56996: LD_INT 1
56998: ARRAY
56999: PUSH
57000: LD_VAR 0 27
57004: IN
57005: NOT
57006: AND
57007: IFFALSE 57214
// begin x := GetX ( tmp [ 1 ] ) ;
57009: LD_ADDR_VAR 0 10
57013: PUSH
57014: LD_VAR 0 14
57018: PUSH
57019: LD_INT 1
57021: ARRAY
57022: PPUSH
57023: CALL_OW 250
57027: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57028: LD_ADDR_VAR 0 11
57032: PUSH
57033: LD_VAR 0 14
57037: PUSH
57038: LD_INT 1
57040: ARRAY
57041: PPUSH
57042: CALL_OW 251
57046: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57047: LD_ADDR_VAR 0 12
57051: PUSH
57052: LD_VAR 0 4
57056: PUSH
57057: LD_VAR 0 7
57061: ARRAY
57062: PPUSH
57063: CALL 52922 0 1
57067: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57068: LD_VAR 0 4
57072: PUSH
57073: LD_VAR 0 7
57077: ARRAY
57078: PPUSH
57079: LD_VAR 0 10
57083: PPUSH
57084: LD_VAR 0 11
57088: PPUSH
57089: LD_VAR 0 14
57093: PUSH
57094: LD_INT 1
57096: ARRAY
57097: PPUSH
57098: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57102: LD_VAR 0 4
57106: PUSH
57107: LD_VAR 0 7
57111: ARRAY
57112: PPUSH
57113: LD_VAR 0 10
57117: PPUSH
57118: LD_VAR 0 12
57122: PPUSH
57123: LD_INT 7
57125: PPUSH
57126: CALL_OW 272
57130: PPUSH
57131: LD_VAR 0 11
57135: PPUSH
57136: LD_VAR 0 12
57140: PPUSH
57141: LD_INT 7
57143: PPUSH
57144: CALL_OW 273
57148: PPUSH
57149: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57153: LD_VAR 0 4
57157: PUSH
57158: LD_VAR 0 7
57162: ARRAY
57163: PPUSH
57164: LD_INT 71
57166: PPUSH
57167: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57171: LD_ADDR_VAR 0 27
57175: PUSH
57176: LD_VAR 0 27
57180: PPUSH
57181: LD_VAR 0 27
57185: PUSH
57186: LD_INT 1
57188: PLUS
57189: PPUSH
57190: LD_VAR 0 14
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: PPUSH
57199: CALL_OW 1
57203: ST_TO_ADDR
// attacking := true ;
57204: LD_ADDR_VAR 0 29
57208: PUSH
57209: LD_INT 1
57211: ST_TO_ADDR
// continue ;
57212: GO 55059
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57214: LD_VAR 0 4
57218: PUSH
57219: LD_VAR 0 7
57223: ARRAY
57224: PPUSH
57225: CALL_OW 257
57229: PUSH
57230: LD_INT 17
57232: EQUAL
57233: PUSH
57234: LD_VAR 0 4
57238: PUSH
57239: LD_VAR 0 7
57243: ARRAY
57244: PPUSH
57245: CALL_OW 110
57249: PUSH
57250: LD_INT 71
57252: EQUAL
57253: NOT
57254: AND
57255: IFFALSE 57401
// begin attacking := false ;
57257: LD_ADDR_VAR 0 29
57261: PUSH
57262: LD_INT 0
57264: ST_TO_ADDR
// k := 5 ;
57265: LD_ADDR_VAR 0 9
57269: PUSH
57270: LD_INT 5
57272: ST_TO_ADDR
// if tmp < k then
57273: LD_VAR 0 14
57277: PUSH
57278: LD_VAR 0 9
57282: LESS
57283: IFFALSE 57295
// k := tmp ;
57285: LD_ADDR_VAR 0 9
57289: PUSH
57290: LD_VAR 0 14
57294: ST_TO_ADDR
// for j = 1 to k do
57295: LD_ADDR_VAR 0 8
57299: PUSH
57300: DOUBLE
57301: LD_INT 1
57303: DEC
57304: ST_TO_ADDR
57305: LD_VAR 0 9
57309: PUSH
57310: FOR_TO
57311: IFFALSE 57399
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57313: LD_VAR 0 14
57317: PUSH
57318: LD_VAR 0 8
57322: ARRAY
57323: PUSH
57324: LD_VAR 0 14
57328: PPUSH
57329: LD_INT 58
57331: PUSH
57332: EMPTY
57333: LIST
57334: PPUSH
57335: CALL_OW 72
57339: IN
57340: NOT
57341: IFFALSE 57397
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57343: LD_VAR 0 4
57347: PUSH
57348: LD_VAR 0 7
57352: ARRAY
57353: PPUSH
57354: LD_VAR 0 14
57358: PUSH
57359: LD_VAR 0 8
57363: ARRAY
57364: PPUSH
57365: CALL_OW 115
// attacking := true ;
57369: LD_ADDR_VAR 0 29
57373: PUSH
57374: LD_INT 1
57376: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57377: LD_VAR 0 4
57381: PUSH
57382: LD_VAR 0 7
57386: ARRAY
57387: PPUSH
57388: LD_INT 71
57390: PPUSH
57391: CALL_OW 109
// continue ;
57395: GO 57310
// end ; end ;
57397: GO 57310
57399: POP
57400: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57401: LD_VAR 0 4
57405: PUSH
57406: LD_VAR 0 7
57410: ARRAY
57411: PPUSH
57412: CALL_OW 257
57416: PUSH
57417: LD_INT 8
57419: EQUAL
57420: PUSH
57421: LD_VAR 0 4
57425: PUSH
57426: LD_VAR 0 7
57430: ARRAY
57431: PPUSH
57432: CALL_OW 264
57436: PUSH
57437: LD_INT 28
57439: PUSH
57440: LD_INT 45
57442: PUSH
57443: LD_INT 7
57445: PUSH
57446: LD_INT 47
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: IN
57455: OR
57456: IFFALSE 57686
// begin attacking := false ;
57458: LD_ADDR_VAR 0 29
57462: PUSH
57463: LD_INT 0
57465: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57466: LD_VAR 0 14
57470: PUSH
57471: LD_INT 1
57473: ARRAY
57474: PPUSH
57475: CALL_OW 266
57479: PUSH
57480: LD_INT 32
57482: PUSH
57483: LD_INT 31
57485: PUSH
57486: LD_INT 33
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: LD_INT 5
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: IN
57502: IFFALSE 57686
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57504: LD_ADDR_VAR 0 9
57508: PUSH
57509: LD_VAR 0 14
57513: PUSH
57514: LD_INT 1
57516: ARRAY
57517: PPUSH
57518: CALL_OW 266
57522: PPUSH
57523: LD_VAR 0 14
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PPUSH
57532: CALL_OW 250
57536: PPUSH
57537: LD_VAR 0 14
57541: PUSH
57542: LD_INT 1
57544: ARRAY
57545: PPUSH
57546: CALL_OW 251
57550: PPUSH
57551: LD_VAR 0 14
57555: PUSH
57556: LD_INT 1
57558: ARRAY
57559: PPUSH
57560: CALL_OW 254
57564: PPUSH
57565: LD_VAR 0 14
57569: PUSH
57570: LD_INT 1
57572: ARRAY
57573: PPUSH
57574: CALL_OW 248
57578: PPUSH
57579: LD_INT 0
57581: PPUSH
57582: CALL 34298 0 6
57586: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57587: LD_ADDR_VAR 0 8
57591: PUSH
57592: LD_VAR 0 4
57596: PUSH
57597: LD_VAR 0 7
57601: ARRAY
57602: PPUSH
57603: LD_VAR 0 9
57607: PPUSH
57608: CALL 52985 0 2
57612: ST_TO_ADDR
// if j then
57613: LD_VAR 0 8
57617: IFFALSE 57686
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57619: LD_VAR 0 8
57623: PUSH
57624: LD_INT 1
57626: ARRAY
57627: PPUSH
57628: LD_VAR 0 8
57632: PUSH
57633: LD_INT 2
57635: ARRAY
57636: PPUSH
57637: CALL_OW 488
57641: IFFALSE 57686
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57643: LD_VAR 0 4
57647: PUSH
57648: LD_VAR 0 7
57652: ARRAY
57653: PPUSH
57654: LD_VAR 0 8
57658: PUSH
57659: LD_INT 1
57661: ARRAY
57662: PPUSH
57663: LD_VAR 0 8
57667: PUSH
57668: LD_INT 2
57670: ARRAY
57671: PPUSH
57672: CALL_OW 116
// attacking := true ;
57676: LD_ADDR_VAR 0 29
57680: PUSH
57681: LD_INT 1
57683: ST_TO_ADDR
// continue ;
57684: GO 55059
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57686: LD_VAR 0 4
57690: PUSH
57691: LD_VAR 0 7
57695: ARRAY
57696: PPUSH
57697: CALL_OW 265
57701: PUSH
57702: LD_INT 11
57704: EQUAL
57705: IFFALSE 57983
// begin k := 10 ;
57707: LD_ADDR_VAR 0 9
57711: PUSH
57712: LD_INT 10
57714: ST_TO_ADDR
// x := 0 ;
57715: LD_ADDR_VAR 0 10
57719: PUSH
57720: LD_INT 0
57722: ST_TO_ADDR
// if tmp < k then
57723: LD_VAR 0 14
57727: PUSH
57728: LD_VAR 0 9
57732: LESS
57733: IFFALSE 57745
// k := tmp ;
57735: LD_ADDR_VAR 0 9
57739: PUSH
57740: LD_VAR 0 14
57744: ST_TO_ADDR
// for j = k downto 1 do
57745: LD_ADDR_VAR 0 8
57749: PUSH
57750: DOUBLE
57751: LD_VAR 0 9
57755: INC
57756: ST_TO_ADDR
57757: LD_INT 1
57759: PUSH
57760: FOR_DOWNTO
57761: IFFALSE 57836
// begin if GetType ( tmp [ j ] ) = unit_human then
57763: LD_VAR 0 14
57767: PUSH
57768: LD_VAR 0 8
57772: ARRAY
57773: PPUSH
57774: CALL_OW 247
57778: PUSH
57779: LD_INT 1
57781: EQUAL
57782: IFFALSE 57834
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57784: LD_VAR 0 4
57788: PUSH
57789: LD_VAR 0 7
57793: ARRAY
57794: PPUSH
57795: LD_VAR 0 14
57799: PUSH
57800: LD_VAR 0 8
57804: ARRAY
57805: PPUSH
57806: CALL 53256 0 2
// x := tmp [ j ] ;
57810: LD_ADDR_VAR 0 10
57814: PUSH
57815: LD_VAR 0 14
57819: PUSH
57820: LD_VAR 0 8
57824: ARRAY
57825: ST_TO_ADDR
// attacking := true ;
57826: LD_ADDR_VAR 0 29
57830: PUSH
57831: LD_INT 1
57833: ST_TO_ADDR
// end ; end ;
57834: GO 57760
57836: POP
57837: POP
// if not x then
57838: LD_VAR 0 10
57842: NOT
57843: IFFALSE 57983
// begin attacking := true ;
57845: LD_ADDR_VAR 0 29
57849: PUSH
57850: LD_INT 1
57852: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57853: LD_VAR 0 4
57857: PUSH
57858: LD_VAR 0 7
57862: ARRAY
57863: PPUSH
57864: CALL_OW 250
57868: PPUSH
57869: LD_VAR 0 4
57873: PUSH
57874: LD_VAR 0 7
57878: ARRAY
57879: PPUSH
57880: CALL_OW 251
57884: PPUSH
57885: CALL_OW 546
57889: PUSH
57890: LD_INT 2
57892: ARRAY
57893: PUSH
57894: LD_VAR 0 14
57898: PUSH
57899: LD_INT 1
57901: ARRAY
57902: PPUSH
57903: CALL_OW 250
57907: PPUSH
57908: LD_VAR 0 14
57912: PUSH
57913: LD_INT 1
57915: ARRAY
57916: PPUSH
57917: CALL_OW 251
57921: PPUSH
57922: CALL_OW 546
57926: PUSH
57927: LD_INT 2
57929: ARRAY
57930: EQUAL
57931: IFFALSE 57959
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57933: LD_VAR 0 4
57937: PUSH
57938: LD_VAR 0 7
57942: ARRAY
57943: PPUSH
57944: LD_VAR 0 14
57948: PUSH
57949: LD_INT 1
57951: ARRAY
57952: PPUSH
57953: CALL 53256 0 2
57957: GO 57983
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57959: LD_VAR 0 4
57963: PUSH
57964: LD_VAR 0 7
57968: ARRAY
57969: PPUSH
57970: LD_VAR 0 14
57974: PUSH
57975: LD_INT 1
57977: ARRAY
57978: PPUSH
57979: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
57983: LD_VAR 0 4
57987: PUSH
57988: LD_VAR 0 7
57992: ARRAY
57993: PPUSH
57994: CALL_OW 264
57998: PUSH
57999: LD_INT 29
58001: EQUAL
58002: IFFALSE 58368
// begin if WantsToAttack ( group [ i ] ) in bombed then
58004: LD_VAR 0 4
58008: PUSH
58009: LD_VAR 0 7
58013: ARRAY
58014: PPUSH
58015: CALL_OW 319
58019: PUSH
58020: LD_VAR 0 28
58024: IN
58025: IFFALSE 58029
// continue ;
58027: GO 55059
// k := 8 ;
58029: LD_ADDR_VAR 0 9
58033: PUSH
58034: LD_INT 8
58036: ST_TO_ADDR
// x := 0 ;
58037: LD_ADDR_VAR 0 10
58041: PUSH
58042: LD_INT 0
58044: ST_TO_ADDR
// if tmp < k then
58045: LD_VAR 0 14
58049: PUSH
58050: LD_VAR 0 9
58054: LESS
58055: IFFALSE 58067
// k := tmp ;
58057: LD_ADDR_VAR 0 9
58061: PUSH
58062: LD_VAR 0 14
58066: ST_TO_ADDR
// for j = 1 to k do
58067: LD_ADDR_VAR 0 8
58071: PUSH
58072: DOUBLE
58073: LD_INT 1
58075: DEC
58076: ST_TO_ADDR
58077: LD_VAR 0 9
58081: PUSH
58082: FOR_TO
58083: IFFALSE 58215
// begin if GetType ( tmp [ j ] ) = unit_building then
58085: LD_VAR 0 14
58089: PUSH
58090: LD_VAR 0 8
58094: ARRAY
58095: PPUSH
58096: CALL_OW 247
58100: PUSH
58101: LD_INT 3
58103: EQUAL
58104: IFFALSE 58213
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58106: LD_VAR 0 14
58110: PUSH
58111: LD_VAR 0 8
58115: ARRAY
58116: PUSH
58117: LD_VAR 0 28
58121: IN
58122: NOT
58123: PUSH
58124: LD_VAR 0 14
58128: PUSH
58129: LD_VAR 0 8
58133: ARRAY
58134: PPUSH
58135: CALL_OW 313
58139: AND
58140: IFFALSE 58213
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58142: LD_VAR 0 4
58146: PUSH
58147: LD_VAR 0 7
58151: ARRAY
58152: PPUSH
58153: LD_VAR 0 14
58157: PUSH
58158: LD_VAR 0 8
58162: ARRAY
58163: PPUSH
58164: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58168: LD_ADDR_VAR 0 28
58172: PUSH
58173: LD_VAR 0 28
58177: PPUSH
58178: LD_VAR 0 28
58182: PUSH
58183: LD_INT 1
58185: PLUS
58186: PPUSH
58187: LD_VAR 0 14
58191: PUSH
58192: LD_VAR 0 8
58196: ARRAY
58197: PPUSH
58198: CALL_OW 1
58202: ST_TO_ADDR
// attacking := true ;
58203: LD_ADDR_VAR 0 29
58207: PUSH
58208: LD_INT 1
58210: ST_TO_ADDR
// break ;
58211: GO 58215
// end ; end ;
58213: GO 58082
58215: POP
58216: POP
// if not attacking and f_attack_depot then
58217: LD_VAR 0 29
58221: NOT
58222: PUSH
58223: LD_VAR 0 25
58227: AND
58228: IFFALSE 58323
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58230: LD_ADDR_VAR 0 13
58234: PUSH
58235: LD_VAR 0 14
58239: PPUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 30
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 30
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: PPUSH
58268: CALL_OW 72
58272: ST_TO_ADDR
// if z then
58273: LD_VAR 0 13
58277: IFFALSE 58323
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58279: LD_VAR 0 4
58283: PUSH
58284: LD_VAR 0 7
58288: ARRAY
58289: PPUSH
58290: LD_VAR 0 13
58294: PPUSH
58295: LD_VAR 0 4
58299: PUSH
58300: LD_VAR 0 7
58304: ARRAY
58305: PPUSH
58306: CALL_OW 74
58310: PPUSH
58311: CALL_OW 115
// attacking := true ;
58315: LD_ADDR_VAR 0 29
58319: PUSH
58320: LD_INT 1
58322: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58323: LD_VAR 0 4
58327: PUSH
58328: LD_VAR 0 7
58332: ARRAY
58333: PPUSH
58334: CALL_OW 256
58338: PUSH
58339: LD_INT 500
58341: LESS
58342: IFFALSE 58368
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58344: LD_VAR 0 4
58348: PUSH
58349: LD_VAR 0 7
58353: ARRAY
58354: PPUSH
58355: LD_VAR 0 14
58359: PUSH
58360: LD_INT 1
58362: ARRAY
58363: PPUSH
58364: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58368: LD_VAR 0 4
58372: PUSH
58373: LD_VAR 0 7
58377: ARRAY
58378: PPUSH
58379: CALL_OW 264
58383: PUSH
58384: LD_INT 49
58386: EQUAL
58387: IFFALSE 58508
// begin if not HasTask ( group [ i ] ) then
58389: LD_VAR 0 4
58393: PUSH
58394: LD_VAR 0 7
58398: ARRAY
58399: PPUSH
58400: CALL_OW 314
58404: NOT
58405: IFFALSE 58508
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58407: LD_ADDR_VAR 0 9
58411: PUSH
58412: LD_INT 81
58414: PUSH
58415: LD_VAR 0 4
58419: PUSH
58420: LD_VAR 0 7
58424: ARRAY
58425: PPUSH
58426: CALL_OW 255
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PPUSH
58435: CALL_OW 69
58439: PPUSH
58440: LD_VAR 0 4
58444: PUSH
58445: LD_VAR 0 7
58449: ARRAY
58450: PPUSH
58451: CALL_OW 74
58455: ST_TO_ADDR
// if k then
58456: LD_VAR 0 9
58460: IFFALSE 58508
// if GetDistUnits ( group [ i ] , k ) > 10 then
58462: LD_VAR 0 4
58466: PUSH
58467: LD_VAR 0 7
58471: ARRAY
58472: PPUSH
58473: LD_VAR 0 9
58477: PPUSH
58478: CALL_OW 296
58482: PUSH
58483: LD_INT 10
58485: GREATER
58486: IFFALSE 58508
// ComMoveUnit ( group [ i ] , k ) ;
58488: LD_VAR 0 4
58492: PUSH
58493: LD_VAR 0 7
58497: ARRAY
58498: PPUSH
58499: LD_VAR 0 9
58503: PPUSH
58504: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58508: LD_VAR 0 4
58512: PUSH
58513: LD_VAR 0 7
58517: ARRAY
58518: PPUSH
58519: CALL_OW 256
58523: PUSH
58524: LD_INT 250
58526: LESS
58527: PUSH
58528: LD_VAR 0 4
58532: PUSH
58533: LD_VAR 0 7
58537: ARRAY
58538: PUSH
58539: LD_INT 21
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 23
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PPUSH
58563: CALL_OW 69
58567: IN
58568: AND
58569: IFFALSE 58694
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58571: LD_ADDR_VAR 0 9
58575: PUSH
58576: LD_OWVAR 3
58580: PUSH
58581: LD_VAR 0 4
58585: PUSH
58586: LD_VAR 0 7
58590: ARRAY
58591: DIFF
58592: PPUSH
58593: LD_VAR 0 4
58597: PUSH
58598: LD_VAR 0 7
58602: ARRAY
58603: PPUSH
58604: CALL_OW 74
58608: ST_TO_ADDR
// if not k then
58609: LD_VAR 0 9
58613: NOT
58614: IFFALSE 58618
// continue ;
58616: GO 55059
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58618: LD_VAR 0 9
58622: PUSH
58623: LD_INT 81
58625: PUSH
58626: LD_VAR 0 4
58630: PUSH
58631: LD_VAR 0 7
58635: ARRAY
58636: PPUSH
58637: CALL_OW 255
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PPUSH
58646: CALL_OW 69
58650: IN
58651: PUSH
58652: LD_VAR 0 9
58656: PPUSH
58657: LD_VAR 0 4
58661: PUSH
58662: LD_VAR 0 7
58666: ARRAY
58667: PPUSH
58668: CALL_OW 296
58672: PUSH
58673: LD_INT 5
58675: LESS
58676: AND
58677: IFFALSE 58694
// ComAutodestruct ( group [ i ] ) ;
58679: LD_VAR 0 4
58683: PUSH
58684: LD_VAR 0 7
58688: ARRAY
58689: PPUSH
58690: CALL 53154 0 1
// end ; if f_attack_depot then
58694: LD_VAR 0 25
58698: IFFALSE 58810
// begin k := 6 ;
58700: LD_ADDR_VAR 0 9
58704: PUSH
58705: LD_INT 6
58707: ST_TO_ADDR
// if tmp < k then
58708: LD_VAR 0 14
58712: PUSH
58713: LD_VAR 0 9
58717: LESS
58718: IFFALSE 58730
// k := tmp ;
58720: LD_ADDR_VAR 0 9
58724: PUSH
58725: LD_VAR 0 14
58729: ST_TO_ADDR
// for j = 1 to k do
58730: LD_ADDR_VAR 0 8
58734: PUSH
58735: DOUBLE
58736: LD_INT 1
58738: DEC
58739: ST_TO_ADDR
58740: LD_VAR 0 9
58744: PUSH
58745: FOR_TO
58746: IFFALSE 58808
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58748: LD_VAR 0 8
58752: PPUSH
58753: CALL_OW 266
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: IN
58768: IFFALSE 58806
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58770: LD_VAR 0 4
58774: PUSH
58775: LD_VAR 0 7
58779: ARRAY
58780: PPUSH
58781: LD_VAR 0 14
58785: PUSH
58786: LD_VAR 0 8
58790: ARRAY
58791: PPUSH
58792: CALL_OW 115
// attacking := true ;
58796: LD_ADDR_VAR 0 29
58800: PUSH
58801: LD_INT 1
58803: ST_TO_ADDR
// break ;
58804: GO 58808
// end ;
58806: GO 58745
58808: POP
58809: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58810: LD_VAR 0 4
58814: PUSH
58815: LD_VAR 0 7
58819: ARRAY
58820: PPUSH
58821: CALL_OW 302
58825: PUSH
58826: LD_VAR 0 29
58830: NOT
58831: AND
58832: IFFALSE 59154
// begin if GetTag ( group [ i ] ) = 71 then
58834: LD_VAR 0 4
58838: PUSH
58839: LD_VAR 0 7
58843: ARRAY
58844: PPUSH
58845: CALL_OW 110
58849: PUSH
58850: LD_INT 71
58852: EQUAL
58853: IFFALSE 58894
// begin if HasTask ( group [ i ] ) then
58855: LD_VAR 0 4
58859: PUSH
58860: LD_VAR 0 7
58864: ARRAY
58865: PPUSH
58866: CALL_OW 314
58870: IFFALSE 58876
// continue else
58872: GO 55059
58874: GO 58894
// SetTag ( group [ i ] , 0 ) ;
58876: LD_VAR 0 4
58880: PUSH
58881: LD_VAR 0 7
58885: ARRAY
58886: PPUSH
58887: LD_INT 0
58889: PPUSH
58890: CALL_OW 109
// end ; k := 8 ;
58894: LD_ADDR_VAR 0 9
58898: PUSH
58899: LD_INT 8
58901: ST_TO_ADDR
// x := 0 ;
58902: LD_ADDR_VAR 0 10
58906: PUSH
58907: LD_INT 0
58909: ST_TO_ADDR
// if tmp < k then
58910: LD_VAR 0 14
58914: PUSH
58915: LD_VAR 0 9
58919: LESS
58920: IFFALSE 58932
// k := tmp ;
58922: LD_ADDR_VAR 0 9
58926: PUSH
58927: LD_VAR 0 14
58931: ST_TO_ADDR
// for j = 1 to k do
58932: LD_ADDR_VAR 0 8
58936: PUSH
58937: DOUBLE
58938: LD_INT 1
58940: DEC
58941: ST_TO_ADDR
58942: LD_VAR 0 9
58946: PUSH
58947: FOR_TO
58948: IFFALSE 59046
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58950: LD_VAR 0 14
58954: PUSH
58955: LD_VAR 0 8
58959: ARRAY
58960: PPUSH
58961: CALL_OW 247
58965: PUSH
58966: LD_INT 1
58968: EQUAL
58969: PUSH
58970: LD_VAR 0 14
58974: PUSH
58975: LD_VAR 0 8
58979: ARRAY
58980: PPUSH
58981: CALL_OW 256
58985: PUSH
58986: LD_INT 250
58988: LESS
58989: PUSH
58990: LD_VAR 0 20
58994: AND
58995: PUSH
58996: LD_VAR 0 20
59000: NOT
59001: PUSH
59002: LD_VAR 0 14
59006: PUSH
59007: LD_VAR 0 8
59011: ARRAY
59012: PPUSH
59013: CALL_OW 256
59017: PUSH
59018: LD_INT 250
59020: GREATEREQUAL
59021: AND
59022: OR
59023: AND
59024: IFFALSE 59044
// begin x := tmp [ j ] ;
59026: LD_ADDR_VAR 0 10
59030: PUSH
59031: LD_VAR 0 14
59035: PUSH
59036: LD_VAR 0 8
59040: ARRAY
59041: ST_TO_ADDR
// break ;
59042: GO 59046
// end ;
59044: GO 58947
59046: POP
59047: POP
// if x then
59048: LD_VAR 0 10
59052: IFFALSE 59076
// ComAttackUnit ( group [ i ] , x ) else
59054: LD_VAR 0 4
59058: PUSH
59059: LD_VAR 0 7
59063: ARRAY
59064: PPUSH
59065: LD_VAR 0 10
59069: PPUSH
59070: CALL_OW 115
59074: GO 59100
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59076: LD_VAR 0 4
59080: PUSH
59081: LD_VAR 0 7
59085: ARRAY
59086: PPUSH
59087: LD_VAR 0 14
59091: PUSH
59092: LD_INT 1
59094: ARRAY
59095: PPUSH
59096: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59100: LD_VAR 0 4
59104: PUSH
59105: LD_VAR 0 7
59109: ARRAY
59110: PPUSH
59111: CALL_OW 314
59115: NOT
59116: IFFALSE 59154
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59118: LD_VAR 0 4
59122: PUSH
59123: LD_VAR 0 7
59127: ARRAY
59128: PPUSH
59129: LD_VAR 0 14
59133: PPUSH
59134: LD_VAR 0 4
59138: PUSH
59139: LD_VAR 0 7
59143: ARRAY
59144: PPUSH
59145: CALL_OW 74
59149: PPUSH
59150: CALL_OW 115
// end ; end ; end ;
59154: GO 55059
59156: POP
59157: POP
// wait ( 0 0$1 ) ;
59158: LD_INT 35
59160: PPUSH
59161: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59165: LD_VAR 0 4
59169: PUSH
59170: EMPTY
59171: EQUAL
59172: PUSH
59173: LD_INT 81
59175: PUSH
59176: LD_VAR 0 35
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PPUSH
59185: CALL_OW 69
59189: NOT
59190: OR
59191: IFFALSE 55044
// end ;
59193: LD_VAR 0 2
59197: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59198: LD_INT 0
59200: PPUSH
59201: PPUSH
59202: PPUSH
59203: PPUSH
// if not base_units then
59204: LD_VAR 0 1
59208: NOT
59209: IFFALSE 59213
// exit ;
59211: GO 59300
// result := false ;
59213: LD_ADDR_VAR 0 2
59217: PUSH
59218: LD_INT 0
59220: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59221: LD_ADDR_VAR 0 5
59225: PUSH
59226: LD_VAR 0 1
59230: PPUSH
59231: LD_INT 21
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PPUSH
59241: CALL_OW 72
59245: ST_TO_ADDR
// if not tmp then
59246: LD_VAR 0 5
59250: NOT
59251: IFFALSE 59255
// exit ;
59253: GO 59300
// for i in tmp do
59255: LD_ADDR_VAR 0 3
59259: PUSH
59260: LD_VAR 0 5
59264: PUSH
59265: FOR_IN
59266: IFFALSE 59298
// begin result := EnemyInRange ( i , 22 ) ;
59268: LD_ADDR_VAR 0 2
59272: PUSH
59273: LD_VAR 0 3
59277: PPUSH
59278: LD_INT 22
59280: PPUSH
59281: CALL 52837 0 2
59285: ST_TO_ADDR
// if result then
59286: LD_VAR 0 2
59290: IFFALSE 59296
// exit ;
59292: POP
59293: POP
59294: GO 59300
// end ;
59296: GO 59265
59298: POP
59299: POP
// end ;
59300: LD_VAR 0 2
59304: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59305: LD_INT 0
59307: PPUSH
59308: PPUSH
// if not units then
59309: LD_VAR 0 1
59313: NOT
59314: IFFALSE 59318
// exit ;
59316: GO 59388
// result := [ ] ;
59318: LD_ADDR_VAR 0 3
59322: PUSH
59323: EMPTY
59324: ST_TO_ADDR
// for i in units do
59325: LD_ADDR_VAR 0 4
59329: PUSH
59330: LD_VAR 0 1
59334: PUSH
59335: FOR_IN
59336: IFFALSE 59386
// if GetTag ( i ) = tag then
59338: LD_VAR 0 4
59342: PPUSH
59343: CALL_OW 110
59347: PUSH
59348: LD_VAR 0 2
59352: EQUAL
59353: IFFALSE 59384
// result := Insert ( result , result + 1 , i ) ;
59355: LD_ADDR_VAR 0 3
59359: PUSH
59360: LD_VAR 0 3
59364: PPUSH
59365: LD_VAR 0 3
59369: PUSH
59370: LD_INT 1
59372: PLUS
59373: PPUSH
59374: LD_VAR 0 4
59378: PPUSH
59379: CALL_OW 2
59383: ST_TO_ADDR
59384: GO 59335
59386: POP
59387: POP
// end ;
59388: LD_VAR 0 3
59392: RET
// export function IsDriver ( un ) ; begin
59393: LD_INT 0
59395: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59396: LD_ADDR_VAR 0 2
59400: PUSH
59401: LD_VAR 0 1
59405: PUSH
59406: LD_INT 55
59408: PUSH
59409: EMPTY
59410: LIST
59411: PPUSH
59412: CALL_OW 69
59416: IN
59417: ST_TO_ADDR
// end ;
59418: LD_VAR 0 2
59422: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59423: LD_INT 0
59425: PPUSH
59426: PPUSH
// list := [ ] ;
59427: LD_ADDR_VAR 0 5
59431: PUSH
59432: EMPTY
59433: ST_TO_ADDR
// case d of 0 :
59434: LD_VAR 0 3
59438: PUSH
59439: LD_INT 0
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59447
59445: GO 59580
59447: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59448: LD_ADDR_VAR 0 5
59452: PUSH
59453: LD_VAR 0 1
59457: PUSH
59458: LD_INT 4
59460: MINUS
59461: PUSH
59462: LD_VAR 0 2
59466: PUSH
59467: LD_INT 4
59469: MINUS
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 3
59486: MINUS
59487: PUSH
59488: LD_VAR 0 2
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_INT 4
59508: PLUS
59509: PUSH
59510: LD_VAR 0 2
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: PUSH
59523: LD_VAR 0 1
59527: PUSH
59528: LD_INT 3
59530: PLUS
59531: PUSH
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 3
59539: PLUS
59540: PUSH
59541: LD_INT 5
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: PUSH
59549: LD_VAR 0 1
59553: PUSH
59554: LD_VAR 0 2
59558: PUSH
59559: LD_INT 4
59561: PLUS
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// end ; 1 :
59578: GO 60278
59580: LD_INT 1
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59588
59586: GO 59721
59588: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59589: LD_ADDR_VAR 0 5
59593: PUSH
59594: LD_VAR 0 1
59598: PUSH
59599: LD_VAR 0 2
59603: PUSH
59604: LD_INT 4
59606: MINUS
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: LD_VAR 0 1
59620: PUSH
59621: LD_INT 3
59623: MINUS
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 3
59632: MINUS
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 4
59649: MINUS
59650: PUSH
59651: LD_VAR 0 2
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: LIST
59663: PUSH
59664: LD_VAR 0 1
59668: PUSH
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 3
59676: PLUS
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: PUSH
59686: LD_VAR 0 1
59690: PUSH
59691: LD_INT 4
59693: PLUS
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: LD_INT 4
59702: PLUS
59703: PUSH
59704: LD_INT 5
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// end ; 2 :
59719: GO 60278
59721: LD_INT 2
59723: DOUBLE
59724: EQUAL
59725: IFTRUE 59729
59727: GO 59858
59729: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59730: LD_ADDR_VAR 0 5
59734: PUSH
59735: LD_VAR 0 1
59739: PUSH
59740: LD_VAR 0 2
59744: PUSH
59745: LD_INT 3
59747: MINUS
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: PUSH
59757: LD_VAR 0 1
59761: PUSH
59762: LD_INT 4
59764: PLUS
59765: PUSH
59766: LD_VAR 0 2
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: PUSH
59779: LD_VAR 0 1
59783: PUSH
59784: LD_VAR 0 2
59788: PUSH
59789: LD_INT 4
59791: PLUS
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: LD_INT 3
59808: MINUS
59809: PUSH
59810: LD_VAR 0 2
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: PUSH
59823: LD_VAR 0 1
59827: PUSH
59828: LD_INT 4
59830: MINUS
59831: PUSH
59832: LD_VAR 0 2
59836: PUSH
59837: LD_INT 4
59839: MINUS
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// end ; 3 :
59856: GO 60278
59858: LD_INT 3
59860: DOUBLE
59861: EQUAL
59862: IFTRUE 59866
59864: GO 59999
59866: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59867: LD_ADDR_VAR 0 5
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_INT 3
59879: PLUS
59880: PUSH
59881: LD_VAR 0 2
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: LD_INT 4
59901: PLUS
59902: PUSH
59903: LD_VAR 0 2
59907: PUSH
59908: LD_INT 4
59910: PLUS
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: PUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 4
59927: MINUS
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: LD_VAR 0 1
59946: PUSH
59947: LD_VAR 0 2
59951: PUSH
59952: LD_INT 4
59954: MINUS
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: LD_VAR 0 1
59968: PUSH
59969: LD_INT 3
59971: MINUS
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_INT 3
59980: MINUS
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// end ; 4 :
59997: GO 60278
59999: LD_INT 4
60001: DOUBLE
60002: EQUAL
60003: IFTRUE 60007
60005: GO 60140
60007: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60008: LD_ADDR_VAR 0 5
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_VAR 0 2
60022: PUSH
60023: LD_INT 4
60025: PLUS
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: PUSH
60035: LD_VAR 0 1
60039: PUSH
60040: LD_INT 3
60042: PLUS
60043: PUSH
60044: LD_VAR 0 2
60048: PUSH
60049: LD_INT 3
60051: PLUS
60052: PUSH
60053: LD_INT 5
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: PUSH
60061: LD_VAR 0 1
60065: PUSH
60066: LD_INT 4
60068: PLUS
60069: PUSH
60070: LD_VAR 0 2
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: LD_VAR 0 1
60087: PUSH
60088: LD_VAR 0 2
60092: PUSH
60093: LD_INT 3
60095: MINUS
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: PUSH
60105: LD_VAR 0 1
60109: PUSH
60110: LD_INT 4
60112: MINUS
60113: PUSH
60114: LD_VAR 0 2
60118: PUSH
60119: LD_INT 4
60121: MINUS
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// end ; 5 :
60138: GO 60278
60140: LD_INT 5
60142: DOUBLE
60143: EQUAL
60144: IFTRUE 60148
60146: GO 60277
60148: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 4
60161: MINUS
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: PUSH
60176: LD_VAR 0 1
60180: PUSH
60181: LD_VAR 0 2
60185: PUSH
60186: LD_INT 4
60188: MINUS
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_VAR 0 1
60202: PUSH
60203: LD_INT 4
60205: PLUS
60206: PUSH
60207: LD_VAR 0 2
60211: PUSH
60212: LD_INT 4
60214: PLUS
60215: PUSH
60216: LD_INT 5
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: PUSH
60224: LD_VAR 0 1
60228: PUSH
60229: LD_INT 3
60231: PLUS
60232: PUSH
60233: LD_VAR 0 2
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: PUSH
60246: LD_VAR 0 1
60250: PUSH
60251: LD_VAR 0 2
60255: PUSH
60256: LD_INT 3
60258: PLUS
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// end ; end ;
60275: GO 60278
60277: POP
// result := list ;
60278: LD_ADDR_VAR 0 4
60282: PUSH
60283: LD_VAR 0 5
60287: ST_TO_ADDR
// end ;
60288: LD_VAR 0 4
60292: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60293: LD_INT 0
60295: PPUSH
60296: PPUSH
60297: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60298: LD_VAR 0 1
60302: NOT
60303: PUSH
60304: LD_VAR 0 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: IN
60327: NOT
60328: OR
60329: IFFALSE 60333
// exit ;
60331: GO 60425
// tmp := [ ] ;
60333: LD_ADDR_VAR 0 5
60337: PUSH
60338: EMPTY
60339: ST_TO_ADDR
// for i in units do
60340: LD_ADDR_VAR 0 4
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: FOR_IN
60351: IFFALSE 60394
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60353: LD_ADDR_VAR 0 5
60357: PUSH
60358: LD_VAR 0 5
60362: PPUSH
60363: LD_VAR 0 5
60367: PUSH
60368: LD_INT 1
60370: PLUS
60371: PPUSH
60372: LD_VAR 0 4
60376: PPUSH
60377: LD_VAR 0 2
60381: PPUSH
60382: CALL_OW 259
60386: PPUSH
60387: CALL_OW 2
60391: ST_TO_ADDR
60392: GO 60350
60394: POP
60395: POP
// if not tmp then
60396: LD_VAR 0 5
60400: NOT
60401: IFFALSE 60405
// exit ;
60403: GO 60425
// result := SortListByListDesc ( units , tmp ) ;
60405: LD_ADDR_VAR 0 3
60409: PUSH
60410: LD_VAR 0 1
60414: PPUSH
60415: LD_VAR 0 5
60419: PPUSH
60420: CALL_OW 77
60424: ST_TO_ADDR
// end ;
60425: LD_VAR 0 3
60429: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60430: LD_INT 0
60432: PPUSH
60433: PPUSH
60434: PPUSH
// x := GetX ( building ) ;
60435: LD_ADDR_VAR 0 4
60439: PUSH
60440: LD_VAR 0 2
60444: PPUSH
60445: CALL_OW 250
60449: ST_TO_ADDR
// y := GetY ( building ) ;
60450: LD_ADDR_VAR 0 5
60454: PUSH
60455: LD_VAR 0 2
60459: PPUSH
60460: CALL_OW 251
60464: ST_TO_ADDR
// if GetTaskList ( unit ) then
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 437
60474: IFFALSE 60569
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60476: LD_STRING e
60478: PUSH
60479: LD_VAR 0 1
60483: PPUSH
60484: CALL_OW 437
60488: PUSH
60489: LD_INT 1
60491: ARRAY
60492: PUSH
60493: LD_INT 1
60495: ARRAY
60496: EQUAL
60497: PUSH
60498: LD_VAR 0 4
60502: PUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL_OW 437
60512: PUSH
60513: LD_INT 1
60515: ARRAY
60516: PUSH
60517: LD_INT 2
60519: ARRAY
60520: EQUAL
60521: AND
60522: PUSH
60523: LD_VAR 0 5
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 437
60537: PUSH
60538: LD_INT 1
60540: ARRAY
60541: PUSH
60542: LD_INT 3
60544: ARRAY
60545: EQUAL
60546: AND
60547: IFFALSE 60559
// result := true else
60549: LD_ADDR_VAR 0 3
60553: PUSH
60554: LD_INT 1
60556: ST_TO_ADDR
60557: GO 60567
// result := false ;
60559: LD_ADDR_VAR 0 3
60563: PUSH
60564: LD_INT 0
60566: ST_TO_ADDR
// end else
60567: GO 60577
// result := false ;
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_INT 0
60576: ST_TO_ADDR
// end ;
60577: LD_VAR 0 3
60581: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60582: LD_INT 0
60584: PPUSH
60585: PPUSH
60586: PPUSH
60587: PPUSH
// if not unit or not area then
60588: LD_VAR 0 1
60592: NOT
60593: PUSH
60594: LD_VAR 0 2
60598: NOT
60599: OR
60600: IFFALSE 60604
// exit ;
60602: GO 60768
// tmp := AreaToList ( area , i ) ;
60604: LD_ADDR_VAR 0 6
60608: PUSH
60609: LD_VAR 0 2
60613: PPUSH
60614: LD_VAR 0 5
60618: PPUSH
60619: CALL_OW 517
60623: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60624: LD_ADDR_VAR 0 5
60628: PUSH
60629: DOUBLE
60630: LD_INT 1
60632: DEC
60633: ST_TO_ADDR
60634: LD_VAR 0 6
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: PUSH
60643: FOR_TO
60644: IFFALSE 60766
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60646: LD_ADDR_VAR 0 7
60650: PUSH
60651: LD_VAR 0 6
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PUSH
60660: LD_VAR 0 5
60664: ARRAY
60665: PUSH
60666: LD_VAR 0 6
60670: PUSH
60671: LD_INT 2
60673: ARRAY
60674: PUSH
60675: LD_VAR 0 5
60679: ARRAY
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60685: LD_VAR 0 7
60689: PUSH
60690: LD_INT 1
60692: ARRAY
60693: PPUSH
60694: LD_VAR 0 7
60698: PUSH
60699: LD_INT 2
60701: ARRAY
60702: PPUSH
60703: CALL_OW 428
60707: PUSH
60708: LD_INT 0
60710: EQUAL
60711: IFFALSE 60764
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60713: LD_VAR 0 1
60717: PPUSH
60718: LD_VAR 0 7
60722: PUSH
60723: LD_INT 1
60725: ARRAY
60726: PPUSH
60727: LD_VAR 0 7
60731: PUSH
60732: LD_INT 2
60734: ARRAY
60735: PPUSH
60736: LD_VAR 0 3
60740: PPUSH
60741: CALL_OW 48
// result := IsPlaced ( unit ) ;
60745: LD_ADDR_VAR 0 4
60749: PUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL_OW 305
60759: ST_TO_ADDR
// exit ;
60760: POP
60761: POP
60762: GO 60768
// end ; end ;
60764: GO 60643
60766: POP
60767: POP
// end ;
60768: LD_VAR 0 4
60772: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60773: LD_INT 0
60775: PPUSH
60776: PPUSH
60777: PPUSH
// if not side or side > 8 then
60778: LD_VAR 0 1
60782: NOT
60783: PUSH
60784: LD_VAR 0 1
60788: PUSH
60789: LD_INT 8
60791: GREATER
60792: OR
60793: IFFALSE 60797
// exit ;
60795: GO 60984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60797: LD_ADDR_VAR 0 4
60801: PUSH
60802: LD_INT 22
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 21
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PPUSH
60828: CALL_OW 69
60832: ST_TO_ADDR
// if not tmp then
60833: LD_VAR 0 4
60837: NOT
60838: IFFALSE 60842
// exit ;
60840: GO 60984
// enable_addtolog := true ;
60842: LD_ADDR_OWVAR 81
60846: PUSH
60847: LD_INT 1
60849: ST_TO_ADDR
// AddToLog ( [ ) ;
60850: LD_STRING [
60852: PPUSH
60853: CALL_OW 561
// for i in tmp do
60857: LD_ADDR_VAR 0 3
60861: PUSH
60862: LD_VAR 0 4
60866: PUSH
60867: FOR_IN
60868: IFFALSE 60975
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60870: LD_STRING [
60872: PUSH
60873: LD_VAR 0 3
60877: PPUSH
60878: CALL_OW 266
60882: STR
60883: PUSH
60884: LD_STRING , 
60886: STR
60887: PUSH
60888: LD_VAR 0 3
60892: PPUSH
60893: CALL_OW 250
60897: STR
60898: PUSH
60899: LD_STRING , 
60901: STR
60902: PUSH
60903: LD_VAR 0 3
60907: PPUSH
60908: CALL_OW 251
60912: STR
60913: PUSH
60914: LD_STRING , 
60916: STR
60917: PUSH
60918: LD_VAR 0 3
60922: PPUSH
60923: CALL_OW 254
60927: STR
60928: PUSH
60929: LD_STRING , 
60931: STR
60932: PUSH
60933: LD_VAR 0 3
60937: PPUSH
60938: LD_INT 1
60940: PPUSH
60941: CALL_OW 268
60945: STR
60946: PUSH
60947: LD_STRING , 
60949: STR
60950: PUSH
60951: LD_VAR 0 3
60955: PPUSH
60956: LD_INT 2
60958: PPUSH
60959: CALL_OW 268
60963: STR
60964: PUSH
60965: LD_STRING ],
60967: STR
60968: PPUSH
60969: CALL_OW 561
// end ;
60973: GO 60867
60975: POP
60976: POP
// AddToLog ( ]; ) ;
60977: LD_STRING ];
60979: PPUSH
60980: CALL_OW 561
// end ;
60984: LD_VAR 0 2
60988: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60989: LD_INT 0
60991: PPUSH
60992: PPUSH
60993: PPUSH
60994: PPUSH
60995: PPUSH
// if not area or not rate or not max then
60996: LD_VAR 0 1
61000: NOT
61001: PUSH
61002: LD_VAR 0 2
61006: NOT
61007: OR
61008: PUSH
61009: LD_VAR 0 4
61013: NOT
61014: OR
61015: IFFALSE 61019
// exit ;
61017: GO 61211
// while 1 do
61019: LD_INT 1
61021: IFFALSE 61211
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61023: LD_ADDR_VAR 0 9
61027: PUSH
61028: LD_VAR 0 1
61032: PPUSH
61033: LD_INT 1
61035: PPUSH
61036: CALL_OW 287
61040: PUSH
61041: LD_INT 10
61043: MUL
61044: ST_TO_ADDR
// r := rate / 10 ;
61045: LD_ADDR_VAR 0 7
61049: PUSH
61050: LD_VAR 0 2
61054: PUSH
61055: LD_INT 10
61057: DIVREAL
61058: ST_TO_ADDR
// time := 1 1$00 ;
61059: LD_ADDR_VAR 0 8
61063: PUSH
61064: LD_INT 2100
61066: ST_TO_ADDR
// if amount < min then
61067: LD_VAR 0 9
61071: PUSH
61072: LD_VAR 0 3
61076: LESS
61077: IFFALSE 61095
// r := r * 2 else
61079: LD_ADDR_VAR 0 7
61083: PUSH
61084: LD_VAR 0 7
61088: PUSH
61089: LD_INT 2
61091: MUL
61092: ST_TO_ADDR
61093: GO 61121
// if amount > max then
61095: LD_VAR 0 9
61099: PUSH
61100: LD_VAR 0 4
61104: GREATER
61105: IFFALSE 61121
// r := r / 2 ;
61107: LD_ADDR_VAR 0 7
61111: PUSH
61112: LD_VAR 0 7
61116: PUSH
61117: LD_INT 2
61119: DIVREAL
61120: ST_TO_ADDR
// time := time / r ;
61121: LD_ADDR_VAR 0 8
61125: PUSH
61126: LD_VAR 0 8
61130: PUSH
61131: LD_VAR 0 7
61135: DIVREAL
61136: ST_TO_ADDR
// if time < 0 then
61137: LD_VAR 0 8
61141: PUSH
61142: LD_INT 0
61144: LESS
61145: IFFALSE 61162
// time := time * - 1 ;
61147: LD_ADDR_VAR 0 8
61151: PUSH
61152: LD_VAR 0 8
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: MUL
61161: ST_TO_ADDR
// wait ( time ) ;
61162: LD_VAR 0 8
61166: PPUSH
61167: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61171: LD_INT 35
61173: PPUSH
61174: LD_INT 875
61176: PPUSH
61177: CALL_OW 12
61181: PPUSH
61182: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61186: LD_INT 1
61188: PPUSH
61189: LD_INT 5
61191: PPUSH
61192: CALL_OW 12
61196: PPUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_INT 1
61204: PPUSH
61205: CALL_OW 55
// end ;
61209: GO 61019
// end ;
61211: LD_VAR 0 5
61215: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61216: LD_INT 0
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
// if not turrets or not factories then
61226: LD_VAR 0 1
61230: NOT
61231: PUSH
61232: LD_VAR 0 2
61236: NOT
61237: OR
61238: IFFALSE 61242
// exit ;
61240: GO 61549
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61242: LD_ADDR_VAR 0 10
61246: PUSH
61247: LD_INT 5
61249: PUSH
61250: LD_INT 6
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 5
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 24
61284: PUSH
61285: LD_INT 25
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 23
61294: PUSH
61295: LD_INT 27
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 42
61308: PUSH
61309: LD_INT 43
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 44
61318: PUSH
61319: LD_INT 46
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 45
61328: PUSH
61329: LD_INT 47
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: ST_TO_ADDR
// result := [ ] ;
61346: LD_ADDR_VAR 0 3
61350: PUSH
61351: EMPTY
61352: ST_TO_ADDR
// for i in turrets do
61353: LD_ADDR_VAR 0 4
61357: PUSH
61358: LD_VAR 0 1
61362: PUSH
61363: FOR_IN
61364: IFFALSE 61547
// begin nat := GetNation ( i ) ;
61366: LD_ADDR_VAR 0 7
61370: PUSH
61371: LD_VAR 0 4
61375: PPUSH
61376: CALL_OW 248
61380: ST_TO_ADDR
// weapon := 0 ;
61381: LD_ADDR_VAR 0 8
61385: PUSH
61386: LD_INT 0
61388: ST_TO_ADDR
// if not nat then
61389: LD_VAR 0 7
61393: NOT
61394: IFFALSE 61398
// continue ;
61396: GO 61363
// for j in list [ nat ] do
61398: LD_ADDR_VAR 0 5
61402: PUSH
61403: LD_VAR 0 10
61407: PUSH
61408: LD_VAR 0 7
61412: ARRAY
61413: PUSH
61414: FOR_IN
61415: IFFALSE 61456
// if GetBWeapon ( i ) = j [ 1 ] then
61417: LD_VAR 0 4
61421: PPUSH
61422: CALL_OW 269
61426: PUSH
61427: LD_VAR 0 5
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: EQUAL
61436: IFFALSE 61454
// begin weapon := j [ 2 ] ;
61438: LD_ADDR_VAR 0 8
61442: PUSH
61443: LD_VAR 0 5
61447: PUSH
61448: LD_INT 2
61450: ARRAY
61451: ST_TO_ADDR
// break ;
61452: GO 61456
// end ;
61454: GO 61414
61456: POP
61457: POP
// if not weapon then
61458: LD_VAR 0 8
61462: NOT
61463: IFFALSE 61467
// continue ;
61465: GO 61363
// for k in factories do
61467: LD_ADDR_VAR 0 6
61471: PUSH
61472: LD_VAR 0 2
61476: PUSH
61477: FOR_IN
61478: IFFALSE 61543
// begin weapons := AvailableWeaponList ( k ) ;
61480: LD_ADDR_VAR 0 9
61484: PUSH
61485: LD_VAR 0 6
61489: PPUSH
61490: CALL_OW 478
61494: ST_TO_ADDR
// if not weapons then
61495: LD_VAR 0 9
61499: NOT
61500: IFFALSE 61504
// continue ;
61502: GO 61477
// if weapon in weapons then
61504: LD_VAR 0 8
61508: PUSH
61509: LD_VAR 0 9
61513: IN
61514: IFFALSE 61541
// begin result := [ i , weapon ] ;
61516: LD_ADDR_VAR 0 3
61520: PUSH
61521: LD_VAR 0 4
61525: PUSH
61526: LD_VAR 0 8
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: ST_TO_ADDR
// exit ;
61535: POP
61536: POP
61537: POP
61538: POP
61539: GO 61549
// end ; end ;
61541: GO 61477
61543: POP
61544: POP
// end ;
61545: GO 61363
61547: POP
61548: POP
// end ;
61549: LD_VAR 0 3
61553: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61554: LD_INT 0
61556: PPUSH
// if not side or side > 8 then
61557: LD_VAR 0 3
61561: NOT
61562: PUSH
61563: LD_VAR 0 3
61567: PUSH
61568: LD_INT 8
61570: GREATER
61571: OR
61572: IFFALSE 61576
// exit ;
61574: GO 61635
// if not range then
61576: LD_VAR 0 4
61580: NOT
61581: IFFALSE 61592
// range := - 12 ;
61583: LD_ADDR_VAR 0 4
61587: PUSH
61588: LD_INT 12
61590: NEG
61591: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61592: LD_VAR 0 1
61596: PPUSH
61597: LD_VAR 0 2
61601: PPUSH
61602: LD_VAR 0 3
61606: PPUSH
61607: LD_VAR 0 4
61611: PPUSH
61612: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61616: LD_VAR 0 1
61620: PPUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL_OW 331
// end ;
61635: LD_VAR 0 5
61639: RET
// export function Video ( mode ) ; begin
61640: LD_INT 0
61642: PPUSH
// ingame_video = mode ;
61643: LD_ADDR_OWVAR 52
61647: PUSH
61648: LD_VAR 0 1
61652: ST_TO_ADDR
// interface_hidden = mode ;
61653: LD_ADDR_OWVAR 54
61657: PUSH
61658: LD_VAR 0 1
61662: ST_TO_ADDR
// end ;
61663: LD_VAR 0 2
61667: RET
// export function Join ( array , element ) ; begin
61668: LD_INT 0
61670: PPUSH
// result := array ^ element ;
61671: LD_ADDR_VAR 0 3
61675: PUSH
61676: LD_VAR 0 1
61680: PUSH
61681: LD_VAR 0 2
61685: ADD
61686: ST_TO_ADDR
// end ;
61687: LD_VAR 0 3
61691: RET
// export function JoinUnion ( array , element ) ; begin
61692: LD_INT 0
61694: PPUSH
// result := array union element ;
61695: LD_ADDR_VAR 0 3
61699: PUSH
61700: LD_VAR 0 1
61704: PUSH
61705: LD_VAR 0 2
61709: UNION
61710: ST_TO_ADDR
// end ;
61711: LD_VAR 0 3
61715: RET
// export function GetBehemoths ( side ) ; begin
61716: LD_INT 0
61718: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_INT 22
61726: PUSH
61727: LD_VAR 0 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 31
61738: PUSH
61739: LD_INT 25
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PPUSH
61750: CALL_OW 69
61754: ST_TO_ADDR
// end ;
61755: LD_VAR 0 2
61759: RET
// export function Shuffle ( array ) ; var i , index ; begin
61760: LD_INT 0
61762: PPUSH
61763: PPUSH
61764: PPUSH
// result := [ ] ;
61765: LD_ADDR_VAR 0 2
61769: PUSH
61770: EMPTY
61771: ST_TO_ADDR
// if not array then
61772: LD_VAR 0 1
61776: NOT
61777: IFFALSE 61781
// exit ;
61779: GO 61880
// Randomize ;
61781: CALL_OW 10
// for i = array downto 1 do
61785: LD_ADDR_VAR 0 3
61789: PUSH
61790: DOUBLE
61791: LD_VAR 0 1
61795: INC
61796: ST_TO_ADDR
61797: LD_INT 1
61799: PUSH
61800: FOR_DOWNTO
61801: IFFALSE 61878
// begin index := rand ( 1 , array ) ;
61803: LD_ADDR_VAR 0 4
61807: PUSH
61808: LD_INT 1
61810: PPUSH
61811: LD_VAR 0 1
61815: PPUSH
61816: CALL_OW 12
61820: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61821: LD_ADDR_VAR 0 2
61825: PUSH
61826: LD_VAR 0 2
61830: PPUSH
61831: LD_VAR 0 2
61835: PUSH
61836: LD_INT 1
61838: PLUS
61839: PPUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_VAR 0 4
61849: ARRAY
61850: PPUSH
61851: CALL_OW 2
61855: ST_TO_ADDR
// array := Delete ( array , index ) ;
61856: LD_ADDR_VAR 0 1
61860: PUSH
61861: LD_VAR 0 1
61865: PPUSH
61866: LD_VAR 0 4
61870: PPUSH
61871: CALL_OW 3
61875: ST_TO_ADDR
// end ;
61876: GO 61800
61878: POP
61879: POP
// end ; end_of_file
61880: LD_VAR 0 2
61884: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61885: GO 61887
61887: DISABLE
// begin ru_radar := 98 ;
61888: LD_ADDR_EXP 29
61892: PUSH
61893: LD_INT 98
61895: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61896: LD_ADDR_EXP 30
61900: PUSH
61901: LD_INT 89
61903: ST_TO_ADDR
// us_hack := 99 ;
61904: LD_ADDR_EXP 31
61908: PUSH
61909: LD_INT 99
61911: ST_TO_ADDR
// us_artillery := 97 ;
61912: LD_ADDR_EXP 32
61916: PUSH
61917: LD_INT 97
61919: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61920: LD_ADDR_EXP 33
61924: PUSH
61925: LD_INT 91
61927: ST_TO_ADDR
// end ; end_of_file
61928: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61929: LD_INT 0
61931: PPUSH
61932: PPUSH
// skirmish := false ;
61933: LD_ADDR_EXP 34
61937: PUSH
61938: LD_INT 0
61940: ST_TO_ADDR
// debug_mc := false ;
61941: LD_ADDR_EXP 35
61945: PUSH
61946: LD_INT 0
61948: ST_TO_ADDR
// mc_bases := [ ] ;
61949: LD_ADDR_EXP 36
61953: PUSH
61954: EMPTY
61955: ST_TO_ADDR
// mc_sides := [ ] ;
61956: LD_ADDR_EXP 62
61960: PUSH
61961: EMPTY
61962: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61963: LD_ADDR_EXP 37
61967: PUSH
61968: EMPTY
61969: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61970: LD_ADDR_EXP 38
61974: PUSH
61975: EMPTY
61976: ST_TO_ADDR
// mc_need_heal := [ ] ;
61977: LD_ADDR_EXP 39
61981: PUSH
61982: EMPTY
61983: ST_TO_ADDR
// mc_healers := [ ] ;
61984: LD_ADDR_EXP 40
61988: PUSH
61989: EMPTY
61990: ST_TO_ADDR
// mc_build_list := [ ] ;
61991: LD_ADDR_EXP 41
61995: PUSH
61996: EMPTY
61997: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
61998: LD_ADDR_EXP 68
62002: PUSH
62003: EMPTY
62004: ST_TO_ADDR
// mc_builders := [ ] ;
62005: LD_ADDR_EXP 42
62009: PUSH
62010: EMPTY
62011: ST_TO_ADDR
// mc_construct_list := [ ] ;
62012: LD_ADDR_EXP 43
62016: PUSH
62017: EMPTY
62018: ST_TO_ADDR
// mc_turret_list := [ ] ;
62019: LD_ADDR_EXP 44
62023: PUSH
62024: EMPTY
62025: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62026: LD_ADDR_EXP 45
62030: PUSH
62031: EMPTY
62032: ST_TO_ADDR
// mc_miners := [ ] ;
62033: LD_ADDR_EXP 50
62037: PUSH
62038: EMPTY
62039: ST_TO_ADDR
// mc_mines := [ ] ;
62040: LD_ADDR_EXP 49
62044: PUSH
62045: EMPTY
62046: ST_TO_ADDR
// mc_minefields := [ ] ;
62047: LD_ADDR_EXP 51
62051: PUSH
62052: EMPTY
62053: ST_TO_ADDR
// mc_crates := [ ] ;
62054: LD_ADDR_EXP 52
62058: PUSH
62059: EMPTY
62060: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62061: LD_ADDR_EXP 53
62065: PUSH
62066: EMPTY
62067: ST_TO_ADDR
// mc_crates_area := [ ] ;
62068: LD_ADDR_EXP 54
62072: PUSH
62073: EMPTY
62074: ST_TO_ADDR
// mc_vehicles := [ ] ;
62075: LD_ADDR_EXP 55
62079: PUSH
62080: EMPTY
62081: ST_TO_ADDR
// mc_attack := [ ] ;
62082: LD_ADDR_EXP 56
62086: PUSH
62087: EMPTY
62088: ST_TO_ADDR
// mc_produce := [ ] ;
62089: LD_ADDR_EXP 57
62093: PUSH
62094: EMPTY
62095: ST_TO_ADDR
// mc_defender := [ ] ;
62096: LD_ADDR_EXP 58
62100: PUSH
62101: EMPTY
62102: ST_TO_ADDR
// mc_parking := [ ] ;
62103: LD_ADDR_EXP 60
62107: PUSH
62108: EMPTY
62109: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62110: LD_ADDR_EXP 46
62114: PUSH
62115: EMPTY
62116: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62117: LD_ADDR_EXP 48
62121: PUSH
62122: EMPTY
62123: ST_TO_ADDR
// mc_scan := [ ] ;
62124: LD_ADDR_EXP 59
62128: PUSH
62129: EMPTY
62130: ST_TO_ADDR
// mc_scan_area := [ ] ;
62131: LD_ADDR_EXP 61
62135: PUSH
62136: EMPTY
62137: ST_TO_ADDR
// mc_tech := [ ] ;
62138: LD_ADDR_EXP 63
62142: PUSH
62143: EMPTY
62144: ST_TO_ADDR
// mc_class := [ ] ;
62145: LD_ADDR_EXP 77
62149: PUSH
62150: EMPTY
62151: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62152: LD_ADDR_EXP 78
62156: PUSH
62157: EMPTY
62158: ST_TO_ADDR
// end ;
62159: LD_VAR 0 1
62163: RET
// export function MC_Kill ( base ) ; begin
62164: LD_INT 0
62166: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62167: LD_ADDR_EXP 36
62171: PUSH
62172: LD_EXP 36
62176: PPUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: EMPTY
62183: PPUSH
62184: CALL_OW 1
62188: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62189: LD_ADDR_EXP 37
62193: PUSH
62194: LD_EXP 37
62198: PPUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: EMPTY
62205: PPUSH
62206: CALL_OW 1
62210: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62211: LD_ADDR_EXP 38
62215: PUSH
62216: LD_EXP 38
62220: PPUSH
62221: LD_VAR 0 1
62225: PPUSH
62226: EMPTY
62227: PPUSH
62228: CALL_OW 1
62232: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62233: LD_ADDR_EXP 39
62237: PUSH
62238: LD_EXP 39
62242: PPUSH
62243: LD_VAR 0 1
62247: PPUSH
62248: EMPTY
62249: PPUSH
62250: CALL_OW 1
62254: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62255: LD_ADDR_EXP 40
62259: PUSH
62260: LD_EXP 40
62264: PPUSH
62265: LD_VAR 0 1
62269: PPUSH
62270: EMPTY
62271: PPUSH
62272: CALL_OW 1
62276: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62277: LD_ADDR_EXP 41
62281: PUSH
62282: LD_EXP 41
62286: PPUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: EMPTY
62293: PPUSH
62294: CALL_OW 1
62298: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62299: LD_ADDR_EXP 42
62303: PUSH
62304: LD_EXP 42
62308: PPUSH
62309: LD_VAR 0 1
62313: PPUSH
62314: EMPTY
62315: PPUSH
62316: CALL_OW 1
62320: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62321: LD_ADDR_EXP 43
62325: PUSH
62326: LD_EXP 43
62330: PPUSH
62331: LD_VAR 0 1
62335: PPUSH
62336: EMPTY
62337: PPUSH
62338: CALL_OW 1
62342: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62343: LD_ADDR_EXP 44
62347: PUSH
62348: LD_EXP 44
62352: PPUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: EMPTY
62359: PPUSH
62360: CALL_OW 1
62364: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62365: LD_ADDR_EXP 45
62369: PUSH
62370: LD_EXP 45
62374: PPUSH
62375: LD_VAR 0 1
62379: PPUSH
62380: EMPTY
62381: PPUSH
62382: CALL_OW 1
62386: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62387: LD_ADDR_EXP 46
62391: PUSH
62392: LD_EXP 46
62396: PPUSH
62397: LD_VAR 0 1
62401: PPUSH
62402: EMPTY
62403: PPUSH
62404: CALL_OW 1
62408: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62409: LD_ADDR_EXP 47
62413: PUSH
62414: LD_EXP 47
62418: PPUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: LD_INT 0
62426: PPUSH
62427: CALL_OW 1
62431: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62432: LD_ADDR_EXP 48
62436: PUSH
62437: LD_EXP 48
62441: PPUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: EMPTY
62448: PPUSH
62449: CALL_OW 1
62453: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62454: LD_ADDR_EXP 49
62458: PUSH
62459: LD_EXP 49
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: EMPTY
62470: PPUSH
62471: CALL_OW 1
62475: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62476: LD_ADDR_EXP 50
62480: PUSH
62481: LD_EXP 50
62485: PPUSH
62486: LD_VAR 0 1
62490: PPUSH
62491: EMPTY
62492: PPUSH
62493: CALL_OW 1
62497: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62498: LD_ADDR_EXP 51
62502: PUSH
62503: LD_EXP 51
62507: PPUSH
62508: LD_VAR 0 1
62512: PPUSH
62513: EMPTY
62514: PPUSH
62515: CALL_OW 1
62519: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62520: LD_ADDR_EXP 52
62524: PUSH
62525: LD_EXP 52
62529: PPUSH
62530: LD_VAR 0 1
62534: PPUSH
62535: EMPTY
62536: PPUSH
62537: CALL_OW 1
62541: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62542: LD_ADDR_EXP 53
62546: PUSH
62547: LD_EXP 53
62551: PPUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: EMPTY
62558: PPUSH
62559: CALL_OW 1
62563: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62564: LD_ADDR_EXP 54
62568: PUSH
62569: LD_EXP 54
62573: PPUSH
62574: LD_VAR 0 1
62578: PPUSH
62579: EMPTY
62580: PPUSH
62581: CALL_OW 1
62585: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62586: LD_ADDR_EXP 55
62590: PUSH
62591: LD_EXP 55
62595: PPUSH
62596: LD_VAR 0 1
62600: PPUSH
62601: EMPTY
62602: PPUSH
62603: CALL_OW 1
62607: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62608: LD_ADDR_EXP 56
62612: PUSH
62613: LD_EXP 56
62617: PPUSH
62618: LD_VAR 0 1
62622: PPUSH
62623: EMPTY
62624: PPUSH
62625: CALL_OW 1
62629: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62630: LD_ADDR_EXP 57
62634: PUSH
62635: LD_EXP 57
62639: PPUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: EMPTY
62646: PPUSH
62647: CALL_OW 1
62651: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62652: LD_ADDR_EXP 58
62656: PUSH
62657: LD_EXP 58
62661: PPUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: EMPTY
62668: PPUSH
62669: CALL_OW 1
62673: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62674: LD_ADDR_EXP 59
62678: PUSH
62679: LD_EXP 59
62683: PPUSH
62684: LD_VAR 0 1
62688: PPUSH
62689: EMPTY
62690: PPUSH
62691: CALL_OW 1
62695: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62696: LD_ADDR_EXP 60
62700: PUSH
62701: LD_EXP 60
62705: PPUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: EMPTY
62712: PPUSH
62713: CALL_OW 1
62717: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62718: LD_ADDR_EXP 61
62722: PUSH
62723: LD_EXP 61
62727: PPUSH
62728: LD_VAR 0 1
62732: PPUSH
62733: EMPTY
62734: PPUSH
62735: CALL_OW 1
62739: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62740: LD_ADDR_EXP 63
62744: PUSH
62745: LD_EXP 63
62749: PPUSH
62750: LD_VAR 0 1
62754: PPUSH
62755: EMPTY
62756: PPUSH
62757: CALL_OW 1
62761: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62762: LD_ADDR_EXP 65
62766: PUSH
62767: LD_EXP 65
62771: PPUSH
62772: LD_VAR 0 1
62776: PPUSH
62777: EMPTY
62778: PPUSH
62779: CALL_OW 1
62783: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62784: LD_ADDR_EXP 66
62788: PUSH
62789: LD_EXP 66
62793: PPUSH
62794: LD_VAR 0 1
62798: PPUSH
62799: EMPTY
62800: PPUSH
62801: CALL_OW 1
62805: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62806: LD_ADDR_EXP 67
62810: PUSH
62811: LD_EXP 67
62815: PPUSH
62816: LD_VAR 0 1
62820: PPUSH
62821: EMPTY
62822: PPUSH
62823: CALL_OW 1
62827: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62828: LD_ADDR_EXP 68
62832: PUSH
62833: LD_EXP 68
62837: PPUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: EMPTY
62844: PPUSH
62845: CALL_OW 1
62849: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62850: LD_ADDR_EXP 69
62854: PUSH
62855: LD_EXP 69
62859: PPUSH
62860: LD_VAR 0 1
62864: PPUSH
62865: EMPTY
62866: PPUSH
62867: CALL_OW 1
62871: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62872: LD_ADDR_EXP 70
62876: PUSH
62877: LD_EXP 70
62881: PPUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: EMPTY
62888: PPUSH
62889: CALL_OW 1
62893: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62894: LD_ADDR_EXP 71
62898: PUSH
62899: LD_EXP 71
62903: PPUSH
62904: LD_VAR 0 1
62908: PPUSH
62909: EMPTY
62910: PPUSH
62911: CALL_OW 1
62915: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62916: LD_ADDR_EXP 72
62920: PUSH
62921: LD_EXP 72
62925: PPUSH
62926: LD_VAR 0 1
62930: PPUSH
62931: EMPTY
62932: PPUSH
62933: CALL_OW 1
62937: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62938: LD_ADDR_EXP 73
62942: PUSH
62943: LD_EXP 73
62947: PPUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: EMPTY
62954: PPUSH
62955: CALL_OW 1
62959: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62960: LD_ADDR_EXP 74
62964: PUSH
62965: LD_EXP 74
62969: PPUSH
62970: LD_VAR 0 1
62974: PPUSH
62975: EMPTY
62976: PPUSH
62977: CALL_OW 1
62981: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62982: LD_ADDR_EXP 75
62986: PUSH
62987: LD_EXP 75
62991: PPUSH
62992: LD_VAR 0 1
62996: PPUSH
62997: EMPTY
62998: PPUSH
62999: CALL_OW 1
63003: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63004: LD_ADDR_EXP 76
63008: PUSH
63009: LD_EXP 76
63013: PPUSH
63014: LD_VAR 0 1
63018: PPUSH
63019: EMPTY
63020: PPUSH
63021: CALL_OW 1
63025: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63026: LD_ADDR_EXP 77
63030: PUSH
63031: LD_EXP 77
63035: PPUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: EMPTY
63042: PPUSH
63043: CALL_OW 1
63047: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63048: LD_ADDR_EXP 78
63052: PUSH
63053: LD_EXP 78
63057: PPUSH
63058: LD_VAR 0 1
63062: PPUSH
63063: LD_INT 0
63065: PPUSH
63066: CALL_OW 1
63070: ST_TO_ADDR
// end ;
63071: LD_VAR 0 2
63075: RET
// export function MC_Add ( side , units ) ; var base ; begin
63076: LD_INT 0
63078: PPUSH
63079: PPUSH
// base := mc_bases + 1 ;
63080: LD_ADDR_VAR 0 4
63084: PUSH
63085: LD_EXP 36
63089: PUSH
63090: LD_INT 1
63092: PLUS
63093: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63094: LD_ADDR_EXP 62
63098: PUSH
63099: LD_EXP 62
63103: PPUSH
63104: LD_VAR 0 4
63108: PPUSH
63109: LD_VAR 0 1
63113: PPUSH
63114: CALL_OW 1
63118: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63119: LD_ADDR_EXP 36
63123: PUSH
63124: LD_EXP 36
63128: PPUSH
63129: LD_VAR 0 4
63133: PPUSH
63134: LD_VAR 0 2
63138: PPUSH
63139: CALL_OW 1
63143: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63144: LD_ADDR_EXP 37
63148: PUSH
63149: LD_EXP 37
63153: PPUSH
63154: LD_VAR 0 4
63158: PPUSH
63159: EMPTY
63160: PPUSH
63161: CALL_OW 1
63165: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63166: LD_ADDR_EXP 38
63170: PUSH
63171: LD_EXP 38
63175: PPUSH
63176: LD_VAR 0 4
63180: PPUSH
63181: EMPTY
63182: PPUSH
63183: CALL_OW 1
63187: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63188: LD_ADDR_EXP 39
63192: PUSH
63193: LD_EXP 39
63197: PPUSH
63198: LD_VAR 0 4
63202: PPUSH
63203: EMPTY
63204: PPUSH
63205: CALL_OW 1
63209: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63210: LD_ADDR_EXP 40
63214: PUSH
63215: LD_EXP 40
63219: PPUSH
63220: LD_VAR 0 4
63224: PPUSH
63225: EMPTY
63226: PPUSH
63227: CALL_OW 1
63231: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63232: LD_ADDR_EXP 41
63236: PUSH
63237: LD_EXP 41
63241: PPUSH
63242: LD_VAR 0 4
63246: PPUSH
63247: EMPTY
63248: PPUSH
63249: CALL_OW 1
63253: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63254: LD_ADDR_EXP 42
63258: PUSH
63259: LD_EXP 42
63263: PPUSH
63264: LD_VAR 0 4
63268: PPUSH
63269: EMPTY
63270: PPUSH
63271: CALL_OW 1
63275: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63276: LD_ADDR_EXP 43
63280: PUSH
63281: LD_EXP 43
63285: PPUSH
63286: LD_VAR 0 4
63290: PPUSH
63291: EMPTY
63292: PPUSH
63293: CALL_OW 1
63297: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63298: LD_ADDR_EXP 44
63302: PUSH
63303: LD_EXP 44
63307: PPUSH
63308: LD_VAR 0 4
63312: PPUSH
63313: EMPTY
63314: PPUSH
63315: CALL_OW 1
63319: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63320: LD_ADDR_EXP 45
63324: PUSH
63325: LD_EXP 45
63329: PPUSH
63330: LD_VAR 0 4
63334: PPUSH
63335: EMPTY
63336: PPUSH
63337: CALL_OW 1
63341: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63342: LD_ADDR_EXP 46
63346: PUSH
63347: LD_EXP 46
63351: PPUSH
63352: LD_VAR 0 4
63356: PPUSH
63357: EMPTY
63358: PPUSH
63359: CALL_OW 1
63363: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63364: LD_ADDR_EXP 47
63368: PUSH
63369: LD_EXP 47
63373: PPUSH
63374: LD_VAR 0 4
63378: PPUSH
63379: LD_INT 0
63381: PPUSH
63382: CALL_OW 1
63386: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63387: LD_ADDR_EXP 48
63391: PUSH
63392: LD_EXP 48
63396: PPUSH
63397: LD_VAR 0 4
63401: PPUSH
63402: EMPTY
63403: PPUSH
63404: CALL_OW 1
63408: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63409: LD_ADDR_EXP 49
63413: PUSH
63414: LD_EXP 49
63418: PPUSH
63419: LD_VAR 0 4
63423: PPUSH
63424: EMPTY
63425: PPUSH
63426: CALL_OW 1
63430: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63431: LD_ADDR_EXP 50
63435: PUSH
63436: LD_EXP 50
63440: PPUSH
63441: LD_VAR 0 4
63445: PPUSH
63446: EMPTY
63447: PPUSH
63448: CALL_OW 1
63452: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63453: LD_ADDR_EXP 51
63457: PUSH
63458: LD_EXP 51
63462: PPUSH
63463: LD_VAR 0 4
63467: PPUSH
63468: EMPTY
63469: PPUSH
63470: CALL_OW 1
63474: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63475: LD_ADDR_EXP 52
63479: PUSH
63480: LD_EXP 52
63484: PPUSH
63485: LD_VAR 0 4
63489: PPUSH
63490: EMPTY
63491: PPUSH
63492: CALL_OW 1
63496: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63497: LD_ADDR_EXP 53
63501: PUSH
63502: LD_EXP 53
63506: PPUSH
63507: LD_VAR 0 4
63511: PPUSH
63512: EMPTY
63513: PPUSH
63514: CALL_OW 1
63518: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63519: LD_ADDR_EXP 54
63523: PUSH
63524: LD_EXP 54
63528: PPUSH
63529: LD_VAR 0 4
63533: PPUSH
63534: EMPTY
63535: PPUSH
63536: CALL_OW 1
63540: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63541: LD_ADDR_EXP 55
63545: PUSH
63546: LD_EXP 55
63550: PPUSH
63551: LD_VAR 0 4
63555: PPUSH
63556: EMPTY
63557: PPUSH
63558: CALL_OW 1
63562: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63563: LD_ADDR_EXP 56
63567: PUSH
63568: LD_EXP 56
63572: PPUSH
63573: LD_VAR 0 4
63577: PPUSH
63578: EMPTY
63579: PPUSH
63580: CALL_OW 1
63584: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63585: LD_ADDR_EXP 57
63589: PUSH
63590: LD_EXP 57
63594: PPUSH
63595: LD_VAR 0 4
63599: PPUSH
63600: EMPTY
63601: PPUSH
63602: CALL_OW 1
63606: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63607: LD_ADDR_EXP 58
63611: PUSH
63612: LD_EXP 58
63616: PPUSH
63617: LD_VAR 0 4
63621: PPUSH
63622: EMPTY
63623: PPUSH
63624: CALL_OW 1
63628: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63629: LD_ADDR_EXP 59
63633: PUSH
63634: LD_EXP 59
63638: PPUSH
63639: LD_VAR 0 4
63643: PPUSH
63644: EMPTY
63645: PPUSH
63646: CALL_OW 1
63650: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63651: LD_ADDR_EXP 60
63655: PUSH
63656: LD_EXP 60
63660: PPUSH
63661: LD_VAR 0 4
63665: PPUSH
63666: EMPTY
63667: PPUSH
63668: CALL_OW 1
63672: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63673: LD_ADDR_EXP 61
63677: PUSH
63678: LD_EXP 61
63682: PPUSH
63683: LD_VAR 0 4
63687: PPUSH
63688: EMPTY
63689: PPUSH
63690: CALL_OW 1
63694: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63695: LD_ADDR_EXP 63
63699: PUSH
63700: LD_EXP 63
63704: PPUSH
63705: LD_VAR 0 4
63709: PPUSH
63710: EMPTY
63711: PPUSH
63712: CALL_OW 1
63716: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63717: LD_ADDR_EXP 65
63721: PUSH
63722: LD_EXP 65
63726: PPUSH
63727: LD_VAR 0 4
63731: PPUSH
63732: EMPTY
63733: PPUSH
63734: CALL_OW 1
63738: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63739: LD_ADDR_EXP 66
63743: PUSH
63744: LD_EXP 66
63748: PPUSH
63749: LD_VAR 0 4
63753: PPUSH
63754: EMPTY
63755: PPUSH
63756: CALL_OW 1
63760: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63761: LD_ADDR_EXP 67
63765: PUSH
63766: LD_EXP 67
63770: PPUSH
63771: LD_VAR 0 4
63775: PPUSH
63776: EMPTY
63777: PPUSH
63778: CALL_OW 1
63782: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63783: LD_ADDR_EXP 68
63787: PUSH
63788: LD_EXP 68
63792: PPUSH
63793: LD_VAR 0 4
63797: PPUSH
63798: EMPTY
63799: PPUSH
63800: CALL_OW 1
63804: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63805: LD_ADDR_EXP 69
63809: PUSH
63810: LD_EXP 69
63814: PPUSH
63815: LD_VAR 0 4
63819: PPUSH
63820: EMPTY
63821: PPUSH
63822: CALL_OW 1
63826: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63827: LD_ADDR_EXP 70
63831: PUSH
63832: LD_EXP 70
63836: PPUSH
63837: LD_VAR 0 4
63841: PPUSH
63842: EMPTY
63843: PPUSH
63844: CALL_OW 1
63848: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63849: LD_ADDR_EXP 71
63853: PUSH
63854: LD_EXP 71
63858: PPUSH
63859: LD_VAR 0 4
63863: PPUSH
63864: EMPTY
63865: PPUSH
63866: CALL_OW 1
63870: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63871: LD_ADDR_EXP 72
63875: PUSH
63876: LD_EXP 72
63880: PPUSH
63881: LD_VAR 0 4
63885: PPUSH
63886: EMPTY
63887: PPUSH
63888: CALL_OW 1
63892: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63893: LD_ADDR_EXP 73
63897: PUSH
63898: LD_EXP 73
63902: PPUSH
63903: LD_VAR 0 4
63907: PPUSH
63908: EMPTY
63909: PPUSH
63910: CALL_OW 1
63914: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63915: LD_ADDR_EXP 74
63919: PUSH
63920: LD_EXP 74
63924: PPUSH
63925: LD_VAR 0 4
63929: PPUSH
63930: EMPTY
63931: PPUSH
63932: CALL_OW 1
63936: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63937: LD_ADDR_EXP 75
63941: PUSH
63942: LD_EXP 75
63946: PPUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: EMPTY
63953: PPUSH
63954: CALL_OW 1
63958: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63959: LD_ADDR_EXP 76
63963: PUSH
63964: LD_EXP 76
63968: PPUSH
63969: LD_VAR 0 4
63973: PPUSH
63974: EMPTY
63975: PPUSH
63976: CALL_OW 1
63980: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63981: LD_ADDR_EXP 77
63985: PUSH
63986: LD_EXP 77
63990: PPUSH
63991: LD_VAR 0 4
63995: PPUSH
63996: EMPTY
63997: PPUSH
63998: CALL_OW 1
64002: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64003: LD_ADDR_EXP 78
64007: PUSH
64008: LD_EXP 78
64012: PPUSH
64013: LD_VAR 0 4
64017: PPUSH
64018: LD_INT 0
64020: PPUSH
64021: CALL_OW 1
64025: ST_TO_ADDR
// result := base ;
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_VAR 0 4
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 3
64040: RET
// export function MC_Start ( ) ; var i ; begin
64041: LD_INT 0
64043: PPUSH
64044: PPUSH
// for i = 1 to mc_bases do
64045: LD_ADDR_VAR 0 2
64049: PUSH
64050: DOUBLE
64051: LD_INT 1
64053: DEC
64054: ST_TO_ADDR
64055: LD_EXP 36
64059: PUSH
64060: FOR_TO
64061: IFFALSE 65138
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64063: LD_ADDR_EXP 36
64067: PUSH
64068: LD_EXP 36
64072: PPUSH
64073: LD_VAR 0 2
64077: PPUSH
64078: LD_EXP 36
64082: PUSH
64083: LD_VAR 0 2
64087: ARRAY
64088: PUSH
64089: LD_INT 0
64091: DIFF
64092: PPUSH
64093: CALL_OW 1
64097: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64098: LD_ADDR_EXP 37
64102: PUSH
64103: LD_EXP 37
64107: PPUSH
64108: LD_VAR 0 2
64112: PPUSH
64113: EMPTY
64114: PPUSH
64115: CALL_OW 1
64119: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64120: LD_ADDR_EXP 38
64124: PUSH
64125: LD_EXP 38
64129: PPUSH
64130: LD_VAR 0 2
64134: PPUSH
64135: EMPTY
64136: PPUSH
64137: CALL_OW 1
64141: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64142: LD_ADDR_EXP 39
64146: PUSH
64147: LD_EXP 39
64151: PPUSH
64152: LD_VAR 0 2
64156: PPUSH
64157: EMPTY
64158: PPUSH
64159: CALL_OW 1
64163: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64164: LD_ADDR_EXP 40
64168: PUSH
64169: LD_EXP 40
64173: PPUSH
64174: LD_VAR 0 2
64178: PPUSH
64179: EMPTY
64180: PUSH
64181: EMPTY
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PPUSH
64187: CALL_OW 1
64191: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64192: LD_ADDR_EXP 41
64196: PUSH
64197: LD_EXP 41
64201: PPUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: EMPTY
64208: PPUSH
64209: CALL_OW 1
64213: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64214: LD_ADDR_EXP 68
64218: PUSH
64219: LD_EXP 68
64223: PPUSH
64224: LD_VAR 0 2
64228: PPUSH
64229: EMPTY
64230: PPUSH
64231: CALL_OW 1
64235: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64236: LD_ADDR_EXP 42
64240: PUSH
64241: LD_EXP 42
64245: PPUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: EMPTY
64252: PPUSH
64253: CALL_OW 1
64257: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64258: LD_ADDR_EXP 43
64262: PUSH
64263: LD_EXP 43
64267: PPUSH
64268: LD_VAR 0 2
64272: PPUSH
64273: EMPTY
64274: PPUSH
64275: CALL_OW 1
64279: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64280: LD_ADDR_EXP 44
64284: PUSH
64285: LD_EXP 44
64289: PPUSH
64290: LD_VAR 0 2
64294: PPUSH
64295: LD_EXP 36
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: PPUSH
64306: LD_INT 2
64308: PUSH
64309: LD_INT 30
64311: PUSH
64312: LD_INT 32
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 30
64321: PUSH
64322: LD_INT 33
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: PPUSH
64334: CALL_OW 72
64338: PPUSH
64339: CALL_OW 1
64343: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64344: LD_ADDR_EXP 45
64348: PUSH
64349: LD_EXP 45
64353: PPUSH
64354: LD_VAR 0 2
64358: PPUSH
64359: LD_EXP 36
64363: PUSH
64364: LD_VAR 0 2
64368: ARRAY
64369: PPUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 30
64375: PUSH
64376: LD_INT 32
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 30
64385: PUSH
64386: LD_INT 31
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 58
64400: PUSH
64401: EMPTY
64402: LIST
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PPUSH
64408: CALL_OW 72
64412: PPUSH
64413: CALL_OW 1
64417: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64418: LD_ADDR_EXP 46
64422: PUSH
64423: LD_EXP 46
64427: PPUSH
64428: LD_VAR 0 2
64432: PPUSH
64433: EMPTY
64434: PPUSH
64435: CALL_OW 1
64439: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64440: LD_ADDR_EXP 50
64444: PUSH
64445: LD_EXP 50
64449: PPUSH
64450: LD_VAR 0 2
64454: PPUSH
64455: EMPTY
64456: PPUSH
64457: CALL_OW 1
64461: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64462: LD_ADDR_EXP 49
64466: PUSH
64467: LD_EXP 49
64471: PPUSH
64472: LD_VAR 0 2
64476: PPUSH
64477: EMPTY
64478: PPUSH
64479: CALL_OW 1
64483: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64484: LD_ADDR_EXP 51
64488: PUSH
64489: LD_EXP 51
64493: PPUSH
64494: LD_VAR 0 2
64498: PPUSH
64499: EMPTY
64500: PPUSH
64501: CALL_OW 1
64505: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64506: LD_ADDR_EXP 52
64510: PUSH
64511: LD_EXP 52
64515: PPUSH
64516: LD_VAR 0 2
64520: PPUSH
64521: EMPTY
64522: PPUSH
64523: CALL_OW 1
64527: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64528: LD_ADDR_EXP 53
64532: PUSH
64533: LD_EXP 53
64537: PPUSH
64538: LD_VAR 0 2
64542: PPUSH
64543: EMPTY
64544: PPUSH
64545: CALL_OW 1
64549: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64550: LD_ADDR_EXP 54
64554: PUSH
64555: LD_EXP 54
64559: PPUSH
64560: LD_VAR 0 2
64564: PPUSH
64565: EMPTY
64566: PPUSH
64567: CALL_OW 1
64571: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64572: LD_ADDR_EXP 55
64576: PUSH
64577: LD_EXP 55
64581: PPUSH
64582: LD_VAR 0 2
64586: PPUSH
64587: EMPTY
64588: PPUSH
64589: CALL_OW 1
64593: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64594: LD_ADDR_EXP 56
64598: PUSH
64599: LD_EXP 56
64603: PPUSH
64604: LD_VAR 0 2
64608: PPUSH
64609: EMPTY
64610: PPUSH
64611: CALL_OW 1
64615: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64616: LD_ADDR_EXP 57
64620: PUSH
64621: LD_EXP 57
64625: PPUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: EMPTY
64632: PPUSH
64633: CALL_OW 1
64637: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64638: LD_ADDR_EXP 58
64642: PUSH
64643: LD_EXP 58
64647: PPUSH
64648: LD_VAR 0 2
64652: PPUSH
64653: EMPTY
64654: PPUSH
64655: CALL_OW 1
64659: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64660: LD_ADDR_EXP 47
64664: PUSH
64665: LD_EXP 47
64669: PPUSH
64670: LD_VAR 0 2
64674: PPUSH
64675: LD_INT 0
64677: PPUSH
64678: CALL_OW 1
64682: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64683: LD_ADDR_EXP 60
64687: PUSH
64688: LD_EXP 60
64692: PPUSH
64693: LD_VAR 0 2
64697: PPUSH
64698: LD_INT 0
64700: PPUSH
64701: CALL_OW 1
64705: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64706: LD_ADDR_EXP 48
64710: PUSH
64711: LD_EXP 48
64715: PPUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: EMPTY
64722: PPUSH
64723: CALL_OW 1
64727: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64728: LD_ADDR_EXP 59
64732: PUSH
64733: LD_EXP 59
64737: PPUSH
64738: LD_VAR 0 2
64742: PPUSH
64743: LD_INT 0
64745: PPUSH
64746: CALL_OW 1
64750: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64751: LD_ADDR_EXP 61
64755: PUSH
64756: LD_EXP 61
64760: PPUSH
64761: LD_VAR 0 2
64765: PPUSH
64766: EMPTY
64767: PPUSH
64768: CALL_OW 1
64772: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64773: LD_ADDR_EXP 64
64777: PUSH
64778: LD_EXP 64
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: LD_INT 0
64790: PPUSH
64791: CALL_OW 1
64795: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64796: LD_ADDR_EXP 65
64800: PUSH
64801: LD_EXP 65
64805: PPUSH
64806: LD_VAR 0 2
64810: PPUSH
64811: EMPTY
64812: PPUSH
64813: CALL_OW 1
64817: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64818: LD_ADDR_EXP 66
64822: PUSH
64823: LD_EXP 66
64827: PPUSH
64828: LD_VAR 0 2
64832: PPUSH
64833: EMPTY
64834: PPUSH
64835: CALL_OW 1
64839: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64840: LD_ADDR_EXP 67
64844: PUSH
64845: LD_EXP 67
64849: PPUSH
64850: LD_VAR 0 2
64854: PPUSH
64855: EMPTY
64856: PPUSH
64857: CALL_OW 1
64861: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64862: LD_ADDR_EXP 69
64866: PUSH
64867: LD_EXP 69
64871: PPUSH
64872: LD_VAR 0 2
64876: PPUSH
64877: LD_EXP 36
64881: PUSH
64882: LD_VAR 0 2
64886: ARRAY
64887: PPUSH
64888: LD_INT 2
64890: PUSH
64891: LD_INT 30
64893: PUSH
64894: LD_INT 6
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 30
64903: PUSH
64904: LD_INT 7
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 30
64913: PUSH
64914: LD_INT 8
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: PPUSH
64927: CALL_OW 72
64931: PPUSH
64932: CALL_OW 1
64936: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64937: LD_ADDR_EXP 70
64941: PUSH
64942: LD_EXP 70
64946: PPUSH
64947: LD_VAR 0 2
64951: PPUSH
64952: EMPTY
64953: PPUSH
64954: CALL_OW 1
64958: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64959: LD_ADDR_EXP 71
64963: PUSH
64964: LD_EXP 71
64968: PPUSH
64969: LD_VAR 0 2
64973: PPUSH
64974: EMPTY
64975: PPUSH
64976: CALL_OW 1
64980: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
64981: LD_ADDR_EXP 72
64985: PUSH
64986: LD_EXP 72
64990: PPUSH
64991: LD_VAR 0 2
64995: PPUSH
64996: EMPTY
64997: PPUSH
64998: CALL_OW 1
65002: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65003: LD_ADDR_EXP 73
65007: PUSH
65008: LD_EXP 73
65012: PPUSH
65013: LD_VAR 0 2
65017: PPUSH
65018: EMPTY
65019: PPUSH
65020: CALL_OW 1
65024: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65025: LD_ADDR_EXP 74
65029: PUSH
65030: LD_EXP 74
65034: PPUSH
65035: LD_VAR 0 2
65039: PPUSH
65040: EMPTY
65041: PPUSH
65042: CALL_OW 1
65046: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65047: LD_ADDR_EXP 75
65051: PUSH
65052: LD_EXP 75
65056: PPUSH
65057: LD_VAR 0 2
65061: PPUSH
65062: EMPTY
65063: PPUSH
65064: CALL_OW 1
65068: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65069: LD_ADDR_EXP 76
65073: PUSH
65074: LD_EXP 76
65078: PPUSH
65079: LD_VAR 0 2
65083: PPUSH
65084: EMPTY
65085: PPUSH
65086: CALL_OW 1
65090: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65091: LD_ADDR_EXP 77
65095: PUSH
65096: LD_EXP 77
65100: PPUSH
65101: LD_VAR 0 2
65105: PPUSH
65106: EMPTY
65107: PPUSH
65108: CALL_OW 1
65112: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65113: LD_ADDR_EXP 78
65117: PUSH
65118: LD_EXP 78
65122: PPUSH
65123: LD_VAR 0 2
65127: PPUSH
65128: LD_INT 0
65130: PPUSH
65131: CALL_OW 1
65135: ST_TO_ADDR
// end ;
65136: GO 64060
65138: POP
65139: POP
// MC_InitSides ( ) ;
65140: CALL 65426 0 0
// MC_InitResearch ( ) ;
65144: CALL 65165 0 0
// CustomInitMacro ( ) ;
65148: CALL 1407 0 0
// skirmish := true ;
65152: LD_ADDR_EXP 34
65156: PUSH
65157: LD_INT 1
65159: ST_TO_ADDR
// end ;
65160: LD_VAR 0 1
65164: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65165: LD_INT 0
65167: PPUSH
65168: PPUSH
65169: PPUSH
65170: PPUSH
65171: PPUSH
65172: PPUSH
// if not mc_bases then
65173: LD_EXP 36
65177: NOT
65178: IFFALSE 65182
// exit ;
65180: GO 65421
// for i = 1 to 8 do
65182: LD_ADDR_VAR 0 2
65186: PUSH
65187: DOUBLE
65188: LD_INT 1
65190: DEC
65191: ST_TO_ADDR
65192: LD_INT 8
65194: PUSH
65195: FOR_TO
65196: IFFALSE 65222
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65198: LD_ADDR_EXP 63
65202: PUSH
65203: LD_EXP 63
65207: PPUSH
65208: LD_VAR 0 2
65212: PPUSH
65213: EMPTY
65214: PPUSH
65215: CALL_OW 1
65219: ST_TO_ADDR
65220: GO 65195
65222: POP
65223: POP
// tmp := [ ] ;
65224: LD_ADDR_VAR 0 5
65228: PUSH
65229: EMPTY
65230: ST_TO_ADDR
// for i = 1 to mc_sides do
65231: LD_ADDR_VAR 0 2
65235: PUSH
65236: DOUBLE
65237: LD_INT 1
65239: DEC
65240: ST_TO_ADDR
65241: LD_EXP 62
65245: PUSH
65246: FOR_TO
65247: IFFALSE 65305
// if not mc_sides [ i ] in tmp then
65249: LD_EXP 62
65253: PUSH
65254: LD_VAR 0 2
65258: ARRAY
65259: PUSH
65260: LD_VAR 0 5
65264: IN
65265: NOT
65266: IFFALSE 65303
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65268: LD_ADDR_VAR 0 5
65272: PUSH
65273: LD_VAR 0 5
65277: PPUSH
65278: LD_VAR 0 5
65282: PUSH
65283: LD_INT 1
65285: PLUS
65286: PPUSH
65287: LD_EXP 62
65291: PUSH
65292: LD_VAR 0 2
65296: ARRAY
65297: PPUSH
65298: CALL_OW 2
65302: ST_TO_ADDR
65303: GO 65246
65305: POP
65306: POP
// if not tmp then
65307: LD_VAR 0 5
65311: NOT
65312: IFFALSE 65316
// exit ;
65314: GO 65421
// for j in tmp do
65316: LD_ADDR_VAR 0 3
65320: PUSH
65321: LD_VAR 0 5
65325: PUSH
65326: FOR_IN
65327: IFFALSE 65419
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65329: LD_ADDR_VAR 0 6
65333: PUSH
65334: LD_INT 22
65336: PUSH
65337: LD_VAR 0 3
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 69
65350: ST_TO_ADDR
// if not un then
65351: LD_VAR 0 6
65355: NOT
65356: IFFALSE 65360
// continue ;
65358: GO 65326
// nation := GetNation ( un [ 1 ] ) ;
65360: LD_ADDR_VAR 0 4
65364: PUSH
65365: LD_VAR 0 6
65369: PUSH
65370: LD_INT 1
65372: ARRAY
65373: PPUSH
65374: CALL_OW 248
65378: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65379: LD_ADDR_EXP 63
65383: PUSH
65384: LD_EXP 63
65388: PPUSH
65389: LD_VAR 0 3
65393: PPUSH
65394: LD_VAR 0 3
65398: PPUSH
65399: LD_VAR 0 4
65403: PPUSH
65404: LD_INT 1
65406: PPUSH
65407: CALL 19389 0 3
65411: PPUSH
65412: CALL_OW 1
65416: ST_TO_ADDR
// end ;
65417: GO 65326
65419: POP
65420: POP
// end ;
65421: LD_VAR 0 1
65425: RET
// export function MC_InitSides ( ) ; var i ; begin
65426: LD_INT 0
65428: PPUSH
65429: PPUSH
// if not mc_bases then
65430: LD_EXP 36
65434: NOT
65435: IFFALSE 65439
// exit ;
65437: GO 65513
// for i = 1 to mc_bases do
65439: LD_ADDR_VAR 0 2
65443: PUSH
65444: DOUBLE
65445: LD_INT 1
65447: DEC
65448: ST_TO_ADDR
65449: LD_EXP 36
65453: PUSH
65454: FOR_TO
65455: IFFALSE 65511
// if mc_bases [ i ] then
65457: LD_EXP 36
65461: PUSH
65462: LD_VAR 0 2
65466: ARRAY
65467: IFFALSE 65509
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65469: LD_ADDR_EXP 62
65473: PUSH
65474: LD_EXP 62
65478: PPUSH
65479: LD_VAR 0 2
65483: PPUSH
65484: LD_EXP 36
65488: PUSH
65489: LD_VAR 0 2
65493: ARRAY
65494: PUSH
65495: LD_INT 1
65497: ARRAY
65498: PPUSH
65499: CALL_OW 255
65503: PPUSH
65504: CALL_OW 1
65508: ST_TO_ADDR
65509: GO 65454
65511: POP
65512: POP
// end ;
65513: LD_VAR 0 1
65517: RET
// every 0 0$01 trigger skirmish do
65518: LD_EXP 34
65522: IFFALSE 65676
65524: GO 65526
65526: DISABLE
// begin enable ;
65527: ENABLE
// MC_CheckBuildings ( ) ;
65528: CALL 70165 0 0
// MC_CheckPeopleLife ( ) ;
65532: CALL 70290 0 0
// RaiseSailEvent ( 100 ) ;
65536: LD_INT 100
65538: PPUSH
65539: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65543: LD_INT 103
65545: PPUSH
65546: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65550: LD_INT 104
65552: PPUSH
65553: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65557: LD_INT 105
65559: PPUSH
65560: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65564: LD_INT 106
65566: PPUSH
65567: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65571: LD_INT 107
65573: PPUSH
65574: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65578: LD_INT 108
65580: PPUSH
65581: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65585: LD_INT 109
65587: PPUSH
65588: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65592: LD_INT 110
65594: PPUSH
65595: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65599: LD_INT 111
65601: PPUSH
65602: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65606: LD_INT 112
65608: PPUSH
65609: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65613: LD_INT 113
65615: PPUSH
65616: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65620: LD_INT 120
65622: PPUSH
65623: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65627: LD_INT 121
65629: PPUSH
65630: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65634: LD_INT 122
65636: PPUSH
65637: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65641: LD_INT 123
65643: PPUSH
65644: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65648: LD_INT 124
65650: PPUSH
65651: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65655: LD_INT 125
65657: PPUSH
65658: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65662: LD_INT 126
65664: PPUSH
65665: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65669: LD_INT 200
65671: PPUSH
65672: CALL_OW 427
// end ;
65676: END
// on SailEvent ( event ) do begin if event < 100 then
65677: LD_VAR 0 1
65681: PUSH
65682: LD_INT 100
65684: LESS
65685: IFFALSE 65696
// CustomEvent ( event ) ;
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL 18588 0 1
// if event = 100 then
65696: LD_VAR 0 1
65700: PUSH
65701: LD_INT 100
65703: EQUAL
65704: IFFALSE 65710
// MC_ClassManager ( ) ;
65706: CALL 66102 0 0
// if event = 101 then
65710: LD_VAR 0 1
65714: PUSH
65715: LD_INT 101
65717: EQUAL
65718: IFFALSE 65724
// MC_RepairBuildings ( ) ;
65720: CALL 70886 0 0
// if event = 102 then
65724: LD_VAR 0 1
65728: PUSH
65729: LD_INT 102
65731: EQUAL
65732: IFFALSE 65738
// MC_Heal ( ) ;
65734: CALL 71292 0 0
// if event = 103 then
65738: LD_VAR 0 1
65742: PUSH
65743: LD_INT 103
65745: EQUAL
65746: IFFALSE 65752
// MC_Build ( ) ;
65748: CALL 71714 0 0
// if event = 104 then
65752: LD_VAR 0 1
65756: PUSH
65757: LD_INT 104
65759: EQUAL
65760: IFFALSE 65766
// MC_TurretWeapon ( ) ;
65762: CALL 73327 0 0
// if event = 105 then
65766: LD_VAR 0 1
65770: PUSH
65771: LD_INT 105
65773: EQUAL
65774: IFFALSE 65780
// MC_BuildUpgrade ( ) ;
65776: CALL 72878 0 0
// if event = 106 then
65780: LD_VAR 0 1
65784: PUSH
65785: LD_INT 106
65787: EQUAL
65788: IFFALSE 65794
// MC_PlantMines ( ) ;
65790: CALL 73757 0 0
// if event = 107 then
65794: LD_VAR 0 1
65798: PUSH
65799: LD_INT 107
65801: EQUAL
65802: IFFALSE 65808
// MC_CollectCrates ( ) ;
65804: CALL 74791 0 0
// if event = 108 then
65808: LD_VAR 0 1
65812: PUSH
65813: LD_INT 108
65815: EQUAL
65816: IFFALSE 65822
// MC_LinkRemoteControl ( ) ;
65818: CALL 76548 0 0
// if event = 109 then
65822: LD_VAR 0 1
65826: PUSH
65827: LD_INT 109
65829: EQUAL
65830: IFFALSE 65836
// MC_ProduceVehicle ( ) ;
65832: CALL 76729 0 0
// if event = 110 then
65836: LD_VAR 0 1
65840: PUSH
65841: LD_INT 110
65843: EQUAL
65844: IFFALSE 65850
// MC_SendAttack ( ) ;
65846: CALL 77210 0 0
// if event = 111 then
65850: LD_VAR 0 1
65854: PUSH
65855: LD_INT 111
65857: EQUAL
65858: IFFALSE 65864
// MC_Defend ( ) ;
65860: CALL 77318 0 0
// if event = 112 then
65864: LD_VAR 0 1
65868: PUSH
65869: LD_INT 112
65871: EQUAL
65872: IFFALSE 65878
// MC_Research ( ) ;
65874: CALL 77923 0 0
// if event = 113 then
65878: LD_VAR 0 1
65882: PUSH
65883: LD_INT 113
65885: EQUAL
65886: IFFALSE 65892
// MC_MinesTrigger ( ) ;
65888: CALL 79037 0 0
// if event = 120 then
65892: LD_VAR 0 1
65896: PUSH
65897: LD_INT 120
65899: EQUAL
65900: IFFALSE 65906
// MC_RepairVehicle ( ) ;
65902: CALL 79136 0 0
// if event = 121 then
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 121
65913: EQUAL
65914: IFFALSE 65920
// MC_TameApe ( ) ;
65916: CALL 79843 0 0
// if event = 122 then
65920: LD_VAR 0 1
65924: PUSH
65925: LD_INT 122
65927: EQUAL
65928: IFFALSE 65934
// MC_ChangeApeClass ( ) ;
65930: CALL 80672 0 0
// if event = 123 then
65934: LD_VAR 0 1
65938: PUSH
65939: LD_INT 123
65941: EQUAL
65942: IFFALSE 65948
// MC_Bazooka ( ) ;
65944: CALL 81322 0 0
// if event = 124 then
65948: LD_VAR 0 1
65952: PUSH
65953: LD_INT 124
65955: EQUAL
65956: IFFALSE 65962
// MC_TeleportExit ( ) ;
65958: CALL 81520 0 0
// if event = 125 then
65962: LD_VAR 0 1
65966: PUSH
65967: LD_INT 125
65969: EQUAL
65970: IFFALSE 65976
// MC_Deposits ( ) ;
65972: CALL 82167 0 0
// if event = 126 then
65976: LD_VAR 0 1
65980: PUSH
65981: LD_INT 126
65983: EQUAL
65984: IFFALSE 65990
// MC_RemoteDriver ( ) ;
65986: CALL 82792 0 0
// if event = 200 then
65990: LD_VAR 0 1
65994: PUSH
65995: LD_INT 200
65997: EQUAL
65998: IFFALSE 66004
// MC_Idle ( ) ;
66000: CALL 84525 0 0
// end ;
66004: PPOPN 1
66006: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66007: LD_INT 0
66009: PPUSH
66010: PPUSH
// if not mc_bases [ base ] or not tag then
66011: LD_EXP 36
66015: PUSH
66016: LD_VAR 0 1
66020: ARRAY
66021: NOT
66022: PUSH
66023: LD_VAR 0 2
66027: NOT
66028: OR
66029: IFFALSE 66033
// exit ;
66031: GO 66097
// for i in mc_bases [ base ] union mc_ape [ base ] do
66033: LD_ADDR_VAR 0 4
66037: PUSH
66038: LD_EXP 36
66042: PUSH
66043: LD_VAR 0 1
66047: ARRAY
66048: PUSH
66049: LD_EXP 65
66053: PUSH
66054: LD_VAR 0 1
66058: ARRAY
66059: UNION
66060: PUSH
66061: FOR_IN
66062: IFFALSE 66095
// if GetTag ( i ) = tag then
66064: LD_VAR 0 4
66068: PPUSH
66069: CALL_OW 110
66073: PUSH
66074: LD_VAR 0 2
66078: EQUAL
66079: IFFALSE 66093
// SetTag ( i , 0 ) ;
66081: LD_VAR 0 4
66085: PPUSH
66086: LD_INT 0
66088: PPUSH
66089: CALL_OW 109
66093: GO 66061
66095: POP
66096: POP
// end ;
66097: LD_VAR 0 3
66101: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66102: LD_INT 0
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
66109: PPUSH
66110: PPUSH
66111: PPUSH
// if not mc_bases then
66112: LD_EXP 36
66116: NOT
66117: IFFALSE 66121
// exit ;
66119: GO 66579
// for i = 1 to mc_bases do
66121: LD_ADDR_VAR 0 2
66125: PUSH
66126: DOUBLE
66127: LD_INT 1
66129: DEC
66130: ST_TO_ADDR
66131: LD_EXP 36
66135: PUSH
66136: FOR_TO
66137: IFFALSE 66577
// begin tmp := MC_ClassCheckReq ( i ) ;
66139: LD_ADDR_VAR 0 4
66143: PUSH
66144: LD_VAR 0 2
66148: PPUSH
66149: CALL 66584 0 1
66153: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66154: LD_ADDR_EXP 77
66158: PUSH
66159: LD_EXP 77
66163: PPUSH
66164: LD_VAR 0 2
66168: PPUSH
66169: LD_VAR 0 4
66173: PPUSH
66174: CALL_OW 1
66178: ST_TO_ADDR
// if not tmp then
66179: LD_VAR 0 4
66183: NOT
66184: IFFALSE 66188
// continue ;
66186: GO 66136
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66188: LD_ADDR_VAR 0 6
66192: PUSH
66193: LD_EXP 36
66197: PUSH
66198: LD_VAR 0 2
66202: ARRAY
66203: PPUSH
66204: LD_INT 2
66206: PUSH
66207: LD_INT 30
66209: PUSH
66210: LD_INT 4
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 30
66219: PUSH
66220: LD_INT 5
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: PPUSH
66232: CALL_OW 72
66236: PUSH
66237: LD_EXP 36
66241: PUSH
66242: LD_VAR 0 2
66246: ARRAY
66247: PPUSH
66248: LD_INT 2
66250: PUSH
66251: LD_INT 30
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 30
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PPUSH
66276: CALL_OW 72
66280: PUSH
66281: LD_EXP 36
66285: PUSH
66286: LD_VAR 0 2
66290: ARRAY
66291: PPUSH
66292: LD_INT 30
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PPUSH
66302: CALL_OW 72
66306: PUSH
66307: LD_EXP 36
66311: PUSH
66312: LD_VAR 0 2
66316: ARRAY
66317: PPUSH
66318: LD_INT 2
66320: PUSH
66321: LD_INT 30
66323: PUSH
66324: LD_INT 6
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 30
66333: PUSH
66334: LD_INT 7
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 30
66343: PUSH
66344: LD_INT 8
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: PPUSH
66357: CALL_OW 72
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// for j = 1 to 4 do
66368: LD_ADDR_VAR 0 3
66372: PUSH
66373: DOUBLE
66374: LD_INT 1
66376: DEC
66377: ST_TO_ADDR
66378: LD_INT 4
66380: PUSH
66381: FOR_TO
66382: IFFALSE 66573
// begin if not tmp [ j ] then
66384: LD_VAR 0 4
66388: PUSH
66389: LD_VAR 0 3
66393: ARRAY
66394: NOT
66395: IFFALSE 66399
// continue ;
66397: GO 66381
// for p in tmp [ j ] do
66399: LD_ADDR_VAR 0 5
66403: PUSH
66404: LD_VAR 0 4
66408: PUSH
66409: LD_VAR 0 3
66413: ARRAY
66414: PUSH
66415: FOR_IN
66416: IFFALSE 66569
// begin if not b [ j ] then
66418: LD_VAR 0 6
66422: PUSH
66423: LD_VAR 0 3
66427: ARRAY
66428: NOT
66429: IFFALSE 66433
// break ;
66431: GO 66569
// e := 0 ;
66433: LD_ADDR_VAR 0 7
66437: PUSH
66438: LD_INT 0
66440: ST_TO_ADDR
// for k in b [ j ] do
66441: LD_ADDR_VAR 0 8
66445: PUSH
66446: LD_VAR 0 6
66450: PUSH
66451: LD_VAR 0 3
66455: ARRAY
66456: PUSH
66457: FOR_IN
66458: IFFALSE 66485
// if IsNotFull ( k ) then
66460: LD_VAR 0 8
66464: PPUSH
66465: CALL 23378 0 1
66469: IFFALSE 66483
// begin e := k ;
66471: LD_ADDR_VAR 0 7
66475: PUSH
66476: LD_VAR 0 8
66480: ST_TO_ADDR
// break ;
66481: GO 66485
// end ;
66483: GO 66457
66485: POP
66486: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66487: LD_VAR 0 7
66491: PUSH
66492: LD_VAR 0 5
66496: PPUSH
66497: LD_VAR 0 7
66501: PPUSH
66502: CALL 60430 0 2
66506: NOT
66507: AND
66508: IFFALSE 66567
// begin if IsInUnit ( p ) then
66510: LD_VAR 0 5
66514: PPUSH
66515: CALL_OW 310
66519: IFFALSE 66530
// ComExitBuilding ( p ) ;
66521: LD_VAR 0 5
66525: PPUSH
66526: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66530: LD_VAR 0 5
66534: PPUSH
66535: LD_VAR 0 7
66539: PPUSH
66540: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66544: LD_VAR 0 5
66548: PPUSH
66549: LD_VAR 0 3
66553: PPUSH
66554: CALL_OW 183
// AddComExitBuilding ( p ) ;
66558: LD_VAR 0 5
66562: PPUSH
66563: CALL_OW 182
// end ; end ;
66567: GO 66415
66569: POP
66570: POP
// end ;
66571: GO 66381
66573: POP
66574: POP
// end ;
66575: GO 66136
66577: POP
66578: POP
// end ;
66579: LD_VAR 0 1
66583: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66584: LD_INT 0
66586: PPUSH
66587: PPUSH
66588: PPUSH
66589: PPUSH
66590: PPUSH
66591: PPUSH
66592: PPUSH
66593: PPUSH
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66598: LD_VAR 0 1
66602: NOT
66603: PUSH
66604: LD_EXP 36
66608: PUSH
66609: LD_VAR 0 1
66613: ARRAY
66614: NOT
66615: OR
66616: PUSH
66617: LD_EXP 36
66621: PUSH
66622: LD_VAR 0 1
66626: ARRAY
66627: PPUSH
66628: LD_INT 2
66630: PUSH
66631: LD_INT 30
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 30
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: LIST
66655: PPUSH
66656: CALL_OW 72
66660: NOT
66661: OR
66662: IFFALSE 66666
// exit ;
66664: GO 70160
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66666: LD_ADDR_VAR 0 4
66670: PUSH
66671: LD_EXP 36
66675: PUSH
66676: LD_VAR 0 1
66680: ARRAY
66681: PPUSH
66682: LD_INT 2
66684: PUSH
66685: LD_INT 25
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 25
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 25
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 25
66717: PUSH
66718: LD_INT 4
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 25
66727: PUSH
66728: LD_INT 5
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 25
66737: PUSH
66738: LD_INT 8
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 25
66747: PUSH
66748: LD_INT 9
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: PPUSH
66765: CALL_OW 72
66769: ST_TO_ADDR
// for i in tmp do
66770: LD_ADDR_VAR 0 3
66774: PUSH
66775: LD_VAR 0 4
66779: PUSH
66780: FOR_IN
66781: IFFALSE 66812
// if GetTag ( i ) then
66783: LD_VAR 0 3
66787: PPUSH
66788: CALL_OW 110
66792: IFFALSE 66810
// tmp := tmp diff i ;
66794: LD_ADDR_VAR 0 4
66798: PUSH
66799: LD_VAR 0 4
66803: PUSH
66804: LD_VAR 0 3
66808: DIFF
66809: ST_TO_ADDR
66810: GO 66780
66812: POP
66813: POP
// if not tmp then
66814: LD_VAR 0 4
66818: NOT
66819: IFFALSE 66823
// exit ;
66821: GO 70160
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66823: LD_ADDR_VAR 0 5
66827: PUSH
66828: LD_EXP 36
66832: PUSH
66833: LD_VAR 0 1
66837: ARRAY
66838: PPUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 25
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 25
66854: PUSH
66855: LD_INT 5
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 25
66864: PUSH
66865: LD_INT 8
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 25
66874: PUSH
66875: LD_INT 9
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: PPUSH
66889: CALL_OW 72
66893: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66894: LD_ADDR_VAR 0 6
66898: PUSH
66899: LD_EXP 36
66903: PUSH
66904: LD_VAR 0 1
66908: ARRAY
66909: PPUSH
66910: LD_INT 25
66912: PUSH
66913: LD_INT 2
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PPUSH
66920: CALL_OW 72
66924: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66925: LD_ADDR_VAR 0 7
66929: PUSH
66930: LD_EXP 36
66934: PUSH
66935: LD_VAR 0 1
66939: ARRAY
66940: PPUSH
66941: LD_INT 25
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PPUSH
66951: CALL_OW 72
66955: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66956: LD_ADDR_VAR 0 8
66960: PUSH
66961: LD_EXP 36
66965: PUSH
66966: LD_VAR 0 1
66970: ARRAY
66971: PPUSH
66972: LD_INT 25
66974: PUSH
66975: LD_INT 4
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 24
66984: PUSH
66985: LD_INT 251
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PPUSH
66996: CALL_OW 72
67000: ST_TO_ADDR
// if mc_scan [ base ] then
67001: LD_EXP 59
67005: PUSH
67006: LD_VAR 0 1
67010: ARRAY
67011: IFFALSE 67472
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67013: LD_ADDR_EXP 78
67017: PUSH
67018: LD_EXP 78
67022: PPUSH
67023: LD_VAR 0 1
67027: PPUSH
67028: LD_INT 4
67030: PPUSH
67031: CALL_OW 1
67035: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67036: LD_ADDR_VAR 0 12
67040: PUSH
67041: LD_EXP 36
67045: PUSH
67046: LD_VAR 0 1
67050: ARRAY
67051: PPUSH
67052: LD_INT 2
67054: PUSH
67055: LD_INT 30
67057: PUSH
67058: LD_INT 4
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 30
67067: PUSH
67068: LD_INT 5
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: PPUSH
67080: CALL_OW 72
67084: ST_TO_ADDR
// if not b then
67085: LD_VAR 0 12
67089: NOT
67090: IFFALSE 67094
// exit ;
67092: GO 70160
// p := [ ] ;
67094: LD_ADDR_VAR 0 11
67098: PUSH
67099: EMPTY
67100: ST_TO_ADDR
// if sci >= 2 then
67101: LD_VAR 0 8
67105: PUSH
67106: LD_INT 2
67108: GREATEREQUAL
67109: IFFALSE 67140
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67111: LD_ADDR_VAR 0 8
67115: PUSH
67116: LD_VAR 0 8
67120: PUSH
67121: LD_INT 1
67123: ARRAY
67124: PUSH
67125: LD_VAR 0 8
67129: PUSH
67130: LD_INT 2
67132: ARRAY
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: ST_TO_ADDR
67138: GO 67201
// if sci = 1 then
67140: LD_VAR 0 8
67144: PUSH
67145: LD_INT 1
67147: EQUAL
67148: IFFALSE 67169
// sci := [ sci [ 1 ] ] else
67150: LD_ADDR_VAR 0 8
67154: PUSH
67155: LD_VAR 0 8
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: EMPTY
67165: LIST
67166: ST_TO_ADDR
67167: GO 67201
// if sci = 0 then
67169: LD_VAR 0 8
67173: PUSH
67174: LD_INT 0
67176: EQUAL
67177: IFFALSE 67201
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67179: LD_ADDR_VAR 0 11
67183: PUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: LD_INT 4
67191: PPUSH
67192: CALL 60293 0 2
67196: PUSH
67197: LD_INT 1
67199: ARRAY
67200: ST_TO_ADDR
// if eng > 4 then
67201: LD_VAR 0 6
67205: PUSH
67206: LD_INT 4
67208: GREATER
67209: IFFALSE 67255
// for i = eng downto 4 do
67211: LD_ADDR_VAR 0 3
67215: PUSH
67216: DOUBLE
67217: LD_VAR 0 6
67221: INC
67222: ST_TO_ADDR
67223: LD_INT 4
67225: PUSH
67226: FOR_DOWNTO
67227: IFFALSE 67253
// eng := eng diff eng [ i ] ;
67229: LD_ADDR_VAR 0 6
67233: PUSH
67234: LD_VAR 0 6
67238: PUSH
67239: LD_VAR 0 6
67243: PUSH
67244: LD_VAR 0 3
67248: ARRAY
67249: DIFF
67250: ST_TO_ADDR
67251: GO 67226
67253: POP
67254: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67255: LD_ADDR_VAR 0 4
67259: PUSH
67260: LD_VAR 0 4
67264: PUSH
67265: LD_VAR 0 5
67269: PUSH
67270: LD_VAR 0 6
67274: UNION
67275: PUSH
67276: LD_VAR 0 7
67280: UNION
67281: PUSH
67282: LD_VAR 0 8
67286: UNION
67287: DIFF
67288: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67289: LD_ADDR_VAR 0 13
67293: PUSH
67294: LD_EXP 36
67298: PUSH
67299: LD_VAR 0 1
67303: ARRAY
67304: PPUSH
67305: LD_INT 2
67307: PUSH
67308: LD_INT 30
67310: PUSH
67311: LD_INT 32
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 30
67320: PUSH
67321: LD_INT 31
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: PPUSH
67333: CALL_OW 72
67337: PUSH
67338: LD_EXP 36
67342: PUSH
67343: LD_VAR 0 1
67347: ARRAY
67348: PPUSH
67349: LD_INT 2
67351: PUSH
67352: LD_INT 30
67354: PUSH
67355: LD_INT 4
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 30
67364: PUSH
67365: LD_INT 5
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: PPUSH
67377: CALL_OW 72
67381: PUSH
67382: LD_INT 6
67384: MUL
67385: PLUS
67386: ST_TO_ADDR
// if bcount < tmp then
67387: LD_VAR 0 13
67391: PUSH
67392: LD_VAR 0 4
67396: LESS
67397: IFFALSE 67443
// for i = tmp downto bcount do
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: DOUBLE
67405: LD_VAR 0 4
67409: INC
67410: ST_TO_ADDR
67411: LD_VAR 0 13
67415: PUSH
67416: FOR_DOWNTO
67417: IFFALSE 67441
// tmp := Delete ( tmp , tmp ) ;
67419: LD_ADDR_VAR 0 4
67423: PUSH
67424: LD_VAR 0 4
67428: PPUSH
67429: LD_VAR 0 4
67433: PPUSH
67434: CALL_OW 3
67438: ST_TO_ADDR
67439: GO 67416
67441: POP
67442: POP
// result := [ tmp , 0 , 0 , p ] ;
67443: LD_ADDR_VAR 0 2
67447: PUSH
67448: LD_VAR 0 4
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: LD_VAR 0 11
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: ST_TO_ADDR
// exit ;
67470: GO 70160
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67472: LD_EXP 36
67476: PUSH
67477: LD_VAR 0 1
67481: ARRAY
67482: PPUSH
67483: LD_INT 2
67485: PUSH
67486: LD_INT 30
67488: PUSH
67489: LD_INT 6
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 30
67498: PUSH
67499: LD_INT 7
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 30
67508: PUSH
67509: LD_INT 8
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: PPUSH
67522: CALL_OW 72
67526: NOT
67527: PUSH
67528: LD_EXP 36
67532: PUSH
67533: LD_VAR 0 1
67537: ARRAY
67538: PPUSH
67539: LD_INT 30
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PPUSH
67549: CALL_OW 72
67553: NOT
67554: AND
67555: IFFALSE 67627
// begin if eng = tmp then
67557: LD_VAR 0 6
67561: PUSH
67562: LD_VAR 0 4
67566: EQUAL
67567: IFFALSE 67571
// exit ;
67569: GO 70160
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67571: LD_ADDR_EXP 78
67575: PUSH
67576: LD_EXP 78
67580: PPUSH
67581: LD_VAR 0 1
67585: PPUSH
67586: LD_INT 1
67588: PPUSH
67589: CALL_OW 1
67593: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67594: LD_ADDR_VAR 0 2
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: LD_VAR 0 4
67606: PUSH
67607: LD_VAR 0 6
67611: DIFF
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: ST_TO_ADDR
// exit ;
67625: GO 70160
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67627: LD_EXP 63
67631: PUSH
67632: LD_EXP 62
67636: PUSH
67637: LD_VAR 0 1
67641: ARRAY
67642: ARRAY
67643: PUSH
67644: LD_EXP 36
67648: PUSH
67649: LD_VAR 0 1
67653: ARRAY
67654: PPUSH
67655: LD_INT 2
67657: PUSH
67658: LD_INT 30
67660: PUSH
67661: LD_INT 6
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 30
67670: PUSH
67671: LD_INT 7
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 30
67680: PUSH
67681: LD_INT 8
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: PPUSH
67694: CALL_OW 72
67698: AND
67699: PUSH
67700: LD_EXP 36
67704: PUSH
67705: LD_VAR 0 1
67709: ARRAY
67710: PPUSH
67711: LD_INT 30
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PPUSH
67721: CALL_OW 72
67725: NOT
67726: AND
67727: IFFALSE 67941
// begin if sci >= 6 then
67729: LD_VAR 0 8
67733: PUSH
67734: LD_INT 6
67736: GREATEREQUAL
67737: IFFALSE 67741
// exit ;
67739: GO 70160
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67741: LD_ADDR_EXP 78
67745: PUSH
67746: LD_EXP 78
67750: PPUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: LD_INT 2
67758: PPUSH
67759: CALL_OW 1
67763: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67764: LD_ADDR_VAR 0 9
67768: PUSH
67769: LD_VAR 0 4
67773: PUSH
67774: LD_VAR 0 8
67778: DIFF
67779: PPUSH
67780: LD_INT 4
67782: PPUSH
67783: CALL 60293 0 2
67787: ST_TO_ADDR
// p := [ ] ;
67788: LD_ADDR_VAR 0 11
67792: PUSH
67793: EMPTY
67794: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67795: LD_VAR 0 8
67799: PUSH
67800: LD_INT 6
67802: LESS
67803: PUSH
67804: LD_VAR 0 9
67808: PUSH
67809: LD_INT 6
67811: GREATER
67812: AND
67813: IFFALSE 67894
// begin for i = 1 to 6 - sci do
67815: LD_ADDR_VAR 0 3
67819: PUSH
67820: DOUBLE
67821: LD_INT 1
67823: DEC
67824: ST_TO_ADDR
67825: LD_INT 6
67827: PUSH
67828: LD_VAR 0 8
67832: MINUS
67833: PUSH
67834: FOR_TO
67835: IFFALSE 67890
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67837: LD_ADDR_VAR 0 11
67841: PUSH
67842: LD_VAR 0 11
67846: PPUSH
67847: LD_VAR 0 11
67851: PUSH
67852: LD_INT 1
67854: PLUS
67855: PPUSH
67856: LD_VAR 0 9
67860: PUSH
67861: LD_INT 1
67863: ARRAY
67864: PPUSH
67865: CALL_OW 2
67869: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67870: LD_ADDR_VAR 0 9
67874: PUSH
67875: LD_VAR 0 9
67879: PPUSH
67880: LD_INT 1
67882: PPUSH
67883: CALL_OW 3
67887: ST_TO_ADDR
// end ;
67888: GO 67834
67890: POP
67891: POP
// end else
67892: GO 67914
// if sort then
67894: LD_VAR 0 9
67898: IFFALSE 67914
// p := sort [ 1 ] ;
67900: LD_ADDR_VAR 0 11
67904: PUSH
67905: LD_VAR 0 9
67909: PUSH
67910: LD_INT 1
67912: ARRAY
67913: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67914: LD_ADDR_VAR 0 2
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_VAR 0 11
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// exit ;
67939: GO 70160
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67941: LD_EXP 63
67945: PUSH
67946: LD_EXP 62
67950: PUSH
67951: LD_VAR 0 1
67955: ARRAY
67956: ARRAY
67957: PUSH
67958: LD_EXP 36
67962: PUSH
67963: LD_VAR 0 1
67967: ARRAY
67968: PPUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 30
67974: PUSH
67975: LD_INT 6
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 30
67984: PUSH
67985: LD_INT 7
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 30
67994: PUSH
67995: LD_INT 8
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: PPUSH
68008: CALL_OW 72
68012: AND
68013: PUSH
68014: LD_EXP 36
68018: PUSH
68019: LD_VAR 0 1
68023: ARRAY
68024: PPUSH
68025: LD_INT 30
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PPUSH
68035: CALL_OW 72
68039: AND
68040: IFFALSE 68774
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68042: LD_ADDR_EXP 78
68046: PUSH
68047: LD_EXP 78
68051: PPUSH
68052: LD_VAR 0 1
68056: PPUSH
68057: LD_INT 3
68059: PPUSH
68060: CALL_OW 1
68064: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68065: LD_ADDR_VAR 0 2
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// if not eng then
68088: LD_VAR 0 6
68092: NOT
68093: IFFALSE 68156
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68095: LD_ADDR_VAR 0 11
68099: PUSH
68100: LD_VAR 0 4
68104: PPUSH
68105: LD_INT 2
68107: PPUSH
68108: CALL 60293 0 2
68112: PUSH
68113: LD_INT 1
68115: ARRAY
68116: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68117: LD_ADDR_VAR 0 2
68121: PUSH
68122: LD_VAR 0 2
68126: PPUSH
68127: LD_INT 2
68129: PPUSH
68130: LD_VAR 0 11
68134: PPUSH
68135: CALL_OW 1
68139: ST_TO_ADDR
// tmp := tmp diff p ;
68140: LD_ADDR_VAR 0 4
68144: PUSH
68145: LD_VAR 0 4
68149: PUSH
68150: LD_VAR 0 11
68154: DIFF
68155: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68156: LD_VAR 0 4
68160: PUSH
68161: LD_VAR 0 8
68165: PUSH
68166: LD_INT 6
68168: LESS
68169: AND
68170: IFFALSE 68358
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68172: LD_ADDR_VAR 0 9
68176: PUSH
68177: LD_VAR 0 4
68181: PUSH
68182: LD_VAR 0 8
68186: PUSH
68187: LD_VAR 0 7
68191: UNION
68192: DIFF
68193: PPUSH
68194: LD_INT 4
68196: PPUSH
68197: CALL 60293 0 2
68201: ST_TO_ADDR
// p := [ ] ;
68202: LD_ADDR_VAR 0 11
68206: PUSH
68207: EMPTY
68208: ST_TO_ADDR
// if sort then
68209: LD_VAR 0 9
68213: IFFALSE 68329
// for i = 1 to 6 - sci do
68215: LD_ADDR_VAR 0 3
68219: PUSH
68220: DOUBLE
68221: LD_INT 1
68223: DEC
68224: ST_TO_ADDR
68225: LD_INT 6
68227: PUSH
68228: LD_VAR 0 8
68232: MINUS
68233: PUSH
68234: FOR_TO
68235: IFFALSE 68327
// begin if i = sort then
68237: LD_VAR 0 3
68241: PUSH
68242: LD_VAR 0 9
68246: EQUAL
68247: IFFALSE 68251
// break ;
68249: GO 68327
// if GetClass ( i ) = 4 then
68251: LD_VAR 0 3
68255: PPUSH
68256: CALL_OW 257
68260: PUSH
68261: LD_INT 4
68263: EQUAL
68264: IFFALSE 68268
// continue ;
68266: GO 68234
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68268: LD_ADDR_VAR 0 11
68272: PUSH
68273: LD_VAR 0 11
68277: PPUSH
68278: LD_VAR 0 11
68282: PUSH
68283: LD_INT 1
68285: PLUS
68286: PPUSH
68287: LD_VAR 0 9
68291: PUSH
68292: LD_VAR 0 3
68296: ARRAY
68297: PPUSH
68298: CALL_OW 2
68302: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68303: LD_ADDR_VAR 0 4
68307: PUSH
68308: LD_VAR 0 4
68312: PUSH
68313: LD_VAR 0 9
68317: PUSH
68318: LD_VAR 0 3
68322: ARRAY
68323: DIFF
68324: ST_TO_ADDR
// end ;
68325: GO 68234
68327: POP
68328: POP
// if p then
68329: LD_VAR 0 11
68333: IFFALSE 68358
// result := Replace ( result , 4 , p ) ;
68335: LD_ADDR_VAR 0 2
68339: PUSH
68340: LD_VAR 0 2
68344: PPUSH
68345: LD_INT 4
68347: PPUSH
68348: LD_VAR 0 11
68352: PPUSH
68353: CALL_OW 1
68357: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68358: LD_VAR 0 4
68362: PUSH
68363: LD_VAR 0 7
68367: PUSH
68368: LD_INT 6
68370: LESS
68371: AND
68372: IFFALSE 68560
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68374: LD_ADDR_VAR 0 9
68378: PUSH
68379: LD_VAR 0 4
68383: PUSH
68384: LD_VAR 0 8
68388: PUSH
68389: LD_VAR 0 7
68393: UNION
68394: DIFF
68395: PPUSH
68396: LD_INT 3
68398: PPUSH
68399: CALL 60293 0 2
68403: ST_TO_ADDR
// p := [ ] ;
68404: LD_ADDR_VAR 0 11
68408: PUSH
68409: EMPTY
68410: ST_TO_ADDR
// if sort then
68411: LD_VAR 0 9
68415: IFFALSE 68531
// for i = 1 to 6 - mech do
68417: LD_ADDR_VAR 0 3
68421: PUSH
68422: DOUBLE
68423: LD_INT 1
68425: DEC
68426: ST_TO_ADDR
68427: LD_INT 6
68429: PUSH
68430: LD_VAR 0 7
68434: MINUS
68435: PUSH
68436: FOR_TO
68437: IFFALSE 68529
// begin if i = sort then
68439: LD_VAR 0 3
68443: PUSH
68444: LD_VAR 0 9
68448: EQUAL
68449: IFFALSE 68453
// break ;
68451: GO 68529
// if GetClass ( i ) = 3 then
68453: LD_VAR 0 3
68457: PPUSH
68458: CALL_OW 257
68462: PUSH
68463: LD_INT 3
68465: EQUAL
68466: IFFALSE 68470
// continue ;
68468: GO 68436
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68470: LD_ADDR_VAR 0 11
68474: PUSH
68475: LD_VAR 0 11
68479: PPUSH
68480: LD_VAR 0 11
68484: PUSH
68485: LD_INT 1
68487: PLUS
68488: PPUSH
68489: LD_VAR 0 9
68493: PUSH
68494: LD_VAR 0 3
68498: ARRAY
68499: PPUSH
68500: CALL_OW 2
68504: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68505: LD_ADDR_VAR 0 4
68509: PUSH
68510: LD_VAR 0 4
68514: PUSH
68515: LD_VAR 0 9
68519: PUSH
68520: LD_VAR 0 3
68524: ARRAY
68525: DIFF
68526: ST_TO_ADDR
// end ;
68527: GO 68436
68529: POP
68530: POP
// if p then
68531: LD_VAR 0 11
68535: IFFALSE 68560
// result := Replace ( result , 3 , p ) ;
68537: LD_ADDR_VAR 0 2
68541: PUSH
68542: LD_VAR 0 2
68546: PPUSH
68547: LD_INT 3
68549: PPUSH
68550: LD_VAR 0 11
68554: PPUSH
68555: CALL_OW 1
68559: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68560: LD_VAR 0 4
68564: PUSH
68565: LD_INT 6
68567: GREATER
68568: PUSH
68569: LD_VAR 0 6
68573: PUSH
68574: LD_INT 6
68576: LESS
68577: AND
68578: IFFALSE 68772
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68580: LD_ADDR_VAR 0 9
68584: PUSH
68585: LD_VAR 0 4
68589: PUSH
68590: LD_VAR 0 8
68594: PUSH
68595: LD_VAR 0 7
68599: UNION
68600: PUSH
68601: LD_VAR 0 6
68605: UNION
68606: DIFF
68607: PPUSH
68608: LD_INT 2
68610: PPUSH
68611: CALL 60293 0 2
68615: ST_TO_ADDR
// p := [ ] ;
68616: LD_ADDR_VAR 0 11
68620: PUSH
68621: EMPTY
68622: ST_TO_ADDR
// if sort then
68623: LD_VAR 0 9
68627: IFFALSE 68743
// for i = 1 to 6 - eng do
68629: LD_ADDR_VAR 0 3
68633: PUSH
68634: DOUBLE
68635: LD_INT 1
68637: DEC
68638: ST_TO_ADDR
68639: LD_INT 6
68641: PUSH
68642: LD_VAR 0 6
68646: MINUS
68647: PUSH
68648: FOR_TO
68649: IFFALSE 68741
// begin if i = sort then
68651: LD_VAR 0 3
68655: PUSH
68656: LD_VAR 0 9
68660: EQUAL
68661: IFFALSE 68665
// break ;
68663: GO 68741
// if GetClass ( i ) = 2 then
68665: LD_VAR 0 3
68669: PPUSH
68670: CALL_OW 257
68674: PUSH
68675: LD_INT 2
68677: EQUAL
68678: IFFALSE 68682
// continue ;
68680: GO 68648
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68682: LD_ADDR_VAR 0 11
68686: PUSH
68687: LD_VAR 0 11
68691: PPUSH
68692: LD_VAR 0 11
68696: PUSH
68697: LD_INT 1
68699: PLUS
68700: PPUSH
68701: LD_VAR 0 9
68705: PUSH
68706: LD_VAR 0 3
68710: ARRAY
68711: PPUSH
68712: CALL_OW 2
68716: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68717: LD_ADDR_VAR 0 4
68721: PUSH
68722: LD_VAR 0 4
68726: PUSH
68727: LD_VAR 0 9
68731: PUSH
68732: LD_VAR 0 3
68736: ARRAY
68737: DIFF
68738: ST_TO_ADDR
// end ;
68739: GO 68648
68741: POP
68742: POP
// if p then
68743: LD_VAR 0 11
68747: IFFALSE 68772
// result := Replace ( result , 2 , p ) ;
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: LD_VAR 0 2
68758: PPUSH
68759: LD_INT 2
68761: PPUSH
68762: LD_VAR 0 11
68766: PPUSH
68767: CALL_OW 1
68771: ST_TO_ADDR
// end ; exit ;
68772: GO 70160
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68774: LD_EXP 63
68778: PUSH
68779: LD_EXP 62
68783: PUSH
68784: LD_VAR 0 1
68788: ARRAY
68789: ARRAY
68790: NOT
68791: PUSH
68792: LD_EXP 36
68796: PUSH
68797: LD_VAR 0 1
68801: ARRAY
68802: PPUSH
68803: LD_INT 30
68805: PUSH
68806: LD_INT 3
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PPUSH
68813: CALL_OW 72
68817: AND
68818: PUSH
68819: LD_EXP 41
68823: PUSH
68824: LD_VAR 0 1
68828: ARRAY
68829: AND
68830: IFFALSE 69438
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68832: LD_ADDR_EXP 78
68836: PUSH
68837: LD_EXP 78
68841: PPUSH
68842: LD_VAR 0 1
68846: PPUSH
68847: LD_INT 5
68849: PPUSH
68850: CALL_OW 1
68854: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68855: LD_ADDR_VAR 0 2
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: ST_TO_ADDR
// if sci > 1 then
68878: LD_VAR 0 8
68882: PUSH
68883: LD_INT 1
68885: GREATER
68886: IFFALSE 68914
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68888: LD_ADDR_VAR 0 4
68892: PUSH
68893: LD_VAR 0 4
68897: PUSH
68898: LD_VAR 0 8
68902: PUSH
68903: LD_VAR 0 8
68907: PUSH
68908: LD_INT 1
68910: ARRAY
68911: DIFF
68912: DIFF
68913: ST_TO_ADDR
// if tmp and not sci then
68914: LD_VAR 0 4
68918: PUSH
68919: LD_VAR 0 8
68923: NOT
68924: AND
68925: IFFALSE 68994
// begin sort := SortBySkill ( tmp , 4 ) ;
68927: LD_ADDR_VAR 0 9
68931: PUSH
68932: LD_VAR 0 4
68936: PPUSH
68937: LD_INT 4
68939: PPUSH
68940: CALL 60293 0 2
68944: ST_TO_ADDR
// if sort then
68945: LD_VAR 0 9
68949: IFFALSE 68965
// p := sort [ 1 ] ;
68951: LD_ADDR_VAR 0 11
68955: PUSH
68956: LD_VAR 0 9
68960: PUSH
68961: LD_INT 1
68963: ARRAY
68964: ST_TO_ADDR
// if p then
68965: LD_VAR 0 11
68969: IFFALSE 68994
// result := Replace ( result , 4 , p ) ;
68971: LD_ADDR_VAR 0 2
68975: PUSH
68976: LD_VAR 0 2
68980: PPUSH
68981: LD_INT 4
68983: PPUSH
68984: LD_VAR 0 11
68988: PPUSH
68989: CALL_OW 1
68993: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
68994: LD_ADDR_VAR 0 4
68998: PUSH
68999: LD_VAR 0 4
69003: PUSH
69004: LD_VAR 0 7
69008: DIFF
69009: ST_TO_ADDR
// if tmp and mech < 6 then
69010: LD_VAR 0 4
69014: PUSH
69015: LD_VAR 0 7
69019: PUSH
69020: LD_INT 6
69022: LESS
69023: AND
69024: IFFALSE 69212
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69026: LD_ADDR_VAR 0 9
69030: PUSH
69031: LD_VAR 0 4
69035: PUSH
69036: LD_VAR 0 8
69040: PUSH
69041: LD_VAR 0 7
69045: UNION
69046: DIFF
69047: PPUSH
69048: LD_INT 3
69050: PPUSH
69051: CALL 60293 0 2
69055: ST_TO_ADDR
// p := [ ] ;
69056: LD_ADDR_VAR 0 11
69060: PUSH
69061: EMPTY
69062: ST_TO_ADDR
// if sort then
69063: LD_VAR 0 9
69067: IFFALSE 69183
// for i = 1 to 6 - mech do
69069: LD_ADDR_VAR 0 3
69073: PUSH
69074: DOUBLE
69075: LD_INT 1
69077: DEC
69078: ST_TO_ADDR
69079: LD_INT 6
69081: PUSH
69082: LD_VAR 0 7
69086: MINUS
69087: PUSH
69088: FOR_TO
69089: IFFALSE 69181
// begin if i = sort then
69091: LD_VAR 0 3
69095: PUSH
69096: LD_VAR 0 9
69100: EQUAL
69101: IFFALSE 69105
// break ;
69103: GO 69181
// if GetClass ( i ) = 3 then
69105: LD_VAR 0 3
69109: PPUSH
69110: CALL_OW 257
69114: PUSH
69115: LD_INT 3
69117: EQUAL
69118: IFFALSE 69122
// continue ;
69120: GO 69088
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69122: LD_ADDR_VAR 0 11
69126: PUSH
69127: LD_VAR 0 11
69131: PPUSH
69132: LD_VAR 0 11
69136: PUSH
69137: LD_INT 1
69139: PLUS
69140: PPUSH
69141: LD_VAR 0 9
69145: PUSH
69146: LD_VAR 0 3
69150: ARRAY
69151: PPUSH
69152: CALL_OW 2
69156: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69157: LD_ADDR_VAR 0 4
69161: PUSH
69162: LD_VAR 0 4
69166: PUSH
69167: LD_VAR 0 9
69171: PUSH
69172: LD_VAR 0 3
69176: ARRAY
69177: DIFF
69178: ST_TO_ADDR
// end ;
69179: GO 69088
69181: POP
69182: POP
// if p then
69183: LD_VAR 0 11
69187: IFFALSE 69212
// result := Replace ( result , 3 , p ) ;
69189: LD_ADDR_VAR 0 2
69193: PUSH
69194: LD_VAR 0 2
69198: PPUSH
69199: LD_INT 3
69201: PPUSH
69202: LD_VAR 0 11
69206: PPUSH
69207: CALL_OW 1
69211: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69212: LD_ADDR_VAR 0 4
69216: PUSH
69217: LD_VAR 0 4
69221: PUSH
69222: LD_VAR 0 6
69226: DIFF
69227: ST_TO_ADDR
// if tmp and eng < 6 then
69228: LD_VAR 0 4
69232: PUSH
69233: LD_VAR 0 6
69237: PUSH
69238: LD_INT 6
69240: LESS
69241: AND
69242: IFFALSE 69436
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69244: LD_ADDR_VAR 0 9
69248: PUSH
69249: LD_VAR 0 4
69253: PUSH
69254: LD_VAR 0 8
69258: PUSH
69259: LD_VAR 0 7
69263: UNION
69264: PUSH
69265: LD_VAR 0 6
69269: UNION
69270: DIFF
69271: PPUSH
69272: LD_INT 2
69274: PPUSH
69275: CALL 60293 0 2
69279: ST_TO_ADDR
// p := [ ] ;
69280: LD_ADDR_VAR 0 11
69284: PUSH
69285: EMPTY
69286: ST_TO_ADDR
// if sort then
69287: LD_VAR 0 9
69291: IFFALSE 69407
// for i = 1 to 6 - eng do
69293: LD_ADDR_VAR 0 3
69297: PUSH
69298: DOUBLE
69299: LD_INT 1
69301: DEC
69302: ST_TO_ADDR
69303: LD_INT 6
69305: PUSH
69306: LD_VAR 0 6
69310: MINUS
69311: PUSH
69312: FOR_TO
69313: IFFALSE 69405
// begin if i = sort then
69315: LD_VAR 0 3
69319: PUSH
69320: LD_VAR 0 9
69324: EQUAL
69325: IFFALSE 69329
// break ;
69327: GO 69405
// if GetClass ( i ) = 2 then
69329: LD_VAR 0 3
69333: PPUSH
69334: CALL_OW 257
69338: PUSH
69339: LD_INT 2
69341: EQUAL
69342: IFFALSE 69346
// continue ;
69344: GO 69312
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69346: LD_ADDR_VAR 0 11
69350: PUSH
69351: LD_VAR 0 11
69355: PPUSH
69356: LD_VAR 0 11
69360: PUSH
69361: LD_INT 1
69363: PLUS
69364: PPUSH
69365: LD_VAR 0 9
69369: PUSH
69370: LD_VAR 0 3
69374: ARRAY
69375: PPUSH
69376: CALL_OW 2
69380: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69381: LD_ADDR_VAR 0 4
69385: PUSH
69386: LD_VAR 0 4
69390: PUSH
69391: LD_VAR 0 9
69395: PUSH
69396: LD_VAR 0 3
69400: ARRAY
69401: DIFF
69402: ST_TO_ADDR
// end ;
69403: GO 69312
69405: POP
69406: POP
// if p then
69407: LD_VAR 0 11
69411: IFFALSE 69436
// result := Replace ( result , 2 , p ) ;
69413: LD_ADDR_VAR 0 2
69417: PUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: LD_INT 2
69425: PPUSH
69426: LD_VAR 0 11
69430: PPUSH
69431: CALL_OW 1
69435: ST_TO_ADDR
// end ; exit ;
69436: GO 70160
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69438: LD_EXP 63
69442: PUSH
69443: LD_EXP 62
69447: PUSH
69448: LD_VAR 0 1
69452: ARRAY
69453: ARRAY
69454: NOT
69455: PUSH
69456: LD_EXP 36
69460: PUSH
69461: LD_VAR 0 1
69465: ARRAY
69466: PPUSH
69467: LD_INT 30
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PPUSH
69477: CALL_OW 72
69481: AND
69482: PUSH
69483: LD_EXP 41
69487: PUSH
69488: LD_VAR 0 1
69492: ARRAY
69493: NOT
69494: AND
69495: IFFALSE 70160
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69497: LD_ADDR_EXP 78
69501: PUSH
69502: LD_EXP 78
69506: PPUSH
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_INT 6
69514: PPUSH
69515: CALL_OW 1
69519: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69520: LD_ADDR_VAR 0 2
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: ST_TO_ADDR
// if sci >= 1 then
69543: LD_VAR 0 8
69547: PUSH
69548: LD_INT 1
69550: GREATEREQUAL
69551: IFFALSE 69573
// tmp := tmp diff sci [ 1 ] ;
69553: LD_ADDR_VAR 0 4
69557: PUSH
69558: LD_VAR 0 4
69562: PUSH
69563: LD_VAR 0 8
69567: PUSH
69568: LD_INT 1
69570: ARRAY
69571: DIFF
69572: ST_TO_ADDR
// if tmp and not sci then
69573: LD_VAR 0 4
69577: PUSH
69578: LD_VAR 0 8
69582: NOT
69583: AND
69584: IFFALSE 69653
// begin sort := SortBySkill ( tmp , 4 ) ;
69586: LD_ADDR_VAR 0 9
69590: PUSH
69591: LD_VAR 0 4
69595: PPUSH
69596: LD_INT 4
69598: PPUSH
69599: CALL 60293 0 2
69603: ST_TO_ADDR
// if sort then
69604: LD_VAR 0 9
69608: IFFALSE 69624
// p := sort [ 1 ] ;
69610: LD_ADDR_VAR 0 11
69614: PUSH
69615: LD_VAR 0 9
69619: PUSH
69620: LD_INT 1
69622: ARRAY
69623: ST_TO_ADDR
// if p then
69624: LD_VAR 0 11
69628: IFFALSE 69653
// result := Replace ( result , 4 , p ) ;
69630: LD_ADDR_VAR 0 2
69634: PUSH
69635: LD_VAR 0 2
69639: PPUSH
69640: LD_INT 4
69642: PPUSH
69643: LD_VAR 0 11
69647: PPUSH
69648: CALL_OW 1
69652: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69653: LD_ADDR_VAR 0 4
69657: PUSH
69658: LD_VAR 0 4
69662: PUSH
69663: LD_VAR 0 7
69667: DIFF
69668: ST_TO_ADDR
// if tmp and mech < 6 then
69669: LD_VAR 0 4
69673: PUSH
69674: LD_VAR 0 7
69678: PUSH
69679: LD_INT 6
69681: LESS
69682: AND
69683: IFFALSE 69865
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69685: LD_ADDR_VAR 0 9
69689: PUSH
69690: LD_VAR 0 4
69694: PUSH
69695: LD_VAR 0 7
69699: DIFF
69700: PPUSH
69701: LD_INT 3
69703: PPUSH
69704: CALL 60293 0 2
69708: ST_TO_ADDR
// p := [ ] ;
69709: LD_ADDR_VAR 0 11
69713: PUSH
69714: EMPTY
69715: ST_TO_ADDR
// if sort then
69716: LD_VAR 0 9
69720: IFFALSE 69836
// for i = 1 to 6 - mech do
69722: LD_ADDR_VAR 0 3
69726: PUSH
69727: DOUBLE
69728: LD_INT 1
69730: DEC
69731: ST_TO_ADDR
69732: LD_INT 6
69734: PUSH
69735: LD_VAR 0 7
69739: MINUS
69740: PUSH
69741: FOR_TO
69742: IFFALSE 69834
// begin if i = sort then
69744: LD_VAR 0 3
69748: PUSH
69749: LD_VAR 0 9
69753: EQUAL
69754: IFFALSE 69758
// break ;
69756: GO 69834
// if GetClass ( i ) = 3 then
69758: LD_VAR 0 3
69762: PPUSH
69763: CALL_OW 257
69767: PUSH
69768: LD_INT 3
69770: EQUAL
69771: IFFALSE 69775
// continue ;
69773: GO 69741
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69775: LD_ADDR_VAR 0 11
69779: PUSH
69780: LD_VAR 0 11
69784: PPUSH
69785: LD_VAR 0 11
69789: PUSH
69790: LD_INT 1
69792: PLUS
69793: PPUSH
69794: LD_VAR 0 9
69798: PUSH
69799: LD_VAR 0 3
69803: ARRAY
69804: PPUSH
69805: CALL_OW 2
69809: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69810: LD_ADDR_VAR 0 4
69814: PUSH
69815: LD_VAR 0 4
69819: PUSH
69820: LD_VAR 0 9
69824: PUSH
69825: LD_VAR 0 3
69829: ARRAY
69830: DIFF
69831: ST_TO_ADDR
// end ;
69832: GO 69741
69834: POP
69835: POP
// if p then
69836: LD_VAR 0 11
69840: IFFALSE 69865
// result := Replace ( result , 3 , p ) ;
69842: LD_ADDR_VAR 0 2
69846: PUSH
69847: LD_VAR 0 2
69851: PPUSH
69852: LD_INT 3
69854: PPUSH
69855: LD_VAR 0 11
69859: PPUSH
69860: CALL_OW 1
69864: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69865: LD_ADDR_VAR 0 4
69869: PUSH
69870: LD_VAR 0 4
69874: PUSH
69875: LD_VAR 0 6
69879: DIFF
69880: ST_TO_ADDR
// if tmp and eng < 4 then
69881: LD_VAR 0 4
69885: PUSH
69886: LD_VAR 0 6
69890: PUSH
69891: LD_INT 4
69893: LESS
69894: AND
69895: IFFALSE 70085
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69897: LD_ADDR_VAR 0 9
69901: PUSH
69902: LD_VAR 0 4
69906: PUSH
69907: LD_VAR 0 7
69911: PUSH
69912: LD_VAR 0 6
69916: UNION
69917: DIFF
69918: PPUSH
69919: LD_INT 2
69921: PPUSH
69922: CALL 60293 0 2
69926: ST_TO_ADDR
// p := [ ] ;
69927: LD_ADDR_VAR 0 11
69931: PUSH
69932: EMPTY
69933: ST_TO_ADDR
// if sort then
69934: LD_VAR 0 9
69938: IFFALSE 70054
// for i = 1 to 4 - eng do
69940: LD_ADDR_VAR 0 3
69944: PUSH
69945: DOUBLE
69946: LD_INT 1
69948: DEC
69949: ST_TO_ADDR
69950: LD_INT 4
69952: PUSH
69953: LD_VAR 0 6
69957: MINUS
69958: PUSH
69959: FOR_TO
69960: IFFALSE 70052
// begin if i = sort then
69962: LD_VAR 0 3
69966: PUSH
69967: LD_VAR 0 9
69971: EQUAL
69972: IFFALSE 69976
// break ;
69974: GO 70052
// if GetClass ( i ) = 2 then
69976: LD_VAR 0 3
69980: PPUSH
69981: CALL_OW 257
69985: PUSH
69986: LD_INT 2
69988: EQUAL
69989: IFFALSE 69993
// continue ;
69991: GO 69959
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69993: LD_ADDR_VAR 0 11
69997: PUSH
69998: LD_VAR 0 11
70002: PPUSH
70003: LD_VAR 0 11
70007: PUSH
70008: LD_INT 1
70010: PLUS
70011: PPUSH
70012: LD_VAR 0 9
70016: PUSH
70017: LD_VAR 0 3
70021: ARRAY
70022: PPUSH
70023: CALL_OW 2
70027: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70028: LD_ADDR_VAR 0 4
70032: PUSH
70033: LD_VAR 0 4
70037: PUSH
70038: LD_VAR 0 9
70042: PUSH
70043: LD_VAR 0 3
70047: ARRAY
70048: DIFF
70049: ST_TO_ADDR
// end ;
70050: GO 69959
70052: POP
70053: POP
// if p then
70054: LD_VAR 0 11
70058: IFFALSE 70083
// result := Replace ( result , 2 , p ) ;
70060: LD_ADDR_VAR 0 2
70064: PUSH
70065: LD_VAR 0 2
70069: PPUSH
70070: LD_INT 2
70072: PPUSH
70073: LD_VAR 0 11
70077: PPUSH
70078: CALL_OW 1
70082: ST_TO_ADDR
// end else
70083: GO 70129
// for i = eng downto 5 do
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: DOUBLE
70091: LD_VAR 0 6
70095: INC
70096: ST_TO_ADDR
70097: LD_INT 5
70099: PUSH
70100: FOR_DOWNTO
70101: IFFALSE 70127
// tmp := tmp union eng [ i ] ;
70103: LD_ADDR_VAR 0 4
70107: PUSH
70108: LD_VAR 0 4
70112: PUSH
70113: LD_VAR 0 6
70117: PUSH
70118: LD_VAR 0 3
70122: ARRAY
70123: UNION
70124: ST_TO_ADDR
70125: GO 70100
70127: POP
70128: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70129: LD_ADDR_VAR 0 2
70133: PUSH
70134: LD_VAR 0 2
70138: PPUSH
70139: LD_INT 1
70141: PPUSH
70142: LD_VAR 0 4
70146: PUSH
70147: LD_VAR 0 5
70151: DIFF
70152: PPUSH
70153: CALL_OW 1
70157: ST_TO_ADDR
// exit ;
70158: GO 70160
// end ; end ;
70160: LD_VAR 0 2
70164: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70165: LD_INT 0
70167: PPUSH
70168: PPUSH
70169: PPUSH
// if not mc_bases then
70170: LD_EXP 36
70174: NOT
70175: IFFALSE 70179
// exit ;
70177: GO 70285
// for i = 1 to mc_bases do
70179: LD_ADDR_VAR 0 2
70183: PUSH
70184: DOUBLE
70185: LD_INT 1
70187: DEC
70188: ST_TO_ADDR
70189: LD_EXP 36
70193: PUSH
70194: FOR_TO
70195: IFFALSE 70276
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: LD_EXP 36
70206: PUSH
70207: LD_VAR 0 2
70211: ARRAY
70212: PPUSH
70213: LD_INT 21
70215: PUSH
70216: LD_INT 3
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: LD_INT 24
70228: PUSH
70229: LD_INT 1000
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PPUSH
70244: CALL_OW 72
70248: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70249: LD_ADDR_EXP 37
70253: PUSH
70254: LD_EXP 37
70258: PPUSH
70259: LD_VAR 0 2
70263: PPUSH
70264: LD_VAR 0 3
70268: PPUSH
70269: CALL_OW 1
70273: ST_TO_ADDR
// end ;
70274: GO 70194
70276: POP
70277: POP
// RaiseSailEvent ( 101 ) ;
70278: LD_INT 101
70280: PPUSH
70281: CALL_OW 427
// end ;
70285: LD_VAR 0 1
70289: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70290: LD_INT 0
70292: PPUSH
70293: PPUSH
70294: PPUSH
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
// if not mc_bases then
70299: LD_EXP 36
70303: NOT
70304: IFFALSE 70308
// exit ;
70306: GO 70881
// for i = 1 to mc_bases do
70308: LD_ADDR_VAR 0 2
70312: PUSH
70313: DOUBLE
70314: LD_INT 1
70316: DEC
70317: ST_TO_ADDR
70318: LD_EXP 36
70322: PUSH
70323: FOR_TO
70324: IFFALSE 70872
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70326: LD_ADDR_VAR 0 5
70330: PUSH
70331: LD_EXP 36
70335: PUSH
70336: LD_VAR 0 2
70340: ARRAY
70341: PUSH
70342: LD_EXP 65
70346: PUSH
70347: LD_VAR 0 2
70351: ARRAY
70352: UNION
70353: PPUSH
70354: LD_INT 21
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: LD_INT 54
70372: PUSH
70373: EMPTY
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: PUSH
70383: LD_INT 24
70385: PUSH
70386: LD_INT 800
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PPUSH
70406: CALL_OW 72
70410: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70411: LD_ADDR_VAR 0 6
70415: PUSH
70416: LD_EXP 36
70420: PUSH
70421: LD_VAR 0 2
70425: ARRAY
70426: PPUSH
70427: LD_INT 21
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 1
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 54
70445: PUSH
70446: EMPTY
70447: LIST
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 3
70455: PUSH
70456: LD_INT 24
70458: PUSH
70459: LD_INT 250
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: LIST
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PPUSH
70479: CALL_OW 72
70483: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70484: LD_ADDR_VAR 0 7
70488: PUSH
70489: LD_VAR 0 5
70493: PUSH
70494: LD_VAR 0 6
70498: DIFF
70499: ST_TO_ADDR
// if not need_heal_1 then
70500: LD_VAR 0 6
70504: NOT
70505: IFFALSE 70538
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70507: LD_ADDR_EXP 39
70511: PUSH
70512: LD_EXP 39
70516: PPUSH
70517: LD_VAR 0 2
70521: PUSH
70522: LD_INT 1
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PPUSH
70529: EMPTY
70530: PPUSH
70531: CALL 26051 0 3
70535: ST_TO_ADDR
70536: GO 70608
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70538: LD_ADDR_EXP 39
70542: PUSH
70543: LD_EXP 39
70547: PPUSH
70548: LD_VAR 0 2
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PPUSH
70560: LD_EXP 39
70564: PUSH
70565: LD_VAR 0 2
70569: ARRAY
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PPUSH
70575: LD_INT 3
70577: PUSH
70578: LD_INT 24
70580: PUSH
70581: LD_INT 1000
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PPUSH
70592: CALL_OW 72
70596: PUSH
70597: LD_VAR 0 6
70601: UNION
70602: PPUSH
70603: CALL 26051 0 3
70607: ST_TO_ADDR
// if not need_heal_2 then
70608: LD_VAR 0 7
70612: NOT
70613: IFFALSE 70646
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70615: LD_ADDR_EXP 39
70619: PUSH
70620: LD_EXP 39
70624: PPUSH
70625: LD_VAR 0 2
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PPUSH
70637: EMPTY
70638: PPUSH
70639: CALL 26051 0 3
70643: ST_TO_ADDR
70644: GO 70678
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70646: LD_ADDR_EXP 39
70650: PUSH
70651: LD_EXP 39
70655: PPUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PPUSH
70668: LD_VAR 0 7
70672: PPUSH
70673: CALL 26051 0 3
70677: ST_TO_ADDR
// if need_heal_2 then
70678: LD_VAR 0 7
70682: IFFALSE 70854
// for j in need_heal_2 do
70684: LD_ADDR_VAR 0 3
70688: PUSH
70689: LD_VAR 0 7
70693: PUSH
70694: FOR_IN
70695: IFFALSE 70852
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70697: LD_ADDR_VAR 0 5
70701: PUSH
70702: LD_EXP 36
70706: PUSH
70707: LD_VAR 0 2
70711: ARRAY
70712: PPUSH
70713: LD_INT 2
70715: PUSH
70716: LD_INT 30
70718: PUSH
70719: LD_INT 6
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 30
70728: PUSH
70729: LD_INT 7
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 30
70738: PUSH
70739: LD_INT 8
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 30
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 30
70758: PUSH
70759: LD_INT 1
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 25
70768: PUSH
70769: LD_INT 4
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: PPUSH
70785: CALL_OW 72
70789: ST_TO_ADDR
// if tmp then
70790: LD_VAR 0 5
70794: IFFALSE 70850
// begin k := NearestUnitToUnit ( tmp , j ) ;
70796: LD_ADDR_VAR 0 4
70800: PUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: LD_VAR 0 3
70810: PPUSH
70811: CALL_OW 74
70815: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70816: LD_VAR 0 3
70820: PPUSH
70821: LD_VAR 0 4
70825: PPUSH
70826: CALL_OW 296
70830: PUSH
70831: LD_INT 7
70833: GREATER
70834: IFFALSE 70850
// ComMoveUnit ( j , k ) ;
70836: LD_VAR 0 3
70840: PPUSH
70841: LD_VAR 0 4
70845: PPUSH
70846: CALL_OW 112
// end ; end ;
70850: GO 70694
70852: POP
70853: POP
// if not need_heal_1 and not need_heal_2 then
70854: LD_VAR 0 6
70858: NOT
70859: PUSH
70860: LD_VAR 0 7
70864: NOT
70865: AND
70866: IFFALSE 70870
// continue ;
70868: GO 70323
// end ;
70870: GO 70323
70872: POP
70873: POP
// RaiseSailEvent ( 102 ) ;
70874: LD_INT 102
70876: PPUSH
70877: CALL_OW 427
// end ;
70881: LD_VAR 0 1
70885: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70886: LD_INT 0
70888: PPUSH
70889: PPUSH
70890: PPUSH
70891: PPUSH
70892: PPUSH
// if not mc_bases then
70893: LD_EXP 36
70897: NOT
70898: IFFALSE 70902
// exit ;
70900: GO 71287
// for i = 1 to mc_bases do
70902: LD_ADDR_VAR 0 2
70906: PUSH
70907: DOUBLE
70908: LD_INT 1
70910: DEC
70911: ST_TO_ADDR
70912: LD_EXP 36
70916: PUSH
70917: FOR_TO
70918: IFFALSE 71285
// begin if not mc_building_need_repair [ i ] then
70920: LD_EXP 37
70924: PUSH
70925: LD_VAR 0 2
70929: ARRAY
70930: NOT
70931: IFFALSE 70969
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70933: LD_ADDR_EXP 38
70937: PUSH
70938: LD_EXP 38
70942: PPUSH
70943: LD_VAR 0 2
70947: PPUSH
70948: EMPTY
70949: PPUSH
70950: CALL_OW 1
70954: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70955: LD_VAR 0 2
70959: PPUSH
70960: LD_INT 101
70962: PPUSH
70963: CALL 66007 0 2
// continue ;
70967: GO 70917
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70969: LD_ADDR_EXP 42
70973: PUSH
70974: LD_EXP 42
70978: PPUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: EMPTY
70985: PPUSH
70986: CALL_OW 1
70990: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70991: LD_VAR 0 2
70995: PPUSH
70996: LD_INT 103
70998: PPUSH
70999: CALL 66007 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71003: LD_ADDR_VAR 0 5
71007: PUSH
71008: LD_EXP 36
71012: PUSH
71013: LD_VAR 0 2
71017: ARRAY
71018: PUSH
71019: LD_EXP 65
71023: PUSH
71024: LD_VAR 0 2
71028: ARRAY
71029: UNION
71030: PPUSH
71031: LD_INT 2
71033: PUSH
71034: LD_INT 25
71036: PUSH
71037: LD_INT 2
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 25
71046: PUSH
71047: LD_INT 16
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: PUSH
71059: EMPTY
71060: LIST
71061: PPUSH
71062: CALL_OW 72
71066: ST_TO_ADDR
// if not tmp then
71067: LD_VAR 0 5
71071: NOT
71072: IFFALSE 71076
// continue ;
71074: GO 70917
// for j in tmp do
71076: LD_ADDR_VAR 0 3
71080: PUSH
71081: LD_VAR 0 5
71085: PUSH
71086: FOR_IN
71087: IFFALSE 71281
// begin if mc_need_heal [ i ] then
71089: LD_EXP 39
71093: PUSH
71094: LD_VAR 0 2
71098: ARRAY
71099: IFFALSE 71147
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71101: LD_VAR 0 3
71105: PUSH
71106: LD_EXP 39
71110: PUSH
71111: LD_VAR 0 2
71115: ARRAY
71116: PUSH
71117: LD_INT 1
71119: ARRAY
71120: IN
71121: PUSH
71122: LD_VAR 0 3
71126: PUSH
71127: LD_EXP 39
71131: PUSH
71132: LD_VAR 0 2
71136: ARRAY
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: IN
71142: OR
71143: IFFALSE 71147
// continue ;
71145: GO 71086
// if IsInUnit ( j ) then
71147: LD_VAR 0 3
71151: PPUSH
71152: CALL_OW 310
71156: IFFALSE 71167
// ComExitBuilding ( j ) ;
71158: LD_VAR 0 3
71162: PPUSH
71163: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71167: LD_VAR 0 3
71171: PUSH
71172: LD_EXP 38
71176: PUSH
71177: LD_VAR 0 2
71181: ARRAY
71182: IN
71183: NOT
71184: IFFALSE 71242
// begin SetTag ( j , 101 ) ;
71186: LD_VAR 0 3
71190: PPUSH
71191: LD_INT 101
71193: PPUSH
71194: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71198: LD_ADDR_EXP 38
71202: PUSH
71203: LD_EXP 38
71207: PPUSH
71208: LD_VAR 0 2
71212: PUSH
71213: LD_EXP 38
71217: PUSH
71218: LD_VAR 0 2
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: PLUS
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PPUSH
71232: LD_VAR 0 3
71236: PPUSH
71237: CALL 26051 0 3
71241: ST_TO_ADDR
// end ; wait ( 1 ) ;
71242: LD_INT 1
71244: PPUSH
71245: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71249: LD_VAR 0 3
71253: PPUSH
71254: LD_EXP 37
71258: PUSH
71259: LD_VAR 0 2
71263: ARRAY
71264: PPUSH
71265: LD_VAR 0 3
71269: PPUSH
71270: CALL_OW 74
71274: PPUSH
71275: CALL_OW 130
// end ;
71279: GO 71086
71281: POP
71282: POP
// end ;
71283: GO 70917
71285: POP
71286: POP
// end ;
71287: LD_VAR 0 1
71291: RET
// export function MC_Heal ; var i , j , tmp ; begin
71292: LD_INT 0
71294: PPUSH
71295: PPUSH
71296: PPUSH
71297: PPUSH
// if not mc_bases then
71298: LD_EXP 36
71302: NOT
71303: IFFALSE 71307
// exit ;
71305: GO 71709
// for i = 1 to mc_bases do
71307: LD_ADDR_VAR 0 2
71311: PUSH
71312: DOUBLE
71313: LD_INT 1
71315: DEC
71316: ST_TO_ADDR
71317: LD_EXP 36
71321: PUSH
71322: FOR_TO
71323: IFFALSE 71707
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71325: LD_EXP 39
71329: PUSH
71330: LD_VAR 0 2
71334: ARRAY
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: NOT
71340: PUSH
71341: LD_EXP 39
71345: PUSH
71346: LD_VAR 0 2
71350: ARRAY
71351: PUSH
71352: LD_INT 2
71354: ARRAY
71355: NOT
71356: AND
71357: IFFALSE 71395
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71359: LD_ADDR_EXP 40
71363: PUSH
71364: LD_EXP 40
71368: PPUSH
71369: LD_VAR 0 2
71373: PPUSH
71374: EMPTY
71375: PPUSH
71376: CALL_OW 1
71380: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71381: LD_VAR 0 2
71385: PPUSH
71386: LD_INT 102
71388: PPUSH
71389: CALL 66007 0 2
// continue ;
71393: GO 71322
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71395: LD_ADDR_VAR 0 4
71399: PUSH
71400: LD_EXP 36
71404: PUSH
71405: LD_VAR 0 2
71409: ARRAY
71410: PPUSH
71411: LD_INT 25
71413: PUSH
71414: LD_INT 4
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 72
71425: ST_TO_ADDR
// if not tmp then
71426: LD_VAR 0 4
71430: NOT
71431: IFFALSE 71435
// continue ;
71433: GO 71322
// if mc_taming [ i ] then
71435: LD_EXP 67
71439: PUSH
71440: LD_VAR 0 2
71444: ARRAY
71445: IFFALSE 71469
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71447: LD_ADDR_EXP 67
71451: PUSH
71452: LD_EXP 67
71456: PPUSH
71457: LD_VAR 0 2
71461: PPUSH
71462: EMPTY
71463: PPUSH
71464: CALL_OW 1
71468: ST_TO_ADDR
// for j in tmp do
71469: LD_ADDR_VAR 0 3
71473: PUSH
71474: LD_VAR 0 4
71478: PUSH
71479: FOR_IN
71480: IFFALSE 71703
// begin if IsInUnit ( j ) then
71482: LD_VAR 0 3
71486: PPUSH
71487: CALL_OW 310
71491: IFFALSE 71502
// ComExitBuilding ( j ) ;
71493: LD_VAR 0 3
71497: PPUSH
71498: CALL_OW 122
// if not j in mc_healers [ i ] then
71502: LD_VAR 0 3
71506: PUSH
71507: LD_EXP 40
71511: PUSH
71512: LD_VAR 0 2
71516: ARRAY
71517: IN
71518: NOT
71519: IFFALSE 71565
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
71521: LD_ADDR_EXP 40
71525: PUSH
71526: LD_EXP 40
71530: PPUSH
71531: LD_VAR 0 2
71535: PUSH
71536: LD_EXP 40
71540: PUSH
71541: LD_VAR 0 2
71545: ARRAY
71546: PUSH
71547: LD_INT 1
71549: PLUS
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PPUSH
71555: LD_VAR 0 3
71559: PPUSH
71560: CALL 26051 0 3
71564: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71565: LD_VAR 0 3
71569: PPUSH
71570: CALL_OW 110
71574: PUSH
71575: LD_INT 102
71577: NONEQUAL
71578: IFFALSE 71592
// SetTag ( j , 102 ) ;
71580: LD_VAR 0 3
71584: PPUSH
71585: LD_INT 102
71587: PPUSH
71588: CALL_OW 109
// Wait ( 3 ) ;
71592: LD_INT 3
71594: PPUSH
71595: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
71599: LD_EXP 39
71603: PUSH
71604: LD_VAR 0 2
71608: ARRAY
71609: PUSH
71610: LD_INT 1
71612: ARRAY
71613: IFFALSE 71645
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71615: LD_VAR 0 3
71619: PPUSH
71620: LD_EXP 39
71624: PUSH
71625: LD_VAR 0 2
71629: ARRAY
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PUSH
71635: LD_INT 1
71637: ARRAY
71638: PPUSH
71639: CALL_OW 128
71643: GO 71701
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71645: LD_VAR 0 3
71649: PPUSH
71650: CALL_OW 314
71654: NOT
71655: PUSH
71656: LD_EXP 39
71660: PUSH
71661: LD_VAR 0 2
71665: ARRAY
71666: PUSH
71667: LD_INT 2
71669: ARRAY
71670: AND
71671: IFFALSE 71701
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71673: LD_VAR 0 3
71677: PPUSH
71678: LD_EXP 39
71682: PUSH
71683: LD_VAR 0 2
71687: ARRAY
71688: PUSH
71689: LD_INT 2
71691: ARRAY
71692: PUSH
71693: LD_INT 1
71695: ARRAY
71696: PPUSH
71697: CALL_OW 128
// end ;
71701: GO 71479
71703: POP
71704: POP
// end ;
71705: GO 71322
71707: POP
71708: POP
// end ;
71709: LD_VAR 0 1
71713: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
71718: PPUSH
71719: PPUSH
71720: PPUSH
// if not mc_bases then
71721: LD_EXP 36
71725: NOT
71726: IFFALSE 71730
// exit ;
71728: GO 72873
// for i = 1 to mc_bases do
71730: LD_ADDR_VAR 0 2
71734: PUSH
71735: DOUBLE
71736: LD_INT 1
71738: DEC
71739: ST_TO_ADDR
71740: LD_EXP 36
71744: PUSH
71745: FOR_TO
71746: IFFALSE 72871
// begin if mc_scan [ i ] then
71748: LD_EXP 59
71752: PUSH
71753: LD_VAR 0 2
71757: ARRAY
71758: IFFALSE 71762
// continue ;
71760: GO 71745
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71762: LD_EXP 41
71766: PUSH
71767: LD_VAR 0 2
71771: ARRAY
71772: NOT
71773: PUSH
71774: LD_EXP 43
71778: PUSH
71779: LD_VAR 0 2
71783: ARRAY
71784: NOT
71785: AND
71786: PUSH
71787: LD_EXP 42
71791: PUSH
71792: LD_VAR 0 2
71796: ARRAY
71797: AND
71798: IFFALSE 71836
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71800: LD_ADDR_EXP 42
71804: PUSH
71805: LD_EXP 42
71809: PPUSH
71810: LD_VAR 0 2
71814: PPUSH
71815: EMPTY
71816: PPUSH
71817: CALL_OW 1
71821: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71822: LD_VAR 0 2
71826: PPUSH
71827: LD_INT 103
71829: PPUSH
71830: CALL 66007 0 2
// continue ;
71834: GO 71745
// end ; if mc_construct_list [ i ] then
71836: LD_EXP 43
71840: PUSH
71841: LD_VAR 0 2
71845: ARRAY
71846: IFFALSE 72066
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71848: LD_ADDR_VAR 0 4
71852: PUSH
71853: LD_EXP 36
71857: PUSH
71858: LD_VAR 0 2
71862: ARRAY
71863: PPUSH
71864: LD_INT 25
71866: PUSH
71867: LD_INT 2
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PPUSH
71874: CALL_OW 72
71878: PUSH
71879: LD_EXP 38
71883: PUSH
71884: LD_VAR 0 2
71888: ARRAY
71889: DIFF
71890: ST_TO_ADDR
// if not tmp then
71891: LD_VAR 0 4
71895: NOT
71896: IFFALSE 71900
// continue ;
71898: GO 71745
// for j in tmp do
71900: LD_ADDR_VAR 0 3
71904: PUSH
71905: LD_VAR 0 4
71909: PUSH
71910: FOR_IN
71911: IFFALSE 72062
// begin if not mc_builders [ i ] then
71913: LD_EXP 42
71917: PUSH
71918: LD_VAR 0 2
71922: ARRAY
71923: NOT
71924: IFFALSE 71982
// begin SetTag ( j , 103 ) ;
71926: LD_VAR 0 3
71930: PPUSH
71931: LD_INT 103
71933: PPUSH
71934: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71938: LD_ADDR_EXP 42
71942: PUSH
71943: LD_EXP 42
71947: PPUSH
71948: LD_VAR 0 2
71952: PUSH
71953: LD_EXP 42
71957: PUSH
71958: LD_VAR 0 2
71962: ARRAY
71963: PUSH
71964: LD_INT 1
71966: PLUS
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PPUSH
71972: LD_VAR 0 3
71976: PPUSH
71977: CALL 26051 0 3
71981: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71982: LD_VAR 0 3
71986: PPUSH
71987: CALL_OW 310
71991: IFFALSE 72002
// ComExitBuilding ( j ) ;
71993: LD_VAR 0 3
71997: PPUSH
71998: CALL_OW 122
// wait ( 3 ) ;
72002: LD_INT 3
72004: PPUSH
72005: CALL_OW 67
// if not mc_construct_list [ i ] then
72009: LD_EXP 43
72013: PUSH
72014: LD_VAR 0 2
72018: ARRAY
72019: NOT
72020: IFFALSE 72024
// break ;
72022: GO 72062
// if not HasTask ( j ) then
72024: LD_VAR 0 3
72028: PPUSH
72029: CALL_OW 314
72033: NOT
72034: IFFALSE 72060
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72036: LD_VAR 0 3
72040: PPUSH
72041: LD_EXP 43
72045: PUSH
72046: LD_VAR 0 2
72050: ARRAY
72051: PUSH
72052: LD_INT 1
72054: ARRAY
72055: PPUSH
72056: CALL 28902 0 2
// end ;
72060: GO 71910
72062: POP
72063: POP
// end else
72064: GO 72869
// if mc_build_list [ i ] then
72066: LD_EXP 41
72070: PUSH
72071: LD_VAR 0 2
72075: ARRAY
72076: IFFALSE 72869
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72078: LD_ADDR_VAR 0 5
72082: PUSH
72083: LD_EXP 36
72087: PUSH
72088: LD_VAR 0 2
72092: ARRAY
72093: PPUSH
72094: LD_INT 2
72096: PUSH
72097: LD_INT 30
72099: PUSH
72100: LD_INT 0
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 30
72109: PUSH
72110: LD_INT 1
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: LIST
72121: PPUSH
72122: CALL_OW 72
72126: ST_TO_ADDR
// if depot then
72127: LD_VAR 0 5
72131: IFFALSE 72149
// depot := depot [ 1 ] else
72133: LD_ADDR_VAR 0 5
72137: PUSH
72138: LD_VAR 0 5
72142: PUSH
72143: LD_INT 1
72145: ARRAY
72146: ST_TO_ADDR
72147: GO 72157
// depot := 0 ;
72149: LD_ADDR_VAR 0 5
72153: PUSH
72154: LD_INT 0
72156: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72157: LD_EXP 41
72161: PUSH
72162: LD_VAR 0 2
72166: ARRAY
72167: PUSH
72168: LD_INT 1
72170: ARRAY
72171: PUSH
72172: LD_INT 1
72174: ARRAY
72175: PPUSH
72176: CALL 28732 0 1
72180: PUSH
72181: LD_EXP 36
72185: PUSH
72186: LD_VAR 0 2
72190: ARRAY
72191: PPUSH
72192: LD_INT 2
72194: PUSH
72195: LD_INT 30
72197: PUSH
72198: LD_INT 2
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 30
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: LIST
72219: PPUSH
72220: CALL_OW 72
72224: NOT
72225: AND
72226: IFFALSE 72331
// begin for j = 1 to mc_build_list [ i ] do
72228: LD_ADDR_VAR 0 3
72232: PUSH
72233: DOUBLE
72234: LD_INT 1
72236: DEC
72237: ST_TO_ADDR
72238: LD_EXP 41
72242: PUSH
72243: LD_VAR 0 2
72247: ARRAY
72248: PUSH
72249: FOR_TO
72250: IFFALSE 72329
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72252: LD_EXP 41
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: PUSH
72263: LD_VAR 0 3
72267: ARRAY
72268: PUSH
72269: LD_INT 1
72271: ARRAY
72272: PUSH
72273: LD_INT 2
72275: EQUAL
72276: IFFALSE 72327
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72278: LD_ADDR_EXP 41
72282: PUSH
72283: LD_EXP 41
72287: PPUSH
72288: LD_VAR 0 2
72292: PPUSH
72293: LD_EXP 41
72297: PUSH
72298: LD_VAR 0 2
72302: ARRAY
72303: PPUSH
72304: LD_VAR 0 3
72308: PPUSH
72309: LD_INT 1
72311: PPUSH
72312: LD_INT 0
72314: PPUSH
72315: CALL 25469 0 4
72319: PPUSH
72320: CALL_OW 1
72324: ST_TO_ADDR
// break ;
72325: GO 72329
// end ;
72327: GO 72249
72329: POP
72330: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72331: LD_EXP 41
72335: PUSH
72336: LD_VAR 0 2
72340: ARRAY
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PUSH
72346: LD_INT 1
72348: ARRAY
72349: PUSH
72350: LD_INT 0
72352: EQUAL
72353: PUSH
72354: LD_VAR 0 5
72358: PUSH
72359: LD_VAR 0 5
72363: PPUSH
72364: LD_EXP 41
72368: PUSH
72369: LD_VAR 0 2
72373: ARRAY
72374: PUSH
72375: LD_INT 1
72377: ARRAY
72378: PUSH
72379: LD_INT 1
72381: ARRAY
72382: PPUSH
72383: LD_EXP 41
72387: PUSH
72388: LD_VAR 0 2
72392: ARRAY
72393: PUSH
72394: LD_INT 1
72396: ARRAY
72397: PUSH
72398: LD_INT 2
72400: ARRAY
72401: PPUSH
72402: LD_EXP 41
72406: PUSH
72407: LD_VAR 0 2
72411: ARRAY
72412: PUSH
72413: LD_INT 1
72415: ARRAY
72416: PUSH
72417: LD_INT 3
72419: ARRAY
72420: PPUSH
72421: LD_EXP 41
72425: PUSH
72426: LD_VAR 0 2
72430: ARRAY
72431: PUSH
72432: LD_INT 1
72434: ARRAY
72435: PUSH
72436: LD_INT 4
72438: ARRAY
72439: PPUSH
72440: CALL 33466 0 5
72444: AND
72445: OR
72446: IFFALSE 72727
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72448: LD_ADDR_VAR 0 4
72452: PUSH
72453: LD_EXP 36
72457: PUSH
72458: LD_VAR 0 2
72462: ARRAY
72463: PPUSH
72464: LD_INT 25
72466: PUSH
72467: LD_INT 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PPUSH
72474: CALL_OW 72
72478: PUSH
72479: LD_EXP 38
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: DIFF
72490: ST_TO_ADDR
// if not tmp then
72491: LD_VAR 0 4
72495: NOT
72496: IFFALSE 72500
// continue ;
72498: GO 71745
// for j in tmp do
72500: LD_ADDR_VAR 0 3
72504: PUSH
72505: LD_VAR 0 4
72509: PUSH
72510: FOR_IN
72511: IFFALSE 72723
// begin if not mc_builders [ i ] then
72513: LD_EXP 42
72517: PUSH
72518: LD_VAR 0 2
72522: ARRAY
72523: NOT
72524: IFFALSE 72582
// begin SetTag ( j , 103 ) ;
72526: LD_VAR 0 3
72530: PPUSH
72531: LD_INT 103
72533: PPUSH
72534: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72538: LD_ADDR_EXP 42
72542: PUSH
72543: LD_EXP 42
72547: PPUSH
72548: LD_VAR 0 2
72552: PUSH
72553: LD_EXP 42
72557: PUSH
72558: LD_VAR 0 2
72562: ARRAY
72563: PUSH
72564: LD_INT 1
72566: PLUS
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PPUSH
72572: LD_VAR 0 3
72576: PPUSH
72577: CALL 26051 0 3
72581: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72582: LD_VAR 0 3
72586: PPUSH
72587: CALL_OW 310
72591: IFFALSE 72602
// ComExitBuilding ( j ) ;
72593: LD_VAR 0 3
72597: PPUSH
72598: CALL_OW 122
// wait ( 3 ) ;
72602: LD_INT 3
72604: PPUSH
72605: CALL_OW 67
// if not mc_build_list [ i ] then
72609: LD_EXP 41
72613: PUSH
72614: LD_VAR 0 2
72618: ARRAY
72619: NOT
72620: IFFALSE 72624
// break ;
72622: GO 72723
// if not HasTask ( j ) then
72624: LD_VAR 0 3
72628: PPUSH
72629: CALL_OW 314
72633: NOT
72634: IFFALSE 72721
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72636: LD_VAR 0 3
72640: PPUSH
72641: LD_EXP 41
72645: PUSH
72646: LD_VAR 0 2
72650: ARRAY
72651: PUSH
72652: LD_INT 1
72654: ARRAY
72655: PUSH
72656: LD_INT 1
72658: ARRAY
72659: PPUSH
72660: LD_EXP 41
72664: PUSH
72665: LD_VAR 0 2
72669: ARRAY
72670: PUSH
72671: LD_INT 1
72673: ARRAY
72674: PUSH
72675: LD_INT 2
72677: ARRAY
72678: PPUSH
72679: LD_EXP 41
72683: PUSH
72684: LD_VAR 0 2
72688: ARRAY
72689: PUSH
72690: LD_INT 1
72692: ARRAY
72693: PUSH
72694: LD_INT 3
72696: ARRAY
72697: PPUSH
72698: LD_EXP 41
72702: PUSH
72703: LD_VAR 0 2
72707: ARRAY
72708: PUSH
72709: LD_INT 1
72711: ARRAY
72712: PUSH
72713: LD_INT 4
72715: ARRAY
72716: PPUSH
72717: CALL_OW 145
// end ;
72721: GO 72510
72723: POP
72724: POP
// end else
72725: GO 72869
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72727: LD_EXP 36
72731: PUSH
72732: LD_VAR 0 2
72736: ARRAY
72737: PPUSH
72738: LD_EXP 41
72742: PUSH
72743: LD_VAR 0 2
72747: ARRAY
72748: PUSH
72749: LD_INT 1
72751: ARRAY
72752: PUSH
72753: LD_INT 1
72755: ARRAY
72756: PPUSH
72757: LD_EXP 41
72761: PUSH
72762: LD_VAR 0 2
72766: ARRAY
72767: PUSH
72768: LD_INT 1
72770: ARRAY
72771: PUSH
72772: LD_INT 2
72774: ARRAY
72775: PPUSH
72776: LD_EXP 41
72780: PUSH
72781: LD_VAR 0 2
72785: ARRAY
72786: PUSH
72787: LD_INT 1
72789: ARRAY
72790: PUSH
72791: LD_INT 3
72793: ARRAY
72794: PPUSH
72795: LD_EXP 41
72799: PUSH
72800: LD_VAR 0 2
72804: ARRAY
72805: PUSH
72806: LD_INT 1
72808: ARRAY
72809: PUSH
72810: LD_INT 4
72812: ARRAY
72813: PPUSH
72814: CALL 32802 0 5
72818: NOT
72819: IFFALSE 72869
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72821: LD_ADDR_EXP 41
72825: PUSH
72826: LD_EXP 41
72830: PPUSH
72831: LD_VAR 0 2
72835: PPUSH
72836: LD_EXP 41
72840: PUSH
72841: LD_VAR 0 2
72845: ARRAY
72846: PPUSH
72847: LD_INT 1
72849: PPUSH
72850: LD_INT 1
72852: NEG
72853: PPUSH
72854: LD_INT 0
72856: PPUSH
72857: CALL 25469 0 4
72861: PPUSH
72862: CALL_OW 1
72866: ST_TO_ADDR
// continue ;
72867: GO 71745
// end ; end ; end ;
72869: GO 71745
72871: POP
72872: POP
// end ;
72873: LD_VAR 0 1
72877: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72878: LD_INT 0
72880: PPUSH
72881: PPUSH
72882: PPUSH
72883: PPUSH
72884: PPUSH
72885: PPUSH
// if not mc_bases then
72886: LD_EXP 36
72890: NOT
72891: IFFALSE 72895
// exit ;
72893: GO 73322
// for i = 1 to mc_bases do
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: DOUBLE
72901: LD_INT 1
72903: DEC
72904: ST_TO_ADDR
72905: LD_EXP 36
72909: PUSH
72910: FOR_TO
72911: IFFALSE 73320
// begin tmp := mc_build_upgrade [ i ] ;
72913: LD_ADDR_VAR 0 4
72917: PUSH
72918: LD_EXP 68
72922: PUSH
72923: LD_VAR 0 2
72927: ARRAY
72928: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72929: LD_ADDR_VAR 0 6
72933: PUSH
72934: LD_EXP 69
72938: PUSH
72939: LD_VAR 0 2
72943: ARRAY
72944: PPUSH
72945: LD_INT 2
72947: PUSH
72948: LD_INT 30
72950: PUSH
72951: LD_INT 6
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 30
72960: PUSH
72961: LD_INT 7
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: LIST
72972: PPUSH
72973: CALL_OW 72
72977: ST_TO_ADDR
// if not tmp and not lab then
72978: LD_VAR 0 4
72982: NOT
72983: PUSH
72984: LD_VAR 0 6
72988: NOT
72989: AND
72990: IFFALSE 72994
// continue ;
72992: GO 72910
// if tmp then
72994: LD_VAR 0 4
72998: IFFALSE 73118
// for j in tmp do
73000: LD_ADDR_VAR 0 3
73004: PUSH
73005: LD_VAR 0 4
73009: PUSH
73010: FOR_IN
73011: IFFALSE 73116
// begin if UpgradeCost ( j ) then
73013: LD_VAR 0 3
73017: PPUSH
73018: CALL 32462 0 1
73022: IFFALSE 73114
// begin ComUpgrade ( j ) ;
73024: LD_VAR 0 3
73028: PPUSH
73029: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73033: LD_ADDR_EXP 68
73037: PUSH
73038: LD_EXP 68
73042: PPUSH
73043: LD_VAR 0 2
73047: PPUSH
73048: LD_EXP 68
73052: PUSH
73053: LD_VAR 0 2
73057: ARRAY
73058: PUSH
73059: LD_VAR 0 3
73063: DIFF
73064: PPUSH
73065: CALL_OW 1
73069: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73070: LD_ADDR_EXP 43
73074: PUSH
73075: LD_EXP 43
73079: PPUSH
73080: LD_VAR 0 2
73084: PUSH
73085: LD_EXP 43
73089: PUSH
73090: LD_VAR 0 2
73094: ARRAY
73095: PUSH
73096: LD_INT 1
73098: PLUS
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PPUSH
73104: LD_VAR 0 3
73108: PPUSH
73109: CALL 26051 0 3
73113: ST_TO_ADDR
// end ; end ;
73114: GO 73010
73116: POP
73117: POP
// if not lab or not mc_lab_upgrade [ i ] then
73118: LD_VAR 0 6
73122: NOT
73123: PUSH
73124: LD_EXP 70
73128: PUSH
73129: LD_VAR 0 2
73133: ARRAY
73134: NOT
73135: OR
73136: IFFALSE 73140
// continue ;
73138: GO 72910
// for j in lab do
73140: LD_ADDR_VAR 0 3
73144: PUSH
73145: LD_VAR 0 6
73149: PUSH
73150: FOR_IN
73151: IFFALSE 73316
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73153: LD_VAR 0 3
73157: PPUSH
73158: CALL_OW 266
73162: PUSH
73163: LD_INT 6
73165: PUSH
73166: LD_INT 7
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: IN
73173: PUSH
73174: LD_VAR 0 3
73178: PPUSH
73179: CALL_OW 461
73183: PUSH
73184: LD_INT 1
73186: NONEQUAL
73187: AND
73188: IFFALSE 73314
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73190: LD_VAR 0 3
73194: PPUSH
73195: LD_EXP 70
73199: PUSH
73200: LD_VAR 0 2
73204: ARRAY
73205: PUSH
73206: LD_INT 1
73208: ARRAY
73209: PPUSH
73210: CALL 32667 0 2
73214: IFFALSE 73314
// begin ComCancel ( j ) ;
73216: LD_VAR 0 3
73220: PPUSH
73221: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73225: LD_VAR 0 3
73229: PPUSH
73230: LD_EXP 70
73234: PUSH
73235: LD_VAR 0 2
73239: ARRAY
73240: PUSH
73241: LD_INT 1
73243: ARRAY
73244: PPUSH
73245: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73249: LD_VAR 0 3
73253: PUSH
73254: LD_EXP 43
73258: PUSH
73259: LD_VAR 0 2
73263: ARRAY
73264: IN
73265: NOT
73266: IFFALSE 73312
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73268: LD_ADDR_EXP 43
73272: PUSH
73273: LD_EXP 43
73277: PPUSH
73278: LD_VAR 0 2
73282: PUSH
73283: LD_EXP 43
73287: PUSH
73288: LD_VAR 0 2
73292: ARRAY
73293: PUSH
73294: LD_INT 1
73296: PLUS
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PPUSH
73302: LD_VAR 0 3
73306: PPUSH
73307: CALL 26051 0 3
73311: ST_TO_ADDR
// break ;
73312: GO 73316
// end ; end ; end ;
73314: GO 73150
73316: POP
73317: POP
// end ;
73318: GO 72910
73320: POP
73321: POP
// end ;
73322: LD_VAR 0 1
73326: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73327: LD_INT 0
73329: PPUSH
73330: PPUSH
73331: PPUSH
73332: PPUSH
73333: PPUSH
73334: PPUSH
73335: PPUSH
73336: PPUSH
73337: PPUSH
// if not mc_bases then
73338: LD_EXP 36
73342: NOT
73343: IFFALSE 73347
// exit ;
73345: GO 73752
// for i = 1 to mc_bases do
73347: LD_ADDR_VAR 0 2
73351: PUSH
73352: DOUBLE
73353: LD_INT 1
73355: DEC
73356: ST_TO_ADDR
73357: LD_EXP 36
73361: PUSH
73362: FOR_TO
73363: IFFALSE 73750
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73365: LD_EXP 44
73369: PUSH
73370: LD_VAR 0 2
73374: ARRAY
73375: NOT
73376: PUSH
73377: LD_EXP 36
73381: PUSH
73382: LD_VAR 0 2
73386: ARRAY
73387: PPUSH
73388: LD_INT 30
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PPUSH
73398: CALL_OW 72
73402: NOT
73403: OR
73404: IFFALSE 73408
// continue ;
73406: GO 73362
// busy := false ;
73408: LD_ADDR_VAR 0 8
73412: PUSH
73413: LD_INT 0
73415: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73416: LD_ADDR_VAR 0 4
73420: PUSH
73421: LD_EXP 36
73425: PUSH
73426: LD_VAR 0 2
73430: ARRAY
73431: PPUSH
73432: LD_INT 30
73434: PUSH
73435: LD_INT 3
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PPUSH
73442: CALL_OW 72
73446: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73447: LD_ADDR_VAR 0 6
73451: PUSH
73452: LD_EXP 44
73456: PUSH
73457: LD_VAR 0 2
73461: ARRAY
73462: PPUSH
73463: LD_INT 2
73465: PUSH
73466: LD_INT 30
73468: PUSH
73469: LD_INT 32
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 30
73478: PUSH
73479: LD_INT 33
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: PPUSH
73491: CALL_OW 72
73495: ST_TO_ADDR
// if not t then
73496: LD_VAR 0 6
73500: NOT
73501: IFFALSE 73505
// continue ;
73503: GO 73362
// for j in tmp do
73505: LD_ADDR_VAR 0 3
73509: PUSH
73510: LD_VAR 0 4
73514: PUSH
73515: FOR_IN
73516: IFFALSE 73546
// if not BuildingStatus ( j ) = bs_idle then
73518: LD_VAR 0 3
73522: PPUSH
73523: CALL_OW 461
73527: PUSH
73528: LD_INT 2
73530: EQUAL
73531: NOT
73532: IFFALSE 73544
// begin busy := true ;
73534: LD_ADDR_VAR 0 8
73538: PUSH
73539: LD_INT 1
73541: ST_TO_ADDR
// break ;
73542: GO 73546
// end ;
73544: GO 73515
73546: POP
73547: POP
// if busy then
73548: LD_VAR 0 8
73552: IFFALSE 73556
// continue ;
73554: GO 73362
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73556: LD_ADDR_VAR 0 7
73560: PUSH
73561: LD_VAR 0 6
73565: PPUSH
73566: LD_INT 35
73568: PUSH
73569: LD_INT 0
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PPUSH
73576: CALL_OW 72
73580: ST_TO_ADDR
// if tw then
73581: LD_VAR 0 7
73585: IFFALSE 73662
// begin tw := tw [ 1 ] ;
73587: LD_ADDR_VAR 0 7
73591: PUSH
73592: LD_VAR 0 7
73596: PUSH
73597: LD_INT 1
73599: ARRAY
73600: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73601: LD_ADDR_VAR 0 9
73605: PUSH
73606: LD_VAR 0 7
73610: PPUSH
73611: LD_EXP 61
73615: PUSH
73616: LD_VAR 0 2
73620: ARRAY
73621: PPUSH
73622: CALL 31021 0 2
73626: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73627: LD_EXP 75
73631: PUSH
73632: LD_VAR 0 2
73636: ARRAY
73637: IFFALSE 73660
// if not weapon in mc_allowed_tower_weapons [ i ] then
73639: LD_VAR 0 9
73643: PUSH
73644: LD_EXP 75
73648: PUSH
73649: LD_VAR 0 2
73653: ARRAY
73654: IN
73655: NOT
73656: IFFALSE 73660
// continue ;
73658: GO 73362
// end else
73660: GO 73725
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73662: LD_ADDR_VAR 0 5
73666: PUSH
73667: LD_EXP 44
73671: PUSH
73672: LD_VAR 0 2
73676: ARRAY
73677: PPUSH
73678: LD_VAR 0 4
73682: PPUSH
73683: CALL 61216 0 2
73687: ST_TO_ADDR
// if not tmp2 then
73688: LD_VAR 0 5
73692: NOT
73693: IFFALSE 73697
// continue ;
73695: GO 73362
// tw := tmp2 [ 1 ] ;
73697: LD_ADDR_VAR 0 7
73701: PUSH
73702: LD_VAR 0 5
73706: PUSH
73707: LD_INT 1
73709: ARRAY
73710: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73711: LD_ADDR_VAR 0 9
73715: PUSH
73716: LD_VAR 0 5
73720: PUSH
73721: LD_INT 2
73723: ARRAY
73724: ST_TO_ADDR
// end ; if not weapon then
73725: LD_VAR 0 9
73729: NOT
73730: IFFALSE 73734
// continue ;
73732: GO 73362
// ComPlaceWeapon ( tw , weapon ) ;
73734: LD_VAR 0 7
73738: PPUSH
73739: LD_VAR 0 9
73743: PPUSH
73744: CALL_OW 148
// end ;
73748: GO 73362
73750: POP
73751: POP
// end ;
73752: LD_VAR 0 1
73756: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73757: LD_INT 0
73759: PPUSH
73760: PPUSH
73761: PPUSH
73762: PPUSH
73763: PPUSH
73764: PPUSH
// if not mc_bases then
73765: LD_EXP 36
73769: NOT
73770: IFFALSE 73774
// exit ;
73772: GO 74786
// for i = 1 to mc_bases do
73774: LD_ADDR_VAR 0 2
73778: PUSH
73779: DOUBLE
73780: LD_INT 1
73782: DEC
73783: ST_TO_ADDR
73784: LD_EXP 36
73788: PUSH
73789: FOR_TO
73790: IFFALSE 74784
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73792: LD_EXP 49
73796: PUSH
73797: LD_VAR 0 2
73801: ARRAY
73802: NOT
73803: PUSH
73804: LD_EXP 49
73808: PUSH
73809: LD_VAR 0 2
73813: ARRAY
73814: PUSH
73815: LD_EXP 50
73819: PUSH
73820: LD_VAR 0 2
73824: ARRAY
73825: EQUAL
73826: OR
73827: IFFALSE 73831
// continue ;
73829: GO 73789
// if mc_miners [ i ] then
73831: LD_EXP 50
73835: PUSH
73836: LD_VAR 0 2
73840: ARRAY
73841: IFFALSE 74471
// begin k := 1 ;
73843: LD_ADDR_VAR 0 4
73847: PUSH
73848: LD_INT 1
73850: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73851: LD_ADDR_VAR 0 3
73855: PUSH
73856: DOUBLE
73857: LD_EXP 50
73861: PUSH
73862: LD_VAR 0 2
73866: ARRAY
73867: INC
73868: ST_TO_ADDR
73869: LD_INT 1
73871: PUSH
73872: FOR_DOWNTO
73873: IFFALSE 74469
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73875: LD_EXP 50
73879: PUSH
73880: LD_VAR 0 2
73884: ARRAY
73885: PUSH
73886: LD_VAR 0 3
73890: ARRAY
73891: PPUSH
73892: CALL_OW 301
73896: PUSH
73897: LD_EXP 50
73901: PUSH
73902: LD_VAR 0 2
73906: ARRAY
73907: PUSH
73908: LD_VAR 0 3
73912: ARRAY
73913: PPUSH
73914: CALL_OW 257
73918: PUSH
73919: LD_INT 1
73921: NONEQUAL
73922: OR
73923: IFFALSE 73986
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73925: LD_ADDR_VAR 0 5
73929: PUSH
73930: LD_EXP 50
73934: PUSH
73935: LD_VAR 0 2
73939: ARRAY
73940: PUSH
73941: LD_EXP 50
73945: PUSH
73946: LD_VAR 0 2
73950: ARRAY
73951: PUSH
73952: LD_VAR 0 3
73956: ARRAY
73957: DIFF
73958: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73959: LD_ADDR_EXP 50
73963: PUSH
73964: LD_EXP 50
73968: PPUSH
73969: LD_VAR 0 2
73973: PPUSH
73974: LD_VAR 0 5
73978: PPUSH
73979: CALL_OW 1
73983: ST_TO_ADDR
// continue ;
73984: GO 73872
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
73986: LD_EXP 50
73990: PUSH
73991: LD_VAR 0 2
73995: ARRAY
73996: PUSH
73997: LD_VAR 0 3
74001: ARRAY
74002: PPUSH
74003: CALL 25987 0 1
74007: PUSH
74008: LD_EXP 50
74012: PUSH
74013: LD_VAR 0 2
74017: ARRAY
74018: PUSH
74019: LD_VAR 0 3
74023: ARRAY
74024: PPUSH
74025: CALL_OW 255
74029: PPUSH
74030: LD_EXP 49
74034: PUSH
74035: LD_VAR 0 2
74039: ARRAY
74040: PUSH
74041: LD_VAR 0 4
74045: ARRAY
74046: PUSH
74047: LD_INT 1
74049: ARRAY
74050: PPUSH
74051: LD_EXP 49
74055: PUSH
74056: LD_VAR 0 2
74060: ARRAY
74061: PUSH
74062: LD_VAR 0 4
74066: ARRAY
74067: PUSH
74068: LD_INT 2
74070: ARRAY
74071: PPUSH
74072: LD_INT 15
74074: PPUSH
74075: CALL 26947 0 4
74079: PUSH
74080: LD_INT 4
74082: ARRAY
74083: PUSH
74084: LD_EXP 50
74088: PUSH
74089: LD_VAR 0 2
74093: ARRAY
74094: PUSH
74095: LD_VAR 0 3
74099: ARRAY
74100: PPUSH
74101: LD_INT 10
74103: PPUSH
74104: CALL 28644 0 2
74108: PUSH
74109: LD_INT 4
74111: ARRAY
74112: OR
74113: AND
74114: IFFALSE 74137
// ComStop ( mc_miners [ i ] [ j ] ) ;
74116: LD_EXP 50
74120: PUSH
74121: LD_VAR 0 2
74125: ARRAY
74126: PUSH
74127: LD_VAR 0 3
74131: ARRAY
74132: PPUSH
74133: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74137: LD_EXP 50
74141: PUSH
74142: LD_VAR 0 2
74146: ARRAY
74147: PUSH
74148: LD_VAR 0 3
74152: ARRAY
74153: PPUSH
74154: CALL_OW 257
74158: PUSH
74159: LD_INT 1
74161: EQUAL
74162: PUSH
74163: LD_EXP 50
74167: PUSH
74168: LD_VAR 0 2
74172: ARRAY
74173: PUSH
74174: LD_VAR 0 3
74178: ARRAY
74179: PPUSH
74180: CALL_OW 459
74184: NOT
74185: AND
74186: PUSH
74187: LD_EXP 50
74191: PUSH
74192: LD_VAR 0 2
74196: ARRAY
74197: PUSH
74198: LD_VAR 0 3
74202: ARRAY
74203: PPUSH
74204: CALL_OW 255
74208: PPUSH
74209: LD_EXP 49
74213: PUSH
74214: LD_VAR 0 2
74218: ARRAY
74219: PUSH
74220: LD_VAR 0 4
74224: ARRAY
74225: PUSH
74226: LD_INT 1
74228: ARRAY
74229: PPUSH
74230: LD_EXP 49
74234: PUSH
74235: LD_VAR 0 2
74239: ARRAY
74240: PUSH
74241: LD_VAR 0 4
74245: ARRAY
74246: PUSH
74247: LD_INT 2
74249: ARRAY
74250: PPUSH
74251: LD_INT 15
74253: PPUSH
74254: CALL 26947 0 4
74258: PUSH
74259: LD_INT 4
74261: ARRAY
74262: PUSH
74263: LD_INT 0
74265: EQUAL
74266: AND
74267: PUSH
74268: LD_EXP 50
74272: PUSH
74273: LD_VAR 0 2
74277: ARRAY
74278: PUSH
74279: LD_VAR 0 3
74283: ARRAY
74284: PPUSH
74285: CALL_OW 314
74289: NOT
74290: AND
74291: IFFALSE 74467
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74293: LD_EXP 50
74297: PUSH
74298: LD_VAR 0 2
74302: ARRAY
74303: PUSH
74304: LD_VAR 0 3
74308: ARRAY
74309: PPUSH
74310: CALL_OW 310
74314: IFFALSE 74337
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74316: LD_EXP 50
74320: PUSH
74321: LD_VAR 0 2
74325: ARRAY
74326: PUSH
74327: LD_VAR 0 3
74331: ARRAY
74332: PPUSH
74333: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74337: LD_EXP 50
74341: PUSH
74342: LD_VAR 0 2
74346: ARRAY
74347: PUSH
74348: LD_VAR 0 3
74352: ARRAY
74353: PPUSH
74354: CALL_OW 314
74358: NOT
74359: IFFALSE 74427
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74361: LD_EXP 50
74365: PUSH
74366: LD_VAR 0 2
74370: ARRAY
74371: PUSH
74372: LD_VAR 0 3
74376: ARRAY
74377: PPUSH
74378: LD_EXP 49
74382: PUSH
74383: LD_VAR 0 2
74387: ARRAY
74388: PUSH
74389: LD_VAR 0 4
74393: ARRAY
74394: PUSH
74395: LD_INT 1
74397: ARRAY
74398: PPUSH
74399: LD_EXP 49
74403: PUSH
74404: LD_VAR 0 2
74408: ARRAY
74409: PUSH
74410: LD_VAR 0 4
74414: ARRAY
74415: PUSH
74416: LD_INT 2
74418: ARRAY
74419: PPUSH
74420: LD_INT 0
74422: PPUSH
74423: CALL_OW 193
// k := k + 1 ;
74427: LD_ADDR_VAR 0 4
74431: PUSH
74432: LD_VAR 0 4
74436: PUSH
74437: LD_INT 1
74439: PLUS
74440: ST_TO_ADDR
// if k > mc_mines [ i ] then
74441: LD_VAR 0 4
74445: PUSH
74446: LD_EXP 49
74450: PUSH
74451: LD_VAR 0 2
74455: ARRAY
74456: GREATER
74457: IFFALSE 74467
// k := 1 ;
74459: LD_ADDR_VAR 0 4
74463: PUSH
74464: LD_INT 1
74466: ST_TO_ADDR
// end ; end ;
74467: GO 73872
74469: POP
74470: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74471: LD_ADDR_VAR 0 5
74475: PUSH
74476: LD_EXP 36
74480: PUSH
74481: LD_VAR 0 2
74485: ARRAY
74486: PPUSH
74487: LD_INT 2
74489: PUSH
74490: LD_INT 30
74492: PUSH
74493: LD_INT 4
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 30
74502: PUSH
74503: LD_INT 5
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 30
74512: PUSH
74513: LD_INT 32
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: PPUSH
74526: CALL_OW 72
74530: ST_TO_ADDR
// if not tmp then
74531: LD_VAR 0 5
74535: NOT
74536: IFFALSE 74540
// continue ;
74538: GO 73789
// list := [ ] ;
74540: LD_ADDR_VAR 0 6
74544: PUSH
74545: EMPTY
74546: ST_TO_ADDR
// for j in tmp do
74547: LD_ADDR_VAR 0 3
74551: PUSH
74552: LD_VAR 0 5
74556: PUSH
74557: FOR_IN
74558: IFFALSE 74627
// begin for k in UnitsInside ( j ) do
74560: LD_ADDR_VAR 0 4
74564: PUSH
74565: LD_VAR 0 3
74569: PPUSH
74570: CALL_OW 313
74574: PUSH
74575: FOR_IN
74576: IFFALSE 74623
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74578: LD_VAR 0 4
74582: PPUSH
74583: CALL_OW 257
74587: PUSH
74588: LD_INT 1
74590: EQUAL
74591: PUSH
74592: LD_VAR 0 4
74596: PPUSH
74597: CALL_OW 459
74601: NOT
74602: AND
74603: IFFALSE 74621
// list := list ^ k ;
74605: LD_ADDR_VAR 0 6
74609: PUSH
74610: LD_VAR 0 6
74614: PUSH
74615: LD_VAR 0 4
74619: ADD
74620: ST_TO_ADDR
74621: GO 74575
74623: POP
74624: POP
// end ;
74625: GO 74557
74627: POP
74628: POP
// list := list diff mc_miners [ i ] ;
74629: LD_ADDR_VAR 0 6
74633: PUSH
74634: LD_VAR 0 6
74638: PUSH
74639: LD_EXP 50
74643: PUSH
74644: LD_VAR 0 2
74648: ARRAY
74649: DIFF
74650: ST_TO_ADDR
// if not list then
74651: LD_VAR 0 6
74655: NOT
74656: IFFALSE 74660
// continue ;
74658: GO 73789
// k := mc_mines [ i ] - mc_miners [ i ] ;
74660: LD_ADDR_VAR 0 4
74664: PUSH
74665: LD_EXP 49
74669: PUSH
74670: LD_VAR 0 2
74674: ARRAY
74675: PUSH
74676: LD_EXP 50
74680: PUSH
74681: LD_VAR 0 2
74685: ARRAY
74686: MINUS
74687: ST_TO_ADDR
// if k > list then
74688: LD_VAR 0 4
74692: PUSH
74693: LD_VAR 0 6
74697: GREATER
74698: IFFALSE 74710
// k := list ;
74700: LD_ADDR_VAR 0 4
74704: PUSH
74705: LD_VAR 0 6
74709: ST_TO_ADDR
// for j = 1 to k do
74710: LD_ADDR_VAR 0 3
74714: PUSH
74715: DOUBLE
74716: LD_INT 1
74718: DEC
74719: ST_TO_ADDR
74720: LD_VAR 0 4
74724: PUSH
74725: FOR_TO
74726: IFFALSE 74780
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74728: LD_ADDR_EXP 50
74732: PUSH
74733: LD_EXP 50
74737: PPUSH
74738: LD_VAR 0 2
74742: PUSH
74743: LD_EXP 50
74747: PUSH
74748: LD_VAR 0 2
74752: ARRAY
74753: PUSH
74754: LD_INT 1
74756: PLUS
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PPUSH
74762: LD_VAR 0 6
74766: PUSH
74767: LD_VAR 0 3
74771: ARRAY
74772: PPUSH
74773: CALL 26051 0 3
74777: ST_TO_ADDR
74778: GO 74725
74780: POP
74781: POP
// end ;
74782: GO 73789
74784: POP
74785: POP
// end ;
74786: LD_VAR 0 1
74790: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74791: LD_INT 0
74793: PPUSH
74794: PPUSH
74795: PPUSH
74796: PPUSH
74797: PPUSH
74798: PPUSH
74799: PPUSH
74800: PPUSH
74801: PPUSH
74802: PPUSH
// if not mc_bases then
74803: LD_EXP 36
74807: NOT
74808: IFFALSE 74812
// exit ;
74810: GO 76543
// for i = 1 to mc_bases do
74812: LD_ADDR_VAR 0 2
74816: PUSH
74817: DOUBLE
74818: LD_INT 1
74820: DEC
74821: ST_TO_ADDR
74822: LD_EXP 36
74826: PUSH
74827: FOR_TO
74828: IFFALSE 76541
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74830: LD_EXP 36
74834: PUSH
74835: LD_VAR 0 2
74839: ARRAY
74840: NOT
74841: PUSH
74842: LD_EXP 43
74846: PUSH
74847: LD_VAR 0 2
74851: ARRAY
74852: OR
74853: IFFALSE 74857
// continue ;
74855: GO 74827
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74857: LD_EXP 52
74861: PUSH
74862: LD_VAR 0 2
74866: ARRAY
74867: NOT
74868: PUSH
74869: LD_EXP 53
74873: PUSH
74874: LD_VAR 0 2
74878: ARRAY
74879: AND
74880: IFFALSE 74918
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74882: LD_ADDR_EXP 53
74886: PUSH
74887: LD_EXP 53
74891: PPUSH
74892: LD_VAR 0 2
74896: PPUSH
74897: EMPTY
74898: PPUSH
74899: CALL_OW 1
74903: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74904: LD_VAR 0 2
74908: PPUSH
74909: LD_INT 107
74911: PPUSH
74912: CALL 66007 0 2
// continue ;
74916: GO 74827
// end ; target := [ ] ;
74918: LD_ADDR_VAR 0 6
74922: PUSH
74923: EMPTY
74924: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74925: LD_ADDR_VAR 0 3
74929: PUSH
74930: DOUBLE
74931: LD_EXP 52
74935: PUSH
74936: LD_VAR 0 2
74940: ARRAY
74941: INC
74942: ST_TO_ADDR
74943: LD_INT 1
74945: PUSH
74946: FOR_DOWNTO
74947: IFFALSE 75207
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74949: LD_EXP 52
74953: PUSH
74954: LD_VAR 0 2
74958: ARRAY
74959: PUSH
74960: LD_VAR 0 3
74964: ARRAY
74965: PUSH
74966: LD_INT 2
74968: ARRAY
74969: PPUSH
74970: LD_EXP 52
74974: PUSH
74975: LD_VAR 0 2
74979: ARRAY
74980: PUSH
74981: LD_VAR 0 3
74985: ARRAY
74986: PUSH
74987: LD_INT 3
74989: ARRAY
74990: PPUSH
74991: CALL_OW 488
74995: PUSH
74996: LD_EXP 52
75000: PUSH
75001: LD_VAR 0 2
75005: ARRAY
75006: PUSH
75007: LD_VAR 0 3
75011: ARRAY
75012: PUSH
75013: LD_INT 2
75015: ARRAY
75016: PPUSH
75017: LD_EXP 52
75021: PUSH
75022: LD_VAR 0 2
75026: ARRAY
75027: PUSH
75028: LD_VAR 0 3
75032: ARRAY
75033: PUSH
75034: LD_INT 3
75036: ARRAY
75037: PPUSH
75038: CALL_OW 284
75042: PUSH
75043: LD_INT 0
75045: EQUAL
75046: AND
75047: IFFALSE 75102
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75049: LD_ADDR_VAR 0 5
75053: PUSH
75054: LD_EXP 52
75058: PUSH
75059: LD_VAR 0 2
75063: ARRAY
75064: PPUSH
75065: LD_VAR 0 3
75069: PPUSH
75070: CALL_OW 3
75074: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75075: LD_ADDR_EXP 52
75079: PUSH
75080: LD_EXP 52
75084: PPUSH
75085: LD_VAR 0 2
75089: PPUSH
75090: LD_VAR 0 5
75094: PPUSH
75095: CALL_OW 1
75099: ST_TO_ADDR
// continue ;
75100: GO 74946
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75102: LD_EXP 36
75106: PUSH
75107: LD_VAR 0 2
75111: ARRAY
75112: PUSH
75113: LD_INT 1
75115: ARRAY
75116: PPUSH
75117: CALL_OW 255
75121: PPUSH
75122: LD_EXP 52
75126: PUSH
75127: LD_VAR 0 2
75131: ARRAY
75132: PUSH
75133: LD_VAR 0 3
75137: ARRAY
75138: PUSH
75139: LD_INT 2
75141: ARRAY
75142: PPUSH
75143: LD_EXP 52
75147: PUSH
75148: LD_VAR 0 2
75152: ARRAY
75153: PUSH
75154: LD_VAR 0 3
75158: ARRAY
75159: PUSH
75160: LD_INT 3
75162: ARRAY
75163: PPUSH
75164: LD_INT 30
75166: PPUSH
75167: CALL 26947 0 4
75171: PUSH
75172: LD_INT 4
75174: ARRAY
75175: PUSH
75176: LD_INT 0
75178: EQUAL
75179: IFFALSE 75205
// begin target := mc_crates [ i ] [ j ] ;
75181: LD_ADDR_VAR 0 6
75185: PUSH
75186: LD_EXP 52
75190: PUSH
75191: LD_VAR 0 2
75195: ARRAY
75196: PUSH
75197: LD_VAR 0 3
75201: ARRAY
75202: ST_TO_ADDR
// break ;
75203: GO 75207
// end ; end ;
75205: GO 74946
75207: POP
75208: POP
// if not target then
75209: LD_VAR 0 6
75213: NOT
75214: IFFALSE 75218
// continue ;
75216: GO 74827
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75218: LD_ADDR_VAR 0 7
75222: PUSH
75223: LD_EXP 55
75227: PUSH
75228: LD_VAR 0 2
75232: ARRAY
75233: PPUSH
75234: LD_INT 2
75236: PUSH
75237: LD_INT 3
75239: PUSH
75240: LD_INT 58
75242: PUSH
75243: EMPTY
75244: LIST
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 61
75252: PUSH
75253: EMPTY
75254: LIST
75255: PUSH
75256: LD_INT 33
75258: PUSH
75259: LD_INT 5
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 33
75268: PUSH
75269: LD_INT 3
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 2
75285: PUSH
75286: LD_INT 34
75288: PUSH
75289: LD_INT 32
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: LD_INT 34
75298: PUSH
75299: LD_INT 51
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 34
75308: PUSH
75309: LD_INT 12
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PPUSH
75326: CALL_OW 72
75330: ST_TO_ADDR
// if not cargo then
75331: LD_VAR 0 7
75335: NOT
75336: IFFALSE 75979
// begin if mc_crates_collector [ i ] < 5 then
75338: LD_EXP 53
75342: PUSH
75343: LD_VAR 0 2
75347: ARRAY
75348: PUSH
75349: LD_INT 5
75351: LESS
75352: IFFALSE 75718
// begin if mc_ape [ i ] then
75354: LD_EXP 65
75358: PUSH
75359: LD_VAR 0 2
75363: ARRAY
75364: IFFALSE 75411
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75366: LD_ADDR_VAR 0 5
75370: PUSH
75371: LD_EXP 65
75375: PUSH
75376: LD_VAR 0 2
75380: ARRAY
75381: PPUSH
75382: LD_INT 25
75384: PUSH
75385: LD_INT 16
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 24
75394: PUSH
75395: LD_INT 750
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PPUSH
75406: CALL_OW 72
75410: ST_TO_ADDR
// if not tmp then
75411: LD_VAR 0 5
75415: NOT
75416: IFFALSE 75463
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75418: LD_ADDR_VAR 0 5
75422: PUSH
75423: LD_EXP 36
75427: PUSH
75428: LD_VAR 0 2
75432: ARRAY
75433: PPUSH
75434: LD_INT 25
75436: PUSH
75437: LD_INT 2
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 24
75446: PUSH
75447: LD_INT 750
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PPUSH
75458: CALL_OW 72
75462: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75463: LD_EXP 65
75467: PUSH
75468: LD_VAR 0 2
75472: ARRAY
75473: PUSH
75474: LD_EXP 36
75478: PUSH
75479: LD_VAR 0 2
75483: ARRAY
75484: PPUSH
75485: LD_INT 25
75487: PUSH
75488: LD_INT 2
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 24
75497: PUSH
75498: LD_INT 750
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PPUSH
75509: CALL_OW 72
75513: AND
75514: PUSH
75515: LD_VAR 0 5
75519: PUSH
75520: LD_INT 5
75522: LESS
75523: AND
75524: IFFALSE 75606
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
75526: LD_ADDR_VAR 0 3
75530: PUSH
75531: LD_EXP 36
75535: PUSH
75536: LD_VAR 0 2
75540: ARRAY
75541: PPUSH
75542: LD_INT 25
75544: PUSH
75545: LD_INT 2
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 24
75554: PUSH
75555: LD_INT 750
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PPUSH
75566: CALL_OW 72
75570: PUSH
75571: FOR_IN
75572: IFFALSE 75604
// begin tmp := tmp union j ;
75574: LD_ADDR_VAR 0 5
75578: PUSH
75579: LD_VAR 0 5
75583: PUSH
75584: LD_VAR 0 3
75588: UNION
75589: ST_TO_ADDR
// if tmp >= 5 then
75590: LD_VAR 0 5
75594: PUSH
75595: LD_INT 5
75597: GREATEREQUAL
75598: IFFALSE 75602
// break ;
75600: GO 75604
// end ;
75602: GO 75571
75604: POP
75605: POP
// end ; if not tmp then
75606: LD_VAR 0 5
75610: NOT
75611: IFFALSE 75615
// continue ;
75613: GO 74827
// for j in tmp do
75615: LD_ADDR_VAR 0 3
75619: PUSH
75620: LD_VAR 0 5
75624: PUSH
75625: FOR_IN
75626: IFFALSE 75716
// if not GetTag ( j ) then
75628: LD_VAR 0 3
75632: PPUSH
75633: CALL_OW 110
75637: NOT
75638: IFFALSE 75714
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75640: LD_ADDR_EXP 53
75644: PUSH
75645: LD_EXP 53
75649: PPUSH
75650: LD_VAR 0 2
75654: PUSH
75655: LD_EXP 53
75659: PUSH
75660: LD_VAR 0 2
75664: ARRAY
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PPUSH
75674: LD_VAR 0 3
75678: PPUSH
75679: CALL 26051 0 3
75683: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75684: LD_VAR 0 3
75688: PPUSH
75689: LD_INT 107
75691: PPUSH
75692: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
75696: LD_EXP 53
75700: PUSH
75701: LD_VAR 0 2
75705: ARRAY
75706: PUSH
75707: LD_INT 5
75709: GREATEREQUAL
75710: IFFALSE 75714
// break ;
75712: GO 75716
// end ;
75714: GO 75625
75716: POP
75717: POP
// end ; if mc_crates_collector [ i ] and target then
75718: LD_EXP 53
75722: PUSH
75723: LD_VAR 0 2
75727: ARRAY
75728: PUSH
75729: LD_VAR 0 6
75733: AND
75734: IFFALSE 75977
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75736: LD_EXP 53
75740: PUSH
75741: LD_VAR 0 2
75745: ARRAY
75746: PUSH
75747: LD_VAR 0 6
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: LESS
75756: IFFALSE 75776
// tmp := mc_crates_collector [ i ] else
75758: LD_ADDR_VAR 0 5
75762: PUSH
75763: LD_EXP 53
75767: PUSH
75768: LD_VAR 0 2
75772: ARRAY
75773: ST_TO_ADDR
75774: GO 75790
// tmp := target [ 1 ] ;
75776: LD_ADDR_VAR 0 5
75780: PUSH
75781: LD_VAR 0 6
75785: PUSH
75786: LD_INT 1
75788: ARRAY
75789: ST_TO_ADDR
// k := 0 ;
75790: LD_ADDR_VAR 0 4
75794: PUSH
75795: LD_INT 0
75797: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75798: LD_ADDR_VAR 0 3
75802: PUSH
75803: LD_EXP 53
75807: PUSH
75808: LD_VAR 0 2
75812: ARRAY
75813: PUSH
75814: FOR_IN
75815: IFFALSE 75975
// begin k := k + 1 ;
75817: LD_ADDR_VAR 0 4
75821: PUSH
75822: LD_VAR 0 4
75826: PUSH
75827: LD_INT 1
75829: PLUS
75830: ST_TO_ADDR
// if k > tmp then
75831: LD_VAR 0 4
75835: PUSH
75836: LD_VAR 0 5
75840: GREATER
75841: IFFALSE 75845
// break ;
75843: GO 75975
// if not GetClass ( j ) in [ 2 , 16 ] then
75845: LD_VAR 0 3
75849: PPUSH
75850: CALL_OW 257
75854: PUSH
75855: LD_INT 2
75857: PUSH
75858: LD_INT 16
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: IN
75865: NOT
75866: IFFALSE 75919
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75868: LD_ADDR_EXP 53
75872: PUSH
75873: LD_EXP 53
75877: PPUSH
75878: LD_VAR 0 2
75882: PPUSH
75883: LD_EXP 53
75887: PUSH
75888: LD_VAR 0 2
75892: ARRAY
75893: PUSH
75894: LD_VAR 0 3
75898: DIFF
75899: PPUSH
75900: CALL_OW 1
75904: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75905: LD_VAR 0 3
75909: PPUSH
75910: LD_INT 0
75912: PPUSH
75913: CALL_OW 109
// continue ;
75917: GO 75814
// end ; if IsInUnit ( j ) then
75919: LD_VAR 0 3
75923: PPUSH
75924: CALL_OW 310
75928: IFFALSE 75939
// ComExitBuilding ( j ) ;
75930: LD_VAR 0 3
75934: PPUSH
75935: CALL_OW 122
// wait ( 3 ) ;
75939: LD_INT 3
75941: PPUSH
75942: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75946: LD_VAR 0 3
75950: PPUSH
75951: LD_VAR 0 6
75955: PUSH
75956: LD_INT 2
75958: ARRAY
75959: PPUSH
75960: LD_VAR 0 6
75964: PUSH
75965: LD_INT 3
75967: ARRAY
75968: PPUSH
75969: CALL_OW 117
// end ;
75973: GO 75814
75975: POP
75976: POP
// end ; end else
75977: GO 76539
// begin for j in cargo do
75979: LD_ADDR_VAR 0 3
75983: PUSH
75984: LD_VAR 0 7
75988: PUSH
75989: FOR_IN
75990: IFFALSE 76537
// begin if GetTag ( j ) <> 0 then
75992: LD_VAR 0 3
75996: PPUSH
75997: CALL_OW 110
76001: PUSH
76002: LD_INT 0
76004: NONEQUAL
76005: IFFALSE 76009
// continue ;
76007: GO 75989
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76009: LD_VAR 0 3
76013: PPUSH
76014: CALL_OW 256
76018: PUSH
76019: LD_INT 1000
76021: LESS
76022: PUSH
76023: LD_VAR 0 3
76027: PPUSH
76028: LD_EXP 60
76032: PUSH
76033: LD_VAR 0 2
76037: ARRAY
76038: PPUSH
76039: CALL_OW 308
76043: NOT
76044: AND
76045: IFFALSE 76067
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76047: LD_VAR 0 3
76051: PPUSH
76052: LD_EXP 60
76056: PUSH
76057: LD_VAR 0 2
76061: ARRAY
76062: PPUSH
76063: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76067: LD_VAR 0 3
76071: PPUSH
76072: CALL_OW 256
76076: PUSH
76077: LD_INT 1000
76079: LESS
76080: PUSH
76081: LD_VAR 0 3
76085: PPUSH
76086: LD_EXP 60
76090: PUSH
76091: LD_VAR 0 2
76095: ARRAY
76096: PPUSH
76097: CALL_OW 308
76101: AND
76102: IFFALSE 76106
// continue ;
76104: GO 75989
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76106: LD_VAR 0 3
76110: PPUSH
76111: CALL_OW 262
76115: PUSH
76116: LD_INT 2
76118: EQUAL
76119: PUSH
76120: LD_VAR 0 3
76124: PPUSH
76125: CALL_OW 261
76129: PUSH
76130: LD_INT 15
76132: LESS
76133: AND
76134: IFFALSE 76138
// continue ;
76136: GO 75989
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76138: LD_VAR 0 3
76142: PPUSH
76143: CALL_OW 262
76147: PUSH
76148: LD_INT 1
76150: EQUAL
76151: PUSH
76152: LD_VAR 0 3
76156: PPUSH
76157: CALL_OW 261
76161: PUSH
76162: LD_INT 10
76164: LESS
76165: AND
76166: IFFALSE 76476
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76168: LD_ADDR_VAR 0 8
76172: PUSH
76173: LD_EXP 36
76177: PUSH
76178: LD_VAR 0 2
76182: ARRAY
76183: PPUSH
76184: LD_INT 2
76186: PUSH
76187: LD_INT 30
76189: PUSH
76190: LD_INT 0
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 30
76199: PUSH
76200: LD_INT 1
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: PPUSH
76212: CALL_OW 72
76216: ST_TO_ADDR
// if not depot then
76217: LD_VAR 0 8
76221: NOT
76222: IFFALSE 76226
// continue ;
76224: GO 75989
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76226: LD_VAR 0 3
76230: PPUSH
76231: LD_VAR 0 8
76235: PPUSH
76236: LD_VAR 0 3
76240: PPUSH
76241: CALL_OW 74
76245: PPUSH
76246: CALL_OW 296
76250: PUSH
76251: LD_INT 6
76253: LESS
76254: IFFALSE 76270
// SetFuel ( j , 100 ) else
76256: LD_VAR 0 3
76260: PPUSH
76261: LD_INT 100
76263: PPUSH
76264: CALL_OW 240
76268: GO 76476
// if GetFuel ( j ) = 0 then
76270: LD_VAR 0 3
76274: PPUSH
76275: CALL_OW 261
76279: PUSH
76280: LD_INT 0
76282: EQUAL
76283: IFFALSE 76476
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76285: LD_ADDR_EXP 55
76289: PUSH
76290: LD_EXP 55
76294: PPUSH
76295: LD_VAR 0 2
76299: PPUSH
76300: LD_EXP 55
76304: PUSH
76305: LD_VAR 0 2
76309: ARRAY
76310: PUSH
76311: LD_VAR 0 3
76315: DIFF
76316: PPUSH
76317: CALL_OW 1
76321: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76322: LD_VAR 0 3
76326: PPUSH
76327: CALL_OW 263
76331: PUSH
76332: LD_INT 1
76334: EQUAL
76335: IFFALSE 76351
// ComExitVehicle ( IsInUnit ( j ) ) ;
76337: LD_VAR 0 3
76341: PPUSH
76342: CALL_OW 310
76346: PPUSH
76347: CALL_OW 121
// if GetControl ( j ) = control_remote then
76351: LD_VAR 0 3
76355: PPUSH
76356: CALL_OW 263
76360: PUSH
76361: LD_INT 2
76363: EQUAL
76364: IFFALSE 76375
// ComUnlink ( j ) ;
76366: LD_VAR 0 3
76370: PPUSH
76371: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76375: LD_ADDR_VAR 0 9
76379: PUSH
76380: LD_VAR 0 2
76384: PPUSH
76385: LD_INT 3
76387: PPUSH
76388: CALL 85522 0 2
76392: ST_TO_ADDR
// if fac then
76393: LD_VAR 0 9
76397: IFFALSE 76474
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76399: LD_ADDR_VAR 0 10
76403: PUSH
76404: LD_VAR 0 9
76408: PPUSH
76409: LD_VAR 0 3
76413: PPUSH
76414: CALL_OW 265
76418: PPUSH
76419: LD_VAR 0 3
76423: PPUSH
76424: CALL_OW 262
76428: PPUSH
76429: LD_VAR 0 3
76433: PPUSH
76434: CALL_OW 263
76438: PPUSH
76439: LD_VAR 0 3
76443: PPUSH
76444: CALL_OW 264
76448: PPUSH
76449: CALL 23644 0 5
76453: ST_TO_ADDR
// if components then
76454: LD_VAR 0 10
76458: IFFALSE 76474
// MC_InsertProduceList ( i , components ) ;
76460: LD_VAR 0 2
76464: PPUSH
76465: LD_VAR 0 10
76469: PPUSH
76470: CALL 85150 0 2
// end ; continue ;
76474: GO 75989
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76476: LD_VAR 0 3
76480: PPUSH
76481: LD_INT 1
76483: PPUSH
76484: CALL_OW 289
76488: PUSH
76489: LD_INT 100
76491: LESS
76492: PUSH
76493: LD_VAR 0 3
76497: PPUSH
76498: CALL_OW 314
76502: NOT
76503: AND
76504: IFFALSE 76533
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76506: LD_VAR 0 3
76510: PPUSH
76511: LD_VAR 0 6
76515: PUSH
76516: LD_INT 2
76518: ARRAY
76519: PPUSH
76520: LD_VAR 0 6
76524: PUSH
76525: LD_INT 3
76527: ARRAY
76528: PPUSH
76529: CALL_OW 117
// break ;
76533: GO 76537
// end ;
76535: GO 75989
76537: POP
76538: POP
// end ; end ;
76539: GO 74827
76541: POP
76542: POP
// end ;
76543: LD_VAR 0 1
76547: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76548: LD_INT 0
76550: PPUSH
76551: PPUSH
76552: PPUSH
76553: PPUSH
// if not mc_bases then
76554: LD_EXP 36
76558: NOT
76559: IFFALSE 76563
// exit ;
76561: GO 76724
// for i = 1 to mc_bases do
76563: LD_ADDR_VAR 0 2
76567: PUSH
76568: DOUBLE
76569: LD_INT 1
76571: DEC
76572: ST_TO_ADDR
76573: LD_EXP 36
76577: PUSH
76578: FOR_TO
76579: IFFALSE 76722
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76581: LD_ADDR_VAR 0 4
76585: PUSH
76586: LD_EXP 55
76590: PUSH
76591: LD_VAR 0 2
76595: ARRAY
76596: PUSH
76597: LD_EXP 58
76601: PUSH
76602: LD_VAR 0 2
76606: ARRAY
76607: UNION
76608: PPUSH
76609: LD_INT 33
76611: PUSH
76612: LD_INT 2
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: PPUSH
76619: CALL_OW 72
76623: ST_TO_ADDR
// if tmp then
76624: LD_VAR 0 4
76628: IFFALSE 76720
// for j in tmp do
76630: LD_ADDR_VAR 0 3
76634: PUSH
76635: LD_VAR 0 4
76639: PUSH
76640: FOR_IN
76641: IFFALSE 76718
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76643: LD_VAR 0 3
76647: PPUSH
76648: CALL_OW 312
76652: NOT
76653: PUSH
76654: LD_VAR 0 3
76658: PPUSH
76659: CALL_OW 256
76663: PUSH
76664: LD_INT 250
76666: GREATEREQUAL
76667: AND
76668: IFFALSE 76681
// Connect ( j ) else
76670: LD_VAR 0 3
76674: PPUSH
76675: CALL 28984 0 1
76679: GO 76716
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76681: LD_VAR 0 3
76685: PPUSH
76686: CALL_OW 256
76690: PUSH
76691: LD_INT 250
76693: LESS
76694: PUSH
76695: LD_VAR 0 3
76699: PPUSH
76700: CALL_OW 312
76704: AND
76705: IFFALSE 76716
// ComUnlink ( j ) ;
76707: LD_VAR 0 3
76711: PPUSH
76712: CALL_OW 136
76716: GO 76640
76718: POP
76719: POP
// end ;
76720: GO 76578
76722: POP
76723: POP
// end ;
76724: LD_VAR 0 1
76728: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76729: LD_INT 0
76731: PPUSH
76732: PPUSH
76733: PPUSH
76734: PPUSH
76735: PPUSH
// if not mc_bases then
76736: LD_EXP 36
76740: NOT
76741: IFFALSE 76745
// exit ;
76743: GO 77205
// for i = 1 to mc_bases do
76745: LD_ADDR_VAR 0 2
76749: PUSH
76750: DOUBLE
76751: LD_INT 1
76753: DEC
76754: ST_TO_ADDR
76755: LD_EXP 36
76759: PUSH
76760: FOR_TO
76761: IFFALSE 77203
// begin if not mc_produce [ i ] then
76763: LD_EXP 57
76767: PUSH
76768: LD_VAR 0 2
76772: ARRAY
76773: NOT
76774: IFFALSE 76778
// continue ;
76776: GO 76760
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76778: LD_ADDR_VAR 0 5
76782: PUSH
76783: LD_EXP 36
76787: PUSH
76788: LD_VAR 0 2
76792: ARRAY
76793: PPUSH
76794: LD_INT 30
76796: PUSH
76797: LD_INT 3
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PPUSH
76804: CALL_OW 72
76808: ST_TO_ADDR
// if not fac then
76809: LD_VAR 0 5
76813: NOT
76814: IFFALSE 76818
// continue ;
76816: GO 76760
// for j in fac do
76818: LD_ADDR_VAR 0 3
76822: PUSH
76823: LD_VAR 0 5
76827: PUSH
76828: FOR_IN
76829: IFFALSE 77199
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76831: LD_VAR 0 3
76835: PPUSH
76836: CALL_OW 461
76840: PUSH
76841: LD_INT 2
76843: NONEQUAL
76844: PUSH
76845: LD_VAR 0 3
76849: PPUSH
76850: LD_INT 15
76852: PPUSH
76853: CALL 28644 0 2
76857: PUSH
76858: LD_INT 4
76860: ARRAY
76861: OR
76862: PUSH
76863: LD_VAR 0 3
76867: PPUSH
76868: CALL_OW 313
76872: PUSH
76873: LD_INT 0
76875: EQUAL
76876: OR
76877: IFFALSE 76881
// continue ;
76879: GO 76828
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76881: LD_VAR 0 3
76885: PPUSH
76886: LD_EXP 57
76890: PUSH
76891: LD_VAR 0 2
76895: ARRAY
76896: PUSH
76897: LD_INT 1
76899: ARRAY
76900: PUSH
76901: LD_INT 1
76903: ARRAY
76904: PPUSH
76905: LD_EXP 57
76909: PUSH
76910: LD_VAR 0 2
76914: ARRAY
76915: PUSH
76916: LD_INT 1
76918: ARRAY
76919: PUSH
76920: LD_INT 2
76922: ARRAY
76923: PPUSH
76924: LD_EXP 57
76928: PUSH
76929: LD_VAR 0 2
76933: ARRAY
76934: PUSH
76935: LD_INT 1
76937: ARRAY
76938: PUSH
76939: LD_INT 3
76941: ARRAY
76942: PPUSH
76943: LD_EXP 57
76947: PUSH
76948: LD_VAR 0 2
76952: ARRAY
76953: PUSH
76954: LD_INT 1
76956: ARRAY
76957: PUSH
76958: LD_INT 4
76960: ARRAY
76961: PPUSH
76962: CALL_OW 448
76966: PUSH
76967: LD_VAR 0 3
76971: PPUSH
76972: LD_EXP 57
76976: PUSH
76977: LD_VAR 0 2
76981: ARRAY
76982: PUSH
76983: LD_INT 1
76985: ARRAY
76986: PUSH
76987: LD_INT 1
76989: ARRAY
76990: PUSH
76991: LD_EXP 57
76995: PUSH
76996: LD_VAR 0 2
77000: ARRAY
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_INT 2
77008: ARRAY
77009: PUSH
77010: LD_EXP 57
77014: PUSH
77015: LD_VAR 0 2
77019: ARRAY
77020: PUSH
77021: LD_INT 1
77023: ARRAY
77024: PUSH
77025: LD_INT 3
77027: ARRAY
77028: PUSH
77029: LD_EXP 57
77033: PUSH
77034: LD_VAR 0 2
77038: ARRAY
77039: PUSH
77040: LD_INT 1
77042: ARRAY
77043: PUSH
77044: LD_INT 4
77046: ARRAY
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: PPUSH
77054: CALL 32315 0 2
77058: AND
77059: IFFALSE 77197
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77061: LD_VAR 0 3
77065: PPUSH
77066: LD_EXP 57
77070: PUSH
77071: LD_VAR 0 2
77075: ARRAY
77076: PUSH
77077: LD_INT 1
77079: ARRAY
77080: PUSH
77081: LD_INT 1
77083: ARRAY
77084: PPUSH
77085: LD_EXP 57
77089: PUSH
77090: LD_VAR 0 2
77094: ARRAY
77095: PUSH
77096: LD_INT 1
77098: ARRAY
77099: PUSH
77100: LD_INT 2
77102: ARRAY
77103: PPUSH
77104: LD_EXP 57
77108: PUSH
77109: LD_VAR 0 2
77113: ARRAY
77114: PUSH
77115: LD_INT 1
77117: ARRAY
77118: PUSH
77119: LD_INT 3
77121: ARRAY
77122: PPUSH
77123: LD_EXP 57
77127: PUSH
77128: LD_VAR 0 2
77132: ARRAY
77133: PUSH
77134: LD_INT 1
77136: ARRAY
77137: PUSH
77138: LD_INT 4
77140: ARRAY
77141: PPUSH
77142: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77146: LD_ADDR_VAR 0 4
77150: PUSH
77151: LD_EXP 57
77155: PUSH
77156: LD_VAR 0 2
77160: ARRAY
77161: PPUSH
77162: LD_INT 1
77164: PPUSH
77165: CALL_OW 3
77169: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77170: LD_ADDR_EXP 57
77174: PUSH
77175: LD_EXP 57
77179: PPUSH
77180: LD_VAR 0 2
77184: PPUSH
77185: LD_VAR 0 4
77189: PPUSH
77190: CALL_OW 1
77194: ST_TO_ADDR
// break ;
77195: GO 77199
// end ; end ;
77197: GO 76828
77199: POP
77200: POP
// end ;
77201: GO 76760
77203: POP
77204: POP
// end ;
77205: LD_VAR 0 1
77209: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77210: LD_INT 0
77212: PPUSH
77213: PPUSH
77214: PPUSH
// if not mc_bases then
77215: LD_EXP 36
77219: NOT
77220: IFFALSE 77224
// exit ;
77222: GO 77313
// for i = 1 to mc_bases do
77224: LD_ADDR_VAR 0 2
77228: PUSH
77229: DOUBLE
77230: LD_INT 1
77232: DEC
77233: ST_TO_ADDR
77234: LD_EXP 36
77238: PUSH
77239: FOR_TO
77240: IFFALSE 77311
// begin if mc_attack [ i ] then
77242: LD_EXP 56
77246: PUSH
77247: LD_VAR 0 2
77251: ARRAY
77252: IFFALSE 77309
// begin tmp := mc_attack [ i ] [ 1 ] ;
77254: LD_ADDR_VAR 0 3
77258: PUSH
77259: LD_EXP 56
77263: PUSH
77264: LD_VAR 0 2
77268: ARRAY
77269: PUSH
77270: LD_INT 1
77272: ARRAY
77273: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77274: LD_ADDR_EXP 56
77278: PUSH
77279: LD_EXP 56
77283: PPUSH
77284: LD_VAR 0 2
77288: PPUSH
77289: EMPTY
77290: PPUSH
77291: CALL_OW 1
77295: ST_TO_ADDR
// Attack ( tmp ) ;
77296: LD_VAR 0 3
77300: PPUSH
77301: CALL 54522 0 1
// exit ;
77305: POP
77306: POP
77307: GO 77313
// end ; end ;
77309: GO 77239
77311: POP
77312: POP
// end ;
77313: LD_VAR 0 1
77317: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77318: LD_INT 0
77320: PPUSH
77321: PPUSH
77322: PPUSH
77323: PPUSH
77324: PPUSH
77325: PPUSH
77326: PPUSH
// if not mc_bases then
77327: LD_EXP 36
77331: NOT
77332: IFFALSE 77336
// exit ;
77334: GO 77918
// for i = 1 to mc_bases do
77336: LD_ADDR_VAR 0 2
77340: PUSH
77341: DOUBLE
77342: LD_INT 1
77344: DEC
77345: ST_TO_ADDR
77346: LD_EXP 36
77350: PUSH
77351: FOR_TO
77352: IFFALSE 77916
// begin if not mc_bases [ i ] then
77354: LD_EXP 36
77358: PUSH
77359: LD_VAR 0 2
77363: ARRAY
77364: NOT
77365: IFFALSE 77369
// continue ;
77367: GO 77351
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77369: LD_ADDR_VAR 0 7
77373: PUSH
77374: LD_EXP 36
77378: PUSH
77379: LD_VAR 0 2
77383: ARRAY
77384: PUSH
77385: LD_INT 1
77387: ARRAY
77388: PPUSH
77389: CALL 22948 0 1
77393: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77394: LD_ADDR_EXP 59
77398: PUSH
77399: LD_EXP 59
77403: PPUSH
77404: LD_VAR 0 2
77408: PPUSH
77409: LD_EXP 36
77413: PUSH
77414: LD_VAR 0 2
77418: ARRAY
77419: PUSH
77420: LD_INT 1
77422: ARRAY
77423: PPUSH
77424: CALL_OW 255
77428: PPUSH
77429: LD_EXP 61
77433: PUSH
77434: LD_VAR 0 2
77438: ARRAY
77439: PPUSH
77440: CALL 20945 0 2
77444: PPUSH
77445: CALL_OW 1
77449: ST_TO_ADDR
// if not mc_scan [ i ] then
77450: LD_EXP 59
77454: PUSH
77455: LD_VAR 0 2
77459: ARRAY
77460: NOT
77461: IFFALSE 77616
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77463: LD_ADDR_VAR 0 4
77467: PUSH
77468: LD_EXP 36
77472: PUSH
77473: LD_VAR 0 2
77477: ARRAY
77478: PPUSH
77479: LD_INT 2
77481: PUSH
77482: LD_INT 25
77484: PUSH
77485: LD_INT 5
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: PUSH
77492: LD_INT 25
77494: PUSH
77495: LD_INT 8
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: LD_INT 25
77504: PUSH
77505: LD_INT 9
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: PPUSH
77518: CALL_OW 72
77522: ST_TO_ADDR
// if not tmp then
77523: LD_VAR 0 4
77527: NOT
77528: IFFALSE 77532
// continue ;
77530: GO 77351
// for j in tmp do
77532: LD_ADDR_VAR 0 3
77536: PUSH
77537: LD_VAR 0 4
77541: PUSH
77542: FOR_IN
77543: IFFALSE 77614
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77545: LD_VAR 0 3
77549: PPUSH
77550: CALL_OW 310
77554: PPUSH
77555: CALL_OW 266
77559: PUSH
77560: LD_INT 5
77562: EQUAL
77563: PUSH
77564: LD_VAR 0 3
77568: PPUSH
77569: CALL_OW 257
77573: PUSH
77574: LD_INT 1
77576: EQUAL
77577: AND
77578: PUSH
77579: LD_VAR 0 3
77583: PPUSH
77584: CALL_OW 459
77588: NOT
77589: AND
77590: PUSH
77591: LD_VAR 0 7
77595: AND
77596: IFFALSE 77612
// ComChangeProfession ( j , class ) ;
77598: LD_VAR 0 3
77602: PPUSH
77603: LD_VAR 0 7
77607: PPUSH
77608: CALL_OW 123
77612: GO 77542
77614: POP
77615: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77616: LD_EXP 59
77620: PUSH
77621: LD_VAR 0 2
77625: ARRAY
77626: PUSH
77627: LD_EXP 58
77631: PUSH
77632: LD_VAR 0 2
77636: ARRAY
77637: NOT
77638: AND
77639: PUSH
77640: LD_EXP 36
77644: PUSH
77645: LD_VAR 0 2
77649: ARRAY
77650: PPUSH
77651: LD_INT 30
77653: PUSH
77654: LD_INT 32
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PPUSH
77661: CALL_OW 72
77665: NOT
77666: AND
77667: PUSH
77668: LD_EXP 36
77672: PUSH
77673: LD_VAR 0 2
77677: ARRAY
77678: PPUSH
77679: LD_INT 2
77681: PUSH
77682: LD_INT 30
77684: PUSH
77685: LD_INT 4
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: PUSH
77692: LD_INT 30
77694: PUSH
77695: LD_INT 5
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: LIST
77706: PPUSH
77707: CALL_OW 72
77711: NOT
77712: AND
77713: IFFALSE 77845
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77715: LD_ADDR_VAR 0 4
77719: PUSH
77720: LD_EXP 36
77724: PUSH
77725: LD_VAR 0 2
77729: ARRAY
77730: PPUSH
77731: LD_INT 2
77733: PUSH
77734: LD_INT 25
77736: PUSH
77737: LD_INT 1
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 25
77746: PUSH
77747: LD_INT 5
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PUSH
77754: LD_INT 25
77756: PUSH
77757: LD_INT 8
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 25
77766: PUSH
77767: LD_INT 9
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: PPUSH
77781: CALL_OW 72
77785: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77786: LD_ADDR_VAR 0 4
77790: PUSH
77791: LD_VAR 0 4
77795: PUSH
77796: LD_VAR 0 4
77800: PPUSH
77801: LD_INT 18
77803: PPUSH
77804: CALL 59305 0 2
77808: DIFF
77809: ST_TO_ADDR
// if tmp then
77810: LD_VAR 0 4
77814: IFFALSE 77845
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77816: LD_VAR 0 2
77820: PPUSH
77821: LD_VAR 0 4
77825: PPUSH
77826: LD_EXP 61
77830: PUSH
77831: LD_VAR 0 2
77835: ARRAY
77836: PPUSH
77837: CALL 20980 0 3
// exit ;
77841: POP
77842: POP
77843: GO 77918
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77845: LD_EXP 59
77849: PUSH
77850: LD_VAR 0 2
77854: ARRAY
77855: PUSH
77856: LD_EXP 58
77860: PUSH
77861: LD_VAR 0 2
77865: ARRAY
77866: AND
77867: IFFALSE 77914
// begin tmp := mc_defender [ i ] ;
77869: LD_ADDR_VAR 0 4
77873: PUSH
77874: LD_EXP 58
77878: PUSH
77879: LD_VAR 0 2
77883: ARRAY
77884: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77885: LD_VAR 0 2
77889: PPUSH
77890: LD_VAR 0 4
77894: PPUSH
77895: LD_EXP 59
77899: PUSH
77900: LD_VAR 0 2
77904: ARRAY
77905: PPUSH
77906: CALL 21478 0 3
// exit ;
77910: POP
77911: POP
77912: GO 77918
// end ; end ;
77914: GO 77351
77916: POP
77917: POP
// end ;
77918: LD_VAR 0 1
77922: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77923: LD_INT 0
77925: PPUSH
77926: PPUSH
77927: PPUSH
77928: PPUSH
77929: PPUSH
77930: PPUSH
77931: PPUSH
77932: PPUSH
77933: PPUSH
77934: PPUSH
77935: PPUSH
// if not mc_bases then
77936: LD_EXP 36
77940: NOT
77941: IFFALSE 77945
// exit ;
77943: GO 79032
// for i = 1 to mc_bases do
77945: LD_ADDR_VAR 0 2
77949: PUSH
77950: DOUBLE
77951: LD_INT 1
77953: DEC
77954: ST_TO_ADDR
77955: LD_EXP 36
77959: PUSH
77960: FOR_TO
77961: IFFALSE 79030
// begin tmp := mc_lab [ i ] ;
77963: LD_ADDR_VAR 0 6
77967: PUSH
77968: LD_EXP 69
77972: PUSH
77973: LD_VAR 0 2
77977: ARRAY
77978: ST_TO_ADDR
// if not tmp then
77979: LD_VAR 0 6
77983: NOT
77984: IFFALSE 77988
// continue ;
77986: GO 77960
// idle_lab := 0 ;
77988: LD_ADDR_VAR 0 11
77992: PUSH
77993: LD_INT 0
77995: ST_TO_ADDR
// for j in tmp do
77996: LD_ADDR_VAR 0 3
78000: PUSH
78001: LD_VAR 0 6
78005: PUSH
78006: FOR_IN
78007: IFFALSE 79026
// begin researching := false ;
78009: LD_ADDR_VAR 0 10
78013: PUSH
78014: LD_INT 0
78016: ST_TO_ADDR
// side := GetSide ( j ) ;
78017: LD_ADDR_VAR 0 4
78021: PUSH
78022: LD_VAR 0 3
78026: PPUSH
78027: CALL_OW 255
78031: ST_TO_ADDR
// if not mc_tech [ side ] then
78032: LD_EXP 63
78036: PUSH
78037: LD_VAR 0 4
78041: ARRAY
78042: NOT
78043: IFFALSE 78047
// continue ;
78045: GO 78006
// if BuildingStatus ( j ) = bs_idle then
78047: LD_VAR 0 3
78051: PPUSH
78052: CALL_OW 461
78056: PUSH
78057: LD_INT 2
78059: EQUAL
78060: IFFALSE 78248
// begin if idle_lab and UnitsInside ( j ) < 6 then
78062: LD_VAR 0 11
78066: PUSH
78067: LD_VAR 0 3
78071: PPUSH
78072: CALL_OW 313
78076: PUSH
78077: LD_INT 6
78079: LESS
78080: AND
78081: IFFALSE 78152
// begin tmp2 := UnitsInside ( idle_lab ) ;
78083: LD_ADDR_VAR 0 9
78087: PUSH
78088: LD_VAR 0 11
78092: PPUSH
78093: CALL_OW 313
78097: ST_TO_ADDR
// if tmp2 then
78098: LD_VAR 0 9
78102: IFFALSE 78144
// for x in tmp2 do
78104: LD_ADDR_VAR 0 7
78108: PUSH
78109: LD_VAR 0 9
78113: PUSH
78114: FOR_IN
78115: IFFALSE 78142
// begin ComExitBuilding ( x ) ;
78117: LD_VAR 0 7
78121: PPUSH
78122: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78126: LD_VAR 0 7
78130: PPUSH
78131: LD_VAR 0 3
78135: PPUSH
78136: CALL_OW 180
// end ;
78140: GO 78114
78142: POP
78143: POP
// idle_lab := 0 ;
78144: LD_ADDR_VAR 0 11
78148: PUSH
78149: LD_INT 0
78151: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78152: LD_ADDR_VAR 0 5
78156: PUSH
78157: LD_EXP 63
78161: PUSH
78162: LD_VAR 0 4
78166: ARRAY
78167: PUSH
78168: FOR_IN
78169: IFFALSE 78229
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78171: LD_VAR 0 3
78175: PPUSH
78176: LD_VAR 0 5
78180: PPUSH
78181: CALL_OW 430
78185: PUSH
78186: LD_VAR 0 4
78190: PPUSH
78191: LD_VAR 0 5
78195: PPUSH
78196: CALL 20050 0 2
78200: AND
78201: IFFALSE 78227
// begin researching := true ;
78203: LD_ADDR_VAR 0 10
78207: PUSH
78208: LD_INT 1
78210: ST_TO_ADDR
// ComResearch ( j , t ) ;
78211: LD_VAR 0 3
78215: PPUSH
78216: LD_VAR 0 5
78220: PPUSH
78221: CALL_OW 124
// break ;
78225: GO 78229
// end ;
78227: GO 78168
78229: POP
78230: POP
// if not researching then
78231: LD_VAR 0 10
78235: NOT
78236: IFFALSE 78248
// idle_lab := j ;
78238: LD_ADDR_VAR 0 11
78242: PUSH
78243: LD_VAR 0 3
78247: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78248: LD_VAR 0 3
78252: PPUSH
78253: CALL_OW 461
78257: PUSH
78258: LD_INT 10
78260: EQUAL
78261: IFFALSE 78849
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78263: LD_EXP 65
78267: PUSH
78268: LD_VAR 0 2
78272: ARRAY
78273: NOT
78274: PUSH
78275: LD_EXP 66
78279: PUSH
78280: LD_VAR 0 2
78284: ARRAY
78285: NOT
78286: AND
78287: PUSH
78288: LD_EXP 63
78292: PUSH
78293: LD_VAR 0 4
78297: ARRAY
78298: PUSH
78299: LD_INT 1
78301: GREATER
78302: AND
78303: IFFALSE 78434
// begin ComCancel ( j ) ;
78305: LD_VAR 0 3
78309: PPUSH
78310: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78314: LD_ADDR_EXP 63
78318: PUSH
78319: LD_EXP 63
78323: PPUSH
78324: LD_VAR 0 4
78328: PPUSH
78329: LD_EXP 63
78333: PUSH
78334: LD_VAR 0 4
78338: ARRAY
78339: PPUSH
78340: LD_EXP 63
78344: PUSH
78345: LD_VAR 0 4
78349: ARRAY
78350: PUSH
78351: LD_INT 1
78353: MINUS
78354: PPUSH
78355: LD_EXP 63
78359: PUSH
78360: LD_VAR 0 4
78364: ARRAY
78365: PPUSH
78366: LD_INT 0
78368: PPUSH
78369: CALL 25469 0 4
78373: PPUSH
78374: CALL_OW 1
78378: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78379: LD_ADDR_EXP 63
78383: PUSH
78384: LD_EXP 63
78388: PPUSH
78389: LD_VAR 0 4
78393: PPUSH
78394: LD_EXP 63
78398: PUSH
78399: LD_VAR 0 4
78403: ARRAY
78404: PPUSH
78405: LD_EXP 63
78409: PUSH
78410: LD_VAR 0 4
78414: ARRAY
78415: PPUSH
78416: LD_INT 1
78418: PPUSH
78419: LD_INT 0
78421: PPUSH
78422: CALL 25469 0 4
78426: PPUSH
78427: CALL_OW 1
78431: ST_TO_ADDR
// continue ;
78432: GO 78006
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78434: LD_EXP 65
78438: PUSH
78439: LD_VAR 0 2
78443: ARRAY
78444: PUSH
78445: LD_EXP 66
78449: PUSH
78450: LD_VAR 0 2
78454: ARRAY
78455: NOT
78456: AND
78457: IFFALSE 78584
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78459: LD_ADDR_EXP 66
78463: PUSH
78464: LD_EXP 66
78468: PPUSH
78469: LD_VAR 0 2
78473: PUSH
78474: LD_EXP 66
78478: PUSH
78479: LD_VAR 0 2
78483: ARRAY
78484: PUSH
78485: LD_INT 1
78487: PLUS
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PPUSH
78493: LD_EXP 65
78497: PUSH
78498: LD_VAR 0 2
78502: ARRAY
78503: PUSH
78504: LD_INT 1
78506: ARRAY
78507: PPUSH
78508: CALL 26051 0 3
78512: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
78513: LD_EXP 65
78517: PUSH
78518: LD_VAR 0 2
78522: ARRAY
78523: PUSH
78524: LD_INT 1
78526: ARRAY
78527: PPUSH
78528: LD_INT 112
78530: PPUSH
78531: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78535: LD_ADDR_VAR 0 9
78539: PUSH
78540: LD_EXP 65
78544: PUSH
78545: LD_VAR 0 2
78549: ARRAY
78550: PPUSH
78551: LD_INT 1
78553: PPUSH
78554: CALL_OW 3
78558: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78559: LD_ADDR_EXP 65
78563: PUSH
78564: LD_EXP 65
78568: PPUSH
78569: LD_VAR 0 2
78573: PPUSH
78574: LD_VAR 0 9
78578: PPUSH
78579: CALL_OW 1
78583: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78584: LD_EXP 65
78588: PUSH
78589: LD_VAR 0 2
78593: ARRAY
78594: PUSH
78595: LD_EXP 66
78599: PUSH
78600: LD_VAR 0 2
78604: ARRAY
78605: AND
78606: PUSH
78607: LD_EXP 66
78611: PUSH
78612: LD_VAR 0 2
78616: ARRAY
78617: PUSH
78618: LD_INT 1
78620: ARRAY
78621: PPUSH
78622: CALL_OW 310
78626: NOT
78627: AND
78628: PUSH
78629: LD_VAR 0 3
78633: PPUSH
78634: CALL_OW 313
78638: PUSH
78639: LD_INT 6
78641: EQUAL
78642: AND
78643: IFFALSE 78699
// begin tmp2 := UnitsInside ( j ) ;
78645: LD_ADDR_VAR 0 9
78649: PUSH
78650: LD_VAR 0 3
78654: PPUSH
78655: CALL_OW 313
78659: ST_TO_ADDR
// if tmp2 = 6 then
78660: LD_VAR 0 9
78664: PUSH
78665: LD_INT 6
78667: EQUAL
78668: IFFALSE 78699
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78670: LD_VAR 0 9
78674: PUSH
78675: LD_INT 1
78677: ARRAY
78678: PPUSH
78679: LD_INT 112
78681: PPUSH
78682: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78686: LD_VAR 0 9
78690: PUSH
78691: LD_INT 1
78693: ARRAY
78694: PPUSH
78695: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78699: LD_EXP 66
78703: PUSH
78704: LD_VAR 0 2
78708: ARRAY
78709: PUSH
78710: LD_EXP 66
78714: PUSH
78715: LD_VAR 0 2
78719: ARRAY
78720: PUSH
78721: LD_INT 1
78723: ARRAY
78724: PPUSH
78725: CALL_OW 314
78729: NOT
78730: AND
78731: PUSH
78732: LD_EXP 66
78736: PUSH
78737: LD_VAR 0 2
78741: ARRAY
78742: PUSH
78743: LD_INT 1
78745: ARRAY
78746: PPUSH
78747: CALL_OW 310
78751: NOT
78752: AND
78753: IFFALSE 78779
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78755: LD_EXP 66
78759: PUSH
78760: LD_VAR 0 2
78764: ARRAY
78765: PUSH
78766: LD_INT 1
78768: ARRAY
78769: PPUSH
78770: LD_VAR 0 3
78774: PPUSH
78775: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78779: LD_EXP 66
78783: PUSH
78784: LD_VAR 0 2
78788: ARRAY
78789: PUSH
78790: LD_INT 1
78792: ARRAY
78793: PPUSH
78794: CALL_OW 310
78798: PUSH
78799: LD_EXP 66
78803: PUSH
78804: LD_VAR 0 2
78808: ARRAY
78809: PUSH
78810: LD_INT 1
78812: ARRAY
78813: PPUSH
78814: CALL_OW 310
78818: PPUSH
78819: CALL_OW 461
78823: PUSH
78824: LD_INT 3
78826: NONEQUAL
78827: AND
78828: IFFALSE 78849
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78830: LD_EXP 66
78834: PUSH
78835: LD_VAR 0 2
78839: ARRAY
78840: PUSH
78841: LD_INT 1
78843: ARRAY
78844: PPUSH
78845: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78849: LD_VAR 0 3
78853: PPUSH
78854: CALL_OW 461
78858: PUSH
78859: LD_INT 6
78861: EQUAL
78862: PUSH
78863: LD_VAR 0 6
78867: PUSH
78868: LD_INT 1
78870: GREATER
78871: AND
78872: IFFALSE 79024
// begin sci := [ ] ;
78874: LD_ADDR_VAR 0 8
78878: PUSH
78879: EMPTY
78880: ST_TO_ADDR
// for x in ( tmp diff j ) do
78881: LD_ADDR_VAR 0 7
78885: PUSH
78886: LD_VAR 0 6
78890: PUSH
78891: LD_VAR 0 3
78895: DIFF
78896: PUSH
78897: FOR_IN
78898: IFFALSE 78950
// begin if sci = 6 then
78900: LD_VAR 0 8
78904: PUSH
78905: LD_INT 6
78907: EQUAL
78908: IFFALSE 78912
// break ;
78910: GO 78950
// if BuildingStatus ( x ) = bs_idle then
78912: LD_VAR 0 7
78916: PPUSH
78917: CALL_OW 461
78921: PUSH
78922: LD_INT 2
78924: EQUAL
78925: IFFALSE 78948
// sci := sci ^ UnitsInside ( x ) ;
78927: LD_ADDR_VAR 0 8
78931: PUSH
78932: LD_VAR 0 8
78936: PUSH
78937: LD_VAR 0 7
78941: PPUSH
78942: CALL_OW 313
78946: ADD
78947: ST_TO_ADDR
// end ;
78948: GO 78897
78950: POP
78951: POP
// if not sci then
78952: LD_VAR 0 8
78956: NOT
78957: IFFALSE 78961
// continue ;
78959: GO 78006
// for x in sci do
78961: LD_ADDR_VAR 0 7
78965: PUSH
78966: LD_VAR 0 8
78970: PUSH
78971: FOR_IN
78972: IFFALSE 79022
// if IsInUnit ( x ) and not HasTask ( x ) then
78974: LD_VAR 0 7
78978: PPUSH
78979: CALL_OW 310
78983: PUSH
78984: LD_VAR 0 7
78988: PPUSH
78989: CALL_OW 314
78993: NOT
78994: AND
78995: IFFALSE 79020
// begin ComExitBuilding ( x ) ;
78997: LD_VAR 0 7
79001: PPUSH
79002: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79006: LD_VAR 0 7
79010: PPUSH
79011: LD_VAR 0 3
79015: PPUSH
79016: CALL_OW 180
// end ;
79020: GO 78971
79022: POP
79023: POP
// end ; end ;
79024: GO 78006
79026: POP
79027: POP
// end ;
79028: GO 77960
79030: POP
79031: POP
// end ;
79032: LD_VAR 0 1
79036: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79037: LD_INT 0
79039: PPUSH
79040: PPUSH
// if not mc_bases then
79041: LD_EXP 36
79045: NOT
79046: IFFALSE 79050
// exit ;
79048: GO 79131
// for i = 1 to mc_bases do
79050: LD_ADDR_VAR 0 2
79054: PUSH
79055: DOUBLE
79056: LD_INT 1
79058: DEC
79059: ST_TO_ADDR
79060: LD_EXP 36
79064: PUSH
79065: FOR_TO
79066: IFFALSE 79129
// if mc_mines [ i ] and mc_miners [ i ] then
79068: LD_EXP 49
79072: PUSH
79073: LD_VAR 0 2
79077: ARRAY
79078: PUSH
79079: LD_EXP 50
79083: PUSH
79084: LD_VAR 0 2
79088: ARRAY
79089: AND
79090: IFFALSE 79127
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79092: LD_EXP 50
79096: PUSH
79097: LD_VAR 0 2
79101: ARRAY
79102: PUSH
79103: LD_INT 1
79105: ARRAY
79106: PPUSH
79107: CALL_OW 255
79111: PPUSH
79112: LD_EXP 49
79116: PUSH
79117: LD_VAR 0 2
79121: ARRAY
79122: PPUSH
79123: CALL 23101 0 2
79127: GO 79065
79129: POP
79130: POP
// end ;
79131: LD_VAR 0 1
79135: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79136: LD_INT 0
79138: PPUSH
79139: PPUSH
79140: PPUSH
79141: PPUSH
79142: PPUSH
79143: PPUSH
79144: PPUSH
79145: PPUSH
// if not mc_bases or not mc_parking then
79146: LD_EXP 36
79150: NOT
79151: PUSH
79152: LD_EXP 60
79156: NOT
79157: OR
79158: IFFALSE 79162
// exit ;
79160: GO 79838
// for i = 1 to mc_bases do
79162: LD_ADDR_VAR 0 2
79166: PUSH
79167: DOUBLE
79168: LD_INT 1
79170: DEC
79171: ST_TO_ADDR
79172: LD_EXP 36
79176: PUSH
79177: FOR_TO
79178: IFFALSE 79836
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79180: LD_EXP 36
79184: PUSH
79185: LD_VAR 0 2
79189: ARRAY
79190: NOT
79191: PUSH
79192: LD_EXP 60
79196: PUSH
79197: LD_VAR 0 2
79201: ARRAY
79202: NOT
79203: OR
79204: IFFALSE 79208
// continue ;
79206: GO 79177
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79208: LD_ADDR_VAR 0 5
79212: PUSH
79213: LD_EXP 36
79217: PUSH
79218: LD_VAR 0 2
79222: ARRAY
79223: PUSH
79224: LD_INT 1
79226: ARRAY
79227: PPUSH
79228: CALL_OW 255
79232: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79233: LD_ADDR_VAR 0 6
79237: PUSH
79238: LD_EXP 36
79242: PUSH
79243: LD_VAR 0 2
79247: ARRAY
79248: PPUSH
79249: LD_INT 30
79251: PUSH
79252: LD_INT 3
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PPUSH
79259: CALL_OW 72
79263: ST_TO_ADDR
// if not fac then
79264: LD_VAR 0 6
79268: NOT
79269: IFFALSE 79320
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79271: LD_ADDR_VAR 0 6
79275: PUSH
79276: LD_EXP 36
79280: PUSH
79281: LD_VAR 0 2
79285: ARRAY
79286: PPUSH
79287: LD_INT 2
79289: PUSH
79290: LD_INT 30
79292: PUSH
79293: LD_INT 0
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: LD_INT 30
79302: PUSH
79303: LD_INT 1
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: LIST
79314: PPUSH
79315: CALL_OW 72
79319: ST_TO_ADDR
// if not fac then
79320: LD_VAR 0 6
79324: NOT
79325: IFFALSE 79329
// continue ;
79327: GO 79177
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79329: LD_ADDR_VAR 0 7
79333: PUSH
79334: LD_EXP 60
79338: PUSH
79339: LD_VAR 0 2
79343: ARRAY
79344: PPUSH
79345: LD_INT 22
79347: PUSH
79348: LD_VAR 0 5
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 21
79359: PUSH
79360: LD_INT 2
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 3
79369: PUSH
79370: LD_INT 24
79372: PUSH
79373: LD_INT 1000
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: LIST
79388: PPUSH
79389: CALL_OW 70
79393: PUSH
79394: LD_INT 22
79396: PUSH
79397: LD_VAR 0 5
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: LD_INT 91
79408: PUSH
79409: LD_VAR 0 6
79413: PUSH
79414: LD_INT 1
79416: ARRAY
79417: PUSH
79418: LD_INT 25
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: LIST
79425: PUSH
79426: LD_INT 21
79428: PUSH
79429: LD_INT 2
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PUSH
79436: LD_INT 3
79438: PUSH
79439: LD_INT 24
79441: PUSH
79442: LD_INT 1000
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: PUSH
79449: EMPTY
79450: LIST
79451: LIST
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: PPUSH
79459: CALL_OW 69
79463: UNION
79464: ST_TO_ADDR
// if not vehs then
79465: LD_VAR 0 7
79469: NOT
79470: IFFALSE 79496
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79472: LD_ADDR_EXP 48
79476: PUSH
79477: LD_EXP 48
79481: PPUSH
79482: LD_VAR 0 2
79486: PPUSH
79487: EMPTY
79488: PPUSH
79489: CALL_OW 1
79493: ST_TO_ADDR
// continue ;
79494: GO 79177
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79496: LD_ADDR_VAR 0 8
79500: PUSH
79501: LD_EXP 36
79505: PUSH
79506: LD_VAR 0 2
79510: ARRAY
79511: PPUSH
79512: LD_INT 30
79514: PUSH
79515: LD_INT 3
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: PPUSH
79522: CALL_OW 72
79526: ST_TO_ADDR
// if tmp then
79527: LD_VAR 0 8
79531: IFFALSE 79634
// begin for j in tmp do
79533: LD_ADDR_VAR 0 3
79537: PUSH
79538: LD_VAR 0 8
79542: PUSH
79543: FOR_IN
79544: IFFALSE 79632
// for k in UnitsInside ( j ) do
79546: LD_ADDR_VAR 0 4
79550: PUSH
79551: LD_VAR 0 3
79555: PPUSH
79556: CALL_OW 313
79560: PUSH
79561: FOR_IN
79562: IFFALSE 79628
// if k then
79564: LD_VAR 0 4
79568: IFFALSE 79626
// if not k in mc_repair_vehicle [ i ] then
79570: LD_VAR 0 4
79574: PUSH
79575: LD_EXP 48
79579: PUSH
79580: LD_VAR 0 2
79584: ARRAY
79585: IN
79586: NOT
79587: IFFALSE 79626
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79589: LD_ADDR_EXP 48
79593: PUSH
79594: LD_EXP 48
79598: PPUSH
79599: LD_VAR 0 2
79603: PPUSH
79604: LD_EXP 48
79608: PUSH
79609: LD_VAR 0 2
79613: ARRAY
79614: PUSH
79615: LD_VAR 0 4
79619: UNION
79620: PPUSH
79621: CALL_OW 1
79625: ST_TO_ADDR
79626: GO 79561
79628: POP
79629: POP
79630: GO 79543
79632: POP
79633: POP
// end ; if not mc_repair_vehicle [ i ] then
79634: LD_EXP 48
79638: PUSH
79639: LD_VAR 0 2
79643: ARRAY
79644: NOT
79645: IFFALSE 79649
// continue ;
79647: GO 79177
// for j in mc_repair_vehicle [ i ] do
79649: LD_ADDR_VAR 0 3
79653: PUSH
79654: LD_EXP 48
79658: PUSH
79659: LD_VAR 0 2
79663: ARRAY
79664: PUSH
79665: FOR_IN
79666: IFFALSE 79832
// begin if GetClass ( j ) <> 3 then
79668: LD_VAR 0 3
79672: PPUSH
79673: CALL_OW 257
79677: PUSH
79678: LD_INT 3
79680: NONEQUAL
79681: IFFALSE 79722
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79683: LD_ADDR_EXP 48
79687: PUSH
79688: LD_EXP 48
79692: PPUSH
79693: LD_VAR 0 2
79697: PPUSH
79698: LD_EXP 48
79702: PUSH
79703: LD_VAR 0 2
79707: ARRAY
79708: PUSH
79709: LD_VAR 0 3
79713: DIFF
79714: PPUSH
79715: CALL_OW 1
79719: ST_TO_ADDR
// continue ;
79720: GO 79665
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79722: LD_VAR 0 3
79726: PPUSH
79727: CALL_OW 311
79731: NOT
79732: PUSH
79733: LD_VAR 0 3
79737: PUSH
79738: LD_EXP 39
79742: PUSH
79743: LD_VAR 0 2
79747: ARRAY
79748: PUSH
79749: LD_INT 1
79751: ARRAY
79752: IN
79753: NOT
79754: AND
79755: PUSH
79756: LD_VAR 0 3
79760: PUSH
79761: LD_EXP 39
79765: PUSH
79766: LD_VAR 0 2
79770: ARRAY
79771: PUSH
79772: LD_INT 2
79774: ARRAY
79775: IN
79776: NOT
79777: AND
79778: IFFALSE 79830
// begin if IsInUnit ( j ) then
79780: LD_VAR 0 3
79784: PPUSH
79785: CALL_OW 310
79789: IFFALSE 79800
// ComExitBuilding ( j ) ;
79791: LD_VAR 0 3
79795: PPUSH
79796: CALL_OW 122
// if not HasTask ( j ) then
79800: LD_VAR 0 3
79804: PPUSH
79805: CALL_OW 314
79809: NOT
79810: IFFALSE 79830
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79812: LD_VAR 0 3
79816: PPUSH
79817: LD_VAR 0 7
79821: PUSH
79822: LD_INT 1
79824: ARRAY
79825: PPUSH
79826: CALL_OW 189
// end ; end ;
79830: GO 79665
79832: POP
79833: POP
// end ;
79834: GO 79177
79836: POP
79837: POP
// end ;
79838: LD_VAR 0 1
79842: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79843: LD_INT 0
79845: PPUSH
79846: PPUSH
79847: PPUSH
79848: PPUSH
79849: PPUSH
79850: PPUSH
79851: PPUSH
79852: PPUSH
79853: PPUSH
79854: PPUSH
79855: PPUSH
// if not mc_bases then
79856: LD_EXP 36
79860: NOT
79861: IFFALSE 79865
// exit ;
79863: GO 80667
// for i = 1 to mc_bases do
79865: LD_ADDR_VAR 0 2
79869: PUSH
79870: DOUBLE
79871: LD_INT 1
79873: DEC
79874: ST_TO_ADDR
79875: LD_EXP 36
79879: PUSH
79880: FOR_TO
79881: IFFALSE 80665
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79883: LD_EXP 64
79887: PUSH
79888: LD_VAR 0 2
79892: ARRAY
79893: NOT
79894: PUSH
79895: LD_EXP 39
79899: PUSH
79900: LD_VAR 0 2
79904: ARRAY
79905: PUSH
79906: LD_INT 1
79908: ARRAY
79909: OR
79910: PUSH
79911: LD_EXP 39
79915: PUSH
79916: LD_VAR 0 2
79920: ARRAY
79921: PUSH
79922: LD_INT 2
79924: ARRAY
79925: OR
79926: PUSH
79927: LD_EXP 62
79931: PUSH
79932: LD_VAR 0 2
79936: ARRAY
79937: PPUSH
79938: LD_INT 1
79940: PPUSH
79941: CALL_OW 325
79945: NOT
79946: OR
79947: PUSH
79948: LD_EXP 59
79952: PUSH
79953: LD_VAR 0 2
79957: ARRAY
79958: OR
79959: IFFALSE 79963
// continue ;
79961: GO 79880
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79963: LD_ADDR_VAR 0 8
79967: PUSH
79968: LD_EXP 36
79972: PUSH
79973: LD_VAR 0 2
79977: ARRAY
79978: PPUSH
79979: LD_INT 25
79981: PUSH
79982: LD_INT 4
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: PUSH
79989: LD_INT 50
79991: PUSH
79992: EMPTY
79993: LIST
79994: PUSH
79995: LD_INT 3
79997: PUSH
79998: LD_INT 60
80000: PUSH
80001: EMPTY
80002: LIST
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: LIST
80012: PPUSH
80013: CALL_OW 72
80017: PUSH
80018: LD_EXP 40
80022: PUSH
80023: LD_VAR 0 2
80027: ARRAY
80028: DIFF
80029: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80030: LD_ADDR_VAR 0 9
80034: PUSH
80035: LD_EXP 36
80039: PUSH
80040: LD_VAR 0 2
80044: ARRAY
80045: PPUSH
80046: LD_INT 2
80048: PUSH
80049: LD_INT 30
80051: PUSH
80052: LD_INT 0
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: PUSH
80059: LD_INT 30
80061: PUSH
80062: LD_INT 1
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PUSH
80069: EMPTY
80070: LIST
80071: LIST
80072: LIST
80073: PPUSH
80074: CALL_OW 72
80078: ST_TO_ADDR
// if not tmp or not dep then
80079: LD_VAR 0 8
80083: NOT
80084: PUSH
80085: LD_VAR 0 9
80089: NOT
80090: OR
80091: IFFALSE 80095
// continue ;
80093: GO 79880
// side := GetSide ( tmp [ 1 ] ) ;
80095: LD_ADDR_VAR 0 11
80099: PUSH
80100: LD_VAR 0 8
80104: PUSH
80105: LD_INT 1
80107: ARRAY
80108: PPUSH
80109: CALL_OW 255
80113: ST_TO_ADDR
// dep := dep [ 1 ] ;
80114: LD_ADDR_VAR 0 9
80118: PUSH
80119: LD_VAR 0 9
80123: PUSH
80124: LD_INT 1
80126: ARRAY
80127: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80128: LD_ADDR_VAR 0 7
80132: PUSH
80133: LD_EXP 64
80137: PUSH
80138: LD_VAR 0 2
80142: ARRAY
80143: PPUSH
80144: LD_INT 22
80146: PUSH
80147: LD_INT 0
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_INT 25
80156: PUSH
80157: LD_INT 12
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: PPUSH
80168: CALL_OW 70
80172: PUSH
80173: LD_INT 22
80175: PUSH
80176: LD_INT 0
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 25
80185: PUSH
80186: LD_INT 12
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 91
80195: PUSH
80196: LD_VAR 0 9
80200: PUSH
80201: LD_INT 20
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: LIST
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: LIST
80213: PPUSH
80214: CALL_OW 69
80218: UNION
80219: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80220: LD_ADDR_VAR 0 10
80224: PUSH
80225: LD_EXP 64
80229: PUSH
80230: LD_VAR 0 2
80234: ARRAY
80235: PPUSH
80236: LD_INT 81
80238: PUSH
80239: LD_VAR 0 11
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PPUSH
80248: CALL_OW 70
80252: ST_TO_ADDR
// if not apes or danger_at_area then
80253: LD_VAR 0 7
80257: NOT
80258: PUSH
80259: LD_VAR 0 10
80263: OR
80264: IFFALSE 80314
// begin if mc_taming [ i ] then
80266: LD_EXP 67
80270: PUSH
80271: LD_VAR 0 2
80275: ARRAY
80276: IFFALSE 80312
// begin MC_Reset ( i , 121 ) ;
80278: LD_VAR 0 2
80282: PPUSH
80283: LD_INT 121
80285: PPUSH
80286: CALL 66007 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80290: LD_ADDR_EXP 67
80294: PUSH
80295: LD_EXP 67
80299: PPUSH
80300: LD_VAR 0 2
80304: PPUSH
80305: EMPTY
80306: PPUSH
80307: CALL_OW 1
80311: ST_TO_ADDR
// end ; continue ;
80312: GO 79880
// end ; for j in tmp do
80314: LD_ADDR_VAR 0 3
80318: PUSH
80319: LD_VAR 0 8
80323: PUSH
80324: FOR_IN
80325: IFFALSE 80661
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80327: LD_VAR 0 3
80331: PUSH
80332: LD_EXP 67
80336: PUSH
80337: LD_VAR 0 2
80341: ARRAY
80342: IN
80343: NOT
80344: PUSH
80345: LD_EXP 67
80349: PUSH
80350: LD_VAR 0 2
80354: ARRAY
80355: PUSH
80356: LD_INT 3
80358: LESS
80359: AND
80360: IFFALSE 80418
// begin SetTag ( j , 121 ) ;
80362: LD_VAR 0 3
80366: PPUSH
80367: LD_INT 121
80369: PPUSH
80370: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80374: LD_ADDR_EXP 67
80378: PUSH
80379: LD_EXP 67
80383: PPUSH
80384: LD_VAR 0 2
80388: PUSH
80389: LD_EXP 67
80393: PUSH
80394: LD_VAR 0 2
80398: ARRAY
80399: PUSH
80400: LD_INT 1
80402: PLUS
80403: PUSH
80404: EMPTY
80405: LIST
80406: LIST
80407: PPUSH
80408: LD_VAR 0 3
80412: PPUSH
80413: CALL 26051 0 3
80417: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80418: LD_VAR 0 3
80422: PUSH
80423: LD_EXP 67
80427: PUSH
80428: LD_VAR 0 2
80432: ARRAY
80433: IN
80434: IFFALSE 80659
// begin if GetClass ( j ) <> 4 then
80436: LD_VAR 0 3
80440: PPUSH
80441: CALL_OW 257
80445: PUSH
80446: LD_INT 4
80448: NONEQUAL
80449: IFFALSE 80502
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80451: LD_ADDR_EXP 67
80455: PUSH
80456: LD_EXP 67
80460: PPUSH
80461: LD_VAR 0 2
80465: PPUSH
80466: LD_EXP 67
80470: PUSH
80471: LD_VAR 0 2
80475: ARRAY
80476: PUSH
80477: LD_VAR 0 3
80481: DIFF
80482: PPUSH
80483: CALL_OW 1
80487: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80488: LD_VAR 0 3
80492: PPUSH
80493: LD_INT 0
80495: PPUSH
80496: CALL_OW 109
// continue ;
80500: GO 80324
// end ; if IsInUnit ( j ) then
80502: LD_VAR 0 3
80506: PPUSH
80507: CALL_OW 310
80511: IFFALSE 80522
// ComExitBuilding ( j ) ;
80513: LD_VAR 0 3
80517: PPUSH
80518: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
80522: LD_ADDR_VAR 0 6
80526: PUSH
80527: LD_VAR 0 7
80531: PPUSH
80532: LD_VAR 0 3
80536: PPUSH
80537: CALL_OW 74
80541: ST_TO_ADDR
// if not ape then
80542: LD_VAR 0 6
80546: NOT
80547: IFFALSE 80551
// break ;
80549: GO 80661
// x := GetX ( ape ) ;
80551: LD_ADDR_VAR 0 4
80555: PUSH
80556: LD_VAR 0 6
80560: PPUSH
80561: CALL_OW 250
80565: ST_TO_ADDR
// y := GetY ( ape ) ;
80566: LD_ADDR_VAR 0 5
80570: PUSH
80571: LD_VAR 0 6
80575: PPUSH
80576: CALL_OW 251
80580: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80581: LD_VAR 0 4
80585: PPUSH
80586: LD_VAR 0 5
80590: PPUSH
80591: CALL_OW 488
80595: NOT
80596: PUSH
80597: LD_VAR 0 11
80601: PPUSH
80602: LD_VAR 0 4
80606: PPUSH
80607: LD_VAR 0 5
80611: PPUSH
80612: LD_INT 20
80614: PPUSH
80615: CALL 26947 0 4
80619: PUSH
80620: LD_INT 4
80622: ARRAY
80623: OR
80624: IFFALSE 80628
// break ;
80626: GO 80661
// if not HasTask ( j ) then
80628: LD_VAR 0 3
80632: PPUSH
80633: CALL_OW 314
80637: NOT
80638: IFFALSE 80659
// ComTameXY ( j , x , y ) ;
80640: LD_VAR 0 3
80644: PPUSH
80645: LD_VAR 0 4
80649: PPUSH
80650: LD_VAR 0 5
80654: PPUSH
80655: CALL_OW 131
// end ; end ;
80659: GO 80324
80661: POP
80662: POP
// end ;
80663: GO 79880
80665: POP
80666: POP
// end ;
80667: LD_VAR 0 1
80671: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80672: LD_INT 0
80674: PPUSH
80675: PPUSH
80676: PPUSH
80677: PPUSH
80678: PPUSH
80679: PPUSH
80680: PPUSH
80681: PPUSH
// if not mc_bases then
80682: LD_EXP 36
80686: NOT
80687: IFFALSE 80691
// exit ;
80689: GO 81317
// for i = 1 to mc_bases do
80691: LD_ADDR_VAR 0 2
80695: PUSH
80696: DOUBLE
80697: LD_INT 1
80699: DEC
80700: ST_TO_ADDR
80701: LD_EXP 36
80705: PUSH
80706: FOR_TO
80707: IFFALSE 81315
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80709: LD_EXP 65
80713: PUSH
80714: LD_VAR 0 2
80718: ARRAY
80719: NOT
80720: PUSH
80721: LD_EXP 65
80725: PUSH
80726: LD_VAR 0 2
80730: ARRAY
80731: PPUSH
80732: LD_INT 25
80734: PUSH
80735: LD_INT 12
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PPUSH
80742: CALL_OW 72
80746: NOT
80747: OR
80748: IFFALSE 80752
// continue ;
80750: GO 80706
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80752: LD_ADDR_VAR 0 5
80756: PUSH
80757: LD_EXP 65
80761: PUSH
80762: LD_VAR 0 2
80766: ARRAY
80767: PUSH
80768: LD_INT 1
80770: ARRAY
80771: PPUSH
80772: CALL_OW 255
80776: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80777: LD_VAR 0 5
80781: PPUSH
80782: LD_INT 2
80784: PPUSH
80785: CALL_OW 325
80789: IFFALSE 81042
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80791: LD_ADDR_VAR 0 4
80795: PUSH
80796: LD_EXP 65
80800: PUSH
80801: LD_VAR 0 2
80805: ARRAY
80806: PPUSH
80807: LD_INT 25
80809: PUSH
80810: LD_INT 16
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PPUSH
80817: CALL_OW 72
80821: ST_TO_ADDR
// if tmp < 6 then
80822: LD_VAR 0 4
80826: PUSH
80827: LD_INT 6
80829: LESS
80830: IFFALSE 81042
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80832: LD_ADDR_VAR 0 6
80836: PUSH
80837: LD_EXP 36
80841: PUSH
80842: LD_VAR 0 2
80846: ARRAY
80847: PPUSH
80848: LD_INT 2
80850: PUSH
80851: LD_INT 30
80853: PUSH
80854: LD_INT 0
80856: PUSH
80857: EMPTY
80858: LIST
80859: LIST
80860: PUSH
80861: LD_INT 30
80863: PUSH
80864: LD_INT 1
80866: PUSH
80867: EMPTY
80868: LIST
80869: LIST
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: LIST
80875: PPUSH
80876: CALL_OW 72
80880: ST_TO_ADDR
// if depot then
80881: LD_VAR 0 6
80885: IFFALSE 81042
// begin selected := 0 ;
80887: LD_ADDR_VAR 0 7
80891: PUSH
80892: LD_INT 0
80894: ST_TO_ADDR
// for j in depot do
80895: LD_ADDR_VAR 0 3
80899: PUSH
80900: LD_VAR 0 6
80904: PUSH
80905: FOR_IN
80906: IFFALSE 80937
// begin if UnitsInside ( j ) < 6 then
80908: LD_VAR 0 3
80912: PPUSH
80913: CALL_OW 313
80917: PUSH
80918: LD_INT 6
80920: LESS
80921: IFFALSE 80935
// begin selected := j ;
80923: LD_ADDR_VAR 0 7
80927: PUSH
80928: LD_VAR 0 3
80932: ST_TO_ADDR
// break ;
80933: GO 80937
// end ; end ;
80935: GO 80905
80937: POP
80938: POP
// if selected then
80939: LD_VAR 0 7
80943: IFFALSE 81042
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80945: LD_ADDR_VAR 0 3
80949: PUSH
80950: LD_EXP 65
80954: PUSH
80955: LD_VAR 0 2
80959: ARRAY
80960: PPUSH
80961: LD_INT 25
80963: PUSH
80964: LD_INT 12
80966: PUSH
80967: EMPTY
80968: LIST
80969: LIST
80970: PPUSH
80971: CALL_OW 72
80975: PUSH
80976: FOR_IN
80977: IFFALSE 81040
// if not HasTask ( j ) then
80979: LD_VAR 0 3
80983: PPUSH
80984: CALL_OW 314
80988: NOT
80989: IFFALSE 81038
// begin if not IsInUnit ( j ) then
80991: LD_VAR 0 3
80995: PPUSH
80996: CALL_OW 310
81000: NOT
81001: IFFALSE 81017
// ComEnterUnit ( j , selected ) ;
81003: LD_VAR 0 3
81007: PPUSH
81008: LD_VAR 0 7
81012: PPUSH
81013: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81017: LD_VAR 0 3
81021: PPUSH
81022: LD_INT 16
81024: PPUSH
81025: CALL_OW 183
// AddComExitBuilding ( j ) ;
81029: LD_VAR 0 3
81033: PPUSH
81034: CALL_OW 182
// end ;
81038: GO 80976
81040: POP
81041: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81042: LD_VAR 0 5
81046: PPUSH
81047: LD_INT 11
81049: PPUSH
81050: CALL_OW 325
81054: IFFALSE 81313
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81056: LD_ADDR_VAR 0 4
81060: PUSH
81061: LD_EXP 65
81065: PUSH
81066: LD_VAR 0 2
81070: ARRAY
81071: PPUSH
81072: LD_INT 25
81074: PUSH
81075: LD_INT 16
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: PPUSH
81082: CALL_OW 72
81086: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81087: LD_VAR 0 4
81091: PUSH
81092: LD_INT 6
81094: GREATEREQUAL
81095: PUSH
81096: LD_VAR 0 5
81100: PPUSH
81101: LD_INT 2
81103: PPUSH
81104: CALL_OW 325
81108: NOT
81109: OR
81110: IFFALSE 81313
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81112: LD_ADDR_VAR 0 8
81116: PUSH
81117: LD_EXP 36
81121: PUSH
81122: LD_VAR 0 2
81126: ARRAY
81127: PPUSH
81128: LD_INT 2
81130: PUSH
81131: LD_INT 30
81133: PUSH
81134: LD_INT 4
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: PUSH
81141: LD_INT 30
81143: PUSH
81144: LD_INT 5
81146: PUSH
81147: EMPTY
81148: LIST
81149: LIST
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: LIST
81155: PPUSH
81156: CALL_OW 72
81160: ST_TO_ADDR
// if barracks then
81161: LD_VAR 0 8
81165: IFFALSE 81313
// begin selected := 0 ;
81167: LD_ADDR_VAR 0 7
81171: PUSH
81172: LD_INT 0
81174: ST_TO_ADDR
// for j in barracks do
81175: LD_ADDR_VAR 0 3
81179: PUSH
81180: LD_VAR 0 8
81184: PUSH
81185: FOR_IN
81186: IFFALSE 81217
// begin if UnitsInside ( j ) < 6 then
81188: LD_VAR 0 3
81192: PPUSH
81193: CALL_OW 313
81197: PUSH
81198: LD_INT 6
81200: LESS
81201: IFFALSE 81215
// begin selected := j ;
81203: LD_ADDR_VAR 0 7
81207: PUSH
81208: LD_VAR 0 3
81212: ST_TO_ADDR
// break ;
81213: GO 81217
// end ; end ;
81215: GO 81185
81217: POP
81218: POP
// if selected then
81219: LD_VAR 0 7
81223: IFFALSE 81313
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81225: LD_ADDR_VAR 0 3
81229: PUSH
81230: LD_EXP 65
81234: PUSH
81235: LD_VAR 0 2
81239: ARRAY
81240: PPUSH
81241: LD_INT 25
81243: PUSH
81244: LD_INT 12
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PPUSH
81251: CALL_OW 72
81255: PUSH
81256: FOR_IN
81257: IFFALSE 81311
// if not IsInUnit ( j ) and not HasTask ( j ) then
81259: LD_VAR 0 3
81263: PPUSH
81264: CALL_OW 310
81268: NOT
81269: PUSH
81270: LD_VAR 0 3
81274: PPUSH
81275: CALL_OW 314
81279: NOT
81280: AND
81281: IFFALSE 81309
// begin ComEnterUnit ( j , selected ) ;
81283: LD_VAR 0 3
81287: PPUSH
81288: LD_VAR 0 7
81292: PPUSH
81293: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81297: LD_VAR 0 3
81301: PPUSH
81302: LD_INT 15
81304: PPUSH
81305: CALL_OW 183
// end ;
81309: GO 81256
81311: POP
81312: POP
// end ; end ; end ; end ; end ;
81313: GO 80706
81315: POP
81316: POP
// end ;
81317: LD_VAR 0 1
81321: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81322: LD_INT 0
81324: PPUSH
81325: PPUSH
81326: PPUSH
81327: PPUSH
// if not mc_bases then
81328: LD_EXP 36
81332: NOT
81333: IFFALSE 81337
// exit ;
81335: GO 81515
// for i = 1 to mc_bases do
81337: LD_ADDR_VAR 0 2
81341: PUSH
81342: DOUBLE
81343: LD_INT 1
81345: DEC
81346: ST_TO_ADDR
81347: LD_EXP 36
81351: PUSH
81352: FOR_TO
81353: IFFALSE 81513
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81355: LD_ADDR_VAR 0 4
81359: PUSH
81360: LD_EXP 36
81364: PUSH
81365: LD_VAR 0 2
81369: ARRAY
81370: PPUSH
81371: LD_INT 25
81373: PUSH
81374: LD_INT 9
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: PPUSH
81381: CALL_OW 72
81385: ST_TO_ADDR
// if not tmp then
81386: LD_VAR 0 4
81390: NOT
81391: IFFALSE 81395
// continue ;
81393: GO 81352
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81395: LD_EXP 62
81399: PUSH
81400: LD_VAR 0 2
81404: ARRAY
81405: PPUSH
81406: LD_INT 29
81408: PPUSH
81409: CALL_OW 325
81413: NOT
81414: PUSH
81415: LD_EXP 62
81419: PUSH
81420: LD_VAR 0 2
81424: ARRAY
81425: PPUSH
81426: LD_INT 28
81428: PPUSH
81429: CALL_OW 325
81433: NOT
81434: AND
81435: IFFALSE 81439
// continue ;
81437: GO 81352
// for j in tmp do
81439: LD_ADDR_VAR 0 3
81443: PUSH
81444: LD_VAR 0 4
81448: PUSH
81449: FOR_IN
81450: IFFALSE 81509
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81452: LD_VAR 0 3
81456: PUSH
81457: LD_EXP 39
81461: PUSH
81462: LD_VAR 0 2
81466: ARRAY
81467: PUSH
81468: LD_INT 1
81470: ARRAY
81471: IN
81472: NOT
81473: PUSH
81474: LD_VAR 0 3
81478: PUSH
81479: LD_EXP 39
81483: PUSH
81484: LD_VAR 0 2
81488: ARRAY
81489: PUSH
81490: LD_INT 2
81492: ARRAY
81493: IN
81494: NOT
81495: AND
81496: IFFALSE 81507
// ComSpaceTimeShoot ( j ) ;
81498: LD_VAR 0 3
81502: PPUSH
81503: CALL 20141 0 1
81507: GO 81449
81509: POP
81510: POP
// end ;
81511: GO 81352
81513: POP
81514: POP
// end ;
81515: LD_VAR 0 1
81519: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81520: LD_INT 0
81522: PPUSH
81523: PPUSH
81524: PPUSH
81525: PPUSH
81526: PPUSH
81527: PPUSH
81528: PPUSH
81529: PPUSH
81530: PPUSH
// if not mc_bases then
81531: LD_EXP 36
81535: NOT
81536: IFFALSE 81540
// exit ;
81538: GO 82162
// for i = 1 to mc_bases do
81540: LD_ADDR_VAR 0 2
81544: PUSH
81545: DOUBLE
81546: LD_INT 1
81548: DEC
81549: ST_TO_ADDR
81550: LD_EXP 36
81554: PUSH
81555: FOR_TO
81556: IFFALSE 82160
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81558: LD_EXP 71
81562: PUSH
81563: LD_VAR 0 2
81567: ARRAY
81568: NOT
81569: PUSH
81570: LD_INT 38
81572: PPUSH
81573: LD_EXP 62
81577: PUSH
81578: LD_VAR 0 2
81582: ARRAY
81583: PPUSH
81584: CALL_OW 321
81588: PUSH
81589: LD_INT 2
81591: NONEQUAL
81592: OR
81593: IFFALSE 81597
// continue ;
81595: GO 81555
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81597: LD_ADDR_VAR 0 8
81601: PUSH
81602: LD_EXP 36
81606: PUSH
81607: LD_VAR 0 2
81611: ARRAY
81612: PPUSH
81613: LD_INT 30
81615: PUSH
81616: LD_INT 34
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: PPUSH
81623: CALL_OW 72
81627: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81628: LD_ADDR_VAR 0 9
81632: PUSH
81633: LD_EXP 36
81637: PUSH
81638: LD_VAR 0 2
81642: ARRAY
81643: PPUSH
81644: LD_INT 25
81646: PUSH
81647: LD_INT 4
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PPUSH
81654: CALL_OW 72
81658: PPUSH
81659: LD_INT 0
81661: PPUSH
81662: CALL 59305 0 2
81666: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81667: LD_VAR 0 9
81671: NOT
81672: PUSH
81673: LD_VAR 0 8
81677: NOT
81678: OR
81679: PUSH
81680: LD_EXP 36
81684: PUSH
81685: LD_VAR 0 2
81689: ARRAY
81690: PPUSH
81691: LD_INT 124
81693: PPUSH
81694: CALL 59305 0 2
81698: OR
81699: IFFALSE 81703
// continue ;
81701: GO 81555
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81703: LD_EXP 72
81707: PUSH
81708: LD_VAR 0 2
81712: ARRAY
81713: PUSH
81714: LD_EXP 71
81718: PUSH
81719: LD_VAR 0 2
81723: ARRAY
81724: LESS
81725: PUSH
81726: LD_EXP 72
81730: PUSH
81731: LD_VAR 0 2
81735: ARRAY
81736: PUSH
81737: LD_VAR 0 8
81741: LESS
81742: AND
81743: IFFALSE 82158
// begin tmp := sci [ 1 ] ;
81745: LD_ADDR_VAR 0 7
81749: PUSH
81750: LD_VAR 0 9
81754: PUSH
81755: LD_INT 1
81757: ARRAY
81758: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81759: LD_VAR 0 7
81763: PPUSH
81764: LD_INT 124
81766: PPUSH
81767: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81771: LD_ADDR_VAR 0 3
81775: PUSH
81776: DOUBLE
81777: LD_EXP 71
81781: PUSH
81782: LD_VAR 0 2
81786: ARRAY
81787: INC
81788: ST_TO_ADDR
81789: LD_EXP 71
81793: PUSH
81794: LD_VAR 0 2
81798: ARRAY
81799: PUSH
81800: FOR_DOWNTO
81801: IFFALSE 82144
// begin if IsInUnit ( tmp ) then
81803: LD_VAR 0 7
81807: PPUSH
81808: CALL_OW 310
81812: IFFALSE 81823
// ComExitBuilding ( tmp ) ;
81814: LD_VAR 0 7
81818: PPUSH
81819: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
81823: LD_INT 35
81825: PPUSH
81826: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81830: LD_VAR 0 7
81834: PPUSH
81835: CALL_OW 310
81839: NOT
81840: PUSH
81841: LD_VAR 0 7
81845: PPUSH
81846: CALL_OW 314
81850: NOT
81851: AND
81852: IFFALSE 81823
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81854: LD_ADDR_VAR 0 6
81858: PUSH
81859: LD_VAR 0 7
81863: PPUSH
81864: CALL_OW 250
81868: PUSH
81869: LD_VAR 0 7
81873: PPUSH
81874: CALL_OW 251
81878: PUSH
81879: EMPTY
81880: LIST
81881: LIST
81882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81883: LD_INT 35
81885: PPUSH
81886: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81890: LD_ADDR_VAR 0 4
81894: PUSH
81895: LD_EXP 71
81899: PUSH
81900: LD_VAR 0 2
81904: ARRAY
81905: PUSH
81906: LD_VAR 0 3
81910: ARRAY
81911: PUSH
81912: LD_INT 1
81914: ARRAY
81915: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81916: LD_ADDR_VAR 0 5
81920: PUSH
81921: LD_EXP 71
81925: PUSH
81926: LD_VAR 0 2
81930: ARRAY
81931: PUSH
81932: LD_VAR 0 3
81936: ARRAY
81937: PUSH
81938: LD_INT 2
81940: ARRAY
81941: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81942: LD_VAR 0 7
81946: PPUSH
81947: LD_INT 10
81949: PPUSH
81950: CALL 28644 0 2
81954: PUSH
81955: LD_INT 4
81957: ARRAY
81958: IFFALSE 81996
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81960: LD_VAR 0 7
81964: PPUSH
81965: LD_VAR 0 6
81969: PUSH
81970: LD_INT 1
81972: ARRAY
81973: PPUSH
81974: LD_VAR 0 6
81978: PUSH
81979: LD_INT 2
81981: ARRAY
81982: PPUSH
81983: CALL_OW 111
// wait ( 0 0$10 ) ;
81987: LD_INT 350
81989: PPUSH
81990: CALL_OW 67
// end else
81994: GO 82022
// begin ComMoveXY ( tmp , x , y ) ;
81996: LD_VAR 0 7
82000: PPUSH
82001: LD_VAR 0 4
82005: PPUSH
82006: LD_VAR 0 5
82010: PPUSH
82011: CALL_OW 111
// wait ( 0 0$3 ) ;
82015: LD_INT 105
82017: PPUSH
82018: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82022: LD_VAR 0 7
82026: PPUSH
82027: LD_VAR 0 4
82031: PPUSH
82032: LD_VAR 0 5
82036: PPUSH
82037: CALL_OW 307
82041: IFFALSE 81883
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82043: LD_VAR 0 7
82047: PPUSH
82048: LD_VAR 0 4
82052: PPUSH
82053: LD_VAR 0 5
82057: PPUSH
82058: LD_VAR 0 8
82062: PUSH
82063: LD_VAR 0 3
82067: ARRAY
82068: PPUSH
82069: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82073: LD_INT 35
82075: PPUSH
82076: CALL_OW 67
// until not HasTask ( tmp ) ;
82080: LD_VAR 0 7
82084: PPUSH
82085: CALL_OW 314
82089: NOT
82090: IFFALSE 82073
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82092: LD_ADDR_EXP 72
82096: PUSH
82097: LD_EXP 72
82101: PPUSH
82102: LD_VAR 0 2
82106: PUSH
82107: LD_EXP 72
82111: PUSH
82112: LD_VAR 0 2
82116: ARRAY
82117: PUSH
82118: LD_INT 1
82120: PLUS
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: PPUSH
82126: LD_VAR 0 8
82130: PUSH
82131: LD_VAR 0 3
82135: ARRAY
82136: PPUSH
82137: CALL 26051 0 3
82141: ST_TO_ADDR
// end ;
82142: GO 81800
82144: POP
82145: POP
// MC_Reset ( i , 124 ) ;
82146: LD_VAR 0 2
82150: PPUSH
82151: LD_INT 124
82153: PPUSH
82154: CALL 66007 0 2
// end ; end ;
82158: GO 81555
82160: POP
82161: POP
// end ;
82162: LD_VAR 0 1
82166: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82167: LD_INT 0
82169: PPUSH
82170: PPUSH
82171: PPUSH
// if not mc_bases then
82172: LD_EXP 36
82176: NOT
82177: IFFALSE 82181
// exit ;
82179: GO 82787
// for i = 1 to mc_bases do
82181: LD_ADDR_VAR 0 2
82185: PUSH
82186: DOUBLE
82187: LD_INT 1
82189: DEC
82190: ST_TO_ADDR
82191: LD_EXP 36
82195: PUSH
82196: FOR_TO
82197: IFFALSE 82785
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82199: LD_ADDR_VAR 0 3
82203: PUSH
82204: LD_EXP 36
82208: PUSH
82209: LD_VAR 0 2
82213: ARRAY
82214: PPUSH
82215: LD_INT 25
82217: PUSH
82218: LD_INT 4
82220: PUSH
82221: EMPTY
82222: LIST
82223: LIST
82224: PPUSH
82225: CALL_OW 72
82229: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82230: LD_VAR 0 3
82234: NOT
82235: PUSH
82236: LD_EXP 73
82240: PUSH
82241: LD_VAR 0 2
82245: ARRAY
82246: NOT
82247: OR
82248: PUSH
82249: LD_EXP 36
82253: PUSH
82254: LD_VAR 0 2
82258: ARRAY
82259: PPUSH
82260: LD_INT 2
82262: PUSH
82263: LD_INT 30
82265: PUSH
82266: LD_INT 0
82268: PUSH
82269: EMPTY
82270: LIST
82271: LIST
82272: PUSH
82273: LD_INT 30
82275: PUSH
82276: LD_INT 1
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: EMPTY
82284: LIST
82285: LIST
82286: LIST
82287: PPUSH
82288: CALL_OW 72
82292: NOT
82293: OR
82294: IFFALSE 82344
// begin if mc_deposits_finder [ i ] then
82296: LD_EXP 74
82300: PUSH
82301: LD_VAR 0 2
82305: ARRAY
82306: IFFALSE 82342
// begin MC_Reset ( i , 125 ) ;
82308: LD_VAR 0 2
82312: PPUSH
82313: LD_INT 125
82315: PPUSH
82316: CALL 66007 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82320: LD_ADDR_EXP 74
82324: PUSH
82325: LD_EXP 74
82329: PPUSH
82330: LD_VAR 0 2
82334: PPUSH
82335: EMPTY
82336: PPUSH
82337: CALL_OW 1
82341: ST_TO_ADDR
// end ; continue ;
82342: GO 82196
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82344: LD_EXP 73
82348: PUSH
82349: LD_VAR 0 2
82353: ARRAY
82354: PUSH
82355: LD_INT 1
82357: ARRAY
82358: PUSH
82359: LD_INT 3
82361: ARRAY
82362: PUSH
82363: LD_INT 1
82365: EQUAL
82366: PUSH
82367: LD_INT 20
82369: PPUSH
82370: LD_EXP 62
82374: PUSH
82375: LD_VAR 0 2
82379: ARRAY
82380: PPUSH
82381: CALL_OW 321
82385: PUSH
82386: LD_INT 2
82388: NONEQUAL
82389: AND
82390: IFFALSE 82440
// begin if mc_deposits_finder [ i ] then
82392: LD_EXP 74
82396: PUSH
82397: LD_VAR 0 2
82401: ARRAY
82402: IFFALSE 82438
// begin MC_Reset ( i , 125 ) ;
82404: LD_VAR 0 2
82408: PPUSH
82409: LD_INT 125
82411: PPUSH
82412: CALL 66007 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82416: LD_ADDR_EXP 74
82420: PUSH
82421: LD_EXP 74
82425: PPUSH
82426: LD_VAR 0 2
82430: PPUSH
82431: EMPTY
82432: PPUSH
82433: CALL_OW 1
82437: ST_TO_ADDR
// end ; continue ;
82438: GO 82196
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82440: LD_EXP 73
82444: PUSH
82445: LD_VAR 0 2
82449: ARRAY
82450: PUSH
82451: LD_INT 1
82453: ARRAY
82454: PUSH
82455: LD_INT 1
82457: ARRAY
82458: PPUSH
82459: LD_EXP 73
82463: PUSH
82464: LD_VAR 0 2
82468: ARRAY
82469: PUSH
82470: LD_INT 1
82472: ARRAY
82473: PUSH
82474: LD_INT 2
82476: ARRAY
82477: PPUSH
82478: LD_EXP 62
82482: PUSH
82483: LD_VAR 0 2
82487: ARRAY
82488: PPUSH
82489: CALL_OW 440
82493: IFFALSE 82536
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82495: LD_ADDR_EXP 73
82499: PUSH
82500: LD_EXP 73
82504: PPUSH
82505: LD_VAR 0 2
82509: PPUSH
82510: LD_EXP 73
82514: PUSH
82515: LD_VAR 0 2
82519: ARRAY
82520: PPUSH
82521: LD_INT 1
82523: PPUSH
82524: CALL_OW 3
82528: PPUSH
82529: CALL_OW 1
82533: ST_TO_ADDR
82534: GO 82783
// begin if not mc_deposits_finder [ i ] then
82536: LD_EXP 74
82540: PUSH
82541: LD_VAR 0 2
82545: ARRAY
82546: NOT
82547: IFFALSE 82599
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82549: LD_ADDR_EXP 74
82553: PUSH
82554: LD_EXP 74
82558: PPUSH
82559: LD_VAR 0 2
82563: PPUSH
82564: LD_VAR 0 3
82568: PUSH
82569: LD_INT 1
82571: ARRAY
82572: PUSH
82573: EMPTY
82574: LIST
82575: PPUSH
82576: CALL_OW 1
82580: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82581: LD_VAR 0 3
82585: PUSH
82586: LD_INT 1
82588: ARRAY
82589: PPUSH
82590: LD_INT 125
82592: PPUSH
82593: CALL_OW 109
// end else
82597: GO 82783
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82599: LD_EXP 74
82603: PUSH
82604: LD_VAR 0 2
82608: ARRAY
82609: PUSH
82610: LD_INT 1
82612: ARRAY
82613: PPUSH
82614: CALL_OW 310
82618: IFFALSE 82641
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82620: LD_EXP 74
82624: PUSH
82625: LD_VAR 0 2
82629: ARRAY
82630: PUSH
82631: LD_INT 1
82633: ARRAY
82634: PPUSH
82635: CALL_OW 122
82639: GO 82783
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82641: LD_EXP 74
82645: PUSH
82646: LD_VAR 0 2
82650: ARRAY
82651: PUSH
82652: LD_INT 1
82654: ARRAY
82655: PPUSH
82656: CALL_OW 314
82660: NOT
82661: PUSH
82662: LD_EXP 74
82666: PUSH
82667: LD_VAR 0 2
82671: ARRAY
82672: PUSH
82673: LD_INT 1
82675: ARRAY
82676: PPUSH
82677: LD_EXP 73
82681: PUSH
82682: LD_VAR 0 2
82686: ARRAY
82687: PUSH
82688: LD_INT 1
82690: ARRAY
82691: PUSH
82692: LD_INT 1
82694: ARRAY
82695: PPUSH
82696: LD_EXP 73
82700: PUSH
82701: LD_VAR 0 2
82705: ARRAY
82706: PUSH
82707: LD_INT 1
82709: ARRAY
82710: PUSH
82711: LD_INT 2
82713: ARRAY
82714: PPUSH
82715: CALL_OW 297
82719: PUSH
82720: LD_INT 6
82722: GREATER
82723: AND
82724: IFFALSE 82783
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82726: LD_EXP 74
82730: PUSH
82731: LD_VAR 0 2
82735: ARRAY
82736: PUSH
82737: LD_INT 1
82739: ARRAY
82740: PPUSH
82741: LD_EXP 73
82745: PUSH
82746: LD_VAR 0 2
82750: ARRAY
82751: PUSH
82752: LD_INT 1
82754: ARRAY
82755: PUSH
82756: LD_INT 1
82758: ARRAY
82759: PPUSH
82760: LD_EXP 73
82764: PUSH
82765: LD_VAR 0 2
82769: ARRAY
82770: PUSH
82771: LD_INT 1
82773: ARRAY
82774: PUSH
82775: LD_INT 2
82777: ARRAY
82778: PPUSH
82779: CALL_OW 111
// end ; end ; end ;
82783: GO 82196
82785: POP
82786: POP
// end ;
82787: LD_VAR 0 1
82791: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82792: LD_INT 0
82794: PPUSH
82795: PPUSH
82796: PPUSH
82797: PPUSH
82798: PPUSH
82799: PPUSH
82800: PPUSH
82801: PPUSH
82802: PPUSH
82803: PPUSH
82804: PPUSH
// if not mc_bases then
82805: LD_EXP 36
82809: NOT
82810: IFFALSE 82814
// exit ;
82812: GO 83538
// for i = 1 to mc_bases do
82814: LD_ADDR_VAR 0 2
82818: PUSH
82819: DOUBLE
82820: LD_INT 1
82822: DEC
82823: ST_TO_ADDR
82824: LD_EXP 36
82828: PUSH
82829: FOR_TO
82830: IFFALSE 83536
// begin if not mc_bases [ i ] then
82832: LD_EXP 36
82836: PUSH
82837: LD_VAR 0 2
82841: ARRAY
82842: NOT
82843: IFFALSE 82847
// continue ;
82845: GO 82829
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82847: LD_ADDR_VAR 0 7
82851: PUSH
82852: LD_EXP 36
82856: PUSH
82857: LD_VAR 0 2
82861: ARRAY
82862: PUSH
82863: LD_INT 1
82865: ARRAY
82866: PPUSH
82867: CALL_OW 248
82871: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82872: LD_VAR 0 7
82876: PUSH
82877: LD_INT 3
82879: EQUAL
82880: PUSH
82881: LD_EXP 55
82885: PUSH
82886: LD_VAR 0 2
82890: ARRAY
82891: PUSH
82892: LD_EXP 58
82896: PUSH
82897: LD_VAR 0 2
82901: ARRAY
82902: UNION
82903: PPUSH
82904: LD_INT 33
82906: PUSH
82907: LD_INT 2
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: PPUSH
82914: CALL_OW 72
82918: NOT
82919: OR
82920: IFFALSE 82924
// continue ;
82922: GO 82829
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82924: LD_ADDR_VAR 0 9
82928: PUSH
82929: LD_EXP 36
82933: PUSH
82934: LD_VAR 0 2
82938: ARRAY
82939: PPUSH
82940: LD_INT 30
82942: PUSH
82943: LD_INT 36
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PPUSH
82950: CALL_OW 72
82954: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82955: LD_ADDR_VAR 0 10
82959: PUSH
82960: LD_EXP 55
82964: PUSH
82965: LD_VAR 0 2
82969: ARRAY
82970: PPUSH
82971: LD_INT 34
82973: PUSH
82974: LD_INT 31
82976: PUSH
82977: EMPTY
82978: LIST
82979: LIST
82980: PPUSH
82981: CALL_OW 72
82985: ST_TO_ADDR
// if not cts and not mcts then
82986: LD_VAR 0 9
82990: NOT
82991: PUSH
82992: LD_VAR 0 10
82996: NOT
82997: AND
82998: IFFALSE 83002
// continue ;
83000: GO 82829
// x := cts ;
83002: LD_ADDR_VAR 0 11
83006: PUSH
83007: LD_VAR 0 9
83011: ST_TO_ADDR
// if not x then
83012: LD_VAR 0 11
83016: NOT
83017: IFFALSE 83029
// x := mcts ;
83019: LD_ADDR_VAR 0 11
83023: PUSH
83024: LD_VAR 0 10
83028: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83029: LD_EXP 76
83033: PUSH
83034: LD_VAR 0 2
83038: ARRAY
83039: IFFALSE 83308
// for j in mc_remote_driver [ i ] do
83041: LD_ADDR_VAR 0 3
83045: PUSH
83046: LD_EXP 76
83050: PUSH
83051: LD_VAR 0 2
83055: ARRAY
83056: PUSH
83057: FOR_IN
83058: IFFALSE 83306
// begin if GetClass ( j ) <> 3 then
83060: LD_VAR 0 3
83064: PPUSH
83065: CALL_OW 257
83069: PUSH
83070: LD_INT 3
83072: NONEQUAL
83073: IFFALSE 83126
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83075: LD_ADDR_EXP 76
83079: PUSH
83080: LD_EXP 76
83084: PPUSH
83085: LD_VAR 0 2
83089: PPUSH
83090: LD_EXP 76
83094: PUSH
83095: LD_VAR 0 2
83099: ARRAY
83100: PUSH
83101: LD_VAR 0 3
83105: DIFF
83106: PPUSH
83107: CALL_OW 1
83111: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83112: LD_VAR 0 3
83116: PPUSH
83117: LD_INT 0
83119: PPUSH
83120: CALL_OW 109
// continue ;
83124: GO 83057
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83126: LD_VAR 0 3
83130: PPUSH
83131: CALL_OW 310
83135: NOT
83136: PUSH
83137: LD_VAR 0 3
83141: PPUSH
83142: CALL_OW 310
83146: PPUSH
83147: CALL_OW 266
83151: PUSH
83152: LD_INT 36
83154: NONEQUAL
83155: PUSH
83156: LD_VAR 0 3
83160: PPUSH
83161: CALL 59393 0 1
83165: NOT
83166: AND
83167: OR
83168: IFFALSE 83304
// begin if IsInUnit ( j ) then
83170: LD_VAR 0 3
83174: PPUSH
83175: CALL_OW 310
83179: IFFALSE 83190
// ComExitBuilding ( j ) ;
83181: LD_VAR 0 3
83185: PPUSH
83186: CALL_OW 122
// ct := 0 ;
83190: LD_ADDR_VAR 0 8
83194: PUSH
83195: LD_INT 0
83197: ST_TO_ADDR
// for k in x do
83198: LD_ADDR_VAR 0 4
83202: PUSH
83203: LD_VAR 0 11
83207: PUSH
83208: FOR_IN
83209: IFFALSE 83282
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83211: LD_VAR 0 4
83215: PPUSH
83216: CALL_OW 264
83220: PUSH
83221: LD_INT 31
83223: EQUAL
83224: PUSH
83225: LD_VAR 0 4
83229: PPUSH
83230: CALL_OW 311
83234: NOT
83235: AND
83236: PUSH
83237: LD_VAR 0 4
83241: PPUSH
83242: CALL_OW 266
83246: PUSH
83247: LD_INT 36
83249: EQUAL
83250: PUSH
83251: LD_VAR 0 4
83255: PPUSH
83256: CALL_OW 313
83260: PUSH
83261: LD_INT 3
83263: LESS
83264: AND
83265: OR
83266: IFFALSE 83280
// begin ct := k ;
83268: LD_ADDR_VAR 0 8
83272: PUSH
83273: LD_VAR 0 4
83277: ST_TO_ADDR
// break ;
83278: GO 83282
// end ;
83280: GO 83208
83282: POP
83283: POP
// if ct then
83284: LD_VAR 0 8
83288: IFFALSE 83304
// ComEnterUnit ( j , ct ) ;
83290: LD_VAR 0 3
83294: PPUSH
83295: LD_VAR 0 8
83299: PPUSH
83300: CALL_OW 120
// end ; end ;
83304: GO 83057
83306: POP
83307: POP
// places := 0 ;
83308: LD_ADDR_VAR 0 5
83312: PUSH
83313: LD_INT 0
83315: ST_TO_ADDR
// for j = 1 to x do
83316: LD_ADDR_VAR 0 3
83320: PUSH
83321: DOUBLE
83322: LD_INT 1
83324: DEC
83325: ST_TO_ADDR
83326: LD_VAR 0 11
83330: PUSH
83331: FOR_TO
83332: IFFALSE 83387
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83334: LD_VAR 0 11
83338: PUSH
83339: LD_VAR 0 3
83343: ARRAY
83344: PPUSH
83345: CALL_OW 264
83349: PUSH
83350: LD_INT 31
83352: EQUAL
83353: IFFALSE 83371
// places := places + 1 else
83355: LD_ADDR_VAR 0 5
83359: PUSH
83360: LD_VAR 0 5
83364: PUSH
83365: LD_INT 1
83367: PLUS
83368: ST_TO_ADDR
83369: GO 83385
// places := places + 3 ;
83371: LD_ADDR_VAR 0 5
83375: PUSH
83376: LD_VAR 0 5
83380: PUSH
83381: LD_INT 3
83383: PLUS
83384: ST_TO_ADDR
83385: GO 83331
83387: POP
83388: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83389: LD_ADDR_VAR 0 6
83393: PUSH
83394: LD_EXP 36
83398: PUSH
83399: LD_VAR 0 2
83403: ARRAY
83404: PPUSH
83405: LD_INT 25
83407: PUSH
83408: LD_INT 3
83410: PUSH
83411: EMPTY
83412: LIST
83413: LIST
83414: PPUSH
83415: CALL_OW 72
83419: PUSH
83420: LD_EXP 76
83424: PUSH
83425: LD_VAR 0 2
83429: ARRAY
83430: DIFF
83431: PPUSH
83432: LD_INT 3
83434: PPUSH
83435: CALL 60293 0 2
83439: ST_TO_ADDR
// if not tmp then
83440: LD_VAR 0 6
83444: NOT
83445: IFFALSE 83449
// continue ;
83447: GO 82829
// places := places - mc_remote_driver [ i ] ;
83449: LD_ADDR_VAR 0 5
83453: PUSH
83454: LD_VAR 0 5
83458: PUSH
83459: LD_EXP 76
83463: PUSH
83464: LD_VAR 0 2
83468: ARRAY
83469: MINUS
83470: ST_TO_ADDR
// if places then
83471: LD_VAR 0 5
83475: IFFALSE 83534
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
83477: LD_ADDR_EXP 76
83481: PUSH
83482: LD_EXP 76
83486: PPUSH
83487: LD_VAR 0 2
83491: PPUSH
83492: LD_EXP 76
83496: PUSH
83497: LD_VAR 0 2
83501: ARRAY
83502: PUSH
83503: LD_VAR 0 6
83507: PUSH
83508: LD_INT 1
83510: ARRAY
83511: UNION
83512: PPUSH
83513: CALL_OW 1
83517: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83518: LD_VAR 0 6
83522: PUSH
83523: LD_INT 1
83525: ARRAY
83526: PPUSH
83527: LD_INT 126
83529: PPUSH
83530: CALL_OW 109
// end ; end ;
83534: GO 82829
83536: POP
83537: POP
// end ;
83538: LD_VAR 0 1
83542: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83543: LD_INT 0
83545: PPUSH
83546: PPUSH
83547: PPUSH
83548: PPUSH
83549: PPUSH
83550: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83551: LD_VAR 0 1
83555: NOT
83556: PUSH
83557: LD_VAR 0 2
83561: NOT
83562: OR
83563: PUSH
83564: LD_VAR 0 3
83568: NOT
83569: OR
83570: PUSH
83571: LD_VAR 0 4
83575: PUSH
83576: LD_INT 1
83578: PUSH
83579: LD_INT 2
83581: PUSH
83582: LD_INT 3
83584: PUSH
83585: LD_INT 4
83587: PUSH
83588: LD_INT 5
83590: PUSH
83591: LD_INT 8
83593: PUSH
83594: LD_INT 9
83596: PUSH
83597: LD_INT 15
83599: PUSH
83600: LD_INT 16
83602: PUSH
83603: EMPTY
83604: LIST
83605: LIST
83606: LIST
83607: LIST
83608: LIST
83609: LIST
83610: LIST
83611: LIST
83612: LIST
83613: IN
83614: NOT
83615: OR
83616: IFFALSE 83620
// exit ;
83618: GO 84520
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83620: LD_ADDR_VAR 0 2
83624: PUSH
83625: LD_VAR 0 2
83629: PPUSH
83630: LD_INT 21
83632: PUSH
83633: LD_INT 3
83635: PUSH
83636: EMPTY
83637: LIST
83638: LIST
83639: PUSH
83640: LD_INT 24
83642: PUSH
83643: LD_INT 250
83645: PUSH
83646: EMPTY
83647: LIST
83648: LIST
83649: PUSH
83650: EMPTY
83651: LIST
83652: LIST
83653: PPUSH
83654: CALL_OW 72
83658: ST_TO_ADDR
// case class of 1 , 15 :
83659: LD_VAR 0 4
83663: PUSH
83664: LD_INT 1
83666: DOUBLE
83667: EQUAL
83668: IFTRUE 83678
83670: LD_INT 15
83672: DOUBLE
83673: EQUAL
83674: IFTRUE 83678
83676: GO 83763
83678: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83679: LD_ADDR_VAR 0 8
83683: PUSH
83684: LD_VAR 0 2
83688: PPUSH
83689: LD_INT 2
83691: PUSH
83692: LD_INT 30
83694: PUSH
83695: LD_INT 32
83697: PUSH
83698: EMPTY
83699: LIST
83700: LIST
83701: PUSH
83702: LD_INT 30
83704: PUSH
83705: LD_INT 31
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: PUSH
83712: EMPTY
83713: LIST
83714: LIST
83715: LIST
83716: PPUSH
83717: CALL_OW 72
83721: PUSH
83722: LD_VAR 0 2
83726: PPUSH
83727: LD_INT 2
83729: PUSH
83730: LD_INT 30
83732: PUSH
83733: LD_INT 4
83735: PUSH
83736: EMPTY
83737: LIST
83738: LIST
83739: PUSH
83740: LD_INT 30
83742: PUSH
83743: LD_INT 5
83745: PUSH
83746: EMPTY
83747: LIST
83748: LIST
83749: PUSH
83750: EMPTY
83751: LIST
83752: LIST
83753: LIST
83754: PPUSH
83755: CALL_OW 72
83759: ADD
83760: ST_TO_ADDR
83761: GO 84009
83763: LD_INT 2
83765: DOUBLE
83766: EQUAL
83767: IFTRUE 83777
83769: LD_INT 16
83771: DOUBLE
83772: EQUAL
83773: IFTRUE 83777
83775: GO 83823
83777: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83778: LD_ADDR_VAR 0 8
83782: PUSH
83783: LD_VAR 0 2
83787: PPUSH
83788: LD_INT 2
83790: PUSH
83791: LD_INT 30
83793: PUSH
83794: LD_INT 0
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: PUSH
83801: LD_INT 30
83803: PUSH
83804: LD_INT 1
83806: PUSH
83807: EMPTY
83808: LIST
83809: LIST
83810: PUSH
83811: EMPTY
83812: LIST
83813: LIST
83814: LIST
83815: PPUSH
83816: CALL_OW 72
83820: ST_TO_ADDR
83821: GO 84009
83823: LD_INT 3
83825: DOUBLE
83826: EQUAL
83827: IFTRUE 83831
83829: GO 83877
83831: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83832: LD_ADDR_VAR 0 8
83836: PUSH
83837: LD_VAR 0 2
83841: PPUSH
83842: LD_INT 2
83844: PUSH
83845: LD_INT 30
83847: PUSH
83848: LD_INT 2
83850: PUSH
83851: EMPTY
83852: LIST
83853: LIST
83854: PUSH
83855: LD_INT 30
83857: PUSH
83858: LD_INT 3
83860: PUSH
83861: EMPTY
83862: LIST
83863: LIST
83864: PUSH
83865: EMPTY
83866: LIST
83867: LIST
83868: LIST
83869: PPUSH
83870: CALL_OW 72
83874: ST_TO_ADDR
83875: GO 84009
83877: LD_INT 4
83879: DOUBLE
83880: EQUAL
83881: IFTRUE 83885
83883: GO 83942
83885: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83886: LD_ADDR_VAR 0 8
83890: PUSH
83891: LD_VAR 0 2
83895: PPUSH
83896: LD_INT 2
83898: PUSH
83899: LD_INT 30
83901: PUSH
83902: LD_INT 6
83904: PUSH
83905: EMPTY
83906: LIST
83907: LIST
83908: PUSH
83909: LD_INT 30
83911: PUSH
83912: LD_INT 7
83914: PUSH
83915: EMPTY
83916: LIST
83917: LIST
83918: PUSH
83919: LD_INT 30
83921: PUSH
83922: LD_INT 8
83924: PUSH
83925: EMPTY
83926: LIST
83927: LIST
83928: PUSH
83929: EMPTY
83930: LIST
83931: LIST
83932: LIST
83933: LIST
83934: PPUSH
83935: CALL_OW 72
83939: ST_TO_ADDR
83940: GO 84009
83942: LD_INT 5
83944: DOUBLE
83945: EQUAL
83946: IFTRUE 83962
83948: LD_INT 8
83950: DOUBLE
83951: EQUAL
83952: IFTRUE 83962
83954: LD_INT 9
83956: DOUBLE
83957: EQUAL
83958: IFTRUE 83962
83960: GO 84008
83962: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83963: LD_ADDR_VAR 0 8
83967: PUSH
83968: LD_VAR 0 2
83972: PPUSH
83973: LD_INT 2
83975: PUSH
83976: LD_INT 30
83978: PUSH
83979: LD_INT 4
83981: PUSH
83982: EMPTY
83983: LIST
83984: LIST
83985: PUSH
83986: LD_INT 30
83988: PUSH
83989: LD_INT 5
83991: PUSH
83992: EMPTY
83993: LIST
83994: LIST
83995: PUSH
83996: EMPTY
83997: LIST
83998: LIST
83999: LIST
84000: PPUSH
84001: CALL_OW 72
84005: ST_TO_ADDR
84006: GO 84009
84008: POP
// if not tmp then
84009: LD_VAR 0 8
84013: NOT
84014: IFFALSE 84018
// exit ;
84016: GO 84520
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84018: LD_VAR 0 4
84022: PUSH
84023: LD_INT 1
84025: PUSH
84026: LD_INT 15
84028: PUSH
84029: EMPTY
84030: LIST
84031: LIST
84032: IN
84033: PUSH
84034: LD_EXP 45
84038: PUSH
84039: LD_VAR 0 1
84043: ARRAY
84044: AND
84045: IFFALSE 84201
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84047: LD_ADDR_VAR 0 9
84051: PUSH
84052: LD_EXP 45
84056: PUSH
84057: LD_VAR 0 1
84061: ARRAY
84062: PUSH
84063: LD_INT 1
84065: ARRAY
84066: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84067: LD_VAR 0 9
84071: PUSH
84072: LD_EXP 46
84076: PUSH
84077: LD_VAR 0 1
84081: ARRAY
84082: IN
84083: NOT
84084: IFFALSE 84199
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84086: LD_ADDR_EXP 46
84090: PUSH
84091: LD_EXP 46
84095: PPUSH
84096: LD_VAR 0 1
84100: PUSH
84101: LD_EXP 46
84105: PUSH
84106: LD_VAR 0 1
84110: ARRAY
84111: PUSH
84112: LD_INT 1
84114: PLUS
84115: PUSH
84116: EMPTY
84117: LIST
84118: LIST
84119: PPUSH
84120: LD_VAR 0 9
84124: PPUSH
84125: CALL 26051 0 3
84129: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84130: LD_ADDR_EXP 45
84134: PUSH
84135: LD_EXP 45
84139: PPUSH
84140: LD_VAR 0 1
84144: PPUSH
84145: LD_EXP 45
84149: PUSH
84150: LD_VAR 0 1
84154: ARRAY
84155: PUSH
84156: LD_VAR 0 9
84160: DIFF
84161: PPUSH
84162: CALL_OW 1
84166: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84167: LD_VAR 0 3
84171: PPUSH
84172: LD_EXP 46
84176: PUSH
84177: LD_VAR 0 1
84181: ARRAY
84182: PUSH
84183: LD_EXP 46
84187: PUSH
84188: LD_VAR 0 1
84192: ARRAY
84193: ARRAY
84194: PPUSH
84195: CALL_OW 120
// end ; exit ;
84199: GO 84520
// end ; if tmp > 1 then
84201: LD_VAR 0 8
84205: PUSH
84206: LD_INT 1
84208: GREATER
84209: IFFALSE 84313
// for i = 2 to tmp do
84211: LD_ADDR_VAR 0 6
84215: PUSH
84216: DOUBLE
84217: LD_INT 2
84219: DEC
84220: ST_TO_ADDR
84221: LD_VAR 0 8
84225: PUSH
84226: FOR_TO
84227: IFFALSE 84311
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84229: LD_VAR 0 8
84233: PUSH
84234: LD_VAR 0 6
84238: ARRAY
84239: PPUSH
84240: CALL_OW 461
84244: PUSH
84245: LD_INT 6
84247: EQUAL
84248: IFFALSE 84309
// begin x := tmp [ i ] ;
84250: LD_ADDR_VAR 0 9
84254: PUSH
84255: LD_VAR 0 8
84259: PUSH
84260: LD_VAR 0 6
84264: ARRAY
84265: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84266: LD_ADDR_VAR 0 8
84270: PUSH
84271: LD_VAR 0 8
84275: PPUSH
84276: LD_VAR 0 6
84280: PPUSH
84281: CALL_OW 3
84285: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84286: LD_ADDR_VAR 0 8
84290: PUSH
84291: LD_VAR 0 8
84295: PPUSH
84296: LD_INT 1
84298: PPUSH
84299: LD_VAR 0 9
84303: PPUSH
84304: CALL_OW 2
84308: ST_TO_ADDR
// end ;
84309: GO 84226
84311: POP
84312: POP
// for i in tmp do
84313: LD_ADDR_VAR 0 6
84317: PUSH
84318: LD_VAR 0 8
84322: PUSH
84323: FOR_IN
84324: IFFALSE 84393
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84326: LD_VAR 0 6
84330: PPUSH
84331: CALL_OW 313
84335: PUSH
84336: LD_INT 6
84338: LESS
84339: PUSH
84340: LD_VAR 0 6
84344: PPUSH
84345: CALL_OW 266
84349: PUSH
84350: LD_INT 31
84352: PUSH
84353: LD_INT 32
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: IN
84360: NOT
84361: AND
84362: PUSH
84363: LD_VAR 0 6
84367: PPUSH
84368: CALL_OW 313
84372: PUSH
84373: LD_INT 0
84375: EQUAL
84376: OR
84377: IFFALSE 84391
// begin j := i ;
84379: LD_ADDR_VAR 0 7
84383: PUSH
84384: LD_VAR 0 6
84388: ST_TO_ADDR
// break ;
84389: GO 84393
// end ; end ;
84391: GO 84323
84393: POP
84394: POP
// if j then
84395: LD_VAR 0 7
84399: IFFALSE 84417
// ComEnterUnit ( unit , j ) else
84401: LD_VAR 0 3
84405: PPUSH
84406: LD_VAR 0 7
84410: PPUSH
84411: CALL_OW 120
84415: GO 84520
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84417: LD_ADDR_VAR 0 10
84421: PUSH
84422: LD_VAR 0 2
84426: PPUSH
84427: LD_INT 2
84429: PUSH
84430: LD_INT 30
84432: PUSH
84433: LD_INT 0
84435: PUSH
84436: EMPTY
84437: LIST
84438: LIST
84439: PUSH
84440: LD_INT 30
84442: PUSH
84443: LD_INT 1
84445: PUSH
84446: EMPTY
84447: LIST
84448: LIST
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: LIST
84454: PPUSH
84455: CALL_OW 72
84459: ST_TO_ADDR
// if depot then
84460: LD_VAR 0 10
84464: IFFALSE 84520
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84466: LD_ADDR_VAR 0 10
84470: PUSH
84471: LD_VAR 0 10
84475: PPUSH
84476: LD_VAR 0 3
84480: PPUSH
84481: CALL_OW 74
84485: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84486: LD_VAR 0 3
84490: PPUSH
84491: LD_VAR 0 10
84495: PPUSH
84496: CALL_OW 296
84500: PUSH
84501: LD_INT 10
84503: GREATER
84504: IFFALSE 84520
// ComStandNearbyBuilding ( unit , depot ) ;
84506: LD_VAR 0 3
84510: PPUSH
84511: LD_VAR 0 10
84515: PPUSH
84516: CALL 20758 0 2
// end ; end ; end ;
84520: LD_VAR 0 5
84524: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84525: LD_INT 0
84527: PPUSH
84528: PPUSH
84529: PPUSH
84530: PPUSH
// if not mc_bases then
84531: LD_EXP 36
84535: NOT
84536: IFFALSE 84540
// exit ;
84538: GO 84779
// for i = 1 to mc_bases do
84540: LD_ADDR_VAR 0 2
84544: PUSH
84545: DOUBLE
84546: LD_INT 1
84548: DEC
84549: ST_TO_ADDR
84550: LD_EXP 36
84554: PUSH
84555: FOR_TO
84556: IFFALSE 84777
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84558: LD_ADDR_VAR 0 4
84562: PUSH
84563: LD_EXP 36
84567: PUSH
84568: LD_VAR 0 2
84572: ARRAY
84573: PPUSH
84574: LD_INT 21
84576: PUSH
84577: LD_INT 1
84579: PUSH
84580: EMPTY
84581: LIST
84582: LIST
84583: PPUSH
84584: CALL_OW 72
84588: PUSH
84589: LD_EXP 65
84593: PUSH
84594: LD_VAR 0 2
84598: ARRAY
84599: UNION
84600: ST_TO_ADDR
// if not tmp then
84601: LD_VAR 0 4
84605: NOT
84606: IFFALSE 84610
// continue ;
84608: GO 84555
// for j in tmp do
84610: LD_ADDR_VAR 0 3
84614: PUSH
84615: LD_VAR 0 4
84619: PUSH
84620: FOR_IN
84621: IFFALSE 84773
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84623: LD_VAR 0 3
84627: PPUSH
84628: CALL_OW 110
84632: NOT
84633: PUSH
84634: LD_VAR 0 3
84638: PPUSH
84639: CALL_OW 314
84643: NOT
84644: AND
84645: PUSH
84646: LD_VAR 0 3
84650: PPUSH
84651: CALL_OW 311
84655: NOT
84656: AND
84657: PUSH
84658: LD_VAR 0 3
84662: PPUSH
84663: CALL_OW 310
84667: NOT
84668: AND
84669: PUSH
84670: LD_VAR 0 3
84674: PUSH
84675: LD_EXP 39
84679: PUSH
84680: LD_VAR 0 2
84684: ARRAY
84685: PUSH
84686: LD_INT 1
84688: ARRAY
84689: IN
84690: NOT
84691: AND
84692: PUSH
84693: LD_VAR 0 3
84697: PUSH
84698: LD_EXP 39
84702: PUSH
84703: LD_VAR 0 2
84707: ARRAY
84708: PUSH
84709: LD_INT 2
84711: ARRAY
84712: IN
84713: NOT
84714: AND
84715: PUSH
84716: LD_VAR 0 3
84720: PUSH
84721: LD_EXP 48
84725: PUSH
84726: LD_VAR 0 2
84730: ARRAY
84731: IN
84732: NOT
84733: AND
84734: IFFALSE 84771
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84736: LD_VAR 0 2
84740: PPUSH
84741: LD_EXP 36
84745: PUSH
84746: LD_VAR 0 2
84750: ARRAY
84751: PPUSH
84752: LD_VAR 0 3
84756: PPUSH
84757: LD_VAR 0 3
84761: PPUSH
84762: CALL_OW 257
84766: PPUSH
84767: CALL 83543 0 4
// end ;
84771: GO 84620
84773: POP
84774: POP
// end ;
84775: GO 84555
84777: POP
84778: POP
// end ;
84779: LD_VAR 0 1
84783: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84784: LD_INT 0
84786: PPUSH
84787: PPUSH
84788: PPUSH
84789: PPUSH
84790: PPUSH
84791: PPUSH
// if not mc_bases [ base ] then
84792: LD_EXP 36
84796: PUSH
84797: LD_VAR 0 1
84801: ARRAY
84802: NOT
84803: IFFALSE 84807
// exit ;
84805: GO 84989
// tmp := [ ] ;
84807: LD_ADDR_VAR 0 6
84811: PUSH
84812: EMPTY
84813: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84814: LD_ADDR_VAR 0 7
84818: PUSH
84819: LD_VAR 0 3
84823: PPUSH
84824: LD_INT 0
84826: PPUSH
84827: CALL_OW 517
84831: ST_TO_ADDR
// if not list then
84832: LD_VAR 0 7
84836: NOT
84837: IFFALSE 84841
// exit ;
84839: GO 84989
// for i = 1 to amount do
84841: LD_ADDR_VAR 0 5
84845: PUSH
84846: DOUBLE
84847: LD_INT 1
84849: DEC
84850: ST_TO_ADDR
84851: LD_VAR 0 2
84855: PUSH
84856: FOR_TO
84857: IFFALSE 84937
// begin x := rand ( 1 , list [ 1 ] ) ;
84859: LD_ADDR_VAR 0 8
84863: PUSH
84864: LD_INT 1
84866: PPUSH
84867: LD_VAR 0 7
84871: PUSH
84872: LD_INT 1
84874: ARRAY
84875: PPUSH
84876: CALL_OW 12
84880: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84881: LD_ADDR_VAR 0 6
84885: PUSH
84886: LD_VAR 0 6
84890: PPUSH
84891: LD_VAR 0 5
84895: PPUSH
84896: LD_VAR 0 7
84900: PUSH
84901: LD_INT 1
84903: ARRAY
84904: PUSH
84905: LD_VAR 0 8
84909: ARRAY
84910: PUSH
84911: LD_VAR 0 7
84915: PUSH
84916: LD_INT 2
84918: ARRAY
84919: PUSH
84920: LD_VAR 0 8
84924: ARRAY
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: PPUSH
84930: CALL_OW 1
84934: ST_TO_ADDR
// end ;
84935: GO 84856
84937: POP
84938: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84939: LD_ADDR_EXP 49
84943: PUSH
84944: LD_EXP 49
84948: PPUSH
84949: LD_VAR 0 1
84953: PPUSH
84954: LD_VAR 0 6
84958: PPUSH
84959: CALL_OW 1
84963: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84964: LD_ADDR_EXP 51
84968: PUSH
84969: LD_EXP 51
84973: PPUSH
84974: LD_VAR 0 1
84978: PPUSH
84979: LD_VAR 0 3
84983: PPUSH
84984: CALL_OW 1
84988: ST_TO_ADDR
// end ;
84989: LD_VAR 0 4
84993: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
84994: LD_INT 0
84996: PPUSH
// if not mc_bases [ base ] then
84997: LD_EXP 36
85001: PUSH
85002: LD_VAR 0 1
85006: ARRAY
85007: NOT
85008: IFFALSE 85012
// exit ;
85010: GO 85037
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85012: LD_ADDR_EXP 41
85016: PUSH
85017: LD_EXP 41
85021: PPUSH
85022: LD_VAR 0 1
85026: PPUSH
85027: LD_VAR 0 2
85031: PPUSH
85032: CALL_OW 1
85036: ST_TO_ADDR
// end ;
85037: LD_VAR 0 3
85041: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85042: LD_INT 0
85044: PPUSH
// if not mc_bases [ base ] then
85045: LD_EXP 36
85049: PUSH
85050: LD_VAR 0 1
85054: ARRAY
85055: NOT
85056: IFFALSE 85060
// exit ;
85058: GO 85097
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85060: LD_ADDR_EXP 41
85064: PUSH
85065: LD_EXP 41
85069: PPUSH
85070: LD_VAR 0 1
85074: PPUSH
85075: LD_EXP 41
85079: PUSH
85080: LD_VAR 0 1
85084: ARRAY
85085: PUSH
85086: LD_VAR 0 2
85090: UNION
85091: PPUSH
85092: CALL_OW 1
85096: ST_TO_ADDR
// end ;
85097: LD_VAR 0 3
85101: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85102: LD_INT 0
85104: PPUSH
// if not mc_bases [ base ] then
85105: LD_EXP 36
85109: PUSH
85110: LD_VAR 0 1
85114: ARRAY
85115: NOT
85116: IFFALSE 85120
// exit ;
85118: GO 85145
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85120: LD_ADDR_EXP 57
85124: PUSH
85125: LD_EXP 57
85129: PPUSH
85130: LD_VAR 0 1
85134: PPUSH
85135: LD_VAR 0 2
85139: PPUSH
85140: CALL_OW 1
85144: ST_TO_ADDR
// end ;
85145: LD_VAR 0 3
85149: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85150: LD_INT 0
85152: PPUSH
// if not mc_bases [ base ] then
85153: LD_EXP 36
85157: PUSH
85158: LD_VAR 0 1
85162: ARRAY
85163: NOT
85164: IFFALSE 85168
// exit ;
85166: GO 85205
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85168: LD_ADDR_EXP 57
85172: PUSH
85173: LD_EXP 57
85177: PPUSH
85178: LD_VAR 0 1
85182: PPUSH
85183: LD_EXP 57
85187: PUSH
85188: LD_VAR 0 1
85192: ARRAY
85193: PUSH
85194: LD_VAR 0 2
85198: ADD
85199: PPUSH
85200: CALL_OW 1
85204: ST_TO_ADDR
// end ;
85205: LD_VAR 0 3
85209: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85210: LD_INT 0
85212: PPUSH
// if not mc_bases [ base ] then
85213: LD_EXP 36
85217: PUSH
85218: LD_VAR 0 1
85222: ARRAY
85223: NOT
85224: IFFALSE 85228
// exit ;
85226: GO 85282
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85228: LD_ADDR_EXP 58
85232: PUSH
85233: LD_EXP 58
85237: PPUSH
85238: LD_VAR 0 1
85242: PPUSH
85243: LD_VAR 0 2
85247: PPUSH
85248: CALL_OW 1
85252: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85253: LD_ADDR_EXP 47
85257: PUSH
85258: LD_EXP 47
85262: PPUSH
85263: LD_VAR 0 1
85267: PPUSH
85268: LD_VAR 0 2
85272: PUSH
85273: LD_INT 0
85275: PLUS
85276: PPUSH
85277: CALL_OW 1
85281: ST_TO_ADDR
// end ;
85282: LD_VAR 0 3
85286: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85287: LD_INT 0
85289: PPUSH
// if not mc_bases [ base ] then
85290: LD_EXP 36
85294: PUSH
85295: LD_VAR 0 1
85299: ARRAY
85300: NOT
85301: IFFALSE 85305
// exit ;
85303: GO 85330
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85305: LD_ADDR_EXP 47
85309: PUSH
85310: LD_EXP 47
85314: PPUSH
85315: LD_VAR 0 1
85319: PPUSH
85320: LD_VAR 0 2
85324: PPUSH
85325: CALL_OW 1
85329: ST_TO_ADDR
// end ;
85330: LD_VAR 0 3
85334: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85335: LD_INT 0
85337: PPUSH
85338: PPUSH
85339: PPUSH
85340: PPUSH
// if not mc_bases [ base ] then
85341: LD_EXP 36
85345: PUSH
85346: LD_VAR 0 1
85350: ARRAY
85351: NOT
85352: IFFALSE 85356
// exit ;
85354: GO 85421
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85356: LD_ADDR_EXP 56
85360: PUSH
85361: LD_EXP 56
85365: PPUSH
85366: LD_VAR 0 1
85370: PUSH
85371: LD_EXP 56
85375: PUSH
85376: LD_VAR 0 1
85380: ARRAY
85381: PUSH
85382: LD_INT 1
85384: PLUS
85385: PUSH
85386: EMPTY
85387: LIST
85388: LIST
85389: PPUSH
85390: LD_VAR 0 1
85394: PUSH
85395: LD_VAR 0 2
85399: PUSH
85400: LD_VAR 0 3
85404: PUSH
85405: LD_VAR 0 4
85409: PUSH
85410: EMPTY
85411: LIST
85412: LIST
85413: LIST
85414: LIST
85415: PPUSH
85416: CALL 26051 0 3
85420: ST_TO_ADDR
// end ;
85421: LD_VAR 0 5
85425: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85426: LD_INT 0
85428: PPUSH
// if not mc_bases [ base ] then
85429: LD_EXP 36
85433: PUSH
85434: LD_VAR 0 1
85438: ARRAY
85439: NOT
85440: IFFALSE 85444
// exit ;
85442: GO 85469
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85444: LD_ADDR_EXP 73
85448: PUSH
85449: LD_EXP 73
85453: PPUSH
85454: LD_VAR 0 1
85458: PPUSH
85459: LD_VAR 0 2
85463: PPUSH
85464: CALL_OW 1
85468: ST_TO_ADDR
// end ;
85469: LD_VAR 0 3
85473: RET
// export function MC_GetMinesField ( base ) ; begin
85474: LD_INT 0
85476: PPUSH
// result := mc_mines [ base ] ;
85477: LD_ADDR_VAR 0 2
85481: PUSH
85482: LD_EXP 49
85486: PUSH
85487: LD_VAR 0 1
85491: ARRAY
85492: ST_TO_ADDR
// end ;
85493: LD_VAR 0 2
85497: RET
// export function MC_GetProduceList ( base ) ; begin
85498: LD_INT 0
85500: PPUSH
// result := mc_produce [ base ] ;
85501: LD_ADDR_VAR 0 2
85505: PUSH
85506: LD_EXP 57
85510: PUSH
85511: LD_VAR 0 1
85515: ARRAY
85516: ST_TO_ADDR
// end ;
85517: LD_VAR 0 2
85521: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85522: LD_INT 0
85524: PPUSH
85525: PPUSH
// if not mc_bases then
85526: LD_EXP 36
85530: NOT
85531: IFFALSE 85535
// exit ;
85533: GO 85600
// if mc_bases [ base ] then
85535: LD_EXP 36
85539: PUSH
85540: LD_VAR 0 1
85544: ARRAY
85545: IFFALSE 85600
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85547: LD_ADDR_VAR 0 3
85551: PUSH
85552: LD_EXP 36
85556: PUSH
85557: LD_VAR 0 1
85561: ARRAY
85562: PPUSH
85563: LD_INT 30
85565: PUSH
85566: LD_VAR 0 2
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PPUSH
85575: CALL_OW 72
85579: ST_TO_ADDR
// if result then
85580: LD_VAR 0 3
85584: IFFALSE 85600
// result := result [ 1 ] ;
85586: LD_ADDR_VAR 0 3
85590: PUSH
85591: LD_VAR 0 3
85595: PUSH
85596: LD_INT 1
85598: ARRAY
85599: ST_TO_ADDR
// end ; end ;
85600: LD_VAR 0 3
85604: RET
// export function MC_SetTame ( base , area ) ; begin
85605: LD_INT 0
85607: PPUSH
// if not mc_bases or not base then
85608: LD_EXP 36
85612: NOT
85613: PUSH
85614: LD_VAR 0 1
85618: NOT
85619: OR
85620: IFFALSE 85624
// exit ;
85622: GO 85649
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85624: LD_ADDR_EXP 64
85628: PUSH
85629: LD_EXP 64
85633: PPUSH
85634: LD_VAR 0 1
85638: PPUSH
85639: LD_VAR 0 2
85643: PPUSH
85644: CALL_OW 1
85648: ST_TO_ADDR
// end ;
85649: LD_VAR 0 3
85653: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85654: LD_INT 0
85656: PPUSH
85657: PPUSH
// if not mc_bases or not base then
85658: LD_EXP 36
85662: NOT
85663: PUSH
85664: LD_VAR 0 1
85668: NOT
85669: OR
85670: IFFALSE 85674
// exit ;
85672: GO 85776
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85674: LD_ADDR_VAR 0 4
85678: PUSH
85679: LD_EXP 36
85683: PUSH
85684: LD_VAR 0 1
85688: ARRAY
85689: PPUSH
85690: LD_INT 30
85692: PUSH
85693: LD_VAR 0 2
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: PPUSH
85702: CALL_OW 72
85706: ST_TO_ADDR
// if not tmp then
85707: LD_VAR 0 4
85711: NOT
85712: IFFALSE 85716
// exit ;
85714: GO 85776
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85716: LD_ADDR_EXP 68
85720: PUSH
85721: LD_EXP 68
85725: PPUSH
85726: LD_VAR 0 1
85730: PPUSH
85731: LD_EXP 68
85735: PUSH
85736: LD_VAR 0 1
85740: ARRAY
85741: PPUSH
85742: LD_EXP 68
85746: PUSH
85747: LD_VAR 0 1
85751: ARRAY
85752: PUSH
85753: LD_INT 1
85755: PLUS
85756: PPUSH
85757: LD_VAR 0 4
85761: PUSH
85762: LD_INT 1
85764: ARRAY
85765: PPUSH
85766: CALL_OW 2
85770: PPUSH
85771: CALL_OW 1
85775: ST_TO_ADDR
// end ;
85776: LD_VAR 0 3
85780: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85781: LD_INT 0
85783: PPUSH
85784: PPUSH
// if not mc_bases or not base or not kinds then
85785: LD_EXP 36
85789: NOT
85790: PUSH
85791: LD_VAR 0 1
85795: NOT
85796: OR
85797: PUSH
85798: LD_VAR 0 2
85802: NOT
85803: OR
85804: IFFALSE 85808
// exit ;
85806: GO 85869
// for i in kinds do
85808: LD_ADDR_VAR 0 4
85812: PUSH
85813: LD_VAR 0 2
85817: PUSH
85818: FOR_IN
85819: IFFALSE 85867
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85821: LD_ADDR_EXP 70
85825: PUSH
85826: LD_EXP 70
85830: PPUSH
85831: LD_VAR 0 1
85835: PUSH
85836: LD_EXP 70
85840: PUSH
85841: LD_VAR 0 1
85845: ARRAY
85846: PUSH
85847: LD_INT 1
85849: PLUS
85850: PUSH
85851: EMPTY
85852: LIST
85853: LIST
85854: PPUSH
85855: LD_VAR 0 4
85859: PPUSH
85860: CALL 26051 0 3
85864: ST_TO_ADDR
85865: GO 85818
85867: POP
85868: POP
// end ;
85869: LD_VAR 0 3
85873: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85874: LD_INT 0
85876: PPUSH
// if not mc_bases or not base or not areas then
85877: LD_EXP 36
85881: NOT
85882: PUSH
85883: LD_VAR 0 1
85887: NOT
85888: OR
85889: PUSH
85890: LD_VAR 0 2
85894: NOT
85895: OR
85896: IFFALSE 85900
// exit ;
85898: GO 85925
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85900: LD_ADDR_EXP 54
85904: PUSH
85905: LD_EXP 54
85909: PPUSH
85910: LD_VAR 0 1
85914: PPUSH
85915: LD_VAR 0 2
85919: PPUSH
85920: CALL_OW 1
85924: ST_TO_ADDR
// end ;
85925: LD_VAR 0 3
85929: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85930: LD_INT 0
85932: PPUSH
// if not mc_bases or not base or not teleports_exit then
85933: LD_EXP 36
85937: NOT
85938: PUSH
85939: LD_VAR 0 1
85943: NOT
85944: OR
85945: PUSH
85946: LD_VAR 0 2
85950: NOT
85951: OR
85952: IFFALSE 85956
// exit ;
85954: GO 85981
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85956: LD_ADDR_EXP 71
85960: PUSH
85961: LD_EXP 71
85965: PPUSH
85966: LD_VAR 0 1
85970: PPUSH
85971: LD_VAR 0 2
85975: PPUSH
85976: CALL_OW 1
85980: ST_TO_ADDR
// end ;
85981: LD_VAR 0 3
85985: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
85986: LD_INT 0
85988: PPUSH
85989: PPUSH
85990: PPUSH
// if not mc_bases or not base or not ext_list then
85991: LD_EXP 36
85995: NOT
85996: PUSH
85997: LD_VAR 0 1
86001: NOT
86002: OR
86003: PUSH
86004: LD_VAR 0 5
86008: NOT
86009: OR
86010: IFFALSE 86014
// exit ;
86012: GO 86187
// tmp := GetFacExtXYD ( x , y , d ) ;
86014: LD_ADDR_VAR 0 8
86018: PUSH
86019: LD_VAR 0 2
86023: PPUSH
86024: LD_VAR 0 3
86028: PPUSH
86029: LD_VAR 0 4
86033: PPUSH
86034: CALL 59423 0 3
86038: ST_TO_ADDR
// if not tmp then
86039: LD_VAR 0 8
86043: NOT
86044: IFFALSE 86048
// exit ;
86046: GO 86187
// for i in tmp do
86048: LD_ADDR_VAR 0 7
86052: PUSH
86053: LD_VAR 0 8
86057: PUSH
86058: FOR_IN
86059: IFFALSE 86185
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86061: LD_ADDR_EXP 41
86065: PUSH
86066: LD_EXP 41
86070: PPUSH
86071: LD_VAR 0 1
86075: PPUSH
86076: LD_EXP 41
86080: PUSH
86081: LD_VAR 0 1
86085: ARRAY
86086: PPUSH
86087: LD_EXP 41
86091: PUSH
86092: LD_VAR 0 1
86096: ARRAY
86097: PUSH
86098: LD_INT 1
86100: PLUS
86101: PPUSH
86102: LD_VAR 0 5
86106: PUSH
86107: LD_INT 1
86109: ARRAY
86110: PUSH
86111: LD_VAR 0 7
86115: PUSH
86116: LD_INT 1
86118: ARRAY
86119: PUSH
86120: LD_VAR 0 7
86124: PUSH
86125: LD_INT 2
86127: ARRAY
86128: PUSH
86129: LD_VAR 0 7
86133: PUSH
86134: LD_INT 3
86136: ARRAY
86137: PUSH
86138: EMPTY
86139: LIST
86140: LIST
86141: LIST
86142: LIST
86143: PPUSH
86144: CALL_OW 2
86148: PPUSH
86149: CALL_OW 1
86153: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86154: LD_ADDR_VAR 0 5
86158: PUSH
86159: LD_VAR 0 5
86163: PPUSH
86164: LD_INT 1
86166: PPUSH
86167: CALL_OW 3
86171: ST_TO_ADDR
// if not ext_list then
86172: LD_VAR 0 5
86176: NOT
86177: IFFALSE 86183
// exit ;
86179: POP
86180: POP
86181: GO 86187
// end ;
86183: GO 86058
86185: POP
86186: POP
// end ;
86187: LD_VAR 0 6
86191: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86192: LD_INT 0
86194: PPUSH
// if not mc_bases or not base or not weapon_list then
86195: LD_EXP 36
86199: NOT
86200: PUSH
86201: LD_VAR 0 1
86205: NOT
86206: OR
86207: PUSH
86208: LD_VAR 0 2
86212: NOT
86213: OR
86214: IFFALSE 86218
// exit ;
86216: GO 86243
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86218: LD_ADDR_EXP 75
86222: PUSH
86223: LD_EXP 75
86227: PPUSH
86228: LD_VAR 0 1
86232: PPUSH
86233: LD_VAR 0 2
86237: PPUSH
86238: CALL_OW 1
86242: ST_TO_ADDR
// end ;
86243: LD_VAR 0 3
86247: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86248: LD_INT 0
86250: PPUSH
// if not mc_bases or not base or not tech_list then
86251: LD_EXP 36
86255: NOT
86256: PUSH
86257: LD_VAR 0 1
86261: NOT
86262: OR
86263: PUSH
86264: LD_VAR 0 2
86268: NOT
86269: OR
86270: IFFALSE 86274
// exit ;
86272: GO 86299
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86274: LD_ADDR_EXP 63
86278: PUSH
86279: LD_EXP 63
86283: PPUSH
86284: LD_VAR 0 1
86288: PPUSH
86289: LD_VAR 0 2
86293: PPUSH
86294: CALL_OW 1
86298: ST_TO_ADDR
// end ;
86299: LD_VAR 0 3
86303: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86304: LD_INT 0
86306: PPUSH
// if not mc_bases or not parking_area or not base then
86307: LD_EXP 36
86311: NOT
86312: PUSH
86313: LD_VAR 0 2
86317: NOT
86318: OR
86319: PUSH
86320: LD_VAR 0 1
86324: NOT
86325: OR
86326: IFFALSE 86330
// exit ;
86328: GO 86355
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86330: LD_ADDR_EXP 60
86334: PUSH
86335: LD_EXP 60
86339: PPUSH
86340: LD_VAR 0 1
86344: PPUSH
86345: LD_VAR 0 2
86349: PPUSH
86350: CALL_OW 1
86354: ST_TO_ADDR
// end ;
86355: LD_VAR 0 3
86359: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86360: LD_INT 0
86362: PPUSH
// if not mc_bases or not base or not scan_area then
86363: LD_EXP 36
86367: NOT
86368: PUSH
86369: LD_VAR 0 1
86373: NOT
86374: OR
86375: PUSH
86376: LD_VAR 0 2
86380: NOT
86381: OR
86382: IFFALSE 86386
// exit ;
86384: GO 86411
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86386: LD_ADDR_EXP 61
86390: PUSH
86391: LD_EXP 61
86395: PPUSH
86396: LD_VAR 0 1
86400: PPUSH
86401: LD_VAR 0 2
86405: PPUSH
86406: CALL_OW 1
86410: ST_TO_ADDR
// end ;
86411: LD_VAR 0 3
86415: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86416: LD_INT 0
86418: PPUSH
86419: PPUSH
// if not mc_bases or not base then
86420: LD_EXP 36
86424: NOT
86425: PUSH
86426: LD_VAR 0 1
86430: NOT
86431: OR
86432: IFFALSE 86436
// exit ;
86434: GO 86500
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86436: LD_ADDR_VAR 0 3
86440: PUSH
86441: LD_INT 1
86443: PUSH
86444: LD_INT 2
86446: PUSH
86447: LD_INT 3
86449: PUSH
86450: LD_INT 4
86452: PUSH
86453: LD_INT 11
86455: PUSH
86456: EMPTY
86457: LIST
86458: LIST
86459: LIST
86460: LIST
86461: LIST
86462: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
86463: LD_ADDR_EXP 63
86467: PUSH
86468: LD_EXP 63
86472: PPUSH
86473: LD_VAR 0 1
86477: PPUSH
86478: LD_EXP 63
86482: PUSH
86483: LD_VAR 0 1
86487: ARRAY
86488: PUSH
86489: LD_VAR 0 3
86493: DIFF
86494: PPUSH
86495: CALL_OW 1
86499: ST_TO_ADDR
// end ;
86500: LD_VAR 0 2
86504: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86505: LD_INT 0
86507: PPUSH
// result := mc_vehicles [ base ] ;
86508: LD_ADDR_VAR 0 3
86512: PUSH
86513: LD_EXP 55
86517: PUSH
86518: LD_VAR 0 1
86522: ARRAY
86523: ST_TO_ADDR
// if onlyCombat then
86524: LD_VAR 0 2
86528: IFFALSE 86693
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86530: LD_ADDR_VAR 0 3
86534: PUSH
86535: LD_VAR 0 3
86539: PUSH
86540: LD_VAR 0 3
86544: PPUSH
86545: LD_INT 2
86547: PUSH
86548: LD_INT 34
86550: PUSH
86551: LD_INT 12
86553: PUSH
86554: EMPTY
86555: LIST
86556: LIST
86557: PUSH
86558: LD_INT 34
86560: PUSH
86561: LD_INT 51
86563: PUSH
86564: EMPTY
86565: LIST
86566: LIST
86567: PUSH
86568: LD_INT 34
86570: PUSH
86571: LD_EXP 30
86575: PUSH
86576: EMPTY
86577: LIST
86578: LIST
86579: PUSH
86580: LD_INT 34
86582: PUSH
86583: LD_INT 32
86585: PUSH
86586: EMPTY
86587: LIST
86588: LIST
86589: PUSH
86590: LD_INT 34
86592: PUSH
86593: LD_INT 13
86595: PUSH
86596: EMPTY
86597: LIST
86598: LIST
86599: PUSH
86600: LD_INT 34
86602: PUSH
86603: LD_INT 52
86605: PUSH
86606: EMPTY
86607: LIST
86608: LIST
86609: PUSH
86610: LD_INT 34
86612: PUSH
86613: LD_INT 14
86615: PUSH
86616: EMPTY
86617: LIST
86618: LIST
86619: PUSH
86620: LD_INT 34
86622: PUSH
86623: LD_INT 53
86625: PUSH
86626: EMPTY
86627: LIST
86628: LIST
86629: PUSH
86630: LD_INT 34
86632: PUSH
86633: LD_EXP 29
86637: PUSH
86638: EMPTY
86639: LIST
86640: LIST
86641: PUSH
86642: LD_INT 34
86644: PUSH
86645: LD_INT 31
86647: PUSH
86648: EMPTY
86649: LIST
86650: LIST
86651: PUSH
86652: LD_INT 34
86654: PUSH
86655: LD_INT 48
86657: PUSH
86658: EMPTY
86659: LIST
86660: LIST
86661: PUSH
86662: LD_INT 34
86664: PUSH
86665: LD_INT 8
86667: PUSH
86668: EMPTY
86669: LIST
86670: LIST
86671: PUSH
86672: EMPTY
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: LIST
86685: LIST
86686: PPUSH
86687: CALL_OW 72
86691: DIFF
86692: ST_TO_ADDR
// end ; end_of_file
86693: LD_VAR 0 3
86697: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86698: LD_INT 0
86700: PPUSH
86701: PPUSH
86702: PPUSH
// if not mc_bases or not skirmish then
86703: LD_EXP 36
86707: NOT
86708: PUSH
86709: LD_EXP 34
86713: NOT
86714: OR
86715: IFFALSE 86719
// exit ;
86717: GO 86884
// for i = 1 to mc_bases do
86719: LD_ADDR_VAR 0 4
86723: PUSH
86724: DOUBLE
86725: LD_INT 1
86727: DEC
86728: ST_TO_ADDR
86729: LD_EXP 36
86733: PUSH
86734: FOR_TO
86735: IFFALSE 86882
// begin if sci in mc_bases [ i ] then
86737: LD_VAR 0 2
86741: PUSH
86742: LD_EXP 36
86746: PUSH
86747: LD_VAR 0 4
86751: ARRAY
86752: IN
86753: IFFALSE 86880
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86755: LD_ADDR_EXP 65
86759: PUSH
86760: LD_EXP 65
86764: PPUSH
86765: LD_VAR 0 4
86769: PUSH
86770: LD_EXP 65
86774: PUSH
86775: LD_VAR 0 4
86779: ARRAY
86780: PUSH
86781: LD_INT 1
86783: PLUS
86784: PUSH
86785: EMPTY
86786: LIST
86787: LIST
86788: PPUSH
86789: LD_VAR 0 1
86793: PPUSH
86794: CALL 26051 0 3
86798: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86799: LD_ADDR_VAR 0 5
86803: PUSH
86804: LD_EXP 36
86808: PUSH
86809: LD_VAR 0 4
86813: ARRAY
86814: PPUSH
86815: LD_INT 2
86817: PUSH
86818: LD_INT 30
86820: PUSH
86821: LD_INT 0
86823: PUSH
86824: EMPTY
86825: LIST
86826: LIST
86827: PUSH
86828: LD_INT 30
86830: PUSH
86831: LD_INT 1
86833: PUSH
86834: EMPTY
86835: LIST
86836: LIST
86837: PUSH
86838: EMPTY
86839: LIST
86840: LIST
86841: LIST
86842: PPUSH
86843: CALL_OW 72
86847: PPUSH
86848: LD_VAR 0 1
86852: PPUSH
86853: CALL_OW 74
86857: ST_TO_ADDR
// if tmp then
86858: LD_VAR 0 5
86862: IFFALSE 86878
// ComStandNearbyBuilding ( ape , tmp ) ;
86864: LD_VAR 0 1
86868: PPUSH
86869: LD_VAR 0 5
86873: PPUSH
86874: CALL 20758 0 2
// break ;
86878: GO 86882
// end ; end ;
86880: GO 86734
86882: POP
86883: POP
// end ;
86884: LD_VAR 0 3
86888: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86889: LD_INT 0
86891: PPUSH
86892: PPUSH
86893: PPUSH
// if not mc_bases or not skirmish then
86894: LD_EXP 36
86898: NOT
86899: PUSH
86900: LD_EXP 34
86904: NOT
86905: OR
86906: IFFALSE 86910
// exit ;
86908: GO 86999
// for i = 1 to mc_bases do
86910: LD_ADDR_VAR 0 4
86914: PUSH
86915: DOUBLE
86916: LD_INT 1
86918: DEC
86919: ST_TO_ADDR
86920: LD_EXP 36
86924: PUSH
86925: FOR_TO
86926: IFFALSE 86997
// begin if building in mc_busy_turret_list [ i ] then
86928: LD_VAR 0 1
86932: PUSH
86933: LD_EXP 46
86937: PUSH
86938: LD_VAR 0 4
86942: ARRAY
86943: IN
86944: IFFALSE 86995
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86946: LD_ADDR_VAR 0 5
86950: PUSH
86951: LD_EXP 46
86955: PUSH
86956: LD_VAR 0 4
86960: ARRAY
86961: PUSH
86962: LD_VAR 0 1
86966: DIFF
86967: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86968: LD_ADDR_EXP 46
86972: PUSH
86973: LD_EXP 46
86977: PPUSH
86978: LD_VAR 0 4
86982: PPUSH
86983: LD_VAR 0 5
86987: PPUSH
86988: CALL_OW 1
86992: ST_TO_ADDR
// break ;
86993: GO 86997
// end ; end ;
86995: GO 86925
86997: POP
86998: POP
// end ;
86999: LD_VAR 0 3
87003: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87004: LD_INT 0
87006: PPUSH
87007: PPUSH
87008: PPUSH
// if not mc_bases or not skirmish then
87009: LD_EXP 36
87013: NOT
87014: PUSH
87015: LD_EXP 34
87019: NOT
87020: OR
87021: IFFALSE 87025
// exit ;
87023: GO 87224
// for i = 1 to mc_bases do
87025: LD_ADDR_VAR 0 5
87029: PUSH
87030: DOUBLE
87031: LD_INT 1
87033: DEC
87034: ST_TO_ADDR
87035: LD_EXP 36
87039: PUSH
87040: FOR_TO
87041: IFFALSE 87222
// if building in mc_bases [ i ] then
87043: LD_VAR 0 1
87047: PUSH
87048: LD_EXP 36
87052: PUSH
87053: LD_VAR 0 5
87057: ARRAY
87058: IN
87059: IFFALSE 87220
// begin tmp := mc_bases [ i ] diff building ;
87061: LD_ADDR_VAR 0 6
87065: PUSH
87066: LD_EXP 36
87070: PUSH
87071: LD_VAR 0 5
87075: ARRAY
87076: PUSH
87077: LD_VAR 0 1
87081: DIFF
87082: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87083: LD_ADDR_EXP 36
87087: PUSH
87088: LD_EXP 36
87092: PPUSH
87093: LD_VAR 0 5
87097: PPUSH
87098: LD_VAR 0 6
87102: PPUSH
87103: CALL_OW 1
87107: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87108: LD_VAR 0 1
87112: PUSH
87113: LD_EXP 44
87117: PUSH
87118: LD_VAR 0 5
87122: ARRAY
87123: IN
87124: IFFALSE 87163
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87126: LD_ADDR_EXP 44
87130: PUSH
87131: LD_EXP 44
87135: PPUSH
87136: LD_VAR 0 5
87140: PPUSH
87141: LD_EXP 44
87145: PUSH
87146: LD_VAR 0 5
87150: ARRAY
87151: PUSH
87152: LD_VAR 0 1
87156: DIFF
87157: PPUSH
87158: CALL_OW 1
87162: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87163: LD_VAR 0 1
87167: PUSH
87168: LD_EXP 45
87172: PUSH
87173: LD_VAR 0 5
87177: ARRAY
87178: IN
87179: IFFALSE 87218
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87181: LD_ADDR_EXP 45
87185: PUSH
87186: LD_EXP 45
87190: PPUSH
87191: LD_VAR 0 5
87195: PPUSH
87196: LD_EXP 45
87200: PUSH
87201: LD_VAR 0 5
87205: ARRAY
87206: PUSH
87207: LD_VAR 0 1
87211: DIFF
87212: PPUSH
87213: CALL_OW 1
87217: ST_TO_ADDR
// break ;
87218: GO 87222
// end ;
87220: GO 87040
87222: POP
87223: POP
// end ;
87224: LD_VAR 0 4
87228: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87229: LD_INT 0
87231: PPUSH
87232: PPUSH
87233: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87234: LD_EXP 36
87238: NOT
87239: PUSH
87240: LD_EXP 34
87244: NOT
87245: OR
87246: PUSH
87247: LD_VAR 0 3
87251: PUSH
87252: LD_EXP 62
87256: IN
87257: NOT
87258: OR
87259: IFFALSE 87263
// exit ;
87261: GO 87386
// for i = 1 to mc_vehicles do
87263: LD_ADDR_VAR 0 6
87267: PUSH
87268: DOUBLE
87269: LD_INT 1
87271: DEC
87272: ST_TO_ADDR
87273: LD_EXP 55
87277: PUSH
87278: FOR_TO
87279: IFFALSE 87384
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87281: LD_VAR 0 2
87285: PUSH
87286: LD_EXP 55
87290: PUSH
87291: LD_VAR 0 6
87295: ARRAY
87296: IN
87297: PUSH
87298: LD_VAR 0 1
87302: PUSH
87303: LD_EXP 55
87307: PUSH
87308: LD_VAR 0 6
87312: ARRAY
87313: IN
87314: OR
87315: IFFALSE 87382
// begin tmp := mc_vehicles [ i ] diff old ;
87317: LD_ADDR_VAR 0 7
87321: PUSH
87322: LD_EXP 55
87326: PUSH
87327: LD_VAR 0 6
87331: ARRAY
87332: PUSH
87333: LD_VAR 0 2
87337: DIFF
87338: ST_TO_ADDR
// tmp := tmp diff new ;
87339: LD_ADDR_VAR 0 7
87343: PUSH
87344: LD_VAR 0 7
87348: PUSH
87349: LD_VAR 0 1
87353: DIFF
87354: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87355: LD_ADDR_EXP 55
87359: PUSH
87360: LD_EXP 55
87364: PPUSH
87365: LD_VAR 0 6
87369: PPUSH
87370: LD_VAR 0 7
87374: PPUSH
87375: CALL_OW 1
87379: ST_TO_ADDR
// break ;
87380: GO 87384
// end ;
87382: GO 87278
87384: POP
87385: POP
// end ;
87386: LD_VAR 0 5
87390: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87391: LD_INT 0
87393: PPUSH
87394: PPUSH
87395: PPUSH
87396: PPUSH
// if not mc_bases or not skirmish then
87397: LD_EXP 36
87401: NOT
87402: PUSH
87403: LD_EXP 34
87407: NOT
87408: OR
87409: IFFALSE 87413
// exit ;
87411: GO 87790
// side := GetSide ( vehicle ) ;
87413: LD_ADDR_VAR 0 5
87417: PUSH
87418: LD_VAR 0 1
87422: PPUSH
87423: CALL_OW 255
87427: ST_TO_ADDR
// for i = 1 to mc_bases do
87428: LD_ADDR_VAR 0 4
87432: PUSH
87433: DOUBLE
87434: LD_INT 1
87436: DEC
87437: ST_TO_ADDR
87438: LD_EXP 36
87442: PUSH
87443: FOR_TO
87444: IFFALSE 87788
// begin if factory in mc_bases [ i ] then
87446: LD_VAR 0 2
87450: PUSH
87451: LD_EXP 36
87455: PUSH
87456: LD_VAR 0 4
87460: ARRAY
87461: IN
87462: IFFALSE 87786
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
87464: LD_EXP 58
87468: PUSH
87469: LD_VAR 0 4
87473: ARRAY
87474: PUSH
87475: LD_EXP 47
87479: PUSH
87480: LD_VAR 0 4
87484: ARRAY
87485: LESS
87486: PUSH
87487: LD_VAR 0 1
87491: PPUSH
87492: CALL_OW 264
87496: PUSH
87497: LD_INT 31
87499: PUSH
87500: LD_INT 32
87502: PUSH
87503: LD_INT 51
87505: PUSH
87506: LD_EXP 30
87510: PUSH
87511: LD_INT 12
87513: PUSH
87514: LD_INT 30
87516: PUSH
87517: LD_EXP 29
87521: PUSH
87522: LD_INT 11
87524: PUSH
87525: LD_INT 53
87527: PUSH
87528: LD_INT 14
87530: PUSH
87531: LD_EXP 33
87535: PUSH
87536: LD_INT 29
87538: PUSH
87539: LD_EXP 31
87543: PUSH
87544: LD_INT 13
87546: PUSH
87547: LD_INT 52
87549: PUSH
87550: LD_INT 48
87552: PUSH
87553: LD_INT 8
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: LIST
87560: LIST
87561: LIST
87562: LIST
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: LIST
87570: LIST
87571: LIST
87572: LIST
87573: LIST
87574: IN
87575: NOT
87576: AND
87577: IFFALSE 87625
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
87579: LD_ADDR_EXP 58
87583: PUSH
87584: LD_EXP 58
87588: PPUSH
87589: LD_VAR 0 4
87593: PUSH
87594: LD_EXP 58
87598: PUSH
87599: LD_VAR 0 4
87603: ARRAY
87604: PUSH
87605: LD_INT 1
87607: PLUS
87608: PUSH
87609: EMPTY
87610: LIST
87611: LIST
87612: PPUSH
87613: LD_VAR 0 1
87617: PPUSH
87618: CALL 26051 0 3
87622: ST_TO_ADDR
87623: GO 87669
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87625: LD_ADDR_EXP 55
87629: PUSH
87630: LD_EXP 55
87634: PPUSH
87635: LD_VAR 0 4
87639: PUSH
87640: LD_EXP 55
87644: PUSH
87645: LD_VAR 0 4
87649: ARRAY
87650: PUSH
87651: LD_INT 1
87653: PLUS
87654: PUSH
87655: EMPTY
87656: LIST
87657: LIST
87658: PPUSH
87659: LD_VAR 0 1
87663: PPUSH
87664: CALL 26051 0 3
87668: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
87669: LD_VAR 0 1
87673: PPUSH
87674: CALL_OW 263
87678: PUSH
87679: LD_INT 2
87681: EQUAL
87682: IFFALSE 87702
// begin repeat wait ( 0 0$1 ) ;
87684: LD_INT 35
87686: PPUSH
87687: CALL_OW 67
// until IsControledBy ( vehicle ) ;
87691: LD_VAR 0 1
87695: PPUSH
87696: CALL_OW 312
87700: IFFALSE 87684
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87702: LD_VAR 0 1
87706: PPUSH
87707: LD_EXP 60
87711: PUSH
87712: LD_VAR 0 4
87716: ARRAY
87717: PPUSH
87718: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
87722: LD_VAR 0 1
87726: PPUSH
87727: CALL_OW 263
87731: PUSH
87732: LD_INT 1
87734: NONEQUAL
87735: IFFALSE 87739
// break ;
87737: GO 87788
// repeat wait ( 0 0$1 ) ;
87739: LD_INT 35
87741: PPUSH
87742: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87746: LD_VAR 0 1
87750: PPUSH
87751: LD_EXP 60
87755: PUSH
87756: LD_VAR 0 4
87760: ARRAY
87761: PPUSH
87762: CALL_OW 308
87766: IFFALSE 87739
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87768: LD_VAR 0 1
87772: PPUSH
87773: CALL_OW 311
87777: PPUSH
87778: CALL_OW 121
// exit ;
87782: POP
87783: POP
87784: GO 87790
// end ; end ;
87786: GO 87443
87788: POP
87789: POP
// end ;
87790: LD_VAR 0 3
87794: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87795: LD_INT 0
87797: PPUSH
87798: PPUSH
87799: PPUSH
87800: PPUSH
// if not mc_bases or not skirmish then
87801: LD_EXP 36
87805: NOT
87806: PUSH
87807: LD_EXP 34
87811: NOT
87812: OR
87813: IFFALSE 87817
// exit ;
87815: GO 88170
// repeat wait ( 0 0$1 ) ;
87817: LD_INT 35
87819: PPUSH
87820: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87824: LD_VAR 0 2
87828: PPUSH
87829: LD_VAR 0 3
87833: PPUSH
87834: CALL_OW 284
87838: IFFALSE 87817
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87840: LD_VAR 0 2
87844: PPUSH
87845: LD_VAR 0 3
87849: PPUSH
87850: CALL_OW 283
87854: PUSH
87855: LD_INT 4
87857: EQUAL
87858: IFFALSE 87862
// exit ;
87860: GO 88170
// for i = 1 to mc_bases do
87862: LD_ADDR_VAR 0 7
87866: PUSH
87867: DOUBLE
87868: LD_INT 1
87870: DEC
87871: ST_TO_ADDR
87872: LD_EXP 36
87876: PUSH
87877: FOR_TO
87878: IFFALSE 88168
// begin if mc_crates_area [ i ] then
87880: LD_EXP 54
87884: PUSH
87885: LD_VAR 0 7
87889: ARRAY
87890: IFFALSE 88001
// for j in mc_crates_area [ i ] do
87892: LD_ADDR_VAR 0 8
87896: PUSH
87897: LD_EXP 54
87901: PUSH
87902: LD_VAR 0 7
87906: ARRAY
87907: PUSH
87908: FOR_IN
87909: IFFALSE 87999
// if InArea ( x , y , j ) then
87911: LD_VAR 0 2
87915: PPUSH
87916: LD_VAR 0 3
87920: PPUSH
87921: LD_VAR 0 8
87925: PPUSH
87926: CALL_OW 309
87930: IFFALSE 87997
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87932: LD_ADDR_EXP 52
87936: PUSH
87937: LD_EXP 52
87941: PPUSH
87942: LD_VAR 0 7
87946: PUSH
87947: LD_EXP 52
87951: PUSH
87952: LD_VAR 0 7
87956: ARRAY
87957: PUSH
87958: LD_INT 1
87960: PLUS
87961: PUSH
87962: EMPTY
87963: LIST
87964: LIST
87965: PPUSH
87966: LD_VAR 0 4
87970: PUSH
87971: LD_VAR 0 2
87975: PUSH
87976: LD_VAR 0 3
87980: PUSH
87981: EMPTY
87982: LIST
87983: LIST
87984: LIST
87985: PPUSH
87986: CALL 26051 0 3
87990: ST_TO_ADDR
// exit ;
87991: POP
87992: POP
87993: POP
87994: POP
87995: GO 88170
// end ;
87997: GO 87908
87999: POP
88000: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88001: LD_ADDR_VAR 0 9
88005: PUSH
88006: LD_EXP 36
88010: PUSH
88011: LD_VAR 0 7
88015: ARRAY
88016: PPUSH
88017: LD_INT 2
88019: PUSH
88020: LD_INT 30
88022: PUSH
88023: LD_INT 0
88025: PUSH
88026: EMPTY
88027: LIST
88028: LIST
88029: PUSH
88030: LD_INT 30
88032: PUSH
88033: LD_INT 1
88035: PUSH
88036: EMPTY
88037: LIST
88038: LIST
88039: PUSH
88040: EMPTY
88041: LIST
88042: LIST
88043: LIST
88044: PPUSH
88045: CALL_OW 72
88049: ST_TO_ADDR
// if not depot then
88050: LD_VAR 0 9
88054: NOT
88055: IFFALSE 88059
// continue ;
88057: GO 87877
// for j in depot do
88059: LD_ADDR_VAR 0 8
88063: PUSH
88064: LD_VAR 0 9
88068: PUSH
88069: FOR_IN
88070: IFFALSE 88164
// if GetDistUnitXY ( j , x , y ) < 30 then
88072: LD_VAR 0 8
88076: PPUSH
88077: LD_VAR 0 2
88081: PPUSH
88082: LD_VAR 0 3
88086: PPUSH
88087: CALL_OW 297
88091: PUSH
88092: LD_INT 30
88094: LESS
88095: IFFALSE 88162
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88097: LD_ADDR_EXP 52
88101: PUSH
88102: LD_EXP 52
88106: PPUSH
88107: LD_VAR 0 7
88111: PUSH
88112: LD_EXP 52
88116: PUSH
88117: LD_VAR 0 7
88121: ARRAY
88122: PUSH
88123: LD_INT 1
88125: PLUS
88126: PUSH
88127: EMPTY
88128: LIST
88129: LIST
88130: PPUSH
88131: LD_VAR 0 4
88135: PUSH
88136: LD_VAR 0 2
88140: PUSH
88141: LD_VAR 0 3
88145: PUSH
88146: EMPTY
88147: LIST
88148: LIST
88149: LIST
88150: PPUSH
88151: CALL 26051 0 3
88155: ST_TO_ADDR
// exit ;
88156: POP
88157: POP
88158: POP
88159: POP
88160: GO 88170
// end ;
88162: GO 88069
88164: POP
88165: POP
// end ;
88166: GO 87877
88168: POP
88169: POP
// end ;
88170: LD_VAR 0 6
88174: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88175: LD_INT 0
88177: PPUSH
88178: PPUSH
88179: PPUSH
88180: PPUSH
// if not mc_bases or not skirmish then
88181: LD_EXP 36
88185: NOT
88186: PUSH
88187: LD_EXP 34
88191: NOT
88192: OR
88193: IFFALSE 88197
// exit ;
88195: GO 88474
// side := GetSide ( lab ) ;
88197: LD_ADDR_VAR 0 4
88201: PUSH
88202: LD_VAR 0 2
88206: PPUSH
88207: CALL_OW 255
88211: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88212: LD_VAR 0 4
88216: PUSH
88217: LD_EXP 62
88221: IN
88222: NOT
88223: PUSH
88224: LD_EXP 63
88228: NOT
88229: OR
88230: PUSH
88231: LD_EXP 36
88235: NOT
88236: OR
88237: IFFALSE 88241
// exit ;
88239: GO 88474
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88241: LD_ADDR_EXP 63
88245: PUSH
88246: LD_EXP 63
88250: PPUSH
88251: LD_VAR 0 4
88255: PPUSH
88256: LD_EXP 63
88260: PUSH
88261: LD_VAR 0 4
88265: ARRAY
88266: PUSH
88267: LD_VAR 0 1
88271: DIFF
88272: PPUSH
88273: CALL_OW 1
88277: ST_TO_ADDR
// for i = 1 to mc_bases do
88278: LD_ADDR_VAR 0 5
88282: PUSH
88283: DOUBLE
88284: LD_INT 1
88286: DEC
88287: ST_TO_ADDR
88288: LD_EXP 36
88292: PUSH
88293: FOR_TO
88294: IFFALSE 88472
// begin if lab in mc_bases [ i ] then
88296: LD_VAR 0 2
88300: PUSH
88301: LD_EXP 36
88305: PUSH
88306: LD_VAR 0 5
88310: ARRAY
88311: IN
88312: IFFALSE 88470
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88314: LD_VAR 0 1
88318: PUSH
88319: LD_INT 11
88321: PUSH
88322: LD_INT 4
88324: PUSH
88325: LD_INT 3
88327: PUSH
88328: LD_INT 2
88330: PUSH
88331: EMPTY
88332: LIST
88333: LIST
88334: LIST
88335: LIST
88336: IN
88337: PUSH
88338: LD_EXP 66
88342: PUSH
88343: LD_VAR 0 5
88347: ARRAY
88348: AND
88349: IFFALSE 88470
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88351: LD_ADDR_VAR 0 6
88355: PUSH
88356: LD_EXP 66
88360: PUSH
88361: LD_VAR 0 5
88365: ARRAY
88366: PUSH
88367: LD_INT 1
88369: ARRAY
88370: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88371: LD_ADDR_EXP 66
88375: PUSH
88376: LD_EXP 66
88380: PPUSH
88381: LD_VAR 0 5
88385: PPUSH
88386: EMPTY
88387: PPUSH
88388: CALL_OW 1
88392: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88393: LD_VAR 0 6
88397: PPUSH
88398: LD_INT 0
88400: PPUSH
88401: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88405: LD_VAR 0 6
88409: PPUSH
88410: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88414: LD_ADDR_EXP 65
88418: PUSH
88419: LD_EXP 65
88423: PPUSH
88424: LD_VAR 0 5
88428: PPUSH
88429: LD_EXP 65
88433: PUSH
88434: LD_VAR 0 5
88438: ARRAY
88439: PPUSH
88440: LD_INT 1
88442: PPUSH
88443: LD_VAR 0 6
88447: PPUSH
88448: CALL_OW 2
88452: PPUSH
88453: CALL_OW 1
88457: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
88458: LD_VAR 0 5
88462: PPUSH
88463: LD_INT 112
88465: PPUSH
88466: CALL 66007 0 2
// end ; end ; end ;
88470: GO 88293
88472: POP
88473: POP
// end ;
88474: LD_VAR 0 3
88478: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
88479: LD_INT 0
88481: PPUSH
88482: PPUSH
88483: PPUSH
88484: PPUSH
88485: PPUSH
88486: PPUSH
88487: PPUSH
88488: PPUSH
// if not mc_bases or not skirmish then
88489: LD_EXP 36
88493: NOT
88494: PUSH
88495: LD_EXP 34
88499: NOT
88500: OR
88501: IFFALSE 88505
// exit ;
88503: GO 89597
// for i = 1 to mc_bases do
88505: LD_ADDR_VAR 0 3
88509: PUSH
88510: DOUBLE
88511: LD_INT 1
88513: DEC
88514: ST_TO_ADDR
88515: LD_EXP 36
88519: PUSH
88520: FOR_TO
88521: IFFALSE 89595
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88523: LD_VAR 0 1
88527: PUSH
88528: LD_EXP 36
88532: PUSH
88533: LD_VAR 0 3
88537: ARRAY
88538: IN
88539: PUSH
88540: LD_VAR 0 1
88544: PUSH
88545: LD_EXP 43
88549: PUSH
88550: LD_VAR 0 3
88554: ARRAY
88555: IN
88556: OR
88557: PUSH
88558: LD_VAR 0 1
88562: PUSH
88563: LD_EXP 58
88567: PUSH
88568: LD_VAR 0 3
88572: ARRAY
88573: IN
88574: OR
88575: PUSH
88576: LD_VAR 0 1
88580: PUSH
88581: LD_EXP 55
88585: PUSH
88586: LD_VAR 0 3
88590: ARRAY
88591: IN
88592: OR
88593: PUSH
88594: LD_VAR 0 1
88598: PUSH
88599: LD_EXP 65
88603: PUSH
88604: LD_VAR 0 3
88608: ARRAY
88609: IN
88610: OR
88611: PUSH
88612: LD_VAR 0 1
88616: PUSH
88617: LD_EXP 66
88621: PUSH
88622: LD_VAR 0 3
88626: ARRAY
88627: IN
88628: OR
88629: IFFALSE 89593
// begin if un in mc_ape [ i ] then
88631: LD_VAR 0 1
88635: PUSH
88636: LD_EXP 65
88640: PUSH
88641: LD_VAR 0 3
88645: ARRAY
88646: IN
88647: IFFALSE 88686
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88649: LD_ADDR_EXP 65
88653: PUSH
88654: LD_EXP 65
88658: PPUSH
88659: LD_VAR 0 3
88663: PPUSH
88664: LD_EXP 65
88668: PUSH
88669: LD_VAR 0 3
88673: ARRAY
88674: PUSH
88675: LD_VAR 0 1
88679: DIFF
88680: PPUSH
88681: CALL_OW 1
88685: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88686: LD_VAR 0 1
88690: PUSH
88691: LD_EXP 66
88695: PUSH
88696: LD_VAR 0 3
88700: ARRAY
88701: IN
88702: IFFALSE 88726
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88704: LD_ADDR_EXP 66
88708: PUSH
88709: LD_EXP 66
88713: PPUSH
88714: LD_VAR 0 3
88718: PPUSH
88719: EMPTY
88720: PPUSH
88721: CALL_OW 1
88725: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88726: LD_VAR 0 1
88730: PPUSH
88731: CALL_OW 247
88735: PUSH
88736: LD_INT 2
88738: EQUAL
88739: PUSH
88740: LD_VAR 0 1
88744: PPUSH
88745: CALL_OW 110
88749: PUSH
88750: LD_INT 20
88752: EQUAL
88753: PUSH
88754: LD_VAR 0 1
88758: PUSH
88759: LD_EXP 58
88763: PUSH
88764: LD_VAR 0 3
88768: ARRAY
88769: IN
88770: OR
88771: AND
88772: IFFALSE 88933
// begin if un in mc_defender [ i ] then
88774: LD_VAR 0 1
88778: PUSH
88779: LD_EXP 58
88783: PUSH
88784: LD_VAR 0 3
88788: ARRAY
88789: IN
88790: IFFALSE 88829
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88792: LD_ADDR_EXP 58
88796: PUSH
88797: LD_EXP 58
88801: PPUSH
88802: LD_VAR 0 3
88806: PPUSH
88807: LD_EXP 58
88811: PUSH
88812: LD_VAR 0 3
88816: ARRAY
88817: PUSH
88818: LD_VAR 0 1
88822: DIFF
88823: PPUSH
88824: CALL_OW 1
88828: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
88829: LD_ADDR_VAR 0 8
88833: PUSH
88834: LD_VAR 0 3
88838: PPUSH
88839: LD_INT 3
88841: PPUSH
88842: CALL 85522 0 2
88846: ST_TO_ADDR
// if fac then
88847: LD_VAR 0 8
88851: IFFALSE 88933
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88853: LD_ADDR_VAR 0 9
88857: PUSH
88858: LD_VAR 0 8
88862: PPUSH
88863: LD_VAR 0 1
88867: PPUSH
88868: CALL_OW 265
88872: PPUSH
88873: LD_VAR 0 1
88877: PPUSH
88878: CALL_OW 262
88882: PPUSH
88883: LD_VAR 0 1
88887: PPUSH
88888: CALL_OW 263
88892: PPUSH
88893: LD_VAR 0 1
88897: PPUSH
88898: CALL_OW 264
88902: PPUSH
88903: CALL 23644 0 5
88907: ST_TO_ADDR
// if components then
88908: LD_VAR 0 9
88912: IFFALSE 88931
// MC_InsertProduceList ( i , [ components ] ) ;
88914: LD_VAR 0 3
88918: PPUSH
88919: LD_VAR 0 9
88923: PUSH
88924: EMPTY
88925: LIST
88926: PPUSH
88927: CALL 85150 0 2
// break ;
88931: GO 89595
// end ; end ; if GetType ( un ) = unit_building then
88933: LD_VAR 0 1
88937: PPUSH
88938: CALL_OW 247
88942: PUSH
88943: LD_INT 3
88945: EQUAL
88946: IFFALSE 89261
// begin btype := GetBType ( un ) ;
88948: LD_ADDR_VAR 0 5
88952: PUSH
88953: LD_VAR 0 1
88957: PPUSH
88958: CALL_OW 266
88962: ST_TO_ADDR
// if btype = b_warehouse then
88963: LD_VAR 0 5
88967: PUSH
88968: LD_INT 1
88970: EQUAL
88971: IFFALSE 88989
// begin btype := b_depot ;
88973: LD_ADDR_VAR 0 5
88977: PUSH
88978: LD_INT 0
88980: ST_TO_ADDR
// pos := 1 ;
88981: LD_ADDR_VAR 0 6
88985: PUSH
88986: LD_INT 1
88988: ST_TO_ADDR
// end ; if btype = b_factory then
88989: LD_VAR 0 5
88993: PUSH
88994: LD_INT 3
88996: EQUAL
88997: IFFALSE 89015
// begin btype := b_workshop ;
88999: LD_ADDR_VAR 0 5
89003: PUSH
89004: LD_INT 2
89006: ST_TO_ADDR
// pos := 1 ;
89007: LD_ADDR_VAR 0 6
89011: PUSH
89012: LD_INT 1
89014: ST_TO_ADDR
// end ; if btype = b_barracks then
89015: LD_VAR 0 5
89019: PUSH
89020: LD_INT 5
89022: EQUAL
89023: IFFALSE 89033
// btype := b_armoury ;
89025: LD_ADDR_VAR 0 5
89029: PUSH
89030: LD_INT 4
89032: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89033: LD_VAR 0 5
89037: PUSH
89038: LD_INT 7
89040: PUSH
89041: LD_INT 8
89043: PUSH
89044: EMPTY
89045: LIST
89046: LIST
89047: IN
89048: IFFALSE 89058
// btype := b_lab ;
89050: LD_ADDR_VAR 0 5
89054: PUSH
89055: LD_INT 6
89057: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89058: LD_ADDR_EXP 41
89062: PUSH
89063: LD_EXP 41
89067: PPUSH
89068: LD_VAR 0 3
89072: PUSH
89073: LD_EXP 41
89077: PUSH
89078: LD_VAR 0 3
89082: ARRAY
89083: PUSH
89084: LD_INT 1
89086: PLUS
89087: PUSH
89088: EMPTY
89089: LIST
89090: LIST
89091: PPUSH
89092: LD_VAR 0 5
89096: PUSH
89097: LD_VAR 0 1
89101: PPUSH
89102: CALL_OW 250
89106: PUSH
89107: LD_VAR 0 1
89111: PPUSH
89112: CALL_OW 251
89116: PUSH
89117: LD_VAR 0 1
89121: PPUSH
89122: CALL_OW 254
89126: PUSH
89127: EMPTY
89128: LIST
89129: LIST
89130: LIST
89131: LIST
89132: PPUSH
89133: CALL 26051 0 3
89137: ST_TO_ADDR
// if pos = 1 then
89138: LD_VAR 0 6
89142: PUSH
89143: LD_INT 1
89145: EQUAL
89146: IFFALSE 89261
// begin tmp := mc_build_list [ i ] ;
89148: LD_ADDR_VAR 0 7
89152: PUSH
89153: LD_EXP 41
89157: PUSH
89158: LD_VAR 0 3
89162: ARRAY
89163: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89164: LD_VAR 0 7
89168: PPUSH
89169: LD_INT 2
89171: PUSH
89172: LD_INT 30
89174: PUSH
89175: LD_INT 0
89177: PUSH
89178: EMPTY
89179: LIST
89180: LIST
89181: PUSH
89182: LD_INT 30
89184: PUSH
89185: LD_INT 1
89187: PUSH
89188: EMPTY
89189: LIST
89190: LIST
89191: PUSH
89192: EMPTY
89193: LIST
89194: LIST
89195: LIST
89196: PPUSH
89197: CALL_OW 72
89201: IFFALSE 89211
// pos := 2 ;
89203: LD_ADDR_VAR 0 6
89207: PUSH
89208: LD_INT 2
89210: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89211: LD_ADDR_VAR 0 7
89215: PUSH
89216: LD_VAR 0 7
89220: PPUSH
89221: LD_VAR 0 6
89225: PPUSH
89226: LD_VAR 0 7
89230: PPUSH
89231: CALL 26377 0 3
89235: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89236: LD_ADDR_EXP 41
89240: PUSH
89241: LD_EXP 41
89245: PPUSH
89246: LD_VAR 0 3
89250: PPUSH
89251: LD_VAR 0 7
89255: PPUSH
89256: CALL_OW 1
89260: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89261: LD_VAR 0 1
89265: PUSH
89266: LD_EXP 36
89270: PUSH
89271: LD_VAR 0 3
89275: ARRAY
89276: IN
89277: IFFALSE 89316
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89279: LD_ADDR_EXP 36
89283: PUSH
89284: LD_EXP 36
89288: PPUSH
89289: LD_VAR 0 3
89293: PPUSH
89294: LD_EXP 36
89298: PUSH
89299: LD_VAR 0 3
89303: ARRAY
89304: PUSH
89305: LD_VAR 0 1
89309: DIFF
89310: PPUSH
89311: CALL_OW 1
89315: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89316: LD_VAR 0 1
89320: PUSH
89321: LD_EXP 43
89325: PUSH
89326: LD_VAR 0 3
89330: ARRAY
89331: IN
89332: IFFALSE 89371
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89334: LD_ADDR_EXP 43
89338: PUSH
89339: LD_EXP 43
89343: PPUSH
89344: LD_VAR 0 3
89348: PPUSH
89349: LD_EXP 43
89353: PUSH
89354: LD_VAR 0 3
89358: ARRAY
89359: PUSH
89360: LD_VAR 0 1
89364: DIFF
89365: PPUSH
89366: CALL_OW 1
89370: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89371: LD_VAR 0 1
89375: PUSH
89376: LD_EXP 55
89380: PUSH
89381: LD_VAR 0 3
89385: ARRAY
89386: IN
89387: IFFALSE 89426
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89389: LD_ADDR_EXP 55
89393: PUSH
89394: LD_EXP 55
89398: PPUSH
89399: LD_VAR 0 3
89403: PPUSH
89404: LD_EXP 55
89408: PUSH
89409: LD_VAR 0 3
89413: ARRAY
89414: PUSH
89415: LD_VAR 0 1
89419: DIFF
89420: PPUSH
89421: CALL_OW 1
89425: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89426: LD_VAR 0 1
89430: PUSH
89431: LD_EXP 58
89435: PUSH
89436: LD_VAR 0 3
89440: ARRAY
89441: IN
89442: IFFALSE 89481
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89444: LD_ADDR_EXP 58
89448: PUSH
89449: LD_EXP 58
89453: PPUSH
89454: LD_VAR 0 3
89458: PPUSH
89459: LD_EXP 58
89463: PUSH
89464: LD_VAR 0 3
89468: ARRAY
89469: PUSH
89470: LD_VAR 0 1
89474: DIFF
89475: PPUSH
89476: CALL_OW 1
89480: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89481: LD_VAR 0 1
89485: PUSH
89486: LD_EXP 45
89490: PUSH
89491: LD_VAR 0 3
89495: ARRAY
89496: IN
89497: IFFALSE 89536
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89499: LD_ADDR_EXP 45
89503: PUSH
89504: LD_EXP 45
89508: PPUSH
89509: LD_VAR 0 3
89513: PPUSH
89514: LD_EXP 45
89518: PUSH
89519: LD_VAR 0 3
89523: ARRAY
89524: PUSH
89525: LD_VAR 0 1
89529: DIFF
89530: PPUSH
89531: CALL_OW 1
89535: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89536: LD_VAR 0 1
89540: PUSH
89541: LD_EXP 44
89545: PUSH
89546: LD_VAR 0 3
89550: ARRAY
89551: IN
89552: IFFALSE 89591
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89554: LD_ADDR_EXP 44
89558: PUSH
89559: LD_EXP 44
89563: PPUSH
89564: LD_VAR 0 3
89568: PPUSH
89569: LD_EXP 44
89573: PUSH
89574: LD_VAR 0 3
89578: ARRAY
89579: PUSH
89580: LD_VAR 0 1
89584: DIFF
89585: PPUSH
89586: CALL_OW 1
89590: ST_TO_ADDR
// end ; break ;
89591: GO 89595
// end ;
89593: GO 88520
89595: POP
89596: POP
// end ;
89597: LD_VAR 0 2
89601: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89602: LD_INT 0
89604: PPUSH
89605: PPUSH
89606: PPUSH
// if not mc_bases or not skirmish then
89607: LD_EXP 36
89611: NOT
89612: PUSH
89613: LD_EXP 34
89617: NOT
89618: OR
89619: IFFALSE 89623
// exit ;
89621: GO 89838
// for i = 1 to mc_bases do
89623: LD_ADDR_VAR 0 3
89627: PUSH
89628: DOUBLE
89629: LD_INT 1
89631: DEC
89632: ST_TO_ADDR
89633: LD_EXP 36
89637: PUSH
89638: FOR_TO
89639: IFFALSE 89836
// begin if building in mc_construct_list [ i ] then
89641: LD_VAR 0 1
89645: PUSH
89646: LD_EXP 43
89650: PUSH
89651: LD_VAR 0 3
89655: ARRAY
89656: IN
89657: IFFALSE 89834
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89659: LD_ADDR_EXP 43
89663: PUSH
89664: LD_EXP 43
89668: PPUSH
89669: LD_VAR 0 3
89673: PPUSH
89674: LD_EXP 43
89678: PUSH
89679: LD_VAR 0 3
89683: ARRAY
89684: PUSH
89685: LD_VAR 0 1
89689: DIFF
89690: PPUSH
89691: CALL_OW 1
89695: ST_TO_ADDR
// if building in mc_lab [ i ] then
89696: LD_VAR 0 1
89700: PUSH
89701: LD_EXP 69
89705: PUSH
89706: LD_VAR 0 3
89710: ARRAY
89711: IN
89712: IFFALSE 89767
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89714: LD_ADDR_EXP 70
89718: PUSH
89719: LD_EXP 70
89723: PPUSH
89724: LD_VAR 0 3
89728: PPUSH
89729: LD_EXP 70
89733: PUSH
89734: LD_VAR 0 3
89738: ARRAY
89739: PPUSH
89740: LD_INT 1
89742: PPUSH
89743: LD_EXP 70
89747: PUSH
89748: LD_VAR 0 3
89752: ARRAY
89753: PPUSH
89754: LD_INT 0
89756: PPUSH
89757: CALL 25469 0 4
89761: PPUSH
89762: CALL_OW 1
89766: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89767: LD_VAR 0 1
89771: PUSH
89772: LD_EXP 36
89776: PUSH
89777: LD_VAR 0 3
89781: ARRAY
89782: IN
89783: NOT
89784: IFFALSE 89830
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89786: LD_ADDR_EXP 36
89790: PUSH
89791: LD_EXP 36
89795: PPUSH
89796: LD_VAR 0 3
89800: PUSH
89801: LD_EXP 36
89805: PUSH
89806: LD_VAR 0 3
89810: ARRAY
89811: PUSH
89812: LD_INT 1
89814: PLUS
89815: PUSH
89816: EMPTY
89817: LIST
89818: LIST
89819: PPUSH
89820: LD_VAR 0 1
89824: PPUSH
89825: CALL 26051 0 3
89829: ST_TO_ADDR
// exit ;
89830: POP
89831: POP
89832: GO 89838
// end ; end ;
89834: GO 89638
89836: POP
89837: POP
// end ;
89838: LD_VAR 0 2
89842: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89843: LD_INT 0
89845: PPUSH
89846: PPUSH
89847: PPUSH
89848: PPUSH
89849: PPUSH
89850: PPUSH
89851: PPUSH
// if not mc_bases or not skirmish then
89852: LD_EXP 36
89856: NOT
89857: PUSH
89858: LD_EXP 34
89862: NOT
89863: OR
89864: IFFALSE 89868
// exit ;
89866: GO 90529
// for i = 1 to mc_bases do
89868: LD_ADDR_VAR 0 3
89872: PUSH
89873: DOUBLE
89874: LD_INT 1
89876: DEC
89877: ST_TO_ADDR
89878: LD_EXP 36
89882: PUSH
89883: FOR_TO
89884: IFFALSE 90527
// begin if building in mc_construct_list [ i ] then
89886: LD_VAR 0 1
89890: PUSH
89891: LD_EXP 43
89895: PUSH
89896: LD_VAR 0 3
89900: ARRAY
89901: IN
89902: IFFALSE 90525
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89904: LD_ADDR_EXP 43
89908: PUSH
89909: LD_EXP 43
89913: PPUSH
89914: LD_VAR 0 3
89918: PPUSH
89919: LD_EXP 43
89923: PUSH
89924: LD_VAR 0 3
89928: ARRAY
89929: PUSH
89930: LD_VAR 0 1
89934: DIFF
89935: PPUSH
89936: CALL_OW 1
89940: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89941: LD_ADDR_EXP 36
89945: PUSH
89946: LD_EXP 36
89950: PPUSH
89951: LD_VAR 0 3
89955: PUSH
89956: LD_EXP 36
89960: PUSH
89961: LD_VAR 0 3
89965: ARRAY
89966: PUSH
89967: LD_INT 1
89969: PLUS
89970: PUSH
89971: EMPTY
89972: LIST
89973: LIST
89974: PPUSH
89975: LD_VAR 0 1
89979: PPUSH
89980: CALL 26051 0 3
89984: ST_TO_ADDR
// btype := GetBType ( building ) ;
89985: LD_ADDR_VAR 0 5
89989: PUSH
89990: LD_VAR 0 1
89994: PPUSH
89995: CALL_OW 266
89999: ST_TO_ADDR
// side := GetSide ( building ) ;
90000: LD_ADDR_VAR 0 8
90004: PUSH
90005: LD_VAR 0 1
90009: PPUSH
90010: CALL_OW 255
90014: ST_TO_ADDR
// if btype = b_lab then
90015: LD_VAR 0 5
90019: PUSH
90020: LD_INT 6
90022: EQUAL
90023: IFFALSE 90073
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90025: LD_ADDR_EXP 69
90029: PUSH
90030: LD_EXP 69
90034: PPUSH
90035: LD_VAR 0 3
90039: PUSH
90040: LD_EXP 69
90044: PUSH
90045: LD_VAR 0 3
90049: ARRAY
90050: PUSH
90051: LD_INT 1
90053: PLUS
90054: PUSH
90055: EMPTY
90056: LIST
90057: LIST
90058: PPUSH
90059: LD_VAR 0 1
90063: PPUSH
90064: CALL 26051 0 3
90068: ST_TO_ADDR
// exit ;
90069: POP
90070: POP
90071: GO 90529
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90073: LD_VAR 0 5
90077: PUSH
90078: LD_INT 0
90080: PUSH
90081: LD_INT 2
90083: PUSH
90084: LD_INT 4
90086: PUSH
90087: EMPTY
90088: LIST
90089: LIST
90090: LIST
90091: IN
90092: IFFALSE 90216
// begin if btype = b_armoury then
90094: LD_VAR 0 5
90098: PUSH
90099: LD_INT 4
90101: EQUAL
90102: IFFALSE 90112
// btype := b_barracks ;
90104: LD_ADDR_VAR 0 5
90108: PUSH
90109: LD_INT 5
90111: ST_TO_ADDR
// if btype = b_depot then
90112: LD_VAR 0 5
90116: PUSH
90117: LD_INT 0
90119: EQUAL
90120: IFFALSE 90130
// btype := b_warehouse ;
90122: LD_ADDR_VAR 0 5
90126: PUSH
90127: LD_INT 1
90129: ST_TO_ADDR
// if btype = b_workshop then
90130: LD_VAR 0 5
90134: PUSH
90135: LD_INT 2
90137: EQUAL
90138: IFFALSE 90148
// btype := b_factory ;
90140: LD_ADDR_VAR 0 5
90144: PUSH
90145: LD_INT 3
90147: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90148: LD_VAR 0 5
90152: PPUSH
90153: LD_VAR 0 8
90157: PPUSH
90158: CALL_OW 323
90162: PUSH
90163: LD_INT 1
90165: EQUAL
90166: IFFALSE 90212
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90168: LD_ADDR_EXP 68
90172: PUSH
90173: LD_EXP 68
90177: PPUSH
90178: LD_VAR 0 3
90182: PUSH
90183: LD_EXP 68
90187: PUSH
90188: LD_VAR 0 3
90192: ARRAY
90193: PUSH
90194: LD_INT 1
90196: PLUS
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: PPUSH
90202: LD_VAR 0 1
90206: PPUSH
90207: CALL 26051 0 3
90211: ST_TO_ADDR
// exit ;
90212: POP
90213: POP
90214: GO 90529
// end ; if btype in [ b_bunker , b_turret ] then
90216: LD_VAR 0 5
90220: PUSH
90221: LD_INT 32
90223: PUSH
90224: LD_INT 33
90226: PUSH
90227: EMPTY
90228: LIST
90229: LIST
90230: IN
90231: IFFALSE 90521
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90233: LD_ADDR_EXP 44
90237: PUSH
90238: LD_EXP 44
90242: PPUSH
90243: LD_VAR 0 3
90247: PUSH
90248: LD_EXP 44
90252: PUSH
90253: LD_VAR 0 3
90257: ARRAY
90258: PUSH
90259: LD_INT 1
90261: PLUS
90262: PUSH
90263: EMPTY
90264: LIST
90265: LIST
90266: PPUSH
90267: LD_VAR 0 1
90271: PPUSH
90272: CALL 26051 0 3
90276: ST_TO_ADDR
// if btype = b_bunker then
90277: LD_VAR 0 5
90281: PUSH
90282: LD_INT 32
90284: EQUAL
90285: IFFALSE 90521
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90287: LD_ADDR_EXP 45
90291: PUSH
90292: LD_EXP 45
90296: PPUSH
90297: LD_VAR 0 3
90301: PUSH
90302: LD_EXP 45
90306: PUSH
90307: LD_VAR 0 3
90311: ARRAY
90312: PUSH
90313: LD_INT 1
90315: PLUS
90316: PUSH
90317: EMPTY
90318: LIST
90319: LIST
90320: PPUSH
90321: LD_VAR 0 1
90325: PPUSH
90326: CALL 26051 0 3
90330: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90331: LD_ADDR_VAR 0 6
90335: PUSH
90336: LD_EXP 36
90340: PUSH
90341: LD_VAR 0 3
90345: ARRAY
90346: PPUSH
90347: LD_INT 25
90349: PUSH
90350: LD_INT 1
90352: PUSH
90353: EMPTY
90354: LIST
90355: LIST
90356: PUSH
90357: LD_INT 3
90359: PUSH
90360: LD_INT 54
90362: PUSH
90363: EMPTY
90364: LIST
90365: PUSH
90366: EMPTY
90367: LIST
90368: LIST
90369: PUSH
90370: EMPTY
90371: LIST
90372: LIST
90373: PPUSH
90374: CALL_OW 72
90378: ST_TO_ADDR
// if tmp then
90379: LD_VAR 0 6
90383: IFFALSE 90389
// exit ;
90385: POP
90386: POP
90387: GO 90529
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90389: LD_ADDR_VAR 0 6
90393: PUSH
90394: LD_EXP 36
90398: PUSH
90399: LD_VAR 0 3
90403: ARRAY
90404: PPUSH
90405: LD_INT 2
90407: PUSH
90408: LD_INT 30
90410: PUSH
90411: LD_INT 4
90413: PUSH
90414: EMPTY
90415: LIST
90416: LIST
90417: PUSH
90418: LD_INT 30
90420: PUSH
90421: LD_INT 5
90423: PUSH
90424: EMPTY
90425: LIST
90426: LIST
90427: PUSH
90428: EMPTY
90429: LIST
90430: LIST
90431: LIST
90432: PPUSH
90433: CALL_OW 72
90437: ST_TO_ADDR
// if not tmp then
90438: LD_VAR 0 6
90442: NOT
90443: IFFALSE 90449
// exit ;
90445: POP
90446: POP
90447: GO 90529
// for j in tmp do
90449: LD_ADDR_VAR 0 4
90453: PUSH
90454: LD_VAR 0 6
90458: PUSH
90459: FOR_IN
90460: IFFALSE 90519
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90462: LD_ADDR_VAR 0 7
90466: PUSH
90467: LD_VAR 0 4
90471: PPUSH
90472: CALL_OW 313
90476: PPUSH
90477: LD_INT 25
90479: PUSH
90480: LD_INT 1
90482: PUSH
90483: EMPTY
90484: LIST
90485: LIST
90486: PPUSH
90487: CALL_OW 72
90491: ST_TO_ADDR
// if units then
90492: LD_VAR 0 7
90496: IFFALSE 90517
// begin ComExitBuilding ( units [ 1 ] ) ;
90498: LD_VAR 0 7
90502: PUSH
90503: LD_INT 1
90505: ARRAY
90506: PPUSH
90507: CALL_OW 122
// exit ;
90511: POP
90512: POP
90513: POP
90514: POP
90515: GO 90529
// end ; end ;
90517: GO 90459
90519: POP
90520: POP
// end ; end ; exit ;
90521: POP
90522: POP
90523: GO 90529
// end ; end ;
90525: GO 89883
90527: POP
90528: POP
// end ;
90529: LD_VAR 0 2
90533: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90534: LD_INT 0
90536: PPUSH
90537: PPUSH
90538: PPUSH
90539: PPUSH
90540: PPUSH
90541: PPUSH
90542: PPUSH
// if not mc_bases or not skirmish then
90543: LD_EXP 36
90547: NOT
90548: PUSH
90549: LD_EXP 34
90553: NOT
90554: OR
90555: IFFALSE 90559
// exit ;
90557: GO 90790
// btype := GetBType ( building ) ;
90559: LD_ADDR_VAR 0 6
90563: PUSH
90564: LD_VAR 0 1
90568: PPUSH
90569: CALL_OW 266
90573: ST_TO_ADDR
// x := GetX ( building ) ;
90574: LD_ADDR_VAR 0 7
90578: PUSH
90579: LD_VAR 0 1
90583: PPUSH
90584: CALL_OW 250
90588: ST_TO_ADDR
// y := GetY ( building ) ;
90589: LD_ADDR_VAR 0 8
90593: PUSH
90594: LD_VAR 0 1
90598: PPUSH
90599: CALL_OW 251
90603: ST_TO_ADDR
// d := GetDir ( building ) ;
90604: LD_ADDR_VAR 0 9
90608: PUSH
90609: LD_VAR 0 1
90613: PPUSH
90614: CALL_OW 254
90618: ST_TO_ADDR
// for i = 1 to mc_bases do
90619: LD_ADDR_VAR 0 4
90623: PUSH
90624: DOUBLE
90625: LD_INT 1
90627: DEC
90628: ST_TO_ADDR
90629: LD_EXP 36
90633: PUSH
90634: FOR_TO
90635: IFFALSE 90788
// begin if not mc_build_list [ i ] then
90637: LD_EXP 41
90641: PUSH
90642: LD_VAR 0 4
90646: ARRAY
90647: NOT
90648: IFFALSE 90652
// continue ;
90650: GO 90634
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90652: LD_VAR 0 6
90656: PUSH
90657: LD_VAR 0 7
90661: PUSH
90662: LD_VAR 0 8
90666: PUSH
90667: LD_VAR 0 9
90671: PUSH
90672: EMPTY
90673: LIST
90674: LIST
90675: LIST
90676: LIST
90677: PPUSH
90678: LD_EXP 41
90682: PUSH
90683: LD_VAR 0 4
90687: ARRAY
90688: PUSH
90689: LD_INT 1
90691: ARRAY
90692: PPUSH
90693: CALL 32220 0 2
90697: IFFALSE 90786
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90699: LD_ADDR_EXP 41
90703: PUSH
90704: LD_EXP 41
90708: PPUSH
90709: LD_VAR 0 4
90713: PPUSH
90714: LD_EXP 41
90718: PUSH
90719: LD_VAR 0 4
90723: ARRAY
90724: PPUSH
90725: LD_INT 1
90727: PPUSH
90728: CALL_OW 3
90732: PPUSH
90733: CALL_OW 1
90737: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90738: LD_ADDR_EXP 43
90742: PUSH
90743: LD_EXP 43
90747: PPUSH
90748: LD_VAR 0 4
90752: PUSH
90753: LD_EXP 43
90757: PUSH
90758: LD_VAR 0 4
90762: ARRAY
90763: PUSH
90764: LD_INT 1
90766: PLUS
90767: PUSH
90768: EMPTY
90769: LIST
90770: LIST
90771: PPUSH
90772: LD_VAR 0 1
90776: PPUSH
90777: CALL 26051 0 3
90781: ST_TO_ADDR
// exit ;
90782: POP
90783: POP
90784: GO 90790
// end ; end ;
90786: GO 90634
90788: POP
90789: POP
// end ;
90790: LD_VAR 0 3
90794: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90795: LD_INT 0
90797: PPUSH
90798: PPUSH
90799: PPUSH
// if not mc_bases or not skirmish then
90800: LD_EXP 36
90804: NOT
90805: PUSH
90806: LD_EXP 34
90810: NOT
90811: OR
90812: IFFALSE 90816
// exit ;
90814: GO 91006
// for i = 1 to mc_bases do
90816: LD_ADDR_VAR 0 4
90820: PUSH
90821: DOUBLE
90822: LD_INT 1
90824: DEC
90825: ST_TO_ADDR
90826: LD_EXP 36
90830: PUSH
90831: FOR_TO
90832: IFFALSE 90919
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90834: LD_VAR 0 1
90838: PUSH
90839: LD_EXP 44
90843: PUSH
90844: LD_VAR 0 4
90848: ARRAY
90849: IN
90850: PUSH
90851: LD_VAR 0 1
90855: PUSH
90856: LD_EXP 45
90860: PUSH
90861: LD_VAR 0 4
90865: ARRAY
90866: IN
90867: NOT
90868: AND
90869: IFFALSE 90917
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90871: LD_ADDR_EXP 45
90875: PUSH
90876: LD_EXP 45
90880: PPUSH
90881: LD_VAR 0 4
90885: PUSH
90886: LD_EXP 45
90890: PUSH
90891: LD_VAR 0 4
90895: ARRAY
90896: PUSH
90897: LD_INT 1
90899: PLUS
90900: PUSH
90901: EMPTY
90902: LIST
90903: LIST
90904: PPUSH
90905: LD_VAR 0 1
90909: PPUSH
90910: CALL 26051 0 3
90914: ST_TO_ADDR
// break ;
90915: GO 90919
// end ; end ;
90917: GO 90831
90919: POP
90920: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90921: LD_VAR 0 1
90925: PPUSH
90926: CALL_OW 257
90930: PUSH
90931: LD_EXP 62
90935: IN
90936: PUSH
90937: LD_VAR 0 1
90941: PPUSH
90942: CALL_OW 266
90946: PUSH
90947: LD_INT 5
90949: EQUAL
90950: AND
90951: PUSH
90952: LD_VAR 0 2
90956: PPUSH
90957: CALL_OW 110
90961: PUSH
90962: LD_INT 18
90964: NONEQUAL
90965: AND
90966: IFFALSE 91006
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90968: LD_VAR 0 2
90972: PPUSH
90973: CALL_OW 257
90977: PUSH
90978: LD_INT 5
90980: PUSH
90981: LD_INT 8
90983: PUSH
90984: LD_INT 9
90986: PUSH
90987: EMPTY
90988: LIST
90989: LIST
90990: LIST
90991: IN
90992: IFFALSE 91006
// SetClass ( unit , 1 ) ;
90994: LD_VAR 0 2
90998: PPUSH
90999: LD_INT 1
91001: PPUSH
91002: CALL_OW 336
// end ;
91006: LD_VAR 0 3
91010: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91011: LD_INT 0
91013: PPUSH
91014: PPUSH
// if not mc_bases or not skirmish then
91015: LD_EXP 36
91019: NOT
91020: PUSH
91021: LD_EXP 34
91025: NOT
91026: OR
91027: IFFALSE 91031
// exit ;
91029: GO 91147
// if GetLives ( abandoned_vehicle ) > 250 then
91031: LD_VAR 0 2
91035: PPUSH
91036: CALL_OW 256
91040: PUSH
91041: LD_INT 250
91043: GREATER
91044: IFFALSE 91048
// exit ;
91046: GO 91147
// for i = 1 to mc_bases do
91048: LD_ADDR_VAR 0 6
91052: PUSH
91053: DOUBLE
91054: LD_INT 1
91056: DEC
91057: ST_TO_ADDR
91058: LD_EXP 36
91062: PUSH
91063: FOR_TO
91064: IFFALSE 91145
// begin if driver in mc_bases [ i ] then
91066: LD_VAR 0 1
91070: PUSH
91071: LD_EXP 36
91075: PUSH
91076: LD_VAR 0 6
91080: ARRAY
91081: IN
91082: IFFALSE 91143
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91084: LD_VAR 0 1
91088: PPUSH
91089: LD_EXP 36
91093: PUSH
91094: LD_VAR 0 6
91098: ARRAY
91099: PPUSH
91100: LD_INT 2
91102: PUSH
91103: LD_INT 30
91105: PUSH
91106: LD_INT 0
91108: PUSH
91109: EMPTY
91110: LIST
91111: LIST
91112: PUSH
91113: LD_INT 30
91115: PUSH
91116: LD_INT 1
91118: PUSH
91119: EMPTY
91120: LIST
91121: LIST
91122: PUSH
91123: EMPTY
91124: LIST
91125: LIST
91126: LIST
91127: PPUSH
91128: CALL_OW 72
91132: PUSH
91133: LD_INT 1
91135: ARRAY
91136: PPUSH
91137: CALL_OW 112
// break ;
91141: GO 91145
// end ; end ;
91143: GO 91063
91145: POP
91146: POP
// end ;
91147: LD_VAR 0 5
91151: RET
