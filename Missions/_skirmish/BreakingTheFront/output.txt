// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 55930 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 55930 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 55930 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 55930 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1406
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7606 0 0
// PrepareLegion ;
1338: CALL 5540 0 0
// PrepareRussians ;
1342: CALL 2506 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8849 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53235 0 9
// MC_Start ;
1394: CALL 61760 0 0
// SetAdditionalRussianForces ;
1398: CALL 7275 0 0
// Action ;
1402: CALL 11206 0 0
// end ; end ;
1406: LD_VAR 0 1
1410: RET
// export function CustomInitMacro ; begin
1411: LD_INT 0
1413: PPUSH
// if GameType <> 1 then
1414: LD_EXP 2
1418: PUSH
1419: LD_INT 1
1421: NONEQUAL
1422: IFFALSE 1426
// exit ;
1424: GO 2501
// MC_SetScanArea ( mc_amer , amerBase ) ;
1426: LD_EXP 5
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL 85088 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 4
1445: PPUSH
1446: CALL 85032 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1450: LD_EXP 5
1454: PPUSH
1455: LD_INT 11
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 7
1463: PUSH
1464: LD_INT 9
1466: PUSH
1467: LD_INT 10
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL 84920 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1481: LD_EXP 5
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL 84602 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1493: LD_EXP 5
1497: PPUSH
1498: LD_INT 3
1500: PPUSH
1501: CALL 84333 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1505: LD_EXP 5
1509: PPUSH
1510: LD_INT 4
1512: PPUSH
1513: CALL 83952 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1517: LD_EXP 5
1521: PPUSH
1522: LD_INT 3
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 2
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 2
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL 83767 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1604: LD_EXP 5
1608: PPUSH
1609: LD_INT 33
1611: PUSH
1612: LD_INT 114
1614: PUSH
1615: LD_INT 16
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 32
1629: PUSH
1630: LD_INT 110
1632: PUSH
1633: LD_INT 12
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL 83659 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 10
1660: PUSH
1661: LD_INT 15
1663: PUSH
1664: LD_INT 12
1666: PUSH
1667: LD_INT 11
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PPUSH
1676: CALL 84509 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1680: LD_EXP 6
1684: PPUSH
1685: LD_INT 6
1687: PPUSH
1688: CALL 85088 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL 85032 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1704: LD_EXP 6
1708: PPUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 27
1714: PUSH
1715: LD_INT 28
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL 84920 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_INT 17
1738: PPUSH
1739: CALL 84602 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1743: LD_EXP 6
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL 84333 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1755: LD_EXP 6
1759: PPUSH
1760: LD_INT 5
1762: PPUSH
1763: CALL 83952 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1767: LD_EXP 6
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 9
1777: PPUSH
1778: CALL 83449 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1782: LD_EXP 6
1786: PPUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 157
1792: PUSH
1793: LD_INT 144
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 32
1807: PUSH
1808: LD_INT 151
1810: PUSH
1811: LD_INT 142
1813: PUSH
1814: LD_INT 0
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 32
1825: PUSH
1826: LD_INT 161
1828: PUSH
1829: LD_INT 144
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 32
1843: PUSH
1844: LD_INT 140
1846: PUSH
1847: LD_INT 133
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL 83659 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1869: LD_EXP 6
1873: PPUSH
1874: LD_INT 13
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 31
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 13
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 27
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 27
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 13
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 27
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 13
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 28
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 13
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 13
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 2
2008: PUSH
2009: LD_INT 32
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_EXP 35
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL 83767 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2053: LD_INT 165
2055: PPUSH
2056: LD_INT 156
2058: PPUSH
2059: LD_INT 8
2061: PPUSH
2062: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2066: LD_EXP 7
2070: PPUSH
2071: LD_INT 15
2073: PPUSH
2074: CALL 85088 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2078: LD_EXP 7
2082: PPUSH
2083: LD_INT 16
2085: PPUSH
2086: CALL 85032 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2090: LD_EXP 7
2094: PPUSH
2095: LD_INT 43
2097: PUSH
2098: LD_INT 47
2100: PUSH
2101: LD_INT 45
2103: PUSH
2104: LD_INT 49
2106: PUSH
2107: LD_INT 46
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL 84920 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2121: LD_EXP 7
2125: PPUSH
2126: LD_INT 13
2128: PPUSH
2129: CALL 84602 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2133: LD_EXP 7
2137: PPUSH
2138: LD_INT 15
2140: PPUSH
2141: CALL 84333 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2145: LD_EXP 7
2149: PPUSH
2150: LD_INT 5
2152: PPUSH
2153: CALL 83952 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2157: LD_EXP 7
2161: PPUSH
2162: LD_INT 23
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 46
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 23
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 1
2188: PUSH
2189: LD_INT 46
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: LD_INT 3
2206: PUSH
2207: LD_INT 45
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 23
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: LD_INT 47
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 23
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 46
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 51
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 21
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 52
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 83767 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 11
2308: PPUSH
2309: CALL 85088 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 12
2320: PPUSH
2321: CALL 85032 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 43
2332: PUSH
2333: LD_INT 47
2335: PUSH
2336: LD_INT 45
2338: PUSH
2339: LD_INT 49
2341: PUSH
2342: LD_INT 46
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PPUSH
2352: CALL 84920 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2356: LD_EXP 8
2360: PPUSH
2361: LD_INT 13
2363: PPUSH
2364: CALL 84602 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2368: LD_EXP 8
2372: PPUSH
2373: LD_INT 11
2375: PPUSH
2376: CALL 84333 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2380: LD_EXP 8
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL 83952 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2392: LD_EXP 8
2396: PPUSH
2397: LD_INT 115
2399: PUSH
2400: LD_INT 201
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: PPUSH
2410: CALL 84658 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2414: LD_EXP 8
2418: PPUSH
2419: LD_INT 24
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: LD_INT 3
2427: PUSH
2428: LD_INT 46
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 24
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: LD_INT 46
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 24
2457: PUSH
2458: LD_INT 3
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 46
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 24
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: LD_INT 46
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL 83767 0 2
// end ;
2501: LD_VAR 0 1
2505: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
2512: PPUSH
2513: PPUSH
2514: PPUSH
2515: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL 53235 0 9
// side := 3 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2555: LD_INT 38
2557: PPUSH
2558: LD_VAR 0 5
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2570: LD_INT 39
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2585: LD_INT 34
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 208
2610: PUSH
2611: LD_INT 163
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 3
2633: PUSH
2634: LD_INT 194
2636: PUSH
2637: LD_INT 161
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 17
2659: PUSH
2660: LD_INT 190
2662: PUSH
2663: LD_INT 161
2665: PUSH
2666: LD_INT 1
2668: PUSH
2669: LD_INT 0
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 5
2685: PUSH
2686: LD_INT 200
2688: PUSH
2689: LD_INT 145
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 32
2711: PUSH
2712: LD_INT 192
2714: PUSH
2715: LD_INT 144
2717: PUSH
2718: LD_INT 3
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 26
2737: PUSH
2738: LD_INT 216
2740: PUSH
2741: LD_INT 172
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 0
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 26
2763: PUSH
2764: LD_INT 218
2766: PUSH
2767: LD_INT 176
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 29
2789: PUSH
2790: LD_INT 182
2792: PUSH
2793: LD_INT 149
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 8
2815: PUSH
2816: LD_INT 201
2818: PUSH
2819: LD_INT 171
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 11
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 32
2841: PUSH
2842: LD_INT 188
2844: PUSH
2845: LD_INT 167
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: LD_INT 0
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 202
2870: PUSH
2871: LD_INT 179
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: LD_INT 0
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 209
2896: PUSH
2897: LD_INT 182
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 32
2919: PUSH
2920: LD_INT 220
2922: PUSH
2923: LD_INT 183
2925: PUSH
2926: LD_INT 5
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 32
2945: PUSH
2946: LD_INT 225
2948: PUSH
2949: LD_INT 181
2951: PUSH
2952: LD_INT 5
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 26
2971: PUSH
2972: LD_INT 220
2974: PUSH
2975: LD_INT 174
2977: PUSH
2978: LD_INT 5
2980: PUSH
2981: LD_INT 0
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: LD_INT 84
3000: PUSH
3001: LD_INT 128
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: LD_INT 68
3026: PUSH
3027: LD_INT 121
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 19
3049: PUSH
3050: LD_INT 72
3052: PUSH
3053: LD_INT 125
3055: PUSH
3056: LD_INT 5
3058: PUSH
3059: LD_INT 0
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 18
3075: PUSH
3076: LD_INT 68
3078: PUSH
3079: LD_INT 124
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 64
3104: PUSH
3105: LD_INT 121
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 17
3127: PUSH
3128: LD_INT 65
3130: PUSH
3131: LD_INT 118
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 68
3156: PUSH
3157: LD_INT 117
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 0
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 8
3179: PUSH
3180: LD_INT 68
3182: PUSH
3183: LD_INT 130
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 14
3191: PUSH
3192: LD_INT 10
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 8
3205: PUSH
3206: LD_INT 67
3208: PUSH
3209: LD_INT 110
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 11
3217: PUSH
3218: LD_INT 12
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 28
3231: PUSH
3232: LD_INT 85
3234: PUSH
3235: LD_INT 108
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 28
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 124
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 97
3286: PUSH
3287: LD_INT 119
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 5
3309: PUSH
3310: LD_INT 111
3312: PUSH
3313: LD_INT 138
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 0
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 104
3338: PUSH
3339: LD_INT 130
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 33
3361: PUSH
3362: LD_INT 110
3364: PUSH
3365: LD_INT 142
3367: PUSH
3368: LD_INT 5
3370: PUSH
3371: LD_INT 0
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 33
3387: PUSH
3388: LD_INT 91
3390: PUSH
3391: LD_INT 131
3393: PUSH
3394: LD_INT 5
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 33
3413: PUSH
3414: LD_INT 107
3416: PUSH
3417: LD_INT 157
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: LD_INT 0
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 33
3439: PUSH
3440: LD_INT 104
3442: PUSH
3443: LD_INT 160
3445: PUSH
3446: LD_INT 5
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 33
3465: PUSH
3466: LD_INT 101
3468: PUSH
3469: LD_INT 162
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: LD_INT 87
3494: PUSH
3495: LD_INT 157
3497: PUSH
3498: LD_INT 5
3500: PUSH
3501: LD_INT 0
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 32
3517: PUSH
3518: LD_INT 105
3520: PUSH
3521: LD_INT 158
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 33
3543: PUSH
3544: LD_INT 91
3546: PUSH
3547: LD_INT 118
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 33
3569: PUSH
3570: LD_INT 89
3572: PUSH
3573: LD_INT 107
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: LD_INT 0
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 5
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: LD_INT 96
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 33
3621: PUSH
3622: LD_INT 91
3624: PUSH
3625: LD_INT 102
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 32
3647: PUSH
3648: LD_INT 80
3650: PUSH
3651: LD_INT 95
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: LD_INT 0
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 28
3673: PUSH
3674: LD_INT 77
3676: PUSH
3677: LD_INT 105
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 85
3702: PUSH
3703: LD_INT 113
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 0
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 28
3725: PUSH
3726: LD_INT 55
3728: PUSH
3729: LD_INT 97
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: LD_INT 0
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 28
3751: PUSH
3752: LD_INT 88
3754: PUSH
3755: LD_INT 128
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: LD_INT 69
3780: PUSH
3781: LD_INT 101
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 0
3789: PUSH
3790: LD_INT 0
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: LD_INT 34
3806: PUSH
3807: LD_INT 23
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 8
3829: PUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 11
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 8
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: LD_INT 12
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 29
3881: PUSH
3882: LD_INT 55
3884: PUSH
3885: LD_INT 35
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 29
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 44
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 0
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 34
3933: PUSH
3934: LD_INT 34
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 4
3942: PUSH
3943: LD_INT 0
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: LD_INT 14
3962: PUSH
3963: LD_INT 16
3965: PUSH
3966: LD_INT 1
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 24
3985: PUSH
3986: LD_INT 10
3988: PUSH
3989: LD_INT 16
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 11
4014: PUSH
4015: LD_INT 13
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 18
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: LD_INT 12
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: LD_INT 0
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 14
4066: PUSH
4067: LD_INT 19
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 17
4089: PUSH
4090: LD_INT 18
4092: PUSH
4093: LD_INT 20
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 28
4115: PUSH
4116: LD_INT 10
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 28
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 8
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 26
4167: PUSH
4168: LD_INT 19
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 26
4193: PUSH
4194: LD_INT 30
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 59
4222: PUSH
4223: LD_INT 20
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 60
4248: PUSH
4249: LD_INT 24
4251: PUSH
4252: LD_INT 4
4254: PUSH
4255: LD_INT 0
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 61
4274: PUSH
4275: LD_INT 45
4277: PUSH
4278: LD_INT 5
4280: PUSH
4281: LD_INT 0
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 52
4300: PUSH
4301: LD_INT 51
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 0
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 33
4323: PUSH
4324: LD_INT 56
4326: PUSH
4327: LD_INT 51
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 0
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 33
4349: PUSH
4350: LD_INT 62
4352: PUSH
4353: LD_INT 49
4355: PUSH
4356: LD_INT 5
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 33
4375: PUSH
4376: LD_INT 41
4378: PUSH
4379: LD_INT 47
4381: PUSH
4382: LD_INT 5
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 33
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 0
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 5
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 40
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 33
4453: PUSH
4454: LD_INT 65
4456: PUSH
4457: LD_INT 37
4459: PUSH
4460: LD_INT 5
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 33
4479: PUSH
4480: LD_INT 63
4482: PUSH
4483: LD_INT 29
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 33
4505: PUSH
4506: LD_INT 54
4508: PUSH
4509: LD_INT 11
4511: PUSH
4512: LD_INT 4
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 33
4531: PUSH
4532: LD_INT 56
4534: PUSH
4535: LD_INT 15
4537: PUSH
4538: LD_INT 4
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 33
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 26
4583: PUSH
4584: LD_INT 39
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 26
4609: PUSH
4610: LD_INT 37
4612: PUSH
4613: LD_INT 21
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 32
4635: PUSH
4636: LD_INT 35
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 33
4661: PUSH
4662: LD_INT 35
4664: PUSH
4665: LD_INT 28
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 33
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 46
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 0
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 33
4713: PUSH
4714: LD_INT 31
4716: PUSH
4717: LD_INT 6
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 0
4725: PUSH
4726: LD_INT 0
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 26
4739: PUSH
4740: LD_INT 54
4742: PUSH
4743: LD_INT 38
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 33
4765: PUSH
4766: LD_INT 207
4768: PUSH
4769: LD_INT 167
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: LD_INT 0
4777: PUSH
4778: LD_INT 0
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 43
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 0
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
// for i in tmp do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_VAR 0 4
4911: PUSH
4912: FOR_IN
4913: IFFALSE 5144
// begin uc_side := side ;
4915: LD_ADDR_OWVAR 20
4919: PUSH
4920: LD_VAR 0 5
4924: ST_TO_ADDR
// uc_nation := nation_russian ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_INT 3
4932: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4933: LD_ADDR_OWVAR 42
4937: PUSH
4938: LD_VAR 0 2
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4947: LD_ADDR_OWVAR 43
4951: PUSH
4952: LD_INT 5
4954: PPUSH
4955: LD_INT 6
4957: PPUSH
4958: CALL_OW 12
4962: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4963: LD_ADDR_OWVAR 44
4967: PUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 5
4975: ARRAY
4976: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4977: LD_ADDR_OWVAR 45
4981: PUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 6
4989: ARRAY
4990: ST_TO_ADDR
// sr := 0 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 1
5006: ARRAY
5007: PUSH
5008: LD_INT 29
5010: EQUAL
5011: IFFALSE 5023
// sr := mat_oil else
5013: LD_ADDR_VAR 0 6
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
5021: GO 5045
// if i [ 1 ] = b_siberite_mine then
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: ARRAY
5031: PUSH
5032: LD_INT 30
5034: EQUAL
5035: IFFALSE 5045
// sr := mat_siberit ;
5037: LD_ADDR_VAR 0 6
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// if sr then
5045: LD_VAR 0 6
5049: IFFALSE 5105
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 2
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_INT 3
5067: ARRAY
5068: PPUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5105: LD_ADDR_VAR 0 3
5109: PUSH
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 2
5123: PUSH
5124: LD_INT 3
5126: ARRAY
5127: PPUSH
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 4
5135: ARRAY
5136: PPUSH
5137: CALL_OW 47
5141: ST_TO_ADDR
// end ;
5142: GO 4912
5144: POP
5145: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_VAR 0 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 30
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PPUSH
5177: CALL_OW 69
5181: ST_TO_ADDR
// if not depot then
5182: LD_VAR 0 7
5186: NOT
5187: IFFALSE 5191
// exit ;
5189: GO 5535
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5191: LD_ADDR_VAR 0 8
5195: PUSH
5196: LD_INT 84
5198: PPUSH
5199: LD_INT 128
5201: PPUSH
5202: CALL_OW 428
5206: PPUSH
5207: LD_INT 15
5209: PPUSH
5210: LD_INT 0
5212: PPUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: LD_INT 8
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: PPUSH
5233: LD_INT 3000
5235: PUSH
5236: LD_INT 300
5238: PUSH
5239: LD_INT 100
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: LD_INT 12
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL 28182 0 6
5269: ST_TO_ADDR
// if not base then
5270: LD_VAR 0 8
5274: NOT
5275: IFFALSE 5279
// exit ;
5277: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5279: LD_ADDR_EXP 50
5283: PUSH
5284: LD_EXP 50
5288: PPUSH
5289: LD_EXP 7
5293: PPUSH
5294: LD_VAR 0 8
5298: PPUSH
5299: CALL_OW 1
5303: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_INT 34
5311: PPUSH
5312: LD_INT 23
5314: PPUSH
5315: CALL_OW 428
5319: PPUSH
5320: LD_INT 11
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: LD_INT 6
5328: PUSH
5329: LD_INT 7
5331: PUSH
5332: LD_INT 8
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_OWVAR 67
5344: ARRAY
5345: PPUSH
5346: LD_INT 20000
5348: PUSH
5349: LD_INT 3000
5351: PUSH
5352: LD_INT 1000
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: PPUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PPUSH
5378: CALL 28182 0 6
5382: ST_TO_ADDR
// if not base then
5383: LD_VAR 0 8
5387: NOT
5388: IFFALSE 5392
// exit ;
5390: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5392: LD_ADDR_EXP 50
5396: PUSH
5397: LD_EXP 50
5401: PPUSH
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5417: LD_ADDR_EXP 14
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 69
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_INT 25
5457: PPUSH
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 6
5463: PUSH
5464: LD_INT 7
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PPUSH
5481: LD_INT 500
5483: PUSH
5484: LD_INT 100
5486: PUSH
5487: LD_INT 10
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: PPUSH
5495: LD_INT 6
5497: PUSH
5498: LD_INT 7
5500: PUSH
5501: LD_INT 8
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: LD_OWVAR 67
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 0
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 28182 0 6
5534: ST_TO_ADDR
// end ;
5535: LD_VAR 0 1
5539: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: LD_INT 6
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: LD_INT 8
5576: PPUSH
5577: LD_INT 0
5579: PPUSH
5580: CALL 53235 0 9
// side := 8 ;
5584: LD_ADDR_VAR 0 8
5588: PUSH
5589: LD_INT 8
5591: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 0
5602: PPUSH
5603: CALL_OW 517
5607: ST_TO_ADDR
// if Difficulty > 2 then
5608: LD_OWVAR 67
5612: PUSH
5613: LD_INT 2
5615: GREATER
5616: IFFALSE 5760
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_INT 27
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 517
5633: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 6
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5758
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5656: LD_ADDR_VAR 0 5
5660: PUSH
5661: LD_VAR 0 5
5665: PPUSH
5666: LD_INT 1
5668: PUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PPUSH
5701: CALL 24858 0 3
5705: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5706: LD_ADDR_VAR 0 5
5710: PUSH
5711: LD_VAR 0 5
5715: PPUSH
5716: LD_INT 2
5718: PUSH
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 2
5726: ARRAY
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_VAR 0 6
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL 24858 0 3
5755: ST_TO_ADDR
// end ;
5756: GO 5653
5758: POP
5759: POP
// end ; if tmp then
5760: LD_VAR 0 5
5764: IFFALSE 5892
// begin for i = 1 to tmp [ 1 ] do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_VAR 0 5
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PUSH
5785: FOR_TO
5786: IFFALSE 5890
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5788: LD_VAR 0 5
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: ARRAY
5802: PPUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_INT 0
5825: PPUSH
5826: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5830: LD_ADDR_EXP 16
5834: PUSH
5835: LD_EXP 16
5839: PPUSH
5840: LD_EXP 16
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PUSH
5858: LD_VAR 0 2
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 2
5887: ST_TO_ADDR
// end ;
5888: GO 5785
5890: POP
5891: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_INT 165
5899: PUSH
5900: LD_INT 156
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 143
5909: PUSH
5910: LD_INT 145
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 152
5919: PUSH
5920: LD_INT 165
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 123
5929: PUSH
5930: LD_INT 153
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 161
5939: PUSH
5940: LD_INT 215
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 172
5949: PUSH
5950: LD_INT 100
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 148
5959: PUSH
5960: LD_INT 83
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 122
5969: PUSH
5970: LD_INT 68
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 105
5979: PUSH
5980: LD_INT 74
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 113
5989: PUSH
5990: LD_INT 97
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
// for i in cameras do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_VAR 0 7
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6051
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6022: LD_VAR 0 2
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_INT 2
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: CALL_OW 244
6049: GO 6019
6051: POP
6052: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: LD_INT 144
6063: PUSH
6064: LD_INT 110
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 151
6089: PUSH
6090: LD_INT 118
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 158
6115: PUSH
6116: LD_INT 110
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 10
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 154
6141: PUSH
6142: LD_INT 121
6144: PUSH
6145: LD_INT 5
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_INT 155
6167: PUSH
6168: LD_INT 118
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 151
6193: PUSH
6194: LD_INT 122
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 18
6216: PUSH
6217: LD_INT 148
6219: PUSH
6220: LD_INT 118
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 17
6242: PUSH
6243: LD_INT 147
6245: PUSH
6246: LD_INT 114
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 163
6271: PUSH
6272: LD_INT 120
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 27
6294: PUSH
6295: LD_INT 137
6297: PUSH
6298: LD_INT 116
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 133
6323: PUSH
6324: LD_INT 111
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 27
6346: PUSH
6347: LD_INT 132
6349: PUSH
6350: LD_INT 106
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 137
6375: PUSH
6376: LD_INT 111
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 8
6398: PUSH
6399: LD_INT 141
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: LD_INT 13
6410: PUSH
6411: LD_INT 11
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 140
6427: PUSH
6428: LD_INT 128
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 146
6453: PUSH
6454: LD_INT 96
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 0
6462: PUSH
6463: LD_INT 0
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 32
6476: PUSH
6477: LD_INT 150
6479: PUSH
6480: LD_INT 98
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 0
6488: PUSH
6489: LD_INT 0
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 32
6502: PUSH
6503: LD_INT 142
6505: PUSH
6506: LD_INT 95
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: LD_INT 159
6531: PUSH
6532: LD_INT 104
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 0
6540: PUSH
6541: LD_INT 0
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 32
6554: PUSH
6555: LD_INT 133
6557: PUSH
6558: LD_INT 95
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 32
6580: PUSH
6581: LD_INT 131
6583: PUSH
6584: LD_INT 102
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 164
6609: PUSH
6610: LD_INT 144
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 32
6632: PUSH
6633: LD_INT 146
6635: PUSH
6636: LD_INT 139
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: LD_INT 0
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 26
6658: PUSH
6659: LD_INT 143
6661: PUSH
6662: LD_INT 122
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 164
6687: PUSH
6688: LD_INT 116
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 0
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
// for i in tmp do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6977
// begin uc_side := side ;
6748: LD_ADDR_OWVAR 20
6752: PUSH
6753: LD_VAR 0 8
6757: ST_TO_ADDR
// uc_nation := nation_arabian ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 2
6765: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6766: LD_ADDR_OWVAR 42
6770: PUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6780: LD_ADDR_OWVAR 43
6784: PUSH
6785: LD_INT 5
6787: PPUSH
6788: LD_INT 6
6790: PPUSH
6791: CALL_OW 12
6795: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6796: LD_ADDR_OWVAR 44
6800: PUSH
6801: LD_VAR 0 2
6805: PUSH
6806: LD_INT 5
6808: ARRAY
6809: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6810: LD_ADDR_OWVAR 45
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 6
6822: ARRAY
6823: ST_TO_ADDR
// sr := 0 ;
6824: LD_ADDR_VAR 0 9
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PUSH
6841: LD_INT 29
6843: EQUAL
6844: IFFALSE 6856
// sr := mat_oil else
6846: LD_ADDR_VAR 0 9
6850: PUSH
6851: LD_INT 2
6853: ST_TO_ADDR
6854: GO 6878
// if i [ 1 ] = b_siberite_mine then
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PUSH
6865: LD_INT 30
6867: EQUAL
6868: IFFALSE 6878
// sr := mat_siberit ;
6870: LD_ADDR_VAR 0 9
6874: PUSH
6875: LD_INT 3
6877: ST_TO_ADDR
// if sr then
6878: LD_VAR 0 9
6882: IFFALSE 6938
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 2
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: ARRAY
6901: PPUSH
6902: LD_VAR 0 9
6906: PPUSH
6907: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 8
6933: PPUSH
6934: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: PUSH
6948: LD_INT 2
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 3
6959: ARRAY
6960: PPUSH
6961: LD_VAR 0 2
6965: PUSH
6966: LD_INT 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 47
6974: ST_TO_ADDR
// end ;
6975: GO 6745
6977: POP
6978: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6979: LD_ADDR_VAR 0 10
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 8
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// if not depot then
7015: LD_VAR 0 10
7019: NOT
7020: IFFALSE 7024
// exit ;
7022: GO 7270
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7024: LD_ADDR_VAR 0 11
7028: PUSH
7029: LD_VAR 0 10
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_INT 6
7040: PPUSH
7041: LD_INT 0
7043: PPUSH
7044: LD_INT 7
7046: PUSH
7047: LD_INT 8
7049: PUSH
7050: LD_INT 10
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_OWVAR 67
7062: ARRAY
7063: PPUSH
7064: LD_INT 3000
7066: PUSH
7067: LD_INT 300
7069: PUSH
7070: LD_INT 100
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: LD_INT 14
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL 28182 0 6
7100: ST_TO_ADDR
// if not base then
7101: LD_VAR 0 11
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7270
// if Difficulty > 1 then
7110: LD_OWVAR 67
7114: PUSH
7115: LD_INT 1
7117: GREATER
7118: IFFALSE 7191
// begin InitHc ;
7120: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 5
7129: PPUSH
7130: LD_INT 5
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_OWVAR 67
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: ARRAY
7149: PPUSH
7150: CALL_OW 380
// for i = 1 to Difficulty do
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_OWVAR 67
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7189
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7172: CALL_OW 44
7176: PPUSH
7177: LD_INT 24
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL_OW 49
7187: GO 7169
7189: POP
7190: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_EXP 50
7200: PPUSH
7201: LD_EXP 6
7205: PPUSH
7206: LD_VAR 0 11
7210: PPUSH
7211: CALL_OW 1
7215: ST_TO_ADDR
// hc_gallery := ru ;
7216: LD_ADDR_OWVAR 33
7220: PUSH
7221: LD_STRING ru
7223: ST_TO_ADDR
// hc_face_number := 44 ;
7224: LD_ADDR_OWVAR 34
7228: PUSH
7229: LD_INT 44
7231: ST_TO_ADDR
// hc_name := Robert Farmer ;
7232: LD_ADDR_OWVAR 26
7236: PUSH
7237: LD_STRING Robert Farmer
7239: ST_TO_ADDR
// hc_sex := sex_male ;
7240: LD_ADDR_OWVAR 27
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// hc_class := 1 ;
7248: LD_ADDR_OWVAR 28
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// Farmer := CreateHuman ;
7256: LD_ADDR_EXP 13
7260: PUSH
7261: CALL_OW 44
7265: ST_TO_ADDR
// InitHc ;
7266: CALL_OW 19
// end ;
7270: LD_VAR 0 1
7274: RET
// export function SetAdditionalRussianForces ; var i , tmp , veh ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// tmp := [ ] ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// for i := 1 to 3 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 3
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7414
// begin uc_side := 3 ;
7304: LD_ADDR_OWVAR 20
7308: PUSH
7309: LD_INT 3
7311: ST_TO_ADDR
// uc_nation := 3 ;
7312: LD_ADDR_OWVAR 21
7316: PUSH
7317: LD_INT 3
7319: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7320: LD_ADDR_OWVAR 37
7324: PUSH
7325: LD_INT 22
7327: ST_TO_ADDR
// vc_engine := engine_siberite ;
7328: LD_ADDR_OWVAR 39
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
// vc_control := control_computer ;
7336: LD_ADDR_OWVAR 38
7340: PUSH
7341: LD_INT 3
7343: ST_TO_ADDR
// vc_weapon := ru_crane ;
7344: LD_ADDR_OWVAR 40
7348: PUSH
7349: LD_INT 52
7351: ST_TO_ADDR
// veh := CreateVehicle ;
7352: LD_ADDR_VAR 0 4
7356: PUSH
7357: CALL_OW 45
7361: ST_TO_ADDR
// PlaceUnitXYR ( veh , 73 , 122 , 3 , false ) ;
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_INT 73
7369: PPUSH
7370: LD_INT 122
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_VAR 0 3
7392: PPUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: CALL_OW 1
7411: ST_TO_ADDR
// end ;
7412: GO 7301
7414: POP
7415: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_1 , tmp ) ;
7416: LD_ADDR_EXP 69
7420: PUSH
7421: LD_EXP 69
7425: PPUSH
7426: LD_EXP 7
7430: PPUSH
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 1
7440: ST_TO_ADDR
// tmp := [ ] ;
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: EMPTY
7447: ST_TO_ADDR
// for i := 1 to 3 do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: DOUBLE
7454: LD_INT 1
7456: DEC
7457: ST_TO_ADDR
7458: LD_INT 3
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7574
// begin uc_side := 3 ;
7464: LD_ADDR_OWVAR 20
7468: PUSH
7469: LD_INT 3
7471: ST_TO_ADDR
// uc_nation := 3 ;
7472: LD_ADDR_OWVAR 21
7476: PUSH
7477: LD_INT 3
7479: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7480: LD_ADDR_OWVAR 37
7484: PUSH
7485: LD_INT 22
7487: ST_TO_ADDR
// vc_engine := engine_siberite ;
7488: LD_ADDR_OWVAR 39
7492: PUSH
7493: LD_INT 3
7495: ST_TO_ADDR
// vc_control := control_computer ;
7496: LD_ADDR_OWVAR 38
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
// vc_weapon := ru_crane ;
7504: LD_ADDR_OWVAR 40
7508: PUSH
7509: LD_INT 52
7511: ST_TO_ADDR
// veh := CreateVehicle ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: CALL_OW 45
7521: ST_TO_ADDR
// PlaceUnitXYR ( veh , 22 , 28 , 3 , false ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_INT 22
7529: PPUSH
7530: LD_INT 28
7532: PPUSH
7533: LD_INT 3
7535: PPUSH
7536: LD_INT 0
7538: PPUSH
7539: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: LD_VAR 0 3
7552: PPUSH
7553: LD_VAR 0 3
7557: PUSH
7558: LD_INT 1
7560: PLUS
7561: PPUSH
7562: LD_VAR 0 4
7566: PPUSH
7567: CALL_OW 1
7571: ST_TO_ADDR
// end ;
7572: GO 7461
7574: POP
7575: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_2 , tmp ) ;
7576: LD_ADDR_EXP 69
7580: PUSH
7581: LD_EXP 69
7585: PPUSH
7586: LD_EXP 8
7590: PPUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
// end ;
7601: LD_VAR 0 1
7605: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7616: LD_INT 0
7618: PPUSH
7619: LD_INT 0
7621: PPUSH
7622: LD_INT 4
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: LD_INT 0
7636: PPUSH
7637: LD_INT 10
7639: PPUSH
7640: LD_INT 0
7642: PPUSH
7643: CALL 53235 0 9
// side := 4 ;
7647: LD_ADDR_VAR 0 5
7651: PUSH
7652: LD_INT 4
7654: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7655: LD_ADDR_VAR 0 4
7659: PUSH
7660: LD_INT 1
7662: PUSH
7663: LD_INT 144
7665: PUSH
7666: LD_INT 18
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 137
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 141
7717: PUSH
7718: LD_INT 8
7720: PUSH
7721: LD_INT 4
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 25
7740: PUSH
7741: LD_INT 137
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 18
7766: PUSH
7767: LD_INT 137
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 17
7792: PUSH
7793: LD_INT 133
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 16
7818: PUSH
7819: LD_INT 140
7821: PUSH
7822: LD_INT 11
7824: PUSH
7825: LD_INT 5
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 8
7844: PUSH
7845: LD_INT 149
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 4
7853: PUSH
7854: LD_INT 10
7856: PUSH
7857: LD_INT 15
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 8
7870: PUSH
7871: LD_INT 142
7873: PUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 27
7896: PUSH
7897: LD_INT 153
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 27
7922: PUSH
7923: LD_INT 145
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: LD_INT 0
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 27
7948: PUSH
7949: LD_INT 138
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 4
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 27
7974: PUSH
7975: LD_INT 144
7977: PUSH
7978: LD_INT 13
7980: PUSH
7981: LD_INT 0
7983: PUSH
7984: LD_INT 0
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 124
8003: PUSH
8004: LD_INT 2
8006: PUSH
8007: LD_INT 4
8009: PUSH
8010: LD_INT 0
8012: PUSH
8013: LD_INT 0
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 121
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 0
8038: PUSH
8039: LD_INT 0
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 26
8052: PUSH
8053: LD_INT 118
8055: PUSH
8056: LD_INT 2
8058: PUSH
8059: LD_INT 1
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 29
8078: PUSH
8079: LD_INT 159
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 32
8104: PUSH
8105: LD_INT 146
8107: PUSH
8108: LD_INT 41
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 33
8130: PUSH
8131: LD_INT 136
8133: PUSH
8134: LD_INT 37
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 33
8156: PUSH
8157: LD_INT 132
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: LD_INT 0
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: LD_INT 124
8185: PUSH
8186: LD_INT 7
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: LD_INT 0
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: LD_INT 124
8211: PUSH
8212: LD_INT 19
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 127
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// for i in tmp do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 4
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8525
// begin uc_side := side ;
8296: LD_ADDR_OWVAR 20
8300: PUSH
8301: LD_VAR 0 5
8305: ST_TO_ADDR
// uc_nation := nation_american ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8314: LD_ADDR_OWVAR 42
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
8328: LD_ADDR_OWVAR 43
8332: PUSH
8333: LD_INT 5
8335: PPUSH
8336: LD_INT 6
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8344: LD_ADDR_OWVAR 44
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 5
8356: ARRAY
8357: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8358: LD_ADDR_OWVAR 45
8362: PUSH
8363: LD_VAR 0 2
8367: PUSH
8368: LD_INT 6
8370: ARRAY
8371: ST_TO_ADDR
// sr := 0 ;
8372: LD_ADDR_VAR 0 6
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PUSH
8389: LD_INT 29
8391: EQUAL
8392: IFFALSE 8404
// sr := mat_oil else
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_INT 2
8401: ST_TO_ADDR
8402: GO 8426
// if i [ 1 ] = b_siberite_mine then
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PUSH
8413: LD_INT 30
8415: EQUAL
8416: IFFALSE 8426
// sr := mat_siberit ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_INT 3
8425: ST_TO_ADDR
// if sr then
8426: LD_VAR 0 6
8430: IFFALSE 8486
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8432: LD_VAR 0 2
8436: PUSH
8437: LD_INT 2
8439: ARRAY
8440: PPUSH
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 3
8448: ARRAY
8449: PPUSH
8450: LD_VAR 0 6
8454: PPUSH
8455: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8459: LD_VAR 0 2
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8486: LD_ADDR_VAR 0 3
8490: PUSH
8491: LD_VAR 0 2
8495: PUSH
8496: LD_INT 2
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_INT 3
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 2
8513: PUSH
8514: LD_INT 4
8516: ARRAY
8517: PPUSH
8518: CALL_OW 47
8522: ST_TO_ADDR
// end ;
8523: GO 8293
8525: POP
8526: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8527: LD_ADDR_VAR 0 8
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_VAR 0 5
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 69
8562: ST_TO_ADDR
// if not depot then
8563: LD_VAR 0 8
8567: NOT
8568: IFFALSE 8572
// exit ;
8570: GO 8844
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_INT 3
8588: PPUSH
8589: LD_STRING theta3
8591: PPUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 6
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: LD_OWVAR 67
8610: ARRAY
8611: PPUSH
8612: LD_INT 2500
8614: PUSH
8615: LD_INT 2000
8617: PUSH
8618: LD_INT 1750
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_OWVAR 67
8630: ARRAY
8631: PUSH
8632: LD_INT 300
8634: PUSH
8635: LD_INT 250
8637: PUSH
8638: LD_INT 200
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_OWVAR 67
8650: ARRAY
8651: PUSH
8652: LD_INT 80
8654: PUSH
8655: LD_INT 60
8657: PUSH
8658: LD_INT 50
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_OWVAR 67
8670: ARRAY
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: LD_INT 7
8679: PUSH
8680: LD_INT 6
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL 28182 0 6
8699: ST_TO_ADDR
// if not base then
8700: LD_VAR 0 7
8704: NOT
8705: IFFALSE 8709
// exit ;
8707: GO 8844
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8709: LD_ADDR_EXP 50
8713: PUSH
8714: LD_EXP 50
8718: PPUSH
8719: LD_EXP 5
8723: PPUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 7
8742: PPUSH
8743: CALL_OW 380
// allyCommander := CreateHuman ;
8747: LD_ADDR_EXP 11
8751: PUSH
8752: CALL_OW 44
8756: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8757: LD_EXP 11
8761: PPUSH
8762: LD_INT 139
8764: PPUSH
8765: LD_INT 15
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8775: LD_EXP 11
8779: PPUSH
8780: LD_INT 137
8782: PPUSH
8783: LD_INT 15
8785: PPUSH
8786: CALL_OW 118
// hc_gallery := us ;
8790: LD_ADDR_OWVAR 33
8794: PUSH
8795: LD_STRING us
8797: ST_TO_ADDR
// hc_face_number := 7 ;
8798: LD_ADDR_OWVAR 34
8802: PUSH
8803: LD_INT 7
8805: ST_TO_ADDR
// hc_name := Arthur Powell ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING Arthur Powell
8813: ST_TO_ADDR
// hc_sex := sex_male ;
8814: LD_ADDR_OWVAR 27
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// hc_class := 1 ;
8822: LD_ADDR_OWVAR 28
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// Powell := CreateHuman ;
8830: LD_ADDR_EXP 12
8834: PUSH
8835: CALL_OW 44
8839: ST_TO_ADDR
// InitHc ;
8840: CALL_OW 19
// end ;
8844: LD_VAR 0 1
8848: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
// side := 1 ;
8860: LD_ADDR_VAR 0 3
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: EMPTY
8874: PUSH
8875: EMPTY
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// uc_side := side ;
8881: LD_ADDR_OWVAR 20
8885: PUSH
8886: LD_VAR 0 3
8890: ST_TO_ADDR
// uc_nation := nation_american ;
8891: LD_ADDR_OWVAR 21
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// InitHc ;
8899: CALL_OW 19
// InitVc ;
8903: CALL_OW 20
// hc_importance := 0 ;
8907: LD_ADDR_OWVAR 32
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8915: LD_ADDR_VAR 0 7
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// if commander = 2 then
8934: LD_EXP 25
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8963
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: LD_INT 4
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// if commander = 3 then
8963: LD_EXP 25
8967: PUSH
8968: LD_INT 3
8970: EQUAL
8971: IFFALSE 8992
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8973: LD_ADDR_VAR 0 7
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// if commander = 2 then
9011: LD_EXP 25
9015: PUSH
9016: LD_INT 2
9018: EQUAL
9019: IFFALSE 9040
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
9021: LD_ADDR_VAR 0 8
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: ST_TO_ADDR
// if commander = 3 then
9040: LD_EXP 25
9044: PUSH
9045: LD_INT 3
9047: EQUAL
9048: IFFALSE 9069
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
9050: LD_ADDR_VAR 0 8
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 1
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: LD_INT 5
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 4
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if commander = 2 then
9088: LD_EXP 25
9092: PUSH
9093: LD_INT 2
9095: EQUAL
9096: IFFALSE 9117
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 7
9105: PUSH
9106: LD_INT 5
9108: PUSH
9109: LD_INT 6
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if commander = 3 then
9117: LD_EXP 25
9121: PUSH
9122: LD_INT 3
9124: EQUAL
9125: IFFALSE 9146
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 7
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: ST_TO_ADDR
// if commander = 2 then
9171: LD_EXP 25
9175: PUSH
9176: LD_INT 2
9178: EQUAL
9179: IFFALSE 9195
// tanks := tanks + 3 ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_VAR 0 5
9190: PUSH
9191: LD_INT 3
9193: PLUS
9194: ST_TO_ADDR
// for i = 1 to tanks do
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_VAR 0 5
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9321
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
9213: LD_VAR 0 7
9217: PUSH
9218: LD_VAR 0 2
9222: PUSH
9223: LD_INT 3
9225: MOD
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 8
9236: PUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: CALL_OW 12
9247: ARRAY
9248: PPUSH
9249: LD_INT 1
9251: PPUSH
9252: LD_VAR 0 9
9256: PUSH
9257: LD_VAR 0 2
9261: PUSH
9262: LD_INT 3
9264: MOD
9265: PUSH
9266: LD_INT 1
9268: PLUS
9269: ARRAY
9270: PPUSH
9271: LD_INT 60
9273: PPUSH
9274: LD_INT 70
9276: PPUSH
9277: CALL_OW 12
9281: PPUSH
9282: CALL 24736 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 1
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PUSH
9308: CALL_OW 45
9312: ADD
9313: PPUSH
9314: CALL_OW 1
9318: ST_TO_ADDR
// end ;
9319: GO 9210
9321: POP
9322: POP
// cl := 1 ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// for i = 1 to 10 do
9331: LD_ADDR_VAR 0 2
9335: PUSH
9336: DOUBLE
9337: LD_INT 1
9339: DEC
9340: ST_TO_ADDR
9341: LD_INT 10
9343: PUSH
9344: FOR_TO
9345: IFFALSE 9460
// begin if i mod 4 = 0 then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_INT 4
9354: MOD
9355: PUSH
9356: LD_INT 0
9358: EQUAL
9359: IFFALSE 9375
// cl := cl + 1 ;
9361: LD_ADDR_VAR 0 6
9365: PUSH
9366: LD_VAR 0 6
9370: PUSH
9371: LD_INT 1
9373: PLUS
9374: ST_TO_ADDR
// if cl = 2 then
9375: LD_VAR 0 6
9379: PUSH
9380: LD_INT 2
9382: EQUAL
9383: IFFALSE 9393
// cl := 3 ;
9385: LD_ADDR_VAR 0 6
9389: PUSH
9390: LD_INT 3
9392: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9393: LD_INT 0
9395: PPUSH
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 6
9403: PUSH
9404: LD_INT 6
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PPUSH
9421: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: LD_VAR 0 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PUSH
9447: CALL_OW 44
9451: ADD
9452: PPUSH
9453: CALL_OW 1
9457: ST_TO_ADDR
// end ;
9458: GO 9344
9460: POP
9461: POP
// if commander = 1 then
9462: LD_EXP 25
9466: PUSH
9467: LD_INT 1
9469: EQUAL
9470: IFFALSE 9538
// for i = 1 to 4 do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 4
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9536
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9488: LD_INT 0
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_INT 8
9496: PPUSH
9497: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9501: LD_ADDR_VAR 0 1
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 2
9513: PPUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 2
9521: ARRAY
9522: PUSH
9523: CALL_OW 44
9527: ADD
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// end ;
9534: GO 9485
9536: POP
9537: POP
// techs := [ ] ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// if commander = 1 then
9545: LD_EXP 25
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: IFFALSE 9578
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 52
9565: PUSH
9566: LD_INT 53
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: ST_TO_ADDR
// if commander = 2 then
9578: LD_EXP 25
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: IFFALSE 9623
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_INT 48
9595: PUSH
9596: LD_INT 47
9598: PUSH
9599: LD_INT 46
9601: PUSH
9602: LD_INT 45
9604: PUSH
9605: LD_INT 35
9607: PUSH
9608: LD_INT 60
9610: PUSH
9611: LD_INT 6
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// if commander = 3 then
9623: LD_EXP 25
9627: PUSH
9628: LD_INT 3
9630: EQUAL
9631: IFFALSE 9680
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9633: LD_ADDR_VAR 0 4
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 36
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 57
9649: PUSH
9650: LD_INT 58
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: LD_INT 51
9661: PUSH
9662: LD_INT 69
9664: PUSH
9665: LD_INT 39
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
// if techs then
9680: LD_VAR 0 4
9684: IFFALSE 9718
// for i in techs do
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_VAR 0 4
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9716
// SetTech ( i , 1 , state_researched ) ;
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_INT 2
9709: PPUSH
9710: CALL_OW 322
9714: GO 9696
9716: POP
9717: POP
// hc_gallery := skirmish ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING skirmish
9725: ST_TO_ADDR
// hc_face_number := commander ;
9726: LD_ADDR_OWVAR 34
9730: PUSH
9731: LD_EXP 25
9735: ST_TO_ADDR
// hc_importance := 100 ;
9736: LD_ADDR_OWVAR 32
9740: PUSH
9741: LD_INT 100
9743: ST_TO_ADDR
// case commander of 1 :
9744: LD_EXP 25
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9781
9757: POP
// begin hc_name := Jeff Ironside ;
9758: LD_ADDR_OWVAR 26
9762: PUSH
9763: LD_STRING Jeff Ironside
9765: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_INT 7
9774: PPUSH
9775: CALL_OW 380
// end ; 2 :
9779: GO 9846
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9813
9789: POP
// begin hc_name := Paul Johnson ;
9790: LD_ADDR_OWVAR 26
9794: PUSH
9795: LD_STRING Paul Johnson
9797: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9798: LD_INT 1
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: LD_INT 7
9806: PPUSH
9807: CALL_OW 380
// end ; 3 :
9811: GO 9846
9813: LD_INT 3
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9845
9821: POP
// begin hc_name := Lisa Stuart ;
9822: LD_ADDR_OWVAR 26
9826: PUSH
9827: LD_STRING Lisa Stuart
9829: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9830: LD_INT 2
9832: PPUSH
9833: LD_INT 4
9835: PPUSH
9836: LD_INT 7
9838: PPUSH
9839: CALL_OW 380
// end ; end ;
9843: GO 9846
9845: POP
// playerCommander := CreateHuman ;
9846: LD_ADDR_EXP 9
9850: PUSH
9851: CALL_OW 44
9855: ST_TO_ADDR
// hc_importance := 0 ;
9856: LD_ADDR_OWVAR 32
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// hc_gallery :=  ;
9864: LD_ADDR_OWVAR 33
9868: PUSH
9869: LD_STRING 
9871: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: LD_VAR 0 1
9889: PUSH
9890: LD_INT 2
9892: ARRAY
9893: PUSH
9894: LD_EXP 9
9898: ADD
9899: PPUSH
9900: CALL_OW 1
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 1
9909: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
// uc_side := 1 ;
9918: LD_ADDR_OWVAR 20
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// uc_nation := 1 ;
9926: LD_ADDR_OWVAR 21
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// InitHc ;
9934: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9938: LD_ADDR_VAR 0 3
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: PUSH
9957: LD_OWVAR 67
9961: ARRAY
9962: ST_TO_ADDR
// for i = 1 to peopleAmount do
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_VAR 0 3
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10028
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: LD_INT 7
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_OWVAR 67
10005: ARRAY
10006: PPUSH
10007: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
10011: CALL_OW 44
10015: PPUSH
10016: LD_INT 19
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL 55523 0 3
// end ;
10026: GO 9978
10028: POP
10029: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
10030: LD_INT 2
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: LD_INT 3
10038: PPUSH
10039: LD_INT 13
10041: PPUSH
10042: LD_INT 58
10044: PPUSH
10045: CALL 24736 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
10049: CALL_OW 45
10053: PPUSH
10054: LD_INT 19
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL 55523 0 3
// if commander = 1 then
10064: LD_EXP 25
10068: PUSH
10069: LD_INT 1
10071: EQUAL
10072: IFFALSE 10083
// wait ( 6 6$00 ) else
10074: LD_INT 12600
10076: PPUSH
10077: CALL_OW 67
10081: GO 10090
// wait ( 8 8$00 ) ;
10083: LD_INT 16800
10085: PPUSH
10086: CALL_OW 67
// uc_side := 1 ;
10090: LD_ADDR_OWVAR 20
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// uc_nation := 1 ;
10098: LD_ADDR_OWVAR 21
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// InitVc ;
10106: CALL_OW 20
// InitHc ;
10110: CALL_OW 19
// for i = 1 to 5 do
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 5
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10372
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
10130: LD_INT 4
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 3
10151: MOD
10152: PUSH
10153: LD_INT 1
10155: PLUS
10156: ARRAY
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: LD_INT 1
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: LD_VAR 0 2
10179: PUSH
10180: LD_INT 3
10182: MOD
10183: PUSH
10184: LD_INT 1
10186: PLUS
10187: ARRAY
10188: PPUSH
10189: LD_INT 6
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 11
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_INT 3
10210: MOD
10211: PUSH
10212: LD_INT 1
10214: PLUS
10215: ARRAY
10216: PPUSH
10217: LD_INT 40
10219: PPUSH
10220: LD_INT 55
10222: PPUSH
10223: CALL_OW 12
10227: PPUSH
10228: CALL 24736 0 5
// veh := CreateVehicle ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: CALL_OW 45
10241: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10242: LD_VAR 0 6
10246: PPUSH
10247: LD_INT 19
10249: PPUSH
10250: LD_INT 0
10252: PPUSH
10253: CALL 55523 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
10257: LD_VAR 0 6
10261: PPUSH
10262: CALL_OW 264
10266: PUSH
10267: LD_INT 12
10269: EQUAL
10270: IFFALSE 10302
// begin AddCargo ( veh , mat_cans , 70 ) ;
10272: LD_VAR 0 6
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 70
10282: PPUSH
10283: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
10287: LD_VAR 0 6
10291: PPUSH
10292: LD_INT 3
10294: PPUSH
10295: LD_INT 30
10297: PPUSH
10298: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 1
10314: EQUAL
10315: IFFALSE 10370
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: LD_INT 6
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 5
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// tmp := tmp ^ un ;
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: LD_VAR 0 4
10349: PUSH
10350: LD_VAR 0 5
10354: ADD
10355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 6
10365: PPUSH
10366: CALL_OW 52
// end ; end ;
10370: GO 10127
10372: POP
10373: POP
// if tmp then
10374: LD_VAR 0 4
10378: IFFALSE 10442
// begin CenterNowOnUnits ( tmp ) ;
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10389: LD_VAR 0 4
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DAR-1
10400: PPUSH
10401: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10405: LD_EXP 9
10409: PPUSH
10410: LD_STRING D
10412: PUSH
10413: LD_STRING I
10415: PUSH
10416: LD_STRING J
10418: PUSH
10419: LD_STRING S
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_EXP 25
10431: ARRAY
10432: STR
10433: PUSH
10434: LD_STRING -1-DAR
10436: STR
10437: PPUSH
10438: CALL_OW 88
// end ; if not reinforceAllowed then
10442: LD_EXP 24
10446: NOT
10447: IFFALSE 10451
// exit ;
10449: GO 10605
// wait ( 25 25$00 ) ;
10451: LD_INT 52500
10453: PPUSH
10454: CALL_OW 67
// uc_side := 1 ;
10458: LD_ADDR_OWVAR 20
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// uc_nation := 1 ;
10466: LD_ADDR_OWVAR 21
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// InitVc ;
10474: CALL_OW 20
// InitHc ;
10478: CALL_OW 19
// for i = 1 to 4 do
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_INT 4
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10603
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10498: LD_INT 5
10500: PPUSH
10501: LD_INT 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 6
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL 24736 0 5
// veh := CreateVehicle ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: CALL_OW 45
10526: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10527: LD_VAR 0 6
10531: PPUSH
10532: LD_INT 19
10534: PPUSH
10535: LD_INT 0
10537: PPUSH
10538: CALL 55523 0 3
// if GetControl ( veh ) = control_manual then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 263
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: IFFALSE 10601
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: LD_INT 7
10565: PUSH
10566: LD_INT 6
10568: PUSH
10569: LD_INT 5
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PUSH
10577: LD_OWVAR 67
10581: ARRAY
10582: PPUSH
10583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10587: CALL_OW 44
10591: PPUSH
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 52
// end ; end ;
10601: GO 10495
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 1
10609: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// uc_side := 8 ;
10617: LD_ADDR_OWVAR 20
10621: PUSH
10622: LD_INT 8
10624: ST_TO_ADDR
// uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// for i = 1 to 2 do
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: DOUBLE
10639: LD_INT 1
10641: DEC
10642: ST_TO_ADDR
10643: LD_INT 2
10645: PUSH
10646: FOR_TO
10647: IFFALSE 10727
// for j = 1 to 4 do
10649: LD_ADDR_VAR 0 4
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_INT 4
10661: PUSH
10662: FOR_TO
10663: IFFALSE 10723
// begin PrepareHuman ( false , j , 8 ) ;
10665: LD_INT 0
10667: PPUSH
10668: LD_VAR 0 4
10672: PPUSH
10673: LD_INT 8
10675: PPUSH
10676: CALL_OW 380
// un := CreateHuman ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: CALL_OW 44
10689: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 23
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// tmp := tmp union un ;
10705: LD_ADDR_VAR 0 5
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: LD_VAR 0 3
10719: UNION
10720: ST_TO_ADDR
// end ;
10721: GO 10662
10723: POP
10724: POP
10725: GO 10646
10727: POP
10728: POP
// for i in tmp do
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 5
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10759
// ComMoveXY ( i , 150 , 136 ) ;
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 150
10749: PPUSH
10750: LD_INT 136
10752: PPUSH
10753: CALL_OW 111
10757: GO 10739
10759: POP
10760: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10761: LD_ADDR_EXP 50
10765: PUSH
10766: LD_EXP 50
10770: PPUSH
10771: LD_EXP 6
10775: PPUSH
10776: LD_EXP 50
10780: PUSH
10781: LD_EXP 6
10785: ARRAY
10786: PUSH
10787: LD_VAR 0 5
10791: UNION
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10803: LD_OWVAR 67
10807: PUSH
10808: LD_INT 1
10810: GREATER
10811: PUSH
10812: LD_INT 31
10814: PPUSH
10815: LD_INT 3
10817: PPUSH
10818: CALL_OW 321
10822: PUSH
10823: LD_INT 2
10825: EQUAL
10826: AND
10827: IFFALSE 11044
10829: GO 10831
10831: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10832: LD_EXP 7
10836: PPUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 159
10845: PUSH
10846: LD_INT 5
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 33
10857: PUSH
10858: LD_INT 105
10860: PUSH
10861: LD_INT 158
10863: PUSH
10864: LD_INT 5
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 96
10878: PUSH
10879: LD_INT 136
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 33
10893: PUSH
10894: LD_INT 94
10896: PUSH
10897: LD_INT 133
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 84
10914: PUSH
10915: LD_INT 102
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL 83707 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10938: LD_EXP 8
10942: PPUSH
10943: LD_INT 33
10945: PUSH
10946: LD_INT 50
10948: PUSH
10949: LD_INT 17
10951: PUSH
10952: LD_INT 4
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 33
10963: PUSH
10964: LD_INT 52
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 33
10981: PUSH
10982: LD_INT 53
10984: PUSH
10985: LD_INT 23
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 33
10999: PUSH
11000: LD_INT 45
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 33
11017: PUSH
11018: LD_INT 45
11020: PUSH
11021: LD_INT 39
11023: PUSH
11024: LD_INT 4
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL 83707 0 2
// end ;
11044: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
11045: LD_INT 3
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_OWVAR 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 33
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 50
11076: PUSH
11077: EMPTY
11078: LIST
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_INT 61
11085: PUSH
11086: EMPTY
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: IFFALSE 11203
11105: GO 11107
11107: DISABLE
11108: LD_INT 0
11110: PPUSH
11111: PPUSH
// begin enable ;
11112: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_OWVAR 2
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 33
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 50
11149: PUSH
11150: EMPTY
11151: LIST
11152: PUSH
11153: LD_INT 3
11155: PUSH
11156: LD_INT 61
11158: PUSH
11159: EMPTY
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: ST_TO_ADDR
// for i in tmp do
11177: LD_ADDR_VAR 0 1
11181: PUSH
11182: LD_VAR 0 2
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11201
// Connect ( i ) ;
11190: LD_VAR 0 1
11194: PPUSH
11195: CALL 27829 0 1
11199: GO 11187
11201: POP
11202: POP
// end ; end_of_file
11203: PPOPN 2
11205: END
// export function Action ; var i , tmp ; begin
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
11210: PPUSH
// InGameOn ;
11211: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
11215: LD_INT 225
11217: PPUSH
11218: LD_INT 217
11220: PPUSH
11221: CALL_OW 86
// for i in playerForces [ 2 ] do
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_EXP 10
11234: PUSH
11235: LD_INT 2
11237: ARRAY
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11373
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
11242: LD_EXP 10
11246: PUSH
11247: LD_INT 1
11249: ARRAY
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: CALL_OW 257
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: AND
11272: IFFALSE 11356
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
11274: LD_EXP 10
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 1
11285: ARRAY
11286: PPUSH
11287: LD_INT 19
11289: PPUSH
11290: LD_INT 0
11292: PPUSH
11293: CALL 55523 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_EXP 10
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: PPUSH
11315: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
11319: LD_ADDR_EXP 10
11323: PUSH
11324: LD_EXP 10
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_EXP 10
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 3
11348: PPUSH
11349: CALL_OW 1
11353: ST_TO_ADDR
// end else
11354: GO 11371
// PlaceUnitInArea ( i , startArea , false ) ;
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_INT 19
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL 55523 0 3
// end ;
11371: GO 11239
11373: POP
11374: POP
// wait ( 0 0$2 ) ;
11375: LD_INT 70
11377: PPUSH
11378: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
11382: LD_EXP 9
11386: PPUSH
11387: LD_STRING D
11389: PUSH
11390: LD_STRING I
11392: PUSH
11393: LD_STRING J
11395: PUSH
11396: LD_STRING S
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_EXP 25
11408: ARRAY
11409: STR
11410: PUSH
11411: LD_STRING -1
11413: STR
11414: PPUSH
11415: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
11419: LD_EXP 12
11423: PPUSH
11424: LD_STRING DP-1
11426: PPUSH
11427: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
11431: LD_EXP 12
11435: PPUSH
11436: LD_STRING DP-2
11438: PPUSH
11439: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
11443: LD_EXP 9
11447: PPUSH
11448: LD_STRING D
11450: PUSH
11451: LD_STRING I
11453: PUSH
11454: LD_STRING J
11456: PUSH
11457: LD_STRING S
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_EXP 25
11469: ARRAY
11470: STR
11471: PUSH
11472: LD_STRING -2
11474: STR
11475: PPUSH
11476: CALL_OW 88
// InGameOff ;
11480: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
11484: LD_STRING O1
11486: PPUSH
11487: CALL_OW 337
// game := true ;
11491: LD_ADDR_EXP 3
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// SaveForQuickRestart ;
11499: CALL_OW 22
// wait ( 0 0$5 ) ;
11503: LD_INT 175
11505: PPUSH
11506: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11510: LD_EXP 9
11514: PPUSH
11515: LD_STRING D
11517: PUSH
11518: LD_STRING I
11520: PUSH
11521: LD_STRING J
11523: PUSH
11524: LD_STRING S
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: LD_EXP 25
11536: ARRAY
11537: STR
11538: PUSH
11539: LD_STRING -3
11541: STR
11542: PPUSH
11543: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11547: LD_INT 35
11549: PPUSH
11550: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11554: LD_EXP 15
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PUSH
11563: LD_EXP 15
11567: PUSH
11568: LD_INT 2
11570: ARRAY
11571: GREATEREQUAL
11572: IFFALSE 11547
// outpostEscape := true ;
11574: LD_ADDR_EXP 27
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_EXP 14
11591: PPUSH
11592: LD_INT 26
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 72
11606: ST_TO_ADDR
// if tmp then
11607: LD_VAR 0 3
11611: IFFALSE 11629
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: PPUSH
11622: LD_STRING DR-1-Escape
11624: PPUSH
11625: CALL_OW 88
// wait ( 0 0$1 ) ;
11629: LD_INT 35
11631: PPUSH
11632: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11636: LD_EXP 9
11640: PPUSH
11641: LD_STRING D
11643: PUSH
11644: LD_STRING I
11646: PUSH
11647: LD_STRING J
11649: PUSH
11650: LD_STRING S
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_EXP 25
11662: ARRAY
11663: STR
11664: PUSH
11665: LD_STRING -1-Escape
11667: STR
11668: PPUSH
11669: CALL_OW 88
// for i in ruOutpost do
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_EXP 14
11682: PUSH
11683: FOR_IN
11684: IFFALSE 11738
// begin if IsInUnit ( i ) then
11686: LD_VAR 0 2
11690: PPUSH
11691: CALL_OW 310
11695: IFFALSE 11706
// ComExitBuilding ( i ) ;
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11706: LD_VAR 0 2
11710: PPUSH
11711: LD_INT 179
11713: PPUSH
11714: LD_INT 102
11716: PPUSH
11717: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 28
11728: PPUSH
11729: LD_INT 20
11731: PPUSH
11732: CALL_OW 171
// end ;
11736: GO 11683
11738: POP
11739: POP
// tmp := [ ] ;
11740: LD_ADDR_VAR 0 3
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11747: LD_INT 35
11749: PPUSH
11750: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11754: LD_ADDR_VAR 0 3
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 95
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: ST_TO_ADDR
// if tmp then
11779: LD_VAR 0 3
11783: IFFALSE 11862
// for i in tmp do
11785: LD_ADDR_VAR 0 2
11789: PUSH
11790: LD_VAR 0 3
11794: PUSH
11795: FOR_IN
11796: IFFALSE 11860
// begin ruOutpost := ruOutpost diff i ;
11798: LD_ADDR_EXP 14
11802: PUSH
11803: LD_EXP 14
11807: PUSH
11808: LD_VAR 0 2
11812: DIFF
11813: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11814: LD_ADDR_EXP 50
11818: PUSH
11819: LD_EXP 50
11823: PPUSH
11824: LD_EXP 8
11828: PUSH
11829: LD_EXP 50
11833: PUSH
11834: LD_EXP 8
11838: ARRAY
11839: PUSH
11840: LD_INT 1
11842: PLUS
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL 24858 0 3
11857: ST_TO_ADDR
// end ;
11858: GO 11795
11860: POP
11861: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11862: LD_EXP 14
11866: PPUSH
11867: LD_INT 21
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 72
11881: NOT
11882: IFFALSE 11747
// ruOutpost := [ ] ;
11884: LD_ADDR_EXP 14
11888: PUSH
11889: EMPTY
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11896: LD_EXP 27
11900: IFFALSE 12089
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11909: LD_INT 875
11911: PPUSH
11912: LD_INT 1225
11914: PPUSH
11915: CALL_OW 12
11919: PPUSH
11920: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 208
11931: PUSH
11932: LD_INT 166
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 218
11941: PUSH
11942: LD_INT 174
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 201
11951: PUSH
11952: LD_INT 173
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 189
11961: PUSH
11962: LD_INT 167
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 191
11971: PUSH
11972: LD_INT 160
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 209
11981: PUSH
11982: LD_INT 181
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 192
11991: PUSH
11992: LD_INT 162
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 197
12001: PUSH
12002: LD_INT 166
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: DOUBLE
12025: LD_INT 1
12027: DEC
12028: ST_TO_ADDR
12029: LD_INT 5
12031: PUSH
12032: LD_OWVAR 67
12036: PLUS
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12087
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
12041: LD_VAR 0 2
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PUSH
12052: LD_INT 1
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_VAR 0 1
12065: ARRAY
12066: PUSH
12067: LD_INT 2
12069: ARRAY
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 453
// wait ( 0 0$0.8 ) ;
12078: LD_INT 28
12080: PPUSH
12081: CALL_OW 67
// end ;
12085: GO 12038
12087: POP
12088: POP
// end ;
12089: PPOPN 2
12091: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
12092: LD_EXP 27
12096: NOT
12097: IFFALSE 12751
12099: GO 12101
12101: DISABLE
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
// begin enable ;
12111: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
12112: LD_ADDR_VAR 0 1
12116: PUSH
12117: LD_EXP 14
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 25
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 72
12150: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: LD_EXP 14
12160: PPUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 72
12189: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12190: LD_ADDR_VAR 0 3
12194: PUSH
12195: LD_EXP 14
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 3
12222: PUSH
12223: LD_INT 24
12225: PUSH
12226: LD_INT 1000
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 72
12246: ST_TO_ADDR
// if engs and buildings then
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 3
12256: AND
12257: IFFALSE 12330
// begin for i in engs do
12259: LD_ADDR_VAR 0 5
12263: PUSH
12264: LD_VAR 0 2
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12326
// if IsInUnit ( i ) then
12272: LD_VAR 0 5
12276: PPUSH
12277: CALL_OW 310
12281: IFFALSE 12294
// ComExitBuilding ( i ) else
12283: LD_VAR 0 5
12287: PPUSH
12288: CALL_OW 122
12292: GO 12324
// if not HasTask ( i ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: CALL_OW 314
12303: NOT
12304: IFFALSE 12324
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
12306: LD_VAR 0 5
12310: PPUSH
12311: LD_VAR 0 3
12315: PUSH
12316: LD_INT 1
12318: ARRAY
12319: PPUSH
12320: CALL_OW 130
12324: GO 12269
12326: POP
12327: POP
// end else
12328: GO 12433
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
12330: LD_VAR 0 3
12334: NOT
12335: PUSH
12336: LD_EXP 14
12340: PPUSH
12341: LD_INT 30
12343: PUSH
12344: LD_INT 0
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 72
12355: AND
12356: PUSH
12357: LD_VAR 0 2
12361: PPUSH
12362: LD_INT 3
12364: PUSH
12365: LD_INT 54
12367: PUSH
12368: EMPTY
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 72
12379: AND
12380: IFFALSE 12433
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
12382: LD_VAR 0 2
12386: PPUSH
12387: LD_INT 3
12389: PUSH
12390: LD_INT 54
12392: PUSH
12393: EMPTY
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 72
12404: PPUSH
12405: LD_EXP 14
12409: PPUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PPUSH
12420: CALL_OW 72
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 120
// if not tmp then
12433: LD_VAR 0 1
12437: NOT
12438: IFFALSE 12442
// exit ;
12440: GO 12751
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
12442: LD_INT 26
12444: PPUSH
12445: LD_INT 81
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 70
12459: PUSH
12460: LD_INT 1
12462: GREATER
12463: IFFALSE 12519
// begin for i in tmp do
12465: LD_ADDR_VAR 0 5
12469: PUSH
12470: LD_VAR 0 1
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12515
// begin if IsInUnit ( i ) then
12478: LD_VAR 0 5
12482: PPUSH
12483: CALL_OW 310
12487: IFFALSE 12498
// ComExitBuilding ( i ) ;
12489: LD_VAR 0 5
12493: PPUSH
12494: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
12498: LD_VAR 0 5
12502: PPUSH
12503: LD_INT 204
12505: PPUSH
12506: LD_INT 164
12508: PPUSH
12509: CALL_OW 174
// end ;
12513: GO 12475
12515: POP
12516: POP
// end else
12517: GO 12751
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12519: LD_VAR 0 1
12523: PPUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 54
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: IFFALSE 12751
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12543: LD_ADDR_VAR 0 4
12547: PUSH
12548: LD_EXP 14
12552: PPUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 32
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 58
12565: PUSH
12566: EMPTY
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 72
12577: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12578: LD_VAR 0 4
12582: NOT
12583: PUSH
12584: LD_EXP 14
12588: PPUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 5
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: AND
12604: IFFALSE 12641
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12606: LD_VAR 0 1
12610: PPUSH
12611: LD_EXP 14
12615: PPUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 5
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 72
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: CALL_OW 120
// exit ;
12639: GO 12751
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12641: LD_ADDR_VAR 0 6
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 3
12653: PUSH
12654: LD_INT 54
12656: PUSH
12657: EMPTY
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 72
12668: ST_TO_ADDR
// if j < empty then
12669: LD_VAR 0 6
12673: PUSH
12674: LD_VAR 0 4
12678: LESS
12679: IFFALSE 12693
// k := j else
12681: LD_ADDR_VAR 0 7
12685: PUSH
12686: LD_VAR 0 6
12690: ST_TO_ADDR
12691: GO 12703
// k := empty ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_VAR 0 4
12702: ST_TO_ADDR
// for i = 1 to k do
12703: LD_ADDR_VAR 0 5
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 7
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12749
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12721: LD_VAR 0 6
12725: PUSH
12726: LD_VAR 0 5
12730: ARRAY
12731: PPUSH
12732: LD_VAR 0 4
12736: PUSH
12737: LD_VAR 0 5
12741: ARRAY
12742: PPUSH
12743: CALL_OW 120
12747: GO 12718
12749: POP
12750: POP
// end ; end ;
12751: PPOPN 7
12753: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12754: LD_EXP 2
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: PUSH
12763: LD_EXP 27
12767: AND
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 92
12781: PUSH
12782: LD_INT 208
12784: PUSH
12785: LD_INT 163
12787: PUSH
12788: LD_INT 8
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: AND
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 92
12829: PUSH
12830: LD_INT 208
12832: PUSH
12833: LD_INT 163
12835: PUSH
12836: LD_INT 14
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: NOT
12855: AND
12856: IFFALSE 13161
12858: GO 12860
12860: DISABLE
12861: LD_INT 0
12863: PPUSH
// begin InGameOn ;
12864: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12868: LD_EXP 9
12872: PPUSH
12873: CALL_OW 87
// wait ( 0 0$1 ) ;
12877: LD_INT 35
12879: PPUSH
12880: CALL_OW 67
// DialogueOn ;
12884: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12888: LD_EXP 9
12892: PPUSH
12893: LD_STRING D
12895: PUSH
12896: LD_STRING I
12898: PUSH
12899: LD_STRING J
12901: PUSH
12902: LD_STRING S
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_EXP 25
12914: ARRAY
12915: STR
12916: PUSH
12917: LD_STRING -1-BaseCaptured
12919: STR
12920: PPUSH
12921: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12925: LD_EXP 12
12929: PPUSH
12930: LD_STRING DP-1-BaseCaptured
12932: PPUSH
12933: CALL_OW 94
// if sibBombAllowed then
12937: LD_EXP 23
12941: IFFALSE 13083
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12943: LD_EXP 9
12947: PPUSH
12948: LD_STRING D
12950: PUSH
12951: LD_STRING I
12953: PUSH
12954: LD_STRING J
12956: PUSH
12957: LD_STRING S
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_EXP 25
12969: ARRAY
12970: STR
12971: PUSH
12972: LD_STRING -2-BaseCaptured
12974: STR
12975: PPUSH
12976: CALL_OW 88
// if commander = 1 then
12980: LD_EXP 25
12984: PUSH
12985: LD_INT 1
12987: EQUAL
12988: IFFALSE 13002
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12990: LD_EXP 12
12994: PPUSH
12995: LD_STRING DP-2b-BaseCaptured
12997: PPUSH
12998: CALL_OW 94
// if commander = 2 then
13002: LD_EXP 25
13006: PUSH
13007: LD_INT 2
13009: EQUAL
13010: IFFALSE 13024
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
13012: LD_EXP 12
13016: PPUSH
13017: LD_STRING DP-2-BaseCaptured
13019: PPUSH
13020: CALL_OW 94
// if commander = 3 then
13024: LD_EXP 25
13028: PUSH
13029: LD_INT 3
13031: EQUAL
13032: IFFALSE 13046
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
13034: LD_EXP 12
13038: PPUSH
13039: LD_STRING DP-2a-BaseCaptured
13041: PPUSH
13042: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
13046: LD_EXP 9
13050: PPUSH
13051: LD_STRING D
13053: PUSH
13054: LD_STRING I
13056: PUSH
13057: LD_STRING J
13059: PUSH
13060: LD_STRING S
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_EXP 25
13072: ARRAY
13073: STR
13074: PUSH
13075: LD_STRING -3-BaseCaptured
13077: STR
13078: PPUSH
13079: CALL_OW 88
// end ; DialogueOff ;
13083: CALL_OW 7
// InGameOff ;
13087: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
13091: LD_STRING O2
13093: PPUSH
13094: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
13098: LD_ADDR_VAR 0 1
13102: PUSH
13103: LD_EXP 14
13107: PPUSH
13108: LD_INT 21
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 72
13122: PUSH
13123: FOR_IN
13124: IFFALSE 13140
// SetSide ( i , 1 ) ;
13126: LD_VAR 0 1
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 235
13138: GO 13123
13140: POP
13141: POP
// baseCaptured := true ;
13142: LD_ADDR_EXP 17
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// wait ( 0 0$35 ) ;
13150: LD_INT 1225
13152: PPUSH
13153: CALL_OW 67
// PrepareReinforcements ;
13157: CALL 9910 0 0
// end ;
13161: PPOPN 1
13163: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
13164: LD_INT 22
13166: PUSH
13167: LD_INT 3
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 92
13176: PUSH
13177: LD_INT 167
13179: PUSH
13180: LD_INT 197
13182: PUSH
13183: LD_INT 20
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: PUSH
13201: LD_INT 3
13203: GREATER
13204: IFFALSE 13221
13206: GO 13208
13208: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
13209: LD_EXP 12
13213: PPUSH
13214: LD_STRING DP-RuAttack
13216: PPUSH
13217: CALL_OW 94
13221: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
13222: LD_EXP 1
13226: NOT
13227: PUSH
13228: LD_INT 1
13230: PPUSH
13231: LD_INT 168
13233: PPUSH
13234: LD_INT 74
13236: PPUSH
13237: CALL_OW 293
13241: AND
13242: PUSH
13243: LD_INT 168
13245: PPUSH
13246: LD_INT 72
13248: PPUSH
13249: CALL_OW 553
13253: AND
13254: IFFALSE 13306
13256: GO 13258
13258: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
13259: LD_INT 168
13261: PPUSH
13262: LD_INT 72
13264: PPUSH
13265: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING D
13276: PUSH
13277: LD_STRING I
13279: PUSH
13280: LD_STRING J
13282: PUSH
13283: LD_STRING S
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_EXP 25
13295: ARRAY
13296: STR
13297: PUSH
13298: LD_STRING -1-Blockade
13300: STR
13301: PPUSH
13302: CALL_OW 88
// end ;
13306: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
13307: LD_EXP 2
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 101
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: AND
13345: IFFALSE 13877
13347: GO 13349
13349: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
13350: LD_INT 4
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 343
// DialogueOn ;
13360: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
13364: LD_EXP 11
13368: PPUSH
13369: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
13373: LD_EXP 11
13377: PPUSH
13378: LD_STRING DM-1-Contact
13380: PPUSH
13381: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
13385: LD_EXP 9
13389: PPUSH
13390: LD_STRING D
13392: PUSH
13393: LD_STRING I
13395: PUSH
13396: LD_STRING J
13398: PUSH
13399: LD_STRING S
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: LD_EXP 25
13411: ARRAY
13412: STR
13413: PUSH
13414: LD_STRING -1-Contact
13416: STR
13417: PPUSH
13418: CALL_OW 88
// if commander = 1 then
13422: LD_EXP 25
13426: PUSH
13427: LD_INT 1
13429: EQUAL
13430: IFFALSE 13562
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
13432: LD_EXP 11
13436: PPUSH
13437: LD_STRING DM-2-Contact
13439: PPUSH
13440: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
13444: LD_EXP 9
13448: PPUSH
13449: LD_STRING DI-2-Contact
13451: PPUSH
13452: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13456: LD_INT 22
13458: PUSH
13459: LD_INT 8
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 21
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_INT 8
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 81
13495: PUSH
13496: LD_INT 2
13498: EQUAL
13499: AND
13500: IFFALSE 13526
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13502: LD_EXP 11
13506: PPUSH
13507: LD_STRING DM-3-Contact
13509: PPUSH
13510: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13514: LD_EXP 9
13518: PPUSH
13519: LD_STRING DI-3-Contact
13521: PPUSH
13522: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13526: LD_EXP 11
13530: PPUSH
13531: LD_STRING DM-4-Contact
13533: PPUSH
13534: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13538: LD_EXP 9
13542: PPUSH
13543: LD_STRING DI-4-Contact
13545: PPUSH
13546: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13550: LD_EXP 11
13554: PPUSH
13555: LD_STRING DM-5-Contact
13557: PPUSH
13558: CALL_OW 94
// end ; if commander = 2 then
13562: LD_EXP 25
13566: PUSH
13567: LD_INT 2
13569: EQUAL
13570: IFFALSE 13702
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13572: LD_EXP 11
13576: PPUSH
13577: LD_STRING DM-2c-Contact
13579: PPUSH
13580: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13584: LD_EXP 9
13588: PPUSH
13589: LD_STRING DJ-2-Contact
13591: PPUSH
13592: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13596: LD_INT 22
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_INT 8
13627: PPUSH
13628: LD_INT 1
13630: PPUSH
13631: CALL_OW 81
13635: PUSH
13636: LD_INT 2
13638: EQUAL
13639: AND
13640: IFFALSE 13666
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13642: LD_EXP 11
13646: PPUSH
13647: LD_STRING DM-3-Contact
13649: PPUSH
13650: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13654: LD_EXP 9
13658: PPUSH
13659: LD_STRING DJ-3-Contact
13661: PPUSH
13662: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13666: LD_EXP 11
13670: PPUSH
13671: LD_STRING DM-4-Contact
13673: PPUSH
13674: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13678: LD_EXP 9
13682: PPUSH
13683: LD_STRING DJ-4-Contact
13685: PPUSH
13686: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13690: LD_EXP 11
13694: PPUSH
13695: LD_STRING DM-5a-Contact
13697: PPUSH
13698: CALL_OW 94
// end ; if commander = 3 then
13702: LD_EXP 25
13706: PUSH
13707: LD_INT 3
13709: EQUAL
13710: IFFALSE 13866
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13712: LD_EXP 11
13716: PPUSH
13717: LD_STRING DM-2a-Contact
13719: PPUSH
13720: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13724: LD_EXP 9
13728: PPUSH
13729: LD_STRING DS-2a-Contact
13731: PPUSH
13732: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13736: LD_EXP 11
13740: PPUSH
13741: LD_STRING DM-2b-Contact
13743: PPUSH
13744: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13748: LD_EXP 9
13752: PPUSH
13753: LD_STRING DS-2b-Contact
13755: PPUSH
13756: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13760: LD_INT 22
13762: PUSH
13763: LD_INT 8
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: PUSH
13789: LD_INT 8
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 81
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: AND
13804: IFFALSE 13830
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING DM-3-Contact
13813: PPUSH
13814: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13818: LD_EXP 9
13822: PPUSH
13823: LD_STRING DS-3-Contact
13825: PPUSH
13826: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13830: LD_EXP 11
13834: PPUSH
13835: LD_STRING DM-4-Contact
13837: PPUSH
13838: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13842: LD_EXP 9
13846: PPUSH
13847: LD_STRING DS-4-Contact
13849: PPUSH
13850: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13854: LD_EXP 11
13858: PPUSH
13859: LD_STRING DM-5-Contact
13861: PPUSH
13862: CALL_OW 94
// end ; DialogueOff ;
13866: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13870: LD_STRING O3
13872: PPUSH
13873: CALL_OW 337
// end ;
13877: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13878: LD_EXP 2
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: PUSH
13887: LD_EXP 18
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 20
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_OWVAR 67
13910: ARRAY
13911: GREATEREQUAL
13912: AND
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 8
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 8
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 69
13972: PUSH
13973: LD_INT 5
13975: GREATEREQUAL
13976: AND
13977: IFFALSE 14500
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
// begin DialogueOn ;
13988: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13992: LD_EXP 13
13996: PPUSH
13997: LD_STRING DF-1-Leg
13999: PPUSH
14000: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
14004: LD_EXP 9
14008: PPUSH
14009: LD_STRING D
14011: PUSH
14012: LD_STRING I
14014: PUSH
14015: LD_STRING J
14017: PUSH
14018: LD_STRING S
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_EXP 25
14030: ARRAY
14031: STR
14032: PUSH
14033: LD_STRING -1-Leg
14035: STR
14036: PPUSH
14037: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
14041: LD_EXP 13
14045: PPUSH
14046: LD_STRING DF-2-Leg
14048: PPUSH
14049: CALL_OW 94
// DialogueOff ;
14053: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
14057: LD_STRING QLegionOffer
14059: PPUSH
14060: CALL_OW 97
14064: PUSH
14065: LD_INT 1
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14076
14073: POP
// ; 2 :
14074: GO 14090
14076: LD_INT 2
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14089
14084: POP
// exit ; end ;
14085: GO 14500
14087: GO 14090
14089: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
14090: LD_EXP 9
14094: PPUSH
14095: LD_STRING D
14097: PUSH
14098: LD_STRING I
14100: PUSH
14101: LD_STRING J
14103: PUSH
14104: LD_STRING S
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: LD_EXP 25
14116: ARRAY
14117: STR
14118: PUSH
14119: LD_STRING -2-Leg
14121: STR
14122: PPUSH
14123: CALL_OW 88
// legOfferAccepted := true ;
14127: LD_ADDR_EXP 20
14131: PUSH
14132: LD_INT 1
14134: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
14135: LD_INT 21
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
14145: LD_INT 190
14147: PPUSH
14148: LD_INT 227
14150: PPUSH
14151: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 16800
14162: PUSH
14163: LD_INT 14700
14165: PUSH
14166: LD_INT 12600
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_OWVAR 67
14178: ARRAY
14179: ST_TO_ADDR
// sib := 100 ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_INT 100
14187: ST_TO_ADDR
// disableGlobalTimer := true ;
14188: LD_ADDR_EXP 4
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14196: LD_INT 35
14198: PPUSH
14199: CALL_OW 67
// time := time - 0 0$1 ;
14203: LD_ADDR_VAR 0 1
14207: PUSH
14208: LD_VAR 0 1
14212: PUSH
14213: LD_INT 35
14215: MINUS
14216: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 21
14224: PPUSH
14225: LD_INT 3
14227: PPUSH
14228: CALL_OW 287
14232: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
14233: LD_ADDR_OWVAR 47
14237: PUSH
14238: LD_STRING #SkrTime
14240: PUSH
14241: LD_OWVAR 1
14245: PUSH
14246: LD_STRING #Skr-LegOffer
14248: PUSH
14249: LD_VAR 0 2
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
// if sources then
14266: LD_VAR 0 3
14270: IFFALSE 14302
// begin sib := sib - sources * 10 ;
14272: LD_ADDR_VAR 0 2
14276: PUSH
14277: LD_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 10
14289: MUL
14290: MINUS
14291: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
14292: LD_INT 21
14294: PPUSH
14295: LD_INT 3
14297: PPUSH
14298: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 0
14309: EQUAL
14310: PUSH
14311: LD_VAR 0 2
14315: PUSH
14316: LD_INT 0
14318: LESSEQUAL
14319: OR
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 8
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: OR
14337: IFFALSE 14196
// SetAreaMapShow ( legOfferArea , 0 ) ;
14339: LD_INT 21
14341: PPUSH
14342: LD_INT 0
14344: PPUSH
14345: CALL_OW 424
// disableGlobalTimer := false ;
14349: LD_ADDR_EXP 4
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// if sib <= 0 then
14357: LD_VAR 0 2
14361: PUSH
14362: LD_INT 0
14364: LESSEQUAL
14365: IFFALSE 14481
// begin legChangeSide := true ;
14367: LD_ADDR_EXP 21
14371: PUSH
14372: LD_INT 1
14374: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
14375: LD_EXP 13
14379: PPUSH
14380: LD_STRING DF-4y-Leg
14382: PPUSH
14383: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
14387: LD_STRING O3a
14389: PPUSH
14390: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
14394: LD_INT 8
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
14404: LD_INT 8
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
14420: LD_INT 8
14422: PPUSH
14423: LD_INT 4
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
14436: LD_INT 8
14438: PPUSH
14439: LD_INT 6
14441: PPUSH
14442: LD_INT 2
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
14452: LD_INT 8
14454: PPUSH
14455: LD_INT 3
14457: PPUSH
14458: LD_INT 2
14460: PPUSH
14461: LD_INT 1
14463: PPUSH
14464: CALL_OW 80
// wait ( 0 0$30 ) ;
14468: LD_INT 1050
14470: PPUSH
14471: CALL_OW 67
// PrepareLegionReinforcements ;
14475: CALL 10610 0 0
// end else
14479: GO 14500
// begin ChangeMissionObjectives ( O3a ) ;
14481: LD_STRING O3a
14483: PPUSH
14484: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
14488: LD_EXP 13
14492: PPUSH
14493: LD_STRING DF-4n-Leg
14495: PPUSH
14496: CALL_OW 94
// end ; end ;
14500: PPOPN 4
14502: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14503: LD_INT 22
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PPUSH
14527: CALL_OW 69
14531: PUSH
14532: LD_INT 0
14534: EQUAL
14535: PUSH
14536: LD_INT 8
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 81
14546: PUSH
14547: LD_INT 2
14549: EQUAL
14550: AND
14551: IFFALSE 14563
14553: GO 14555
14555: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14556: LD_STRING O3a
14558: PPUSH
14559: CALL_OW 337
14563: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14564: LD_EXP 2
14568: PUSH
14569: LD_INT 1
14571: EQUAL
14572: PUSH
14573: LD_EXP 3
14577: AND
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: LD_INT 0
14644: EQUAL
14645: AND
14646: IFFALSE 14884
14648: GO 14650
14650: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14651: LD_EXP 9
14655: PPUSH
14656: LD_STRING D
14658: PUSH
14659: LD_STRING I
14661: PUSH
14662: LD_STRING J
14664: PUSH
14665: LD_STRING S
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_EXP 25
14677: ARRAY
14678: STR
14679: PUSH
14680: LD_STRING -1-Win
14682: STR
14683: PPUSH
14684: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14688: LD_OWVAR 1
14692: PUSH
14693: LD_INT 315000
14695: PUSH
14696: LD_INT 273000
14698: PUSH
14699: LD_INT 231000
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_OWVAR 67
14711: ARRAY
14712: GREATEREQUAL
14713: IFFALSE 14728
// AddMedal ( med1 , - 1 ) else
14715: LD_STRING med1
14717: PPUSH
14718: LD_INT 1
14720: NEG
14721: PPUSH
14722: CALL_OW 101
14726: GO 14738
// AddMedal ( med1 , 1 ) ;
14728: LD_STRING med1
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14738: LD_EXP 22
14742: PUSH
14743: LD_INT 20
14745: PUSH
14746: LD_INT 15
14748: PUSH
14749: LD_INT 10
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: GREATEREQUAL
14763: IFFALSE 14778
// AddMedal ( med2 , - 1 ) else
14765: LD_STRING med2
14767: PPUSH
14768: LD_INT 1
14770: NEG
14771: PPUSH
14772: CALL_OW 101
14776: GO 14788
// AddMedal ( med2 , 1 ) ;
14778: LD_STRING med2
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14788: LD_INT 8
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 81
14798: PUSH
14799: LD_INT 1
14801: EQUAL
14802: IFFALSE 14816
// AddMedal ( med3 , 1 ) else
14804: LD_STRING med3
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 101
14814: GO 14873
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14816: LD_INT 22
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 21
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: LD_INT 0
14847: EQUAL
14848: IFFALSE 14862
// AddMedal ( med3 , 2 ) else
14850: LD_STRING med3
14852: PPUSH
14853: LD_INT 2
14855: PPUSH
14856: CALL_OW 101
14860: GO 14873
// AddMedal ( med3 , - 1 ) ;
14862: LD_STRING med3
14864: PPUSH
14865: LD_INT 1
14867: NEG
14868: PPUSH
14869: CALL_OW 101
// GiveMedals ( MAIN ) ;
14873: LD_STRING MAIN
14875: PPUSH
14876: CALL_OW 102
// YouWin ;
14880: CALL_OW 103
// end ;
14884: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14885: LD_EXP 2
14889: PUSH
14890: LD_INT 1
14892: EQUAL
14893: PUSH
14894: LD_EXP 16
14898: AND
14899: PUSH
14900: LD_INT 20
14902: PPUSH
14903: LD_INT 81
14905: PUSH
14906: LD_INT 8
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: AND
14918: IFFALSE 15197
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
14929: PPUSH
// begin enable ;
14930: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 20
14938: PPUSH
14939: LD_INT 81
14941: PUSH
14942: LD_INT 8
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 70
14953: ST_TO_ADDR
// if not tmp then
14954: LD_VAR 0 3
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 15197
// for i in tmp do
14963: LD_ADDR_VAR 0 1
14967: PUSH
14968: LD_VAR 0 3
14972: PUSH
14973: FOR_IN
14974: IFFALSE 15195
// begin x := GetX ( i ) ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 250
14990: ST_TO_ADDR
// y := GetY ( i ) ;
14991: LD_ADDR_VAR 0 5
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 251
15005: ST_TO_ADDR
// if MineAtPos ( x , y ) then
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_VAR 0 5
15015: PPUSH
15016: CALL_OW 458
15020: IFFALSE 15193
// begin LaunchMineAtPos ( x , y , 8 ) ;
15022: LD_VAR 0 4
15026: PPUSH
15027: LD_VAR 0 5
15031: PPUSH
15032: LD_INT 8
15034: PPUSH
15035: CALL_OW 456
// if not dialogueMineDetected then
15039: LD_EXP 28
15043: NOT
15044: IFFALSE 15105
// begin CenterNowOnXY ( x , y ) ;
15046: LD_VAR 0 4
15050: PPUSH
15051: LD_VAR 0 5
15055: PPUSH
15056: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
15060: LD_EXP 9
15064: PPUSH
15065: LD_STRING D
15067: PUSH
15068: LD_STRING I
15070: PUSH
15071: LD_STRING J
15073: PUSH
15074: LD_STRING S
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: PUSH
15082: LD_EXP 25
15086: ARRAY
15087: STR
15088: PUSH
15089: LD_STRING -1-Mine
15091: STR
15092: PPUSH
15093: CALL_OW 88
// dialogueMineDetected := true ;
15097: LD_ADDR_EXP 28
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// end ; for j = 1 to staticMines do
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: DOUBLE
15111: LD_INT 1
15113: DEC
15114: ST_TO_ADDR
15115: LD_EXP 16
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15191
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
15123: LD_EXP 16
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PUSH
15138: LD_VAR 0 4
15142: EQUAL
15143: PUSH
15144: LD_EXP 16
15148: PUSH
15149: LD_VAR 0 2
15153: ARRAY
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 5
15163: EQUAL
15164: AND
15165: IFFALSE 15189
// begin staticMines := Delete ( staticMines , j ) ;
15167: LD_ADDR_EXP 16
15171: PUSH
15172: LD_EXP 16
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL_OW 3
15186: ST_TO_ADDR
// break ;
15187: GO 15191
// end ;
15189: GO 15120
15191: POP
15192: POP
// end ; end ;
15193: GO 14973
15195: POP
15196: POP
// end ;
15197: PPOPN 5
15199: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
15200: LD_EXP 2
15204: PUSH
15205: LD_INT 1
15207: EQUAL
15208: PUSH
15209: LD_EXP 3
15213: AND
15214: PUSH
15215: LD_EXP 23
15219: AND
15220: PUSH
15221: LD_EXP 50
15225: PUSH
15226: LD_EXP 7
15230: ARRAY
15231: PPUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: AND
15247: IFFALSE 15451
15249: GO 15251
15251: DISABLE
15252: LD_INT 0
15254: PPUSH
15255: PPUSH
// begin enable ;
15256: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
15257: LD_EXP 7
15261: PPUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: LD_INT 48
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: PPUSH
15283: CALL 83815 0 2
// repeat wait ( 0 0$1 ) ;
15287: LD_INT 35
15289: PPUSH
15290: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15294: LD_INT 22
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 48
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 69
15322: IFFALSE 15287
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_INT 3
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 34
15341: PUSH
15342: LD_INT 48
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 81
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: ST_TO_ADDR
// if e then
15392: LD_VAR 0 2
15396: IFFALSE 15422
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_VAR 0 2
15407: PPUSH
15408: LD_VAR 0 1
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: CALL_OW 74
15421: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_VAR 0 2
15431: PPUSH
15432: CALL_OW 250
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 251
15446: PPUSH
15447: CALL_OW 116
// end ;
15451: PPOPN 2
15453: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
15454: LD_OWVAR 67
15458: PUSH
15459: LD_INT 1
15461: GREATER
15462: PUSH
15463: LD_EXP 50
15467: PUSH
15468: LD_EXP 7
15472: ARRAY
15473: PPUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: AND
15489: PUSH
15490: LD_EXP 2
15494: PUSH
15495: LD_INT 1
15497: EQUAL
15498: AND
15499: PUSH
15500: LD_EXP 3
15504: AND
15505: PUSH
15506: LD_INT 23
15508: PPUSH
15509: LD_INT 3
15511: PPUSH
15512: CALL_OW 321
15516: PUSH
15517: LD_INT 2
15519: EQUAL
15520: AND
15521: IFFALSE 15648
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_EXP 50
15539: PUSH
15540: LD_EXP 7
15544: ARRAY
15545: PPUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 72
15560: ST_TO_ADDR
// if not tmp then
15561: LD_VAR 0 1
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15648
// for i in tmp do
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15627
// begin SetTag ( i , 29 ) ;
15583: LD_VAR 0 2
15587: PPUSH
15588: LD_INT 29
15590: PPUSH
15591: CALL_OW 109
// ComExitBuilding ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 37
15611: PPUSH
15612: LD_INT 97
15614: PPUSH
15615: LD_INT 133
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 230
// end ;
15625: GO 15580
15627: POP
15628: POP
// wait ( 1 1$00 ) ;
15629: LD_INT 2100
15631: PPUSH
15632: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15636: LD_EXP 7
15640: PPUSH
15641: LD_INT 29
15643: PPUSH
15644: CALL 63749 0 2
// end ;
15648: PPOPN 2
15650: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15651: LD_EXP 2
15655: PUSH
15656: LD_INT 1
15658: EQUAL
15659: PUSH
15660: LD_INT 84
15662: PPUSH
15663: LD_INT 128
15665: PPUSH
15666: CALL_OW 428
15670: PPUSH
15671: CALL_OW 266
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: AND
15680: PUSH
15681: LD_INT 84
15683: PPUSH
15684: LD_INT 128
15686: PPUSH
15687: CALL_OW 428
15691: PPUSH
15692: CALL_OW 255
15696: PUSH
15697: LD_INT 3
15699: EQUAL
15700: AND
15701: IFFALSE 15874
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
// begin enable ;
15710: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: LD_INT 84
15718: PPUSH
15719: LD_INT 128
15721: PPUSH
15722: CALL_OW 428
15726: ST_TO_ADDR
// uc_side := 3 ;
15727: LD_ADDR_OWVAR 20
15731: PUSH
15732: LD_INT 3
15734: ST_TO_ADDR
// uc_nation := 3 ;
15735: LD_ADDR_OWVAR 21
15739: PUSH
15740: LD_INT 3
15742: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15743: LD_INT 21
15745: PPUSH
15746: LD_INT 3
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: LD_INT 51
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL 24736 0 5
// veh := CreateVehicle ;
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: CALL_OW 45
15771: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_INT 126
15779: PPUSH
15780: LD_INT 227
15782: PPUSH
15783: LD_INT 0
15785: PPUSH
15786: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_INT 2
15797: PPUSH
15798: LD_INT 100
15800: PPUSH
15801: CALL_OW 290
// ComGive ( veh , depot ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_VAR 0 2
15814: PPUSH
15815: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 126
15826: PPUSH
15827: LD_INT 227
15829: PPUSH
15830: CALL_OW 171
// wait ( 0 0$10 ) ;
15834: LD_INT 350
15836: PPUSH
15837: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15841: LD_INT 35
15843: PPUSH
15844: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 126
15855: PPUSH
15856: LD_INT 227
15858: PPUSH
15859: CALL_OW 307
15863: IFFALSE 15841
// RemoveUnit ( veh ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 64
// end ;
15874: PPOPN 2
15876: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15877: LD_EXP 2
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: PUSH
15886: LD_EXP 27
15890: AND
15891: PUSH
15892: LD_EXP 25
15896: PUSH
15897: LD_INT 2
15899: EQUAL
15900: AND
15901: IFFALSE 16093
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin enable ;
15910: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15911: LD_OWVAR 1
15915: PUSH
15916: LD_INT 105000
15918: PUSH
15919: LD_INT 84000
15921: PUSH
15922: LD_INT 63000
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: LD_OWVAR 67
15934: ARRAY
15935: GREATEREQUAL
15936: IFFALSE 15939
// disable ;
15938: DISABLE
// uc_side := 4 ;
15939: LD_ADDR_OWVAR 20
15943: PUSH
15944: LD_INT 4
15946: ST_TO_ADDR
// uc_nation := 1 ;
15947: LD_ADDR_OWVAR 21
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15955: LD_INT 2
15957: PPUSH
15958: LD_INT 3
15960: PPUSH
15961: LD_INT 3
15963: PPUSH
15964: LD_INT 12
15966: PPUSH
15967: LD_INT 0
15969: PPUSH
15970: CALL 24736 0 5
// veh := CreateVehicle ;
15974: LD_ADDR_VAR 0 1
15978: PUSH
15979: CALL_OW 45
15983: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_INT 229
15991: PPUSH
15992: LD_INT 226
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
16002: LD_VAR 0 1
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: LD_INT 100
16012: PPUSH
16013: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: LD_INT 25
16024: PPUSH
16025: CALL_OW 173
// AddComUnload ( veh ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 229
16045: PPUSH
16046: LD_INT 226
16048: PPUSH
16049: CALL_OW 171
// wait ( 0 0$10 ) ;
16053: LD_INT 350
16055: PPUSH
16056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16060: LD_INT 35
16062: PPUSH
16063: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 229
16074: PPUSH
16075: LD_INT 226
16077: PPUSH
16078: CALL_OW 307
16082: IFFALSE 16060
// RemoveUnit ( veh ) ;
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 64
// end ;
16093: PPOPN 2
16095: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
16096: LD_EXP 2
16100: PUSH
16101: LD_INT 1
16103: EQUAL
16104: PUSH
16105: LD_EXP 3
16109: AND
16110: PUSH
16111: LD_EXP 24
16115: AND
16116: IFFALSE 16449
16118: GO 16120
16120: DISABLE
16121: LD_INT 0
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
// begin enable ;
16128: ENABLE
// tmp := [ ] ;
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: EMPTY
16135: ST_TO_ADDR
// if commander = 1 then
16136: LD_EXP 25
16140: PUSH
16141: LD_INT 1
16143: EQUAL
16144: IFFALSE 16156
// amount := 3 else
16146: LD_ADDR_VAR 0 5
16150: PUSH
16151: LD_INT 3
16153: ST_TO_ADDR
16154: GO 16164
// amount := 2 ;
16156: LD_ADDR_VAR 0 5
16160: PUSH
16161: LD_INT 2
16163: ST_TO_ADDR
// for i = 1 to amount do
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: DOUBLE
16170: LD_INT 1
16172: DEC
16173: ST_TO_ADDR
16174: LD_VAR 0 5
16178: PUSH
16179: FOR_TO
16180: IFFALSE 16344
// begin wait ( 0 0$5 ) ;
16182: LD_INT 175
16184: PPUSH
16185: CALL_OW 67
// for j = 1 to 3 do
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_INT 3
16201: PUSH
16202: FOR_TO
16203: IFFALSE 16340
// begin uc_side := 4 ;
16205: LD_ADDR_OWVAR 20
16209: PUSH
16210: LD_INT 4
16212: ST_TO_ADDR
// uc_nation := 1 ;
16213: LD_ADDR_OWVAR 21
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
16221: LD_INT 3
16223: PUSH
16224: LD_INT 5
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 3
16248: PPUSH
16249: LD_INT 9
16251: PUSH
16252: LD_INT 5
16254: PUSH
16255: LD_INT 7
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 3
16268: PPUSH
16269: CALL_OW 12
16273: ARRAY
16274: PPUSH
16275: LD_INT 100
16277: PPUSH
16278: CALL 24736 0 5
// veh := CreateVehicle ;
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: CALL_OW 45
16291: ST_TO_ADDR
// tmp := tmp ^ veh ;
16292: LD_ADDR_VAR 0 4
16296: PUSH
16297: LD_VAR 0 4
16301: PUSH
16302: LD_VAR 0 3
16306: ADD
16307: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_INT 22
16315: PPUSH
16316: LD_INT 0
16318: PPUSH
16319: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 119
16330: PPUSH
16331: LD_INT 215
16333: PPUSH
16334: CALL_OW 111
// end ;
16338: GO 16202
16340: POP
16341: POP
// end ;
16342: GO 16179
16344: POP
16345: POP
// wait ( 0 0$3 ) ;
16346: LD_INT 105
16348: PPUSH
16349: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16353: LD_INT 35
16355: PPUSH
16356: CALL_OW 67
// for i in tmp do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 4
16369: PUSH
16370: FOR_IN
16371: IFFALSE 16438
// if IsDead ( i ) then
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 301
16382: IFFALSE 16402
// tmp := tmp diff i else
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_VAR 0 4
16393: PUSH
16394: LD_VAR 0 1
16398: DIFF
16399: ST_TO_ADDR
16400: GO 16436
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 81
16409: PUSH
16410: LD_INT 4
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PPUSH
16417: CALL_OW 69
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 74
16431: PPUSH
16432: CALL_OW 115
16436: GO 16370
16438: POP
16439: POP
// until tmp = [ ] ;
16440: LD_VAR 0 4
16444: PUSH
16445: EMPTY
16446: EQUAL
16447: IFFALSE 16353
// end ;
16449: PPOPN 5
16451: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
16452: LD_EXP 2
16456: PUSH
16457: LD_INT 1
16459: EQUAL
16460: PUSH
16461: LD_EXP 3
16465: AND
16466: IFFALSE 16567
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
// begin enable ;
16475: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if tmp then
16517: LD_VAR 0 2
16521: IFFALSE 16567
// for i in tmp do
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: FOR_IN
16534: IFFALSE 16565
// if GetFuel ( i ) < 3 then
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 261
16545: PUSH
16546: LD_INT 3
16548: LESS
16549: IFFALSE 16563
// SetFuel ( i , 3 ) ;
16551: LD_VAR 0 1
16555: PPUSH
16556: LD_INT 3
16558: PPUSH
16559: CALL_OW 240
16563: GO 16533
16565: POP
16566: POP
// end ;
16567: PPOPN 2
16569: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16570: LD_EXP 3
16574: PUSH
16575: LD_INT 8
16577: PPUSH
16578: LD_INT 4
16580: PPUSH
16581: CALL_OW 81
16585: PUSH
16586: LD_INT 2
16588: EQUAL
16589: AND
16590: IFFALSE 16800
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
// begin enable ;
16600: ENABLE
// tmp := [ ] ;
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: EMPTY
16607: ST_TO_ADDR
// for i = 1 to 4 do
16608: LD_ADDR_VAR 0 1
16612: PUSH
16613: DOUBLE
16614: LD_INT 1
16616: DEC
16617: ST_TO_ADDR
16618: LD_INT 4
16620: PUSH
16621: FOR_TO
16622: IFFALSE 16766
// begin uc_side := 8 ;
16624: LD_ADDR_OWVAR 20
16628: PUSH
16629: LD_INT 8
16631: ST_TO_ADDR
// uc_nation := nation_arabian ;
16632: LD_ADDR_OWVAR 21
16636: PUSH
16637: LD_INT 2
16639: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16640: LD_INT 11
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 5
16648: PPUSH
16649: LD_INT 24
16651: PUSH
16652: LD_INT 23
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: CALL_OW 12
16669: ARRAY
16670: PPUSH
16671: LD_INT 60
16673: PPUSH
16674: LD_INT 80
16676: PPUSH
16677: CALL_OW 12
16681: PPUSH
16682: CALL 24736 0 5
// un := CreateVehicle ;
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: CALL_OW 45
16695: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16696: LD_VAR 0 2
16700: PPUSH
16701: LD_INT 2
16703: PPUSH
16704: CALL_OW 233
// tmp := tmp ^ un ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_VAR 0 3
16717: PUSH
16718: LD_VAR 0 2
16722: ADD
16723: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16724: LD_VAR 0 2
16728: PPUSH
16729: LD_INT 88
16731: PPUSH
16732: LD_INT 2
16734: PPUSH
16735: LD_INT 0
16737: PPUSH
16738: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 93
16749: PPUSH
16750: LD_INT 13
16752: PPUSH
16753: CALL_OW 111
// wait ( 0 0$2 ) ;
16757: LD_INT 70
16759: PPUSH
16760: CALL_OW 67
// end ;
16764: GO 16621
16766: POP
16767: POP
// for i in tmp do
16768: LD_ADDR_VAR 0 1
16772: PUSH
16773: LD_VAR 0 3
16777: PUSH
16778: FOR_IN
16779: IFFALSE 16798
// AddComMoveXY ( i , 136 , 19 ) ;
16781: LD_VAR 0 1
16785: PPUSH
16786: LD_INT 136
16788: PPUSH
16789: LD_INT 19
16791: PPUSH
16792: CALL_OW 171
16796: GO 16778
16798: POP
16799: POP
// end ;
16800: PPOPN 3
16802: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16803: LD_EXP 3
16807: IFFALSE 17726
16809: GO 16811
16811: DISABLE
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// begin enable ;
16818: ENABLE
// base := mc_leg ;
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_EXP 6
16828: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16829: LD_INT 22
16831: PUSH
16832: LD_INT 8
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 23
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: LD_INT 3
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: NOT
16869: IFFALSE 16873
// exit ;
16871: GO 17726
// if Prob ( 40 ) then
16873: LD_INT 40
16875: PPUSH
16876: CALL_OW 13
16880: IFFALSE 17009
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16882: LD_VAR 0 2
16886: PPUSH
16887: LD_INT 13
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 28
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 13
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 28
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 13
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 28
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 13
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 28
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 13
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 28
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 13
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL 83815 0 2
// end else
17007: GO 17226
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
17009: LD_VAR 0 2
17013: PPUSH
17014: LD_INT 13
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 27
17025: PUSH
17026: LD_INT 26
17028: PUSH
17029: LD_INT 26
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: PPUSH
17040: LD_INT 3
17042: PPUSH
17043: CALL_OW 12
17047: ARRAY
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 13
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 27
17066: PUSH
17067: LD_INT 26
17069: PUSH
17070: LD_INT 26
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PPUSH
17081: LD_INT 3
17083: PPUSH
17084: CALL_OW 12
17088: ARRAY
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 13
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 26
17107: PUSH
17108: LD_INT 26
17110: PUSH
17111: LD_INT 29
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 1
17121: PPUSH
17122: LD_INT 3
17124: PPUSH
17125: CALL_OW 12
17129: ARRAY
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 13
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 26
17148: PUSH
17149: LD_INT 29
17151: PUSH
17152: LD_INT 29
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: PPUSH
17163: LD_INT 3
17165: PPUSH
17166: CALL_OW 12
17170: ARRAY
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 13
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: LD_INT 29
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 13
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 26
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL 83815 0 2
// end ; repeat wait ( 0 0$1 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL 85233 0 2
17245: PUSH
17246: LD_INT 6
17248: GREATEREQUAL
17249: PUSH
17250: LD_OWVAR 1
17254: PUSH
17255: LD_INT 21000
17257: MOD
17258: PUSH
17259: LD_INT 0
17261: EQUAL
17262: OR
17263: IFFALSE 17226
// wait ( 0 0$30 ) ;
17265: LD_INT 1050
17267: PPUSH
17268: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL 85233 0 2
17289: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17290: LD_ADDR_EXP 69
17294: PUSH
17295: LD_EXP 69
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_EXP 69
17309: PUSH
17310: LD_VAR 0 2
17314: ARRAY
17315: PUSH
17316: LD_VAR 0 3
17320: DIFF
17321: PPUSH
17322: CALL_OW 1
17326: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
17327: LD_ADDR_VAR 0 4
17331: PUSH
17332: LD_INT 0
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ST_TO_ADDR
// if legChangeSide then
17343: LD_EXP 21
17347: IFFALSE 17357
// target := 2 ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_INT 2
17356: ST_TO_ADDR
// if target = 2 then
17357: LD_VAR 0 4
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: IFFALSE 17493
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_VAR 0 3
17376: PPUSH
17377: LD_INT 24
17379: PUSH
17380: LD_INT 250
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 72
17391: ST_TO_ADDR
// for i in tmp do
17392: LD_ADDR_VAR 0 1
17396: PUSH
17397: LD_VAR 0 3
17401: PUSH
17402: FOR_IN
17403: IFFALSE 17443
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_INT 112
17412: PPUSH
17413: LD_INT 64
17415: PPUSH
17416: CALL_OW 297
17420: PUSH
17421: LD_INT 9
17423: GREATER
17424: IFFALSE 17441
// ComMoveXY ( i , 112 , 64 ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: LD_INT 112
17433: PPUSH
17434: LD_INT 64
17436: PPUSH
17437: CALL_OW 111
17441: GO 17402
17443: POP
17444: POP
// wait ( 0 0$1 ) ;
17445: LD_INT 35
17447: PPUSH
17448: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 92
17459: PUSH
17460: LD_INT 112
17462: PUSH
17463: LD_INT 64
17465: PUSH
17466: LD_INT 9
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 72
17479: PUSH
17480: LD_VAR 0 3
17484: PUSH
17485: LD_INT 1
17487: MINUS
17488: GREATEREQUAL
17489: IFFALSE 17367
// end else
17491: GO 17617
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17493: LD_ADDR_VAR 0 3
17497: PUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 24
17505: PUSH
17506: LD_INT 250
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// for i in tmp do
17518: LD_ADDR_VAR 0 1
17522: PUSH
17523: LD_VAR 0 3
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17569
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17531: LD_VAR 0 1
17535: PPUSH
17536: LD_INT 174
17538: PPUSH
17539: LD_INT 94
17541: PPUSH
17542: CALL_OW 297
17546: PUSH
17547: LD_INT 9
17549: GREATER
17550: IFFALSE 17567
// ComMoveXY ( i , 174 , 94 ) ;
17552: LD_VAR 0 1
17556: PPUSH
17557: LD_INT 174
17559: PPUSH
17560: LD_INT 94
17562: PPUSH
17563: CALL_OW 111
17567: GO 17528
17569: POP
17570: POP
// wait ( 0 0$1 ) ;
17571: LD_INT 35
17573: PPUSH
17574: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 92
17585: PUSH
17586: LD_INT 174
17588: PUSH
17589: LD_INT 94
17591: PUSH
17592: LD_INT 9
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 72
17605: PUSH
17606: LD_VAR 0 3
17610: PUSH
17611: LD_INT 1
17613: MINUS
17614: GREATEREQUAL
17615: IFFALSE 17493
// end ; repeat wait ( 0 0$1 ) ;
17617: LD_INT 35
17619: PPUSH
17620: CALL_OW 67
// for i in tmp do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 3
17633: PUSH
17634: FOR_IN
17635: IFFALSE 17717
// begin if GetLives ( i ) > 251 then
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 256
17646: PUSH
17647: LD_INT 251
17649: GREATER
17650: IFFALSE 17688
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17652: LD_VAR 0 1
17656: PPUSH
17657: LD_INT 81
17659: PUSH
17660: LD_INT 8
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 74
17681: PPUSH
17682: CALL_OW 115
17686: GO 17715
// if IsDead ( i ) then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 301
17697: IFFALSE 17715
// tmp := tmp diff i ;
17699: LD_ADDR_VAR 0 3
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_VAR 0 1
17713: DIFF
17714: ST_TO_ADDR
// end ;
17715: GO 17634
17717: POP
17718: POP
// until not tmp ;
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17617
// end ;
17726: PPOPN 4
17728: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17729: LD_EXP 3
17733: IFFALSE 18721
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// begin enable ;
17745: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17746: LD_EXP 50
17750: PUSH
17751: LD_EXP 8
17755: ARRAY
17756: PPUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 72
17785: NOT
17786: IFFALSE 17790
// exit ;
17788: GO 18721
// base := mc_rus_2 ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_EXP 8
17799: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17800: LD_ADDR_VAR 0 5
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 34
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if Prob ( 40 ) then
17834: LD_INT 40
17836: PPUSH
17837: CALL_OW 13
17841: IFFALSE 17970
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: LD_INT 49
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: LD_INT 49
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 49
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 24
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: LD_INT 46
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 24
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: LD_INT 3
17928: PUSH
17929: LD_INT 46
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 24
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: LD_INT 46
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL 83815 0 2
// end else
17968: GO 18095
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_INT 24
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: LD_INT 47
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 24
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 24
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 47
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 24
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: LD_INT 3
18037: PUSH
18038: LD_INT 46
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 24
18049: PUSH
18050: LD_INT 3
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 46
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 24
18067: PUSH
18068: LD_INT 3
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: LD_INT 46
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL 83815 0 2
// end ; if Difficulty > 1 then
18095: LD_OWVAR 67
18099: PUSH
18100: LD_INT 1
18102: GREATER
18103: IFFALSE 18135
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_INT 24
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: LD_INT 47
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: PPUSH
18131: CALL 83815 0 2
// repeat wait ( 0 0$1 ) ;
18135: LD_INT 35
18137: PPUSH
18138: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
18142: LD_VAR 0 2
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL 85233 0 2
18154: PUSH
18155: LD_INT 6
18157: PUSH
18158: LD_INT 7
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: PUSH
18169: LD_OWVAR 67
18173: ARRAY
18174: GREATEREQUAL
18175: PUSH
18176: LD_OWVAR 1
18180: PUSH
18181: LD_INT 21000
18183: MOD
18184: PUSH
18185: LD_INT 0
18187: EQUAL
18188: OR
18189: IFFALSE 18135
// wait ( 0 0$45 ) ;
18191: LD_INT 1575
18193: PPUSH
18194: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_VAR 0 2
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL 85233 0 2
18215: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18216: LD_ADDR_EXP 69
18220: PUSH
18221: LD_EXP 69
18225: PPUSH
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_EXP 69
18235: PUSH
18236: LD_VAR 0 2
18240: ARRAY
18241: PUSH
18242: LD_VAR 0 3
18246: DIFF
18247: PPUSH
18248: CALL_OW 1
18252: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_INT 0
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 12
18268: ST_TO_ADDR
// if target then
18269: LD_VAR 0 4
18273: IFFALSE 18401
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_INT 24
18287: PUSH
18288: LD_INT 250
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 72
18299: ST_TO_ADDR
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 3
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18351
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 84
18320: PPUSH
18321: LD_INT 32
18323: PPUSH
18324: CALL_OW 297
18328: PUSH
18329: LD_INT 9
18331: GREATER
18332: IFFALSE 18349
// ComMoveXY ( i , 84 , 32 ) ;
18334: LD_VAR 0 1
18338: PPUSH
18339: LD_INT 84
18341: PPUSH
18342: LD_INT 32
18344: PPUSH
18345: CALL_OW 111
18349: GO 18310
18351: POP
18352: POP
// wait ( 0 0$1 ) ;
18353: LD_INT 35
18355: PPUSH
18356: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 92
18367: PUSH
18368: LD_INT 84
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 9
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 72
18387: PUSH
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 1
18395: MINUS
18396: GREATEREQUAL
18397: IFFALSE 18275
// end else
18399: GO 18561
// begin if teleport then
18401: LD_VAR 0 5
18405: IFFALSE 18425
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_VAR 0 5
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18425: LD_ADDR_VAR 0 3
18429: PUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: LD_INT 24
18437: PUSH
18438: LD_INT 250
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 72
18449: ST_TO_ADDR
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 3
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18513
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 140
18470: PPUSH
18471: LD_INT 219
18473: PPUSH
18474: CALL_OW 297
18478: PUSH
18479: LD_INT 9
18481: GREATER
18482: PUSH
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 314
18492: NOT
18493: AND
18494: IFFALSE 18511
// AddComMoveXY ( i , 140 , 219 ) ;
18496: LD_VAR 0 1
18500: PPUSH
18501: LD_INT 140
18503: PPUSH
18504: LD_INT 219
18506: PPUSH
18507: CALL_OW 171
18511: GO 18460
18513: POP
18514: POP
// wait ( 0 0$1 ) ;
18515: LD_INT 35
18517: PPUSH
18518: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 92
18529: PUSH
18530: LD_INT 140
18532: PUSH
18533: LD_INT 219
18535: PUSH
18536: LD_INT 9
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: PPUSH
18545: CALL_OW 72
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 1
18557: MINUS
18558: GREATEREQUAL
18559: IFFALSE 18425
// end ; repeat wait ( 0 0$1 ) ;
18561: LD_INT 35
18563: PPUSH
18564: CALL_OW 67
// for i in tmp do
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_VAR 0 3
18577: PUSH
18578: FOR_IN
18579: IFFALSE 18712
// begin if GetLives ( i ) > 251 then
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 256
18590: PUSH
18591: LD_INT 251
18593: GREATER
18594: IFFALSE 18683
// begin if GetWeapon ( i ) = ru_time_lapser then
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 264
18605: PUSH
18606: LD_INT 49
18608: EQUAL
18609: IFFALSE 18647
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_INT 81
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: PPUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 74
18640: PPUSH
18641: CALL_OW 112
18645: GO 18681
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_INT 81
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 69
18666: PPUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 74
18676: PPUSH
18677: CALL_OW 115
// end else
18681: GO 18710
// if IsDead ( i ) then
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 301
18692: IFFALSE 18710
// tmp := tmp diff i ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_VAR 0 1
18708: DIFF
18709: ST_TO_ADDR
// end ;
18710: GO 18578
18712: POP
18713: POP
// until not tmp ;
18714: LD_VAR 0 3
18718: NOT
18719: IFFALSE 18561
// end ;
18721: PPOPN 5
18723: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18724: LD_EXP 3
18728: IFFALSE 19110
18730: GO 18732
18732: DISABLE
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
18738: PPUSH
// begin enable ;
18739: ENABLE
// base := mc_amer ;
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_EXP 5
18749: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18750: LD_INT 22
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 23
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 30
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 19110
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_INT 3
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 7
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 7
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 3
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 7
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL 83815 0 2
// repeat wait ( 0 0$1 ) ;
18900: LD_INT 35
18902: PPUSH
18903: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18907: LD_VAR 0 2
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL 85233 0 2
18919: PUSH
18920: LD_INT 5
18922: GREATEREQUAL
18923: PUSH
18924: LD_OWVAR 1
18928: PUSH
18929: LD_INT 21000
18931: MOD
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: OR
18937: IFFALSE 18900
// wait ( 0 0$30 ) ;
18939: LD_INT 1050
18941: PPUSH
18942: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18946: LD_ADDR_VAR 0 3
18950: PUSH
18951: LD_VAR 0 2
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: CALL 85233 0 2
18963: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18964: LD_ADDR_EXP 69
18968: PUSH
18969: LD_EXP 69
18973: PPUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: LD_EXP 69
18983: PUSH
18984: LD_VAR 0 2
18988: ARRAY
18989: PUSH
18990: LD_VAR 0 3
18994: DIFF
18995: PPUSH
18996: CALL_OW 1
19000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19001: LD_INT 35
19003: PPUSH
19004: CALL_OW 67
// for i in tmp do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_VAR 0 3
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19101
// begin if GetLives ( i ) > 251 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 256
19030: PUSH
19031: LD_INT 251
19033: GREATER
19034: IFFALSE 19072
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
19036: LD_VAR 0 1
19040: PPUSH
19041: LD_INT 81
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: PPUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 74
19065: PPUSH
19066: CALL_OW 115
19070: GO 19099
// if IsDead ( i ) then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 301
19081: IFFALSE 19099
// tmp := tmp diff i ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_VAR 0 3
19092: PUSH
19093: LD_VAR 0 1
19097: DIFF
19098: ST_TO_ADDR
// end ;
19099: GO 19018
19101: POP
19102: POP
// until not tmp ;
19103: LD_VAR 0 3
19107: NOT
19108: IFFALSE 19001
// end ; end_of_file
19110: PPOPN 4
19112: END
// export function CustomEvent ( event ) ; begin
19113: LD_INT 0
19115: PPUSH
// end ;
19116: LD_VAR 0 2
19120: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19121: LD_VAR 0 1
19125: PUSH
19126: LD_INT 1
19128: EQUAL
19129: PUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 4
19137: EQUAL
19138: AND
19139: IFFALSE 19167
// begin SayRadio ( Powell , DP-Lost ) ;
19141: LD_EXP 12
19145: PPUSH
19146: LD_STRING DP-Lost
19148: PPUSH
19149: CALL_OW 94
// wait ( 0 0$2 ) ;
19153: LD_INT 70
19155: PPUSH
19156: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19160: LD_STRING FriendlyFire
19162: PPUSH
19163: CALL_OW 104
// end ; end ;
19167: PPOPN 2
19169: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: CALL 103393 0 1
// if GameType = 1 then
19179: LD_EXP 2
19183: PUSH
19184: LD_INT 1
19186: EQUAL
19187: IFFALSE 19422
// begin if un = playerCommander then
19189: LD_VAR 0 1
19193: PUSH
19194: LD_EXP 9
19198: EQUAL
19199: IFFALSE 19208
// YouLost ( commanderDied ) ;
19201: LD_STRING commanderDied
19203: PPUSH
19204: CALL_OW 104
// if un = allyCommander then
19208: LD_VAR 0 1
19212: PUSH
19213: LD_EXP 11
19217: EQUAL
19218: IFFALSE 19227
// YouLost ( Theta ) ;
19220: LD_STRING Theta
19222: PPUSH
19223: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19227: LD_VAR 0 1
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 8
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 69
19278: IN
19279: IFFALSE 19295
// legDestCounter := legDestCounter + 1 ;
19281: LD_ADDR_EXP 18
19285: PUSH
19286: LD_EXP 18
19290: PUSH
19291: LD_INT 1
19293: PLUS
19294: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_INT 4
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 21
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: IN
19347: IFFALSE 19363
// allyDestCounter := allyDestCounter + 1 ;
19349: LD_ADDR_EXP 22
19353: PUSH
19354: LD_EXP 22
19358: PUSH
19359: LD_INT 1
19361: PLUS
19362: ST_TO_ADDR
// if un in ruOutpost then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 14
19372: IN
19373: IFFALSE 19422
// begin ruOutpost := ruOutpost diff un ;
19375: LD_ADDR_EXP 14
19379: PUSH
19380: LD_EXP 14
19384: PUSH
19385: LD_VAR 0 1
19389: DIFF
19390: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19391: LD_ADDR_EXP 15
19395: PUSH
19396: LD_EXP 15
19400: PPUSH
19401: LD_INT 1
19403: PPUSH
19404: LD_EXP 15
19408: PUSH
19409: LD_INT 1
19411: ARRAY
19412: PUSH
19413: LD_INT 1
19415: PLUS
19416: PPUSH
19417: CALL_OW 1
19421: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL 87235 0 1
// end ;
19431: PPOPN 1
19433: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19434: LD_VAR 0 1
19438: PPUSH
19439: LD_VAR 0 2
19443: PPUSH
19444: CALL 89569 0 2
// end ;
19448: PPOPN 2
19450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL 88637 0 1
// end ;
19460: PPOPN 1
19462: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL 88878 0 1
// end ;
19472: PPOPN 1
19474: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19475: LD_VAR 0 1
19479: PUSH
19480: LD_INT 14
19482: EQUAL
19483: PUSH
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 255
19493: PUSH
19494: LD_INT 1
19496: EQUAL
19497: AND
19498: IFFALSE 19539
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19500: LD_EXP 9
19504: PPUSH
19505: LD_STRING D
19507: PUSH
19508: LD_STRING I
19510: PUSH
19511: LD_STRING J
19513: PUSH
19514: LD_STRING S
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: LD_EXP 25
19526: ARRAY
19527: STR
19528: PUSH
19529: LD_STRING -1-Laser
19531: STR
19532: PPUSH
19533: CALL_OW 88
// exit ;
19537: GO 19681
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 7
19546: EQUAL
19547: PUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 255
19557: PUSH
19558: LD_INT 1
19560: EQUAL
19561: AND
19562: IFFALSE 19603
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19564: LD_EXP 9
19568: PPUSH
19569: LD_STRING D
19571: PUSH
19572: LD_STRING I
19574: PUSH
19575: LD_STRING J
19577: PUSH
19578: LD_STRING S
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: LD_EXP 25
19590: ARRAY
19591: STR
19592: PUSH
19593: LD_STRING -1-Materialization
19595: STR
19596: PPUSH
19597: CALL_OW 88
// exit ;
19601: GO 19681
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 25
19610: EQUAL
19611: PUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: CALL_OW 255
19621: PUSH
19622: LD_INT 1
19624: EQUAL
19625: AND
19626: IFFALSE 19667
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19628: LD_EXP 9
19632: PPUSH
19633: LD_STRING D
19635: PUSH
19636: LD_STRING I
19638: PUSH
19639: LD_STRING J
19641: PUSH
19642: LD_STRING S
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: PUSH
19650: LD_EXP 25
19654: ARRAY
19655: STR
19656: PUSH
19657: LD_STRING -1-Rocket
19659: STR
19660: PPUSH
19661: CALL_OW 88
// exit ;
19665: GO 19681
// end ; MCE_ResearchComplete ( tech , lab ) ;
19667: LD_VAR 0 1
19671: PPUSH
19672: LD_VAR 0 2
19676: PPUSH
19677: CALL 86931 0 2
// end ;
19681: PPOPN 2
19683: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_VAR 0 4
19703: PPUSH
19704: LD_VAR 0 5
19708: PPUSH
19709: CALL 86551 0 5
// end ;
19713: PPOPN 5
19715: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 86132 0 2
// end ;
19730: PPOPN 2
19732: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19733: LD_VAR 0 1
19737: PPUSH
19738: LD_VAR 0 2
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: LD_VAR 0 4
19752: PPUSH
19753: CALL 85970 0 4
// end ;
19757: PPOPN 4
19759: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: CALL 85745 0 3
// end ;
19779: PPOPN 3
19781: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL 85630 0 2
// end ;
19796: PPOPN 2
19798: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19799: LD_VAR 0 1
19803: PPUSH
19804: LD_VAR 0 2
19808: PPUSH
19809: CALL 89864 0 2
// end ;
19813: PPOPN 2
19815: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_VAR 0 2
19825: PPUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: LD_VAR 0 4
19835: PPUSH
19836: CALL 90080 0 4
// end ;
19840: PPOPN 4
19842: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL 85439 0 2
// end ;
19857: PPOPN 2
19859: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL 103499 0 1
// end ; end_of_file
19869: PPOPN 1
19871: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19872: LD_INT 0
19874: PPUSH
19875: PPUSH
// if exist_mode then
19876: LD_VAR 0 2
19880: IFFALSE 19905
// unit := CreateCharacter ( prefix & ident ) else
19882: LD_ADDR_VAR 0 5
19886: PUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_VAR 0 1
19896: STR
19897: PPUSH
19898: CALL_OW 34
19902: ST_TO_ADDR
19903: GO 19920
// unit := NewCharacter ( ident ) ;
19905: LD_ADDR_VAR 0 5
19909: PUSH
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 25
19919: ST_TO_ADDR
// result := unit ;
19920: LD_ADDR_VAR 0 4
19924: PUSH
19925: LD_VAR 0 5
19929: ST_TO_ADDR
// end ;
19930: LD_VAR 0 4
19934: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// if not side or not nation then
19939: LD_VAR 0 1
19943: NOT
19944: PUSH
19945: LD_VAR 0 2
19949: NOT
19950: OR
19951: IFFALSE 19955
// exit ;
19953: GO 20723
// case nation of nation_american :
19955: LD_VAR 0 2
19959: PUSH
19960: LD_INT 1
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 20182
19968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 35
19976: PUSH
19977: LD_INT 45
19979: PUSH
19980: LD_INT 46
19982: PUSH
19983: LD_INT 47
19985: PUSH
19986: LD_INT 82
19988: PUSH
19989: LD_INT 83
19991: PUSH
19992: LD_INT 84
19994: PUSH
19995: LD_INT 85
19997: PUSH
19998: LD_INT 86
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 6
20009: PUSH
20010: LD_INT 15
20012: PUSH
20013: LD_INT 16
20015: PUSH
20016: LD_INT 7
20018: PUSH
20019: LD_INT 12
20021: PUSH
20022: LD_INT 13
20024: PUSH
20025: LD_INT 10
20027: PUSH
20028: LD_INT 14
20030: PUSH
20031: LD_INT 20
20033: PUSH
20034: LD_INT 21
20036: PUSH
20037: LD_INT 22
20039: PUSH
20040: LD_INT 25
20042: PUSH
20043: LD_INT 32
20045: PUSH
20046: LD_INT 27
20048: PUSH
20049: LD_INT 36
20051: PUSH
20052: LD_INT 69
20054: PUSH
20055: LD_INT 39
20057: PUSH
20058: LD_INT 34
20060: PUSH
20061: LD_INT 40
20063: PUSH
20064: LD_INT 48
20066: PUSH
20067: LD_INT 49
20069: PUSH
20070: LD_INT 50
20072: PUSH
20073: LD_INT 51
20075: PUSH
20076: LD_INT 52
20078: PUSH
20079: LD_INT 53
20081: PUSH
20082: LD_INT 54
20084: PUSH
20085: LD_INT 55
20087: PUSH
20088: LD_INT 56
20090: PUSH
20091: LD_INT 57
20093: PUSH
20094: LD_INT 58
20096: PUSH
20097: LD_INT 59
20099: PUSH
20100: LD_INT 60
20102: PUSH
20103: LD_INT 61
20105: PUSH
20106: LD_INT 62
20108: PUSH
20109: LD_INT 80
20111: PUSH
20112: LD_INT 82
20114: PUSH
20115: LD_INT 83
20117: PUSH
20118: LD_INT 84
20120: PUSH
20121: LD_INT 85
20123: PUSH
20124: LD_INT 86
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: ST_TO_ADDR
20180: GO 20647
20182: LD_INT 2
20184: DOUBLE
20185: EQUAL
20186: IFTRUE 20190
20188: GO 20416
20190: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20191: LD_ADDR_VAR 0 4
20195: PUSH
20196: LD_INT 35
20198: PUSH
20199: LD_INT 45
20201: PUSH
20202: LD_INT 46
20204: PUSH
20205: LD_INT 47
20207: PUSH
20208: LD_INT 82
20210: PUSH
20211: LD_INT 83
20213: PUSH
20214: LD_INT 84
20216: PUSH
20217: LD_INT 85
20219: PUSH
20220: LD_INT 87
20222: PUSH
20223: LD_INT 70
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 11
20231: PUSH
20232: LD_INT 3
20234: PUSH
20235: LD_INT 4
20237: PUSH
20238: LD_INT 5
20240: PUSH
20241: LD_INT 6
20243: PUSH
20244: LD_INT 15
20246: PUSH
20247: LD_INT 18
20249: PUSH
20250: LD_INT 7
20252: PUSH
20253: LD_INT 17
20255: PUSH
20256: LD_INT 8
20258: PUSH
20259: LD_INT 20
20261: PUSH
20262: LD_INT 21
20264: PUSH
20265: LD_INT 22
20267: PUSH
20268: LD_INT 72
20270: PUSH
20271: LD_INT 26
20273: PUSH
20274: LD_INT 69
20276: PUSH
20277: LD_INT 39
20279: PUSH
20280: LD_INT 40
20282: PUSH
20283: LD_INT 41
20285: PUSH
20286: LD_INT 42
20288: PUSH
20289: LD_INT 43
20291: PUSH
20292: LD_INT 48
20294: PUSH
20295: LD_INT 49
20297: PUSH
20298: LD_INT 50
20300: PUSH
20301: LD_INT 51
20303: PUSH
20304: LD_INT 52
20306: PUSH
20307: LD_INT 53
20309: PUSH
20310: LD_INT 54
20312: PUSH
20313: LD_INT 55
20315: PUSH
20316: LD_INT 56
20318: PUSH
20319: LD_INT 60
20321: PUSH
20322: LD_INT 61
20324: PUSH
20325: LD_INT 62
20327: PUSH
20328: LD_INT 66
20330: PUSH
20331: LD_INT 67
20333: PUSH
20334: LD_INT 68
20336: PUSH
20337: LD_INT 81
20339: PUSH
20340: LD_INT 82
20342: PUSH
20343: LD_INT 83
20345: PUSH
20346: LD_INT 84
20348: PUSH
20349: LD_INT 85
20351: PUSH
20352: LD_INT 87
20354: PUSH
20355: LD_INT 88
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: ST_TO_ADDR
20414: GO 20647
20416: LD_INT 3
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20646
20424: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20425: LD_ADDR_VAR 0 4
20429: PUSH
20430: LD_INT 46
20432: PUSH
20433: LD_INT 47
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 82
20444: PUSH
20445: LD_INT 83
20447: PUSH
20448: LD_INT 84
20450: PUSH
20451: LD_INT 85
20453: PUSH
20454: LD_INT 86
20456: PUSH
20457: LD_INT 11
20459: PUSH
20460: LD_INT 9
20462: PUSH
20463: LD_INT 20
20465: PUSH
20466: LD_INT 19
20468: PUSH
20469: LD_INT 21
20471: PUSH
20472: LD_INT 24
20474: PUSH
20475: LD_INT 22
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 28
20483: PUSH
20484: LD_INT 29
20486: PUSH
20487: LD_INT 30
20489: PUSH
20490: LD_INT 31
20492: PUSH
20493: LD_INT 37
20495: PUSH
20496: LD_INT 38
20498: PUSH
20499: LD_INT 32
20501: PUSH
20502: LD_INT 27
20504: PUSH
20505: LD_INT 33
20507: PUSH
20508: LD_INT 69
20510: PUSH
20511: LD_INT 39
20513: PUSH
20514: LD_INT 34
20516: PUSH
20517: LD_INT 40
20519: PUSH
20520: LD_INT 71
20522: PUSH
20523: LD_INT 23
20525: PUSH
20526: LD_INT 44
20528: PUSH
20529: LD_INT 48
20531: PUSH
20532: LD_INT 49
20534: PUSH
20535: LD_INT 50
20537: PUSH
20538: LD_INT 51
20540: PUSH
20541: LD_INT 52
20543: PUSH
20544: LD_INT 53
20546: PUSH
20547: LD_INT 54
20549: PUSH
20550: LD_INT 55
20552: PUSH
20553: LD_INT 56
20555: PUSH
20556: LD_INT 57
20558: PUSH
20559: LD_INT 58
20561: PUSH
20562: LD_INT 59
20564: PUSH
20565: LD_INT 63
20567: PUSH
20568: LD_INT 64
20570: PUSH
20571: LD_INT 65
20573: PUSH
20574: LD_INT 82
20576: PUSH
20577: LD_INT 83
20579: PUSH
20580: LD_INT 84
20582: PUSH
20583: LD_INT 85
20585: PUSH
20586: LD_INT 86
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
20644: GO 20647
20646: POP
// if state > - 1 and state < 3 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: GREATER
20656: PUSH
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 3
20664: LESS
20665: AND
20666: IFFALSE 20723
// for i in result do
20668: LD_ADDR_VAR 0 5
20672: PUSH
20673: LD_VAR 0 4
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20721
// if GetTech ( i , side ) <> state then
20681: LD_VAR 0 5
20685: PPUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 321
20695: PUSH
20696: LD_VAR 0 3
20700: NONEQUAL
20701: IFFALSE 20719
// result := result diff i ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_VAR 0 4
20712: PUSH
20713: LD_VAR 0 5
20717: DIFF
20718: ST_TO_ADDR
20719: GO 20678
20721: POP
20722: POP
// end ;
20723: LD_VAR 0 4
20727: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
// result := true ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20741: LD_ADDR_VAR 0 5
20745: PUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 480
20755: ST_TO_ADDR
// if not tmp then
20756: LD_VAR 0 5
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20814
// for i in tmp do
20765: LD_ADDR_VAR 0 4
20769: PUSH
20770: LD_VAR 0 5
20774: PUSH
20775: FOR_IN
20776: IFFALSE 20812
// if GetTech ( i , side ) <> state_researched then
20778: LD_VAR 0 4
20782: PPUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 321
20792: PUSH
20793: LD_INT 2
20795: NONEQUAL
20796: IFFALSE 20810
// begin result := false ;
20798: LD_ADDR_VAR 0 3
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// exit ;
20806: POP
20807: POP
20808: GO 20814
// end ;
20810: GO 20775
20812: POP
20813: POP
// end ;
20814: LD_VAR 0 3
20818: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20834: LD_VAR 0 1
20838: NOT
20839: PUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 257
20849: PUSH
20850: LD_INT 9
20852: NONEQUAL
20853: OR
20854: IFFALSE 20858
// exit ;
20856: GO 21431
// side := GetSide ( unit ) ;
20858: LD_ADDR_VAR 0 9
20862: PUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 255
20872: ST_TO_ADDR
// tech_space := tech_spacanom ;
20873: LD_ADDR_VAR 0 12
20877: PUSH
20878: LD_INT 29
20880: ST_TO_ADDR
// tech_time := tech_taurad ;
20881: LD_ADDR_VAR 0 13
20885: PUSH
20886: LD_INT 28
20888: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20889: LD_ADDR_VAR 0 11
20893: PUSH
20894: LD_VAR 0 1
20898: PPUSH
20899: CALL_OW 310
20903: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20904: LD_VAR 0 11
20908: PPUSH
20909: CALL_OW 247
20913: PUSH
20914: LD_INT 2
20916: EQUAL
20917: IFFALSE 20921
// exit ;
20919: GO 21431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20921: LD_ADDR_VAR 0 8
20925: PUSH
20926: LD_INT 81
20928: PUSH
20929: LD_VAR 0 9
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 3
20940: PUSH
20941: LD_INT 21
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PPUSH
20959: CALL_OW 69
20963: ST_TO_ADDR
// if not tmp then
20964: LD_VAR 0 8
20968: NOT
20969: IFFALSE 20973
// exit ;
20971: GO 21431
// if in_unit then
20973: LD_VAR 0 11
20977: IFFALSE 21001
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20979: LD_ADDR_VAR 0 10
20983: PUSH
20984: LD_VAR 0 8
20988: PPUSH
20989: LD_VAR 0 11
20993: PPUSH
20994: CALL_OW 74
20998: ST_TO_ADDR
20999: GO 21021
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21001: LD_ADDR_VAR 0 10
21005: PUSH
21006: LD_VAR 0 8
21010: PPUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 74
21020: ST_TO_ADDR
// if not enemy then
21021: LD_VAR 0 10
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21431
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21030: LD_VAR 0 11
21034: PUSH
21035: LD_VAR 0 11
21039: PPUSH
21040: LD_VAR 0 10
21044: PPUSH
21045: CALL_OW 296
21049: PUSH
21050: LD_INT 13
21052: GREATER
21053: AND
21054: PUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_VAR 0 10
21064: PPUSH
21065: CALL_OW 296
21069: PUSH
21070: LD_INT 12
21072: GREATER
21073: OR
21074: IFFALSE 21078
// exit ;
21076: GO 21431
// missile := [ 1 ] ;
21078: LD_ADDR_VAR 0 14
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21089: LD_VAR 0 9
21093: PPUSH
21094: LD_VAR 0 12
21098: PPUSH
21099: CALL_OW 325
21103: IFFALSE 21132
// missile := Insert ( missile , missile + 1 , 2 ) ;
21105: LD_ADDR_VAR 0 14
21109: PUSH
21110: LD_VAR 0 14
21114: PPUSH
21115: LD_VAR 0 14
21119: PUSH
21120: LD_INT 1
21122: PLUS
21123: PPUSH
21124: LD_INT 2
21126: PPUSH
21127: CALL_OW 2
21131: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21132: LD_VAR 0 9
21136: PPUSH
21137: LD_VAR 0 13
21141: PPUSH
21142: CALL_OW 325
21146: PUSH
21147: LD_VAR 0 10
21151: PPUSH
21152: CALL_OW 255
21156: PPUSH
21157: LD_VAR 0 13
21161: PPUSH
21162: CALL_OW 325
21166: NOT
21167: AND
21168: IFFALSE 21197
// missile := Insert ( missile , missile + 1 , 3 ) ;
21170: LD_ADDR_VAR 0 14
21174: PUSH
21175: LD_VAR 0 14
21179: PPUSH
21180: LD_VAR 0 14
21184: PUSH
21185: LD_INT 1
21187: PLUS
21188: PPUSH
21189: LD_INT 3
21191: PPUSH
21192: CALL_OW 2
21196: ST_TO_ADDR
// if missile < 2 then
21197: LD_VAR 0 14
21201: PUSH
21202: LD_INT 2
21204: LESS
21205: IFFALSE 21209
// exit ;
21207: GO 21431
// x := GetX ( enemy ) ;
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_VAR 0 10
21218: PPUSH
21219: CALL_OW 250
21223: ST_TO_ADDR
// y := GetY ( enemy ) ;
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: LD_VAR 0 10
21233: PPUSH
21234: CALL_OW 251
21238: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21239: LD_ADDR_VAR 0 6
21243: PUSH
21244: LD_VAR 0 4
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PPUSH
21253: LD_INT 1
21255: PPUSH
21256: CALL_OW 12
21260: PLUS
21261: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21262: LD_ADDR_VAR 0 7
21266: PUSH
21267: LD_VAR 0 5
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PPUSH
21276: LD_INT 1
21278: PPUSH
21279: CALL_OW 12
21283: PLUS
21284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21285: LD_VAR 0 6
21289: PPUSH
21290: LD_VAR 0 7
21294: PPUSH
21295: CALL_OW 488
21299: NOT
21300: IFFALSE 21322
// begin _x := x ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_VAR 0 4
21311: ST_TO_ADDR
// _y := y ;
21312: LD_ADDR_VAR 0 7
21316: PUSH
21317: LD_VAR 0 5
21321: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 1
21329: PPUSH
21330: LD_VAR 0 14
21334: PPUSH
21335: CALL_OW 12
21339: ST_TO_ADDR
// case i of 1 :
21340: LD_VAR 0 3
21344: PUSH
21345: LD_INT 1
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21370
21353: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_VAR 0 10
21363: PPUSH
21364: CALL_OW 115
21368: GO 21431
21370: LD_INT 2
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21400
21378: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21379: LD_VAR 0 1
21383: PPUSH
21384: LD_VAR 0 6
21388: PPUSH
21389: LD_VAR 0 7
21393: PPUSH
21394: CALL_OW 153
21398: GO 21431
21400: LD_INT 3
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21430
21408: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_VAR 0 6
21418: PPUSH
21419: LD_VAR 0 7
21423: PPUSH
21424: CALL_OW 154
21428: GO 21431
21430: POP
// end ;
21431: LD_VAR 0 2
21435: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21436: LD_INT 0
21438: PPUSH
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
21443: PPUSH
// if not unit or not building then
21444: LD_VAR 0 1
21448: NOT
21449: PUSH
21450: LD_VAR 0 2
21454: NOT
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 21618
// x := GetX ( building ) ;
21460: LD_ADDR_VAR 0 5
21464: PUSH
21465: LD_VAR 0 2
21469: PPUSH
21470: CALL_OW 250
21474: ST_TO_ADDR
// y := GetY ( building ) ;
21475: LD_ADDR_VAR 0 6
21479: PUSH
21480: LD_VAR 0 2
21484: PPUSH
21485: CALL_OW 251
21489: ST_TO_ADDR
// for i = 0 to 5 do
21490: LD_ADDR_VAR 0 4
21494: PUSH
21495: DOUBLE
21496: LD_INT 0
21498: DEC
21499: ST_TO_ADDR
21500: LD_INT 5
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21616
// begin _x := ShiftX ( x , i , 3 ) ;
21506: LD_ADDR_VAR 0 7
21510: PUSH
21511: LD_VAR 0 5
21515: PPUSH
21516: LD_VAR 0 4
21520: PPUSH
21521: LD_INT 3
21523: PPUSH
21524: CALL_OW 272
21528: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21529: LD_ADDR_VAR 0 8
21533: PUSH
21534: LD_VAR 0 6
21538: PPUSH
21539: LD_VAR 0 4
21543: PPUSH
21544: LD_INT 3
21546: PPUSH
21547: CALL_OW 273
21551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21552: LD_VAR 0 7
21556: PPUSH
21557: LD_VAR 0 8
21561: PPUSH
21562: CALL_OW 488
21566: NOT
21567: IFFALSE 21571
// continue ;
21569: GO 21503
// if HexInfo ( _x , _y ) = 0 then
21571: LD_VAR 0 7
21575: PPUSH
21576: LD_VAR 0 8
21580: PPUSH
21581: CALL_OW 428
21585: PUSH
21586: LD_INT 0
21588: EQUAL
21589: IFFALSE 21614
// begin ComMoveXY ( unit , _x , _y ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_VAR 0 7
21600: PPUSH
21601: LD_VAR 0 8
21605: PPUSH
21606: CALL_OW 111
// exit ;
21610: POP
21611: POP
21612: GO 21618
// end ; end ;
21614: GO 21503
21616: POP
21617: POP
// end ;
21618: LD_VAR 0 3
21622: RET
// export function ScanBase ( side , base_area ) ; begin
21623: LD_INT 0
21625: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21626: LD_ADDR_VAR 0 3
21630: PUSH
21631: LD_VAR 0 2
21635: PPUSH
21636: LD_INT 81
21638: PUSH
21639: LD_VAR 0 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 70
21652: ST_TO_ADDR
// end ;
21653: LD_VAR 0 3
21657: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
// result := false ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// side := GetSide ( unit ) ;
21672: LD_ADDR_VAR 0 3
21676: PUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 255
21686: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21687: LD_ADDR_VAR 0 4
21691: PUSH
21692: LD_VAR 0 1
21696: PPUSH
21697: CALL_OW 248
21701: ST_TO_ADDR
// case nat of 1 :
21702: LD_VAR 0 4
21706: PUSH
21707: LD_INT 1
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// tech := tech_lassight ; 2 :
21716: LD_ADDR_VAR 0 5
21720: PUSH
21721: LD_INT 12
21723: ST_TO_ADDR
21724: GO 21765
21726: LD_INT 2
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// tech := tech_mortar ; 3 :
21735: LD_ADDR_VAR 0 5
21739: PUSH
21740: LD_INT 41
21742: ST_TO_ADDR
21743: GO 21765
21745: LD_INT 3
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// tech := tech_bazooka ; end ;
21754: LD_ADDR_VAR 0 5
21758: PUSH
21759: LD_INT 44
21761: ST_TO_ADDR
21762: GO 21765
21764: POP
// if Researched ( side , tech ) then
21765: LD_VAR 0 3
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 325
21779: IFFALSE 21806
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_INT 5
21788: PUSH
21789: LD_INT 8
21791: PUSH
21792: LD_INT 9
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: LD_VAR 0 4
21804: ARRAY
21805: ST_TO_ADDR
// end ;
21806: LD_VAR 0 2
21810: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
// if not mines then
21816: LD_VAR 0 2
21820: NOT
21821: IFFALSE 21825
// exit ;
21823: GO 21969
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21825: LD_ADDR_VAR 0 5
21829: PUSH
21830: LD_INT 81
21832: PUSH
21833: LD_VAR 0 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 3
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 3
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 69
21867: ST_TO_ADDR
// for i in mines do
21868: LD_ADDR_VAR 0 4
21872: PUSH
21873: LD_VAR 0 2
21877: PUSH
21878: FOR_IN
21879: IFFALSE 21967
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21881: LD_VAR 0 4
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 4
21894: PUSH
21895: LD_INT 2
21897: ARRAY
21898: PPUSH
21899: CALL_OW 458
21903: NOT
21904: IFFALSE 21908
// continue ;
21906: GO 21878
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21908: LD_VAR 0 4
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: PPUSH
21917: LD_VAR 0 4
21921: PUSH
21922: LD_INT 2
21924: ARRAY
21925: PPUSH
21926: CALL_OW 428
21930: PUSH
21931: LD_VAR 0 5
21935: IN
21936: IFFALSE 21965
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21938: LD_VAR 0 4
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: LD_VAR 0 4
21951: PUSH
21952: LD_INT 2
21954: ARRAY
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 456
// end ;
21965: GO 21878
21967: POP
21968: POP
// end ;
21969: LD_VAR 0 3
21973: RET
// export function Count ( array ) ; var i ; begin
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
// result := 0 ;
21978: LD_ADDR_VAR 0 2
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// for i in array do
21986: LD_ADDR_VAR 0 3
21990: PUSH
21991: LD_VAR 0 1
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22021
// if i then
21999: LD_VAR 0 3
22003: IFFALSE 22019
// result := result + 1 ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_VAR 0 2
22014: PUSH
22015: LD_INT 1
22017: PLUS
22018: ST_TO_ADDR
22019: GO 21996
22021: POP
22022: POP
// end ;
22023: LD_VAR 0 2
22027: RET
// export function IsEmpty ( building ) ; begin
22028: LD_INT 0
22030: PPUSH
// if not building then
22031: LD_VAR 0 1
22035: NOT
22036: IFFALSE 22040
// exit ;
22038: GO 22083
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_VAR 0 1
22049: PUSH
22050: LD_INT 22
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 255
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 58
22069: PUSH
22070: EMPTY
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PPUSH
22077: CALL_OW 69
22081: IN
22082: ST_TO_ADDR
// end ;
22083: LD_VAR 0 2
22087: RET
// export function IsNotFull ( building ) ; begin
22088: LD_INT 0
22090: PPUSH
// if not building then
22091: LD_VAR 0 1
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22119
// result := UnitsInside ( building ) < 6 ;
22100: LD_ADDR_VAR 0 2
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 313
22114: PUSH
22115: LD_INT 6
22117: LESS
22118: ST_TO_ADDR
// end ;
22119: LD_VAR 0 2
22123: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
// tmp := [ ] ;
22130: LD_ADDR_VAR 0 3
22134: PUSH
22135: EMPTY
22136: ST_TO_ADDR
// list := [ ] ;
22137: LD_ADDR_VAR 0 5
22141: PUSH
22142: EMPTY
22143: ST_TO_ADDR
// for i = 16 to 25 do
22144: LD_ADDR_VAR 0 4
22148: PUSH
22149: DOUBLE
22150: LD_INT 16
22152: DEC
22153: ST_TO_ADDR
22154: LD_INT 25
22156: PUSH
22157: FOR_TO
22158: IFFALSE 22231
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_VAR 0 3
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 255
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 91
22189: PUSH
22190: LD_VAR 0 1
22194: PUSH
22195: LD_INT 6
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_VAR 0 4
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: PPUSH
22223: CALL_OW 69
22227: ADD
22228: ST_TO_ADDR
22229: GO 22157
22231: POP
22232: POP
// for i = 1 to tmp do
22233: LD_ADDR_VAR 0 4
22237: PUSH
22238: DOUBLE
22239: LD_INT 1
22241: DEC
22242: ST_TO_ADDR
22243: LD_VAR 0 3
22247: PUSH
22248: FOR_TO
22249: IFFALSE 22337
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22251: LD_ADDR_VAR 0 5
22255: PUSH
22256: LD_VAR 0 5
22260: PUSH
22261: LD_VAR 0 3
22265: PUSH
22266: LD_VAR 0 4
22270: ARRAY
22271: PPUSH
22272: CALL_OW 266
22276: PUSH
22277: LD_VAR 0 3
22281: PUSH
22282: LD_VAR 0 4
22286: ARRAY
22287: PPUSH
22288: CALL_OW 250
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: LD_VAR 0 4
22302: ARRAY
22303: PPUSH
22304: CALL_OW 251
22308: PUSH
22309: LD_VAR 0 3
22313: PUSH
22314: LD_VAR 0 4
22318: ARRAY
22319: PPUSH
22320: CALL_OW 254
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: ADD
22334: ST_TO_ADDR
22335: GO 22248
22337: POP
22338: POP
// result := list ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_VAR 0 5
22348: ST_TO_ADDR
// end ;
22349: LD_VAR 0 2
22353: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22354: LD_INT 0
22356: PPUSH
22357: PPUSH
22358: PPUSH
22359: PPUSH
22360: PPUSH
22361: PPUSH
22362: PPUSH
// if not factory then
22363: LD_VAR 0 1
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 22965
// if control = control_apeman then
22372: LD_VAR 0 4
22376: PUSH
22377: LD_INT 5
22379: EQUAL
22380: IFFALSE 22489
// begin tmp := UnitsInside ( factory ) ;
22382: LD_ADDR_VAR 0 8
22386: PUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 313
22396: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22397: LD_VAR 0 8
22401: PPUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 12
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 72
22416: NOT
22417: IFFALSE 22427
// control := control_manual ;
22419: LD_ADDR_VAR 0 4
22423: PUSH
22424: LD_INT 1
22426: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22427: LD_ADDR_VAR 0 8
22431: PUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL 22124 0 1
22441: ST_TO_ADDR
// if tmp then
22442: LD_VAR 0 8
22446: IFFALSE 22489
// begin for i in tmp do
22448: LD_ADDR_VAR 0 7
22452: PUSH
22453: LD_VAR 0 8
22457: PUSH
22458: FOR_IN
22459: IFFALSE 22487
// if i [ 1 ] = b_ext_radio then
22461: LD_VAR 0 7
22465: PUSH
22466: LD_INT 1
22468: ARRAY
22469: PUSH
22470: LD_INT 22
22472: EQUAL
22473: IFFALSE 22485
// begin control := control_remote ;
22475: LD_ADDR_VAR 0 4
22479: PUSH
22480: LD_INT 2
22482: ST_TO_ADDR
// break ;
22483: GO 22487
// end ;
22485: GO 22458
22487: POP
22488: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22489: LD_VAR 0 1
22493: PPUSH
22494: LD_VAR 0 2
22498: PPUSH
22499: LD_VAR 0 3
22503: PPUSH
22504: LD_VAR 0 4
22508: PPUSH
22509: LD_VAR 0 5
22513: PPUSH
22514: CALL_OW 448
22518: IFFALSE 22553
// begin result := [ chassis , engine , control , weapon ] ;
22520: LD_ADDR_VAR 0 6
22524: PUSH
22525: LD_VAR 0 2
22529: PUSH
22530: LD_VAR 0 3
22534: PUSH
22535: LD_VAR 0 4
22539: PUSH
22540: LD_VAR 0 5
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: ST_TO_ADDR
// exit ;
22551: GO 22965
// end ; _chassis := AvailableChassisList ( factory ) ;
22553: LD_ADDR_VAR 0 9
22557: PUSH
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 475
22567: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22568: LD_ADDR_VAR 0 11
22572: PUSH
22573: LD_VAR 0 1
22577: PPUSH
22578: CALL_OW 476
22582: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22583: LD_ADDR_VAR 0 12
22587: PUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 477
22597: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22598: LD_ADDR_VAR 0 10
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 478
22612: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22613: LD_VAR 0 9
22617: NOT
22618: PUSH
22619: LD_VAR 0 11
22623: NOT
22624: OR
22625: PUSH
22626: LD_VAR 0 12
22630: NOT
22631: OR
22632: PUSH
22633: LD_VAR 0 10
22637: NOT
22638: OR
22639: IFFALSE 22674
// begin result := [ chassis , engine , control , weapon ] ;
22641: LD_ADDR_VAR 0 6
22645: PUSH
22646: LD_VAR 0 2
22650: PUSH
22651: LD_VAR 0 3
22655: PUSH
22656: LD_VAR 0 4
22660: PUSH
22661: LD_VAR 0 5
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: ST_TO_ADDR
// exit ;
22672: GO 22965
// end ; if not chassis in _chassis then
22674: LD_VAR 0 2
22678: PUSH
22679: LD_VAR 0 9
22683: IN
22684: NOT
22685: IFFALSE 22711
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22687: LD_ADDR_VAR 0 2
22691: PUSH
22692: LD_VAR 0 9
22696: PUSH
22697: LD_INT 1
22699: PPUSH
22700: LD_VAR 0 9
22704: PPUSH
22705: CALL_OW 12
22709: ARRAY
22710: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22711: LD_VAR 0 2
22715: PPUSH
22716: LD_VAR 0 3
22720: PPUSH
22721: CALL 22970 0 2
22725: NOT
22726: IFFALSE 22785
// repeat engine := _engine [ 1 ] ;
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_VAR 0 11
22737: PUSH
22738: LD_INT 1
22740: ARRAY
22741: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22742: LD_ADDR_VAR 0 11
22746: PUSH
22747: LD_VAR 0 11
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 3
22759: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22760: LD_VAR 0 2
22764: PPUSH
22765: LD_VAR 0 3
22769: PPUSH
22770: CALL 22970 0 2
22774: PUSH
22775: LD_VAR 0 11
22779: PUSH
22780: EMPTY
22781: EQUAL
22782: OR
22783: IFFALSE 22728
// if not control in _control then
22785: LD_VAR 0 4
22789: PUSH
22790: LD_VAR 0 12
22794: IN
22795: NOT
22796: IFFALSE 22822
// control := _control [ rand ( 1 , _control ) ] ;
22798: LD_ADDR_VAR 0 4
22802: PUSH
22803: LD_VAR 0 12
22807: PUSH
22808: LD_INT 1
22810: PPUSH
22811: LD_VAR 0 12
22815: PPUSH
22816: CALL_OW 12
22820: ARRAY
22821: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22822: LD_VAR 0 2
22826: PPUSH
22827: LD_VAR 0 5
22831: PPUSH
22832: CALL 23190 0 2
22836: NOT
22837: IFFALSE 22896
// repeat weapon := _weapon [ 1 ] ;
22839: LD_ADDR_VAR 0 5
22843: PUSH
22844: LD_VAR 0 10
22848: PUSH
22849: LD_INT 1
22851: ARRAY
22852: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22853: LD_ADDR_VAR 0 10
22857: PUSH
22858: LD_VAR 0 10
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 3
22870: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22871: LD_VAR 0 2
22875: PPUSH
22876: LD_VAR 0 5
22880: PPUSH
22881: CALL 23190 0 2
22885: PUSH
22886: LD_VAR 0 10
22890: PUSH
22891: EMPTY
22892: EQUAL
22893: OR
22894: IFFALSE 22839
// result := [ ] ;
22896: LD_ADDR_VAR 0 6
22900: PUSH
22901: EMPTY
22902: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22903: LD_VAR 0 1
22907: PPUSH
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: LD_VAR 0 5
22927: PPUSH
22928: CALL_OW 448
22932: IFFALSE 22965
// result := [ chassis , engine , control , weapon ] ;
22934: LD_ADDR_VAR 0 6
22938: PUSH
22939: LD_VAR 0 2
22943: PUSH
22944: LD_VAR 0 3
22948: PUSH
22949: LD_VAR 0 4
22953: PUSH
22954: LD_VAR 0 5
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// end ;
22965: LD_VAR 0 6
22969: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22970: LD_INT 0
22972: PPUSH
// if not chassis or not engine then
22973: LD_VAR 0 1
22977: NOT
22978: PUSH
22979: LD_VAR 0 2
22983: NOT
22984: OR
22985: IFFALSE 22989
// exit ;
22987: GO 23185
// case engine of engine_solar :
22989: LD_VAR 0 2
22993: PUSH
22994: LD_INT 2
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23040
23002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_INT 11
23010: PUSH
23011: LD_INT 12
23013: PUSH
23014: LD_INT 13
23016: PUSH
23017: LD_INT 14
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
23038: GO 23169
23040: LD_INT 1
23042: DOUBLE
23043: EQUAL
23044: IFTRUE 23048
23046: GO 23110
23048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23049: LD_ADDR_VAR 0 3
23053: PUSH
23054: LD_INT 11
23056: PUSH
23057: LD_INT 12
23059: PUSH
23060: LD_INT 13
23062: PUSH
23063: LD_INT 14
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 3
23074: PUSH
23075: LD_INT 4
23077: PUSH
23078: LD_INT 5
23080: PUSH
23081: LD_INT 21
23083: PUSH
23084: LD_INT 23
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_INT 24
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
23108: GO 23169
23110: LD_INT 3
23112: DOUBLE
23113: EQUAL
23114: IFTRUE 23118
23116: GO 23168
23118: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23119: LD_ADDR_VAR 0 3
23123: PUSH
23124: LD_INT 13
23126: PUSH
23127: LD_INT 14
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 4
23138: PUSH
23139: LD_INT 5
23141: PUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 22
23147: PUSH
23148: LD_INT 23
23150: PUSH
23151: LD_INT 24
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
23166: GO 23169
23168: POP
// result := ( chassis in result ) ;
23169: LD_ADDR_VAR 0 3
23173: PUSH
23174: LD_VAR 0 1
23178: PUSH
23179: LD_VAR 0 3
23183: IN
23184: ST_TO_ADDR
// end ;
23185: LD_VAR 0 3
23189: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23190: LD_INT 0
23192: PPUSH
// if not chassis or not weapon then
23193: LD_VAR 0 1
23197: NOT
23198: PUSH
23199: LD_VAR 0 2
23203: NOT
23204: OR
23205: IFFALSE 23209
// exit ;
23207: GO 24271
// case weapon of us_machine_gun :
23209: LD_VAR 0 2
23213: PUSH
23214: LD_INT 2
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23252
23222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 4
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
23250: GO 24255
23252: LD_INT 3
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23290
23260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23261: LD_ADDR_VAR 0 3
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 4
23277: PUSH
23278: LD_INT 5
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
23288: GO 24255
23290: LD_INT 11
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23328
23298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 3
23312: PUSH
23313: LD_INT 4
23315: PUSH
23316: LD_INT 5
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 24255
23328: LD_INT 4
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23362
23336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
23360: GO 24255
23362: LD_INT 5
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23396
23370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 4
23384: PUSH
23385: LD_INT 5
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
23394: GO 24255
23396: LD_INT 9
23398: DOUBLE
23399: EQUAL
23400: IFTRUE 23404
23402: GO 23430
23404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
23428: GO 24255
23430: LD_INT 7
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23464
23438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23439: LD_ADDR_VAR 0 3
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
23462: GO 24255
23464: LD_INT 12
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23498
23472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23473: LD_ADDR_VAR 0 3
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 4
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: ST_TO_ADDR
23496: GO 24255
23498: LD_INT 13
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23532
23506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 4
23520: PUSH
23521: LD_INT 5
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
23530: GO 24255
23532: LD_INT 14
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23558
23540: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23541: LD_ADDR_VAR 0 3
23545: PUSH
23546: LD_INT 4
23548: PUSH
23549: LD_INT 5
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: ST_TO_ADDR
23556: GO 24255
23558: LD_INT 6
23560: DOUBLE
23561: EQUAL
23562: IFTRUE 23566
23564: GO 23584
23566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_INT 4
23574: PUSH
23575: LD_INT 5
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: ST_TO_ADDR
23582: GO 24255
23584: LD_INT 10
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23610
23592: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23593: LD_ADDR_VAR 0 3
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 24255
23610: LD_INT 22
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23644
23618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 11
23626: PUSH
23627: LD_INT 12
23629: PUSH
23630: LD_INT 13
23632: PUSH
23633: LD_INT 14
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 24255
23644: LD_INT 23
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23678
23652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 11
23660: PUSH
23661: LD_INT 12
23663: PUSH
23664: LD_INT 13
23666: PUSH
23667: LD_INT 14
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 24255
23678: LD_INT 24
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23712
23686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 13
23700: PUSH
23701: LD_INT 14
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
23710: GO 24255
23712: LD_INT 30
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23746
23720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_INT 11
23728: PUSH
23729: LD_INT 12
23731: PUSH
23732: LD_INT 13
23734: PUSH
23735: LD_INT 14
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: ST_TO_ADDR
23744: GO 24255
23746: LD_INT 25
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23772
23754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23755: LD_ADDR_VAR 0 3
23759: PUSH
23760: LD_INT 13
23762: PUSH
23763: LD_INT 14
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: ST_TO_ADDR
23770: GO 24255
23772: LD_INT 27
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23798
23780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23781: LD_ADDR_VAR 0 3
23785: PUSH
23786: LD_INT 13
23788: PUSH
23789: LD_INT 14
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: ST_TO_ADDR
23796: GO 24255
23798: LD_EXP 34
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23834
23808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: ST_TO_ADDR
23832: GO 24255
23834: LD_INT 28
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23860
23842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 13
23850: PUSH
23851: LD_INT 14
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: ST_TO_ADDR
23858: GO 24255
23860: LD_INT 29
23862: DOUBLE
23863: EQUAL
23864: IFTRUE 23868
23866: GO 23886
23868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23869: LD_ADDR_VAR 0 3
23873: PUSH
23874: LD_INT 13
23876: PUSH
23877: LD_INT 14
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: ST_TO_ADDR
23884: GO 24255
23886: LD_INT 31
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23912
23894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23895: LD_ADDR_VAR 0 3
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24255
23912: LD_INT 26
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23938
23920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_INT 13
23928: PUSH
23929: LD_INT 14
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: ST_TO_ADDR
23936: GO 24255
23938: LD_INT 42
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23972
23946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_INT 21
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_INT 23
23960: PUSH
23961: LD_INT 24
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: ST_TO_ADDR
23970: GO 24255
23972: LD_INT 43
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 24006
23980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23981: LD_ADDR_VAR 0 3
23985: PUSH
23986: LD_INT 21
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_INT 23
23994: PUSH
23995: LD_INT 24
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: ST_TO_ADDR
24004: GO 24255
24006: LD_INT 44
24008: DOUBLE
24009: EQUAL
24010: IFTRUE 24014
24012: GO 24040
24014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24015: LD_ADDR_VAR 0 3
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_INT 23
24028: PUSH
24029: LD_INT 24
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
24038: GO 24255
24040: LD_INT 45
24042: DOUBLE
24043: EQUAL
24044: IFTRUE 24048
24046: GO 24074
24048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: ST_TO_ADDR
24072: GO 24255
24074: LD_INT 49
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24108
24082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 21
24090: PUSH
24091: LD_INT 22
24093: PUSH
24094: LD_INT 23
24096: PUSH
24097: LD_INT 24
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
24106: GO 24255
24108: LD_INT 51
24110: DOUBLE
24111: EQUAL
24112: IFTRUE 24116
24114: GO 24142
24116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: ST_TO_ADDR
24140: GO 24255
24142: LD_INT 52
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24176
24150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_INT 23
24164: PUSH
24165: LD_INT 24
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
24174: GO 24255
24176: LD_INT 53
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24202
24184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 23
24192: PUSH
24193: LD_INT 24
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
24200: GO 24255
24202: LD_INT 46
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24228
24210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24211: LD_ADDR_VAR 0 3
24215: PUSH
24216: LD_INT 23
24218: PUSH
24219: LD_INT 24
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 24255
24228: LD_INT 47
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24254
24236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_INT 23
24244: PUSH
24245: LD_INT 24
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: ST_TO_ADDR
24252: GO 24255
24254: POP
// result := ( chassis in result ) ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_VAR 0 1
24264: PUSH
24265: LD_VAR 0 3
24269: IN
24270: ST_TO_ADDR
// end ;
24271: LD_VAR 0 3
24275: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
// result := array ;
24285: LD_ADDR_VAR 0 5
24289: PUSH
24290: LD_VAR 0 1
24294: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24295: LD_VAR 0 1
24299: NOT
24300: PUSH
24301: LD_VAR 0 2
24305: NOT
24306: OR
24307: PUSH
24308: LD_VAR 0 3
24312: NOT
24313: OR
24314: PUSH
24315: LD_VAR 0 2
24319: PUSH
24320: LD_VAR 0 1
24324: GREATER
24325: OR
24326: PUSH
24327: LD_VAR 0 3
24331: PUSH
24332: LD_VAR 0 1
24336: GREATER
24337: OR
24338: IFFALSE 24342
// exit ;
24340: GO 24638
// if direction then
24342: LD_VAR 0 4
24346: IFFALSE 24410
// begin d := 1 ;
24348: LD_ADDR_VAR 0 9
24352: PUSH
24353: LD_INT 1
24355: ST_TO_ADDR
// if i_from > i_to then
24356: LD_VAR 0 2
24360: PUSH
24361: LD_VAR 0 3
24365: GREATER
24366: IFFALSE 24392
// length := ( array - i_from ) + i_to else
24368: LD_ADDR_VAR 0 11
24372: PUSH
24373: LD_VAR 0 1
24377: PUSH
24378: LD_VAR 0 2
24382: MINUS
24383: PUSH
24384: LD_VAR 0 3
24388: PLUS
24389: ST_TO_ADDR
24390: GO 24408
// length := i_to - i_from ;
24392: LD_ADDR_VAR 0 11
24396: PUSH
24397: LD_VAR 0 3
24401: PUSH
24402: LD_VAR 0 2
24406: MINUS
24407: ST_TO_ADDR
// end else
24408: GO 24471
// begin d := - 1 ;
24410: LD_ADDR_VAR 0 9
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: ST_TO_ADDR
// if i_from > i_to then
24419: LD_VAR 0 2
24423: PUSH
24424: LD_VAR 0 3
24428: GREATER
24429: IFFALSE 24449
// length := i_from - i_to else
24431: LD_ADDR_VAR 0 11
24435: PUSH
24436: LD_VAR 0 2
24440: PUSH
24441: LD_VAR 0 3
24445: MINUS
24446: ST_TO_ADDR
24447: GO 24471
// length := ( array - i_to ) + i_from ;
24449: LD_ADDR_VAR 0 11
24453: PUSH
24454: LD_VAR 0 1
24458: PUSH
24459: LD_VAR 0 3
24463: MINUS
24464: PUSH
24465: LD_VAR 0 2
24469: PLUS
24470: ST_TO_ADDR
// end ; if not length then
24471: LD_VAR 0 11
24475: NOT
24476: IFFALSE 24480
// exit ;
24478: GO 24638
// tmp := array ;
24480: LD_ADDR_VAR 0 10
24484: PUSH
24485: LD_VAR 0 1
24489: ST_TO_ADDR
// for i = 1 to length do
24490: LD_ADDR_VAR 0 6
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_VAR 0 11
24504: PUSH
24505: FOR_TO
24506: IFFALSE 24626
// begin for j = 1 to array do
24508: LD_ADDR_VAR 0 7
24512: PUSH
24513: DOUBLE
24514: LD_INT 1
24516: DEC
24517: ST_TO_ADDR
24518: LD_VAR 0 1
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24612
// begin k := j + d ;
24526: LD_ADDR_VAR 0 8
24530: PUSH
24531: LD_VAR 0 7
24535: PUSH
24536: LD_VAR 0 9
24540: PLUS
24541: ST_TO_ADDR
// if k > array then
24542: LD_VAR 0 8
24546: PUSH
24547: LD_VAR 0 1
24551: GREATER
24552: IFFALSE 24562
// k := 1 ;
24554: LD_ADDR_VAR 0 8
24558: PUSH
24559: LD_INT 1
24561: ST_TO_ADDR
// if not k then
24562: LD_VAR 0 8
24566: NOT
24567: IFFALSE 24579
// k := array ;
24569: LD_ADDR_VAR 0 8
24573: PUSH
24574: LD_VAR 0 1
24578: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24579: LD_ADDR_VAR 0 10
24583: PUSH
24584: LD_VAR 0 10
24588: PPUSH
24589: LD_VAR 0 8
24593: PPUSH
24594: LD_VAR 0 1
24598: PUSH
24599: LD_VAR 0 7
24603: ARRAY
24604: PPUSH
24605: CALL_OW 1
24609: ST_TO_ADDR
// end ;
24610: GO 24523
24612: POP
24613: POP
// array := tmp ;
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_VAR 0 10
24623: ST_TO_ADDR
// end ;
24624: GO 24505
24626: POP
24627: POP
// result := array ;
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: LD_VAR 0 1
24637: ST_TO_ADDR
// end ;
24638: LD_VAR 0 5
24642: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24643: LD_INT 0
24645: PPUSH
24646: PPUSH
// result := 0 ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_INT 0
24654: ST_TO_ADDR
// if not array or not value in array then
24655: LD_VAR 0 1
24659: NOT
24660: PUSH
24661: LD_VAR 0 2
24665: PUSH
24666: LD_VAR 0 1
24670: IN
24671: NOT
24672: OR
24673: IFFALSE 24677
// exit ;
24675: GO 24731
// for i = 1 to array do
24677: LD_ADDR_VAR 0 4
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_VAR 0 1
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24729
// if value = array [ i ] then
24695: LD_VAR 0 2
24699: PUSH
24700: LD_VAR 0 1
24704: PUSH
24705: LD_VAR 0 4
24709: ARRAY
24710: EQUAL
24711: IFFALSE 24727
// begin result := i ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 4
24722: ST_TO_ADDR
// exit ;
24723: POP
24724: POP
24725: GO 24731
// end ;
24727: GO 24692
24729: POP
24730: POP
// end ;
24731: LD_VAR 0 3
24735: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24736: LD_INT 0
24738: PPUSH
// vc_chassis := chassis ;
24739: LD_ADDR_OWVAR 37
24743: PUSH
24744: LD_VAR 0 1
24748: ST_TO_ADDR
// vc_engine := engine ;
24749: LD_ADDR_OWVAR 39
24753: PUSH
24754: LD_VAR 0 2
24758: ST_TO_ADDR
// vc_control := control ;
24759: LD_ADDR_OWVAR 38
24763: PUSH
24764: LD_VAR 0 3
24768: ST_TO_ADDR
// vc_weapon := weapon ;
24769: LD_ADDR_OWVAR 40
24773: PUSH
24774: LD_VAR 0 4
24778: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24779: LD_ADDR_OWVAR 41
24783: PUSH
24784: LD_VAR 0 5
24788: ST_TO_ADDR
// end ;
24789: LD_VAR 0 6
24793: RET
// export function WantPlant ( unit ) ; var task ; begin
24794: LD_INT 0
24796: PPUSH
24797: PPUSH
// result := false ;
24798: LD_ADDR_VAR 0 2
24802: PUSH
24803: LD_INT 0
24805: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24806: LD_ADDR_VAR 0 3
24810: PUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL_OW 437
24820: ST_TO_ADDR
// if task then
24821: LD_VAR 0 3
24825: IFFALSE 24853
// if task [ 1 ] [ 1 ] = p then
24827: LD_VAR 0 3
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PUSH
24840: LD_STRING p
24842: EQUAL
24843: IFFALSE 24853
// result := true ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 1
24852: ST_TO_ADDR
// end ;
24853: LD_VAR 0 2
24857: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24858: LD_INT 0
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
// if pos < 1 then
24864: LD_VAR 0 2
24868: PUSH
24869: LD_INT 1
24871: LESS
24872: IFFALSE 24876
// exit ;
24874: GO 25179
// if pos = 1 then
24876: LD_VAR 0 2
24880: PUSH
24881: LD_INT 1
24883: EQUAL
24884: IFFALSE 24917
// result := Replace ( arr , pos [ 1 ] , value ) else
24886: LD_ADDR_VAR 0 4
24890: PUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_VAR 0 2
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: CALL_OW 1
24914: ST_TO_ADDR
24915: GO 25179
// begin tmp := arr ;
24917: LD_ADDR_VAR 0 6
24921: PUSH
24922: LD_VAR 0 1
24926: ST_TO_ADDR
// s_arr := [ tmp ] ;
24927: LD_ADDR_VAR 0 7
24931: PUSH
24932: LD_VAR 0 6
24936: PUSH
24937: EMPTY
24938: LIST
24939: ST_TO_ADDR
// for i = 1 to pos - 1 do
24940: LD_ADDR_VAR 0 5
24944: PUSH
24945: DOUBLE
24946: LD_INT 1
24948: DEC
24949: ST_TO_ADDR
24950: LD_VAR 0 2
24954: PUSH
24955: LD_INT 1
24957: MINUS
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25005
// begin tmp := tmp [ pos [ i ] ] ;
24962: LD_ADDR_VAR 0 6
24966: PUSH
24967: LD_VAR 0 6
24971: PUSH
24972: LD_VAR 0 2
24976: PUSH
24977: LD_VAR 0 5
24981: ARRAY
24982: ARRAY
24983: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24984: LD_ADDR_VAR 0 7
24988: PUSH
24989: LD_VAR 0 7
24993: PUSH
24994: LD_VAR 0 6
24998: PUSH
24999: EMPTY
25000: LIST
25001: ADD
25002: ST_TO_ADDR
// end ;
25003: GO 24959
25005: POP
25006: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25007: LD_ADDR_VAR 0 6
25011: PUSH
25012: LD_VAR 0 6
25016: PPUSH
25017: LD_VAR 0 2
25021: PUSH
25022: LD_VAR 0 2
25026: ARRAY
25027: PPUSH
25028: LD_VAR 0 3
25032: PPUSH
25033: CALL_OW 1
25037: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25038: LD_ADDR_VAR 0 7
25042: PUSH
25043: LD_VAR 0 7
25047: PPUSH
25048: LD_VAR 0 7
25052: PPUSH
25053: LD_VAR 0 6
25057: PPUSH
25058: CALL_OW 1
25062: ST_TO_ADDR
// for i = s_arr downto 2 do
25063: LD_ADDR_VAR 0 5
25067: PUSH
25068: DOUBLE
25069: LD_VAR 0 7
25073: INC
25074: ST_TO_ADDR
25075: LD_INT 2
25077: PUSH
25078: FOR_DOWNTO
25079: IFFALSE 25163
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25081: LD_ADDR_VAR 0 6
25085: PUSH
25086: LD_VAR 0 7
25090: PUSH
25091: LD_VAR 0 5
25095: PUSH
25096: LD_INT 1
25098: MINUS
25099: ARRAY
25100: PPUSH
25101: LD_VAR 0 2
25105: PUSH
25106: LD_VAR 0 5
25110: PUSH
25111: LD_INT 1
25113: MINUS
25114: ARRAY
25115: PPUSH
25116: LD_VAR 0 7
25120: PUSH
25121: LD_VAR 0 5
25125: ARRAY
25126: PPUSH
25127: CALL_OW 1
25131: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25132: LD_ADDR_VAR 0 7
25136: PUSH
25137: LD_VAR 0 7
25141: PPUSH
25142: LD_VAR 0 5
25146: PUSH
25147: LD_INT 1
25149: MINUS
25150: PPUSH
25151: LD_VAR 0 6
25155: PPUSH
25156: CALL_OW 1
25160: ST_TO_ADDR
// end ;
25161: GO 25078
25163: POP
25164: POP
// result := s_arr [ 1 ] ;
25165: LD_ADDR_VAR 0 4
25169: PUSH
25170: LD_VAR 0 7
25174: PUSH
25175: LD_INT 1
25177: ARRAY
25178: ST_TO_ADDR
// end ; end ;
25179: LD_VAR 0 4
25183: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
// if not list then
25188: LD_VAR 0 1
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 25288
// i := list [ pos1 ] ;
25197: LD_ADDR_VAR 0 5
25201: PUSH
25202: LD_VAR 0 1
25206: PUSH
25207: LD_VAR 0 2
25211: ARRAY
25212: ST_TO_ADDR
// if not i then
25213: LD_VAR 0 5
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25288
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: LD_VAR 0 1
25231: PPUSH
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 1
25241: PUSH
25242: LD_VAR 0 3
25246: ARRAY
25247: PPUSH
25248: CALL_OW 1
25252: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25253: LD_ADDR_VAR 0 1
25257: PUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: LD_VAR 0 5
25272: PPUSH
25273: CALL_OW 1
25277: ST_TO_ADDR
// result := list ;
25278: LD_ADDR_VAR 0 4
25282: PUSH
25283: LD_VAR 0 1
25287: ST_TO_ADDR
// end ;
25288: LD_VAR 0 4
25292: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25293: LD_INT 0
25295: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25296: LD_ADDR_VAR 0 5
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 250
25310: PPUSH
25311: LD_VAR 0 1
25315: PPUSH
25316: CALL_OW 251
25320: PPUSH
25321: LD_VAR 0 2
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: LD_VAR 0 4
25335: PPUSH
25336: CALL 25346 0 5
25340: ST_TO_ADDR
// end ;
25341: LD_VAR 0 5
25345: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
// if not list then
25352: LD_VAR 0 3
25356: NOT
25357: IFFALSE 25361
// exit ;
25359: GO 25749
// result := [ ] ;
25361: LD_ADDR_VAR 0 6
25365: PUSH
25366: EMPTY
25367: ST_TO_ADDR
// for i in list do
25368: LD_ADDR_VAR 0 7
25372: PUSH
25373: LD_VAR 0 3
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25581
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25381: LD_ADDR_VAR 0 9
25385: PUSH
25386: LD_VAR 0 7
25390: PPUSH
25391: LD_VAR 0 1
25395: PPUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: CALL_OW 297
25405: ST_TO_ADDR
// if not result then
25406: LD_VAR 0 6
25410: NOT
25411: IFFALSE 25437
// result := [ [ i , tmp ] ] else
25413: LD_ADDR_VAR 0 6
25417: PUSH
25418: LD_VAR 0 7
25422: PUSH
25423: LD_VAR 0 9
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: ST_TO_ADDR
25435: GO 25579
// begin if result [ result ] [ 2 ] < tmp then
25437: LD_VAR 0 6
25441: PUSH
25442: LD_VAR 0 6
25446: ARRAY
25447: PUSH
25448: LD_INT 2
25450: ARRAY
25451: PUSH
25452: LD_VAR 0 9
25456: LESS
25457: IFFALSE 25499
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25459: LD_ADDR_VAR 0 6
25463: PUSH
25464: LD_VAR 0 6
25468: PPUSH
25469: LD_VAR 0 6
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: PPUSH
25478: LD_VAR 0 7
25482: PUSH
25483: LD_VAR 0 9
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 2
25496: ST_TO_ADDR
25497: GO 25579
// for j = 1 to result do
25499: LD_ADDR_VAR 0 8
25503: PUSH
25504: DOUBLE
25505: LD_INT 1
25507: DEC
25508: ST_TO_ADDR
25509: LD_VAR 0 6
25513: PUSH
25514: FOR_TO
25515: IFFALSE 25577
// begin if tmp < result [ j ] [ 2 ] then
25517: LD_VAR 0 9
25521: PUSH
25522: LD_VAR 0 6
25526: PUSH
25527: LD_VAR 0 8
25531: ARRAY
25532: PUSH
25533: LD_INT 2
25535: ARRAY
25536: LESS
25537: IFFALSE 25575
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_VAR 0 6
25548: PPUSH
25549: LD_VAR 0 8
25553: PPUSH
25554: LD_VAR 0 7
25558: PUSH
25559: LD_VAR 0 9
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 2
25572: ST_TO_ADDR
// break ;
25573: GO 25577
// end ; end ;
25575: GO 25514
25577: POP
25578: POP
// end ; end ;
25579: GO 25378
25581: POP
25582: POP
// if result and not asc then
25583: LD_VAR 0 6
25587: PUSH
25588: LD_VAR 0 4
25592: NOT
25593: AND
25594: IFFALSE 25669
// begin tmp := result ;
25596: LD_ADDR_VAR 0 9
25600: PUSH
25601: LD_VAR 0 6
25605: ST_TO_ADDR
// for i = tmp downto 1 do
25606: LD_ADDR_VAR 0 7
25610: PUSH
25611: DOUBLE
25612: LD_VAR 0 9
25616: INC
25617: ST_TO_ADDR
25618: LD_INT 1
25620: PUSH
25621: FOR_DOWNTO
25622: IFFALSE 25667
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25624: LD_ADDR_VAR 0 6
25628: PUSH
25629: LD_VAR 0 6
25633: PPUSH
25634: LD_VAR 0 9
25638: PUSH
25639: LD_VAR 0 7
25643: MINUS
25644: PUSH
25645: LD_INT 1
25647: PLUS
25648: PPUSH
25649: LD_VAR 0 9
25653: PUSH
25654: LD_VAR 0 7
25658: ARRAY
25659: PPUSH
25660: CALL_OW 1
25664: ST_TO_ADDR
25665: GO 25621
25667: POP
25668: POP
// end ; tmp := [ ] ;
25669: LD_ADDR_VAR 0 9
25673: PUSH
25674: EMPTY
25675: ST_TO_ADDR
// if mode then
25676: LD_VAR 0 5
25680: IFFALSE 25749
// begin for i = 1 to result do
25682: LD_ADDR_VAR 0 7
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_VAR 0 6
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25737
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25700: LD_ADDR_VAR 0 9
25704: PUSH
25705: LD_VAR 0 9
25709: PPUSH
25710: LD_VAR 0 7
25714: PPUSH
25715: LD_VAR 0 6
25719: PUSH
25720: LD_VAR 0 7
25724: ARRAY
25725: PUSH
25726: LD_INT 1
25728: ARRAY
25729: PPUSH
25730: CALL_OW 1
25734: ST_TO_ADDR
25735: GO 25697
25737: POP
25738: POP
// result := tmp ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: LD_VAR 0 9
25748: ST_TO_ADDR
// end ; end ;
25749: LD_VAR 0 6
25753: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25754: LD_INT 0
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25762: LD_ADDR_VAR 0 5
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: ST_TO_ADDR
// if not x or not y then
25784: LD_VAR 0 2
25788: NOT
25789: PUSH
25790: LD_VAR 0 3
25794: NOT
25795: OR
25796: IFFALSE 25800
// exit ;
25798: GO 27452
// if not range then
25800: LD_VAR 0 4
25804: NOT
25805: IFFALSE 25815
// range := 10 ;
25807: LD_ADDR_VAR 0 4
25811: PUSH
25812: LD_INT 10
25814: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25815: LD_ADDR_VAR 0 8
25819: PUSH
25820: LD_INT 81
25822: PUSH
25823: LD_VAR 0 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 92
25834: PUSH
25835: LD_VAR 0 2
25839: PUSH
25840: LD_VAR 0 3
25844: PUSH
25845: LD_VAR 0 4
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 3
25858: PUSH
25859: LD_INT 21
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: PPUSH
25878: CALL_OW 69
25882: ST_TO_ADDR
// if not tmp then
25883: LD_VAR 0 8
25887: NOT
25888: IFFALSE 25892
// exit ;
25890: GO 27452
// for i in tmp do
25892: LD_ADDR_VAR 0 6
25896: PUSH
25897: LD_VAR 0 8
25901: PUSH
25902: FOR_IN
25903: IFFALSE 27427
// begin points := [ 0 , 0 , 0 ] ;
25905: LD_ADDR_VAR 0 9
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
// bpoints := 1 ;
25924: LD_ADDR_VAR 0 10
25928: PUSH
25929: LD_INT 1
25931: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25932: LD_VAR 0 6
25936: PPUSH
25937: CALL_OW 247
25941: PUSH
25942: LD_INT 1
25944: DOUBLE
25945: EQUAL
25946: IFTRUE 25950
25948: GO 26528
25950: POP
// begin if GetClass ( i ) = 1 then
25951: LD_VAR 0 6
25955: PPUSH
25956: CALL_OW 257
25960: PUSH
25961: LD_INT 1
25963: EQUAL
25964: IFFALSE 25985
// points := [ 10 , 5 , 3 ] ;
25966: LD_ADDR_VAR 0 9
25970: PUSH
25971: LD_INT 10
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: LD_INT 3
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25985: LD_VAR 0 6
25989: PPUSH
25990: CALL_OW 257
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: LD_INT 4
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: IN
26009: IFFALSE 26030
// points := [ 3 , 2 , 1 ] ;
26011: LD_ADDR_VAR 0 9
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26030: LD_VAR 0 6
26034: PPUSH
26035: CALL_OW 257
26039: PUSH
26040: LD_INT 5
26042: EQUAL
26043: IFFALSE 26064
// points := [ 130 , 5 , 2 ] ;
26045: LD_ADDR_VAR 0 9
26049: PUSH
26050: LD_INT 130
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26064: LD_VAR 0 6
26068: PPUSH
26069: CALL_OW 257
26073: PUSH
26074: LD_INT 8
26076: EQUAL
26077: IFFALSE 26098
// points := [ 35 , 35 , 30 ] ;
26079: LD_ADDR_VAR 0 9
26083: PUSH
26084: LD_INT 35
26086: PUSH
26087: LD_INT 35
26089: PUSH
26090: LD_INT 30
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26098: LD_VAR 0 6
26102: PPUSH
26103: CALL_OW 257
26107: PUSH
26108: LD_INT 9
26110: EQUAL
26111: IFFALSE 26132
// points := [ 20 , 55 , 40 ] ;
26113: LD_ADDR_VAR 0 9
26117: PUSH
26118: LD_INT 20
26120: PUSH
26121: LD_INT 55
26123: PUSH
26124: LD_INT 40
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26132: LD_VAR 0 6
26136: PPUSH
26137: CALL_OW 257
26141: PUSH
26142: LD_INT 12
26144: PUSH
26145: LD_INT 16
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: IN
26152: IFFALSE 26173
// points := [ 5 , 3 , 2 ] ;
26154: LD_ADDR_VAR 0 9
26158: PUSH
26159: LD_INT 5
26161: PUSH
26162: LD_INT 3
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26173: LD_VAR 0 6
26177: PPUSH
26178: CALL_OW 257
26182: PUSH
26183: LD_INT 17
26185: EQUAL
26186: IFFALSE 26207
// points := [ 100 , 50 , 75 ] ;
26188: LD_ADDR_VAR 0 9
26192: PUSH
26193: LD_INT 100
26195: PUSH
26196: LD_INT 50
26198: PUSH
26199: LD_INT 75
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26207: LD_VAR 0 6
26211: PPUSH
26212: CALL_OW 257
26216: PUSH
26217: LD_INT 15
26219: EQUAL
26220: IFFALSE 26241
// points := [ 10 , 5 , 3 ] ;
26222: LD_ADDR_VAR 0 9
26226: PUSH
26227: LD_INT 10
26229: PUSH
26230: LD_INT 5
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26241: LD_VAR 0 6
26245: PPUSH
26246: CALL_OW 257
26250: PUSH
26251: LD_INT 14
26253: EQUAL
26254: IFFALSE 26275
// points := [ 10 , 0 , 0 ] ;
26256: LD_ADDR_VAR 0 9
26260: PUSH
26261: LD_INT 10
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26275: LD_VAR 0 6
26279: PPUSH
26280: CALL_OW 257
26284: PUSH
26285: LD_INT 11
26287: EQUAL
26288: IFFALSE 26309
// points := [ 30 , 10 , 5 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 30
26297: PUSH
26298: LD_INT 10
26300: PUSH
26301: LD_INT 5
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_INT 5
26316: PPUSH
26317: CALL_OW 321
26321: PUSH
26322: LD_INT 2
26324: EQUAL
26325: IFFALSE 26342
// bpoints := bpoints * 1.8 ;
26327: LD_ADDR_VAR 0 10
26331: PUSH
26332: LD_VAR 0 10
26336: PUSH
26337: LD_REAL  1.80000000000000E+0000
26340: MUL
26341: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26342: LD_VAR 0 6
26346: PPUSH
26347: CALL_OW 257
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 3
26360: PUSH
26361: LD_INT 4
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: IN
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_INT 51
26378: PPUSH
26379: CALL_OW 321
26383: PUSH
26384: LD_INT 2
26386: EQUAL
26387: AND
26388: IFFALSE 26405
// bpoints := bpoints * 1.2 ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 10
26399: PUSH
26400: LD_REAL  1.20000000000000E+0000
26403: MUL
26404: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26405: LD_VAR 0 6
26409: PPUSH
26410: CALL_OW 257
26414: PUSH
26415: LD_INT 5
26417: PUSH
26418: LD_INT 7
26420: PUSH
26421: LD_INT 9
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: IN
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_INT 52
26437: PPUSH
26438: CALL_OW 321
26442: PUSH
26443: LD_INT 2
26445: EQUAL
26446: AND
26447: IFFALSE 26464
// bpoints := bpoints * 1.5 ;
26449: LD_ADDR_VAR 0 10
26453: PUSH
26454: LD_VAR 0 10
26458: PUSH
26459: LD_REAL  1.50000000000000E+0000
26462: MUL
26463: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26464: LD_VAR 0 1
26468: PPUSH
26469: LD_INT 66
26471: PPUSH
26472: CALL_OW 321
26476: PUSH
26477: LD_INT 2
26479: EQUAL
26480: IFFALSE 26497
// bpoints := bpoints * 1.1 ;
26482: LD_ADDR_VAR 0 10
26486: PUSH
26487: LD_VAR 0 10
26491: PUSH
26492: LD_REAL  1.10000000000000E+0000
26495: MUL
26496: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 10
26506: PUSH
26507: LD_VAR 0 6
26511: PPUSH
26512: LD_INT 1
26514: PPUSH
26515: CALL_OW 259
26519: PUSH
26520: LD_REAL  1.15000000000000E+0000
26523: MUL
26524: MUL
26525: ST_TO_ADDR
// end ; unit_vehicle :
26526: GO 27356
26528: LD_INT 2
26530: DOUBLE
26531: EQUAL
26532: IFTRUE 26536
26534: GO 27344
26536: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26537: LD_VAR 0 6
26541: PPUSH
26542: CALL_OW 264
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: LD_INT 42
26552: PUSH
26553: LD_INT 24
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: IN
26561: IFFALSE 26582
// points := [ 25 , 5 , 3 ] ;
26563: LD_ADDR_VAR 0 9
26567: PUSH
26568: LD_INT 25
26570: PUSH
26571: LD_INT 5
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26582: LD_VAR 0 6
26586: PPUSH
26587: CALL_OW 264
26591: PUSH
26592: LD_INT 4
26594: PUSH
26595: LD_INT 43
26597: PUSH
26598: LD_INT 25
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: IN
26606: IFFALSE 26627
// points := [ 40 , 15 , 5 ] ;
26608: LD_ADDR_VAR 0 9
26612: PUSH
26613: LD_INT 40
26615: PUSH
26616: LD_INT 15
26618: PUSH
26619: LD_INT 5
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26627: LD_VAR 0 6
26631: PPUSH
26632: CALL_OW 264
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 23
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: IN
26647: IFFALSE 26668
// points := [ 7 , 25 , 8 ] ;
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: LD_INT 7
26656: PUSH
26657: LD_INT 25
26659: PUSH
26660: LD_INT 8
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26668: LD_VAR 0 6
26672: PPUSH
26673: CALL_OW 264
26677: PUSH
26678: LD_INT 5
26680: PUSH
26681: LD_INT 27
26683: PUSH
26684: LD_INT 44
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: IN
26692: IFFALSE 26713
// points := [ 14 , 50 , 16 ] ;
26694: LD_ADDR_VAR 0 9
26698: PUSH
26699: LD_INT 14
26701: PUSH
26702: LD_INT 50
26704: PUSH
26705: LD_INT 16
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26713: LD_VAR 0 6
26717: PPUSH
26718: CALL_OW 264
26722: PUSH
26723: LD_INT 6
26725: PUSH
26726: LD_INT 46
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: IN
26733: IFFALSE 26754
// points := [ 32 , 120 , 70 ] ;
26735: LD_ADDR_VAR 0 9
26739: PUSH
26740: LD_INT 32
26742: PUSH
26743: LD_INT 120
26745: PUSH
26746: LD_INT 70
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: LIST
26753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26754: LD_VAR 0 6
26758: PPUSH
26759: CALL_OW 264
26763: PUSH
26764: LD_INT 7
26766: PUSH
26767: LD_INT 28
26769: PUSH
26770: LD_INT 45
26772: PUSH
26773: LD_EXP 34
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: IN
26784: IFFALSE 26805
// points := [ 35 , 20 , 45 ] ;
26786: LD_ADDR_VAR 0 9
26790: PUSH
26791: LD_INT 35
26793: PUSH
26794: LD_INT 20
26796: PUSH
26797: LD_INT 45
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26805: LD_VAR 0 6
26809: PPUSH
26810: CALL_OW 264
26814: PUSH
26815: LD_INT 47
26817: PUSH
26818: EMPTY
26819: LIST
26820: IN
26821: IFFALSE 26842
// points := [ 67 , 45 , 75 ] ;
26823: LD_ADDR_VAR 0 9
26827: PUSH
26828: LD_INT 67
26830: PUSH
26831: LD_INT 45
26833: PUSH
26834: LD_INT 75
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26842: LD_VAR 0 6
26846: PPUSH
26847: CALL_OW 264
26851: PUSH
26852: LD_INT 26
26854: PUSH
26855: EMPTY
26856: LIST
26857: IN
26858: IFFALSE 26879
// points := [ 120 , 30 , 80 ] ;
26860: LD_ADDR_VAR 0 9
26864: PUSH
26865: LD_INT 120
26867: PUSH
26868: LD_INT 30
26870: PUSH
26871: LD_INT 80
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26879: LD_VAR 0 6
26883: PPUSH
26884: CALL_OW 264
26888: PUSH
26889: LD_INT 22
26891: PUSH
26892: EMPTY
26893: LIST
26894: IN
26895: IFFALSE 26916
// points := [ 40 , 1 , 1 ] ;
26897: LD_ADDR_VAR 0 9
26901: PUSH
26902: LD_INT 40
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26916: LD_VAR 0 6
26920: PPUSH
26921: CALL_OW 264
26925: PUSH
26926: LD_INT 29
26928: PUSH
26929: EMPTY
26930: LIST
26931: IN
26932: IFFALSE 26953
// points := [ 70 , 200 , 400 ] ;
26934: LD_ADDR_VAR 0 9
26938: PUSH
26939: LD_INT 70
26941: PUSH
26942: LD_INT 200
26944: PUSH
26945: LD_INT 400
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26953: LD_VAR 0 6
26957: PPUSH
26958: CALL_OW 264
26962: PUSH
26963: LD_INT 14
26965: PUSH
26966: LD_INT 53
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: IN
26973: IFFALSE 26994
// points := [ 40 , 10 , 20 ] ;
26975: LD_ADDR_VAR 0 9
26979: PUSH
26980: LD_INT 40
26982: PUSH
26983: LD_INT 10
26985: PUSH
26986: LD_INT 20
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26994: LD_VAR 0 6
26998: PPUSH
26999: CALL_OW 264
27003: PUSH
27004: LD_INT 9
27006: PUSH
27007: EMPTY
27008: LIST
27009: IN
27010: IFFALSE 27031
// points := [ 5 , 70 , 20 ] ;
27012: LD_ADDR_VAR 0 9
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 70
27022: PUSH
27023: LD_INT 20
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27031: LD_VAR 0 6
27035: PPUSH
27036: CALL_OW 264
27040: PUSH
27041: LD_INT 10
27043: PUSH
27044: EMPTY
27045: LIST
27046: IN
27047: IFFALSE 27068
// points := [ 35 , 110 , 70 ] ;
27049: LD_ADDR_VAR 0 9
27053: PUSH
27054: LD_INT 35
27056: PUSH
27057: LD_INT 110
27059: PUSH
27060: LD_INT 70
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27068: LD_VAR 0 6
27072: PPUSH
27073: CALL_OW 265
27077: PUSH
27078: LD_INT 25
27080: EQUAL
27081: IFFALSE 27102
// points := [ 80 , 65 , 100 ] ;
27083: LD_ADDR_VAR 0 9
27087: PUSH
27088: LD_INT 80
27090: PUSH
27091: LD_INT 65
27093: PUSH
27094: LD_INT 100
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27102: LD_VAR 0 6
27106: PPUSH
27107: CALL_OW 263
27111: PUSH
27112: LD_INT 1
27114: EQUAL
27115: IFFALSE 27150
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_VAR 0 10
27126: PUSH
27127: LD_VAR 0 6
27131: PPUSH
27132: CALL_OW 311
27136: PPUSH
27137: LD_INT 3
27139: PPUSH
27140: CALL_OW 259
27144: PUSH
27145: LD_INT 4
27147: MUL
27148: MUL
27149: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27150: LD_VAR 0 6
27154: PPUSH
27155: CALL_OW 263
27159: PUSH
27160: LD_INT 2
27162: EQUAL
27163: IFFALSE 27214
// begin j := IsControledBy ( i ) ;
27165: LD_ADDR_VAR 0 7
27169: PUSH
27170: LD_VAR 0 6
27174: PPUSH
27175: CALL_OW 312
27179: ST_TO_ADDR
// if j then
27180: LD_VAR 0 7
27184: IFFALSE 27214
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27186: LD_ADDR_VAR 0 10
27190: PUSH
27191: LD_VAR 0 10
27195: PUSH
27196: LD_VAR 0 7
27200: PPUSH
27201: LD_INT 3
27203: PPUSH
27204: CALL_OW 259
27208: PUSH
27209: LD_INT 3
27211: MUL
27212: MUL
27213: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 264
27223: PUSH
27224: LD_INT 5
27226: PUSH
27227: LD_INT 6
27229: PUSH
27230: LD_INT 46
27232: PUSH
27233: LD_INT 44
27235: PUSH
27236: LD_INT 47
27238: PUSH
27239: LD_INT 45
27241: PUSH
27242: LD_INT 28
27244: PUSH
27245: LD_INT 7
27247: PUSH
27248: LD_INT 27
27250: PUSH
27251: LD_INT 29
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: IN
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: LD_INT 52
27274: PPUSH
27275: CALL_OW 321
27279: PUSH
27280: LD_INT 2
27282: EQUAL
27283: AND
27284: IFFALSE 27301
// bpoints := bpoints * 1.2 ;
27286: LD_ADDR_VAR 0 10
27290: PUSH
27291: LD_VAR 0 10
27295: PUSH
27296: LD_REAL  1.20000000000000E+0000
27299: MUL
27300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27301: LD_VAR 0 6
27305: PPUSH
27306: CALL_OW 264
27310: PUSH
27311: LD_INT 6
27313: PUSH
27314: LD_INT 46
27316: PUSH
27317: LD_INT 47
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: IN
27325: IFFALSE 27342
// bpoints := bpoints * 1.2 ;
27327: LD_ADDR_VAR 0 10
27331: PUSH
27332: LD_VAR 0 10
27336: PUSH
27337: LD_REAL  1.20000000000000E+0000
27340: MUL
27341: ST_TO_ADDR
// end ; unit_building :
27342: GO 27356
27344: LD_INT 3
27346: DOUBLE
27347: EQUAL
27348: IFTRUE 27352
27350: GO 27355
27352: POP
// ; end ;
27353: GO 27356
27355: POP
// for j = 1 to 3 do
27356: LD_ADDR_VAR 0 7
27360: PUSH
27361: DOUBLE
27362: LD_INT 1
27364: DEC
27365: ST_TO_ADDR
27366: LD_INT 3
27368: PUSH
27369: FOR_TO
27370: IFFALSE 27423
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27372: LD_ADDR_VAR 0 5
27376: PUSH
27377: LD_VAR 0 5
27381: PPUSH
27382: LD_VAR 0 7
27386: PPUSH
27387: LD_VAR 0 5
27391: PUSH
27392: LD_VAR 0 7
27396: ARRAY
27397: PUSH
27398: LD_VAR 0 9
27402: PUSH
27403: LD_VAR 0 7
27407: ARRAY
27408: PUSH
27409: LD_VAR 0 10
27413: MUL
27414: PLUS
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
27421: GO 27369
27423: POP
27424: POP
// end ;
27425: GO 25902
27427: POP
27428: POP
// result := Replace ( result , 4 , tmp ) ;
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: LD_VAR 0 5
27438: PPUSH
27439: LD_INT 4
27441: PPUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 1
27451: ST_TO_ADDR
// end ;
27452: LD_VAR 0 5
27456: RET
// export function DangerAtRange ( unit , range ) ; begin
27457: LD_INT 0
27459: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_VAR 0 1
27469: PPUSH
27470: CALL_OW 255
27474: PPUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL_OW 250
27484: PPUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL_OW 251
27494: PPUSH
27495: LD_VAR 0 2
27499: PPUSH
27500: CALL 25754 0 4
27504: ST_TO_ADDR
// end ;
27505: LD_VAR 0 3
27509: RET
// export function DangerInArea ( side , area ) ; begin
27510: LD_INT 0
27512: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_INT 81
27525: PUSH
27526: LD_VAR 0 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PPUSH
27535: CALL_OW 70
27539: ST_TO_ADDR
// end ;
27540: LD_VAR 0 3
27544: RET
// export function IsExtension ( b ) ; begin
27545: LD_INT 0
27547: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27548: LD_ADDR_VAR 0 2
27552: PUSH
27553: LD_VAR 0 1
27557: PUSH
27558: LD_INT 23
27560: PUSH
27561: LD_INT 20
27563: PUSH
27564: LD_INT 22
27566: PUSH
27567: LD_INT 17
27569: PUSH
27570: LD_INT 24
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 19
27578: PUSH
27579: LD_INT 16
27581: PUSH
27582: LD_INT 25
27584: PUSH
27585: LD_INT 18
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: IN
27600: ST_TO_ADDR
// end ;
27601: LD_VAR 0 2
27605: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27606: LD_INT 0
27608: PPUSH
27609: PPUSH
27610: PPUSH
// result := [ ] ;
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: EMPTY
27617: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27618: LD_ADDR_VAR 0 5
27622: PUSH
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_INT 21
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PPUSH
27638: CALL_OW 70
27642: ST_TO_ADDR
// if not tmp then
27643: LD_VAR 0 5
27647: NOT
27648: IFFALSE 27652
// exit ;
27650: GO 27716
// if checkLink then
27652: LD_VAR 0 3
27656: IFFALSE 27706
// begin for i in tmp do
27658: LD_ADDR_VAR 0 6
27662: PUSH
27663: LD_VAR 0 5
27667: PUSH
27668: FOR_IN
27669: IFFALSE 27704
// if GetBase ( i ) <> base then
27671: LD_VAR 0 6
27675: PPUSH
27676: CALL_OW 274
27680: PUSH
27681: LD_VAR 0 1
27685: NONEQUAL
27686: IFFALSE 27702
// ComLinkToBase ( base , i ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 6
27697: PPUSH
27698: CALL_OW 169
27702: GO 27668
27704: POP
27705: POP
// end ; result := tmp ;
27706: LD_ADDR_VAR 0 4
27710: PUSH
27711: LD_VAR 0 5
27715: ST_TO_ADDR
// end ;
27716: LD_VAR 0 4
27720: RET
// export function ComComplete ( units , b ) ; var i ; begin
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
// if not units then
27725: LD_VAR 0 1
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27824
// for i in units do
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 1
27743: PUSH
27744: FOR_IN
27745: IFFALSE 27822
// if BuildingStatus ( b ) = bs_build then
27747: LD_VAR 0 2
27751: PPUSH
27752: CALL_OW 461
27756: PUSH
27757: LD_INT 1
27759: EQUAL
27760: IFFALSE 27820
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27762: LD_VAR 0 4
27766: PPUSH
27767: LD_STRING h
27769: PUSH
27770: LD_VAR 0 2
27774: PPUSH
27775: CALL_OW 250
27779: PUSH
27780: LD_VAR 0 2
27784: PPUSH
27785: CALL_OW 251
27789: PUSH
27790: LD_VAR 0 2
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: PPUSH
27816: CALL_OW 446
27820: GO 27744
27822: POP
27823: POP
// end ;
27824: LD_VAR 0 3
27828: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27837: LD_VAR 0 1
27841: NOT
27842: PUSH
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 263
27852: PUSH
27853: LD_INT 2
27855: NONEQUAL
27856: OR
27857: IFFALSE 27861
// exit ;
27859: GO 28177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27861: LD_ADDR_VAR 0 6
27865: PUSH
27866: LD_INT 22
27868: PUSH
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 255
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 36
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 34
27898: PUSH
27899: LD_INT 31
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PPUSH
27915: CALL_OW 69
27919: ST_TO_ADDR
// if not tmp then
27920: LD_VAR 0 6
27924: NOT
27925: IFFALSE 27929
// exit ;
27927: GO 28177
// result := [ ] ;
27929: LD_ADDR_VAR 0 2
27933: PUSH
27934: EMPTY
27935: ST_TO_ADDR
// for i in tmp do
27936: LD_ADDR_VAR 0 3
27940: PUSH
27941: LD_VAR 0 6
27945: PUSH
27946: FOR_IN
27947: IFFALSE 28018
// begin t := UnitsInside ( i ) ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 313
27963: ST_TO_ADDR
// if t then
27964: LD_VAR 0 4
27968: IFFALSE 28016
// for j in t do
27970: LD_ADDR_VAR 0 7
27974: PUSH
27975: LD_VAR 0 4
27979: PUSH
27980: FOR_IN
27981: IFFALSE 28014
// result := Replace ( result , result + 1 , j ) ;
27983: LD_ADDR_VAR 0 2
27987: PUSH
27988: LD_VAR 0 2
27992: PPUSH
27993: LD_VAR 0 2
27997: PUSH
27998: LD_INT 1
28000: PLUS
28001: PPUSH
28002: LD_VAR 0 7
28006: PPUSH
28007: CALL_OW 1
28011: ST_TO_ADDR
28012: GO 27980
28014: POP
28015: POP
// end ;
28016: GO 27946
28018: POP
28019: POP
// if not result then
28020: LD_VAR 0 2
28024: NOT
28025: IFFALSE 28029
// exit ;
28027: GO 28177
// mech := result [ 1 ] ;
28029: LD_ADDR_VAR 0 5
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: ST_TO_ADDR
// if result > 1 then
28043: LD_VAR 0 2
28047: PUSH
28048: LD_INT 1
28050: GREATER
28051: IFFALSE 28163
// begin for i = 2 to result do
28053: LD_ADDR_VAR 0 3
28057: PUSH
28058: DOUBLE
28059: LD_INT 2
28061: DEC
28062: ST_TO_ADDR
28063: LD_VAR 0 2
28067: PUSH
28068: FOR_TO
28069: IFFALSE 28161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28071: LD_ADDR_VAR 0 4
28075: PUSH
28076: LD_VAR 0 2
28080: PUSH
28081: LD_VAR 0 3
28085: ARRAY
28086: PPUSH
28087: LD_INT 3
28089: PPUSH
28090: CALL_OW 259
28094: PUSH
28095: LD_VAR 0 2
28099: PUSH
28100: LD_VAR 0 3
28104: ARRAY
28105: PPUSH
28106: CALL_OW 432
28110: MINUS
28111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28112: LD_VAR 0 4
28116: PUSH
28117: LD_VAR 0 5
28121: PPUSH
28122: LD_INT 3
28124: PPUSH
28125: CALL_OW 259
28129: PUSH
28130: LD_VAR 0 5
28134: PPUSH
28135: CALL_OW 432
28139: MINUS
28140: GREATEREQUAL
28141: IFFALSE 28159
// mech := result [ i ] ;
28143: LD_ADDR_VAR 0 5
28147: PUSH
28148: LD_VAR 0 2
28152: PUSH
28153: LD_VAR 0 3
28157: ARRAY
28158: ST_TO_ADDR
// end ;
28159: GO 28068
28161: POP
28162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_VAR 0 5
28172: PPUSH
28173: CALL_OW 135
// end ;
28177: LD_VAR 0 2
28181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
// result := [ ] ;
28197: LD_ADDR_VAR 0 7
28201: PUSH
28202: EMPTY
28203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 266
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: IN
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 29863
// if name then
28229: LD_VAR 0 3
28233: IFFALSE 28249
// SetBName ( base_dep , name ) ;
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_VAR 0 3
28244: PPUSH
28245: CALL_OW 500
// base := GetBase ( base_dep ) ;
28249: LD_ADDR_VAR 0 15
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 274
28263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28264: LD_ADDR_VAR 0 16
28268: PUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 255
28278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28279: LD_ADDR_VAR 0 17
28283: PUSH
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 248
28293: ST_TO_ADDR
// if sources then
28294: LD_VAR 0 5
28298: IFFALSE 28345
// for i = 1 to 3 do
28300: LD_ADDR_VAR 0 8
28304: PUSH
28305: DOUBLE
28306: LD_INT 1
28308: DEC
28309: ST_TO_ADDR
28310: LD_INT 3
28312: PUSH
28313: FOR_TO
28314: IFFALSE 28343
// AddResourceType ( base , i , sources [ i ] ) ;
28316: LD_VAR 0 15
28320: PPUSH
28321: LD_VAR 0 8
28325: PPUSH
28326: LD_VAR 0 5
28330: PUSH
28331: LD_VAR 0 8
28335: ARRAY
28336: PPUSH
28337: CALL_OW 276
28341: GO 28313
28343: POP
28344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28345: LD_ADDR_VAR 0 18
28349: PUSH
28350: LD_VAR 0 15
28354: PPUSH
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 1
28362: PPUSH
28363: CALL 27606 0 3
28367: ST_TO_ADDR
// InitHc ;
28368: CALL_OW 19
// InitUc ;
28372: CALL_OW 18
// uc_side := side ;
28376: LD_ADDR_OWVAR 20
28380: PUSH
28381: LD_VAR 0 16
28385: ST_TO_ADDR
// uc_nation := nation ;
28386: LD_ADDR_OWVAR 21
28390: PUSH
28391: LD_VAR 0 17
28395: ST_TO_ADDR
// if buildings then
28396: LD_VAR 0 18
28400: IFFALSE 29722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28402: LD_ADDR_VAR 0 19
28406: PUSH
28407: LD_VAR 0 18
28411: PPUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: LD_INT 29
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: LD_INT 30
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 72
28444: ST_TO_ADDR
// if tmp then
28445: LD_VAR 0 19
28449: IFFALSE 28497
// for i in tmp do
28451: LD_ADDR_VAR 0 8
28455: PUSH
28456: LD_VAR 0 19
28460: PUSH
28461: FOR_IN
28462: IFFALSE 28495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28464: LD_VAR 0 8
28468: PPUSH
28469: CALL_OW 250
28473: PPUSH
28474: LD_VAR 0 8
28478: PPUSH
28479: CALL_OW 251
28483: PPUSH
28484: LD_VAR 0 16
28488: PPUSH
28489: CALL_OW 441
28493: GO 28461
28495: POP
28496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28497: LD_VAR 0 18
28501: PPUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 30
28507: PUSH
28508: LD_INT 32
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 30
28517: PUSH
28518: LD_INT 33
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 72
28534: IFFALSE 28622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28536: LD_ADDR_VAR 0 8
28540: PUSH
28541: LD_VAR 0 18
28545: PPUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 30
28551: PUSH
28552: LD_INT 32
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 30
28561: PUSH
28562: LD_INT 33
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 72
28578: PUSH
28579: FOR_IN
28580: IFFALSE 28620
// begin if not GetBWeapon ( i ) then
28582: LD_VAR 0 8
28586: PPUSH
28587: CALL_OW 269
28591: NOT
28592: IFFALSE 28618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28594: LD_VAR 0 8
28598: PPUSH
28599: LD_VAR 0 8
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL 29868 0 2
28613: PPUSH
28614: CALL_OW 431
// end ;
28618: GO 28579
28620: POP
28621: POP
// end ; for i = 1 to personel do
28622: LD_ADDR_VAR 0 8
28626: PUSH
28627: DOUBLE
28628: LD_INT 1
28630: DEC
28631: ST_TO_ADDR
28632: LD_VAR 0 6
28636: PUSH
28637: FOR_TO
28638: IFFALSE 29702
// begin if i > 4 then
28640: LD_VAR 0 8
28644: PUSH
28645: LD_INT 4
28647: GREATER
28648: IFFALSE 28652
// break ;
28650: GO 29702
// case i of 1 :
28652: LD_VAR 0 8
28656: PUSH
28657: LD_INT 1
28659: DOUBLE
28660: EQUAL
28661: IFTRUE 28665
28663: GO 28745
28665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28666: LD_ADDR_VAR 0 12
28670: PUSH
28671: LD_VAR 0 18
28675: PPUSH
28676: LD_INT 22
28678: PUSH
28679: LD_VAR 0 16
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 58
28690: PUSH
28691: EMPTY
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 30
28699: PUSH
28700: LD_INT 32
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 30
28709: PUSH
28710: LD_INT 4
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 30
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 72
28742: ST_TO_ADDR
28743: GO 28967
28745: LD_INT 2
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28815
28753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28754: LD_ADDR_VAR 0 12
28758: PUSH
28759: LD_VAR 0 18
28763: PPUSH
28764: LD_INT 22
28766: PUSH
28767: LD_VAR 0 16
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 30
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 30
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PPUSH
28808: CALL_OW 72
28812: ST_TO_ADDR
28813: GO 28967
28815: LD_INT 3
28817: DOUBLE
28818: EQUAL
28819: IFTRUE 28823
28821: GO 28885
28823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28824: LD_ADDR_VAR 0 12
28828: PUSH
28829: LD_VAR 0 18
28833: PPUSH
28834: LD_INT 22
28836: PUSH
28837: LD_VAR 0 16
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: LD_INT 30
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 30
28861: PUSH
28862: LD_INT 3
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 72
28882: ST_TO_ADDR
28883: GO 28967
28885: LD_INT 4
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28966
28893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28894: LD_ADDR_VAR 0 12
28898: PUSH
28899: LD_VAR 0 18
28903: PPUSH
28904: LD_INT 22
28906: PUSH
28907: LD_VAR 0 16
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: LD_INT 6
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 30
28931: PUSH
28932: LD_INT 7
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 30
28941: PUSH
28942: LD_INT 8
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 72
28963: ST_TO_ADDR
28964: GO 28967
28966: POP
// if i = 1 then
28967: LD_VAR 0 8
28971: PUSH
28972: LD_INT 1
28974: EQUAL
28975: IFFALSE 29086
// begin tmp := [ ] ;
28977: LD_ADDR_VAR 0 19
28981: PUSH
28982: EMPTY
28983: ST_TO_ADDR
// for j in f do
28984: LD_ADDR_VAR 0 9
28988: PUSH
28989: LD_VAR 0 12
28993: PUSH
28994: FOR_IN
28995: IFFALSE 29068
// if GetBType ( j ) = b_bunker then
28997: LD_VAR 0 9
29001: PPUSH
29002: CALL_OW 266
29006: PUSH
29007: LD_INT 32
29009: EQUAL
29010: IFFALSE 29037
// tmp := Insert ( tmp , 1 , j ) else
29012: LD_ADDR_VAR 0 19
29016: PUSH
29017: LD_VAR 0 19
29021: PPUSH
29022: LD_INT 1
29024: PPUSH
29025: LD_VAR 0 9
29029: PPUSH
29030: CALL_OW 2
29034: ST_TO_ADDR
29035: GO 29066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29037: LD_ADDR_VAR 0 19
29041: PUSH
29042: LD_VAR 0 19
29046: PPUSH
29047: LD_VAR 0 19
29051: PUSH
29052: LD_INT 1
29054: PLUS
29055: PPUSH
29056: LD_VAR 0 9
29060: PPUSH
29061: CALL_OW 2
29065: ST_TO_ADDR
29066: GO 28994
29068: POP
29069: POP
// if tmp then
29070: LD_VAR 0 19
29074: IFFALSE 29086
// f := tmp ;
29076: LD_ADDR_VAR 0 12
29080: PUSH
29081: LD_VAR 0 19
29085: ST_TO_ADDR
// end ; x := personel [ i ] ;
29086: LD_ADDR_VAR 0 13
29090: PUSH
29091: LD_VAR 0 6
29095: PUSH
29096: LD_VAR 0 8
29100: ARRAY
29101: ST_TO_ADDR
// if x = - 1 then
29102: LD_VAR 0 13
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: EQUAL
29111: IFFALSE 29320
// begin for j in f do
29113: LD_ADDR_VAR 0 9
29117: PUSH
29118: LD_VAR 0 12
29122: PUSH
29123: FOR_IN
29124: IFFALSE 29316
// repeat InitHc ;
29126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29130: LD_VAR 0 9
29134: PPUSH
29135: CALL_OW 266
29139: PUSH
29140: LD_INT 5
29142: EQUAL
29143: IFFALSE 29213
// begin if UnitsInside ( j ) < 3 then
29145: LD_VAR 0 9
29149: PPUSH
29150: CALL_OW 313
29154: PUSH
29155: LD_INT 3
29157: LESS
29158: IFFALSE 29194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29160: LD_INT 0
29162: PPUSH
29163: LD_INT 5
29165: PUSH
29166: LD_INT 8
29168: PUSH
29169: LD_INT 9
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: PUSH
29177: LD_VAR 0 17
29181: ARRAY
29182: PPUSH
29183: LD_VAR 0 4
29187: PPUSH
29188: CALL_OW 380
29192: GO 29211
// PrepareHuman ( false , i , skill ) ;
29194: LD_INT 0
29196: PPUSH
29197: LD_VAR 0 8
29201: PPUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 380
// end else
29211: GO 29230
// PrepareHuman ( false , i , skill ) ;
29213: LD_INT 0
29215: PPUSH
29216: LD_VAR 0 8
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: CALL_OW 380
// un := CreateHuman ;
29230: LD_ADDR_VAR 0 14
29234: PUSH
29235: CALL_OW 44
29239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29240: LD_ADDR_VAR 0 7
29244: PUSH
29245: LD_VAR 0 7
29249: PPUSH
29250: LD_INT 1
29252: PPUSH
29253: LD_VAR 0 14
29257: PPUSH
29258: CALL_OW 2
29262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29263: LD_VAR 0 14
29267: PPUSH
29268: LD_VAR 0 9
29272: PPUSH
29273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29277: LD_VAR 0 9
29281: PPUSH
29282: CALL_OW 313
29286: PUSH
29287: LD_INT 6
29289: EQUAL
29290: PUSH
29291: LD_VAR 0 9
29295: PPUSH
29296: CALL_OW 266
29300: PUSH
29301: LD_INT 32
29303: PUSH
29304: LD_INT 31
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: IN
29311: OR
29312: IFFALSE 29126
29314: GO 29123
29316: POP
29317: POP
// end else
29318: GO 29700
// for j = 1 to x do
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: DOUBLE
29326: LD_INT 1
29328: DEC
29329: ST_TO_ADDR
29330: LD_VAR 0 13
29334: PUSH
29335: FOR_TO
29336: IFFALSE 29698
// begin InitHc ;
29338: CALL_OW 19
// if not f then
29342: LD_VAR 0 12
29346: NOT
29347: IFFALSE 29436
// begin PrepareHuman ( false , i , skill ) ;
29349: LD_INT 0
29351: PPUSH
29352: LD_VAR 0 8
29356: PPUSH
29357: LD_VAR 0 4
29361: PPUSH
29362: CALL_OW 380
// un := CreateHuman ;
29366: LD_ADDR_VAR 0 14
29370: PUSH
29371: CALL_OW 44
29375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29376: LD_ADDR_VAR 0 7
29380: PUSH
29381: LD_VAR 0 7
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: LD_VAR 0 14
29393: PPUSH
29394: CALL_OW 2
29398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29399: LD_VAR 0 14
29403: PPUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 250
29413: PPUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 251
29423: PPUSH
29424: LD_INT 10
29426: PPUSH
29427: LD_INT 0
29429: PPUSH
29430: CALL_OW 50
// continue ;
29434: GO 29335
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29436: LD_VAR 0 12
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: CALL_OW 313
29449: PUSH
29450: LD_VAR 0 12
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 266
29463: PUSH
29464: LD_INT 32
29466: PUSH
29467: LD_INT 31
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: IN
29474: AND
29475: PUSH
29476: LD_VAR 0 12
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: CALL_OW 313
29489: PUSH
29490: LD_INT 6
29492: EQUAL
29493: OR
29494: IFFALSE 29514
// f := Delete ( f , 1 ) ;
29496: LD_ADDR_VAR 0 12
29500: PUSH
29501: LD_VAR 0 12
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 3
29513: ST_TO_ADDR
// if not f then
29514: LD_VAR 0 12
29518: NOT
29519: IFFALSE 29537
// begin x := x + 2 ;
29521: LD_ADDR_VAR 0 13
29525: PUSH
29526: LD_VAR 0 13
29530: PUSH
29531: LD_INT 2
29533: PLUS
29534: ST_TO_ADDR
// continue ;
29535: GO 29335
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29537: LD_VAR 0 12
29541: PUSH
29542: LD_INT 1
29544: ARRAY
29545: PPUSH
29546: CALL_OW 266
29550: PUSH
29551: LD_INT 5
29553: EQUAL
29554: IFFALSE 29628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29556: LD_VAR 0 12
29560: PUSH
29561: LD_INT 1
29563: ARRAY
29564: PPUSH
29565: CALL_OW 313
29569: PUSH
29570: LD_INT 3
29572: LESS
29573: IFFALSE 29609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29575: LD_INT 0
29577: PPUSH
29578: LD_INT 5
29580: PUSH
29581: LD_INT 8
29583: PUSH
29584: LD_INT 9
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: LD_VAR 0 17
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL_OW 380
29607: GO 29626
// PrepareHuman ( false , i , skill ) ;
29609: LD_INT 0
29611: PPUSH
29612: LD_VAR 0 8
29616: PPUSH
29617: LD_VAR 0 4
29621: PPUSH
29622: CALL_OW 380
// end else
29626: GO 29645
// PrepareHuman ( false , i , skill ) ;
29628: LD_INT 0
29630: PPUSH
29631: LD_VAR 0 8
29635: PPUSH
29636: LD_VAR 0 4
29640: PPUSH
29641: CALL_OW 380
// un := CreateHuman ;
29645: LD_ADDR_VAR 0 14
29649: PUSH
29650: CALL_OW 44
29654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29655: LD_ADDR_VAR 0 7
29659: PUSH
29660: LD_VAR 0 7
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: LD_VAR 0 14
29672: PPUSH
29673: CALL_OW 2
29677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29678: LD_VAR 0 14
29682: PPUSH
29683: LD_VAR 0 12
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 52
// end ;
29696: GO 29335
29698: POP
29699: POP
// end ;
29700: GO 28637
29702: POP
29703: POP
// result := result ^ buildings ;
29704: LD_ADDR_VAR 0 7
29708: PUSH
29709: LD_VAR 0 7
29713: PUSH
29714: LD_VAR 0 18
29718: ADD
29719: ST_TO_ADDR
// end else
29720: GO 29863
// begin for i = 1 to personel do
29722: LD_ADDR_VAR 0 8
29726: PUSH
29727: DOUBLE
29728: LD_INT 1
29730: DEC
29731: ST_TO_ADDR
29732: LD_VAR 0 6
29736: PUSH
29737: FOR_TO
29738: IFFALSE 29861
// begin if i > 4 then
29740: LD_VAR 0 8
29744: PUSH
29745: LD_INT 4
29747: GREATER
29748: IFFALSE 29752
// break ;
29750: GO 29861
// x := personel [ i ] ;
29752: LD_ADDR_VAR 0 13
29756: PUSH
29757: LD_VAR 0 6
29761: PUSH
29762: LD_VAR 0 8
29766: ARRAY
29767: ST_TO_ADDR
// if x = - 1 then
29768: LD_VAR 0 13
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: EQUAL
29777: IFFALSE 29781
// continue ;
29779: GO 29737
// PrepareHuman ( false , i , skill ) ;
29781: LD_INT 0
29783: PPUSH
29784: LD_VAR 0 8
29788: PPUSH
29789: LD_VAR 0 4
29793: PPUSH
29794: CALL_OW 380
// un := CreateHuman ;
29798: LD_ADDR_VAR 0 14
29802: PUSH
29803: CALL_OW 44
29807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29808: LD_VAR 0 14
29812: PPUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 250
29822: PPUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 251
29832: PPUSH
29833: LD_INT 10
29835: PPUSH
29836: LD_INT 0
29838: PPUSH
29839: CALL_OW 50
// result := result ^ un ;
29843: LD_ADDR_VAR 0 7
29847: PUSH
29848: LD_VAR 0 7
29852: PUSH
29853: LD_VAR 0 14
29857: ADD
29858: ST_TO_ADDR
// end ;
29859: GO 29737
29861: POP
29862: POP
// end ; end ;
29863: LD_VAR 0 7
29867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
// result := false ;
29886: LD_ADDR_VAR 0 3
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29894: LD_VAR 0 1
29898: NOT
29899: PUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 266
29909: PUSH
29910: LD_INT 32
29912: PUSH
29913: LD_INT 33
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: IN
29920: NOT
29921: OR
29922: IFFALSE 29926
// exit ;
29924: GO 31035
// nat := GetNation ( tower ) ;
29926: LD_ADDR_VAR 0 12
29930: PUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 248
29940: ST_TO_ADDR
// side := GetSide ( tower ) ;
29941: LD_ADDR_VAR 0 16
29945: PUSH
29946: LD_VAR 0 1
29950: PPUSH
29951: CALL_OW 255
29955: ST_TO_ADDR
// x := GetX ( tower ) ;
29956: LD_ADDR_VAR 0 10
29960: PUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 250
29970: ST_TO_ADDR
// y := GetY ( tower ) ;
29971: LD_ADDR_VAR 0 11
29975: PUSH
29976: LD_VAR 0 1
29980: PPUSH
29981: CALL_OW 251
29985: ST_TO_ADDR
// if not x or not y then
29986: LD_VAR 0 10
29990: NOT
29991: PUSH
29992: LD_VAR 0 11
29996: NOT
29997: OR
29998: IFFALSE 30002
// exit ;
30000: GO 31035
// weapon := 0 ;
30002: LD_ADDR_VAR 0 18
30006: PUSH
30007: LD_INT 0
30009: ST_TO_ADDR
// fac_list := [ ] ;
30010: LD_ADDR_VAR 0 17
30014: PUSH
30015: EMPTY
30016: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 274
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_INT 0
30039: PPUSH
30040: CALL 27606 0 3
30044: PPUSH
30045: LD_INT 30
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PPUSH
30055: CALL_OW 72
30059: ST_TO_ADDR
// if not factories then
30060: LD_VAR 0 6
30064: NOT
30065: IFFALSE 30069
// exit ;
30067: GO 31035
// for i in factories do
30069: LD_ADDR_VAR 0 8
30073: PUSH
30074: LD_VAR 0 6
30078: PUSH
30079: FOR_IN
30080: IFFALSE 30105
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30082: LD_ADDR_VAR 0 17
30086: PUSH
30087: LD_VAR 0 17
30091: PUSH
30092: LD_VAR 0 8
30096: PPUSH
30097: CALL_OW 478
30101: UNION
30102: ST_TO_ADDR
30103: GO 30079
30105: POP
30106: POP
// if not fac_list then
30107: LD_VAR 0 17
30111: NOT
30112: IFFALSE 30116
// exit ;
30114: GO 31035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30116: LD_ADDR_VAR 0 5
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 5
30126: PUSH
30127: LD_INT 9
30129: PUSH
30130: LD_INT 10
30132: PUSH
30133: LD_INT 6
30135: PUSH
30136: LD_INT 7
30138: PUSH
30139: LD_INT 11
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 27
30153: PUSH
30154: LD_INT 28
30156: PUSH
30157: LD_INT 26
30159: PUSH
30160: LD_INT 30
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 43
30171: PUSH
30172: LD_INT 44
30174: PUSH
30175: LD_INT 46
30177: PUSH
30178: LD_INT 45
30180: PUSH
30181: LD_INT 47
30183: PUSH
30184: LD_INT 49
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: LD_VAR 0 12
30204: ARRAY
30205: ST_TO_ADDR
// list := list isect fac_list ;
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: LD_VAR 0 5
30215: PUSH
30216: LD_VAR 0 17
30220: ISECT
30221: ST_TO_ADDR
// if not list then
30222: LD_VAR 0 5
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 31035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30231: LD_VAR 0 12
30235: PUSH
30236: LD_INT 3
30238: EQUAL
30239: PUSH
30240: LD_INT 49
30242: PUSH
30243: LD_VAR 0 5
30247: IN
30248: AND
30249: PUSH
30250: LD_INT 31
30252: PPUSH
30253: LD_VAR 0 16
30257: PPUSH
30258: CALL_OW 321
30262: PUSH
30263: LD_INT 2
30265: EQUAL
30266: AND
30267: IFFALSE 30327
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30269: LD_INT 22
30271: PUSH
30272: LD_VAR 0 16
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 35
30283: PUSH
30284: LD_INT 49
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 91
30293: PUSH
30294: LD_VAR 0 1
30298: PUSH
30299: LD_INT 10
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 69
30316: NOT
30317: IFFALSE 30327
// weapon := ru_time_lapser ;
30319: LD_ADDR_VAR 0 18
30323: PUSH
30324: LD_INT 49
30326: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30327: LD_VAR 0 12
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: IN
30342: PUSH
30343: LD_INT 11
30345: PUSH
30346: LD_VAR 0 5
30350: IN
30351: PUSH
30352: LD_INT 30
30354: PUSH
30355: LD_VAR 0 5
30359: IN
30360: OR
30361: AND
30362: PUSH
30363: LD_INT 6
30365: PPUSH
30366: LD_VAR 0 16
30370: PPUSH
30371: CALL_OW 321
30375: PUSH
30376: LD_INT 2
30378: EQUAL
30379: AND
30380: IFFALSE 30545
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30382: LD_INT 22
30384: PUSH
30385: LD_VAR 0 16
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: LD_INT 35
30399: PUSH
30400: LD_INT 11
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 35
30409: PUSH
30410: LD_INT 30
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 91
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: LD_INT 18
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: NOT
30448: PUSH
30449: LD_INT 22
30451: PUSH
30452: LD_VAR 0 16
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 32
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 33
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 91
30491: PUSH
30492: LD_VAR 0 1
30496: PUSH
30497: LD_INT 12
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: PUSH
30518: LD_INT 2
30520: GREATER
30521: AND
30522: IFFALSE 30545
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30524: LD_ADDR_VAR 0 18
30528: PUSH
30529: LD_INT 11
30531: PUSH
30532: LD_INT 30
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_VAR 0 12
30543: ARRAY
30544: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30545: LD_VAR 0 18
30549: NOT
30550: PUSH
30551: LD_INT 40
30553: PPUSH
30554: LD_VAR 0 16
30558: PPUSH
30559: CALL_OW 321
30563: PUSH
30564: LD_INT 2
30566: EQUAL
30567: AND
30568: PUSH
30569: LD_INT 7
30571: PUSH
30572: LD_VAR 0 5
30576: IN
30577: PUSH
30578: LD_INT 28
30580: PUSH
30581: LD_VAR 0 5
30585: IN
30586: OR
30587: PUSH
30588: LD_INT 45
30590: PUSH
30591: LD_VAR 0 5
30595: IN
30596: OR
30597: AND
30598: IFFALSE 30852
// begin hex := GetHexInfo ( x , y ) ;
30600: LD_ADDR_VAR 0 4
30604: PUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: LD_VAR 0 11
30614: PPUSH
30615: CALL_OW 546
30619: ST_TO_ADDR
// if hex [ 1 ] then
30620: LD_VAR 0 4
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: IFFALSE 30632
// exit ;
30630: GO 31035
// height := hex [ 2 ] ;
30632: LD_ADDR_VAR 0 15
30636: PUSH
30637: LD_VAR 0 4
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30646: LD_ADDR_VAR 0 14
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// for i in tmp do
30669: LD_ADDR_VAR 0 8
30673: PUSH
30674: LD_VAR 0 14
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: LD_VAR 0 8
30696: PPUSH
30697: LD_INT 5
30699: PPUSH
30700: CALL_OW 272
30704: PUSH
30705: LD_VAR 0 11
30709: PPUSH
30710: LD_VAR 0 8
30714: PPUSH
30715: LD_INT 5
30717: PPUSH
30718: CALL_OW 273
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30727: LD_VAR 0 9
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: LD_VAR 0 9
30740: PUSH
30741: LD_INT 2
30743: ARRAY
30744: PPUSH
30745: CALL_OW 488
30749: IFFALSE 30848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30751: LD_ADDR_VAR 0 4
30755: PUSH
30756: LD_VAR 0 9
30760: PUSH
30761: LD_INT 1
30763: ARRAY
30764: PPUSH
30765: LD_VAR 0 9
30769: PUSH
30770: LD_INT 2
30772: ARRAY
30773: PPUSH
30774: CALL_OW 546
30778: ST_TO_ADDR
// if hex [ 1 ] then
30779: LD_VAR 0 4
30783: PUSH
30784: LD_INT 1
30786: ARRAY
30787: IFFALSE 30791
// continue ;
30789: GO 30679
// h := hex [ 2 ] ;
30791: LD_ADDR_VAR 0 13
30795: PUSH
30796: LD_VAR 0 4
30800: PUSH
30801: LD_INT 2
30803: ARRAY
30804: ST_TO_ADDR
// if h + 7 < height then
30805: LD_VAR 0 13
30809: PUSH
30810: LD_INT 7
30812: PLUS
30813: PUSH
30814: LD_VAR 0 15
30818: LESS
30819: IFFALSE 30848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30821: LD_ADDR_VAR 0 18
30825: PUSH
30826: LD_INT 7
30828: PUSH
30829: LD_INT 28
30831: PUSH
30832: LD_INT 45
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: PUSH
30840: LD_VAR 0 12
30844: ARRAY
30845: ST_TO_ADDR
// break ;
30846: GO 30850
// end ; end ; end ;
30848: GO 30679
30850: POP
30851: POP
// end ; if not weapon then
30852: LD_VAR 0 18
30856: NOT
30857: IFFALSE 30917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 5
30868: PUSH
30869: LD_INT 11
30871: PUSH
30872: LD_INT 30
30874: PUSH
30875: LD_INT 49
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: DIFF
30883: ST_TO_ADDR
// if not list then
30884: LD_VAR 0 5
30888: NOT
30889: IFFALSE 30893
// exit ;
30891: GO 31035
// weapon := list [ rand ( 1 , list ) ] ;
30893: LD_ADDR_VAR 0 18
30897: PUSH
30898: LD_VAR 0 5
30902: PUSH
30903: LD_INT 1
30905: PPUSH
30906: LD_VAR 0 5
30910: PPUSH
30911: CALL_OW 12
30915: ARRAY
30916: ST_TO_ADDR
// end ; if weapon then
30917: LD_VAR 0 18
30921: IFFALSE 31035
// begin tmp := CostOfWeapon ( weapon ) ;
30923: LD_ADDR_VAR 0 14
30927: PUSH
30928: LD_VAR 0 18
30932: PPUSH
30933: CALL_OW 451
30937: ST_TO_ADDR
// j := GetBase ( tower ) ;
30938: LD_ADDR_VAR 0 9
30942: PUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: CALL_OW 274
30952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30953: LD_VAR 0 9
30957: PPUSH
30958: LD_INT 1
30960: PPUSH
30961: CALL_OW 275
30965: PUSH
30966: LD_VAR 0 14
30970: PUSH
30971: LD_INT 1
30973: ARRAY
30974: GREATEREQUAL
30975: PUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 275
30988: PUSH
30989: LD_VAR 0 14
30993: PUSH
30994: LD_INT 2
30996: ARRAY
30997: GREATEREQUAL
30998: AND
30999: PUSH
31000: LD_VAR 0 9
31004: PPUSH
31005: LD_INT 3
31007: PPUSH
31008: CALL_OW 275
31012: PUSH
31013: LD_VAR 0 14
31017: PUSH
31018: LD_INT 3
31020: ARRAY
31021: GREATEREQUAL
31022: AND
31023: IFFALSE 31035
// result := weapon ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_VAR 0 18
31034: ST_TO_ADDR
// end ; end ;
31035: LD_VAR 0 3
31039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31040: LD_INT 0
31042: PPUSH
31043: PPUSH
// result := true ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 1
31051: ST_TO_ADDR
// if array1 = array2 then
31052: LD_VAR 0 1
31056: PUSH
31057: LD_VAR 0 2
31061: EQUAL
31062: IFFALSE 31122
// begin for i = 1 to array1 do
31064: LD_ADDR_VAR 0 4
31068: PUSH
31069: DOUBLE
31070: LD_INT 1
31072: DEC
31073: ST_TO_ADDR
31074: LD_VAR 0 1
31078: PUSH
31079: FOR_TO
31080: IFFALSE 31118
// if array1 [ i ] <> array2 [ i ] then
31082: LD_VAR 0 1
31086: PUSH
31087: LD_VAR 0 4
31091: ARRAY
31092: PUSH
31093: LD_VAR 0 2
31097: PUSH
31098: LD_VAR 0 4
31102: ARRAY
31103: NONEQUAL
31104: IFFALSE 31116
// begin result := false ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
// break ;
31114: GO 31118
// end ;
31116: GO 31079
31118: POP
31119: POP
// end else
31120: GO 31130
// result := false ;
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_INT 0
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 3
31134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
// if not array1 or not array2 then
31139: LD_VAR 0 1
31143: NOT
31144: PUSH
31145: LD_VAR 0 2
31149: NOT
31150: OR
31151: IFFALSE 31155
// exit ;
31153: GO 31219
// result := true ;
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 1
31162: ST_TO_ADDR
// for i = 1 to array1 do
31163: LD_ADDR_VAR 0 4
31167: PUSH
31168: DOUBLE
31169: LD_INT 1
31171: DEC
31172: ST_TO_ADDR
31173: LD_VAR 0 1
31177: PUSH
31178: FOR_TO
31179: IFFALSE 31217
// if array1 [ i ] <> array2 [ i ] then
31181: LD_VAR 0 1
31185: PUSH
31186: LD_VAR 0 4
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 2
31196: PUSH
31197: LD_VAR 0 4
31201: ARRAY
31202: NONEQUAL
31203: IFFALSE 31215
// begin result := false ;
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 0
31212: ST_TO_ADDR
// break ;
31213: GO 31217
// end ;
31215: GO 31178
31217: POP
31218: POP
// end ;
31219: LD_VAR 0 3
31223: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
31228: PPUSH
// pom := GetBase ( fac ) ;
31229: LD_ADDR_VAR 0 5
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 274
31243: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31244: LD_ADDR_VAR 0 4
31248: PUSH
31249: LD_VAR 0 2
31253: PUSH
31254: LD_INT 1
31256: ARRAY
31257: PPUSH
31258: LD_VAR 0 2
31262: PUSH
31263: LD_INT 2
31265: ARRAY
31266: PPUSH
31267: LD_VAR 0 2
31271: PUSH
31272: LD_INT 3
31274: ARRAY
31275: PPUSH
31276: LD_VAR 0 2
31280: PUSH
31281: LD_INT 4
31283: ARRAY
31284: PPUSH
31285: CALL_OW 449
31289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_VAR 0 5
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 275
31307: PUSH
31308: LD_VAR 0 4
31312: PUSH
31313: LD_INT 1
31315: ARRAY
31316: GREATEREQUAL
31317: PUSH
31318: LD_VAR 0 5
31322: PPUSH
31323: LD_INT 2
31325: PPUSH
31326: CALL_OW 275
31330: PUSH
31331: LD_VAR 0 4
31335: PUSH
31336: LD_INT 2
31338: ARRAY
31339: GREATEREQUAL
31340: AND
31341: PUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: LD_INT 3
31349: PPUSH
31350: CALL_OW 275
31354: PUSH
31355: LD_VAR 0 4
31359: PUSH
31360: LD_INT 3
31362: ARRAY
31363: GREATEREQUAL
31364: AND
31365: ST_TO_ADDR
// end ;
31366: LD_VAR 0 3
31370: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31371: LD_INT 0
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
// pom := GetBase ( building ) ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: CALL_OW 274
31391: ST_TO_ADDR
// if not pom then
31392: LD_VAR 0 3
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31571
// btype := GetBType ( building ) ;
31401: LD_ADDR_VAR 0 5
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 266
31415: ST_TO_ADDR
// if btype = b_armoury then
31416: LD_VAR 0 5
31420: PUSH
31421: LD_INT 4
31423: EQUAL
31424: IFFALSE 31434
// btype := b_barracks ;
31426: LD_ADDR_VAR 0 5
31430: PUSH
31431: LD_INT 5
31433: ST_TO_ADDR
// if btype = b_depot then
31434: LD_VAR 0 5
31438: PUSH
31439: LD_INT 0
31441: EQUAL
31442: IFFALSE 31452
// btype := b_warehouse ;
31444: LD_ADDR_VAR 0 5
31448: PUSH
31449: LD_INT 1
31451: ST_TO_ADDR
// if btype = b_workshop then
31452: LD_VAR 0 5
31456: PUSH
31457: LD_INT 2
31459: EQUAL
31460: IFFALSE 31470
// btype := b_factory ;
31462: LD_ADDR_VAR 0 5
31466: PUSH
31467: LD_INT 3
31469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31470: LD_ADDR_VAR 0 4
31474: PUSH
31475: LD_VAR 0 5
31479: PPUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 248
31489: PPUSH
31490: CALL_OW 450
31494: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31495: LD_ADDR_VAR 0 2
31499: PUSH
31500: LD_VAR 0 3
31504: PPUSH
31505: LD_INT 1
31507: PPUSH
31508: CALL_OW 275
31512: PUSH
31513: LD_VAR 0 4
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: GREATEREQUAL
31522: PUSH
31523: LD_VAR 0 3
31527: PPUSH
31528: LD_INT 2
31530: PPUSH
31531: CALL_OW 275
31535: PUSH
31536: LD_VAR 0 4
31540: PUSH
31541: LD_INT 2
31543: ARRAY
31544: GREATEREQUAL
31545: AND
31546: PUSH
31547: LD_VAR 0 3
31551: PPUSH
31552: LD_INT 3
31554: PPUSH
31555: CALL_OW 275
31559: PUSH
31560: LD_VAR 0 4
31564: PUSH
31565: LD_INT 3
31567: ARRAY
31568: GREATEREQUAL
31569: AND
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 2
31575: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
31580: PPUSH
// pom := GetBase ( building ) ;
31581: LD_ADDR_VAR 0 4
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 274
31595: ST_TO_ADDR
// if not pom then
31596: LD_VAR 0 4
31600: NOT
31601: IFFALSE 31605
// exit ;
31603: GO 31706
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31605: LD_ADDR_VAR 0 5
31609: PUSH
31610: LD_VAR 0 2
31614: PPUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 248
31624: PPUSH
31625: CALL_OW 450
31629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31630: LD_ADDR_VAR 0 3
31634: PUSH
31635: LD_VAR 0 4
31639: PPUSH
31640: LD_INT 1
31642: PPUSH
31643: CALL_OW 275
31647: PUSH
31648: LD_VAR 0 5
31652: PUSH
31653: LD_INT 1
31655: ARRAY
31656: GREATEREQUAL
31657: PUSH
31658: LD_VAR 0 4
31662: PPUSH
31663: LD_INT 2
31665: PPUSH
31666: CALL_OW 275
31670: PUSH
31671: LD_VAR 0 5
31675: PUSH
31676: LD_INT 2
31678: ARRAY
31679: GREATEREQUAL
31680: AND
31681: PUSH
31682: LD_VAR 0 4
31686: PPUSH
31687: LD_INT 3
31689: PPUSH
31690: CALL_OW 275
31694: PUSH
31695: LD_VAR 0 5
31699: PUSH
31700: LD_INT 3
31702: ARRAY
31703: GREATEREQUAL
31704: AND
31705: ST_TO_ADDR
// end ;
31706: LD_VAR 0 3
31710: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31711: LD_INT 0
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
// result := false ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_INT 0
31731: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31732: LD_VAR 0 5
31736: NOT
31737: PUSH
31738: LD_VAR 0 1
31742: NOT
31743: OR
31744: PUSH
31745: LD_VAR 0 2
31749: NOT
31750: OR
31751: PUSH
31752: LD_VAR 0 3
31756: NOT
31757: OR
31758: IFFALSE 31762
// exit ;
31760: GO 32576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31762: LD_ADDR_VAR 0 14
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: LD_VAR 0 2
31776: PPUSH
31777: LD_VAR 0 3
31781: PPUSH
31782: LD_VAR 0 4
31786: PPUSH
31787: LD_VAR 0 5
31791: PUSH
31792: LD_INT 1
31794: ARRAY
31795: PPUSH
31796: CALL_OW 248
31800: PPUSH
31801: LD_INT 0
31803: PPUSH
31804: CALL 33813 0 6
31808: ST_TO_ADDR
// if not hexes then
31809: LD_VAR 0 14
31813: NOT
31814: IFFALSE 31818
// exit ;
31816: GO 32576
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31818: LD_ADDR_VAR 0 17
31822: PUSH
31823: LD_VAR 0 5
31827: PPUSH
31828: LD_INT 22
31830: PUSH
31831: LD_VAR 0 13
31835: PPUSH
31836: CALL_OW 255
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 30
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 30
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PPUSH
31877: CALL_OW 72
31881: ST_TO_ADDR
// for i = 1 to hexes do
31882: LD_ADDR_VAR 0 9
31886: PUSH
31887: DOUBLE
31888: LD_INT 1
31890: DEC
31891: ST_TO_ADDR
31892: LD_VAR 0 14
31896: PUSH
31897: FOR_TO
31898: IFFALSE 32574
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31900: LD_ADDR_VAR 0 13
31904: PUSH
31905: LD_VAR 0 14
31909: PUSH
31910: LD_VAR 0 9
31914: ARRAY
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: PPUSH
31920: LD_VAR 0 14
31924: PUSH
31925: LD_VAR 0 9
31929: ARRAY
31930: PUSH
31931: LD_INT 2
31933: ARRAY
31934: PPUSH
31935: CALL_OW 428
31939: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31940: LD_VAR 0 14
31944: PUSH
31945: LD_VAR 0 9
31949: ARRAY
31950: PUSH
31951: LD_INT 1
31953: ARRAY
31954: PPUSH
31955: LD_VAR 0 14
31959: PUSH
31960: LD_VAR 0 9
31964: ARRAY
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PPUSH
31970: CALL_OW 351
31974: PUSH
31975: LD_VAR 0 14
31979: PUSH
31980: LD_VAR 0 9
31984: ARRAY
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: LD_VAR 0 14
31994: PUSH
31995: LD_VAR 0 9
31999: ARRAY
32000: PUSH
32001: LD_INT 2
32003: ARRAY
32004: PPUSH
32005: CALL_OW 488
32009: NOT
32010: OR
32011: PUSH
32012: LD_VAR 0 13
32016: PPUSH
32017: CALL_OW 247
32021: PUSH
32022: LD_INT 3
32024: EQUAL
32025: OR
32026: IFFALSE 32032
// exit ;
32028: POP
32029: POP
32030: GO 32576
// if not tmp then
32032: LD_VAR 0 13
32036: NOT
32037: IFFALSE 32041
// continue ;
32039: GO 31897
// result := true ;
32041: LD_ADDR_VAR 0 8
32045: PUSH
32046: LD_INT 1
32048: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32049: LD_VAR 0 6
32053: PUSH
32054: LD_VAR 0 13
32058: PPUSH
32059: CALL_OW 247
32063: PUSH
32064: LD_INT 2
32066: EQUAL
32067: AND
32068: PUSH
32069: LD_VAR 0 13
32073: PPUSH
32074: CALL_OW 263
32078: PUSH
32079: LD_INT 1
32081: EQUAL
32082: AND
32083: IFFALSE 32247
// begin if IsDrivenBy ( tmp ) then
32085: LD_VAR 0 13
32089: PPUSH
32090: CALL_OW 311
32094: IFFALSE 32098
// continue ;
32096: GO 31897
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32098: LD_VAR 0 6
32102: PPUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 60
32108: PUSH
32109: EMPTY
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: LD_INT 55
32121: PUSH
32122: EMPTY
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PPUSH
32133: CALL_OW 72
32137: IFFALSE 32245
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32139: LD_ADDR_VAR 0 18
32143: PUSH
32144: LD_VAR 0 6
32148: PPUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 60
32154: PUSH
32155: EMPTY
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 55
32167: PUSH
32168: EMPTY
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 72
32183: PUSH
32184: LD_INT 1
32186: ARRAY
32187: ST_TO_ADDR
// if IsInUnit ( driver ) then
32188: LD_VAR 0 18
32192: PPUSH
32193: CALL_OW 310
32197: IFFALSE 32208
// ComExit ( driver ) ;
32199: LD_VAR 0 18
32203: PPUSH
32204: CALL 56997 0 1
// AddComEnterUnit ( driver , tmp ) ;
32208: LD_VAR 0 18
32212: PPUSH
32213: LD_VAR 0 13
32217: PPUSH
32218: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32222: LD_VAR 0 18
32226: PPUSH
32227: LD_VAR 0 7
32231: PPUSH
32232: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32236: LD_VAR 0 18
32240: PPUSH
32241: CALL_OW 181
// end ; continue ;
32245: GO 31897
// end ; if not cleaners or not tmp in cleaners then
32247: LD_VAR 0 6
32251: NOT
32252: PUSH
32253: LD_VAR 0 13
32257: PUSH
32258: LD_VAR 0 6
32262: IN
32263: NOT
32264: OR
32265: IFFALSE 32572
// begin if dep then
32267: LD_VAR 0 17
32271: IFFALSE 32407
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32273: LD_ADDR_VAR 0 16
32277: PUSH
32278: LD_VAR 0 17
32282: PUSH
32283: LD_INT 1
32285: ARRAY
32286: PPUSH
32287: CALL_OW 250
32291: PPUSH
32292: LD_VAR 0 17
32296: PUSH
32297: LD_INT 1
32299: ARRAY
32300: PPUSH
32301: CALL_OW 254
32305: PPUSH
32306: LD_INT 5
32308: PPUSH
32309: CALL_OW 272
32313: PUSH
32314: LD_VAR 0 17
32318: PUSH
32319: LD_INT 1
32321: ARRAY
32322: PPUSH
32323: CALL_OW 251
32327: PPUSH
32328: LD_VAR 0 17
32332: PUSH
32333: LD_INT 1
32335: ARRAY
32336: PPUSH
32337: CALL_OW 254
32341: PPUSH
32342: LD_INT 5
32344: PPUSH
32345: CALL_OW 273
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32354: LD_VAR 0 16
32358: PUSH
32359: LD_INT 1
32361: ARRAY
32362: PPUSH
32363: LD_VAR 0 16
32367: PUSH
32368: LD_INT 2
32370: ARRAY
32371: PPUSH
32372: CALL_OW 488
32376: IFFALSE 32407
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32378: LD_VAR 0 13
32382: PPUSH
32383: LD_VAR 0 16
32387: PUSH
32388: LD_INT 1
32390: ARRAY
32391: PPUSH
32392: LD_VAR 0 16
32396: PUSH
32397: LD_INT 2
32399: ARRAY
32400: PPUSH
32401: CALL_OW 111
// continue ;
32405: GO 31897
// end ; end ; r := GetDir ( tmp ) ;
32407: LD_ADDR_VAR 0 15
32411: PUSH
32412: LD_VAR 0 13
32416: PPUSH
32417: CALL_OW 254
32421: ST_TO_ADDR
// if r = 5 then
32422: LD_VAR 0 15
32426: PUSH
32427: LD_INT 5
32429: EQUAL
32430: IFFALSE 32440
// r := 0 ;
32432: LD_ADDR_VAR 0 15
32436: PUSH
32437: LD_INT 0
32439: ST_TO_ADDR
// for j = r to 5 do
32440: LD_ADDR_VAR 0 10
32444: PUSH
32445: DOUBLE
32446: LD_VAR 0 15
32450: DEC
32451: ST_TO_ADDR
32452: LD_INT 5
32454: PUSH
32455: FOR_TO
32456: IFFALSE 32570
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32458: LD_ADDR_VAR 0 11
32462: PUSH
32463: LD_VAR 0 13
32467: PPUSH
32468: CALL_OW 250
32472: PPUSH
32473: LD_VAR 0 10
32477: PPUSH
32478: LD_INT 2
32480: PPUSH
32481: CALL_OW 272
32485: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32486: LD_ADDR_VAR 0 12
32490: PUSH
32491: LD_VAR 0 13
32495: PPUSH
32496: CALL_OW 251
32500: PPUSH
32501: LD_VAR 0 10
32505: PPUSH
32506: LD_INT 2
32508: PPUSH
32509: CALL_OW 273
32513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32514: LD_VAR 0 11
32518: PPUSH
32519: LD_VAR 0 12
32523: PPUSH
32524: CALL_OW 488
32528: PUSH
32529: LD_VAR 0 11
32533: PPUSH
32534: LD_VAR 0 12
32538: PPUSH
32539: CALL_OW 428
32543: NOT
32544: AND
32545: IFFALSE 32568
// begin ComMoveXY ( tmp , _x , _y ) ;
32547: LD_VAR 0 13
32551: PPUSH
32552: LD_VAR 0 11
32556: PPUSH
32557: LD_VAR 0 12
32561: PPUSH
32562: CALL_OW 111
// break ;
32566: GO 32570
// end ; end ;
32568: GO 32455
32570: POP
32571: POP
// end ; end ;
32572: GO 31897
32574: POP
32575: POP
// end ;
32576: LD_VAR 0 8
32580: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32581: LD_INT 0
32583: PPUSH
// result := true ;
32584: LD_ADDR_VAR 0 3
32588: PUSH
32589: LD_INT 1
32591: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32592: LD_VAR 0 2
32596: PUSH
32597: LD_INT 24
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32611
32603: LD_INT 33
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32611
32609: GO 32636
32611: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32612: LD_ADDR_VAR 0 3
32616: PUSH
32617: LD_INT 32
32619: PPUSH
32620: LD_VAR 0 1
32624: PPUSH
32625: CALL_OW 321
32629: PUSH
32630: LD_INT 2
32632: EQUAL
32633: ST_TO_ADDR
32634: GO 32956
32636: LD_INT 20
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32669
32644: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 6
32652: PPUSH
32653: LD_VAR 0 1
32657: PPUSH
32658: CALL_OW 321
32662: PUSH
32663: LD_INT 2
32665: EQUAL
32666: ST_TO_ADDR
32667: GO 32956
32669: LD_INT 22
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32683
32675: LD_INT 36
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32708
32683: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 15
32691: PPUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 321
32701: PUSH
32702: LD_INT 2
32704: EQUAL
32705: ST_TO_ADDR
32706: GO 32956
32708: LD_INT 30
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32741
32716: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 20
32724: PPUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 321
32734: PUSH
32735: LD_INT 2
32737: EQUAL
32738: ST_TO_ADDR
32739: GO 32956
32741: LD_INT 28
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32755
32747: LD_INT 21
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32780
32755: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 21
32763: PPUSH
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 321
32773: PUSH
32774: LD_INT 2
32776: EQUAL
32777: ST_TO_ADDR
32778: GO 32956
32780: LD_INT 16
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32815
32788: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_EXP 41
32798: PPUSH
32799: LD_VAR 0 1
32803: PPUSH
32804: CALL_OW 321
32808: PUSH
32809: LD_INT 2
32811: EQUAL
32812: ST_TO_ADDR
32813: GO 32956
32815: LD_INT 19
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32829
32821: LD_INT 23
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32856
32829: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32830: LD_ADDR_VAR 0 3
32834: PUSH
32835: LD_EXP 40
32839: PPUSH
32840: LD_VAR 0 1
32844: PPUSH
32845: CALL_OW 321
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: ST_TO_ADDR
32854: GO 32956
32856: LD_INT 17
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32889
32864: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_INT 39
32872: PPUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 321
32882: PUSH
32883: LD_INT 2
32885: EQUAL
32886: ST_TO_ADDR
32887: GO 32956
32889: LD_INT 18
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32922
32897: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 40
32905: PPUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 321
32915: PUSH
32916: LD_INT 2
32918: EQUAL
32919: ST_TO_ADDR
32920: GO 32956
32922: LD_INT 27
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32955
32930: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 35
32938: PPUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 321
32948: PUSH
32949: LD_INT 2
32951: EQUAL
32952: ST_TO_ADDR
32953: GO 32956
32955: POP
// end ;
32956: LD_VAR 0 3
32960: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32961: LD_INT 0
32963: PPUSH
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
// result := false ;
32974: LD_ADDR_VAR 0 6
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32982: LD_VAR 0 1
32986: NOT
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 266
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: IN
33008: NOT
33009: OR
33010: PUSH
33011: LD_VAR 0 2
33015: NOT
33016: OR
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: LD_INT 4
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: IN
33049: NOT
33050: OR
33051: PUSH
33052: LD_VAR 0 3
33056: PPUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: CALL_OW 488
33066: NOT
33067: OR
33068: IFFALSE 33072
// exit ;
33070: GO 33808
// side := GetSide ( depot ) ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_VAR 0 1
33081: PPUSH
33082: CALL_OW 255
33086: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33087: LD_VAR 0 9
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: CALL 32581 0 2
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33808
// pom := GetBase ( depot ) ;
33106: LD_ADDR_VAR 0 10
33110: PUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: CALL_OW 274
33120: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33121: LD_ADDR_VAR 0 11
33125: PUSH
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 248
33140: PPUSH
33141: CALL_OW 450
33145: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33146: LD_VAR 0 10
33150: PPUSH
33151: LD_INT 1
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 11
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: GREATEREQUAL
33168: PUSH
33169: LD_VAR 0 10
33173: PPUSH
33174: LD_INT 2
33176: PPUSH
33177: CALL_OW 275
33181: PUSH
33182: LD_VAR 0 11
33186: PUSH
33187: LD_INT 2
33189: ARRAY
33190: GREATEREQUAL
33191: AND
33192: PUSH
33193: LD_VAR 0 10
33197: PPUSH
33198: LD_INT 3
33200: PPUSH
33201: CALL_OW 275
33205: PUSH
33206: LD_VAR 0 11
33210: PUSH
33211: LD_INT 3
33213: ARRAY
33214: GREATEREQUAL
33215: AND
33216: NOT
33217: IFFALSE 33221
// exit ;
33219: GO 33808
// if GetBType ( depot ) = b_depot then
33221: LD_VAR 0 1
33225: PPUSH
33226: CALL_OW 266
33230: PUSH
33231: LD_INT 0
33233: EQUAL
33234: IFFALSE 33246
// dist := 28 else
33236: LD_ADDR_VAR 0 14
33240: PUSH
33241: LD_INT 28
33243: ST_TO_ADDR
33244: GO 33254
// dist := 36 ;
33246: LD_ADDR_VAR 0 14
33250: PUSH
33251: LD_INT 36
33253: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_VAR 0 4
33268: PPUSH
33269: CALL_OW 297
33273: PUSH
33274: LD_VAR 0 14
33278: GREATER
33279: IFFALSE 33283
// exit ;
33281: GO 33808
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33283: LD_ADDR_VAR 0 12
33287: PUSH
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_VAR 0 3
33297: PPUSH
33298: LD_VAR 0 4
33302: PPUSH
33303: LD_VAR 0 5
33307: PPUSH
33308: LD_VAR 0 1
33312: PPUSH
33313: CALL_OW 248
33317: PPUSH
33318: LD_INT 0
33320: PPUSH
33321: CALL 33813 0 6
33325: ST_TO_ADDR
// if not hexes then
33326: LD_VAR 0 12
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33808
// hex := GetHexInfo ( x , y ) ;
33335: LD_ADDR_VAR 0 15
33339: PUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: LD_VAR 0 4
33349: PPUSH
33350: CALL_OW 546
33354: ST_TO_ADDR
// if hex [ 1 ] then
33355: LD_VAR 0 15
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: IFFALSE 33367
// exit ;
33365: GO 33808
// height := hex [ 2 ] ;
33367: LD_ADDR_VAR 0 13
33371: PUSH
33372: LD_VAR 0 15
33376: PUSH
33377: LD_INT 2
33379: ARRAY
33380: ST_TO_ADDR
// for i = 1 to hexes do
33381: LD_ADDR_VAR 0 7
33385: PUSH
33386: DOUBLE
33387: LD_INT 1
33389: DEC
33390: ST_TO_ADDR
33391: LD_VAR 0 12
33395: PUSH
33396: FOR_TO
33397: IFFALSE 33727
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33399: LD_VAR 0 12
33403: PUSH
33404: LD_VAR 0 7
33408: ARRAY
33409: PUSH
33410: LD_INT 1
33412: ARRAY
33413: PPUSH
33414: LD_VAR 0 12
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PUSH
33425: LD_INT 2
33427: ARRAY
33428: PPUSH
33429: CALL_OW 488
33433: NOT
33434: PUSH
33435: LD_VAR 0 12
33439: PUSH
33440: LD_VAR 0 7
33444: ARRAY
33445: PUSH
33446: LD_INT 1
33448: ARRAY
33449: PPUSH
33450: LD_VAR 0 12
33454: PUSH
33455: LD_VAR 0 7
33459: ARRAY
33460: PUSH
33461: LD_INT 2
33463: ARRAY
33464: PPUSH
33465: CALL_OW 428
33469: PUSH
33470: LD_INT 0
33472: GREATER
33473: OR
33474: PUSH
33475: LD_VAR 0 12
33479: PUSH
33480: LD_VAR 0 7
33484: ARRAY
33485: PUSH
33486: LD_INT 1
33488: ARRAY
33489: PPUSH
33490: LD_VAR 0 12
33494: PUSH
33495: LD_VAR 0 7
33499: ARRAY
33500: PUSH
33501: LD_INT 2
33503: ARRAY
33504: PPUSH
33505: CALL_OW 351
33509: OR
33510: IFFALSE 33516
// exit ;
33512: POP
33513: POP
33514: GO 33808
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33516: LD_ADDR_VAR 0 8
33520: PUSH
33521: LD_VAR 0 12
33525: PUSH
33526: LD_VAR 0 7
33530: ARRAY
33531: PUSH
33532: LD_INT 1
33534: ARRAY
33535: PPUSH
33536: LD_VAR 0 12
33540: PUSH
33541: LD_VAR 0 7
33545: ARRAY
33546: PUSH
33547: LD_INT 2
33549: ARRAY
33550: PPUSH
33551: CALL_OW 546
33555: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33556: LD_VAR 0 8
33560: PUSH
33561: LD_INT 1
33563: ARRAY
33564: PUSH
33565: LD_VAR 0 8
33569: PUSH
33570: LD_INT 2
33572: ARRAY
33573: PUSH
33574: LD_VAR 0 13
33578: PUSH
33579: LD_INT 2
33581: PLUS
33582: GREATER
33583: OR
33584: PUSH
33585: LD_VAR 0 8
33589: PUSH
33590: LD_INT 2
33592: ARRAY
33593: PUSH
33594: LD_VAR 0 13
33598: PUSH
33599: LD_INT 2
33601: MINUS
33602: LESS
33603: OR
33604: PUSH
33605: LD_VAR 0 8
33609: PUSH
33610: LD_INT 3
33612: ARRAY
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 8
33619: PUSH
33620: LD_INT 9
33622: PUSH
33623: LD_INT 10
33625: PUSH
33626: LD_INT 11
33628: PUSH
33629: LD_INT 12
33631: PUSH
33632: LD_INT 13
33634: PUSH
33635: LD_INT 16
33637: PUSH
33638: LD_INT 17
33640: PUSH
33641: LD_INT 18
33643: PUSH
33644: LD_INT 19
33646: PUSH
33647: LD_INT 20
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: IN
33668: NOT
33669: OR
33670: PUSH
33671: LD_VAR 0 8
33675: PUSH
33676: LD_INT 5
33678: ARRAY
33679: NOT
33680: OR
33681: PUSH
33682: LD_VAR 0 8
33686: PUSH
33687: LD_INT 6
33689: ARRAY
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 7
33699: PUSH
33700: LD_INT 9
33702: PUSH
33703: LD_INT 10
33705: PUSH
33706: LD_INT 11
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: IN
33717: NOT
33718: OR
33719: IFFALSE 33725
// exit ;
33721: POP
33722: POP
33723: GO 33808
// end ;
33725: GO 33396
33727: POP
33728: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33729: LD_VAR 0 9
33733: PPUSH
33734: LD_VAR 0 3
33738: PPUSH
33739: LD_VAR 0 4
33743: PPUSH
33744: LD_INT 20
33746: PPUSH
33747: CALL 25754 0 4
33751: PUSH
33752: LD_INT 4
33754: ARRAY
33755: IFFALSE 33759
// exit ;
33757: GO 33808
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 29
33766: PUSH
33767: LD_INT 30
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: IN
33774: PUSH
33775: LD_VAR 0 3
33779: PPUSH
33780: LD_VAR 0 4
33784: PPUSH
33785: LD_VAR 0 9
33789: PPUSH
33790: CALL_OW 440
33794: NOT
33795: AND
33796: IFFALSE 33800
// exit ;
33798: GO 33808
// result := true ;
33800: LD_ADDR_VAR 0 6
33804: PUSH
33805: LD_INT 1
33807: ST_TO_ADDR
// end ;
33808: LD_VAR 0 6
33812: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
// result = [ ] ;
33873: LD_ADDR_VAR 0 7
33877: PUSH
33878: EMPTY
33879: ST_TO_ADDR
// temp_list = [ ] ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: EMPTY
33886: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33887: LD_VAR 0 4
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: LD_INT 4
33906: PUSH
33907: LD_INT 5
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: IN
33918: NOT
33919: PUSH
33920: LD_VAR 0 1
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: IN
33935: PUSH
33936: LD_VAR 0 5
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: IN
33955: NOT
33956: AND
33957: OR
33958: IFFALSE 33962
// exit ;
33960: GO 52353
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33962: LD_VAR 0 1
33966: PUSH
33967: LD_INT 6
33969: PUSH
33970: LD_INT 7
33972: PUSH
33973: LD_INT 8
33975: PUSH
33976: LD_INT 13
33978: PUSH
33979: LD_INT 12
33981: PUSH
33982: LD_INT 15
33984: PUSH
33985: LD_INT 11
33987: PUSH
33988: LD_INT 14
33990: PUSH
33991: LD_INT 10
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: IN
34005: IFFALSE 34015
// btype = b_lab ;
34007: LD_ADDR_VAR 0 1
34011: PUSH
34012: LD_INT 6
34014: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34015: LD_VAR 0 6
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: IN
34034: NOT
34035: PUSH
34036: LD_VAR 0 1
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: LD_INT 6
34055: PUSH
34056: LD_INT 36
34058: PUSH
34059: LD_INT 4
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: LD_INT 31
34067: PUSH
34068: LD_INT 32
34070: PUSH
34071: LD_INT 33
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: IN
34087: NOT
34088: PUSH
34089: LD_VAR 0 6
34093: PUSH
34094: LD_INT 1
34096: EQUAL
34097: AND
34098: OR
34099: PUSH
34100: LD_VAR 0 1
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: IN
34115: NOT
34116: PUSH
34117: LD_VAR 0 6
34121: PUSH
34122: LD_INT 2
34124: EQUAL
34125: AND
34126: OR
34127: IFFALSE 34137
// mode = 0 ;
34129: LD_ADDR_VAR 0 6
34133: PUSH
34134: LD_INT 0
34136: ST_TO_ADDR
// case mode of 0 :
34137: LD_VAR 0 6
34141: PUSH
34142: LD_INT 0
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 45603
34150: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34151: LD_ADDR_VAR 0 11
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 3
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34344: LD_ADDR_VAR 0 12
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34540: LD_ADDR_VAR 0 13
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 3
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 14
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 3
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34935: LD_ADDR_VAR 0 15
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 3
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35128: LD_ADDR_VAR 0 16
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: LD_INT 3
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35321: LD_ADDR_VAR 0 17
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35551: LD_ADDR_VAR 0 18
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35781: LD_ADDR_VAR 0 19
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36011: LD_ADDR_VAR 0 20
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36241: LD_ADDR_VAR 0 21
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36471: LD_ADDR_VAR 0 22
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36701: LD_ADDR_VAR 0 23
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36981: LD_ADDR_VAR 0 24
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37257: LD_ADDR_VAR 0 25
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37531: LD_ADDR_VAR 0 26
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37807: LD_ADDR_VAR 0 27
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: NEG
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38087: LD_ADDR_VAR 0 28
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: NEG
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38369: LD_ADDR_VAR 0 29
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38648: LD_ADDR_VAR 0 30
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 3
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38926: LD_ADDR_VAR 0 31
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 3
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39204: LD_ADDR_VAR 0 32
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 3
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39482: LD_ADDR_VAR 0 33
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: NEG
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 3
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39761: LD_ADDR_VAR 0 34
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 35
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40153: LD_ADDR_VAR 0 36
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40265: LD_ADDR_VAR 0 37
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40377: LD_ADDR_VAR 0 38
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40489: LD_ADDR_VAR 0 39
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40601: LD_ADDR_VAR 0 40
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40713: LD_ADDR_VAR 0 41
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 3
40987: NEG
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 3
41010: NEG
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: NEG
41023: PUSH
41024: LD_INT 3
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41063: LD_ADDR_VAR 0 42
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 3
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 3
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41413: LD_ADDR_VAR 0 43
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41761: LD_ADDR_VAR 0 44
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 3
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42111: LD_ADDR_VAR 0 45
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 3
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 3
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 3
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42461: LD_ADDR_VAR 0 46
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 3
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42809: LD_ADDR_VAR 0 47
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42960: LD_ADDR_VAR 0 48
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43107: LD_ADDR_VAR 0 49
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43251: LD_ADDR_VAR 0 50
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43395: LD_ADDR_VAR 0 51
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43542: LD_ADDR_VAR 0 52
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43693: LD_ADDR_VAR 0 53
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43923: LD_ADDR_VAR 0 54
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44153: LD_ADDR_VAR 0 55
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44383: LD_ADDR_VAR 0 56
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44613: LD_ADDR_VAR 0 57
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44843: LD_ADDR_VAR 0 58
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45073: LD_ADDR_VAR 0 59
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45161: LD_ADDR_VAR 0 60
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45249: LD_ADDR_VAR 0 61
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45337: LD_ADDR_VAR 0 62
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45425: LD_ADDR_VAR 0 63
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45513: LD_ADDR_VAR 0 64
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// end ; 1 :
45601: GO 51498
45603: LD_INT 1
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 48234
45611: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45612: LD_ADDR_VAR 0 11
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45656: LD_ADDR_VAR 0 12
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45697: LD_ADDR_VAR 0 13
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45737: LD_ADDR_VAR 0 14
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45778: LD_ADDR_VAR 0 15
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45822: LD_ADDR_VAR 0 16
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45868: LD_ADDR_VAR 0 17
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45912: LD_ADDR_VAR 0 18
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45953: LD_ADDR_VAR 0 19
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 3
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45993: LD_ADDR_VAR 0 20
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46034: LD_ADDR_VAR 0 21
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46078: LD_ADDR_VAR 0 22
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46124: LD_ADDR_VAR 0 23
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 4
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46168: LD_ADDR_VAR 0 24
46172: PUSH
46173: LD_INT 3
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46209: LD_ADDR_VAR 0 25
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 4
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46249: LD_ADDR_VAR 0 26
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46290: LD_ADDR_VAR 0 27
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 4
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46334: LD_ADDR_VAR 0 28
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 4
46365: NEG
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46380: LD_ADDR_VAR 0 29
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 3
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 4
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 5
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 5
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 4
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 6
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 6
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 5
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46535: LD_ADDR_VAR 0 30
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 4
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 4
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 4
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 5
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 5
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 6
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 6
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46678: LD_ADDR_VAR 0 31
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 5
46745: PUSH
46746: LD_INT 4
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: LD_INT 5
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: LD_INT 5
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 6
46775: PUSH
46776: LD_INT 5
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 6
46785: PUSH
46786: LD_INT 6
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: LD_INT 6
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46817: LD_ADDR_VAR 0 32
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 4
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 6
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 6
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 5
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46960: LD_ADDR_VAR 0 33
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 4
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 4
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 5
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 5
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 6
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 6
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47115: LD_ADDR_VAR 0 34
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: LD_INT 4
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 4
47170: NEG
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 4
47182: NEG
47183: PUSH
47184: LD_INT 4
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 4
47194: NEG
47195: PUSH
47196: LD_INT 5
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 5
47206: NEG
47207: PUSH
47208: LD_INT 4
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 5
47218: NEG
47219: PUSH
47220: LD_INT 5
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 5
47230: NEG
47231: PUSH
47232: LD_INT 6
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 6
47242: NEG
47243: PUSH
47244: LD_INT 5
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 6
47254: NEG
47255: PUSH
47256: LD_INT 6
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47278: LD_ADDR_VAR 0 41
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47322: LD_ADDR_VAR 0 42
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47363: LD_ADDR_VAR 0 43
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47403: LD_ADDR_VAR 0 44
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47444: LD_ADDR_VAR 0 45
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47488: LD_ADDR_VAR 0 46
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47534: LD_ADDR_VAR 0 47
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 3
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47567: LD_ADDR_VAR 0 48
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47598: LD_ADDR_VAR 0 49
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47627: LD_ADDR_VAR 0 50
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47656: LD_ADDR_VAR 0 51
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47687: LD_ADDR_VAR 0 52
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47720: LD_ADDR_VAR 0 53
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47764: LD_ADDR_VAR 0 54
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47805: LD_ADDR_VAR 0 55
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47845: LD_ADDR_VAR 0 56
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47886: LD_ADDR_VAR 0 57
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47930: LD_ADDR_VAR 0 58
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 3
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47976: LD_ADDR_VAR 0 59
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48020: LD_ADDR_VAR 0 60
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48061: LD_ADDR_VAR 0 61
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48101: LD_ADDR_VAR 0 62
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 63
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48186: LD_ADDR_VAR 0 64
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// end ; 2 :
48232: GO 51498
48234: LD_INT 2
48236: DOUBLE
48237: EQUAL
48238: IFTRUE 48242
48240: GO 51497
48242: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48243: LD_ADDR_VAR 0 29
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 5
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 5
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 4
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 5
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 4
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 4
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 5
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 4
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 5
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 4
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 4
48628: NEG
48629: PUSH
48630: LD_INT 4
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 4
48640: NEG
48641: PUSH
48642: LD_INT 5
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: LD_INT 4
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: LD_INT 4
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: NEG
48701: PUSH
48702: LD_INT 5
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: LD_INT 5
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 5
48724: NEG
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48781: LD_ADDR_VAR 0 30
48785: PUSH
48786: LD_INT 4
48788: PUSH
48789: LD_INT 4
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: LD_INT 4
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 5
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: PUSH
48829: LD_INT 5
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 4
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 5
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 5
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 5
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 5
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: LD_INT 4
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 4
49169: NEG
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 4
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 5
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 4
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 4
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 5
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 5
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49328: LD_ADDR_VAR 0 31
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 4
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 4
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 5
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 5
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 4
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 4
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 4
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: LD_INT 4
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 4
49542: NEG
49543: PUSH
49544: LD_INT 5
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 4
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 4
49578: NEG
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: LD_INT 4
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 5
49602: NEG
49603: PUSH
49604: LD_INT 5
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: LD_INT 5
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 5
49626: NEG
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 4
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 4
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 4
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 5
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 5
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49878: LD_ADDR_VAR 0 32
49882: PUSH
49883: LD_INT 4
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 4
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 4
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 5
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 4
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 4
50059: NEG
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 4
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 4
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 5
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 4
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 4
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 5
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 4
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: LD_INT 4
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 5
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 5
50320: PUSH
50321: LD_INT 5
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: LD_INT 5
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 4
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 5
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50425: LD_ADDR_VAR 0 33
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: LD_INT 4
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 4
50444: NEG
50445: PUSH
50446: LD_INT 5
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 4
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 5
50492: NEG
50493: PUSH
50494: LD_INT 4
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 5
50504: NEG
50505: PUSH
50506: LD_INT 5
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 5
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 5
50528: NEG
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 4
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 4
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 5
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 5
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 4
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 5
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 4
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 4
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 5
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50963: LD_ADDR_VAR 0 34
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 4
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 5
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 4
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 5
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 5
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 4
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 4
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 5
51195: PUSH
51196: LD_INT 5
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: LD_INT 5
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 5
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: LD_INT 5
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 4
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 4
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 5
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 5
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 5
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// end ; end ;
51495: GO 51498
51497: POP
// case btype of b_depot , b_warehouse :
51498: LD_VAR 0 1
51502: PUSH
51503: LD_INT 0
51505: DOUBLE
51506: EQUAL
51507: IFTRUE 51517
51509: LD_INT 1
51511: DOUBLE
51512: EQUAL
51513: IFTRUE 51517
51515: GO 51718
51517: POP
// case nation of nation_american :
51518: LD_VAR 0 5
51522: PUSH
51523: LD_INT 1
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51587
51531: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51532: LD_ADDR_VAR 0 9
51536: PUSH
51537: LD_VAR 0 11
51541: PUSH
51542: LD_VAR 0 12
51546: PUSH
51547: LD_VAR 0 13
51551: PUSH
51552: LD_VAR 0 14
51556: PUSH
51557: LD_VAR 0 15
51561: PUSH
51562: LD_VAR 0 16
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 4
51579: PUSH
51580: LD_INT 1
51582: PLUS
51583: ARRAY
51584: ST_TO_ADDR
51585: GO 51716
51587: LD_INT 2
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51651
51595: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51596: LD_ADDR_VAR 0 9
51600: PUSH
51601: LD_VAR 0 17
51605: PUSH
51606: LD_VAR 0 18
51610: PUSH
51611: LD_VAR 0 19
51615: PUSH
51616: LD_VAR 0 20
51620: PUSH
51621: LD_VAR 0 21
51625: PUSH
51626: LD_VAR 0 22
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: PUSH
51639: LD_VAR 0 4
51643: PUSH
51644: LD_INT 1
51646: PLUS
51647: ARRAY
51648: ST_TO_ADDR
51649: GO 51716
51651: LD_INT 3
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51715
51659: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51660: LD_ADDR_VAR 0 9
51664: PUSH
51665: LD_VAR 0 23
51669: PUSH
51670: LD_VAR 0 24
51674: PUSH
51675: LD_VAR 0 25
51679: PUSH
51680: LD_VAR 0 26
51684: PUSH
51685: LD_VAR 0 27
51689: PUSH
51690: LD_VAR 0 28
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: PUSH
51703: LD_VAR 0 4
51707: PUSH
51708: LD_INT 1
51710: PLUS
51711: ARRAY
51712: ST_TO_ADDR
51713: GO 51716
51715: POP
51716: GO 52271
51718: LD_INT 2
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51732
51724: LD_INT 3
51726: DOUBLE
51727: EQUAL
51728: IFTRUE 51732
51730: GO 51788
51732: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51733: LD_ADDR_VAR 0 9
51737: PUSH
51738: LD_VAR 0 29
51742: PUSH
51743: LD_VAR 0 30
51747: PUSH
51748: LD_VAR 0 31
51752: PUSH
51753: LD_VAR 0 32
51757: PUSH
51758: LD_VAR 0 33
51762: PUSH
51763: LD_VAR 0 34
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: PUSH
51776: LD_VAR 0 4
51780: PUSH
51781: LD_INT 1
51783: PLUS
51784: ARRAY
51785: ST_TO_ADDR
51786: GO 52271
51788: LD_INT 16
51790: DOUBLE
51791: EQUAL
51792: IFTRUE 51850
51794: LD_INT 17
51796: DOUBLE
51797: EQUAL
51798: IFTRUE 51850
51800: LD_INT 18
51802: DOUBLE
51803: EQUAL
51804: IFTRUE 51850
51806: LD_INT 19
51808: DOUBLE
51809: EQUAL
51810: IFTRUE 51850
51812: LD_INT 22
51814: DOUBLE
51815: EQUAL
51816: IFTRUE 51850
51818: LD_INT 20
51820: DOUBLE
51821: EQUAL
51822: IFTRUE 51850
51824: LD_INT 21
51826: DOUBLE
51827: EQUAL
51828: IFTRUE 51850
51830: LD_INT 23
51832: DOUBLE
51833: EQUAL
51834: IFTRUE 51850
51836: LD_INT 24
51838: DOUBLE
51839: EQUAL
51840: IFTRUE 51850
51842: LD_INT 25
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51906
51850: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51851: LD_ADDR_VAR 0 9
51855: PUSH
51856: LD_VAR 0 35
51860: PUSH
51861: LD_VAR 0 36
51865: PUSH
51866: LD_VAR 0 37
51870: PUSH
51871: LD_VAR 0 38
51875: PUSH
51876: LD_VAR 0 39
51880: PUSH
51881: LD_VAR 0 40
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 4
51898: PUSH
51899: LD_INT 1
51901: PLUS
51902: ARRAY
51903: ST_TO_ADDR
51904: GO 52271
51906: LD_INT 6
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51962
51912: LD_INT 7
51914: DOUBLE
51915: EQUAL
51916: IFTRUE 51962
51918: LD_INT 8
51920: DOUBLE
51921: EQUAL
51922: IFTRUE 51962
51924: LD_INT 13
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51962
51930: LD_INT 12
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51962
51936: LD_INT 15
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51962
51942: LD_INT 11
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51962
51948: LD_INT 14
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51962
51954: LD_INT 10
51956: DOUBLE
51957: EQUAL
51958: IFTRUE 51962
51960: GO 52018
51962: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51963: LD_ADDR_VAR 0 9
51967: PUSH
51968: LD_VAR 0 41
51972: PUSH
51973: LD_VAR 0 42
51977: PUSH
51978: LD_VAR 0 43
51982: PUSH
51983: LD_VAR 0 44
51987: PUSH
51988: LD_VAR 0 45
51992: PUSH
51993: LD_VAR 0 46
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: LD_VAR 0 4
52010: PUSH
52011: LD_INT 1
52013: PLUS
52014: ARRAY
52015: ST_TO_ADDR
52016: GO 52271
52018: LD_INT 36
52020: DOUBLE
52021: EQUAL
52022: IFTRUE 52026
52024: GO 52082
52026: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52027: LD_ADDR_VAR 0 9
52031: PUSH
52032: LD_VAR 0 47
52036: PUSH
52037: LD_VAR 0 48
52041: PUSH
52042: LD_VAR 0 49
52046: PUSH
52047: LD_VAR 0 50
52051: PUSH
52052: LD_VAR 0 51
52056: PUSH
52057: LD_VAR 0 52
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: PUSH
52070: LD_VAR 0 4
52074: PUSH
52075: LD_INT 1
52077: PLUS
52078: ARRAY
52079: ST_TO_ADDR
52080: GO 52271
52082: LD_INT 4
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52108
52088: LD_INT 5
52090: DOUBLE
52091: EQUAL
52092: IFTRUE 52108
52094: LD_INT 34
52096: DOUBLE
52097: EQUAL
52098: IFTRUE 52108
52100: LD_INT 37
52102: DOUBLE
52103: EQUAL
52104: IFTRUE 52108
52106: GO 52164
52108: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52109: LD_ADDR_VAR 0 9
52113: PUSH
52114: LD_VAR 0 53
52118: PUSH
52119: LD_VAR 0 54
52123: PUSH
52124: LD_VAR 0 55
52128: PUSH
52129: LD_VAR 0 56
52133: PUSH
52134: LD_VAR 0 57
52138: PUSH
52139: LD_VAR 0 58
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: PUSH
52152: LD_VAR 0 4
52156: PUSH
52157: LD_INT 1
52159: PLUS
52160: ARRAY
52161: ST_TO_ADDR
52162: GO 52271
52164: LD_INT 31
52166: DOUBLE
52167: EQUAL
52168: IFTRUE 52214
52170: LD_INT 32
52172: DOUBLE
52173: EQUAL
52174: IFTRUE 52214
52176: LD_INT 33
52178: DOUBLE
52179: EQUAL
52180: IFTRUE 52214
52182: LD_INT 27
52184: DOUBLE
52185: EQUAL
52186: IFTRUE 52214
52188: LD_INT 26
52190: DOUBLE
52191: EQUAL
52192: IFTRUE 52214
52194: LD_INT 28
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52214
52200: LD_INT 29
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52214
52206: LD_INT 30
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52214
52212: GO 52270
52214: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52215: LD_ADDR_VAR 0 9
52219: PUSH
52220: LD_VAR 0 59
52224: PUSH
52225: LD_VAR 0 60
52229: PUSH
52230: LD_VAR 0 61
52234: PUSH
52235: LD_VAR 0 62
52239: PUSH
52240: LD_VAR 0 63
52244: PUSH
52245: LD_VAR 0 64
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: PUSH
52258: LD_VAR 0 4
52262: PUSH
52263: LD_INT 1
52265: PLUS
52266: ARRAY
52267: ST_TO_ADDR
52268: GO 52271
52270: POP
// temp_list2 = [ ] ;
52271: LD_ADDR_VAR 0 10
52275: PUSH
52276: EMPTY
52277: ST_TO_ADDR
// for i in temp_list do
52278: LD_ADDR_VAR 0 8
52282: PUSH
52283: LD_VAR 0 9
52287: PUSH
52288: FOR_IN
52289: IFFALSE 52341
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52291: LD_ADDR_VAR 0 10
52295: PUSH
52296: LD_VAR 0 10
52300: PUSH
52301: LD_VAR 0 8
52305: PUSH
52306: LD_INT 1
52308: ARRAY
52309: PUSH
52310: LD_VAR 0 2
52314: PLUS
52315: PUSH
52316: LD_VAR 0 8
52320: PUSH
52321: LD_INT 2
52323: ARRAY
52324: PUSH
52325: LD_VAR 0 3
52329: PLUS
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: ADD
52338: ST_TO_ADDR
52339: GO 52288
52341: POP
52342: POP
// result = temp_list2 ;
52343: LD_ADDR_VAR 0 7
52347: PUSH
52348: LD_VAR 0 10
52352: ST_TO_ADDR
// end ;
52353: LD_VAR 0 7
52357: RET
// export function EnemyInRange ( unit , dist ) ; begin
52358: LD_INT 0
52360: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: CALL_OW 255
52375: PPUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 250
52385: PPUSH
52386: LD_VAR 0 1
52390: PPUSH
52391: CALL_OW 251
52395: PPUSH
52396: LD_VAR 0 2
52400: PPUSH
52401: CALL 25754 0 4
52405: PUSH
52406: LD_INT 4
52408: ARRAY
52409: ST_TO_ADDR
// end ;
52410: LD_VAR 0 3
52414: RET
// export function PlayerSeeMe ( unit ) ; begin
52415: LD_INT 0
52417: PPUSH
// result := See ( your_side , unit ) ;
52418: LD_ADDR_VAR 0 2
52422: PUSH
52423: LD_OWVAR 2
52427: PPUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 292
52437: ST_TO_ADDR
// end ;
52438: LD_VAR 0 2
52442: RET
// export function ReverseDir ( unit ) ; begin
52443: LD_INT 0
52445: PPUSH
// if not unit then
52446: LD_VAR 0 1
52450: NOT
52451: IFFALSE 52455
// exit ;
52453: GO 52478
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52455: LD_ADDR_VAR 0 2
52459: PUSH
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 254
52469: PUSH
52470: LD_INT 3
52472: PLUS
52473: PUSH
52474: LD_INT 6
52476: MOD
52477: ST_TO_ADDR
// end ;
52478: LD_VAR 0 2
52482: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52483: LD_INT 0
52485: PPUSH
52486: PPUSH
52487: PPUSH
52488: PPUSH
52489: PPUSH
// if not hexes then
52490: LD_VAR 0 2
52494: NOT
52495: IFFALSE 52499
// exit ;
52497: GO 52647
// dist := 9999 ;
52499: LD_ADDR_VAR 0 5
52503: PUSH
52504: LD_INT 9999
52506: ST_TO_ADDR
// for i = 1 to hexes do
52507: LD_ADDR_VAR 0 4
52511: PUSH
52512: DOUBLE
52513: LD_INT 1
52515: DEC
52516: ST_TO_ADDR
52517: LD_VAR 0 2
52521: PUSH
52522: FOR_TO
52523: IFFALSE 52635
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52525: LD_VAR 0 1
52529: PPUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_VAR 0 4
52539: ARRAY
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PPUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_VAR 0 4
52554: ARRAY
52555: PUSH
52556: LD_INT 2
52558: ARRAY
52559: PPUSH
52560: CALL_OW 297
52564: PUSH
52565: LD_VAR 0 5
52569: LESS
52570: IFFALSE 52633
// begin hex := hexes [ i ] ;
52572: LD_ADDR_VAR 0 7
52576: PUSH
52577: LD_VAR 0 2
52581: PUSH
52582: LD_VAR 0 4
52586: ARRAY
52587: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52588: LD_ADDR_VAR 0 5
52592: PUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: LD_VAR 0 2
52602: PUSH
52603: LD_VAR 0 4
52607: ARRAY
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PPUSH
52613: LD_VAR 0 2
52617: PUSH
52618: LD_VAR 0 4
52622: ARRAY
52623: PUSH
52624: LD_INT 2
52626: ARRAY
52627: PPUSH
52628: CALL_OW 297
52632: ST_TO_ADDR
// end ; end ;
52633: GO 52522
52635: POP
52636: POP
// result := hex ;
52637: LD_ADDR_VAR 0 3
52641: PUSH
52642: LD_VAR 0 7
52646: ST_TO_ADDR
// end ;
52647: LD_VAR 0 3
52651: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52652: LD_INT 0
52654: PPUSH
52655: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52656: LD_VAR 0 1
52660: NOT
52661: PUSH
52662: LD_VAR 0 1
52666: PUSH
52667: LD_INT 21
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 23
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PPUSH
52691: CALL_OW 69
52695: IN
52696: NOT
52697: OR
52698: IFFALSE 52702
// exit ;
52700: GO 52749
// for i = 1 to 3 do
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: DOUBLE
52708: LD_INT 1
52710: DEC
52711: ST_TO_ADDR
52712: LD_INT 3
52714: PUSH
52715: FOR_TO
52716: IFFALSE 52747
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 250
52727: PPUSH
52728: LD_VAR 0 1
52732: PPUSH
52733: CALL_OW 251
52737: PPUSH
52738: LD_INT 1
52740: PPUSH
52741: CALL_OW 453
52745: GO 52715
52747: POP
52748: POP
// end ;
52749: LD_VAR 0 2
52753: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52754: LD_INT 0
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52762: LD_VAR 0 1
52766: NOT
52767: PUSH
52768: LD_VAR 0 2
52772: NOT
52773: OR
52774: PUSH
52775: LD_VAR 0 1
52779: PPUSH
52780: CALL_OW 314
52784: OR
52785: IFFALSE 52789
// exit ;
52787: GO 53230
// x := GetX ( enemy_unit ) ;
52789: LD_ADDR_VAR 0 7
52793: PUSH
52794: LD_VAR 0 2
52798: PPUSH
52799: CALL_OW 250
52803: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52804: LD_ADDR_VAR 0 8
52808: PUSH
52809: LD_VAR 0 2
52813: PPUSH
52814: CALL_OW 251
52818: ST_TO_ADDR
// if not x or not y then
52819: LD_VAR 0 7
52823: NOT
52824: PUSH
52825: LD_VAR 0 8
52829: NOT
52830: OR
52831: IFFALSE 52835
// exit ;
52833: GO 53230
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52835: LD_ADDR_VAR 0 6
52839: PUSH
52840: LD_VAR 0 7
52844: PPUSH
52845: LD_INT 0
52847: PPUSH
52848: LD_INT 4
52850: PPUSH
52851: CALL_OW 272
52855: PUSH
52856: LD_VAR 0 8
52860: PPUSH
52861: LD_INT 0
52863: PPUSH
52864: LD_INT 4
52866: PPUSH
52867: CALL_OW 273
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_VAR 0 7
52880: PPUSH
52881: LD_INT 1
52883: PPUSH
52884: LD_INT 4
52886: PPUSH
52887: CALL_OW 272
52891: PUSH
52892: LD_VAR 0 8
52896: PPUSH
52897: LD_INT 1
52899: PPUSH
52900: LD_INT 4
52902: PPUSH
52903: CALL_OW 273
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_VAR 0 7
52916: PPUSH
52917: LD_INT 2
52919: PPUSH
52920: LD_INT 4
52922: PPUSH
52923: CALL_OW 272
52927: PUSH
52928: LD_VAR 0 8
52932: PPUSH
52933: LD_INT 2
52935: PPUSH
52936: LD_INT 4
52938: PPUSH
52939: CALL_OW 273
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_VAR 0 7
52952: PPUSH
52953: LD_INT 3
52955: PPUSH
52956: LD_INT 4
52958: PPUSH
52959: CALL_OW 272
52963: PUSH
52964: LD_VAR 0 8
52968: PPUSH
52969: LD_INT 3
52971: PPUSH
52972: LD_INT 4
52974: PPUSH
52975: CALL_OW 273
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_VAR 0 7
52988: PPUSH
52989: LD_INT 4
52991: PPUSH
52992: LD_INT 4
52994: PPUSH
52995: CALL_OW 272
52999: PUSH
53000: LD_VAR 0 8
53004: PPUSH
53005: LD_INT 4
53007: PPUSH
53008: LD_INT 4
53010: PPUSH
53011: CALL_OW 273
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_VAR 0 7
53024: PPUSH
53025: LD_INT 5
53027: PPUSH
53028: LD_INT 4
53030: PPUSH
53031: CALL_OW 272
53035: PUSH
53036: LD_VAR 0 8
53040: PPUSH
53041: LD_INT 5
53043: PPUSH
53044: LD_INT 4
53046: PPUSH
53047: CALL_OW 273
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// for i = tmp downto 1 do
53064: LD_ADDR_VAR 0 4
53068: PUSH
53069: DOUBLE
53070: LD_VAR 0 6
53074: INC
53075: ST_TO_ADDR
53076: LD_INT 1
53078: PUSH
53079: FOR_DOWNTO
53080: IFFALSE 53181
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53082: LD_VAR 0 6
53086: PUSH
53087: LD_VAR 0 4
53091: ARRAY
53092: PUSH
53093: LD_INT 1
53095: ARRAY
53096: PPUSH
53097: LD_VAR 0 6
53101: PUSH
53102: LD_VAR 0 4
53106: ARRAY
53107: PUSH
53108: LD_INT 2
53110: ARRAY
53111: PPUSH
53112: CALL_OW 488
53116: NOT
53117: PUSH
53118: LD_VAR 0 6
53122: PUSH
53123: LD_VAR 0 4
53127: ARRAY
53128: PUSH
53129: LD_INT 1
53131: ARRAY
53132: PPUSH
53133: LD_VAR 0 6
53137: PUSH
53138: LD_VAR 0 4
53142: ARRAY
53143: PUSH
53144: LD_INT 2
53146: ARRAY
53147: PPUSH
53148: CALL_OW 428
53152: PUSH
53153: LD_INT 0
53155: NONEQUAL
53156: OR
53157: IFFALSE 53179
// tmp := Delete ( tmp , i ) ;
53159: LD_ADDR_VAR 0 6
53163: PUSH
53164: LD_VAR 0 6
53168: PPUSH
53169: LD_VAR 0 4
53173: PPUSH
53174: CALL_OW 3
53178: ST_TO_ADDR
53179: GO 53079
53181: POP
53182: POP
// j := GetClosestHex ( unit , tmp ) ;
53183: LD_ADDR_VAR 0 5
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: LD_VAR 0 6
53197: PPUSH
53198: CALL 52483 0 2
53202: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53203: LD_VAR 0 1
53207: PPUSH
53208: LD_VAR 0 5
53212: PUSH
53213: LD_INT 1
53215: ARRAY
53216: PPUSH
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PPUSH
53226: CALL_OW 111
// end ;
53230: LD_VAR 0 3
53234: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53235: LD_INT 0
53237: PPUSH
53238: PPUSH
53239: PPUSH
// uc_side = 0 ;
53240: LD_ADDR_OWVAR 20
53244: PUSH
53245: LD_INT 0
53247: ST_TO_ADDR
// uc_nation = 0 ;
53248: LD_ADDR_OWVAR 21
53252: PUSH
53253: LD_INT 0
53255: ST_TO_ADDR
// InitHc_All ( ) ;
53256: CALL_OW 584
// InitVc ;
53260: CALL_OW 20
// if mastodonts then
53264: LD_VAR 0 6
53268: IFFALSE 53335
// for i = 1 to mastodonts do
53270: LD_ADDR_VAR 0 11
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_VAR 0 6
53284: PUSH
53285: FOR_TO
53286: IFFALSE 53333
// begin vc_chassis := 31 ;
53288: LD_ADDR_OWVAR 37
53292: PUSH
53293: LD_INT 31
53295: ST_TO_ADDR
// vc_control := control_rider ;
53296: LD_ADDR_OWVAR 38
53300: PUSH
53301: LD_INT 4
53303: ST_TO_ADDR
// animal := CreateVehicle ;
53304: LD_ADDR_VAR 0 12
53308: PUSH
53309: CALL_OW 45
53313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53314: LD_VAR 0 12
53318: PPUSH
53319: LD_VAR 0 8
53323: PPUSH
53324: LD_INT 0
53326: PPUSH
53327: CALL 55523 0 3
// end ;
53331: GO 53285
53333: POP
53334: POP
// if horses then
53335: LD_VAR 0 5
53339: IFFALSE 53406
// for i = 1 to horses do
53341: LD_ADDR_VAR 0 11
53345: PUSH
53346: DOUBLE
53347: LD_INT 1
53349: DEC
53350: ST_TO_ADDR
53351: LD_VAR 0 5
53355: PUSH
53356: FOR_TO
53357: IFFALSE 53404
// begin hc_class := 21 ;
53359: LD_ADDR_OWVAR 28
53363: PUSH
53364: LD_INT 21
53366: ST_TO_ADDR
// hc_gallery :=  ;
53367: LD_ADDR_OWVAR 33
53371: PUSH
53372: LD_STRING 
53374: ST_TO_ADDR
// animal := CreateHuman ;
53375: LD_ADDR_VAR 0 12
53379: PUSH
53380: CALL_OW 44
53384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53385: LD_VAR 0 12
53389: PPUSH
53390: LD_VAR 0 8
53394: PPUSH
53395: LD_INT 0
53397: PPUSH
53398: CALL 55523 0 3
// end ;
53402: GO 53356
53404: POP
53405: POP
// if birds then
53406: LD_VAR 0 1
53410: IFFALSE 53477
// for i = 1 to birds do
53412: LD_ADDR_VAR 0 11
53416: PUSH
53417: DOUBLE
53418: LD_INT 1
53420: DEC
53421: ST_TO_ADDR
53422: LD_VAR 0 1
53426: PUSH
53427: FOR_TO
53428: IFFALSE 53475
// begin hc_class = 18 ;
53430: LD_ADDR_OWVAR 28
53434: PUSH
53435: LD_INT 18
53437: ST_TO_ADDR
// hc_gallery =  ;
53438: LD_ADDR_OWVAR 33
53442: PUSH
53443: LD_STRING 
53445: ST_TO_ADDR
// animal := CreateHuman ;
53446: LD_ADDR_VAR 0 12
53450: PUSH
53451: CALL_OW 44
53455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53456: LD_VAR 0 12
53460: PPUSH
53461: LD_VAR 0 8
53465: PPUSH
53466: LD_INT 0
53468: PPUSH
53469: CALL 55523 0 3
// end ;
53473: GO 53427
53475: POP
53476: POP
// if tigers then
53477: LD_VAR 0 2
53481: IFFALSE 53565
// for i = 1 to tigers do
53483: LD_ADDR_VAR 0 11
53487: PUSH
53488: DOUBLE
53489: LD_INT 1
53491: DEC
53492: ST_TO_ADDR
53493: LD_VAR 0 2
53497: PUSH
53498: FOR_TO
53499: IFFALSE 53563
// begin hc_class = class_tiger ;
53501: LD_ADDR_OWVAR 28
53505: PUSH
53506: LD_INT 14
53508: ST_TO_ADDR
// hc_gallery =  ;
53509: LD_ADDR_OWVAR 33
53513: PUSH
53514: LD_STRING 
53516: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53517: LD_ADDR_OWVAR 35
53521: PUSH
53522: LD_INT 7
53524: NEG
53525: PPUSH
53526: LD_INT 7
53528: PPUSH
53529: CALL_OW 12
53533: ST_TO_ADDR
// animal := CreateHuman ;
53534: LD_ADDR_VAR 0 12
53538: PUSH
53539: CALL_OW 44
53543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53544: LD_VAR 0 12
53548: PPUSH
53549: LD_VAR 0 8
53553: PPUSH
53554: LD_INT 0
53556: PPUSH
53557: CALL 55523 0 3
// end ;
53561: GO 53498
53563: POP
53564: POP
// if apemans then
53565: LD_VAR 0 3
53569: IFFALSE 53692
// for i = 1 to apemans do
53571: LD_ADDR_VAR 0 11
53575: PUSH
53576: DOUBLE
53577: LD_INT 1
53579: DEC
53580: ST_TO_ADDR
53581: LD_VAR 0 3
53585: PUSH
53586: FOR_TO
53587: IFFALSE 53690
// begin hc_class = class_apeman ;
53589: LD_ADDR_OWVAR 28
53593: PUSH
53594: LD_INT 12
53596: ST_TO_ADDR
// hc_gallery =  ;
53597: LD_ADDR_OWVAR 33
53601: PUSH
53602: LD_STRING 
53604: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53605: LD_ADDR_OWVAR 35
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PPUSH
53614: LD_INT 2
53616: PPUSH
53617: CALL_OW 12
53621: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53622: LD_ADDR_OWVAR 31
53626: PUSH
53627: LD_INT 1
53629: PPUSH
53630: LD_INT 3
53632: PPUSH
53633: CALL_OW 12
53637: PUSH
53638: LD_INT 1
53640: PPUSH
53641: LD_INT 3
53643: PPUSH
53644: CALL_OW 12
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// animal := CreateHuman ;
53661: LD_ADDR_VAR 0 12
53665: PUSH
53666: CALL_OW 44
53670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53671: LD_VAR 0 12
53675: PPUSH
53676: LD_VAR 0 8
53680: PPUSH
53681: LD_INT 0
53683: PPUSH
53684: CALL 55523 0 3
// end ;
53688: GO 53586
53690: POP
53691: POP
// if enchidnas then
53692: LD_VAR 0 4
53696: IFFALSE 53763
// for i = 1 to enchidnas do
53698: LD_ADDR_VAR 0 11
53702: PUSH
53703: DOUBLE
53704: LD_INT 1
53706: DEC
53707: ST_TO_ADDR
53708: LD_VAR 0 4
53712: PUSH
53713: FOR_TO
53714: IFFALSE 53761
// begin hc_class = 13 ;
53716: LD_ADDR_OWVAR 28
53720: PUSH
53721: LD_INT 13
53723: ST_TO_ADDR
// hc_gallery =  ;
53724: LD_ADDR_OWVAR 33
53728: PUSH
53729: LD_STRING 
53731: ST_TO_ADDR
// animal := CreateHuman ;
53732: LD_ADDR_VAR 0 12
53736: PUSH
53737: CALL_OW 44
53741: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53742: LD_VAR 0 12
53746: PPUSH
53747: LD_VAR 0 8
53751: PPUSH
53752: LD_INT 0
53754: PPUSH
53755: CALL 55523 0 3
// end ;
53759: GO 53713
53761: POP
53762: POP
// if fishes then
53763: LD_VAR 0 7
53767: IFFALSE 53834
// for i = 1 to fishes do
53769: LD_ADDR_VAR 0 11
53773: PUSH
53774: DOUBLE
53775: LD_INT 1
53777: DEC
53778: ST_TO_ADDR
53779: LD_VAR 0 7
53783: PUSH
53784: FOR_TO
53785: IFFALSE 53832
// begin hc_class = 20 ;
53787: LD_ADDR_OWVAR 28
53791: PUSH
53792: LD_INT 20
53794: ST_TO_ADDR
// hc_gallery =  ;
53795: LD_ADDR_OWVAR 33
53799: PUSH
53800: LD_STRING 
53802: ST_TO_ADDR
// animal := CreateHuman ;
53803: LD_ADDR_VAR 0 12
53807: PUSH
53808: CALL_OW 44
53812: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53813: LD_VAR 0 12
53817: PPUSH
53818: LD_VAR 0 9
53822: PPUSH
53823: LD_INT 0
53825: PPUSH
53826: CALL 55523 0 3
// end ;
53830: GO 53784
53832: POP
53833: POP
// end ;
53834: LD_VAR 0 10
53838: RET
// export function WantHeal ( sci , unit ) ; begin
53839: LD_INT 0
53841: PPUSH
// if GetTaskList ( sci ) > 0 then
53842: LD_VAR 0 1
53846: PPUSH
53847: CALL_OW 437
53851: PUSH
53852: LD_INT 0
53854: GREATER
53855: IFFALSE 53925
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 437
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PUSH
53875: LD_STRING l
53877: EQUAL
53878: PUSH
53879: LD_VAR 0 1
53883: PPUSH
53884: CALL_OW 437
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PUSH
53893: LD_INT 4
53895: ARRAY
53896: PUSH
53897: LD_VAR 0 2
53901: EQUAL
53902: AND
53903: IFFALSE 53915
// result := true else
53905: LD_ADDR_VAR 0 3
53909: PUSH
53910: LD_INT 1
53912: ST_TO_ADDR
53913: GO 53923
// result := false ;
53915: LD_ADDR_VAR 0 3
53919: PUSH
53920: LD_INT 0
53922: ST_TO_ADDR
// end else
53923: GO 53933
// result := false ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_INT 0
53932: ST_TO_ADDR
// end ;
53933: LD_VAR 0 3
53937: RET
// export function HealTarget ( sci ) ; begin
53938: LD_INT 0
53940: PPUSH
// if not sci then
53941: LD_VAR 0 1
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54015
// result := 0 ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_INT 0
53957: ST_TO_ADDR
// if GetTaskList ( sci ) then
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 437
53967: IFFALSE 54015
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53969: LD_VAR 0 1
53973: PPUSH
53974: CALL_OW 437
53978: PUSH
53979: LD_INT 1
53981: ARRAY
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PUSH
53987: LD_STRING l
53989: EQUAL
53990: IFFALSE 54015
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53992: LD_ADDR_VAR 0 2
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 437
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: PUSH
54011: LD_INT 4
54013: ARRAY
54014: ST_TO_ADDR
// end ;
54015: LD_VAR 0 2
54019: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54020: LD_INT 0
54022: PPUSH
54023: PPUSH
54024: PPUSH
54025: PPUSH
// if not base_units then
54026: LD_VAR 0 1
54030: NOT
54031: IFFALSE 54035
// exit ;
54033: GO 54122
// result := false ;
54035: LD_ADDR_VAR 0 2
54039: PUSH
54040: LD_INT 0
54042: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54043: LD_ADDR_VAR 0 5
54047: PUSH
54048: LD_VAR 0 1
54052: PPUSH
54053: LD_INT 21
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PPUSH
54063: CALL_OW 72
54067: ST_TO_ADDR
// if not tmp then
54068: LD_VAR 0 5
54072: NOT
54073: IFFALSE 54077
// exit ;
54075: GO 54122
// for i in tmp do
54077: LD_ADDR_VAR 0 3
54081: PUSH
54082: LD_VAR 0 5
54086: PUSH
54087: FOR_IN
54088: IFFALSE 54120
// begin result := EnemyInRange ( i , 22 ) ;
54090: LD_ADDR_VAR 0 2
54094: PUSH
54095: LD_VAR 0 3
54099: PPUSH
54100: LD_INT 22
54102: PPUSH
54103: CALL 52358 0 2
54107: ST_TO_ADDR
// if result then
54108: LD_VAR 0 2
54112: IFFALSE 54118
// exit ;
54114: POP
54115: POP
54116: GO 54122
// end ;
54118: GO 54087
54120: POP
54121: POP
// end ;
54122: LD_VAR 0 2
54126: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54127: LD_INT 0
54129: PPUSH
54130: PPUSH
// if not units then
54131: LD_VAR 0 1
54135: NOT
54136: IFFALSE 54140
// exit ;
54138: GO 54210
// result := [ ] ;
54140: LD_ADDR_VAR 0 3
54144: PUSH
54145: EMPTY
54146: ST_TO_ADDR
// for i in units do
54147: LD_ADDR_VAR 0 4
54151: PUSH
54152: LD_VAR 0 1
54156: PUSH
54157: FOR_IN
54158: IFFALSE 54208
// if GetTag ( i ) = tag then
54160: LD_VAR 0 4
54164: PPUSH
54165: CALL_OW 110
54169: PUSH
54170: LD_VAR 0 2
54174: EQUAL
54175: IFFALSE 54206
// result := Replace ( result , result + 1 , i ) ;
54177: LD_ADDR_VAR 0 3
54181: PUSH
54182: LD_VAR 0 3
54186: PPUSH
54187: LD_VAR 0 3
54191: PUSH
54192: LD_INT 1
54194: PLUS
54195: PPUSH
54196: LD_VAR 0 4
54200: PPUSH
54201: CALL_OW 1
54205: ST_TO_ADDR
54206: GO 54157
54208: POP
54209: POP
// end ;
54210: LD_VAR 0 3
54214: RET
// export function IsDriver ( un ) ; begin
54215: LD_INT 0
54217: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_VAR 0 1
54227: PUSH
54228: LD_INT 55
54230: PUSH
54231: EMPTY
54232: LIST
54233: PPUSH
54234: CALL_OW 69
54238: IN
54239: ST_TO_ADDR
// end ;
54240: LD_VAR 0 2
54244: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54245: LD_INT 0
54247: PPUSH
54248: PPUSH
// list := [ ] ;
54249: LD_ADDR_VAR 0 5
54253: PUSH
54254: EMPTY
54255: ST_TO_ADDR
// case d of 0 :
54256: LD_VAR 0 3
54260: PUSH
54261: LD_INT 0
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54269
54267: GO 54402
54269: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54270: LD_ADDR_VAR 0 5
54274: PUSH
54275: LD_VAR 0 1
54279: PUSH
54280: LD_INT 4
54282: MINUS
54283: PUSH
54284: LD_VAR 0 2
54288: PUSH
54289: LD_INT 4
54291: MINUS
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: PUSH
54301: LD_VAR 0 1
54305: PUSH
54306: LD_INT 3
54308: MINUS
54309: PUSH
54310: LD_VAR 0 2
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: PUSH
54323: LD_VAR 0 1
54327: PUSH
54328: LD_INT 4
54330: PLUS
54331: PUSH
54332: LD_VAR 0 2
54336: PUSH
54337: LD_INT 4
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: PUSH
54345: LD_VAR 0 1
54349: PUSH
54350: LD_INT 3
54352: PLUS
54353: PUSH
54354: LD_VAR 0 2
54358: PUSH
54359: LD_INT 3
54361: PLUS
54362: PUSH
54363: LD_INT 5
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: PUSH
54371: LD_VAR 0 1
54375: PUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 4
54383: PLUS
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// end ; 1 :
54400: GO 55100
54402: LD_INT 1
54404: DOUBLE
54405: EQUAL
54406: IFTRUE 54410
54408: GO 54543
54410: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54411: LD_ADDR_VAR 0 5
54415: PUSH
54416: LD_VAR 0 1
54420: PUSH
54421: LD_VAR 0 2
54425: PUSH
54426: LD_INT 4
54428: MINUS
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: PUSH
54438: LD_VAR 0 1
54442: PUSH
54443: LD_INT 3
54445: MINUS
54446: PUSH
54447: LD_VAR 0 2
54451: PUSH
54452: LD_INT 3
54454: MINUS
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: PUSH
54464: LD_VAR 0 1
54468: PUSH
54469: LD_INT 4
54471: MINUS
54472: PUSH
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: PUSH
54486: LD_VAR 0 1
54490: PUSH
54491: LD_VAR 0 2
54495: PUSH
54496: LD_INT 3
54498: PLUS
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: PUSH
54508: LD_VAR 0 1
54512: PUSH
54513: LD_INT 4
54515: PLUS
54516: PUSH
54517: LD_VAR 0 2
54521: PUSH
54522: LD_INT 4
54524: PLUS
54525: PUSH
54526: LD_INT 5
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// end ; 2 :
54541: GO 55100
54543: LD_INT 2
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54551
54549: GO 54680
54551: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54552: LD_ADDR_VAR 0 5
54556: PUSH
54557: LD_VAR 0 1
54561: PUSH
54562: LD_VAR 0 2
54566: PUSH
54567: LD_INT 3
54569: MINUS
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: PUSH
54579: LD_VAR 0 1
54583: PUSH
54584: LD_INT 4
54586: PLUS
54587: PUSH
54588: LD_VAR 0 2
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: LD_VAR 0 1
54605: PUSH
54606: LD_VAR 0 2
54610: PUSH
54611: LD_INT 4
54613: PLUS
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 1
54627: PUSH
54628: LD_INT 3
54630: MINUS
54631: PUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 1
54649: PUSH
54650: LD_INT 4
54652: MINUS
54653: PUSH
54654: LD_VAR 0 2
54658: PUSH
54659: LD_INT 4
54661: MINUS
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// end ; 3 :
54678: GO 55100
54680: LD_INT 3
54682: DOUBLE
54683: EQUAL
54684: IFTRUE 54688
54686: GO 54821
54688: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54689: LD_ADDR_VAR 0 5
54693: PUSH
54694: LD_VAR 0 1
54698: PUSH
54699: LD_INT 3
54701: PLUS
54702: PUSH
54703: LD_VAR 0 2
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: PUSH
54716: LD_VAR 0 1
54720: PUSH
54721: LD_INT 4
54723: PLUS
54724: PUSH
54725: LD_VAR 0 2
54729: PUSH
54730: LD_INT 4
54732: PLUS
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: LIST
54741: PUSH
54742: LD_VAR 0 1
54746: PUSH
54747: LD_INT 4
54749: MINUS
54750: PUSH
54751: LD_VAR 0 2
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: LIST
54763: PUSH
54764: LD_VAR 0 1
54768: PUSH
54769: LD_VAR 0 2
54773: PUSH
54774: LD_INT 4
54776: MINUS
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: PUSH
54786: LD_VAR 0 1
54790: PUSH
54791: LD_INT 3
54793: MINUS
54794: PUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 3
54802: MINUS
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// end ; 4 :
54819: GO 55100
54821: LD_INT 4
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54829
54827: GO 54962
54829: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54830: LD_ADDR_VAR 0 5
54834: PUSH
54835: LD_VAR 0 1
54839: PUSH
54840: LD_VAR 0 2
54844: PUSH
54845: LD_INT 4
54847: PLUS
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: LIST
54856: PUSH
54857: LD_VAR 0 1
54861: PUSH
54862: LD_INT 3
54864: PLUS
54865: PUSH
54866: LD_VAR 0 2
54870: PUSH
54871: LD_INT 3
54873: PLUS
54874: PUSH
54875: LD_INT 5
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: PUSH
54883: LD_VAR 0 1
54887: PUSH
54888: LD_INT 4
54890: PLUS
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: PUSH
54905: LD_VAR 0 1
54909: PUSH
54910: LD_VAR 0 2
54914: PUSH
54915: LD_INT 3
54917: MINUS
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: PUSH
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 4
54934: MINUS
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 4
54943: MINUS
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// end ; 5 :
54960: GO 55100
54962: LD_INT 5
54964: DOUBLE
54965: EQUAL
54966: IFTRUE 54970
54968: GO 55099
54970: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54971: LD_ADDR_VAR 0 5
54975: PUSH
54976: LD_VAR 0 1
54980: PUSH
54981: LD_INT 4
54983: MINUS
54984: PUSH
54985: LD_VAR 0 2
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: PUSH
54998: LD_VAR 0 1
55002: PUSH
55003: LD_VAR 0 2
55007: PUSH
55008: LD_INT 4
55010: MINUS
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: PUSH
55020: LD_VAR 0 1
55024: PUSH
55025: LD_INT 4
55027: PLUS
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 4
55036: PLUS
55037: PUSH
55038: LD_INT 5
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: LD_INT 3
55053: PLUS
55054: PUSH
55055: LD_VAR 0 2
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: PUSH
55068: LD_VAR 0 1
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 3
55080: PLUS
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// end ; end ;
55097: GO 55100
55099: POP
// result := list ;
55100: LD_ADDR_VAR 0 4
55104: PUSH
55105: LD_VAR 0 5
55109: ST_TO_ADDR
// end ;
55110: LD_VAR 0 4
55114: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
55119: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55120: LD_VAR 0 1
55124: NOT
55125: PUSH
55126: LD_VAR 0 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 4
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: IN
55149: NOT
55150: OR
55151: IFFALSE 55155
// exit ;
55153: GO 55247
// tmp := [ ] ;
55155: LD_ADDR_VAR 0 5
55159: PUSH
55160: EMPTY
55161: ST_TO_ADDR
// for i in units do
55162: LD_ADDR_VAR 0 4
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: FOR_IN
55173: IFFALSE 55216
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55175: LD_ADDR_VAR 0 5
55179: PUSH
55180: LD_VAR 0 5
55184: PPUSH
55185: LD_VAR 0 5
55189: PUSH
55190: LD_INT 1
55192: PLUS
55193: PPUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_VAR 0 2
55203: PPUSH
55204: CALL_OW 259
55208: PPUSH
55209: CALL_OW 2
55213: ST_TO_ADDR
55214: GO 55172
55216: POP
55217: POP
// if not tmp then
55218: LD_VAR 0 5
55222: NOT
55223: IFFALSE 55227
// exit ;
55225: GO 55247
// result := SortListByListDesc ( units , tmp ) ;
55227: LD_ADDR_VAR 0 3
55231: PUSH
55232: LD_VAR 0 1
55236: PPUSH
55237: LD_VAR 0 5
55241: PPUSH
55242: CALL_OW 77
55246: ST_TO_ADDR
// end ;
55247: LD_VAR 0 3
55251: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55252: LD_INT 0
55254: PPUSH
55255: PPUSH
55256: PPUSH
// result := false ;
55257: LD_ADDR_VAR 0 3
55261: PUSH
55262: LD_INT 0
55264: ST_TO_ADDR
// x := GetX ( building ) ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_VAR 0 2
55274: PPUSH
55275: CALL_OW 250
55279: ST_TO_ADDR
// y := GetY ( building ) ;
55280: LD_ADDR_VAR 0 5
55284: PUSH
55285: LD_VAR 0 2
55289: PPUSH
55290: CALL_OW 251
55294: ST_TO_ADDR
// if not building or not x or not y then
55295: LD_VAR 0 2
55299: NOT
55300: PUSH
55301: LD_VAR 0 4
55305: NOT
55306: OR
55307: PUSH
55308: LD_VAR 0 5
55312: NOT
55313: OR
55314: IFFALSE 55318
// exit ;
55316: GO 55410
// if GetTaskList ( unit ) then
55318: LD_VAR 0 1
55322: PPUSH
55323: CALL_OW 437
55327: IFFALSE 55410
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55329: LD_STRING e
55331: PUSH
55332: LD_VAR 0 1
55336: PPUSH
55337: CALL_OW 437
55341: PUSH
55342: LD_INT 1
55344: ARRAY
55345: PUSH
55346: LD_INT 1
55348: ARRAY
55349: EQUAL
55350: PUSH
55351: LD_VAR 0 4
55355: PUSH
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 437
55365: PUSH
55366: LD_INT 1
55368: ARRAY
55369: PUSH
55370: LD_INT 2
55372: ARRAY
55373: EQUAL
55374: AND
55375: PUSH
55376: LD_VAR 0 5
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: CALL_OW 437
55390: PUSH
55391: LD_INT 1
55393: ARRAY
55394: PUSH
55395: LD_INT 3
55397: ARRAY
55398: EQUAL
55399: AND
55400: IFFALSE 55410
// result := true end ;
55402: LD_ADDR_VAR 0 3
55406: PUSH
55407: LD_INT 1
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 3
55414: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55415: LD_INT 0
55417: PPUSH
// result := false ;
55418: LD_ADDR_VAR 0 4
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// if GetTaskList ( unit ) then
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 437
55435: IFFALSE 55518
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55437: LD_STRING M
55439: PUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 437
55449: PUSH
55450: LD_INT 1
55452: ARRAY
55453: PUSH
55454: LD_INT 1
55456: ARRAY
55457: EQUAL
55458: PUSH
55459: LD_VAR 0 2
55463: PUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL_OW 437
55473: PUSH
55474: LD_INT 1
55476: ARRAY
55477: PUSH
55478: LD_INT 2
55480: ARRAY
55481: EQUAL
55482: AND
55483: PUSH
55484: LD_VAR 0 3
55488: PUSH
55489: LD_VAR 0 1
55493: PPUSH
55494: CALL_OW 437
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_INT 3
55505: ARRAY
55506: EQUAL
55507: AND
55508: IFFALSE 55518
// result := true ;
55510: LD_ADDR_VAR 0 4
55514: PUSH
55515: LD_INT 1
55517: ST_TO_ADDR
// end ; end ;
55518: LD_VAR 0 4
55522: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55523: LD_INT 0
55525: PPUSH
55526: PPUSH
55527: PPUSH
55528: PPUSH
// if not unit or not area then
55529: LD_VAR 0 1
55533: NOT
55534: PUSH
55535: LD_VAR 0 2
55539: NOT
55540: OR
55541: IFFALSE 55545
// exit ;
55543: GO 55709
// tmp := AreaToList ( area , i ) ;
55545: LD_ADDR_VAR 0 6
55549: PUSH
55550: LD_VAR 0 2
55554: PPUSH
55555: LD_VAR 0 5
55559: PPUSH
55560: CALL_OW 517
55564: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: DOUBLE
55571: LD_INT 1
55573: DEC
55574: ST_TO_ADDR
55575: LD_VAR 0 6
55579: PUSH
55580: LD_INT 1
55582: ARRAY
55583: PUSH
55584: FOR_TO
55585: IFFALSE 55707
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55587: LD_ADDR_VAR 0 7
55591: PUSH
55592: LD_VAR 0 6
55596: PUSH
55597: LD_INT 1
55599: ARRAY
55600: PUSH
55601: LD_VAR 0 5
55605: ARRAY
55606: PUSH
55607: LD_VAR 0 6
55611: PUSH
55612: LD_INT 2
55614: ARRAY
55615: PUSH
55616: LD_VAR 0 5
55620: ARRAY
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55626: LD_VAR 0 7
55630: PUSH
55631: LD_INT 1
55633: ARRAY
55634: PPUSH
55635: LD_VAR 0 7
55639: PUSH
55640: LD_INT 2
55642: ARRAY
55643: PPUSH
55644: CALL_OW 428
55648: PUSH
55649: LD_INT 0
55651: EQUAL
55652: IFFALSE 55705
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_VAR 0 7
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: LD_VAR 0 7
55672: PUSH
55673: LD_INT 2
55675: ARRAY
55676: PPUSH
55677: LD_VAR 0 3
55681: PPUSH
55682: CALL_OW 48
// result := IsPlaced ( unit ) ;
55686: LD_ADDR_VAR 0 4
55690: PUSH
55691: LD_VAR 0 1
55695: PPUSH
55696: CALL_OW 305
55700: ST_TO_ADDR
// exit ;
55701: POP
55702: POP
55703: GO 55709
// end ; end ;
55705: GO 55584
55707: POP
55708: POP
// end ;
55709: LD_VAR 0 4
55713: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55714: LD_INT 0
55716: PPUSH
55717: PPUSH
55718: PPUSH
// if not side or side > 8 then
55719: LD_VAR 0 1
55723: NOT
55724: PUSH
55725: LD_VAR 0 1
55729: PUSH
55730: LD_INT 8
55732: GREATER
55733: OR
55734: IFFALSE 55738
// exit ;
55736: GO 55925
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55738: LD_ADDR_VAR 0 4
55742: PUSH
55743: LD_INT 22
55745: PUSH
55746: LD_VAR 0 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 21
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PPUSH
55769: CALL_OW 69
55773: ST_TO_ADDR
// if not tmp then
55774: LD_VAR 0 4
55778: NOT
55779: IFFALSE 55783
// exit ;
55781: GO 55925
// enable_addtolog := true ;
55783: LD_ADDR_OWVAR 81
55787: PUSH
55788: LD_INT 1
55790: ST_TO_ADDR
// AddToLog ( [ ) ;
55791: LD_STRING [
55793: PPUSH
55794: CALL_OW 561
// for i in tmp do
55798: LD_ADDR_VAR 0 3
55802: PUSH
55803: LD_VAR 0 4
55807: PUSH
55808: FOR_IN
55809: IFFALSE 55916
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55811: LD_STRING [
55813: PUSH
55814: LD_VAR 0 3
55818: PPUSH
55819: CALL_OW 266
55823: STR
55824: PUSH
55825: LD_STRING , 
55827: STR
55828: PUSH
55829: LD_VAR 0 3
55833: PPUSH
55834: CALL_OW 250
55838: STR
55839: PUSH
55840: LD_STRING , 
55842: STR
55843: PUSH
55844: LD_VAR 0 3
55848: PPUSH
55849: CALL_OW 251
55853: STR
55854: PUSH
55855: LD_STRING , 
55857: STR
55858: PUSH
55859: LD_VAR 0 3
55863: PPUSH
55864: CALL_OW 254
55868: STR
55869: PUSH
55870: LD_STRING , 
55872: STR
55873: PUSH
55874: LD_VAR 0 3
55878: PPUSH
55879: LD_INT 1
55881: PPUSH
55882: CALL_OW 268
55886: STR
55887: PUSH
55888: LD_STRING , 
55890: STR
55891: PUSH
55892: LD_VAR 0 3
55896: PPUSH
55897: LD_INT 2
55899: PPUSH
55900: CALL_OW 268
55904: STR
55905: PUSH
55906: LD_STRING ],
55908: STR
55909: PPUSH
55910: CALL_OW 561
// end ;
55914: GO 55808
55916: POP
55917: POP
// AddToLog ( ]; ) ;
55918: LD_STRING ];
55920: PPUSH
55921: CALL_OW 561
// end ;
55925: LD_VAR 0 2
55929: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55930: LD_INT 0
55932: PPUSH
55933: PPUSH
55934: PPUSH
55935: PPUSH
55936: PPUSH
// if not area or not rate or not max then
55937: LD_VAR 0 1
55941: NOT
55942: PUSH
55943: LD_VAR 0 2
55947: NOT
55948: OR
55949: PUSH
55950: LD_VAR 0 4
55954: NOT
55955: OR
55956: IFFALSE 55960
// exit ;
55958: GO 56152
// while 1 do
55960: LD_INT 1
55962: IFFALSE 56152
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55964: LD_ADDR_VAR 0 9
55968: PUSH
55969: LD_VAR 0 1
55973: PPUSH
55974: LD_INT 1
55976: PPUSH
55977: CALL_OW 287
55981: PUSH
55982: LD_INT 10
55984: MUL
55985: ST_TO_ADDR
// r := rate / 10 ;
55986: LD_ADDR_VAR 0 7
55990: PUSH
55991: LD_VAR 0 2
55995: PUSH
55996: LD_INT 10
55998: DIVREAL
55999: ST_TO_ADDR
// time := 1 1$00 ;
56000: LD_ADDR_VAR 0 8
56004: PUSH
56005: LD_INT 2100
56007: ST_TO_ADDR
// if amount < min then
56008: LD_VAR 0 9
56012: PUSH
56013: LD_VAR 0 3
56017: LESS
56018: IFFALSE 56036
// r := r * 2 else
56020: LD_ADDR_VAR 0 7
56024: PUSH
56025: LD_VAR 0 7
56029: PUSH
56030: LD_INT 2
56032: MUL
56033: ST_TO_ADDR
56034: GO 56062
// if amount > max then
56036: LD_VAR 0 9
56040: PUSH
56041: LD_VAR 0 4
56045: GREATER
56046: IFFALSE 56062
// r := r / 2 ;
56048: LD_ADDR_VAR 0 7
56052: PUSH
56053: LD_VAR 0 7
56057: PUSH
56058: LD_INT 2
56060: DIVREAL
56061: ST_TO_ADDR
// time := time / r ;
56062: LD_ADDR_VAR 0 8
56066: PUSH
56067: LD_VAR 0 8
56071: PUSH
56072: LD_VAR 0 7
56076: DIVREAL
56077: ST_TO_ADDR
// if time < 0 then
56078: LD_VAR 0 8
56082: PUSH
56083: LD_INT 0
56085: LESS
56086: IFFALSE 56103
// time := time * - 1 ;
56088: LD_ADDR_VAR 0 8
56092: PUSH
56093: LD_VAR 0 8
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: MUL
56102: ST_TO_ADDR
// wait ( time ) ;
56103: LD_VAR 0 8
56107: PPUSH
56108: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56112: LD_INT 35
56114: PPUSH
56115: LD_INT 875
56117: PPUSH
56118: CALL_OW 12
56122: PPUSH
56123: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56127: LD_INT 1
56129: PPUSH
56130: LD_INT 5
56132: PPUSH
56133: CALL_OW 12
56137: PPUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: LD_INT 1
56145: PPUSH
56146: CALL_OW 55
// end ;
56150: GO 55960
// end ;
56152: LD_VAR 0 5
56156: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56157: LD_INT 0
56159: PPUSH
56160: PPUSH
56161: PPUSH
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
// if not turrets or not factories then
56167: LD_VAR 0 1
56171: NOT
56172: PUSH
56173: LD_VAR 0 2
56177: NOT
56178: OR
56179: IFFALSE 56183
// exit ;
56181: GO 56490
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56183: LD_ADDR_VAR 0 10
56187: PUSH
56188: LD_INT 5
56190: PUSH
56191: LD_INT 6
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: LD_INT 5
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 24
56225: PUSH
56226: LD_INT 25
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 23
56235: PUSH
56236: LD_INT 27
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 42
56249: PUSH
56250: LD_INT 43
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 44
56259: PUSH
56260: LD_INT 46
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 45
56269: PUSH
56270: LD_INT 47
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// result := [ ] ;
56287: LD_ADDR_VAR 0 3
56291: PUSH
56292: EMPTY
56293: ST_TO_ADDR
// for i in turrets do
56294: LD_ADDR_VAR 0 4
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: FOR_IN
56305: IFFALSE 56488
// begin nat := GetNation ( i ) ;
56307: LD_ADDR_VAR 0 7
56311: PUSH
56312: LD_VAR 0 4
56316: PPUSH
56317: CALL_OW 248
56321: ST_TO_ADDR
// weapon := 0 ;
56322: LD_ADDR_VAR 0 8
56326: PUSH
56327: LD_INT 0
56329: ST_TO_ADDR
// if not nat then
56330: LD_VAR 0 7
56334: NOT
56335: IFFALSE 56339
// continue ;
56337: GO 56304
// for j in list [ nat ] do
56339: LD_ADDR_VAR 0 5
56343: PUSH
56344: LD_VAR 0 10
56348: PUSH
56349: LD_VAR 0 7
56353: ARRAY
56354: PUSH
56355: FOR_IN
56356: IFFALSE 56397
// if GetBWeapon ( i ) = j [ 1 ] then
56358: LD_VAR 0 4
56362: PPUSH
56363: CALL_OW 269
56367: PUSH
56368: LD_VAR 0 5
56372: PUSH
56373: LD_INT 1
56375: ARRAY
56376: EQUAL
56377: IFFALSE 56395
// begin weapon := j [ 2 ] ;
56379: LD_ADDR_VAR 0 8
56383: PUSH
56384: LD_VAR 0 5
56388: PUSH
56389: LD_INT 2
56391: ARRAY
56392: ST_TO_ADDR
// break ;
56393: GO 56397
// end ;
56395: GO 56355
56397: POP
56398: POP
// if not weapon then
56399: LD_VAR 0 8
56403: NOT
56404: IFFALSE 56408
// continue ;
56406: GO 56304
// for k in factories do
56408: LD_ADDR_VAR 0 6
56412: PUSH
56413: LD_VAR 0 2
56417: PUSH
56418: FOR_IN
56419: IFFALSE 56484
// begin weapons := AvailableWeaponList ( k ) ;
56421: LD_ADDR_VAR 0 9
56425: PUSH
56426: LD_VAR 0 6
56430: PPUSH
56431: CALL_OW 478
56435: ST_TO_ADDR
// if not weapons then
56436: LD_VAR 0 9
56440: NOT
56441: IFFALSE 56445
// continue ;
56443: GO 56418
// if weapon in weapons then
56445: LD_VAR 0 8
56449: PUSH
56450: LD_VAR 0 9
56454: IN
56455: IFFALSE 56482
// begin result := [ i , weapon ] ;
56457: LD_ADDR_VAR 0 3
56461: PUSH
56462: LD_VAR 0 4
56466: PUSH
56467: LD_VAR 0 8
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// exit ;
56476: POP
56477: POP
56478: POP
56479: POP
56480: GO 56490
// end ; end ;
56482: GO 56418
56484: POP
56485: POP
// end ;
56486: GO 56304
56488: POP
56489: POP
// end ;
56490: LD_VAR 0 3
56494: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56495: LD_INT 0
56497: PPUSH
// if not side or side > 8 then
56498: LD_VAR 0 3
56502: NOT
56503: PUSH
56504: LD_VAR 0 3
56508: PUSH
56509: LD_INT 8
56511: GREATER
56512: OR
56513: IFFALSE 56517
// exit ;
56515: GO 56576
// if not range then
56517: LD_VAR 0 4
56521: NOT
56522: IFFALSE 56533
// range := - 12 ;
56524: LD_ADDR_VAR 0 4
56528: PUSH
56529: LD_INT 12
56531: NEG
56532: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56533: LD_VAR 0 1
56537: PPUSH
56538: LD_VAR 0 2
56542: PPUSH
56543: LD_VAR 0 3
56547: PPUSH
56548: LD_VAR 0 4
56552: PPUSH
56553: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56557: LD_VAR 0 1
56561: PPUSH
56562: LD_VAR 0 2
56566: PPUSH
56567: LD_VAR 0 3
56571: PPUSH
56572: CALL_OW 331
// end ;
56576: LD_VAR 0 5
56580: RET
// export function Video ( mode ) ; begin
56581: LD_INT 0
56583: PPUSH
// ingame_video = mode ;
56584: LD_ADDR_OWVAR 52
56588: PUSH
56589: LD_VAR 0 1
56593: ST_TO_ADDR
// interface_hidden = mode ;
56594: LD_ADDR_OWVAR 54
56598: PUSH
56599: LD_VAR 0 1
56603: ST_TO_ADDR
// end ;
56604: LD_VAR 0 2
56608: RET
// export function Join ( array , element ) ; begin
56609: LD_INT 0
56611: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56612: LD_ADDR_VAR 0 3
56616: PUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: LD_VAR 0 1
56626: PUSH
56627: LD_INT 1
56629: PLUS
56630: PPUSH
56631: LD_VAR 0 2
56635: PPUSH
56636: CALL_OW 1
56640: ST_TO_ADDR
// end ;
56641: LD_VAR 0 3
56645: RET
// export function JoinUnion ( array , element ) ; begin
56646: LD_INT 0
56648: PPUSH
// result := array union element ;
56649: LD_ADDR_VAR 0 3
56653: PUSH
56654: LD_VAR 0 1
56658: PUSH
56659: LD_VAR 0 2
56663: UNION
56664: ST_TO_ADDR
// end ;
56665: LD_VAR 0 3
56669: RET
// export function GetBehemoths ( side ) ; begin
56670: LD_INT 0
56672: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56673: LD_ADDR_VAR 0 2
56677: PUSH
56678: LD_INT 22
56680: PUSH
56681: LD_VAR 0 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 31
56692: PUSH
56693: LD_INT 25
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PPUSH
56704: CALL_OW 69
56708: ST_TO_ADDR
// end ;
56709: LD_VAR 0 2
56713: RET
// export function Shuffle ( array ) ; var i , index ; begin
56714: LD_INT 0
56716: PPUSH
56717: PPUSH
56718: PPUSH
// result := [ ] ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: EMPTY
56725: ST_TO_ADDR
// if not array then
56726: LD_VAR 0 1
56730: NOT
56731: IFFALSE 56735
// exit ;
56733: GO 56834
// Randomize ;
56735: CALL_OW 10
// for i = array downto 1 do
56739: LD_ADDR_VAR 0 3
56743: PUSH
56744: DOUBLE
56745: LD_VAR 0 1
56749: INC
56750: ST_TO_ADDR
56751: LD_INT 1
56753: PUSH
56754: FOR_DOWNTO
56755: IFFALSE 56832
// begin index := rand ( 1 , array ) ;
56757: LD_ADDR_VAR 0 4
56761: PUSH
56762: LD_INT 1
56764: PPUSH
56765: LD_VAR 0 1
56769: PPUSH
56770: CALL_OW 12
56774: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56775: LD_ADDR_VAR 0 2
56779: PUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: LD_VAR 0 2
56789: PUSH
56790: LD_INT 1
56792: PLUS
56793: PPUSH
56794: LD_VAR 0 1
56798: PUSH
56799: LD_VAR 0 4
56803: ARRAY
56804: PPUSH
56805: CALL_OW 2
56809: ST_TO_ADDR
// array := Delete ( array , index ) ;
56810: LD_ADDR_VAR 0 1
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_VAR 0 4
56824: PPUSH
56825: CALL_OW 3
56829: ST_TO_ADDR
// end ;
56830: GO 56754
56832: POP
56833: POP
// end ;
56834: LD_VAR 0 2
56838: RET
// export function GetBaseMaterials ( base ) ; begin
56839: LD_INT 0
56841: PPUSH
// result := [ 0 , 0 , 0 ] ;
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// if not base then
56861: LD_VAR 0 1
56865: NOT
56866: IFFALSE 56870
// exit ;
56868: GO 56919
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56870: LD_ADDR_VAR 0 2
56874: PUSH
56875: LD_VAR 0 1
56879: PPUSH
56880: LD_INT 1
56882: PPUSH
56883: CALL_OW 275
56887: PUSH
56888: LD_VAR 0 1
56892: PPUSH
56893: LD_INT 2
56895: PPUSH
56896: CALL_OW 275
56900: PUSH
56901: LD_VAR 0 1
56905: PPUSH
56906: LD_INT 3
56908: PPUSH
56909: CALL_OW 275
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// end ;
56919: LD_VAR 0 2
56923: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56924: LD_INT 0
56926: PPUSH
56927: PPUSH
// result := array ;
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_VAR 0 1
56937: ST_TO_ADDR
// if size > 0 then
56938: LD_VAR 0 2
56942: PUSH
56943: LD_INT 0
56945: GREATER
56946: IFFALSE 56992
// for i := array downto size do
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: DOUBLE
56954: LD_VAR 0 1
56958: INC
56959: ST_TO_ADDR
56960: LD_VAR 0 2
56964: PUSH
56965: FOR_DOWNTO
56966: IFFALSE 56990
// result := Delete ( result , result ) ;
56968: LD_ADDR_VAR 0 3
56972: PUSH
56973: LD_VAR 0 3
56977: PPUSH
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 3
56987: ST_TO_ADDR
56988: GO 56965
56990: POP
56991: POP
// end ;
56992: LD_VAR 0 3
56996: RET
// export function ComExit ( unit ) ; var tmp ; begin
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
// if not IsInUnit ( unit ) then
57001: LD_VAR 0 1
57005: PPUSH
57006: CALL_OW 310
57010: NOT
57011: IFFALSE 57015
// exit ;
57013: GO 57075
// tmp := IsInUnit ( unit ) ;
57015: LD_ADDR_VAR 0 3
57019: PUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 310
57029: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57030: LD_VAR 0 3
57034: PPUSH
57035: CALL_OW 247
57039: PUSH
57040: LD_INT 2
57042: EQUAL
57043: IFFALSE 57056
// ComExitVehicle ( unit ) else
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL_OW 121
57054: GO 57065
// ComExitBuilding ( unit ) ;
57056: LD_VAR 0 1
57060: PPUSH
57061: CALL_OW 122
// result := tmp ;
57065: LD_ADDR_VAR 0 2
57069: PUSH
57070: LD_VAR 0 3
57074: ST_TO_ADDR
// end ;
57075: LD_VAR 0 2
57079: RET
// export function ComExitAll ( units ) ; var i ; begin
57080: LD_INT 0
57082: PPUSH
57083: PPUSH
// if not units then
57084: LD_VAR 0 1
57088: NOT
57089: IFFALSE 57093
// exit ;
57091: GO 57119
// for i in units do
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: LD_VAR 0 1
57102: PUSH
57103: FOR_IN
57104: IFFALSE 57117
// ComExit ( i ) ;
57106: LD_VAR 0 3
57110: PPUSH
57111: CALL 56997 0 1
57115: GO 57103
57117: POP
57118: POP
// end ;
57119: LD_VAR 0 2
57123: RET
// export function ResetHc ; begin
57124: LD_INT 0
57126: PPUSH
// InitHc ;
57127: CALL_OW 19
// hc_importance := 0 ;
57131: LD_ADDR_OWVAR 32
57135: PUSH
57136: LD_INT 0
57138: ST_TO_ADDR
// end ;
57139: LD_VAR 0 1
57143: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57149: LD_ADDR_VAR 0 6
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_VAR 0 3
57163: PLUS
57164: PUSH
57165: LD_INT 2
57167: DIV
57168: ST_TO_ADDR
// if _x < 0 then
57169: LD_VAR 0 6
57173: PUSH
57174: LD_INT 0
57176: LESS
57177: IFFALSE 57194
// _x := _x * - 1 ;
57179: LD_ADDR_VAR 0 6
57183: PUSH
57184: LD_VAR 0 6
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: MUL
57193: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57194: LD_ADDR_VAR 0 7
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_VAR 0 4
57208: PLUS
57209: PUSH
57210: LD_INT 2
57212: DIV
57213: ST_TO_ADDR
// if _y < 0 then
57214: LD_VAR 0 7
57218: PUSH
57219: LD_INT 0
57221: LESS
57222: IFFALSE 57239
// _y := _y * - 1 ;
57224: LD_ADDR_VAR 0 7
57228: PUSH
57229: LD_VAR 0 7
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: MUL
57238: ST_TO_ADDR
// result := [ _x , _y ] ;
57239: LD_ADDR_VAR 0 5
57243: PUSH
57244: LD_VAR 0 6
57248: PUSH
57249: LD_VAR 0 7
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// end ;
57258: LD_VAR 0 5
57262: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57263: LD_INT 0
57265: PPUSH
57266: PPUSH
57267: PPUSH
57268: PPUSH
// task := GetTaskList ( unit ) ;
57269: LD_ADDR_VAR 0 7
57273: PUSH
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 437
57283: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57284: LD_VAR 0 7
57288: NOT
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: LD_VAR 0 2
57299: PPUSH
57300: CALL_OW 308
57304: NOT
57305: AND
57306: IFFALSE 57310
// exit ;
57308: GO 57428
// if IsInArea ( unit , area ) then
57310: LD_VAR 0 1
57314: PPUSH
57315: LD_VAR 0 2
57319: PPUSH
57320: CALL_OW 308
57324: IFFALSE 57342
// begin ComMoveToArea ( unit , goAway ) ;
57326: LD_VAR 0 1
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: CALL_OW 113
// exit ;
57340: GO 57428
// end ; if task [ 1 ] [ 1 ] <> M then
57342: LD_VAR 0 7
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: PUSH
57351: LD_INT 1
57353: ARRAY
57354: PUSH
57355: LD_STRING M
57357: NONEQUAL
57358: IFFALSE 57362
// exit ;
57360: GO 57428
// x := task [ 1 ] [ 2 ] ;
57362: LD_ADDR_VAR 0 5
57366: PUSH
57367: LD_VAR 0 7
57371: PUSH
57372: LD_INT 1
57374: ARRAY
57375: PUSH
57376: LD_INT 2
57378: ARRAY
57379: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57380: LD_ADDR_VAR 0 6
57384: PUSH
57385: LD_VAR 0 7
57389: PUSH
57390: LD_INT 1
57392: ARRAY
57393: PUSH
57394: LD_INT 3
57396: ARRAY
57397: ST_TO_ADDR
// if InArea ( x , y , area ) then
57398: LD_VAR 0 5
57402: PPUSH
57403: LD_VAR 0 6
57407: PPUSH
57408: LD_VAR 0 2
57412: PPUSH
57413: CALL_OW 309
57417: IFFALSE 57428
// ComStop ( unit ) ;
57419: LD_VAR 0 1
57423: PPUSH
57424: CALL_OW 141
// end ;
57428: LD_VAR 0 4
57432: RET
// export function Abs ( value ) ; begin
57433: LD_INT 0
57435: PPUSH
// result := value ;
57436: LD_ADDR_VAR 0 2
57440: PUSH
57441: LD_VAR 0 1
57445: ST_TO_ADDR
// if value < 0 then
57446: LD_VAR 0 1
57450: PUSH
57451: LD_INT 0
57453: LESS
57454: IFFALSE 57471
// result := value * - 1 ;
57456: LD_ADDR_VAR 0 2
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: MUL
57470: ST_TO_ADDR
// end ;
57471: LD_VAR 0 2
57475: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
// if not unit or not building then
57486: LD_VAR 0 1
57490: NOT
57491: PUSH
57492: LD_VAR 0 2
57496: NOT
57497: OR
57498: IFFALSE 57502
// exit ;
57500: GO 57728
// x := GetX ( building ) ;
57502: LD_ADDR_VAR 0 4
57506: PUSH
57507: LD_VAR 0 2
57511: PPUSH
57512: CALL_OW 250
57516: ST_TO_ADDR
// y := GetY ( building ) ;
57517: LD_ADDR_VAR 0 6
57521: PUSH
57522: LD_VAR 0 2
57526: PPUSH
57527: CALL_OW 251
57531: ST_TO_ADDR
// d := GetDir ( building ) ;
57532: LD_ADDR_VAR 0 8
57536: PUSH
57537: LD_VAR 0 2
57541: PPUSH
57542: CALL_OW 254
57546: ST_TO_ADDR
// r := 4 ;
57547: LD_ADDR_VAR 0 9
57551: PUSH
57552: LD_INT 4
57554: ST_TO_ADDR
// for i := 1 to 5 do
57555: LD_ADDR_VAR 0 10
57559: PUSH
57560: DOUBLE
57561: LD_INT 1
57563: DEC
57564: ST_TO_ADDR
57565: LD_INT 5
57567: PUSH
57568: FOR_TO
57569: IFFALSE 57726
// begin _x := ShiftX ( x , d , r + i ) ;
57571: LD_ADDR_VAR 0 5
57575: PUSH
57576: LD_VAR 0 4
57580: PPUSH
57581: LD_VAR 0 8
57585: PPUSH
57586: LD_VAR 0 9
57590: PUSH
57591: LD_VAR 0 10
57595: PLUS
57596: PPUSH
57597: CALL_OW 272
57601: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57602: LD_ADDR_VAR 0 7
57606: PUSH
57607: LD_VAR 0 6
57611: PPUSH
57612: LD_VAR 0 8
57616: PPUSH
57617: LD_VAR 0 9
57621: PUSH
57622: LD_VAR 0 10
57626: PLUS
57627: PPUSH
57628: CALL_OW 273
57632: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57633: LD_VAR 0 5
57637: PPUSH
57638: LD_VAR 0 7
57642: PPUSH
57643: CALL_OW 488
57647: PUSH
57648: LD_VAR 0 5
57652: PPUSH
57653: LD_VAR 0 7
57657: PPUSH
57658: CALL_OW 428
57662: PPUSH
57663: CALL_OW 247
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: IN
57678: NOT
57679: AND
57680: IFFALSE 57724
// begin ComMoveXY ( unit , _x , _y ) ;
57682: LD_VAR 0 1
57686: PPUSH
57687: LD_VAR 0 5
57691: PPUSH
57692: LD_VAR 0 7
57696: PPUSH
57697: CALL_OW 111
// result := [ _x , _y ] ;
57701: LD_ADDR_VAR 0 3
57705: PUSH
57706: LD_VAR 0 5
57710: PUSH
57711: LD_VAR 0 7
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// exit ;
57720: POP
57721: POP
57722: GO 57728
// end ; end ;
57724: GO 57568
57726: POP
57727: POP
// end ;
57728: LD_VAR 0 3
57732: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57733: LD_INT 0
57735: PPUSH
57736: PPUSH
57737: PPUSH
// result := 0 ;
57738: LD_ADDR_VAR 0 3
57742: PUSH
57743: LD_INT 0
57745: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 0
57753: LESS
57754: PUSH
57755: LD_VAR 0 1
57759: PUSH
57760: LD_INT 8
57762: GREATER
57763: OR
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 0
57772: LESS
57773: OR
57774: PUSH
57775: LD_VAR 0 2
57779: PUSH
57780: LD_INT 8
57782: GREATER
57783: OR
57784: IFFALSE 57788
// exit ;
57786: GO 57863
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57788: LD_ADDR_VAR 0 4
57792: PUSH
57793: LD_INT 22
57795: PUSH
57796: LD_VAR 0 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PPUSH
57805: CALL_OW 69
57809: PUSH
57810: FOR_IN
57811: IFFALSE 57861
// begin un := UnitShoot ( i ) ;
57813: LD_ADDR_VAR 0 5
57817: PUSH
57818: LD_VAR 0 4
57822: PPUSH
57823: CALL_OW 504
57827: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57828: LD_VAR 0 5
57832: PPUSH
57833: CALL_OW 255
57837: PUSH
57838: LD_VAR 0 1
57842: EQUAL
57843: IFFALSE 57859
// begin result := un ;
57845: LD_ADDR_VAR 0 3
57849: PUSH
57850: LD_VAR 0 5
57854: ST_TO_ADDR
// exit ;
57855: POP
57856: POP
57857: GO 57863
// end ; end ;
57859: GO 57810
57861: POP
57862: POP
// end ;
57863: LD_VAR 0 3
57867: RET
// export function GetCargoBay ( units ) ; begin
57868: LD_INT 0
57870: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57871: LD_ADDR_VAR 0 2
57875: PUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 34
57886: PUSH
57887: LD_INT 12
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 34
57896: PUSH
57897: LD_INT 51
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 34
57906: PUSH
57907: LD_INT 32
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 34
57916: PUSH
57917: LD_EXP 30
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: PPUSH
57933: CALL_OW 72
57937: ST_TO_ADDR
// end ;
57938: LD_VAR 0 2
57942: RET
// export function Negate ( value ) ; begin
57943: LD_INT 0
57945: PPUSH
// result := not value ;
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_VAR 0 1
57955: NOT
57956: ST_TO_ADDR
// end ;
57957: LD_VAR 0 2
57961: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
57962: LD_INT 0
57964: PPUSH
// if x1 = x2 then
57965: LD_VAR 0 1
57969: PUSH
57970: LD_VAR 0 3
57974: EQUAL
57975: IFFALSE 58009
// begin if y1 > y2 then
57977: LD_VAR 0 2
57981: PUSH
57982: LD_VAR 0 4
57986: GREATER
57987: IFFALSE 57999
// result := 0 else
57989: LD_ADDR_VAR 0 5
57993: PUSH
57994: LD_INT 0
57996: ST_TO_ADDR
57997: GO 58007
// result := 3 ;
57999: LD_ADDR_VAR 0 5
58003: PUSH
58004: LD_INT 3
58006: ST_TO_ADDR
// exit ;
58007: GO 58095
// end ; if y1 = y2 then
58009: LD_VAR 0 2
58013: PUSH
58014: LD_VAR 0 4
58018: EQUAL
58019: IFFALSE 58053
// begin if x1 > x2 then
58021: LD_VAR 0 1
58025: PUSH
58026: LD_VAR 0 3
58030: GREATER
58031: IFFALSE 58043
// result := 1 else
58033: LD_ADDR_VAR 0 5
58037: PUSH
58038: LD_INT 1
58040: ST_TO_ADDR
58041: GO 58051
// result := 4 ;
58043: LD_ADDR_VAR 0 5
58047: PUSH
58048: LD_INT 4
58050: ST_TO_ADDR
// exit ;
58051: GO 58095
// end ; if x1 > x2 and y1 > y2 then
58053: LD_VAR 0 1
58057: PUSH
58058: LD_VAR 0 3
58062: GREATER
58063: PUSH
58064: LD_VAR 0 2
58068: PUSH
58069: LD_VAR 0 4
58073: GREATER
58074: AND
58075: IFFALSE 58087
// result := 2 else
58077: LD_ADDR_VAR 0 5
58081: PUSH
58082: LD_INT 2
58084: ST_TO_ADDR
58085: GO 58095
// result := 5 ;
58087: LD_ADDR_VAR 0 5
58091: PUSH
58092: LD_INT 5
58094: ST_TO_ADDR
// end ;
58095: LD_VAR 0 5
58099: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58100: LD_INT 0
58102: PPUSH
58103: PPUSH
// if not driver or not IsInUnit ( driver ) then
58104: LD_VAR 0 1
58108: NOT
58109: PUSH
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 310
58119: NOT
58120: OR
58121: IFFALSE 58125
// exit ;
58123: GO 58215
// vehicle := IsInUnit ( driver ) ;
58125: LD_ADDR_VAR 0 3
58129: PUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 310
58139: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58140: LD_VAR 0 1
58144: PPUSH
58145: LD_STRING \
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: PUSH
58175: LD_STRING E
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_VAR 0 3
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PPUSH
58211: CALL_OW 446
// end ;
58215: LD_VAR 0 2
58219: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
// if not driver or not IsInUnit ( driver ) then
58224: LD_VAR 0 1
58228: NOT
58229: PUSH
58230: LD_VAR 0 1
58234: PPUSH
58235: CALL_OW 310
58239: NOT
58240: OR
58241: IFFALSE 58245
// exit ;
58243: GO 58335
// vehicle := IsInUnit ( driver ) ;
58245: LD_ADDR_VAR 0 3
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 310
58259: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58260: LD_VAR 0 1
58264: PPUSH
58265: LD_STRING \
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: PUSH
58295: LD_STRING E
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_VAR 0 3
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PPUSH
58331: CALL_OW 447
// end ;
58335: LD_VAR 0 2
58339: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58340: LD_INT 0
58342: PPUSH
58343: PPUSH
58344: PPUSH
// tmp := [ ] ;
58345: LD_ADDR_VAR 0 5
58349: PUSH
58350: EMPTY
58351: ST_TO_ADDR
// for i in units do
58352: LD_ADDR_VAR 0 4
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: FOR_IN
58363: IFFALSE 58401
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58365: LD_ADDR_VAR 0 5
58369: PUSH
58370: LD_VAR 0 5
58374: PPUSH
58375: LD_VAR 0 5
58379: PUSH
58380: LD_INT 1
58382: PLUS
58383: PPUSH
58384: LD_VAR 0 4
58388: PPUSH
58389: CALL_OW 256
58393: PPUSH
58394: CALL_OW 2
58398: ST_TO_ADDR
58399: GO 58362
58401: POP
58402: POP
// if not tmp then
58403: LD_VAR 0 5
58407: NOT
58408: IFFALSE 58412
// exit ;
58410: GO 58460
// if asc then
58412: LD_VAR 0 2
58416: IFFALSE 58440
// result := SortListByListAsc ( units , tmp ) else
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: LD_VAR 0 5
58432: PPUSH
58433: CALL_OW 76
58437: ST_TO_ADDR
58438: GO 58460
// result := SortListByListDesc ( units , tmp ) ;
58440: LD_ADDR_VAR 0 3
58444: PUSH
58445: LD_VAR 0 1
58449: PPUSH
58450: LD_VAR 0 5
58454: PPUSH
58455: CALL_OW 77
58459: ST_TO_ADDR
// end ;
58460: LD_VAR 0 3
58464: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58465: LD_INT 0
58467: PPUSH
58468: PPUSH
// task := GetTaskList ( mech ) ;
58469: LD_ADDR_VAR 0 4
58473: PUSH
58474: LD_VAR 0 1
58478: PPUSH
58479: CALL_OW 437
58483: ST_TO_ADDR
// if not task then
58484: LD_VAR 0 4
58488: NOT
58489: IFFALSE 58493
// exit ;
58491: GO 58535
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58493: LD_ADDR_VAR 0 3
58497: PUSH
58498: LD_VAR 0 4
58502: PUSH
58503: LD_INT 1
58505: ARRAY
58506: PUSH
58507: LD_INT 1
58509: ARRAY
58510: PUSH
58511: LD_STRING r
58513: EQUAL
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PUSH
58524: LD_INT 4
58526: ARRAY
58527: PUSH
58528: LD_VAR 0 2
58532: EQUAL
58533: AND
58534: ST_TO_ADDR
// end ;
58535: LD_VAR 0 3
58539: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58540: LD_INT 0
58542: PPUSH
// SetDir ( unit , d ) ;
58543: LD_VAR 0 1
58547: PPUSH
58548: LD_VAR 0 4
58552: PPUSH
58553: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: LD_VAR 0 3
58571: PPUSH
58572: LD_VAR 0 5
58576: PPUSH
58577: CALL_OW 48
// end ;
58581: LD_VAR 0 6
58585: RET
// export function ToNaturalNumber ( number ) ; begin
58586: LD_INT 0
58588: PPUSH
// result := number div 1 ;
58589: LD_ADDR_VAR 0 2
58593: PUSH
58594: LD_VAR 0 1
58598: PUSH
58599: LD_INT 1
58601: DIV
58602: ST_TO_ADDR
// if number < 0 then
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 0
58610: LESS
58611: IFFALSE 58621
// result := 0 ;
58613: LD_ADDR_VAR 0 2
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 2
58625: RET
// export function SortByClass ( units , class ) ; var un ; begin
58626: LD_INT 0
58628: PPUSH
58629: PPUSH
// if not units or not class then
58630: LD_VAR 0 1
58634: NOT
58635: PUSH
58636: LD_VAR 0 2
58640: NOT
58641: OR
58642: IFFALSE 58646
// exit ;
58644: GO 58741
// result := [ ] ;
58646: LD_ADDR_VAR 0 3
58650: PUSH
58651: EMPTY
58652: ST_TO_ADDR
// for un in units do
58653: LD_ADDR_VAR 0 4
58657: PUSH
58658: LD_VAR 0 1
58662: PUSH
58663: FOR_IN
58664: IFFALSE 58739
// if GetClass ( un ) = class then
58666: LD_VAR 0 4
58670: PPUSH
58671: CALL_OW 257
58675: PUSH
58676: LD_VAR 0 2
58680: EQUAL
58681: IFFALSE 58708
// result := Insert ( result , 1 , un ) else
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: LD_VAR 0 3
58692: PPUSH
58693: LD_INT 1
58695: PPUSH
58696: LD_VAR 0 4
58700: PPUSH
58701: CALL_OW 2
58705: ST_TO_ADDR
58706: GO 58737
// result := Replace ( result , result + 1 , un ) ;
58708: LD_ADDR_VAR 0 3
58712: PUSH
58713: LD_VAR 0 3
58717: PPUSH
58718: LD_VAR 0 3
58722: PUSH
58723: LD_INT 1
58725: PLUS
58726: PPUSH
58727: LD_VAR 0 4
58731: PPUSH
58732: CALL_OW 1
58736: ST_TO_ADDR
58737: GO 58663
58739: POP
58740: POP
// end ;
58741: LD_VAR 0 3
58745: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58746: LD_INT 0
58748: PPUSH
58749: PPUSH
58750: PPUSH
58751: PPUSH
58752: PPUSH
58753: PPUSH
58754: PPUSH
// result := [ ] ;
58755: LD_ADDR_VAR 0 4
58759: PUSH
58760: EMPTY
58761: ST_TO_ADDR
// if x - r < 0 then
58762: LD_VAR 0 1
58766: PUSH
58767: LD_VAR 0 3
58771: MINUS
58772: PUSH
58773: LD_INT 0
58775: LESS
58776: IFFALSE 58788
// min_x := 0 else
58778: LD_ADDR_VAR 0 8
58782: PUSH
58783: LD_INT 0
58785: ST_TO_ADDR
58786: GO 58804
// min_x := x - r ;
58788: LD_ADDR_VAR 0 8
58792: PUSH
58793: LD_VAR 0 1
58797: PUSH
58798: LD_VAR 0 3
58802: MINUS
58803: ST_TO_ADDR
// if y - r < 0 then
58804: LD_VAR 0 2
58808: PUSH
58809: LD_VAR 0 3
58813: MINUS
58814: PUSH
58815: LD_INT 0
58817: LESS
58818: IFFALSE 58830
// min_y := 0 else
58820: LD_ADDR_VAR 0 7
58824: PUSH
58825: LD_INT 0
58827: ST_TO_ADDR
58828: GO 58846
// min_y := y - r ;
58830: LD_ADDR_VAR 0 7
58834: PUSH
58835: LD_VAR 0 2
58839: PUSH
58840: LD_VAR 0 3
58844: MINUS
58845: ST_TO_ADDR
// max_x := x + r ;
58846: LD_ADDR_VAR 0 9
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_VAR 0 3
58860: PLUS
58861: ST_TO_ADDR
// max_y := y + r ;
58862: LD_ADDR_VAR 0 10
58866: PUSH
58867: LD_VAR 0 2
58871: PUSH
58872: LD_VAR 0 3
58876: PLUS
58877: ST_TO_ADDR
// for _x = min_x to max_x do
58878: LD_ADDR_VAR 0 5
58882: PUSH
58883: DOUBLE
58884: LD_VAR 0 8
58888: DEC
58889: ST_TO_ADDR
58890: LD_VAR 0 9
58894: PUSH
58895: FOR_TO
58896: IFFALSE 58997
// for _y = min_y to max_y do
58898: LD_ADDR_VAR 0 6
58902: PUSH
58903: DOUBLE
58904: LD_VAR 0 7
58908: DEC
58909: ST_TO_ADDR
58910: LD_VAR 0 10
58914: PUSH
58915: FOR_TO
58916: IFFALSE 58993
// begin if not ValidHex ( _x , _y ) then
58918: LD_VAR 0 5
58922: PPUSH
58923: LD_VAR 0 6
58927: PPUSH
58928: CALL_OW 488
58932: NOT
58933: IFFALSE 58937
// continue ;
58935: GO 58915
// if GetResourceTypeXY ( _x , _y ) then
58937: LD_VAR 0 5
58941: PPUSH
58942: LD_VAR 0 6
58946: PPUSH
58947: CALL_OW 283
58951: IFFALSE 58991
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58953: LD_ADDR_VAR 0 4
58957: PUSH
58958: LD_VAR 0 4
58962: PPUSH
58963: LD_VAR 0 4
58967: PUSH
58968: LD_INT 1
58970: PLUS
58971: PPUSH
58972: LD_VAR 0 5
58976: PUSH
58977: LD_VAR 0 6
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PPUSH
58986: CALL_OW 1
58990: ST_TO_ADDR
// end ;
58991: GO 58915
58993: POP
58994: POP
58995: GO 58895
58997: POP
58998: POP
// end ;
58999: LD_VAR 0 4
59003: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
59004: LD_INT 0
59006: PPUSH
59007: PPUSH
59008: PPUSH
59009: PPUSH
59010: PPUSH
59011: PPUSH
// if not units then
59012: LD_VAR 0 1
59016: NOT
59017: IFFALSE 59021
// exit ;
59019: GO 59422
// result := UnitFilter ( units , [ f_ok ] ) ;
59021: LD_ADDR_VAR 0 3
59025: PUSH
59026: LD_VAR 0 1
59030: PPUSH
59031: LD_INT 50
59033: PUSH
59034: EMPTY
59035: LIST
59036: PPUSH
59037: CALL_OW 72
59041: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59042: LD_ADDR_VAR 0 7
59046: PUSH
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PPUSH
59056: CALL_OW 255
59060: ST_TO_ADDR
// if not result then
59061: LD_VAR 0 3
59065: NOT
59066: IFFALSE 59070
// exit ;
59068: GO 59422
// for i in result do
59070: LD_ADDR_VAR 0 4
59074: PUSH
59075: LD_VAR 0 3
59079: PUSH
59080: FOR_IN
59081: IFFALSE 59420
// begin tag := GetTag ( i ) + 1 ;
59083: LD_ADDR_VAR 0 8
59087: PUSH
59088: LD_VAR 0 4
59092: PPUSH
59093: CALL_OW 110
59097: PUSH
59098: LD_INT 1
59100: PLUS
59101: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59102: LD_ADDR_VAR 0 6
59106: PUSH
59107: LD_VAR 0 4
59111: PPUSH
59112: CALL_OW 250
59116: PPUSH
59117: LD_VAR 0 4
59121: PPUSH
59122: CALL_OW 251
59126: PPUSH
59127: LD_INT 6
59129: PPUSH
59130: CALL 58746 0 3
59134: ST_TO_ADDR
// if cr then
59135: LD_VAR 0 6
59139: IFFALSE 59178
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59141: LD_VAR 0 4
59145: PPUSH
59146: LD_VAR 0 6
59150: PUSH
59151: LD_INT 1
59153: ARRAY
59154: PUSH
59155: LD_INT 1
59157: ARRAY
59158: PPUSH
59159: LD_VAR 0 6
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PUSH
59168: LD_INT 2
59170: ARRAY
59171: PPUSH
59172: CALL_OW 116
59176: GO 59418
// if path > tag then
59178: LD_VAR 0 2
59182: PUSH
59183: LD_VAR 0 8
59187: GREATER
59188: IFFALSE 59366
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
59190: LD_ADDR_VAR 0 5
59194: PUSH
59195: LD_INT 81
59197: PUSH
59198: LD_VAR 0 7
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 91
59209: PUSH
59210: LD_VAR 0 4
59214: PUSH
59215: LD_INT 12
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PPUSH
59227: CALL_OW 69
59231: ST_TO_ADDR
// if enemy then
59232: LD_VAR 0 5
59236: IFFALSE 59264
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59238: LD_VAR 0 4
59242: PPUSH
59243: LD_VAR 0 5
59247: PPUSH
59248: LD_VAR 0 4
59252: PPUSH
59253: CALL_OW 74
59257: PPUSH
59258: CALL_OW 115
59262: GO 59364
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59264: LD_VAR 0 4
59268: PPUSH
59269: LD_VAR 0 2
59273: PUSH
59274: LD_VAR 0 8
59278: ARRAY
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PPUSH
59284: LD_VAR 0 2
59288: PUSH
59289: LD_VAR 0 8
59293: ARRAY
59294: PUSH
59295: LD_INT 2
59297: ARRAY
59298: PPUSH
59299: CALL_OW 297
59303: PUSH
59304: LD_INT 6
59306: GREATER
59307: IFFALSE 59350
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59309: LD_VAR 0 4
59313: PPUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_VAR 0 8
59323: ARRAY
59324: PUSH
59325: LD_INT 1
59327: ARRAY
59328: PPUSH
59329: LD_VAR 0 2
59333: PUSH
59334: LD_VAR 0 8
59338: ARRAY
59339: PUSH
59340: LD_INT 2
59342: ARRAY
59343: PPUSH
59344: CALL_OW 114
59348: GO 59364
// SetTag ( i , tag ) ;
59350: LD_VAR 0 4
59354: PPUSH
59355: LD_VAR 0 8
59359: PPUSH
59360: CALL_OW 109
// end else
59364: GO 59418
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59366: LD_ADDR_VAR 0 5
59370: PUSH
59371: LD_INT 81
59373: PUSH
59374: LD_VAR 0 7
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PPUSH
59383: CALL_OW 69
59387: ST_TO_ADDR
// if enemy then
59388: LD_VAR 0 5
59392: IFFALSE 59418
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59394: LD_VAR 0 4
59398: PPUSH
59399: LD_VAR 0 5
59403: PPUSH
59404: LD_VAR 0 4
59408: PPUSH
59409: CALL_OW 74
59413: PPUSH
59414: CALL_OW 115
// end ; end ;
59418: GO 59080
59420: POP
59421: POP
// end ; end_of_file
59422: LD_VAR 0 3
59426: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
59427: LD_INT 0
59429: PPUSH
// ar_miner := 81 ;
59430: LD_ADDR_EXP 36
59434: PUSH
59435: LD_INT 81
59437: ST_TO_ADDR
// ar_crane := 88 ;
59438: LD_ADDR_EXP 35
59442: PUSH
59443: LD_INT 88
59445: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
59446: LD_ADDR_EXP 30
59450: PUSH
59451: LD_INT 89
59453: ST_TO_ADDR
// us_hack := 99 ;
59454: LD_ADDR_EXP 31
59458: PUSH
59459: LD_INT 99
59461: ST_TO_ADDR
// us_artillery := 97 ;
59462: LD_ADDR_EXP 32
59466: PUSH
59467: LD_INT 97
59469: ST_TO_ADDR
// ar_bio_bomb := 91 ;
59470: LD_ADDR_EXP 33
59474: PUSH
59475: LD_INT 91
59477: ST_TO_ADDR
// ar_mortar := 92 ;
59478: LD_ADDR_EXP 34
59482: PUSH
59483: LD_INT 92
59485: ST_TO_ADDR
// ru_radar := 98 ;
59486: LD_ADDR_EXP 29
59490: PUSH
59491: LD_INT 98
59493: ST_TO_ADDR
// tech_Artillery := 80 ;
59494: LD_ADDR_EXP 37
59498: PUSH
59499: LD_INT 80
59501: ST_TO_ADDR
// tech_RadMat := 81 ;
59502: LD_ADDR_EXP 38
59506: PUSH
59507: LD_INT 81
59509: ST_TO_ADDR
// tech_BasicTools := 82 ;
59510: LD_ADDR_EXP 39
59514: PUSH
59515: LD_INT 82
59517: ST_TO_ADDR
// tech_Cargo := 83 ;
59518: LD_ADDR_EXP 40
59522: PUSH
59523: LD_INT 83
59525: ST_TO_ADDR
// tech_Track := 84 ;
59526: LD_ADDR_EXP 41
59530: PUSH
59531: LD_INT 84
59533: ST_TO_ADDR
// tech_Crane := 85 ;
59534: LD_ADDR_EXP 42
59538: PUSH
59539: LD_INT 85
59541: ST_TO_ADDR
// tech_Bulldozer := 86 ;
59542: LD_ADDR_EXP 43
59546: PUSH
59547: LD_INT 86
59549: ST_TO_ADDR
// tech_Hovercraft := 87 ;
59550: LD_ADDR_EXP 44
59554: PUSH
59555: LD_INT 87
59557: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
59558: LD_ADDR_EXP 45
59562: PUSH
59563: LD_INT 88
59565: ST_TO_ADDR
// class_mastodont := 31 ;
59566: LD_ADDR_EXP 46
59570: PUSH
59571: LD_INT 31
59573: ST_TO_ADDR
// class_horse := 21 ;
59574: LD_ADDR_EXP 47
59578: PUSH
59579: LD_INT 21
59581: ST_TO_ADDR
// end ;
59582: LD_VAR 0 1
59586: RET
// every 1 do
59587: GO 59589
59589: DISABLE
// InitGlobalVariables ; end_of_file
59590: CALL 59427 0 0
59594: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export function InitMacro ; var i ; begin
59595: LD_INT 0
59597: PPUSH
59598: PPUSH
// skirmish := false ;
59599: LD_ADDR_EXP 48
59603: PUSH
59604: LD_INT 0
59606: ST_TO_ADDR
// debug_mc := false ;
59607: LD_ADDR_EXP 49
59611: PUSH
59612: LD_INT 0
59614: ST_TO_ADDR
// mc_bases := [ ] ;
59615: LD_ADDR_EXP 50
59619: PUSH
59620: EMPTY
59621: ST_TO_ADDR
// mc_sides := [ ] ;
59622: LD_ADDR_EXP 76
59626: PUSH
59627: EMPTY
59628: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
59629: LD_ADDR_EXP 51
59633: PUSH
59634: EMPTY
59635: ST_TO_ADDR
// mc_building_repairs := [ ] ;
59636: LD_ADDR_EXP 52
59640: PUSH
59641: EMPTY
59642: ST_TO_ADDR
// mc_need_heal := [ ] ;
59643: LD_ADDR_EXP 53
59647: PUSH
59648: EMPTY
59649: ST_TO_ADDR
// mc_healers := [ ] ;
59650: LD_ADDR_EXP 54
59654: PUSH
59655: EMPTY
59656: ST_TO_ADDR
// mc_build_list := [ ] ;
59657: LD_ADDR_EXP 55
59661: PUSH
59662: EMPTY
59663: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
59664: LD_ADDR_EXP 82
59668: PUSH
59669: EMPTY
59670: ST_TO_ADDR
// mc_builders := [ ] ;
59671: LD_ADDR_EXP 56
59675: PUSH
59676: EMPTY
59677: ST_TO_ADDR
// mc_construct_list := [ ] ;
59678: LD_ADDR_EXP 57
59682: PUSH
59683: EMPTY
59684: ST_TO_ADDR
// mc_turret_list := [ ] ;
59685: LD_ADDR_EXP 58
59689: PUSH
59690: EMPTY
59691: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
59692: LD_ADDR_EXP 59
59696: PUSH
59697: EMPTY
59698: ST_TO_ADDR
// mc_miners := [ ] ;
59699: LD_ADDR_EXP 64
59703: PUSH
59704: EMPTY
59705: ST_TO_ADDR
// mc_mines := [ ] ;
59706: LD_ADDR_EXP 63
59710: PUSH
59711: EMPTY
59712: ST_TO_ADDR
// mc_minefields := [ ] ;
59713: LD_ADDR_EXP 65
59717: PUSH
59718: EMPTY
59719: ST_TO_ADDR
// mc_crates := [ ] ;
59720: LD_ADDR_EXP 66
59724: PUSH
59725: EMPTY
59726: ST_TO_ADDR
// mc_crates_collector := [ ] ;
59727: LD_ADDR_EXP 67
59731: PUSH
59732: EMPTY
59733: ST_TO_ADDR
// mc_crates_area := [ ] ;
59734: LD_ADDR_EXP 68
59738: PUSH
59739: EMPTY
59740: ST_TO_ADDR
// mc_vehicles := [ ] ;
59741: LD_ADDR_EXP 69
59745: PUSH
59746: EMPTY
59747: ST_TO_ADDR
// mc_attack := [ ] ;
59748: LD_ADDR_EXP 70
59752: PUSH
59753: EMPTY
59754: ST_TO_ADDR
// mc_produce := [ ] ;
59755: LD_ADDR_EXP 71
59759: PUSH
59760: EMPTY
59761: ST_TO_ADDR
// mc_defender := [ ] ;
59762: LD_ADDR_EXP 72
59766: PUSH
59767: EMPTY
59768: ST_TO_ADDR
// mc_parking := [ ] ;
59769: LD_ADDR_EXP 74
59773: PUSH
59774: EMPTY
59775: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
59776: LD_ADDR_EXP 60
59780: PUSH
59781: EMPTY
59782: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
59783: LD_ADDR_EXP 62
59787: PUSH
59788: EMPTY
59789: ST_TO_ADDR
// mc_scan := [ ] ;
59790: LD_ADDR_EXP 73
59794: PUSH
59795: EMPTY
59796: ST_TO_ADDR
// mc_scan_area := [ ] ;
59797: LD_ADDR_EXP 75
59801: PUSH
59802: EMPTY
59803: ST_TO_ADDR
// mc_tech := [ ] ;
59804: LD_ADDR_EXP 77
59808: PUSH
59809: EMPTY
59810: ST_TO_ADDR
// mc_class := [ ] ;
59811: LD_ADDR_EXP 91
59815: PUSH
59816: EMPTY
59817: ST_TO_ADDR
// mc_class_case_use := [ ] ;
59818: LD_ADDR_EXP 92
59822: PUSH
59823: EMPTY
59824: ST_TO_ADDR
// mc_is_defending := [ ] ;
59825: LD_ADDR_EXP 93
59829: PUSH
59830: EMPTY
59831: ST_TO_ADDR
// end ;
59832: LD_VAR 0 1
59836: RET
// export function MC_Kill ( base ) ; begin
59837: LD_INT 0
59839: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
59840: LD_ADDR_EXP 50
59844: PUSH
59845: LD_EXP 50
59849: PPUSH
59850: LD_VAR 0 1
59854: PPUSH
59855: EMPTY
59856: PPUSH
59857: CALL_OW 1
59861: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
59862: LD_ADDR_EXP 51
59866: PUSH
59867: LD_EXP 51
59871: PPUSH
59872: LD_VAR 0 1
59876: PPUSH
59877: EMPTY
59878: PPUSH
59879: CALL_OW 1
59883: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
59884: LD_ADDR_EXP 52
59888: PUSH
59889: LD_EXP 52
59893: PPUSH
59894: LD_VAR 0 1
59898: PPUSH
59899: EMPTY
59900: PPUSH
59901: CALL_OW 1
59905: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
59906: LD_ADDR_EXP 53
59910: PUSH
59911: LD_EXP 53
59915: PPUSH
59916: LD_VAR 0 1
59920: PPUSH
59921: EMPTY
59922: PPUSH
59923: CALL_OW 1
59927: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
59928: LD_ADDR_EXP 54
59932: PUSH
59933: LD_EXP 54
59937: PPUSH
59938: LD_VAR 0 1
59942: PPUSH
59943: EMPTY
59944: PPUSH
59945: CALL_OW 1
59949: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
59950: LD_ADDR_EXP 55
59954: PUSH
59955: LD_EXP 55
59959: PPUSH
59960: LD_VAR 0 1
59964: PPUSH
59965: EMPTY
59966: PPUSH
59967: CALL_OW 1
59971: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
59972: LD_ADDR_EXP 56
59976: PUSH
59977: LD_EXP 56
59981: PPUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: EMPTY
59988: PPUSH
59989: CALL_OW 1
59993: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
59994: LD_ADDR_EXP 57
59998: PUSH
59999: LD_EXP 57
60003: PPUSH
60004: LD_VAR 0 1
60008: PPUSH
60009: EMPTY
60010: PPUSH
60011: CALL_OW 1
60015: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60016: LD_ADDR_EXP 58
60020: PUSH
60021: LD_EXP 58
60025: PPUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: EMPTY
60032: PPUSH
60033: CALL_OW 1
60037: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
60038: LD_ADDR_EXP 59
60042: PUSH
60043: LD_EXP 59
60047: PPUSH
60048: LD_VAR 0 1
60052: PPUSH
60053: EMPTY
60054: PPUSH
60055: CALL_OW 1
60059: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
60060: LD_ADDR_EXP 60
60064: PUSH
60065: LD_EXP 60
60069: PPUSH
60070: LD_VAR 0 1
60074: PPUSH
60075: EMPTY
60076: PPUSH
60077: CALL_OW 1
60081: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
60082: LD_ADDR_EXP 61
60086: PUSH
60087: LD_EXP 61
60091: PPUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: LD_INT 0
60099: PPUSH
60100: CALL_OW 1
60104: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
60105: LD_ADDR_EXP 62
60109: PUSH
60110: LD_EXP 62
60114: PPUSH
60115: LD_VAR 0 1
60119: PPUSH
60120: EMPTY
60121: PPUSH
60122: CALL_OW 1
60126: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
60127: LD_ADDR_EXP 63
60131: PUSH
60132: LD_EXP 63
60136: PPUSH
60137: LD_VAR 0 1
60141: PPUSH
60142: EMPTY
60143: PPUSH
60144: CALL_OW 1
60148: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
60149: LD_ADDR_EXP 64
60153: PUSH
60154: LD_EXP 64
60158: PPUSH
60159: LD_VAR 0 1
60163: PPUSH
60164: EMPTY
60165: PPUSH
60166: CALL_OW 1
60170: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
60171: LD_ADDR_EXP 65
60175: PUSH
60176: LD_EXP 65
60180: PPUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: EMPTY
60187: PPUSH
60188: CALL_OW 1
60192: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
60193: LD_ADDR_EXP 66
60197: PUSH
60198: LD_EXP 66
60202: PPUSH
60203: LD_VAR 0 1
60207: PPUSH
60208: EMPTY
60209: PPUSH
60210: CALL_OW 1
60214: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
60215: LD_ADDR_EXP 67
60219: PUSH
60220: LD_EXP 67
60224: PPUSH
60225: LD_VAR 0 1
60229: PPUSH
60230: EMPTY
60231: PPUSH
60232: CALL_OW 1
60236: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
60237: LD_ADDR_EXP 68
60241: PUSH
60242: LD_EXP 68
60246: PPUSH
60247: LD_VAR 0 1
60251: PPUSH
60252: EMPTY
60253: PPUSH
60254: CALL_OW 1
60258: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
60259: LD_ADDR_EXP 69
60263: PUSH
60264: LD_EXP 69
60268: PPUSH
60269: LD_VAR 0 1
60273: PPUSH
60274: EMPTY
60275: PPUSH
60276: CALL_OW 1
60280: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
60281: LD_ADDR_EXP 70
60285: PUSH
60286: LD_EXP 70
60290: PPUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: EMPTY
60297: PPUSH
60298: CALL_OW 1
60302: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
60303: LD_ADDR_EXP 71
60307: PUSH
60308: LD_EXP 71
60312: PPUSH
60313: LD_VAR 0 1
60317: PPUSH
60318: EMPTY
60319: PPUSH
60320: CALL_OW 1
60324: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
60325: LD_ADDR_EXP 72
60329: PUSH
60330: LD_EXP 72
60334: PPUSH
60335: LD_VAR 0 1
60339: PPUSH
60340: EMPTY
60341: PPUSH
60342: CALL_OW 1
60346: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
60347: LD_ADDR_EXP 73
60351: PUSH
60352: LD_EXP 73
60356: PPUSH
60357: LD_VAR 0 1
60361: PPUSH
60362: EMPTY
60363: PPUSH
60364: CALL_OW 1
60368: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
60369: LD_ADDR_EXP 74
60373: PUSH
60374: LD_EXP 74
60378: PPUSH
60379: LD_VAR 0 1
60383: PPUSH
60384: EMPTY
60385: PPUSH
60386: CALL_OW 1
60390: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
60391: LD_ADDR_EXP 75
60395: PUSH
60396: LD_EXP 75
60400: PPUSH
60401: LD_VAR 0 1
60405: PPUSH
60406: EMPTY
60407: PPUSH
60408: CALL_OW 1
60412: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
60413: LD_ADDR_EXP 77
60417: PUSH
60418: LD_EXP 77
60422: PPUSH
60423: LD_VAR 0 1
60427: PPUSH
60428: EMPTY
60429: PPUSH
60430: CALL_OW 1
60434: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
60435: LD_ADDR_EXP 79
60439: PUSH
60440: LD_EXP 79
60444: PPUSH
60445: LD_VAR 0 1
60449: PPUSH
60450: EMPTY
60451: PPUSH
60452: CALL_OW 1
60456: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
60457: LD_ADDR_EXP 80
60461: PUSH
60462: LD_EXP 80
60466: PPUSH
60467: LD_VAR 0 1
60471: PPUSH
60472: EMPTY
60473: PPUSH
60474: CALL_OW 1
60478: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
60479: LD_ADDR_EXP 81
60483: PUSH
60484: LD_EXP 81
60488: PPUSH
60489: LD_VAR 0 1
60493: PPUSH
60494: EMPTY
60495: PPUSH
60496: CALL_OW 1
60500: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
60501: LD_ADDR_EXP 82
60505: PUSH
60506: LD_EXP 82
60510: PPUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: EMPTY
60517: PPUSH
60518: CALL_OW 1
60522: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
60523: LD_ADDR_EXP 83
60527: PUSH
60528: LD_EXP 83
60532: PPUSH
60533: LD_VAR 0 1
60537: PPUSH
60538: EMPTY
60539: PPUSH
60540: CALL_OW 1
60544: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
60545: LD_ADDR_EXP 84
60549: PUSH
60550: LD_EXP 84
60554: PPUSH
60555: LD_VAR 0 1
60559: PPUSH
60560: EMPTY
60561: PPUSH
60562: CALL_OW 1
60566: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
60567: LD_ADDR_EXP 85
60571: PUSH
60572: LD_EXP 85
60576: PPUSH
60577: LD_VAR 0 1
60581: PPUSH
60582: EMPTY
60583: PPUSH
60584: CALL_OW 1
60588: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
60589: LD_ADDR_EXP 86
60593: PUSH
60594: LD_EXP 86
60598: PPUSH
60599: LD_VAR 0 1
60603: PPUSH
60604: EMPTY
60605: PPUSH
60606: CALL_OW 1
60610: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
60611: LD_ADDR_EXP 87
60615: PUSH
60616: LD_EXP 87
60620: PPUSH
60621: LD_VAR 0 1
60625: PPUSH
60626: EMPTY
60627: PPUSH
60628: CALL_OW 1
60632: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
60633: LD_ADDR_EXP 88
60637: PUSH
60638: LD_EXP 88
60642: PPUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: EMPTY
60649: PPUSH
60650: CALL_OW 1
60654: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
60655: LD_ADDR_EXP 89
60659: PUSH
60660: LD_EXP 89
60664: PPUSH
60665: LD_VAR 0 1
60669: PPUSH
60670: EMPTY
60671: PPUSH
60672: CALL_OW 1
60676: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
60677: LD_ADDR_EXP 90
60681: PUSH
60682: LD_EXP 90
60686: PPUSH
60687: LD_VAR 0 1
60691: PPUSH
60692: EMPTY
60693: PPUSH
60694: CALL_OW 1
60698: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
60699: LD_ADDR_EXP 91
60703: PUSH
60704: LD_EXP 91
60708: PPUSH
60709: LD_VAR 0 1
60713: PPUSH
60714: EMPTY
60715: PPUSH
60716: CALL_OW 1
60720: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
60721: LD_ADDR_EXP 92
60725: PUSH
60726: LD_EXP 92
60730: PPUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_INT 0
60738: PPUSH
60739: CALL_OW 1
60743: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
60744: LD_ADDR_EXP 93
60748: PUSH
60749: LD_EXP 93
60753: PPUSH
60754: LD_VAR 0 1
60758: PPUSH
60759: LD_INT 0
60761: PPUSH
60762: CALL_OW 1
60766: ST_TO_ADDR
// end ;
60767: LD_VAR 0 2
60771: RET
// export function MC_Add ( side , units ) ; var base ; begin
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
// base := mc_bases + 1 ;
60776: LD_ADDR_VAR 0 4
60780: PUSH
60781: LD_EXP 50
60785: PUSH
60786: LD_INT 1
60788: PLUS
60789: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
60790: LD_ADDR_EXP 76
60794: PUSH
60795: LD_EXP 76
60799: PPUSH
60800: LD_VAR 0 4
60804: PPUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 1
60814: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
60815: LD_ADDR_EXP 50
60819: PUSH
60820: LD_EXP 50
60824: PPUSH
60825: LD_VAR 0 4
60829: PPUSH
60830: LD_VAR 0 2
60834: PPUSH
60835: CALL_OW 1
60839: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
60840: LD_ADDR_EXP 51
60844: PUSH
60845: LD_EXP 51
60849: PPUSH
60850: LD_VAR 0 4
60854: PPUSH
60855: EMPTY
60856: PPUSH
60857: CALL_OW 1
60861: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60862: LD_ADDR_EXP 52
60866: PUSH
60867: LD_EXP 52
60871: PPUSH
60872: LD_VAR 0 4
60876: PPUSH
60877: EMPTY
60878: PPUSH
60879: CALL_OW 1
60883: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60884: LD_ADDR_EXP 53
60888: PUSH
60889: LD_EXP 53
60893: PPUSH
60894: LD_VAR 0 4
60898: PPUSH
60899: EMPTY
60900: PPUSH
60901: CALL_OW 1
60905: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
60906: LD_ADDR_EXP 54
60910: PUSH
60911: LD_EXP 54
60915: PPUSH
60916: LD_VAR 0 4
60920: PPUSH
60921: EMPTY
60922: PPUSH
60923: CALL_OW 1
60927: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
60928: LD_ADDR_EXP 55
60932: PUSH
60933: LD_EXP 55
60937: PPUSH
60938: LD_VAR 0 4
60942: PPUSH
60943: EMPTY
60944: PPUSH
60945: CALL_OW 1
60949: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
60950: LD_ADDR_EXP 56
60954: PUSH
60955: LD_EXP 56
60959: PPUSH
60960: LD_VAR 0 4
60964: PPUSH
60965: EMPTY
60966: PPUSH
60967: CALL_OW 1
60971: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
60972: LD_ADDR_EXP 57
60976: PUSH
60977: LD_EXP 57
60981: PPUSH
60982: LD_VAR 0 4
60986: PPUSH
60987: EMPTY
60988: PPUSH
60989: CALL_OW 1
60993: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60994: LD_ADDR_EXP 58
60998: PUSH
60999: LD_EXP 58
61003: PPUSH
61004: LD_VAR 0 4
61008: PPUSH
61009: EMPTY
61010: PPUSH
61011: CALL_OW 1
61015: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
61016: LD_ADDR_EXP 59
61020: PUSH
61021: LD_EXP 59
61025: PPUSH
61026: LD_VAR 0 4
61030: PPUSH
61031: EMPTY
61032: PPUSH
61033: CALL_OW 1
61037: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
61038: LD_ADDR_EXP 60
61042: PUSH
61043: LD_EXP 60
61047: PPUSH
61048: LD_VAR 0 4
61052: PPUSH
61053: EMPTY
61054: PPUSH
61055: CALL_OW 1
61059: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
61060: LD_ADDR_EXP 61
61064: PUSH
61065: LD_EXP 61
61069: PPUSH
61070: LD_VAR 0 4
61074: PPUSH
61075: LD_INT 0
61077: PPUSH
61078: CALL_OW 1
61082: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
61083: LD_ADDR_EXP 62
61087: PUSH
61088: LD_EXP 62
61092: PPUSH
61093: LD_VAR 0 4
61097: PPUSH
61098: EMPTY
61099: PPUSH
61100: CALL_OW 1
61104: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
61105: LD_ADDR_EXP 63
61109: PUSH
61110: LD_EXP 63
61114: PPUSH
61115: LD_VAR 0 4
61119: PPUSH
61120: EMPTY
61121: PPUSH
61122: CALL_OW 1
61126: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
61127: LD_ADDR_EXP 64
61131: PUSH
61132: LD_EXP 64
61136: PPUSH
61137: LD_VAR 0 4
61141: PPUSH
61142: EMPTY
61143: PPUSH
61144: CALL_OW 1
61148: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
61149: LD_ADDR_EXP 65
61153: PUSH
61154: LD_EXP 65
61158: PPUSH
61159: LD_VAR 0 4
61163: PPUSH
61164: EMPTY
61165: PPUSH
61166: CALL_OW 1
61170: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
61171: LD_ADDR_EXP 66
61175: PUSH
61176: LD_EXP 66
61180: PPUSH
61181: LD_VAR 0 4
61185: PPUSH
61186: EMPTY
61187: PPUSH
61188: CALL_OW 1
61192: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
61193: LD_ADDR_EXP 67
61197: PUSH
61198: LD_EXP 67
61202: PPUSH
61203: LD_VAR 0 4
61207: PPUSH
61208: EMPTY
61209: PPUSH
61210: CALL_OW 1
61214: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
61215: LD_ADDR_EXP 68
61219: PUSH
61220: LD_EXP 68
61224: PPUSH
61225: LD_VAR 0 4
61229: PPUSH
61230: EMPTY
61231: PPUSH
61232: CALL_OW 1
61236: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
61237: LD_ADDR_EXP 69
61241: PUSH
61242: LD_EXP 69
61246: PPUSH
61247: LD_VAR 0 4
61251: PPUSH
61252: EMPTY
61253: PPUSH
61254: CALL_OW 1
61258: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
61259: LD_ADDR_EXP 70
61263: PUSH
61264: LD_EXP 70
61268: PPUSH
61269: LD_VAR 0 4
61273: PPUSH
61274: EMPTY
61275: PPUSH
61276: CALL_OW 1
61280: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
61281: LD_ADDR_EXP 71
61285: PUSH
61286: LD_EXP 71
61290: PPUSH
61291: LD_VAR 0 4
61295: PPUSH
61296: EMPTY
61297: PPUSH
61298: CALL_OW 1
61302: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
61303: LD_ADDR_EXP 72
61307: PUSH
61308: LD_EXP 72
61312: PPUSH
61313: LD_VAR 0 4
61317: PPUSH
61318: EMPTY
61319: PPUSH
61320: CALL_OW 1
61324: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
61325: LD_ADDR_EXP 73
61329: PUSH
61330: LD_EXP 73
61334: PPUSH
61335: LD_VAR 0 4
61339: PPUSH
61340: EMPTY
61341: PPUSH
61342: CALL_OW 1
61346: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
61347: LD_ADDR_EXP 74
61351: PUSH
61352: LD_EXP 74
61356: PPUSH
61357: LD_VAR 0 4
61361: PPUSH
61362: EMPTY
61363: PPUSH
61364: CALL_OW 1
61368: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
61369: LD_ADDR_EXP 75
61373: PUSH
61374: LD_EXP 75
61378: PPUSH
61379: LD_VAR 0 4
61383: PPUSH
61384: EMPTY
61385: PPUSH
61386: CALL_OW 1
61390: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
61391: LD_ADDR_EXP 77
61395: PUSH
61396: LD_EXP 77
61400: PPUSH
61401: LD_VAR 0 4
61405: PPUSH
61406: EMPTY
61407: PPUSH
61408: CALL_OW 1
61412: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
61413: LD_ADDR_EXP 79
61417: PUSH
61418: LD_EXP 79
61422: PPUSH
61423: LD_VAR 0 4
61427: PPUSH
61428: EMPTY
61429: PPUSH
61430: CALL_OW 1
61434: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
61435: LD_ADDR_EXP 80
61439: PUSH
61440: LD_EXP 80
61444: PPUSH
61445: LD_VAR 0 4
61449: PPUSH
61450: EMPTY
61451: PPUSH
61452: CALL_OW 1
61456: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
61457: LD_ADDR_EXP 81
61461: PUSH
61462: LD_EXP 81
61466: PPUSH
61467: LD_VAR 0 4
61471: PPUSH
61472: EMPTY
61473: PPUSH
61474: CALL_OW 1
61478: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
61479: LD_ADDR_EXP 82
61483: PUSH
61484: LD_EXP 82
61488: PPUSH
61489: LD_VAR 0 4
61493: PPUSH
61494: EMPTY
61495: PPUSH
61496: CALL_OW 1
61500: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
61501: LD_ADDR_EXP 83
61505: PUSH
61506: LD_EXP 83
61510: PPUSH
61511: LD_VAR 0 4
61515: PPUSH
61516: EMPTY
61517: PPUSH
61518: CALL_OW 1
61522: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
61523: LD_ADDR_EXP 84
61527: PUSH
61528: LD_EXP 84
61532: PPUSH
61533: LD_VAR 0 4
61537: PPUSH
61538: EMPTY
61539: PPUSH
61540: CALL_OW 1
61544: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
61545: LD_ADDR_EXP 85
61549: PUSH
61550: LD_EXP 85
61554: PPUSH
61555: LD_VAR 0 4
61559: PPUSH
61560: EMPTY
61561: PPUSH
61562: CALL_OW 1
61566: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
61567: LD_ADDR_EXP 86
61571: PUSH
61572: LD_EXP 86
61576: PPUSH
61577: LD_VAR 0 4
61581: PPUSH
61582: EMPTY
61583: PPUSH
61584: CALL_OW 1
61588: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
61589: LD_ADDR_EXP 87
61593: PUSH
61594: LD_EXP 87
61598: PPUSH
61599: LD_VAR 0 4
61603: PPUSH
61604: EMPTY
61605: PPUSH
61606: CALL_OW 1
61610: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
61611: LD_ADDR_EXP 88
61615: PUSH
61616: LD_EXP 88
61620: PPUSH
61621: LD_VAR 0 4
61625: PPUSH
61626: EMPTY
61627: PPUSH
61628: CALL_OW 1
61632: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
61633: LD_ADDR_EXP 89
61637: PUSH
61638: LD_EXP 89
61642: PPUSH
61643: LD_VAR 0 4
61647: PPUSH
61648: EMPTY
61649: PPUSH
61650: CALL_OW 1
61654: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
61655: LD_ADDR_EXP 90
61659: PUSH
61660: LD_EXP 90
61664: PPUSH
61665: LD_VAR 0 4
61669: PPUSH
61670: EMPTY
61671: PPUSH
61672: CALL_OW 1
61676: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
61677: LD_ADDR_EXP 91
61681: PUSH
61682: LD_EXP 91
61686: PPUSH
61687: LD_VAR 0 4
61691: PPUSH
61692: EMPTY
61693: PPUSH
61694: CALL_OW 1
61698: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
61699: LD_ADDR_EXP 92
61703: PUSH
61704: LD_EXP 92
61708: PPUSH
61709: LD_VAR 0 4
61713: PPUSH
61714: LD_INT 0
61716: PPUSH
61717: CALL_OW 1
61721: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
61722: LD_ADDR_EXP 93
61726: PUSH
61727: LD_EXP 93
61731: PPUSH
61732: LD_VAR 0 4
61736: PPUSH
61737: LD_INT 0
61739: PPUSH
61740: CALL_OW 1
61744: ST_TO_ADDR
// result := base ;
61745: LD_ADDR_VAR 0 3
61749: PUSH
61750: LD_VAR 0 4
61754: ST_TO_ADDR
// end ;
61755: LD_VAR 0 3
61759: RET
// export function MC_Start ( ) ; var i ; begin
61760: LD_INT 0
61762: PPUSH
61763: PPUSH
// for i = 1 to mc_bases do
61764: LD_ADDR_VAR 0 2
61768: PUSH
61769: DOUBLE
61770: LD_INT 1
61772: DEC
61773: ST_TO_ADDR
61774: LD_EXP 50
61778: PUSH
61779: FOR_TO
61780: IFFALSE 62880
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
61782: LD_ADDR_EXP 50
61786: PUSH
61787: LD_EXP 50
61791: PPUSH
61792: LD_VAR 0 2
61796: PPUSH
61797: LD_EXP 50
61801: PUSH
61802: LD_VAR 0 2
61806: ARRAY
61807: PUSH
61808: LD_INT 0
61810: DIFF
61811: PPUSH
61812: CALL_OW 1
61816: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
61817: LD_ADDR_EXP 51
61821: PUSH
61822: LD_EXP 51
61826: PPUSH
61827: LD_VAR 0 2
61831: PPUSH
61832: EMPTY
61833: PPUSH
61834: CALL_OW 1
61838: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61839: LD_ADDR_EXP 52
61843: PUSH
61844: LD_EXP 52
61848: PPUSH
61849: LD_VAR 0 2
61853: PPUSH
61854: EMPTY
61855: PPUSH
61856: CALL_OW 1
61860: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
61861: LD_ADDR_EXP 53
61865: PUSH
61866: LD_EXP 53
61870: PPUSH
61871: LD_VAR 0 2
61875: PPUSH
61876: EMPTY
61877: PPUSH
61878: CALL_OW 1
61882: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
61883: LD_ADDR_EXP 54
61887: PUSH
61888: LD_EXP 54
61892: PPUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: EMPTY
61899: PUSH
61900: EMPTY
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PPUSH
61906: CALL_OW 1
61910: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
61911: LD_ADDR_EXP 55
61915: PUSH
61916: LD_EXP 55
61920: PPUSH
61921: LD_VAR 0 2
61925: PPUSH
61926: EMPTY
61927: PPUSH
61928: CALL_OW 1
61932: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
61933: LD_ADDR_EXP 82
61937: PUSH
61938: LD_EXP 82
61942: PPUSH
61943: LD_VAR 0 2
61947: PPUSH
61948: EMPTY
61949: PPUSH
61950: CALL_OW 1
61954: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
61955: LD_ADDR_EXP 56
61959: PUSH
61960: LD_EXP 56
61964: PPUSH
61965: LD_VAR 0 2
61969: PPUSH
61970: EMPTY
61971: PPUSH
61972: CALL_OW 1
61976: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
61977: LD_ADDR_EXP 57
61981: PUSH
61982: LD_EXP 57
61986: PPUSH
61987: LD_VAR 0 2
61991: PPUSH
61992: EMPTY
61993: PPUSH
61994: CALL_OW 1
61998: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
61999: LD_ADDR_EXP 58
62003: PUSH
62004: LD_EXP 58
62008: PPUSH
62009: LD_VAR 0 2
62013: PPUSH
62014: LD_EXP 50
62018: PUSH
62019: LD_VAR 0 2
62023: ARRAY
62024: PPUSH
62025: LD_INT 2
62027: PUSH
62028: LD_INT 30
62030: PUSH
62031: LD_INT 32
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 30
62040: PUSH
62041: LD_INT 33
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: PPUSH
62053: CALL_OW 72
62057: PPUSH
62058: CALL_OW 1
62062: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
62063: LD_ADDR_EXP 59
62067: PUSH
62068: LD_EXP 59
62072: PPUSH
62073: LD_VAR 0 2
62077: PPUSH
62078: LD_EXP 50
62082: PUSH
62083: LD_VAR 0 2
62087: ARRAY
62088: PPUSH
62089: LD_INT 2
62091: PUSH
62092: LD_INT 30
62094: PUSH
62095: LD_INT 32
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 30
62104: PUSH
62105: LD_INT 31
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 58
62119: PUSH
62120: EMPTY
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PPUSH
62127: CALL_OW 72
62131: PPUSH
62132: CALL_OW 1
62136: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
62137: LD_ADDR_EXP 60
62141: PUSH
62142: LD_EXP 60
62146: PPUSH
62147: LD_VAR 0 2
62151: PPUSH
62152: EMPTY
62153: PPUSH
62154: CALL_OW 1
62158: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
62159: LD_ADDR_EXP 64
62163: PUSH
62164: LD_EXP 64
62168: PPUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: EMPTY
62175: PPUSH
62176: CALL_OW 1
62180: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
62181: LD_ADDR_EXP 63
62185: PUSH
62186: LD_EXP 63
62190: PPUSH
62191: LD_VAR 0 2
62195: PPUSH
62196: EMPTY
62197: PPUSH
62198: CALL_OW 1
62202: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
62203: LD_ADDR_EXP 65
62207: PUSH
62208: LD_EXP 65
62212: PPUSH
62213: LD_VAR 0 2
62217: PPUSH
62218: EMPTY
62219: PPUSH
62220: CALL_OW 1
62224: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
62225: LD_ADDR_EXP 66
62229: PUSH
62230: LD_EXP 66
62234: PPUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: EMPTY
62241: PPUSH
62242: CALL_OW 1
62246: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
62247: LD_ADDR_EXP 67
62251: PUSH
62252: LD_EXP 67
62256: PPUSH
62257: LD_VAR 0 2
62261: PPUSH
62262: EMPTY
62263: PPUSH
62264: CALL_OW 1
62268: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
62269: LD_ADDR_EXP 68
62273: PUSH
62274: LD_EXP 68
62278: PPUSH
62279: LD_VAR 0 2
62283: PPUSH
62284: EMPTY
62285: PPUSH
62286: CALL_OW 1
62290: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
62291: LD_ADDR_EXP 69
62295: PUSH
62296: LD_EXP 69
62300: PPUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: EMPTY
62307: PPUSH
62308: CALL_OW 1
62312: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
62313: LD_ADDR_EXP 70
62317: PUSH
62318: LD_EXP 70
62322: PPUSH
62323: LD_VAR 0 2
62327: PPUSH
62328: EMPTY
62329: PPUSH
62330: CALL_OW 1
62334: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
62335: LD_ADDR_EXP 71
62339: PUSH
62340: LD_EXP 71
62344: PPUSH
62345: LD_VAR 0 2
62349: PPUSH
62350: EMPTY
62351: PPUSH
62352: CALL_OW 1
62356: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
62357: LD_ADDR_EXP 72
62361: PUSH
62362: LD_EXP 72
62366: PPUSH
62367: LD_VAR 0 2
62371: PPUSH
62372: EMPTY
62373: PPUSH
62374: CALL_OW 1
62378: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
62379: LD_ADDR_EXP 61
62383: PUSH
62384: LD_EXP 61
62388: PPUSH
62389: LD_VAR 0 2
62393: PPUSH
62394: LD_INT 0
62396: PPUSH
62397: CALL_OW 1
62401: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
62402: LD_ADDR_EXP 74
62406: PUSH
62407: LD_EXP 74
62411: PPUSH
62412: LD_VAR 0 2
62416: PPUSH
62417: LD_INT 0
62419: PPUSH
62420: CALL_OW 1
62424: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
62425: LD_ADDR_EXP 62
62429: PUSH
62430: LD_EXP 62
62434: PPUSH
62435: LD_VAR 0 2
62439: PPUSH
62440: EMPTY
62441: PPUSH
62442: CALL_OW 1
62446: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
62447: LD_ADDR_EXP 73
62451: PUSH
62452: LD_EXP 73
62456: PPUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: LD_INT 0
62464: PPUSH
62465: CALL_OW 1
62469: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
62470: LD_ADDR_EXP 75
62474: PUSH
62475: LD_EXP 75
62479: PPUSH
62480: LD_VAR 0 2
62484: PPUSH
62485: EMPTY
62486: PPUSH
62487: CALL_OW 1
62491: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
62492: LD_ADDR_EXP 78
62496: PUSH
62497: LD_EXP 78
62501: PPUSH
62502: LD_VAR 0 2
62506: PPUSH
62507: LD_INT 0
62509: PPUSH
62510: CALL_OW 1
62514: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
62515: LD_ADDR_EXP 79
62519: PUSH
62520: LD_EXP 79
62524: PPUSH
62525: LD_VAR 0 2
62529: PPUSH
62530: EMPTY
62531: PPUSH
62532: CALL_OW 1
62536: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
62537: LD_ADDR_EXP 80
62541: PUSH
62542: LD_EXP 80
62546: PPUSH
62547: LD_VAR 0 2
62551: PPUSH
62552: EMPTY
62553: PPUSH
62554: CALL_OW 1
62558: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62559: LD_ADDR_EXP 81
62563: PUSH
62564: LD_EXP 81
62568: PPUSH
62569: LD_VAR 0 2
62573: PPUSH
62574: EMPTY
62575: PPUSH
62576: CALL_OW 1
62580: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
62581: LD_ADDR_EXP 83
62585: PUSH
62586: LD_EXP 83
62590: PPUSH
62591: LD_VAR 0 2
62595: PPUSH
62596: LD_EXP 50
62600: PUSH
62601: LD_VAR 0 2
62605: ARRAY
62606: PPUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 30
62612: PUSH
62613: LD_INT 6
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 30
62622: PUSH
62623: LD_INT 7
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 30
62632: PUSH
62633: LD_INT 8
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: PPUSH
62646: CALL_OW 72
62650: PPUSH
62651: CALL_OW 1
62655: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
62656: LD_ADDR_EXP 84
62660: PUSH
62661: LD_EXP 84
62665: PPUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: EMPTY
62672: PPUSH
62673: CALL_OW 1
62677: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
62678: LD_ADDR_EXP 85
62682: PUSH
62683: LD_EXP 85
62687: PPUSH
62688: LD_VAR 0 2
62692: PPUSH
62693: EMPTY
62694: PPUSH
62695: CALL_OW 1
62699: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
62700: LD_ADDR_EXP 86
62704: PUSH
62705: LD_EXP 86
62709: PPUSH
62710: LD_VAR 0 2
62714: PPUSH
62715: EMPTY
62716: PPUSH
62717: CALL_OW 1
62721: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
62722: LD_ADDR_EXP 87
62726: PUSH
62727: LD_EXP 87
62731: PPUSH
62732: LD_VAR 0 2
62736: PPUSH
62737: EMPTY
62738: PPUSH
62739: CALL_OW 1
62743: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
62744: LD_ADDR_EXP 88
62748: PUSH
62749: LD_EXP 88
62753: PPUSH
62754: LD_VAR 0 2
62758: PPUSH
62759: EMPTY
62760: PPUSH
62761: CALL_OW 1
62765: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
62766: LD_ADDR_EXP 89
62770: PUSH
62771: LD_EXP 89
62775: PPUSH
62776: LD_VAR 0 2
62780: PPUSH
62781: EMPTY
62782: PPUSH
62783: CALL_OW 1
62787: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
62788: LD_ADDR_EXP 90
62792: PUSH
62793: LD_EXP 90
62797: PPUSH
62798: LD_VAR 0 2
62802: PPUSH
62803: EMPTY
62804: PPUSH
62805: CALL_OW 1
62809: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
62810: LD_ADDR_EXP 91
62814: PUSH
62815: LD_EXP 91
62819: PPUSH
62820: LD_VAR 0 2
62824: PPUSH
62825: EMPTY
62826: PPUSH
62827: CALL_OW 1
62831: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
62832: LD_ADDR_EXP 92
62836: PUSH
62837: LD_EXP 92
62841: PPUSH
62842: LD_VAR 0 2
62846: PPUSH
62847: LD_INT 0
62849: PPUSH
62850: CALL_OW 1
62854: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
62855: LD_ADDR_EXP 93
62859: PUSH
62860: LD_EXP 93
62864: PPUSH
62865: LD_VAR 0 2
62869: PPUSH
62870: LD_INT 0
62872: PPUSH
62873: CALL_OW 1
62877: ST_TO_ADDR
// end ;
62878: GO 61779
62880: POP
62881: POP
// MC_InitSides ( ) ;
62882: CALL 63168 0 0
// MC_InitResearch ( ) ;
62886: CALL 62907 0 0
// CustomInitMacro ( ) ;
62890: CALL 1411 0 0
// skirmish := true ;
62894: LD_ADDR_EXP 48
62898: PUSH
62899: LD_INT 1
62901: ST_TO_ADDR
// end ;
62902: LD_VAR 0 1
62906: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
62907: LD_INT 0
62909: PPUSH
62910: PPUSH
62911: PPUSH
62912: PPUSH
62913: PPUSH
62914: PPUSH
// if not mc_bases then
62915: LD_EXP 50
62919: NOT
62920: IFFALSE 62924
// exit ;
62922: GO 63163
// for i = 1 to 8 do
62924: LD_ADDR_VAR 0 2
62928: PUSH
62929: DOUBLE
62930: LD_INT 1
62932: DEC
62933: ST_TO_ADDR
62934: LD_INT 8
62936: PUSH
62937: FOR_TO
62938: IFFALSE 62964
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
62940: LD_ADDR_EXP 77
62944: PUSH
62945: LD_EXP 77
62949: PPUSH
62950: LD_VAR 0 2
62954: PPUSH
62955: EMPTY
62956: PPUSH
62957: CALL_OW 1
62961: ST_TO_ADDR
62962: GO 62937
62964: POP
62965: POP
// tmp := [ ] ;
62966: LD_ADDR_VAR 0 5
62970: PUSH
62971: EMPTY
62972: ST_TO_ADDR
// for i = 1 to mc_sides do
62973: LD_ADDR_VAR 0 2
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_EXP 76
62987: PUSH
62988: FOR_TO
62989: IFFALSE 63047
// if not mc_sides [ i ] in tmp then
62991: LD_EXP 76
62995: PUSH
62996: LD_VAR 0 2
63000: ARRAY
63001: PUSH
63002: LD_VAR 0 5
63006: IN
63007: NOT
63008: IFFALSE 63045
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
63010: LD_ADDR_VAR 0 5
63014: PUSH
63015: LD_VAR 0 5
63019: PPUSH
63020: LD_VAR 0 5
63024: PUSH
63025: LD_INT 1
63027: PLUS
63028: PPUSH
63029: LD_EXP 76
63033: PUSH
63034: LD_VAR 0 2
63038: ARRAY
63039: PPUSH
63040: CALL_OW 2
63044: ST_TO_ADDR
63045: GO 62988
63047: POP
63048: POP
// if not tmp then
63049: LD_VAR 0 5
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 63163
// for j in tmp do
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_VAR 0 5
63067: PUSH
63068: FOR_IN
63069: IFFALSE 63161
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
63071: LD_ADDR_VAR 0 6
63075: PUSH
63076: LD_INT 22
63078: PUSH
63079: LD_VAR 0 3
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PPUSH
63088: CALL_OW 69
63092: ST_TO_ADDR
// if not un then
63093: LD_VAR 0 6
63097: NOT
63098: IFFALSE 63102
// continue ;
63100: GO 63068
// nation := GetNation ( un [ 1 ] ) ;
63102: LD_ADDR_VAR 0 4
63106: PUSH
63107: LD_VAR 0 6
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: PPUSH
63116: CALL_OW 248
63120: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
63121: LD_ADDR_EXP 77
63125: PUSH
63126: LD_EXP 77
63130: PPUSH
63131: LD_VAR 0 3
63135: PPUSH
63136: LD_VAR 0 3
63140: PPUSH
63141: LD_VAR 0 4
63145: PPUSH
63146: LD_INT 1
63148: PPUSH
63149: CALL 19935 0 3
63153: PPUSH
63154: CALL_OW 1
63158: ST_TO_ADDR
// end ;
63159: GO 63068
63161: POP
63162: POP
// end ;
63163: LD_VAR 0 1
63167: RET
// export function MC_InitSides ( ) ; var i ; begin
63168: LD_INT 0
63170: PPUSH
63171: PPUSH
// if not mc_bases then
63172: LD_EXP 50
63176: NOT
63177: IFFALSE 63181
// exit ;
63179: GO 63255
// for i = 1 to mc_bases do
63181: LD_ADDR_VAR 0 2
63185: PUSH
63186: DOUBLE
63187: LD_INT 1
63189: DEC
63190: ST_TO_ADDR
63191: LD_EXP 50
63195: PUSH
63196: FOR_TO
63197: IFFALSE 63253
// if mc_bases [ i ] then
63199: LD_EXP 50
63203: PUSH
63204: LD_VAR 0 2
63208: ARRAY
63209: IFFALSE 63251
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
63211: LD_ADDR_EXP 76
63215: PUSH
63216: LD_EXP 76
63220: PPUSH
63221: LD_VAR 0 2
63225: PPUSH
63226: LD_EXP 50
63230: PUSH
63231: LD_VAR 0 2
63235: ARRAY
63236: PUSH
63237: LD_INT 1
63239: ARRAY
63240: PPUSH
63241: CALL_OW 255
63245: PPUSH
63246: CALL_OW 1
63250: ST_TO_ADDR
63251: GO 63196
63253: POP
63254: POP
// end ;
63255: LD_VAR 0 1
63259: RET
// every 0 0$03 trigger skirmish do
63260: LD_EXP 48
63264: IFFALSE 63418
63266: GO 63268
63268: DISABLE
// begin enable ;
63269: ENABLE
// MC_CheckBuildings ( ) ;
63270: CALL 67916 0 0
// MC_CheckPeopleLife ( ) ;
63274: CALL 68077 0 0
// RaiseSailEvent ( 100 ) ;
63278: LD_INT 100
63280: PPUSH
63281: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
63285: LD_INT 103
63287: PPUSH
63288: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
63292: LD_INT 104
63294: PPUSH
63295: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
63299: LD_INT 105
63301: PPUSH
63302: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
63306: LD_INT 106
63308: PPUSH
63309: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
63313: LD_INT 107
63315: PPUSH
63316: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
63320: LD_INT 108
63322: PPUSH
63323: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
63327: LD_INT 109
63329: PPUSH
63330: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
63334: LD_INT 110
63336: PPUSH
63337: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
63341: LD_INT 111
63343: PPUSH
63344: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
63348: LD_INT 112
63350: PPUSH
63351: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
63355: LD_INT 113
63357: PPUSH
63358: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
63362: LD_INT 120
63364: PPUSH
63365: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
63369: LD_INT 121
63371: PPUSH
63372: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
63376: LD_INT 122
63378: PPUSH
63379: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
63383: LD_INT 123
63385: PPUSH
63386: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
63390: LD_INT 124
63392: PPUSH
63393: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
63397: LD_INT 125
63399: PPUSH
63400: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
63404: LD_INT 126
63406: PPUSH
63407: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
63411: LD_INT 200
63413: PPUSH
63414: CALL_OW 427
// end ;
63418: END
// on SailEvent ( event ) do begin if event < 100 then
63419: LD_VAR 0 1
63423: PUSH
63424: LD_INT 100
63426: LESS
63427: IFFALSE 63438
// CustomEvent ( event ) ;
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL 19113 0 1
// if event = 100 then
63438: LD_VAR 0 1
63442: PUSH
63443: LD_INT 100
63445: EQUAL
63446: IFFALSE 63452
// MC_ClassManager ( ) ;
63448: CALL 63844 0 0
// if event = 101 then
63452: LD_VAR 0 1
63456: PUSH
63457: LD_INT 101
63459: EQUAL
63460: IFFALSE 63466
// MC_RepairBuildings ( ) ;
63462: CALL 68662 0 0
// if event = 102 then
63466: LD_VAR 0 1
63470: PUSH
63471: LD_INT 102
63473: EQUAL
63474: IFFALSE 63480
// MC_Heal ( ) ;
63476: CALL 69569 0 0
// if event = 103 then
63480: LD_VAR 0 1
63484: PUSH
63485: LD_INT 103
63487: EQUAL
63488: IFFALSE 63494
// MC_Build ( ) ;
63490: CALL 69991 0 0
// if event = 104 then
63494: LD_VAR 0 1
63498: PUSH
63499: LD_INT 104
63501: EQUAL
63502: IFFALSE 63508
// MC_TurretWeapon ( ) ;
63504: CALL 71632 0 0
// if event = 105 then
63508: LD_VAR 0 1
63512: PUSH
63513: LD_INT 105
63515: EQUAL
63516: IFFALSE 63522
// MC_BuildUpgrade ( ) ;
63518: CALL 71183 0 0
// if event = 106 then
63522: LD_VAR 0 1
63526: PUSH
63527: LD_INT 106
63529: EQUAL
63530: IFFALSE 63536
// MC_PlantMines ( ) ;
63532: CALL 72062 0 0
// if event = 107 then
63536: LD_VAR 0 1
63540: PUSH
63541: LD_INT 107
63543: EQUAL
63544: IFFALSE 63550
// MC_CollectCrates ( ) ;
63546: CALL 72853 0 0
// if event = 108 then
63550: LD_VAR 0 1
63554: PUSH
63555: LD_INT 108
63557: EQUAL
63558: IFFALSE 63564
// MC_LinkRemoteControl ( ) ;
63560: CALL 74703 0 0
// if event = 109 then
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 109
63571: EQUAL
63572: IFFALSE 63578
// MC_ProduceVehicle ( ) ;
63574: CALL 74884 0 0
// if event = 110 then
63578: LD_VAR 0 1
63582: PUSH
63583: LD_INT 110
63585: EQUAL
63586: IFFALSE 63592
// MC_SendAttack ( ) ;
63588: CALL 75350 0 0
// if event = 111 then
63592: LD_VAR 0 1
63596: PUSH
63597: LD_INT 111
63599: EQUAL
63600: IFFALSE 63606
// MC_Defend ( ) ;
63602: CALL 75458 0 0
// if event = 112 then
63606: LD_VAR 0 1
63610: PUSH
63611: LD_INT 112
63613: EQUAL
63614: IFFALSE 63620
// MC_Research ( ) ;
63616: CALL 76338 0 0
// if event = 113 then
63620: LD_VAR 0 1
63624: PUSH
63625: LD_INT 113
63627: EQUAL
63628: IFFALSE 63634
// MC_MinesTrigger ( ) ;
63630: CALL 77452 0 0
// if event = 120 then
63634: LD_VAR 0 1
63638: PUSH
63639: LD_INT 120
63641: EQUAL
63642: IFFALSE 63648
// MC_RepairVehicle ( ) ;
63644: CALL 77551 0 0
// if event = 121 then
63648: LD_VAR 0 1
63652: PUSH
63653: LD_INT 121
63655: EQUAL
63656: IFFALSE 63662
// MC_TameApe ( ) ;
63658: CALL 78292 0 0
// if event = 122 then
63662: LD_VAR 0 1
63666: PUSH
63667: LD_INT 122
63669: EQUAL
63670: IFFALSE 63676
// MC_ChangeApeClass ( ) ;
63672: CALL 79121 0 0
// if event = 123 then
63676: LD_VAR 0 1
63680: PUSH
63681: LD_INT 123
63683: EQUAL
63684: IFFALSE 63690
// MC_Bazooka ( ) ;
63686: CALL 79771 0 0
// if event = 124 then
63690: LD_VAR 0 1
63694: PUSH
63695: LD_INT 124
63697: EQUAL
63698: IFFALSE 63704
// MC_TeleportExit ( ) ;
63700: CALL 79969 0 0
// if event = 125 then
63704: LD_VAR 0 1
63708: PUSH
63709: LD_INT 125
63711: EQUAL
63712: IFFALSE 63718
// MC_Deposits ( ) ;
63714: CALL 80616 0 0
// if event = 126 then
63718: LD_VAR 0 1
63722: PUSH
63723: LD_INT 126
63725: EQUAL
63726: IFFALSE 63732
// MC_RemoteDriver ( ) ;
63728: CALL 81241 0 0
// if event = 200 then
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 200
63739: EQUAL
63740: IFFALSE 63746
// MC_Idle ( ) ;
63742: CALL 83190 0 0
// end ;
63746: PPOPN 1
63748: END
// export function MC_Reset ( base , tag ) ; var i ; begin
63749: LD_INT 0
63751: PPUSH
63752: PPUSH
// if not mc_bases [ base ] or not tag then
63753: LD_EXP 50
63757: PUSH
63758: LD_VAR 0 1
63762: ARRAY
63763: NOT
63764: PUSH
63765: LD_VAR 0 2
63769: NOT
63770: OR
63771: IFFALSE 63775
// exit ;
63773: GO 63839
// for i in mc_bases [ base ] union mc_ape [ base ] do
63775: LD_ADDR_VAR 0 4
63779: PUSH
63780: LD_EXP 50
63784: PUSH
63785: LD_VAR 0 1
63789: ARRAY
63790: PUSH
63791: LD_EXP 79
63795: PUSH
63796: LD_VAR 0 1
63800: ARRAY
63801: UNION
63802: PUSH
63803: FOR_IN
63804: IFFALSE 63837
// if GetTag ( i ) = tag then
63806: LD_VAR 0 4
63810: PPUSH
63811: CALL_OW 110
63815: PUSH
63816: LD_VAR 0 2
63820: EQUAL
63821: IFFALSE 63835
// SetTag ( i , 0 ) ;
63823: LD_VAR 0 4
63827: PPUSH
63828: LD_INT 0
63830: PPUSH
63831: CALL_OW 109
63835: GO 63803
63837: POP
63838: POP
// end ;
63839: LD_VAR 0 3
63843: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
63844: LD_INT 0
63846: PPUSH
63847: PPUSH
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
// if not mc_bases then
63854: LD_EXP 50
63858: NOT
63859: IFFALSE 63863
// exit ;
63861: GO 64321
// for i = 1 to mc_bases do
63863: LD_ADDR_VAR 0 2
63867: PUSH
63868: DOUBLE
63869: LD_INT 1
63871: DEC
63872: ST_TO_ADDR
63873: LD_EXP 50
63877: PUSH
63878: FOR_TO
63879: IFFALSE 64319
// begin tmp := MC_ClassCheckReq ( i ) ;
63881: LD_ADDR_VAR 0 4
63885: PUSH
63886: LD_VAR 0 2
63890: PPUSH
63891: CALL 64326 0 1
63895: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
63896: LD_ADDR_EXP 91
63900: PUSH
63901: LD_EXP 91
63905: PPUSH
63906: LD_VAR 0 2
63910: PPUSH
63911: LD_VAR 0 4
63915: PPUSH
63916: CALL_OW 1
63920: ST_TO_ADDR
// if not tmp then
63921: LD_VAR 0 4
63925: NOT
63926: IFFALSE 63930
// continue ;
63928: GO 63878
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
63930: LD_ADDR_VAR 0 6
63934: PUSH
63935: LD_EXP 50
63939: PUSH
63940: LD_VAR 0 2
63944: ARRAY
63945: PPUSH
63946: LD_INT 2
63948: PUSH
63949: LD_INT 30
63951: PUSH
63952: LD_INT 4
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 30
63961: PUSH
63962: LD_INT 5
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: LIST
63973: PPUSH
63974: CALL_OW 72
63978: PUSH
63979: LD_EXP 50
63983: PUSH
63984: LD_VAR 0 2
63988: ARRAY
63989: PPUSH
63990: LD_INT 2
63992: PUSH
63993: LD_INT 30
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 30
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: PPUSH
64018: CALL_OW 72
64022: PUSH
64023: LD_EXP 50
64027: PUSH
64028: LD_VAR 0 2
64032: ARRAY
64033: PPUSH
64034: LD_INT 30
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PPUSH
64044: CALL_OW 72
64048: PUSH
64049: LD_EXP 50
64053: PUSH
64054: LD_VAR 0 2
64058: ARRAY
64059: PPUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 30
64065: PUSH
64066: LD_INT 6
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 30
64075: PUSH
64076: LD_INT 7
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 30
64085: PUSH
64086: LD_INT 8
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: PPUSH
64099: CALL_OW 72
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// for j = 1 to 4 do
64110: LD_ADDR_VAR 0 3
64114: PUSH
64115: DOUBLE
64116: LD_INT 1
64118: DEC
64119: ST_TO_ADDR
64120: LD_INT 4
64122: PUSH
64123: FOR_TO
64124: IFFALSE 64315
// begin if not tmp [ j ] then
64126: LD_VAR 0 4
64130: PUSH
64131: LD_VAR 0 3
64135: ARRAY
64136: NOT
64137: IFFALSE 64141
// continue ;
64139: GO 64123
// for p in tmp [ j ] do
64141: LD_ADDR_VAR 0 5
64145: PUSH
64146: LD_VAR 0 4
64150: PUSH
64151: LD_VAR 0 3
64155: ARRAY
64156: PUSH
64157: FOR_IN
64158: IFFALSE 64311
// begin if not b [ j ] then
64160: LD_VAR 0 6
64164: PUSH
64165: LD_VAR 0 3
64169: ARRAY
64170: NOT
64171: IFFALSE 64175
// break ;
64173: GO 64311
// e := 0 ;
64175: LD_ADDR_VAR 0 7
64179: PUSH
64180: LD_INT 0
64182: ST_TO_ADDR
// for k in b [ j ] do
64183: LD_ADDR_VAR 0 8
64187: PUSH
64188: LD_VAR 0 6
64192: PUSH
64193: LD_VAR 0 3
64197: ARRAY
64198: PUSH
64199: FOR_IN
64200: IFFALSE 64227
// if IsNotFull ( k ) then
64202: LD_VAR 0 8
64206: PPUSH
64207: CALL 22088 0 1
64211: IFFALSE 64225
// begin e := k ;
64213: LD_ADDR_VAR 0 7
64217: PUSH
64218: LD_VAR 0 8
64222: ST_TO_ADDR
// break ;
64223: GO 64227
// end ;
64225: GO 64199
64227: POP
64228: POP
// if e and not UnitGoingToBuilding ( p , e ) then
64229: LD_VAR 0 7
64233: PUSH
64234: LD_VAR 0 5
64238: PPUSH
64239: LD_VAR 0 7
64243: PPUSH
64244: CALL 55252 0 2
64248: NOT
64249: AND
64250: IFFALSE 64309
// begin if IsInUnit ( p ) then
64252: LD_VAR 0 5
64256: PPUSH
64257: CALL_OW 310
64261: IFFALSE 64272
// ComExitBuilding ( p ) ;
64263: LD_VAR 0 5
64267: PPUSH
64268: CALL_OW 122
// ComEnterUnit ( p , e ) ;
64272: LD_VAR 0 5
64276: PPUSH
64277: LD_VAR 0 7
64281: PPUSH
64282: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
64286: LD_VAR 0 5
64290: PPUSH
64291: LD_VAR 0 3
64295: PPUSH
64296: CALL_OW 183
// AddComExitBuilding ( p ) ;
64300: LD_VAR 0 5
64304: PPUSH
64305: CALL_OW 182
// end ; end ;
64309: GO 64157
64311: POP
64312: POP
// end ;
64313: GO 64123
64315: POP
64316: POP
// end ;
64317: GO 63878
64319: POP
64320: POP
// end ;
64321: LD_VAR 0 1
64325: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
64326: LD_INT 0
64328: PPUSH
64329: PPUSH
64330: PPUSH
64331: PPUSH
64332: PPUSH
64333: PPUSH
64334: PPUSH
64335: PPUSH
64336: PPUSH
64337: PPUSH
64338: PPUSH
64339: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
64340: LD_VAR 0 1
64344: NOT
64345: PUSH
64346: LD_EXP 50
64350: PUSH
64351: LD_VAR 0 1
64355: ARRAY
64356: NOT
64357: OR
64358: PUSH
64359: LD_EXP 50
64363: PUSH
64364: LD_VAR 0 1
64368: ARRAY
64369: PPUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 30
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 30
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: PPUSH
64398: CALL_OW 72
64402: NOT
64403: OR
64404: IFFALSE 64408
// exit ;
64406: GO 67911
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64408: LD_ADDR_VAR 0 4
64412: PUSH
64413: LD_EXP 50
64417: PUSH
64418: LD_VAR 0 1
64422: ARRAY
64423: PPUSH
64424: LD_INT 2
64426: PUSH
64427: LD_INT 25
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 25
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 25
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 25
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 25
64469: PUSH
64470: LD_INT 5
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 25
64479: PUSH
64480: LD_INT 8
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 25
64489: PUSH
64490: LD_INT 9
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: PPUSH
64507: CALL_OW 72
64511: ST_TO_ADDR
// if not tmp then
64512: LD_VAR 0 4
64516: NOT
64517: IFFALSE 64521
// exit ;
64519: GO 67911
// for i in tmp do
64521: LD_ADDR_VAR 0 3
64525: PUSH
64526: LD_VAR 0 4
64530: PUSH
64531: FOR_IN
64532: IFFALSE 64563
// if GetTag ( i ) then
64534: LD_VAR 0 3
64538: PPUSH
64539: CALL_OW 110
64543: IFFALSE 64561
// tmp := tmp diff i ;
64545: LD_ADDR_VAR 0 4
64549: PUSH
64550: LD_VAR 0 4
64554: PUSH
64555: LD_VAR 0 3
64559: DIFF
64560: ST_TO_ADDR
64561: GO 64531
64563: POP
64564: POP
// if not tmp then
64565: LD_VAR 0 4
64569: NOT
64570: IFFALSE 64574
// exit ;
64572: GO 67911
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64574: LD_ADDR_VAR 0 5
64578: PUSH
64579: LD_EXP 50
64583: PUSH
64584: LD_VAR 0 1
64588: ARRAY
64589: PPUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 25
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 25
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 25
64615: PUSH
64616: LD_INT 8
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 25
64625: PUSH
64626: LD_INT 9
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: PPUSH
64640: CALL_OW 72
64644: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
64645: LD_ADDR_VAR 0 6
64649: PUSH
64650: LD_EXP 50
64654: PUSH
64655: LD_VAR 0 1
64659: ARRAY
64660: PPUSH
64661: LD_INT 25
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PPUSH
64671: CALL_OW 72
64675: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
64676: LD_ADDR_VAR 0 7
64680: PUSH
64681: LD_EXP 50
64685: PUSH
64686: LD_VAR 0 1
64690: ARRAY
64691: PPUSH
64692: LD_INT 25
64694: PUSH
64695: LD_INT 3
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PPUSH
64702: CALL_OW 72
64706: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
64707: LD_ADDR_VAR 0 8
64711: PUSH
64712: LD_EXP 50
64716: PUSH
64717: LD_VAR 0 1
64721: ARRAY
64722: PPUSH
64723: LD_INT 25
64725: PUSH
64726: LD_INT 4
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 24
64735: PUSH
64736: LD_INT 251
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PPUSH
64747: CALL_OW 72
64751: ST_TO_ADDR
// if mc_is_defending [ base ] then
64752: LD_EXP 93
64756: PUSH
64757: LD_VAR 0 1
64761: ARRAY
64762: IFFALSE 65223
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
64764: LD_ADDR_EXP 92
64768: PUSH
64769: LD_EXP 92
64773: PPUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: LD_INT 4
64781: PPUSH
64782: CALL_OW 1
64786: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64787: LD_ADDR_VAR 0 12
64791: PUSH
64792: LD_EXP 50
64796: PUSH
64797: LD_VAR 0 1
64801: ARRAY
64802: PPUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 30
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 30
64818: PUSH
64819: LD_INT 5
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: PPUSH
64831: CALL_OW 72
64835: ST_TO_ADDR
// if not b then
64836: LD_VAR 0 12
64840: NOT
64841: IFFALSE 64845
// exit ;
64843: GO 67911
// p := [ ] ;
64845: LD_ADDR_VAR 0 11
64849: PUSH
64850: EMPTY
64851: ST_TO_ADDR
// if sci >= 2 then
64852: LD_VAR 0 8
64856: PUSH
64857: LD_INT 2
64859: GREATEREQUAL
64860: IFFALSE 64891
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
64862: LD_ADDR_VAR 0 8
64866: PUSH
64867: LD_VAR 0 8
64871: PUSH
64872: LD_INT 1
64874: ARRAY
64875: PUSH
64876: LD_VAR 0 8
64880: PUSH
64881: LD_INT 2
64883: ARRAY
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: ST_TO_ADDR
64889: GO 64952
// if sci = 1 then
64891: LD_VAR 0 8
64895: PUSH
64896: LD_INT 1
64898: EQUAL
64899: IFFALSE 64920
// sci := [ sci [ 1 ] ] else
64901: LD_ADDR_VAR 0 8
64905: PUSH
64906: LD_VAR 0 8
64910: PUSH
64911: LD_INT 1
64913: ARRAY
64914: PUSH
64915: EMPTY
64916: LIST
64917: ST_TO_ADDR
64918: GO 64952
// if sci = 0 then
64920: LD_VAR 0 8
64924: PUSH
64925: LD_INT 0
64927: EQUAL
64928: IFFALSE 64952
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
64930: LD_ADDR_VAR 0 11
64934: PUSH
64935: LD_VAR 0 4
64939: PPUSH
64940: LD_INT 4
64942: PPUSH
64943: CALL 55115 0 2
64947: PUSH
64948: LD_INT 1
64950: ARRAY
64951: ST_TO_ADDR
// if eng > 4 then
64952: LD_VAR 0 6
64956: PUSH
64957: LD_INT 4
64959: GREATER
64960: IFFALSE 65006
// for i = eng downto 4 do
64962: LD_ADDR_VAR 0 3
64966: PUSH
64967: DOUBLE
64968: LD_VAR 0 6
64972: INC
64973: ST_TO_ADDR
64974: LD_INT 4
64976: PUSH
64977: FOR_DOWNTO
64978: IFFALSE 65004
// eng := eng diff eng [ i ] ;
64980: LD_ADDR_VAR 0 6
64984: PUSH
64985: LD_VAR 0 6
64989: PUSH
64990: LD_VAR 0 6
64994: PUSH
64995: LD_VAR 0 3
64999: ARRAY
65000: DIFF
65001: ST_TO_ADDR
65002: GO 64977
65004: POP
65005: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
65006: LD_ADDR_VAR 0 4
65010: PUSH
65011: LD_VAR 0 4
65015: PUSH
65016: LD_VAR 0 5
65020: PUSH
65021: LD_VAR 0 6
65025: UNION
65026: PUSH
65027: LD_VAR 0 7
65031: UNION
65032: PUSH
65033: LD_VAR 0 8
65037: UNION
65038: DIFF
65039: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
65040: LD_ADDR_VAR 0 13
65044: PUSH
65045: LD_EXP 50
65049: PUSH
65050: LD_VAR 0 1
65054: ARRAY
65055: PPUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 30
65061: PUSH
65062: LD_INT 32
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 30
65071: PUSH
65072: LD_INT 31
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: PPUSH
65084: CALL_OW 72
65088: PUSH
65089: LD_EXP 50
65093: PUSH
65094: LD_VAR 0 1
65098: ARRAY
65099: PPUSH
65100: LD_INT 2
65102: PUSH
65103: LD_INT 30
65105: PUSH
65106: LD_INT 4
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 30
65115: PUSH
65116: LD_INT 5
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: PPUSH
65128: CALL_OW 72
65132: PUSH
65133: LD_INT 6
65135: MUL
65136: PLUS
65137: ST_TO_ADDR
// if bcount < tmp then
65138: LD_VAR 0 13
65142: PUSH
65143: LD_VAR 0 4
65147: LESS
65148: IFFALSE 65194
// for i = tmp downto bcount do
65150: LD_ADDR_VAR 0 3
65154: PUSH
65155: DOUBLE
65156: LD_VAR 0 4
65160: INC
65161: ST_TO_ADDR
65162: LD_VAR 0 13
65166: PUSH
65167: FOR_DOWNTO
65168: IFFALSE 65192
// tmp := Delete ( tmp , tmp ) ;
65170: LD_ADDR_VAR 0 4
65174: PUSH
65175: LD_VAR 0 4
65179: PPUSH
65180: LD_VAR 0 4
65184: PPUSH
65185: CALL_OW 3
65189: ST_TO_ADDR
65190: GO 65167
65192: POP
65193: POP
// result := [ tmp , 0 , 0 , p ] ;
65194: LD_ADDR_VAR 0 2
65198: PUSH
65199: LD_VAR 0 4
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_VAR 0 11
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// exit ;
65221: GO 67911
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65223: LD_EXP 50
65227: PUSH
65228: LD_VAR 0 1
65232: ARRAY
65233: PPUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 30
65239: PUSH
65240: LD_INT 6
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 30
65249: PUSH
65250: LD_INT 7
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 30
65259: PUSH
65260: LD_INT 8
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: PPUSH
65273: CALL_OW 72
65277: NOT
65278: PUSH
65279: LD_EXP 50
65283: PUSH
65284: LD_VAR 0 1
65288: ARRAY
65289: PPUSH
65290: LD_INT 30
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PPUSH
65300: CALL_OW 72
65304: NOT
65305: AND
65306: IFFALSE 65378
// begin if eng = tmp then
65308: LD_VAR 0 6
65312: PUSH
65313: LD_VAR 0 4
65317: EQUAL
65318: IFFALSE 65322
// exit ;
65320: GO 67911
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
65322: LD_ADDR_EXP 92
65326: PUSH
65327: LD_EXP 92
65331: PPUSH
65332: LD_VAR 0 1
65336: PPUSH
65337: LD_INT 1
65339: PPUSH
65340: CALL_OW 1
65344: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
65345: LD_ADDR_VAR 0 2
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_VAR 0 4
65357: PUSH
65358: LD_VAR 0 6
65362: DIFF
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: ST_TO_ADDR
// exit ;
65376: GO 67911
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65378: LD_EXP 77
65382: PUSH
65383: LD_EXP 76
65387: PUSH
65388: LD_VAR 0 1
65392: ARRAY
65393: ARRAY
65394: PUSH
65395: LD_EXP 50
65399: PUSH
65400: LD_VAR 0 1
65404: ARRAY
65405: PPUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 30
65411: PUSH
65412: LD_INT 6
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 30
65421: PUSH
65422: LD_INT 7
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 30
65431: PUSH
65432: LD_INT 8
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: PPUSH
65445: CALL_OW 72
65449: AND
65450: PUSH
65451: LD_EXP 50
65455: PUSH
65456: LD_VAR 0 1
65460: ARRAY
65461: PPUSH
65462: LD_INT 30
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PPUSH
65472: CALL_OW 72
65476: NOT
65477: AND
65478: IFFALSE 65692
// begin if sci >= 6 then
65480: LD_VAR 0 8
65484: PUSH
65485: LD_INT 6
65487: GREATEREQUAL
65488: IFFALSE 65492
// exit ;
65490: GO 67911
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
65492: LD_ADDR_EXP 92
65496: PUSH
65497: LD_EXP 92
65501: PPUSH
65502: LD_VAR 0 1
65506: PPUSH
65507: LD_INT 2
65509: PPUSH
65510: CALL_OW 1
65514: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
65515: LD_ADDR_VAR 0 9
65519: PUSH
65520: LD_VAR 0 4
65524: PUSH
65525: LD_VAR 0 8
65529: DIFF
65530: PPUSH
65531: LD_INT 4
65533: PPUSH
65534: CALL 55115 0 2
65538: ST_TO_ADDR
// p := [ ] ;
65539: LD_ADDR_VAR 0 11
65543: PUSH
65544: EMPTY
65545: ST_TO_ADDR
// if sci < 6 and sort > 6 then
65546: LD_VAR 0 8
65550: PUSH
65551: LD_INT 6
65553: LESS
65554: PUSH
65555: LD_VAR 0 9
65559: PUSH
65560: LD_INT 6
65562: GREATER
65563: AND
65564: IFFALSE 65645
// begin for i = 1 to 6 - sci do
65566: LD_ADDR_VAR 0 3
65570: PUSH
65571: DOUBLE
65572: LD_INT 1
65574: DEC
65575: ST_TO_ADDR
65576: LD_INT 6
65578: PUSH
65579: LD_VAR 0 8
65583: MINUS
65584: PUSH
65585: FOR_TO
65586: IFFALSE 65641
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
65588: LD_ADDR_VAR 0 11
65592: PUSH
65593: LD_VAR 0 11
65597: PPUSH
65598: LD_VAR 0 11
65602: PUSH
65603: LD_INT 1
65605: PLUS
65606: PPUSH
65607: LD_VAR 0 9
65611: PUSH
65612: LD_INT 1
65614: ARRAY
65615: PPUSH
65616: CALL_OW 2
65620: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
65621: LD_ADDR_VAR 0 9
65625: PUSH
65626: LD_VAR 0 9
65630: PPUSH
65631: LD_INT 1
65633: PPUSH
65634: CALL_OW 3
65638: ST_TO_ADDR
// end ;
65639: GO 65585
65641: POP
65642: POP
// end else
65643: GO 65665
// if sort then
65645: LD_VAR 0 9
65649: IFFALSE 65665
// p := sort [ 1 ] ;
65651: LD_ADDR_VAR 0 11
65655: PUSH
65656: LD_VAR 0 9
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
65665: LD_ADDR_VAR 0 2
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_VAR 0 11
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// exit ;
65690: GO 67911
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65692: LD_EXP 77
65696: PUSH
65697: LD_EXP 76
65701: PUSH
65702: LD_VAR 0 1
65706: ARRAY
65707: ARRAY
65708: PUSH
65709: LD_EXP 50
65713: PUSH
65714: LD_VAR 0 1
65718: ARRAY
65719: PPUSH
65720: LD_INT 2
65722: PUSH
65723: LD_INT 30
65725: PUSH
65726: LD_INT 6
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 30
65735: PUSH
65736: LD_INT 7
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 30
65745: PUSH
65746: LD_INT 8
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 72
65763: AND
65764: PUSH
65765: LD_EXP 50
65769: PUSH
65770: LD_VAR 0 1
65774: ARRAY
65775: PPUSH
65776: LD_INT 30
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PPUSH
65786: CALL_OW 72
65790: AND
65791: IFFALSE 66525
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
65793: LD_ADDR_EXP 92
65797: PUSH
65798: LD_EXP 92
65802: PPUSH
65803: LD_VAR 0 1
65807: PPUSH
65808: LD_INT 3
65810: PPUSH
65811: CALL_OW 1
65815: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65816: LD_ADDR_VAR 0 2
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// if not eng then
65839: LD_VAR 0 6
65843: NOT
65844: IFFALSE 65907
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
65846: LD_ADDR_VAR 0 11
65850: PUSH
65851: LD_VAR 0 4
65855: PPUSH
65856: LD_INT 2
65858: PPUSH
65859: CALL 55115 0 2
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
65868: LD_ADDR_VAR 0 2
65872: PUSH
65873: LD_VAR 0 2
65877: PPUSH
65878: LD_INT 2
65880: PPUSH
65881: LD_VAR 0 11
65885: PPUSH
65886: CALL_OW 1
65890: ST_TO_ADDR
// tmp := tmp diff p ;
65891: LD_ADDR_VAR 0 4
65895: PUSH
65896: LD_VAR 0 4
65900: PUSH
65901: LD_VAR 0 11
65905: DIFF
65906: ST_TO_ADDR
// end ; if tmp and sci < 6 then
65907: LD_VAR 0 4
65911: PUSH
65912: LD_VAR 0 8
65916: PUSH
65917: LD_INT 6
65919: LESS
65920: AND
65921: IFFALSE 66109
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
65923: LD_ADDR_VAR 0 9
65927: PUSH
65928: LD_VAR 0 4
65932: PUSH
65933: LD_VAR 0 8
65937: PUSH
65938: LD_VAR 0 7
65942: UNION
65943: DIFF
65944: PPUSH
65945: LD_INT 4
65947: PPUSH
65948: CALL 55115 0 2
65952: ST_TO_ADDR
// p := [ ] ;
65953: LD_ADDR_VAR 0 11
65957: PUSH
65958: EMPTY
65959: ST_TO_ADDR
// if sort then
65960: LD_VAR 0 9
65964: IFFALSE 66080
// for i = 1 to 6 - sci do
65966: LD_ADDR_VAR 0 3
65970: PUSH
65971: DOUBLE
65972: LD_INT 1
65974: DEC
65975: ST_TO_ADDR
65976: LD_INT 6
65978: PUSH
65979: LD_VAR 0 8
65983: MINUS
65984: PUSH
65985: FOR_TO
65986: IFFALSE 66078
// begin if i = sort then
65988: LD_VAR 0 3
65992: PUSH
65993: LD_VAR 0 9
65997: EQUAL
65998: IFFALSE 66002
// break ;
66000: GO 66078
// if GetClass ( i ) = 4 then
66002: LD_VAR 0 3
66006: PPUSH
66007: CALL_OW 257
66011: PUSH
66012: LD_INT 4
66014: EQUAL
66015: IFFALSE 66019
// continue ;
66017: GO 65985
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66019: LD_ADDR_VAR 0 11
66023: PUSH
66024: LD_VAR 0 11
66028: PPUSH
66029: LD_VAR 0 11
66033: PUSH
66034: LD_INT 1
66036: PLUS
66037: PPUSH
66038: LD_VAR 0 9
66042: PUSH
66043: LD_VAR 0 3
66047: ARRAY
66048: PPUSH
66049: CALL_OW 2
66053: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66054: LD_ADDR_VAR 0 4
66058: PUSH
66059: LD_VAR 0 4
66063: PUSH
66064: LD_VAR 0 9
66068: PUSH
66069: LD_VAR 0 3
66073: ARRAY
66074: DIFF
66075: ST_TO_ADDR
// end ;
66076: GO 65985
66078: POP
66079: POP
// if p then
66080: LD_VAR 0 11
66084: IFFALSE 66109
// result := Replace ( result , 4 , p ) ;
66086: LD_ADDR_VAR 0 2
66090: PUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: LD_INT 4
66098: PPUSH
66099: LD_VAR 0 11
66103: PPUSH
66104: CALL_OW 1
66108: ST_TO_ADDR
// end ; if tmp and mech < 6 then
66109: LD_VAR 0 4
66113: PUSH
66114: LD_VAR 0 7
66118: PUSH
66119: LD_INT 6
66121: LESS
66122: AND
66123: IFFALSE 66311
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
66125: LD_ADDR_VAR 0 9
66129: PUSH
66130: LD_VAR 0 4
66134: PUSH
66135: LD_VAR 0 8
66139: PUSH
66140: LD_VAR 0 7
66144: UNION
66145: DIFF
66146: PPUSH
66147: LD_INT 3
66149: PPUSH
66150: CALL 55115 0 2
66154: ST_TO_ADDR
// p := [ ] ;
66155: LD_ADDR_VAR 0 11
66159: PUSH
66160: EMPTY
66161: ST_TO_ADDR
// if sort then
66162: LD_VAR 0 9
66166: IFFALSE 66282
// for i = 1 to 6 - mech do
66168: LD_ADDR_VAR 0 3
66172: PUSH
66173: DOUBLE
66174: LD_INT 1
66176: DEC
66177: ST_TO_ADDR
66178: LD_INT 6
66180: PUSH
66181: LD_VAR 0 7
66185: MINUS
66186: PUSH
66187: FOR_TO
66188: IFFALSE 66280
// begin if i = sort then
66190: LD_VAR 0 3
66194: PUSH
66195: LD_VAR 0 9
66199: EQUAL
66200: IFFALSE 66204
// break ;
66202: GO 66280
// if GetClass ( i ) = 3 then
66204: LD_VAR 0 3
66208: PPUSH
66209: CALL_OW 257
66213: PUSH
66214: LD_INT 3
66216: EQUAL
66217: IFFALSE 66221
// continue ;
66219: GO 66187
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66221: LD_ADDR_VAR 0 11
66225: PUSH
66226: LD_VAR 0 11
66230: PPUSH
66231: LD_VAR 0 11
66235: PUSH
66236: LD_INT 1
66238: PLUS
66239: PPUSH
66240: LD_VAR 0 9
66244: PUSH
66245: LD_VAR 0 3
66249: ARRAY
66250: PPUSH
66251: CALL_OW 2
66255: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66256: LD_ADDR_VAR 0 4
66260: PUSH
66261: LD_VAR 0 4
66265: PUSH
66266: LD_VAR 0 9
66270: PUSH
66271: LD_VAR 0 3
66275: ARRAY
66276: DIFF
66277: ST_TO_ADDR
// end ;
66278: GO 66187
66280: POP
66281: POP
// if p then
66282: LD_VAR 0 11
66286: IFFALSE 66311
// result := Replace ( result , 3 , p ) ;
66288: LD_ADDR_VAR 0 2
66292: PUSH
66293: LD_VAR 0 2
66297: PPUSH
66298: LD_INT 3
66300: PPUSH
66301: LD_VAR 0 11
66305: PPUSH
66306: CALL_OW 1
66310: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
66311: LD_VAR 0 4
66315: PUSH
66316: LD_INT 6
66318: GREATER
66319: PUSH
66320: LD_VAR 0 6
66324: PUSH
66325: LD_INT 6
66327: LESS
66328: AND
66329: IFFALSE 66523
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
66331: LD_ADDR_VAR 0 9
66335: PUSH
66336: LD_VAR 0 4
66340: PUSH
66341: LD_VAR 0 8
66345: PUSH
66346: LD_VAR 0 7
66350: UNION
66351: PUSH
66352: LD_VAR 0 6
66356: UNION
66357: DIFF
66358: PPUSH
66359: LD_INT 2
66361: PPUSH
66362: CALL 55115 0 2
66366: ST_TO_ADDR
// p := [ ] ;
66367: LD_ADDR_VAR 0 11
66371: PUSH
66372: EMPTY
66373: ST_TO_ADDR
// if sort then
66374: LD_VAR 0 9
66378: IFFALSE 66494
// for i = 1 to 6 - eng do
66380: LD_ADDR_VAR 0 3
66384: PUSH
66385: DOUBLE
66386: LD_INT 1
66388: DEC
66389: ST_TO_ADDR
66390: LD_INT 6
66392: PUSH
66393: LD_VAR 0 6
66397: MINUS
66398: PUSH
66399: FOR_TO
66400: IFFALSE 66492
// begin if i = sort then
66402: LD_VAR 0 3
66406: PUSH
66407: LD_VAR 0 9
66411: EQUAL
66412: IFFALSE 66416
// break ;
66414: GO 66492
// if GetClass ( i ) = 2 then
66416: LD_VAR 0 3
66420: PPUSH
66421: CALL_OW 257
66425: PUSH
66426: LD_INT 2
66428: EQUAL
66429: IFFALSE 66433
// continue ;
66431: GO 66399
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66433: LD_ADDR_VAR 0 11
66437: PUSH
66438: LD_VAR 0 11
66442: PPUSH
66443: LD_VAR 0 11
66447: PUSH
66448: LD_INT 1
66450: PLUS
66451: PPUSH
66452: LD_VAR 0 9
66456: PUSH
66457: LD_VAR 0 3
66461: ARRAY
66462: PPUSH
66463: CALL_OW 2
66467: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66468: LD_ADDR_VAR 0 4
66472: PUSH
66473: LD_VAR 0 4
66477: PUSH
66478: LD_VAR 0 9
66482: PUSH
66483: LD_VAR 0 3
66487: ARRAY
66488: DIFF
66489: ST_TO_ADDR
// end ;
66490: GO 66399
66492: POP
66493: POP
// if p then
66494: LD_VAR 0 11
66498: IFFALSE 66523
// result := Replace ( result , 2 , p ) ;
66500: LD_ADDR_VAR 0 2
66504: PUSH
66505: LD_VAR 0 2
66509: PPUSH
66510: LD_INT 2
66512: PPUSH
66513: LD_VAR 0 11
66517: PPUSH
66518: CALL_OW 1
66522: ST_TO_ADDR
// end ; exit ;
66523: GO 67911
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
66525: LD_EXP 77
66529: PUSH
66530: LD_EXP 76
66534: PUSH
66535: LD_VAR 0 1
66539: ARRAY
66540: ARRAY
66541: NOT
66542: PUSH
66543: LD_EXP 50
66547: PUSH
66548: LD_VAR 0 1
66552: ARRAY
66553: PPUSH
66554: LD_INT 30
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PPUSH
66564: CALL_OW 72
66568: AND
66569: PUSH
66570: LD_EXP 55
66574: PUSH
66575: LD_VAR 0 1
66579: ARRAY
66580: AND
66581: IFFALSE 67189
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
66583: LD_ADDR_EXP 92
66587: PUSH
66588: LD_EXP 92
66592: PPUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: LD_INT 5
66600: PPUSH
66601: CALL_OW 1
66605: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
66606: LD_ADDR_VAR 0 2
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: ST_TO_ADDR
// if sci > 1 then
66629: LD_VAR 0 8
66633: PUSH
66634: LD_INT 1
66636: GREATER
66637: IFFALSE 66665
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
66639: LD_ADDR_VAR 0 4
66643: PUSH
66644: LD_VAR 0 4
66648: PUSH
66649: LD_VAR 0 8
66653: PUSH
66654: LD_VAR 0 8
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: DIFF
66663: DIFF
66664: ST_TO_ADDR
// if tmp and not sci then
66665: LD_VAR 0 4
66669: PUSH
66670: LD_VAR 0 8
66674: NOT
66675: AND
66676: IFFALSE 66745
// begin sort := SortBySkill ( tmp , 4 ) ;
66678: LD_ADDR_VAR 0 9
66682: PUSH
66683: LD_VAR 0 4
66687: PPUSH
66688: LD_INT 4
66690: PPUSH
66691: CALL 55115 0 2
66695: ST_TO_ADDR
// if sort then
66696: LD_VAR 0 9
66700: IFFALSE 66716
// p := sort [ 1 ] ;
66702: LD_ADDR_VAR 0 11
66706: PUSH
66707: LD_VAR 0 9
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: ST_TO_ADDR
// if p then
66716: LD_VAR 0 11
66720: IFFALSE 66745
// result := Replace ( result , 4 , p ) ;
66722: LD_ADDR_VAR 0 2
66726: PUSH
66727: LD_VAR 0 2
66731: PPUSH
66732: LD_INT 4
66734: PPUSH
66735: LD_VAR 0 11
66739: PPUSH
66740: CALL_OW 1
66744: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
66745: LD_ADDR_VAR 0 4
66749: PUSH
66750: LD_VAR 0 4
66754: PUSH
66755: LD_VAR 0 7
66759: DIFF
66760: ST_TO_ADDR
// if tmp and mech < 6 then
66761: LD_VAR 0 4
66765: PUSH
66766: LD_VAR 0 7
66770: PUSH
66771: LD_INT 6
66773: LESS
66774: AND
66775: IFFALSE 66963
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
66777: LD_ADDR_VAR 0 9
66781: PUSH
66782: LD_VAR 0 4
66786: PUSH
66787: LD_VAR 0 8
66791: PUSH
66792: LD_VAR 0 7
66796: UNION
66797: DIFF
66798: PPUSH
66799: LD_INT 3
66801: PPUSH
66802: CALL 55115 0 2
66806: ST_TO_ADDR
// p := [ ] ;
66807: LD_ADDR_VAR 0 11
66811: PUSH
66812: EMPTY
66813: ST_TO_ADDR
// if sort then
66814: LD_VAR 0 9
66818: IFFALSE 66934
// for i = 1 to 6 - mech do
66820: LD_ADDR_VAR 0 3
66824: PUSH
66825: DOUBLE
66826: LD_INT 1
66828: DEC
66829: ST_TO_ADDR
66830: LD_INT 6
66832: PUSH
66833: LD_VAR 0 7
66837: MINUS
66838: PUSH
66839: FOR_TO
66840: IFFALSE 66932
// begin if i = sort then
66842: LD_VAR 0 3
66846: PUSH
66847: LD_VAR 0 9
66851: EQUAL
66852: IFFALSE 66856
// break ;
66854: GO 66932
// if GetClass ( i ) = 3 then
66856: LD_VAR 0 3
66860: PPUSH
66861: CALL_OW 257
66865: PUSH
66866: LD_INT 3
66868: EQUAL
66869: IFFALSE 66873
// continue ;
66871: GO 66839
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66873: LD_ADDR_VAR 0 11
66877: PUSH
66878: LD_VAR 0 11
66882: PPUSH
66883: LD_VAR 0 11
66887: PUSH
66888: LD_INT 1
66890: PLUS
66891: PPUSH
66892: LD_VAR 0 9
66896: PUSH
66897: LD_VAR 0 3
66901: ARRAY
66902: PPUSH
66903: CALL_OW 2
66907: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66908: LD_ADDR_VAR 0 4
66912: PUSH
66913: LD_VAR 0 4
66917: PUSH
66918: LD_VAR 0 9
66922: PUSH
66923: LD_VAR 0 3
66927: ARRAY
66928: DIFF
66929: ST_TO_ADDR
// end ;
66930: GO 66839
66932: POP
66933: POP
// if p then
66934: LD_VAR 0 11
66938: IFFALSE 66963
// result := Replace ( result , 3 , p ) ;
66940: LD_ADDR_VAR 0 2
66944: PUSH
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_INT 3
66952: PPUSH
66953: LD_VAR 0 11
66957: PPUSH
66958: CALL_OW 1
66962: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66963: LD_ADDR_VAR 0 4
66967: PUSH
66968: LD_VAR 0 4
66972: PUSH
66973: LD_VAR 0 6
66977: DIFF
66978: ST_TO_ADDR
// if tmp and eng < 6 then
66979: LD_VAR 0 4
66983: PUSH
66984: LD_VAR 0 6
66988: PUSH
66989: LD_INT 6
66991: LESS
66992: AND
66993: IFFALSE 67187
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
66995: LD_ADDR_VAR 0 9
66999: PUSH
67000: LD_VAR 0 4
67004: PUSH
67005: LD_VAR 0 8
67009: PUSH
67010: LD_VAR 0 7
67014: UNION
67015: PUSH
67016: LD_VAR 0 6
67020: UNION
67021: DIFF
67022: PPUSH
67023: LD_INT 2
67025: PPUSH
67026: CALL 55115 0 2
67030: ST_TO_ADDR
// p := [ ] ;
67031: LD_ADDR_VAR 0 11
67035: PUSH
67036: EMPTY
67037: ST_TO_ADDR
// if sort then
67038: LD_VAR 0 9
67042: IFFALSE 67158
// for i = 1 to 6 - eng do
67044: LD_ADDR_VAR 0 3
67048: PUSH
67049: DOUBLE
67050: LD_INT 1
67052: DEC
67053: ST_TO_ADDR
67054: LD_INT 6
67056: PUSH
67057: LD_VAR 0 6
67061: MINUS
67062: PUSH
67063: FOR_TO
67064: IFFALSE 67156
// begin if i = sort then
67066: LD_VAR 0 3
67070: PUSH
67071: LD_VAR 0 9
67075: EQUAL
67076: IFFALSE 67080
// break ;
67078: GO 67156
// if GetClass ( i ) = 2 then
67080: LD_VAR 0 3
67084: PPUSH
67085: CALL_OW 257
67089: PUSH
67090: LD_INT 2
67092: EQUAL
67093: IFFALSE 67097
// continue ;
67095: GO 67063
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67097: LD_ADDR_VAR 0 11
67101: PUSH
67102: LD_VAR 0 11
67106: PPUSH
67107: LD_VAR 0 11
67111: PUSH
67112: LD_INT 1
67114: PLUS
67115: PPUSH
67116: LD_VAR 0 9
67120: PUSH
67121: LD_VAR 0 3
67125: ARRAY
67126: PPUSH
67127: CALL_OW 2
67131: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67132: LD_ADDR_VAR 0 4
67136: PUSH
67137: LD_VAR 0 4
67141: PUSH
67142: LD_VAR 0 9
67146: PUSH
67147: LD_VAR 0 3
67151: ARRAY
67152: DIFF
67153: ST_TO_ADDR
// end ;
67154: GO 67063
67156: POP
67157: POP
// if p then
67158: LD_VAR 0 11
67162: IFFALSE 67187
// result := Replace ( result , 2 , p ) ;
67164: LD_ADDR_VAR 0 2
67168: PUSH
67169: LD_VAR 0 2
67173: PPUSH
67174: LD_INT 2
67176: PPUSH
67177: LD_VAR 0 11
67181: PPUSH
67182: CALL_OW 1
67186: ST_TO_ADDR
// end ; exit ;
67187: GO 67911
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
67189: LD_EXP 77
67193: PUSH
67194: LD_EXP 76
67198: PUSH
67199: LD_VAR 0 1
67203: ARRAY
67204: ARRAY
67205: NOT
67206: PUSH
67207: LD_EXP 50
67211: PUSH
67212: LD_VAR 0 1
67216: ARRAY
67217: PPUSH
67218: LD_INT 30
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PPUSH
67228: CALL_OW 72
67232: AND
67233: PUSH
67234: LD_EXP 55
67238: PUSH
67239: LD_VAR 0 1
67243: ARRAY
67244: NOT
67245: AND
67246: IFFALSE 67911
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
67248: LD_ADDR_EXP 92
67252: PUSH
67253: LD_EXP 92
67257: PPUSH
67258: LD_VAR 0 1
67262: PPUSH
67263: LD_INT 6
67265: PPUSH
67266: CALL_OW 1
67270: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
67271: LD_ADDR_VAR 0 2
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// if sci >= 1 then
67294: LD_VAR 0 8
67298: PUSH
67299: LD_INT 1
67301: GREATEREQUAL
67302: IFFALSE 67324
// tmp := tmp diff sci [ 1 ] ;
67304: LD_ADDR_VAR 0 4
67308: PUSH
67309: LD_VAR 0 4
67313: PUSH
67314: LD_VAR 0 8
67318: PUSH
67319: LD_INT 1
67321: ARRAY
67322: DIFF
67323: ST_TO_ADDR
// if tmp and not sci then
67324: LD_VAR 0 4
67328: PUSH
67329: LD_VAR 0 8
67333: NOT
67334: AND
67335: IFFALSE 67404
// begin sort := SortBySkill ( tmp , 4 ) ;
67337: LD_ADDR_VAR 0 9
67341: PUSH
67342: LD_VAR 0 4
67346: PPUSH
67347: LD_INT 4
67349: PPUSH
67350: CALL 55115 0 2
67354: ST_TO_ADDR
// if sort then
67355: LD_VAR 0 9
67359: IFFALSE 67375
// p := sort [ 1 ] ;
67361: LD_ADDR_VAR 0 11
67365: PUSH
67366: LD_VAR 0 9
67370: PUSH
67371: LD_INT 1
67373: ARRAY
67374: ST_TO_ADDR
// if p then
67375: LD_VAR 0 11
67379: IFFALSE 67404
// result := Replace ( result , 4 , p ) ;
67381: LD_ADDR_VAR 0 2
67385: PUSH
67386: LD_VAR 0 2
67390: PPUSH
67391: LD_INT 4
67393: PPUSH
67394: LD_VAR 0 11
67398: PPUSH
67399: CALL_OW 1
67403: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
67404: LD_ADDR_VAR 0 4
67408: PUSH
67409: LD_VAR 0 4
67413: PUSH
67414: LD_VAR 0 7
67418: DIFF
67419: ST_TO_ADDR
// if tmp and mech < 6 then
67420: LD_VAR 0 4
67424: PUSH
67425: LD_VAR 0 7
67429: PUSH
67430: LD_INT 6
67432: LESS
67433: AND
67434: IFFALSE 67616
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
67436: LD_ADDR_VAR 0 9
67440: PUSH
67441: LD_VAR 0 4
67445: PUSH
67446: LD_VAR 0 7
67450: DIFF
67451: PPUSH
67452: LD_INT 3
67454: PPUSH
67455: CALL 55115 0 2
67459: ST_TO_ADDR
// p := [ ] ;
67460: LD_ADDR_VAR 0 11
67464: PUSH
67465: EMPTY
67466: ST_TO_ADDR
// if sort then
67467: LD_VAR 0 9
67471: IFFALSE 67587
// for i = 1 to 6 - mech do
67473: LD_ADDR_VAR 0 3
67477: PUSH
67478: DOUBLE
67479: LD_INT 1
67481: DEC
67482: ST_TO_ADDR
67483: LD_INT 6
67485: PUSH
67486: LD_VAR 0 7
67490: MINUS
67491: PUSH
67492: FOR_TO
67493: IFFALSE 67585
// begin if i = sort then
67495: LD_VAR 0 3
67499: PUSH
67500: LD_VAR 0 9
67504: EQUAL
67505: IFFALSE 67509
// break ;
67507: GO 67585
// if GetClass ( i ) = 3 then
67509: LD_VAR 0 3
67513: PPUSH
67514: CALL_OW 257
67518: PUSH
67519: LD_INT 3
67521: EQUAL
67522: IFFALSE 67526
// continue ;
67524: GO 67492
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67526: LD_ADDR_VAR 0 11
67530: PUSH
67531: LD_VAR 0 11
67535: PPUSH
67536: LD_VAR 0 11
67540: PUSH
67541: LD_INT 1
67543: PLUS
67544: PPUSH
67545: LD_VAR 0 9
67549: PUSH
67550: LD_VAR 0 3
67554: ARRAY
67555: PPUSH
67556: CALL_OW 2
67560: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_VAR 0 4
67570: PUSH
67571: LD_VAR 0 9
67575: PUSH
67576: LD_VAR 0 3
67580: ARRAY
67581: DIFF
67582: ST_TO_ADDR
// end ;
67583: GO 67492
67585: POP
67586: POP
// if p then
67587: LD_VAR 0 11
67591: IFFALSE 67616
// result := Replace ( result , 3 , p ) ;
67593: LD_ADDR_VAR 0 2
67597: PUSH
67598: LD_VAR 0 2
67602: PPUSH
67603: LD_INT 3
67605: PPUSH
67606: LD_VAR 0 11
67610: PPUSH
67611: CALL_OW 1
67615: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
67616: LD_ADDR_VAR 0 4
67620: PUSH
67621: LD_VAR 0 4
67625: PUSH
67626: LD_VAR 0 6
67630: DIFF
67631: ST_TO_ADDR
// if tmp and eng < 4 then
67632: LD_VAR 0 4
67636: PUSH
67637: LD_VAR 0 6
67641: PUSH
67642: LD_INT 4
67644: LESS
67645: AND
67646: IFFALSE 67836
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
67648: LD_ADDR_VAR 0 9
67652: PUSH
67653: LD_VAR 0 4
67657: PUSH
67658: LD_VAR 0 7
67662: PUSH
67663: LD_VAR 0 6
67667: UNION
67668: DIFF
67669: PPUSH
67670: LD_INT 2
67672: PPUSH
67673: CALL 55115 0 2
67677: ST_TO_ADDR
// p := [ ] ;
67678: LD_ADDR_VAR 0 11
67682: PUSH
67683: EMPTY
67684: ST_TO_ADDR
// if sort then
67685: LD_VAR 0 9
67689: IFFALSE 67805
// for i = 1 to 4 - eng do
67691: LD_ADDR_VAR 0 3
67695: PUSH
67696: DOUBLE
67697: LD_INT 1
67699: DEC
67700: ST_TO_ADDR
67701: LD_INT 4
67703: PUSH
67704: LD_VAR 0 6
67708: MINUS
67709: PUSH
67710: FOR_TO
67711: IFFALSE 67803
// begin if i = sort then
67713: LD_VAR 0 3
67717: PUSH
67718: LD_VAR 0 9
67722: EQUAL
67723: IFFALSE 67727
// break ;
67725: GO 67803
// if GetClass ( i ) = 2 then
67727: LD_VAR 0 3
67731: PPUSH
67732: CALL_OW 257
67736: PUSH
67737: LD_INT 2
67739: EQUAL
67740: IFFALSE 67744
// continue ;
67742: GO 67710
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67744: LD_ADDR_VAR 0 11
67748: PUSH
67749: LD_VAR 0 11
67753: PPUSH
67754: LD_VAR 0 11
67758: PUSH
67759: LD_INT 1
67761: PLUS
67762: PPUSH
67763: LD_VAR 0 9
67767: PUSH
67768: LD_VAR 0 3
67772: ARRAY
67773: PPUSH
67774: CALL_OW 2
67778: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67779: LD_ADDR_VAR 0 4
67783: PUSH
67784: LD_VAR 0 4
67788: PUSH
67789: LD_VAR 0 9
67793: PUSH
67794: LD_VAR 0 3
67798: ARRAY
67799: DIFF
67800: ST_TO_ADDR
// end ;
67801: GO 67710
67803: POP
67804: POP
// if p then
67805: LD_VAR 0 11
67809: IFFALSE 67834
// result := Replace ( result , 2 , p ) ;
67811: LD_ADDR_VAR 0 2
67815: PUSH
67816: LD_VAR 0 2
67820: PPUSH
67821: LD_INT 2
67823: PPUSH
67824: LD_VAR 0 11
67828: PPUSH
67829: CALL_OW 1
67833: ST_TO_ADDR
// end else
67834: GO 67880
// for i = eng downto 5 do
67836: LD_ADDR_VAR 0 3
67840: PUSH
67841: DOUBLE
67842: LD_VAR 0 6
67846: INC
67847: ST_TO_ADDR
67848: LD_INT 5
67850: PUSH
67851: FOR_DOWNTO
67852: IFFALSE 67878
// tmp := tmp union eng [ i ] ;
67854: LD_ADDR_VAR 0 4
67858: PUSH
67859: LD_VAR 0 4
67863: PUSH
67864: LD_VAR 0 6
67868: PUSH
67869: LD_VAR 0 3
67873: ARRAY
67874: UNION
67875: ST_TO_ADDR
67876: GO 67851
67878: POP
67879: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
67880: LD_ADDR_VAR 0 2
67884: PUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: LD_INT 1
67892: PPUSH
67893: LD_VAR 0 4
67897: PUSH
67898: LD_VAR 0 5
67902: DIFF
67903: PPUSH
67904: CALL_OW 1
67908: ST_TO_ADDR
// exit ;
67909: GO 67911
// end ; end ;
67911: LD_VAR 0 2
67915: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
67916: LD_INT 0
67918: PPUSH
67919: PPUSH
67920: PPUSH
// if not mc_bases then
67921: LD_EXP 50
67925: NOT
67926: IFFALSE 67930
// exit ;
67928: GO 68072
// for i = 1 to mc_bases do
67930: LD_ADDR_VAR 0 2
67934: PUSH
67935: DOUBLE
67936: LD_INT 1
67938: DEC
67939: ST_TO_ADDR
67940: LD_EXP 50
67944: PUSH
67945: FOR_TO
67946: IFFALSE 68063
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67948: LD_ADDR_VAR 0 3
67952: PUSH
67953: LD_EXP 50
67957: PUSH
67958: LD_VAR 0 2
67962: ARRAY
67963: PPUSH
67964: LD_INT 21
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 30
67982: PUSH
67983: LD_INT 29
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 30
67992: PUSH
67993: LD_INT 30
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: LD_INT 24
68014: PUSH
68015: LD_INT 1000
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: PPUSH
68031: CALL_OW 72
68035: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
68036: LD_ADDR_EXP 51
68040: PUSH
68041: LD_EXP 51
68045: PPUSH
68046: LD_VAR 0 2
68050: PPUSH
68051: LD_VAR 0 3
68055: PPUSH
68056: CALL_OW 1
68060: ST_TO_ADDR
// end ;
68061: GO 67945
68063: POP
68064: POP
// RaiseSailEvent ( 101 ) ;
68065: LD_INT 101
68067: PPUSH
68068: CALL_OW 427
// end ;
68072: LD_VAR 0 1
68076: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
68077: LD_INT 0
68079: PPUSH
68080: PPUSH
68081: PPUSH
68082: PPUSH
68083: PPUSH
68084: PPUSH
68085: PPUSH
// if not mc_bases then
68086: LD_EXP 50
68090: NOT
68091: IFFALSE 68095
// exit ;
68093: GO 68657
// for i = 1 to mc_bases do
68095: LD_ADDR_VAR 0 2
68099: PUSH
68100: DOUBLE
68101: LD_INT 1
68103: DEC
68104: ST_TO_ADDR
68105: LD_EXP 50
68109: PUSH
68110: FOR_TO
68111: IFFALSE 68648
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
68113: LD_ADDR_VAR 0 5
68117: PUSH
68118: LD_EXP 50
68122: PUSH
68123: LD_VAR 0 2
68127: ARRAY
68128: PUSH
68129: LD_EXP 79
68133: PUSH
68134: LD_VAR 0 2
68138: ARRAY
68139: UNION
68140: PPUSH
68141: LD_INT 21
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: LD_INT 54
68159: PUSH
68160: EMPTY
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 3
68169: PUSH
68170: LD_INT 24
68172: PUSH
68173: LD_INT 1000
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: LIST
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PPUSH
68193: CALL_OW 72
68197: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
68198: LD_ADDR_VAR 0 6
68202: PUSH
68203: LD_EXP 50
68207: PUSH
68208: LD_VAR 0 2
68212: ARRAY
68213: PPUSH
68214: LD_INT 21
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: LD_INT 54
68232: PUSH
68233: EMPTY
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 24
68245: PUSH
68246: LD_INT 250
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PPUSH
68266: CALL_OW 72
68270: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
68271: LD_ADDR_VAR 0 7
68275: PUSH
68276: LD_VAR 0 5
68280: PUSH
68281: LD_VAR 0 6
68285: DIFF
68286: ST_TO_ADDR
// if not need_heal_1 then
68287: LD_VAR 0 6
68291: NOT
68292: IFFALSE 68325
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
68294: LD_ADDR_EXP 53
68298: PUSH
68299: LD_EXP 53
68303: PPUSH
68304: LD_VAR 0 2
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PPUSH
68316: EMPTY
68317: PPUSH
68318: CALL 24858 0 3
68322: ST_TO_ADDR
68323: GO 68395
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
68325: LD_ADDR_EXP 53
68329: PUSH
68330: LD_EXP 53
68334: PPUSH
68335: LD_VAR 0 2
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PPUSH
68347: LD_EXP 53
68351: PUSH
68352: LD_VAR 0 2
68356: ARRAY
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PPUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 24
68367: PUSH
68368: LD_INT 1000
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PPUSH
68379: CALL_OW 72
68383: PUSH
68384: LD_VAR 0 6
68388: UNION
68389: PPUSH
68390: CALL 24858 0 3
68394: ST_TO_ADDR
// if not need_heal_2 then
68395: LD_VAR 0 7
68399: NOT
68400: IFFALSE 68433
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
68402: LD_ADDR_EXP 53
68406: PUSH
68407: LD_EXP 53
68411: PPUSH
68412: LD_VAR 0 2
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PPUSH
68424: EMPTY
68425: PPUSH
68426: CALL 24858 0 3
68430: ST_TO_ADDR
68431: GO 68465
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
68433: LD_ADDR_EXP 53
68437: PUSH
68438: LD_EXP 53
68442: PPUSH
68443: LD_VAR 0 2
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PPUSH
68455: LD_VAR 0 7
68459: PPUSH
68460: CALL 24858 0 3
68464: ST_TO_ADDR
// if need_heal_2 then
68465: LD_VAR 0 7
68469: IFFALSE 68630
// for j in need_heal_2 do
68471: LD_ADDR_VAR 0 3
68475: PUSH
68476: LD_VAR 0 7
68480: PUSH
68481: FOR_IN
68482: IFFALSE 68628
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68484: LD_ADDR_VAR 0 5
68488: PUSH
68489: LD_EXP 50
68493: PUSH
68494: LD_VAR 0 2
68498: ARRAY
68499: PPUSH
68500: LD_INT 2
68502: PUSH
68503: LD_INT 30
68505: PUSH
68506: LD_INT 6
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 30
68515: PUSH
68516: LD_INT 7
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 30
68525: PUSH
68526: LD_INT 8
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 30
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 30
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: PPUSH
68561: CALL_OW 72
68565: ST_TO_ADDR
// if tmp then
68566: LD_VAR 0 5
68570: IFFALSE 68626
// begin k := NearestUnitToUnit ( tmp , j ) ;
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: LD_VAR 0 5
68581: PPUSH
68582: LD_VAR 0 3
68586: PPUSH
68587: CALL_OW 74
68591: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
68592: LD_VAR 0 3
68596: PPUSH
68597: LD_VAR 0 4
68601: PPUSH
68602: CALL_OW 296
68606: PUSH
68607: LD_INT 5
68609: GREATER
68610: IFFALSE 68626
// ComMoveToNearbyEntrance ( j , k ) ;
68612: LD_VAR 0 3
68616: PPUSH
68617: LD_VAR 0 4
68621: PPUSH
68622: CALL 57476 0 2
// end ; end ;
68626: GO 68481
68628: POP
68629: POP
// if not need_heal_1 and not need_heal_2 then
68630: LD_VAR 0 6
68634: NOT
68635: PUSH
68636: LD_VAR 0 7
68640: NOT
68641: AND
68642: IFFALSE 68646
// continue ;
68644: GO 68110
// end ;
68646: GO 68110
68648: POP
68649: POP
// RaiseSailEvent ( 102 ) ;
68650: LD_INT 102
68652: PPUSH
68653: CALL_OW 427
// end ;
68657: LD_VAR 0 1
68661: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
68662: LD_INT 0
68664: PPUSH
68665: PPUSH
68666: PPUSH
68667: PPUSH
68668: PPUSH
68669: PPUSH
68670: PPUSH
68671: PPUSH
// if not mc_bases then
68672: LD_EXP 50
68676: NOT
68677: IFFALSE 68681
// exit ;
68679: GO 69564
// for i = 1 to mc_bases do
68681: LD_ADDR_VAR 0 2
68685: PUSH
68686: DOUBLE
68687: LD_INT 1
68689: DEC
68690: ST_TO_ADDR
68691: LD_EXP 50
68695: PUSH
68696: FOR_TO
68697: IFFALSE 69562
// begin if not mc_building_need_repair [ i ] then
68699: LD_EXP 51
68703: PUSH
68704: LD_VAR 0 2
68708: ARRAY
68709: NOT
68710: IFFALSE 68897
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
68712: LD_ADDR_VAR 0 6
68716: PUSH
68717: LD_EXP 69
68721: PUSH
68722: LD_VAR 0 2
68726: ARRAY
68727: PPUSH
68728: LD_INT 3
68730: PUSH
68731: LD_INT 24
68733: PUSH
68734: LD_INT 1000
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 2
68747: PUSH
68748: LD_INT 34
68750: PUSH
68751: LD_INT 13
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 34
68760: PUSH
68761: LD_INT 52
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 34
68770: PUSH
68771: LD_EXP 35
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PPUSH
68790: CALL_OW 72
68794: ST_TO_ADDR
// if cranes then
68795: LD_VAR 0 6
68799: IFFALSE 68861
// for j in cranes do
68801: LD_ADDR_VAR 0 3
68805: PUSH
68806: LD_VAR 0 6
68810: PUSH
68811: FOR_IN
68812: IFFALSE 68859
// if not IsInArea ( j , mc_parking [ i ] ) then
68814: LD_VAR 0 3
68818: PPUSH
68819: LD_EXP 74
68823: PUSH
68824: LD_VAR 0 2
68828: ARRAY
68829: PPUSH
68830: CALL_OW 308
68834: NOT
68835: IFFALSE 68857
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68837: LD_VAR 0 3
68841: PPUSH
68842: LD_EXP 74
68846: PUSH
68847: LD_VAR 0 2
68851: ARRAY
68852: PPUSH
68853: CALL_OW 113
68857: GO 68811
68859: POP
68860: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
68861: LD_ADDR_EXP 52
68865: PUSH
68866: LD_EXP 52
68870: PPUSH
68871: LD_VAR 0 2
68875: PPUSH
68876: EMPTY
68877: PPUSH
68878: CALL_OW 1
68882: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
68883: LD_VAR 0 2
68887: PPUSH
68888: LD_INT 101
68890: PPUSH
68891: CALL 63749 0 2
// continue ;
68895: GO 68696
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
68897: LD_ADDR_EXP 56
68901: PUSH
68902: LD_EXP 56
68906: PPUSH
68907: LD_VAR 0 2
68911: PPUSH
68912: EMPTY
68913: PPUSH
68914: CALL_OW 1
68918: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
68919: LD_VAR 0 2
68923: PPUSH
68924: LD_INT 103
68926: PPUSH
68927: CALL 63749 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
68931: LD_ADDR_VAR 0 5
68935: PUSH
68936: LD_EXP 50
68940: PUSH
68941: LD_VAR 0 2
68945: ARRAY
68946: PUSH
68947: LD_EXP 79
68951: PUSH
68952: LD_VAR 0 2
68956: ARRAY
68957: UNION
68958: PPUSH
68959: LD_INT 2
68961: PUSH
68962: LD_INT 25
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 25
68974: PUSH
68975: LD_INT 16
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: PPUSH
68990: CALL_OW 72
68994: ST_TO_ADDR
// if mc_need_heal [ i ] then
68995: LD_EXP 53
68999: PUSH
69000: LD_VAR 0 2
69004: ARRAY
69005: IFFALSE 69049
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
69007: LD_ADDR_VAR 0 5
69011: PUSH
69012: LD_VAR 0 5
69016: PUSH
69017: LD_EXP 53
69021: PUSH
69022: LD_VAR 0 2
69026: ARRAY
69027: PUSH
69028: LD_INT 1
69030: ARRAY
69031: PUSH
69032: LD_EXP 53
69036: PUSH
69037: LD_VAR 0 2
69041: ARRAY
69042: PUSH
69043: LD_INT 2
69045: ARRAY
69046: UNION
69047: DIFF
69048: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
69049: LD_ADDR_VAR 0 6
69053: PUSH
69054: LD_EXP 69
69058: PUSH
69059: LD_VAR 0 2
69063: ARRAY
69064: PPUSH
69065: LD_INT 2
69067: PUSH
69068: LD_INT 34
69070: PUSH
69071: LD_INT 13
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 34
69080: PUSH
69081: LD_INT 52
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 34
69090: PUSH
69091: LD_EXP 35
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: PPUSH
69106: CALL_OW 72
69110: ST_TO_ADDR
// if cranes then
69111: LD_VAR 0 6
69115: IFFALSE 69251
// begin for j in cranes do
69117: LD_ADDR_VAR 0 3
69121: PUSH
69122: LD_VAR 0 6
69126: PUSH
69127: FOR_IN
69128: IFFALSE 69249
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
69130: LD_VAR 0 3
69134: PPUSH
69135: CALL_OW 256
69139: PUSH
69140: LD_INT 1000
69142: EQUAL
69143: PUSH
69144: LD_VAR 0 3
69148: PPUSH
69149: CALL_OW 314
69153: NOT
69154: AND
69155: IFFALSE 69189
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
69157: LD_VAR 0 3
69161: PPUSH
69162: LD_EXP 51
69166: PUSH
69167: LD_VAR 0 2
69171: ARRAY
69172: PPUSH
69173: LD_VAR 0 3
69177: PPUSH
69178: CALL_OW 74
69182: PPUSH
69183: CALL_OW 130
69187: GO 69247
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
69189: LD_VAR 0 3
69193: PPUSH
69194: CALL_OW 256
69198: PUSH
69199: LD_INT 500
69201: LESS
69202: PUSH
69203: LD_VAR 0 3
69207: PPUSH
69208: LD_EXP 74
69212: PUSH
69213: LD_VAR 0 2
69217: ARRAY
69218: PPUSH
69219: CALL_OW 308
69223: NOT
69224: AND
69225: IFFALSE 69247
// ComMoveToArea ( j , mc_parking [ i ] ) ;
69227: LD_VAR 0 3
69231: PPUSH
69232: LD_EXP 74
69236: PUSH
69237: LD_VAR 0 2
69241: ARRAY
69242: PPUSH
69243: CALL_OW 113
// end ;
69247: GO 69127
69249: POP
69250: POP
// end ; if tmp > 3 then
69251: LD_VAR 0 5
69255: PUSH
69256: LD_INT 3
69258: GREATER
69259: IFFALSE 69279
// tmp := ShrinkArray ( tmp , 4 ) ;
69261: LD_ADDR_VAR 0 5
69265: PUSH
69266: LD_VAR 0 5
69270: PPUSH
69271: LD_INT 4
69273: PPUSH
69274: CALL 56924 0 2
69278: ST_TO_ADDR
// if not tmp then
69279: LD_VAR 0 5
69283: NOT
69284: IFFALSE 69288
// continue ;
69286: GO 68696
// for j in tmp do
69288: LD_ADDR_VAR 0 3
69292: PUSH
69293: LD_VAR 0 5
69297: PUSH
69298: FOR_IN
69299: IFFALSE 69558
// begin if IsInUnit ( j ) then
69301: LD_VAR 0 3
69305: PPUSH
69306: CALL_OW 310
69310: IFFALSE 69321
// ComExitBuilding ( j ) ;
69312: LD_VAR 0 3
69316: PPUSH
69317: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
69321: LD_VAR 0 3
69325: PUSH
69326: LD_EXP 52
69330: PUSH
69331: LD_VAR 0 2
69335: ARRAY
69336: IN
69337: NOT
69338: IFFALSE 69396
// begin SetTag ( j , 101 ) ;
69340: LD_VAR 0 3
69344: PPUSH
69345: LD_INT 101
69347: PPUSH
69348: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
69352: LD_ADDR_EXP 52
69356: PUSH
69357: LD_EXP 52
69361: PPUSH
69362: LD_VAR 0 2
69366: PUSH
69367: LD_EXP 52
69371: PUSH
69372: LD_VAR 0 2
69376: ARRAY
69377: PUSH
69378: LD_INT 1
69380: PLUS
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PPUSH
69386: LD_VAR 0 3
69390: PPUSH
69391: CALL 24858 0 3
69395: ST_TO_ADDR
// end ; wait ( 1 ) ;
69396: LD_INT 1
69398: PPUSH
69399: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
69403: LD_ADDR_VAR 0 7
69407: PUSH
69408: LD_EXP 51
69412: PUSH
69413: LD_VAR 0 2
69417: ARRAY
69418: ST_TO_ADDR
// if mc_scan [ i ] then
69419: LD_EXP 73
69423: PUSH
69424: LD_VAR 0 2
69428: ARRAY
69429: IFFALSE 69491
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
69431: LD_ADDR_VAR 0 7
69435: PUSH
69436: LD_EXP 51
69440: PUSH
69441: LD_VAR 0 2
69445: ARRAY
69446: PPUSH
69447: LD_INT 3
69449: PUSH
69450: LD_INT 30
69452: PUSH
69453: LD_INT 32
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 30
69462: PUSH
69463: LD_INT 33
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 30
69472: PUSH
69473: LD_INT 31
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: PPUSH
69486: CALL_OW 72
69490: ST_TO_ADDR
// if not to_repair_tmp then
69491: LD_VAR 0 7
69495: NOT
69496: IFFALSE 69500
// continue ;
69498: GO 69298
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
69500: LD_ADDR_VAR 0 8
69504: PUSH
69505: LD_VAR 0 7
69509: PPUSH
69510: LD_VAR 0 3
69514: PPUSH
69515: CALL_OW 74
69519: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
69520: LD_VAR 0 8
69524: PPUSH
69525: LD_INT 16
69527: PPUSH
69528: CALL 27457 0 2
69532: PUSH
69533: LD_INT 4
69535: ARRAY
69536: PUSH
69537: LD_INT 10
69539: LESS
69540: IFFALSE 69556
// ComRepairBuilding ( j , to_repair ) ;
69542: LD_VAR 0 3
69546: PPUSH
69547: LD_VAR 0 8
69551: PPUSH
69552: CALL_OW 130
// end ;
69556: GO 69298
69558: POP
69559: POP
// end ;
69560: GO 68696
69562: POP
69563: POP
// end ;
69564: LD_VAR 0 1
69568: RET
// export function MC_Heal ; var i , j , tmp ; begin
69569: LD_INT 0
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
// if not mc_bases then
69575: LD_EXP 50
69579: NOT
69580: IFFALSE 69584
// exit ;
69582: GO 69986
// for i = 1 to mc_bases do
69584: LD_ADDR_VAR 0 2
69588: PUSH
69589: DOUBLE
69590: LD_INT 1
69592: DEC
69593: ST_TO_ADDR
69594: LD_EXP 50
69598: PUSH
69599: FOR_TO
69600: IFFALSE 69984
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
69602: LD_EXP 53
69606: PUSH
69607: LD_VAR 0 2
69611: ARRAY
69612: PUSH
69613: LD_INT 1
69615: ARRAY
69616: NOT
69617: PUSH
69618: LD_EXP 53
69622: PUSH
69623: LD_VAR 0 2
69627: ARRAY
69628: PUSH
69629: LD_INT 2
69631: ARRAY
69632: NOT
69633: AND
69634: IFFALSE 69672
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
69636: LD_ADDR_EXP 54
69640: PUSH
69641: LD_EXP 54
69645: PPUSH
69646: LD_VAR 0 2
69650: PPUSH
69651: EMPTY
69652: PPUSH
69653: CALL_OW 1
69657: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
69658: LD_VAR 0 2
69662: PPUSH
69663: LD_INT 102
69665: PPUSH
69666: CALL 63749 0 2
// continue ;
69670: GO 69599
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
69672: LD_ADDR_VAR 0 4
69676: PUSH
69677: LD_EXP 50
69681: PUSH
69682: LD_VAR 0 2
69686: ARRAY
69687: PPUSH
69688: LD_INT 25
69690: PUSH
69691: LD_INT 4
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PPUSH
69698: CALL_OW 72
69702: ST_TO_ADDR
// if not tmp then
69703: LD_VAR 0 4
69707: NOT
69708: IFFALSE 69712
// continue ;
69710: GO 69599
// if mc_taming [ i ] then
69712: LD_EXP 81
69716: PUSH
69717: LD_VAR 0 2
69721: ARRAY
69722: IFFALSE 69746
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
69724: LD_ADDR_EXP 81
69728: PUSH
69729: LD_EXP 81
69733: PPUSH
69734: LD_VAR 0 2
69738: PPUSH
69739: EMPTY
69740: PPUSH
69741: CALL_OW 1
69745: ST_TO_ADDR
// for j in tmp do
69746: LD_ADDR_VAR 0 3
69750: PUSH
69751: LD_VAR 0 4
69755: PUSH
69756: FOR_IN
69757: IFFALSE 69980
// begin if IsInUnit ( j ) then
69759: LD_VAR 0 3
69763: PPUSH
69764: CALL_OW 310
69768: IFFALSE 69779
// ComExitBuilding ( j ) ;
69770: LD_VAR 0 3
69774: PPUSH
69775: CALL_OW 122
// if not j in mc_healers [ i ] then
69779: LD_VAR 0 3
69783: PUSH
69784: LD_EXP 54
69788: PUSH
69789: LD_VAR 0 2
69793: ARRAY
69794: IN
69795: NOT
69796: IFFALSE 69842
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
69798: LD_ADDR_EXP 54
69802: PUSH
69803: LD_EXP 54
69807: PPUSH
69808: LD_VAR 0 2
69812: PUSH
69813: LD_EXP 54
69817: PUSH
69818: LD_VAR 0 2
69822: ARRAY
69823: PUSH
69824: LD_INT 1
69826: PLUS
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PPUSH
69832: LD_VAR 0 3
69836: PPUSH
69837: CALL 24858 0 3
69841: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
69842: LD_VAR 0 3
69846: PPUSH
69847: CALL_OW 110
69851: PUSH
69852: LD_INT 102
69854: NONEQUAL
69855: IFFALSE 69869
// SetTag ( j , 102 ) ;
69857: LD_VAR 0 3
69861: PPUSH
69862: LD_INT 102
69864: PPUSH
69865: CALL_OW 109
// Wait ( 3 ) ;
69869: LD_INT 3
69871: PPUSH
69872: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
69876: LD_EXP 53
69880: PUSH
69881: LD_VAR 0 2
69885: ARRAY
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: IFFALSE 69922
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
69892: LD_VAR 0 3
69896: PPUSH
69897: LD_EXP 53
69901: PUSH
69902: LD_VAR 0 2
69906: ARRAY
69907: PUSH
69908: LD_INT 1
69910: ARRAY
69911: PUSH
69912: LD_INT 1
69914: ARRAY
69915: PPUSH
69916: CALL_OW 128
69920: GO 69978
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
69922: LD_VAR 0 3
69926: PPUSH
69927: CALL_OW 314
69931: NOT
69932: PUSH
69933: LD_EXP 53
69937: PUSH
69938: LD_VAR 0 2
69942: ARRAY
69943: PUSH
69944: LD_INT 2
69946: ARRAY
69947: AND
69948: IFFALSE 69978
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
69950: LD_VAR 0 3
69954: PPUSH
69955: LD_EXP 53
69959: PUSH
69960: LD_VAR 0 2
69964: ARRAY
69965: PUSH
69966: LD_INT 2
69968: ARRAY
69969: PUSH
69970: LD_INT 1
69972: ARRAY
69973: PPUSH
69974: CALL_OW 128
// end ;
69978: GO 69756
69980: POP
69981: POP
// end ;
69982: GO 69599
69984: POP
69985: POP
// end ;
69986: LD_VAR 0 1
69990: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
69991: LD_INT 0
69993: PPUSH
69994: PPUSH
69995: PPUSH
69996: PPUSH
69997: PPUSH
// if not mc_bases then
69998: LD_EXP 50
70002: NOT
70003: IFFALSE 70007
// exit ;
70005: GO 71178
// for i = 1 to mc_bases do
70007: LD_ADDR_VAR 0 2
70011: PUSH
70012: DOUBLE
70013: LD_INT 1
70015: DEC
70016: ST_TO_ADDR
70017: LD_EXP 50
70021: PUSH
70022: FOR_TO
70023: IFFALSE 71176
// begin if mc_scan [ i ] then
70025: LD_EXP 73
70029: PUSH
70030: LD_VAR 0 2
70034: ARRAY
70035: IFFALSE 70039
// continue ;
70037: GO 70022
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
70039: LD_EXP 55
70043: PUSH
70044: LD_VAR 0 2
70048: ARRAY
70049: NOT
70050: PUSH
70051: LD_EXP 57
70055: PUSH
70056: LD_VAR 0 2
70060: ARRAY
70061: NOT
70062: AND
70063: PUSH
70064: LD_EXP 56
70068: PUSH
70069: LD_VAR 0 2
70073: ARRAY
70074: AND
70075: IFFALSE 70113
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
70077: LD_ADDR_EXP 56
70081: PUSH
70082: LD_EXP 56
70086: PPUSH
70087: LD_VAR 0 2
70091: PPUSH
70092: EMPTY
70093: PPUSH
70094: CALL_OW 1
70098: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70099: LD_VAR 0 2
70103: PPUSH
70104: LD_INT 103
70106: PPUSH
70107: CALL 63749 0 2
// continue ;
70111: GO 70022
// end ; if mc_construct_list [ i ] then
70113: LD_EXP 57
70117: PUSH
70118: LD_VAR 0 2
70122: ARRAY
70123: IFFALSE 70343
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
70125: LD_ADDR_VAR 0 4
70129: PUSH
70130: LD_EXP 50
70134: PUSH
70135: LD_VAR 0 2
70139: ARRAY
70140: PPUSH
70141: LD_INT 25
70143: PUSH
70144: LD_INT 2
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PPUSH
70151: CALL_OW 72
70155: PUSH
70156: LD_EXP 52
70160: PUSH
70161: LD_VAR 0 2
70165: ARRAY
70166: DIFF
70167: ST_TO_ADDR
// if not tmp then
70168: LD_VAR 0 4
70172: NOT
70173: IFFALSE 70177
// continue ;
70175: GO 70022
// for j in tmp do
70177: LD_ADDR_VAR 0 3
70181: PUSH
70182: LD_VAR 0 4
70186: PUSH
70187: FOR_IN
70188: IFFALSE 70339
// begin if not mc_builders [ i ] then
70190: LD_EXP 56
70194: PUSH
70195: LD_VAR 0 2
70199: ARRAY
70200: NOT
70201: IFFALSE 70259
// begin SetTag ( j , 103 ) ;
70203: LD_VAR 0 3
70207: PPUSH
70208: LD_INT 103
70210: PPUSH
70211: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
70215: LD_ADDR_EXP 56
70219: PUSH
70220: LD_EXP 56
70224: PPUSH
70225: LD_VAR 0 2
70229: PUSH
70230: LD_EXP 56
70234: PUSH
70235: LD_VAR 0 2
70239: ARRAY
70240: PUSH
70241: LD_INT 1
70243: PLUS
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PPUSH
70249: LD_VAR 0 3
70253: PPUSH
70254: CALL 24858 0 3
70258: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
70259: LD_VAR 0 3
70263: PPUSH
70264: CALL_OW 310
70268: IFFALSE 70279
// ComExitBuilding ( j ) ;
70270: LD_VAR 0 3
70274: PPUSH
70275: CALL_OW 122
// wait ( 3 ) ;
70279: LD_INT 3
70281: PPUSH
70282: CALL_OW 67
// if not mc_construct_list [ i ] then
70286: LD_EXP 57
70290: PUSH
70291: LD_VAR 0 2
70295: ARRAY
70296: NOT
70297: IFFALSE 70301
// break ;
70299: GO 70339
// if not HasTask ( j ) then
70301: LD_VAR 0 3
70305: PPUSH
70306: CALL_OW 314
70310: NOT
70311: IFFALSE 70337
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
70313: LD_VAR 0 3
70317: PPUSH
70318: LD_EXP 57
70322: PUSH
70323: LD_VAR 0 2
70327: ARRAY
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PPUSH
70333: CALL 27721 0 2
// end ;
70337: GO 70187
70339: POP
70340: POP
// end else
70341: GO 71174
// if mc_build_list [ i ] then
70343: LD_EXP 55
70347: PUSH
70348: LD_VAR 0 2
70352: ARRAY
70353: IFFALSE 71174
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70355: LD_ADDR_VAR 0 5
70359: PUSH
70360: LD_EXP 50
70364: PUSH
70365: LD_VAR 0 2
70369: ARRAY
70370: PPUSH
70371: LD_INT 2
70373: PUSH
70374: LD_INT 30
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 30
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: PPUSH
70399: CALL_OW 72
70403: ST_TO_ADDR
// if depot then
70404: LD_VAR 0 5
70408: IFFALSE 70426
// depot := depot [ 1 ] else
70410: LD_ADDR_VAR 0 5
70414: PUSH
70415: LD_VAR 0 5
70419: PUSH
70420: LD_INT 1
70422: ARRAY
70423: ST_TO_ADDR
70424: GO 70434
// depot := 0 ;
70426: LD_ADDR_VAR 0 5
70430: PUSH
70431: LD_INT 0
70433: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
70434: LD_EXP 55
70438: PUSH
70439: LD_VAR 0 2
70443: ARRAY
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PPUSH
70453: CALL 27545 0 1
70457: PUSH
70458: LD_EXP 50
70462: PUSH
70463: LD_VAR 0 2
70467: ARRAY
70468: PPUSH
70469: LD_INT 2
70471: PUSH
70472: LD_INT 30
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 30
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: LIST
70496: PPUSH
70497: CALL_OW 72
70501: NOT
70502: AND
70503: IFFALSE 70608
// begin for j = 1 to mc_build_list [ i ] do
70505: LD_ADDR_VAR 0 3
70509: PUSH
70510: DOUBLE
70511: LD_INT 1
70513: DEC
70514: ST_TO_ADDR
70515: LD_EXP 55
70519: PUSH
70520: LD_VAR 0 2
70524: ARRAY
70525: PUSH
70526: FOR_TO
70527: IFFALSE 70606
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
70529: LD_EXP 55
70533: PUSH
70534: LD_VAR 0 2
70538: ARRAY
70539: PUSH
70540: LD_VAR 0 3
70544: ARRAY
70545: PUSH
70546: LD_INT 1
70548: ARRAY
70549: PUSH
70550: LD_INT 2
70552: EQUAL
70553: IFFALSE 70604
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
70555: LD_ADDR_EXP 55
70559: PUSH
70560: LD_EXP 55
70564: PPUSH
70565: LD_VAR 0 2
70569: PPUSH
70570: LD_EXP 55
70574: PUSH
70575: LD_VAR 0 2
70579: ARRAY
70580: PPUSH
70581: LD_VAR 0 3
70585: PPUSH
70586: LD_INT 1
70588: PPUSH
70589: LD_INT 0
70591: PPUSH
70592: CALL 24276 0 4
70596: PPUSH
70597: CALL_OW 1
70601: ST_TO_ADDR
// break ;
70602: GO 70606
// end ;
70604: GO 70526
70606: POP
70607: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
70608: LD_EXP 55
70612: PUSH
70613: LD_VAR 0 2
70617: ARRAY
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PUSH
70623: LD_INT 1
70625: ARRAY
70626: PUSH
70627: LD_INT 0
70629: EQUAL
70630: PUSH
70631: LD_VAR 0 5
70635: PUSH
70636: LD_VAR 0 5
70640: PPUSH
70641: LD_EXP 55
70645: PUSH
70646: LD_VAR 0 2
70650: ARRAY
70651: PUSH
70652: LD_INT 1
70654: ARRAY
70655: PUSH
70656: LD_INT 1
70658: ARRAY
70659: PPUSH
70660: LD_EXP 55
70664: PUSH
70665: LD_VAR 0 2
70669: ARRAY
70670: PUSH
70671: LD_INT 1
70673: ARRAY
70674: PUSH
70675: LD_INT 2
70677: ARRAY
70678: PPUSH
70679: LD_EXP 55
70683: PUSH
70684: LD_VAR 0 2
70688: ARRAY
70689: PUSH
70690: LD_INT 1
70692: ARRAY
70693: PUSH
70694: LD_INT 3
70696: ARRAY
70697: PPUSH
70698: LD_EXP 55
70702: PUSH
70703: LD_VAR 0 2
70707: ARRAY
70708: PUSH
70709: LD_INT 1
70711: ARRAY
70712: PUSH
70713: LD_INT 4
70715: ARRAY
70716: PPUSH
70717: CALL 32961 0 5
70721: AND
70722: OR
70723: IFFALSE 71004
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
70725: LD_ADDR_VAR 0 4
70729: PUSH
70730: LD_EXP 50
70734: PUSH
70735: LD_VAR 0 2
70739: ARRAY
70740: PPUSH
70741: LD_INT 25
70743: PUSH
70744: LD_INT 2
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PPUSH
70751: CALL_OW 72
70755: PUSH
70756: LD_EXP 52
70760: PUSH
70761: LD_VAR 0 2
70765: ARRAY
70766: DIFF
70767: ST_TO_ADDR
// if not tmp then
70768: LD_VAR 0 4
70772: NOT
70773: IFFALSE 70777
// continue ;
70775: GO 70022
// for j in tmp do
70777: LD_ADDR_VAR 0 3
70781: PUSH
70782: LD_VAR 0 4
70786: PUSH
70787: FOR_IN
70788: IFFALSE 71000
// begin if not mc_builders [ i ] then
70790: LD_EXP 56
70794: PUSH
70795: LD_VAR 0 2
70799: ARRAY
70800: NOT
70801: IFFALSE 70859
// begin SetTag ( j , 103 ) ;
70803: LD_VAR 0 3
70807: PPUSH
70808: LD_INT 103
70810: PPUSH
70811: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
70815: LD_ADDR_EXP 56
70819: PUSH
70820: LD_EXP 56
70824: PPUSH
70825: LD_VAR 0 2
70829: PUSH
70830: LD_EXP 56
70834: PUSH
70835: LD_VAR 0 2
70839: ARRAY
70840: PUSH
70841: LD_INT 1
70843: PLUS
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PPUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL 24858 0 3
70858: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
70859: LD_VAR 0 3
70863: PPUSH
70864: CALL_OW 310
70868: IFFALSE 70879
// ComExitBuilding ( j ) ;
70870: LD_VAR 0 3
70874: PPUSH
70875: CALL_OW 122
// wait ( 3 ) ;
70879: LD_INT 3
70881: PPUSH
70882: CALL_OW 67
// if not mc_build_list [ i ] then
70886: LD_EXP 55
70890: PUSH
70891: LD_VAR 0 2
70895: ARRAY
70896: NOT
70897: IFFALSE 70901
// break ;
70899: GO 71000
// if not HasTask ( j ) then
70901: LD_VAR 0 3
70905: PPUSH
70906: CALL_OW 314
70910: NOT
70911: IFFALSE 70998
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
70913: LD_VAR 0 3
70917: PPUSH
70918: LD_EXP 55
70922: PUSH
70923: LD_VAR 0 2
70927: ARRAY
70928: PUSH
70929: LD_INT 1
70931: ARRAY
70932: PUSH
70933: LD_INT 1
70935: ARRAY
70936: PPUSH
70937: LD_EXP 55
70941: PUSH
70942: LD_VAR 0 2
70946: ARRAY
70947: PUSH
70948: LD_INT 1
70950: ARRAY
70951: PUSH
70952: LD_INT 2
70954: ARRAY
70955: PPUSH
70956: LD_EXP 55
70960: PUSH
70961: LD_VAR 0 2
70965: ARRAY
70966: PUSH
70967: LD_INT 1
70969: ARRAY
70970: PUSH
70971: LD_INT 3
70973: ARRAY
70974: PPUSH
70975: LD_EXP 55
70979: PUSH
70980: LD_VAR 0 2
70984: ARRAY
70985: PUSH
70986: LD_INT 1
70988: ARRAY
70989: PUSH
70990: LD_INT 4
70992: ARRAY
70993: PPUSH
70994: CALL_OW 145
// end ;
70998: GO 70787
71000: POP
71001: POP
// end else
71002: GO 71174
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
71004: LD_EXP 50
71008: PUSH
71009: LD_VAR 0 2
71013: ARRAY
71014: PPUSH
71015: LD_EXP 55
71019: PUSH
71020: LD_VAR 0 2
71024: ARRAY
71025: PUSH
71026: LD_INT 1
71028: ARRAY
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PPUSH
71034: LD_EXP 55
71038: PUSH
71039: LD_VAR 0 2
71043: ARRAY
71044: PUSH
71045: LD_INT 1
71047: ARRAY
71048: PUSH
71049: LD_INT 2
71051: ARRAY
71052: PPUSH
71053: LD_EXP 55
71057: PUSH
71058: LD_VAR 0 2
71062: ARRAY
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PUSH
71068: LD_INT 3
71070: ARRAY
71071: PPUSH
71072: LD_EXP 55
71076: PUSH
71077: LD_VAR 0 2
71081: ARRAY
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: PUSH
71087: LD_INT 4
71089: ARRAY
71090: PPUSH
71091: LD_EXP 50
71095: PUSH
71096: LD_VAR 0 2
71100: ARRAY
71101: PPUSH
71102: LD_INT 21
71104: PUSH
71105: LD_INT 3
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PPUSH
71112: CALL_OW 72
71116: PPUSH
71117: EMPTY
71118: PPUSH
71119: CALL 31711 0 7
71123: NOT
71124: IFFALSE 71174
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
71126: LD_ADDR_EXP 55
71130: PUSH
71131: LD_EXP 55
71135: PPUSH
71136: LD_VAR 0 2
71140: PPUSH
71141: LD_EXP 55
71145: PUSH
71146: LD_VAR 0 2
71150: ARRAY
71151: PPUSH
71152: LD_INT 1
71154: PPUSH
71155: LD_INT 1
71157: NEG
71158: PPUSH
71159: LD_INT 0
71161: PPUSH
71162: CALL 24276 0 4
71166: PPUSH
71167: CALL_OW 1
71171: ST_TO_ADDR
// continue ;
71172: GO 70022
// end ; end ; end ;
71174: GO 70022
71176: POP
71177: POP
// end ;
71178: LD_VAR 0 1
71182: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
71183: LD_INT 0
71185: PPUSH
71186: PPUSH
71187: PPUSH
71188: PPUSH
71189: PPUSH
71190: PPUSH
// if not mc_bases then
71191: LD_EXP 50
71195: NOT
71196: IFFALSE 71200
// exit ;
71198: GO 71627
// for i = 1 to mc_bases do
71200: LD_ADDR_VAR 0 2
71204: PUSH
71205: DOUBLE
71206: LD_INT 1
71208: DEC
71209: ST_TO_ADDR
71210: LD_EXP 50
71214: PUSH
71215: FOR_TO
71216: IFFALSE 71625
// begin tmp := mc_build_upgrade [ i ] ;
71218: LD_ADDR_VAR 0 4
71222: PUSH
71223: LD_EXP 82
71227: PUSH
71228: LD_VAR 0 2
71232: ARRAY
71233: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
71234: LD_ADDR_VAR 0 6
71238: PUSH
71239: LD_EXP 83
71243: PUSH
71244: LD_VAR 0 2
71248: ARRAY
71249: PPUSH
71250: LD_INT 2
71252: PUSH
71253: LD_INT 30
71255: PUSH
71256: LD_INT 6
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 30
71265: PUSH
71266: LD_INT 7
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: PPUSH
71278: CALL_OW 72
71282: ST_TO_ADDR
// if not tmp and not lab then
71283: LD_VAR 0 4
71287: NOT
71288: PUSH
71289: LD_VAR 0 6
71293: NOT
71294: AND
71295: IFFALSE 71299
// continue ;
71297: GO 71215
// if tmp then
71299: LD_VAR 0 4
71303: IFFALSE 71423
// for j in tmp do
71305: LD_ADDR_VAR 0 3
71309: PUSH
71310: LD_VAR 0 4
71314: PUSH
71315: FOR_IN
71316: IFFALSE 71421
// begin if UpgradeCost ( j ) then
71318: LD_VAR 0 3
71322: PPUSH
71323: CALL 31371 0 1
71327: IFFALSE 71419
// begin ComUpgrade ( j ) ;
71329: LD_VAR 0 3
71333: PPUSH
71334: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
71338: LD_ADDR_EXP 82
71342: PUSH
71343: LD_EXP 82
71347: PPUSH
71348: LD_VAR 0 2
71352: PPUSH
71353: LD_EXP 82
71357: PUSH
71358: LD_VAR 0 2
71362: ARRAY
71363: PUSH
71364: LD_VAR 0 3
71368: DIFF
71369: PPUSH
71370: CALL_OW 1
71374: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
71375: LD_ADDR_EXP 57
71379: PUSH
71380: LD_EXP 57
71384: PPUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_EXP 57
71394: PUSH
71395: LD_VAR 0 2
71399: ARRAY
71400: PUSH
71401: LD_INT 1
71403: PLUS
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PPUSH
71409: LD_VAR 0 3
71413: PPUSH
71414: CALL 24858 0 3
71418: ST_TO_ADDR
// end ; end ;
71419: GO 71315
71421: POP
71422: POP
// if not lab or not mc_lab_upgrade [ i ] then
71423: LD_VAR 0 6
71427: NOT
71428: PUSH
71429: LD_EXP 84
71433: PUSH
71434: LD_VAR 0 2
71438: ARRAY
71439: NOT
71440: OR
71441: IFFALSE 71445
// continue ;
71443: GO 71215
// for j in lab do
71445: LD_ADDR_VAR 0 3
71449: PUSH
71450: LD_VAR 0 6
71454: PUSH
71455: FOR_IN
71456: IFFALSE 71621
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
71458: LD_VAR 0 3
71462: PPUSH
71463: CALL_OW 266
71467: PUSH
71468: LD_INT 6
71470: PUSH
71471: LD_INT 7
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: IN
71478: PUSH
71479: LD_VAR 0 3
71483: PPUSH
71484: CALL_OW 461
71488: PUSH
71489: LD_INT 1
71491: NONEQUAL
71492: AND
71493: IFFALSE 71619
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
71495: LD_VAR 0 3
71499: PPUSH
71500: LD_EXP 84
71504: PUSH
71505: LD_VAR 0 2
71509: ARRAY
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: PPUSH
71515: CALL 31576 0 2
71519: IFFALSE 71619
// begin ComCancel ( j ) ;
71521: LD_VAR 0 3
71525: PPUSH
71526: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
71530: LD_VAR 0 3
71534: PPUSH
71535: LD_EXP 84
71539: PUSH
71540: LD_VAR 0 2
71544: ARRAY
71545: PUSH
71546: LD_INT 1
71548: ARRAY
71549: PPUSH
71550: CALL_OW 207
// if not j in mc_construct_list [ i ] then
71554: LD_VAR 0 3
71558: PUSH
71559: LD_EXP 57
71563: PUSH
71564: LD_VAR 0 2
71568: ARRAY
71569: IN
71570: NOT
71571: IFFALSE 71617
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
71573: LD_ADDR_EXP 57
71577: PUSH
71578: LD_EXP 57
71582: PPUSH
71583: LD_VAR 0 2
71587: PUSH
71588: LD_EXP 57
71592: PUSH
71593: LD_VAR 0 2
71597: ARRAY
71598: PUSH
71599: LD_INT 1
71601: PLUS
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PPUSH
71607: LD_VAR 0 3
71611: PPUSH
71612: CALL 24858 0 3
71616: ST_TO_ADDR
// break ;
71617: GO 71621
// end ; end ; end ;
71619: GO 71455
71621: POP
71622: POP
// end ;
71623: GO 71215
71625: POP
71626: POP
// end ;
71627: LD_VAR 0 1
71631: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
71636: PPUSH
71637: PPUSH
71638: PPUSH
71639: PPUSH
71640: PPUSH
71641: PPUSH
71642: PPUSH
// if not mc_bases then
71643: LD_EXP 50
71647: NOT
71648: IFFALSE 71652
// exit ;
71650: GO 72057
// for i = 1 to mc_bases do
71652: LD_ADDR_VAR 0 2
71656: PUSH
71657: DOUBLE
71658: LD_INT 1
71660: DEC
71661: ST_TO_ADDR
71662: LD_EXP 50
71666: PUSH
71667: FOR_TO
71668: IFFALSE 72055
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
71670: LD_EXP 58
71674: PUSH
71675: LD_VAR 0 2
71679: ARRAY
71680: NOT
71681: PUSH
71682: LD_EXP 50
71686: PUSH
71687: LD_VAR 0 2
71691: ARRAY
71692: PPUSH
71693: LD_INT 30
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PPUSH
71703: CALL_OW 72
71707: NOT
71708: OR
71709: IFFALSE 71713
// continue ;
71711: GO 71667
// busy := false ;
71713: LD_ADDR_VAR 0 8
71717: PUSH
71718: LD_INT 0
71720: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71721: LD_ADDR_VAR 0 4
71725: PUSH
71726: LD_EXP 50
71730: PUSH
71731: LD_VAR 0 2
71735: ARRAY
71736: PPUSH
71737: LD_INT 30
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PPUSH
71747: CALL_OW 72
71751: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
71752: LD_ADDR_VAR 0 6
71756: PUSH
71757: LD_EXP 58
71761: PUSH
71762: LD_VAR 0 2
71766: ARRAY
71767: PPUSH
71768: LD_INT 2
71770: PUSH
71771: LD_INT 30
71773: PUSH
71774: LD_INT 32
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 30
71783: PUSH
71784: LD_INT 33
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: LIST
71795: PPUSH
71796: CALL_OW 72
71800: ST_TO_ADDR
// if not t then
71801: LD_VAR 0 6
71805: NOT
71806: IFFALSE 71810
// continue ;
71808: GO 71667
// for j in tmp do
71810: LD_ADDR_VAR 0 3
71814: PUSH
71815: LD_VAR 0 4
71819: PUSH
71820: FOR_IN
71821: IFFALSE 71851
// if not BuildingStatus ( j ) = bs_idle then
71823: LD_VAR 0 3
71827: PPUSH
71828: CALL_OW 461
71832: PUSH
71833: LD_INT 2
71835: EQUAL
71836: NOT
71837: IFFALSE 71849
// begin busy := true ;
71839: LD_ADDR_VAR 0 8
71843: PUSH
71844: LD_INT 1
71846: ST_TO_ADDR
// break ;
71847: GO 71851
// end ;
71849: GO 71820
71851: POP
71852: POP
// if busy then
71853: LD_VAR 0 8
71857: IFFALSE 71861
// continue ;
71859: GO 71667
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
71861: LD_ADDR_VAR 0 7
71865: PUSH
71866: LD_VAR 0 6
71870: PPUSH
71871: LD_INT 35
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PPUSH
71881: CALL_OW 72
71885: ST_TO_ADDR
// if tw then
71886: LD_VAR 0 7
71890: IFFALSE 71967
// begin tw := tw [ 1 ] ;
71892: LD_ADDR_VAR 0 7
71896: PUSH
71897: LD_VAR 0 7
71901: PUSH
71902: LD_INT 1
71904: ARRAY
71905: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
71906: LD_ADDR_VAR 0 9
71910: PUSH
71911: LD_VAR 0 7
71915: PPUSH
71916: LD_EXP 75
71920: PUSH
71921: LD_VAR 0 2
71925: ARRAY
71926: PPUSH
71927: CALL 29868 0 2
71931: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
71932: LD_EXP 89
71936: PUSH
71937: LD_VAR 0 2
71941: ARRAY
71942: IFFALSE 71965
// if not weapon in mc_allowed_tower_weapons [ i ] then
71944: LD_VAR 0 9
71948: PUSH
71949: LD_EXP 89
71953: PUSH
71954: LD_VAR 0 2
71958: ARRAY
71959: IN
71960: NOT
71961: IFFALSE 71965
// continue ;
71963: GO 71667
// end else
71965: GO 72030
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
71967: LD_ADDR_VAR 0 5
71971: PUSH
71972: LD_EXP 58
71976: PUSH
71977: LD_VAR 0 2
71981: ARRAY
71982: PPUSH
71983: LD_VAR 0 4
71987: PPUSH
71988: CALL 56157 0 2
71992: ST_TO_ADDR
// if not tmp2 then
71993: LD_VAR 0 5
71997: NOT
71998: IFFALSE 72002
// continue ;
72000: GO 71667
// tw := tmp2 [ 1 ] ;
72002: LD_ADDR_VAR 0 7
72006: PUSH
72007: LD_VAR 0 5
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
72016: LD_ADDR_VAR 0 9
72020: PUSH
72021: LD_VAR 0 5
72025: PUSH
72026: LD_INT 2
72028: ARRAY
72029: ST_TO_ADDR
// end ; if not weapon then
72030: LD_VAR 0 9
72034: NOT
72035: IFFALSE 72039
// continue ;
72037: GO 71667
// ComPlaceWeapon ( tw , weapon ) ;
72039: LD_VAR 0 7
72043: PPUSH
72044: LD_VAR 0 9
72048: PPUSH
72049: CALL_OW 148
// end ;
72053: GO 71667
72055: POP
72056: POP
// end ;
72057: LD_VAR 0 1
72061: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
72062: LD_INT 0
72064: PPUSH
72065: PPUSH
72066: PPUSH
72067: PPUSH
72068: PPUSH
72069: PPUSH
72070: PPUSH
// if not mc_bases then
72071: LD_EXP 50
72075: NOT
72076: IFFALSE 72080
// exit ;
72078: GO 72848
// for i = 1 to mc_bases do
72080: LD_ADDR_VAR 0 2
72084: PUSH
72085: DOUBLE
72086: LD_INT 1
72088: DEC
72089: ST_TO_ADDR
72090: LD_EXP 50
72094: PUSH
72095: FOR_TO
72096: IFFALSE 72846
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
72098: LD_EXP 63
72102: PUSH
72103: LD_VAR 0 2
72107: ARRAY
72108: NOT
72109: PUSH
72110: LD_EXP 63
72114: PUSH
72115: LD_VAR 0 2
72119: ARRAY
72120: PUSH
72121: LD_EXP 64
72125: PUSH
72126: LD_VAR 0 2
72130: ARRAY
72131: EQUAL
72132: OR
72133: PUSH
72134: LD_EXP 73
72138: PUSH
72139: LD_VAR 0 2
72143: ARRAY
72144: OR
72145: IFFALSE 72149
// continue ;
72147: GO 72095
// if mc_miners [ i ] then
72149: LD_EXP 64
72153: PUSH
72154: LD_VAR 0 2
72158: ARRAY
72159: IFFALSE 72533
// begin for j = mc_miners [ i ] downto 1 do
72161: LD_ADDR_VAR 0 3
72165: PUSH
72166: DOUBLE
72167: LD_EXP 64
72171: PUSH
72172: LD_VAR 0 2
72176: ARRAY
72177: INC
72178: ST_TO_ADDR
72179: LD_INT 1
72181: PUSH
72182: FOR_DOWNTO
72183: IFFALSE 72531
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
72185: LD_EXP 64
72189: PUSH
72190: LD_VAR 0 2
72194: ARRAY
72195: PUSH
72196: LD_VAR 0 3
72200: ARRAY
72201: PPUSH
72202: CALL_OW 301
72206: PUSH
72207: LD_EXP 64
72211: PUSH
72212: LD_VAR 0 2
72216: ARRAY
72217: PUSH
72218: LD_VAR 0 3
72222: ARRAY
72223: PPUSH
72224: CALL_OW 257
72228: PUSH
72229: LD_INT 1
72231: NONEQUAL
72232: OR
72233: IFFALSE 72296
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
72235: LD_ADDR_VAR 0 5
72239: PUSH
72240: LD_EXP 64
72244: PUSH
72245: LD_VAR 0 2
72249: ARRAY
72250: PUSH
72251: LD_EXP 64
72255: PUSH
72256: LD_VAR 0 2
72260: ARRAY
72261: PUSH
72262: LD_VAR 0 3
72266: ARRAY
72267: DIFF
72268: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
72269: LD_ADDR_EXP 64
72273: PUSH
72274: LD_EXP 64
72278: PPUSH
72279: LD_VAR 0 2
72283: PPUSH
72284: LD_VAR 0 5
72288: PPUSH
72289: CALL_OW 1
72293: ST_TO_ADDR
// continue ;
72294: GO 72182
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
72296: LD_EXP 64
72300: PUSH
72301: LD_VAR 0 2
72305: ARRAY
72306: PUSH
72307: LD_VAR 0 3
72311: ARRAY
72312: PPUSH
72313: CALL_OW 257
72317: PUSH
72318: LD_INT 1
72320: EQUAL
72321: PUSH
72322: LD_EXP 64
72326: PUSH
72327: LD_VAR 0 2
72331: ARRAY
72332: PUSH
72333: LD_VAR 0 3
72337: ARRAY
72338: PPUSH
72339: CALL_OW 459
72343: NOT
72344: AND
72345: PUSH
72346: LD_EXP 64
72350: PUSH
72351: LD_VAR 0 2
72355: ARRAY
72356: PUSH
72357: LD_VAR 0 3
72361: ARRAY
72362: PPUSH
72363: CALL_OW 314
72367: NOT
72368: AND
72369: IFFALSE 72529
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
72371: LD_EXP 64
72375: PUSH
72376: LD_VAR 0 2
72380: ARRAY
72381: PUSH
72382: LD_VAR 0 3
72386: ARRAY
72387: PPUSH
72388: CALL_OW 310
72392: IFFALSE 72415
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
72394: LD_EXP 64
72398: PUSH
72399: LD_VAR 0 2
72403: ARRAY
72404: PUSH
72405: LD_VAR 0 3
72409: ARRAY
72410: PPUSH
72411: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
72415: LD_EXP 64
72419: PUSH
72420: LD_VAR 0 2
72424: ARRAY
72425: PUSH
72426: LD_VAR 0 3
72430: ARRAY
72431: PPUSH
72432: CALL_OW 314
72436: NOT
72437: IFFALSE 72529
// begin r := rand ( 1 , mc_mines [ i ] ) ;
72439: LD_ADDR_VAR 0 7
72443: PUSH
72444: LD_INT 1
72446: PPUSH
72447: LD_EXP 63
72451: PUSH
72452: LD_VAR 0 2
72456: ARRAY
72457: PPUSH
72458: CALL_OW 12
72462: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
72463: LD_EXP 64
72467: PUSH
72468: LD_VAR 0 2
72472: ARRAY
72473: PUSH
72474: LD_VAR 0 3
72478: ARRAY
72479: PPUSH
72480: LD_EXP 63
72484: PUSH
72485: LD_VAR 0 2
72489: ARRAY
72490: PUSH
72491: LD_VAR 0 7
72495: ARRAY
72496: PUSH
72497: LD_INT 1
72499: ARRAY
72500: PPUSH
72501: LD_EXP 63
72505: PUSH
72506: LD_VAR 0 2
72510: ARRAY
72511: PUSH
72512: LD_VAR 0 7
72516: ARRAY
72517: PUSH
72518: LD_INT 2
72520: ARRAY
72521: PPUSH
72522: LD_INT 0
72524: PPUSH
72525: CALL_OW 193
// end ; end ; end ;
72529: GO 72182
72531: POP
72532: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
72533: LD_ADDR_VAR 0 5
72537: PUSH
72538: LD_EXP 50
72542: PUSH
72543: LD_VAR 0 2
72547: ARRAY
72548: PPUSH
72549: LD_INT 2
72551: PUSH
72552: LD_INT 30
72554: PUSH
72555: LD_INT 4
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 30
72564: PUSH
72565: LD_INT 5
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 30
72574: PUSH
72575: LD_INT 32
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: PPUSH
72588: CALL_OW 72
72592: ST_TO_ADDR
// if not tmp then
72593: LD_VAR 0 5
72597: NOT
72598: IFFALSE 72602
// continue ;
72600: GO 72095
// list := [ ] ;
72602: LD_ADDR_VAR 0 6
72606: PUSH
72607: EMPTY
72608: ST_TO_ADDR
// for j in tmp do
72609: LD_ADDR_VAR 0 3
72613: PUSH
72614: LD_VAR 0 5
72618: PUSH
72619: FOR_IN
72620: IFFALSE 72689
// begin for k in UnitsInside ( j ) do
72622: LD_ADDR_VAR 0 4
72626: PUSH
72627: LD_VAR 0 3
72631: PPUSH
72632: CALL_OW 313
72636: PUSH
72637: FOR_IN
72638: IFFALSE 72685
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
72640: LD_VAR 0 4
72644: PPUSH
72645: CALL_OW 257
72649: PUSH
72650: LD_INT 1
72652: EQUAL
72653: PUSH
72654: LD_VAR 0 4
72658: PPUSH
72659: CALL_OW 459
72663: NOT
72664: AND
72665: IFFALSE 72683
// list := list ^ k ;
72667: LD_ADDR_VAR 0 6
72671: PUSH
72672: LD_VAR 0 6
72676: PUSH
72677: LD_VAR 0 4
72681: ADD
72682: ST_TO_ADDR
72683: GO 72637
72685: POP
72686: POP
// end ;
72687: GO 72619
72689: POP
72690: POP
// list := list diff mc_miners [ i ] ;
72691: LD_ADDR_VAR 0 6
72695: PUSH
72696: LD_VAR 0 6
72700: PUSH
72701: LD_EXP 64
72705: PUSH
72706: LD_VAR 0 2
72710: ARRAY
72711: DIFF
72712: ST_TO_ADDR
// if not list then
72713: LD_VAR 0 6
72717: NOT
72718: IFFALSE 72722
// continue ;
72720: GO 72095
// k := mc_mines [ i ] - mc_miners [ i ] ;
72722: LD_ADDR_VAR 0 4
72726: PUSH
72727: LD_EXP 63
72731: PUSH
72732: LD_VAR 0 2
72736: ARRAY
72737: PUSH
72738: LD_EXP 64
72742: PUSH
72743: LD_VAR 0 2
72747: ARRAY
72748: MINUS
72749: ST_TO_ADDR
// if k > list then
72750: LD_VAR 0 4
72754: PUSH
72755: LD_VAR 0 6
72759: GREATER
72760: IFFALSE 72772
// k := list ;
72762: LD_ADDR_VAR 0 4
72766: PUSH
72767: LD_VAR 0 6
72771: ST_TO_ADDR
// for j = 1 to k do
72772: LD_ADDR_VAR 0 3
72776: PUSH
72777: DOUBLE
72778: LD_INT 1
72780: DEC
72781: ST_TO_ADDR
72782: LD_VAR 0 4
72786: PUSH
72787: FOR_TO
72788: IFFALSE 72842
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
72790: LD_ADDR_EXP 64
72794: PUSH
72795: LD_EXP 64
72799: PPUSH
72800: LD_VAR 0 2
72804: PUSH
72805: LD_EXP 64
72809: PUSH
72810: LD_VAR 0 2
72814: ARRAY
72815: PUSH
72816: LD_INT 1
72818: PLUS
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PPUSH
72824: LD_VAR 0 6
72828: PUSH
72829: LD_VAR 0 3
72833: ARRAY
72834: PPUSH
72835: CALL 24858 0 3
72839: ST_TO_ADDR
72840: GO 72787
72842: POP
72843: POP
// end ;
72844: GO 72095
72846: POP
72847: POP
// end ;
72848: LD_VAR 0 1
72852: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
72853: LD_INT 0
72855: PPUSH
72856: PPUSH
72857: PPUSH
72858: PPUSH
72859: PPUSH
72860: PPUSH
72861: PPUSH
72862: PPUSH
72863: PPUSH
72864: PPUSH
72865: PPUSH
// if not mc_bases then
72866: LD_EXP 50
72870: NOT
72871: IFFALSE 72875
// exit ;
72873: GO 74698
// for i = 1 to mc_bases do
72875: LD_ADDR_VAR 0 2
72879: PUSH
72880: DOUBLE
72881: LD_INT 1
72883: DEC
72884: ST_TO_ADDR
72885: LD_EXP 50
72889: PUSH
72890: FOR_TO
72891: IFFALSE 74696
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
72893: LD_EXP 50
72897: PUSH
72898: LD_VAR 0 2
72902: ARRAY
72903: NOT
72904: PUSH
72905: LD_EXP 57
72909: PUSH
72910: LD_VAR 0 2
72914: ARRAY
72915: OR
72916: IFFALSE 72920
// continue ;
72918: GO 72890
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
72920: LD_EXP 66
72924: PUSH
72925: LD_VAR 0 2
72929: ARRAY
72930: NOT
72931: PUSH
72932: LD_EXP 67
72936: PUSH
72937: LD_VAR 0 2
72941: ARRAY
72942: AND
72943: IFFALSE 72981
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
72945: LD_ADDR_EXP 67
72949: PUSH
72950: LD_EXP 67
72954: PPUSH
72955: LD_VAR 0 2
72959: PPUSH
72960: EMPTY
72961: PPUSH
72962: CALL_OW 1
72966: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
72967: LD_VAR 0 2
72971: PPUSH
72972: LD_INT 107
72974: PPUSH
72975: CALL 63749 0 2
// continue ;
72979: GO 72890
// end ; target := [ ] ;
72981: LD_ADDR_VAR 0 7
72985: PUSH
72986: EMPTY
72987: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
72988: LD_ADDR_VAR 0 6
72992: PUSH
72993: LD_EXP 50
72997: PUSH
72998: LD_VAR 0 2
73002: ARRAY
73003: PUSH
73004: LD_INT 1
73006: ARRAY
73007: PPUSH
73008: CALL_OW 255
73012: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73013: LD_ADDR_VAR 0 9
73017: PUSH
73018: LD_EXP 50
73022: PUSH
73023: LD_VAR 0 2
73027: ARRAY
73028: PPUSH
73029: LD_INT 2
73031: PUSH
73032: LD_INT 30
73034: PUSH
73035: LD_INT 0
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 30
73044: PUSH
73045: LD_INT 1
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: PPUSH
73057: CALL_OW 72
73061: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
73062: LD_ADDR_VAR 0 3
73066: PUSH
73067: DOUBLE
73068: LD_EXP 66
73072: PUSH
73073: LD_VAR 0 2
73077: ARRAY
73078: INC
73079: ST_TO_ADDR
73080: LD_INT 1
73082: PUSH
73083: FOR_DOWNTO
73084: IFFALSE 73329
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
73086: LD_EXP 66
73090: PUSH
73091: LD_VAR 0 2
73095: ARRAY
73096: PUSH
73097: LD_VAR 0 3
73101: ARRAY
73102: PUSH
73103: LD_INT 2
73105: ARRAY
73106: PPUSH
73107: LD_EXP 66
73111: PUSH
73112: LD_VAR 0 2
73116: ARRAY
73117: PUSH
73118: LD_VAR 0 3
73122: ARRAY
73123: PUSH
73124: LD_INT 3
73126: ARRAY
73127: PPUSH
73128: CALL_OW 488
73132: PUSH
73133: LD_EXP 66
73137: PUSH
73138: LD_VAR 0 2
73142: ARRAY
73143: PUSH
73144: LD_VAR 0 3
73148: ARRAY
73149: PUSH
73150: LD_INT 2
73152: ARRAY
73153: PPUSH
73154: LD_EXP 66
73158: PUSH
73159: LD_VAR 0 2
73163: ARRAY
73164: PUSH
73165: LD_VAR 0 3
73169: ARRAY
73170: PUSH
73171: LD_INT 3
73173: ARRAY
73174: PPUSH
73175: CALL_OW 284
73179: PUSH
73180: LD_INT 0
73182: EQUAL
73183: AND
73184: IFFALSE 73239
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
73186: LD_ADDR_VAR 0 5
73190: PUSH
73191: LD_EXP 66
73195: PUSH
73196: LD_VAR 0 2
73200: ARRAY
73201: PPUSH
73202: LD_VAR 0 3
73206: PPUSH
73207: CALL_OW 3
73211: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
73212: LD_ADDR_EXP 66
73216: PUSH
73217: LD_EXP 66
73221: PPUSH
73222: LD_VAR 0 2
73226: PPUSH
73227: LD_VAR 0 5
73231: PPUSH
73232: CALL_OW 1
73236: ST_TO_ADDR
// continue ;
73237: GO 73083
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
73239: LD_VAR 0 6
73243: PPUSH
73244: LD_EXP 66
73248: PUSH
73249: LD_VAR 0 2
73253: ARRAY
73254: PUSH
73255: LD_VAR 0 3
73259: ARRAY
73260: PUSH
73261: LD_INT 2
73263: ARRAY
73264: PPUSH
73265: LD_EXP 66
73269: PUSH
73270: LD_VAR 0 2
73274: ARRAY
73275: PUSH
73276: LD_VAR 0 3
73280: ARRAY
73281: PUSH
73282: LD_INT 3
73284: ARRAY
73285: PPUSH
73286: LD_INT 30
73288: PPUSH
73289: CALL 25754 0 4
73293: PUSH
73294: LD_INT 4
73296: ARRAY
73297: PUSH
73298: LD_INT 0
73300: EQUAL
73301: IFFALSE 73327
// begin target := mc_crates [ i ] [ j ] ;
73303: LD_ADDR_VAR 0 7
73307: PUSH
73308: LD_EXP 66
73312: PUSH
73313: LD_VAR 0 2
73317: ARRAY
73318: PUSH
73319: LD_VAR 0 3
73323: ARRAY
73324: ST_TO_ADDR
// break ;
73325: GO 73329
// end ; end ;
73327: GO 73083
73329: POP
73330: POP
// if not target then
73331: LD_VAR 0 7
73335: NOT
73336: IFFALSE 73340
// continue ;
73338: GO 72890
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
73340: LD_ADDR_VAR 0 8
73344: PUSH
73345: LD_EXP 69
73349: PUSH
73350: LD_VAR 0 2
73354: ARRAY
73355: PPUSH
73356: LD_INT 2
73358: PUSH
73359: LD_INT 3
73361: PUSH
73362: LD_INT 58
73364: PUSH
73365: EMPTY
73366: LIST
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 61
73374: PUSH
73375: EMPTY
73376: LIST
73377: PUSH
73378: LD_INT 33
73380: PUSH
73381: LD_INT 5
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 33
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 2
73407: PUSH
73408: LD_INT 34
73410: PUSH
73411: LD_INT 32
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 34
73420: PUSH
73421: LD_INT 51
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 34
73430: PUSH
73431: LD_INT 12
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PPUSH
73448: CALL_OW 72
73452: ST_TO_ADDR
// if not cargo then
73453: LD_VAR 0 8
73457: NOT
73458: IFFALSE 74164
// begin if mc_crates_collector [ i ] < 5 then
73460: LD_EXP 67
73464: PUSH
73465: LD_VAR 0 2
73469: ARRAY
73470: PUSH
73471: LD_INT 5
73473: LESS
73474: IFFALSE 73840
// begin if mc_ape [ i ] then
73476: LD_EXP 79
73480: PUSH
73481: LD_VAR 0 2
73485: ARRAY
73486: IFFALSE 73533
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
73488: LD_ADDR_VAR 0 5
73492: PUSH
73493: LD_EXP 79
73497: PUSH
73498: LD_VAR 0 2
73502: ARRAY
73503: PPUSH
73504: LD_INT 25
73506: PUSH
73507: LD_INT 16
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 24
73516: PUSH
73517: LD_INT 750
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PPUSH
73528: CALL_OW 72
73532: ST_TO_ADDR
// if not tmp then
73533: LD_VAR 0 5
73537: NOT
73538: IFFALSE 73585
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
73540: LD_ADDR_VAR 0 5
73544: PUSH
73545: LD_EXP 50
73549: PUSH
73550: LD_VAR 0 2
73554: ARRAY
73555: PPUSH
73556: LD_INT 25
73558: PUSH
73559: LD_INT 2
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 24
73568: PUSH
73569: LD_INT 750
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PPUSH
73580: CALL_OW 72
73584: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
73585: LD_EXP 79
73589: PUSH
73590: LD_VAR 0 2
73594: ARRAY
73595: PUSH
73596: LD_EXP 50
73600: PUSH
73601: LD_VAR 0 2
73605: ARRAY
73606: PPUSH
73607: LD_INT 25
73609: PUSH
73610: LD_INT 2
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 24
73619: PUSH
73620: LD_INT 750
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PPUSH
73631: CALL_OW 72
73635: AND
73636: PUSH
73637: LD_VAR 0 5
73641: PUSH
73642: LD_INT 5
73644: LESS
73645: AND
73646: IFFALSE 73728
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
73648: LD_ADDR_VAR 0 3
73652: PUSH
73653: LD_EXP 50
73657: PUSH
73658: LD_VAR 0 2
73662: ARRAY
73663: PPUSH
73664: LD_INT 25
73666: PUSH
73667: LD_INT 2
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 24
73676: PUSH
73677: LD_INT 750
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PPUSH
73688: CALL_OW 72
73692: PUSH
73693: FOR_IN
73694: IFFALSE 73726
// begin tmp := tmp union j ;
73696: LD_ADDR_VAR 0 5
73700: PUSH
73701: LD_VAR 0 5
73705: PUSH
73706: LD_VAR 0 3
73710: UNION
73711: ST_TO_ADDR
// if tmp >= 5 then
73712: LD_VAR 0 5
73716: PUSH
73717: LD_INT 5
73719: GREATEREQUAL
73720: IFFALSE 73724
// break ;
73722: GO 73726
// end ;
73724: GO 73693
73726: POP
73727: POP
// end ; if not tmp then
73728: LD_VAR 0 5
73732: NOT
73733: IFFALSE 73737
// continue ;
73735: GO 72890
// for j in tmp do
73737: LD_ADDR_VAR 0 3
73741: PUSH
73742: LD_VAR 0 5
73746: PUSH
73747: FOR_IN
73748: IFFALSE 73838
// if not GetTag ( j ) then
73750: LD_VAR 0 3
73754: PPUSH
73755: CALL_OW 110
73759: NOT
73760: IFFALSE 73836
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
73762: LD_ADDR_EXP 67
73766: PUSH
73767: LD_EXP 67
73771: PPUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_EXP 67
73781: PUSH
73782: LD_VAR 0 2
73786: ARRAY
73787: PUSH
73788: LD_INT 1
73790: PLUS
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PPUSH
73796: LD_VAR 0 3
73800: PPUSH
73801: CALL 24858 0 3
73805: ST_TO_ADDR
// SetTag ( j , 107 ) ;
73806: LD_VAR 0 3
73810: PPUSH
73811: LD_INT 107
73813: PPUSH
73814: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
73818: LD_EXP 67
73822: PUSH
73823: LD_VAR 0 2
73827: ARRAY
73828: PUSH
73829: LD_INT 5
73831: GREATEREQUAL
73832: IFFALSE 73836
// break ;
73834: GO 73838
// end ;
73836: GO 73747
73838: POP
73839: POP
// end ; if mc_crates_collector [ i ] and target then
73840: LD_EXP 67
73844: PUSH
73845: LD_VAR 0 2
73849: ARRAY
73850: PUSH
73851: LD_VAR 0 7
73855: AND
73856: IFFALSE 74162
// begin if mc_crates_collector [ i ] < target [ 1 ] then
73858: LD_EXP 67
73862: PUSH
73863: LD_VAR 0 2
73867: ARRAY
73868: PUSH
73869: LD_VAR 0 7
73873: PUSH
73874: LD_INT 1
73876: ARRAY
73877: LESS
73878: IFFALSE 73898
// tmp := mc_crates_collector [ i ] else
73880: LD_ADDR_VAR 0 5
73884: PUSH
73885: LD_EXP 67
73889: PUSH
73890: LD_VAR 0 2
73894: ARRAY
73895: ST_TO_ADDR
73896: GO 73912
// tmp := target [ 1 ] ;
73898: LD_ADDR_VAR 0 5
73902: PUSH
73903: LD_VAR 0 7
73907: PUSH
73908: LD_INT 1
73910: ARRAY
73911: ST_TO_ADDR
// k := 0 ;
73912: LD_ADDR_VAR 0 4
73916: PUSH
73917: LD_INT 0
73919: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
73920: LD_ADDR_VAR 0 3
73924: PUSH
73925: LD_EXP 67
73929: PUSH
73930: LD_VAR 0 2
73934: ARRAY
73935: PUSH
73936: FOR_IN
73937: IFFALSE 74160
// begin k := k + 1 ;
73939: LD_ADDR_VAR 0 4
73943: PUSH
73944: LD_VAR 0 4
73948: PUSH
73949: LD_INT 1
73951: PLUS
73952: ST_TO_ADDR
// if k > tmp then
73953: LD_VAR 0 4
73957: PUSH
73958: LD_VAR 0 5
73962: GREATER
73963: IFFALSE 73967
// break ;
73965: GO 74160
// if not GetClass ( j ) in [ 2 , 16 ] then
73967: LD_VAR 0 3
73971: PPUSH
73972: CALL_OW 257
73976: PUSH
73977: LD_INT 2
73979: PUSH
73980: LD_INT 16
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: IN
73987: NOT
73988: IFFALSE 74041
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
73990: LD_ADDR_EXP 67
73994: PUSH
73995: LD_EXP 67
73999: PPUSH
74000: LD_VAR 0 2
74004: PPUSH
74005: LD_EXP 67
74009: PUSH
74010: LD_VAR 0 2
74014: ARRAY
74015: PUSH
74016: LD_VAR 0 3
74020: DIFF
74021: PPUSH
74022: CALL_OW 1
74026: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74027: LD_VAR 0 3
74031: PPUSH
74032: LD_INT 0
74034: PPUSH
74035: CALL_OW 109
// continue ;
74039: GO 73936
// end ; if IsInUnit ( j ) then
74041: LD_VAR 0 3
74045: PPUSH
74046: CALL_OW 310
74050: IFFALSE 74061
// ComExitBuilding ( j ) ;
74052: LD_VAR 0 3
74056: PPUSH
74057: CALL_OW 122
// wait ( 3 ) ;
74061: LD_INT 3
74063: PPUSH
74064: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
74068: LD_VAR 0 3
74072: PPUSH
74073: CALL_OW 314
74077: PUSH
74078: LD_VAR 0 6
74082: PPUSH
74083: LD_VAR 0 7
74087: PUSH
74088: LD_INT 2
74090: ARRAY
74091: PPUSH
74092: LD_VAR 0 7
74096: PUSH
74097: LD_INT 3
74099: ARRAY
74100: PPUSH
74101: LD_INT 30
74103: PPUSH
74104: CALL 25754 0 4
74108: PUSH
74109: LD_INT 4
74111: ARRAY
74112: AND
74113: IFFALSE 74131
// ComStandNearbyBuilding ( j , depot ) else
74115: LD_VAR 0 3
74119: PPUSH
74120: LD_VAR 0 9
74124: PPUSH
74125: CALL 21436 0 2
74129: GO 74158
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
74131: LD_VAR 0 3
74135: PPUSH
74136: LD_VAR 0 7
74140: PUSH
74141: LD_INT 2
74143: ARRAY
74144: PPUSH
74145: LD_VAR 0 7
74149: PUSH
74150: LD_INT 3
74152: ARRAY
74153: PPUSH
74154: CALL_OW 117
// end ;
74158: GO 73936
74160: POP
74161: POP
// end ; end else
74162: GO 74694
// begin for j in cargo do
74164: LD_ADDR_VAR 0 3
74168: PUSH
74169: LD_VAR 0 8
74173: PUSH
74174: FOR_IN
74175: IFFALSE 74692
// begin if GetTag ( j ) <> 0 then
74177: LD_VAR 0 3
74181: PPUSH
74182: CALL_OW 110
74186: PUSH
74187: LD_INT 0
74189: NONEQUAL
74190: IFFALSE 74194
// continue ;
74192: GO 74174
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
74194: LD_VAR 0 3
74198: PPUSH
74199: CALL_OW 256
74203: PUSH
74204: LD_INT 1000
74206: LESS
74207: PUSH
74208: LD_VAR 0 3
74212: PPUSH
74213: LD_EXP 74
74217: PUSH
74218: LD_VAR 0 2
74222: ARRAY
74223: PPUSH
74224: CALL_OW 308
74228: NOT
74229: AND
74230: IFFALSE 74252
// ComMoveToArea ( j , mc_parking [ i ] ) ;
74232: LD_VAR 0 3
74236: PPUSH
74237: LD_EXP 74
74241: PUSH
74242: LD_VAR 0 2
74246: ARRAY
74247: PPUSH
74248: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
74252: LD_VAR 0 3
74256: PPUSH
74257: CALL_OW 256
74261: PUSH
74262: LD_INT 1000
74264: LESS
74265: PUSH
74266: LD_VAR 0 3
74270: PPUSH
74271: LD_EXP 74
74275: PUSH
74276: LD_VAR 0 2
74280: ARRAY
74281: PPUSH
74282: CALL_OW 308
74286: AND
74287: IFFALSE 74291
// continue ;
74289: GO 74174
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
74291: LD_VAR 0 3
74295: PPUSH
74296: CALL_OW 262
74300: PUSH
74301: LD_INT 2
74303: EQUAL
74304: PUSH
74305: LD_VAR 0 3
74309: PPUSH
74310: CALL_OW 261
74314: PUSH
74315: LD_INT 15
74317: LESS
74318: AND
74319: IFFALSE 74323
// continue ;
74321: GO 74174
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
74323: LD_VAR 0 3
74327: PPUSH
74328: CALL_OW 262
74332: PUSH
74333: LD_INT 1
74335: EQUAL
74336: PUSH
74337: LD_VAR 0 3
74341: PPUSH
74342: CALL_OW 261
74346: PUSH
74347: LD_INT 10
74349: LESS
74350: AND
74351: IFFALSE 74631
// begin if not depot then
74353: LD_VAR 0 9
74357: NOT
74358: IFFALSE 74362
// continue ;
74360: GO 74174
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
74362: LD_VAR 0 3
74366: PPUSH
74367: LD_VAR 0 9
74371: PPUSH
74372: LD_VAR 0 3
74376: PPUSH
74377: CALL_OW 74
74381: PPUSH
74382: CALL_OW 296
74386: PUSH
74387: LD_INT 6
74389: LESS
74390: IFFALSE 74406
// SetFuel ( j , 100 ) else
74392: LD_VAR 0 3
74396: PPUSH
74397: LD_INT 100
74399: PPUSH
74400: CALL_OW 240
74404: GO 74631
// if GetFuel ( j ) = 0 then
74406: LD_VAR 0 3
74410: PPUSH
74411: CALL_OW 261
74415: PUSH
74416: LD_INT 0
74418: EQUAL
74419: IFFALSE 74631
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
74421: LD_ADDR_EXP 69
74425: PUSH
74426: LD_EXP 69
74430: PPUSH
74431: LD_VAR 0 2
74435: PPUSH
74436: LD_EXP 69
74440: PUSH
74441: LD_VAR 0 2
74445: ARRAY
74446: PUSH
74447: LD_VAR 0 3
74451: DIFF
74452: PPUSH
74453: CALL_OW 1
74457: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
74458: LD_VAR 0 3
74462: PPUSH
74463: CALL_OW 263
74467: PUSH
74468: LD_INT 1
74470: EQUAL
74471: IFFALSE 74487
// ComExitVehicle ( IsInUnit ( j ) ) ;
74473: LD_VAR 0 3
74477: PPUSH
74478: CALL_OW 310
74482: PPUSH
74483: CALL_OW 121
// if GetControl ( j ) = control_remote then
74487: LD_VAR 0 3
74491: PPUSH
74492: CALL_OW 263
74496: PUSH
74497: LD_INT 2
74499: EQUAL
74500: IFFALSE 74511
// ComUnlink ( j ) ;
74502: LD_VAR 0 3
74506: PPUSH
74507: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
74511: LD_ADDR_VAR 0 10
74515: PUSH
74516: LD_VAR 0 2
74520: PPUSH
74521: LD_INT 3
74523: PPUSH
74524: CALL 84270 0 2
74528: ST_TO_ADDR
// if fac then
74529: LD_VAR 0 10
74533: IFFALSE 74629
// begin for k in fac do
74535: LD_ADDR_VAR 0 4
74539: PUSH
74540: LD_VAR 0 10
74544: PUSH
74545: FOR_IN
74546: IFFALSE 74627
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
74548: LD_ADDR_VAR 0 11
74552: PUSH
74553: LD_VAR 0 10
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: CALL_OW 265
74567: PPUSH
74568: LD_VAR 0 3
74572: PPUSH
74573: CALL_OW 262
74577: PPUSH
74578: LD_VAR 0 3
74582: PPUSH
74583: CALL_OW 263
74587: PPUSH
74588: LD_VAR 0 3
74592: PPUSH
74593: CALL_OW 264
74597: PPUSH
74598: CALL 22354 0 5
74602: ST_TO_ADDR
// if components then
74603: LD_VAR 0 11
74607: IFFALSE 74625
// begin MC_InsertProduceList ( i , components ) ;
74609: LD_VAR 0 2
74613: PPUSH
74614: LD_VAR 0 11
74618: PPUSH
74619: CALL 83815 0 2
// break ;
74623: GO 74627
// end ; end ;
74625: GO 74545
74627: POP
74628: POP
// end ; continue ;
74629: GO 74174
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
74631: LD_VAR 0 3
74635: PPUSH
74636: LD_INT 1
74638: PPUSH
74639: CALL_OW 289
74643: PUSH
74644: LD_INT 100
74646: LESS
74647: PUSH
74648: LD_VAR 0 3
74652: PPUSH
74653: CALL_OW 314
74657: NOT
74658: AND
74659: IFFALSE 74688
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
74661: LD_VAR 0 3
74665: PPUSH
74666: LD_VAR 0 7
74670: PUSH
74671: LD_INT 2
74673: ARRAY
74674: PPUSH
74675: LD_VAR 0 7
74679: PUSH
74680: LD_INT 3
74682: ARRAY
74683: PPUSH
74684: CALL_OW 117
// break ;
74688: GO 74692
// end ;
74690: GO 74174
74692: POP
74693: POP
// end ; end ;
74694: GO 72890
74696: POP
74697: POP
// end ;
74698: LD_VAR 0 1
74702: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
74703: LD_INT 0
74705: PPUSH
74706: PPUSH
74707: PPUSH
74708: PPUSH
// if not mc_bases then
74709: LD_EXP 50
74713: NOT
74714: IFFALSE 74718
// exit ;
74716: GO 74879
// for i = 1 to mc_bases do
74718: LD_ADDR_VAR 0 2
74722: PUSH
74723: DOUBLE
74724: LD_INT 1
74726: DEC
74727: ST_TO_ADDR
74728: LD_EXP 50
74732: PUSH
74733: FOR_TO
74734: IFFALSE 74877
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
74736: LD_ADDR_VAR 0 4
74740: PUSH
74741: LD_EXP 69
74745: PUSH
74746: LD_VAR 0 2
74750: ARRAY
74751: PUSH
74752: LD_EXP 72
74756: PUSH
74757: LD_VAR 0 2
74761: ARRAY
74762: UNION
74763: PPUSH
74764: LD_INT 33
74766: PUSH
74767: LD_INT 2
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PPUSH
74774: CALL_OW 72
74778: ST_TO_ADDR
// if tmp then
74779: LD_VAR 0 4
74783: IFFALSE 74875
// for j in tmp do
74785: LD_ADDR_VAR 0 3
74789: PUSH
74790: LD_VAR 0 4
74794: PUSH
74795: FOR_IN
74796: IFFALSE 74873
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
74798: LD_VAR 0 3
74802: PPUSH
74803: CALL_OW 312
74807: NOT
74808: PUSH
74809: LD_VAR 0 3
74813: PPUSH
74814: CALL_OW 256
74818: PUSH
74819: LD_INT 250
74821: GREATEREQUAL
74822: AND
74823: IFFALSE 74836
// Connect ( j ) else
74825: LD_VAR 0 3
74829: PPUSH
74830: CALL 27829 0 1
74834: GO 74871
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
74836: LD_VAR 0 3
74840: PPUSH
74841: CALL_OW 256
74845: PUSH
74846: LD_INT 250
74848: LESS
74849: PUSH
74850: LD_VAR 0 3
74854: PPUSH
74855: CALL_OW 312
74859: AND
74860: IFFALSE 74871
// ComUnlink ( j ) ;
74862: LD_VAR 0 3
74866: PPUSH
74867: CALL_OW 136
74871: GO 74795
74873: POP
74874: POP
// end ;
74875: GO 74733
74877: POP
74878: POP
// end ;
74879: LD_VAR 0 1
74883: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
74884: LD_INT 0
74886: PPUSH
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
// if not mc_bases then
74891: LD_EXP 50
74895: NOT
74896: IFFALSE 74900
// exit ;
74898: GO 75345
// for i = 1 to mc_bases do
74900: LD_ADDR_VAR 0 2
74904: PUSH
74905: DOUBLE
74906: LD_INT 1
74908: DEC
74909: ST_TO_ADDR
74910: LD_EXP 50
74914: PUSH
74915: FOR_TO
74916: IFFALSE 75343
// begin if not mc_produce [ i ] then
74918: LD_EXP 71
74922: PUSH
74923: LD_VAR 0 2
74927: ARRAY
74928: NOT
74929: IFFALSE 74933
// continue ;
74931: GO 74915
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74933: LD_ADDR_VAR 0 5
74937: PUSH
74938: LD_EXP 50
74942: PUSH
74943: LD_VAR 0 2
74947: ARRAY
74948: PPUSH
74949: LD_INT 30
74951: PUSH
74952: LD_INT 3
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PPUSH
74959: CALL_OW 72
74963: ST_TO_ADDR
// if not fac then
74964: LD_VAR 0 5
74968: NOT
74969: IFFALSE 74973
// continue ;
74971: GO 74915
// for j in fac do
74973: LD_ADDR_VAR 0 3
74977: PUSH
74978: LD_VAR 0 5
74982: PUSH
74983: FOR_IN
74984: IFFALSE 75339
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
74986: LD_VAR 0 3
74990: PPUSH
74991: CALL_OW 461
74995: PUSH
74996: LD_INT 2
74998: NONEQUAL
74999: PUSH
75000: LD_VAR 0 3
75004: PPUSH
75005: LD_INT 15
75007: PPUSH
75008: CALL 27457 0 2
75012: PUSH
75013: LD_INT 4
75015: ARRAY
75016: OR
75017: IFFALSE 75021
// continue ;
75019: GO 74983
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
75021: LD_VAR 0 3
75025: PPUSH
75026: LD_EXP 71
75030: PUSH
75031: LD_VAR 0 2
75035: ARRAY
75036: PUSH
75037: LD_INT 1
75039: ARRAY
75040: PUSH
75041: LD_INT 1
75043: ARRAY
75044: PPUSH
75045: LD_EXP 71
75049: PUSH
75050: LD_VAR 0 2
75054: ARRAY
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PUSH
75060: LD_INT 2
75062: ARRAY
75063: PPUSH
75064: LD_EXP 71
75068: PUSH
75069: LD_VAR 0 2
75073: ARRAY
75074: PUSH
75075: LD_INT 1
75077: ARRAY
75078: PUSH
75079: LD_INT 3
75081: ARRAY
75082: PPUSH
75083: LD_EXP 71
75087: PUSH
75088: LD_VAR 0 2
75092: ARRAY
75093: PUSH
75094: LD_INT 1
75096: ARRAY
75097: PUSH
75098: LD_INT 4
75100: ARRAY
75101: PPUSH
75102: CALL_OW 448
75106: PUSH
75107: LD_VAR 0 3
75111: PPUSH
75112: LD_EXP 71
75116: PUSH
75117: LD_VAR 0 2
75121: ARRAY
75122: PUSH
75123: LD_INT 1
75125: ARRAY
75126: PUSH
75127: LD_INT 1
75129: ARRAY
75130: PUSH
75131: LD_EXP 71
75135: PUSH
75136: LD_VAR 0 2
75140: ARRAY
75141: PUSH
75142: LD_INT 1
75144: ARRAY
75145: PUSH
75146: LD_INT 2
75148: ARRAY
75149: PUSH
75150: LD_EXP 71
75154: PUSH
75155: LD_VAR 0 2
75159: ARRAY
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: PUSH
75165: LD_INT 3
75167: ARRAY
75168: PUSH
75169: LD_EXP 71
75173: PUSH
75174: LD_VAR 0 2
75178: ARRAY
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PUSH
75184: LD_INT 4
75186: ARRAY
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: PPUSH
75194: CALL 31224 0 2
75198: AND
75199: IFFALSE 75337
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
75201: LD_VAR 0 3
75205: PPUSH
75206: LD_EXP 71
75210: PUSH
75211: LD_VAR 0 2
75215: ARRAY
75216: PUSH
75217: LD_INT 1
75219: ARRAY
75220: PUSH
75221: LD_INT 1
75223: ARRAY
75224: PPUSH
75225: LD_EXP 71
75229: PUSH
75230: LD_VAR 0 2
75234: ARRAY
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PUSH
75240: LD_INT 2
75242: ARRAY
75243: PPUSH
75244: LD_EXP 71
75248: PUSH
75249: LD_VAR 0 2
75253: ARRAY
75254: PUSH
75255: LD_INT 1
75257: ARRAY
75258: PUSH
75259: LD_INT 3
75261: ARRAY
75262: PPUSH
75263: LD_EXP 71
75267: PUSH
75268: LD_VAR 0 2
75272: ARRAY
75273: PUSH
75274: LD_INT 1
75276: ARRAY
75277: PUSH
75278: LD_INT 4
75280: ARRAY
75281: PPUSH
75282: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
75286: LD_ADDR_VAR 0 4
75290: PUSH
75291: LD_EXP 71
75295: PUSH
75296: LD_VAR 0 2
75300: ARRAY
75301: PPUSH
75302: LD_INT 1
75304: PPUSH
75305: CALL_OW 3
75309: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
75310: LD_ADDR_EXP 71
75314: PUSH
75315: LD_EXP 71
75319: PPUSH
75320: LD_VAR 0 2
75324: PPUSH
75325: LD_VAR 0 4
75329: PPUSH
75330: CALL_OW 1
75334: ST_TO_ADDR
// break ;
75335: GO 75339
// end ; end ;
75337: GO 74983
75339: POP
75340: POP
// end ;
75341: GO 74915
75343: POP
75344: POP
// end ;
75345: LD_VAR 0 1
75349: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
75350: LD_INT 0
75352: PPUSH
75353: PPUSH
75354: PPUSH
// if not mc_bases then
75355: LD_EXP 50
75359: NOT
75360: IFFALSE 75364
// exit ;
75362: GO 75453
// for i = 1 to mc_bases do
75364: LD_ADDR_VAR 0 2
75368: PUSH
75369: DOUBLE
75370: LD_INT 1
75372: DEC
75373: ST_TO_ADDR
75374: LD_EXP 50
75378: PUSH
75379: FOR_TO
75380: IFFALSE 75451
// begin if mc_attack [ i ] then
75382: LD_EXP 70
75386: PUSH
75387: LD_VAR 0 2
75391: ARRAY
75392: IFFALSE 75449
// begin tmp := mc_attack [ i ] [ 1 ] ;
75394: LD_ADDR_VAR 0 3
75398: PUSH
75399: LD_EXP 70
75403: PUSH
75404: LD_VAR 0 2
75408: ARRAY
75409: PUSH
75410: LD_INT 1
75412: ARRAY
75413: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
75414: LD_ADDR_EXP 70
75418: PUSH
75419: LD_EXP 70
75423: PPUSH
75424: LD_VAR 0 2
75428: PPUSH
75429: EMPTY
75430: PPUSH
75431: CALL_OW 1
75435: ST_TO_ADDR
// Attack ( tmp ) ;
75436: LD_VAR 0 3
75440: PPUSH
75441: CALL 107408 0 1
// exit ;
75445: POP
75446: POP
75447: GO 75453
// end ; end ;
75449: GO 75379
75451: POP
75452: POP
// end ;
75453: LD_VAR 0 1
75457: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
75458: LD_INT 0
75460: PPUSH
75461: PPUSH
75462: PPUSH
75463: PPUSH
75464: PPUSH
75465: PPUSH
75466: PPUSH
// if not mc_bases then
75467: LD_EXP 50
75471: NOT
75472: IFFALSE 75476
// exit ;
75474: GO 76333
// for i = 1 to mc_bases do
75476: LD_ADDR_VAR 0 2
75480: PUSH
75481: DOUBLE
75482: LD_INT 1
75484: DEC
75485: ST_TO_ADDR
75486: LD_EXP 50
75490: PUSH
75491: FOR_TO
75492: IFFALSE 76331
// begin if not mc_bases [ i ] then
75494: LD_EXP 50
75498: PUSH
75499: LD_VAR 0 2
75503: ARRAY
75504: NOT
75505: IFFALSE 75509
// continue ;
75507: GO 75491
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
75509: LD_ADDR_VAR 0 7
75513: PUSH
75514: LD_EXP 50
75518: PUSH
75519: LD_VAR 0 2
75523: ARRAY
75524: PUSH
75525: LD_INT 1
75527: ARRAY
75528: PPUSH
75529: CALL 21658 0 1
75533: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
75534: LD_ADDR_EXP 73
75538: PUSH
75539: LD_EXP 73
75543: PPUSH
75544: LD_VAR 0 2
75548: PPUSH
75549: LD_EXP 50
75553: PUSH
75554: LD_VAR 0 2
75558: ARRAY
75559: PUSH
75560: LD_INT 1
75562: ARRAY
75563: PPUSH
75564: CALL_OW 255
75568: PPUSH
75569: LD_EXP 75
75573: PUSH
75574: LD_VAR 0 2
75578: ARRAY
75579: PPUSH
75580: CALL 21623 0 2
75584: PPUSH
75585: CALL_OW 1
75589: ST_TO_ADDR
// if not mc_scan [ i ] then
75590: LD_EXP 73
75594: PUSH
75595: LD_VAR 0 2
75599: ARRAY
75600: NOT
75601: IFFALSE 75779
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
75603: LD_ADDR_EXP 93
75607: PUSH
75608: LD_EXP 93
75612: PPUSH
75613: LD_VAR 0 2
75617: PPUSH
75618: LD_INT 0
75620: PPUSH
75621: CALL_OW 1
75625: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
75626: LD_ADDR_VAR 0 4
75630: PUSH
75631: LD_EXP 50
75635: PUSH
75636: LD_VAR 0 2
75640: ARRAY
75641: PPUSH
75642: LD_INT 2
75644: PUSH
75645: LD_INT 25
75647: PUSH
75648: LD_INT 5
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 25
75657: PUSH
75658: LD_INT 8
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 25
75667: PUSH
75668: LD_INT 9
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: PPUSH
75681: CALL_OW 72
75685: ST_TO_ADDR
// if not tmp then
75686: LD_VAR 0 4
75690: NOT
75691: IFFALSE 75695
// continue ;
75693: GO 75491
// for j in tmp do
75695: LD_ADDR_VAR 0 3
75699: PUSH
75700: LD_VAR 0 4
75704: PUSH
75705: FOR_IN
75706: IFFALSE 75777
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
75708: LD_VAR 0 3
75712: PPUSH
75713: CALL_OW 310
75717: PPUSH
75718: CALL_OW 266
75722: PUSH
75723: LD_INT 5
75725: EQUAL
75726: PUSH
75727: LD_VAR 0 3
75731: PPUSH
75732: CALL_OW 257
75736: PUSH
75737: LD_INT 1
75739: EQUAL
75740: AND
75741: PUSH
75742: LD_VAR 0 3
75746: PPUSH
75747: CALL_OW 459
75751: NOT
75752: AND
75753: PUSH
75754: LD_VAR 0 7
75758: AND
75759: IFFALSE 75775
// ComChangeProfession ( j , class ) ;
75761: LD_VAR 0 3
75765: PPUSH
75766: LD_VAR 0 7
75770: PPUSH
75771: CALL_OW 123
75775: GO 75705
75777: POP
75778: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] and ( UnitFilter ( mc_bases [ i ] , [ [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) < 4 or UnitFilter ( mc_bases [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) then
75779: LD_EXP 73
75783: PUSH
75784: LD_VAR 0 2
75788: ARRAY
75789: PUSH
75790: LD_EXP 93
75794: PUSH
75795: LD_VAR 0 2
75799: ARRAY
75800: NOT
75801: AND
75802: PUSH
75803: LD_EXP 72
75807: PUSH
75808: LD_VAR 0 2
75812: ARRAY
75813: NOT
75814: AND
75815: PUSH
75816: LD_EXP 50
75820: PUSH
75821: LD_VAR 0 2
75825: ARRAY
75826: PPUSH
75827: LD_INT 50
75829: PUSH
75830: EMPTY
75831: LIST
75832: PUSH
75833: LD_INT 2
75835: PUSH
75836: LD_INT 30
75838: PUSH
75839: LD_INT 32
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 30
75848: PUSH
75849: LD_INT 33
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 30
75858: PUSH
75859: LD_INT 4
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PUSH
75866: LD_INT 30
75868: PUSH
75869: LD_INT 5
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PPUSH
75887: CALL_OW 72
75891: PUSH
75892: LD_INT 4
75894: LESS
75895: PUSH
75896: LD_EXP 50
75900: PUSH
75901: LD_VAR 0 2
75905: ARRAY
75906: PPUSH
75907: LD_INT 3
75909: PUSH
75910: LD_INT 24
75912: PUSH
75913: LD_INT 1000
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 2
75926: PUSH
75927: LD_INT 30
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 30
75939: PUSH
75940: LD_INT 1
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PPUSH
75956: CALL_OW 72
75960: OR
75961: AND
75962: IFFALSE 76213
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
75964: LD_ADDR_EXP 93
75968: PUSH
75969: LD_EXP 93
75973: PPUSH
75974: LD_VAR 0 2
75978: PPUSH
75979: LD_INT 1
75981: PPUSH
75982: CALL_OW 1
75986: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
75987: LD_ADDR_VAR 0 4
75991: PUSH
75992: LD_EXP 50
75996: PUSH
75997: LD_VAR 0 2
76001: ARRAY
76002: PPUSH
76003: LD_INT 2
76005: PUSH
76006: LD_INT 25
76008: PUSH
76009: LD_INT 1
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 25
76018: PUSH
76019: LD_INT 5
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 25
76028: PUSH
76029: LD_INT 8
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 25
76038: PUSH
76039: LD_INT 9
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: PPUSH
76053: CALL_OW 72
76057: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
76058: LD_ADDR_VAR 0 4
76062: PUSH
76063: LD_VAR 0 4
76067: PUSH
76068: LD_VAR 0 4
76072: PPUSH
76073: LD_INT 18
76075: PPUSH
76076: CALL 54127 0 2
76080: DIFF
76081: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
76082: LD_VAR 0 4
76086: NOT
76087: PUSH
76088: LD_EXP 50
76092: PUSH
76093: LD_VAR 0 2
76097: ARRAY
76098: PPUSH
76099: LD_INT 2
76101: PUSH
76102: LD_INT 30
76104: PUSH
76105: LD_INT 4
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: PUSH
76112: LD_INT 30
76114: PUSH
76115: LD_INT 5
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: PPUSH
76127: CALL_OW 72
76131: NOT
76132: AND
76133: IFFALSE 76195
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
76135: LD_ADDR_VAR 0 4
76139: PUSH
76140: LD_EXP 50
76144: PUSH
76145: LD_VAR 0 2
76149: ARRAY
76150: PPUSH
76151: LD_INT 2
76153: PUSH
76154: LD_INT 25
76156: PUSH
76157: LD_INT 2
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: LD_INT 25
76166: PUSH
76167: LD_INT 3
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 25
76176: PUSH
76177: LD_INT 4
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: PPUSH
76190: CALL_OW 72
76194: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
76195: LD_VAR 0 2
76199: PPUSH
76200: LD_VAR 0 4
76204: PPUSH
76205: CALL 112117 0 2
// exit ;
76209: POP
76210: POP
76211: GO 76333
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
76213: LD_EXP 73
76217: PUSH
76218: LD_VAR 0 2
76222: ARRAY
76223: PUSH
76224: LD_EXP 93
76228: PUSH
76229: LD_VAR 0 2
76233: ARRAY
76234: NOT
76235: AND
76236: PUSH
76237: LD_EXP 72
76241: PUSH
76242: LD_VAR 0 2
76246: ARRAY
76247: AND
76248: IFFALSE 76329
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
76250: LD_ADDR_EXP 93
76254: PUSH
76255: LD_EXP 93
76259: PPUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: LD_INT 1
76267: PPUSH
76268: CALL_OW 1
76272: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
76273: LD_ADDR_VAR 0 4
76277: PUSH
76278: LD_EXP 72
76282: PUSH
76283: LD_VAR 0 2
76287: ARRAY
76288: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
76289: LD_ADDR_EXP 72
76293: PUSH
76294: LD_EXP 72
76298: PPUSH
76299: LD_VAR 0 2
76303: PPUSH
76304: EMPTY
76305: PPUSH
76306: CALL_OW 1
76310: ST_TO_ADDR
// Defend ( i , tmp ) ;
76311: LD_VAR 0 2
76315: PPUSH
76316: LD_VAR 0 4
76320: PPUSH
76321: CALL 112713 0 2
// exit ;
76325: POP
76326: POP
76327: GO 76333
// end ; end ;
76329: GO 75491
76331: POP
76332: POP
// end ;
76333: LD_VAR 0 1
76337: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
76338: LD_INT 0
76340: PPUSH
76341: PPUSH
76342: PPUSH
76343: PPUSH
76344: PPUSH
76345: PPUSH
76346: PPUSH
76347: PPUSH
76348: PPUSH
76349: PPUSH
76350: PPUSH
// if not mc_bases then
76351: LD_EXP 50
76355: NOT
76356: IFFALSE 76360
// exit ;
76358: GO 77447
// for i = 1 to mc_bases do
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: DOUBLE
76366: LD_INT 1
76368: DEC
76369: ST_TO_ADDR
76370: LD_EXP 50
76374: PUSH
76375: FOR_TO
76376: IFFALSE 77445
// begin tmp := mc_lab [ i ] ;
76378: LD_ADDR_VAR 0 6
76382: PUSH
76383: LD_EXP 83
76387: PUSH
76388: LD_VAR 0 2
76392: ARRAY
76393: ST_TO_ADDR
// if not tmp then
76394: LD_VAR 0 6
76398: NOT
76399: IFFALSE 76403
// continue ;
76401: GO 76375
// idle_lab := 0 ;
76403: LD_ADDR_VAR 0 11
76407: PUSH
76408: LD_INT 0
76410: ST_TO_ADDR
// for j in tmp do
76411: LD_ADDR_VAR 0 3
76415: PUSH
76416: LD_VAR 0 6
76420: PUSH
76421: FOR_IN
76422: IFFALSE 77441
// begin researching := false ;
76424: LD_ADDR_VAR 0 10
76428: PUSH
76429: LD_INT 0
76431: ST_TO_ADDR
// side := GetSide ( j ) ;
76432: LD_ADDR_VAR 0 4
76436: PUSH
76437: LD_VAR 0 3
76441: PPUSH
76442: CALL_OW 255
76446: ST_TO_ADDR
// if not mc_tech [ side ] then
76447: LD_EXP 77
76451: PUSH
76452: LD_VAR 0 4
76456: ARRAY
76457: NOT
76458: IFFALSE 76462
// continue ;
76460: GO 76421
// if BuildingStatus ( j ) = bs_idle then
76462: LD_VAR 0 3
76466: PPUSH
76467: CALL_OW 461
76471: PUSH
76472: LD_INT 2
76474: EQUAL
76475: IFFALSE 76663
// begin if idle_lab and UnitsInside ( j ) < 6 then
76477: LD_VAR 0 11
76481: PUSH
76482: LD_VAR 0 3
76486: PPUSH
76487: CALL_OW 313
76491: PUSH
76492: LD_INT 6
76494: LESS
76495: AND
76496: IFFALSE 76567
// begin tmp2 := UnitsInside ( idle_lab ) ;
76498: LD_ADDR_VAR 0 9
76502: PUSH
76503: LD_VAR 0 11
76507: PPUSH
76508: CALL_OW 313
76512: ST_TO_ADDR
// if tmp2 then
76513: LD_VAR 0 9
76517: IFFALSE 76559
// for x in tmp2 do
76519: LD_ADDR_VAR 0 7
76523: PUSH
76524: LD_VAR 0 9
76528: PUSH
76529: FOR_IN
76530: IFFALSE 76557
// begin ComExitBuilding ( x ) ;
76532: LD_VAR 0 7
76536: PPUSH
76537: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
76541: LD_VAR 0 7
76545: PPUSH
76546: LD_VAR 0 3
76550: PPUSH
76551: CALL_OW 180
// end ;
76555: GO 76529
76557: POP
76558: POP
// idle_lab := 0 ;
76559: LD_ADDR_VAR 0 11
76563: PUSH
76564: LD_INT 0
76566: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
76567: LD_ADDR_VAR 0 5
76571: PUSH
76572: LD_EXP 77
76576: PUSH
76577: LD_VAR 0 4
76581: ARRAY
76582: PUSH
76583: FOR_IN
76584: IFFALSE 76644
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
76586: LD_VAR 0 3
76590: PPUSH
76591: LD_VAR 0 5
76595: PPUSH
76596: CALL_OW 430
76600: PUSH
76601: LD_VAR 0 4
76605: PPUSH
76606: LD_VAR 0 5
76610: PPUSH
76611: CALL 20728 0 2
76615: AND
76616: IFFALSE 76642
// begin researching := true ;
76618: LD_ADDR_VAR 0 10
76622: PUSH
76623: LD_INT 1
76625: ST_TO_ADDR
// ComResearch ( j , t ) ;
76626: LD_VAR 0 3
76630: PPUSH
76631: LD_VAR 0 5
76635: PPUSH
76636: CALL_OW 124
// break ;
76640: GO 76644
// end ;
76642: GO 76583
76644: POP
76645: POP
// if not researching then
76646: LD_VAR 0 10
76650: NOT
76651: IFFALSE 76663
// idle_lab := j ;
76653: LD_ADDR_VAR 0 11
76657: PUSH
76658: LD_VAR 0 3
76662: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
76663: LD_VAR 0 3
76667: PPUSH
76668: CALL_OW 461
76672: PUSH
76673: LD_INT 10
76675: EQUAL
76676: IFFALSE 77264
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
76678: LD_EXP 79
76682: PUSH
76683: LD_VAR 0 2
76687: ARRAY
76688: NOT
76689: PUSH
76690: LD_EXP 80
76694: PUSH
76695: LD_VAR 0 2
76699: ARRAY
76700: NOT
76701: AND
76702: PUSH
76703: LD_EXP 77
76707: PUSH
76708: LD_VAR 0 4
76712: ARRAY
76713: PUSH
76714: LD_INT 1
76716: GREATER
76717: AND
76718: IFFALSE 76849
// begin ComCancel ( j ) ;
76720: LD_VAR 0 3
76724: PPUSH
76725: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
76729: LD_ADDR_EXP 77
76733: PUSH
76734: LD_EXP 77
76738: PPUSH
76739: LD_VAR 0 4
76743: PPUSH
76744: LD_EXP 77
76748: PUSH
76749: LD_VAR 0 4
76753: ARRAY
76754: PPUSH
76755: LD_EXP 77
76759: PUSH
76760: LD_VAR 0 4
76764: ARRAY
76765: PUSH
76766: LD_INT 1
76768: MINUS
76769: PPUSH
76770: LD_EXP 77
76774: PUSH
76775: LD_VAR 0 4
76779: ARRAY
76780: PPUSH
76781: LD_INT 0
76783: PPUSH
76784: CALL 24276 0 4
76788: PPUSH
76789: CALL_OW 1
76793: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
76794: LD_ADDR_EXP 77
76798: PUSH
76799: LD_EXP 77
76803: PPUSH
76804: LD_VAR 0 4
76808: PPUSH
76809: LD_EXP 77
76813: PUSH
76814: LD_VAR 0 4
76818: ARRAY
76819: PPUSH
76820: LD_EXP 77
76824: PUSH
76825: LD_VAR 0 4
76829: ARRAY
76830: PPUSH
76831: LD_INT 1
76833: PPUSH
76834: LD_INT 0
76836: PPUSH
76837: CALL 24276 0 4
76841: PPUSH
76842: CALL_OW 1
76846: ST_TO_ADDR
// continue ;
76847: GO 76421
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
76849: LD_EXP 79
76853: PUSH
76854: LD_VAR 0 2
76858: ARRAY
76859: PUSH
76860: LD_EXP 80
76864: PUSH
76865: LD_VAR 0 2
76869: ARRAY
76870: NOT
76871: AND
76872: IFFALSE 76999
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
76874: LD_ADDR_EXP 80
76878: PUSH
76879: LD_EXP 80
76883: PPUSH
76884: LD_VAR 0 2
76888: PUSH
76889: LD_EXP 80
76893: PUSH
76894: LD_VAR 0 2
76898: ARRAY
76899: PUSH
76900: LD_INT 1
76902: PLUS
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PPUSH
76908: LD_EXP 79
76912: PUSH
76913: LD_VAR 0 2
76917: ARRAY
76918: PUSH
76919: LD_INT 1
76921: ARRAY
76922: PPUSH
76923: CALL 24858 0 3
76927: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
76928: LD_EXP 79
76932: PUSH
76933: LD_VAR 0 2
76937: ARRAY
76938: PUSH
76939: LD_INT 1
76941: ARRAY
76942: PPUSH
76943: LD_INT 112
76945: PPUSH
76946: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
76950: LD_ADDR_VAR 0 9
76954: PUSH
76955: LD_EXP 79
76959: PUSH
76960: LD_VAR 0 2
76964: ARRAY
76965: PPUSH
76966: LD_INT 1
76968: PPUSH
76969: CALL_OW 3
76973: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
76974: LD_ADDR_EXP 79
76978: PUSH
76979: LD_EXP 79
76983: PPUSH
76984: LD_VAR 0 2
76988: PPUSH
76989: LD_VAR 0 9
76993: PPUSH
76994: CALL_OW 1
76998: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
76999: LD_EXP 79
77003: PUSH
77004: LD_VAR 0 2
77008: ARRAY
77009: PUSH
77010: LD_EXP 80
77014: PUSH
77015: LD_VAR 0 2
77019: ARRAY
77020: AND
77021: PUSH
77022: LD_EXP 80
77026: PUSH
77027: LD_VAR 0 2
77031: ARRAY
77032: PUSH
77033: LD_INT 1
77035: ARRAY
77036: PPUSH
77037: CALL_OW 310
77041: NOT
77042: AND
77043: PUSH
77044: LD_VAR 0 3
77048: PPUSH
77049: CALL_OW 313
77053: PUSH
77054: LD_INT 6
77056: EQUAL
77057: AND
77058: IFFALSE 77114
// begin tmp2 := UnitsInside ( j ) ;
77060: LD_ADDR_VAR 0 9
77064: PUSH
77065: LD_VAR 0 3
77069: PPUSH
77070: CALL_OW 313
77074: ST_TO_ADDR
// if tmp2 = 6 then
77075: LD_VAR 0 9
77079: PUSH
77080: LD_INT 6
77082: EQUAL
77083: IFFALSE 77114
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
77085: LD_VAR 0 9
77089: PUSH
77090: LD_INT 1
77092: ARRAY
77093: PPUSH
77094: LD_INT 112
77096: PPUSH
77097: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
77101: LD_VAR 0 9
77105: PUSH
77106: LD_INT 1
77108: ARRAY
77109: PPUSH
77110: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
77114: LD_EXP 80
77118: PUSH
77119: LD_VAR 0 2
77123: ARRAY
77124: PUSH
77125: LD_EXP 80
77129: PUSH
77130: LD_VAR 0 2
77134: ARRAY
77135: PUSH
77136: LD_INT 1
77138: ARRAY
77139: PPUSH
77140: CALL_OW 314
77144: NOT
77145: AND
77146: PUSH
77147: LD_EXP 80
77151: PUSH
77152: LD_VAR 0 2
77156: ARRAY
77157: PUSH
77158: LD_INT 1
77160: ARRAY
77161: PPUSH
77162: CALL_OW 310
77166: NOT
77167: AND
77168: IFFALSE 77194
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
77170: LD_EXP 80
77174: PUSH
77175: LD_VAR 0 2
77179: ARRAY
77180: PUSH
77181: LD_INT 1
77183: ARRAY
77184: PPUSH
77185: LD_VAR 0 3
77189: PPUSH
77190: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
77194: LD_EXP 80
77198: PUSH
77199: LD_VAR 0 2
77203: ARRAY
77204: PUSH
77205: LD_INT 1
77207: ARRAY
77208: PPUSH
77209: CALL_OW 310
77213: PUSH
77214: LD_EXP 80
77218: PUSH
77219: LD_VAR 0 2
77223: ARRAY
77224: PUSH
77225: LD_INT 1
77227: ARRAY
77228: PPUSH
77229: CALL_OW 310
77233: PPUSH
77234: CALL_OW 461
77238: PUSH
77239: LD_INT 3
77241: NONEQUAL
77242: AND
77243: IFFALSE 77264
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
77245: LD_EXP 80
77249: PUSH
77250: LD_VAR 0 2
77254: ARRAY
77255: PUSH
77256: LD_INT 1
77258: ARRAY
77259: PPUSH
77260: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
77264: LD_VAR 0 3
77268: PPUSH
77269: CALL_OW 461
77273: PUSH
77274: LD_INT 6
77276: EQUAL
77277: PUSH
77278: LD_VAR 0 6
77282: PUSH
77283: LD_INT 1
77285: GREATER
77286: AND
77287: IFFALSE 77439
// begin sci := [ ] ;
77289: LD_ADDR_VAR 0 8
77293: PUSH
77294: EMPTY
77295: ST_TO_ADDR
// for x in ( tmp diff j ) do
77296: LD_ADDR_VAR 0 7
77300: PUSH
77301: LD_VAR 0 6
77305: PUSH
77306: LD_VAR 0 3
77310: DIFF
77311: PUSH
77312: FOR_IN
77313: IFFALSE 77365
// begin if sci = 6 then
77315: LD_VAR 0 8
77319: PUSH
77320: LD_INT 6
77322: EQUAL
77323: IFFALSE 77327
// break ;
77325: GO 77365
// if BuildingStatus ( x ) = bs_idle then
77327: LD_VAR 0 7
77331: PPUSH
77332: CALL_OW 461
77336: PUSH
77337: LD_INT 2
77339: EQUAL
77340: IFFALSE 77363
// sci := sci ^ UnitsInside ( x ) ;
77342: LD_ADDR_VAR 0 8
77346: PUSH
77347: LD_VAR 0 8
77351: PUSH
77352: LD_VAR 0 7
77356: PPUSH
77357: CALL_OW 313
77361: ADD
77362: ST_TO_ADDR
// end ;
77363: GO 77312
77365: POP
77366: POP
// if not sci then
77367: LD_VAR 0 8
77371: NOT
77372: IFFALSE 77376
// continue ;
77374: GO 76421
// for x in sci do
77376: LD_ADDR_VAR 0 7
77380: PUSH
77381: LD_VAR 0 8
77385: PUSH
77386: FOR_IN
77387: IFFALSE 77437
// if IsInUnit ( x ) and not HasTask ( x ) then
77389: LD_VAR 0 7
77393: PPUSH
77394: CALL_OW 310
77398: PUSH
77399: LD_VAR 0 7
77403: PPUSH
77404: CALL_OW 314
77408: NOT
77409: AND
77410: IFFALSE 77435
// begin ComExitBuilding ( x ) ;
77412: LD_VAR 0 7
77416: PPUSH
77417: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
77421: LD_VAR 0 7
77425: PPUSH
77426: LD_VAR 0 3
77430: PPUSH
77431: CALL_OW 180
// end ;
77435: GO 77386
77437: POP
77438: POP
// end ; end ;
77439: GO 76421
77441: POP
77442: POP
// end ;
77443: GO 76375
77445: POP
77446: POP
// end ;
77447: LD_VAR 0 1
77451: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
77452: LD_INT 0
77454: PPUSH
77455: PPUSH
// if not mc_bases then
77456: LD_EXP 50
77460: NOT
77461: IFFALSE 77465
// exit ;
77463: GO 77546
// for i = 1 to mc_bases do
77465: LD_ADDR_VAR 0 2
77469: PUSH
77470: DOUBLE
77471: LD_INT 1
77473: DEC
77474: ST_TO_ADDR
77475: LD_EXP 50
77479: PUSH
77480: FOR_TO
77481: IFFALSE 77544
// if mc_mines [ i ] and mc_miners [ i ] then
77483: LD_EXP 63
77487: PUSH
77488: LD_VAR 0 2
77492: ARRAY
77493: PUSH
77494: LD_EXP 64
77498: PUSH
77499: LD_VAR 0 2
77503: ARRAY
77504: AND
77505: IFFALSE 77542
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
77507: LD_EXP 64
77511: PUSH
77512: LD_VAR 0 2
77516: ARRAY
77517: PUSH
77518: LD_INT 1
77520: ARRAY
77521: PPUSH
77522: CALL_OW 255
77526: PPUSH
77527: LD_EXP 63
77531: PUSH
77532: LD_VAR 0 2
77536: ARRAY
77537: PPUSH
77538: CALL 21811 0 2
77542: GO 77480
77544: POP
77545: POP
// end ;
77546: LD_VAR 0 1
77550: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
77551: LD_INT 0
77553: PPUSH
77554: PPUSH
77555: PPUSH
77556: PPUSH
77557: PPUSH
77558: PPUSH
77559: PPUSH
77560: PPUSH
// if not mc_bases or not mc_parking then
77561: LD_EXP 50
77565: NOT
77566: PUSH
77567: LD_EXP 74
77571: NOT
77572: OR
77573: IFFALSE 77577
// exit ;
77575: GO 78287
// for i = 1 to mc_bases do
77577: LD_ADDR_VAR 0 2
77581: PUSH
77582: DOUBLE
77583: LD_INT 1
77585: DEC
77586: ST_TO_ADDR
77587: LD_EXP 50
77591: PUSH
77592: FOR_TO
77593: IFFALSE 78285
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
77595: LD_EXP 50
77599: PUSH
77600: LD_VAR 0 2
77604: ARRAY
77605: NOT
77606: PUSH
77607: LD_EXP 74
77611: PUSH
77612: LD_VAR 0 2
77616: ARRAY
77617: NOT
77618: OR
77619: IFFALSE 77623
// continue ;
77621: GO 77592
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
77623: LD_ADDR_VAR 0 5
77627: PUSH
77628: LD_EXP 50
77632: PUSH
77633: LD_VAR 0 2
77637: ARRAY
77638: PUSH
77639: LD_INT 1
77641: ARRAY
77642: PPUSH
77643: CALL_OW 255
77647: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77648: LD_ADDR_VAR 0 6
77652: PUSH
77653: LD_EXP 50
77657: PUSH
77658: LD_VAR 0 2
77662: ARRAY
77663: PPUSH
77664: LD_INT 30
77666: PUSH
77667: LD_INT 3
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: PPUSH
77674: CALL_OW 72
77678: ST_TO_ADDR
// if not fac then
77679: LD_VAR 0 6
77683: NOT
77684: IFFALSE 77735
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77686: LD_ADDR_VAR 0 6
77690: PUSH
77691: LD_EXP 50
77695: PUSH
77696: LD_VAR 0 2
77700: ARRAY
77701: PPUSH
77702: LD_INT 2
77704: PUSH
77705: LD_INT 30
77707: PUSH
77708: LD_INT 0
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 30
77717: PUSH
77718: LD_INT 1
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: LIST
77729: PPUSH
77730: CALL_OW 72
77734: ST_TO_ADDR
// if not fac then
77735: LD_VAR 0 6
77739: NOT
77740: IFFALSE 77744
// continue ;
77742: GO 77592
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
77744: LD_ADDR_VAR 0 7
77748: PUSH
77749: LD_EXP 74
77753: PUSH
77754: LD_VAR 0 2
77758: ARRAY
77759: PPUSH
77760: LD_INT 22
77762: PUSH
77763: LD_VAR 0 5
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PUSH
77772: LD_INT 21
77774: PUSH
77775: LD_INT 2
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 3
77784: PUSH
77785: LD_INT 24
77787: PUSH
77788: LD_INT 1000
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: LIST
77803: PPUSH
77804: CALL_OW 70
77808: ST_TO_ADDR
// for j in fac do
77809: LD_ADDR_VAR 0 3
77813: PUSH
77814: LD_VAR 0 6
77818: PUSH
77819: FOR_IN
77820: IFFALSE 77901
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
77822: LD_ADDR_VAR 0 7
77826: PUSH
77827: LD_VAR 0 7
77831: PUSH
77832: LD_INT 22
77834: PUSH
77835: LD_VAR 0 5
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: PUSH
77844: LD_INT 91
77846: PUSH
77847: LD_VAR 0 3
77851: PUSH
77852: LD_INT 15
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 21
77862: PUSH
77863: LD_INT 2
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: LD_INT 3
77872: PUSH
77873: LD_INT 24
77875: PUSH
77876: LD_INT 1000
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: PPUSH
77893: CALL_OW 69
77897: UNION
77898: ST_TO_ADDR
77899: GO 77819
77901: POP
77902: POP
// if not vehs then
77903: LD_VAR 0 7
77907: NOT
77908: IFFALSE 77934
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
77910: LD_ADDR_EXP 62
77914: PUSH
77915: LD_EXP 62
77919: PPUSH
77920: LD_VAR 0 2
77924: PPUSH
77925: EMPTY
77926: PPUSH
77927: CALL_OW 1
77931: ST_TO_ADDR
// continue ;
77932: GO 77592
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77934: LD_ADDR_VAR 0 8
77938: PUSH
77939: LD_EXP 50
77943: PUSH
77944: LD_VAR 0 2
77948: ARRAY
77949: PPUSH
77950: LD_INT 30
77952: PUSH
77953: LD_INT 3
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PPUSH
77960: CALL_OW 72
77964: ST_TO_ADDR
// if tmp then
77965: LD_VAR 0 8
77969: IFFALSE 78072
// begin for j in tmp do
77971: LD_ADDR_VAR 0 3
77975: PUSH
77976: LD_VAR 0 8
77980: PUSH
77981: FOR_IN
77982: IFFALSE 78070
// for k in UnitsInside ( j ) do
77984: LD_ADDR_VAR 0 4
77988: PUSH
77989: LD_VAR 0 3
77993: PPUSH
77994: CALL_OW 313
77998: PUSH
77999: FOR_IN
78000: IFFALSE 78066
// if k then
78002: LD_VAR 0 4
78006: IFFALSE 78064
// if not k in mc_repair_vehicle [ i ] then
78008: LD_VAR 0 4
78012: PUSH
78013: LD_EXP 62
78017: PUSH
78018: LD_VAR 0 2
78022: ARRAY
78023: IN
78024: NOT
78025: IFFALSE 78064
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
78027: LD_ADDR_EXP 62
78031: PUSH
78032: LD_EXP 62
78036: PPUSH
78037: LD_VAR 0 2
78041: PPUSH
78042: LD_EXP 62
78046: PUSH
78047: LD_VAR 0 2
78051: ARRAY
78052: PUSH
78053: LD_VAR 0 4
78057: UNION
78058: PPUSH
78059: CALL_OW 1
78063: ST_TO_ADDR
78064: GO 77999
78066: POP
78067: POP
78068: GO 77981
78070: POP
78071: POP
// end ; if not mc_repair_vehicle [ i ] then
78072: LD_EXP 62
78076: PUSH
78077: LD_VAR 0 2
78081: ARRAY
78082: NOT
78083: IFFALSE 78087
// continue ;
78085: GO 77592
// for j in mc_repair_vehicle [ i ] do
78087: LD_ADDR_VAR 0 3
78091: PUSH
78092: LD_EXP 62
78096: PUSH
78097: LD_VAR 0 2
78101: ARRAY
78102: PUSH
78103: FOR_IN
78104: IFFALSE 78281
// begin if GetClass ( j ) <> 3 then
78106: LD_VAR 0 3
78110: PPUSH
78111: CALL_OW 257
78115: PUSH
78116: LD_INT 3
78118: NONEQUAL
78119: IFFALSE 78160
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
78121: LD_ADDR_EXP 62
78125: PUSH
78126: LD_EXP 62
78130: PPUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: LD_EXP 62
78140: PUSH
78141: LD_VAR 0 2
78145: ARRAY
78146: PUSH
78147: LD_VAR 0 3
78151: DIFF
78152: PPUSH
78153: CALL_OW 1
78157: ST_TO_ADDR
// continue ;
78158: GO 78103
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
78160: LD_VAR 0 3
78164: PPUSH
78165: CALL_OW 311
78169: NOT
78170: PUSH
78171: LD_VAR 0 3
78175: PUSH
78176: LD_EXP 53
78180: PUSH
78181: LD_VAR 0 2
78185: ARRAY
78186: PUSH
78187: LD_INT 1
78189: ARRAY
78190: IN
78191: NOT
78192: AND
78193: PUSH
78194: LD_VAR 0 3
78198: PUSH
78199: LD_EXP 53
78203: PUSH
78204: LD_VAR 0 2
78208: ARRAY
78209: PUSH
78210: LD_INT 2
78212: ARRAY
78213: IN
78214: NOT
78215: AND
78216: IFFALSE 78279
// begin if IsInUnit ( j ) then
78218: LD_VAR 0 3
78222: PPUSH
78223: CALL_OW 310
78227: IFFALSE 78240
// ComExitBuilding ( j ) else
78229: LD_VAR 0 3
78233: PPUSH
78234: CALL_OW 122
78238: GO 78279
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
78240: LD_VAR 0 3
78244: PPUSH
78245: LD_VAR 0 7
78249: PUSH
78250: LD_INT 1
78252: ARRAY
78253: PPUSH
78254: CALL 58465 0 2
78258: NOT
78259: IFFALSE 78279
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
78261: LD_VAR 0 3
78265: PPUSH
78266: LD_VAR 0 7
78270: PUSH
78271: LD_INT 1
78273: ARRAY
78274: PPUSH
78275: CALL_OW 129
// end ; end ;
78279: GO 78103
78281: POP
78282: POP
// end ;
78283: GO 77592
78285: POP
78286: POP
// end ;
78287: LD_VAR 0 1
78291: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
78292: LD_INT 0
78294: PPUSH
78295: PPUSH
78296: PPUSH
78297: PPUSH
78298: PPUSH
78299: PPUSH
78300: PPUSH
78301: PPUSH
78302: PPUSH
78303: PPUSH
78304: PPUSH
// if not mc_bases then
78305: LD_EXP 50
78309: NOT
78310: IFFALSE 78314
// exit ;
78312: GO 79116
// for i = 1 to mc_bases do
78314: LD_ADDR_VAR 0 2
78318: PUSH
78319: DOUBLE
78320: LD_INT 1
78322: DEC
78323: ST_TO_ADDR
78324: LD_EXP 50
78328: PUSH
78329: FOR_TO
78330: IFFALSE 79114
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
78332: LD_EXP 78
78336: PUSH
78337: LD_VAR 0 2
78341: ARRAY
78342: NOT
78343: PUSH
78344: LD_EXP 53
78348: PUSH
78349: LD_VAR 0 2
78353: ARRAY
78354: PUSH
78355: LD_INT 1
78357: ARRAY
78358: OR
78359: PUSH
78360: LD_EXP 53
78364: PUSH
78365: LD_VAR 0 2
78369: ARRAY
78370: PUSH
78371: LD_INT 2
78373: ARRAY
78374: OR
78375: PUSH
78376: LD_EXP 76
78380: PUSH
78381: LD_VAR 0 2
78385: ARRAY
78386: PPUSH
78387: LD_INT 1
78389: PPUSH
78390: CALL_OW 325
78394: NOT
78395: OR
78396: PUSH
78397: LD_EXP 73
78401: PUSH
78402: LD_VAR 0 2
78406: ARRAY
78407: OR
78408: IFFALSE 78412
// continue ;
78410: GO 78329
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
78412: LD_ADDR_VAR 0 8
78416: PUSH
78417: LD_EXP 50
78421: PUSH
78422: LD_VAR 0 2
78426: ARRAY
78427: PPUSH
78428: LD_INT 25
78430: PUSH
78431: LD_INT 4
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: LD_INT 50
78440: PUSH
78441: EMPTY
78442: LIST
78443: PUSH
78444: LD_INT 3
78446: PUSH
78447: LD_INT 60
78449: PUSH
78450: EMPTY
78451: LIST
78452: PUSH
78453: EMPTY
78454: LIST
78455: LIST
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: LIST
78461: PPUSH
78462: CALL_OW 72
78466: PUSH
78467: LD_EXP 54
78471: PUSH
78472: LD_VAR 0 2
78476: ARRAY
78477: DIFF
78478: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78479: LD_ADDR_VAR 0 9
78483: PUSH
78484: LD_EXP 50
78488: PUSH
78489: LD_VAR 0 2
78493: ARRAY
78494: PPUSH
78495: LD_INT 2
78497: PUSH
78498: LD_INT 30
78500: PUSH
78501: LD_INT 0
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: LD_INT 30
78510: PUSH
78511: LD_INT 1
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: LIST
78522: PPUSH
78523: CALL_OW 72
78527: ST_TO_ADDR
// if not tmp or not dep then
78528: LD_VAR 0 8
78532: NOT
78533: PUSH
78534: LD_VAR 0 9
78538: NOT
78539: OR
78540: IFFALSE 78544
// continue ;
78542: GO 78329
// side := GetSide ( tmp [ 1 ] ) ;
78544: LD_ADDR_VAR 0 11
78548: PUSH
78549: LD_VAR 0 8
78553: PUSH
78554: LD_INT 1
78556: ARRAY
78557: PPUSH
78558: CALL_OW 255
78562: ST_TO_ADDR
// dep := dep [ 1 ] ;
78563: LD_ADDR_VAR 0 9
78567: PUSH
78568: LD_VAR 0 9
78572: PUSH
78573: LD_INT 1
78575: ARRAY
78576: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
78577: LD_ADDR_VAR 0 7
78581: PUSH
78582: LD_EXP 78
78586: PUSH
78587: LD_VAR 0 2
78591: ARRAY
78592: PPUSH
78593: LD_INT 22
78595: PUSH
78596: LD_INT 0
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PUSH
78603: LD_INT 25
78605: PUSH
78606: LD_INT 12
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PPUSH
78617: CALL_OW 70
78621: PUSH
78622: LD_INT 22
78624: PUSH
78625: LD_INT 0
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 25
78634: PUSH
78635: LD_INT 12
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: LD_INT 91
78644: PUSH
78645: LD_VAR 0 9
78649: PUSH
78650: LD_INT 20
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: LIST
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: LIST
78662: PPUSH
78663: CALL_OW 69
78667: UNION
78668: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
78669: LD_ADDR_VAR 0 10
78673: PUSH
78674: LD_EXP 78
78678: PUSH
78679: LD_VAR 0 2
78683: ARRAY
78684: PPUSH
78685: LD_INT 81
78687: PUSH
78688: LD_VAR 0 11
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PPUSH
78697: CALL_OW 70
78701: ST_TO_ADDR
// if not apes or danger_at_area then
78702: LD_VAR 0 7
78706: NOT
78707: PUSH
78708: LD_VAR 0 10
78712: OR
78713: IFFALSE 78763
// begin if mc_taming [ i ] then
78715: LD_EXP 81
78719: PUSH
78720: LD_VAR 0 2
78724: ARRAY
78725: IFFALSE 78761
// begin MC_Reset ( i , 121 ) ;
78727: LD_VAR 0 2
78731: PPUSH
78732: LD_INT 121
78734: PPUSH
78735: CALL 63749 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
78739: LD_ADDR_EXP 81
78743: PUSH
78744: LD_EXP 81
78748: PPUSH
78749: LD_VAR 0 2
78753: PPUSH
78754: EMPTY
78755: PPUSH
78756: CALL_OW 1
78760: ST_TO_ADDR
// end ; continue ;
78761: GO 78329
// end ; for j in tmp do
78763: LD_ADDR_VAR 0 3
78767: PUSH
78768: LD_VAR 0 8
78772: PUSH
78773: FOR_IN
78774: IFFALSE 79110
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
78776: LD_VAR 0 3
78780: PUSH
78781: LD_EXP 81
78785: PUSH
78786: LD_VAR 0 2
78790: ARRAY
78791: IN
78792: NOT
78793: PUSH
78794: LD_EXP 81
78798: PUSH
78799: LD_VAR 0 2
78803: ARRAY
78804: PUSH
78805: LD_INT 3
78807: LESS
78808: AND
78809: IFFALSE 78867
// begin SetTag ( j , 121 ) ;
78811: LD_VAR 0 3
78815: PPUSH
78816: LD_INT 121
78818: PPUSH
78819: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
78823: LD_ADDR_EXP 81
78827: PUSH
78828: LD_EXP 81
78832: PPUSH
78833: LD_VAR 0 2
78837: PUSH
78838: LD_EXP 81
78842: PUSH
78843: LD_VAR 0 2
78847: ARRAY
78848: PUSH
78849: LD_INT 1
78851: PLUS
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PPUSH
78857: LD_VAR 0 3
78861: PPUSH
78862: CALL 24858 0 3
78866: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
78867: LD_VAR 0 3
78871: PUSH
78872: LD_EXP 81
78876: PUSH
78877: LD_VAR 0 2
78881: ARRAY
78882: IN
78883: IFFALSE 79108
// begin if GetClass ( j ) <> 4 then
78885: LD_VAR 0 3
78889: PPUSH
78890: CALL_OW 257
78894: PUSH
78895: LD_INT 4
78897: NONEQUAL
78898: IFFALSE 78951
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
78900: LD_ADDR_EXP 81
78904: PUSH
78905: LD_EXP 81
78909: PPUSH
78910: LD_VAR 0 2
78914: PPUSH
78915: LD_EXP 81
78919: PUSH
78920: LD_VAR 0 2
78924: ARRAY
78925: PUSH
78926: LD_VAR 0 3
78930: DIFF
78931: PPUSH
78932: CALL_OW 1
78936: ST_TO_ADDR
// SetTag ( j , 0 ) ;
78937: LD_VAR 0 3
78941: PPUSH
78942: LD_INT 0
78944: PPUSH
78945: CALL_OW 109
// continue ;
78949: GO 78773
// end ; if IsInUnit ( j ) then
78951: LD_VAR 0 3
78955: PPUSH
78956: CALL_OW 310
78960: IFFALSE 78971
// ComExitBuilding ( j ) ;
78962: LD_VAR 0 3
78966: PPUSH
78967: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
78971: LD_ADDR_VAR 0 6
78975: PUSH
78976: LD_VAR 0 7
78980: PPUSH
78981: LD_VAR 0 3
78985: PPUSH
78986: CALL_OW 74
78990: ST_TO_ADDR
// if not ape then
78991: LD_VAR 0 6
78995: NOT
78996: IFFALSE 79000
// break ;
78998: GO 79110
// x := GetX ( ape ) ;
79000: LD_ADDR_VAR 0 4
79004: PUSH
79005: LD_VAR 0 6
79009: PPUSH
79010: CALL_OW 250
79014: ST_TO_ADDR
// y := GetY ( ape ) ;
79015: LD_ADDR_VAR 0 5
79019: PUSH
79020: LD_VAR 0 6
79024: PPUSH
79025: CALL_OW 251
79029: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
79030: LD_VAR 0 4
79034: PPUSH
79035: LD_VAR 0 5
79039: PPUSH
79040: CALL_OW 488
79044: NOT
79045: PUSH
79046: LD_VAR 0 11
79050: PPUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: LD_VAR 0 5
79060: PPUSH
79061: LD_INT 20
79063: PPUSH
79064: CALL 25754 0 4
79068: PUSH
79069: LD_INT 4
79071: ARRAY
79072: OR
79073: IFFALSE 79077
// break ;
79075: GO 79110
// if not HasTask ( j ) then
79077: LD_VAR 0 3
79081: PPUSH
79082: CALL_OW 314
79086: NOT
79087: IFFALSE 79108
// ComTameXY ( j , x , y ) ;
79089: LD_VAR 0 3
79093: PPUSH
79094: LD_VAR 0 4
79098: PPUSH
79099: LD_VAR 0 5
79103: PPUSH
79104: CALL_OW 131
// end ; end ;
79108: GO 78773
79110: POP
79111: POP
// end ;
79112: GO 78329
79114: POP
79115: POP
// end ;
79116: LD_VAR 0 1
79120: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
79121: LD_INT 0
79123: PPUSH
79124: PPUSH
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
79129: PPUSH
79130: PPUSH
// if not mc_bases then
79131: LD_EXP 50
79135: NOT
79136: IFFALSE 79140
// exit ;
79138: GO 79766
// for i = 1 to mc_bases do
79140: LD_ADDR_VAR 0 2
79144: PUSH
79145: DOUBLE
79146: LD_INT 1
79148: DEC
79149: ST_TO_ADDR
79150: LD_EXP 50
79154: PUSH
79155: FOR_TO
79156: IFFALSE 79764
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
79158: LD_EXP 79
79162: PUSH
79163: LD_VAR 0 2
79167: ARRAY
79168: NOT
79169: PUSH
79170: LD_EXP 79
79174: PUSH
79175: LD_VAR 0 2
79179: ARRAY
79180: PPUSH
79181: LD_INT 25
79183: PUSH
79184: LD_INT 12
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PPUSH
79191: CALL_OW 72
79195: NOT
79196: OR
79197: IFFALSE 79201
// continue ;
79199: GO 79155
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
79201: LD_ADDR_VAR 0 5
79205: PUSH
79206: LD_EXP 79
79210: PUSH
79211: LD_VAR 0 2
79215: ARRAY
79216: PUSH
79217: LD_INT 1
79219: ARRAY
79220: PPUSH
79221: CALL_OW 255
79225: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
79226: LD_VAR 0 5
79230: PPUSH
79231: LD_INT 2
79233: PPUSH
79234: CALL_OW 325
79238: IFFALSE 79491
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
79240: LD_ADDR_VAR 0 4
79244: PUSH
79245: LD_EXP 79
79249: PUSH
79250: LD_VAR 0 2
79254: ARRAY
79255: PPUSH
79256: LD_INT 25
79258: PUSH
79259: LD_INT 16
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PPUSH
79266: CALL_OW 72
79270: ST_TO_ADDR
// if tmp < 6 then
79271: LD_VAR 0 4
79275: PUSH
79276: LD_INT 6
79278: LESS
79279: IFFALSE 79491
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79281: LD_ADDR_VAR 0 6
79285: PUSH
79286: LD_EXP 50
79290: PUSH
79291: LD_VAR 0 2
79295: ARRAY
79296: PPUSH
79297: LD_INT 2
79299: PUSH
79300: LD_INT 30
79302: PUSH
79303: LD_INT 0
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PUSH
79310: LD_INT 30
79312: PUSH
79313: LD_INT 1
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: LIST
79324: PPUSH
79325: CALL_OW 72
79329: ST_TO_ADDR
// if depot then
79330: LD_VAR 0 6
79334: IFFALSE 79491
// begin selected := 0 ;
79336: LD_ADDR_VAR 0 7
79340: PUSH
79341: LD_INT 0
79343: ST_TO_ADDR
// for j in depot do
79344: LD_ADDR_VAR 0 3
79348: PUSH
79349: LD_VAR 0 6
79353: PUSH
79354: FOR_IN
79355: IFFALSE 79386
// begin if UnitsInside ( j ) < 6 then
79357: LD_VAR 0 3
79361: PPUSH
79362: CALL_OW 313
79366: PUSH
79367: LD_INT 6
79369: LESS
79370: IFFALSE 79384
// begin selected := j ;
79372: LD_ADDR_VAR 0 7
79376: PUSH
79377: LD_VAR 0 3
79381: ST_TO_ADDR
// break ;
79382: GO 79386
// end ; end ;
79384: GO 79354
79386: POP
79387: POP
// if selected then
79388: LD_VAR 0 7
79392: IFFALSE 79491
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
79394: LD_ADDR_VAR 0 3
79398: PUSH
79399: LD_EXP 79
79403: PUSH
79404: LD_VAR 0 2
79408: ARRAY
79409: PPUSH
79410: LD_INT 25
79412: PUSH
79413: LD_INT 12
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PPUSH
79420: CALL_OW 72
79424: PUSH
79425: FOR_IN
79426: IFFALSE 79489
// if not HasTask ( j ) then
79428: LD_VAR 0 3
79432: PPUSH
79433: CALL_OW 314
79437: NOT
79438: IFFALSE 79487
// begin if not IsInUnit ( j ) then
79440: LD_VAR 0 3
79444: PPUSH
79445: CALL_OW 310
79449: NOT
79450: IFFALSE 79466
// ComEnterUnit ( j , selected ) ;
79452: LD_VAR 0 3
79456: PPUSH
79457: LD_VAR 0 7
79461: PPUSH
79462: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
79466: LD_VAR 0 3
79470: PPUSH
79471: LD_INT 16
79473: PPUSH
79474: CALL_OW 183
// AddComExitBuilding ( j ) ;
79478: LD_VAR 0 3
79482: PPUSH
79483: CALL_OW 182
// end ;
79487: GO 79425
79489: POP
79490: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
79491: LD_VAR 0 5
79495: PPUSH
79496: LD_INT 11
79498: PPUSH
79499: CALL_OW 325
79503: IFFALSE 79762
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
79505: LD_ADDR_VAR 0 4
79509: PUSH
79510: LD_EXP 79
79514: PUSH
79515: LD_VAR 0 2
79519: ARRAY
79520: PPUSH
79521: LD_INT 25
79523: PUSH
79524: LD_INT 16
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: PPUSH
79531: CALL_OW 72
79535: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
79536: LD_VAR 0 4
79540: PUSH
79541: LD_INT 6
79543: GREATEREQUAL
79544: PUSH
79545: LD_VAR 0 5
79549: PPUSH
79550: LD_INT 2
79552: PPUSH
79553: CALL_OW 325
79557: NOT
79558: OR
79559: IFFALSE 79762
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79561: LD_ADDR_VAR 0 8
79565: PUSH
79566: LD_EXP 50
79570: PUSH
79571: LD_VAR 0 2
79575: ARRAY
79576: PPUSH
79577: LD_INT 2
79579: PUSH
79580: LD_INT 30
79582: PUSH
79583: LD_INT 4
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 30
79592: PUSH
79593: LD_INT 5
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: LIST
79604: PPUSH
79605: CALL_OW 72
79609: ST_TO_ADDR
// if barracks then
79610: LD_VAR 0 8
79614: IFFALSE 79762
// begin selected := 0 ;
79616: LD_ADDR_VAR 0 7
79620: PUSH
79621: LD_INT 0
79623: ST_TO_ADDR
// for j in barracks do
79624: LD_ADDR_VAR 0 3
79628: PUSH
79629: LD_VAR 0 8
79633: PUSH
79634: FOR_IN
79635: IFFALSE 79666
// begin if UnitsInside ( j ) < 6 then
79637: LD_VAR 0 3
79641: PPUSH
79642: CALL_OW 313
79646: PUSH
79647: LD_INT 6
79649: LESS
79650: IFFALSE 79664
// begin selected := j ;
79652: LD_ADDR_VAR 0 7
79656: PUSH
79657: LD_VAR 0 3
79661: ST_TO_ADDR
// break ;
79662: GO 79666
// end ; end ;
79664: GO 79634
79666: POP
79667: POP
// if selected then
79668: LD_VAR 0 7
79672: IFFALSE 79762
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
79674: LD_ADDR_VAR 0 3
79678: PUSH
79679: LD_EXP 79
79683: PUSH
79684: LD_VAR 0 2
79688: ARRAY
79689: PPUSH
79690: LD_INT 25
79692: PUSH
79693: LD_INT 12
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: PPUSH
79700: CALL_OW 72
79704: PUSH
79705: FOR_IN
79706: IFFALSE 79760
// if not IsInUnit ( j ) and not HasTask ( j ) then
79708: LD_VAR 0 3
79712: PPUSH
79713: CALL_OW 310
79717: NOT
79718: PUSH
79719: LD_VAR 0 3
79723: PPUSH
79724: CALL_OW 314
79728: NOT
79729: AND
79730: IFFALSE 79758
// begin ComEnterUnit ( j , selected ) ;
79732: LD_VAR 0 3
79736: PPUSH
79737: LD_VAR 0 7
79741: PPUSH
79742: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
79746: LD_VAR 0 3
79750: PPUSH
79751: LD_INT 15
79753: PPUSH
79754: CALL_OW 183
// end ;
79758: GO 79705
79760: POP
79761: POP
// end ; end ; end ; end ; end ;
79762: GO 79155
79764: POP
79765: POP
// end ;
79766: LD_VAR 0 1
79770: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
79771: LD_INT 0
79773: PPUSH
79774: PPUSH
79775: PPUSH
79776: PPUSH
// if not mc_bases then
79777: LD_EXP 50
79781: NOT
79782: IFFALSE 79786
// exit ;
79784: GO 79964
// for i = 1 to mc_bases do
79786: LD_ADDR_VAR 0 2
79790: PUSH
79791: DOUBLE
79792: LD_INT 1
79794: DEC
79795: ST_TO_ADDR
79796: LD_EXP 50
79800: PUSH
79801: FOR_TO
79802: IFFALSE 79962
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
79804: LD_ADDR_VAR 0 4
79808: PUSH
79809: LD_EXP 50
79813: PUSH
79814: LD_VAR 0 2
79818: ARRAY
79819: PPUSH
79820: LD_INT 25
79822: PUSH
79823: LD_INT 9
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PPUSH
79830: CALL_OW 72
79834: ST_TO_ADDR
// if not tmp then
79835: LD_VAR 0 4
79839: NOT
79840: IFFALSE 79844
// continue ;
79842: GO 79801
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
79844: LD_EXP 76
79848: PUSH
79849: LD_VAR 0 2
79853: ARRAY
79854: PPUSH
79855: LD_INT 29
79857: PPUSH
79858: CALL_OW 325
79862: NOT
79863: PUSH
79864: LD_EXP 76
79868: PUSH
79869: LD_VAR 0 2
79873: ARRAY
79874: PPUSH
79875: LD_INT 28
79877: PPUSH
79878: CALL_OW 325
79882: NOT
79883: AND
79884: IFFALSE 79888
// continue ;
79886: GO 79801
// for j in tmp do
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: LD_VAR 0 4
79897: PUSH
79898: FOR_IN
79899: IFFALSE 79958
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79901: LD_VAR 0 3
79905: PUSH
79906: LD_EXP 53
79910: PUSH
79911: LD_VAR 0 2
79915: ARRAY
79916: PUSH
79917: LD_INT 1
79919: ARRAY
79920: IN
79921: NOT
79922: PUSH
79923: LD_VAR 0 3
79927: PUSH
79928: LD_EXP 53
79932: PUSH
79933: LD_VAR 0 2
79937: ARRAY
79938: PUSH
79939: LD_INT 2
79941: ARRAY
79942: IN
79943: NOT
79944: AND
79945: IFFALSE 79956
// ComSpaceTimeShoot ( j ) ;
79947: LD_VAR 0 3
79951: PPUSH
79952: CALL 20819 0 1
79956: GO 79898
79958: POP
79959: POP
// end ;
79960: GO 79801
79962: POP
79963: POP
// end ;
79964: LD_VAR 0 1
79968: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
79969: LD_INT 0
79971: PPUSH
79972: PPUSH
79973: PPUSH
79974: PPUSH
79975: PPUSH
79976: PPUSH
79977: PPUSH
79978: PPUSH
79979: PPUSH
// if not mc_bases then
79980: LD_EXP 50
79984: NOT
79985: IFFALSE 79989
// exit ;
79987: GO 80611
// for i = 1 to mc_bases do
79989: LD_ADDR_VAR 0 2
79993: PUSH
79994: DOUBLE
79995: LD_INT 1
79997: DEC
79998: ST_TO_ADDR
79999: LD_EXP 50
80003: PUSH
80004: FOR_TO
80005: IFFALSE 80609
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
80007: LD_EXP 85
80011: PUSH
80012: LD_VAR 0 2
80016: ARRAY
80017: NOT
80018: PUSH
80019: LD_INT 38
80021: PPUSH
80022: LD_EXP 76
80026: PUSH
80027: LD_VAR 0 2
80031: ARRAY
80032: PPUSH
80033: CALL_OW 321
80037: PUSH
80038: LD_INT 2
80040: NONEQUAL
80041: OR
80042: IFFALSE 80046
// continue ;
80044: GO 80004
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
80046: LD_ADDR_VAR 0 8
80050: PUSH
80051: LD_EXP 50
80055: PUSH
80056: LD_VAR 0 2
80060: ARRAY
80061: PPUSH
80062: LD_INT 30
80064: PUSH
80065: LD_INT 34
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PPUSH
80072: CALL_OW 72
80076: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
80077: LD_ADDR_VAR 0 9
80081: PUSH
80082: LD_EXP 50
80086: PUSH
80087: LD_VAR 0 2
80091: ARRAY
80092: PPUSH
80093: LD_INT 25
80095: PUSH
80096: LD_INT 4
80098: PUSH
80099: EMPTY
80100: LIST
80101: LIST
80102: PPUSH
80103: CALL_OW 72
80107: PPUSH
80108: LD_INT 0
80110: PPUSH
80111: CALL 54127 0 2
80115: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
80116: LD_VAR 0 9
80120: NOT
80121: PUSH
80122: LD_VAR 0 8
80126: NOT
80127: OR
80128: PUSH
80129: LD_EXP 50
80133: PUSH
80134: LD_VAR 0 2
80138: ARRAY
80139: PPUSH
80140: LD_INT 124
80142: PPUSH
80143: CALL 54127 0 2
80147: OR
80148: IFFALSE 80152
// continue ;
80150: GO 80004
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
80152: LD_EXP 86
80156: PUSH
80157: LD_VAR 0 2
80161: ARRAY
80162: PUSH
80163: LD_EXP 85
80167: PUSH
80168: LD_VAR 0 2
80172: ARRAY
80173: LESS
80174: PUSH
80175: LD_EXP 86
80179: PUSH
80180: LD_VAR 0 2
80184: ARRAY
80185: PUSH
80186: LD_VAR 0 8
80190: LESS
80191: AND
80192: IFFALSE 80607
// begin tmp := sci [ 1 ] ;
80194: LD_ADDR_VAR 0 7
80198: PUSH
80199: LD_VAR 0 9
80203: PUSH
80204: LD_INT 1
80206: ARRAY
80207: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
80208: LD_VAR 0 7
80212: PPUSH
80213: LD_INT 124
80215: PPUSH
80216: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
80220: LD_ADDR_VAR 0 3
80224: PUSH
80225: DOUBLE
80226: LD_EXP 85
80230: PUSH
80231: LD_VAR 0 2
80235: ARRAY
80236: INC
80237: ST_TO_ADDR
80238: LD_EXP 85
80242: PUSH
80243: LD_VAR 0 2
80247: ARRAY
80248: PUSH
80249: FOR_DOWNTO
80250: IFFALSE 80593
// begin if IsInUnit ( tmp ) then
80252: LD_VAR 0 7
80256: PPUSH
80257: CALL_OW 310
80261: IFFALSE 80272
// ComExitBuilding ( tmp ) ;
80263: LD_VAR 0 7
80267: PPUSH
80268: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
80272: LD_INT 35
80274: PPUSH
80275: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
80279: LD_VAR 0 7
80283: PPUSH
80284: CALL_OW 310
80288: NOT
80289: PUSH
80290: LD_VAR 0 7
80294: PPUSH
80295: CALL_OW 314
80299: NOT
80300: AND
80301: IFFALSE 80272
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
80303: LD_ADDR_VAR 0 6
80307: PUSH
80308: LD_VAR 0 7
80312: PPUSH
80313: CALL_OW 250
80317: PUSH
80318: LD_VAR 0 7
80322: PPUSH
80323: CALL_OW 251
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80332: LD_INT 35
80334: PPUSH
80335: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
80339: LD_ADDR_VAR 0 4
80343: PUSH
80344: LD_EXP 85
80348: PUSH
80349: LD_VAR 0 2
80353: ARRAY
80354: PUSH
80355: LD_VAR 0 3
80359: ARRAY
80360: PUSH
80361: LD_INT 1
80363: ARRAY
80364: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
80365: LD_ADDR_VAR 0 5
80369: PUSH
80370: LD_EXP 85
80374: PUSH
80375: LD_VAR 0 2
80379: ARRAY
80380: PUSH
80381: LD_VAR 0 3
80385: ARRAY
80386: PUSH
80387: LD_INT 2
80389: ARRAY
80390: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
80391: LD_VAR 0 7
80395: PPUSH
80396: LD_INT 10
80398: PPUSH
80399: CALL 27457 0 2
80403: PUSH
80404: LD_INT 4
80406: ARRAY
80407: IFFALSE 80445
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
80409: LD_VAR 0 7
80413: PPUSH
80414: LD_VAR 0 6
80418: PUSH
80419: LD_INT 1
80421: ARRAY
80422: PPUSH
80423: LD_VAR 0 6
80427: PUSH
80428: LD_INT 2
80430: ARRAY
80431: PPUSH
80432: CALL_OW 111
// wait ( 0 0$10 ) ;
80436: LD_INT 350
80438: PPUSH
80439: CALL_OW 67
// end else
80443: GO 80471
// begin ComMoveXY ( tmp , x , y ) ;
80445: LD_VAR 0 7
80449: PPUSH
80450: LD_VAR 0 4
80454: PPUSH
80455: LD_VAR 0 5
80459: PPUSH
80460: CALL_OW 111
// wait ( 0 0$3 ) ;
80464: LD_INT 105
80466: PPUSH
80467: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
80471: LD_VAR 0 7
80475: PPUSH
80476: LD_VAR 0 4
80480: PPUSH
80481: LD_VAR 0 5
80485: PPUSH
80486: CALL_OW 307
80490: IFFALSE 80332
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
80492: LD_VAR 0 7
80496: PPUSH
80497: LD_VAR 0 4
80501: PPUSH
80502: LD_VAR 0 5
80506: PPUSH
80507: LD_VAR 0 8
80511: PUSH
80512: LD_VAR 0 3
80516: ARRAY
80517: PPUSH
80518: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
80522: LD_INT 35
80524: PPUSH
80525: CALL_OW 67
// until not HasTask ( tmp ) ;
80529: LD_VAR 0 7
80533: PPUSH
80534: CALL_OW 314
80538: NOT
80539: IFFALSE 80522
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
80541: LD_ADDR_EXP 86
80545: PUSH
80546: LD_EXP 86
80550: PPUSH
80551: LD_VAR 0 2
80555: PUSH
80556: LD_EXP 86
80560: PUSH
80561: LD_VAR 0 2
80565: ARRAY
80566: PUSH
80567: LD_INT 1
80569: PLUS
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PPUSH
80575: LD_VAR 0 8
80579: PUSH
80580: LD_VAR 0 3
80584: ARRAY
80585: PPUSH
80586: CALL 24858 0 3
80590: ST_TO_ADDR
// end ;
80591: GO 80249
80593: POP
80594: POP
// MC_Reset ( i , 124 ) ;
80595: LD_VAR 0 2
80599: PPUSH
80600: LD_INT 124
80602: PPUSH
80603: CALL 63749 0 2
// end ; end ;
80607: GO 80004
80609: POP
80610: POP
// end ;
80611: LD_VAR 0 1
80615: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
80616: LD_INT 0
80618: PPUSH
80619: PPUSH
80620: PPUSH
// if not mc_bases then
80621: LD_EXP 50
80625: NOT
80626: IFFALSE 80630
// exit ;
80628: GO 81236
// for i = 1 to mc_bases do
80630: LD_ADDR_VAR 0 2
80634: PUSH
80635: DOUBLE
80636: LD_INT 1
80638: DEC
80639: ST_TO_ADDR
80640: LD_EXP 50
80644: PUSH
80645: FOR_TO
80646: IFFALSE 81234
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
80648: LD_ADDR_VAR 0 3
80652: PUSH
80653: LD_EXP 50
80657: PUSH
80658: LD_VAR 0 2
80662: ARRAY
80663: PPUSH
80664: LD_INT 25
80666: PUSH
80667: LD_INT 4
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: PPUSH
80674: CALL_OW 72
80678: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80679: LD_VAR 0 3
80683: NOT
80684: PUSH
80685: LD_EXP 87
80689: PUSH
80690: LD_VAR 0 2
80694: ARRAY
80695: NOT
80696: OR
80697: PUSH
80698: LD_EXP 50
80702: PUSH
80703: LD_VAR 0 2
80707: ARRAY
80708: PPUSH
80709: LD_INT 2
80711: PUSH
80712: LD_INT 30
80714: PUSH
80715: LD_INT 0
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: PUSH
80722: LD_INT 30
80724: PUSH
80725: LD_INT 1
80727: PUSH
80728: EMPTY
80729: LIST
80730: LIST
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: LIST
80736: PPUSH
80737: CALL_OW 72
80741: NOT
80742: OR
80743: IFFALSE 80793
// begin if mc_deposits_finder [ i ] then
80745: LD_EXP 88
80749: PUSH
80750: LD_VAR 0 2
80754: ARRAY
80755: IFFALSE 80791
// begin MC_Reset ( i , 125 ) ;
80757: LD_VAR 0 2
80761: PPUSH
80762: LD_INT 125
80764: PPUSH
80765: CALL 63749 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
80769: LD_ADDR_EXP 88
80773: PUSH
80774: LD_EXP 88
80778: PPUSH
80779: LD_VAR 0 2
80783: PPUSH
80784: EMPTY
80785: PPUSH
80786: CALL_OW 1
80790: ST_TO_ADDR
// end ; continue ;
80791: GO 80645
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
80793: LD_EXP 87
80797: PUSH
80798: LD_VAR 0 2
80802: ARRAY
80803: PUSH
80804: LD_INT 1
80806: ARRAY
80807: PUSH
80808: LD_INT 3
80810: ARRAY
80811: PUSH
80812: LD_INT 1
80814: EQUAL
80815: PUSH
80816: LD_INT 20
80818: PPUSH
80819: LD_EXP 76
80823: PUSH
80824: LD_VAR 0 2
80828: ARRAY
80829: PPUSH
80830: CALL_OW 321
80834: PUSH
80835: LD_INT 2
80837: NONEQUAL
80838: AND
80839: IFFALSE 80889
// begin if mc_deposits_finder [ i ] then
80841: LD_EXP 88
80845: PUSH
80846: LD_VAR 0 2
80850: ARRAY
80851: IFFALSE 80887
// begin MC_Reset ( i , 125 ) ;
80853: LD_VAR 0 2
80857: PPUSH
80858: LD_INT 125
80860: PPUSH
80861: CALL 63749 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
80865: LD_ADDR_EXP 88
80869: PUSH
80870: LD_EXP 88
80874: PPUSH
80875: LD_VAR 0 2
80879: PPUSH
80880: EMPTY
80881: PPUSH
80882: CALL_OW 1
80886: ST_TO_ADDR
// end ; continue ;
80887: GO 80645
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
80889: LD_EXP 87
80893: PUSH
80894: LD_VAR 0 2
80898: ARRAY
80899: PUSH
80900: LD_INT 1
80902: ARRAY
80903: PUSH
80904: LD_INT 1
80906: ARRAY
80907: PPUSH
80908: LD_EXP 87
80912: PUSH
80913: LD_VAR 0 2
80917: ARRAY
80918: PUSH
80919: LD_INT 1
80921: ARRAY
80922: PUSH
80923: LD_INT 2
80925: ARRAY
80926: PPUSH
80927: LD_EXP 76
80931: PUSH
80932: LD_VAR 0 2
80936: ARRAY
80937: PPUSH
80938: CALL_OW 440
80942: IFFALSE 80985
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
80944: LD_ADDR_EXP 87
80948: PUSH
80949: LD_EXP 87
80953: PPUSH
80954: LD_VAR 0 2
80958: PPUSH
80959: LD_EXP 87
80963: PUSH
80964: LD_VAR 0 2
80968: ARRAY
80969: PPUSH
80970: LD_INT 1
80972: PPUSH
80973: CALL_OW 3
80977: PPUSH
80978: CALL_OW 1
80982: ST_TO_ADDR
80983: GO 81232
// begin if not mc_deposits_finder [ i ] then
80985: LD_EXP 88
80989: PUSH
80990: LD_VAR 0 2
80994: ARRAY
80995: NOT
80996: IFFALSE 81048
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
80998: LD_ADDR_EXP 88
81002: PUSH
81003: LD_EXP 88
81007: PPUSH
81008: LD_VAR 0 2
81012: PPUSH
81013: LD_VAR 0 3
81017: PUSH
81018: LD_INT 1
81020: ARRAY
81021: PUSH
81022: EMPTY
81023: LIST
81024: PPUSH
81025: CALL_OW 1
81029: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
81030: LD_VAR 0 3
81034: PUSH
81035: LD_INT 1
81037: ARRAY
81038: PPUSH
81039: LD_INT 125
81041: PPUSH
81042: CALL_OW 109
// end else
81046: GO 81232
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
81048: LD_EXP 88
81052: PUSH
81053: LD_VAR 0 2
81057: ARRAY
81058: PUSH
81059: LD_INT 1
81061: ARRAY
81062: PPUSH
81063: CALL_OW 310
81067: IFFALSE 81090
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
81069: LD_EXP 88
81073: PUSH
81074: LD_VAR 0 2
81078: ARRAY
81079: PUSH
81080: LD_INT 1
81082: ARRAY
81083: PPUSH
81084: CALL_OW 122
81088: GO 81232
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
81090: LD_EXP 88
81094: PUSH
81095: LD_VAR 0 2
81099: ARRAY
81100: PUSH
81101: LD_INT 1
81103: ARRAY
81104: PPUSH
81105: CALL_OW 314
81109: NOT
81110: PUSH
81111: LD_EXP 88
81115: PUSH
81116: LD_VAR 0 2
81120: ARRAY
81121: PUSH
81122: LD_INT 1
81124: ARRAY
81125: PPUSH
81126: LD_EXP 87
81130: PUSH
81131: LD_VAR 0 2
81135: ARRAY
81136: PUSH
81137: LD_INT 1
81139: ARRAY
81140: PUSH
81141: LD_INT 1
81143: ARRAY
81144: PPUSH
81145: LD_EXP 87
81149: PUSH
81150: LD_VAR 0 2
81154: ARRAY
81155: PUSH
81156: LD_INT 1
81158: ARRAY
81159: PUSH
81160: LD_INT 2
81162: ARRAY
81163: PPUSH
81164: CALL_OW 297
81168: PUSH
81169: LD_INT 6
81171: GREATER
81172: AND
81173: IFFALSE 81232
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
81175: LD_EXP 88
81179: PUSH
81180: LD_VAR 0 2
81184: ARRAY
81185: PUSH
81186: LD_INT 1
81188: ARRAY
81189: PPUSH
81190: LD_EXP 87
81194: PUSH
81195: LD_VAR 0 2
81199: ARRAY
81200: PUSH
81201: LD_INT 1
81203: ARRAY
81204: PUSH
81205: LD_INT 1
81207: ARRAY
81208: PPUSH
81209: LD_EXP 87
81213: PUSH
81214: LD_VAR 0 2
81218: ARRAY
81219: PUSH
81220: LD_INT 1
81222: ARRAY
81223: PUSH
81224: LD_INT 2
81226: ARRAY
81227: PPUSH
81228: CALL_OW 111
// end ; end ; end ;
81232: GO 80645
81234: POP
81235: POP
// end ;
81236: LD_VAR 0 1
81240: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
81241: LD_INT 0
81243: PPUSH
81244: PPUSH
81245: PPUSH
81246: PPUSH
81247: PPUSH
81248: PPUSH
81249: PPUSH
81250: PPUSH
81251: PPUSH
81252: PPUSH
81253: PPUSH
// if not mc_bases then
81254: LD_EXP 50
81258: NOT
81259: IFFALSE 81263
// exit ;
81261: GO 82203
// for i = 1 to mc_bases do
81263: LD_ADDR_VAR 0 2
81267: PUSH
81268: DOUBLE
81269: LD_INT 1
81271: DEC
81272: ST_TO_ADDR
81273: LD_EXP 50
81277: PUSH
81278: FOR_TO
81279: IFFALSE 82201
// begin if not mc_bases [ i ] or mc_scan [ i ] then
81281: LD_EXP 50
81285: PUSH
81286: LD_VAR 0 2
81290: ARRAY
81291: NOT
81292: PUSH
81293: LD_EXP 73
81297: PUSH
81298: LD_VAR 0 2
81302: ARRAY
81303: OR
81304: IFFALSE 81308
// continue ;
81306: GO 81278
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
81308: LD_ADDR_VAR 0 7
81312: PUSH
81313: LD_EXP 50
81317: PUSH
81318: LD_VAR 0 2
81322: ARRAY
81323: PUSH
81324: LD_INT 1
81326: ARRAY
81327: PPUSH
81328: CALL_OW 248
81332: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
81333: LD_VAR 0 7
81337: PUSH
81338: LD_INT 3
81340: EQUAL
81341: PUSH
81342: LD_EXP 69
81346: PUSH
81347: LD_VAR 0 2
81351: ARRAY
81352: PUSH
81353: LD_EXP 72
81357: PUSH
81358: LD_VAR 0 2
81362: ARRAY
81363: UNION
81364: PPUSH
81365: LD_INT 33
81367: PUSH
81368: LD_INT 2
81370: PUSH
81371: EMPTY
81372: LIST
81373: LIST
81374: PPUSH
81375: CALL_OW 72
81379: NOT
81380: OR
81381: IFFALSE 81385
// continue ;
81383: GO 81278
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
81385: LD_ADDR_VAR 0 9
81389: PUSH
81390: LD_EXP 50
81394: PUSH
81395: LD_VAR 0 2
81399: ARRAY
81400: PPUSH
81401: LD_INT 30
81403: PUSH
81404: LD_INT 36
81406: PUSH
81407: EMPTY
81408: LIST
81409: LIST
81410: PPUSH
81411: CALL_OW 72
81415: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
81416: LD_ADDR_VAR 0 10
81420: PUSH
81421: LD_EXP 69
81425: PUSH
81426: LD_VAR 0 2
81430: ARRAY
81431: PPUSH
81432: LD_INT 34
81434: PUSH
81435: LD_INT 31
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: PPUSH
81442: CALL_OW 72
81446: ST_TO_ADDR
// if not cts and not mcts then
81447: LD_VAR 0 9
81451: NOT
81452: PUSH
81453: LD_VAR 0 10
81457: NOT
81458: AND
81459: IFFALSE 81463
// continue ;
81461: GO 81278
// x := cts ;
81463: LD_ADDR_VAR 0 11
81467: PUSH
81468: LD_VAR 0 9
81472: ST_TO_ADDR
// if not x then
81473: LD_VAR 0 11
81477: NOT
81478: IFFALSE 81490
// x := mcts ;
81480: LD_ADDR_VAR 0 11
81484: PUSH
81485: LD_VAR 0 10
81489: ST_TO_ADDR
// if not x then
81490: LD_VAR 0 11
81494: NOT
81495: IFFALSE 81499
// continue ;
81497: GO 81278
// if mc_remote_driver [ i ] then
81499: LD_EXP 90
81503: PUSH
81504: LD_VAR 0 2
81508: ARRAY
81509: IFFALSE 81896
// for j in mc_remote_driver [ i ] do
81511: LD_ADDR_VAR 0 3
81515: PUSH
81516: LD_EXP 90
81520: PUSH
81521: LD_VAR 0 2
81525: ARRAY
81526: PUSH
81527: FOR_IN
81528: IFFALSE 81894
// begin if GetClass ( j ) <> 3 then
81530: LD_VAR 0 3
81534: PPUSH
81535: CALL_OW 257
81539: PUSH
81540: LD_INT 3
81542: NONEQUAL
81543: IFFALSE 81596
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
81545: LD_ADDR_EXP 90
81549: PUSH
81550: LD_EXP 90
81554: PPUSH
81555: LD_VAR 0 2
81559: PPUSH
81560: LD_EXP 90
81564: PUSH
81565: LD_VAR 0 2
81569: ARRAY
81570: PUSH
81571: LD_VAR 0 3
81575: DIFF
81576: PPUSH
81577: CALL_OW 1
81581: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81582: LD_VAR 0 3
81586: PPUSH
81587: LD_INT 0
81589: PPUSH
81590: CALL_OW 109
// continue ;
81594: GO 81527
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
81596: LD_EXP 69
81600: PUSH
81601: LD_VAR 0 2
81605: ARRAY
81606: PPUSH
81607: LD_INT 34
81609: PUSH
81610: LD_INT 31
81612: PUSH
81613: EMPTY
81614: LIST
81615: LIST
81616: PUSH
81617: LD_INT 58
81619: PUSH
81620: EMPTY
81621: LIST
81622: PUSH
81623: EMPTY
81624: LIST
81625: LIST
81626: PPUSH
81627: CALL_OW 72
81631: PUSH
81632: LD_VAR 0 3
81636: PPUSH
81637: CALL 54215 0 1
81641: NOT
81642: AND
81643: IFFALSE 81714
// begin if IsInUnit ( j ) then
81645: LD_VAR 0 3
81649: PPUSH
81650: CALL_OW 310
81654: IFFALSE 81665
// ComExitBuilding ( j ) ;
81656: LD_VAR 0 3
81660: PPUSH
81661: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
81665: LD_VAR 0 3
81669: PPUSH
81670: LD_EXP 69
81674: PUSH
81675: LD_VAR 0 2
81679: ARRAY
81680: PPUSH
81681: LD_INT 34
81683: PUSH
81684: LD_INT 31
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: PUSH
81691: LD_INT 58
81693: PUSH
81694: EMPTY
81695: LIST
81696: PUSH
81697: EMPTY
81698: LIST
81699: LIST
81700: PPUSH
81701: CALL_OW 72
81705: PUSH
81706: LD_INT 1
81708: ARRAY
81709: PPUSH
81710: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
81714: LD_VAR 0 3
81718: PPUSH
81719: CALL_OW 310
81723: NOT
81724: PUSH
81725: LD_VAR 0 3
81729: PPUSH
81730: CALL_OW 310
81734: PPUSH
81735: CALL_OW 266
81739: PUSH
81740: LD_INT 36
81742: NONEQUAL
81743: PUSH
81744: LD_VAR 0 3
81748: PPUSH
81749: CALL 54215 0 1
81753: NOT
81754: AND
81755: OR
81756: IFFALSE 81892
// begin if IsInUnit ( j ) then
81758: LD_VAR 0 3
81762: PPUSH
81763: CALL_OW 310
81767: IFFALSE 81778
// ComExitBuilding ( j ) ;
81769: LD_VAR 0 3
81773: PPUSH
81774: CALL_OW 122
// ct := 0 ;
81778: LD_ADDR_VAR 0 8
81782: PUSH
81783: LD_INT 0
81785: ST_TO_ADDR
// for k in x do
81786: LD_ADDR_VAR 0 4
81790: PUSH
81791: LD_VAR 0 11
81795: PUSH
81796: FOR_IN
81797: IFFALSE 81870
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
81799: LD_VAR 0 4
81803: PPUSH
81804: CALL_OW 264
81808: PUSH
81809: LD_INT 31
81811: EQUAL
81812: PUSH
81813: LD_VAR 0 4
81817: PPUSH
81818: CALL_OW 311
81822: NOT
81823: AND
81824: PUSH
81825: LD_VAR 0 4
81829: PPUSH
81830: CALL_OW 266
81834: PUSH
81835: LD_INT 36
81837: EQUAL
81838: PUSH
81839: LD_VAR 0 4
81843: PPUSH
81844: CALL_OW 313
81848: PUSH
81849: LD_INT 3
81851: LESS
81852: AND
81853: OR
81854: IFFALSE 81868
// begin ct := k ;
81856: LD_ADDR_VAR 0 8
81860: PUSH
81861: LD_VAR 0 4
81865: ST_TO_ADDR
// break ;
81866: GO 81870
// end ;
81868: GO 81796
81870: POP
81871: POP
// if ct then
81872: LD_VAR 0 8
81876: IFFALSE 81892
// ComEnterUnit ( j , ct ) ;
81878: LD_VAR 0 3
81882: PPUSH
81883: LD_VAR 0 8
81887: PPUSH
81888: CALL_OW 120
// end ; end ;
81892: GO 81527
81894: POP
81895: POP
// places := 0 ;
81896: LD_ADDR_VAR 0 5
81900: PUSH
81901: LD_INT 0
81903: ST_TO_ADDR
// for j = 1 to x do
81904: LD_ADDR_VAR 0 3
81908: PUSH
81909: DOUBLE
81910: LD_INT 1
81912: DEC
81913: ST_TO_ADDR
81914: LD_VAR 0 11
81918: PUSH
81919: FOR_TO
81920: IFFALSE 81996
// if GetWeapon ( x [ j ] ) = ar_control_tower then
81922: LD_VAR 0 11
81926: PUSH
81927: LD_VAR 0 3
81931: ARRAY
81932: PPUSH
81933: CALL_OW 264
81937: PUSH
81938: LD_INT 31
81940: EQUAL
81941: IFFALSE 81959
// places := places + 1 else
81943: LD_ADDR_VAR 0 5
81947: PUSH
81948: LD_VAR 0 5
81952: PUSH
81953: LD_INT 1
81955: PLUS
81956: ST_TO_ADDR
81957: GO 81994
// if GetBType ( x [ j ] ) = b_control_tower then
81959: LD_VAR 0 11
81963: PUSH
81964: LD_VAR 0 3
81968: ARRAY
81969: PPUSH
81970: CALL_OW 266
81974: PUSH
81975: LD_INT 36
81977: EQUAL
81978: IFFALSE 81994
// places := places + 3 ;
81980: LD_ADDR_VAR 0 5
81984: PUSH
81985: LD_VAR 0 5
81989: PUSH
81990: LD_INT 3
81992: PLUS
81993: ST_TO_ADDR
81994: GO 81919
81996: POP
81997: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
81998: LD_VAR 0 5
82002: PUSH
82003: LD_INT 0
82005: EQUAL
82006: PUSH
82007: LD_VAR 0 5
82011: PUSH
82012: LD_EXP 90
82016: PUSH
82017: LD_VAR 0 2
82021: ARRAY
82022: LESSEQUAL
82023: OR
82024: IFFALSE 82028
// continue ;
82026: GO 81278
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
82028: LD_ADDR_VAR 0 6
82032: PUSH
82033: LD_EXP 50
82037: PUSH
82038: LD_VAR 0 2
82042: ARRAY
82043: PPUSH
82044: LD_INT 25
82046: PUSH
82047: LD_INT 3
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PPUSH
82054: CALL_OW 72
82058: PUSH
82059: LD_EXP 90
82063: PUSH
82064: LD_VAR 0 2
82068: ARRAY
82069: DIFF
82070: PPUSH
82071: LD_INT 3
82073: PPUSH
82074: CALL 55115 0 2
82078: ST_TO_ADDR
// for j in tmp do
82079: LD_ADDR_VAR 0 3
82083: PUSH
82084: LD_VAR 0 6
82088: PUSH
82089: FOR_IN
82090: IFFALSE 82125
// if GetTag ( j ) > 0 then
82092: LD_VAR 0 3
82096: PPUSH
82097: CALL_OW 110
82101: PUSH
82102: LD_INT 0
82104: GREATER
82105: IFFALSE 82123
// tmp := tmp diff j ;
82107: LD_ADDR_VAR 0 6
82111: PUSH
82112: LD_VAR 0 6
82116: PUSH
82117: LD_VAR 0 3
82121: DIFF
82122: ST_TO_ADDR
82123: GO 82089
82125: POP
82126: POP
// if not tmp then
82127: LD_VAR 0 6
82131: NOT
82132: IFFALSE 82136
// continue ;
82134: GO 81278
// if places then
82136: LD_VAR 0 5
82140: IFFALSE 82199
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
82142: LD_ADDR_EXP 90
82146: PUSH
82147: LD_EXP 90
82151: PPUSH
82152: LD_VAR 0 2
82156: PPUSH
82157: LD_EXP 90
82161: PUSH
82162: LD_VAR 0 2
82166: ARRAY
82167: PUSH
82168: LD_VAR 0 6
82172: PUSH
82173: LD_INT 1
82175: ARRAY
82176: UNION
82177: PPUSH
82178: CALL_OW 1
82182: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
82183: LD_VAR 0 6
82187: PUSH
82188: LD_INT 1
82190: ARRAY
82191: PPUSH
82192: LD_INT 126
82194: PPUSH
82195: CALL_OW 109
// end ; end ;
82199: GO 81278
82201: POP
82202: POP
// end ;
82203: LD_VAR 0 1
82207: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
82208: LD_INT 0
82210: PPUSH
82211: PPUSH
82212: PPUSH
82213: PPUSH
82214: PPUSH
82215: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
82216: LD_VAR 0 1
82220: NOT
82221: PUSH
82222: LD_VAR 0 2
82226: NOT
82227: OR
82228: PUSH
82229: LD_VAR 0 3
82233: NOT
82234: OR
82235: PUSH
82236: LD_VAR 0 4
82240: PUSH
82241: LD_INT 1
82243: PUSH
82244: LD_INT 2
82246: PUSH
82247: LD_INT 3
82249: PUSH
82250: LD_INT 4
82252: PUSH
82253: LD_INT 5
82255: PUSH
82256: LD_INT 8
82258: PUSH
82259: LD_INT 9
82261: PUSH
82262: LD_INT 15
82264: PUSH
82265: LD_INT 16
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: IN
82279: NOT
82280: OR
82281: IFFALSE 82285
// exit ;
82283: GO 83185
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
82285: LD_ADDR_VAR 0 2
82289: PUSH
82290: LD_VAR 0 2
82294: PPUSH
82295: LD_INT 21
82297: PUSH
82298: LD_INT 3
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: LD_INT 24
82307: PUSH
82308: LD_INT 250
82310: PUSH
82311: EMPTY
82312: LIST
82313: LIST
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PPUSH
82319: CALL_OW 72
82323: ST_TO_ADDR
// case class of 1 , 15 :
82324: LD_VAR 0 4
82328: PUSH
82329: LD_INT 1
82331: DOUBLE
82332: EQUAL
82333: IFTRUE 82343
82335: LD_INT 15
82337: DOUBLE
82338: EQUAL
82339: IFTRUE 82343
82341: GO 82428
82343: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
82344: LD_ADDR_VAR 0 8
82348: PUSH
82349: LD_VAR 0 2
82353: PPUSH
82354: LD_INT 2
82356: PUSH
82357: LD_INT 30
82359: PUSH
82360: LD_INT 32
82362: PUSH
82363: EMPTY
82364: LIST
82365: LIST
82366: PUSH
82367: LD_INT 30
82369: PUSH
82370: LD_INT 31
82372: PUSH
82373: EMPTY
82374: LIST
82375: LIST
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: LIST
82381: PPUSH
82382: CALL_OW 72
82386: PUSH
82387: LD_VAR 0 2
82391: PPUSH
82392: LD_INT 2
82394: PUSH
82395: LD_INT 30
82397: PUSH
82398: LD_INT 4
82400: PUSH
82401: EMPTY
82402: LIST
82403: LIST
82404: PUSH
82405: LD_INT 30
82407: PUSH
82408: LD_INT 5
82410: PUSH
82411: EMPTY
82412: LIST
82413: LIST
82414: PUSH
82415: EMPTY
82416: LIST
82417: LIST
82418: LIST
82419: PPUSH
82420: CALL_OW 72
82424: ADD
82425: ST_TO_ADDR
82426: GO 82674
82428: LD_INT 2
82430: DOUBLE
82431: EQUAL
82432: IFTRUE 82442
82434: LD_INT 16
82436: DOUBLE
82437: EQUAL
82438: IFTRUE 82442
82440: GO 82488
82442: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
82443: LD_ADDR_VAR 0 8
82447: PUSH
82448: LD_VAR 0 2
82452: PPUSH
82453: LD_INT 2
82455: PUSH
82456: LD_INT 30
82458: PUSH
82459: LD_INT 0
82461: PUSH
82462: EMPTY
82463: LIST
82464: LIST
82465: PUSH
82466: LD_INT 30
82468: PUSH
82469: LD_INT 1
82471: PUSH
82472: EMPTY
82473: LIST
82474: LIST
82475: PUSH
82476: EMPTY
82477: LIST
82478: LIST
82479: LIST
82480: PPUSH
82481: CALL_OW 72
82485: ST_TO_ADDR
82486: GO 82674
82488: LD_INT 3
82490: DOUBLE
82491: EQUAL
82492: IFTRUE 82496
82494: GO 82542
82496: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
82497: LD_ADDR_VAR 0 8
82501: PUSH
82502: LD_VAR 0 2
82506: PPUSH
82507: LD_INT 2
82509: PUSH
82510: LD_INT 30
82512: PUSH
82513: LD_INT 2
82515: PUSH
82516: EMPTY
82517: LIST
82518: LIST
82519: PUSH
82520: LD_INT 30
82522: PUSH
82523: LD_INT 3
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: LIST
82534: PPUSH
82535: CALL_OW 72
82539: ST_TO_ADDR
82540: GO 82674
82542: LD_INT 4
82544: DOUBLE
82545: EQUAL
82546: IFTRUE 82550
82548: GO 82607
82550: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
82551: LD_ADDR_VAR 0 8
82555: PUSH
82556: LD_VAR 0 2
82560: PPUSH
82561: LD_INT 2
82563: PUSH
82564: LD_INT 30
82566: PUSH
82567: LD_INT 6
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: LD_INT 30
82576: PUSH
82577: LD_INT 7
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 30
82586: PUSH
82587: LD_INT 8
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PUSH
82594: EMPTY
82595: LIST
82596: LIST
82597: LIST
82598: LIST
82599: PPUSH
82600: CALL_OW 72
82604: ST_TO_ADDR
82605: GO 82674
82607: LD_INT 5
82609: DOUBLE
82610: EQUAL
82611: IFTRUE 82627
82613: LD_INT 8
82615: DOUBLE
82616: EQUAL
82617: IFTRUE 82627
82619: LD_INT 9
82621: DOUBLE
82622: EQUAL
82623: IFTRUE 82627
82625: GO 82673
82627: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
82628: LD_ADDR_VAR 0 8
82632: PUSH
82633: LD_VAR 0 2
82637: PPUSH
82638: LD_INT 2
82640: PUSH
82641: LD_INT 30
82643: PUSH
82644: LD_INT 4
82646: PUSH
82647: EMPTY
82648: LIST
82649: LIST
82650: PUSH
82651: LD_INT 30
82653: PUSH
82654: LD_INT 5
82656: PUSH
82657: EMPTY
82658: LIST
82659: LIST
82660: PUSH
82661: EMPTY
82662: LIST
82663: LIST
82664: LIST
82665: PPUSH
82666: CALL_OW 72
82670: ST_TO_ADDR
82671: GO 82674
82673: POP
// if not tmp then
82674: LD_VAR 0 8
82678: NOT
82679: IFFALSE 82683
// exit ;
82681: GO 83185
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
82683: LD_VAR 0 4
82687: PUSH
82688: LD_INT 1
82690: PUSH
82691: LD_INT 15
82693: PUSH
82694: EMPTY
82695: LIST
82696: LIST
82697: IN
82698: PUSH
82699: LD_EXP 59
82703: PUSH
82704: LD_VAR 0 1
82708: ARRAY
82709: AND
82710: IFFALSE 82866
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
82712: LD_ADDR_VAR 0 9
82716: PUSH
82717: LD_EXP 59
82721: PUSH
82722: LD_VAR 0 1
82726: ARRAY
82727: PUSH
82728: LD_INT 1
82730: ARRAY
82731: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
82732: LD_VAR 0 9
82736: PUSH
82737: LD_EXP 60
82741: PUSH
82742: LD_VAR 0 1
82746: ARRAY
82747: IN
82748: NOT
82749: IFFALSE 82864
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
82751: LD_ADDR_EXP 60
82755: PUSH
82756: LD_EXP 60
82760: PPUSH
82761: LD_VAR 0 1
82765: PUSH
82766: LD_EXP 60
82770: PUSH
82771: LD_VAR 0 1
82775: ARRAY
82776: PUSH
82777: LD_INT 1
82779: PLUS
82780: PUSH
82781: EMPTY
82782: LIST
82783: LIST
82784: PPUSH
82785: LD_VAR 0 9
82789: PPUSH
82790: CALL 24858 0 3
82794: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
82795: LD_ADDR_EXP 59
82799: PUSH
82800: LD_EXP 59
82804: PPUSH
82805: LD_VAR 0 1
82809: PPUSH
82810: LD_EXP 59
82814: PUSH
82815: LD_VAR 0 1
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 9
82825: DIFF
82826: PPUSH
82827: CALL_OW 1
82831: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
82832: LD_VAR 0 3
82836: PPUSH
82837: LD_EXP 60
82841: PUSH
82842: LD_VAR 0 1
82846: ARRAY
82847: PUSH
82848: LD_EXP 60
82852: PUSH
82853: LD_VAR 0 1
82857: ARRAY
82858: ARRAY
82859: PPUSH
82860: CALL_OW 120
// end ; exit ;
82864: GO 83185
// end ; if tmp > 1 then
82866: LD_VAR 0 8
82870: PUSH
82871: LD_INT 1
82873: GREATER
82874: IFFALSE 82978
// for i = 2 to tmp do
82876: LD_ADDR_VAR 0 6
82880: PUSH
82881: DOUBLE
82882: LD_INT 2
82884: DEC
82885: ST_TO_ADDR
82886: LD_VAR 0 8
82890: PUSH
82891: FOR_TO
82892: IFFALSE 82976
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
82894: LD_VAR 0 8
82898: PUSH
82899: LD_VAR 0 6
82903: ARRAY
82904: PPUSH
82905: CALL_OW 461
82909: PUSH
82910: LD_INT 6
82912: EQUAL
82913: IFFALSE 82974
// begin x := tmp [ i ] ;
82915: LD_ADDR_VAR 0 9
82919: PUSH
82920: LD_VAR 0 8
82924: PUSH
82925: LD_VAR 0 6
82929: ARRAY
82930: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
82931: LD_ADDR_VAR 0 8
82935: PUSH
82936: LD_VAR 0 8
82940: PPUSH
82941: LD_VAR 0 6
82945: PPUSH
82946: CALL_OW 3
82950: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
82951: LD_ADDR_VAR 0 8
82955: PUSH
82956: LD_VAR 0 8
82960: PPUSH
82961: LD_INT 1
82963: PPUSH
82964: LD_VAR 0 9
82968: PPUSH
82969: CALL_OW 2
82973: ST_TO_ADDR
// end ;
82974: GO 82891
82976: POP
82977: POP
// for i in tmp do
82978: LD_ADDR_VAR 0 6
82982: PUSH
82983: LD_VAR 0 8
82987: PUSH
82988: FOR_IN
82989: IFFALSE 83058
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
82991: LD_VAR 0 6
82995: PPUSH
82996: CALL_OW 313
83000: PUSH
83001: LD_INT 6
83003: LESS
83004: PUSH
83005: LD_VAR 0 6
83009: PPUSH
83010: CALL_OW 266
83014: PUSH
83015: LD_INT 31
83017: PUSH
83018: LD_INT 32
83020: PUSH
83021: EMPTY
83022: LIST
83023: LIST
83024: IN
83025: NOT
83026: AND
83027: PUSH
83028: LD_VAR 0 6
83032: PPUSH
83033: CALL_OW 313
83037: PUSH
83038: LD_INT 0
83040: EQUAL
83041: OR
83042: IFFALSE 83056
// begin j := i ;
83044: LD_ADDR_VAR 0 7
83048: PUSH
83049: LD_VAR 0 6
83053: ST_TO_ADDR
// break ;
83054: GO 83058
// end ; end ;
83056: GO 82988
83058: POP
83059: POP
// if j then
83060: LD_VAR 0 7
83064: IFFALSE 83082
// ComEnterUnit ( unit , j ) else
83066: LD_VAR 0 3
83070: PPUSH
83071: LD_VAR 0 7
83075: PPUSH
83076: CALL_OW 120
83080: GO 83185
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83082: LD_ADDR_VAR 0 10
83086: PUSH
83087: LD_VAR 0 2
83091: PPUSH
83092: LD_INT 2
83094: PUSH
83095: LD_INT 30
83097: PUSH
83098: LD_INT 0
83100: PUSH
83101: EMPTY
83102: LIST
83103: LIST
83104: PUSH
83105: LD_INT 30
83107: PUSH
83108: LD_INT 1
83110: PUSH
83111: EMPTY
83112: LIST
83113: LIST
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: LIST
83119: PPUSH
83120: CALL_OW 72
83124: ST_TO_ADDR
// if depot then
83125: LD_VAR 0 10
83129: IFFALSE 83185
// begin depot := NearestUnitToUnit ( depot , unit ) ;
83131: LD_ADDR_VAR 0 10
83135: PUSH
83136: LD_VAR 0 10
83140: PPUSH
83141: LD_VAR 0 3
83145: PPUSH
83146: CALL_OW 74
83150: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
83151: LD_VAR 0 3
83155: PPUSH
83156: LD_VAR 0 10
83160: PPUSH
83161: CALL_OW 296
83165: PUSH
83166: LD_INT 10
83168: GREATER
83169: IFFALSE 83185
// ComStandNearbyBuilding ( unit , depot ) ;
83171: LD_VAR 0 3
83175: PPUSH
83176: LD_VAR 0 10
83180: PPUSH
83181: CALL 21436 0 2
// end ; end ; end ;
83185: LD_VAR 0 5
83189: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
83190: LD_INT 0
83192: PPUSH
83193: PPUSH
83194: PPUSH
83195: PPUSH
// if not mc_bases then
83196: LD_EXP 50
83200: NOT
83201: IFFALSE 83205
// exit ;
83203: GO 83444
// for i = 1 to mc_bases do
83205: LD_ADDR_VAR 0 2
83209: PUSH
83210: DOUBLE
83211: LD_INT 1
83213: DEC
83214: ST_TO_ADDR
83215: LD_EXP 50
83219: PUSH
83220: FOR_TO
83221: IFFALSE 83442
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
83223: LD_ADDR_VAR 0 4
83227: PUSH
83228: LD_EXP 50
83232: PUSH
83233: LD_VAR 0 2
83237: ARRAY
83238: PPUSH
83239: LD_INT 21
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PPUSH
83249: CALL_OW 72
83253: PUSH
83254: LD_EXP 79
83258: PUSH
83259: LD_VAR 0 2
83263: ARRAY
83264: UNION
83265: ST_TO_ADDR
// if not tmp then
83266: LD_VAR 0 4
83270: NOT
83271: IFFALSE 83275
// continue ;
83273: GO 83220
// for j in tmp do
83275: LD_ADDR_VAR 0 3
83279: PUSH
83280: LD_VAR 0 4
83284: PUSH
83285: FOR_IN
83286: IFFALSE 83438
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
83288: LD_VAR 0 3
83292: PPUSH
83293: CALL_OW 110
83297: NOT
83298: PUSH
83299: LD_VAR 0 3
83303: PPUSH
83304: CALL_OW 314
83308: NOT
83309: AND
83310: PUSH
83311: LD_VAR 0 3
83315: PPUSH
83316: CALL_OW 311
83320: NOT
83321: AND
83322: PUSH
83323: LD_VAR 0 3
83327: PPUSH
83328: CALL_OW 310
83332: NOT
83333: AND
83334: PUSH
83335: LD_VAR 0 3
83339: PUSH
83340: LD_EXP 53
83344: PUSH
83345: LD_VAR 0 2
83349: ARRAY
83350: PUSH
83351: LD_INT 1
83353: ARRAY
83354: IN
83355: NOT
83356: AND
83357: PUSH
83358: LD_VAR 0 3
83362: PUSH
83363: LD_EXP 53
83367: PUSH
83368: LD_VAR 0 2
83372: ARRAY
83373: PUSH
83374: LD_INT 2
83376: ARRAY
83377: IN
83378: NOT
83379: AND
83380: PUSH
83381: LD_VAR 0 3
83385: PUSH
83386: LD_EXP 62
83390: PUSH
83391: LD_VAR 0 2
83395: ARRAY
83396: IN
83397: NOT
83398: AND
83399: IFFALSE 83436
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
83401: LD_VAR 0 2
83405: PPUSH
83406: LD_EXP 50
83410: PUSH
83411: LD_VAR 0 2
83415: ARRAY
83416: PPUSH
83417: LD_VAR 0 3
83421: PPUSH
83422: LD_VAR 0 3
83426: PPUSH
83427: CALL_OW 257
83431: PPUSH
83432: CALL 82208 0 4
// end ;
83436: GO 83285
83438: POP
83439: POP
// end ;
83440: GO 83220
83442: POP
83443: POP
// end ;
83444: LD_VAR 0 1
83448: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
83449: LD_INT 0
83451: PPUSH
83452: PPUSH
83453: PPUSH
83454: PPUSH
83455: PPUSH
83456: PPUSH
// if not mc_bases [ base ] then
83457: LD_EXP 50
83461: PUSH
83462: LD_VAR 0 1
83466: ARRAY
83467: NOT
83468: IFFALSE 83472
// exit ;
83470: GO 83654
// tmp := [ ] ;
83472: LD_ADDR_VAR 0 6
83476: PUSH
83477: EMPTY
83478: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
83479: LD_ADDR_VAR 0 7
83483: PUSH
83484: LD_VAR 0 3
83488: PPUSH
83489: LD_INT 0
83491: PPUSH
83492: CALL_OW 517
83496: ST_TO_ADDR
// if not list then
83497: LD_VAR 0 7
83501: NOT
83502: IFFALSE 83506
// exit ;
83504: GO 83654
// for i = 1 to amount do
83506: LD_ADDR_VAR 0 5
83510: PUSH
83511: DOUBLE
83512: LD_INT 1
83514: DEC
83515: ST_TO_ADDR
83516: LD_VAR 0 2
83520: PUSH
83521: FOR_TO
83522: IFFALSE 83602
// begin x := rand ( 1 , list [ 1 ] ) ;
83524: LD_ADDR_VAR 0 8
83528: PUSH
83529: LD_INT 1
83531: PPUSH
83532: LD_VAR 0 7
83536: PUSH
83537: LD_INT 1
83539: ARRAY
83540: PPUSH
83541: CALL_OW 12
83545: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
83546: LD_ADDR_VAR 0 6
83550: PUSH
83551: LD_VAR 0 6
83555: PPUSH
83556: LD_VAR 0 5
83560: PPUSH
83561: LD_VAR 0 7
83565: PUSH
83566: LD_INT 1
83568: ARRAY
83569: PUSH
83570: LD_VAR 0 8
83574: ARRAY
83575: PUSH
83576: LD_VAR 0 7
83580: PUSH
83581: LD_INT 2
83583: ARRAY
83584: PUSH
83585: LD_VAR 0 8
83589: ARRAY
83590: PUSH
83591: EMPTY
83592: LIST
83593: LIST
83594: PPUSH
83595: CALL_OW 1
83599: ST_TO_ADDR
// end ;
83600: GO 83521
83602: POP
83603: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
83604: LD_ADDR_EXP 63
83608: PUSH
83609: LD_EXP 63
83613: PPUSH
83614: LD_VAR 0 1
83618: PPUSH
83619: LD_VAR 0 6
83623: PPUSH
83624: CALL_OW 1
83628: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
83629: LD_ADDR_EXP 65
83633: PUSH
83634: LD_EXP 65
83638: PPUSH
83639: LD_VAR 0 1
83643: PPUSH
83644: LD_VAR 0 3
83648: PPUSH
83649: CALL_OW 1
83653: ST_TO_ADDR
// end ;
83654: LD_VAR 0 4
83658: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
83659: LD_INT 0
83661: PPUSH
// if not mc_bases [ base ] then
83662: LD_EXP 50
83666: PUSH
83667: LD_VAR 0 1
83671: ARRAY
83672: NOT
83673: IFFALSE 83677
// exit ;
83675: GO 83702
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
83677: LD_ADDR_EXP 55
83681: PUSH
83682: LD_EXP 55
83686: PPUSH
83687: LD_VAR 0 1
83691: PPUSH
83692: LD_VAR 0 2
83696: PPUSH
83697: CALL_OW 1
83701: ST_TO_ADDR
// end ;
83702: LD_VAR 0 3
83706: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
83707: LD_INT 0
83709: PPUSH
// if not mc_bases [ base ] then
83710: LD_EXP 50
83714: PUSH
83715: LD_VAR 0 1
83719: ARRAY
83720: NOT
83721: IFFALSE 83725
// exit ;
83723: GO 83762
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
83725: LD_ADDR_EXP 55
83729: PUSH
83730: LD_EXP 55
83734: PPUSH
83735: LD_VAR 0 1
83739: PPUSH
83740: LD_EXP 55
83744: PUSH
83745: LD_VAR 0 1
83749: ARRAY
83750: PUSH
83751: LD_VAR 0 2
83755: UNION
83756: PPUSH
83757: CALL_OW 1
83761: ST_TO_ADDR
// end ;
83762: LD_VAR 0 3
83766: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
83767: LD_INT 0
83769: PPUSH
// if not mc_bases [ base ] then
83770: LD_EXP 50
83774: PUSH
83775: LD_VAR 0 1
83779: ARRAY
83780: NOT
83781: IFFALSE 83785
// exit ;
83783: GO 83810
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
83785: LD_ADDR_EXP 71
83789: PUSH
83790: LD_EXP 71
83794: PPUSH
83795: LD_VAR 0 1
83799: PPUSH
83800: LD_VAR 0 2
83804: PPUSH
83805: CALL_OW 1
83809: ST_TO_ADDR
// end ;
83810: LD_VAR 0 3
83814: RET
// export function MC_InsertProduceList ( base , components ) ; begin
83815: LD_INT 0
83817: PPUSH
// if not mc_bases [ base ] then
83818: LD_EXP 50
83822: PUSH
83823: LD_VAR 0 1
83827: ARRAY
83828: NOT
83829: IFFALSE 83833
// exit ;
83831: GO 83870
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
83833: LD_ADDR_EXP 71
83837: PUSH
83838: LD_EXP 71
83842: PPUSH
83843: LD_VAR 0 1
83847: PPUSH
83848: LD_EXP 71
83852: PUSH
83853: LD_VAR 0 1
83857: ARRAY
83858: PUSH
83859: LD_VAR 0 2
83863: ADD
83864: PPUSH
83865: CALL_OW 1
83869: ST_TO_ADDR
// end ;
83870: LD_VAR 0 3
83874: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
83875: LD_INT 0
83877: PPUSH
// if not mc_bases [ base ] then
83878: LD_EXP 50
83882: PUSH
83883: LD_VAR 0 1
83887: ARRAY
83888: NOT
83889: IFFALSE 83893
// exit ;
83891: GO 83947
// mc_defender := Replace ( mc_defender , base , deflist ) ;
83893: LD_ADDR_EXP 72
83897: PUSH
83898: LD_EXP 72
83902: PPUSH
83903: LD_VAR 0 1
83907: PPUSH
83908: LD_VAR 0 2
83912: PPUSH
83913: CALL_OW 1
83917: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
83918: LD_ADDR_EXP 61
83922: PUSH
83923: LD_EXP 61
83927: PPUSH
83928: LD_VAR 0 1
83932: PPUSH
83933: LD_VAR 0 2
83937: PUSH
83938: LD_INT 0
83940: PLUS
83941: PPUSH
83942: CALL_OW 1
83946: ST_TO_ADDR
// end ;
83947: LD_VAR 0 3
83951: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
83952: LD_INT 0
83954: PPUSH
// if not mc_bases [ base ] then
83955: LD_EXP 50
83959: PUSH
83960: LD_VAR 0 1
83964: ARRAY
83965: NOT
83966: IFFALSE 83970
// exit ;
83968: GO 83995
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
83970: LD_ADDR_EXP 61
83974: PUSH
83975: LD_EXP 61
83979: PPUSH
83980: LD_VAR 0 1
83984: PPUSH
83985: LD_VAR 0 2
83989: PPUSH
83990: CALL_OW 1
83994: ST_TO_ADDR
// end ;
83995: LD_VAR 0 3
83999: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
84000: LD_INT 0
84002: PPUSH
84003: PPUSH
84004: PPUSH
84005: PPUSH
// if not mc_bases [ base ] then
84006: LD_EXP 50
84010: PUSH
84011: LD_VAR 0 1
84015: ARRAY
84016: NOT
84017: IFFALSE 84021
// exit ;
84019: GO 84086
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
84021: LD_ADDR_EXP 70
84025: PUSH
84026: LD_EXP 70
84030: PPUSH
84031: LD_VAR 0 1
84035: PUSH
84036: LD_EXP 70
84040: PUSH
84041: LD_VAR 0 1
84045: ARRAY
84046: PUSH
84047: LD_INT 1
84049: PLUS
84050: PUSH
84051: EMPTY
84052: LIST
84053: LIST
84054: PPUSH
84055: LD_VAR 0 1
84059: PUSH
84060: LD_VAR 0 2
84064: PUSH
84065: LD_VAR 0 3
84069: PUSH
84070: LD_VAR 0 4
84074: PUSH
84075: EMPTY
84076: LIST
84077: LIST
84078: LIST
84079: LIST
84080: PPUSH
84081: CALL 24858 0 3
84085: ST_TO_ADDR
// end ;
84086: LD_VAR 0 5
84090: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
84091: LD_INT 0
84093: PPUSH
// if not mc_bases [ base ] then
84094: LD_EXP 50
84098: PUSH
84099: LD_VAR 0 1
84103: ARRAY
84104: NOT
84105: IFFALSE 84109
// exit ;
84107: GO 84134
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
84109: LD_ADDR_EXP 87
84113: PUSH
84114: LD_EXP 87
84118: PPUSH
84119: LD_VAR 0 1
84123: PPUSH
84124: LD_VAR 0 2
84128: PPUSH
84129: CALL_OW 1
84133: ST_TO_ADDR
// end ;
84134: LD_VAR 0 3
84138: RET
// export function MC_GetMinesField ( base ) ; begin
84139: LD_INT 0
84141: PPUSH
// result := mc_mines [ base ] ;
84142: LD_ADDR_VAR 0 2
84146: PUSH
84147: LD_EXP 63
84151: PUSH
84152: LD_VAR 0 1
84156: ARRAY
84157: ST_TO_ADDR
// end ;
84158: LD_VAR 0 2
84162: RET
// export function MC_GetProduceList ( base ) ; begin
84163: LD_INT 0
84165: PPUSH
// result := mc_produce [ base ] ;
84166: LD_ADDR_VAR 0 2
84170: PUSH
84171: LD_EXP 71
84175: PUSH
84176: LD_VAR 0 1
84180: ARRAY
84181: ST_TO_ADDR
// end ;
84182: LD_VAR 0 2
84186: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
84187: LD_INT 0
84189: PPUSH
84190: PPUSH
// if not mc_bases then
84191: LD_EXP 50
84195: NOT
84196: IFFALSE 84200
// exit ;
84198: GO 84265
// if mc_bases [ base ] then
84200: LD_EXP 50
84204: PUSH
84205: LD_VAR 0 1
84209: ARRAY
84210: IFFALSE 84265
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84212: LD_ADDR_VAR 0 3
84216: PUSH
84217: LD_EXP 50
84221: PUSH
84222: LD_VAR 0 1
84226: ARRAY
84227: PPUSH
84228: LD_INT 30
84230: PUSH
84231: LD_VAR 0 2
84235: PUSH
84236: EMPTY
84237: LIST
84238: LIST
84239: PPUSH
84240: CALL_OW 72
84244: ST_TO_ADDR
// if result then
84245: LD_VAR 0 3
84249: IFFALSE 84265
// result := result [ 1 ] ;
84251: LD_ADDR_VAR 0 3
84255: PUSH
84256: LD_VAR 0 3
84260: PUSH
84261: LD_INT 1
84263: ARRAY
84264: ST_TO_ADDR
// end ; end ;
84265: LD_VAR 0 3
84269: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
84270: LD_INT 0
84272: PPUSH
84273: PPUSH
// if not mc_bases then
84274: LD_EXP 50
84278: NOT
84279: IFFALSE 84283
// exit ;
84281: GO 84328
// if mc_bases [ base ] then
84283: LD_EXP 50
84287: PUSH
84288: LD_VAR 0 1
84292: ARRAY
84293: IFFALSE 84328
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84295: LD_ADDR_VAR 0 3
84299: PUSH
84300: LD_EXP 50
84304: PUSH
84305: LD_VAR 0 1
84309: ARRAY
84310: PPUSH
84311: LD_INT 30
84313: PUSH
84314: LD_VAR 0 2
84318: PUSH
84319: EMPTY
84320: LIST
84321: LIST
84322: PPUSH
84323: CALL_OW 72
84327: ST_TO_ADDR
// end ;
84328: LD_VAR 0 3
84332: RET
// export function MC_SetTame ( base , area ) ; begin
84333: LD_INT 0
84335: PPUSH
// if not mc_bases or not base then
84336: LD_EXP 50
84340: NOT
84341: PUSH
84342: LD_VAR 0 1
84346: NOT
84347: OR
84348: IFFALSE 84352
// exit ;
84350: GO 84377
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
84352: LD_ADDR_EXP 78
84356: PUSH
84357: LD_EXP 78
84361: PPUSH
84362: LD_VAR 0 1
84366: PPUSH
84367: LD_VAR 0 2
84371: PPUSH
84372: CALL_OW 1
84376: ST_TO_ADDR
// end ;
84377: LD_VAR 0 3
84381: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
84382: LD_INT 0
84384: PPUSH
84385: PPUSH
// if not mc_bases or not base then
84386: LD_EXP 50
84390: NOT
84391: PUSH
84392: LD_VAR 0 1
84396: NOT
84397: OR
84398: IFFALSE 84402
// exit ;
84400: GO 84504
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84402: LD_ADDR_VAR 0 4
84406: PUSH
84407: LD_EXP 50
84411: PUSH
84412: LD_VAR 0 1
84416: ARRAY
84417: PPUSH
84418: LD_INT 30
84420: PUSH
84421: LD_VAR 0 2
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: PPUSH
84430: CALL_OW 72
84434: ST_TO_ADDR
// if not tmp then
84435: LD_VAR 0 4
84439: NOT
84440: IFFALSE 84444
// exit ;
84442: GO 84504
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
84444: LD_ADDR_EXP 82
84448: PUSH
84449: LD_EXP 82
84453: PPUSH
84454: LD_VAR 0 1
84458: PPUSH
84459: LD_EXP 82
84463: PUSH
84464: LD_VAR 0 1
84468: ARRAY
84469: PPUSH
84470: LD_EXP 82
84474: PUSH
84475: LD_VAR 0 1
84479: ARRAY
84480: PUSH
84481: LD_INT 1
84483: PLUS
84484: PPUSH
84485: LD_VAR 0 4
84489: PUSH
84490: LD_INT 1
84492: ARRAY
84493: PPUSH
84494: CALL_OW 2
84498: PPUSH
84499: CALL_OW 1
84503: ST_TO_ADDR
// end ;
84504: LD_VAR 0 3
84508: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
84509: LD_INT 0
84511: PPUSH
84512: PPUSH
// if not mc_bases or not base or not kinds then
84513: LD_EXP 50
84517: NOT
84518: PUSH
84519: LD_VAR 0 1
84523: NOT
84524: OR
84525: PUSH
84526: LD_VAR 0 2
84530: NOT
84531: OR
84532: IFFALSE 84536
// exit ;
84534: GO 84597
// for i in kinds do
84536: LD_ADDR_VAR 0 4
84540: PUSH
84541: LD_VAR 0 2
84545: PUSH
84546: FOR_IN
84547: IFFALSE 84595
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
84549: LD_ADDR_EXP 84
84553: PUSH
84554: LD_EXP 84
84558: PPUSH
84559: LD_VAR 0 1
84563: PUSH
84564: LD_EXP 84
84568: PUSH
84569: LD_VAR 0 1
84573: ARRAY
84574: PUSH
84575: LD_INT 1
84577: PLUS
84578: PUSH
84579: EMPTY
84580: LIST
84581: LIST
84582: PPUSH
84583: LD_VAR 0 4
84587: PPUSH
84588: CALL 24858 0 3
84592: ST_TO_ADDR
84593: GO 84546
84595: POP
84596: POP
// end ;
84597: LD_VAR 0 3
84601: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
84602: LD_INT 0
84604: PPUSH
// if not mc_bases or not base or not areas then
84605: LD_EXP 50
84609: NOT
84610: PUSH
84611: LD_VAR 0 1
84615: NOT
84616: OR
84617: PUSH
84618: LD_VAR 0 2
84622: NOT
84623: OR
84624: IFFALSE 84628
// exit ;
84626: GO 84653
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
84628: LD_ADDR_EXP 68
84632: PUSH
84633: LD_EXP 68
84637: PPUSH
84638: LD_VAR 0 1
84642: PPUSH
84643: LD_VAR 0 2
84647: PPUSH
84648: CALL_OW 1
84652: ST_TO_ADDR
// end ;
84653: LD_VAR 0 3
84657: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
84658: LD_INT 0
84660: PPUSH
// if not mc_bases or not base or not teleports_exit then
84661: LD_EXP 50
84665: NOT
84666: PUSH
84667: LD_VAR 0 1
84671: NOT
84672: OR
84673: PUSH
84674: LD_VAR 0 2
84678: NOT
84679: OR
84680: IFFALSE 84684
// exit ;
84682: GO 84709
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
84684: LD_ADDR_EXP 85
84688: PUSH
84689: LD_EXP 85
84693: PPUSH
84694: LD_VAR 0 1
84698: PPUSH
84699: LD_VAR 0 2
84703: PPUSH
84704: CALL_OW 1
84708: ST_TO_ADDR
// end ;
84709: LD_VAR 0 3
84713: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
84714: LD_INT 0
84716: PPUSH
84717: PPUSH
84718: PPUSH
// if not mc_bases or not base or not ext_list then
84719: LD_EXP 50
84723: NOT
84724: PUSH
84725: LD_VAR 0 1
84729: NOT
84730: OR
84731: PUSH
84732: LD_VAR 0 5
84736: NOT
84737: OR
84738: IFFALSE 84742
// exit ;
84740: GO 84915
// tmp := GetFacExtXYD ( x , y , d ) ;
84742: LD_ADDR_VAR 0 8
84746: PUSH
84747: LD_VAR 0 2
84751: PPUSH
84752: LD_VAR 0 3
84756: PPUSH
84757: LD_VAR 0 4
84761: PPUSH
84762: CALL 54245 0 3
84766: ST_TO_ADDR
// if not tmp then
84767: LD_VAR 0 8
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 84915
// for i in tmp do
84776: LD_ADDR_VAR 0 7
84780: PUSH
84781: LD_VAR 0 8
84785: PUSH
84786: FOR_IN
84787: IFFALSE 84913
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
84789: LD_ADDR_EXP 55
84793: PUSH
84794: LD_EXP 55
84798: PPUSH
84799: LD_VAR 0 1
84803: PPUSH
84804: LD_EXP 55
84808: PUSH
84809: LD_VAR 0 1
84813: ARRAY
84814: PPUSH
84815: LD_EXP 55
84819: PUSH
84820: LD_VAR 0 1
84824: ARRAY
84825: PUSH
84826: LD_INT 1
84828: PLUS
84829: PPUSH
84830: LD_VAR 0 5
84834: PUSH
84835: LD_INT 1
84837: ARRAY
84838: PUSH
84839: LD_VAR 0 7
84843: PUSH
84844: LD_INT 1
84846: ARRAY
84847: PUSH
84848: LD_VAR 0 7
84852: PUSH
84853: LD_INT 2
84855: ARRAY
84856: PUSH
84857: LD_VAR 0 7
84861: PUSH
84862: LD_INT 3
84864: ARRAY
84865: PUSH
84866: EMPTY
84867: LIST
84868: LIST
84869: LIST
84870: LIST
84871: PPUSH
84872: CALL_OW 2
84876: PPUSH
84877: CALL_OW 1
84881: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
84882: LD_ADDR_VAR 0 5
84886: PUSH
84887: LD_VAR 0 5
84891: PPUSH
84892: LD_INT 1
84894: PPUSH
84895: CALL_OW 3
84899: ST_TO_ADDR
// if not ext_list then
84900: LD_VAR 0 5
84904: NOT
84905: IFFALSE 84911
// exit ;
84907: POP
84908: POP
84909: GO 84915
// end ;
84911: GO 84786
84913: POP
84914: POP
// end ;
84915: LD_VAR 0 6
84919: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
84920: LD_INT 0
84922: PPUSH
// if not mc_bases or not base or not weapon_list then
84923: LD_EXP 50
84927: NOT
84928: PUSH
84929: LD_VAR 0 1
84933: NOT
84934: OR
84935: PUSH
84936: LD_VAR 0 2
84940: NOT
84941: OR
84942: IFFALSE 84946
// exit ;
84944: GO 84971
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
84946: LD_ADDR_EXP 89
84950: PUSH
84951: LD_EXP 89
84955: PPUSH
84956: LD_VAR 0 1
84960: PPUSH
84961: LD_VAR 0 2
84965: PPUSH
84966: CALL_OW 1
84970: ST_TO_ADDR
// end ;
84971: LD_VAR 0 3
84975: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
84976: LD_INT 0
84978: PPUSH
// if not mc_bases or not base or not tech_list then
84979: LD_EXP 50
84983: NOT
84984: PUSH
84985: LD_VAR 0 1
84989: NOT
84990: OR
84991: PUSH
84992: LD_VAR 0 2
84996: NOT
84997: OR
84998: IFFALSE 85002
// exit ;
85000: GO 85027
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
85002: LD_ADDR_EXP 77
85006: PUSH
85007: LD_EXP 77
85011: PPUSH
85012: LD_VAR 0 1
85016: PPUSH
85017: LD_VAR 0 2
85021: PPUSH
85022: CALL_OW 1
85026: ST_TO_ADDR
// end ;
85027: LD_VAR 0 3
85031: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
85032: LD_INT 0
85034: PPUSH
// if not mc_bases or not parking_area or not base then
85035: LD_EXP 50
85039: NOT
85040: PUSH
85041: LD_VAR 0 2
85045: NOT
85046: OR
85047: PUSH
85048: LD_VAR 0 1
85052: NOT
85053: OR
85054: IFFALSE 85058
// exit ;
85056: GO 85083
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
85058: LD_ADDR_EXP 74
85062: PUSH
85063: LD_EXP 74
85067: PPUSH
85068: LD_VAR 0 1
85072: PPUSH
85073: LD_VAR 0 2
85077: PPUSH
85078: CALL_OW 1
85082: ST_TO_ADDR
// end ;
85083: LD_VAR 0 3
85087: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
85088: LD_INT 0
85090: PPUSH
// if not mc_bases or not base or not scan_area then
85091: LD_EXP 50
85095: NOT
85096: PUSH
85097: LD_VAR 0 1
85101: NOT
85102: OR
85103: PUSH
85104: LD_VAR 0 2
85108: NOT
85109: OR
85110: IFFALSE 85114
// exit ;
85112: GO 85139
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
85114: LD_ADDR_EXP 75
85118: PUSH
85119: LD_EXP 75
85123: PPUSH
85124: LD_VAR 0 1
85128: PPUSH
85129: LD_VAR 0 2
85133: PPUSH
85134: CALL_OW 1
85138: ST_TO_ADDR
// end ;
85139: LD_VAR 0 3
85143: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
85144: LD_INT 0
85146: PPUSH
85147: PPUSH
// if not mc_bases or not base then
85148: LD_EXP 50
85152: NOT
85153: PUSH
85154: LD_VAR 0 1
85158: NOT
85159: OR
85160: IFFALSE 85164
// exit ;
85162: GO 85228
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
85164: LD_ADDR_VAR 0 3
85168: PUSH
85169: LD_INT 1
85171: PUSH
85172: LD_INT 2
85174: PUSH
85175: LD_INT 3
85177: PUSH
85178: LD_INT 4
85180: PUSH
85181: LD_INT 11
85183: PUSH
85184: EMPTY
85185: LIST
85186: LIST
85187: LIST
85188: LIST
85189: LIST
85190: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
85191: LD_ADDR_EXP 77
85195: PUSH
85196: LD_EXP 77
85200: PPUSH
85201: LD_VAR 0 1
85205: PPUSH
85206: LD_EXP 77
85210: PUSH
85211: LD_VAR 0 1
85215: ARRAY
85216: PUSH
85217: LD_VAR 0 3
85221: DIFF
85222: PPUSH
85223: CALL_OW 1
85227: ST_TO_ADDR
// end ;
85228: LD_VAR 0 2
85232: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
85233: LD_INT 0
85235: PPUSH
// result := mc_vehicles [ base ] ;
85236: LD_ADDR_VAR 0 3
85240: PUSH
85241: LD_EXP 69
85245: PUSH
85246: LD_VAR 0 1
85250: ARRAY
85251: ST_TO_ADDR
// if onlyCombat then
85252: LD_VAR 0 2
85256: IFFALSE 85434
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
85258: LD_ADDR_VAR 0 3
85262: PUSH
85263: LD_VAR 0 3
85267: PUSH
85268: LD_VAR 0 3
85272: PPUSH
85273: LD_INT 2
85275: PUSH
85276: LD_INT 34
85278: PUSH
85279: LD_INT 12
85281: PUSH
85282: EMPTY
85283: LIST
85284: LIST
85285: PUSH
85286: LD_INT 34
85288: PUSH
85289: LD_INT 51
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PUSH
85296: LD_INT 34
85298: PUSH
85299: LD_EXP 30
85303: PUSH
85304: EMPTY
85305: LIST
85306: LIST
85307: PUSH
85308: LD_INT 34
85310: PUSH
85311: LD_INT 32
85313: PUSH
85314: EMPTY
85315: LIST
85316: LIST
85317: PUSH
85318: LD_INT 34
85320: PUSH
85321: LD_INT 13
85323: PUSH
85324: EMPTY
85325: LIST
85326: LIST
85327: PUSH
85328: LD_INT 34
85330: PUSH
85331: LD_INT 52
85333: PUSH
85334: EMPTY
85335: LIST
85336: LIST
85337: PUSH
85338: LD_INT 34
85340: PUSH
85341: LD_EXP 35
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: LD_INT 34
85352: PUSH
85353: LD_INT 14
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: PUSH
85360: LD_INT 34
85362: PUSH
85363: LD_INT 53
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 34
85372: PUSH
85373: LD_EXP 29
85377: PUSH
85378: EMPTY
85379: LIST
85380: LIST
85381: PUSH
85382: LD_INT 34
85384: PUSH
85385: LD_INT 31
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: PUSH
85392: LD_INT 34
85394: PUSH
85395: LD_INT 48
85397: PUSH
85398: EMPTY
85399: LIST
85400: LIST
85401: PUSH
85402: LD_INT 34
85404: PUSH
85405: LD_INT 8
85407: PUSH
85408: EMPTY
85409: LIST
85410: LIST
85411: PUSH
85412: EMPTY
85413: LIST
85414: LIST
85415: LIST
85416: LIST
85417: LIST
85418: LIST
85419: LIST
85420: LIST
85421: LIST
85422: LIST
85423: LIST
85424: LIST
85425: LIST
85426: LIST
85427: PPUSH
85428: CALL_OW 72
85432: DIFF
85433: ST_TO_ADDR
// end ; end_of_file
85434: LD_VAR 0 3
85438: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
85439: LD_INT 0
85441: PPUSH
85442: PPUSH
85443: PPUSH
// if not mc_bases or not skirmish then
85444: LD_EXP 50
85448: NOT
85449: PUSH
85450: LD_EXP 48
85454: NOT
85455: OR
85456: IFFALSE 85460
// exit ;
85458: GO 85625
// for i = 1 to mc_bases do
85460: LD_ADDR_VAR 0 4
85464: PUSH
85465: DOUBLE
85466: LD_INT 1
85468: DEC
85469: ST_TO_ADDR
85470: LD_EXP 50
85474: PUSH
85475: FOR_TO
85476: IFFALSE 85623
// begin if sci in mc_bases [ i ] then
85478: LD_VAR 0 2
85482: PUSH
85483: LD_EXP 50
85487: PUSH
85488: LD_VAR 0 4
85492: ARRAY
85493: IN
85494: IFFALSE 85621
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
85496: LD_ADDR_EXP 79
85500: PUSH
85501: LD_EXP 79
85505: PPUSH
85506: LD_VAR 0 4
85510: PUSH
85511: LD_EXP 79
85515: PUSH
85516: LD_VAR 0 4
85520: ARRAY
85521: PUSH
85522: LD_INT 1
85524: PLUS
85525: PUSH
85526: EMPTY
85527: LIST
85528: LIST
85529: PPUSH
85530: LD_VAR 0 1
85534: PPUSH
85535: CALL 24858 0 3
85539: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
85540: LD_ADDR_VAR 0 5
85544: PUSH
85545: LD_EXP 50
85549: PUSH
85550: LD_VAR 0 4
85554: ARRAY
85555: PPUSH
85556: LD_INT 2
85558: PUSH
85559: LD_INT 30
85561: PUSH
85562: LD_INT 0
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PUSH
85569: LD_INT 30
85571: PUSH
85572: LD_INT 1
85574: PUSH
85575: EMPTY
85576: LIST
85577: LIST
85578: PUSH
85579: EMPTY
85580: LIST
85581: LIST
85582: LIST
85583: PPUSH
85584: CALL_OW 72
85588: PPUSH
85589: LD_VAR 0 1
85593: PPUSH
85594: CALL_OW 74
85598: ST_TO_ADDR
// if tmp then
85599: LD_VAR 0 5
85603: IFFALSE 85619
// ComStandNearbyBuilding ( ape , tmp ) ;
85605: LD_VAR 0 1
85609: PPUSH
85610: LD_VAR 0 5
85614: PPUSH
85615: CALL 21436 0 2
// break ;
85619: GO 85623
// end ; end ;
85621: GO 85475
85623: POP
85624: POP
// end ;
85625: LD_VAR 0 3
85629: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
85630: LD_INT 0
85632: PPUSH
85633: PPUSH
85634: PPUSH
// if not mc_bases or not skirmish then
85635: LD_EXP 50
85639: NOT
85640: PUSH
85641: LD_EXP 48
85645: NOT
85646: OR
85647: IFFALSE 85651
// exit ;
85649: GO 85740
// for i = 1 to mc_bases do
85651: LD_ADDR_VAR 0 4
85655: PUSH
85656: DOUBLE
85657: LD_INT 1
85659: DEC
85660: ST_TO_ADDR
85661: LD_EXP 50
85665: PUSH
85666: FOR_TO
85667: IFFALSE 85738
// begin if building in mc_busy_turret_list [ i ] then
85669: LD_VAR 0 1
85673: PUSH
85674: LD_EXP 60
85678: PUSH
85679: LD_VAR 0 4
85683: ARRAY
85684: IN
85685: IFFALSE 85736
// begin tmp := mc_busy_turret_list [ i ] diff building ;
85687: LD_ADDR_VAR 0 5
85691: PUSH
85692: LD_EXP 60
85696: PUSH
85697: LD_VAR 0 4
85701: ARRAY
85702: PUSH
85703: LD_VAR 0 1
85707: DIFF
85708: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
85709: LD_ADDR_EXP 60
85713: PUSH
85714: LD_EXP 60
85718: PPUSH
85719: LD_VAR 0 4
85723: PPUSH
85724: LD_VAR 0 5
85728: PPUSH
85729: CALL_OW 1
85733: ST_TO_ADDR
// break ;
85734: GO 85738
// end ; end ;
85736: GO 85666
85738: POP
85739: POP
// end ;
85740: LD_VAR 0 3
85744: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
85745: LD_INT 0
85747: PPUSH
85748: PPUSH
85749: PPUSH
// if not mc_bases or not skirmish then
85750: LD_EXP 50
85754: NOT
85755: PUSH
85756: LD_EXP 48
85760: NOT
85761: OR
85762: IFFALSE 85766
// exit ;
85764: GO 85965
// for i = 1 to mc_bases do
85766: LD_ADDR_VAR 0 5
85770: PUSH
85771: DOUBLE
85772: LD_INT 1
85774: DEC
85775: ST_TO_ADDR
85776: LD_EXP 50
85780: PUSH
85781: FOR_TO
85782: IFFALSE 85963
// if building in mc_bases [ i ] then
85784: LD_VAR 0 1
85788: PUSH
85789: LD_EXP 50
85793: PUSH
85794: LD_VAR 0 5
85798: ARRAY
85799: IN
85800: IFFALSE 85961
// begin tmp := mc_bases [ i ] diff building ;
85802: LD_ADDR_VAR 0 6
85806: PUSH
85807: LD_EXP 50
85811: PUSH
85812: LD_VAR 0 5
85816: ARRAY
85817: PUSH
85818: LD_VAR 0 1
85822: DIFF
85823: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
85824: LD_ADDR_EXP 50
85828: PUSH
85829: LD_EXP 50
85833: PPUSH
85834: LD_VAR 0 5
85838: PPUSH
85839: LD_VAR 0 6
85843: PPUSH
85844: CALL_OW 1
85848: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
85849: LD_VAR 0 1
85853: PUSH
85854: LD_EXP 58
85858: PUSH
85859: LD_VAR 0 5
85863: ARRAY
85864: IN
85865: IFFALSE 85904
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
85867: LD_ADDR_EXP 58
85871: PUSH
85872: LD_EXP 58
85876: PPUSH
85877: LD_VAR 0 5
85881: PPUSH
85882: LD_EXP 58
85886: PUSH
85887: LD_VAR 0 5
85891: ARRAY
85892: PUSH
85893: LD_VAR 0 1
85897: DIFF
85898: PPUSH
85899: CALL_OW 1
85903: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
85904: LD_VAR 0 1
85908: PUSH
85909: LD_EXP 59
85913: PUSH
85914: LD_VAR 0 5
85918: ARRAY
85919: IN
85920: IFFALSE 85959
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
85922: LD_ADDR_EXP 59
85926: PUSH
85927: LD_EXP 59
85931: PPUSH
85932: LD_VAR 0 5
85936: PPUSH
85937: LD_EXP 59
85941: PUSH
85942: LD_VAR 0 5
85946: ARRAY
85947: PUSH
85948: LD_VAR 0 1
85952: DIFF
85953: PPUSH
85954: CALL_OW 1
85958: ST_TO_ADDR
// break ;
85959: GO 85963
// end ;
85961: GO 85781
85963: POP
85964: POP
// end ;
85965: LD_VAR 0 4
85969: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
85970: LD_INT 0
85972: PPUSH
85973: PPUSH
85974: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
85975: LD_EXP 50
85979: NOT
85980: PUSH
85981: LD_EXP 48
85985: NOT
85986: OR
85987: PUSH
85988: LD_VAR 0 3
85992: PUSH
85993: LD_EXP 76
85997: IN
85998: NOT
85999: OR
86000: IFFALSE 86004
// exit ;
86002: GO 86127
// for i = 1 to mc_vehicles do
86004: LD_ADDR_VAR 0 6
86008: PUSH
86009: DOUBLE
86010: LD_INT 1
86012: DEC
86013: ST_TO_ADDR
86014: LD_EXP 69
86018: PUSH
86019: FOR_TO
86020: IFFALSE 86125
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
86022: LD_VAR 0 2
86026: PUSH
86027: LD_EXP 69
86031: PUSH
86032: LD_VAR 0 6
86036: ARRAY
86037: IN
86038: PUSH
86039: LD_VAR 0 1
86043: PUSH
86044: LD_EXP 69
86048: PUSH
86049: LD_VAR 0 6
86053: ARRAY
86054: IN
86055: OR
86056: IFFALSE 86123
// begin tmp := mc_vehicles [ i ] diff old ;
86058: LD_ADDR_VAR 0 7
86062: PUSH
86063: LD_EXP 69
86067: PUSH
86068: LD_VAR 0 6
86072: ARRAY
86073: PUSH
86074: LD_VAR 0 2
86078: DIFF
86079: ST_TO_ADDR
// tmp := tmp diff new ;
86080: LD_ADDR_VAR 0 7
86084: PUSH
86085: LD_VAR 0 7
86089: PUSH
86090: LD_VAR 0 1
86094: DIFF
86095: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
86096: LD_ADDR_EXP 69
86100: PUSH
86101: LD_EXP 69
86105: PPUSH
86106: LD_VAR 0 6
86110: PPUSH
86111: LD_VAR 0 7
86115: PPUSH
86116: CALL_OW 1
86120: ST_TO_ADDR
// break ;
86121: GO 86125
// end ;
86123: GO 86019
86125: POP
86126: POP
// end ;
86127: LD_VAR 0 5
86131: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
86132: LD_INT 0
86134: PPUSH
86135: PPUSH
86136: PPUSH
86137: PPUSH
// if not mc_bases or not skirmish then
86138: LD_EXP 50
86142: NOT
86143: PUSH
86144: LD_EXP 48
86148: NOT
86149: OR
86150: IFFALSE 86154
// exit ;
86152: GO 86546
// side := GetSide ( vehicle ) ;
86154: LD_ADDR_VAR 0 5
86158: PUSH
86159: LD_VAR 0 1
86163: PPUSH
86164: CALL_OW 255
86168: ST_TO_ADDR
// for i = 1 to mc_bases do
86169: LD_ADDR_VAR 0 4
86173: PUSH
86174: DOUBLE
86175: LD_INT 1
86177: DEC
86178: ST_TO_ADDR
86179: LD_EXP 50
86183: PUSH
86184: FOR_TO
86185: IFFALSE 86544
// begin if factory in mc_bases [ i ] then
86187: LD_VAR 0 2
86191: PUSH
86192: LD_EXP 50
86196: PUSH
86197: LD_VAR 0 4
86201: ARRAY
86202: IN
86203: IFFALSE 86542
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
86205: LD_EXP 72
86209: PUSH
86210: LD_VAR 0 4
86214: ARRAY
86215: PUSH
86216: LD_EXP 61
86220: PUSH
86221: LD_VAR 0 4
86225: ARRAY
86226: LESS
86227: PUSH
86228: LD_VAR 0 1
86232: PPUSH
86233: CALL_OW 264
86237: PUSH
86238: LD_INT 31
86240: PUSH
86241: LD_INT 32
86243: PUSH
86244: LD_INT 51
86246: PUSH
86247: LD_EXP 30
86251: PUSH
86252: LD_INT 12
86254: PUSH
86255: LD_INT 30
86257: PUSH
86258: LD_EXP 29
86262: PUSH
86263: LD_INT 11
86265: PUSH
86266: LD_INT 53
86268: PUSH
86269: LD_INT 14
86271: PUSH
86272: LD_EXP 33
86276: PUSH
86277: LD_INT 29
86279: PUSH
86280: LD_EXP 31
86284: PUSH
86285: LD_INT 13
86287: PUSH
86288: LD_INT 52
86290: PUSH
86291: LD_EXP 35
86295: PUSH
86296: LD_INT 48
86298: PUSH
86299: LD_INT 8
86301: PUSH
86302: EMPTY
86303: LIST
86304: LIST
86305: LIST
86306: LIST
86307: LIST
86308: LIST
86309: LIST
86310: LIST
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: IN
86322: NOT
86323: AND
86324: IFFALSE 86372
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
86326: LD_ADDR_EXP 72
86330: PUSH
86331: LD_EXP 72
86335: PPUSH
86336: LD_VAR 0 4
86340: PUSH
86341: LD_EXP 72
86345: PUSH
86346: LD_VAR 0 4
86350: ARRAY
86351: PUSH
86352: LD_INT 1
86354: PLUS
86355: PUSH
86356: EMPTY
86357: LIST
86358: LIST
86359: PPUSH
86360: LD_VAR 0 1
86364: PPUSH
86365: CALL 24858 0 3
86369: ST_TO_ADDR
86370: GO 86416
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
86372: LD_ADDR_EXP 69
86376: PUSH
86377: LD_EXP 69
86381: PPUSH
86382: LD_VAR 0 4
86386: PUSH
86387: LD_EXP 69
86391: PUSH
86392: LD_VAR 0 4
86396: ARRAY
86397: PUSH
86398: LD_INT 1
86400: PLUS
86401: PUSH
86402: EMPTY
86403: LIST
86404: LIST
86405: PPUSH
86406: LD_VAR 0 1
86410: PPUSH
86411: CALL 24858 0 3
86415: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
86416: LD_VAR 0 1
86420: PPUSH
86421: CALL_OW 263
86425: PUSH
86426: LD_INT 2
86428: EQUAL
86429: IFFALSE 86458
// begin repeat wait ( 0 0$3 ) ;
86431: LD_INT 105
86433: PPUSH
86434: CALL_OW 67
// Connect ( vehicle ) ;
86438: LD_VAR 0 1
86442: PPUSH
86443: CALL 27829 0 1
// until IsControledBy ( vehicle ) ;
86447: LD_VAR 0 1
86451: PPUSH
86452: CALL_OW 312
86456: IFFALSE 86431
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
86458: LD_VAR 0 1
86462: PPUSH
86463: LD_EXP 74
86467: PUSH
86468: LD_VAR 0 4
86472: ARRAY
86473: PPUSH
86474: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
86478: LD_VAR 0 1
86482: PPUSH
86483: CALL_OW 263
86487: PUSH
86488: LD_INT 1
86490: NONEQUAL
86491: IFFALSE 86495
// break ;
86493: GO 86544
// repeat wait ( 0 0$1 ) ;
86495: LD_INT 35
86497: PPUSH
86498: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
86502: LD_VAR 0 1
86506: PPUSH
86507: LD_EXP 74
86511: PUSH
86512: LD_VAR 0 4
86516: ARRAY
86517: PPUSH
86518: CALL_OW 308
86522: IFFALSE 86495
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
86524: LD_VAR 0 1
86528: PPUSH
86529: CALL_OW 311
86533: PPUSH
86534: CALL_OW 121
// exit ;
86538: POP
86539: POP
86540: GO 86546
// end ; end ;
86542: GO 86184
86544: POP
86545: POP
// end ;
86546: LD_VAR 0 3
86550: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
86551: LD_INT 0
86553: PPUSH
86554: PPUSH
86555: PPUSH
86556: PPUSH
// if not mc_bases or not skirmish then
86557: LD_EXP 50
86561: NOT
86562: PUSH
86563: LD_EXP 48
86567: NOT
86568: OR
86569: IFFALSE 86573
// exit ;
86571: GO 86926
// repeat wait ( 0 0$1 ) ;
86573: LD_INT 35
86575: PPUSH
86576: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
86580: LD_VAR 0 2
86584: PPUSH
86585: LD_VAR 0 3
86589: PPUSH
86590: CALL_OW 284
86594: IFFALSE 86573
// if GetResourceTypeXY ( x , y ) = mat_artefact then
86596: LD_VAR 0 2
86600: PPUSH
86601: LD_VAR 0 3
86605: PPUSH
86606: CALL_OW 283
86610: PUSH
86611: LD_INT 4
86613: EQUAL
86614: IFFALSE 86618
// exit ;
86616: GO 86926
// for i = 1 to mc_bases do
86618: LD_ADDR_VAR 0 7
86622: PUSH
86623: DOUBLE
86624: LD_INT 1
86626: DEC
86627: ST_TO_ADDR
86628: LD_EXP 50
86632: PUSH
86633: FOR_TO
86634: IFFALSE 86924
// begin if mc_crates_area [ i ] then
86636: LD_EXP 68
86640: PUSH
86641: LD_VAR 0 7
86645: ARRAY
86646: IFFALSE 86757
// for j in mc_crates_area [ i ] do
86648: LD_ADDR_VAR 0 8
86652: PUSH
86653: LD_EXP 68
86657: PUSH
86658: LD_VAR 0 7
86662: ARRAY
86663: PUSH
86664: FOR_IN
86665: IFFALSE 86755
// if InArea ( x , y , j ) then
86667: LD_VAR 0 2
86671: PPUSH
86672: LD_VAR 0 3
86676: PPUSH
86677: LD_VAR 0 8
86681: PPUSH
86682: CALL_OW 309
86686: IFFALSE 86753
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
86688: LD_ADDR_EXP 66
86692: PUSH
86693: LD_EXP 66
86697: PPUSH
86698: LD_VAR 0 7
86702: PUSH
86703: LD_EXP 66
86707: PUSH
86708: LD_VAR 0 7
86712: ARRAY
86713: PUSH
86714: LD_INT 1
86716: PLUS
86717: PUSH
86718: EMPTY
86719: LIST
86720: LIST
86721: PPUSH
86722: LD_VAR 0 4
86726: PUSH
86727: LD_VAR 0 2
86731: PUSH
86732: LD_VAR 0 3
86736: PUSH
86737: EMPTY
86738: LIST
86739: LIST
86740: LIST
86741: PPUSH
86742: CALL 24858 0 3
86746: ST_TO_ADDR
// exit ;
86747: POP
86748: POP
86749: POP
86750: POP
86751: GO 86926
// end ;
86753: GO 86664
86755: POP
86756: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
86757: LD_ADDR_VAR 0 9
86761: PUSH
86762: LD_EXP 50
86766: PUSH
86767: LD_VAR 0 7
86771: ARRAY
86772: PPUSH
86773: LD_INT 2
86775: PUSH
86776: LD_INT 30
86778: PUSH
86779: LD_INT 0
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: PUSH
86786: LD_INT 30
86788: PUSH
86789: LD_INT 1
86791: PUSH
86792: EMPTY
86793: LIST
86794: LIST
86795: PUSH
86796: EMPTY
86797: LIST
86798: LIST
86799: LIST
86800: PPUSH
86801: CALL_OW 72
86805: ST_TO_ADDR
// if not depot then
86806: LD_VAR 0 9
86810: NOT
86811: IFFALSE 86815
// continue ;
86813: GO 86633
// for j in depot do
86815: LD_ADDR_VAR 0 8
86819: PUSH
86820: LD_VAR 0 9
86824: PUSH
86825: FOR_IN
86826: IFFALSE 86920
// if GetDistUnitXY ( j , x , y ) < 30 then
86828: LD_VAR 0 8
86832: PPUSH
86833: LD_VAR 0 2
86837: PPUSH
86838: LD_VAR 0 3
86842: PPUSH
86843: CALL_OW 297
86847: PUSH
86848: LD_INT 30
86850: LESS
86851: IFFALSE 86918
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
86853: LD_ADDR_EXP 66
86857: PUSH
86858: LD_EXP 66
86862: PPUSH
86863: LD_VAR 0 7
86867: PUSH
86868: LD_EXP 66
86872: PUSH
86873: LD_VAR 0 7
86877: ARRAY
86878: PUSH
86879: LD_INT 1
86881: PLUS
86882: PUSH
86883: EMPTY
86884: LIST
86885: LIST
86886: PPUSH
86887: LD_VAR 0 4
86891: PUSH
86892: LD_VAR 0 2
86896: PUSH
86897: LD_VAR 0 3
86901: PUSH
86902: EMPTY
86903: LIST
86904: LIST
86905: LIST
86906: PPUSH
86907: CALL 24858 0 3
86911: ST_TO_ADDR
// exit ;
86912: POP
86913: POP
86914: POP
86915: POP
86916: GO 86926
// end ;
86918: GO 86825
86920: POP
86921: POP
// end ;
86922: GO 86633
86924: POP
86925: POP
// end ;
86926: LD_VAR 0 6
86930: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
86931: LD_INT 0
86933: PPUSH
86934: PPUSH
86935: PPUSH
86936: PPUSH
// if not mc_bases or not skirmish then
86937: LD_EXP 50
86941: NOT
86942: PUSH
86943: LD_EXP 48
86947: NOT
86948: OR
86949: IFFALSE 86953
// exit ;
86951: GO 87230
// side := GetSide ( lab ) ;
86953: LD_ADDR_VAR 0 4
86957: PUSH
86958: LD_VAR 0 2
86962: PPUSH
86963: CALL_OW 255
86967: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
86968: LD_VAR 0 4
86972: PUSH
86973: LD_EXP 76
86977: IN
86978: NOT
86979: PUSH
86980: LD_EXP 77
86984: NOT
86985: OR
86986: PUSH
86987: LD_EXP 50
86991: NOT
86992: OR
86993: IFFALSE 86997
// exit ;
86995: GO 87230
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
86997: LD_ADDR_EXP 77
87001: PUSH
87002: LD_EXP 77
87006: PPUSH
87007: LD_VAR 0 4
87011: PPUSH
87012: LD_EXP 77
87016: PUSH
87017: LD_VAR 0 4
87021: ARRAY
87022: PUSH
87023: LD_VAR 0 1
87027: DIFF
87028: PPUSH
87029: CALL_OW 1
87033: ST_TO_ADDR
// for i = 1 to mc_bases do
87034: LD_ADDR_VAR 0 5
87038: PUSH
87039: DOUBLE
87040: LD_INT 1
87042: DEC
87043: ST_TO_ADDR
87044: LD_EXP 50
87048: PUSH
87049: FOR_TO
87050: IFFALSE 87228
// begin if lab in mc_bases [ i ] then
87052: LD_VAR 0 2
87056: PUSH
87057: LD_EXP 50
87061: PUSH
87062: LD_VAR 0 5
87066: ARRAY
87067: IN
87068: IFFALSE 87226
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
87070: LD_VAR 0 1
87074: PUSH
87075: LD_INT 11
87077: PUSH
87078: LD_INT 4
87080: PUSH
87081: LD_INT 3
87083: PUSH
87084: LD_INT 2
87086: PUSH
87087: EMPTY
87088: LIST
87089: LIST
87090: LIST
87091: LIST
87092: IN
87093: PUSH
87094: LD_EXP 80
87098: PUSH
87099: LD_VAR 0 5
87103: ARRAY
87104: AND
87105: IFFALSE 87226
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
87107: LD_ADDR_VAR 0 6
87111: PUSH
87112: LD_EXP 80
87116: PUSH
87117: LD_VAR 0 5
87121: ARRAY
87122: PUSH
87123: LD_INT 1
87125: ARRAY
87126: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
87127: LD_ADDR_EXP 80
87131: PUSH
87132: LD_EXP 80
87136: PPUSH
87137: LD_VAR 0 5
87141: PPUSH
87142: EMPTY
87143: PPUSH
87144: CALL_OW 1
87148: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
87149: LD_VAR 0 6
87153: PPUSH
87154: LD_INT 0
87156: PPUSH
87157: CALL_OW 109
// ComExitBuilding ( tmp ) ;
87161: LD_VAR 0 6
87165: PPUSH
87166: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
87170: LD_ADDR_EXP 79
87174: PUSH
87175: LD_EXP 79
87179: PPUSH
87180: LD_VAR 0 5
87184: PPUSH
87185: LD_EXP 79
87189: PUSH
87190: LD_VAR 0 5
87194: ARRAY
87195: PPUSH
87196: LD_INT 1
87198: PPUSH
87199: LD_VAR 0 6
87203: PPUSH
87204: CALL_OW 2
87208: PPUSH
87209: CALL_OW 1
87213: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
87214: LD_VAR 0 5
87218: PPUSH
87219: LD_INT 112
87221: PPUSH
87222: CALL 63749 0 2
// end ; end ; end ;
87226: GO 87049
87228: POP
87229: POP
// end ;
87230: LD_VAR 0 3
87234: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
87235: LD_INT 0
87237: PPUSH
87238: PPUSH
87239: PPUSH
87240: PPUSH
87241: PPUSH
87242: PPUSH
87243: PPUSH
87244: PPUSH
// if not mc_bases or not skirmish then
87245: LD_EXP 50
87249: NOT
87250: PUSH
87251: LD_EXP 48
87255: NOT
87256: OR
87257: IFFALSE 87261
// exit ;
87259: GO 88632
// for i = 1 to mc_bases do
87261: LD_ADDR_VAR 0 3
87265: PUSH
87266: DOUBLE
87267: LD_INT 1
87269: DEC
87270: ST_TO_ADDR
87271: LD_EXP 50
87275: PUSH
87276: FOR_TO
87277: IFFALSE 88630
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
87279: LD_VAR 0 1
87283: PUSH
87284: LD_EXP 50
87288: PUSH
87289: LD_VAR 0 3
87293: ARRAY
87294: IN
87295: PUSH
87296: LD_VAR 0 1
87300: PUSH
87301: LD_EXP 57
87305: PUSH
87306: LD_VAR 0 3
87310: ARRAY
87311: IN
87312: OR
87313: PUSH
87314: LD_VAR 0 1
87318: PUSH
87319: LD_EXP 72
87323: PUSH
87324: LD_VAR 0 3
87328: ARRAY
87329: IN
87330: OR
87331: PUSH
87332: LD_VAR 0 1
87336: PUSH
87337: LD_EXP 69
87341: PUSH
87342: LD_VAR 0 3
87346: ARRAY
87347: IN
87348: OR
87349: PUSH
87350: LD_VAR 0 1
87354: PUSH
87355: LD_EXP 79
87359: PUSH
87360: LD_VAR 0 3
87364: ARRAY
87365: IN
87366: OR
87367: PUSH
87368: LD_VAR 0 1
87372: PUSH
87373: LD_EXP 80
87377: PUSH
87378: LD_VAR 0 3
87382: ARRAY
87383: IN
87384: OR
87385: IFFALSE 88628
// begin if un in mc_ape [ i ] then
87387: LD_VAR 0 1
87391: PUSH
87392: LD_EXP 79
87396: PUSH
87397: LD_VAR 0 3
87401: ARRAY
87402: IN
87403: IFFALSE 87442
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
87405: LD_ADDR_EXP 79
87409: PUSH
87410: LD_EXP 79
87414: PPUSH
87415: LD_VAR 0 3
87419: PPUSH
87420: LD_EXP 79
87424: PUSH
87425: LD_VAR 0 3
87429: ARRAY
87430: PUSH
87431: LD_VAR 0 1
87435: DIFF
87436: PPUSH
87437: CALL_OW 1
87441: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
87442: LD_VAR 0 1
87446: PUSH
87447: LD_EXP 80
87451: PUSH
87452: LD_VAR 0 3
87456: ARRAY
87457: IN
87458: IFFALSE 87482
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
87460: LD_ADDR_EXP 80
87464: PUSH
87465: LD_EXP 80
87469: PPUSH
87470: LD_VAR 0 3
87474: PPUSH
87475: EMPTY
87476: PPUSH
87477: CALL_OW 1
87481: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
87482: LD_VAR 0 1
87486: PPUSH
87487: CALL_OW 247
87491: PUSH
87492: LD_INT 2
87494: EQUAL
87495: PUSH
87496: LD_VAR 0 1
87500: PPUSH
87501: CALL_OW 110
87505: PUSH
87506: LD_INT 20
87508: EQUAL
87509: PUSH
87510: LD_VAR 0 1
87514: PUSH
87515: LD_EXP 72
87519: PUSH
87520: LD_VAR 0 3
87524: ARRAY
87525: IN
87526: OR
87527: PUSH
87528: LD_VAR 0 1
87532: PPUSH
87533: CALL_OW 264
87537: PUSH
87538: LD_INT 12
87540: PUSH
87541: LD_INT 51
87543: PUSH
87544: LD_EXP 30
87548: PUSH
87549: LD_INT 32
87551: PUSH
87552: LD_INT 13
87554: PUSH
87555: LD_INT 52
87557: PUSH
87558: LD_INT 31
87560: PUSH
87561: EMPTY
87562: LIST
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: IN
87570: OR
87571: AND
87572: IFFALSE 87880
// begin if un in mc_defender [ i ] then
87574: LD_VAR 0 1
87578: PUSH
87579: LD_EXP 72
87583: PUSH
87584: LD_VAR 0 3
87588: ARRAY
87589: IN
87590: IFFALSE 87629
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
87592: LD_ADDR_EXP 72
87596: PUSH
87597: LD_EXP 72
87601: PPUSH
87602: LD_VAR 0 3
87606: PPUSH
87607: LD_EXP 72
87611: PUSH
87612: LD_VAR 0 3
87616: ARRAY
87617: PUSH
87618: LD_VAR 0 1
87622: DIFF
87623: PPUSH
87624: CALL_OW 1
87628: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
87629: LD_ADDR_VAR 0 8
87633: PUSH
87634: LD_VAR 0 3
87638: PPUSH
87639: LD_INT 3
87641: PPUSH
87642: CALL 84270 0 2
87646: ST_TO_ADDR
// if fac then
87647: LD_VAR 0 8
87651: IFFALSE 87880
// begin for j in fac do
87653: LD_ADDR_VAR 0 4
87657: PUSH
87658: LD_VAR 0 8
87662: PUSH
87663: FOR_IN
87664: IFFALSE 87878
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
87666: LD_ADDR_VAR 0 9
87670: PUSH
87671: LD_VAR 0 8
87675: PPUSH
87676: LD_VAR 0 1
87680: PPUSH
87681: CALL_OW 265
87685: PPUSH
87686: LD_VAR 0 1
87690: PPUSH
87691: CALL_OW 262
87695: PPUSH
87696: LD_VAR 0 1
87700: PPUSH
87701: CALL_OW 263
87705: PPUSH
87706: LD_VAR 0 1
87710: PPUSH
87711: CALL_OW 264
87715: PPUSH
87716: CALL 22354 0 5
87720: ST_TO_ADDR
// if components then
87721: LD_VAR 0 9
87725: IFFALSE 87876
// begin if GetWeapon ( un ) = ar_control_tower then
87727: LD_VAR 0 1
87731: PPUSH
87732: CALL_OW 264
87736: PUSH
87737: LD_INT 31
87739: EQUAL
87740: IFFALSE 87857
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
87742: LD_VAR 0 1
87746: PPUSH
87747: CALL_OW 311
87751: PPUSH
87752: LD_INT 0
87754: PPUSH
87755: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
87759: LD_ADDR_EXP 90
87763: PUSH
87764: LD_EXP 90
87768: PPUSH
87769: LD_VAR 0 3
87773: PPUSH
87774: LD_EXP 90
87778: PUSH
87779: LD_VAR 0 3
87783: ARRAY
87784: PUSH
87785: LD_VAR 0 1
87789: PPUSH
87790: CALL_OW 311
87794: DIFF
87795: PPUSH
87796: CALL_OW 1
87800: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
87801: LD_ADDR_VAR 0 7
87805: PUSH
87806: LD_EXP 71
87810: PUSH
87811: LD_VAR 0 3
87815: ARRAY
87816: PPUSH
87817: LD_INT 1
87819: PPUSH
87820: LD_VAR 0 9
87824: PPUSH
87825: CALL_OW 2
87829: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
87830: LD_ADDR_EXP 71
87834: PUSH
87835: LD_EXP 71
87839: PPUSH
87840: LD_VAR 0 3
87844: PPUSH
87845: LD_VAR 0 7
87849: PPUSH
87850: CALL_OW 1
87854: ST_TO_ADDR
// end else
87855: GO 87874
// MC_InsertProduceList ( i , [ components ] ) ;
87857: LD_VAR 0 3
87861: PPUSH
87862: LD_VAR 0 9
87866: PUSH
87867: EMPTY
87868: LIST
87869: PPUSH
87870: CALL 83815 0 2
// break ;
87874: GO 87878
// end ; end ;
87876: GO 87663
87878: POP
87879: POP
// end ; end ; if GetType ( un ) = unit_building then
87880: LD_VAR 0 1
87884: PPUSH
87885: CALL_OW 247
87889: PUSH
87890: LD_INT 3
87892: EQUAL
87893: IFFALSE 88296
// begin btype := GetBType ( un ) ;
87895: LD_ADDR_VAR 0 5
87899: PUSH
87900: LD_VAR 0 1
87904: PPUSH
87905: CALL_OW 266
87909: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
87910: LD_VAR 0 5
87914: PUSH
87915: LD_INT 29
87917: PUSH
87918: LD_INT 30
87920: PUSH
87921: EMPTY
87922: LIST
87923: LIST
87924: IN
87925: IFFALSE 87998
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
87927: LD_VAR 0 1
87931: PPUSH
87932: CALL_OW 250
87936: PPUSH
87937: LD_VAR 0 1
87941: PPUSH
87942: CALL_OW 251
87946: PPUSH
87947: LD_VAR 0 1
87951: PPUSH
87952: CALL_OW 255
87956: PPUSH
87957: CALL_OW 440
87961: NOT
87962: IFFALSE 87998
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
87964: LD_VAR 0 1
87968: PPUSH
87969: CALL_OW 250
87973: PPUSH
87974: LD_VAR 0 1
87978: PPUSH
87979: CALL_OW 251
87983: PPUSH
87984: LD_VAR 0 1
87988: PPUSH
87989: CALL_OW 255
87993: PPUSH
87994: CALL_OW 441
// end ; if btype = b_warehouse then
87998: LD_VAR 0 5
88002: PUSH
88003: LD_INT 1
88005: EQUAL
88006: IFFALSE 88024
// begin btype := b_depot ;
88008: LD_ADDR_VAR 0 5
88012: PUSH
88013: LD_INT 0
88015: ST_TO_ADDR
// pos := 1 ;
88016: LD_ADDR_VAR 0 6
88020: PUSH
88021: LD_INT 1
88023: ST_TO_ADDR
// end ; if btype = b_factory then
88024: LD_VAR 0 5
88028: PUSH
88029: LD_INT 3
88031: EQUAL
88032: IFFALSE 88050
// begin btype := b_workshop ;
88034: LD_ADDR_VAR 0 5
88038: PUSH
88039: LD_INT 2
88041: ST_TO_ADDR
// pos := 1 ;
88042: LD_ADDR_VAR 0 6
88046: PUSH
88047: LD_INT 1
88049: ST_TO_ADDR
// end ; if btype = b_barracks then
88050: LD_VAR 0 5
88054: PUSH
88055: LD_INT 5
88057: EQUAL
88058: IFFALSE 88068
// btype := b_armoury ;
88060: LD_ADDR_VAR 0 5
88064: PUSH
88065: LD_INT 4
88067: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
88068: LD_VAR 0 5
88072: PUSH
88073: LD_INT 7
88075: PUSH
88076: LD_INT 8
88078: PUSH
88079: EMPTY
88080: LIST
88081: LIST
88082: IN
88083: IFFALSE 88093
// btype := b_lab ;
88085: LD_ADDR_VAR 0 5
88089: PUSH
88090: LD_INT 6
88092: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
88093: LD_ADDR_EXP 55
88097: PUSH
88098: LD_EXP 55
88102: PPUSH
88103: LD_VAR 0 3
88107: PUSH
88108: LD_EXP 55
88112: PUSH
88113: LD_VAR 0 3
88117: ARRAY
88118: PUSH
88119: LD_INT 1
88121: PLUS
88122: PUSH
88123: EMPTY
88124: LIST
88125: LIST
88126: PPUSH
88127: LD_VAR 0 5
88131: PUSH
88132: LD_VAR 0 1
88136: PPUSH
88137: CALL_OW 250
88141: PUSH
88142: LD_VAR 0 1
88146: PPUSH
88147: CALL_OW 251
88151: PUSH
88152: LD_VAR 0 1
88156: PPUSH
88157: CALL_OW 254
88161: PUSH
88162: EMPTY
88163: LIST
88164: LIST
88165: LIST
88166: LIST
88167: PPUSH
88168: CALL 24858 0 3
88172: ST_TO_ADDR
// if pos = 1 then
88173: LD_VAR 0 6
88177: PUSH
88178: LD_INT 1
88180: EQUAL
88181: IFFALSE 88296
// begin tmp := mc_build_list [ i ] ;
88183: LD_ADDR_VAR 0 7
88187: PUSH
88188: LD_EXP 55
88192: PUSH
88193: LD_VAR 0 3
88197: ARRAY
88198: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
88199: LD_VAR 0 7
88203: PPUSH
88204: LD_INT 2
88206: PUSH
88207: LD_INT 30
88209: PUSH
88210: LD_INT 0
88212: PUSH
88213: EMPTY
88214: LIST
88215: LIST
88216: PUSH
88217: LD_INT 30
88219: PUSH
88220: LD_INT 1
88222: PUSH
88223: EMPTY
88224: LIST
88225: LIST
88226: PUSH
88227: EMPTY
88228: LIST
88229: LIST
88230: LIST
88231: PPUSH
88232: CALL_OW 72
88236: IFFALSE 88246
// pos := 2 ;
88238: LD_ADDR_VAR 0 6
88242: PUSH
88243: LD_INT 2
88245: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
88246: LD_ADDR_VAR 0 7
88250: PUSH
88251: LD_VAR 0 7
88255: PPUSH
88256: LD_VAR 0 6
88260: PPUSH
88261: LD_VAR 0 7
88265: PPUSH
88266: CALL 25184 0 3
88270: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
88271: LD_ADDR_EXP 55
88275: PUSH
88276: LD_EXP 55
88280: PPUSH
88281: LD_VAR 0 3
88285: PPUSH
88286: LD_VAR 0 7
88290: PPUSH
88291: CALL_OW 1
88295: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
88296: LD_VAR 0 1
88300: PUSH
88301: LD_EXP 50
88305: PUSH
88306: LD_VAR 0 3
88310: ARRAY
88311: IN
88312: IFFALSE 88351
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
88314: LD_ADDR_EXP 50
88318: PUSH
88319: LD_EXP 50
88323: PPUSH
88324: LD_VAR 0 3
88328: PPUSH
88329: LD_EXP 50
88333: PUSH
88334: LD_VAR 0 3
88338: ARRAY
88339: PUSH
88340: LD_VAR 0 1
88344: DIFF
88345: PPUSH
88346: CALL_OW 1
88350: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
88351: LD_VAR 0 1
88355: PUSH
88356: LD_EXP 57
88360: PUSH
88361: LD_VAR 0 3
88365: ARRAY
88366: IN
88367: IFFALSE 88406
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
88369: LD_ADDR_EXP 57
88373: PUSH
88374: LD_EXP 57
88378: PPUSH
88379: LD_VAR 0 3
88383: PPUSH
88384: LD_EXP 57
88388: PUSH
88389: LD_VAR 0 3
88393: ARRAY
88394: PUSH
88395: LD_VAR 0 1
88399: DIFF
88400: PPUSH
88401: CALL_OW 1
88405: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
88406: LD_VAR 0 1
88410: PUSH
88411: LD_EXP 69
88415: PUSH
88416: LD_VAR 0 3
88420: ARRAY
88421: IN
88422: IFFALSE 88461
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
88424: LD_ADDR_EXP 69
88428: PUSH
88429: LD_EXP 69
88433: PPUSH
88434: LD_VAR 0 3
88438: PPUSH
88439: LD_EXP 69
88443: PUSH
88444: LD_VAR 0 3
88448: ARRAY
88449: PUSH
88450: LD_VAR 0 1
88454: DIFF
88455: PPUSH
88456: CALL_OW 1
88460: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
88461: LD_VAR 0 1
88465: PUSH
88466: LD_EXP 72
88470: PUSH
88471: LD_VAR 0 3
88475: ARRAY
88476: IN
88477: IFFALSE 88516
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88479: LD_ADDR_EXP 72
88483: PUSH
88484: LD_EXP 72
88488: PPUSH
88489: LD_VAR 0 3
88493: PPUSH
88494: LD_EXP 72
88498: PUSH
88499: LD_VAR 0 3
88503: ARRAY
88504: PUSH
88505: LD_VAR 0 1
88509: DIFF
88510: PPUSH
88511: CALL_OW 1
88515: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
88516: LD_VAR 0 1
88520: PUSH
88521: LD_EXP 59
88525: PUSH
88526: LD_VAR 0 3
88530: ARRAY
88531: IN
88532: IFFALSE 88571
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
88534: LD_ADDR_EXP 59
88538: PUSH
88539: LD_EXP 59
88543: PPUSH
88544: LD_VAR 0 3
88548: PPUSH
88549: LD_EXP 59
88553: PUSH
88554: LD_VAR 0 3
88558: ARRAY
88559: PUSH
88560: LD_VAR 0 1
88564: DIFF
88565: PPUSH
88566: CALL_OW 1
88570: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
88571: LD_VAR 0 1
88575: PUSH
88576: LD_EXP 58
88580: PUSH
88581: LD_VAR 0 3
88585: ARRAY
88586: IN
88587: IFFALSE 88626
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
88589: LD_ADDR_EXP 58
88593: PUSH
88594: LD_EXP 58
88598: PPUSH
88599: LD_VAR 0 3
88603: PPUSH
88604: LD_EXP 58
88608: PUSH
88609: LD_VAR 0 3
88613: ARRAY
88614: PUSH
88615: LD_VAR 0 1
88619: DIFF
88620: PPUSH
88621: CALL_OW 1
88625: ST_TO_ADDR
// end ; break ;
88626: GO 88630
// end ;
88628: GO 87276
88630: POP
88631: POP
// end ;
88632: LD_VAR 0 2
88636: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
88637: LD_INT 0
88639: PPUSH
88640: PPUSH
88641: PPUSH
// if not mc_bases or not skirmish then
88642: LD_EXP 50
88646: NOT
88647: PUSH
88648: LD_EXP 48
88652: NOT
88653: OR
88654: IFFALSE 88658
// exit ;
88656: GO 88873
// for i = 1 to mc_bases do
88658: LD_ADDR_VAR 0 3
88662: PUSH
88663: DOUBLE
88664: LD_INT 1
88666: DEC
88667: ST_TO_ADDR
88668: LD_EXP 50
88672: PUSH
88673: FOR_TO
88674: IFFALSE 88871
// begin if building in mc_construct_list [ i ] then
88676: LD_VAR 0 1
88680: PUSH
88681: LD_EXP 57
88685: PUSH
88686: LD_VAR 0 3
88690: ARRAY
88691: IN
88692: IFFALSE 88869
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
88694: LD_ADDR_EXP 57
88698: PUSH
88699: LD_EXP 57
88703: PPUSH
88704: LD_VAR 0 3
88708: PPUSH
88709: LD_EXP 57
88713: PUSH
88714: LD_VAR 0 3
88718: ARRAY
88719: PUSH
88720: LD_VAR 0 1
88724: DIFF
88725: PPUSH
88726: CALL_OW 1
88730: ST_TO_ADDR
// if building in mc_lab [ i ] then
88731: LD_VAR 0 1
88735: PUSH
88736: LD_EXP 83
88740: PUSH
88741: LD_VAR 0 3
88745: ARRAY
88746: IN
88747: IFFALSE 88802
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
88749: LD_ADDR_EXP 84
88753: PUSH
88754: LD_EXP 84
88758: PPUSH
88759: LD_VAR 0 3
88763: PPUSH
88764: LD_EXP 84
88768: PUSH
88769: LD_VAR 0 3
88773: ARRAY
88774: PPUSH
88775: LD_INT 1
88777: PPUSH
88778: LD_EXP 84
88782: PUSH
88783: LD_VAR 0 3
88787: ARRAY
88788: PPUSH
88789: LD_INT 0
88791: PPUSH
88792: CALL 24276 0 4
88796: PPUSH
88797: CALL_OW 1
88801: ST_TO_ADDR
// if not building in mc_bases [ i ] then
88802: LD_VAR 0 1
88806: PUSH
88807: LD_EXP 50
88811: PUSH
88812: LD_VAR 0 3
88816: ARRAY
88817: IN
88818: NOT
88819: IFFALSE 88865
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
88821: LD_ADDR_EXP 50
88825: PUSH
88826: LD_EXP 50
88830: PPUSH
88831: LD_VAR 0 3
88835: PUSH
88836: LD_EXP 50
88840: PUSH
88841: LD_VAR 0 3
88845: ARRAY
88846: PUSH
88847: LD_INT 1
88849: PLUS
88850: PUSH
88851: EMPTY
88852: LIST
88853: LIST
88854: PPUSH
88855: LD_VAR 0 1
88859: PPUSH
88860: CALL 24858 0 3
88864: ST_TO_ADDR
// exit ;
88865: POP
88866: POP
88867: GO 88873
// end ; end ;
88869: GO 88673
88871: POP
88872: POP
// end ;
88873: LD_VAR 0 2
88877: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
88878: LD_INT 0
88880: PPUSH
88881: PPUSH
88882: PPUSH
88883: PPUSH
88884: PPUSH
88885: PPUSH
88886: PPUSH
// if not mc_bases or not skirmish then
88887: LD_EXP 50
88891: NOT
88892: PUSH
88893: LD_EXP 48
88897: NOT
88898: OR
88899: IFFALSE 88903
// exit ;
88901: GO 89564
// for i = 1 to mc_bases do
88903: LD_ADDR_VAR 0 3
88907: PUSH
88908: DOUBLE
88909: LD_INT 1
88911: DEC
88912: ST_TO_ADDR
88913: LD_EXP 50
88917: PUSH
88918: FOR_TO
88919: IFFALSE 89562
// begin if building in mc_construct_list [ i ] then
88921: LD_VAR 0 1
88925: PUSH
88926: LD_EXP 57
88930: PUSH
88931: LD_VAR 0 3
88935: ARRAY
88936: IN
88937: IFFALSE 89560
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
88939: LD_ADDR_EXP 57
88943: PUSH
88944: LD_EXP 57
88948: PPUSH
88949: LD_VAR 0 3
88953: PPUSH
88954: LD_EXP 57
88958: PUSH
88959: LD_VAR 0 3
88963: ARRAY
88964: PUSH
88965: LD_VAR 0 1
88969: DIFF
88970: PPUSH
88971: CALL_OW 1
88975: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
88976: LD_ADDR_EXP 50
88980: PUSH
88981: LD_EXP 50
88985: PPUSH
88986: LD_VAR 0 3
88990: PUSH
88991: LD_EXP 50
88995: PUSH
88996: LD_VAR 0 3
89000: ARRAY
89001: PUSH
89002: LD_INT 1
89004: PLUS
89005: PUSH
89006: EMPTY
89007: LIST
89008: LIST
89009: PPUSH
89010: LD_VAR 0 1
89014: PPUSH
89015: CALL 24858 0 3
89019: ST_TO_ADDR
// btype := GetBType ( building ) ;
89020: LD_ADDR_VAR 0 5
89024: PUSH
89025: LD_VAR 0 1
89029: PPUSH
89030: CALL_OW 266
89034: ST_TO_ADDR
// side := GetSide ( building ) ;
89035: LD_ADDR_VAR 0 8
89039: PUSH
89040: LD_VAR 0 1
89044: PPUSH
89045: CALL_OW 255
89049: ST_TO_ADDR
// if btype = b_lab then
89050: LD_VAR 0 5
89054: PUSH
89055: LD_INT 6
89057: EQUAL
89058: IFFALSE 89108
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
89060: LD_ADDR_EXP 83
89064: PUSH
89065: LD_EXP 83
89069: PPUSH
89070: LD_VAR 0 3
89074: PUSH
89075: LD_EXP 83
89079: PUSH
89080: LD_VAR 0 3
89084: ARRAY
89085: PUSH
89086: LD_INT 1
89088: PLUS
89089: PUSH
89090: EMPTY
89091: LIST
89092: LIST
89093: PPUSH
89094: LD_VAR 0 1
89098: PPUSH
89099: CALL 24858 0 3
89103: ST_TO_ADDR
// exit ;
89104: POP
89105: POP
89106: GO 89564
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
89108: LD_VAR 0 5
89112: PUSH
89113: LD_INT 0
89115: PUSH
89116: LD_INT 2
89118: PUSH
89119: LD_INT 4
89121: PUSH
89122: EMPTY
89123: LIST
89124: LIST
89125: LIST
89126: IN
89127: IFFALSE 89251
// begin if btype = b_armoury then
89129: LD_VAR 0 5
89133: PUSH
89134: LD_INT 4
89136: EQUAL
89137: IFFALSE 89147
// btype := b_barracks ;
89139: LD_ADDR_VAR 0 5
89143: PUSH
89144: LD_INT 5
89146: ST_TO_ADDR
// if btype = b_depot then
89147: LD_VAR 0 5
89151: PUSH
89152: LD_INT 0
89154: EQUAL
89155: IFFALSE 89165
// btype := b_warehouse ;
89157: LD_ADDR_VAR 0 5
89161: PUSH
89162: LD_INT 1
89164: ST_TO_ADDR
// if btype = b_workshop then
89165: LD_VAR 0 5
89169: PUSH
89170: LD_INT 2
89172: EQUAL
89173: IFFALSE 89183
// btype := b_factory ;
89175: LD_ADDR_VAR 0 5
89179: PUSH
89180: LD_INT 3
89182: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
89183: LD_VAR 0 5
89187: PPUSH
89188: LD_VAR 0 8
89192: PPUSH
89193: CALL_OW 323
89197: PUSH
89198: LD_INT 1
89200: EQUAL
89201: IFFALSE 89247
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
89203: LD_ADDR_EXP 82
89207: PUSH
89208: LD_EXP 82
89212: PPUSH
89213: LD_VAR 0 3
89217: PUSH
89218: LD_EXP 82
89222: PUSH
89223: LD_VAR 0 3
89227: ARRAY
89228: PUSH
89229: LD_INT 1
89231: PLUS
89232: PUSH
89233: EMPTY
89234: LIST
89235: LIST
89236: PPUSH
89237: LD_VAR 0 1
89241: PPUSH
89242: CALL 24858 0 3
89246: ST_TO_ADDR
// exit ;
89247: POP
89248: POP
89249: GO 89564
// end ; if btype in [ b_bunker , b_turret ] then
89251: LD_VAR 0 5
89255: PUSH
89256: LD_INT 32
89258: PUSH
89259: LD_INT 33
89261: PUSH
89262: EMPTY
89263: LIST
89264: LIST
89265: IN
89266: IFFALSE 89556
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
89268: LD_ADDR_EXP 58
89272: PUSH
89273: LD_EXP 58
89277: PPUSH
89278: LD_VAR 0 3
89282: PUSH
89283: LD_EXP 58
89287: PUSH
89288: LD_VAR 0 3
89292: ARRAY
89293: PUSH
89294: LD_INT 1
89296: PLUS
89297: PUSH
89298: EMPTY
89299: LIST
89300: LIST
89301: PPUSH
89302: LD_VAR 0 1
89306: PPUSH
89307: CALL 24858 0 3
89311: ST_TO_ADDR
// if btype = b_bunker then
89312: LD_VAR 0 5
89316: PUSH
89317: LD_INT 32
89319: EQUAL
89320: IFFALSE 89556
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
89322: LD_ADDR_EXP 59
89326: PUSH
89327: LD_EXP 59
89331: PPUSH
89332: LD_VAR 0 3
89336: PUSH
89337: LD_EXP 59
89341: PUSH
89342: LD_VAR 0 3
89346: ARRAY
89347: PUSH
89348: LD_INT 1
89350: PLUS
89351: PUSH
89352: EMPTY
89353: LIST
89354: LIST
89355: PPUSH
89356: LD_VAR 0 1
89360: PPUSH
89361: CALL 24858 0 3
89365: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
89366: LD_ADDR_VAR 0 6
89370: PUSH
89371: LD_EXP 50
89375: PUSH
89376: LD_VAR 0 3
89380: ARRAY
89381: PPUSH
89382: LD_INT 25
89384: PUSH
89385: LD_INT 1
89387: PUSH
89388: EMPTY
89389: LIST
89390: LIST
89391: PUSH
89392: LD_INT 3
89394: PUSH
89395: LD_INT 54
89397: PUSH
89398: EMPTY
89399: LIST
89400: PUSH
89401: EMPTY
89402: LIST
89403: LIST
89404: PUSH
89405: EMPTY
89406: LIST
89407: LIST
89408: PPUSH
89409: CALL_OW 72
89413: ST_TO_ADDR
// if tmp then
89414: LD_VAR 0 6
89418: IFFALSE 89424
// exit ;
89420: POP
89421: POP
89422: GO 89564
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
89424: LD_ADDR_VAR 0 6
89428: PUSH
89429: LD_EXP 50
89433: PUSH
89434: LD_VAR 0 3
89438: ARRAY
89439: PPUSH
89440: LD_INT 2
89442: PUSH
89443: LD_INT 30
89445: PUSH
89446: LD_INT 4
89448: PUSH
89449: EMPTY
89450: LIST
89451: LIST
89452: PUSH
89453: LD_INT 30
89455: PUSH
89456: LD_INT 5
89458: PUSH
89459: EMPTY
89460: LIST
89461: LIST
89462: PUSH
89463: EMPTY
89464: LIST
89465: LIST
89466: LIST
89467: PPUSH
89468: CALL_OW 72
89472: ST_TO_ADDR
// if not tmp then
89473: LD_VAR 0 6
89477: NOT
89478: IFFALSE 89484
// exit ;
89480: POP
89481: POP
89482: GO 89564
// for j in tmp do
89484: LD_ADDR_VAR 0 4
89488: PUSH
89489: LD_VAR 0 6
89493: PUSH
89494: FOR_IN
89495: IFFALSE 89554
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
89497: LD_ADDR_VAR 0 7
89501: PUSH
89502: LD_VAR 0 4
89506: PPUSH
89507: CALL_OW 313
89511: PPUSH
89512: LD_INT 25
89514: PUSH
89515: LD_INT 1
89517: PUSH
89518: EMPTY
89519: LIST
89520: LIST
89521: PPUSH
89522: CALL_OW 72
89526: ST_TO_ADDR
// if units then
89527: LD_VAR 0 7
89531: IFFALSE 89552
// begin ComExitBuilding ( units [ 1 ] ) ;
89533: LD_VAR 0 7
89537: PUSH
89538: LD_INT 1
89540: ARRAY
89541: PPUSH
89542: CALL_OW 122
// exit ;
89546: POP
89547: POP
89548: POP
89549: POP
89550: GO 89564
// end ; end ;
89552: GO 89494
89554: POP
89555: POP
// end ; end ; exit ;
89556: POP
89557: POP
89558: GO 89564
// end ; end ;
89560: GO 88918
89562: POP
89563: POP
// end ;
89564: LD_VAR 0 2
89568: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
89569: LD_INT 0
89571: PPUSH
89572: PPUSH
89573: PPUSH
89574: PPUSH
89575: PPUSH
89576: PPUSH
89577: PPUSH
// if not mc_bases or not skirmish then
89578: LD_EXP 50
89582: NOT
89583: PUSH
89584: LD_EXP 48
89588: NOT
89589: OR
89590: IFFALSE 89594
// exit ;
89592: GO 89859
// btype := GetBType ( building ) ;
89594: LD_ADDR_VAR 0 6
89598: PUSH
89599: LD_VAR 0 1
89603: PPUSH
89604: CALL_OW 266
89608: ST_TO_ADDR
// x := GetX ( building ) ;
89609: LD_ADDR_VAR 0 7
89613: PUSH
89614: LD_VAR 0 1
89618: PPUSH
89619: CALL_OW 250
89623: ST_TO_ADDR
// y := GetY ( building ) ;
89624: LD_ADDR_VAR 0 8
89628: PUSH
89629: LD_VAR 0 1
89633: PPUSH
89634: CALL_OW 251
89638: ST_TO_ADDR
// d := GetDir ( building ) ;
89639: LD_ADDR_VAR 0 9
89643: PUSH
89644: LD_VAR 0 1
89648: PPUSH
89649: CALL_OW 254
89653: ST_TO_ADDR
// for i = 1 to mc_bases do
89654: LD_ADDR_VAR 0 4
89658: PUSH
89659: DOUBLE
89660: LD_INT 1
89662: DEC
89663: ST_TO_ADDR
89664: LD_EXP 50
89668: PUSH
89669: FOR_TO
89670: IFFALSE 89857
// begin if not mc_build_list [ i ] then
89672: LD_EXP 55
89676: PUSH
89677: LD_VAR 0 4
89681: ARRAY
89682: NOT
89683: IFFALSE 89687
// continue ;
89685: GO 89669
// for j := 1 to mc_build_list [ i ] do
89687: LD_ADDR_VAR 0 5
89691: PUSH
89692: DOUBLE
89693: LD_INT 1
89695: DEC
89696: ST_TO_ADDR
89697: LD_EXP 55
89701: PUSH
89702: LD_VAR 0 4
89706: ARRAY
89707: PUSH
89708: FOR_TO
89709: IFFALSE 89853
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
89711: LD_VAR 0 6
89715: PUSH
89716: LD_VAR 0 7
89720: PUSH
89721: LD_VAR 0 8
89725: PUSH
89726: LD_VAR 0 9
89730: PUSH
89731: EMPTY
89732: LIST
89733: LIST
89734: LIST
89735: LIST
89736: PPUSH
89737: LD_EXP 55
89741: PUSH
89742: LD_VAR 0 4
89746: ARRAY
89747: PUSH
89748: LD_VAR 0 5
89752: ARRAY
89753: PPUSH
89754: CALL 31040 0 2
89758: IFFALSE 89851
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
89760: LD_ADDR_EXP 55
89764: PUSH
89765: LD_EXP 55
89769: PPUSH
89770: LD_VAR 0 4
89774: PPUSH
89775: LD_EXP 55
89779: PUSH
89780: LD_VAR 0 4
89784: ARRAY
89785: PPUSH
89786: LD_VAR 0 5
89790: PPUSH
89791: CALL_OW 3
89795: PPUSH
89796: CALL_OW 1
89800: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
89801: LD_ADDR_EXP 57
89805: PUSH
89806: LD_EXP 57
89810: PPUSH
89811: LD_VAR 0 4
89815: PUSH
89816: LD_EXP 57
89820: PUSH
89821: LD_VAR 0 4
89825: ARRAY
89826: PUSH
89827: LD_INT 1
89829: PLUS
89830: PUSH
89831: EMPTY
89832: LIST
89833: LIST
89834: PPUSH
89835: LD_VAR 0 1
89839: PPUSH
89840: CALL 24858 0 3
89844: ST_TO_ADDR
// exit ;
89845: POP
89846: POP
89847: POP
89848: POP
89849: GO 89859
// end ;
89851: GO 89708
89853: POP
89854: POP
// end ;
89855: GO 89669
89857: POP
89858: POP
// end ;
89859: LD_VAR 0 3
89863: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
89864: LD_INT 0
89866: PPUSH
89867: PPUSH
89868: PPUSH
// if not mc_bases or not skirmish then
89869: LD_EXP 50
89873: NOT
89874: PUSH
89875: LD_EXP 48
89879: NOT
89880: OR
89881: IFFALSE 89885
// exit ;
89883: GO 90075
// for i = 1 to mc_bases do
89885: LD_ADDR_VAR 0 4
89889: PUSH
89890: DOUBLE
89891: LD_INT 1
89893: DEC
89894: ST_TO_ADDR
89895: LD_EXP 50
89899: PUSH
89900: FOR_TO
89901: IFFALSE 89988
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
89903: LD_VAR 0 1
89907: PUSH
89908: LD_EXP 58
89912: PUSH
89913: LD_VAR 0 4
89917: ARRAY
89918: IN
89919: PUSH
89920: LD_VAR 0 1
89924: PUSH
89925: LD_EXP 59
89929: PUSH
89930: LD_VAR 0 4
89934: ARRAY
89935: IN
89936: NOT
89937: AND
89938: IFFALSE 89986
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
89940: LD_ADDR_EXP 59
89944: PUSH
89945: LD_EXP 59
89949: PPUSH
89950: LD_VAR 0 4
89954: PUSH
89955: LD_EXP 59
89959: PUSH
89960: LD_VAR 0 4
89964: ARRAY
89965: PUSH
89966: LD_INT 1
89968: PLUS
89969: PUSH
89970: EMPTY
89971: LIST
89972: LIST
89973: PPUSH
89974: LD_VAR 0 1
89978: PPUSH
89979: CALL 24858 0 3
89983: ST_TO_ADDR
// break ;
89984: GO 89988
// end ; end ;
89986: GO 89900
89988: POP
89989: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
89990: LD_VAR 0 1
89994: PPUSH
89995: CALL_OW 257
89999: PUSH
90000: LD_EXP 76
90004: IN
90005: PUSH
90006: LD_VAR 0 1
90010: PPUSH
90011: CALL_OW 266
90015: PUSH
90016: LD_INT 5
90018: EQUAL
90019: AND
90020: PUSH
90021: LD_VAR 0 2
90025: PPUSH
90026: CALL_OW 110
90030: PUSH
90031: LD_INT 18
90033: NONEQUAL
90034: AND
90035: IFFALSE 90075
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90037: LD_VAR 0 2
90041: PPUSH
90042: CALL_OW 257
90046: PUSH
90047: LD_INT 5
90049: PUSH
90050: LD_INT 8
90052: PUSH
90053: LD_INT 9
90055: PUSH
90056: EMPTY
90057: LIST
90058: LIST
90059: LIST
90060: IN
90061: IFFALSE 90075
// SetClass ( unit , 1 ) ;
90063: LD_VAR 0 2
90067: PPUSH
90068: LD_INT 1
90070: PPUSH
90071: CALL_OW 336
// end ;
90075: LD_VAR 0 3
90079: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
90080: LD_INT 0
90082: PPUSH
90083: PPUSH
// if not mc_bases or not skirmish then
90084: LD_EXP 50
90088: NOT
90089: PUSH
90090: LD_EXP 48
90094: NOT
90095: OR
90096: IFFALSE 90100
// exit ;
90098: GO 90216
// if GetLives ( abandoned_vehicle ) > 250 then
90100: LD_VAR 0 2
90104: PPUSH
90105: CALL_OW 256
90109: PUSH
90110: LD_INT 250
90112: GREATER
90113: IFFALSE 90117
// exit ;
90115: GO 90216
// for i = 1 to mc_bases do
90117: LD_ADDR_VAR 0 6
90121: PUSH
90122: DOUBLE
90123: LD_INT 1
90125: DEC
90126: ST_TO_ADDR
90127: LD_EXP 50
90131: PUSH
90132: FOR_TO
90133: IFFALSE 90214
// begin if driver in mc_bases [ i ] then
90135: LD_VAR 0 1
90139: PUSH
90140: LD_EXP 50
90144: PUSH
90145: LD_VAR 0 6
90149: ARRAY
90150: IN
90151: IFFALSE 90212
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
90153: LD_VAR 0 1
90157: PPUSH
90158: LD_EXP 50
90162: PUSH
90163: LD_VAR 0 6
90167: ARRAY
90168: PPUSH
90169: LD_INT 2
90171: PUSH
90172: LD_INT 30
90174: PUSH
90175: LD_INT 0
90177: PUSH
90178: EMPTY
90179: LIST
90180: LIST
90181: PUSH
90182: LD_INT 30
90184: PUSH
90185: LD_INT 1
90187: PUSH
90188: EMPTY
90189: LIST
90190: LIST
90191: PUSH
90192: EMPTY
90193: LIST
90194: LIST
90195: LIST
90196: PPUSH
90197: CALL_OW 72
90201: PUSH
90202: LD_INT 1
90204: ARRAY
90205: PPUSH
90206: CALL 57476 0 2
// break ;
90210: GO 90214
// end ; end ;
90212: GO 90132
90214: POP
90215: POP
// end ; end_of_file end_of_file
90216: LD_VAR 0 5
90220: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
90221: LD_INT 0
90223: PPUSH
// if p2 = 100 then
90224: LD_VAR 0 2
90228: PUSH
90229: LD_INT 100
90231: EQUAL
90232: IFFALSE 91181
// begin if not StreamModeActive then
90234: LD_EXP 94
90238: NOT
90239: IFFALSE 90249
// StreamModeActive := true ;
90241: LD_ADDR_EXP 94
90245: PUSH
90246: LD_INT 1
90248: ST_TO_ADDR
// if p3 = 0 then
90249: LD_VAR 0 3
90253: PUSH
90254: LD_INT 0
90256: EQUAL
90257: IFFALSE 90263
// InitStreamMode ;
90259: CALL 91341 0 0
// if p3 = 1 then
90263: LD_VAR 0 3
90267: PUSH
90268: LD_INT 1
90270: EQUAL
90271: IFFALSE 90281
// sRocket := true ;
90273: LD_ADDR_EXP 99
90277: PUSH
90278: LD_INT 1
90280: ST_TO_ADDR
// if p3 = 2 then
90281: LD_VAR 0 3
90285: PUSH
90286: LD_INT 2
90288: EQUAL
90289: IFFALSE 90299
// sSpeed := true ;
90291: LD_ADDR_EXP 98
90295: PUSH
90296: LD_INT 1
90298: ST_TO_ADDR
// if p3 = 3 then
90299: LD_VAR 0 3
90303: PUSH
90304: LD_INT 3
90306: EQUAL
90307: IFFALSE 90317
// sEngine := true ;
90309: LD_ADDR_EXP 100
90313: PUSH
90314: LD_INT 1
90316: ST_TO_ADDR
// if p3 = 4 then
90317: LD_VAR 0 3
90321: PUSH
90322: LD_INT 4
90324: EQUAL
90325: IFFALSE 90335
// sSpec := true ;
90327: LD_ADDR_EXP 97
90331: PUSH
90332: LD_INT 1
90334: ST_TO_ADDR
// if p3 = 5 then
90335: LD_VAR 0 3
90339: PUSH
90340: LD_INT 5
90342: EQUAL
90343: IFFALSE 90353
// sLevel := true ;
90345: LD_ADDR_EXP 101
90349: PUSH
90350: LD_INT 1
90352: ST_TO_ADDR
// if p3 = 6 then
90353: LD_VAR 0 3
90357: PUSH
90358: LD_INT 6
90360: EQUAL
90361: IFFALSE 90371
// sArmoury := true ;
90363: LD_ADDR_EXP 102
90367: PUSH
90368: LD_INT 1
90370: ST_TO_ADDR
// if p3 = 7 then
90371: LD_VAR 0 3
90375: PUSH
90376: LD_INT 7
90378: EQUAL
90379: IFFALSE 90389
// sRadar := true ;
90381: LD_ADDR_EXP 103
90385: PUSH
90386: LD_INT 1
90388: ST_TO_ADDR
// if p3 = 8 then
90389: LD_VAR 0 3
90393: PUSH
90394: LD_INT 8
90396: EQUAL
90397: IFFALSE 90407
// sBunker := true ;
90399: LD_ADDR_EXP 104
90403: PUSH
90404: LD_INT 1
90406: ST_TO_ADDR
// if p3 = 9 then
90407: LD_VAR 0 3
90411: PUSH
90412: LD_INT 9
90414: EQUAL
90415: IFFALSE 90425
// sHack := true ;
90417: LD_ADDR_EXP 105
90421: PUSH
90422: LD_INT 1
90424: ST_TO_ADDR
// if p3 = 10 then
90425: LD_VAR 0 3
90429: PUSH
90430: LD_INT 10
90432: EQUAL
90433: IFFALSE 90443
// sFire := true ;
90435: LD_ADDR_EXP 106
90439: PUSH
90440: LD_INT 1
90442: ST_TO_ADDR
// if p3 = 11 then
90443: LD_VAR 0 3
90447: PUSH
90448: LD_INT 11
90450: EQUAL
90451: IFFALSE 90461
// sRefresh := true ;
90453: LD_ADDR_EXP 107
90457: PUSH
90458: LD_INT 1
90460: ST_TO_ADDR
// if p3 = 12 then
90461: LD_VAR 0 3
90465: PUSH
90466: LD_INT 12
90468: EQUAL
90469: IFFALSE 90479
// sExp := true ;
90471: LD_ADDR_EXP 108
90475: PUSH
90476: LD_INT 1
90478: ST_TO_ADDR
// if p3 = 13 then
90479: LD_VAR 0 3
90483: PUSH
90484: LD_INT 13
90486: EQUAL
90487: IFFALSE 90497
// sDepot := true ;
90489: LD_ADDR_EXP 109
90493: PUSH
90494: LD_INT 1
90496: ST_TO_ADDR
// if p3 = 14 then
90497: LD_VAR 0 3
90501: PUSH
90502: LD_INT 14
90504: EQUAL
90505: IFFALSE 90515
// sFlag := true ;
90507: LD_ADDR_EXP 110
90511: PUSH
90512: LD_INT 1
90514: ST_TO_ADDR
// if p3 = 15 then
90515: LD_VAR 0 3
90519: PUSH
90520: LD_INT 15
90522: EQUAL
90523: IFFALSE 90533
// sKamikadze := true ;
90525: LD_ADDR_EXP 118
90529: PUSH
90530: LD_INT 1
90532: ST_TO_ADDR
// if p3 = 16 then
90533: LD_VAR 0 3
90537: PUSH
90538: LD_INT 16
90540: EQUAL
90541: IFFALSE 90551
// sTroll := true ;
90543: LD_ADDR_EXP 119
90547: PUSH
90548: LD_INT 1
90550: ST_TO_ADDR
// if p3 = 17 then
90551: LD_VAR 0 3
90555: PUSH
90556: LD_INT 17
90558: EQUAL
90559: IFFALSE 90569
// sSlow := true ;
90561: LD_ADDR_EXP 120
90565: PUSH
90566: LD_INT 1
90568: ST_TO_ADDR
// if p3 = 18 then
90569: LD_VAR 0 3
90573: PUSH
90574: LD_INT 18
90576: EQUAL
90577: IFFALSE 90587
// sLack := true ;
90579: LD_ADDR_EXP 121
90583: PUSH
90584: LD_INT 1
90586: ST_TO_ADDR
// if p3 = 19 then
90587: LD_VAR 0 3
90591: PUSH
90592: LD_INT 19
90594: EQUAL
90595: IFFALSE 90605
// sTank := true ;
90597: LD_ADDR_EXP 123
90601: PUSH
90602: LD_INT 1
90604: ST_TO_ADDR
// if p3 = 20 then
90605: LD_VAR 0 3
90609: PUSH
90610: LD_INT 20
90612: EQUAL
90613: IFFALSE 90623
// sRemote := true ;
90615: LD_ADDR_EXP 124
90619: PUSH
90620: LD_INT 1
90622: ST_TO_ADDR
// if p3 = 21 then
90623: LD_VAR 0 3
90627: PUSH
90628: LD_INT 21
90630: EQUAL
90631: IFFALSE 90641
// sPowell := true ;
90633: LD_ADDR_EXP 125
90637: PUSH
90638: LD_INT 1
90640: ST_TO_ADDR
// if p3 = 22 then
90641: LD_VAR 0 3
90645: PUSH
90646: LD_INT 22
90648: EQUAL
90649: IFFALSE 90659
// sTeleport := true ;
90651: LD_ADDR_EXP 128
90655: PUSH
90656: LD_INT 1
90658: ST_TO_ADDR
// if p3 = 23 then
90659: LD_VAR 0 3
90663: PUSH
90664: LD_INT 23
90666: EQUAL
90667: IFFALSE 90677
// sOilTower := true ;
90669: LD_ADDR_EXP 130
90673: PUSH
90674: LD_INT 1
90676: ST_TO_ADDR
// if p3 = 24 then
90677: LD_VAR 0 3
90681: PUSH
90682: LD_INT 24
90684: EQUAL
90685: IFFALSE 90695
// sShovel := true ;
90687: LD_ADDR_EXP 131
90691: PUSH
90692: LD_INT 1
90694: ST_TO_ADDR
// if p3 = 25 then
90695: LD_VAR 0 3
90699: PUSH
90700: LD_INT 25
90702: EQUAL
90703: IFFALSE 90713
// sSheik := true ;
90705: LD_ADDR_EXP 132
90709: PUSH
90710: LD_INT 1
90712: ST_TO_ADDR
// if p3 = 26 then
90713: LD_VAR 0 3
90717: PUSH
90718: LD_INT 26
90720: EQUAL
90721: IFFALSE 90731
// sEarthquake := true ;
90723: LD_ADDR_EXP 134
90727: PUSH
90728: LD_INT 1
90730: ST_TO_ADDR
// if p3 = 27 then
90731: LD_VAR 0 3
90735: PUSH
90736: LD_INT 27
90738: EQUAL
90739: IFFALSE 90749
// sAI := true ;
90741: LD_ADDR_EXP 135
90745: PUSH
90746: LD_INT 1
90748: ST_TO_ADDR
// if p3 = 28 then
90749: LD_VAR 0 3
90753: PUSH
90754: LD_INT 28
90756: EQUAL
90757: IFFALSE 90767
// sCargo := true ;
90759: LD_ADDR_EXP 138
90763: PUSH
90764: LD_INT 1
90766: ST_TO_ADDR
// if p3 = 29 then
90767: LD_VAR 0 3
90771: PUSH
90772: LD_INT 29
90774: EQUAL
90775: IFFALSE 90785
// sDLaser := true ;
90777: LD_ADDR_EXP 139
90781: PUSH
90782: LD_INT 1
90784: ST_TO_ADDR
// if p3 = 30 then
90785: LD_VAR 0 3
90789: PUSH
90790: LD_INT 30
90792: EQUAL
90793: IFFALSE 90803
// sExchange := true ;
90795: LD_ADDR_EXP 140
90799: PUSH
90800: LD_INT 1
90802: ST_TO_ADDR
// if p3 = 31 then
90803: LD_VAR 0 3
90807: PUSH
90808: LD_INT 31
90810: EQUAL
90811: IFFALSE 90821
// sFac := true ;
90813: LD_ADDR_EXP 141
90817: PUSH
90818: LD_INT 1
90820: ST_TO_ADDR
// if p3 = 32 then
90821: LD_VAR 0 3
90825: PUSH
90826: LD_INT 32
90828: EQUAL
90829: IFFALSE 90839
// sPower := true ;
90831: LD_ADDR_EXP 142
90835: PUSH
90836: LD_INT 1
90838: ST_TO_ADDR
// if p3 = 33 then
90839: LD_VAR 0 3
90843: PUSH
90844: LD_INT 33
90846: EQUAL
90847: IFFALSE 90857
// sRandom := true ;
90849: LD_ADDR_EXP 143
90853: PUSH
90854: LD_INT 1
90856: ST_TO_ADDR
// if p3 = 34 then
90857: LD_VAR 0 3
90861: PUSH
90862: LD_INT 34
90864: EQUAL
90865: IFFALSE 90875
// sShield := true ;
90867: LD_ADDR_EXP 144
90871: PUSH
90872: LD_INT 1
90874: ST_TO_ADDR
// if p3 = 35 then
90875: LD_VAR 0 3
90879: PUSH
90880: LD_INT 35
90882: EQUAL
90883: IFFALSE 90893
// sTime := true ;
90885: LD_ADDR_EXP 145
90889: PUSH
90890: LD_INT 1
90892: ST_TO_ADDR
// if p3 = 36 then
90893: LD_VAR 0 3
90897: PUSH
90898: LD_INT 36
90900: EQUAL
90901: IFFALSE 90911
// sTools := true ;
90903: LD_ADDR_EXP 146
90907: PUSH
90908: LD_INT 1
90910: ST_TO_ADDR
// if p3 = 101 then
90911: LD_VAR 0 3
90915: PUSH
90916: LD_INT 101
90918: EQUAL
90919: IFFALSE 90929
// sSold := true ;
90921: LD_ADDR_EXP 111
90925: PUSH
90926: LD_INT 1
90928: ST_TO_ADDR
// if p3 = 102 then
90929: LD_VAR 0 3
90933: PUSH
90934: LD_INT 102
90936: EQUAL
90937: IFFALSE 90947
// sDiff := true ;
90939: LD_ADDR_EXP 112
90943: PUSH
90944: LD_INT 1
90946: ST_TO_ADDR
// if p3 = 103 then
90947: LD_VAR 0 3
90951: PUSH
90952: LD_INT 103
90954: EQUAL
90955: IFFALSE 90965
// sFog := true ;
90957: LD_ADDR_EXP 115
90961: PUSH
90962: LD_INT 1
90964: ST_TO_ADDR
// if p3 = 104 then
90965: LD_VAR 0 3
90969: PUSH
90970: LD_INT 104
90972: EQUAL
90973: IFFALSE 90983
// sReset := true ;
90975: LD_ADDR_EXP 116
90979: PUSH
90980: LD_INT 1
90982: ST_TO_ADDR
// if p3 = 105 then
90983: LD_VAR 0 3
90987: PUSH
90988: LD_INT 105
90990: EQUAL
90991: IFFALSE 91001
// sSun := true ;
90993: LD_ADDR_EXP 117
90997: PUSH
90998: LD_INT 1
91000: ST_TO_ADDR
// if p3 = 106 then
91001: LD_VAR 0 3
91005: PUSH
91006: LD_INT 106
91008: EQUAL
91009: IFFALSE 91019
// sTiger := true ;
91011: LD_ADDR_EXP 113
91015: PUSH
91016: LD_INT 1
91018: ST_TO_ADDR
// if p3 = 107 then
91019: LD_VAR 0 3
91023: PUSH
91024: LD_INT 107
91026: EQUAL
91027: IFFALSE 91037
// sBomb := true ;
91029: LD_ADDR_EXP 114
91033: PUSH
91034: LD_INT 1
91036: ST_TO_ADDR
// if p3 = 108 then
91037: LD_VAR 0 3
91041: PUSH
91042: LD_INT 108
91044: EQUAL
91045: IFFALSE 91055
// sWound := true ;
91047: LD_ADDR_EXP 122
91051: PUSH
91052: LD_INT 1
91054: ST_TO_ADDR
// if p3 = 109 then
91055: LD_VAR 0 3
91059: PUSH
91060: LD_INT 109
91062: EQUAL
91063: IFFALSE 91073
// sBetray := true ;
91065: LD_ADDR_EXP 126
91069: PUSH
91070: LD_INT 1
91072: ST_TO_ADDR
// if p3 = 110 then
91073: LD_VAR 0 3
91077: PUSH
91078: LD_INT 110
91080: EQUAL
91081: IFFALSE 91091
// sContamin := true ;
91083: LD_ADDR_EXP 127
91087: PUSH
91088: LD_INT 1
91090: ST_TO_ADDR
// if p3 = 111 then
91091: LD_VAR 0 3
91095: PUSH
91096: LD_INT 111
91098: EQUAL
91099: IFFALSE 91109
// sOil := true ;
91101: LD_ADDR_EXP 129
91105: PUSH
91106: LD_INT 1
91108: ST_TO_ADDR
// if p3 = 112 then
91109: LD_VAR 0 3
91113: PUSH
91114: LD_INT 112
91116: EQUAL
91117: IFFALSE 91127
// sStu := true ;
91119: LD_ADDR_EXP 133
91123: PUSH
91124: LD_INT 1
91126: ST_TO_ADDR
// if p3 = 113 then
91127: LD_VAR 0 3
91131: PUSH
91132: LD_INT 113
91134: EQUAL
91135: IFFALSE 91145
// sBazooka := true ;
91137: LD_ADDR_EXP 136
91141: PUSH
91142: LD_INT 1
91144: ST_TO_ADDR
// if p3 = 114 then
91145: LD_VAR 0 3
91149: PUSH
91150: LD_INT 114
91152: EQUAL
91153: IFFALSE 91163
// sMortar := true ;
91155: LD_ADDR_EXP 137
91159: PUSH
91160: LD_INT 1
91162: ST_TO_ADDR
// if p3 = 115 then
91163: LD_VAR 0 3
91167: PUSH
91168: LD_INT 115
91170: EQUAL
91171: IFFALSE 91181
// sRanger := true ;
91173: LD_ADDR_EXP 147
91177: PUSH
91178: LD_INT 1
91180: ST_TO_ADDR
// end ; if p2 = 101 then
91181: LD_VAR 0 2
91185: PUSH
91186: LD_INT 101
91188: EQUAL
91189: IFFALSE 91317
// begin case p3 of 1 :
91191: LD_VAR 0 3
91195: PUSH
91196: LD_INT 1
91198: DOUBLE
91199: EQUAL
91200: IFTRUE 91204
91202: GO 91211
91204: POP
// hHackUnlimitedResources ; 2 :
91205: CALL 102354 0 0
91209: GO 91317
91211: LD_INT 2
91213: DOUBLE
91214: EQUAL
91215: IFTRUE 91219
91217: GO 91226
91219: POP
// hHackSetLevel10 ; 3 :
91220: CALL 102487 0 0
91224: GO 91317
91226: LD_INT 3
91228: DOUBLE
91229: EQUAL
91230: IFTRUE 91234
91232: GO 91241
91234: POP
// hHackSetLevel10YourUnits ; 4 :
91235: CALL 102572 0 0
91239: GO 91317
91241: LD_INT 4
91243: DOUBLE
91244: EQUAL
91245: IFTRUE 91249
91247: GO 91256
91249: POP
// hHackInvincible ; 5 :
91250: CALL 103020 0 0
91254: GO 91317
91256: LD_INT 5
91258: DOUBLE
91259: EQUAL
91260: IFTRUE 91264
91262: GO 91271
91264: POP
// hHackInvisible ; 6 :
91265: CALL 103131 0 0
91269: GO 91317
91271: LD_INT 6
91273: DOUBLE
91274: EQUAL
91275: IFTRUE 91279
91277: GO 91286
91279: POP
// hHackChangeYourSide ; 7 :
91280: CALL 103188 0 0
91284: GO 91317
91286: LD_INT 7
91288: DOUBLE
91289: EQUAL
91290: IFTRUE 91294
91292: GO 91301
91294: POP
// hHackChangeUnitSide ; 8 :
91295: CALL 103230 0 0
91299: GO 91317
91301: LD_INT 8
91303: DOUBLE
91304: EQUAL
91305: IFTRUE 91309
91307: GO 91316
91309: POP
// hHackFog ; end ;
91310: CALL 103331 0 0
91314: GO 91317
91316: POP
// end ; end ;
91317: LD_VAR 0 7
91321: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
91322: GO 91324
91324: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
91325: LD_STRING initStreamRollete();
91327: PPUSH
91328: CALL_OW 559
// InitStreamMode ;
91332: CALL 91341 0 0
// DefineStreamItems ( ) ;
91336: CALL 91781 0 0
// end ;
91340: END
// function InitStreamMode ; begin
91341: LD_INT 0
91343: PPUSH
// streamModeActive := false ;
91344: LD_ADDR_EXP 94
91348: PUSH
91349: LD_INT 0
91351: ST_TO_ADDR
// normalCounter := 36 ;
91352: LD_ADDR_EXP 95
91356: PUSH
91357: LD_INT 36
91359: ST_TO_ADDR
// hardcoreCounter := 16 ;
91360: LD_ADDR_EXP 96
91364: PUSH
91365: LD_INT 16
91367: ST_TO_ADDR
// sRocket := false ;
91368: LD_ADDR_EXP 99
91372: PUSH
91373: LD_INT 0
91375: ST_TO_ADDR
// sSpeed := false ;
91376: LD_ADDR_EXP 98
91380: PUSH
91381: LD_INT 0
91383: ST_TO_ADDR
// sEngine := false ;
91384: LD_ADDR_EXP 100
91388: PUSH
91389: LD_INT 0
91391: ST_TO_ADDR
// sSpec := false ;
91392: LD_ADDR_EXP 97
91396: PUSH
91397: LD_INT 0
91399: ST_TO_ADDR
// sLevel := false ;
91400: LD_ADDR_EXP 101
91404: PUSH
91405: LD_INT 0
91407: ST_TO_ADDR
// sArmoury := false ;
91408: LD_ADDR_EXP 102
91412: PUSH
91413: LD_INT 0
91415: ST_TO_ADDR
// sRadar := false ;
91416: LD_ADDR_EXP 103
91420: PUSH
91421: LD_INT 0
91423: ST_TO_ADDR
// sBunker := false ;
91424: LD_ADDR_EXP 104
91428: PUSH
91429: LD_INT 0
91431: ST_TO_ADDR
// sHack := false ;
91432: LD_ADDR_EXP 105
91436: PUSH
91437: LD_INT 0
91439: ST_TO_ADDR
// sFire := false ;
91440: LD_ADDR_EXP 106
91444: PUSH
91445: LD_INT 0
91447: ST_TO_ADDR
// sRefresh := false ;
91448: LD_ADDR_EXP 107
91452: PUSH
91453: LD_INT 0
91455: ST_TO_ADDR
// sExp := false ;
91456: LD_ADDR_EXP 108
91460: PUSH
91461: LD_INT 0
91463: ST_TO_ADDR
// sDepot := false ;
91464: LD_ADDR_EXP 109
91468: PUSH
91469: LD_INT 0
91471: ST_TO_ADDR
// sFlag := false ;
91472: LD_ADDR_EXP 110
91476: PUSH
91477: LD_INT 0
91479: ST_TO_ADDR
// sKamikadze := false ;
91480: LD_ADDR_EXP 118
91484: PUSH
91485: LD_INT 0
91487: ST_TO_ADDR
// sTroll := false ;
91488: LD_ADDR_EXP 119
91492: PUSH
91493: LD_INT 0
91495: ST_TO_ADDR
// sSlow := false ;
91496: LD_ADDR_EXP 120
91500: PUSH
91501: LD_INT 0
91503: ST_TO_ADDR
// sLack := false ;
91504: LD_ADDR_EXP 121
91508: PUSH
91509: LD_INT 0
91511: ST_TO_ADDR
// sTank := false ;
91512: LD_ADDR_EXP 123
91516: PUSH
91517: LD_INT 0
91519: ST_TO_ADDR
// sRemote := false ;
91520: LD_ADDR_EXP 124
91524: PUSH
91525: LD_INT 0
91527: ST_TO_ADDR
// sPowell := false ;
91528: LD_ADDR_EXP 125
91532: PUSH
91533: LD_INT 0
91535: ST_TO_ADDR
// sTeleport := false ;
91536: LD_ADDR_EXP 128
91540: PUSH
91541: LD_INT 0
91543: ST_TO_ADDR
// sOilTower := false ;
91544: LD_ADDR_EXP 130
91548: PUSH
91549: LD_INT 0
91551: ST_TO_ADDR
// sShovel := false ;
91552: LD_ADDR_EXP 131
91556: PUSH
91557: LD_INT 0
91559: ST_TO_ADDR
// sSheik := false ;
91560: LD_ADDR_EXP 132
91564: PUSH
91565: LD_INT 0
91567: ST_TO_ADDR
// sEarthquake := false ;
91568: LD_ADDR_EXP 134
91572: PUSH
91573: LD_INT 0
91575: ST_TO_ADDR
// sAI := false ;
91576: LD_ADDR_EXP 135
91580: PUSH
91581: LD_INT 0
91583: ST_TO_ADDR
// sCargo := false ;
91584: LD_ADDR_EXP 138
91588: PUSH
91589: LD_INT 0
91591: ST_TO_ADDR
// sDLaser := false ;
91592: LD_ADDR_EXP 139
91596: PUSH
91597: LD_INT 0
91599: ST_TO_ADDR
// sExchange := false ;
91600: LD_ADDR_EXP 140
91604: PUSH
91605: LD_INT 0
91607: ST_TO_ADDR
// sFac := false ;
91608: LD_ADDR_EXP 141
91612: PUSH
91613: LD_INT 0
91615: ST_TO_ADDR
// sPower := false ;
91616: LD_ADDR_EXP 142
91620: PUSH
91621: LD_INT 0
91623: ST_TO_ADDR
// sRandom := false ;
91624: LD_ADDR_EXP 143
91628: PUSH
91629: LD_INT 0
91631: ST_TO_ADDR
// sShield := false ;
91632: LD_ADDR_EXP 144
91636: PUSH
91637: LD_INT 0
91639: ST_TO_ADDR
// sTime := false ;
91640: LD_ADDR_EXP 145
91644: PUSH
91645: LD_INT 0
91647: ST_TO_ADDR
// sTools := false ;
91648: LD_ADDR_EXP 146
91652: PUSH
91653: LD_INT 0
91655: ST_TO_ADDR
// sSold := false ;
91656: LD_ADDR_EXP 111
91660: PUSH
91661: LD_INT 0
91663: ST_TO_ADDR
// sDiff := false ;
91664: LD_ADDR_EXP 112
91668: PUSH
91669: LD_INT 0
91671: ST_TO_ADDR
// sFog := false ;
91672: LD_ADDR_EXP 115
91676: PUSH
91677: LD_INT 0
91679: ST_TO_ADDR
// sReset := false ;
91680: LD_ADDR_EXP 116
91684: PUSH
91685: LD_INT 0
91687: ST_TO_ADDR
// sSun := false ;
91688: LD_ADDR_EXP 117
91692: PUSH
91693: LD_INT 0
91695: ST_TO_ADDR
// sTiger := false ;
91696: LD_ADDR_EXP 113
91700: PUSH
91701: LD_INT 0
91703: ST_TO_ADDR
// sBomb := false ;
91704: LD_ADDR_EXP 114
91708: PUSH
91709: LD_INT 0
91711: ST_TO_ADDR
// sWound := false ;
91712: LD_ADDR_EXP 122
91716: PUSH
91717: LD_INT 0
91719: ST_TO_ADDR
// sBetray := false ;
91720: LD_ADDR_EXP 126
91724: PUSH
91725: LD_INT 0
91727: ST_TO_ADDR
// sContamin := false ;
91728: LD_ADDR_EXP 127
91732: PUSH
91733: LD_INT 0
91735: ST_TO_ADDR
// sOil := false ;
91736: LD_ADDR_EXP 129
91740: PUSH
91741: LD_INT 0
91743: ST_TO_ADDR
// sStu := false ;
91744: LD_ADDR_EXP 133
91748: PUSH
91749: LD_INT 0
91751: ST_TO_ADDR
// sBazooka := false ;
91752: LD_ADDR_EXP 136
91756: PUSH
91757: LD_INT 0
91759: ST_TO_ADDR
// sMortar := false ;
91760: LD_ADDR_EXP 137
91764: PUSH
91765: LD_INT 0
91767: ST_TO_ADDR
// sRanger := false ;
91768: LD_ADDR_EXP 147
91772: PUSH
91773: LD_INT 0
91775: ST_TO_ADDR
// end ;
91776: LD_VAR 0 1
91780: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
91781: LD_INT 0
91783: PPUSH
91784: PPUSH
91785: PPUSH
91786: PPUSH
91787: PPUSH
// result := [ ] ;
91788: LD_ADDR_VAR 0 1
91792: PUSH
91793: EMPTY
91794: ST_TO_ADDR
// if campaign_id = 1 then
91795: LD_OWVAR 69
91799: PUSH
91800: LD_INT 1
91802: EQUAL
91803: IFFALSE 94741
// begin case mission_number of 1 :
91805: LD_OWVAR 70
91809: PUSH
91810: LD_INT 1
91812: DOUBLE
91813: EQUAL
91814: IFTRUE 91818
91816: GO 91882
91818: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
91819: LD_ADDR_VAR 0 1
91823: PUSH
91824: LD_INT 2
91826: PUSH
91827: LD_INT 4
91829: PUSH
91830: LD_INT 11
91832: PUSH
91833: LD_INT 12
91835: PUSH
91836: LD_INT 15
91838: PUSH
91839: LD_INT 16
91841: PUSH
91842: LD_INT 22
91844: PUSH
91845: LD_INT 23
91847: PUSH
91848: LD_INT 26
91850: PUSH
91851: EMPTY
91852: LIST
91853: LIST
91854: LIST
91855: LIST
91856: LIST
91857: LIST
91858: LIST
91859: LIST
91860: LIST
91861: PUSH
91862: LD_INT 101
91864: PUSH
91865: LD_INT 102
91867: PUSH
91868: LD_INT 106
91870: PUSH
91871: EMPTY
91872: LIST
91873: LIST
91874: LIST
91875: PUSH
91876: EMPTY
91877: LIST
91878: LIST
91879: ST_TO_ADDR
91880: GO 94739
91882: LD_INT 2
91884: DOUBLE
91885: EQUAL
91886: IFTRUE 91890
91888: GO 91962
91890: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
91891: LD_ADDR_VAR 0 1
91895: PUSH
91896: LD_INT 2
91898: PUSH
91899: LD_INT 4
91901: PUSH
91902: LD_INT 11
91904: PUSH
91905: LD_INT 12
91907: PUSH
91908: LD_INT 15
91910: PUSH
91911: LD_INT 16
91913: PUSH
91914: LD_INT 22
91916: PUSH
91917: LD_INT 23
91919: PUSH
91920: LD_INT 26
91922: PUSH
91923: EMPTY
91924: LIST
91925: LIST
91926: LIST
91927: LIST
91928: LIST
91929: LIST
91930: LIST
91931: LIST
91932: LIST
91933: PUSH
91934: LD_INT 101
91936: PUSH
91937: LD_INT 102
91939: PUSH
91940: LD_INT 105
91942: PUSH
91943: LD_INT 106
91945: PUSH
91946: LD_INT 108
91948: PUSH
91949: EMPTY
91950: LIST
91951: LIST
91952: LIST
91953: LIST
91954: LIST
91955: PUSH
91956: EMPTY
91957: LIST
91958: LIST
91959: ST_TO_ADDR
91960: GO 94739
91962: LD_INT 3
91964: DOUBLE
91965: EQUAL
91966: IFTRUE 91970
91968: GO 92046
91970: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
91971: LD_ADDR_VAR 0 1
91975: PUSH
91976: LD_INT 2
91978: PUSH
91979: LD_INT 4
91981: PUSH
91982: LD_INT 5
91984: PUSH
91985: LD_INT 11
91987: PUSH
91988: LD_INT 12
91990: PUSH
91991: LD_INT 15
91993: PUSH
91994: LD_INT 16
91996: PUSH
91997: LD_INT 22
91999: PUSH
92000: LD_INT 26
92002: PUSH
92003: LD_INT 36
92005: PUSH
92006: EMPTY
92007: LIST
92008: LIST
92009: LIST
92010: LIST
92011: LIST
92012: LIST
92013: LIST
92014: LIST
92015: LIST
92016: LIST
92017: PUSH
92018: LD_INT 101
92020: PUSH
92021: LD_INT 102
92023: PUSH
92024: LD_INT 105
92026: PUSH
92027: LD_INT 106
92029: PUSH
92030: LD_INT 108
92032: PUSH
92033: EMPTY
92034: LIST
92035: LIST
92036: LIST
92037: LIST
92038: LIST
92039: PUSH
92040: EMPTY
92041: LIST
92042: LIST
92043: ST_TO_ADDR
92044: GO 94739
92046: LD_INT 4
92048: DOUBLE
92049: EQUAL
92050: IFTRUE 92054
92052: GO 92138
92054: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
92055: LD_ADDR_VAR 0 1
92059: PUSH
92060: LD_INT 2
92062: PUSH
92063: LD_INT 4
92065: PUSH
92066: LD_INT 5
92068: PUSH
92069: LD_INT 8
92071: PUSH
92072: LD_INT 11
92074: PUSH
92075: LD_INT 12
92077: PUSH
92078: LD_INT 15
92080: PUSH
92081: LD_INT 16
92083: PUSH
92084: LD_INT 22
92086: PUSH
92087: LD_INT 23
92089: PUSH
92090: LD_INT 26
92092: PUSH
92093: LD_INT 36
92095: PUSH
92096: EMPTY
92097: LIST
92098: LIST
92099: LIST
92100: LIST
92101: LIST
92102: LIST
92103: LIST
92104: LIST
92105: LIST
92106: LIST
92107: LIST
92108: LIST
92109: PUSH
92110: LD_INT 101
92112: PUSH
92113: LD_INT 102
92115: PUSH
92116: LD_INT 105
92118: PUSH
92119: LD_INT 106
92121: PUSH
92122: LD_INT 108
92124: PUSH
92125: EMPTY
92126: LIST
92127: LIST
92128: LIST
92129: LIST
92130: LIST
92131: PUSH
92132: EMPTY
92133: LIST
92134: LIST
92135: ST_TO_ADDR
92136: GO 94739
92138: LD_INT 5
92140: DOUBLE
92141: EQUAL
92142: IFTRUE 92146
92144: GO 92246
92146: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
92147: LD_ADDR_VAR 0 1
92151: PUSH
92152: LD_INT 2
92154: PUSH
92155: LD_INT 4
92157: PUSH
92158: LD_INT 5
92160: PUSH
92161: LD_INT 6
92163: PUSH
92164: LD_INT 8
92166: PUSH
92167: LD_INT 11
92169: PUSH
92170: LD_INT 12
92172: PUSH
92173: LD_INT 15
92175: PUSH
92176: LD_INT 16
92178: PUSH
92179: LD_INT 22
92181: PUSH
92182: LD_INT 23
92184: PUSH
92185: LD_INT 25
92187: PUSH
92188: LD_INT 26
92190: PUSH
92191: LD_INT 36
92193: PUSH
92194: EMPTY
92195: LIST
92196: LIST
92197: LIST
92198: LIST
92199: LIST
92200: LIST
92201: LIST
92202: LIST
92203: LIST
92204: LIST
92205: LIST
92206: LIST
92207: LIST
92208: LIST
92209: PUSH
92210: LD_INT 101
92212: PUSH
92213: LD_INT 102
92215: PUSH
92216: LD_INT 105
92218: PUSH
92219: LD_INT 106
92221: PUSH
92222: LD_INT 108
92224: PUSH
92225: LD_INT 109
92227: PUSH
92228: LD_INT 112
92230: PUSH
92231: EMPTY
92232: LIST
92233: LIST
92234: LIST
92235: LIST
92236: LIST
92237: LIST
92238: LIST
92239: PUSH
92240: EMPTY
92241: LIST
92242: LIST
92243: ST_TO_ADDR
92244: GO 94739
92246: LD_INT 6
92248: DOUBLE
92249: EQUAL
92250: IFTRUE 92254
92252: GO 92374
92254: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
92255: LD_ADDR_VAR 0 1
92259: PUSH
92260: LD_INT 2
92262: PUSH
92263: LD_INT 4
92265: PUSH
92266: LD_INT 5
92268: PUSH
92269: LD_INT 6
92271: PUSH
92272: LD_INT 8
92274: PUSH
92275: LD_INT 11
92277: PUSH
92278: LD_INT 12
92280: PUSH
92281: LD_INT 15
92283: PUSH
92284: LD_INT 16
92286: PUSH
92287: LD_INT 20
92289: PUSH
92290: LD_INT 21
92292: PUSH
92293: LD_INT 22
92295: PUSH
92296: LD_INT 23
92298: PUSH
92299: LD_INT 25
92301: PUSH
92302: LD_INT 26
92304: PUSH
92305: LD_INT 30
92307: PUSH
92308: LD_INT 31
92310: PUSH
92311: LD_INT 32
92313: PUSH
92314: LD_INT 36
92316: PUSH
92317: EMPTY
92318: LIST
92319: LIST
92320: LIST
92321: LIST
92322: LIST
92323: LIST
92324: LIST
92325: LIST
92326: LIST
92327: LIST
92328: LIST
92329: LIST
92330: LIST
92331: LIST
92332: LIST
92333: LIST
92334: LIST
92335: LIST
92336: LIST
92337: PUSH
92338: LD_INT 101
92340: PUSH
92341: LD_INT 102
92343: PUSH
92344: LD_INT 105
92346: PUSH
92347: LD_INT 106
92349: PUSH
92350: LD_INT 108
92352: PUSH
92353: LD_INT 109
92355: PUSH
92356: LD_INT 112
92358: PUSH
92359: EMPTY
92360: LIST
92361: LIST
92362: LIST
92363: LIST
92364: LIST
92365: LIST
92366: LIST
92367: PUSH
92368: EMPTY
92369: LIST
92370: LIST
92371: ST_TO_ADDR
92372: GO 94739
92374: LD_INT 7
92376: DOUBLE
92377: EQUAL
92378: IFTRUE 92382
92380: GO 92482
92382: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
92383: LD_ADDR_VAR 0 1
92387: PUSH
92388: LD_INT 2
92390: PUSH
92391: LD_INT 4
92393: PUSH
92394: LD_INT 5
92396: PUSH
92397: LD_INT 7
92399: PUSH
92400: LD_INT 11
92402: PUSH
92403: LD_INT 12
92405: PUSH
92406: LD_INT 15
92408: PUSH
92409: LD_INT 16
92411: PUSH
92412: LD_INT 20
92414: PUSH
92415: LD_INT 21
92417: PUSH
92418: LD_INT 22
92420: PUSH
92421: LD_INT 23
92423: PUSH
92424: LD_INT 25
92426: PUSH
92427: LD_INT 26
92429: PUSH
92430: EMPTY
92431: LIST
92432: LIST
92433: LIST
92434: LIST
92435: LIST
92436: LIST
92437: LIST
92438: LIST
92439: LIST
92440: LIST
92441: LIST
92442: LIST
92443: LIST
92444: LIST
92445: PUSH
92446: LD_INT 101
92448: PUSH
92449: LD_INT 102
92451: PUSH
92452: LD_INT 103
92454: PUSH
92455: LD_INT 105
92457: PUSH
92458: LD_INT 106
92460: PUSH
92461: LD_INT 108
92463: PUSH
92464: LD_INT 112
92466: PUSH
92467: EMPTY
92468: LIST
92469: LIST
92470: LIST
92471: LIST
92472: LIST
92473: LIST
92474: LIST
92475: PUSH
92476: EMPTY
92477: LIST
92478: LIST
92479: ST_TO_ADDR
92480: GO 94739
92482: LD_INT 8
92484: DOUBLE
92485: EQUAL
92486: IFTRUE 92490
92488: GO 92618
92490: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
92491: LD_ADDR_VAR 0 1
92495: PUSH
92496: LD_INT 2
92498: PUSH
92499: LD_INT 4
92501: PUSH
92502: LD_INT 5
92504: PUSH
92505: LD_INT 6
92507: PUSH
92508: LD_INT 7
92510: PUSH
92511: LD_INT 8
92513: PUSH
92514: LD_INT 11
92516: PUSH
92517: LD_INT 12
92519: PUSH
92520: LD_INT 15
92522: PUSH
92523: LD_INT 16
92525: PUSH
92526: LD_INT 20
92528: PUSH
92529: LD_INT 21
92531: PUSH
92532: LD_INT 22
92534: PUSH
92535: LD_INT 23
92537: PUSH
92538: LD_INT 25
92540: PUSH
92541: LD_INT 26
92543: PUSH
92544: LD_INT 30
92546: PUSH
92547: LD_INT 31
92549: PUSH
92550: LD_INT 32
92552: PUSH
92553: LD_INT 36
92555: PUSH
92556: EMPTY
92557: LIST
92558: LIST
92559: LIST
92560: LIST
92561: LIST
92562: LIST
92563: LIST
92564: LIST
92565: LIST
92566: LIST
92567: LIST
92568: LIST
92569: LIST
92570: LIST
92571: LIST
92572: LIST
92573: LIST
92574: LIST
92575: LIST
92576: LIST
92577: PUSH
92578: LD_INT 101
92580: PUSH
92581: LD_INT 102
92583: PUSH
92584: LD_INT 103
92586: PUSH
92587: LD_INT 105
92589: PUSH
92590: LD_INT 106
92592: PUSH
92593: LD_INT 108
92595: PUSH
92596: LD_INT 109
92598: PUSH
92599: LD_INT 112
92601: PUSH
92602: EMPTY
92603: LIST
92604: LIST
92605: LIST
92606: LIST
92607: LIST
92608: LIST
92609: LIST
92610: LIST
92611: PUSH
92612: EMPTY
92613: LIST
92614: LIST
92615: ST_TO_ADDR
92616: GO 94739
92618: LD_INT 9
92620: DOUBLE
92621: EQUAL
92622: IFTRUE 92626
92624: GO 92762
92626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
92627: LD_ADDR_VAR 0 1
92631: PUSH
92632: LD_INT 2
92634: PUSH
92635: LD_INT 4
92637: PUSH
92638: LD_INT 5
92640: PUSH
92641: LD_INT 6
92643: PUSH
92644: LD_INT 7
92646: PUSH
92647: LD_INT 8
92649: PUSH
92650: LD_INT 11
92652: PUSH
92653: LD_INT 12
92655: PUSH
92656: LD_INT 15
92658: PUSH
92659: LD_INT 16
92661: PUSH
92662: LD_INT 20
92664: PUSH
92665: LD_INT 21
92667: PUSH
92668: LD_INT 22
92670: PUSH
92671: LD_INT 23
92673: PUSH
92674: LD_INT 25
92676: PUSH
92677: LD_INT 26
92679: PUSH
92680: LD_INT 28
92682: PUSH
92683: LD_INT 30
92685: PUSH
92686: LD_INT 31
92688: PUSH
92689: LD_INT 32
92691: PUSH
92692: LD_INT 36
92694: PUSH
92695: EMPTY
92696: LIST
92697: LIST
92698: LIST
92699: LIST
92700: LIST
92701: LIST
92702: LIST
92703: LIST
92704: LIST
92705: LIST
92706: LIST
92707: LIST
92708: LIST
92709: LIST
92710: LIST
92711: LIST
92712: LIST
92713: LIST
92714: LIST
92715: LIST
92716: LIST
92717: PUSH
92718: LD_INT 101
92720: PUSH
92721: LD_INT 102
92723: PUSH
92724: LD_INT 103
92726: PUSH
92727: LD_INT 105
92729: PUSH
92730: LD_INT 106
92732: PUSH
92733: LD_INT 108
92735: PUSH
92736: LD_INT 109
92738: PUSH
92739: LD_INT 112
92741: PUSH
92742: LD_INT 114
92744: PUSH
92745: EMPTY
92746: LIST
92747: LIST
92748: LIST
92749: LIST
92750: LIST
92751: LIST
92752: LIST
92753: LIST
92754: LIST
92755: PUSH
92756: EMPTY
92757: LIST
92758: LIST
92759: ST_TO_ADDR
92760: GO 94739
92762: LD_INT 10
92764: DOUBLE
92765: EQUAL
92766: IFTRUE 92770
92768: GO 92954
92770: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
92771: LD_ADDR_VAR 0 1
92775: PUSH
92776: LD_INT 2
92778: PUSH
92779: LD_INT 4
92781: PUSH
92782: LD_INT 5
92784: PUSH
92785: LD_INT 6
92787: PUSH
92788: LD_INT 7
92790: PUSH
92791: LD_INT 8
92793: PUSH
92794: LD_INT 9
92796: PUSH
92797: LD_INT 10
92799: PUSH
92800: LD_INT 11
92802: PUSH
92803: LD_INT 12
92805: PUSH
92806: LD_INT 13
92808: PUSH
92809: LD_INT 14
92811: PUSH
92812: LD_INT 15
92814: PUSH
92815: LD_INT 16
92817: PUSH
92818: LD_INT 17
92820: PUSH
92821: LD_INT 18
92823: PUSH
92824: LD_INT 19
92826: PUSH
92827: LD_INT 20
92829: PUSH
92830: LD_INT 21
92832: PUSH
92833: LD_INT 22
92835: PUSH
92836: LD_INT 23
92838: PUSH
92839: LD_INT 24
92841: PUSH
92842: LD_INT 25
92844: PUSH
92845: LD_INT 26
92847: PUSH
92848: LD_INT 28
92850: PUSH
92851: LD_INT 30
92853: PUSH
92854: LD_INT 31
92856: PUSH
92857: LD_INT 32
92859: PUSH
92860: LD_INT 36
92862: PUSH
92863: EMPTY
92864: LIST
92865: LIST
92866: LIST
92867: LIST
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: LIST
92878: LIST
92879: LIST
92880: LIST
92881: LIST
92882: LIST
92883: LIST
92884: LIST
92885: LIST
92886: LIST
92887: LIST
92888: LIST
92889: LIST
92890: LIST
92891: LIST
92892: LIST
92893: PUSH
92894: LD_INT 101
92896: PUSH
92897: LD_INT 102
92899: PUSH
92900: LD_INT 103
92902: PUSH
92903: LD_INT 104
92905: PUSH
92906: LD_INT 105
92908: PUSH
92909: LD_INT 106
92911: PUSH
92912: LD_INT 107
92914: PUSH
92915: LD_INT 108
92917: PUSH
92918: LD_INT 109
92920: PUSH
92921: LD_INT 110
92923: PUSH
92924: LD_INT 111
92926: PUSH
92927: LD_INT 112
92929: PUSH
92930: LD_INT 114
92932: PUSH
92933: EMPTY
92934: LIST
92935: LIST
92936: LIST
92937: LIST
92938: LIST
92939: LIST
92940: LIST
92941: LIST
92942: LIST
92943: LIST
92944: LIST
92945: LIST
92946: LIST
92947: PUSH
92948: EMPTY
92949: LIST
92950: LIST
92951: ST_TO_ADDR
92952: GO 94739
92954: LD_INT 11
92956: DOUBLE
92957: EQUAL
92958: IFTRUE 92962
92960: GO 93154
92962: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
92963: LD_ADDR_VAR 0 1
92967: PUSH
92968: LD_INT 2
92970: PUSH
92971: LD_INT 3
92973: PUSH
92974: LD_INT 4
92976: PUSH
92977: LD_INT 5
92979: PUSH
92980: LD_INT 6
92982: PUSH
92983: LD_INT 7
92985: PUSH
92986: LD_INT 8
92988: PUSH
92989: LD_INT 9
92991: PUSH
92992: LD_INT 10
92994: PUSH
92995: LD_INT 11
92997: PUSH
92998: LD_INT 12
93000: PUSH
93001: LD_INT 13
93003: PUSH
93004: LD_INT 14
93006: PUSH
93007: LD_INT 15
93009: PUSH
93010: LD_INT 16
93012: PUSH
93013: LD_INT 17
93015: PUSH
93016: LD_INT 18
93018: PUSH
93019: LD_INT 19
93021: PUSH
93022: LD_INT 20
93024: PUSH
93025: LD_INT 21
93027: PUSH
93028: LD_INT 22
93030: PUSH
93031: LD_INT 23
93033: PUSH
93034: LD_INT 24
93036: PUSH
93037: LD_INT 25
93039: PUSH
93040: LD_INT 26
93042: PUSH
93043: LD_INT 28
93045: PUSH
93046: LD_INT 30
93048: PUSH
93049: LD_INT 31
93051: PUSH
93052: LD_INT 32
93054: PUSH
93055: LD_INT 34
93057: PUSH
93058: LD_INT 36
93060: PUSH
93061: EMPTY
93062: LIST
93063: LIST
93064: LIST
93065: LIST
93066: LIST
93067: LIST
93068: LIST
93069: LIST
93070: LIST
93071: LIST
93072: LIST
93073: LIST
93074: LIST
93075: LIST
93076: LIST
93077: LIST
93078: LIST
93079: LIST
93080: LIST
93081: LIST
93082: LIST
93083: LIST
93084: LIST
93085: LIST
93086: LIST
93087: LIST
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: LIST
93093: PUSH
93094: LD_INT 101
93096: PUSH
93097: LD_INT 102
93099: PUSH
93100: LD_INT 103
93102: PUSH
93103: LD_INT 104
93105: PUSH
93106: LD_INT 105
93108: PUSH
93109: LD_INT 106
93111: PUSH
93112: LD_INT 107
93114: PUSH
93115: LD_INT 108
93117: PUSH
93118: LD_INT 109
93120: PUSH
93121: LD_INT 110
93123: PUSH
93124: LD_INT 111
93126: PUSH
93127: LD_INT 112
93129: PUSH
93130: LD_INT 114
93132: PUSH
93133: EMPTY
93134: LIST
93135: LIST
93136: LIST
93137: LIST
93138: LIST
93139: LIST
93140: LIST
93141: LIST
93142: LIST
93143: LIST
93144: LIST
93145: LIST
93146: LIST
93147: PUSH
93148: EMPTY
93149: LIST
93150: LIST
93151: ST_TO_ADDR
93152: GO 94739
93154: LD_INT 12
93156: DOUBLE
93157: EQUAL
93158: IFTRUE 93162
93160: GO 93370
93162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
93163: LD_ADDR_VAR 0 1
93167: PUSH
93168: LD_INT 1
93170: PUSH
93171: LD_INT 2
93173: PUSH
93174: LD_INT 3
93176: PUSH
93177: LD_INT 4
93179: PUSH
93180: LD_INT 5
93182: PUSH
93183: LD_INT 6
93185: PUSH
93186: LD_INT 7
93188: PUSH
93189: LD_INT 8
93191: PUSH
93192: LD_INT 9
93194: PUSH
93195: LD_INT 10
93197: PUSH
93198: LD_INT 11
93200: PUSH
93201: LD_INT 12
93203: PUSH
93204: LD_INT 13
93206: PUSH
93207: LD_INT 14
93209: PUSH
93210: LD_INT 15
93212: PUSH
93213: LD_INT 16
93215: PUSH
93216: LD_INT 17
93218: PUSH
93219: LD_INT 18
93221: PUSH
93222: LD_INT 19
93224: PUSH
93225: LD_INT 20
93227: PUSH
93228: LD_INT 21
93230: PUSH
93231: LD_INT 22
93233: PUSH
93234: LD_INT 23
93236: PUSH
93237: LD_INT 24
93239: PUSH
93240: LD_INT 25
93242: PUSH
93243: LD_INT 26
93245: PUSH
93246: LD_INT 27
93248: PUSH
93249: LD_INT 28
93251: PUSH
93252: LD_INT 30
93254: PUSH
93255: LD_INT 31
93257: PUSH
93258: LD_INT 32
93260: PUSH
93261: LD_INT 33
93263: PUSH
93264: LD_INT 34
93266: PUSH
93267: LD_INT 36
93269: PUSH
93270: EMPTY
93271: LIST
93272: LIST
93273: LIST
93274: LIST
93275: LIST
93276: LIST
93277: LIST
93278: LIST
93279: LIST
93280: LIST
93281: LIST
93282: LIST
93283: LIST
93284: LIST
93285: LIST
93286: LIST
93287: LIST
93288: LIST
93289: LIST
93290: LIST
93291: LIST
93292: LIST
93293: LIST
93294: LIST
93295: LIST
93296: LIST
93297: LIST
93298: LIST
93299: LIST
93300: LIST
93301: LIST
93302: LIST
93303: LIST
93304: LIST
93305: PUSH
93306: LD_INT 101
93308: PUSH
93309: LD_INT 102
93311: PUSH
93312: LD_INT 103
93314: PUSH
93315: LD_INT 104
93317: PUSH
93318: LD_INT 105
93320: PUSH
93321: LD_INT 106
93323: PUSH
93324: LD_INT 107
93326: PUSH
93327: LD_INT 108
93329: PUSH
93330: LD_INT 109
93332: PUSH
93333: LD_INT 110
93335: PUSH
93336: LD_INT 111
93338: PUSH
93339: LD_INT 112
93341: PUSH
93342: LD_INT 113
93344: PUSH
93345: LD_INT 114
93347: PUSH
93348: EMPTY
93349: LIST
93350: LIST
93351: LIST
93352: LIST
93353: LIST
93354: LIST
93355: LIST
93356: LIST
93357: LIST
93358: LIST
93359: LIST
93360: LIST
93361: LIST
93362: LIST
93363: PUSH
93364: EMPTY
93365: LIST
93366: LIST
93367: ST_TO_ADDR
93368: GO 94739
93370: LD_INT 13
93372: DOUBLE
93373: EQUAL
93374: IFTRUE 93378
93376: GO 93574
93378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
93379: LD_ADDR_VAR 0 1
93383: PUSH
93384: LD_INT 1
93386: PUSH
93387: LD_INT 2
93389: PUSH
93390: LD_INT 3
93392: PUSH
93393: LD_INT 4
93395: PUSH
93396: LD_INT 5
93398: PUSH
93399: LD_INT 8
93401: PUSH
93402: LD_INT 9
93404: PUSH
93405: LD_INT 10
93407: PUSH
93408: LD_INT 11
93410: PUSH
93411: LD_INT 12
93413: PUSH
93414: LD_INT 14
93416: PUSH
93417: LD_INT 15
93419: PUSH
93420: LD_INT 16
93422: PUSH
93423: LD_INT 17
93425: PUSH
93426: LD_INT 18
93428: PUSH
93429: LD_INT 19
93431: PUSH
93432: LD_INT 20
93434: PUSH
93435: LD_INT 21
93437: PUSH
93438: LD_INT 22
93440: PUSH
93441: LD_INT 23
93443: PUSH
93444: LD_INT 24
93446: PUSH
93447: LD_INT 25
93449: PUSH
93450: LD_INT 26
93452: PUSH
93453: LD_INT 27
93455: PUSH
93456: LD_INT 28
93458: PUSH
93459: LD_INT 30
93461: PUSH
93462: LD_INT 31
93464: PUSH
93465: LD_INT 32
93467: PUSH
93468: LD_INT 33
93470: PUSH
93471: LD_INT 34
93473: PUSH
93474: LD_INT 36
93476: PUSH
93477: EMPTY
93478: LIST
93479: LIST
93480: LIST
93481: LIST
93482: LIST
93483: LIST
93484: LIST
93485: LIST
93486: LIST
93487: LIST
93488: LIST
93489: LIST
93490: LIST
93491: LIST
93492: LIST
93493: LIST
93494: LIST
93495: LIST
93496: LIST
93497: LIST
93498: LIST
93499: LIST
93500: LIST
93501: LIST
93502: LIST
93503: LIST
93504: LIST
93505: LIST
93506: LIST
93507: LIST
93508: LIST
93509: PUSH
93510: LD_INT 101
93512: PUSH
93513: LD_INT 102
93515: PUSH
93516: LD_INT 103
93518: PUSH
93519: LD_INT 104
93521: PUSH
93522: LD_INT 105
93524: PUSH
93525: LD_INT 106
93527: PUSH
93528: LD_INT 107
93530: PUSH
93531: LD_INT 108
93533: PUSH
93534: LD_INT 109
93536: PUSH
93537: LD_INT 110
93539: PUSH
93540: LD_INT 111
93542: PUSH
93543: LD_INT 112
93545: PUSH
93546: LD_INT 113
93548: PUSH
93549: LD_INT 114
93551: PUSH
93552: EMPTY
93553: LIST
93554: LIST
93555: LIST
93556: LIST
93557: LIST
93558: LIST
93559: LIST
93560: LIST
93561: LIST
93562: LIST
93563: LIST
93564: LIST
93565: LIST
93566: LIST
93567: PUSH
93568: EMPTY
93569: LIST
93570: LIST
93571: ST_TO_ADDR
93572: GO 94739
93574: LD_INT 14
93576: DOUBLE
93577: EQUAL
93578: IFTRUE 93582
93580: GO 93794
93582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
93583: LD_ADDR_VAR 0 1
93587: PUSH
93588: LD_INT 1
93590: PUSH
93591: LD_INT 2
93593: PUSH
93594: LD_INT 3
93596: PUSH
93597: LD_INT 4
93599: PUSH
93600: LD_INT 5
93602: PUSH
93603: LD_INT 6
93605: PUSH
93606: LD_INT 7
93608: PUSH
93609: LD_INT 8
93611: PUSH
93612: LD_INT 9
93614: PUSH
93615: LD_INT 10
93617: PUSH
93618: LD_INT 11
93620: PUSH
93621: LD_INT 12
93623: PUSH
93624: LD_INT 13
93626: PUSH
93627: LD_INT 14
93629: PUSH
93630: LD_INT 15
93632: PUSH
93633: LD_INT 16
93635: PUSH
93636: LD_INT 17
93638: PUSH
93639: LD_INT 18
93641: PUSH
93642: LD_INT 19
93644: PUSH
93645: LD_INT 20
93647: PUSH
93648: LD_INT 21
93650: PUSH
93651: LD_INT 22
93653: PUSH
93654: LD_INT 23
93656: PUSH
93657: LD_INT 24
93659: PUSH
93660: LD_INT 25
93662: PUSH
93663: LD_INT 26
93665: PUSH
93666: LD_INT 27
93668: PUSH
93669: LD_INT 28
93671: PUSH
93672: LD_INT 29
93674: PUSH
93675: LD_INT 30
93677: PUSH
93678: LD_INT 31
93680: PUSH
93681: LD_INT 32
93683: PUSH
93684: LD_INT 33
93686: PUSH
93687: LD_INT 34
93689: PUSH
93690: LD_INT 36
93692: PUSH
93693: EMPTY
93694: LIST
93695: LIST
93696: LIST
93697: LIST
93698: LIST
93699: LIST
93700: LIST
93701: LIST
93702: LIST
93703: LIST
93704: LIST
93705: LIST
93706: LIST
93707: LIST
93708: LIST
93709: LIST
93710: LIST
93711: LIST
93712: LIST
93713: LIST
93714: LIST
93715: LIST
93716: LIST
93717: LIST
93718: LIST
93719: LIST
93720: LIST
93721: LIST
93722: LIST
93723: LIST
93724: LIST
93725: LIST
93726: LIST
93727: LIST
93728: LIST
93729: PUSH
93730: LD_INT 101
93732: PUSH
93733: LD_INT 102
93735: PUSH
93736: LD_INT 103
93738: PUSH
93739: LD_INT 104
93741: PUSH
93742: LD_INT 105
93744: PUSH
93745: LD_INT 106
93747: PUSH
93748: LD_INT 107
93750: PUSH
93751: LD_INT 108
93753: PUSH
93754: LD_INT 109
93756: PUSH
93757: LD_INT 110
93759: PUSH
93760: LD_INT 111
93762: PUSH
93763: LD_INT 112
93765: PUSH
93766: LD_INT 113
93768: PUSH
93769: LD_INT 114
93771: PUSH
93772: EMPTY
93773: LIST
93774: LIST
93775: LIST
93776: LIST
93777: LIST
93778: LIST
93779: LIST
93780: LIST
93781: LIST
93782: LIST
93783: LIST
93784: LIST
93785: LIST
93786: LIST
93787: PUSH
93788: EMPTY
93789: LIST
93790: LIST
93791: ST_TO_ADDR
93792: GO 94739
93794: LD_INT 15
93796: DOUBLE
93797: EQUAL
93798: IFTRUE 93802
93800: GO 94014
93802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
93803: LD_ADDR_VAR 0 1
93807: PUSH
93808: LD_INT 1
93810: PUSH
93811: LD_INT 2
93813: PUSH
93814: LD_INT 3
93816: PUSH
93817: LD_INT 4
93819: PUSH
93820: LD_INT 5
93822: PUSH
93823: LD_INT 6
93825: PUSH
93826: LD_INT 7
93828: PUSH
93829: LD_INT 8
93831: PUSH
93832: LD_INT 9
93834: PUSH
93835: LD_INT 10
93837: PUSH
93838: LD_INT 11
93840: PUSH
93841: LD_INT 12
93843: PUSH
93844: LD_INT 13
93846: PUSH
93847: LD_INT 14
93849: PUSH
93850: LD_INT 15
93852: PUSH
93853: LD_INT 16
93855: PUSH
93856: LD_INT 17
93858: PUSH
93859: LD_INT 18
93861: PUSH
93862: LD_INT 19
93864: PUSH
93865: LD_INT 20
93867: PUSH
93868: LD_INT 21
93870: PUSH
93871: LD_INT 22
93873: PUSH
93874: LD_INT 23
93876: PUSH
93877: LD_INT 24
93879: PUSH
93880: LD_INT 25
93882: PUSH
93883: LD_INT 26
93885: PUSH
93886: LD_INT 27
93888: PUSH
93889: LD_INT 28
93891: PUSH
93892: LD_INT 29
93894: PUSH
93895: LD_INT 30
93897: PUSH
93898: LD_INT 31
93900: PUSH
93901: LD_INT 32
93903: PUSH
93904: LD_INT 33
93906: PUSH
93907: LD_INT 34
93909: PUSH
93910: LD_INT 36
93912: PUSH
93913: EMPTY
93914: LIST
93915: LIST
93916: LIST
93917: LIST
93918: LIST
93919: LIST
93920: LIST
93921: LIST
93922: LIST
93923: LIST
93924: LIST
93925: LIST
93926: LIST
93927: LIST
93928: LIST
93929: LIST
93930: LIST
93931: LIST
93932: LIST
93933: LIST
93934: LIST
93935: LIST
93936: LIST
93937: LIST
93938: LIST
93939: LIST
93940: LIST
93941: LIST
93942: LIST
93943: LIST
93944: LIST
93945: LIST
93946: LIST
93947: LIST
93948: LIST
93949: PUSH
93950: LD_INT 101
93952: PUSH
93953: LD_INT 102
93955: PUSH
93956: LD_INT 103
93958: PUSH
93959: LD_INT 104
93961: PUSH
93962: LD_INT 105
93964: PUSH
93965: LD_INT 106
93967: PUSH
93968: LD_INT 107
93970: PUSH
93971: LD_INT 108
93973: PUSH
93974: LD_INT 109
93976: PUSH
93977: LD_INT 110
93979: PUSH
93980: LD_INT 111
93982: PUSH
93983: LD_INT 112
93985: PUSH
93986: LD_INT 113
93988: PUSH
93989: LD_INT 114
93991: PUSH
93992: EMPTY
93993: LIST
93994: LIST
93995: LIST
93996: LIST
93997: LIST
93998: LIST
93999: LIST
94000: LIST
94001: LIST
94002: LIST
94003: LIST
94004: LIST
94005: LIST
94006: LIST
94007: PUSH
94008: EMPTY
94009: LIST
94010: LIST
94011: ST_TO_ADDR
94012: GO 94739
94014: LD_INT 16
94016: DOUBLE
94017: EQUAL
94018: IFTRUE 94022
94020: GO 94146
94022: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
94023: LD_ADDR_VAR 0 1
94027: PUSH
94028: LD_INT 2
94030: PUSH
94031: LD_INT 4
94033: PUSH
94034: LD_INT 5
94036: PUSH
94037: LD_INT 7
94039: PUSH
94040: LD_INT 11
94042: PUSH
94043: LD_INT 12
94045: PUSH
94046: LD_INT 15
94048: PUSH
94049: LD_INT 16
94051: PUSH
94052: LD_INT 20
94054: PUSH
94055: LD_INT 21
94057: PUSH
94058: LD_INT 22
94060: PUSH
94061: LD_INT 23
94063: PUSH
94064: LD_INT 25
94066: PUSH
94067: LD_INT 26
94069: PUSH
94070: LD_INT 30
94072: PUSH
94073: LD_INT 31
94075: PUSH
94076: LD_INT 32
94078: PUSH
94079: LD_INT 33
94081: PUSH
94082: LD_INT 34
94084: PUSH
94085: EMPTY
94086: LIST
94087: LIST
94088: LIST
94089: LIST
94090: LIST
94091: LIST
94092: LIST
94093: LIST
94094: LIST
94095: LIST
94096: LIST
94097: LIST
94098: LIST
94099: LIST
94100: LIST
94101: LIST
94102: LIST
94103: LIST
94104: LIST
94105: PUSH
94106: LD_INT 101
94108: PUSH
94109: LD_INT 102
94111: PUSH
94112: LD_INT 103
94114: PUSH
94115: LD_INT 106
94117: PUSH
94118: LD_INT 108
94120: PUSH
94121: LD_INT 112
94123: PUSH
94124: LD_INT 113
94126: PUSH
94127: LD_INT 114
94129: PUSH
94130: EMPTY
94131: LIST
94132: LIST
94133: LIST
94134: LIST
94135: LIST
94136: LIST
94137: LIST
94138: LIST
94139: PUSH
94140: EMPTY
94141: LIST
94142: LIST
94143: ST_TO_ADDR
94144: GO 94739
94146: LD_INT 17
94148: DOUBLE
94149: EQUAL
94150: IFTRUE 94154
94152: GO 94366
94154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
94155: LD_ADDR_VAR 0 1
94159: PUSH
94160: LD_INT 1
94162: PUSH
94163: LD_INT 2
94165: PUSH
94166: LD_INT 3
94168: PUSH
94169: LD_INT 4
94171: PUSH
94172: LD_INT 5
94174: PUSH
94175: LD_INT 6
94177: PUSH
94178: LD_INT 7
94180: PUSH
94181: LD_INT 8
94183: PUSH
94184: LD_INT 9
94186: PUSH
94187: LD_INT 10
94189: PUSH
94190: LD_INT 11
94192: PUSH
94193: LD_INT 12
94195: PUSH
94196: LD_INT 13
94198: PUSH
94199: LD_INT 14
94201: PUSH
94202: LD_INT 15
94204: PUSH
94205: LD_INT 16
94207: PUSH
94208: LD_INT 17
94210: PUSH
94211: LD_INT 18
94213: PUSH
94214: LD_INT 19
94216: PUSH
94217: LD_INT 20
94219: PUSH
94220: LD_INT 21
94222: PUSH
94223: LD_INT 22
94225: PUSH
94226: LD_INT 23
94228: PUSH
94229: LD_INT 24
94231: PUSH
94232: LD_INT 25
94234: PUSH
94235: LD_INT 26
94237: PUSH
94238: LD_INT 27
94240: PUSH
94241: LD_INT 28
94243: PUSH
94244: LD_INT 29
94246: PUSH
94247: LD_INT 30
94249: PUSH
94250: LD_INT 31
94252: PUSH
94253: LD_INT 32
94255: PUSH
94256: LD_INT 33
94258: PUSH
94259: LD_INT 34
94261: PUSH
94262: LD_INT 36
94264: PUSH
94265: EMPTY
94266: LIST
94267: LIST
94268: LIST
94269: LIST
94270: LIST
94271: LIST
94272: LIST
94273: LIST
94274: LIST
94275: LIST
94276: LIST
94277: LIST
94278: LIST
94279: LIST
94280: LIST
94281: LIST
94282: LIST
94283: LIST
94284: LIST
94285: LIST
94286: LIST
94287: LIST
94288: LIST
94289: LIST
94290: LIST
94291: LIST
94292: LIST
94293: LIST
94294: LIST
94295: LIST
94296: LIST
94297: LIST
94298: LIST
94299: LIST
94300: LIST
94301: PUSH
94302: LD_INT 101
94304: PUSH
94305: LD_INT 102
94307: PUSH
94308: LD_INT 103
94310: PUSH
94311: LD_INT 104
94313: PUSH
94314: LD_INT 105
94316: PUSH
94317: LD_INT 106
94319: PUSH
94320: LD_INT 107
94322: PUSH
94323: LD_INT 108
94325: PUSH
94326: LD_INT 109
94328: PUSH
94329: LD_INT 110
94331: PUSH
94332: LD_INT 111
94334: PUSH
94335: LD_INT 112
94337: PUSH
94338: LD_INT 113
94340: PUSH
94341: LD_INT 114
94343: PUSH
94344: EMPTY
94345: LIST
94346: LIST
94347: LIST
94348: LIST
94349: LIST
94350: LIST
94351: LIST
94352: LIST
94353: LIST
94354: LIST
94355: LIST
94356: LIST
94357: LIST
94358: LIST
94359: PUSH
94360: EMPTY
94361: LIST
94362: LIST
94363: ST_TO_ADDR
94364: GO 94739
94366: LD_INT 18
94368: DOUBLE
94369: EQUAL
94370: IFTRUE 94374
94372: GO 94510
94374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
94375: LD_ADDR_VAR 0 1
94379: PUSH
94380: LD_INT 2
94382: PUSH
94383: LD_INT 4
94385: PUSH
94386: LD_INT 5
94388: PUSH
94389: LD_INT 7
94391: PUSH
94392: LD_INT 11
94394: PUSH
94395: LD_INT 12
94397: PUSH
94398: LD_INT 15
94400: PUSH
94401: LD_INT 16
94403: PUSH
94404: LD_INT 20
94406: PUSH
94407: LD_INT 21
94409: PUSH
94410: LD_INT 22
94412: PUSH
94413: LD_INT 23
94415: PUSH
94416: LD_INT 25
94418: PUSH
94419: LD_INT 26
94421: PUSH
94422: LD_INT 30
94424: PUSH
94425: LD_INT 31
94427: PUSH
94428: LD_INT 32
94430: PUSH
94431: LD_INT 33
94433: PUSH
94434: LD_INT 34
94436: PUSH
94437: LD_INT 35
94439: PUSH
94440: LD_INT 36
94442: PUSH
94443: EMPTY
94444: LIST
94445: LIST
94446: LIST
94447: LIST
94448: LIST
94449: LIST
94450: LIST
94451: LIST
94452: LIST
94453: LIST
94454: LIST
94455: LIST
94456: LIST
94457: LIST
94458: LIST
94459: LIST
94460: LIST
94461: LIST
94462: LIST
94463: LIST
94464: LIST
94465: PUSH
94466: LD_INT 101
94468: PUSH
94469: LD_INT 102
94471: PUSH
94472: LD_INT 103
94474: PUSH
94475: LD_INT 106
94477: PUSH
94478: LD_INT 108
94480: PUSH
94481: LD_INT 112
94483: PUSH
94484: LD_INT 113
94486: PUSH
94487: LD_INT 114
94489: PUSH
94490: LD_INT 115
94492: PUSH
94493: EMPTY
94494: LIST
94495: LIST
94496: LIST
94497: LIST
94498: LIST
94499: LIST
94500: LIST
94501: LIST
94502: LIST
94503: PUSH
94504: EMPTY
94505: LIST
94506: LIST
94507: ST_TO_ADDR
94508: GO 94739
94510: LD_INT 19
94512: DOUBLE
94513: EQUAL
94514: IFTRUE 94518
94516: GO 94738
94518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
94519: LD_ADDR_VAR 0 1
94523: PUSH
94524: LD_INT 1
94526: PUSH
94527: LD_INT 2
94529: PUSH
94530: LD_INT 3
94532: PUSH
94533: LD_INT 4
94535: PUSH
94536: LD_INT 5
94538: PUSH
94539: LD_INT 6
94541: PUSH
94542: LD_INT 7
94544: PUSH
94545: LD_INT 8
94547: PUSH
94548: LD_INT 9
94550: PUSH
94551: LD_INT 10
94553: PUSH
94554: LD_INT 11
94556: PUSH
94557: LD_INT 12
94559: PUSH
94560: LD_INT 13
94562: PUSH
94563: LD_INT 14
94565: PUSH
94566: LD_INT 15
94568: PUSH
94569: LD_INT 16
94571: PUSH
94572: LD_INT 17
94574: PUSH
94575: LD_INT 18
94577: PUSH
94578: LD_INT 19
94580: PUSH
94581: LD_INT 20
94583: PUSH
94584: LD_INT 21
94586: PUSH
94587: LD_INT 22
94589: PUSH
94590: LD_INT 23
94592: PUSH
94593: LD_INT 24
94595: PUSH
94596: LD_INT 25
94598: PUSH
94599: LD_INT 26
94601: PUSH
94602: LD_INT 27
94604: PUSH
94605: LD_INT 28
94607: PUSH
94608: LD_INT 29
94610: PUSH
94611: LD_INT 30
94613: PUSH
94614: LD_INT 31
94616: PUSH
94617: LD_INT 32
94619: PUSH
94620: LD_INT 33
94622: PUSH
94623: LD_INT 34
94625: PUSH
94626: LD_INT 35
94628: PUSH
94629: LD_INT 36
94631: PUSH
94632: EMPTY
94633: LIST
94634: LIST
94635: LIST
94636: LIST
94637: LIST
94638: LIST
94639: LIST
94640: LIST
94641: LIST
94642: LIST
94643: LIST
94644: LIST
94645: LIST
94646: LIST
94647: LIST
94648: LIST
94649: LIST
94650: LIST
94651: LIST
94652: LIST
94653: LIST
94654: LIST
94655: LIST
94656: LIST
94657: LIST
94658: LIST
94659: LIST
94660: LIST
94661: LIST
94662: LIST
94663: LIST
94664: LIST
94665: LIST
94666: LIST
94667: LIST
94668: LIST
94669: PUSH
94670: LD_INT 101
94672: PUSH
94673: LD_INT 102
94675: PUSH
94676: LD_INT 103
94678: PUSH
94679: LD_INT 104
94681: PUSH
94682: LD_INT 105
94684: PUSH
94685: LD_INT 106
94687: PUSH
94688: LD_INT 107
94690: PUSH
94691: LD_INT 108
94693: PUSH
94694: LD_INT 109
94696: PUSH
94697: LD_INT 110
94699: PUSH
94700: LD_INT 111
94702: PUSH
94703: LD_INT 112
94705: PUSH
94706: LD_INT 113
94708: PUSH
94709: LD_INT 114
94711: PUSH
94712: LD_INT 115
94714: PUSH
94715: EMPTY
94716: LIST
94717: LIST
94718: LIST
94719: LIST
94720: LIST
94721: LIST
94722: LIST
94723: LIST
94724: LIST
94725: LIST
94726: LIST
94727: LIST
94728: LIST
94729: LIST
94730: LIST
94731: PUSH
94732: EMPTY
94733: LIST
94734: LIST
94735: ST_TO_ADDR
94736: GO 94739
94738: POP
// end else
94739: GO 94958
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
94741: LD_ADDR_VAR 0 1
94745: PUSH
94746: LD_INT 1
94748: PUSH
94749: LD_INT 2
94751: PUSH
94752: LD_INT 3
94754: PUSH
94755: LD_INT 4
94757: PUSH
94758: LD_INT 5
94760: PUSH
94761: LD_INT 6
94763: PUSH
94764: LD_INT 7
94766: PUSH
94767: LD_INT 8
94769: PUSH
94770: LD_INT 9
94772: PUSH
94773: LD_INT 10
94775: PUSH
94776: LD_INT 11
94778: PUSH
94779: LD_INT 12
94781: PUSH
94782: LD_INT 13
94784: PUSH
94785: LD_INT 14
94787: PUSH
94788: LD_INT 15
94790: PUSH
94791: LD_INT 16
94793: PUSH
94794: LD_INT 17
94796: PUSH
94797: LD_INT 18
94799: PUSH
94800: LD_INT 19
94802: PUSH
94803: LD_INT 20
94805: PUSH
94806: LD_INT 21
94808: PUSH
94809: LD_INT 22
94811: PUSH
94812: LD_INT 23
94814: PUSH
94815: LD_INT 24
94817: PUSH
94818: LD_INT 25
94820: PUSH
94821: LD_INT 26
94823: PUSH
94824: LD_INT 27
94826: PUSH
94827: LD_INT 28
94829: PUSH
94830: LD_INT 29
94832: PUSH
94833: LD_INT 30
94835: PUSH
94836: LD_INT 31
94838: PUSH
94839: LD_INT 32
94841: PUSH
94842: LD_INT 33
94844: PUSH
94845: LD_INT 34
94847: PUSH
94848: LD_INT 35
94850: PUSH
94851: LD_INT 36
94853: PUSH
94854: EMPTY
94855: LIST
94856: LIST
94857: LIST
94858: LIST
94859: LIST
94860: LIST
94861: LIST
94862: LIST
94863: LIST
94864: LIST
94865: LIST
94866: LIST
94867: LIST
94868: LIST
94869: LIST
94870: LIST
94871: LIST
94872: LIST
94873: LIST
94874: LIST
94875: LIST
94876: LIST
94877: LIST
94878: LIST
94879: LIST
94880: LIST
94881: LIST
94882: LIST
94883: LIST
94884: LIST
94885: LIST
94886: LIST
94887: LIST
94888: LIST
94889: LIST
94890: LIST
94891: PUSH
94892: LD_INT 101
94894: PUSH
94895: LD_INT 102
94897: PUSH
94898: LD_INT 103
94900: PUSH
94901: LD_INT 104
94903: PUSH
94904: LD_INT 105
94906: PUSH
94907: LD_INT 106
94909: PUSH
94910: LD_INT 107
94912: PUSH
94913: LD_INT 108
94915: PUSH
94916: LD_INT 109
94918: PUSH
94919: LD_INT 110
94921: PUSH
94922: LD_INT 111
94924: PUSH
94925: LD_INT 112
94927: PUSH
94928: LD_INT 113
94930: PUSH
94931: LD_INT 114
94933: PUSH
94934: LD_INT 115
94936: PUSH
94937: EMPTY
94938: LIST
94939: LIST
94940: LIST
94941: LIST
94942: LIST
94943: LIST
94944: LIST
94945: LIST
94946: LIST
94947: LIST
94948: LIST
94949: LIST
94950: LIST
94951: LIST
94952: LIST
94953: PUSH
94954: EMPTY
94955: LIST
94956: LIST
94957: ST_TO_ADDR
// if result then
94958: LD_VAR 0 1
94962: IFFALSE 95251
// begin normal :=  ;
94964: LD_ADDR_VAR 0 3
94968: PUSH
94969: LD_STRING 
94971: ST_TO_ADDR
// hardcore :=  ;
94972: LD_ADDR_VAR 0 4
94976: PUSH
94977: LD_STRING 
94979: ST_TO_ADDR
// for i = 1 to normalCounter do
94980: LD_ADDR_VAR 0 5
94984: PUSH
94985: DOUBLE
94986: LD_INT 1
94988: DEC
94989: ST_TO_ADDR
94990: LD_EXP 95
94994: PUSH
94995: FOR_TO
94996: IFFALSE 95097
// begin tmp := 0 ;
94998: LD_ADDR_VAR 0 2
95002: PUSH
95003: LD_STRING 0
95005: ST_TO_ADDR
// if result [ 1 ] then
95006: LD_VAR 0 1
95010: PUSH
95011: LD_INT 1
95013: ARRAY
95014: IFFALSE 95079
// if result [ 1 ] [ 1 ] = i then
95016: LD_VAR 0 1
95020: PUSH
95021: LD_INT 1
95023: ARRAY
95024: PUSH
95025: LD_INT 1
95027: ARRAY
95028: PUSH
95029: LD_VAR 0 5
95033: EQUAL
95034: IFFALSE 95079
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
95036: LD_ADDR_VAR 0 1
95040: PUSH
95041: LD_VAR 0 1
95045: PPUSH
95046: LD_INT 1
95048: PPUSH
95049: LD_VAR 0 1
95053: PUSH
95054: LD_INT 1
95056: ARRAY
95057: PPUSH
95058: LD_INT 1
95060: PPUSH
95061: CALL_OW 3
95065: PPUSH
95066: CALL_OW 1
95070: ST_TO_ADDR
// tmp := 1 ;
95071: LD_ADDR_VAR 0 2
95075: PUSH
95076: LD_STRING 1
95078: ST_TO_ADDR
// end ; normal := normal & tmp ;
95079: LD_ADDR_VAR 0 3
95083: PUSH
95084: LD_VAR 0 3
95088: PUSH
95089: LD_VAR 0 2
95093: STR
95094: ST_TO_ADDR
// end ;
95095: GO 94995
95097: POP
95098: POP
// for i = 1 to hardcoreCounter do
95099: LD_ADDR_VAR 0 5
95103: PUSH
95104: DOUBLE
95105: LD_INT 1
95107: DEC
95108: ST_TO_ADDR
95109: LD_EXP 96
95113: PUSH
95114: FOR_TO
95115: IFFALSE 95220
// begin tmp := 0 ;
95117: LD_ADDR_VAR 0 2
95121: PUSH
95122: LD_STRING 0
95124: ST_TO_ADDR
// if result [ 2 ] then
95125: LD_VAR 0 1
95129: PUSH
95130: LD_INT 2
95132: ARRAY
95133: IFFALSE 95202
// if result [ 2 ] [ 1 ] = 100 + i then
95135: LD_VAR 0 1
95139: PUSH
95140: LD_INT 2
95142: ARRAY
95143: PUSH
95144: LD_INT 1
95146: ARRAY
95147: PUSH
95148: LD_INT 100
95150: PUSH
95151: LD_VAR 0 5
95155: PLUS
95156: EQUAL
95157: IFFALSE 95202
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
95159: LD_ADDR_VAR 0 1
95163: PUSH
95164: LD_VAR 0 1
95168: PPUSH
95169: LD_INT 2
95171: PPUSH
95172: LD_VAR 0 1
95176: PUSH
95177: LD_INT 2
95179: ARRAY
95180: PPUSH
95181: LD_INT 1
95183: PPUSH
95184: CALL_OW 3
95188: PPUSH
95189: CALL_OW 1
95193: ST_TO_ADDR
// tmp := 1 ;
95194: LD_ADDR_VAR 0 2
95198: PUSH
95199: LD_STRING 1
95201: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
95202: LD_ADDR_VAR 0 4
95206: PUSH
95207: LD_VAR 0 4
95211: PUSH
95212: LD_VAR 0 2
95216: STR
95217: ST_TO_ADDR
// end ;
95218: GO 95114
95220: POP
95221: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
95222: LD_STRING getStreamItemsFromMission("
95224: PUSH
95225: LD_VAR 0 3
95229: STR
95230: PUSH
95231: LD_STRING ","
95233: STR
95234: PUSH
95235: LD_VAR 0 4
95239: STR
95240: PUSH
95241: LD_STRING ")
95243: STR
95244: PPUSH
95245: CALL_OW 559
// end else
95249: GO 95258
// ToLua ( getStreamItemsFromMission("","") ) ;
95251: LD_STRING getStreamItemsFromMission("","")
95253: PPUSH
95254: CALL_OW 559
// end ;
95258: LD_VAR 0 1
95262: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
95263: LD_EXP 94
95267: PUSH
95268: LD_EXP 99
95272: AND
95273: IFFALSE 95397
95275: GO 95277
95277: DISABLE
95278: LD_INT 0
95280: PPUSH
95281: PPUSH
// begin enable ;
95282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
95283: LD_ADDR_VAR 0 2
95287: PUSH
95288: LD_INT 22
95290: PUSH
95291: LD_OWVAR 2
95295: PUSH
95296: EMPTY
95297: LIST
95298: LIST
95299: PUSH
95300: LD_INT 2
95302: PUSH
95303: LD_INT 34
95305: PUSH
95306: LD_INT 7
95308: PUSH
95309: EMPTY
95310: LIST
95311: LIST
95312: PUSH
95313: LD_INT 34
95315: PUSH
95316: LD_INT 45
95318: PUSH
95319: EMPTY
95320: LIST
95321: LIST
95322: PUSH
95323: LD_INT 34
95325: PUSH
95326: LD_INT 28
95328: PUSH
95329: EMPTY
95330: LIST
95331: LIST
95332: PUSH
95333: LD_INT 34
95335: PUSH
95336: LD_INT 47
95338: PUSH
95339: EMPTY
95340: LIST
95341: LIST
95342: PUSH
95343: EMPTY
95344: LIST
95345: LIST
95346: LIST
95347: LIST
95348: LIST
95349: PUSH
95350: EMPTY
95351: LIST
95352: LIST
95353: PPUSH
95354: CALL_OW 69
95358: ST_TO_ADDR
// if not tmp then
95359: LD_VAR 0 2
95363: NOT
95364: IFFALSE 95368
// exit ;
95366: GO 95397
// for i in tmp do
95368: LD_ADDR_VAR 0 1
95372: PUSH
95373: LD_VAR 0 2
95377: PUSH
95378: FOR_IN
95379: IFFALSE 95395
// begin SetLives ( i , 0 ) ;
95381: LD_VAR 0 1
95385: PPUSH
95386: LD_INT 0
95388: PPUSH
95389: CALL_OW 234
// end ;
95393: GO 95378
95395: POP
95396: POP
// end ;
95397: PPOPN 2
95399: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
95400: LD_EXP 94
95404: PUSH
95405: LD_EXP 100
95409: AND
95410: IFFALSE 95494
95412: GO 95414
95414: DISABLE
95415: LD_INT 0
95417: PPUSH
95418: PPUSH
// begin enable ;
95419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
95420: LD_ADDR_VAR 0 2
95424: PUSH
95425: LD_INT 22
95427: PUSH
95428: LD_OWVAR 2
95432: PUSH
95433: EMPTY
95434: LIST
95435: LIST
95436: PUSH
95437: LD_INT 32
95439: PUSH
95440: LD_INT 3
95442: PUSH
95443: EMPTY
95444: LIST
95445: LIST
95446: PUSH
95447: EMPTY
95448: LIST
95449: LIST
95450: PPUSH
95451: CALL_OW 69
95455: ST_TO_ADDR
// if not tmp then
95456: LD_VAR 0 2
95460: NOT
95461: IFFALSE 95465
// exit ;
95463: GO 95494
// for i in tmp do
95465: LD_ADDR_VAR 0 1
95469: PUSH
95470: LD_VAR 0 2
95474: PUSH
95475: FOR_IN
95476: IFFALSE 95492
// begin SetLives ( i , 0 ) ;
95478: LD_VAR 0 1
95482: PPUSH
95483: LD_INT 0
95485: PPUSH
95486: CALL_OW 234
// end ;
95490: GO 95475
95492: POP
95493: POP
// end ;
95494: PPOPN 2
95496: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
95497: LD_EXP 94
95501: PUSH
95502: LD_EXP 97
95506: AND
95507: IFFALSE 95600
95509: GO 95511
95511: DISABLE
95512: LD_INT 0
95514: PPUSH
// begin enable ;
95515: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
95516: LD_ADDR_VAR 0 1
95520: PUSH
95521: LD_INT 22
95523: PUSH
95524: LD_OWVAR 2
95528: PUSH
95529: EMPTY
95530: LIST
95531: LIST
95532: PUSH
95533: LD_INT 2
95535: PUSH
95536: LD_INT 25
95538: PUSH
95539: LD_INT 5
95541: PUSH
95542: EMPTY
95543: LIST
95544: LIST
95545: PUSH
95546: LD_INT 25
95548: PUSH
95549: LD_INT 9
95551: PUSH
95552: EMPTY
95553: LIST
95554: LIST
95555: PUSH
95556: LD_INT 25
95558: PUSH
95559: LD_INT 8
95561: PUSH
95562: EMPTY
95563: LIST
95564: LIST
95565: PUSH
95566: EMPTY
95567: LIST
95568: LIST
95569: LIST
95570: LIST
95571: PUSH
95572: EMPTY
95573: LIST
95574: LIST
95575: PPUSH
95576: CALL_OW 69
95580: PUSH
95581: FOR_IN
95582: IFFALSE 95598
// begin SetClass ( i , 1 ) ;
95584: LD_VAR 0 1
95588: PPUSH
95589: LD_INT 1
95591: PPUSH
95592: CALL_OW 336
// end ;
95596: GO 95581
95598: POP
95599: POP
// end ;
95600: PPOPN 1
95602: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
95603: LD_EXP 94
95607: PUSH
95608: LD_EXP 98
95612: AND
95613: PUSH
95614: LD_OWVAR 65
95618: PUSH
95619: LD_INT 7
95621: LESS
95622: AND
95623: IFFALSE 95637
95625: GO 95627
95627: DISABLE
// begin enable ;
95628: ENABLE
// game_speed := 7 ;
95629: LD_ADDR_OWVAR 65
95633: PUSH
95634: LD_INT 7
95636: ST_TO_ADDR
// end ;
95637: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
95638: LD_EXP 94
95642: PUSH
95643: LD_EXP 101
95647: AND
95648: IFFALSE 95850
95650: GO 95652
95652: DISABLE
95653: LD_INT 0
95655: PPUSH
95656: PPUSH
95657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
95658: LD_ADDR_VAR 0 3
95662: PUSH
95663: LD_INT 81
95665: PUSH
95666: LD_OWVAR 2
95670: PUSH
95671: EMPTY
95672: LIST
95673: LIST
95674: PUSH
95675: LD_INT 21
95677: PUSH
95678: LD_INT 1
95680: PUSH
95681: EMPTY
95682: LIST
95683: LIST
95684: PUSH
95685: EMPTY
95686: LIST
95687: LIST
95688: PPUSH
95689: CALL_OW 69
95693: ST_TO_ADDR
// if not tmp then
95694: LD_VAR 0 3
95698: NOT
95699: IFFALSE 95703
// exit ;
95701: GO 95850
// if tmp > 5 then
95703: LD_VAR 0 3
95707: PUSH
95708: LD_INT 5
95710: GREATER
95711: IFFALSE 95723
// k := 5 else
95713: LD_ADDR_VAR 0 2
95717: PUSH
95718: LD_INT 5
95720: ST_TO_ADDR
95721: GO 95733
// k := tmp ;
95723: LD_ADDR_VAR 0 2
95727: PUSH
95728: LD_VAR 0 3
95732: ST_TO_ADDR
// for i := 1 to k do
95733: LD_ADDR_VAR 0 1
95737: PUSH
95738: DOUBLE
95739: LD_INT 1
95741: DEC
95742: ST_TO_ADDR
95743: LD_VAR 0 2
95747: PUSH
95748: FOR_TO
95749: IFFALSE 95848
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
95751: LD_VAR 0 3
95755: PUSH
95756: LD_VAR 0 1
95760: ARRAY
95761: PPUSH
95762: LD_VAR 0 1
95766: PUSH
95767: LD_INT 4
95769: MOD
95770: PUSH
95771: LD_INT 1
95773: PLUS
95774: PPUSH
95775: CALL_OW 259
95779: PUSH
95780: LD_INT 10
95782: LESS
95783: IFFALSE 95846
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
95785: LD_VAR 0 3
95789: PUSH
95790: LD_VAR 0 1
95794: ARRAY
95795: PPUSH
95796: LD_VAR 0 1
95800: PUSH
95801: LD_INT 4
95803: MOD
95804: PUSH
95805: LD_INT 1
95807: PLUS
95808: PPUSH
95809: LD_VAR 0 3
95813: PUSH
95814: LD_VAR 0 1
95818: ARRAY
95819: PPUSH
95820: LD_VAR 0 1
95824: PUSH
95825: LD_INT 4
95827: MOD
95828: PUSH
95829: LD_INT 1
95831: PLUS
95832: PPUSH
95833: CALL_OW 259
95837: PUSH
95838: LD_INT 1
95840: PLUS
95841: PPUSH
95842: CALL_OW 237
95846: GO 95748
95848: POP
95849: POP
// end ;
95850: PPOPN 3
95852: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
95853: LD_EXP 94
95857: PUSH
95858: LD_EXP 102
95862: AND
95863: IFFALSE 95883
95865: GO 95867
95867: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
95868: LD_INT 4
95870: PPUSH
95871: LD_OWVAR 2
95875: PPUSH
95876: LD_INT 0
95878: PPUSH
95879: CALL_OW 324
95883: END
// every 0 0$1 trigger StreamModeActive and sShovel do
95884: LD_EXP 94
95888: PUSH
95889: LD_EXP 131
95893: AND
95894: IFFALSE 95914
95896: GO 95898
95898: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
95899: LD_INT 19
95901: PPUSH
95902: LD_OWVAR 2
95906: PPUSH
95907: LD_INT 0
95909: PPUSH
95910: CALL_OW 324
95914: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
95915: LD_EXP 94
95919: PUSH
95920: LD_EXP 103
95924: AND
95925: IFFALSE 96027
95927: GO 95929
95929: DISABLE
95930: LD_INT 0
95932: PPUSH
95933: PPUSH
// begin enable ;
95934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
95935: LD_ADDR_VAR 0 2
95939: PUSH
95940: LD_INT 22
95942: PUSH
95943: LD_OWVAR 2
95947: PUSH
95948: EMPTY
95949: LIST
95950: LIST
95951: PUSH
95952: LD_INT 2
95954: PUSH
95955: LD_INT 34
95957: PUSH
95958: LD_INT 11
95960: PUSH
95961: EMPTY
95962: LIST
95963: LIST
95964: PUSH
95965: LD_INT 34
95967: PUSH
95968: LD_INT 30
95970: PUSH
95971: EMPTY
95972: LIST
95973: LIST
95974: PUSH
95975: EMPTY
95976: LIST
95977: LIST
95978: LIST
95979: PUSH
95980: EMPTY
95981: LIST
95982: LIST
95983: PPUSH
95984: CALL_OW 69
95988: ST_TO_ADDR
// if not tmp then
95989: LD_VAR 0 2
95993: NOT
95994: IFFALSE 95998
// exit ;
95996: GO 96027
// for i in tmp do
95998: LD_ADDR_VAR 0 1
96002: PUSH
96003: LD_VAR 0 2
96007: PUSH
96008: FOR_IN
96009: IFFALSE 96025
// begin SetLives ( i , 0 ) ;
96011: LD_VAR 0 1
96015: PPUSH
96016: LD_INT 0
96018: PPUSH
96019: CALL_OW 234
// end ;
96023: GO 96008
96025: POP
96026: POP
// end ;
96027: PPOPN 2
96029: END
// every 0 0$1 trigger StreamModeActive and sBunker do
96030: LD_EXP 94
96034: PUSH
96035: LD_EXP 104
96039: AND
96040: IFFALSE 96060
96042: GO 96044
96044: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
96045: LD_INT 32
96047: PPUSH
96048: LD_OWVAR 2
96052: PPUSH
96053: LD_INT 0
96055: PPUSH
96056: CALL_OW 324
96060: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
96061: LD_EXP 94
96065: PUSH
96066: LD_EXP 105
96070: AND
96071: IFFALSE 96252
96073: GO 96075
96075: DISABLE
96076: LD_INT 0
96078: PPUSH
96079: PPUSH
96080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
96081: LD_ADDR_VAR 0 2
96085: PUSH
96086: LD_INT 22
96088: PUSH
96089: LD_OWVAR 2
96093: PUSH
96094: EMPTY
96095: LIST
96096: LIST
96097: PUSH
96098: LD_INT 33
96100: PUSH
96101: LD_INT 3
96103: PUSH
96104: EMPTY
96105: LIST
96106: LIST
96107: PUSH
96108: EMPTY
96109: LIST
96110: LIST
96111: PPUSH
96112: CALL_OW 69
96116: ST_TO_ADDR
// if not tmp then
96117: LD_VAR 0 2
96121: NOT
96122: IFFALSE 96126
// exit ;
96124: GO 96252
// side := 0 ;
96126: LD_ADDR_VAR 0 3
96130: PUSH
96131: LD_INT 0
96133: ST_TO_ADDR
// for i := 1 to 8 do
96134: LD_ADDR_VAR 0 1
96138: PUSH
96139: DOUBLE
96140: LD_INT 1
96142: DEC
96143: ST_TO_ADDR
96144: LD_INT 8
96146: PUSH
96147: FOR_TO
96148: IFFALSE 96196
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
96150: LD_OWVAR 2
96154: PUSH
96155: LD_VAR 0 1
96159: NONEQUAL
96160: PUSH
96161: LD_OWVAR 2
96165: PPUSH
96166: LD_VAR 0 1
96170: PPUSH
96171: CALL_OW 81
96175: PUSH
96176: LD_INT 2
96178: EQUAL
96179: AND
96180: IFFALSE 96194
// begin side := i ;
96182: LD_ADDR_VAR 0 3
96186: PUSH
96187: LD_VAR 0 1
96191: ST_TO_ADDR
// break ;
96192: GO 96196
// end ;
96194: GO 96147
96196: POP
96197: POP
// if not side then
96198: LD_VAR 0 3
96202: NOT
96203: IFFALSE 96207
// exit ;
96205: GO 96252
// for i := 1 to tmp do
96207: LD_ADDR_VAR 0 1
96211: PUSH
96212: DOUBLE
96213: LD_INT 1
96215: DEC
96216: ST_TO_ADDR
96217: LD_VAR 0 2
96221: PUSH
96222: FOR_TO
96223: IFFALSE 96250
// if Prob ( 60 ) then
96225: LD_INT 60
96227: PPUSH
96228: CALL_OW 13
96232: IFFALSE 96248
// SetSide ( i , side ) ;
96234: LD_VAR 0 1
96238: PPUSH
96239: LD_VAR 0 3
96243: PPUSH
96244: CALL_OW 235
96248: GO 96222
96250: POP
96251: POP
// end ;
96252: PPOPN 3
96254: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
96255: LD_EXP 94
96259: PUSH
96260: LD_EXP 107
96264: AND
96265: IFFALSE 96384
96267: GO 96269
96269: DISABLE
96270: LD_INT 0
96272: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
96273: LD_ADDR_VAR 0 1
96277: PUSH
96278: LD_INT 22
96280: PUSH
96281: LD_OWVAR 2
96285: PUSH
96286: EMPTY
96287: LIST
96288: LIST
96289: PUSH
96290: LD_INT 21
96292: PUSH
96293: LD_INT 1
96295: PUSH
96296: EMPTY
96297: LIST
96298: LIST
96299: PUSH
96300: LD_INT 3
96302: PUSH
96303: LD_INT 23
96305: PUSH
96306: LD_INT 0
96308: PUSH
96309: EMPTY
96310: LIST
96311: LIST
96312: PUSH
96313: EMPTY
96314: LIST
96315: LIST
96316: PUSH
96317: EMPTY
96318: LIST
96319: LIST
96320: LIST
96321: PPUSH
96322: CALL_OW 69
96326: PUSH
96327: FOR_IN
96328: IFFALSE 96382
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
96330: LD_VAR 0 1
96334: PPUSH
96335: CALL_OW 257
96339: PUSH
96340: LD_INT 1
96342: PUSH
96343: LD_INT 2
96345: PUSH
96346: LD_INT 3
96348: PUSH
96349: LD_INT 4
96351: PUSH
96352: EMPTY
96353: LIST
96354: LIST
96355: LIST
96356: LIST
96357: IN
96358: IFFALSE 96380
// SetClass ( un , rand ( 1 , 4 ) ) ;
96360: LD_VAR 0 1
96364: PPUSH
96365: LD_INT 1
96367: PPUSH
96368: LD_INT 4
96370: PPUSH
96371: CALL_OW 12
96375: PPUSH
96376: CALL_OW 336
96380: GO 96327
96382: POP
96383: POP
// end ;
96384: PPOPN 1
96386: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
96387: LD_EXP 94
96391: PUSH
96392: LD_EXP 106
96396: AND
96397: IFFALSE 96476
96399: GO 96401
96401: DISABLE
96402: LD_INT 0
96404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96405: LD_ADDR_VAR 0 1
96409: PUSH
96410: LD_INT 22
96412: PUSH
96413: LD_OWVAR 2
96417: PUSH
96418: EMPTY
96419: LIST
96420: LIST
96421: PUSH
96422: LD_INT 21
96424: PUSH
96425: LD_INT 3
96427: PUSH
96428: EMPTY
96429: LIST
96430: LIST
96431: PUSH
96432: EMPTY
96433: LIST
96434: LIST
96435: PPUSH
96436: CALL_OW 69
96440: ST_TO_ADDR
// if not tmp then
96441: LD_VAR 0 1
96445: NOT
96446: IFFALSE 96450
// exit ;
96448: GO 96476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
96450: LD_VAR 0 1
96454: PUSH
96455: LD_INT 1
96457: PPUSH
96458: LD_VAR 0 1
96462: PPUSH
96463: CALL_OW 12
96467: ARRAY
96468: PPUSH
96469: LD_INT 100
96471: PPUSH
96472: CALL_OW 234
// end ;
96476: PPOPN 1
96478: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
96479: LD_EXP 94
96483: PUSH
96484: LD_EXP 108
96488: AND
96489: IFFALSE 96587
96491: GO 96493
96493: DISABLE
96494: LD_INT 0
96496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96497: LD_ADDR_VAR 0 1
96501: PUSH
96502: LD_INT 22
96504: PUSH
96505: LD_OWVAR 2
96509: PUSH
96510: EMPTY
96511: LIST
96512: LIST
96513: PUSH
96514: LD_INT 21
96516: PUSH
96517: LD_INT 1
96519: PUSH
96520: EMPTY
96521: LIST
96522: LIST
96523: PUSH
96524: EMPTY
96525: LIST
96526: LIST
96527: PPUSH
96528: CALL_OW 69
96532: ST_TO_ADDR
// if not tmp then
96533: LD_VAR 0 1
96537: NOT
96538: IFFALSE 96542
// exit ;
96540: GO 96587
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
96542: LD_VAR 0 1
96546: PUSH
96547: LD_INT 1
96549: PPUSH
96550: LD_VAR 0 1
96554: PPUSH
96555: CALL_OW 12
96559: ARRAY
96560: PPUSH
96561: LD_INT 1
96563: PPUSH
96564: LD_INT 4
96566: PPUSH
96567: CALL_OW 12
96571: PPUSH
96572: LD_INT 3000
96574: PPUSH
96575: LD_INT 9000
96577: PPUSH
96578: CALL_OW 12
96582: PPUSH
96583: CALL_OW 492
// end ;
96587: PPOPN 1
96589: END
// every 0 0$1 trigger StreamModeActive and sDepot do
96590: LD_EXP 94
96594: PUSH
96595: LD_EXP 109
96599: AND
96600: IFFALSE 96620
96602: GO 96604
96604: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
96605: LD_INT 1
96607: PPUSH
96608: LD_OWVAR 2
96612: PPUSH
96613: LD_INT 0
96615: PPUSH
96616: CALL_OW 324
96620: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
96621: LD_EXP 94
96625: PUSH
96626: LD_EXP 110
96630: AND
96631: IFFALSE 96714
96633: GO 96635
96635: DISABLE
96636: LD_INT 0
96638: PPUSH
96639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96640: LD_ADDR_VAR 0 2
96644: PUSH
96645: LD_INT 22
96647: PUSH
96648: LD_OWVAR 2
96652: PUSH
96653: EMPTY
96654: LIST
96655: LIST
96656: PUSH
96657: LD_INT 21
96659: PUSH
96660: LD_INT 3
96662: PUSH
96663: EMPTY
96664: LIST
96665: LIST
96666: PUSH
96667: EMPTY
96668: LIST
96669: LIST
96670: PPUSH
96671: CALL_OW 69
96675: ST_TO_ADDR
// if not tmp then
96676: LD_VAR 0 2
96680: NOT
96681: IFFALSE 96685
// exit ;
96683: GO 96714
// for i in tmp do
96685: LD_ADDR_VAR 0 1
96689: PUSH
96690: LD_VAR 0 2
96694: PUSH
96695: FOR_IN
96696: IFFALSE 96712
// SetBLevel ( i , 10 ) ;
96698: LD_VAR 0 1
96702: PPUSH
96703: LD_INT 10
96705: PPUSH
96706: CALL_OW 241
96710: GO 96695
96712: POP
96713: POP
// end ;
96714: PPOPN 2
96716: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
96717: LD_EXP 94
96721: PUSH
96722: LD_EXP 111
96726: AND
96727: IFFALSE 96838
96729: GO 96731
96731: DISABLE
96732: LD_INT 0
96734: PPUSH
96735: PPUSH
96736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96737: LD_ADDR_VAR 0 3
96741: PUSH
96742: LD_INT 22
96744: PUSH
96745: LD_OWVAR 2
96749: PUSH
96750: EMPTY
96751: LIST
96752: LIST
96753: PUSH
96754: LD_INT 25
96756: PUSH
96757: LD_INT 1
96759: PUSH
96760: EMPTY
96761: LIST
96762: LIST
96763: PUSH
96764: EMPTY
96765: LIST
96766: LIST
96767: PPUSH
96768: CALL_OW 69
96772: ST_TO_ADDR
// if not tmp then
96773: LD_VAR 0 3
96777: NOT
96778: IFFALSE 96782
// exit ;
96780: GO 96838
// un := tmp [ rand ( 1 , tmp ) ] ;
96782: LD_ADDR_VAR 0 2
96786: PUSH
96787: LD_VAR 0 3
96791: PUSH
96792: LD_INT 1
96794: PPUSH
96795: LD_VAR 0 3
96799: PPUSH
96800: CALL_OW 12
96804: ARRAY
96805: ST_TO_ADDR
// if Crawls ( un ) then
96806: LD_VAR 0 2
96810: PPUSH
96811: CALL_OW 318
96815: IFFALSE 96826
// ComWalk ( un ) ;
96817: LD_VAR 0 2
96821: PPUSH
96822: CALL_OW 138
// SetClass ( un , class_sniper ) ;
96826: LD_VAR 0 2
96830: PPUSH
96831: LD_INT 5
96833: PPUSH
96834: CALL_OW 336
// end ;
96838: PPOPN 3
96840: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
96841: LD_EXP 94
96845: PUSH
96846: LD_EXP 112
96850: AND
96851: PUSH
96852: LD_OWVAR 67
96856: PUSH
96857: LD_INT 4
96859: LESS
96860: AND
96861: IFFALSE 96880
96863: GO 96865
96865: DISABLE
// begin Difficulty := Difficulty + 1 ;
96866: LD_ADDR_OWVAR 67
96870: PUSH
96871: LD_OWVAR 67
96875: PUSH
96876: LD_INT 1
96878: PLUS
96879: ST_TO_ADDR
// end ;
96880: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
96881: LD_EXP 94
96885: PUSH
96886: LD_EXP 113
96890: AND
96891: IFFALSE 96994
96893: GO 96895
96895: DISABLE
96896: LD_INT 0
96898: PPUSH
// begin for i := 1 to 5 do
96899: LD_ADDR_VAR 0 1
96903: PUSH
96904: DOUBLE
96905: LD_INT 1
96907: DEC
96908: ST_TO_ADDR
96909: LD_INT 5
96911: PUSH
96912: FOR_TO
96913: IFFALSE 96992
// begin uc_nation := nation_nature ;
96915: LD_ADDR_OWVAR 21
96919: PUSH
96920: LD_INT 0
96922: ST_TO_ADDR
// uc_side := 0 ;
96923: LD_ADDR_OWVAR 20
96927: PUSH
96928: LD_INT 0
96930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
96931: LD_ADDR_OWVAR 29
96935: PUSH
96936: LD_INT 12
96938: PUSH
96939: LD_INT 12
96941: PUSH
96942: EMPTY
96943: LIST
96944: LIST
96945: ST_TO_ADDR
// hc_agressivity := 20 ;
96946: LD_ADDR_OWVAR 35
96950: PUSH
96951: LD_INT 20
96953: ST_TO_ADDR
// hc_class := class_tiger ;
96954: LD_ADDR_OWVAR 28
96958: PUSH
96959: LD_INT 14
96961: ST_TO_ADDR
// hc_gallery :=  ;
96962: LD_ADDR_OWVAR 33
96966: PUSH
96967: LD_STRING 
96969: ST_TO_ADDR
// hc_name :=  ;
96970: LD_ADDR_OWVAR 26
96974: PUSH
96975: LD_STRING 
96977: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
96978: CALL_OW 44
96982: PPUSH
96983: LD_INT 0
96985: PPUSH
96986: CALL_OW 51
// end ;
96990: GO 96912
96992: POP
96993: POP
// end ;
96994: PPOPN 1
96996: END
// every 0 0$1 trigger StreamModeActive and sBomb do
96997: LD_EXP 94
97001: PUSH
97002: LD_EXP 114
97006: AND
97007: IFFALSE 97016
97009: GO 97011
97011: DISABLE
// StreamSibBomb ;
97012: CALL 97017 0 0
97016: END
// export function StreamSibBomb ; var i , x , y ; begin
97017: LD_INT 0
97019: PPUSH
97020: PPUSH
97021: PPUSH
97022: PPUSH
// result := false ;
97023: LD_ADDR_VAR 0 1
97027: PUSH
97028: LD_INT 0
97030: ST_TO_ADDR
// for i := 1 to 16 do
97031: LD_ADDR_VAR 0 2
97035: PUSH
97036: DOUBLE
97037: LD_INT 1
97039: DEC
97040: ST_TO_ADDR
97041: LD_INT 16
97043: PUSH
97044: FOR_TO
97045: IFFALSE 97244
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97047: LD_ADDR_VAR 0 3
97051: PUSH
97052: LD_INT 10
97054: PUSH
97055: LD_INT 20
97057: PUSH
97058: LD_INT 30
97060: PUSH
97061: LD_INT 40
97063: PUSH
97064: LD_INT 50
97066: PUSH
97067: LD_INT 60
97069: PUSH
97070: LD_INT 70
97072: PUSH
97073: LD_INT 80
97075: PUSH
97076: LD_INT 90
97078: PUSH
97079: LD_INT 100
97081: PUSH
97082: LD_INT 110
97084: PUSH
97085: LD_INT 120
97087: PUSH
97088: LD_INT 130
97090: PUSH
97091: LD_INT 140
97093: PUSH
97094: LD_INT 150
97096: PUSH
97097: EMPTY
97098: LIST
97099: LIST
97100: LIST
97101: LIST
97102: LIST
97103: LIST
97104: LIST
97105: LIST
97106: LIST
97107: LIST
97108: LIST
97109: LIST
97110: LIST
97111: LIST
97112: LIST
97113: PUSH
97114: LD_INT 1
97116: PPUSH
97117: LD_INT 15
97119: PPUSH
97120: CALL_OW 12
97124: ARRAY
97125: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97126: LD_ADDR_VAR 0 4
97130: PUSH
97131: LD_INT 10
97133: PUSH
97134: LD_INT 20
97136: PUSH
97137: LD_INT 30
97139: PUSH
97140: LD_INT 40
97142: PUSH
97143: LD_INT 50
97145: PUSH
97146: LD_INT 60
97148: PUSH
97149: LD_INT 70
97151: PUSH
97152: LD_INT 80
97154: PUSH
97155: LD_INT 90
97157: PUSH
97158: LD_INT 100
97160: PUSH
97161: LD_INT 110
97163: PUSH
97164: LD_INT 120
97166: PUSH
97167: LD_INT 130
97169: PUSH
97170: LD_INT 140
97172: PUSH
97173: LD_INT 150
97175: PUSH
97176: EMPTY
97177: LIST
97178: LIST
97179: LIST
97180: LIST
97181: LIST
97182: LIST
97183: LIST
97184: LIST
97185: LIST
97186: LIST
97187: LIST
97188: LIST
97189: LIST
97190: LIST
97191: LIST
97192: PUSH
97193: LD_INT 1
97195: PPUSH
97196: LD_INT 15
97198: PPUSH
97199: CALL_OW 12
97203: ARRAY
97204: ST_TO_ADDR
// if ValidHex ( x , y ) then
97205: LD_VAR 0 3
97209: PPUSH
97210: LD_VAR 0 4
97214: PPUSH
97215: CALL_OW 488
97219: IFFALSE 97242
// begin result := [ x , y ] ;
97221: LD_ADDR_VAR 0 1
97225: PUSH
97226: LD_VAR 0 3
97230: PUSH
97231: LD_VAR 0 4
97235: PUSH
97236: EMPTY
97237: LIST
97238: LIST
97239: ST_TO_ADDR
// break ;
97240: GO 97244
// end ; end ;
97242: GO 97044
97244: POP
97245: POP
// if result then
97246: LD_VAR 0 1
97250: IFFALSE 97310
// begin ToLua ( playSibBomb() ) ;
97252: LD_STRING playSibBomb()
97254: PPUSH
97255: CALL_OW 559
// wait ( 0 0$14 ) ;
97259: LD_INT 490
97261: PPUSH
97262: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
97266: LD_VAR 0 1
97270: PUSH
97271: LD_INT 1
97273: ARRAY
97274: PPUSH
97275: LD_VAR 0 1
97279: PUSH
97280: LD_INT 2
97282: ARRAY
97283: PPUSH
97284: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
97288: LD_VAR 0 1
97292: PUSH
97293: LD_INT 1
97295: ARRAY
97296: PPUSH
97297: LD_VAR 0 1
97301: PUSH
97302: LD_INT 2
97304: ARRAY
97305: PPUSH
97306: CALL_OW 429
// end ; end ;
97310: LD_VAR 0 1
97314: RET
// every 0 0$1 trigger StreamModeActive and sReset do
97315: LD_EXP 94
97319: PUSH
97320: LD_EXP 116
97324: AND
97325: IFFALSE 97337
97327: GO 97329
97329: DISABLE
// YouLost (  ) ;
97330: LD_STRING 
97332: PPUSH
97333: CALL_OW 104
97337: END
// every 0 0$1 trigger StreamModeActive and sFog do
97338: LD_EXP 94
97342: PUSH
97343: LD_EXP 115
97347: AND
97348: IFFALSE 97362
97350: GO 97352
97352: DISABLE
// FogOff ( your_side ) ;
97353: LD_OWVAR 2
97357: PPUSH
97358: CALL_OW 344
97362: END
// every 0 0$1 trigger StreamModeActive and sSun do
97363: LD_EXP 94
97367: PUSH
97368: LD_EXP 117
97372: AND
97373: IFFALSE 97401
97375: GO 97377
97377: DISABLE
// begin solar_recharge_percent := 0 ;
97378: LD_ADDR_OWVAR 79
97382: PUSH
97383: LD_INT 0
97385: ST_TO_ADDR
// wait ( 5 5$00 ) ;
97386: LD_INT 10500
97388: PPUSH
97389: CALL_OW 67
// solar_recharge_percent := 100 ;
97393: LD_ADDR_OWVAR 79
97397: PUSH
97398: LD_INT 100
97400: ST_TO_ADDR
// end ;
97401: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
97402: LD_EXP 94
97406: PUSH
97407: LD_EXP 118
97411: AND
97412: IFFALSE 97651
97414: GO 97416
97416: DISABLE
97417: LD_INT 0
97419: PPUSH
97420: PPUSH
97421: PPUSH
// begin tmp := [ ] ;
97422: LD_ADDR_VAR 0 3
97426: PUSH
97427: EMPTY
97428: ST_TO_ADDR
// for i := 1 to 6 do
97429: LD_ADDR_VAR 0 1
97433: PUSH
97434: DOUBLE
97435: LD_INT 1
97437: DEC
97438: ST_TO_ADDR
97439: LD_INT 6
97441: PUSH
97442: FOR_TO
97443: IFFALSE 97548
// begin uc_nation := nation_nature ;
97445: LD_ADDR_OWVAR 21
97449: PUSH
97450: LD_INT 0
97452: ST_TO_ADDR
// uc_side := 0 ;
97453: LD_ADDR_OWVAR 20
97457: PUSH
97458: LD_INT 0
97460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97461: LD_ADDR_OWVAR 29
97465: PUSH
97466: LD_INT 12
97468: PUSH
97469: LD_INT 12
97471: PUSH
97472: EMPTY
97473: LIST
97474: LIST
97475: ST_TO_ADDR
// hc_agressivity := 20 ;
97476: LD_ADDR_OWVAR 35
97480: PUSH
97481: LD_INT 20
97483: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
97484: LD_ADDR_OWVAR 28
97488: PUSH
97489: LD_INT 17
97491: ST_TO_ADDR
// hc_gallery :=  ;
97492: LD_ADDR_OWVAR 33
97496: PUSH
97497: LD_STRING 
97499: ST_TO_ADDR
// hc_name :=  ;
97500: LD_ADDR_OWVAR 26
97504: PUSH
97505: LD_STRING 
97507: ST_TO_ADDR
// un := CreateHuman ;
97508: LD_ADDR_VAR 0 2
97512: PUSH
97513: CALL_OW 44
97517: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
97518: LD_VAR 0 2
97522: PPUSH
97523: LD_INT 1
97525: PPUSH
97526: CALL_OW 51
// tmp := tmp ^ un ;
97530: LD_ADDR_VAR 0 3
97534: PUSH
97535: LD_VAR 0 3
97539: PUSH
97540: LD_VAR 0 2
97544: ADD
97545: ST_TO_ADDR
// end ;
97546: GO 97442
97548: POP
97549: POP
// repeat wait ( 0 0$1 ) ;
97550: LD_INT 35
97552: PPUSH
97553: CALL_OW 67
// for un in tmp do
97557: LD_ADDR_VAR 0 2
97561: PUSH
97562: LD_VAR 0 3
97566: PUSH
97567: FOR_IN
97568: IFFALSE 97642
// begin if IsDead ( un ) then
97570: LD_VAR 0 2
97574: PPUSH
97575: CALL_OW 301
97579: IFFALSE 97599
// begin tmp := tmp diff un ;
97581: LD_ADDR_VAR 0 3
97585: PUSH
97586: LD_VAR 0 3
97590: PUSH
97591: LD_VAR 0 2
97595: DIFF
97596: ST_TO_ADDR
// continue ;
97597: GO 97567
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
97599: LD_VAR 0 2
97603: PPUSH
97604: LD_INT 3
97606: PUSH
97607: LD_INT 22
97609: PUSH
97610: LD_INT 0
97612: PUSH
97613: EMPTY
97614: LIST
97615: LIST
97616: PUSH
97617: EMPTY
97618: LIST
97619: LIST
97620: PPUSH
97621: CALL_OW 69
97625: PPUSH
97626: LD_VAR 0 2
97630: PPUSH
97631: CALL_OW 74
97635: PPUSH
97636: CALL_OW 115
// end ;
97640: GO 97567
97642: POP
97643: POP
// until not tmp ;
97644: LD_VAR 0 3
97648: NOT
97649: IFFALSE 97550
// end ;
97651: PPOPN 3
97653: END
// every 0 0$1 trigger StreamModeActive and sTroll do
97654: LD_EXP 94
97658: PUSH
97659: LD_EXP 119
97663: AND
97664: IFFALSE 97718
97666: GO 97668
97668: DISABLE
// begin ToLua ( displayTroll(); ) ;
97669: LD_STRING displayTroll();
97671: PPUSH
97672: CALL_OW 559
// wait ( 3 3$00 ) ;
97676: LD_INT 6300
97678: PPUSH
97679: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97683: LD_STRING hideTroll();
97685: PPUSH
97686: CALL_OW 559
// wait ( 1 1$00 ) ;
97690: LD_INT 2100
97692: PPUSH
97693: CALL_OW 67
// ToLua ( displayTroll(); ) ;
97697: LD_STRING displayTroll();
97699: PPUSH
97700: CALL_OW 559
// wait ( 1 1$00 ) ;
97704: LD_INT 2100
97706: PPUSH
97707: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97711: LD_STRING hideTroll();
97713: PPUSH
97714: CALL_OW 559
// end ;
97718: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
97719: LD_EXP 94
97723: PUSH
97724: LD_EXP 120
97728: AND
97729: IFFALSE 97792
97731: GO 97733
97733: DISABLE
97734: LD_INT 0
97736: PPUSH
// begin p := 0 ;
97737: LD_ADDR_VAR 0 1
97741: PUSH
97742: LD_INT 0
97744: ST_TO_ADDR
// repeat game_speed := 1 ;
97745: LD_ADDR_OWVAR 65
97749: PUSH
97750: LD_INT 1
97752: ST_TO_ADDR
// wait ( 0 0$1 ) ;
97753: LD_INT 35
97755: PPUSH
97756: CALL_OW 67
// p := p + 1 ;
97760: LD_ADDR_VAR 0 1
97764: PUSH
97765: LD_VAR 0 1
97769: PUSH
97770: LD_INT 1
97772: PLUS
97773: ST_TO_ADDR
// until p >= 60 ;
97774: LD_VAR 0 1
97778: PUSH
97779: LD_INT 60
97781: GREATEREQUAL
97782: IFFALSE 97745
// game_speed := 4 ;
97784: LD_ADDR_OWVAR 65
97788: PUSH
97789: LD_INT 4
97791: ST_TO_ADDR
// end ;
97792: PPOPN 1
97794: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
97795: LD_EXP 94
97799: PUSH
97800: LD_EXP 121
97804: AND
97805: IFFALSE 97951
97807: GO 97809
97809: DISABLE
97810: LD_INT 0
97812: PPUSH
97813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97814: LD_ADDR_VAR 0 1
97818: PUSH
97819: LD_INT 22
97821: PUSH
97822: LD_OWVAR 2
97826: PUSH
97827: EMPTY
97828: LIST
97829: LIST
97830: PUSH
97831: LD_INT 2
97833: PUSH
97834: LD_INT 30
97836: PUSH
97837: LD_INT 0
97839: PUSH
97840: EMPTY
97841: LIST
97842: LIST
97843: PUSH
97844: LD_INT 30
97846: PUSH
97847: LD_INT 1
97849: PUSH
97850: EMPTY
97851: LIST
97852: LIST
97853: PUSH
97854: EMPTY
97855: LIST
97856: LIST
97857: LIST
97858: PUSH
97859: EMPTY
97860: LIST
97861: LIST
97862: PPUSH
97863: CALL_OW 69
97867: ST_TO_ADDR
// if not depot then
97868: LD_VAR 0 1
97872: NOT
97873: IFFALSE 97877
// exit ;
97875: GO 97951
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
97877: LD_ADDR_VAR 0 2
97881: PUSH
97882: LD_VAR 0 1
97886: PUSH
97887: LD_INT 1
97889: PPUSH
97890: LD_VAR 0 1
97894: PPUSH
97895: CALL_OW 12
97899: ARRAY
97900: PPUSH
97901: CALL_OW 274
97905: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
97906: LD_VAR 0 2
97910: PPUSH
97911: LD_INT 1
97913: PPUSH
97914: LD_INT 0
97916: PPUSH
97917: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
97921: LD_VAR 0 2
97925: PPUSH
97926: LD_INT 2
97928: PPUSH
97929: LD_INT 0
97931: PPUSH
97932: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
97936: LD_VAR 0 2
97940: PPUSH
97941: LD_INT 3
97943: PPUSH
97944: LD_INT 0
97946: PPUSH
97947: CALL_OW 277
// end ;
97951: PPOPN 2
97953: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
97954: LD_EXP 94
97958: PUSH
97959: LD_EXP 122
97963: AND
97964: IFFALSE 98061
97966: GO 97968
97968: DISABLE
97969: LD_INT 0
97971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97972: LD_ADDR_VAR 0 1
97976: PUSH
97977: LD_INT 22
97979: PUSH
97980: LD_OWVAR 2
97984: PUSH
97985: EMPTY
97986: LIST
97987: LIST
97988: PUSH
97989: LD_INT 21
97991: PUSH
97992: LD_INT 1
97994: PUSH
97995: EMPTY
97996: LIST
97997: LIST
97998: PUSH
97999: LD_INT 3
98001: PUSH
98002: LD_INT 23
98004: PUSH
98005: LD_INT 0
98007: PUSH
98008: EMPTY
98009: LIST
98010: LIST
98011: PUSH
98012: EMPTY
98013: LIST
98014: LIST
98015: PUSH
98016: EMPTY
98017: LIST
98018: LIST
98019: LIST
98020: PPUSH
98021: CALL_OW 69
98025: ST_TO_ADDR
// if not tmp then
98026: LD_VAR 0 1
98030: NOT
98031: IFFALSE 98035
// exit ;
98033: GO 98061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
98035: LD_VAR 0 1
98039: PUSH
98040: LD_INT 1
98042: PPUSH
98043: LD_VAR 0 1
98047: PPUSH
98048: CALL_OW 12
98052: ARRAY
98053: PPUSH
98054: LD_INT 200
98056: PPUSH
98057: CALL_OW 234
// end ;
98061: PPOPN 1
98063: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
98064: LD_EXP 94
98068: PUSH
98069: LD_EXP 123
98073: AND
98074: IFFALSE 98153
98076: GO 98078
98078: DISABLE
98079: LD_INT 0
98081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
98082: LD_ADDR_VAR 0 1
98086: PUSH
98087: LD_INT 22
98089: PUSH
98090: LD_OWVAR 2
98094: PUSH
98095: EMPTY
98096: LIST
98097: LIST
98098: PUSH
98099: LD_INT 21
98101: PUSH
98102: LD_INT 2
98104: PUSH
98105: EMPTY
98106: LIST
98107: LIST
98108: PUSH
98109: EMPTY
98110: LIST
98111: LIST
98112: PPUSH
98113: CALL_OW 69
98117: ST_TO_ADDR
// if not tmp then
98118: LD_VAR 0 1
98122: NOT
98123: IFFALSE 98127
// exit ;
98125: GO 98153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
98127: LD_VAR 0 1
98131: PUSH
98132: LD_INT 1
98134: PPUSH
98135: LD_VAR 0 1
98139: PPUSH
98140: CALL_OW 12
98144: ARRAY
98145: PPUSH
98146: LD_INT 60
98148: PPUSH
98149: CALL_OW 234
// end ;
98153: PPOPN 1
98155: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
98156: LD_EXP 94
98160: PUSH
98161: LD_EXP 124
98165: AND
98166: IFFALSE 98265
98168: GO 98170
98170: DISABLE
98171: LD_INT 0
98173: PPUSH
98174: PPUSH
// begin enable ;
98175: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
98176: LD_ADDR_VAR 0 1
98180: PUSH
98181: LD_INT 22
98183: PUSH
98184: LD_OWVAR 2
98188: PUSH
98189: EMPTY
98190: LIST
98191: LIST
98192: PUSH
98193: LD_INT 61
98195: PUSH
98196: EMPTY
98197: LIST
98198: PUSH
98199: LD_INT 33
98201: PUSH
98202: LD_INT 2
98204: PUSH
98205: EMPTY
98206: LIST
98207: LIST
98208: PUSH
98209: EMPTY
98210: LIST
98211: LIST
98212: LIST
98213: PPUSH
98214: CALL_OW 69
98218: ST_TO_ADDR
// if not tmp then
98219: LD_VAR 0 1
98223: NOT
98224: IFFALSE 98228
// exit ;
98226: GO 98265
// for i in tmp do
98228: LD_ADDR_VAR 0 2
98232: PUSH
98233: LD_VAR 0 1
98237: PUSH
98238: FOR_IN
98239: IFFALSE 98263
// if IsControledBy ( i ) then
98241: LD_VAR 0 2
98245: PPUSH
98246: CALL_OW 312
98250: IFFALSE 98261
// ComUnlink ( i ) ;
98252: LD_VAR 0 2
98256: PPUSH
98257: CALL_OW 136
98261: GO 98238
98263: POP
98264: POP
// end ;
98265: PPOPN 2
98267: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
98268: LD_EXP 94
98272: PUSH
98273: LD_EXP 125
98277: AND
98278: IFFALSE 98418
98280: GO 98282
98282: DISABLE
98283: LD_INT 0
98285: PPUSH
98286: PPUSH
// begin ToLua ( displayPowell(); ) ;
98287: LD_STRING displayPowell();
98289: PPUSH
98290: CALL_OW 559
// uc_side := 0 ;
98294: LD_ADDR_OWVAR 20
98298: PUSH
98299: LD_INT 0
98301: ST_TO_ADDR
// uc_nation := 2 ;
98302: LD_ADDR_OWVAR 21
98306: PUSH
98307: LD_INT 2
98309: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
98310: LD_ADDR_OWVAR 37
98314: PUSH
98315: LD_INT 14
98317: ST_TO_ADDR
// vc_engine := engine_siberite ;
98318: LD_ADDR_OWVAR 39
98322: PUSH
98323: LD_INT 3
98325: ST_TO_ADDR
// vc_control := control_apeman ;
98326: LD_ADDR_OWVAR 38
98330: PUSH
98331: LD_INT 5
98333: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
98334: LD_ADDR_OWVAR 40
98338: PUSH
98339: LD_INT 29
98341: ST_TO_ADDR
// un := CreateVehicle ;
98342: LD_ADDR_VAR 0 2
98346: PUSH
98347: CALL_OW 45
98351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98352: LD_VAR 0 2
98356: PPUSH
98357: LD_INT 1
98359: PPUSH
98360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98364: LD_INT 35
98366: PPUSH
98367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98371: LD_VAR 0 2
98375: PPUSH
98376: LD_INT 22
98378: PUSH
98379: LD_OWVAR 2
98383: PUSH
98384: EMPTY
98385: LIST
98386: LIST
98387: PPUSH
98388: CALL_OW 69
98392: PPUSH
98393: LD_VAR 0 2
98397: PPUSH
98398: CALL_OW 74
98402: PPUSH
98403: CALL_OW 115
// until IsDead ( un ) ;
98407: LD_VAR 0 2
98411: PPUSH
98412: CALL_OW 301
98416: IFFALSE 98364
// end ;
98418: PPOPN 2
98420: END
// every 0 0$1 trigger StreamModeActive and sStu do
98421: LD_EXP 94
98425: PUSH
98426: LD_EXP 133
98430: AND
98431: IFFALSE 98447
98433: GO 98435
98435: DISABLE
// begin ToLua ( displayStucuk(); ) ;
98436: LD_STRING displayStucuk();
98438: PPUSH
98439: CALL_OW 559
// ResetFog ;
98443: CALL_OW 335
// end ;
98447: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
98448: LD_EXP 94
98452: PUSH
98453: LD_EXP 126
98457: AND
98458: IFFALSE 98599
98460: GO 98462
98462: DISABLE
98463: LD_INT 0
98465: PPUSH
98466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98467: LD_ADDR_VAR 0 2
98471: PUSH
98472: LD_INT 22
98474: PUSH
98475: LD_OWVAR 2
98479: PUSH
98480: EMPTY
98481: LIST
98482: LIST
98483: PUSH
98484: LD_INT 21
98486: PUSH
98487: LD_INT 1
98489: PUSH
98490: EMPTY
98491: LIST
98492: LIST
98493: PUSH
98494: EMPTY
98495: LIST
98496: LIST
98497: PPUSH
98498: CALL_OW 69
98502: ST_TO_ADDR
// if not tmp then
98503: LD_VAR 0 2
98507: NOT
98508: IFFALSE 98512
// exit ;
98510: GO 98599
// un := tmp [ rand ( 1 , tmp ) ] ;
98512: LD_ADDR_VAR 0 1
98516: PUSH
98517: LD_VAR 0 2
98521: PUSH
98522: LD_INT 1
98524: PPUSH
98525: LD_VAR 0 2
98529: PPUSH
98530: CALL_OW 12
98534: ARRAY
98535: ST_TO_ADDR
// SetSide ( un , 0 ) ;
98536: LD_VAR 0 1
98540: PPUSH
98541: LD_INT 0
98543: PPUSH
98544: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
98548: LD_VAR 0 1
98552: PPUSH
98553: LD_OWVAR 3
98557: PUSH
98558: LD_VAR 0 1
98562: DIFF
98563: PPUSH
98564: LD_VAR 0 1
98568: PPUSH
98569: CALL_OW 74
98573: PPUSH
98574: CALL_OW 115
// wait ( 0 0$20 ) ;
98578: LD_INT 700
98580: PPUSH
98581: CALL_OW 67
// SetSide ( un , your_side ) ;
98585: LD_VAR 0 1
98589: PPUSH
98590: LD_OWVAR 2
98594: PPUSH
98595: CALL_OW 235
// end ;
98599: PPOPN 2
98601: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
98602: LD_EXP 94
98606: PUSH
98607: LD_EXP 127
98611: AND
98612: IFFALSE 98718
98614: GO 98616
98616: DISABLE
98617: LD_INT 0
98619: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98620: LD_ADDR_VAR 0 1
98624: PUSH
98625: LD_INT 22
98627: PUSH
98628: LD_OWVAR 2
98632: PUSH
98633: EMPTY
98634: LIST
98635: LIST
98636: PUSH
98637: LD_INT 2
98639: PUSH
98640: LD_INT 30
98642: PUSH
98643: LD_INT 0
98645: PUSH
98646: EMPTY
98647: LIST
98648: LIST
98649: PUSH
98650: LD_INT 30
98652: PUSH
98653: LD_INT 1
98655: PUSH
98656: EMPTY
98657: LIST
98658: LIST
98659: PUSH
98660: EMPTY
98661: LIST
98662: LIST
98663: LIST
98664: PUSH
98665: EMPTY
98666: LIST
98667: LIST
98668: PPUSH
98669: CALL_OW 69
98673: ST_TO_ADDR
// if not depot then
98674: LD_VAR 0 1
98678: NOT
98679: IFFALSE 98683
// exit ;
98681: GO 98718
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
98683: LD_VAR 0 1
98687: PUSH
98688: LD_INT 1
98690: ARRAY
98691: PPUSH
98692: CALL_OW 250
98696: PPUSH
98697: LD_VAR 0 1
98701: PUSH
98702: LD_INT 1
98704: ARRAY
98705: PPUSH
98706: CALL_OW 251
98710: PPUSH
98711: LD_INT 70
98713: PPUSH
98714: CALL_OW 495
// end ;
98718: PPOPN 1
98720: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
98721: LD_EXP 94
98725: PUSH
98726: LD_EXP 128
98730: AND
98731: IFFALSE 98942
98733: GO 98735
98735: DISABLE
98736: LD_INT 0
98738: PPUSH
98739: PPUSH
98740: PPUSH
98741: PPUSH
98742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98743: LD_ADDR_VAR 0 5
98747: PUSH
98748: LD_INT 22
98750: PUSH
98751: LD_OWVAR 2
98755: PUSH
98756: EMPTY
98757: LIST
98758: LIST
98759: PUSH
98760: LD_INT 21
98762: PUSH
98763: LD_INT 1
98765: PUSH
98766: EMPTY
98767: LIST
98768: LIST
98769: PUSH
98770: EMPTY
98771: LIST
98772: LIST
98773: PPUSH
98774: CALL_OW 69
98778: ST_TO_ADDR
// if not tmp then
98779: LD_VAR 0 5
98783: NOT
98784: IFFALSE 98788
// exit ;
98786: GO 98942
// for i in tmp do
98788: LD_ADDR_VAR 0 1
98792: PUSH
98793: LD_VAR 0 5
98797: PUSH
98798: FOR_IN
98799: IFFALSE 98940
// begin d := rand ( 0 , 5 ) ;
98801: LD_ADDR_VAR 0 4
98805: PUSH
98806: LD_INT 0
98808: PPUSH
98809: LD_INT 5
98811: PPUSH
98812: CALL_OW 12
98816: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
98817: LD_ADDR_VAR 0 2
98821: PUSH
98822: LD_VAR 0 1
98826: PPUSH
98827: CALL_OW 250
98831: PPUSH
98832: LD_VAR 0 4
98836: PPUSH
98837: LD_INT 3
98839: PPUSH
98840: LD_INT 12
98842: PPUSH
98843: CALL_OW 12
98847: PPUSH
98848: CALL_OW 272
98852: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
98853: LD_ADDR_VAR 0 3
98857: PUSH
98858: LD_VAR 0 1
98862: PPUSH
98863: CALL_OW 251
98867: PPUSH
98868: LD_VAR 0 4
98872: PPUSH
98873: LD_INT 3
98875: PPUSH
98876: LD_INT 12
98878: PPUSH
98879: CALL_OW 12
98883: PPUSH
98884: CALL_OW 273
98888: ST_TO_ADDR
// if ValidHex ( x , y ) then
98889: LD_VAR 0 2
98893: PPUSH
98894: LD_VAR 0 3
98898: PPUSH
98899: CALL_OW 488
98903: IFFALSE 98938
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
98905: LD_VAR 0 1
98909: PPUSH
98910: LD_VAR 0 2
98914: PPUSH
98915: LD_VAR 0 3
98919: PPUSH
98920: LD_INT 3
98922: PPUSH
98923: LD_INT 6
98925: PPUSH
98926: CALL_OW 12
98930: PPUSH
98931: LD_INT 1
98933: PPUSH
98934: CALL_OW 483
// end ;
98938: GO 98798
98940: POP
98941: POP
// end ;
98942: PPOPN 5
98944: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
98945: LD_EXP 94
98949: PUSH
98950: LD_EXP 129
98954: AND
98955: IFFALSE 99049
98957: GO 98959
98959: DISABLE
98960: LD_INT 0
98962: PPUSH
98963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
98964: LD_ADDR_VAR 0 2
98968: PUSH
98969: LD_INT 22
98971: PUSH
98972: LD_OWVAR 2
98976: PUSH
98977: EMPTY
98978: LIST
98979: LIST
98980: PUSH
98981: LD_INT 32
98983: PUSH
98984: LD_INT 1
98986: PUSH
98987: EMPTY
98988: LIST
98989: LIST
98990: PUSH
98991: LD_INT 21
98993: PUSH
98994: LD_INT 2
98996: PUSH
98997: EMPTY
98998: LIST
98999: LIST
99000: PUSH
99001: EMPTY
99002: LIST
99003: LIST
99004: LIST
99005: PPUSH
99006: CALL_OW 69
99010: ST_TO_ADDR
// if not tmp then
99011: LD_VAR 0 2
99015: NOT
99016: IFFALSE 99020
// exit ;
99018: GO 99049
// for i in tmp do
99020: LD_ADDR_VAR 0 1
99024: PUSH
99025: LD_VAR 0 2
99029: PUSH
99030: FOR_IN
99031: IFFALSE 99047
// SetFuel ( i , 0 ) ;
99033: LD_VAR 0 1
99037: PPUSH
99038: LD_INT 0
99040: PPUSH
99041: CALL_OW 240
99045: GO 99030
99047: POP
99048: POP
// end ;
99049: PPOPN 2
99051: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
99052: LD_EXP 94
99056: PUSH
99057: LD_EXP 130
99061: AND
99062: IFFALSE 99128
99064: GO 99066
99066: DISABLE
99067: LD_INT 0
99069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99070: LD_ADDR_VAR 0 1
99074: PUSH
99075: LD_INT 22
99077: PUSH
99078: LD_OWVAR 2
99082: PUSH
99083: EMPTY
99084: LIST
99085: LIST
99086: PUSH
99087: LD_INT 30
99089: PUSH
99090: LD_INT 29
99092: PUSH
99093: EMPTY
99094: LIST
99095: LIST
99096: PUSH
99097: EMPTY
99098: LIST
99099: LIST
99100: PPUSH
99101: CALL_OW 69
99105: ST_TO_ADDR
// if not tmp then
99106: LD_VAR 0 1
99110: NOT
99111: IFFALSE 99115
// exit ;
99113: GO 99128
// DestroyUnit ( tmp [ 1 ] ) ;
99115: LD_VAR 0 1
99119: PUSH
99120: LD_INT 1
99122: ARRAY
99123: PPUSH
99124: CALL_OW 65
// end ;
99128: PPOPN 1
99130: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
99131: LD_EXP 94
99135: PUSH
99136: LD_EXP 132
99140: AND
99141: IFFALSE 99270
99143: GO 99145
99145: DISABLE
99146: LD_INT 0
99148: PPUSH
// begin uc_side := 0 ;
99149: LD_ADDR_OWVAR 20
99153: PUSH
99154: LD_INT 0
99156: ST_TO_ADDR
// uc_nation := nation_arabian ;
99157: LD_ADDR_OWVAR 21
99161: PUSH
99162: LD_INT 2
99164: ST_TO_ADDR
// hc_gallery :=  ;
99165: LD_ADDR_OWVAR 33
99169: PUSH
99170: LD_STRING 
99172: ST_TO_ADDR
// hc_name :=  ;
99173: LD_ADDR_OWVAR 26
99177: PUSH
99178: LD_STRING 
99180: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
99181: LD_INT 1
99183: PPUSH
99184: LD_INT 11
99186: PPUSH
99187: LD_INT 10
99189: PPUSH
99190: CALL_OW 380
// un := CreateHuman ;
99194: LD_ADDR_VAR 0 1
99198: PUSH
99199: CALL_OW 44
99203: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99204: LD_VAR 0 1
99208: PPUSH
99209: LD_INT 1
99211: PPUSH
99212: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
99216: LD_INT 35
99218: PPUSH
99219: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
99223: LD_VAR 0 1
99227: PPUSH
99228: LD_INT 22
99230: PUSH
99231: LD_OWVAR 2
99235: PUSH
99236: EMPTY
99237: LIST
99238: LIST
99239: PPUSH
99240: CALL_OW 69
99244: PPUSH
99245: LD_VAR 0 1
99249: PPUSH
99250: CALL_OW 74
99254: PPUSH
99255: CALL_OW 115
// until IsDead ( un ) ;
99259: LD_VAR 0 1
99263: PPUSH
99264: CALL_OW 301
99268: IFFALSE 99216
// end ;
99270: PPOPN 1
99272: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
99273: LD_EXP 94
99277: PUSH
99278: LD_EXP 134
99282: AND
99283: IFFALSE 99295
99285: GO 99287
99287: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
99288: LD_STRING earthquake(getX(game), 0, 32)
99290: PPUSH
99291: CALL_OW 559
99295: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
99296: LD_EXP 94
99300: PUSH
99301: LD_EXP 135
99305: AND
99306: IFFALSE 99397
99308: GO 99310
99310: DISABLE
99311: LD_INT 0
99313: PPUSH
// begin enable ;
99314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
99315: LD_ADDR_VAR 0 1
99319: PUSH
99320: LD_INT 22
99322: PUSH
99323: LD_OWVAR 2
99327: PUSH
99328: EMPTY
99329: LIST
99330: LIST
99331: PUSH
99332: LD_INT 21
99334: PUSH
99335: LD_INT 2
99337: PUSH
99338: EMPTY
99339: LIST
99340: LIST
99341: PUSH
99342: LD_INT 33
99344: PUSH
99345: LD_INT 3
99347: PUSH
99348: EMPTY
99349: LIST
99350: LIST
99351: PUSH
99352: EMPTY
99353: LIST
99354: LIST
99355: LIST
99356: PPUSH
99357: CALL_OW 69
99361: ST_TO_ADDR
// if not tmp then
99362: LD_VAR 0 1
99366: NOT
99367: IFFALSE 99371
// exit ;
99369: GO 99397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99371: LD_VAR 0 1
99375: PUSH
99376: LD_INT 1
99378: PPUSH
99379: LD_VAR 0 1
99383: PPUSH
99384: CALL_OW 12
99388: ARRAY
99389: PPUSH
99390: LD_INT 1
99392: PPUSH
99393: CALL_OW 234
// end ;
99397: PPOPN 1
99399: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
99400: LD_EXP 94
99404: PUSH
99405: LD_EXP 136
99409: AND
99410: IFFALSE 99551
99412: GO 99414
99414: DISABLE
99415: LD_INT 0
99417: PPUSH
99418: PPUSH
99419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99420: LD_ADDR_VAR 0 3
99424: PUSH
99425: LD_INT 22
99427: PUSH
99428: LD_OWVAR 2
99432: PUSH
99433: EMPTY
99434: LIST
99435: LIST
99436: PUSH
99437: LD_INT 25
99439: PUSH
99440: LD_INT 1
99442: PUSH
99443: EMPTY
99444: LIST
99445: LIST
99446: PUSH
99447: EMPTY
99448: LIST
99449: LIST
99450: PPUSH
99451: CALL_OW 69
99455: ST_TO_ADDR
// if not tmp then
99456: LD_VAR 0 3
99460: NOT
99461: IFFALSE 99465
// exit ;
99463: GO 99551
// un := tmp [ rand ( 1 , tmp ) ] ;
99465: LD_ADDR_VAR 0 2
99469: PUSH
99470: LD_VAR 0 3
99474: PUSH
99475: LD_INT 1
99477: PPUSH
99478: LD_VAR 0 3
99482: PPUSH
99483: CALL_OW 12
99487: ARRAY
99488: ST_TO_ADDR
// if Crawls ( un ) then
99489: LD_VAR 0 2
99493: PPUSH
99494: CALL_OW 318
99498: IFFALSE 99509
// ComWalk ( un ) ;
99500: LD_VAR 0 2
99504: PPUSH
99505: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
99509: LD_VAR 0 2
99513: PPUSH
99514: LD_INT 9
99516: PPUSH
99517: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
99521: LD_INT 28
99523: PPUSH
99524: LD_OWVAR 2
99528: PPUSH
99529: LD_INT 2
99531: PPUSH
99532: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
99536: LD_INT 29
99538: PPUSH
99539: LD_OWVAR 2
99543: PPUSH
99544: LD_INT 2
99546: PPUSH
99547: CALL_OW 322
// end ;
99551: PPOPN 3
99553: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
99554: LD_EXP 94
99558: PUSH
99559: LD_EXP 137
99563: AND
99564: IFFALSE 99675
99566: GO 99568
99568: DISABLE
99569: LD_INT 0
99571: PPUSH
99572: PPUSH
99573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99574: LD_ADDR_VAR 0 3
99578: PUSH
99579: LD_INT 22
99581: PUSH
99582: LD_OWVAR 2
99586: PUSH
99587: EMPTY
99588: LIST
99589: LIST
99590: PUSH
99591: LD_INT 25
99593: PUSH
99594: LD_INT 1
99596: PUSH
99597: EMPTY
99598: LIST
99599: LIST
99600: PUSH
99601: EMPTY
99602: LIST
99603: LIST
99604: PPUSH
99605: CALL_OW 69
99609: ST_TO_ADDR
// if not tmp then
99610: LD_VAR 0 3
99614: NOT
99615: IFFALSE 99619
// exit ;
99617: GO 99675
// un := tmp [ rand ( 1 , tmp ) ] ;
99619: LD_ADDR_VAR 0 2
99623: PUSH
99624: LD_VAR 0 3
99628: PUSH
99629: LD_INT 1
99631: PPUSH
99632: LD_VAR 0 3
99636: PPUSH
99637: CALL_OW 12
99641: ARRAY
99642: ST_TO_ADDR
// if Crawls ( un ) then
99643: LD_VAR 0 2
99647: PPUSH
99648: CALL_OW 318
99652: IFFALSE 99663
// ComWalk ( un ) ;
99654: LD_VAR 0 2
99658: PPUSH
99659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99663: LD_VAR 0 2
99667: PPUSH
99668: LD_INT 8
99670: PPUSH
99671: CALL_OW 336
// end ;
99675: PPOPN 3
99677: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
99678: LD_EXP 94
99682: PUSH
99683: LD_EXP 138
99687: AND
99688: IFFALSE 99832
99690: GO 99692
99692: DISABLE
99693: LD_INT 0
99695: PPUSH
99696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
99697: LD_ADDR_VAR 0 2
99701: PUSH
99702: LD_INT 22
99704: PUSH
99705: LD_OWVAR 2
99709: PUSH
99710: EMPTY
99711: LIST
99712: LIST
99713: PUSH
99714: LD_INT 21
99716: PUSH
99717: LD_INT 2
99719: PUSH
99720: EMPTY
99721: LIST
99722: LIST
99723: PUSH
99724: LD_INT 2
99726: PUSH
99727: LD_INT 34
99729: PUSH
99730: LD_INT 12
99732: PUSH
99733: EMPTY
99734: LIST
99735: LIST
99736: PUSH
99737: LD_INT 34
99739: PUSH
99740: LD_INT 51
99742: PUSH
99743: EMPTY
99744: LIST
99745: LIST
99746: PUSH
99747: LD_INT 34
99749: PUSH
99750: LD_INT 32
99752: PUSH
99753: EMPTY
99754: LIST
99755: LIST
99756: PUSH
99757: EMPTY
99758: LIST
99759: LIST
99760: LIST
99761: LIST
99762: PUSH
99763: EMPTY
99764: LIST
99765: LIST
99766: LIST
99767: PPUSH
99768: CALL_OW 69
99772: ST_TO_ADDR
// if not tmp then
99773: LD_VAR 0 2
99777: NOT
99778: IFFALSE 99782
// exit ;
99780: GO 99832
// for i in tmp do
99782: LD_ADDR_VAR 0 1
99786: PUSH
99787: LD_VAR 0 2
99791: PUSH
99792: FOR_IN
99793: IFFALSE 99830
// if GetCargo ( i , mat_artifact ) = 0 then
99795: LD_VAR 0 1
99799: PPUSH
99800: LD_INT 4
99802: PPUSH
99803: CALL_OW 289
99807: PUSH
99808: LD_INT 0
99810: EQUAL
99811: IFFALSE 99828
// SetCargo ( i , mat_siberit , 100 ) ;
99813: LD_VAR 0 1
99817: PPUSH
99818: LD_INT 3
99820: PPUSH
99821: LD_INT 100
99823: PPUSH
99824: CALL_OW 290
99828: GO 99792
99830: POP
99831: POP
// end ;
99832: PPOPN 2
99834: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
99835: LD_EXP 94
99839: PUSH
99840: LD_EXP 139
99844: AND
99845: IFFALSE 100028
99847: GO 99849
99849: DISABLE
99850: LD_INT 0
99852: PPUSH
99853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
99854: LD_ADDR_VAR 0 2
99858: PUSH
99859: LD_INT 22
99861: PUSH
99862: LD_OWVAR 2
99866: PUSH
99867: EMPTY
99868: LIST
99869: LIST
99870: PPUSH
99871: CALL_OW 69
99875: ST_TO_ADDR
// if not tmp then
99876: LD_VAR 0 2
99880: NOT
99881: IFFALSE 99885
// exit ;
99883: GO 100028
// for i := 1 to 2 do
99885: LD_ADDR_VAR 0 1
99889: PUSH
99890: DOUBLE
99891: LD_INT 1
99893: DEC
99894: ST_TO_ADDR
99895: LD_INT 2
99897: PUSH
99898: FOR_TO
99899: IFFALSE 100026
// begin uc_side := your_side ;
99901: LD_ADDR_OWVAR 20
99905: PUSH
99906: LD_OWVAR 2
99910: ST_TO_ADDR
// uc_nation := nation_american ;
99911: LD_ADDR_OWVAR 21
99915: PUSH
99916: LD_INT 1
99918: ST_TO_ADDR
// vc_chassis := us_morphling ;
99919: LD_ADDR_OWVAR 37
99923: PUSH
99924: LD_INT 5
99926: ST_TO_ADDR
// vc_engine := engine_siberite ;
99927: LD_ADDR_OWVAR 39
99931: PUSH
99932: LD_INT 3
99934: ST_TO_ADDR
// vc_control := control_computer ;
99935: LD_ADDR_OWVAR 38
99939: PUSH
99940: LD_INT 3
99942: ST_TO_ADDR
// vc_weapon := us_double_laser ;
99943: LD_ADDR_OWVAR 40
99947: PUSH
99948: LD_INT 10
99950: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
99951: LD_VAR 0 2
99955: PUSH
99956: LD_INT 1
99958: ARRAY
99959: PPUSH
99960: CALL_OW 310
99964: NOT
99965: IFFALSE 100012
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
99967: CALL_OW 45
99971: PPUSH
99972: LD_VAR 0 2
99976: PUSH
99977: LD_INT 1
99979: ARRAY
99980: PPUSH
99981: CALL_OW 250
99985: PPUSH
99986: LD_VAR 0 2
99990: PUSH
99991: LD_INT 1
99993: ARRAY
99994: PPUSH
99995: CALL_OW 251
99999: PPUSH
100000: LD_INT 12
100002: PPUSH
100003: LD_INT 1
100005: PPUSH
100006: CALL_OW 50
100010: GO 100024
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
100012: CALL_OW 45
100016: PPUSH
100017: LD_INT 1
100019: PPUSH
100020: CALL_OW 51
// end ;
100024: GO 99898
100026: POP
100027: POP
// end ;
100028: PPOPN 2
100030: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
100031: LD_EXP 94
100035: PUSH
100036: LD_EXP 140
100040: AND
100041: IFFALSE 100263
100043: GO 100045
100045: DISABLE
100046: LD_INT 0
100048: PPUSH
100049: PPUSH
100050: PPUSH
100051: PPUSH
100052: PPUSH
100053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100054: LD_ADDR_VAR 0 6
100058: PUSH
100059: LD_INT 22
100061: PUSH
100062: LD_OWVAR 2
100066: PUSH
100067: EMPTY
100068: LIST
100069: LIST
100070: PUSH
100071: LD_INT 21
100073: PUSH
100074: LD_INT 1
100076: PUSH
100077: EMPTY
100078: LIST
100079: LIST
100080: PUSH
100081: LD_INT 3
100083: PUSH
100084: LD_INT 23
100086: PUSH
100087: LD_INT 0
100089: PUSH
100090: EMPTY
100091: LIST
100092: LIST
100093: PUSH
100094: EMPTY
100095: LIST
100096: LIST
100097: PUSH
100098: EMPTY
100099: LIST
100100: LIST
100101: LIST
100102: PPUSH
100103: CALL_OW 69
100107: ST_TO_ADDR
// if not tmp then
100108: LD_VAR 0 6
100112: NOT
100113: IFFALSE 100117
// exit ;
100115: GO 100263
// s1 := rand ( 1 , 4 ) ;
100117: LD_ADDR_VAR 0 2
100121: PUSH
100122: LD_INT 1
100124: PPUSH
100125: LD_INT 4
100127: PPUSH
100128: CALL_OW 12
100132: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
100133: LD_ADDR_VAR 0 4
100137: PUSH
100138: LD_VAR 0 6
100142: PUSH
100143: LD_INT 1
100145: ARRAY
100146: PPUSH
100147: LD_VAR 0 2
100151: PPUSH
100152: CALL_OW 259
100156: ST_TO_ADDR
// if s1 = 1 then
100157: LD_VAR 0 2
100161: PUSH
100162: LD_INT 1
100164: EQUAL
100165: IFFALSE 100185
// s2 := rand ( 2 , 4 ) else
100167: LD_ADDR_VAR 0 3
100171: PUSH
100172: LD_INT 2
100174: PPUSH
100175: LD_INT 4
100177: PPUSH
100178: CALL_OW 12
100182: ST_TO_ADDR
100183: GO 100193
// s2 := 1 ;
100185: LD_ADDR_VAR 0 3
100189: PUSH
100190: LD_INT 1
100192: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
100193: LD_ADDR_VAR 0 5
100197: PUSH
100198: LD_VAR 0 6
100202: PUSH
100203: LD_INT 1
100205: ARRAY
100206: PPUSH
100207: LD_VAR 0 3
100211: PPUSH
100212: CALL_OW 259
100216: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
100217: LD_VAR 0 6
100221: PUSH
100222: LD_INT 1
100224: ARRAY
100225: PPUSH
100226: LD_VAR 0 2
100230: PPUSH
100231: LD_VAR 0 5
100235: PPUSH
100236: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
100240: LD_VAR 0 6
100244: PUSH
100245: LD_INT 1
100247: ARRAY
100248: PPUSH
100249: LD_VAR 0 3
100253: PPUSH
100254: LD_VAR 0 4
100258: PPUSH
100259: CALL_OW 237
// end ;
100263: PPOPN 6
100265: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
100266: LD_EXP 94
100270: PUSH
100271: LD_EXP 141
100275: AND
100276: IFFALSE 100355
100278: GO 100280
100280: DISABLE
100281: LD_INT 0
100283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
100284: LD_ADDR_VAR 0 1
100288: PUSH
100289: LD_INT 22
100291: PUSH
100292: LD_OWVAR 2
100296: PUSH
100297: EMPTY
100298: LIST
100299: LIST
100300: PUSH
100301: LD_INT 30
100303: PUSH
100304: LD_INT 3
100306: PUSH
100307: EMPTY
100308: LIST
100309: LIST
100310: PUSH
100311: EMPTY
100312: LIST
100313: LIST
100314: PPUSH
100315: CALL_OW 69
100319: ST_TO_ADDR
// if not tmp then
100320: LD_VAR 0 1
100324: NOT
100325: IFFALSE 100329
// exit ;
100327: GO 100355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
100329: LD_VAR 0 1
100333: PUSH
100334: LD_INT 1
100336: PPUSH
100337: LD_VAR 0 1
100341: PPUSH
100342: CALL_OW 12
100346: ARRAY
100347: PPUSH
100348: LD_INT 1
100350: PPUSH
100351: CALL_OW 234
// end ;
100355: PPOPN 1
100357: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
100358: LD_EXP 94
100362: PUSH
100363: LD_EXP 142
100367: AND
100368: IFFALSE 100480
100370: GO 100372
100372: DISABLE
100373: LD_INT 0
100375: PPUSH
100376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
100377: LD_ADDR_VAR 0 2
100381: PUSH
100382: LD_INT 22
100384: PUSH
100385: LD_OWVAR 2
100389: PUSH
100390: EMPTY
100391: LIST
100392: LIST
100393: PUSH
100394: LD_INT 2
100396: PUSH
100397: LD_INT 30
100399: PUSH
100400: LD_INT 27
100402: PUSH
100403: EMPTY
100404: LIST
100405: LIST
100406: PUSH
100407: LD_INT 30
100409: PUSH
100410: LD_INT 26
100412: PUSH
100413: EMPTY
100414: LIST
100415: LIST
100416: PUSH
100417: LD_INT 30
100419: PUSH
100420: LD_INT 28
100422: PUSH
100423: EMPTY
100424: LIST
100425: LIST
100426: PUSH
100427: EMPTY
100428: LIST
100429: LIST
100430: LIST
100431: LIST
100432: PUSH
100433: EMPTY
100434: LIST
100435: LIST
100436: PPUSH
100437: CALL_OW 69
100441: ST_TO_ADDR
// if not tmp then
100442: LD_VAR 0 2
100446: NOT
100447: IFFALSE 100451
// exit ;
100449: GO 100480
// for i in tmp do
100451: LD_ADDR_VAR 0 1
100455: PUSH
100456: LD_VAR 0 2
100460: PUSH
100461: FOR_IN
100462: IFFALSE 100478
// SetLives ( i , 1 ) ;
100464: LD_VAR 0 1
100468: PPUSH
100469: LD_INT 1
100471: PPUSH
100472: CALL_OW 234
100476: GO 100461
100478: POP
100479: POP
// end ;
100480: PPOPN 2
100482: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
100483: LD_EXP 94
100487: PUSH
100488: LD_EXP 143
100492: AND
100493: IFFALSE 100767
100495: GO 100497
100497: DISABLE
100498: LD_INT 0
100500: PPUSH
100501: PPUSH
100502: PPUSH
// begin i := rand ( 1 , 7 ) ;
100503: LD_ADDR_VAR 0 1
100507: PUSH
100508: LD_INT 1
100510: PPUSH
100511: LD_INT 7
100513: PPUSH
100514: CALL_OW 12
100518: ST_TO_ADDR
// case i of 1 :
100519: LD_VAR 0 1
100523: PUSH
100524: LD_INT 1
100526: DOUBLE
100527: EQUAL
100528: IFTRUE 100532
100530: GO 100542
100532: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
100533: LD_STRING earthquake(getX(game), 0, 32)
100535: PPUSH
100536: CALL_OW 559
100540: GO 100767
100542: LD_INT 2
100544: DOUBLE
100545: EQUAL
100546: IFTRUE 100550
100548: GO 100564
100550: POP
// begin ToLua ( displayStucuk(); ) ;
100551: LD_STRING displayStucuk();
100553: PPUSH
100554: CALL_OW 559
// ResetFog ;
100558: CALL_OW 335
// end ; 3 :
100562: GO 100767
100564: LD_INT 3
100566: DOUBLE
100567: EQUAL
100568: IFTRUE 100572
100570: GO 100676
100572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100573: LD_ADDR_VAR 0 2
100577: PUSH
100578: LD_INT 22
100580: PUSH
100581: LD_OWVAR 2
100585: PUSH
100586: EMPTY
100587: LIST
100588: LIST
100589: PUSH
100590: LD_INT 25
100592: PUSH
100593: LD_INT 1
100595: PUSH
100596: EMPTY
100597: LIST
100598: LIST
100599: PUSH
100600: EMPTY
100601: LIST
100602: LIST
100603: PPUSH
100604: CALL_OW 69
100608: ST_TO_ADDR
// if not tmp then
100609: LD_VAR 0 2
100613: NOT
100614: IFFALSE 100618
// exit ;
100616: GO 100767
// un := tmp [ rand ( 1 , tmp ) ] ;
100618: LD_ADDR_VAR 0 3
100622: PUSH
100623: LD_VAR 0 2
100627: PUSH
100628: LD_INT 1
100630: PPUSH
100631: LD_VAR 0 2
100635: PPUSH
100636: CALL_OW 12
100640: ARRAY
100641: ST_TO_ADDR
// if Crawls ( un ) then
100642: LD_VAR 0 3
100646: PPUSH
100647: CALL_OW 318
100651: IFFALSE 100662
// ComWalk ( un ) ;
100653: LD_VAR 0 3
100657: PPUSH
100658: CALL_OW 138
// SetClass ( un , class_mortar ) ;
100662: LD_VAR 0 3
100666: PPUSH
100667: LD_INT 8
100669: PPUSH
100670: CALL_OW 336
// end ; 4 :
100674: GO 100767
100676: LD_INT 4
100678: DOUBLE
100679: EQUAL
100680: IFTRUE 100684
100682: GO 100745
100684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
100685: LD_ADDR_VAR 0 2
100689: PUSH
100690: LD_INT 22
100692: PUSH
100693: LD_OWVAR 2
100697: PUSH
100698: EMPTY
100699: LIST
100700: LIST
100701: PUSH
100702: LD_INT 30
100704: PUSH
100705: LD_INT 29
100707: PUSH
100708: EMPTY
100709: LIST
100710: LIST
100711: PUSH
100712: EMPTY
100713: LIST
100714: LIST
100715: PPUSH
100716: CALL_OW 69
100720: ST_TO_ADDR
// if not tmp then
100721: LD_VAR 0 2
100725: NOT
100726: IFFALSE 100730
// exit ;
100728: GO 100767
// DestroyUnit ( tmp [ 1 ] ) ;
100730: LD_VAR 0 2
100734: PUSH
100735: LD_INT 1
100737: ARRAY
100738: PPUSH
100739: CALL_OW 65
// end ; 5 .. 7 :
100743: GO 100767
100745: LD_INT 5
100747: DOUBLE
100748: GREATEREQUAL
100749: IFFALSE 100757
100751: LD_INT 7
100753: DOUBLE
100754: LESSEQUAL
100755: IFTRUE 100759
100757: GO 100766
100759: POP
// StreamSibBomb ; end ;
100760: CALL 97017 0 0
100764: GO 100767
100766: POP
// end ;
100767: PPOPN 3
100769: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
100770: LD_EXP 94
100774: PUSH
100775: LD_EXP 144
100779: AND
100780: IFFALSE 100936
100782: GO 100784
100784: DISABLE
100785: LD_INT 0
100787: PPUSH
100788: PPUSH
100789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
100790: LD_ADDR_VAR 0 2
100794: PUSH
100795: LD_INT 81
100797: PUSH
100798: LD_OWVAR 2
100802: PUSH
100803: EMPTY
100804: LIST
100805: LIST
100806: PUSH
100807: LD_INT 2
100809: PUSH
100810: LD_INT 21
100812: PUSH
100813: LD_INT 1
100815: PUSH
100816: EMPTY
100817: LIST
100818: LIST
100819: PUSH
100820: LD_INT 21
100822: PUSH
100823: LD_INT 2
100825: PUSH
100826: EMPTY
100827: LIST
100828: LIST
100829: PUSH
100830: EMPTY
100831: LIST
100832: LIST
100833: LIST
100834: PUSH
100835: EMPTY
100836: LIST
100837: LIST
100838: PPUSH
100839: CALL_OW 69
100843: ST_TO_ADDR
// if not tmp then
100844: LD_VAR 0 2
100848: NOT
100849: IFFALSE 100853
// exit ;
100851: GO 100936
// p := 0 ;
100853: LD_ADDR_VAR 0 3
100857: PUSH
100858: LD_INT 0
100860: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100861: LD_INT 35
100863: PPUSH
100864: CALL_OW 67
// p := p + 1 ;
100868: LD_ADDR_VAR 0 3
100872: PUSH
100873: LD_VAR 0 3
100877: PUSH
100878: LD_INT 1
100880: PLUS
100881: ST_TO_ADDR
// for i in tmp do
100882: LD_ADDR_VAR 0 1
100886: PUSH
100887: LD_VAR 0 2
100891: PUSH
100892: FOR_IN
100893: IFFALSE 100924
// if GetLives ( i ) < 1000 then
100895: LD_VAR 0 1
100899: PPUSH
100900: CALL_OW 256
100904: PUSH
100905: LD_INT 1000
100907: LESS
100908: IFFALSE 100922
// SetLives ( i , 1000 ) ;
100910: LD_VAR 0 1
100914: PPUSH
100915: LD_INT 1000
100917: PPUSH
100918: CALL_OW 234
100922: GO 100892
100924: POP
100925: POP
// until p > 20 ;
100926: LD_VAR 0 3
100930: PUSH
100931: LD_INT 20
100933: GREATER
100934: IFFALSE 100861
// end ;
100936: PPOPN 3
100938: END
// every 0 0$1 trigger StreamModeActive and sTime do
100939: LD_EXP 94
100943: PUSH
100944: LD_EXP 145
100948: AND
100949: IFFALSE 100984
100951: GO 100953
100953: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
100954: LD_INT 28
100956: PPUSH
100957: LD_OWVAR 2
100961: PPUSH
100962: LD_INT 2
100964: PPUSH
100965: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
100969: LD_INT 30
100971: PPUSH
100972: LD_OWVAR 2
100976: PPUSH
100977: LD_INT 2
100979: PPUSH
100980: CALL_OW 322
// end ;
100984: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
100985: LD_EXP 94
100989: PUSH
100990: LD_EXP 146
100994: AND
100995: IFFALSE 101116
100997: GO 100999
100999: DISABLE
101000: LD_INT 0
101002: PPUSH
101003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101004: LD_ADDR_VAR 0 2
101008: PUSH
101009: LD_INT 22
101011: PUSH
101012: LD_OWVAR 2
101016: PUSH
101017: EMPTY
101018: LIST
101019: LIST
101020: PUSH
101021: LD_INT 21
101023: PUSH
101024: LD_INT 1
101026: PUSH
101027: EMPTY
101028: LIST
101029: LIST
101030: PUSH
101031: LD_INT 3
101033: PUSH
101034: LD_INT 23
101036: PUSH
101037: LD_INT 0
101039: PUSH
101040: EMPTY
101041: LIST
101042: LIST
101043: PUSH
101044: EMPTY
101045: LIST
101046: LIST
101047: PUSH
101048: EMPTY
101049: LIST
101050: LIST
101051: LIST
101052: PPUSH
101053: CALL_OW 69
101057: ST_TO_ADDR
// if not tmp then
101058: LD_VAR 0 2
101062: NOT
101063: IFFALSE 101067
// exit ;
101065: GO 101116
// for i in tmp do
101067: LD_ADDR_VAR 0 1
101071: PUSH
101072: LD_VAR 0 2
101076: PUSH
101077: FOR_IN
101078: IFFALSE 101114
// begin if Crawls ( i ) then
101080: LD_VAR 0 1
101084: PPUSH
101085: CALL_OW 318
101089: IFFALSE 101100
// ComWalk ( i ) ;
101091: LD_VAR 0 1
101095: PPUSH
101096: CALL_OW 138
// SetClass ( i , 2 ) ;
101100: LD_VAR 0 1
101104: PPUSH
101105: LD_INT 2
101107: PPUSH
101108: CALL_OW 336
// end ;
101112: GO 101077
101114: POP
101115: POP
// end ;
101116: PPOPN 2
101118: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
101119: LD_EXP 94
101123: PUSH
101124: LD_EXP 147
101128: AND
101129: IFFALSE 101410
101131: GO 101133
101133: DISABLE
101134: LD_INT 0
101136: PPUSH
101137: PPUSH
101138: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
101139: LD_OWVAR 2
101143: PPUSH
101144: LD_INT 9
101146: PPUSH
101147: LD_INT 1
101149: PPUSH
101150: LD_INT 1
101152: PPUSH
101153: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
101157: LD_INT 9
101159: PPUSH
101160: LD_OWVAR 2
101164: PPUSH
101165: CALL_OW 343
// uc_side := 9 ;
101169: LD_ADDR_OWVAR 20
101173: PUSH
101174: LD_INT 9
101176: ST_TO_ADDR
// uc_nation := 2 ;
101177: LD_ADDR_OWVAR 21
101181: PUSH
101182: LD_INT 2
101184: ST_TO_ADDR
// hc_name := Dark Warrior ;
101185: LD_ADDR_OWVAR 26
101189: PUSH
101190: LD_STRING Dark Warrior
101192: ST_TO_ADDR
// hc_gallery :=  ;
101193: LD_ADDR_OWVAR 33
101197: PUSH
101198: LD_STRING 
101200: ST_TO_ADDR
// hc_noskilllimit := true ;
101201: LD_ADDR_OWVAR 76
101205: PUSH
101206: LD_INT 1
101208: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
101209: LD_ADDR_OWVAR 31
101213: PUSH
101214: LD_INT 30
101216: PUSH
101217: LD_INT 30
101219: PUSH
101220: LD_INT 30
101222: PUSH
101223: LD_INT 30
101225: PUSH
101226: EMPTY
101227: LIST
101228: LIST
101229: LIST
101230: LIST
101231: ST_TO_ADDR
// un := CreateHuman ;
101232: LD_ADDR_VAR 0 3
101236: PUSH
101237: CALL_OW 44
101241: ST_TO_ADDR
// hc_noskilllimit := false ;
101242: LD_ADDR_OWVAR 76
101246: PUSH
101247: LD_INT 0
101249: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101250: LD_VAR 0 3
101254: PPUSH
101255: LD_INT 1
101257: PPUSH
101258: CALL_OW 51
// p := 0 ;
101262: LD_ADDR_VAR 0 2
101266: PUSH
101267: LD_INT 0
101269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
101270: LD_INT 35
101272: PPUSH
101273: CALL_OW 67
// p := p + 1 ;
101277: LD_ADDR_VAR 0 2
101281: PUSH
101282: LD_VAR 0 2
101286: PUSH
101287: LD_INT 1
101289: PLUS
101290: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
101291: LD_VAR 0 3
101295: PPUSH
101296: CALL_OW 256
101300: PUSH
101301: LD_INT 1000
101303: LESS
101304: IFFALSE 101318
// SetLives ( un , 1000 ) ;
101306: LD_VAR 0 3
101310: PPUSH
101311: LD_INT 1000
101313: PPUSH
101314: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
101318: LD_VAR 0 3
101322: PPUSH
101323: LD_INT 81
101325: PUSH
101326: LD_OWVAR 2
101330: PUSH
101331: EMPTY
101332: LIST
101333: LIST
101334: PUSH
101335: LD_INT 91
101337: PUSH
101338: LD_VAR 0 3
101342: PUSH
101343: LD_INT 30
101345: PUSH
101346: EMPTY
101347: LIST
101348: LIST
101349: LIST
101350: PUSH
101351: EMPTY
101352: LIST
101353: LIST
101354: PPUSH
101355: CALL_OW 69
101359: PPUSH
101360: LD_VAR 0 3
101364: PPUSH
101365: CALL_OW 74
101369: PPUSH
101370: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
101374: LD_VAR 0 2
101378: PUSH
101379: LD_INT 60
101381: GREATER
101382: PUSH
101383: LD_VAR 0 3
101387: PPUSH
101388: CALL_OW 301
101392: OR
101393: IFFALSE 101270
// if un then
101395: LD_VAR 0 3
101399: IFFALSE 101410
// RemoveUnit ( un ) ;
101401: LD_VAR 0 3
101405: PPUSH
101406: CALL_OW 64
// end ;
101410: PPOPN 3
101412: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
101413: LD_INT 0
101415: PPUSH
// case cmd of 301 :
101416: LD_VAR 0 1
101420: PUSH
101421: LD_INT 301
101423: DOUBLE
101424: EQUAL
101425: IFTRUE 101429
101427: GO 101461
101429: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
101430: LD_VAR 0 6
101434: PPUSH
101435: LD_VAR 0 7
101439: PPUSH
101440: LD_VAR 0 8
101444: PPUSH
101445: LD_VAR 0 4
101449: PPUSH
101450: LD_VAR 0 5
101454: PPUSH
101455: CALL 102662 0 5
101459: GO 101582
101461: LD_INT 302
101463: DOUBLE
101464: EQUAL
101465: IFTRUE 101469
101467: GO 101506
101469: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
101470: LD_VAR 0 6
101474: PPUSH
101475: LD_VAR 0 7
101479: PPUSH
101480: LD_VAR 0 8
101484: PPUSH
101485: LD_VAR 0 9
101489: PPUSH
101490: LD_VAR 0 4
101494: PPUSH
101495: LD_VAR 0 5
101499: PPUSH
101500: CALL 102753 0 6
101504: GO 101582
101506: LD_INT 303
101508: DOUBLE
101509: EQUAL
101510: IFTRUE 101514
101512: GO 101551
101514: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
101515: LD_VAR 0 6
101519: PPUSH
101520: LD_VAR 0 7
101524: PPUSH
101525: LD_VAR 0 8
101529: PPUSH
101530: LD_VAR 0 9
101534: PPUSH
101535: LD_VAR 0 4
101539: PPUSH
101540: LD_VAR 0 5
101544: PPUSH
101545: CALL 101587 0 6
101549: GO 101582
101551: LD_INT 304
101553: DOUBLE
101554: EQUAL
101555: IFTRUE 101559
101557: GO 101581
101559: POP
// hHackTeleport ( unit , x , y ) ; end ;
101560: LD_VAR 0 2
101564: PPUSH
101565: LD_VAR 0 4
101569: PPUSH
101570: LD_VAR 0 5
101574: PPUSH
101575: CALL 103346 0 3
101579: GO 101582
101581: POP
// end ;
101582: LD_VAR 0 12
101586: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
101587: LD_INT 0
101589: PPUSH
101590: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
101591: LD_VAR 0 1
101595: PUSH
101596: LD_INT 1
101598: LESS
101599: PUSH
101600: LD_VAR 0 1
101604: PUSH
101605: LD_INT 3
101607: GREATER
101608: OR
101609: PUSH
101610: LD_VAR 0 5
101614: PPUSH
101615: LD_VAR 0 6
101619: PPUSH
101620: CALL_OW 428
101624: OR
101625: IFFALSE 101629
// exit ;
101627: GO 102349
// uc_side := your_side ;
101629: LD_ADDR_OWVAR 20
101633: PUSH
101634: LD_OWVAR 2
101638: ST_TO_ADDR
// uc_nation := nation ;
101639: LD_ADDR_OWVAR 21
101643: PUSH
101644: LD_VAR 0 1
101648: ST_TO_ADDR
// bc_level = 1 ;
101649: LD_ADDR_OWVAR 43
101653: PUSH
101654: LD_INT 1
101656: ST_TO_ADDR
// case btype of 1 :
101657: LD_VAR 0 2
101661: PUSH
101662: LD_INT 1
101664: DOUBLE
101665: EQUAL
101666: IFTRUE 101670
101668: GO 101681
101670: POP
// bc_type := b_depot ; 2 :
101671: LD_ADDR_OWVAR 42
101675: PUSH
101676: LD_INT 0
101678: ST_TO_ADDR
101679: GO 102293
101681: LD_INT 2
101683: DOUBLE
101684: EQUAL
101685: IFTRUE 101689
101687: GO 101700
101689: POP
// bc_type := b_warehouse ; 3 :
101690: LD_ADDR_OWVAR 42
101694: PUSH
101695: LD_INT 1
101697: ST_TO_ADDR
101698: GO 102293
101700: LD_INT 3
101702: DOUBLE
101703: EQUAL
101704: IFTRUE 101708
101706: GO 101719
101708: POP
// bc_type := b_lab ; 4 .. 9 :
101709: LD_ADDR_OWVAR 42
101713: PUSH
101714: LD_INT 6
101716: ST_TO_ADDR
101717: GO 102293
101719: LD_INT 4
101721: DOUBLE
101722: GREATEREQUAL
101723: IFFALSE 101731
101725: LD_INT 9
101727: DOUBLE
101728: LESSEQUAL
101729: IFTRUE 101733
101731: GO 101785
101733: POP
// begin bc_type := b_lab_half ;
101734: LD_ADDR_OWVAR 42
101738: PUSH
101739: LD_INT 7
101741: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
101742: LD_ADDR_OWVAR 44
101746: PUSH
101747: LD_INT 10
101749: PUSH
101750: LD_INT 11
101752: PUSH
101753: LD_INT 12
101755: PUSH
101756: LD_INT 15
101758: PUSH
101759: LD_INT 14
101761: PUSH
101762: LD_INT 13
101764: PUSH
101765: EMPTY
101766: LIST
101767: LIST
101768: LIST
101769: LIST
101770: LIST
101771: LIST
101772: PUSH
101773: LD_VAR 0 2
101777: PUSH
101778: LD_INT 3
101780: MINUS
101781: ARRAY
101782: ST_TO_ADDR
// end ; 10 .. 13 :
101783: GO 102293
101785: LD_INT 10
101787: DOUBLE
101788: GREATEREQUAL
101789: IFFALSE 101797
101791: LD_INT 13
101793: DOUBLE
101794: LESSEQUAL
101795: IFTRUE 101799
101797: GO 101876
101799: POP
// begin bc_type := b_lab_full ;
101800: LD_ADDR_OWVAR 42
101804: PUSH
101805: LD_INT 8
101807: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
101808: LD_ADDR_OWVAR 44
101812: PUSH
101813: LD_INT 10
101815: PUSH
101816: LD_INT 12
101818: PUSH
101819: LD_INT 14
101821: PUSH
101822: LD_INT 13
101824: PUSH
101825: EMPTY
101826: LIST
101827: LIST
101828: LIST
101829: LIST
101830: PUSH
101831: LD_VAR 0 2
101835: PUSH
101836: LD_INT 9
101838: MINUS
101839: ARRAY
101840: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
101841: LD_ADDR_OWVAR 45
101845: PUSH
101846: LD_INT 11
101848: PUSH
101849: LD_INT 15
101851: PUSH
101852: LD_INT 12
101854: PUSH
101855: LD_INT 15
101857: PUSH
101858: EMPTY
101859: LIST
101860: LIST
101861: LIST
101862: LIST
101863: PUSH
101864: LD_VAR 0 2
101868: PUSH
101869: LD_INT 9
101871: MINUS
101872: ARRAY
101873: ST_TO_ADDR
// end ; 14 :
101874: GO 102293
101876: LD_INT 14
101878: DOUBLE
101879: EQUAL
101880: IFTRUE 101884
101882: GO 101895
101884: POP
// bc_type := b_workshop ; 15 :
101885: LD_ADDR_OWVAR 42
101889: PUSH
101890: LD_INT 2
101892: ST_TO_ADDR
101893: GO 102293
101895: LD_INT 15
101897: DOUBLE
101898: EQUAL
101899: IFTRUE 101903
101901: GO 101914
101903: POP
// bc_type := b_factory ; 16 :
101904: LD_ADDR_OWVAR 42
101908: PUSH
101909: LD_INT 3
101911: ST_TO_ADDR
101912: GO 102293
101914: LD_INT 16
101916: DOUBLE
101917: EQUAL
101918: IFTRUE 101922
101920: GO 101933
101922: POP
// bc_type := b_ext_gun ; 17 :
101923: LD_ADDR_OWVAR 42
101927: PUSH
101928: LD_INT 17
101930: ST_TO_ADDR
101931: GO 102293
101933: LD_INT 17
101935: DOUBLE
101936: EQUAL
101937: IFTRUE 101941
101939: GO 101969
101941: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
101942: LD_ADDR_OWVAR 42
101946: PUSH
101947: LD_INT 19
101949: PUSH
101950: LD_INT 23
101952: PUSH
101953: LD_INT 19
101955: PUSH
101956: EMPTY
101957: LIST
101958: LIST
101959: LIST
101960: PUSH
101961: LD_VAR 0 1
101965: ARRAY
101966: ST_TO_ADDR
101967: GO 102293
101969: LD_INT 18
101971: DOUBLE
101972: EQUAL
101973: IFTRUE 101977
101975: GO 101988
101977: POP
// bc_type := b_ext_radar ; 19 :
101978: LD_ADDR_OWVAR 42
101982: PUSH
101983: LD_INT 20
101985: ST_TO_ADDR
101986: GO 102293
101988: LD_INT 19
101990: DOUBLE
101991: EQUAL
101992: IFTRUE 101996
101994: GO 102007
101996: POP
// bc_type := b_ext_radio ; 20 :
101997: LD_ADDR_OWVAR 42
102001: PUSH
102002: LD_INT 22
102004: ST_TO_ADDR
102005: GO 102293
102007: LD_INT 20
102009: DOUBLE
102010: EQUAL
102011: IFTRUE 102015
102013: GO 102026
102015: POP
// bc_type := b_ext_siberium ; 21 :
102016: LD_ADDR_OWVAR 42
102020: PUSH
102021: LD_INT 21
102023: ST_TO_ADDR
102024: GO 102293
102026: LD_INT 21
102028: DOUBLE
102029: EQUAL
102030: IFTRUE 102034
102032: GO 102045
102034: POP
// bc_type := b_ext_computer ; 22 :
102035: LD_ADDR_OWVAR 42
102039: PUSH
102040: LD_INT 24
102042: ST_TO_ADDR
102043: GO 102293
102045: LD_INT 22
102047: DOUBLE
102048: EQUAL
102049: IFTRUE 102053
102051: GO 102064
102053: POP
// bc_type := b_ext_track ; 23 :
102054: LD_ADDR_OWVAR 42
102058: PUSH
102059: LD_INT 16
102061: ST_TO_ADDR
102062: GO 102293
102064: LD_INT 23
102066: DOUBLE
102067: EQUAL
102068: IFTRUE 102072
102070: GO 102083
102072: POP
// bc_type := b_ext_laser ; 24 :
102073: LD_ADDR_OWVAR 42
102077: PUSH
102078: LD_INT 25
102080: ST_TO_ADDR
102081: GO 102293
102083: LD_INT 24
102085: DOUBLE
102086: EQUAL
102087: IFTRUE 102091
102089: GO 102102
102091: POP
// bc_type := b_control_tower ; 25 :
102092: LD_ADDR_OWVAR 42
102096: PUSH
102097: LD_INT 36
102099: ST_TO_ADDR
102100: GO 102293
102102: LD_INT 25
102104: DOUBLE
102105: EQUAL
102106: IFTRUE 102110
102108: GO 102121
102110: POP
// bc_type := b_breastwork ; 26 :
102111: LD_ADDR_OWVAR 42
102115: PUSH
102116: LD_INT 31
102118: ST_TO_ADDR
102119: GO 102293
102121: LD_INT 26
102123: DOUBLE
102124: EQUAL
102125: IFTRUE 102129
102127: GO 102140
102129: POP
// bc_type := b_bunker ; 27 :
102130: LD_ADDR_OWVAR 42
102134: PUSH
102135: LD_INT 32
102137: ST_TO_ADDR
102138: GO 102293
102140: LD_INT 27
102142: DOUBLE
102143: EQUAL
102144: IFTRUE 102148
102146: GO 102159
102148: POP
// bc_type := b_turret ; 28 :
102149: LD_ADDR_OWVAR 42
102153: PUSH
102154: LD_INT 33
102156: ST_TO_ADDR
102157: GO 102293
102159: LD_INT 28
102161: DOUBLE
102162: EQUAL
102163: IFTRUE 102167
102165: GO 102178
102167: POP
// bc_type := b_armoury ; 29 :
102168: LD_ADDR_OWVAR 42
102172: PUSH
102173: LD_INT 4
102175: ST_TO_ADDR
102176: GO 102293
102178: LD_INT 29
102180: DOUBLE
102181: EQUAL
102182: IFTRUE 102186
102184: GO 102197
102186: POP
// bc_type := b_barracks ; 30 :
102187: LD_ADDR_OWVAR 42
102191: PUSH
102192: LD_INT 5
102194: ST_TO_ADDR
102195: GO 102293
102197: LD_INT 30
102199: DOUBLE
102200: EQUAL
102201: IFTRUE 102205
102203: GO 102216
102205: POP
// bc_type := b_solar_power ; 31 :
102206: LD_ADDR_OWVAR 42
102210: PUSH
102211: LD_INT 27
102213: ST_TO_ADDR
102214: GO 102293
102216: LD_INT 31
102218: DOUBLE
102219: EQUAL
102220: IFTRUE 102224
102222: GO 102235
102224: POP
// bc_type := b_oil_power ; 32 :
102225: LD_ADDR_OWVAR 42
102229: PUSH
102230: LD_INT 26
102232: ST_TO_ADDR
102233: GO 102293
102235: LD_INT 32
102237: DOUBLE
102238: EQUAL
102239: IFTRUE 102243
102241: GO 102254
102243: POP
// bc_type := b_siberite_power ; 33 :
102244: LD_ADDR_OWVAR 42
102248: PUSH
102249: LD_INT 28
102251: ST_TO_ADDR
102252: GO 102293
102254: LD_INT 33
102256: DOUBLE
102257: EQUAL
102258: IFTRUE 102262
102260: GO 102273
102262: POP
// bc_type := b_oil_mine ; 34 :
102263: LD_ADDR_OWVAR 42
102267: PUSH
102268: LD_INT 29
102270: ST_TO_ADDR
102271: GO 102293
102273: LD_INT 34
102275: DOUBLE
102276: EQUAL
102277: IFTRUE 102281
102279: GO 102292
102281: POP
// bc_type := b_siberite_mine ; end ;
102282: LD_ADDR_OWVAR 42
102286: PUSH
102287: LD_INT 30
102289: ST_TO_ADDR
102290: GO 102293
102292: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
102293: LD_ADDR_VAR 0 8
102297: PUSH
102298: LD_VAR 0 5
102302: PPUSH
102303: LD_VAR 0 6
102307: PPUSH
102308: LD_VAR 0 3
102312: PPUSH
102313: CALL_OW 47
102317: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
102318: LD_OWVAR 42
102322: PUSH
102323: LD_INT 32
102325: PUSH
102326: LD_INT 33
102328: PUSH
102329: EMPTY
102330: LIST
102331: LIST
102332: IN
102333: IFFALSE 102349
// PlaceWeaponTurret ( b , weapon ) ;
102335: LD_VAR 0 8
102339: PPUSH
102340: LD_VAR 0 4
102344: PPUSH
102345: CALL_OW 431
// end ;
102349: LD_VAR 0 7
102353: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
102354: LD_INT 0
102356: PPUSH
102357: PPUSH
102358: PPUSH
102359: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
102360: LD_ADDR_VAR 0 4
102364: PUSH
102365: LD_INT 22
102367: PUSH
102368: LD_OWVAR 2
102372: PUSH
102373: EMPTY
102374: LIST
102375: LIST
102376: PUSH
102377: LD_INT 2
102379: PUSH
102380: LD_INT 30
102382: PUSH
102383: LD_INT 0
102385: PUSH
102386: EMPTY
102387: LIST
102388: LIST
102389: PUSH
102390: LD_INT 30
102392: PUSH
102393: LD_INT 1
102395: PUSH
102396: EMPTY
102397: LIST
102398: LIST
102399: PUSH
102400: EMPTY
102401: LIST
102402: LIST
102403: LIST
102404: PUSH
102405: EMPTY
102406: LIST
102407: LIST
102408: PPUSH
102409: CALL_OW 69
102413: ST_TO_ADDR
// if not tmp then
102414: LD_VAR 0 4
102418: NOT
102419: IFFALSE 102423
// exit ;
102421: GO 102482
// for i in tmp do
102423: LD_ADDR_VAR 0 2
102427: PUSH
102428: LD_VAR 0 4
102432: PUSH
102433: FOR_IN
102434: IFFALSE 102480
// for j = 1 to 3 do
102436: LD_ADDR_VAR 0 3
102440: PUSH
102441: DOUBLE
102442: LD_INT 1
102444: DEC
102445: ST_TO_ADDR
102446: LD_INT 3
102448: PUSH
102449: FOR_TO
102450: IFFALSE 102476
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
102452: LD_VAR 0 2
102456: PPUSH
102457: CALL_OW 274
102461: PPUSH
102462: LD_VAR 0 3
102466: PPUSH
102467: LD_INT 99999
102469: PPUSH
102470: CALL_OW 277
102474: GO 102449
102476: POP
102477: POP
102478: GO 102433
102480: POP
102481: POP
// end ;
102482: LD_VAR 0 1
102486: RET
// export function hHackSetLevel10 ; var i , j ; begin
102487: LD_INT 0
102489: PPUSH
102490: PPUSH
102491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
102492: LD_ADDR_VAR 0 2
102496: PUSH
102497: LD_INT 21
102499: PUSH
102500: LD_INT 1
102502: PUSH
102503: EMPTY
102504: LIST
102505: LIST
102506: PPUSH
102507: CALL_OW 69
102511: PUSH
102512: FOR_IN
102513: IFFALSE 102565
// if IsSelected ( i ) then
102515: LD_VAR 0 2
102519: PPUSH
102520: CALL_OW 306
102524: IFFALSE 102563
// begin for j := 1 to 4 do
102526: LD_ADDR_VAR 0 3
102530: PUSH
102531: DOUBLE
102532: LD_INT 1
102534: DEC
102535: ST_TO_ADDR
102536: LD_INT 4
102538: PUSH
102539: FOR_TO
102540: IFFALSE 102561
// SetSkill ( i , j , 10 ) ;
102542: LD_VAR 0 2
102546: PPUSH
102547: LD_VAR 0 3
102551: PPUSH
102552: LD_INT 10
102554: PPUSH
102555: CALL_OW 237
102559: GO 102539
102561: POP
102562: POP
// end ;
102563: GO 102512
102565: POP
102566: POP
// end ;
102567: LD_VAR 0 1
102571: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
102572: LD_INT 0
102574: PPUSH
102575: PPUSH
102576: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
102577: LD_ADDR_VAR 0 2
102581: PUSH
102582: LD_INT 22
102584: PUSH
102585: LD_OWVAR 2
102589: PUSH
102590: EMPTY
102591: LIST
102592: LIST
102593: PUSH
102594: LD_INT 21
102596: PUSH
102597: LD_INT 1
102599: PUSH
102600: EMPTY
102601: LIST
102602: LIST
102603: PUSH
102604: EMPTY
102605: LIST
102606: LIST
102607: PPUSH
102608: CALL_OW 69
102612: PUSH
102613: FOR_IN
102614: IFFALSE 102655
// begin for j := 1 to 4 do
102616: LD_ADDR_VAR 0 3
102620: PUSH
102621: DOUBLE
102622: LD_INT 1
102624: DEC
102625: ST_TO_ADDR
102626: LD_INT 4
102628: PUSH
102629: FOR_TO
102630: IFFALSE 102651
// SetSkill ( i , j , 10 ) ;
102632: LD_VAR 0 2
102636: PPUSH
102637: LD_VAR 0 3
102641: PPUSH
102642: LD_INT 10
102644: PPUSH
102645: CALL_OW 237
102649: GO 102629
102651: POP
102652: POP
// end ;
102653: GO 102613
102655: POP
102656: POP
// end ;
102657: LD_VAR 0 1
102661: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
102662: LD_INT 0
102664: PPUSH
// uc_side := your_side ;
102665: LD_ADDR_OWVAR 20
102669: PUSH
102670: LD_OWVAR 2
102674: ST_TO_ADDR
// uc_nation := nation ;
102675: LD_ADDR_OWVAR 21
102679: PUSH
102680: LD_VAR 0 1
102684: ST_TO_ADDR
// InitHc ;
102685: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
102689: LD_INT 0
102691: PPUSH
102692: LD_VAR 0 2
102696: PPUSH
102697: LD_VAR 0 3
102701: PPUSH
102702: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
102706: LD_VAR 0 4
102710: PPUSH
102711: LD_VAR 0 5
102715: PPUSH
102716: CALL_OW 428
102720: PUSH
102721: LD_INT 0
102723: EQUAL
102724: IFFALSE 102748
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
102726: CALL_OW 44
102730: PPUSH
102731: LD_VAR 0 4
102735: PPUSH
102736: LD_VAR 0 5
102740: PPUSH
102741: LD_INT 1
102743: PPUSH
102744: CALL_OW 48
// end ;
102748: LD_VAR 0 6
102752: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
102753: LD_INT 0
102755: PPUSH
102756: PPUSH
// uc_side := your_side ;
102757: LD_ADDR_OWVAR 20
102761: PUSH
102762: LD_OWVAR 2
102766: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
102767: LD_VAR 0 1
102771: PUSH
102772: LD_INT 1
102774: PUSH
102775: LD_INT 2
102777: PUSH
102778: LD_INT 3
102780: PUSH
102781: LD_INT 4
102783: PUSH
102784: LD_INT 5
102786: PUSH
102787: EMPTY
102788: LIST
102789: LIST
102790: LIST
102791: LIST
102792: LIST
102793: IN
102794: IFFALSE 102806
// uc_nation := nation_american else
102796: LD_ADDR_OWVAR 21
102800: PUSH
102801: LD_INT 1
102803: ST_TO_ADDR
102804: GO 102849
// if chassis in [ 11 , 12 , 13 , 14 ] then
102806: LD_VAR 0 1
102810: PUSH
102811: LD_INT 11
102813: PUSH
102814: LD_INT 12
102816: PUSH
102817: LD_INT 13
102819: PUSH
102820: LD_INT 14
102822: PUSH
102823: EMPTY
102824: LIST
102825: LIST
102826: LIST
102827: LIST
102828: IN
102829: IFFALSE 102841
// uc_nation := nation_arabian else
102831: LD_ADDR_OWVAR 21
102835: PUSH
102836: LD_INT 2
102838: ST_TO_ADDR
102839: GO 102849
// uc_nation := nation_russian ;
102841: LD_ADDR_OWVAR 21
102845: PUSH
102846: LD_INT 3
102848: ST_TO_ADDR
// vc_chassis := chassis ;
102849: LD_ADDR_OWVAR 37
102853: PUSH
102854: LD_VAR 0 1
102858: ST_TO_ADDR
// vc_engine := engine ;
102859: LD_ADDR_OWVAR 39
102863: PUSH
102864: LD_VAR 0 2
102868: ST_TO_ADDR
// vc_control := control ;
102869: LD_ADDR_OWVAR 38
102873: PUSH
102874: LD_VAR 0 3
102878: ST_TO_ADDR
// vc_weapon := weapon ;
102879: LD_ADDR_OWVAR 40
102883: PUSH
102884: LD_VAR 0 4
102888: ST_TO_ADDR
// un := CreateVehicle ;
102889: LD_ADDR_VAR 0 8
102893: PUSH
102894: CALL_OW 45
102898: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
102899: LD_VAR 0 8
102903: PPUSH
102904: LD_INT 0
102906: PPUSH
102907: LD_INT 5
102909: PPUSH
102910: CALL_OW 12
102914: PPUSH
102915: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
102919: LD_VAR 0 8
102923: PPUSH
102924: LD_VAR 0 5
102928: PPUSH
102929: LD_VAR 0 6
102933: PPUSH
102934: LD_INT 1
102936: PPUSH
102937: CALL_OW 48
// end ;
102941: LD_VAR 0 7
102945: RET
// export hInvincible ; every 1 do
102946: GO 102948
102948: DISABLE
// hInvincible := [ ] ;
102949: LD_ADDR_EXP 148
102953: PUSH
102954: EMPTY
102955: ST_TO_ADDR
102956: END
// every 10 do var i ;
102957: GO 102959
102959: DISABLE
102960: LD_INT 0
102962: PPUSH
// begin enable ;
102963: ENABLE
// if not hInvincible then
102964: LD_EXP 148
102968: NOT
102969: IFFALSE 102973
// exit ;
102971: GO 103017
// for i in hInvincible do
102973: LD_ADDR_VAR 0 1
102977: PUSH
102978: LD_EXP 148
102982: PUSH
102983: FOR_IN
102984: IFFALSE 103015
// if GetLives ( i ) < 1000 then
102986: LD_VAR 0 1
102990: PPUSH
102991: CALL_OW 256
102995: PUSH
102996: LD_INT 1000
102998: LESS
102999: IFFALSE 103013
// SetLives ( i , 1000 ) ;
103001: LD_VAR 0 1
103005: PPUSH
103006: LD_INT 1000
103008: PPUSH
103009: CALL_OW 234
103013: GO 102983
103015: POP
103016: POP
// end ;
103017: PPOPN 1
103019: END
// export function hHackInvincible ; var i ; begin
103020: LD_INT 0
103022: PPUSH
103023: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
103024: LD_ADDR_VAR 0 2
103028: PUSH
103029: LD_INT 2
103031: PUSH
103032: LD_INT 21
103034: PUSH
103035: LD_INT 1
103037: PUSH
103038: EMPTY
103039: LIST
103040: LIST
103041: PUSH
103042: LD_INT 21
103044: PUSH
103045: LD_INT 2
103047: PUSH
103048: EMPTY
103049: LIST
103050: LIST
103051: PUSH
103052: EMPTY
103053: LIST
103054: LIST
103055: LIST
103056: PPUSH
103057: CALL_OW 69
103061: PUSH
103062: FOR_IN
103063: IFFALSE 103124
// if IsSelected ( i ) then
103065: LD_VAR 0 2
103069: PPUSH
103070: CALL_OW 306
103074: IFFALSE 103122
// begin if i in hInvincible then
103076: LD_VAR 0 2
103080: PUSH
103081: LD_EXP 148
103085: IN
103086: IFFALSE 103106
// hInvincible := hInvincible diff i else
103088: LD_ADDR_EXP 148
103092: PUSH
103093: LD_EXP 148
103097: PUSH
103098: LD_VAR 0 2
103102: DIFF
103103: ST_TO_ADDR
103104: GO 103122
// hInvincible := hInvincible union i ;
103106: LD_ADDR_EXP 148
103110: PUSH
103111: LD_EXP 148
103115: PUSH
103116: LD_VAR 0 2
103120: UNION
103121: ST_TO_ADDR
// end ;
103122: GO 103062
103124: POP
103125: POP
// end ;
103126: LD_VAR 0 1
103130: RET
// export function hHackInvisible ; var i , j ; begin
103131: LD_INT 0
103133: PPUSH
103134: PPUSH
103135: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
103136: LD_ADDR_VAR 0 2
103140: PUSH
103141: LD_INT 21
103143: PUSH
103144: LD_INT 1
103146: PUSH
103147: EMPTY
103148: LIST
103149: LIST
103150: PPUSH
103151: CALL_OW 69
103155: PUSH
103156: FOR_IN
103157: IFFALSE 103181
// if IsSelected ( i ) then
103159: LD_VAR 0 2
103163: PPUSH
103164: CALL_OW 306
103168: IFFALSE 103179
// ComForceInvisible ( i ) ;
103170: LD_VAR 0 2
103174: PPUSH
103175: CALL_OW 496
103179: GO 103156
103181: POP
103182: POP
// end ;
103183: LD_VAR 0 1
103187: RET
// export function hHackChangeYourSide ; begin
103188: LD_INT 0
103190: PPUSH
// if your_side = 8 then
103191: LD_OWVAR 2
103195: PUSH
103196: LD_INT 8
103198: EQUAL
103199: IFFALSE 103211
// your_side := 0 else
103201: LD_ADDR_OWVAR 2
103205: PUSH
103206: LD_INT 0
103208: ST_TO_ADDR
103209: GO 103225
// your_side := your_side + 1 ;
103211: LD_ADDR_OWVAR 2
103215: PUSH
103216: LD_OWVAR 2
103220: PUSH
103221: LD_INT 1
103223: PLUS
103224: ST_TO_ADDR
// end ;
103225: LD_VAR 0 1
103229: RET
// export function hHackChangeUnitSide ; var i , j ; begin
103230: LD_INT 0
103232: PPUSH
103233: PPUSH
103234: PPUSH
// for i in all_units do
103235: LD_ADDR_VAR 0 2
103239: PUSH
103240: LD_OWVAR 3
103244: PUSH
103245: FOR_IN
103246: IFFALSE 103324
// if IsSelected ( i ) then
103248: LD_VAR 0 2
103252: PPUSH
103253: CALL_OW 306
103257: IFFALSE 103322
// begin j := GetSide ( i ) ;
103259: LD_ADDR_VAR 0 3
103263: PUSH
103264: LD_VAR 0 2
103268: PPUSH
103269: CALL_OW 255
103273: ST_TO_ADDR
// if j = 8 then
103274: LD_VAR 0 3
103278: PUSH
103279: LD_INT 8
103281: EQUAL
103282: IFFALSE 103294
// j := 0 else
103284: LD_ADDR_VAR 0 3
103288: PUSH
103289: LD_INT 0
103291: ST_TO_ADDR
103292: GO 103308
// j := j + 1 ;
103294: LD_ADDR_VAR 0 3
103298: PUSH
103299: LD_VAR 0 3
103303: PUSH
103304: LD_INT 1
103306: PLUS
103307: ST_TO_ADDR
// SetSide ( i , j ) ;
103308: LD_VAR 0 2
103312: PPUSH
103313: LD_VAR 0 3
103317: PPUSH
103318: CALL_OW 235
// end ;
103322: GO 103245
103324: POP
103325: POP
// end ;
103326: LD_VAR 0 1
103330: RET
// export function hHackFog ; begin
103331: LD_INT 0
103333: PPUSH
// FogOff ( true ) ;
103334: LD_INT 1
103336: PPUSH
103337: CALL_OW 344
// end ;
103341: LD_VAR 0 1
103345: RET
// export function hHackTeleport ( unit , x , y ) ; begin
103346: LD_INT 0
103348: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
103349: LD_VAR 0 1
103353: PPUSH
103354: LD_VAR 0 2
103358: PPUSH
103359: LD_VAR 0 3
103363: PPUSH
103364: LD_INT 1
103366: PPUSH
103367: LD_INT 1
103369: PPUSH
103370: CALL_OW 483
// CenterOnXY ( x , y ) ;
103374: LD_VAR 0 2
103378: PPUSH
103379: LD_VAR 0 3
103383: PPUSH
103384: CALL_OW 84
// end ; end_of_file
103388: LD_VAR 0 4
103392: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
103393: LD_INT 0
103395: PPUSH
103396: PPUSH
103397: PPUSH
103398: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
103399: LD_VAR 0 1
103403: PPUSH
103404: CALL_OW 264
103408: PUSH
103409: LD_EXP 33
103413: EQUAL
103414: IFFALSE 103486
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
103416: LD_INT 68
103418: PPUSH
103419: LD_VAR 0 1
103423: PPUSH
103424: CALL_OW 255
103428: PPUSH
103429: CALL_OW 321
103433: PUSH
103434: LD_INT 2
103436: EQUAL
103437: IFFALSE 103449
// eff := 70 else
103439: LD_ADDR_VAR 0 4
103443: PUSH
103444: LD_INT 70
103446: ST_TO_ADDR
103447: GO 103457
// eff := 30 ;
103449: LD_ADDR_VAR 0 4
103453: PUSH
103454: LD_INT 30
103456: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
103457: LD_VAR 0 1
103461: PPUSH
103462: CALL_OW 250
103466: PPUSH
103467: LD_VAR 0 1
103471: PPUSH
103472: CALL_OW 251
103476: PPUSH
103477: LD_VAR 0 4
103481: PPUSH
103482: CALL_OW 495
// end ; end ;
103486: LD_VAR 0 2
103490: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
103491: LD_INT 0
103493: PPUSH
// end ;
103494: LD_VAR 0 4
103498: RET
// export function SOS_Command ( cmd ) ; begin
103499: LD_INT 0
103501: PPUSH
// end ;
103502: LD_VAR 0 2
103506: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
103507: LD_INT 0
103509: PPUSH
// if cmd = 121 then
103510: LD_VAR 0 1
103514: PUSH
103515: LD_INT 121
103517: EQUAL
103518: IFFALSE 103520
// end ;
103520: LD_VAR 0 6
103524: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
103525: LD_INT 0
103527: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
103528: LD_VAR 0 1
103532: PUSH
103533: LD_INT 250
103535: EQUAL
103536: PUSH
103537: LD_VAR 0 2
103541: PPUSH
103542: CALL_OW 264
103546: PUSH
103547: LD_EXP 36
103551: EQUAL
103552: AND
103553: IFFALSE 103574
// MinerPlaceMine ( unit , x , y ) ;
103555: LD_VAR 0 2
103559: PPUSH
103560: LD_VAR 0 4
103564: PPUSH
103565: LD_VAR 0 5
103569: PPUSH
103570: CALL 105923 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
103574: LD_VAR 0 1
103578: PUSH
103579: LD_INT 251
103581: EQUAL
103582: PUSH
103583: LD_VAR 0 2
103587: PPUSH
103588: CALL_OW 264
103592: PUSH
103593: LD_EXP 36
103597: EQUAL
103598: AND
103599: IFFALSE 103620
// MinerDetonateMine ( unit , x , y ) ;
103601: LD_VAR 0 2
103605: PPUSH
103606: LD_VAR 0 4
103610: PPUSH
103611: LD_VAR 0 5
103615: PPUSH
103616: CALL 106200 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
103620: LD_VAR 0 1
103624: PUSH
103625: LD_INT 252
103627: EQUAL
103628: PUSH
103629: LD_VAR 0 2
103633: PPUSH
103634: CALL_OW 264
103638: PUSH
103639: LD_EXP 36
103643: EQUAL
103644: AND
103645: IFFALSE 103666
// MinerCreateMinefield ( unit , x , y ) ;
103647: LD_VAR 0 2
103651: PPUSH
103652: LD_VAR 0 4
103656: PPUSH
103657: LD_VAR 0 5
103661: PPUSH
103662: CALL 106617 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
103666: LD_VAR 0 1
103670: PUSH
103671: LD_INT 253
103673: EQUAL
103674: PUSH
103675: LD_VAR 0 2
103679: PPUSH
103680: CALL_OW 257
103684: PUSH
103685: LD_INT 5
103687: EQUAL
103688: AND
103689: IFFALSE 103710
// ComBinocular ( unit , x , y ) ;
103691: LD_VAR 0 2
103695: PPUSH
103696: LD_VAR 0 4
103700: PPUSH
103701: LD_VAR 0 5
103705: PPUSH
103706: CALL 106988 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
103710: LD_VAR 0 1
103714: PUSH
103715: LD_INT 254
103717: EQUAL
103718: PUSH
103719: LD_VAR 0 2
103723: PPUSH
103724: CALL_OW 264
103728: PUSH
103729: LD_EXP 31
103733: EQUAL
103734: AND
103735: PUSH
103736: LD_VAR 0 3
103740: PPUSH
103741: CALL_OW 263
103745: PUSH
103746: LD_INT 3
103748: EQUAL
103749: AND
103750: IFFALSE 103766
// HackDestroyVehicle ( unit , selectedUnit ) ;
103752: LD_VAR 0 2
103756: PPUSH
103757: LD_VAR 0 3
103761: PPUSH
103762: CALL 105283 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
103766: LD_VAR 0 1
103770: PUSH
103771: LD_INT 255
103773: EQUAL
103774: PUSH
103775: LD_VAR 0 2
103779: PPUSH
103780: CALL_OW 264
103784: PUSH
103785: LD_INT 14
103787: PUSH
103788: LD_INT 53
103790: PUSH
103791: EMPTY
103792: LIST
103793: LIST
103794: IN
103795: AND
103796: PUSH
103797: LD_VAR 0 4
103801: PPUSH
103802: LD_VAR 0 5
103806: PPUSH
103807: CALL_OW 488
103811: AND
103812: IFFALSE 103836
// CutTreeXYR ( unit , x , y , 12 ) ;
103814: LD_VAR 0 2
103818: PPUSH
103819: LD_VAR 0 4
103823: PPUSH
103824: LD_VAR 0 5
103828: PPUSH
103829: LD_INT 12
103831: PPUSH
103832: CALL 103849 0 4
// end ;
103836: LD_VAR 0 6
103840: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
103841: LD_INT 0
103843: PPUSH
// end ;
103844: LD_VAR 0 4
103848: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
103849: LD_INT 0
103851: PPUSH
103852: PPUSH
103853: PPUSH
103854: PPUSH
103855: PPUSH
103856: PPUSH
103857: PPUSH
103858: PPUSH
103859: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
103860: LD_VAR 0 1
103864: NOT
103865: PUSH
103866: LD_VAR 0 2
103870: PPUSH
103871: LD_VAR 0 3
103875: PPUSH
103876: CALL_OW 488
103880: NOT
103881: OR
103882: PUSH
103883: LD_VAR 0 4
103887: NOT
103888: OR
103889: IFFALSE 103893
// exit ;
103891: GO 104233
// list := [ ] ;
103893: LD_ADDR_VAR 0 13
103897: PUSH
103898: EMPTY
103899: ST_TO_ADDR
// if x - r < 0 then
103900: LD_VAR 0 2
103904: PUSH
103905: LD_VAR 0 4
103909: MINUS
103910: PUSH
103911: LD_INT 0
103913: LESS
103914: IFFALSE 103926
// min_x := 0 else
103916: LD_ADDR_VAR 0 7
103920: PUSH
103921: LD_INT 0
103923: ST_TO_ADDR
103924: GO 103942
// min_x := x - r ;
103926: LD_ADDR_VAR 0 7
103930: PUSH
103931: LD_VAR 0 2
103935: PUSH
103936: LD_VAR 0 4
103940: MINUS
103941: ST_TO_ADDR
// if y - r < 0 then
103942: LD_VAR 0 3
103946: PUSH
103947: LD_VAR 0 4
103951: MINUS
103952: PUSH
103953: LD_INT 0
103955: LESS
103956: IFFALSE 103968
// min_y := 0 else
103958: LD_ADDR_VAR 0 8
103962: PUSH
103963: LD_INT 0
103965: ST_TO_ADDR
103966: GO 103984
// min_y := y - r ;
103968: LD_ADDR_VAR 0 8
103972: PUSH
103973: LD_VAR 0 3
103977: PUSH
103978: LD_VAR 0 4
103982: MINUS
103983: ST_TO_ADDR
// max_x := x + r ;
103984: LD_ADDR_VAR 0 9
103988: PUSH
103989: LD_VAR 0 2
103993: PUSH
103994: LD_VAR 0 4
103998: PLUS
103999: ST_TO_ADDR
// max_y := y + r ;
104000: LD_ADDR_VAR 0 10
104004: PUSH
104005: LD_VAR 0 3
104009: PUSH
104010: LD_VAR 0 4
104014: PLUS
104015: ST_TO_ADDR
// for _x = min_x to max_x do
104016: LD_ADDR_VAR 0 11
104020: PUSH
104021: DOUBLE
104022: LD_VAR 0 7
104026: DEC
104027: ST_TO_ADDR
104028: LD_VAR 0 9
104032: PUSH
104033: FOR_TO
104034: IFFALSE 104151
// for _y = min_y to max_y do
104036: LD_ADDR_VAR 0 12
104040: PUSH
104041: DOUBLE
104042: LD_VAR 0 8
104046: DEC
104047: ST_TO_ADDR
104048: LD_VAR 0 10
104052: PUSH
104053: FOR_TO
104054: IFFALSE 104147
// begin if not ValidHex ( _x , _y ) then
104056: LD_VAR 0 11
104060: PPUSH
104061: LD_VAR 0 12
104065: PPUSH
104066: CALL_OW 488
104070: NOT
104071: IFFALSE 104075
// continue ;
104073: GO 104053
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
104075: LD_VAR 0 11
104079: PPUSH
104080: LD_VAR 0 12
104084: PPUSH
104085: CALL_OW 351
104089: PUSH
104090: LD_VAR 0 11
104094: PPUSH
104095: LD_VAR 0 12
104099: PPUSH
104100: CALL_OW 554
104104: AND
104105: IFFALSE 104145
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
104107: LD_ADDR_VAR 0 13
104111: PUSH
104112: LD_VAR 0 13
104116: PPUSH
104117: LD_VAR 0 13
104121: PUSH
104122: LD_INT 1
104124: PLUS
104125: PPUSH
104126: LD_VAR 0 11
104130: PUSH
104131: LD_VAR 0 12
104135: PUSH
104136: EMPTY
104137: LIST
104138: LIST
104139: PPUSH
104140: CALL_OW 2
104144: ST_TO_ADDR
// end ;
104145: GO 104053
104147: POP
104148: POP
104149: GO 104033
104151: POP
104152: POP
// if not list then
104153: LD_VAR 0 13
104157: NOT
104158: IFFALSE 104162
// exit ;
104160: GO 104233
// for i in list do
104162: LD_ADDR_VAR 0 6
104166: PUSH
104167: LD_VAR 0 13
104171: PUSH
104172: FOR_IN
104173: IFFALSE 104231
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
104175: LD_VAR 0 1
104179: PPUSH
104180: LD_STRING M
104182: PUSH
104183: LD_VAR 0 6
104187: PUSH
104188: LD_INT 1
104190: ARRAY
104191: PUSH
104192: LD_VAR 0 6
104196: PUSH
104197: LD_INT 2
104199: ARRAY
104200: PUSH
104201: LD_INT 0
104203: PUSH
104204: LD_INT 0
104206: PUSH
104207: LD_INT 0
104209: PUSH
104210: LD_INT 0
104212: PUSH
104213: EMPTY
104214: LIST
104215: LIST
104216: LIST
104217: LIST
104218: LIST
104219: LIST
104220: LIST
104221: PUSH
104222: EMPTY
104223: LIST
104224: PPUSH
104225: CALL_OW 447
104229: GO 104172
104231: POP
104232: POP
// end ;
104233: LD_VAR 0 5
104237: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
104238: LD_EXP 151
104242: NOT
104243: IFFALSE 104293
104245: GO 104247
104247: DISABLE
// begin initHack := true ;
104248: LD_ADDR_EXP 151
104252: PUSH
104253: LD_INT 1
104255: ST_TO_ADDR
// hackTanks := [ ] ;
104256: LD_ADDR_EXP 152
104260: PUSH
104261: EMPTY
104262: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
104263: LD_ADDR_EXP 153
104267: PUSH
104268: EMPTY
104269: ST_TO_ADDR
// hackLimit := 3 ;
104270: LD_ADDR_EXP 154
104274: PUSH
104275: LD_INT 3
104277: ST_TO_ADDR
// hackDist := 12 ;
104278: LD_ADDR_EXP 155
104282: PUSH
104283: LD_INT 12
104285: ST_TO_ADDR
// hackCounter := [ ] ;
104286: LD_ADDR_EXP 156
104290: PUSH
104291: EMPTY
104292: ST_TO_ADDR
// end ;
104293: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
104294: LD_EXP 151
104298: PUSH
104299: LD_INT 34
104301: PUSH
104302: LD_EXP 31
104306: PUSH
104307: EMPTY
104308: LIST
104309: LIST
104310: PPUSH
104311: CALL_OW 69
104315: AND
104316: IFFALSE 104571
104318: GO 104320
104320: DISABLE
104321: LD_INT 0
104323: PPUSH
104324: PPUSH
// begin enable ;
104325: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
104326: LD_ADDR_VAR 0 1
104330: PUSH
104331: LD_INT 34
104333: PUSH
104334: LD_EXP 31
104338: PUSH
104339: EMPTY
104340: LIST
104341: LIST
104342: PPUSH
104343: CALL_OW 69
104347: PUSH
104348: FOR_IN
104349: IFFALSE 104569
// begin if not i in hackTanks then
104351: LD_VAR 0 1
104355: PUSH
104356: LD_EXP 152
104360: IN
104361: NOT
104362: IFFALSE 104445
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
104364: LD_ADDR_EXP 152
104368: PUSH
104369: LD_EXP 152
104373: PPUSH
104374: LD_EXP 152
104378: PUSH
104379: LD_INT 1
104381: PLUS
104382: PPUSH
104383: LD_VAR 0 1
104387: PPUSH
104388: CALL_OW 1
104392: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
104393: LD_ADDR_EXP 153
104397: PUSH
104398: LD_EXP 153
104402: PPUSH
104403: LD_EXP 153
104407: PUSH
104408: LD_INT 1
104410: PLUS
104411: PPUSH
104412: EMPTY
104413: PPUSH
104414: CALL_OW 1
104418: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
104419: LD_ADDR_EXP 156
104423: PUSH
104424: LD_EXP 156
104428: PPUSH
104429: LD_EXP 156
104433: PUSH
104434: LD_INT 1
104436: PLUS
104437: PPUSH
104438: EMPTY
104439: PPUSH
104440: CALL_OW 1
104444: ST_TO_ADDR
// end ; if not IsOk ( i ) then
104445: LD_VAR 0 1
104449: PPUSH
104450: CALL_OW 302
104454: NOT
104455: IFFALSE 104468
// begin HackUnlinkAll ( i ) ;
104457: LD_VAR 0 1
104461: PPUSH
104462: CALL 104574 0 1
// continue ;
104466: GO 104348
// end ; HackCheckCapturedStatus ( i ) ;
104468: LD_VAR 0 1
104472: PPUSH
104473: CALL 105017 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
104477: LD_ADDR_VAR 0 2
104481: PUSH
104482: LD_INT 81
104484: PUSH
104485: LD_VAR 0 1
104489: PPUSH
104490: CALL_OW 255
104494: PUSH
104495: EMPTY
104496: LIST
104497: LIST
104498: PUSH
104499: LD_INT 33
104501: PUSH
104502: LD_INT 3
104504: PUSH
104505: EMPTY
104506: LIST
104507: LIST
104508: PUSH
104509: LD_INT 91
104511: PUSH
104512: LD_VAR 0 1
104516: PUSH
104517: LD_EXP 155
104521: PUSH
104522: EMPTY
104523: LIST
104524: LIST
104525: LIST
104526: PUSH
104527: LD_INT 50
104529: PUSH
104530: EMPTY
104531: LIST
104532: PUSH
104533: EMPTY
104534: LIST
104535: LIST
104536: LIST
104537: LIST
104538: PPUSH
104539: CALL_OW 69
104543: ST_TO_ADDR
// if not tmp then
104544: LD_VAR 0 2
104548: NOT
104549: IFFALSE 104553
// continue ;
104551: GO 104348
// HackLink ( i , tmp ) ;
104553: LD_VAR 0 1
104557: PPUSH
104558: LD_VAR 0 2
104562: PPUSH
104563: CALL 104710 0 2
// end ;
104567: GO 104348
104569: POP
104570: POP
// end ;
104571: PPOPN 2
104573: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
104574: LD_INT 0
104576: PPUSH
104577: PPUSH
104578: PPUSH
// if not hack in hackTanks then
104579: LD_VAR 0 1
104583: PUSH
104584: LD_EXP 152
104588: IN
104589: NOT
104590: IFFALSE 104594
// exit ;
104592: GO 104705
// index := GetElementIndex ( hackTanks , hack ) ;
104594: LD_ADDR_VAR 0 4
104598: PUSH
104599: LD_EXP 152
104603: PPUSH
104604: LD_VAR 0 1
104608: PPUSH
104609: CALL 24643 0 2
104613: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
104614: LD_EXP 153
104618: PUSH
104619: LD_VAR 0 4
104623: ARRAY
104624: IFFALSE 104705
// begin for i in hackTanksCaptured [ index ] do
104626: LD_ADDR_VAR 0 3
104630: PUSH
104631: LD_EXP 153
104635: PUSH
104636: LD_VAR 0 4
104640: ARRAY
104641: PUSH
104642: FOR_IN
104643: IFFALSE 104669
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
104645: LD_VAR 0 3
104649: PUSH
104650: LD_INT 1
104652: ARRAY
104653: PPUSH
104654: LD_VAR 0 3
104658: PUSH
104659: LD_INT 2
104661: ARRAY
104662: PPUSH
104663: CALL_OW 235
104667: GO 104642
104669: POP
104670: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
104671: LD_ADDR_EXP 153
104675: PUSH
104676: LD_EXP 153
104680: PPUSH
104681: LD_VAR 0 4
104685: PPUSH
104686: EMPTY
104687: PPUSH
104688: CALL_OW 1
104692: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
104693: LD_VAR 0 1
104697: PPUSH
104698: LD_INT 0
104700: PPUSH
104701: CALL_OW 505
// end ; end ;
104705: LD_VAR 0 2
104709: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
104710: LD_INT 0
104712: PPUSH
104713: PPUSH
104714: PPUSH
// if not hack in hackTanks or not vehicles then
104715: LD_VAR 0 1
104719: PUSH
104720: LD_EXP 152
104724: IN
104725: NOT
104726: PUSH
104727: LD_VAR 0 2
104731: NOT
104732: OR
104733: IFFALSE 104737
// exit ;
104735: GO 105012
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
104737: LD_ADDR_VAR 0 2
104741: PUSH
104742: LD_VAR 0 1
104746: PPUSH
104747: LD_VAR 0 2
104751: PPUSH
104752: LD_INT 1
104754: PPUSH
104755: LD_INT 1
104757: PPUSH
104758: CALL 25293 0 4
104762: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
104763: LD_ADDR_VAR 0 5
104767: PUSH
104768: LD_EXP 152
104772: PPUSH
104773: LD_VAR 0 1
104777: PPUSH
104778: CALL 24643 0 2
104782: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
104783: LD_EXP 153
104787: PUSH
104788: LD_VAR 0 5
104792: ARRAY
104793: PUSH
104794: LD_EXP 154
104798: LESS
104799: IFFALSE 104988
// begin for i := 1 to vehicles do
104801: LD_ADDR_VAR 0 4
104805: PUSH
104806: DOUBLE
104807: LD_INT 1
104809: DEC
104810: ST_TO_ADDR
104811: LD_VAR 0 2
104815: PUSH
104816: FOR_TO
104817: IFFALSE 104986
// begin if hackTanksCaptured [ index ] = hackLimit then
104819: LD_EXP 153
104823: PUSH
104824: LD_VAR 0 5
104828: ARRAY
104829: PUSH
104830: LD_EXP 154
104834: EQUAL
104835: IFFALSE 104839
// break ;
104837: GO 104986
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
104839: LD_ADDR_EXP 156
104843: PUSH
104844: LD_EXP 156
104848: PPUSH
104849: LD_VAR 0 5
104853: PPUSH
104854: LD_EXP 156
104858: PUSH
104859: LD_VAR 0 5
104863: ARRAY
104864: PUSH
104865: LD_INT 1
104867: PLUS
104868: PPUSH
104869: CALL_OW 1
104873: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
104874: LD_ADDR_EXP 153
104878: PUSH
104879: LD_EXP 153
104883: PPUSH
104884: LD_VAR 0 5
104888: PUSH
104889: LD_EXP 153
104893: PUSH
104894: LD_VAR 0 5
104898: ARRAY
104899: PUSH
104900: LD_INT 1
104902: PLUS
104903: PUSH
104904: EMPTY
104905: LIST
104906: LIST
104907: PPUSH
104908: LD_VAR 0 2
104912: PUSH
104913: LD_VAR 0 4
104917: ARRAY
104918: PUSH
104919: LD_VAR 0 2
104923: PUSH
104924: LD_VAR 0 4
104928: ARRAY
104929: PPUSH
104930: CALL_OW 255
104934: PUSH
104935: EMPTY
104936: LIST
104937: LIST
104938: PPUSH
104939: CALL 24858 0 3
104943: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
104944: LD_VAR 0 2
104948: PUSH
104949: LD_VAR 0 4
104953: ARRAY
104954: PPUSH
104955: LD_VAR 0 1
104959: PPUSH
104960: CALL_OW 255
104964: PPUSH
104965: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
104969: LD_VAR 0 2
104973: PUSH
104974: LD_VAR 0 4
104978: ARRAY
104979: PPUSH
104980: CALL_OW 141
// end ;
104984: GO 104816
104986: POP
104987: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
104988: LD_VAR 0 1
104992: PPUSH
104993: LD_EXP 153
104997: PUSH
104998: LD_VAR 0 5
105002: ARRAY
105003: PUSH
105004: LD_INT 0
105006: PLUS
105007: PPUSH
105008: CALL_OW 505
// end ;
105012: LD_VAR 0 3
105016: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
105017: LD_INT 0
105019: PPUSH
105020: PPUSH
105021: PPUSH
105022: PPUSH
// if not hack in hackTanks then
105023: LD_VAR 0 1
105027: PUSH
105028: LD_EXP 152
105032: IN
105033: NOT
105034: IFFALSE 105038
// exit ;
105036: GO 105278
// index := GetElementIndex ( hackTanks , hack ) ;
105038: LD_ADDR_VAR 0 4
105042: PUSH
105043: LD_EXP 152
105047: PPUSH
105048: LD_VAR 0 1
105052: PPUSH
105053: CALL 24643 0 2
105057: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
105058: LD_ADDR_VAR 0 3
105062: PUSH
105063: DOUBLE
105064: LD_EXP 153
105068: PUSH
105069: LD_VAR 0 4
105073: ARRAY
105074: INC
105075: ST_TO_ADDR
105076: LD_INT 1
105078: PUSH
105079: FOR_DOWNTO
105080: IFFALSE 105252
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
105082: LD_ADDR_VAR 0 5
105086: PUSH
105087: LD_EXP 153
105091: PUSH
105092: LD_VAR 0 4
105096: ARRAY
105097: PUSH
105098: LD_VAR 0 3
105102: ARRAY
105103: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
105104: LD_VAR 0 5
105108: PUSH
105109: LD_INT 1
105111: ARRAY
105112: PPUSH
105113: CALL_OW 302
105117: NOT
105118: PUSH
105119: LD_VAR 0 5
105123: PUSH
105124: LD_INT 1
105126: ARRAY
105127: PPUSH
105128: CALL_OW 255
105132: PUSH
105133: LD_VAR 0 1
105137: PPUSH
105138: CALL_OW 255
105142: NONEQUAL
105143: OR
105144: IFFALSE 105250
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
105146: LD_VAR 0 5
105150: PUSH
105151: LD_INT 1
105153: ARRAY
105154: PPUSH
105155: CALL_OW 305
105159: PUSH
105160: LD_VAR 0 5
105164: PUSH
105165: LD_INT 1
105167: ARRAY
105168: PPUSH
105169: CALL_OW 255
105173: PUSH
105174: LD_VAR 0 1
105178: PPUSH
105179: CALL_OW 255
105183: EQUAL
105184: AND
105185: IFFALSE 105209
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
105187: LD_VAR 0 5
105191: PUSH
105192: LD_INT 1
105194: ARRAY
105195: PPUSH
105196: LD_VAR 0 5
105200: PUSH
105201: LD_INT 2
105203: ARRAY
105204: PPUSH
105205: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
105209: LD_ADDR_EXP 153
105213: PUSH
105214: LD_EXP 153
105218: PPUSH
105219: LD_VAR 0 4
105223: PPUSH
105224: LD_EXP 153
105228: PUSH
105229: LD_VAR 0 4
105233: ARRAY
105234: PPUSH
105235: LD_VAR 0 3
105239: PPUSH
105240: CALL_OW 3
105244: PPUSH
105245: CALL_OW 1
105249: ST_TO_ADDR
// end ; end ;
105250: GO 105079
105252: POP
105253: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
105254: LD_VAR 0 1
105258: PPUSH
105259: LD_EXP 153
105263: PUSH
105264: LD_VAR 0 4
105268: ARRAY
105269: PUSH
105270: LD_INT 0
105272: PLUS
105273: PPUSH
105274: CALL_OW 505
// end ;
105278: LD_VAR 0 2
105282: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
105283: LD_INT 0
105285: PPUSH
105286: PPUSH
105287: PPUSH
105288: PPUSH
// if not hack in hackTanks then
105289: LD_VAR 0 1
105293: PUSH
105294: LD_EXP 152
105298: IN
105299: NOT
105300: IFFALSE 105304
// exit ;
105302: GO 105389
// index := GetElementIndex ( hackTanks , hack ) ;
105304: LD_ADDR_VAR 0 5
105308: PUSH
105309: LD_EXP 152
105313: PPUSH
105314: LD_VAR 0 1
105318: PPUSH
105319: CALL 24643 0 2
105323: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
105324: LD_ADDR_VAR 0 4
105328: PUSH
105329: DOUBLE
105330: LD_INT 1
105332: DEC
105333: ST_TO_ADDR
105334: LD_EXP 153
105338: PUSH
105339: LD_VAR 0 5
105343: ARRAY
105344: PUSH
105345: FOR_TO
105346: IFFALSE 105387
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
105348: LD_EXP 153
105352: PUSH
105353: LD_VAR 0 5
105357: ARRAY
105358: PUSH
105359: LD_VAR 0 4
105363: ARRAY
105364: PUSH
105365: LD_INT 1
105367: ARRAY
105368: PUSH
105369: LD_VAR 0 2
105373: EQUAL
105374: IFFALSE 105385
// KillUnit ( vehicle ) ;
105376: LD_VAR 0 2
105380: PPUSH
105381: CALL_OW 66
105385: GO 105345
105387: POP
105388: POP
// end ;
105389: LD_VAR 0 3
105393: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
105394: LD_EXP 157
105398: NOT
105399: IFFALSE 105434
105401: GO 105403
105403: DISABLE
// begin initMiner := true ;
105404: LD_ADDR_EXP 157
105408: PUSH
105409: LD_INT 1
105411: ST_TO_ADDR
// minersList := [ ] ;
105412: LD_ADDR_EXP 158
105416: PUSH
105417: EMPTY
105418: ST_TO_ADDR
// minerMinesList := [ ] ;
105419: LD_ADDR_EXP 159
105423: PUSH
105424: EMPTY
105425: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
105426: LD_ADDR_EXP 160
105430: PUSH
105431: LD_INT 5
105433: ST_TO_ADDR
// end ;
105434: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
105435: LD_EXP 157
105439: PUSH
105440: LD_INT 34
105442: PUSH
105443: LD_EXP 36
105447: PUSH
105448: EMPTY
105449: LIST
105450: LIST
105451: PPUSH
105452: CALL_OW 69
105456: AND
105457: IFFALSE 105920
105459: GO 105461
105461: DISABLE
105462: LD_INT 0
105464: PPUSH
105465: PPUSH
105466: PPUSH
105467: PPUSH
// begin enable ;
105468: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
105469: LD_ADDR_VAR 0 1
105473: PUSH
105474: LD_INT 34
105476: PUSH
105477: LD_EXP 36
105481: PUSH
105482: EMPTY
105483: LIST
105484: LIST
105485: PPUSH
105486: CALL_OW 69
105490: PUSH
105491: FOR_IN
105492: IFFALSE 105564
// begin if not i in minersList then
105494: LD_VAR 0 1
105498: PUSH
105499: LD_EXP 158
105503: IN
105504: NOT
105505: IFFALSE 105562
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
105507: LD_ADDR_EXP 158
105511: PUSH
105512: LD_EXP 158
105516: PPUSH
105517: LD_EXP 158
105521: PUSH
105522: LD_INT 1
105524: PLUS
105525: PPUSH
105526: LD_VAR 0 1
105530: PPUSH
105531: CALL_OW 1
105535: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
105536: LD_ADDR_EXP 159
105540: PUSH
105541: LD_EXP 159
105545: PPUSH
105546: LD_EXP 159
105550: PUSH
105551: LD_INT 1
105553: PLUS
105554: PPUSH
105555: EMPTY
105556: PPUSH
105557: CALL_OW 1
105561: ST_TO_ADDR
// end end ;
105562: GO 105491
105564: POP
105565: POP
// for i := minerMinesList downto 1 do
105566: LD_ADDR_VAR 0 1
105570: PUSH
105571: DOUBLE
105572: LD_EXP 159
105576: INC
105577: ST_TO_ADDR
105578: LD_INT 1
105580: PUSH
105581: FOR_DOWNTO
105582: IFFALSE 105918
// begin if IsLive ( minersList [ i ] ) then
105584: LD_EXP 158
105588: PUSH
105589: LD_VAR 0 1
105593: ARRAY
105594: PPUSH
105595: CALL_OW 300
105599: IFFALSE 105627
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
105601: LD_EXP 158
105605: PUSH
105606: LD_VAR 0 1
105610: ARRAY
105611: PPUSH
105612: LD_EXP 159
105616: PUSH
105617: LD_VAR 0 1
105621: ARRAY
105622: PPUSH
105623: CALL_OW 505
// if not minerMinesList [ i ] then
105627: LD_EXP 159
105631: PUSH
105632: LD_VAR 0 1
105636: ARRAY
105637: NOT
105638: IFFALSE 105642
// continue ;
105640: GO 105581
// for j := minerMinesList [ i ] downto 1 do
105642: LD_ADDR_VAR 0 2
105646: PUSH
105647: DOUBLE
105648: LD_EXP 159
105652: PUSH
105653: LD_VAR 0 1
105657: ARRAY
105658: INC
105659: ST_TO_ADDR
105660: LD_INT 1
105662: PUSH
105663: FOR_DOWNTO
105664: IFFALSE 105914
// begin side := GetSide ( minersList [ i ] ) ;
105666: LD_ADDR_VAR 0 3
105670: PUSH
105671: LD_EXP 158
105675: PUSH
105676: LD_VAR 0 1
105680: ARRAY
105681: PPUSH
105682: CALL_OW 255
105686: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
105687: LD_ADDR_VAR 0 4
105691: PUSH
105692: LD_EXP 159
105696: PUSH
105697: LD_VAR 0 1
105701: ARRAY
105702: PUSH
105703: LD_VAR 0 2
105707: ARRAY
105708: PUSH
105709: LD_INT 1
105711: ARRAY
105712: PPUSH
105713: LD_EXP 159
105717: PUSH
105718: LD_VAR 0 1
105722: ARRAY
105723: PUSH
105724: LD_VAR 0 2
105728: ARRAY
105729: PUSH
105730: LD_INT 2
105732: ARRAY
105733: PPUSH
105734: CALL_OW 428
105738: ST_TO_ADDR
// if not tmp then
105739: LD_VAR 0 4
105743: NOT
105744: IFFALSE 105748
// continue ;
105746: GO 105663
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
105748: LD_VAR 0 4
105752: PUSH
105753: LD_INT 81
105755: PUSH
105756: LD_VAR 0 3
105760: PUSH
105761: EMPTY
105762: LIST
105763: LIST
105764: PPUSH
105765: CALL_OW 69
105769: IN
105770: PUSH
105771: LD_EXP 159
105775: PUSH
105776: LD_VAR 0 1
105780: ARRAY
105781: PUSH
105782: LD_VAR 0 2
105786: ARRAY
105787: PUSH
105788: LD_INT 1
105790: ARRAY
105791: PPUSH
105792: LD_EXP 159
105796: PUSH
105797: LD_VAR 0 1
105801: ARRAY
105802: PUSH
105803: LD_VAR 0 2
105807: ARRAY
105808: PUSH
105809: LD_INT 2
105811: ARRAY
105812: PPUSH
105813: CALL_OW 458
105817: AND
105818: IFFALSE 105912
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
105820: LD_EXP 159
105824: PUSH
105825: LD_VAR 0 1
105829: ARRAY
105830: PUSH
105831: LD_VAR 0 2
105835: ARRAY
105836: PUSH
105837: LD_INT 1
105839: ARRAY
105840: PPUSH
105841: LD_EXP 159
105845: PUSH
105846: LD_VAR 0 1
105850: ARRAY
105851: PUSH
105852: LD_VAR 0 2
105856: ARRAY
105857: PUSH
105858: LD_INT 2
105860: ARRAY
105861: PPUSH
105862: LD_VAR 0 3
105866: PPUSH
105867: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
105871: LD_ADDR_EXP 159
105875: PUSH
105876: LD_EXP 159
105880: PPUSH
105881: LD_VAR 0 1
105885: PPUSH
105886: LD_EXP 159
105890: PUSH
105891: LD_VAR 0 1
105895: ARRAY
105896: PPUSH
105897: LD_VAR 0 2
105901: PPUSH
105902: CALL_OW 3
105906: PPUSH
105907: CALL_OW 1
105911: ST_TO_ADDR
// end ; end ;
105912: GO 105663
105914: POP
105915: POP
// end ;
105916: GO 105581
105918: POP
105919: POP
// end ;
105920: PPOPN 4
105922: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
105923: LD_INT 0
105925: PPUSH
105926: PPUSH
// result := false ;
105927: LD_ADDR_VAR 0 4
105931: PUSH
105932: LD_INT 0
105934: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
105935: LD_VAR 0 1
105939: PPUSH
105940: CALL_OW 264
105944: PUSH
105945: LD_EXP 36
105949: EQUAL
105950: NOT
105951: IFFALSE 105955
// exit ;
105953: GO 106195
// index := GetElementIndex ( minersList , unit ) ;
105955: LD_ADDR_VAR 0 5
105959: PUSH
105960: LD_EXP 158
105964: PPUSH
105965: LD_VAR 0 1
105969: PPUSH
105970: CALL 24643 0 2
105974: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
105975: LD_EXP 159
105979: PUSH
105980: LD_VAR 0 5
105984: ARRAY
105985: PUSH
105986: LD_EXP 160
105990: GREATEREQUAL
105991: IFFALSE 105995
// exit ;
105993: GO 106195
// ComMoveXY ( unit , x , y ) ;
105995: LD_VAR 0 1
105999: PPUSH
106000: LD_VAR 0 2
106004: PPUSH
106005: LD_VAR 0 3
106009: PPUSH
106010: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
106014: LD_INT 35
106016: PPUSH
106017: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
106021: LD_VAR 0 1
106025: PPUSH
106026: LD_VAR 0 2
106030: PPUSH
106031: LD_VAR 0 3
106035: PPUSH
106036: CALL 55415 0 3
106040: NOT
106041: PUSH
106042: LD_VAR 0 1
106046: PPUSH
106047: CALL_OW 314
106051: AND
106052: IFFALSE 106056
// exit ;
106054: GO 106195
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
106056: LD_VAR 0 2
106060: PPUSH
106061: LD_VAR 0 3
106065: PPUSH
106066: CALL_OW 428
106070: PUSH
106071: LD_VAR 0 1
106075: EQUAL
106076: PUSH
106077: LD_VAR 0 1
106081: PPUSH
106082: CALL_OW 314
106086: NOT
106087: AND
106088: IFFALSE 106014
// PlaySoundXY ( x , y , PlantMine ) ;
106090: LD_VAR 0 2
106094: PPUSH
106095: LD_VAR 0 3
106099: PPUSH
106100: LD_STRING PlantMine
106102: PPUSH
106103: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
106107: LD_VAR 0 2
106111: PPUSH
106112: LD_VAR 0 3
106116: PPUSH
106117: LD_VAR 0 1
106121: PPUSH
106122: CALL_OW 255
106126: PPUSH
106127: LD_INT 0
106129: PPUSH
106130: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
106134: LD_ADDR_EXP 159
106138: PUSH
106139: LD_EXP 159
106143: PPUSH
106144: LD_VAR 0 5
106148: PUSH
106149: LD_EXP 159
106153: PUSH
106154: LD_VAR 0 5
106158: ARRAY
106159: PUSH
106160: LD_INT 1
106162: PLUS
106163: PUSH
106164: EMPTY
106165: LIST
106166: LIST
106167: PPUSH
106168: LD_VAR 0 2
106172: PUSH
106173: LD_VAR 0 3
106177: PUSH
106178: EMPTY
106179: LIST
106180: LIST
106181: PPUSH
106182: CALL 24858 0 3
106186: ST_TO_ADDR
// result := true ;
106187: LD_ADDR_VAR 0 4
106191: PUSH
106192: LD_INT 1
106194: ST_TO_ADDR
// end ;
106195: LD_VAR 0 4
106199: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
106200: LD_INT 0
106202: PPUSH
106203: PPUSH
106204: PPUSH
// if not unit in minersList then
106205: LD_VAR 0 1
106209: PUSH
106210: LD_EXP 158
106214: IN
106215: NOT
106216: IFFALSE 106220
// exit ;
106218: GO 106612
// index := GetElementIndex ( minersList , unit ) ;
106220: LD_ADDR_VAR 0 6
106224: PUSH
106225: LD_EXP 158
106229: PPUSH
106230: LD_VAR 0 1
106234: PPUSH
106235: CALL 24643 0 2
106239: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
106240: LD_ADDR_VAR 0 5
106244: PUSH
106245: DOUBLE
106246: LD_EXP 159
106250: PUSH
106251: LD_VAR 0 6
106255: ARRAY
106256: INC
106257: ST_TO_ADDR
106258: LD_INT 1
106260: PUSH
106261: FOR_DOWNTO
106262: IFFALSE 106423
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
106264: LD_EXP 159
106268: PUSH
106269: LD_VAR 0 6
106273: ARRAY
106274: PUSH
106275: LD_VAR 0 5
106279: ARRAY
106280: PUSH
106281: LD_INT 1
106283: ARRAY
106284: PUSH
106285: LD_VAR 0 2
106289: EQUAL
106290: PUSH
106291: LD_EXP 159
106295: PUSH
106296: LD_VAR 0 6
106300: ARRAY
106301: PUSH
106302: LD_VAR 0 5
106306: ARRAY
106307: PUSH
106308: LD_INT 2
106310: ARRAY
106311: PUSH
106312: LD_VAR 0 3
106316: EQUAL
106317: AND
106318: IFFALSE 106421
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
106320: LD_EXP 159
106324: PUSH
106325: LD_VAR 0 6
106329: ARRAY
106330: PUSH
106331: LD_VAR 0 5
106335: ARRAY
106336: PUSH
106337: LD_INT 1
106339: ARRAY
106340: PPUSH
106341: LD_EXP 159
106345: PUSH
106346: LD_VAR 0 6
106350: ARRAY
106351: PUSH
106352: LD_VAR 0 5
106356: ARRAY
106357: PUSH
106358: LD_INT 2
106360: ARRAY
106361: PPUSH
106362: LD_VAR 0 1
106366: PPUSH
106367: CALL_OW 255
106371: PPUSH
106372: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
106376: LD_ADDR_EXP 159
106380: PUSH
106381: LD_EXP 159
106385: PPUSH
106386: LD_VAR 0 6
106390: PPUSH
106391: LD_EXP 159
106395: PUSH
106396: LD_VAR 0 6
106400: ARRAY
106401: PPUSH
106402: LD_VAR 0 5
106406: PPUSH
106407: CALL_OW 3
106411: PPUSH
106412: CALL_OW 1
106416: ST_TO_ADDR
// exit ;
106417: POP
106418: POP
106419: GO 106612
// end ; end ;
106421: GO 106261
106423: POP
106424: POP
// for i := minerMinesList [ index ] downto 1 do
106425: LD_ADDR_VAR 0 5
106429: PUSH
106430: DOUBLE
106431: LD_EXP 159
106435: PUSH
106436: LD_VAR 0 6
106440: ARRAY
106441: INC
106442: ST_TO_ADDR
106443: LD_INT 1
106445: PUSH
106446: FOR_DOWNTO
106447: IFFALSE 106610
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
106449: LD_EXP 159
106453: PUSH
106454: LD_VAR 0 6
106458: ARRAY
106459: PUSH
106460: LD_VAR 0 5
106464: ARRAY
106465: PUSH
106466: LD_INT 1
106468: ARRAY
106469: PPUSH
106470: LD_EXP 159
106474: PUSH
106475: LD_VAR 0 6
106479: ARRAY
106480: PUSH
106481: LD_VAR 0 5
106485: ARRAY
106486: PUSH
106487: LD_INT 2
106489: ARRAY
106490: PPUSH
106491: LD_VAR 0 2
106495: PPUSH
106496: LD_VAR 0 3
106500: PPUSH
106501: CALL_OW 298
106505: PUSH
106506: LD_INT 6
106508: LESS
106509: IFFALSE 106608
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
106511: LD_EXP 159
106515: PUSH
106516: LD_VAR 0 6
106520: ARRAY
106521: PUSH
106522: LD_VAR 0 5
106526: ARRAY
106527: PUSH
106528: LD_INT 1
106530: ARRAY
106531: PPUSH
106532: LD_EXP 159
106536: PUSH
106537: LD_VAR 0 6
106541: ARRAY
106542: PUSH
106543: LD_VAR 0 5
106547: ARRAY
106548: PUSH
106549: LD_INT 2
106551: ARRAY
106552: PPUSH
106553: LD_VAR 0 1
106557: PPUSH
106558: CALL_OW 255
106562: PPUSH
106563: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
106567: LD_ADDR_EXP 159
106571: PUSH
106572: LD_EXP 159
106576: PPUSH
106577: LD_VAR 0 6
106581: PPUSH
106582: LD_EXP 159
106586: PUSH
106587: LD_VAR 0 6
106591: ARRAY
106592: PPUSH
106593: LD_VAR 0 5
106597: PPUSH
106598: CALL_OW 3
106602: PPUSH
106603: CALL_OW 1
106607: ST_TO_ADDR
// end ; end ;
106608: GO 106446
106610: POP
106611: POP
// end ;
106612: LD_VAR 0 4
106616: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
106617: LD_INT 0
106619: PPUSH
106620: PPUSH
106621: PPUSH
106622: PPUSH
106623: PPUSH
106624: PPUSH
106625: PPUSH
106626: PPUSH
106627: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
106628: LD_VAR 0 1
106632: PPUSH
106633: CALL_OW 264
106637: PUSH
106638: LD_EXP 36
106642: EQUAL
106643: NOT
106644: PUSH
106645: LD_VAR 0 1
106649: PUSH
106650: LD_EXP 158
106654: IN
106655: NOT
106656: OR
106657: IFFALSE 106661
// exit ;
106659: GO 106983
// index := GetElementIndex ( minersList , unit ) ;
106661: LD_ADDR_VAR 0 6
106665: PUSH
106666: LD_EXP 158
106670: PPUSH
106671: LD_VAR 0 1
106675: PPUSH
106676: CALL 24643 0 2
106680: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
106681: LD_ADDR_VAR 0 8
106685: PUSH
106686: LD_EXP 160
106690: PUSH
106691: LD_EXP 159
106695: PUSH
106696: LD_VAR 0 6
106700: ARRAY
106701: MINUS
106702: ST_TO_ADDR
// if not minesFreeAmount then
106703: LD_VAR 0 8
106707: NOT
106708: IFFALSE 106712
// exit ;
106710: GO 106983
// tmp := [ ] ;
106712: LD_ADDR_VAR 0 7
106716: PUSH
106717: EMPTY
106718: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
106719: LD_ADDR_VAR 0 5
106723: PUSH
106724: DOUBLE
106725: LD_INT 1
106727: DEC
106728: ST_TO_ADDR
106729: LD_VAR 0 8
106733: PUSH
106734: FOR_TO
106735: IFFALSE 106930
// begin _d := rand ( 0 , 5 ) ;
106737: LD_ADDR_VAR 0 11
106741: PUSH
106742: LD_INT 0
106744: PPUSH
106745: LD_INT 5
106747: PPUSH
106748: CALL_OW 12
106752: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
106753: LD_ADDR_VAR 0 12
106757: PUSH
106758: LD_INT 2
106760: PPUSH
106761: LD_INT 6
106763: PPUSH
106764: CALL_OW 12
106768: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
106769: LD_ADDR_VAR 0 9
106773: PUSH
106774: LD_VAR 0 2
106778: PPUSH
106779: LD_VAR 0 11
106783: PPUSH
106784: LD_VAR 0 12
106788: PPUSH
106789: CALL_OW 272
106793: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
106794: LD_ADDR_VAR 0 10
106798: PUSH
106799: LD_VAR 0 3
106803: PPUSH
106804: LD_VAR 0 11
106808: PPUSH
106809: LD_VAR 0 12
106813: PPUSH
106814: CALL_OW 273
106818: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
106819: LD_VAR 0 9
106823: PPUSH
106824: LD_VAR 0 10
106828: PPUSH
106829: CALL_OW 488
106833: PUSH
106834: LD_VAR 0 9
106838: PUSH
106839: LD_VAR 0 10
106843: PUSH
106844: EMPTY
106845: LIST
106846: LIST
106847: PUSH
106848: LD_VAR 0 7
106852: IN
106853: NOT
106854: AND
106855: PUSH
106856: LD_VAR 0 9
106860: PPUSH
106861: LD_VAR 0 10
106865: PPUSH
106866: CALL_OW 458
106870: NOT
106871: AND
106872: IFFALSE 106914
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
106874: LD_ADDR_VAR 0 7
106878: PUSH
106879: LD_VAR 0 7
106883: PPUSH
106884: LD_VAR 0 7
106888: PUSH
106889: LD_INT 1
106891: PLUS
106892: PPUSH
106893: LD_VAR 0 9
106897: PUSH
106898: LD_VAR 0 10
106902: PUSH
106903: EMPTY
106904: LIST
106905: LIST
106906: PPUSH
106907: CALL_OW 1
106911: ST_TO_ADDR
106912: GO 106928
// i := i - 1 ;
106914: LD_ADDR_VAR 0 5
106918: PUSH
106919: LD_VAR 0 5
106923: PUSH
106924: LD_INT 1
106926: MINUS
106927: ST_TO_ADDR
// end ;
106928: GO 106734
106930: POP
106931: POP
// for i in tmp do
106932: LD_ADDR_VAR 0 5
106936: PUSH
106937: LD_VAR 0 7
106941: PUSH
106942: FOR_IN
106943: IFFALSE 106981
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
106945: LD_VAR 0 1
106949: PPUSH
106950: LD_VAR 0 5
106954: PUSH
106955: LD_INT 1
106957: ARRAY
106958: PPUSH
106959: LD_VAR 0 5
106963: PUSH
106964: LD_INT 2
106966: ARRAY
106967: PPUSH
106968: CALL 105923 0 3
106972: NOT
106973: IFFALSE 106979
// exit ;
106975: POP
106976: POP
106977: GO 106983
106979: GO 106942
106981: POP
106982: POP
// end ;
106983: LD_VAR 0 4
106987: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
106988: LD_INT 0
106990: PPUSH
106991: PPUSH
106992: PPUSH
106993: PPUSH
106994: PPUSH
106995: PPUSH
106996: PPUSH
// if not GetClass ( unit ) = class_sniper then
106997: LD_VAR 0 1
107001: PPUSH
107002: CALL_OW 257
107006: PUSH
107007: LD_INT 5
107009: EQUAL
107010: NOT
107011: IFFALSE 107015
// exit ;
107013: GO 107403
// dist := 8 ;
107015: LD_ADDR_VAR 0 5
107019: PUSH
107020: LD_INT 8
107022: ST_TO_ADDR
// viewRange := 12 ;
107023: LD_ADDR_VAR 0 7
107027: PUSH
107028: LD_INT 12
107030: ST_TO_ADDR
// side := GetSide ( unit ) ;
107031: LD_ADDR_VAR 0 6
107035: PUSH
107036: LD_VAR 0 1
107040: PPUSH
107041: CALL_OW 255
107045: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
107046: LD_INT 61
107048: PPUSH
107049: LD_VAR 0 6
107053: PPUSH
107054: CALL_OW 321
107058: PUSH
107059: LD_INT 2
107061: EQUAL
107062: IFFALSE 107072
// viewRange := 16 ;
107064: LD_ADDR_VAR 0 7
107068: PUSH
107069: LD_INT 16
107071: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
107072: LD_VAR 0 1
107076: PPUSH
107077: LD_VAR 0 2
107081: PPUSH
107082: LD_VAR 0 3
107086: PPUSH
107087: CALL_OW 297
107091: PUSH
107092: LD_VAR 0 5
107096: GREATER
107097: IFFALSE 107176
// begin ComMoveXY ( unit , x , y ) ;
107099: LD_VAR 0 1
107103: PPUSH
107104: LD_VAR 0 2
107108: PPUSH
107109: LD_VAR 0 3
107113: PPUSH
107114: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
107118: LD_INT 35
107120: PPUSH
107121: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
107125: LD_VAR 0 1
107129: PPUSH
107130: LD_VAR 0 2
107134: PPUSH
107135: LD_VAR 0 3
107139: PPUSH
107140: CALL 55415 0 3
107144: NOT
107145: IFFALSE 107149
// exit ;
107147: GO 107403
// until GetDistUnitXY ( unit , x , y ) < dist ;
107149: LD_VAR 0 1
107153: PPUSH
107154: LD_VAR 0 2
107158: PPUSH
107159: LD_VAR 0 3
107163: PPUSH
107164: CALL_OW 297
107168: PUSH
107169: LD_VAR 0 5
107173: LESS
107174: IFFALSE 107118
// end ; ComTurnXY ( unit , x , y ) ;
107176: LD_VAR 0 1
107180: PPUSH
107181: LD_VAR 0 2
107185: PPUSH
107186: LD_VAR 0 3
107190: PPUSH
107191: CALL_OW 118
// wait ( 5 ) ;
107195: LD_INT 5
107197: PPUSH
107198: CALL_OW 67
// _d := GetDir ( unit ) ;
107202: LD_ADDR_VAR 0 10
107206: PUSH
107207: LD_VAR 0 1
107211: PPUSH
107212: CALL_OW 254
107216: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
107217: LD_ADDR_VAR 0 8
107221: PUSH
107222: LD_VAR 0 1
107226: PPUSH
107227: CALL_OW 250
107231: PPUSH
107232: LD_VAR 0 10
107236: PPUSH
107237: LD_VAR 0 5
107241: PPUSH
107242: CALL_OW 272
107246: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
107247: LD_ADDR_VAR 0 9
107251: PUSH
107252: LD_VAR 0 1
107256: PPUSH
107257: CALL_OW 251
107261: PPUSH
107262: LD_VAR 0 10
107266: PPUSH
107267: LD_VAR 0 5
107271: PPUSH
107272: CALL_OW 273
107276: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
107277: LD_VAR 0 8
107281: PPUSH
107282: LD_VAR 0 9
107286: PPUSH
107287: CALL_OW 488
107291: NOT
107292: IFFALSE 107296
// exit ;
107294: GO 107403
// ComAnimCustom ( unit , 1 ) ;
107296: LD_VAR 0 1
107300: PPUSH
107301: LD_INT 1
107303: PPUSH
107304: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
107308: LD_VAR 0 8
107312: PPUSH
107313: LD_VAR 0 9
107317: PPUSH
107318: LD_VAR 0 6
107322: PPUSH
107323: LD_VAR 0 7
107327: PPUSH
107328: CALL_OW 330
// repeat wait ( 1 ) ;
107332: LD_INT 1
107334: PPUSH
107335: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
107339: LD_VAR 0 1
107343: PPUSH
107344: CALL_OW 316
107348: PUSH
107349: LD_VAR 0 1
107353: PPUSH
107354: CALL_OW 314
107358: OR
107359: PUSH
107360: LD_VAR 0 1
107364: PPUSH
107365: CALL_OW 302
107369: NOT
107370: OR
107371: PUSH
107372: LD_VAR 0 1
107376: PPUSH
107377: CALL_OW 301
107381: OR
107382: IFFALSE 107332
// RemoveSeeing ( _x , _y , side ) ;
107384: LD_VAR 0 8
107388: PPUSH
107389: LD_VAR 0 9
107393: PPUSH
107394: LD_VAR 0 6
107398: PPUSH
107399: CALL_OW 331
// end ; end_of_file
107403: LD_VAR 0 4
107407: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
107408: LD_INT 0
107410: PPUSH
107411: PPUSH
107412: PPUSH
107413: PPUSH
107414: PPUSH
107415: PPUSH
107416: PPUSH
107417: PPUSH
107418: PPUSH
107419: PPUSH
107420: PPUSH
107421: PPUSH
107422: PPUSH
107423: PPUSH
107424: PPUSH
107425: PPUSH
107426: PPUSH
107427: PPUSH
107428: PPUSH
107429: PPUSH
107430: PPUSH
107431: PPUSH
107432: PPUSH
107433: PPUSH
107434: PPUSH
107435: PPUSH
107436: PPUSH
107437: PPUSH
107438: PPUSH
107439: PPUSH
107440: PPUSH
107441: PPUSH
107442: PPUSH
107443: PPUSH
// if not list then
107444: LD_VAR 0 1
107448: NOT
107449: IFFALSE 107453
// exit ;
107451: GO 112112
// base := list [ 1 ] ;
107453: LD_ADDR_VAR 0 3
107457: PUSH
107458: LD_VAR 0 1
107462: PUSH
107463: LD_INT 1
107465: ARRAY
107466: ST_TO_ADDR
// group := list [ 2 ] ;
107467: LD_ADDR_VAR 0 4
107471: PUSH
107472: LD_VAR 0 1
107476: PUSH
107477: LD_INT 2
107479: ARRAY
107480: ST_TO_ADDR
// path := list [ 3 ] ;
107481: LD_ADDR_VAR 0 5
107485: PUSH
107486: LD_VAR 0 1
107490: PUSH
107491: LD_INT 3
107493: ARRAY
107494: ST_TO_ADDR
// flags := list [ 4 ] ;
107495: LD_ADDR_VAR 0 6
107499: PUSH
107500: LD_VAR 0 1
107504: PUSH
107505: LD_INT 4
107507: ARRAY
107508: ST_TO_ADDR
// mined := [ ] ;
107509: LD_ADDR_VAR 0 27
107513: PUSH
107514: EMPTY
107515: ST_TO_ADDR
// bombed := [ ] ;
107516: LD_ADDR_VAR 0 28
107520: PUSH
107521: EMPTY
107522: ST_TO_ADDR
// healers := [ ] ;
107523: LD_ADDR_VAR 0 31
107527: PUSH
107528: EMPTY
107529: ST_TO_ADDR
// to_heal := [ ] ;
107530: LD_ADDR_VAR 0 30
107534: PUSH
107535: EMPTY
107536: ST_TO_ADDR
// repairs := [ ] ;
107537: LD_ADDR_VAR 0 33
107541: PUSH
107542: EMPTY
107543: ST_TO_ADDR
// to_repair := [ ] ;
107544: LD_ADDR_VAR 0 32
107548: PUSH
107549: EMPTY
107550: ST_TO_ADDR
// if not group or not path then
107551: LD_VAR 0 4
107555: NOT
107556: PUSH
107557: LD_VAR 0 5
107561: NOT
107562: OR
107563: IFFALSE 107567
// exit ;
107565: GO 112112
// side := GetSide ( group [ 1 ] ) ;
107567: LD_ADDR_VAR 0 35
107571: PUSH
107572: LD_VAR 0 4
107576: PUSH
107577: LD_INT 1
107579: ARRAY
107580: PPUSH
107581: CALL_OW 255
107585: ST_TO_ADDR
// if flags then
107586: LD_VAR 0 6
107590: IFFALSE 107734
// begin f_ignore_area := flags [ 1 ] ;
107592: LD_ADDR_VAR 0 17
107596: PUSH
107597: LD_VAR 0 6
107601: PUSH
107602: LD_INT 1
107604: ARRAY
107605: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
107606: LD_ADDR_VAR 0 18
107610: PUSH
107611: LD_VAR 0 6
107615: PUSH
107616: LD_INT 2
107618: ARRAY
107619: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
107620: LD_ADDR_VAR 0 19
107624: PUSH
107625: LD_VAR 0 6
107629: PUSH
107630: LD_INT 3
107632: ARRAY
107633: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
107634: LD_ADDR_VAR 0 20
107638: PUSH
107639: LD_VAR 0 6
107643: PUSH
107644: LD_INT 4
107646: ARRAY
107647: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
107648: LD_ADDR_VAR 0 21
107652: PUSH
107653: LD_VAR 0 6
107657: PUSH
107658: LD_INT 5
107660: ARRAY
107661: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
107662: LD_ADDR_VAR 0 22
107666: PUSH
107667: LD_VAR 0 6
107671: PUSH
107672: LD_INT 6
107674: ARRAY
107675: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
107676: LD_ADDR_VAR 0 23
107680: PUSH
107681: LD_VAR 0 6
107685: PUSH
107686: LD_INT 7
107688: ARRAY
107689: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
107690: LD_ADDR_VAR 0 24
107694: PUSH
107695: LD_VAR 0 6
107699: PUSH
107700: LD_INT 8
107702: ARRAY
107703: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
107704: LD_ADDR_VAR 0 25
107708: PUSH
107709: LD_VAR 0 6
107713: PUSH
107714: LD_INT 9
107716: ARRAY
107717: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
107718: LD_ADDR_VAR 0 26
107722: PUSH
107723: LD_VAR 0 6
107727: PUSH
107728: LD_INT 10
107730: ARRAY
107731: ST_TO_ADDR
// end else
107732: GO 107814
// begin f_ignore_area := false ;
107734: LD_ADDR_VAR 0 17
107738: PUSH
107739: LD_INT 0
107741: ST_TO_ADDR
// f_capture := false ;
107742: LD_ADDR_VAR 0 18
107746: PUSH
107747: LD_INT 0
107749: ST_TO_ADDR
// f_ignore_civ := false ;
107750: LD_ADDR_VAR 0 19
107754: PUSH
107755: LD_INT 0
107757: ST_TO_ADDR
// f_murder := false ;
107758: LD_ADDR_VAR 0 20
107762: PUSH
107763: LD_INT 0
107765: ST_TO_ADDR
// f_mines := false ;
107766: LD_ADDR_VAR 0 21
107770: PUSH
107771: LD_INT 0
107773: ST_TO_ADDR
// f_repair := false ;
107774: LD_ADDR_VAR 0 22
107778: PUSH
107779: LD_INT 0
107781: ST_TO_ADDR
// f_heal := false ;
107782: LD_ADDR_VAR 0 23
107786: PUSH
107787: LD_INT 0
107789: ST_TO_ADDR
// f_spacetime := false ;
107790: LD_ADDR_VAR 0 24
107794: PUSH
107795: LD_INT 0
107797: ST_TO_ADDR
// f_attack_depot := false ;
107798: LD_ADDR_VAR 0 25
107802: PUSH
107803: LD_INT 0
107805: ST_TO_ADDR
// f_crawl := false ;
107806: LD_ADDR_VAR 0 26
107810: PUSH
107811: LD_INT 0
107813: ST_TO_ADDR
// end ; if f_heal then
107814: LD_VAR 0 23
107818: IFFALSE 107845
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
107820: LD_ADDR_VAR 0 31
107824: PUSH
107825: LD_VAR 0 4
107829: PPUSH
107830: LD_INT 25
107832: PUSH
107833: LD_INT 4
107835: PUSH
107836: EMPTY
107837: LIST
107838: LIST
107839: PPUSH
107840: CALL_OW 72
107844: ST_TO_ADDR
// if f_repair then
107845: LD_VAR 0 22
107849: IFFALSE 107876
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
107851: LD_ADDR_VAR 0 33
107855: PUSH
107856: LD_VAR 0 4
107860: PPUSH
107861: LD_INT 25
107863: PUSH
107864: LD_INT 3
107866: PUSH
107867: EMPTY
107868: LIST
107869: LIST
107870: PPUSH
107871: CALL_OW 72
107875: ST_TO_ADDR
// units_path := [ ] ;
107876: LD_ADDR_VAR 0 16
107880: PUSH
107881: EMPTY
107882: ST_TO_ADDR
// for i = 1 to group do
107883: LD_ADDR_VAR 0 7
107887: PUSH
107888: DOUBLE
107889: LD_INT 1
107891: DEC
107892: ST_TO_ADDR
107893: LD_VAR 0 4
107897: PUSH
107898: FOR_TO
107899: IFFALSE 107928
// units_path := Replace ( units_path , i , path ) ;
107901: LD_ADDR_VAR 0 16
107905: PUSH
107906: LD_VAR 0 16
107910: PPUSH
107911: LD_VAR 0 7
107915: PPUSH
107916: LD_VAR 0 5
107920: PPUSH
107921: CALL_OW 1
107925: ST_TO_ADDR
107926: GO 107898
107928: POP
107929: POP
// repeat for i = group downto 1 do
107930: LD_ADDR_VAR 0 7
107934: PUSH
107935: DOUBLE
107936: LD_VAR 0 4
107940: INC
107941: ST_TO_ADDR
107942: LD_INT 1
107944: PUSH
107945: FOR_DOWNTO
107946: IFFALSE 112068
// begin wait ( 5 ) ;
107948: LD_INT 5
107950: PPUSH
107951: CALL_OW 67
// tmp := [ ] ;
107955: LD_ADDR_VAR 0 14
107959: PUSH
107960: EMPTY
107961: ST_TO_ADDR
// attacking := false ;
107962: LD_ADDR_VAR 0 29
107966: PUSH
107967: LD_INT 0
107969: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
107970: LD_VAR 0 4
107974: PUSH
107975: LD_VAR 0 7
107979: ARRAY
107980: PPUSH
107981: CALL_OW 301
107985: PUSH
107986: LD_VAR 0 4
107990: PUSH
107991: LD_VAR 0 7
107995: ARRAY
107996: NOT
107997: OR
107998: IFFALSE 108107
// begin if GetType ( group [ i ] ) = unit_human then
108000: LD_VAR 0 4
108004: PUSH
108005: LD_VAR 0 7
108009: ARRAY
108010: PPUSH
108011: CALL_OW 247
108015: PUSH
108016: LD_INT 1
108018: EQUAL
108019: IFFALSE 108065
// begin to_heal := to_heal diff group [ i ] ;
108021: LD_ADDR_VAR 0 30
108025: PUSH
108026: LD_VAR 0 30
108030: PUSH
108031: LD_VAR 0 4
108035: PUSH
108036: LD_VAR 0 7
108040: ARRAY
108041: DIFF
108042: ST_TO_ADDR
// healers := healers diff group [ i ] ;
108043: LD_ADDR_VAR 0 31
108047: PUSH
108048: LD_VAR 0 31
108052: PUSH
108053: LD_VAR 0 4
108057: PUSH
108058: LD_VAR 0 7
108062: ARRAY
108063: DIFF
108064: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
108065: LD_ADDR_VAR 0 4
108069: PUSH
108070: LD_VAR 0 4
108074: PPUSH
108075: LD_VAR 0 7
108079: PPUSH
108080: CALL_OW 3
108084: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
108085: LD_ADDR_VAR 0 16
108089: PUSH
108090: LD_VAR 0 16
108094: PPUSH
108095: LD_VAR 0 7
108099: PPUSH
108100: CALL_OW 3
108104: ST_TO_ADDR
// continue ;
108105: GO 107945
// end ; if f_repair then
108107: LD_VAR 0 22
108111: IFFALSE 108600
// begin if GetType ( group [ i ] ) = unit_vehicle then
108113: LD_VAR 0 4
108117: PUSH
108118: LD_VAR 0 7
108122: ARRAY
108123: PPUSH
108124: CALL_OW 247
108128: PUSH
108129: LD_INT 2
108131: EQUAL
108132: IFFALSE 108322
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
108134: LD_VAR 0 4
108138: PUSH
108139: LD_VAR 0 7
108143: ARRAY
108144: PPUSH
108145: CALL_OW 256
108149: PUSH
108150: LD_INT 700
108152: LESS
108153: PUSH
108154: LD_VAR 0 4
108158: PUSH
108159: LD_VAR 0 7
108163: ARRAY
108164: PUSH
108165: LD_VAR 0 32
108169: IN
108170: NOT
108171: AND
108172: IFFALSE 108196
// to_repair := to_repair union group [ i ] ;
108174: LD_ADDR_VAR 0 32
108178: PUSH
108179: LD_VAR 0 32
108183: PUSH
108184: LD_VAR 0 4
108188: PUSH
108189: LD_VAR 0 7
108193: ARRAY
108194: UNION
108195: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
108196: LD_VAR 0 4
108200: PUSH
108201: LD_VAR 0 7
108205: ARRAY
108206: PPUSH
108207: CALL_OW 256
108211: PUSH
108212: LD_INT 1000
108214: EQUAL
108215: PUSH
108216: LD_VAR 0 4
108220: PUSH
108221: LD_VAR 0 7
108225: ARRAY
108226: PUSH
108227: LD_VAR 0 32
108231: IN
108232: AND
108233: IFFALSE 108257
// to_repair := to_repair diff group [ i ] ;
108235: LD_ADDR_VAR 0 32
108239: PUSH
108240: LD_VAR 0 32
108244: PUSH
108245: LD_VAR 0 4
108249: PUSH
108250: LD_VAR 0 7
108254: ARRAY
108255: DIFF
108256: ST_TO_ADDR
// if group [ i ] in to_repair then
108257: LD_VAR 0 4
108261: PUSH
108262: LD_VAR 0 7
108266: ARRAY
108267: PUSH
108268: LD_VAR 0 32
108272: IN
108273: IFFALSE 108320
// begin if not IsInArea ( group [ i ] , f_repair ) then
108275: LD_VAR 0 4
108279: PUSH
108280: LD_VAR 0 7
108284: ARRAY
108285: PPUSH
108286: LD_VAR 0 22
108290: PPUSH
108291: CALL_OW 308
108295: NOT
108296: IFFALSE 108318
// ComMoveToArea ( group [ i ] , f_repair ) ;
108298: LD_VAR 0 4
108302: PUSH
108303: LD_VAR 0 7
108307: ARRAY
108308: PPUSH
108309: LD_VAR 0 22
108313: PPUSH
108314: CALL_OW 113
// continue ;
108318: GO 107945
// end ; end else
108320: GO 108600
// if group [ i ] in repairs then
108322: LD_VAR 0 4
108326: PUSH
108327: LD_VAR 0 7
108331: ARRAY
108332: PUSH
108333: LD_VAR 0 33
108337: IN
108338: IFFALSE 108600
// begin if IsInUnit ( group [ i ] ) then
108340: LD_VAR 0 4
108344: PUSH
108345: LD_VAR 0 7
108349: ARRAY
108350: PPUSH
108351: CALL_OW 310
108355: IFFALSE 108423
// begin z := IsInUnit ( group [ i ] ) ;
108357: LD_ADDR_VAR 0 13
108361: PUSH
108362: LD_VAR 0 4
108366: PUSH
108367: LD_VAR 0 7
108371: ARRAY
108372: PPUSH
108373: CALL_OW 310
108377: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
108378: LD_VAR 0 13
108382: PUSH
108383: LD_VAR 0 32
108387: IN
108388: PUSH
108389: LD_VAR 0 13
108393: PPUSH
108394: LD_VAR 0 22
108398: PPUSH
108399: CALL_OW 308
108403: AND
108404: IFFALSE 108421
// ComExitVehicle ( group [ i ] ) ;
108406: LD_VAR 0 4
108410: PUSH
108411: LD_VAR 0 7
108415: ARRAY
108416: PPUSH
108417: CALL_OW 121
// end else
108421: GO 108600
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
108423: LD_ADDR_VAR 0 13
108427: PUSH
108428: LD_VAR 0 4
108432: PPUSH
108433: LD_INT 95
108435: PUSH
108436: LD_VAR 0 22
108440: PUSH
108441: EMPTY
108442: LIST
108443: LIST
108444: PUSH
108445: LD_INT 58
108447: PUSH
108448: EMPTY
108449: LIST
108450: PUSH
108451: EMPTY
108452: LIST
108453: LIST
108454: PPUSH
108455: CALL_OW 72
108459: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
108460: LD_VAR 0 4
108464: PUSH
108465: LD_VAR 0 7
108469: ARRAY
108470: PPUSH
108471: CALL_OW 314
108475: NOT
108476: IFFALSE 108598
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
108478: LD_ADDR_VAR 0 10
108482: PUSH
108483: LD_VAR 0 13
108487: PPUSH
108488: LD_VAR 0 4
108492: PUSH
108493: LD_VAR 0 7
108497: ARRAY
108498: PPUSH
108499: CALL_OW 74
108503: ST_TO_ADDR
// if not x then
108504: LD_VAR 0 10
108508: NOT
108509: IFFALSE 108513
// continue ;
108511: GO 107945
// if GetLives ( x ) < 1000 then
108513: LD_VAR 0 10
108517: PPUSH
108518: CALL_OW 256
108522: PUSH
108523: LD_INT 1000
108525: LESS
108526: IFFALSE 108550
// ComRepairVehicle ( group [ i ] , x ) else
108528: LD_VAR 0 4
108532: PUSH
108533: LD_VAR 0 7
108537: ARRAY
108538: PPUSH
108539: LD_VAR 0 10
108543: PPUSH
108544: CALL_OW 129
108548: GO 108598
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
108550: LD_VAR 0 23
108554: PUSH
108555: LD_VAR 0 4
108559: PUSH
108560: LD_VAR 0 7
108564: ARRAY
108565: PPUSH
108566: CALL_OW 256
108570: PUSH
108571: LD_INT 1000
108573: LESS
108574: AND
108575: NOT
108576: IFFALSE 108598
// ComEnterUnit ( group [ i ] , x ) ;
108578: LD_VAR 0 4
108582: PUSH
108583: LD_VAR 0 7
108587: ARRAY
108588: PPUSH
108589: LD_VAR 0 10
108593: PPUSH
108594: CALL_OW 120
// end ; continue ;
108598: GO 107945
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
108600: LD_VAR 0 23
108604: PUSH
108605: LD_VAR 0 4
108609: PUSH
108610: LD_VAR 0 7
108614: ARRAY
108615: PPUSH
108616: CALL_OW 247
108620: PUSH
108621: LD_INT 1
108623: EQUAL
108624: AND
108625: IFFALSE 109103
// begin if group [ i ] in healers then
108627: LD_VAR 0 4
108631: PUSH
108632: LD_VAR 0 7
108636: ARRAY
108637: PUSH
108638: LD_VAR 0 31
108642: IN
108643: IFFALSE 108916
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
108645: LD_VAR 0 4
108649: PUSH
108650: LD_VAR 0 7
108654: ARRAY
108655: PPUSH
108656: LD_VAR 0 23
108660: PPUSH
108661: CALL_OW 308
108665: NOT
108666: PUSH
108667: LD_VAR 0 4
108671: PUSH
108672: LD_VAR 0 7
108676: ARRAY
108677: PPUSH
108678: CALL_OW 314
108682: NOT
108683: AND
108684: IFFALSE 108708
// ComMoveToArea ( group [ i ] , f_heal ) else
108686: LD_VAR 0 4
108690: PUSH
108691: LD_VAR 0 7
108695: ARRAY
108696: PPUSH
108697: LD_VAR 0 23
108701: PPUSH
108702: CALL_OW 113
108706: GO 108914
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
108708: LD_VAR 0 4
108712: PUSH
108713: LD_VAR 0 7
108717: ARRAY
108718: PPUSH
108719: CALL 53938 0 1
108723: PPUSH
108724: CALL_OW 256
108728: PUSH
108729: LD_INT 1000
108731: EQUAL
108732: IFFALSE 108751
// ComStop ( group [ i ] ) else
108734: LD_VAR 0 4
108738: PUSH
108739: LD_VAR 0 7
108743: ARRAY
108744: PPUSH
108745: CALL_OW 141
108749: GO 108914
// if not HasTask ( group [ i ] ) and to_heal then
108751: LD_VAR 0 4
108755: PUSH
108756: LD_VAR 0 7
108760: ARRAY
108761: PPUSH
108762: CALL_OW 314
108766: NOT
108767: PUSH
108768: LD_VAR 0 30
108772: AND
108773: IFFALSE 108914
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
108775: LD_ADDR_VAR 0 13
108779: PUSH
108780: LD_VAR 0 30
108784: PPUSH
108785: LD_INT 3
108787: PUSH
108788: LD_INT 54
108790: PUSH
108791: EMPTY
108792: LIST
108793: PUSH
108794: EMPTY
108795: LIST
108796: LIST
108797: PPUSH
108798: CALL_OW 72
108802: PPUSH
108803: LD_VAR 0 4
108807: PUSH
108808: LD_VAR 0 7
108812: ARRAY
108813: PPUSH
108814: CALL_OW 74
108818: ST_TO_ADDR
// if z then
108819: LD_VAR 0 13
108823: IFFALSE 108914
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
108825: LD_INT 91
108827: PUSH
108828: LD_VAR 0 13
108832: PUSH
108833: LD_INT 10
108835: PUSH
108836: EMPTY
108837: LIST
108838: LIST
108839: LIST
108840: PUSH
108841: LD_INT 81
108843: PUSH
108844: LD_VAR 0 13
108848: PPUSH
108849: CALL_OW 255
108853: PUSH
108854: EMPTY
108855: LIST
108856: LIST
108857: PUSH
108858: EMPTY
108859: LIST
108860: LIST
108861: PPUSH
108862: CALL_OW 69
108866: PUSH
108867: LD_INT 0
108869: EQUAL
108870: IFFALSE 108894
// ComHeal ( group [ i ] , z ) else
108872: LD_VAR 0 4
108876: PUSH
108877: LD_VAR 0 7
108881: ARRAY
108882: PPUSH
108883: LD_VAR 0 13
108887: PPUSH
108888: CALL_OW 128
108892: GO 108914
// ComMoveToArea ( group [ i ] , f_heal ) ;
108894: LD_VAR 0 4
108898: PUSH
108899: LD_VAR 0 7
108903: ARRAY
108904: PPUSH
108905: LD_VAR 0 23
108909: PPUSH
108910: CALL_OW 113
// end ; continue ;
108914: GO 107945
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
108916: LD_VAR 0 4
108920: PUSH
108921: LD_VAR 0 7
108925: ARRAY
108926: PPUSH
108927: CALL_OW 256
108931: PUSH
108932: LD_INT 700
108934: LESS
108935: PUSH
108936: LD_VAR 0 4
108940: PUSH
108941: LD_VAR 0 7
108945: ARRAY
108946: PUSH
108947: LD_VAR 0 30
108951: IN
108952: NOT
108953: AND
108954: IFFALSE 108978
// to_heal := to_heal union group [ i ] ;
108956: LD_ADDR_VAR 0 30
108960: PUSH
108961: LD_VAR 0 30
108965: PUSH
108966: LD_VAR 0 4
108970: PUSH
108971: LD_VAR 0 7
108975: ARRAY
108976: UNION
108977: ST_TO_ADDR
// if group [ i ] in to_heal then
108978: LD_VAR 0 4
108982: PUSH
108983: LD_VAR 0 7
108987: ARRAY
108988: PUSH
108989: LD_VAR 0 30
108993: IN
108994: IFFALSE 109103
// begin if GetLives ( group [ i ] ) = 1000 then
108996: LD_VAR 0 4
109000: PUSH
109001: LD_VAR 0 7
109005: ARRAY
109006: PPUSH
109007: CALL_OW 256
109011: PUSH
109012: LD_INT 1000
109014: EQUAL
109015: IFFALSE 109041
// to_heal := to_heal diff group [ i ] else
109017: LD_ADDR_VAR 0 30
109021: PUSH
109022: LD_VAR 0 30
109026: PUSH
109027: LD_VAR 0 4
109031: PUSH
109032: LD_VAR 0 7
109036: ARRAY
109037: DIFF
109038: ST_TO_ADDR
109039: GO 109103
// begin if not IsInArea ( group [ i ] , to_heal ) then
109041: LD_VAR 0 4
109045: PUSH
109046: LD_VAR 0 7
109050: ARRAY
109051: PPUSH
109052: LD_VAR 0 30
109056: PPUSH
109057: CALL_OW 308
109061: NOT
109062: IFFALSE 109086
// ComMoveToArea ( group [ i ] , f_heal ) else
109064: LD_VAR 0 4
109068: PUSH
109069: LD_VAR 0 7
109073: ARRAY
109074: PPUSH
109075: LD_VAR 0 23
109079: PPUSH
109080: CALL_OW 113
109084: GO 109101
// ComHold ( group [ i ] ) ;
109086: LD_VAR 0 4
109090: PUSH
109091: LD_VAR 0 7
109095: ARRAY
109096: PPUSH
109097: CALL_OW 140
// continue ;
109101: GO 107945
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
109103: LD_VAR 0 4
109107: PUSH
109108: LD_VAR 0 7
109112: ARRAY
109113: PPUSH
109114: LD_INT 10
109116: PPUSH
109117: CALL 52358 0 2
109121: NOT
109122: PUSH
109123: LD_VAR 0 16
109127: PUSH
109128: LD_VAR 0 7
109132: ARRAY
109133: PUSH
109134: EMPTY
109135: EQUAL
109136: NOT
109137: AND
109138: IFFALSE 109404
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
109140: LD_VAR 0 4
109144: PUSH
109145: LD_VAR 0 7
109149: ARRAY
109150: PPUSH
109151: CALL_OW 262
109155: PUSH
109156: LD_INT 1
109158: PUSH
109159: LD_INT 2
109161: PUSH
109162: EMPTY
109163: LIST
109164: LIST
109165: IN
109166: IFFALSE 109207
// if GetFuel ( group [ i ] ) < 10 then
109168: LD_VAR 0 4
109172: PUSH
109173: LD_VAR 0 7
109177: ARRAY
109178: PPUSH
109179: CALL_OW 261
109183: PUSH
109184: LD_INT 10
109186: LESS
109187: IFFALSE 109207
// SetFuel ( group [ i ] , 12 ) ;
109189: LD_VAR 0 4
109193: PUSH
109194: LD_VAR 0 7
109198: ARRAY
109199: PPUSH
109200: LD_INT 12
109202: PPUSH
109203: CALL_OW 240
// if units_path [ i ] then
109207: LD_VAR 0 16
109211: PUSH
109212: LD_VAR 0 7
109216: ARRAY
109217: IFFALSE 109402
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
109219: LD_VAR 0 4
109223: PUSH
109224: LD_VAR 0 7
109228: ARRAY
109229: PPUSH
109230: LD_VAR 0 16
109234: PUSH
109235: LD_VAR 0 7
109239: ARRAY
109240: PUSH
109241: LD_INT 1
109243: ARRAY
109244: PUSH
109245: LD_INT 1
109247: ARRAY
109248: PPUSH
109249: LD_VAR 0 16
109253: PUSH
109254: LD_VAR 0 7
109258: ARRAY
109259: PUSH
109260: LD_INT 1
109262: ARRAY
109263: PUSH
109264: LD_INT 2
109266: ARRAY
109267: PPUSH
109268: CALL_OW 297
109272: PUSH
109273: LD_INT 6
109275: GREATER
109276: IFFALSE 109351
// begin if not HasTask ( group [ i ] ) then
109278: LD_VAR 0 4
109282: PUSH
109283: LD_VAR 0 7
109287: ARRAY
109288: PPUSH
109289: CALL_OW 314
109293: NOT
109294: IFFALSE 109349
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
109296: LD_VAR 0 4
109300: PUSH
109301: LD_VAR 0 7
109305: ARRAY
109306: PPUSH
109307: LD_VAR 0 16
109311: PUSH
109312: LD_VAR 0 7
109316: ARRAY
109317: PUSH
109318: LD_INT 1
109320: ARRAY
109321: PUSH
109322: LD_INT 1
109324: ARRAY
109325: PPUSH
109326: LD_VAR 0 16
109330: PUSH
109331: LD_VAR 0 7
109335: ARRAY
109336: PUSH
109337: LD_INT 1
109339: ARRAY
109340: PUSH
109341: LD_INT 2
109343: ARRAY
109344: PPUSH
109345: CALL_OW 114
// end else
109349: GO 109402
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
109351: LD_ADDR_VAR 0 15
109355: PUSH
109356: LD_VAR 0 16
109360: PUSH
109361: LD_VAR 0 7
109365: ARRAY
109366: PPUSH
109367: LD_INT 1
109369: PPUSH
109370: CALL_OW 3
109374: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
109375: LD_ADDR_VAR 0 16
109379: PUSH
109380: LD_VAR 0 16
109384: PPUSH
109385: LD_VAR 0 7
109389: PPUSH
109390: LD_VAR 0 15
109394: PPUSH
109395: CALL_OW 1
109399: ST_TO_ADDR
// continue ;
109400: GO 107945
// end ; end ; end else
109402: GO 112066
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
109404: LD_ADDR_VAR 0 14
109408: PUSH
109409: LD_INT 81
109411: PUSH
109412: LD_VAR 0 4
109416: PUSH
109417: LD_VAR 0 7
109421: ARRAY
109422: PPUSH
109423: CALL_OW 255
109427: PUSH
109428: EMPTY
109429: LIST
109430: LIST
109431: PPUSH
109432: CALL_OW 69
109436: ST_TO_ADDR
// if not tmp then
109437: LD_VAR 0 14
109441: NOT
109442: IFFALSE 109446
// continue ;
109444: GO 107945
// if f_ignore_area then
109446: LD_VAR 0 17
109450: IFFALSE 109538
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
109452: LD_ADDR_VAR 0 15
109456: PUSH
109457: LD_VAR 0 14
109461: PPUSH
109462: LD_INT 3
109464: PUSH
109465: LD_INT 92
109467: PUSH
109468: LD_VAR 0 17
109472: PUSH
109473: LD_INT 1
109475: ARRAY
109476: PUSH
109477: LD_VAR 0 17
109481: PUSH
109482: LD_INT 2
109484: ARRAY
109485: PUSH
109486: LD_VAR 0 17
109490: PUSH
109491: LD_INT 3
109493: ARRAY
109494: PUSH
109495: EMPTY
109496: LIST
109497: LIST
109498: LIST
109499: LIST
109500: PUSH
109501: EMPTY
109502: LIST
109503: LIST
109504: PPUSH
109505: CALL_OW 72
109509: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
109510: LD_VAR 0 14
109514: PUSH
109515: LD_VAR 0 15
109519: DIFF
109520: IFFALSE 109538
// tmp := tmp diff tmp2 ;
109522: LD_ADDR_VAR 0 14
109526: PUSH
109527: LD_VAR 0 14
109531: PUSH
109532: LD_VAR 0 15
109536: DIFF
109537: ST_TO_ADDR
// end ; if not f_murder then
109538: LD_VAR 0 20
109542: NOT
109543: IFFALSE 109601
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
109545: LD_ADDR_VAR 0 15
109549: PUSH
109550: LD_VAR 0 14
109554: PPUSH
109555: LD_INT 3
109557: PUSH
109558: LD_INT 50
109560: PUSH
109561: EMPTY
109562: LIST
109563: PUSH
109564: EMPTY
109565: LIST
109566: LIST
109567: PPUSH
109568: CALL_OW 72
109572: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
109573: LD_VAR 0 14
109577: PUSH
109578: LD_VAR 0 15
109582: DIFF
109583: IFFALSE 109601
// tmp := tmp diff tmp2 ;
109585: LD_ADDR_VAR 0 14
109589: PUSH
109590: LD_VAR 0 14
109594: PUSH
109595: LD_VAR 0 15
109599: DIFF
109600: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
109601: LD_ADDR_VAR 0 14
109605: PUSH
109606: LD_VAR 0 4
109610: PUSH
109611: LD_VAR 0 7
109615: ARRAY
109616: PPUSH
109617: LD_VAR 0 14
109621: PPUSH
109622: LD_INT 1
109624: PPUSH
109625: LD_INT 1
109627: PPUSH
109628: CALL 25293 0 4
109632: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
109633: LD_VAR 0 4
109637: PUSH
109638: LD_VAR 0 7
109642: ARRAY
109643: PPUSH
109644: CALL_OW 257
109648: PUSH
109649: LD_INT 1
109651: EQUAL
109652: IFFALSE 110100
// begin if WantPlant ( group [ i ] ) then
109654: LD_VAR 0 4
109658: PUSH
109659: LD_VAR 0 7
109663: ARRAY
109664: PPUSH
109665: CALL 24794 0 1
109669: IFFALSE 109673
// continue ;
109671: GO 107945
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
109673: LD_VAR 0 18
109677: PUSH
109678: LD_VAR 0 4
109682: PUSH
109683: LD_VAR 0 7
109687: ARRAY
109688: PPUSH
109689: CALL_OW 310
109693: NOT
109694: AND
109695: PUSH
109696: LD_VAR 0 14
109700: PUSH
109701: LD_INT 1
109703: ARRAY
109704: PUSH
109705: LD_VAR 0 14
109709: PPUSH
109710: LD_INT 21
109712: PUSH
109713: LD_INT 2
109715: PUSH
109716: EMPTY
109717: LIST
109718: LIST
109719: PUSH
109720: LD_INT 58
109722: PUSH
109723: EMPTY
109724: LIST
109725: PUSH
109726: EMPTY
109727: LIST
109728: LIST
109729: PPUSH
109730: CALL_OW 72
109734: IN
109735: AND
109736: IFFALSE 109772
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
109738: LD_VAR 0 4
109742: PUSH
109743: LD_VAR 0 7
109747: ARRAY
109748: PPUSH
109749: LD_VAR 0 14
109753: PUSH
109754: LD_INT 1
109756: ARRAY
109757: PPUSH
109758: CALL_OW 120
// attacking := true ;
109762: LD_ADDR_VAR 0 29
109766: PUSH
109767: LD_INT 1
109769: ST_TO_ADDR
// continue ;
109770: GO 107945
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
109772: LD_VAR 0 26
109776: PUSH
109777: LD_VAR 0 4
109781: PUSH
109782: LD_VAR 0 7
109786: ARRAY
109787: PPUSH
109788: CALL_OW 257
109792: PUSH
109793: LD_INT 1
109795: EQUAL
109796: AND
109797: PUSH
109798: LD_VAR 0 4
109802: PUSH
109803: LD_VAR 0 7
109807: ARRAY
109808: PPUSH
109809: CALL_OW 256
109813: PUSH
109814: LD_INT 800
109816: LESS
109817: AND
109818: PUSH
109819: LD_VAR 0 4
109823: PUSH
109824: LD_VAR 0 7
109828: ARRAY
109829: PPUSH
109830: CALL_OW 318
109834: NOT
109835: AND
109836: IFFALSE 109853
// ComCrawl ( group [ i ] ) ;
109838: LD_VAR 0 4
109842: PUSH
109843: LD_VAR 0 7
109847: ARRAY
109848: PPUSH
109849: CALL_OW 137
// if f_mines then
109853: LD_VAR 0 21
109857: IFFALSE 110100
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
109859: LD_VAR 0 14
109863: PUSH
109864: LD_INT 1
109866: ARRAY
109867: PPUSH
109868: CALL_OW 247
109872: PUSH
109873: LD_INT 3
109875: EQUAL
109876: PUSH
109877: LD_VAR 0 14
109881: PUSH
109882: LD_INT 1
109884: ARRAY
109885: PUSH
109886: LD_VAR 0 27
109890: IN
109891: NOT
109892: AND
109893: IFFALSE 110100
// begin x := GetX ( tmp [ 1 ] ) ;
109895: LD_ADDR_VAR 0 10
109899: PUSH
109900: LD_VAR 0 14
109904: PUSH
109905: LD_INT 1
109907: ARRAY
109908: PPUSH
109909: CALL_OW 250
109913: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
109914: LD_ADDR_VAR 0 11
109918: PUSH
109919: LD_VAR 0 14
109923: PUSH
109924: LD_INT 1
109926: ARRAY
109927: PPUSH
109928: CALL_OW 251
109932: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
109933: LD_ADDR_VAR 0 12
109937: PUSH
109938: LD_VAR 0 4
109942: PUSH
109943: LD_VAR 0 7
109947: ARRAY
109948: PPUSH
109949: CALL 52443 0 1
109953: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
109954: LD_VAR 0 4
109958: PUSH
109959: LD_VAR 0 7
109963: ARRAY
109964: PPUSH
109965: LD_VAR 0 10
109969: PPUSH
109970: LD_VAR 0 11
109974: PPUSH
109975: LD_VAR 0 14
109979: PUSH
109980: LD_INT 1
109982: ARRAY
109983: PPUSH
109984: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
109988: LD_VAR 0 4
109992: PUSH
109993: LD_VAR 0 7
109997: ARRAY
109998: PPUSH
109999: LD_VAR 0 10
110003: PPUSH
110004: LD_VAR 0 12
110008: PPUSH
110009: LD_INT 7
110011: PPUSH
110012: CALL_OW 272
110016: PPUSH
110017: LD_VAR 0 11
110021: PPUSH
110022: LD_VAR 0 12
110026: PPUSH
110027: LD_INT 7
110029: PPUSH
110030: CALL_OW 273
110034: PPUSH
110035: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
110039: LD_VAR 0 4
110043: PUSH
110044: LD_VAR 0 7
110048: ARRAY
110049: PPUSH
110050: LD_INT 71
110052: PPUSH
110053: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
110057: LD_ADDR_VAR 0 27
110061: PUSH
110062: LD_VAR 0 27
110066: PPUSH
110067: LD_VAR 0 27
110071: PUSH
110072: LD_INT 1
110074: PLUS
110075: PPUSH
110076: LD_VAR 0 14
110080: PUSH
110081: LD_INT 1
110083: ARRAY
110084: PPUSH
110085: CALL_OW 1
110089: ST_TO_ADDR
// attacking := true ;
110090: LD_ADDR_VAR 0 29
110094: PUSH
110095: LD_INT 1
110097: ST_TO_ADDR
// continue ;
110098: GO 107945
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
110100: LD_VAR 0 4
110104: PUSH
110105: LD_VAR 0 7
110109: ARRAY
110110: PPUSH
110111: CALL_OW 257
110115: PUSH
110116: LD_INT 17
110118: EQUAL
110119: PUSH
110120: LD_VAR 0 4
110124: PUSH
110125: LD_VAR 0 7
110129: ARRAY
110130: PPUSH
110131: CALL_OW 110
110135: PUSH
110136: LD_INT 71
110138: EQUAL
110139: NOT
110140: AND
110141: IFFALSE 110287
// begin attacking := false ;
110143: LD_ADDR_VAR 0 29
110147: PUSH
110148: LD_INT 0
110150: ST_TO_ADDR
// k := 5 ;
110151: LD_ADDR_VAR 0 9
110155: PUSH
110156: LD_INT 5
110158: ST_TO_ADDR
// if tmp < k then
110159: LD_VAR 0 14
110163: PUSH
110164: LD_VAR 0 9
110168: LESS
110169: IFFALSE 110181
// k := tmp ;
110171: LD_ADDR_VAR 0 9
110175: PUSH
110176: LD_VAR 0 14
110180: ST_TO_ADDR
// for j = 1 to k do
110181: LD_ADDR_VAR 0 8
110185: PUSH
110186: DOUBLE
110187: LD_INT 1
110189: DEC
110190: ST_TO_ADDR
110191: LD_VAR 0 9
110195: PUSH
110196: FOR_TO
110197: IFFALSE 110285
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
110199: LD_VAR 0 14
110203: PUSH
110204: LD_VAR 0 8
110208: ARRAY
110209: PUSH
110210: LD_VAR 0 14
110214: PPUSH
110215: LD_INT 58
110217: PUSH
110218: EMPTY
110219: LIST
110220: PPUSH
110221: CALL_OW 72
110225: IN
110226: NOT
110227: IFFALSE 110283
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
110229: LD_VAR 0 4
110233: PUSH
110234: LD_VAR 0 7
110238: ARRAY
110239: PPUSH
110240: LD_VAR 0 14
110244: PUSH
110245: LD_VAR 0 8
110249: ARRAY
110250: PPUSH
110251: CALL_OW 115
// attacking := true ;
110255: LD_ADDR_VAR 0 29
110259: PUSH
110260: LD_INT 1
110262: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
110263: LD_VAR 0 4
110267: PUSH
110268: LD_VAR 0 7
110272: ARRAY
110273: PPUSH
110274: LD_INT 71
110276: PPUSH
110277: CALL_OW 109
// continue ;
110281: GO 110196
// end ; end ;
110283: GO 110196
110285: POP
110286: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
110287: LD_VAR 0 4
110291: PUSH
110292: LD_VAR 0 7
110296: ARRAY
110297: PPUSH
110298: CALL_OW 257
110302: PUSH
110303: LD_INT 8
110305: EQUAL
110306: PUSH
110307: LD_VAR 0 4
110311: PUSH
110312: LD_VAR 0 7
110316: ARRAY
110317: PPUSH
110318: CALL_OW 264
110322: PUSH
110323: LD_INT 28
110325: PUSH
110326: LD_INT 45
110328: PUSH
110329: LD_INT 7
110331: PUSH
110332: LD_INT 47
110334: PUSH
110335: EMPTY
110336: LIST
110337: LIST
110338: LIST
110339: LIST
110340: IN
110341: OR
110342: IFFALSE 110598
// begin attacking := false ;
110344: LD_ADDR_VAR 0 29
110348: PUSH
110349: LD_INT 0
110351: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
110352: LD_VAR 0 14
110356: PUSH
110357: LD_INT 1
110359: ARRAY
110360: PPUSH
110361: CALL_OW 266
110365: PUSH
110366: LD_INT 32
110368: PUSH
110369: LD_INT 31
110371: PUSH
110372: LD_INT 33
110374: PUSH
110375: LD_INT 4
110377: PUSH
110378: LD_INT 5
110380: PUSH
110381: EMPTY
110382: LIST
110383: LIST
110384: LIST
110385: LIST
110386: LIST
110387: IN
110388: IFFALSE 110574
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
110390: LD_ADDR_VAR 0 9
110394: PUSH
110395: LD_VAR 0 14
110399: PUSH
110400: LD_INT 1
110402: ARRAY
110403: PPUSH
110404: CALL_OW 266
110408: PPUSH
110409: LD_VAR 0 14
110413: PUSH
110414: LD_INT 1
110416: ARRAY
110417: PPUSH
110418: CALL_OW 250
110422: PPUSH
110423: LD_VAR 0 14
110427: PUSH
110428: LD_INT 1
110430: ARRAY
110431: PPUSH
110432: CALL_OW 251
110436: PPUSH
110437: LD_VAR 0 14
110441: PUSH
110442: LD_INT 1
110444: ARRAY
110445: PPUSH
110446: CALL_OW 254
110450: PPUSH
110451: LD_VAR 0 14
110455: PUSH
110456: LD_INT 1
110458: ARRAY
110459: PPUSH
110460: CALL_OW 248
110464: PPUSH
110465: LD_INT 0
110467: PPUSH
110468: CALL 33813 0 6
110472: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
110473: LD_ADDR_VAR 0 8
110477: PUSH
110478: LD_VAR 0 4
110482: PUSH
110483: LD_VAR 0 7
110487: ARRAY
110488: PPUSH
110489: LD_VAR 0 9
110493: PPUSH
110494: CALL 52483 0 2
110498: ST_TO_ADDR
// if j then
110499: LD_VAR 0 8
110503: IFFALSE 110572
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
110505: LD_VAR 0 8
110509: PUSH
110510: LD_INT 1
110512: ARRAY
110513: PPUSH
110514: LD_VAR 0 8
110518: PUSH
110519: LD_INT 2
110521: ARRAY
110522: PPUSH
110523: CALL_OW 488
110527: IFFALSE 110572
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
110529: LD_VAR 0 4
110533: PUSH
110534: LD_VAR 0 7
110538: ARRAY
110539: PPUSH
110540: LD_VAR 0 8
110544: PUSH
110545: LD_INT 1
110547: ARRAY
110548: PPUSH
110549: LD_VAR 0 8
110553: PUSH
110554: LD_INT 2
110556: ARRAY
110557: PPUSH
110558: CALL_OW 116
// attacking := true ;
110562: LD_ADDR_VAR 0 29
110566: PUSH
110567: LD_INT 1
110569: ST_TO_ADDR
// continue ;
110570: GO 107945
// end ; end else
110572: GO 110598
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110574: LD_VAR 0 4
110578: PUSH
110579: LD_VAR 0 7
110583: ARRAY
110584: PPUSH
110585: LD_VAR 0 14
110589: PUSH
110590: LD_INT 1
110592: ARRAY
110593: PPUSH
110594: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
110598: LD_VAR 0 4
110602: PUSH
110603: LD_VAR 0 7
110607: ARRAY
110608: PPUSH
110609: CALL_OW 265
110613: PUSH
110614: LD_INT 11
110616: EQUAL
110617: IFFALSE 110895
// begin k := 10 ;
110619: LD_ADDR_VAR 0 9
110623: PUSH
110624: LD_INT 10
110626: ST_TO_ADDR
// x := 0 ;
110627: LD_ADDR_VAR 0 10
110631: PUSH
110632: LD_INT 0
110634: ST_TO_ADDR
// if tmp < k then
110635: LD_VAR 0 14
110639: PUSH
110640: LD_VAR 0 9
110644: LESS
110645: IFFALSE 110657
// k := tmp ;
110647: LD_ADDR_VAR 0 9
110651: PUSH
110652: LD_VAR 0 14
110656: ST_TO_ADDR
// for j = k downto 1 do
110657: LD_ADDR_VAR 0 8
110661: PUSH
110662: DOUBLE
110663: LD_VAR 0 9
110667: INC
110668: ST_TO_ADDR
110669: LD_INT 1
110671: PUSH
110672: FOR_DOWNTO
110673: IFFALSE 110748
// begin if GetType ( tmp [ j ] ) = unit_human then
110675: LD_VAR 0 14
110679: PUSH
110680: LD_VAR 0 8
110684: ARRAY
110685: PPUSH
110686: CALL_OW 247
110690: PUSH
110691: LD_INT 1
110693: EQUAL
110694: IFFALSE 110746
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
110696: LD_VAR 0 4
110700: PUSH
110701: LD_VAR 0 7
110705: ARRAY
110706: PPUSH
110707: LD_VAR 0 14
110711: PUSH
110712: LD_VAR 0 8
110716: ARRAY
110717: PPUSH
110718: CALL 52754 0 2
// x := tmp [ j ] ;
110722: LD_ADDR_VAR 0 10
110726: PUSH
110727: LD_VAR 0 14
110731: PUSH
110732: LD_VAR 0 8
110736: ARRAY
110737: ST_TO_ADDR
// attacking := true ;
110738: LD_ADDR_VAR 0 29
110742: PUSH
110743: LD_INT 1
110745: ST_TO_ADDR
// end ; end ;
110746: GO 110672
110748: POP
110749: POP
// if not x then
110750: LD_VAR 0 10
110754: NOT
110755: IFFALSE 110895
// begin attacking := true ;
110757: LD_ADDR_VAR 0 29
110761: PUSH
110762: LD_INT 1
110764: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
110765: LD_VAR 0 4
110769: PUSH
110770: LD_VAR 0 7
110774: ARRAY
110775: PPUSH
110776: CALL_OW 250
110780: PPUSH
110781: LD_VAR 0 4
110785: PUSH
110786: LD_VAR 0 7
110790: ARRAY
110791: PPUSH
110792: CALL_OW 251
110796: PPUSH
110797: CALL_OW 546
110801: PUSH
110802: LD_INT 2
110804: ARRAY
110805: PUSH
110806: LD_VAR 0 14
110810: PUSH
110811: LD_INT 1
110813: ARRAY
110814: PPUSH
110815: CALL_OW 250
110819: PPUSH
110820: LD_VAR 0 14
110824: PUSH
110825: LD_INT 1
110827: ARRAY
110828: PPUSH
110829: CALL_OW 251
110833: PPUSH
110834: CALL_OW 546
110838: PUSH
110839: LD_INT 2
110841: ARRAY
110842: EQUAL
110843: IFFALSE 110871
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
110845: LD_VAR 0 4
110849: PUSH
110850: LD_VAR 0 7
110854: ARRAY
110855: PPUSH
110856: LD_VAR 0 14
110860: PUSH
110861: LD_INT 1
110863: ARRAY
110864: PPUSH
110865: CALL 52754 0 2
110869: GO 110895
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110871: LD_VAR 0 4
110875: PUSH
110876: LD_VAR 0 7
110880: ARRAY
110881: PPUSH
110882: LD_VAR 0 14
110886: PUSH
110887: LD_INT 1
110889: ARRAY
110890: PPUSH
110891: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
110895: LD_VAR 0 4
110899: PUSH
110900: LD_VAR 0 7
110904: ARRAY
110905: PPUSH
110906: CALL_OW 264
110910: PUSH
110911: LD_INT 29
110913: EQUAL
110914: IFFALSE 111280
// begin if WantsToAttack ( group [ i ] ) in bombed then
110916: LD_VAR 0 4
110920: PUSH
110921: LD_VAR 0 7
110925: ARRAY
110926: PPUSH
110927: CALL_OW 319
110931: PUSH
110932: LD_VAR 0 28
110936: IN
110937: IFFALSE 110941
// continue ;
110939: GO 107945
// k := 8 ;
110941: LD_ADDR_VAR 0 9
110945: PUSH
110946: LD_INT 8
110948: ST_TO_ADDR
// x := 0 ;
110949: LD_ADDR_VAR 0 10
110953: PUSH
110954: LD_INT 0
110956: ST_TO_ADDR
// if tmp < k then
110957: LD_VAR 0 14
110961: PUSH
110962: LD_VAR 0 9
110966: LESS
110967: IFFALSE 110979
// k := tmp ;
110969: LD_ADDR_VAR 0 9
110973: PUSH
110974: LD_VAR 0 14
110978: ST_TO_ADDR
// for j = 1 to k do
110979: LD_ADDR_VAR 0 8
110983: PUSH
110984: DOUBLE
110985: LD_INT 1
110987: DEC
110988: ST_TO_ADDR
110989: LD_VAR 0 9
110993: PUSH
110994: FOR_TO
110995: IFFALSE 111127
// begin if GetType ( tmp [ j ] ) = unit_building then
110997: LD_VAR 0 14
111001: PUSH
111002: LD_VAR 0 8
111006: ARRAY
111007: PPUSH
111008: CALL_OW 247
111012: PUSH
111013: LD_INT 3
111015: EQUAL
111016: IFFALSE 111125
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
111018: LD_VAR 0 14
111022: PUSH
111023: LD_VAR 0 8
111027: ARRAY
111028: PUSH
111029: LD_VAR 0 28
111033: IN
111034: NOT
111035: PUSH
111036: LD_VAR 0 14
111040: PUSH
111041: LD_VAR 0 8
111045: ARRAY
111046: PPUSH
111047: CALL_OW 313
111051: AND
111052: IFFALSE 111125
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
111054: LD_VAR 0 4
111058: PUSH
111059: LD_VAR 0 7
111063: ARRAY
111064: PPUSH
111065: LD_VAR 0 14
111069: PUSH
111070: LD_VAR 0 8
111074: ARRAY
111075: PPUSH
111076: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
111080: LD_ADDR_VAR 0 28
111084: PUSH
111085: LD_VAR 0 28
111089: PPUSH
111090: LD_VAR 0 28
111094: PUSH
111095: LD_INT 1
111097: PLUS
111098: PPUSH
111099: LD_VAR 0 14
111103: PUSH
111104: LD_VAR 0 8
111108: ARRAY
111109: PPUSH
111110: CALL_OW 1
111114: ST_TO_ADDR
// attacking := true ;
111115: LD_ADDR_VAR 0 29
111119: PUSH
111120: LD_INT 1
111122: ST_TO_ADDR
// break ;
111123: GO 111127
// end ; end ;
111125: GO 110994
111127: POP
111128: POP
// if not attacking and f_attack_depot then
111129: LD_VAR 0 29
111133: NOT
111134: PUSH
111135: LD_VAR 0 25
111139: AND
111140: IFFALSE 111235
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
111142: LD_ADDR_VAR 0 13
111146: PUSH
111147: LD_VAR 0 14
111151: PPUSH
111152: LD_INT 2
111154: PUSH
111155: LD_INT 30
111157: PUSH
111158: LD_INT 0
111160: PUSH
111161: EMPTY
111162: LIST
111163: LIST
111164: PUSH
111165: LD_INT 30
111167: PUSH
111168: LD_INT 1
111170: PUSH
111171: EMPTY
111172: LIST
111173: LIST
111174: PUSH
111175: EMPTY
111176: LIST
111177: LIST
111178: LIST
111179: PPUSH
111180: CALL_OW 72
111184: ST_TO_ADDR
// if z then
111185: LD_VAR 0 13
111189: IFFALSE 111235
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
111191: LD_VAR 0 4
111195: PUSH
111196: LD_VAR 0 7
111200: ARRAY
111201: PPUSH
111202: LD_VAR 0 13
111206: PPUSH
111207: LD_VAR 0 4
111211: PUSH
111212: LD_VAR 0 7
111216: ARRAY
111217: PPUSH
111218: CALL_OW 74
111222: PPUSH
111223: CALL_OW 115
// attacking := true ;
111227: LD_ADDR_VAR 0 29
111231: PUSH
111232: LD_INT 1
111234: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
111235: LD_VAR 0 4
111239: PUSH
111240: LD_VAR 0 7
111244: ARRAY
111245: PPUSH
111246: CALL_OW 256
111250: PUSH
111251: LD_INT 500
111253: LESS
111254: IFFALSE 111280
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
111256: LD_VAR 0 4
111260: PUSH
111261: LD_VAR 0 7
111265: ARRAY
111266: PPUSH
111267: LD_VAR 0 14
111271: PUSH
111272: LD_INT 1
111274: ARRAY
111275: PPUSH
111276: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
111280: LD_VAR 0 4
111284: PUSH
111285: LD_VAR 0 7
111289: ARRAY
111290: PPUSH
111291: CALL_OW 264
111295: PUSH
111296: LD_INT 49
111298: EQUAL
111299: IFFALSE 111420
// begin if not HasTask ( group [ i ] ) then
111301: LD_VAR 0 4
111305: PUSH
111306: LD_VAR 0 7
111310: ARRAY
111311: PPUSH
111312: CALL_OW 314
111316: NOT
111317: IFFALSE 111420
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
111319: LD_ADDR_VAR 0 9
111323: PUSH
111324: LD_INT 81
111326: PUSH
111327: LD_VAR 0 4
111331: PUSH
111332: LD_VAR 0 7
111336: ARRAY
111337: PPUSH
111338: CALL_OW 255
111342: PUSH
111343: EMPTY
111344: LIST
111345: LIST
111346: PPUSH
111347: CALL_OW 69
111351: PPUSH
111352: LD_VAR 0 4
111356: PUSH
111357: LD_VAR 0 7
111361: ARRAY
111362: PPUSH
111363: CALL_OW 74
111367: ST_TO_ADDR
// if k then
111368: LD_VAR 0 9
111372: IFFALSE 111420
// if GetDistUnits ( group [ i ] , k ) > 10 then
111374: LD_VAR 0 4
111378: PUSH
111379: LD_VAR 0 7
111383: ARRAY
111384: PPUSH
111385: LD_VAR 0 9
111389: PPUSH
111390: CALL_OW 296
111394: PUSH
111395: LD_INT 10
111397: GREATER
111398: IFFALSE 111420
// ComMoveUnit ( group [ i ] , k ) ;
111400: LD_VAR 0 4
111404: PUSH
111405: LD_VAR 0 7
111409: ARRAY
111410: PPUSH
111411: LD_VAR 0 9
111415: PPUSH
111416: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
111420: LD_VAR 0 4
111424: PUSH
111425: LD_VAR 0 7
111429: ARRAY
111430: PPUSH
111431: CALL_OW 256
111435: PUSH
111436: LD_INT 250
111438: LESS
111439: PUSH
111440: LD_VAR 0 4
111444: PUSH
111445: LD_VAR 0 7
111449: ARRAY
111450: PUSH
111451: LD_INT 21
111453: PUSH
111454: LD_INT 2
111456: PUSH
111457: EMPTY
111458: LIST
111459: LIST
111460: PUSH
111461: LD_INT 23
111463: PUSH
111464: LD_INT 2
111466: PUSH
111467: EMPTY
111468: LIST
111469: LIST
111470: PUSH
111471: EMPTY
111472: LIST
111473: LIST
111474: PPUSH
111475: CALL_OW 69
111479: IN
111480: AND
111481: IFFALSE 111606
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
111483: LD_ADDR_VAR 0 9
111487: PUSH
111488: LD_OWVAR 3
111492: PUSH
111493: LD_VAR 0 4
111497: PUSH
111498: LD_VAR 0 7
111502: ARRAY
111503: DIFF
111504: PPUSH
111505: LD_VAR 0 4
111509: PUSH
111510: LD_VAR 0 7
111514: ARRAY
111515: PPUSH
111516: CALL_OW 74
111520: ST_TO_ADDR
// if not k then
111521: LD_VAR 0 9
111525: NOT
111526: IFFALSE 111530
// continue ;
111528: GO 107945
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
111530: LD_VAR 0 9
111534: PUSH
111535: LD_INT 81
111537: PUSH
111538: LD_VAR 0 4
111542: PUSH
111543: LD_VAR 0 7
111547: ARRAY
111548: PPUSH
111549: CALL_OW 255
111553: PUSH
111554: EMPTY
111555: LIST
111556: LIST
111557: PPUSH
111558: CALL_OW 69
111562: IN
111563: PUSH
111564: LD_VAR 0 9
111568: PPUSH
111569: LD_VAR 0 4
111573: PUSH
111574: LD_VAR 0 7
111578: ARRAY
111579: PPUSH
111580: CALL_OW 296
111584: PUSH
111585: LD_INT 5
111587: LESS
111588: AND
111589: IFFALSE 111606
// ComAutodestruct ( group [ i ] ) ;
111591: LD_VAR 0 4
111595: PUSH
111596: LD_VAR 0 7
111600: ARRAY
111601: PPUSH
111602: CALL 52652 0 1
// end ; if f_attack_depot then
111606: LD_VAR 0 25
111610: IFFALSE 111722
// begin k := 6 ;
111612: LD_ADDR_VAR 0 9
111616: PUSH
111617: LD_INT 6
111619: ST_TO_ADDR
// if tmp < k then
111620: LD_VAR 0 14
111624: PUSH
111625: LD_VAR 0 9
111629: LESS
111630: IFFALSE 111642
// k := tmp ;
111632: LD_ADDR_VAR 0 9
111636: PUSH
111637: LD_VAR 0 14
111641: ST_TO_ADDR
// for j = 1 to k do
111642: LD_ADDR_VAR 0 8
111646: PUSH
111647: DOUBLE
111648: LD_INT 1
111650: DEC
111651: ST_TO_ADDR
111652: LD_VAR 0 9
111656: PUSH
111657: FOR_TO
111658: IFFALSE 111720
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
111660: LD_VAR 0 8
111664: PPUSH
111665: CALL_OW 266
111669: PUSH
111670: LD_INT 0
111672: PUSH
111673: LD_INT 1
111675: PUSH
111676: EMPTY
111677: LIST
111678: LIST
111679: IN
111680: IFFALSE 111718
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
111682: LD_VAR 0 4
111686: PUSH
111687: LD_VAR 0 7
111691: ARRAY
111692: PPUSH
111693: LD_VAR 0 14
111697: PUSH
111698: LD_VAR 0 8
111702: ARRAY
111703: PPUSH
111704: CALL_OW 115
// attacking := true ;
111708: LD_ADDR_VAR 0 29
111712: PUSH
111713: LD_INT 1
111715: ST_TO_ADDR
// break ;
111716: GO 111720
// end ;
111718: GO 111657
111720: POP
111721: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
111722: LD_VAR 0 4
111726: PUSH
111727: LD_VAR 0 7
111731: ARRAY
111732: PPUSH
111733: CALL_OW 302
111737: PUSH
111738: LD_VAR 0 29
111742: NOT
111743: AND
111744: IFFALSE 112066
// begin if GetTag ( group [ i ] ) = 71 then
111746: LD_VAR 0 4
111750: PUSH
111751: LD_VAR 0 7
111755: ARRAY
111756: PPUSH
111757: CALL_OW 110
111761: PUSH
111762: LD_INT 71
111764: EQUAL
111765: IFFALSE 111806
// begin if HasTask ( group [ i ] ) then
111767: LD_VAR 0 4
111771: PUSH
111772: LD_VAR 0 7
111776: ARRAY
111777: PPUSH
111778: CALL_OW 314
111782: IFFALSE 111788
// continue else
111784: GO 107945
111786: GO 111806
// SetTag ( group [ i ] , 0 ) ;
111788: LD_VAR 0 4
111792: PUSH
111793: LD_VAR 0 7
111797: ARRAY
111798: PPUSH
111799: LD_INT 0
111801: PPUSH
111802: CALL_OW 109
// end ; k := 8 ;
111806: LD_ADDR_VAR 0 9
111810: PUSH
111811: LD_INT 8
111813: ST_TO_ADDR
// x := 0 ;
111814: LD_ADDR_VAR 0 10
111818: PUSH
111819: LD_INT 0
111821: ST_TO_ADDR
// if tmp < k then
111822: LD_VAR 0 14
111826: PUSH
111827: LD_VAR 0 9
111831: LESS
111832: IFFALSE 111844
// k := tmp ;
111834: LD_ADDR_VAR 0 9
111838: PUSH
111839: LD_VAR 0 14
111843: ST_TO_ADDR
// for j = 1 to k do
111844: LD_ADDR_VAR 0 8
111848: PUSH
111849: DOUBLE
111850: LD_INT 1
111852: DEC
111853: ST_TO_ADDR
111854: LD_VAR 0 9
111858: PUSH
111859: FOR_TO
111860: IFFALSE 111958
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
111862: LD_VAR 0 14
111866: PUSH
111867: LD_VAR 0 8
111871: ARRAY
111872: PPUSH
111873: CALL_OW 247
111877: PUSH
111878: LD_INT 1
111880: EQUAL
111881: PUSH
111882: LD_VAR 0 14
111886: PUSH
111887: LD_VAR 0 8
111891: ARRAY
111892: PPUSH
111893: CALL_OW 256
111897: PUSH
111898: LD_INT 250
111900: LESS
111901: PUSH
111902: LD_VAR 0 20
111906: AND
111907: PUSH
111908: LD_VAR 0 20
111912: NOT
111913: PUSH
111914: LD_VAR 0 14
111918: PUSH
111919: LD_VAR 0 8
111923: ARRAY
111924: PPUSH
111925: CALL_OW 256
111929: PUSH
111930: LD_INT 250
111932: GREATEREQUAL
111933: AND
111934: OR
111935: AND
111936: IFFALSE 111956
// begin x := tmp [ j ] ;
111938: LD_ADDR_VAR 0 10
111942: PUSH
111943: LD_VAR 0 14
111947: PUSH
111948: LD_VAR 0 8
111952: ARRAY
111953: ST_TO_ADDR
// break ;
111954: GO 111958
// end ;
111956: GO 111859
111958: POP
111959: POP
// if x then
111960: LD_VAR 0 10
111964: IFFALSE 111988
// ComAttackUnit ( group [ i ] , x ) else
111966: LD_VAR 0 4
111970: PUSH
111971: LD_VAR 0 7
111975: ARRAY
111976: PPUSH
111977: LD_VAR 0 10
111981: PPUSH
111982: CALL_OW 115
111986: GO 112012
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
111988: LD_VAR 0 4
111992: PUSH
111993: LD_VAR 0 7
111997: ARRAY
111998: PPUSH
111999: LD_VAR 0 14
112003: PUSH
112004: LD_INT 1
112006: ARRAY
112007: PPUSH
112008: CALL_OW 115
// if not HasTask ( group [ i ] ) then
112012: LD_VAR 0 4
112016: PUSH
112017: LD_VAR 0 7
112021: ARRAY
112022: PPUSH
112023: CALL_OW 314
112027: NOT
112028: IFFALSE 112066
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
112030: LD_VAR 0 4
112034: PUSH
112035: LD_VAR 0 7
112039: ARRAY
112040: PPUSH
112041: LD_VAR 0 14
112045: PPUSH
112046: LD_VAR 0 4
112050: PUSH
112051: LD_VAR 0 7
112055: ARRAY
112056: PPUSH
112057: CALL_OW 74
112061: PPUSH
112062: CALL_OW 115
// end ; end ; end ;
112066: GO 107945
112068: POP
112069: POP
// wait ( 0 0$2 ) ;
112070: LD_INT 70
112072: PPUSH
112073: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
112077: LD_VAR 0 4
112081: NOT
112082: PUSH
112083: LD_VAR 0 4
112087: PUSH
112088: EMPTY
112089: EQUAL
112090: OR
112091: PUSH
112092: LD_INT 81
112094: PUSH
112095: LD_VAR 0 35
112099: PUSH
112100: EMPTY
112101: LIST
112102: LIST
112103: PPUSH
112104: CALL_OW 69
112108: NOT
112109: OR
112110: IFFALSE 107930
// end ;
112112: LD_VAR 0 2
112116: RET
// export function BasicDefend ( base , solds ) ; var enemy , e , side , i , hex ; begin
112117: LD_INT 0
112119: PPUSH
112120: PPUSH
112121: PPUSH
112122: PPUSH
112123: PPUSH
112124: PPUSH
// if not base or not mc_bases [ base ] or not solds then
112125: LD_VAR 0 1
112129: NOT
112130: PUSH
112131: LD_EXP 50
112135: PUSH
112136: LD_VAR 0 1
112140: ARRAY
112141: NOT
112142: OR
112143: PUSH
112144: LD_VAR 0 2
112148: NOT
112149: OR
112150: IFFALSE 112154
// exit ;
112152: GO 112708
// side := mc_sides [ base ] ;
112154: LD_ADDR_VAR 0 6
112158: PUSH
112159: LD_EXP 76
112163: PUSH
112164: LD_VAR 0 1
112168: ARRAY
112169: ST_TO_ADDR
// if not side then
112170: LD_VAR 0 6
112174: NOT
112175: IFFALSE 112179
// exit ;
112177: GO 112708
// for i in solds do
112179: LD_ADDR_VAR 0 7
112183: PUSH
112184: LD_VAR 0 2
112188: PUSH
112189: FOR_IN
112190: IFFALSE 112251
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
112192: LD_VAR 0 7
112196: PPUSH
112197: CALL_OW 310
112201: PPUSH
112202: CALL_OW 266
112206: PUSH
112207: LD_INT 32
112209: PUSH
112210: LD_INT 31
112212: PUSH
112213: EMPTY
112214: LIST
112215: LIST
112216: IN
112217: IFFALSE 112237
// solds := solds diff i else
112219: LD_ADDR_VAR 0 2
112223: PUSH
112224: LD_VAR 0 2
112228: PUSH
112229: LD_VAR 0 7
112233: DIFF
112234: ST_TO_ADDR
112235: GO 112249
// SetTag ( i , 18 ) ;
112237: LD_VAR 0 7
112241: PPUSH
112242: LD_INT 18
112244: PPUSH
112245: CALL_OW 109
112249: GO 112189
112251: POP
112252: POP
// if not solds then
112253: LD_VAR 0 2
112257: NOT
112258: IFFALSE 112262
// exit ;
112260: GO 112708
// repeat wait ( 0 0$2 ) ;
112262: LD_INT 70
112264: PPUSH
112265: CALL_OW 67
// enemy := mc_scan [ base ] ;
112269: LD_ADDR_VAR 0 4
112273: PUSH
112274: LD_EXP 73
112278: PUSH
112279: LD_VAR 0 1
112283: ARRAY
112284: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
112285: LD_EXP 50
112289: PUSH
112290: LD_VAR 0 1
112294: ARRAY
112295: NOT
112296: PUSH
112297: LD_EXP 50
112301: PUSH
112302: LD_VAR 0 1
112306: ARRAY
112307: PUSH
112308: EMPTY
112309: EQUAL
112310: OR
112311: IFFALSE 112348
// begin for i in solds do
112313: LD_ADDR_VAR 0 7
112317: PUSH
112318: LD_VAR 0 2
112322: PUSH
112323: FOR_IN
112324: IFFALSE 112337
// ComStop ( i ) ;
112326: LD_VAR 0 7
112330: PPUSH
112331: CALL_OW 141
112335: GO 112323
112337: POP
112338: POP
// solds := [ ] ;
112339: LD_ADDR_VAR 0 2
112343: PUSH
112344: EMPTY
112345: ST_TO_ADDR
// exit ;
112346: GO 112708
// end ; for i in solds do
112348: LD_ADDR_VAR 0 7
112352: PUSH
112353: LD_VAR 0 2
112357: PUSH
112358: FOR_IN
112359: IFFALSE 112680
// begin if IsInUnit ( i ) then
112361: LD_VAR 0 7
112365: PPUSH
112366: CALL_OW 310
112370: IFFALSE 112381
// ComExitBuilding ( i ) ;
112372: LD_VAR 0 7
112376: PPUSH
112377: CALL_OW 122
// if GetLives ( i ) > 500 then
112381: LD_VAR 0 7
112385: PPUSH
112386: CALL_OW 256
112390: PUSH
112391: LD_INT 500
112393: GREATER
112394: IFFALSE 112447
// begin e := NearestUnitToUnit ( enemy , i ) ;
112396: LD_ADDR_VAR 0 5
112400: PUSH
112401: LD_VAR 0 4
112405: PPUSH
112406: LD_VAR 0 7
112410: PPUSH
112411: CALL_OW 74
112415: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
112416: LD_VAR 0 7
112420: PPUSH
112421: LD_VAR 0 5
112425: PPUSH
112426: CALL_OW 250
112430: PPUSH
112431: LD_VAR 0 5
112435: PPUSH
112436: CALL_OW 251
112440: PPUSH
112441: CALL_OW 114
// end else
112445: GO 112678
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
112447: LD_VAR 0 7
112451: PPUSH
112452: LD_EXP 50
112456: PUSH
112457: LD_VAR 0 1
112461: ARRAY
112462: PPUSH
112463: LD_INT 2
112465: PUSH
112466: LD_INT 30
112468: PUSH
112469: LD_INT 0
112471: PUSH
112472: EMPTY
112473: LIST
112474: LIST
112475: PUSH
112476: LD_INT 30
112478: PUSH
112479: LD_INT 1
112481: PUSH
112482: EMPTY
112483: LIST
112484: LIST
112485: PUSH
112486: LD_INT 30
112488: PUSH
112489: LD_INT 6
112491: PUSH
112492: EMPTY
112493: LIST
112494: LIST
112495: PUSH
112496: EMPTY
112497: LIST
112498: LIST
112499: LIST
112500: LIST
112501: PPUSH
112502: CALL_OW 72
112506: PPUSH
112507: LD_VAR 0 7
112511: PPUSH
112512: CALL_OW 74
112516: PPUSH
112517: CALL_OW 296
112521: PUSH
112522: LD_INT 10
112524: GREATER
112525: IFFALSE 112678
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
112527: LD_ADDR_VAR 0 8
112531: PUSH
112532: LD_EXP 50
112536: PUSH
112537: LD_VAR 0 1
112541: ARRAY
112542: PPUSH
112543: LD_INT 2
112545: PUSH
112546: LD_INT 30
112548: PUSH
112549: LD_INT 0
112551: PUSH
112552: EMPTY
112553: LIST
112554: LIST
112555: PUSH
112556: LD_INT 30
112558: PUSH
112559: LD_INT 1
112561: PUSH
112562: EMPTY
112563: LIST
112564: LIST
112565: PUSH
112566: LD_INT 30
112568: PUSH
112569: LD_INT 6
112571: PUSH
112572: EMPTY
112573: LIST
112574: LIST
112575: PUSH
112576: EMPTY
112577: LIST
112578: LIST
112579: LIST
112580: LIST
112581: PPUSH
112582: CALL_OW 72
112586: PPUSH
112587: LD_VAR 0 7
112591: PPUSH
112592: CALL_OW 74
112596: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
112597: LD_VAR 0 7
112601: PPUSH
112602: LD_VAR 0 8
112606: PPUSH
112607: CALL_OW 250
112611: PPUSH
112612: LD_INT 3
112614: PPUSH
112615: LD_INT 5
112617: PPUSH
112618: CALL_OW 272
112622: PPUSH
112623: LD_VAR 0 8
112627: PPUSH
112628: CALL_OW 251
112632: PPUSH
112633: LD_INT 3
112635: PPUSH
112636: LD_INT 5
112638: PPUSH
112639: CALL_OW 273
112643: PPUSH
112644: CALL_OW 111
// SetTag ( i , 0 ) ;
112648: LD_VAR 0 7
112652: PPUSH
112653: LD_INT 0
112655: PPUSH
112656: CALL_OW 109
// solds := solds diff i ;
112660: LD_ADDR_VAR 0 2
112664: PUSH
112665: LD_VAR 0 2
112669: PUSH
112670: LD_VAR 0 7
112674: DIFF
112675: ST_TO_ADDR
// continue ;
112676: GO 112358
// end ; end ;
112678: GO 112358
112680: POP
112681: POP
// until not solds or not enemy ;
112682: LD_VAR 0 2
112686: NOT
112687: PUSH
112688: LD_VAR 0 4
112692: NOT
112693: OR
112694: IFFALSE 112262
// MC_Reset ( base , 18 ) ;
112696: LD_VAR 0 1
112700: PPUSH
112701: LD_INT 18
112703: PPUSH
112704: CALL 63749 0 2
// end ;
112708: LD_VAR 0 3
112712: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
112713: LD_INT 0
112715: PPUSH
112716: PPUSH
112717: PPUSH
112718: PPUSH
112719: PPUSH
112720: PPUSH
112721: PPUSH
112722: PPUSH
112723: PPUSH
112724: PPUSH
112725: PPUSH
112726: PPUSH
112727: PPUSH
112728: PPUSH
112729: PPUSH
112730: PPUSH
112731: PPUSH
112732: PPUSH
112733: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
112734: LD_ADDR_VAR 0 12
112738: PUSH
112739: LD_EXP 50
112743: PUSH
112744: LD_VAR 0 1
112748: ARRAY
112749: PPUSH
112750: LD_INT 25
112752: PUSH
112753: LD_INT 3
112755: PUSH
112756: EMPTY
112757: LIST
112758: LIST
112759: PPUSH
112760: CALL_OW 72
112764: ST_TO_ADDR
// if mc_remote_driver [ base ] then
112765: LD_EXP 90
112769: PUSH
112770: LD_VAR 0 1
112774: ARRAY
112775: IFFALSE 112799
// mechs := mechs diff mc_remote_driver [ base ] ;
112777: LD_ADDR_VAR 0 12
112781: PUSH
112782: LD_VAR 0 12
112786: PUSH
112787: LD_EXP 90
112791: PUSH
112792: LD_VAR 0 1
112796: ARRAY
112797: DIFF
112798: ST_TO_ADDR
// for i in mechs do
112799: LD_ADDR_VAR 0 4
112803: PUSH
112804: LD_VAR 0 12
112808: PUSH
112809: FOR_IN
112810: IFFALSE 112845
// if GetTag ( i ) > 0 then
112812: LD_VAR 0 4
112816: PPUSH
112817: CALL_OW 110
112821: PUSH
112822: LD_INT 0
112824: GREATER
112825: IFFALSE 112843
// mechs := mechs diff i ;
112827: LD_ADDR_VAR 0 12
112831: PUSH
112832: LD_VAR 0 12
112836: PUSH
112837: LD_VAR 0 4
112841: DIFF
112842: ST_TO_ADDR
112843: GO 112809
112845: POP
112846: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
112847: LD_ADDR_VAR 0 8
112851: PUSH
112852: LD_EXP 50
112856: PUSH
112857: LD_VAR 0 1
112861: ARRAY
112862: PPUSH
112863: LD_INT 2
112865: PUSH
112866: LD_INT 25
112868: PUSH
112869: LD_INT 1
112871: PUSH
112872: EMPTY
112873: LIST
112874: LIST
112875: PUSH
112876: LD_INT 25
112878: PUSH
112879: LD_INT 5
112881: PUSH
112882: EMPTY
112883: LIST
112884: LIST
112885: PUSH
112886: LD_INT 25
112888: PUSH
112889: LD_INT 8
112891: PUSH
112892: EMPTY
112893: LIST
112894: LIST
112895: PUSH
112896: LD_INT 25
112898: PUSH
112899: LD_INT 9
112901: PUSH
112902: EMPTY
112903: LIST
112904: LIST
112905: PUSH
112906: EMPTY
112907: LIST
112908: LIST
112909: LIST
112910: LIST
112911: LIST
112912: PPUSH
112913: CALL_OW 72
112917: ST_TO_ADDR
// if not defenders and not solds then
112918: LD_VAR 0 2
112922: NOT
112923: PUSH
112924: LD_VAR 0 8
112928: NOT
112929: AND
112930: IFFALSE 112934
// exit ;
112932: GO 114704
// depot_under_attack := false ;
112934: LD_ADDR_VAR 0 16
112938: PUSH
112939: LD_INT 0
112941: ST_TO_ADDR
// sold_defenders := [ ] ;
112942: LD_ADDR_VAR 0 17
112946: PUSH
112947: EMPTY
112948: ST_TO_ADDR
// if mechs then
112949: LD_VAR 0 12
112953: IFFALSE 113106
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
112955: LD_ADDR_VAR 0 4
112959: PUSH
112960: LD_VAR 0 2
112964: PPUSH
112965: LD_INT 21
112967: PUSH
112968: LD_INT 2
112970: PUSH
112971: EMPTY
112972: LIST
112973: LIST
112974: PPUSH
112975: CALL_OW 72
112979: PUSH
112980: FOR_IN
112981: IFFALSE 113104
// begin if GetTag ( i ) <> 20 then
112983: LD_VAR 0 4
112987: PPUSH
112988: CALL_OW 110
112992: PUSH
112993: LD_INT 20
112995: NONEQUAL
112996: IFFALSE 113010
// SetTag ( i , 20 ) ;
112998: LD_VAR 0 4
113002: PPUSH
113003: LD_INT 20
113005: PPUSH
113006: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
113010: LD_VAR 0 4
113014: PPUSH
113015: CALL_OW 263
113019: PUSH
113020: LD_INT 1
113022: EQUAL
113023: PUSH
113024: LD_VAR 0 4
113028: PPUSH
113029: CALL_OW 311
113033: NOT
113034: AND
113035: IFFALSE 113102
// begin un := mechs [ 1 ] ;
113037: LD_ADDR_VAR 0 10
113041: PUSH
113042: LD_VAR 0 12
113046: PUSH
113047: LD_INT 1
113049: ARRAY
113050: ST_TO_ADDR
// ComExit ( un ) ;
113051: LD_VAR 0 10
113055: PPUSH
113056: CALL 56997 0 1
// AddComEnterUnit ( un , i ) ;
113060: LD_VAR 0 10
113064: PPUSH
113065: LD_VAR 0 4
113069: PPUSH
113070: CALL_OW 180
// SetTag ( un , 19 ) ;
113074: LD_VAR 0 10
113078: PPUSH
113079: LD_INT 19
113081: PPUSH
113082: CALL_OW 109
// mechs := mechs diff un ;
113086: LD_ADDR_VAR 0 12
113090: PUSH
113091: LD_VAR 0 12
113095: PUSH
113096: LD_VAR 0 10
113100: DIFF
113101: ST_TO_ADDR
// end ; end ;
113102: GO 112980
113104: POP
113105: POP
// if solds then
113106: LD_VAR 0 8
113110: IFFALSE 113169
// for i in solds do
113112: LD_ADDR_VAR 0 4
113116: PUSH
113117: LD_VAR 0 8
113121: PUSH
113122: FOR_IN
113123: IFFALSE 113167
// if not GetTag ( i ) then
113125: LD_VAR 0 4
113129: PPUSH
113130: CALL_OW 110
113134: NOT
113135: IFFALSE 113165
// begin defenders := defenders union i ;
113137: LD_ADDR_VAR 0 2
113141: PUSH
113142: LD_VAR 0 2
113146: PUSH
113147: LD_VAR 0 4
113151: UNION
113152: ST_TO_ADDR
// SetTag ( i , 18 ) ;
113153: LD_VAR 0 4
113157: PPUSH
113158: LD_INT 18
113160: PPUSH
113161: CALL_OW 109
// end ;
113165: GO 113122
113167: POP
113168: POP
// repeat wait ( 0 0$2 ) ;
113169: LD_INT 70
113171: PPUSH
113172: CALL_OW 67
// enemy := mc_scan [ base ] ;
113176: LD_ADDR_VAR 0 21
113180: PUSH
113181: LD_EXP 73
113185: PUSH
113186: LD_VAR 0 1
113190: ARRAY
113191: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
113192: LD_EXP 50
113196: PUSH
113197: LD_VAR 0 1
113201: ARRAY
113202: NOT
113203: PUSH
113204: LD_EXP 50
113208: PUSH
113209: LD_VAR 0 1
113213: ARRAY
113214: PUSH
113215: EMPTY
113216: EQUAL
113217: OR
113218: IFFALSE 113255
// begin for i in defenders do
113220: LD_ADDR_VAR 0 4
113224: PUSH
113225: LD_VAR 0 2
113229: PUSH
113230: FOR_IN
113231: IFFALSE 113244
// ComStop ( i ) ;
113233: LD_VAR 0 4
113237: PPUSH
113238: CALL_OW 141
113242: GO 113230
113244: POP
113245: POP
// defenders := [ ] ;
113246: LD_ADDR_VAR 0 2
113250: PUSH
113251: EMPTY
113252: ST_TO_ADDR
// exit ;
113253: GO 114704
// end ; for i in defenders do
113255: LD_ADDR_VAR 0 4
113259: PUSH
113260: LD_VAR 0 2
113264: PUSH
113265: FOR_IN
113266: IFFALSE 114164
// begin e := NearestUnitToUnit ( enemy , i ) ;
113268: LD_ADDR_VAR 0 13
113272: PUSH
113273: LD_VAR 0 21
113277: PPUSH
113278: LD_VAR 0 4
113282: PPUSH
113283: CALL_OW 74
113287: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
113288: LD_ADDR_VAR 0 7
113292: PUSH
113293: LD_EXP 50
113297: PUSH
113298: LD_VAR 0 1
113302: ARRAY
113303: PPUSH
113304: LD_INT 2
113306: PUSH
113307: LD_INT 30
113309: PUSH
113310: LD_INT 0
113312: PUSH
113313: EMPTY
113314: LIST
113315: LIST
113316: PUSH
113317: LD_INT 30
113319: PUSH
113320: LD_INT 1
113322: PUSH
113323: EMPTY
113324: LIST
113325: LIST
113326: PUSH
113327: EMPTY
113328: LIST
113329: LIST
113330: LIST
113331: PPUSH
113332: CALL_OW 72
113336: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
113337: LD_ADDR_VAR 0 16
113341: PUSH
113342: LD_VAR 0 7
113346: NOT
113347: PUSH
113348: LD_VAR 0 7
113352: PPUSH
113353: LD_INT 3
113355: PUSH
113356: LD_INT 24
113358: PUSH
113359: LD_INT 600
113361: PUSH
113362: EMPTY
113363: LIST
113364: LIST
113365: PUSH
113366: EMPTY
113367: LIST
113368: LIST
113369: PPUSH
113370: CALL_OW 72
113374: OR
113375: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
113376: LD_VAR 0 4
113380: PPUSH
113381: CALL_OW 247
113385: PUSH
113386: LD_INT 2
113388: DOUBLE
113389: EQUAL
113390: IFTRUE 113394
113392: GO 113790
113394: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
113395: LD_VAR 0 4
113399: PPUSH
113400: CALL_OW 256
113404: PUSH
113405: LD_INT 1000
113407: EQUAL
113408: PUSH
113409: LD_VAR 0 4
113413: PPUSH
113414: LD_VAR 0 13
113418: PPUSH
113419: CALL_OW 296
113423: PUSH
113424: LD_INT 40
113426: LESS
113427: PUSH
113428: LD_VAR 0 13
113432: PPUSH
113433: LD_EXP 75
113437: PUSH
113438: LD_VAR 0 1
113442: ARRAY
113443: PPUSH
113444: CALL_OW 308
113448: OR
113449: AND
113450: IFFALSE 113572
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
113452: LD_VAR 0 4
113456: PPUSH
113457: CALL_OW 262
113461: PUSH
113462: LD_INT 1
113464: EQUAL
113465: PUSH
113466: LD_VAR 0 4
113470: PPUSH
113471: CALL_OW 261
113475: PUSH
113476: LD_INT 30
113478: LESS
113479: AND
113480: PUSH
113481: LD_VAR 0 7
113485: AND
113486: IFFALSE 113556
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
113488: LD_VAR 0 4
113492: PPUSH
113493: LD_VAR 0 7
113497: PPUSH
113498: LD_VAR 0 4
113502: PPUSH
113503: CALL_OW 74
113507: PPUSH
113508: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
113512: LD_VAR 0 4
113516: PPUSH
113517: LD_VAR 0 7
113521: PPUSH
113522: LD_VAR 0 4
113526: PPUSH
113527: CALL_OW 74
113531: PPUSH
113532: CALL_OW 296
113536: PUSH
113537: LD_INT 6
113539: LESS
113540: IFFALSE 113554
// SetFuel ( i , 100 ) ;
113542: LD_VAR 0 4
113546: PPUSH
113547: LD_INT 100
113549: PPUSH
113550: CALL_OW 240
// end else
113554: GO 113570
// ComAttackUnit ( i , e ) ;
113556: LD_VAR 0 4
113560: PPUSH
113561: LD_VAR 0 13
113565: PPUSH
113566: CALL_OW 115
// end else
113570: GO 113673
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
113572: LD_VAR 0 13
113576: PPUSH
113577: LD_EXP 75
113581: PUSH
113582: LD_VAR 0 1
113586: ARRAY
113587: PPUSH
113588: CALL_OW 308
113592: NOT
113593: PUSH
113594: LD_VAR 0 4
113598: PPUSH
113599: LD_VAR 0 13
113603: PPUSH
113604: CALL_OW 296
113608: PUSH
113609: LD_INT 40
113611: GREATEREQUAL
113612: AND
113613: PUSH
113614: LD_VAR 0 4
113618: PPUSH
113619: CALL_OW 256
113623: PUSH
113624: LD_INT 650
113626: LESSEQUAL
113627: OR
113628: PUSH
113629: LD_VAR 0 4
113633: PPUSH
113634: LD_EXP 74
113638: PUSH
113639: LD_VAR 0 1
113643: ARRAY
113644: PPUSH
113645: CALL_OW 308
113649: NOT
113650: AND
113651: IFFALSE 113673
// ComMoveToArea ( i , mc_parking [ base ] ) ;
113653: LD_VAR 0 4
113657: PPUSH
113658: LD_EXP 74
113662: PUSH
113663: LD_VAR 0 1
113667: ARRAY
113668: PPUSH
113669: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
113673: LD_VAR 0 4
113677: PPUSH
113678: CALL_OW 256
113682: PUSH
113683: LD_INT 1000
113685: LESS
113686: PUSH
113687: LD_VAR 0 4
113691: PPUSH
113692: CALL_OW 263
113696: PUSH
113697: LD_INT 1
113699: EQUAL
113700: AND
113701: PUSH
113702: LD_VAR 0 4
113706: PPUSH
113707: CALL_OW 311
113711: AND
113712: PUSH
113713: LD_VAR 0 4
113717: PPUSH
113718: LD_EXP 74
113722: PUSH
113723: LD_VAR 0 1
113727: ARRAY
113728: PPUSH
113729: CALL_OW 308
113733: AND
113734: IFFALSE 113788
// begin mech := IsDrivenBy ( i ) ;
113736: LD_ADDR_VAR 0 9
113740: PUSH
113741: LD_VAR 0 4
113745: PPUSH
113746: CALL_OW 311
113750: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
113751: LD_VAR 0 9
113755: PPUSH
113756: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
113760: LD_VAR 0 9
113764: PPUSH
113765: LD_VAR 0 4
113769: PPUSH
113770: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
113774: LD_VAR 0 9
113778: PPUSH
113779: LD_VAR 0 4
113783: PPUSH
113784: CALL_OW 180
// end ; end ; unit_human :
113788: GO 114135
113790: LD_INT 1
113792: DOUBLE
113793: EQUAL
113794: IFTRUE 113798
113796: GO 114134
113798: POP
// begin b := IsInUnit ( i ) ;
113799: LD_ADDR_VAR 0 18
113803: PUSH
113804: LD_VAR 0 4
113808: PPUSH
113809: CALL_OW 310
113813: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
113814: LD_ADDR_VAR 0 19
113818: PUSH
113819: LD_VAR 0 18
113823: NOT
113824: PUSH
113825: LD_VAR 0 18
113829: PPUSH
113830: CALL_OW 266
113834: PUSH
113835: LD_INT 32
113837: PUSH
113838: LD_INT 31
113840: PUSH
113841: EMPTY
113842: LIST
113843: LIST
113844: IN
113845: OR
113846: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
113847: LD_VAR 0 18
113851: PPUSH
113852: CALL_OW 266
113856: PUSH
113857: LD_INT 5
113859: EQUAL
113860: PUSH
113861: LD_VAR 0 4
113865: PPUSH
113866: CALL_OW 257
113870: PUSH
113871: LD_INT 1
113873: PUSH
113874: LD_INT 2
113876: PUSH
113877: LD_INT 3
113879: PUSH
113880: LD_INT 4
113882: PUSH
113883: EMPTY
113884: LIST
113885: LIST
113886: LIST
113887: LIST
113888: IN
113889: AND
113890: IFFALSE 113927
// begin class := AllowSpecClass ( i ) ;
113892: LD_ADDR_VAR 0 20
113896: PUSH
113897: LD_VAR 0 4
113901: PPUSH
113902: CALL 21658 0 1
113906: ST_TO_ADDR
// if class then
113907: LD_VAR 0 20
113911: IFFALSE 113927
// ComChangeProfession ( i , class ) ;
113913: LD_VAR 0 4
113917: PPUSH
113918: LD_VAR 0 20
113922: PPUSH
113923: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
113927: LD_VAR 0 16
113931: PUSH
113932: LD_VAR 0 2
113936: PPUSH
113937: LD_INT 21
113939: PUSH
113940: LD_INT 2
113942: PUSH
113943: EMPTY
113944: LIST
113945: LIST
113946: PPUSH
113947: CALL_OW 72
113951: PUSH
113952: LD_INT 1
113954: LESSEQUAL
113955: OR
113956: PUSH
113957: LD_VAR 0 19
113961: AND
113962: PUSH
113963: LD_VAR 0 4
113967: PUSH
113968: LD_VAR 0 17
113972: IN
113973: NOT
113974: AND
113975: IFFALSE 114068
// begin if b then
113977: LD_VAR 0 18
113981: IFFALSE 114030
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
113983: LD_VAR 0 18
113987: PPUSH
113988: LD_VAR 0 21
113992: PPUSH
113993: LD_VAR 0 18
113997: PPUSH
113998: CALL_OW 74
114002: PPUSH
114003: CALL_OW 296
114007: PUSH
114008: LD_INT 10
114010: LESS
114011: PUSH
114012: LD_VAR 0 18
114016: PPUSH
114017: CALL_OW 461
114021: PUSH
114022: LD_INT 7
114024: NONEQUAL
114025: AND
114026: IFFALSE 114030
// continue ;
114028: GO 113265
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
114030: LD_ADDR_VAR 0 17
114034: PUSH
114035: LD_VAR 0 17
114039: PPUSH
114040: LD_VAR 0 17
114044: PUSH
114045: LD_INT 1
114047: PLUS
114048: PPUSH
114049: LD_VAR 0 4
114053: PPUSH
114054: CALL_OW 1
114058: ST_TO_ADDR
// ComExitBuilding ( i ) ;
114059: LD_VAR 0 4
114063: PPUSH
114064: CALL_OW 122
// end ; if sold_defenders then
114068: LD_VAR 0 17
114072: IFFALSE 114132
// if i in sold_defenders then
114074: LD_VAR 0 4
114078: PUSH
114079: LD_VAR 0 17
114083: IN
114084: IFFALSE 114132
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
114086: LD_VAR 0 4
114090: PPUSH
114091: CALL_OW 314
114095: NOT
114096: PUSH
114097: LD_VAR 0 4
114101: PPUSH
114102: LD_VAR 0 13
114106: PPUSH
114107: CALL_OW 296
114111: PUSH
114112: LD_INT 30
114114: LESS
114115: AND
114116: IFFALSE 114132
// ComAttackUnit ( i , e ) ;
114118: LD_VAR 0 4
114122: PPUSH
114123: LD_VAR 0 13
114127: PPUSH
114128: CALL_OW 115
// end ; end ; end ;
114132: GO 114135
114134: POP
// if IsDead ( i ) then
114135: LD_VAR 0 4
114139: PPUSH
114140: CALL_OW 301
114144: IFFALSE 114162
// defenders := defenders diff i ;
114146: LD_ADDR_VAR 0 2
114150: PUSH
114151: LD_VAR 0 2
114155: PUSH
114156: LD_VAR 0 4
114160: DIFF
114161: ST_TO_ADDR
// end ;
114162: GO 113265
114164: POP
114165: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
114166: LD_VAR 0 21
114170: NOT
114171: PUSH
114172: LD_VAR 0 2
114176: NOT
114177: OR
114178: PUSH
114179: LD_EXP 50
114183: PUSH
114184: LD_VAR 0 1
114188: ARRAY
114189: NOT
114190: OR
114191: IFFALSE 113169
// MC_Reset ( base , 18 ) ;
114193: LD_VAR 0 1
114197: PPUSH
114198: LD_INT 18
114200: PPUSH
114201: CALL 63749 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
114205: LD_ADDR_VAR 0 2
114209: PUSH
114210: LD_VAR 0 2
114214: PUSH
114215: LD_VAR 0 2
114219: PPUSH
114220: LD_INT 2
114222: PUSH
114223: LD_INT 25
114225: PUSH
114226: LD_INT 1
114228: PUSH
114229: EMPTY
114230: LIST
114231: LIST
114232: PUSH
114233: LD_INT 25
114235: PUSH
114236: LD_INT 5
114238: PUSH
114239: EMPTY
114240: LIST
114241: LIST
114242: PUSH
114243: LD_INT 25
114245: PUSH
114246: LD_INT 8
114248: PUSH
114249: EMPTY
114250: LIST
114251: LIST
114252: PUSH
114253: LD_INT 25
114255: PUSH
114256: LD_INT 9
114258: PUSH
114259: EMPTY
114260: LIST
114261: LIST
114262: PUSH
114263: EMPTY
114264: LIST
114265: LIST
114266: LIST
114267: LIST
114268: LIST
114269: PPUSH
114270: CALL_OW 72
114274: DIFF
114275: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
114276: LD_VAR 0 21
114280: NOT
114281: PUSH
114282: LD_VAR 0 2
114286: PPUSH
114287: LD_INT 21
114289: PUSH
114290: LD_INT 2
114292: PUSH
114293: EMPTY
114294: LIST
114295: LIST
114296: PPUSH
114297: CALL_OW 72
114301: AND
114302: IFFALSE 114640
// begin tmp := FilterByTag ( defenders , 19 ) ;
114304: LD_ADDR_VAR 0 11
114308: PUSH
114309: LD_VAR 0 2
114313: PPUSH
114314: LD_INT 19
114316: PPUSH
114317: CALL 54127 0 2
114321: ST_TO_ADDR
// if tmp then
114322: LD_VAR 0 11
114326: IFFALSE 114396
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
114328: LD_ADDR_VAR 0 11
114332: PUSH
114333: LD_VAR 0 11
114337: PPUSH
114338: LD_INT 25
114340: PUSH
114341: LD_INT 3
114343: PUSH
114344: EMPTY
114345: LIST
114346: LIST
114347: PPUSH
114348: CALL_OW 72
114352: ST_TO_ADDR
// if tmp then
114353: LD_VAR 0 11
114357: IFFALSE 114396
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
114359: LD_ADDR_EXP 62
114363: PUSH
114364: LD_EXP 62
114368: PPUSH
114369: LD_VAR 0 1
114373: PPUSH
114374: LD_EXP 62
114378: PUSH
114379: LD_VAR 0 1
114383: ARRAY
114384: PUSH
114385: LD_VAR 0 11
114389: UNION
114390: PPUSH
114391: CALL_OW 1
114395: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
114396: LD_VAR 0 1
114400: PPUSH
114401: LD_INT 19
114403: PPUSH
114404: CALL 63749 0 2
// repeat wait ( 0 0$1 ) ;
114408: LD_INT 35
114410: PPUSH
114411: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
114415: LD_EXP 50
114419: PUSH
114420: LD_VAR 0 1
114424: ARRAY
114425: NOT
114426: PUSH
114427: LD_EXP 50
114431: PUSH
114432: LD_VAR 0 1
114436: ARRAY
114437: PUSH
114438: EMPTY
114439: EQUAL
114440: OR
114441: IFFALSE 114478
// begin for i in defenders do
114443: LD_ADDR_VAR 0 4
114447: PUSH
114448: LD_VAR 0 2
114452: PUSH
114453: FOR_IN
114454: IFFALSE 114467
// ComStop ( i ) ;
114456: LD_VAR 0 4
114460: PPUSH
114461: CALL_OW 141
114465: GO 114453
114467: POP
114468: POP
// defenders := [ ] ;
114469: LD_ADDR_VAR 0 2
114473: PUSH
114474: EMPTY
114475: ST_TO_ADDR
// exit ;
114476: GO 114704
// end ; for i in defenders do
114478: LD_ADDR_VAR 0 4
114482: PUSH
114483: LD_VAR 0 2
114487: PUSH
114488: FOR_IN
114489: IFFALSE 114578
// begin if not IsInArea ( i , mc_parking [ base ] ) then
114491: LD_VAR 0 4
114495: PPUSH
114496: LD_EXP 74
114500: PUSH
114501: LD_VAR 0 1
114505: ARRAY
114506: PPUSH
114507: CALL_OW 308
114511: NOT
114512: IFFALSE 114536
// ComMoveToArea ( i , mc_parking [ base ] ) else
114514: LD_VAR 0 4
114518: PPUSH
114519: LD_EXP 74
114523: PUSH
114524: LD_VAR 0 1
114528: ARRAY
114529: PPUSH
114530: CALL_OW 113
114534: GO 114576
// if GetControl ( i ) = control_manual then
114536: LD_VAR 0 4
114540: PPUSH
114541: CALL_OW 263
114545: PUSH
114546: LD_INT 1
114548: EQUAL
114549: IFFALSE 114576
// if IsDrivenBy ( i ) then
114551: LD_VAR 0 4
114555: PPUSH
114556: CALL_OW 311
114560: IFFALSE 114576
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
114562: LD_VAR 0 4
114566: PPUSH
114567: CALL_OW 311
114571: PPUSH
114572: CALL_OW 121
// end ;
114576: GO 114488
114578: POP
114579: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
114580: LD_VAR 0 2
114584: PPUSH
114585: LD_INT 95
114587: PUSH
114588: LD_EXP 74
114592: PUSH
114593: LD_VAR 0 1
114597: ARRAY
114598: PUSH
114599: EMPTY
114600: LIST
114601: LIST
114602: PPUSH
114603: CALL_OW 72
114607: PUSH
114608: LD_VAR 0 2
114612: EQUAL
114613: PUSH
114614: LD_EXP 73
114618: PUSH
114619: LD_VAR 0 1
114623: ARRAY
114624: OR
114625: PUSH
114626: LD_EXP 50
114630: PUSH
114631: LD_VAR 0 1
114635: ARRAY
114636: NOT
114637: OR
114638: IFFALSE 114408
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
114640: LD_ADDR_EXP 72
114644: PUSH
114645: LD_EXP 72
114649: PPUSH
114650: LD_VAR 0 1
114654: PPUSH
114655: LD_VAR 0 2
114659: PPUSH
114660: LD_INT 21
114662: PUSH
114663: LD_INT 2
114665: PUSH
114666: EMPTY
114667: LIST
114668: LIST
114669: PPUSH
114670: CALL_OW 72
114674: PPUSH
114675: CALL_OW 1
114679: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
114680: LD_VAR 0 1
114684: PPUSH
114685: LD_INT 19
114687: PPUSH
114688: CALL 63749 0 2
// MC_Reset ( base , 20 ) ;
114692: LD_VAR 0 1
114696: PPUSH
114697: LD_INT 20
114699: PPUSH
114700: CALL 63749 0 2
// end ; end_of_file
114704: LD_VAR 0 3
114708: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
114709: LD_VAR 0 1
114713: PUSH
114714: LD_INT 200
114716: DOUBLE
114717: GREATEREQUAL
114718: IFFALSE 114726
114720: LD_INT 299
114722: DOUBLE
114723: LESSEQUAL
114724: IFTRUE 114728
114726: GO 114760
114728: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
114729: LD_VAR 0 1
114733: PPUSH
114734: LD_VAR 0 2
114738: PPUSH
114739: LD_VAR 0 3
114743: PPUSH
114744: LD_VAR 0 4
114748: PPUSH
114749: LD_VAR 0 5
114753: PPUSH
114754: CALL 103525 0 5
114758: GO 114837
114760: LD_INT 300
114762: DOUBLE
114763: GREATEREQUAL
114764: IFFALSE 114772
114766: LD_INT 399
114768: DOUBLE
114769: LESSEQUAL
114770: IFTRUE 114774
114772: GO 114836
114774: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
114775: LD_VAR 0 1
114779: PPUSH
114780: LD_VAR 0 2
114784: PPUSH
114785: LD_VAR 0 3
114789: PPUSH
114790: LD_VAR 0 4
114794: PPUSH
114795: LD_VAR 0 5
114799: PPUSH
114800: LD_VAR 0 6
114804: PPUSH
114805: LD_VAR 0 7
114809: PPUSH
114810: LD_VAR 0 8
114814: PPUSH
114815: LD_VAR 0 9
114819: PPUSH
114820: LD_VAR 0 10
114824: PPUSH
114825: LD_VAR 0 11
114829: PPUSH
114830: CALL 101413 0 11
114834: GO 114837
114836: POP
// end ;
114837: PPOPN 11
114839: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
114840: LD_VAR 0 1
114844: PPUSH
114845: LD_VAR 0 2
114849: PPUSH
114850: LD_VAR 0 3
114854: PPUSH
114855: LD_VAR 0 4
114859: PPUSH
114860: LD_VAR 0 5
114864: PPUSH
114865: CALL 103507 0 5
// end ; end_of_file
114869: PPOPN 5
114871: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
114872: LD_VAR 0 1
114876: PPUSH
114877: LD_VAR 0 2
114881: PPUSH
114882: LD_VAR 0 3
114886: PPUSH
114887: LD_VAR 0 4
114891: PPUSH
114892: LD_VAR 0 5
114896: PPUSH
114897: LD_VAR 0 6
114901: PPUSH
114902: CALL 90221 0 6
// end ;
114906: PPOPN 6
114908: END
