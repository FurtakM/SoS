// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := false ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 60995 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 60995 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 60995 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 60995 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53743 0 9
// MC_Start ;
1394: CALL 64047 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 86366 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 86310 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 86198 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 85880 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 85611 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 85293 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 85108 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 85000 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 85787 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 86366 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 86310 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 86198 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 85880 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 85611 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 85293 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 84790 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 85000 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 85108 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 86366 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 86310 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 86198 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 85880 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 85611 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 85293 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 85108 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 86366 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 86310 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 86198 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 85880 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 85611 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 85293 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 85936 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 85108 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 53743 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29338 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29338 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29338 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 53743 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26051 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26051 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29338 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 53743 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29338 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 25929 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 60588 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 25929 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 60588 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 25929 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 60588 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 25929 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 60588 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 85048 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 85048 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 60588 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 60588 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26051 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 85156 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66013 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 25929 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 25929 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 25929 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 25929 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 86511 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 85156 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 85156 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 86511 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 86511 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 86511 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 85156 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 85156 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 85156 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 86511 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 86511 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 86511 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 85156 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 86511 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 86511 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 88485 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 90540 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 89608 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 89849 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 88181 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 87801 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 87397 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 87235 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 87010 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 86895 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 90801 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 91017 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 86704 0 2
// end ; end_of_file
19323: PPOPN 2
19325: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
// if exist_mode then
19330: LD_VAR 0 2
19334: IFFALSE 19359
// unit := CreateCharacter ( prefix & ident ) else
19336: LD_ADDR_VAR 0 5
19340: PUSH
19341: LD_VAR 0 3
19345: PUSH
19346: LD_VAR 0 1
19350: STR
19351: PPUSH
19352: CALL_OW 34
19356: ST_TO_ADDR
19357: GO 19374
// unit := NewCharacter ( ident ) ;
19359: LD_ADDR_VAR 0 5
19363: PUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 25
19373: ST_TO_ADDR
// result := unit ;
19374: LD_ADDR_VAR 0 4
19378: PUSH
19379: LD_VAR 0 5
19383: ST_TO_ADDR
// end ;
19384: LD_VAR 0 4
19388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
// if not side or not nation then
19393: LD_VAR 0 1
19397: NOT
19398: PUSH
19399: LD_VAR 0 2
19403: NOT
19404: OR
19405: IFFALSE 19409
// exit ;
19407: GO 20045
// case nation of nation_american :
19409: LD_VAR 0 2
19413: PUSH
19414: LD_INT 1
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19592
19422: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19423: LD_ADDR_VAR 0 4
19427: PUSH
19428: LD_INT 35
19430: PUSH
19431: LD_INT 45
19433: PUSH
19434: LD_INT 46
19436: PUSH
19437: LD_INT 47
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 6
19448: PUSH
19449: LD_INT 15
19451: PUSH
19452: LD_INT 16
19454: PUSH
19455: LD_INT 7
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 13
19463: PUSH
19464: LD_INT 10
19466: PUSH
19467: LD_INT 14
19469: PUSH
19470: LD_INT 20
19472: PUSH
19473: LD_INT 21
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 32
19484: PUSH
19485: LD_INT 27
19487: PUSH
19488: LD_INT 36
19490: PUSH
19491: LD_INT 69
19493: PUSH
19494: LD_INT 39
19496: PUSH
19497: LD_INT 34
19499: PUSH
19500: LD_INT 40
19502: PUSH
19503: LD_INT 48
19505: PUSH
19506: LD_INT 49
19508: PUSH
19509: LD_INT 50
19511: PUSH
19512: LD_INT 51
19514: PUSH
19515: LD_INT 52
19517: PUSH
19518: LD_INT 53
19520: PUSH
19521: LD_INT 54
19523: PUSH
19524: LD_INT 55
19526: PUSH
19527: LD_INT 56
19529: PUSH
19530: LD_INT 57
19532: PUSH
19533: LD_INT 58
19535: PUSH
19536: LD_INT 59
19538: PUSH
19539: LD_INT 60
19541: PUSH
19542: LD_INT 61
19544: PUSH
19545: LD_INT 62
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: ST_TO_ADDR
19590: GO 19969
19592: LD_INT 2
19594: DOUBLE
19595: EQUAL
19596: IFTRUE 19600
19598: GO 19778
19600: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19601: LD_ADDR_VAR 0 4
19605: PUSH
19606: LD_INT 35
19608: PUSH
19609: LD_INT 45
19611: PUSH
19612: LD_INT 46
19614: PUSH
19615: LD_INT 47
19617: PUSH
19618: LD_INT 70
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 11
19626: PUSH
19627: LD_INT 3
19629: PUSH
19630: LD_INT 4
19632: PUSH
19633: LD_INT 5
19635: PUSH
19636: LD_INT 6
19638: PUSH
19639: LD_INT 15
19641: PUSH
19642: LD_INT 18
19644: PUSH
19645: LD_INT 7
19647: PUSH
19648: LD_INT 17
19650: PUSH
19651: LD_INT 8
19653: PUSH
19654: LD_INT 20
19656: PUSH
19657: LD_INT 21
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: LD_INT 72
19665: PUSH
19666: LD_INT 26
19668: PUSH
19669: LD_INT 69
19671: PUSH
19672: LD_INT 39
19674: PUSH
19675: LD_INT 40
19677: PUSH
19678: LD_INT 41
19680: PUSH
19681: LD_INT 42
19683: PUSH
19684: LD_INT 43
19686: PUSH
19687: LD_INT 48
19689: PUSH
19690: LD_INT 49
19692: PUSH
19693: LD_INT 50
19695: PUSH
19696: LD_INT 51
19698: PUSH
19699: LD_INT 52
19701: PUSH
19702: LD_INT 53
19704: PUSH
19705: LD_INT 54
19707: PUSH
19708: LD_INT 55
19710: PUSH
19711: LD_INT 56
19713: PUSH
19714: LD_INT 60
19716: PUSH
19717: LD_INT 61
19719: PUSH
19720: LD_INT 62
19722: PUSH
19723: LD_INT 66
19725: PUSH
19726: LD_INT 67
19728: PUSH
19729: LD_INT 68
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
19776: GO 19969
19778: LD_INT 3
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19968
19786: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19787: LD_ADDR_VAR 0 4
19791: PUSH
19792: LD_INT 46
19794: PUSH
19795: LD_INT 47
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 11
19806: PUSH
19807: LD_INT 9
19809: PUSH
19810: LD_INT 20
19812: PUSH
19813: LD_INT 19
19815: PUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 24
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 25
19827: PUSH
19828: LD_INT 28
19830: PUSH
19831: LD_INT 29
19833: PUSH
19834: LD_INT 30
19836: PUSH
19837: LD_INT 31
19839: PUSH
19840: LD_INT 37
19842: PUSH
19843: LD_INT 38
19845: PUSH
19846: LD_INT 32
19848: PUSH
19849: LD_INT 27
19851: PUSH
19852: LD_INT 33
19854: PUSH
19855: LD_INT 69
19857: PUSH
19858: LD_INT 39
19860: PUSH
19861: LD_INT 34
19863: PUSH
19864: LD_INT 40
19866: PUSH
19867: LD_INT 71
19869: PUSH
19870: LD_INT 23
19872: PUSH
19873: LD_INT 44
19875: PUSH
19876: LD_INT 48
19878: PUSH
19879: LD_INT 49
19881: PUSH
19882: LD_INT 50
19884: PUSH
19885: LD_INT 51
19887: PUSH
19888: LD_INT 52
19890: PUSH
19891: LD_INT 53
19893: PUSH
19894: LD_INT 54
19896: PUSH
19897: LD_INT 55
19899: PUSH
19900: LD_INT 56
19902: PUSH
19903: LD_INT 57
19905: PUSH
19906: LD_INT 58
19908: PUSH
19909: LD_INT 59
19911: PUSH
19912: LD_INT 63
19914: PUSH
19915: LD_INT 64
19917: PUSH
19918: LD_INT 65
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: ST_TO_ADDR
19966: GO 19969
19968: POP
// if state > - 1 and state < 3 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: GREATER
19978: PUSH
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 3
19986: LESS
19987: AND
19988: IFFALSE 20045
// for i in result do
19990: LD_ADDR_VAR 0 5
19994: PUSH
19995: LD_VAR 0 4
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20043
// if GetTech ( i , side ) <> state then
20003: LD_VAR 0 5
20007: PPUSH
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 321
20017: PUSH
20018: LD_VAR 0 3
20022: NONEQUAL
20023: IFFALSE 20041
// result := result diff i ;
20025: LD_ADDR_VAR 0 4
20029: PUSH
20030: LD_VAR 0 4
20034: PUSH
20035: LD_VAR 0 5
20039: DIFF
20040: ST_TO_ADDR
20041: GO 20000
20043: POP
20044: POP
// end ;
20045: LD_VAR 0 4
20049: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
// result := true ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20063: LD_ADDR_VAR 0 5
20067: PUSH
20068: LD_VAR 0 2
20072: PPUSH
20073: CALL_OW 480
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 5
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20136
// for i in tmp do
20087: LD_ADDR_VAR 0 4
20091: PUSH
20092: LD_VAR 0 5
20096: PUSH
20097: FOR_IN
20098: IFFALSE 20134
// if GetTech ( i , side ) <> state_researched then
20100: LD_VAR 0 4
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 321
20114: PUSH
20115: LD_INT 2
20117: NONEQUAL
20118: IFFALSE 20132
// begin result := false ;
20120: LD_ADDR_VAR 0 3
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// exit ;
20128: POP
20129: POP
20130: GO 20136
// end ;
20132: GO 20097
20134: POP
20135: POP
// end ;
20136: LD_VAR 0 3
20140: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20141: LD_INT 0
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
20152: PPUSH
20153: PPUSH
20154: PPUSH
20155: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20156: LD_VAR 0 1
20160: NOT
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 257
20171: PUSH
20172: LD_INT 9
20174: NONEQUAL
20175: OR
20176: IFFALSE 20180
// exit ;
20178: GO 20753
// side := GetSide ( unit ) ;
20180: LD_ADDR_VAR 0 9
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 255
20194: ST_TO_ADDR
// tech_space := tech_spacanom ;
20195: LD_ADDR_VAR 0 12
20199: PUSH
20200: LD_INT 29
20202: ST_TO_ADDR
// tech_time := tech_taurad ;
20203: LD_ADDR_VAR 0 13
20207: PUSH
20208: LD_INT 28
20210: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20211: LD_ADDR_VAR 0 11
20215: PUSH
20216: LD_VAR 0 1
20220: PPUSH
20221: CALL_OW 310
20225: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20226: LD_VAR 0 11
20230: PPUSH
20231: CALL_OW 247
20235: PUSH
20236: LD_INT 2
20238: EQUAL
20239: IFFALSE 20243
// exit ;
20241: GO 20753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20243: LD_ADDR_VAR 0 8
20247: PUSH
20248: LD_INT 81
20250: PUSH
20251: LD_VAR 0 9
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PPUSH
20281: CALL_OW 69
20285: ST_TO_ADDR
// if not tmp then
20286: LD_VAR 0 8
20290: NOT
20291: IFFALSE 20295
// exit ;
20293: GO 20753
// if in_unit then
20295: LD_VAR 0 11
20299: IFFALSE 20323
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20301: LD_ADDR_VAR 0 10
20305: PUSH
20306: LD_VAR 0 8
20310: PPUSH
20311: LD_VAR 0 11
20315: PPUSH
20316: CALL_OW 74
20320: ST_TO_ADDR
20321: GO 20343
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20323: LD_ADDR_VAR 0 10
20327: PUSH
20328: LD_VAR 0 8
20332: PPUSH
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 74
20342: ST_TO_ADDR
// if not enemy then
20343: LD_VAR 0 10
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20753
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20352: LD_VAR 0 11
20356: PUSH
20357: LD_VAR 0 11
20361: PPUSH
20362: LD_VAR 0 10
20366: PPUSH
20367: CALL_OW 296
20371: PUSH
20372: LD_INT 13
20374: GREATER
20375: AND
20376: PUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 12
20394: GREATER
20395: OR
20396: IFFALSE 20400
// exit ;
20398: GO 20753
// missile := [ 1 ] ;
20400: LD_ADDR_VAR 0 14
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20411: LD_VAR 0 9
20415: PPUSH
20416: LD_VAR 0 12
20420: PPUSH
20421: CALL_OW 325
20425: IFFALSE 20454
// missile := Insert ( missile , missile + 1 , 2 ) ;
20427: LD_ADDR_VAR 0 14
20431: PUSH
20432: LD_VAR 0 14
20436: PPUSH
20437: LD_VAR 0 14
20441: PUSH
20442: LD_INT 1
20444: PLUS
20445: PPUSH
20446: LD_INT 2
20448: PPUSH
20449: CALL_OW 2
20453: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20454: LD_VAR 0 9
20458: PPUSH
20459: LD_VAR 0 13
20463: PPUSH
20464: CALL_OW 325
20468: PUSH
20469: LD_VAR 0 10
20473: PPUSH
20474: CALL_OW 255
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: NOT
20489: AND
20490: IFFALSE 20519
// missile := Insert ( missile , missile + 1 , 3 ) ;
20492: LD_ADDR_VAR 0 14
20496: PUSH
20497: LD_VAR 0 14
20501: PPUSH
20502: LD_VAR 0 14
20506: PUSH
20507: LD_INT 1
20509: PLUS
20510: PPUSH
20511: LD_INT 3
20513: PPUSH
20514: CALL_OW 2
20518: ST_TO_ADDR
// if missile < 2 then
20519: LD_VAR 0 14
20523: PUSH
20524: LD_INT 2
20526: LESS
20527: IFFALSE 20531
// exit ;
20529: GO 20753
// x := GetX ( enemy ) ;
20531: LD_ADDR_VAR 0 4
20535: PUSH
20536: LD_VAR 0 10
20540: PPUSH
20541: CALL_OW 250
20545: ST_TO_ADDR
// y := GetY ( enemy ) ;
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_VAR 0 10
20555: PPUSH
20556: CALL_OW 251
20560: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20561: LD_ADDR_VAR 0 6
20565: PUSH
20566: LD_VAR 0 4
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 12
20582: PLUS
20583: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20584: LD_ADDR_VAR 0 7
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PPUSH
20598: LD_INT 1
20600: PPUSH
20601: CALL_OW 12
20605: PLUS
20606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20607: LD_VAR 0 6
20611: PPUSH
20612: LD_VAR 0 7
20616: PPUSH
20617: CALL_OW 488
20621: NOT
20622: IFFALSE 20644
// begin _x := x ;
20624: LD_ADDR_VAR 0 6
20628: PUSH
20629: LD_VAR 0 4
20633: ST_TO_ADDR
// _y := y ;
20634: LD_ADDR_VAR 0 7
20638: PUSH
20639: LD_VAR 0 5
20643: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_INT 1
20651: PPUSH
20652: LD_VAR 0 14
20656: PPUSH
20657: CALL_OW 12
20661: ST_TO_ADDR
// case i of 1 :
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 1
20669: DOUBLE
20670: EQUAL
20671: IFTRUE 20675
20673: GO 20692
20675: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20676: LD_VAR 0 1
20680: PPUSH
20681: LD_VAR 0 10
20685: PPUSH
20686: CALL_OW 115
20690: GO 20753
20692: LD_INT 2
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20722
20700: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_VAR 0 6
20710: PPUSH
20711: LD_VAR 0 7
20715: PPUSH
20716: CALL_OW 153
20720: GO 20753
20722: LD_INT 3
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20752
20730: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_VAR 0 6
20740: PPUSH
20741: LD_VAR 0 7
20745: PPUSH
20746: CALL_OW 154
20750: GO 20753
20752: POP
// end ;
20753: LD_VAR 0 2
20757: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
// if not unit or not building then
20766: LD_VAR 0 1
20770: NOT
20771: PUSH
20772: LD_VAR 0 2
20776: NOT
20777: OR
20778: IFFALSE 20782
// exit ;
20780: GO 20940
// x := GetX ( building ) ;
20782: LD_ADDR_VAR 0 5
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 250
20796: ST_TO_ADDR
// y := GetY ( building ) ;
20797: LD_ADDR_VAR 0 6
20801: PUSH
20802: LD_VAR 0 2
20806: PPUSH
20807: CALL_OW 251
20811: ST_TO_ADDR
// for i = 0 to 5 do
20812: LD_ADDR_VAR 0 4
20816: PUSH
20817: DOUBLE
20818: LD_INT 0
20820: DEC
20821: ST_TO_ADDR
20822: LD_INT 5
20824: PUSH
20825: FOR_TO
20826: IFFALSE 20938
// begin _x := ShiftX ( x , i , 3 ) ;
20828: LD_ADDR_VAR 0 7
20832: PUSH
20833: LD_VAR 0 5
20837: PPUSH
20838: LD_VAR 0 4
20842: PPUSH
20843: LD_INT 3
20845: PPUSH
20846: CALL_OW 272
20850: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20851: LD_ADDR_VAR 0 8
20855: PUSH
20856: LD_VAR 0 6
20860: PPUSH
20861: LD_VAR 0 4
20865: PPUSH
20866: LD_INT 3
20868: PPUSH
20869: CALL_OW 273
20873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20874: LD_VAR 0 7
20878: PPUSH
20879: LD_VAR 0 8
20883: PPUSH
20884: CALL_OW 488
20888: NOT
20889: IFFALSE 20893
// continue ;
20891: GO 20825
// if HexInfo ( _x , _y ) = 0 then
20893: LD_VAR 0 7
20897: PPUSH
20898: LD_VAR 0 8
20902: PPUSH
20903: CALL_OW 428
20907: PUSH
20908: LD_INT 0
20910: EQUAL
20911: IFFALSE 20936
// begin ComMoveXY ( unit , _x , _y ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_VAR 0 7
20922: PPUSH
20923: LD_VAR 0 8
20927: PPUSH
20928: CALL_OW 111
// exit ;
20932: POP
20933: POP
20934: GO 20940
// end ; end ;
20936: GO 20825
20938: POP
20939: POP
// end ;
20940: LD_VAR 0 3
20944: RET
// export function ScanBase ( side , base_area ) ; begin
20945: LD_INT 0
20947: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: LD_VAR 0 2
20957: PPUSH
20958: LD_INT 81
20960: PUSH
20961: LD_VAR 0 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PPUSH
20970: CALL_OW 70
20974: ST_TO_ADDR
// end ;
20975: LD_VAR 0 3
20979: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
20984: PPUSH
20985: PPUSH
20986: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20987: LD_VAR 0 1
20991: NOT
20992: PUSH
20993: LD_EXP 36
20997: PUSH
20998: LD_VAR 0 1
21002: ARRAY
21003: NOT
21004: OR
21005: PUSH
21006: LD_VAR 0 2
21010: NOT
21011: OR
21012: PUSH
21013: LD_VAR 0 3
21017: NOT
21018: OR
21019: IFFALSE 21023
// exit ;
21021: GO 21473
// side := mc_sides [ base ] ;
21023: LD_ADDR_VAR 0 6
21027: PUSH
21028: LD_EXP 62
21032: PUSH
21033: LD_VAR 0 1
21037: ARRAY
21038: ST_TO_ADDR
// if not side then
21039: LD_VAR 0 6
21043: NOT
21044: IFFALSE 21048
// exit ;
21046: GO 21473
// for i in solds do
21048: LD_ADDR_VAR 0 7
21052: PUSH
21053: LD_VAR 0 2
21057: PUSH
21058: FOR_IN
21059: IFFALSE 21120
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21061: LD_VAR 0 7
21065: PPUSH
21066: CALL_OW 310
21070: PPUSH
21071: CALL_OW 266
21075: PUSH
21076: LD_INT 32
21078: PUSH
21079: LD_INT 31
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: IN
21086: IFFALSE 21106
// solds := solds diff i else
21088: LD_ADDR_VAR 0 2
21092: PUSH
21093: LD_VAR 0 2
21097: PUSH
21098: LD_VAR 0 7
21102: DIFF
21103: ST_TO_ADDR
21104: GO 21118
// SetTag ( i , 18 ) ;
21106: LD_VAR 0 7
21110: PPUSH
21111: LD_INT 18
21113: PPUSH
21114: CALL_OW 109
21118: GO 21058
21120: POP
21121: POP
// if not solds then
21122: LD_VAR 0 2
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21473
// repeat wait ( 0 0$1 ) ;
21131: LD_INT 35
21133: PPUSH
21134: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21138: LD_ADDR_VAR 0 5
21142: PUSH
21143: LD_VAR 0 6
21147: PPUSH
21148: LD_VAR 0 3
21152: PPUSH
21153: CALL 20945 0 2
21157: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21158: LD_VAR 0 5
21162: NOT
21163: PUSH
21164: LD_VAR 0 5
21168: PUSH
21169: LD_INT 3
21171: GREATER
21172: OR
21173: PUSH
21174: LD_EXP 58
21178: PUSH
21179: LD_VAR 0 1
21183: ARRAY
21184: OR
21185: IFFALSE 21226
// begin for i in solds do
21187: LD_ADDR_VAR 0 7
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: FOR_IN
21198: IFFALSE 21222
// if HasTask ( i ) then
21200: LD_VAR 0 7
21204: PPUSH
21205: CALL_OW 314
21209: IFFALSE 21220
// ComStop ( i ) ;
21211: LD_VAR 0 7
21215: PPUSH
21216: CALL_OW 141
21220: GO 21197
21222: POP
21223: POP
// break ;
21224: GO 21461
// end ; for i in solds do
21226: LD_ADDR_VAR 0 7
21230: PUSH
21231: LD_VAR 0 2
21235: PUSH
21236: FOR_IN
21237: IFFALSE 21453
// begin if IsInUnit ( i ) then
21239: LD_VAR 0 7
21243: PPUSH
21244: CALL_OW 310
21248: IFFALSE 21259
// ComExitBuilding ( i ) ;
21250: LD_VAR 0 7
21254: PPUSH
21255: CALL_OW 122
// if GetLives ( i ) > 333 then
21259: LD_VAR 0 7
21263: PPUSH
21264: CALL_OW 256
21268: PUSH
21269: LD_INT 333
21271: GREATER
21272: IFFALSE 21300
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21274: LD_VAR 0 7
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: LD_VAR 0 7
21288: PPUSH
21289: CALL_OW 74
21293: PPUSH
21294: CALL_OW 115
21298: GO 21451
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21300: LD_ADDR_VAR 0 8
21304: PUSH
21305: LD_EXP 36
21309: PUSH
21310: LD_VAR 0 1
21314: ARRAY
21315: PPUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 30
21341: PUSH
21342: LD_INT 6
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: PPUSH
21355: CALL_OW 72
21359: PPUSH
21360: LD_VAR 0 7
21364: PPUSH
21365: CALL_OW 74
21369: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21370: LD_VAR 0 7
21374: PPUSH
21375: LD_VAR 0 8
21379: PPUSH
21380: CALL_OW 250
21384: PPUSH
21385: LD_INT 3
21387: PPUSH
21388: LD_INT 5
21390: PPUSH
21391: CALL_OW 272
21395: PPUSH
21396: LD_VAR 0 8
21400: PPUSH
21401: CALL_OW 251
21405: PPUSH
21406: LD_INT 3
21408: PPUSH
21409: LD_INT 5
21411: PPUSH
21412: CALL_OW 273
21416: PPUSH
21417: CALL_OW 111
// SetTag ( i , 0 ) ;
21421: LD_VAR 0 7
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 109
// solds := solds diff i ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_VAR 0 2
21442: PUSH
21443: LD_VAR 0 7
21447: DIFF
21448: ST_TO_ADDR
// continue ;
21449: GO 21236
// end ; end ;
21451: GO 21236
21453: POP
21454: POP
// until solds ;
21455: LD_VAR 0 2
21459: IFFALSE 21131
// MC_Reset ( base , 18 ) ;
21461: LD_VAR 0 1
21465: PPUSH
21466: LD_INT 18
21468: PPUSH
21469: CALL 66013 0 2
// end ;
21473: LD_VAR 0 4
21477: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21478: LD_INT 0
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
21491: PPUSH
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21496: LD_ADDR_VAR 0 12
21500: PUSH
21501: LD_EXP 36
21505: PUSH
21506: LD_VAR 0 1
21510: ARRAY
21511: PPUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 3
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PPUSH
21522: CALL_OW 72
21526: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21527: LD_ADDR_VAR 0 8
21531: PUSH
21532: LD_EXP 36
21536: PUSH
21537: LD_VAR 0 1
21541: ARRAY
21542: PPUSH
21543: LD_INT 2
21545: PUSH
21546: LD_INT 25
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 25
21558: PUSH
21559: LD_INT 5
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 8
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 25
21578: PUSH
21579: LD_INT 9
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL_OW 72
21597: ST_TO_ADDR
// if not defenders and not solds then
21598: LD_VAR 0 2
21602: NOT
21603: PUSH
21604: LD_VAR 0 8
21608: NOT
21609: AND
21610: IFFALSE 21614
// exit ;
21612: GO 22943
// depot_under_attack := false ;
21614: LD_ADDR_VAR 0 16
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sold_defenders := [ ] ;
21622: LD_ADDR_VAR 0 17
21626: PUSH
21627: EMPTY
21628: ST_TO_ADDR
// if mechs then
21629: LD_VAR 0 12
21633: IFFALSE 21762
// for i in defenders do
21635: LD_ADDR_VAR 0 5
21639: PUSH
21640: LD_VAR 0 2
21644: PUSH
21645: FOR_IN
21646: IFFALSE 21760
// begin SetTag ( i , 20 ) ;
21648: LD_VAR 0 5
21652: PPUSH
21653: LD_INT 20
21655: PPUSH
21656: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL_OW 263
21669: PUSH
21670: LD_INT 1
21672: EQUAL
21673: PUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 311
21683: NOT
21684: AND
21685: PUSH
21686: LD_VAR 0 12
21690: AND
21691: IFFALSE 21758
// begin un := mechs [ 1 ] ;
21693: LD_ADDR_VAR 0 10
21697: PUSH
21698: LD_VAR 0 12
21702: PUSH
21703: LD_INT 1
21705: ARRAY
21706: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21707: LD_VAR 0 10
21711: PPUSH
21712: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21716: LD_VAR 0 10
21720: PPUSH
21721: LD_VAR 0 5
21725: PPUSH
21726: CALL_OW 180
// SetTag ( un , 19 ) ;
21730: LD_VAR 0 10
21734: PPUSH
21735: LD_INT 19
21737: PPUSH
21738: CALL_OW 109
// mechs := mechs diff un ;
21742: LD_ADDR_VAR 0 12
21746: PUSH
21747: LD_VAR 0 12
21751: PUSH
21752: LD_VAR 0 10
21756: DIFF
21757: ST_TO_ADDR
// end ; end ;
21758: GO 21645
21760: POP
21761: POP
// if solds then
21762: LD_VAR 0 8
21766: IFFALSE 21825
// for i in solds do
21768: LD_ADDR_VAR 0 5
21772: PUSH
21773: LD_VAR 0 8
21777: PUSH
21778: FOR_IN
21779: IFFALSE 21823
// if not GetTag ( i ) then
21781: LD_VAR 0 5
21785: PPUSH
21786: CALL_OW 110
21790: NOT
21791: IFFALSE 21821
// begin defenders := defenders union i ;
21793: LD_ADDR_VAR 0 2
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 5
21807: UNION
21808: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21809: LD_VAR 0 5
21813: PPUSH
21814: LD_INT 18
21816: PPUSH
21817: CALL_OW 109
// end ;
21821: GO 21778
21823: POP
21824: POP
// repeat wait ( 0 0$1 ) ;
21825: LD_INT 35
21827: PPUSH
21828: CALL_OW 67
// enemy := mc_scan [ base ] ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_EXP 59
21841: PUSH
21842: LD_VAR 0 1
21846: ARRAY
21847: ST_TO_ADDR
// for i in defenders do
21848: LD_ADDR_VAR 0 5
21852: PUSH
21853: LD_VAR 0 2
21857: PUSH
21858: FOR_IN
21859: IFFALSE 22544
// begin e := NearestUnitToUnit ( enemy , i ) ;
21861: LD_ADDR_VAR 0 13
21865: PUSH
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_VAR 0 5
21875: PPUSH
21876: CALL_OW 74
21880: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21881: LD_ADDR_VAR 0 16
21885: PUSH
21886: LD_EXP 36
21890: PUSH
21891: LD_VAR 0 1
21895: ARRAY
21896: PPUSH
21897: LD_INT 2
21899: PUSH
21900: LD_INT 30
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 30
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: PPUSH
21925: CALL_OW 72
21929: NOT
21930: PUSH
21931: LD_EXP 36
21935: PUSH
21936: LD_VAR 0 1
21940: ARRAY
21941: PPUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 30
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: PPUSH
21970: CALL_OW 72
21974: PPUSH
21975: CALL_OW 256
21979: PUSH
21980: LD_INT 600
21982: LESS
21983: OR
21984: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21985: LD_VAR 0 5
21989: PPUSH
21990: CALL_OW 247
21994: PUSH
21995: LD_INT 2
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22250
22003: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22004: LD_VAR 0 5
22008: PPUSH
22009: CALL_OW 256
22013: PUSH
22014: LD_INT 650
22016: GREATER
22017: PUSH
22018: LD_VAR 0 5
22022: PPUSH
22023: LD_VAR 0 13
22027: PPUSH
22028: CALL_OW 296
22032: PUSH
22033: LD_INT 40
22035: LESS
22036: AND
22037: IFFALSE 22055
// ComAttackUnit ( i , e ) else
22039: LD_VAR 0 5
22043: PPUSH
22044: LD_VAR 0 13
22048: PPUSH
22049: CALL_OW 115
22053: GO 22133
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22055: LD_VAR 0 5
22059: PPUSH
22060: LD_VAR 0 13
22064: PPUSH
22065: CALL_OW 296
22069: PUSH
22070: LD_INT 30
22072: GREATEREQUAL
22073: PUSH
22074: LD_VAR 0 5
22078: PPUSH
22079: CALL_OW 256
22083: PUSH
22084: LD_INT 650
22086: LESSEQUAL
22087: OR
22088: PUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: LD_EXP 60
22098: PUSH
22099: LD_VAR 0 1
22103: ARRAY
22104: PPUSH
22105: CALL_OW 308
22109: NOT
22110: AND
22111: IFFALSE 22133
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22113: LD_VAR 0 5
22117: PPUSH
22118: LD_EXP 60
22122: PUSH
22123: LD_VAR 0 1
22127: ARRAY
22128: PPUSH
22129: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22133: LD_VAR 0 5
22137: PPUSH
22138: CALL_OW 256
22142: PUSH
22143: LD_INT 998
22145: LESS
22146: PUSH
22147: LD_VAR 0 5
22151: PPUSH
22152: CALL_OW 263
22156: PUSH
22157: LD_INT 1
22159: EQUAL
22160: AND
22161: PUSH
22162: LD_VAR 0 5
22166: PPUSH
22167: CALL_OW 311
22171: AND
22172: PUSH
22173: LD_VAR 0 5
22177: PPUSH
22178: LD_EXP 60
22182: PUSH
22183: LD_VAR 0 1
22187: ARRAY
22188: PPUSH
22189: CALL_OW 308
22193: AND
22194: IFFALSE 22248
// begin mech := IsDrivenBy ( i ) ;
22196: LD_ADDR_VAR 0 9
22200: PUSH
22201: LD_VAR 0 5
22205: PPUSH
22206: CALL_OW 311
22210: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22211: LD_VAR 0 9
22215: PPUSH
22216: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22220: LD_VAR 0 9
22224: PPUSH
22225: LD_VAR 0 5
22229: PPUSH
22230: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22234: LD_VAR 0 9
22238: PPUSH
22239: LD_VAR 0 5
22243: PPUSH
22244: CALL_OW 180
// end ; end ; unit_human :
22248: GO 22515
22250: LD_INT 1
22252: DOUBLE
22253: EQUAL
22254: IFTRUE 22258
22256: GO 22514
22258: POP
// begin b := IsInUnit ( i ) ;
22259: LD_ADDR_VAR 0 18
22263: PUSH
22264: LD_VAR 0 5
22268: PPUSH
22269: CALL_OW 310
22273: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22274: LD_ADDR_VAR 0 19
22278: PUSH
22279: LD_VAR 0 18
22283: NOT
22284: PUSH
22285: LD_VAR 0 18
22289: PPUSH
22290: CALL_OW 266
22294: PUSH
22295: LD_INT 32
22297: PUSH
22298: LD_INT 31
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: IN
22305: OR
22306: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22307: LD_VAR 0 16
22311: PUSH
22312: LD_VAR 0 2
22316: PPUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PPUSH
22327: CALL_OW 72
22331: PUSH
22332: LD_INT 1
22334: LESSEQUAL
22335: OR
22336: PUSH
22337: LD_VAR 0 19
22341: AND
22342: PUSH
22343: LD_VAR 0 5
22347: PUSH
22348: LD_VAR 0 17
22352: IN
22353: NOT
22354: AND
22355: IFFALSE 22448
// begin if b then
22357: LD_VAR 0 18
22361: IFFALSE 22410
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22363: LD_VAR 0 18
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: LD_VAR 0 18
22377: PPUSH
22378: CALL_OW 74
22382: PPUSH
22383: CALL_OW 296
22387: PUSH
22388: LD_INT 10
22390: LESS
22391: PUSH
22392: LD_VAR 0 18
22396: PPUSH
22397: CALL_OW 461
22401: PUSH
22402: LD_INT 7
22404: NONEQUAL
22405: AND
22406: IFFALSE 22410
// continue ;
22408: GO 21858
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22410: LD_ADDR_VAR 0 17
22414: PUSH
22415: LD_VAR 0 17
22419: PPUSH
22420: LD_VAR 0 17
22424: PUSH
22425: LD_INT 1
22427: PLUS
22428: PPUSH
22429: LD_VAR 0 5
22433: PPUSH
22434: CALL_OW 1
22438: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22439: LD_VAR 0 5
22443: PPUSH
22444: CALL_OW 122
// end ; if sold_defenders then
22448: LD_VAR 0 17
22452: IFFALSE 22512
// if i in sold_defenders then
22454: LD_VAR 0 5
22458: PUSH
22459: LD_VAR 0 17
22463: IN
22464: IFFALSE 22512
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 314
22475: NOT
22476: PUSH
22477: LD_VAR 0 5
22481: PPUSH
22482: LD_VAR 0 13
22486: PPUSH
22487: CALL_OW 296
22491: PUSH
22492: LD_INT 30
22494: LESS
22495: AND
22496: IFFALSE 22512
// ComAttackUnit ( i , e ) ;
22498: LD_VAR 0 5
22502: PPUSH
22503: LD_VAR 0 13
22507: PPUSH
22508: CALL_OW 115
// end ; end ; end ;
22512: GO 22515
22514: POP
// if IsDead ( i ) then
22515: LD_VAR 0 5
22519: PPUSH
22520: CALL_OW 301
22524: IFFALSE 22542
// defenders := defenders diff i ;
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_VAR 0 2
22535: PUSH
22536: LD_VAR 0 5
22540: DIFF
22541: ST_TO_ADDR
// end ;
22542: GO 21858
22544: POP
22545: POP
// until not enemy or not defenders ;
22546: LD_VAR 0 3
22550: NOT
22551: PUSH
22552: LD_VAR 0 2
22556: NOT
22557: OR
22558: IFFALSE 21825
// MC_Reset ( base , 18 ) ;
22560: LD_VAR 0 1
22564: PPUSH
22565: LD_INT 18
22567: PPUSH
22568: CALL 66013 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22572: LD_ADDR_VAR 0 2
22576: PUSH
22577: LD_VAR 0 2
22581: PUSH
22582: LD_VAR 0 2
22586: PPUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 25
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 25
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 25
22622: PUSH
22623: LD_INT 9
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PPUSH
22637: CALL_OW 72
22641: DIFF
22642: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22643: LD_VAR 0 3
22647: NOT
22648: PUSH
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: AND
22669: IFFALSE 22931
// begin tmp := FilterByTag ( defenders , 19 ) ;
22671: LD_ADDR_VAR 0 11
22675: PUSH
22676: LD_VAR 0 2
22680: PPUSH
22681: LD_INT 19
22683: PPUSH
22684: CALL 59311 0 2
22688: ST_TO_ADDR
// if tmp then
22689: LD_VAR 0 11
22693: IFFALSE 22763
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22695: LD_ADDR_VAR 0 11
22699: PUSH
22700: LD_VAR 0 11
22704: PPUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 3
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 72
22719: ST_TO_ADDR
// if tmp then
22720: LD_VAR 0 11
22724: IFFALSE 22763
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22726: LD_ADDR_EXP 48
22730: PUSH
22731: LD_EXP 48
22735: PPUSH
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_EXP 48
22745: PUSH
22746: LD_VAR 0 1
22750: ARRAY
22751: PUSH
22752: LD_VAR 0 11
22756: UNION
22757: PPUSH
22758: CALL_OW 1
22762: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: LD_INT 19
22770: PPUSH
22771: CALL 66013 0 2
// repeat wait ( 0 0$1 ) ;
22775: LD_INT 35
22777: PPUSH
22778: CALL_OW 67
// for i in defenders do
22782: LD_ADDR_VAR 0 5
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: FOR_IN
22793: IFFALSE 22882
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22795: LD_VAR 0 5
22799: PPUSH
22800: LD_EXP 60
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: PPUSH
22811: CALL_OW 308
22815: NOT
22816: IFFALSE 22840
// ComMoveToArea ( i , mc_parking [ base ] ) else
22818: LD_VAR 0 5
22822: PPUSH
22823: LD_EXP 60
22827: PUSH
22828: LD_VAR 0 1
22832: ARRAY
22833: PPUSH
22834: CALL_OW 113
22838: GO 22880
// if GetControl ( i ) = control_manual then
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL_OW 263
22849: PUSH
22850: LD_INT 1
22852: EQUAL
22853: IFFALSE 22880
// if IsDrivenBy ( i ) then
22855: LD_VAR 0 5
22859: PPUSH
22860: CALL_OW 311
22864: IFFALSE 22880
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22866: LD_VAR 0 5
22870: PPUSH
22871: CALL_OW 311
22875: PPUSH
22876: CALL_OW 121
// end ;
22880: GO 22792
22882: POP
22883: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_INT 95
22891: PUSH
22892: LD_EXP 60
22896: PUSH
22897: LD_VAR 0 1
22901: ARRAY
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 72
22911: PUSH
22912: LD_VAR 0 2
22916: EQUAL
22917: PUSH
22918: LD_EXP 59
22922: PUSH
22923: LD_VAR 0 1
22927: ARRAY
22928: OR
22929: IFFALSE 22775
// end ; MC_Reset ( base , 20 ) ;
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_INT 20
22938: PPUSH
22939: CALL 66013 0 2
// end ;
22943: LD_VAR 0 4
22947: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
// result := false ;
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_INT 0
22961: ST_TO_ADDR
// side := GetSide ( unit ) ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 255
22976: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22977: LD_ADDR_VAR 0 4
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 248
22991: ST_TO_ADDR
// case nat of 1 :
22992: LD_VAR 0 4
22996: PUSH
22997: LD_INT 1
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23016
23005: POP
// tech := tech_lassight ; 2 :
23006: LD_ADDR_VAR 0 5
23010: PUSH
23011: LD_INT 12
23013: ST_TO_ADDR
23014: GO 23055
23016: LD_INT 2
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23035
23024: POP
// tech := tech_mortar ; 3 :
23025: LD_ADDR_VAR 0 5
23029: PUSH
23030: LD_INT 41
23032: ST_TO_ADDR
23033: GO 23055
23035: LD_INT 3
23037: DOUBLE
23038: EQUAL
23039: IFTRUE 23043
23041: GO 23054
23043: POP
// tech := tech_bazooka ; end ;
23044: LD_ADDR_VAR 0 5
23048: PUSH
23049: LD_INT 44
23051: ST_TO_ADDR
23052: GO 23055
23054: POP
// if Researched ( side , tech ) then
23055: LD_VAR 0 3
23059: PPUSH
23060: LD_VAR 0 5
23064: PPUSH
23065: CALL_OW 325
23069: IFFALSE 23096
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: LD_INT 5
23078: PUSH
23079: LD_INT 8
23081: PUSH
23082: LD_INT 9
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: PUSH
23090: LD_VAR 0 4
23094: ARRAY
23095: ST_TO_ADDR
// end ;
23096: LD_VAR 0 2
23100: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23101: LD_INT 0
23103: PPUSH
23104: PPUSH
23105: PPUSH
// if not mines then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23259
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23115: LD_ADDR_VAR 0 5
23119: PUSH
23120: LD_INT 81
23122: PUSH
23123: LD_VAR 0 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: LD_INT 21
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 69
23157: ST_TO_ADDR
// for i in mines do
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_VAR 0 2
23167: PUSH
23168: FOR_IN
23169: IFFALSE 23257
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23171: LD_VAR 0 4
23175: PUSH
23176: LD_INT 1
23178: ARRAY
23179: PPUSH
23180: LD_VAR 0 4
23184: PUSH
23185: LD_INT 2
23187: ARRAY
23188: PPUSH
23189: CALL_OW 458
23193: NOT
23194: IFFALSE 23198
// continue ;
23196: GO 23168
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23198: LD_VAR 0 4
23202: PUSH
23203: LD_INT 1
23205: ARRAY
23206: PPUSH
23207: LD_VAR 0 4
23211: PUSH
23212: LD_INT 2
23214: ARRAY
23215: PPUSH
23216: CALL_OW 428
23220: PUSH
23221: LD_VAR 0 5
23225: IN
23226: IFFALSE 23255
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23228: LD_VAR 0 4
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: PPUSH
23237: LD_VAR 0 4
23241: PUSH
23242: LD_INT 2
23244: ARRAY
23245: PPUSH
23246: LD_VAR 0 1
23250: PPUSH
23251: CALL_OW 456
// end ;
23255: GO 23168
23257: POP
23258: POP
// end ;
23259: LD_VAR 0 3
23263: RET
// export function Count ( array ) ; var i ; begin
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
// result := 0 ;
23268: LD_ADDR_VAR 0 2
23272: PUSH
23273: LD_INT 0
23275: ST_TO_ADDR
// for i in array do
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_VAR 0 1
23285: PUSH
23286: FOR_IN
23287: IFFALSE 23311
// if i then
23289: LD_VAR 0 3
23293: IFFALSE 23309
// result := result + 1 ;
23295: LD_ADDR_VAR 0 2
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: LD_INT 1
23307: PLUS
23308: ST_TO_ADDR
23309: GO 23286
23311: POP
23312: POP
// end ;
23313: LD_VAR 0 2
23317: RET
// export function IsEmpty ( building ) ; begin
23318: LD_INT 0
23320: PPUSH
// if not building then
23321: LD_VAR 0 1
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23373
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23330: LD_ADDR_VAR 0 2
23334: PUSH
23335: LD_VAR 0 1
23339: PUSH
23340: LD_INT 22
23342: PUSH
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 255
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 58
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: IN
23372: ST_TO_ADDR
// end ;
23373: LD_VAR 0 2
23377: RET
// export function IsNotFull ( building ) ; begin
23378: LD_INT 0
23380: PPUSH
// if not building then
23381: LD_VAR 0 1
23385: NOT
23386: IFFALSE 23390
// exit ;
23388: GO 23409
// result := UnitsInside ( building ) < 6 ;
23390: LD_ADDR_VAR 0 2
23394: PUSH
23395: LD_VAR 0 1
23399: PPUSH
23400: CALL_OW 313
23404: PUSH
23405: LD_INT 6
23407: LESS
23408: ST_TO_ADDR
// end ;
23409: LD_VAR 0 2
23413: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
// tmp := [ ] ;
23420: LD_ADDR_VAR 0 3
23424: PUSH
23425: EMPTY
23426: ST_TO_ADDR
// list := [ ] ;
23427: LD_ADDR_VAR 0 5
23431: PUSH
23432: EMPTY
23433: ST_TO_ADDR
// for i = 16 to 25 do
23434: LD_ADDR_VAR 0 4
23438: PUSH
23439: DOUBLE
23440: LD_INT 16
23442: DEC
23443: ST_TO_ADDR
23444: LD_INT 25
23446: PUSH
23447: FOR_TO
23448: IFFALSE 23521
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_VAR 0 3
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 255
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 91
23479: PUSH
23480: LD_VAR 0 1
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 30
23495: PUSH
23496: LD_VAR 0 4
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: ADD
23518: ST_TO_ADDR
23519: GO 23447
23521: POP
23522: POP
// for i = 1 to tmp do
23523: LD_ADDR_VAR 0 4
23527: PUSH
23528: DOUBLE
23529: LD_INT 1
23531: DEC
23532: ST_TO_ADDR
23533: LD_VAR 0 3
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23627
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23541: LD_ADDR_VAR 0 5
23545: PUSH
23546: LD_VAR 0 5
23550: PUSH
23551: LD_VAR 0 3
23555: PUSH
23556: LD_VAR 0 4
23560: ARRAY
23561: PPUSH
23562: CALL_OW 266
23566: PUSH
23567: LD_VAR 0 3
23571: PUSH
23572: LD_VAR 0 4
23576: ARRAY
23577: PPUSH
23578: CALL_OW 250
23582: PUSH
23583: LD_VAR 0 3
23587: PUSH
23588: LD_VAR 0 4
23592: ARRAY
23593: PPUSH
23594: CALL_OW 251
23598: PUSH
23599: LD_VAR 0 3
23603: PUSH
23604: LD_VAR 0 4
23608: ARRAY
23609: PPUSH
23610: CALL_OW 254
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: PUSH
23621: EMPTY
23622: LIST
23623: ADD
23624: ST_TO_ADDR
23625: GO 23538
23627: POP
23628: POP
// result := list ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_VAR 0 5
23638: ST_TO_ADDR
// end ;
23639: LD_VAR 0 2
23643: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
23651: PPUSH
23652: PPUSH
// if not factory then
23653: LD_VAR 0 1
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 24194
// if control = control_apeman then
23662: LD_VAR 0 4
23666: PUSH
23667: LD_INT 5
23669: EQUAL
23670: IFFALSE 23779
// begin tmp := UnitsInside ( factory ) ;
23672: LD_ADDR_VAR 0 8
23676: PUSH
23677: LD_VAR 0 1
23681: PPUSH
23682: CALL_OW 313
23686: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23687: LD_VAR 0 8
23691: PPUSH
23692: LD_INT 25
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PPUSH
23702: CALL_OW 72
23706: NOT
23707: IFFALSE 23717
// control := control_manual ;
23709: LD_ADDR_VAR 0 4
23713: PUSH
23714: LD_INT 1
23716: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23717: LD_ADDR_VAR 0 8
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL 23414 0 1
23731: ST_TO_ADDR
// if tmp then
23732: LD_VAR 0 8
23736: IFFALSE 23779
// begin for i in tmp do
23738: LD_ADDR_VAR 0 7
23742: PUSH
23743: LD_VAR 0 8
23747: PUSH
23748: FOR_IN
23749: IFFALSE 23777
// if i [ 1 ] = b_ext_radio then
23751: LD_VAR 0 7
23755: PUSH
23756: LD_INT 1
23758: ARRAY
23759: PUSH
23760: LD_INT 22
23762: EQUAL
23763: IFFALSE 23775
// begin control := control_remote ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_INT 2
23772: ST_TO_ADDR
// break ;
23773: GO 23777
// end ;
23775: GO 23748
23777: POP
23778: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 2
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: LD_VAR 0 4
23798: PPUSH
23799: LD_VAR 0 5
23803: PPUSH
23804: CALL_OW 448
23808: IFFALSE 23843
// begin result := [ chassis , engine , control , weapon ] ;
23810: LD_ADDR_VAR 0 6
23814: PUSH
23815: LD_VAR 0 2
23819: PUSH
23820: LD_VAR 0 3
23824: PUSH
23825: LD_VAR 0 4
23829: PUSH
23830: LD_VAR 0 5
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
// exit ;
23841: GO 24194
// end ; _chassis := AvailableChassisList ( factory ) ;
23843: LD_ADDR_VAR 0 9
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 475
23857: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23858: LD_ADDR_VAR 0 11
23862: PUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 476
23872: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23873: LD_ADDR_VAR 0 12
23877: PUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 477
23887: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23888: LD_ADDR_VAR 0 10
23892: PUSH
23893: LD_VAR 0 1
23897: PPUSH
23898: CALL_OW 478
23902: ST_TO_ADDR
// if not chassis in _chassis then
23903: LD_VAR 0 2
23907: PUSH
23908: LD_VAR 0 9
23912: IN
23913: NOT
23914: IFFALSE 23940
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23916: LD_ADDR_VAR 0 2
23920: PUSH
23921: LD_VAR 0 9
23925: PUSH
23926: LD_INT 1
23928: PPUSH
23929: LD_VAR 0 9
23933: PPUSH
23934: CALL_OW 12
23938: ARRAY
23939: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_VAR 0 3
23949: PPUSH
23950: CALL 24199 0 2
23954: NOT
23955: IFFALSE 24014
// repeat engine := _engine [ 1 ] ;
23957: LD_ADDR_VAR 0 3
23961: PUSH
23962: LD_VAR 0 11
23966: PUSH
23967: LD_INT 1
23969: ARRAY
23970: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23971: LD_ADDR_VAR 0 11
23975: PUSH
23976: LD_VAR 0 11
23980: PPUSH
23981: LD_INT 1
23983: PPUSH
23984: CALL_OW 3
23988: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: CALL 24199 0 2
24003: PUSH
24004: LD_VAR 0 11
24008: PUSH
24009: EMPTY
24010: EQUAL
24011: OR
24012: IFFALSE 23957
// if not control in _control then
24014: LD_VAR 0 4
24018: PUSH
24019: LD_VAR 0 12
24023: IN
24024: NOT
24025: IFFALSE 24051
// control := _control [ rand ( 1 , _control ) ] ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_VAR 0 12
24036: PUSH
24037: LD_INT 1
24039: PPUSH
24040: LD_VAR 0 12
24044: PPUSH
24045: CALL_OW 12
24049: ARRAY
24050: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: CALL 24419 0 2
24065: NOT
24066: IFFALSE 24125
// repeat weapon := _weapon [ 1 ] ;
24068: LD_ADDR_VAR 0 5
24072: PUSH
24073: LD_VAR 0 10
24077: PUSH
24078: LD_INT 1
24080: ARRAY
24081: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24082: LD_ADDR_VAR 0 10
24086: PUSH
24087: LD_VAR 0 10
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: CALL_OW 3
24099: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24100: LD_VAR 0 2
24104: PPUSH
24105: LD_VAR 0 5
24109: PPUSH
24110: CALL 24419 0 2
24114: PUSH
24115: LD_VAR 0 10
24119: PUSH
24120: EMPTY
24121: EQUAL
24122: OR
24123: IFFALSE 24068
// result := [ ] ;
24125: LD_ADDR_VAR 0 6
24129: PUSH
24130: EMPTY
24131: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24132: LD_VAR 0 1
24136: PPUSH
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_VAR 0 4
24151: PPUSH
24152: LD_VAR 0 5
24156: PPUSH
24157: CALL_OW 448
24161: IFFALSE 24194
// result := [ chassis , engine , control , weapon ] ;
24163: LD_ADDR_VAR 0 6
24167: PUSH
24168: LD_VAR 0 2
24172: PUSH
24173: LD_VAR 0 3
24177: PUSH
24178: LD_VAR 0 4
24182: PUSH
24183: LD_VAR 0 5
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: ST_TO_ADDR
// end ;
24194: LD_VAR 0 6
24198: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24199: LD_INT 0
24201: PPUSH
// if not chassis or not engine then
24202: LD_VAR 0 1
24206: NOT
24207: PUSH
24208: LD_VAR 0 2
24212: NOT
24213: OR
24214: IFFALSE 24218
// exit ;
24216: GO 24414
// case engine of engine_solar :
24218: LD_VAR 0 2
24222: PUSH
24223: LD_INT 2
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24269
24231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24232: LD_ADDR_VAR 0 3
24236: PUSH
24237: LD_INT 11
24239: PUSH
24240: LD_INT 12
24242: PUSH
24243: LD_INT 13
24245: PUSH
24246: LD_INT 14
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 24398
24269: LD_INT 1
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24339
24277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_INT 11
24285: PUSH
24286: LD_INT 12
24288: PUSH
24289: LD_INT 13
24291: PUSH
24292: LD_INT 14
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: LD_INT 4
24306: PUSH
24307: LD_INT 5
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 23
24315: PUSH
24316: LD_INT 22
24318: PUSH
24319: LD_INT 24
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: ST_TO_ADDR
24337: GO 24398
24339: LD_INT 3
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24397
24347: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_INT 13
24355: PUSH
24356: LD_INT 14
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: LD_INT 4
24367: PUSH
24368: LD_INT 5
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_INT 23
24379: PUSH
24380: LD_INT 24
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
24395: GO 24398
24397: POP
// result := ( chassis in result ) ;
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_VAR 0 1
24407: PUSH
24408: LD_VAR 0 3
24412: IN
24413: ST_TO_ADDR
// end ;
24414: LD_VAR 0 3
24418: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24419: LD_INT 0
24421: PPUSH
// if not chassis or not weapon then
24422: LD_VAR 0 1
24426: NOT
24427: PUSH
24428: LD_VAR 0 2
24432: NOT
24433: OR
24434: IFFALSE 24438
// exit ;
24436: GO 25464
// case weapon of us_machine_gun :
24438: LD_VAR 0 2
24442: PUSH
24443: LD_INT 2
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24481
24451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: ST_TO_ADDR
24479: GO 25448
24481: LD_INT 3
24483: DOUBLE
24484: EQUAL
24485: IFTRUE 24489
24487: GO 24519
24489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 4
24506: PUSH
24507: LD_INT 5
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 25448
24519: LD_INT 11
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24557
24527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24528: LD_ADDR_VAR 0 3
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: LD_INT 5
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 25448
24557: LD_INT 4
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24591
24565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24566: LD_ADDR_VAR 0 3
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: LD_INT 4
24579: PUSH
24580: LD_INT 5
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
24589: GO 25448
24591: LD_INT 5
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24625
24599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 4
24613: PUSH
24614: LD_INT 5
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
24623: GO 25448
24625: LD_INT 9
24627: DOUBLE
24628: EQUAL
24629: IFTRUE 24633
24631: GO 24659
24633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24634: LD_ADDR_VAR 0 3
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: LD_INT 4
24647: PUSH
24648: LD_INT 5
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: ST_TO_ADDR
24657: GO 25448
24659: LD_INT 7
24661: DOUBLE
24662: EQUAL
24663: IFTRUE 24667
24665: GO 24693
24667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: ST_TO_ADDR
24691: GO 25448
24693: LD_INT 12
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24727
24701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: LD_INT 5
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: ST_TO_ADDR
24725: GO 25448
24727: LD_INT 13
24729: DOUBLE
24730: EQUAL
24731: IFTRUE 24735
24733: GO 24761
24735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: ST_TO_ADDR
24759: GO 25448
24761: LD_INT 14
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24787
24769: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24770: LD_ADDR_VAR 0 3
24774: PUSH
24775: LD_INT 4
24777: PUSH
24778: LD_INT 5
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: ST_TO_ADDR
24785: GO 25448
24787: LD_INT 6
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24813
24795: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_INT 4
24803: PUSH
24804: LD_INT 5
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: ST_TO_ADDR
24811: GO 25448
24813: LD_INT 10
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24839
24821: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24822: LD_ADDR_VAR 0 3
24826: PUSH
24827: LD_INT 4
24829: PUSH
24830: LD_INT 5
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: ST_TO_ADDR
24837: GO 25448
24839: LD_INT 22
24841: DOUBLE
24842: EQUAL
24843: IFTRUE 24847
24845: GO 24873
24847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24848: LD_ADDR_VAR 0 3
24852: PUSH
24853: LD_INT 11
24855: PUSH
24856: LD_INT 12
24858: PUSH
24859: LD_INT 13
24861: PUSH
24862: LD_INT 14
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: ST_TO_ADDR
24871: GO 25448
24873: LD_INT 23
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24881
24879: GO 24907
24881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_INT 11
24889: PUSH
24890: LD_INT 12
24892: PUSH
24893: LD_INT 13
24895: PUSH
24896: LD_INT 14
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25448
24907: LD_INT 24
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24941
24915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_INT 11
24923: PUSH
24924: LD_INT 12
24926: PUSH
24927: LD_INT 13
24929: PUSH
24930: LD_INT 14
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25448
24941: LD_INT 30
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 24975
24949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_INT 11
24957: PUSH
24958: LD_INT 12
24960: PUSH
24961: LD_INT 13
24963: PUSH
24964: LD_INT 14
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
24973: GO 25448
24975: LD_INT 25
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25001
24983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 13
24991: PUSH
24992: LD_INT 14
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: ST_TO_ADDR
24999: GO 25448
25001: LD_INT 27
25003: DOUBLE
25004: EQUAL
25005: IFTRUE 25009
25007: GO 25027
25009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: LD_INT 13
25017: PUSH
25018: LD_INT 14
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: ST_TO_ADDR
25025: GO 25448
25027: LD_INT 28
25029: DOUBLE
25030: EQUAL
25031: IFTRUE 25035
25033: GO 25053
25035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 13
25043: PUSH
25044: LD_INT 14
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: ST_TO_ADDR
25051: GO 25448
25053: LD_INT 29
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25079
25061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25062: LD_ADDR_VAR 0 3
25066: PUSH
25067: LD_INT 13
25069: PUSH
25070: LD_INT 14
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: ST_TO_ADDR
25077: GO 25448
25079: LD_INT 31
25081: DOUBLE
25082: EQUAL
25083: IFTRUE 25087
25085: GO 25105
25087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: LD_INT 13
25095: PUSH
25096: LD_INT 14
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 25448
25105: LD_INT 26
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25131
25113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 13
25121: PUSH
25122: LD_INT 14
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: ST_TO_ADDR
25129: GO 25448
25131: LD_INT 42
25133: DOUBLE
25134: EQUAL
25135: IFTRUE 25139
25137: GO 25165
25139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 22
25150: PUSH
25151: LD_INT 23
25153: PUSH
25154: LD_INT 24
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: ST_TO_ADDR
25163: GO 25448
25165: LD_INT 43
25167: DOUBLE
25168: EQUAL
25169: IFTRUE 25173
25171: GO 25199
25173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: LD_INT 21
25181: PUSH
25182: LD_INT 22
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: ST_TO_ADDR
25197: GO 25448
25199: LD_INT 44
25201: DOUBLE
25202: EQUAL
25203: IFTRUE 25207
25205: GO 25233
25207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 21
25215: PUSH
25216: LD_INT 22
25218: PUSH
25219: LD_INT 23
25221: PUSH
25222: LD_INT 24
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: ST_TO_ADDR
25231: GO 25448
25233: LD_INT 45
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25267
25241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25242: LD_ADDR_VAR 0 3
25246: PUSH
25247: LD_INT 21
25249: PUSH
25250: LD_INT 22
25252: PUSH
25253: LD_INT 23
25255: PUSH
25256: LD_INT 24
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
25265: GO 25448
25267: LD_INT 49
25269: DOUBLE
25270: EQUAL
25271: IFTRUE 25275
25273: GO 25301
25275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 21
25283: PUSH
25284: LD_INT 22
25286: PUSH
25287: LD_INT 23
25289: PUSH
25290: LD_INT 24
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
25299: GO 25448
25301: LD_INT 51
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25335
25309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_INT 21
25317: PUSH
25318: LD_INT 22
25320: PUSH
25321: LD_INT 23
25323: PUSH
25324: LD_INT 24
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: ST_TO_ADDR
25333: GO 25448
25335: LD_INT 52
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25369
25343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25344: LD_ADDR_VAR 0 3
25348: PUSH
25349: LD_INT 21
25351: PUSH
25352: LD_INT 22
25354: PUSH
25355: LD_INT 23
25357: PUSH
25358: LD_INT 24
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
25367: GO 25448
25369: LD_INT 53
25371: DOUBLE
25372: EQUAL
25373: IFTRUE 25377
25375: GO 25395
25377: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25378: LD_ADDR_VAR 0 3
25382: PUSH
25383: LD_INT 23
25385: PUSH
25386: LD_INT 24
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: ST_TO_ADDR
25393: GO 25448
25395: LD_INT 46
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25421
25403: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 23
25411: PUSH
25412: LD_INT 24
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: ST_TO_ADDR
25419: GO 25448
25421: LD_INT 47
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25447
25429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 23
25437: PUSH
25438: LD_INT 24
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: ST_TO_ADDR
25445: GO 25448
25447: POP
// result := ( chassis in result ) ;
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_VAR 0 1
25457: PUSH
25458: LD_VAR 0 3
25462: IN
25463: ST_TO_ADDR
// end ;
25464: LD_VAR 0 3
25468: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25469: LD_INT 0
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
// result := array ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 1
25487: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25488: LD_VAR 0 1
25492: NOT
25493: PUSH
25494: LD_VAR 0 2
25498: NOT
25499: OR
25500: PUSH
25501: LD_VAR 0 3
25505: NOT
25506: OR
25507: PUSH
25508: LD_VAR 0 2
25512: PUSH
25513: LD_VAR 0 1
25517: GREATER
25518: OR
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: LD_VAR 0 1
25529: GREATER
25530: OR
25531: IFFALSE 25535
// exit ;
25533: GO 25831
// if direction then
25535: LD_VAR 0 4
25539: IFFALSE 25603
// begin d := 1 ;
25541: LD_ADDR_VAR 0 9
25545: PUSH
25546: LD_INT 1
25548: ST_TO_ADDR
// if i_from > i_to then
25549: LD_VAR 0 2
25553: PUSH
25554: LD_VAR 0 3
25558: GREATER
25559: IFFALSE 25585
// length := ( array - i_from ) + i_to else
25561: LD_ADDR_VAR 0 11
25565: PUSH
25566: LD_VAR 0 1
25570: PUSH
25571: LD_VAR 0 2
25575: MINUS
25576: PUSH
25577: LD_VAR 0 3
25581: PLUS
25582: ST_TO_ADDR
25583: GO 25601
// length := i_to - i_from ;
25585: LD_ADDR_VAR 0 11
25589: PUSH
25590: LD_VAR 0 3
25594: PUSH
25595: LD_VAR 0 2
25599: MINUS
25600: ST_TO_ADDR
// end else
25601: GO 25664
// begin d := - 1 ;
25603: LD_ADDR_VAR 0 9
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: ST_TO_ADDR
// if i_from > i_to then
25612: LD_VAR 0 2
25616: PUSH
25617: LD_VAR 0 3
25621: GREATER
25622: IFFALSE 25642
// length := i_from - i_to else
25624: LD_ADDR_VAR 0 11
25628: PUSH
25629: LD_VAR 0 2
25633: PUSH
25634: LD_VAR 0 3
25638: MINUS
25639: ST_TO_ADDR
25640: GO 25664
// length := ( array - i_to ) + i_from ;
25642: LD_ADDR_VAR 0 11
25646: PUSH
25647: LD_VAR 0 1
25651: PUSH
25652: LD_VAR 0 3
25656: MINUS
25657: PUSH
25658: LD_VAR 0 2
25662: PLUS
25663: ST_TO_ADDR
// end ; if not length then
25664: LD_VAR 0 11
25668: NOT
25669: IFFALSE 25673
// exit ;
25671: GO 25831
// tmp := array ;
25673: LD_ADDR_VAR 0 10
25677: PUSH
25678: LD_VAR 0 1
25682: ST_TO_ADDR
// for i = 1 to length do
25683: LD_ADDR_VAR 0 6
25687: PUSH
25688: DOUBLE
25689: LD_INT 1
25691: DEC
25692: ST_TO_ADDR
25693: LD_VAR 0 11
25697: PUSH
25698: FOR_TO
25699: IFFALSE 25819
// begin for j = 1 to array do
25701: LD_ADDR_VAR 0 7
25705: PUSH
25706: DOUBLE
25707: LD_INT 1
25709: DEC
25710: ST_TO_ADDR
25711: LD_VAR 0 1
25715: PUSH
25716: FOR_TO
25717: IFFALSE 25805
// begin k := j + d ;
25719: LD_ADDR_VAR 0 8
25723: PUSH
25724: LD_VAR 0 7
25728: PUSH
25729: LD_VAR 0 9
25733: PLUS
25734: ST_TO_ADDR
// if k > array then
25735: LD_VAR 0 8
25739: PUSH
25740: LD_VAR 0 1
25744: GREATER
25745: IFFALSE 25755
// k := 1 ;
25747: LD_ADDR_VAR 0 8
25751: PUSH
25752: LD_INT 1
25754: ST_TO_ADDR
// if not k then
25755: LD_VAR 0 8
25759: NOT
25760: IFFALSE 25772
// k := array ;
25762: LD_ADDR_VAR 0 8
25766: PUSH
25767: LD_VAR 0 1
25771: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25772: LD_ADDR_VAR 0 10
25776: PUSH
25777: LD_VAR 0 10
25781: PPUSH
25782: LD_VAR 0 8
25786: PPUSH
25787: LD_VAR 0 1
25791: PUSH
25792: LD_VAR 0 7
25796: ARRAY
25797: PPUSH
25798: CALL_OW 1
25802: ST_TO_ADDR
// end ;
25803: GO 25716
25805: POP
25806: POP
// array := tmp ;
25807: LD_ADDR_VAR 0 1
25811: PUSH
25812: LD_VAR 0 10
25816: ST_TO_ADDR
// end ;
25817: GO 25698
25819: POP
25820: POP
// result := array ;
25821: LD_ADDR_VAR 0 5
25825: PUSH
25826: LD_VAR 0 1
25830: ST_TO_ADDR
// end ;
25831: LD_VAR 0 5
25835: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25836: LD_INT 0
25838: PPUSH
25839: PPUSH
// result := 0 ;
25840: LD_ADDR_VAR 0 3
25844: PUSH
25845: LD_INT 0
25847: ST_TO_ADDR
// if not array or not value in array then
25848: LD_VAR 0 1
25852: NOT
25853: PUSH
25854: LD_VAR 0 2
25858: PUSH
25859: LD_VAR 0 1
25863: IN
25864: NOT
25865: OR
25866: IFFALSE 25870
// exit ;
25868: GO 25924
// for i = 1 to array do
25870: LD_ADDR_VAR 0 4
25874: PUSH
25875: DOUBLE
25876: LD_INT 1
25878: DEC
25879: ST_TO_ADDR
25880: LD_VAR 0 1
25884: PUSH
25885: FOR_TO
25886: IFFALSE 25922
// if value = array [ i ] then
25888: LD_VAR 0 2
25892: PUSH
25893: LD_VAR 0 1
25897: PUSH
25898: LD_VAR 0 4
25902: ARRAY
25903: EQUAL
25904: IFFALSE 25920
// begin result := i ;
25906: LD_ADDR_VAR 0 3
25910: PUSH
25911: LD_VAR 0 4
25915: ST_TO_ADDR
// exit ;
25916: POP
25917: POP
25918: GO 25924
// end ;
25920: GO 25885
25922: POP
25923: POP
// end ;
25924: LD_VAR 0 3
25928: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25929: LD_INT 0
25931: PPUSH
// vc_chassis := chassis ;
25932: LD_ADDR_OWVAR 37
25936: PUSH
25937: LD_VAR 0 1
25941: ST_TO_ADDR
// vc_engine := engine ;
25942: LD_ADDR_OWVAR 39
25946: PUSH
25947: LD_VAR 0 2
25951: ST_TO_ADDR
// vc_control := control ;
25952: LD_ADDR_OWVAR 38
25956: PUSH
25957: LD_VAR 0 3
25961: ST_TO_ADDR
// vc_weapon := weapon ;
25962: LD_ADDR_OWVAR 40
25966: PUSH
25967: LD_VAR 0 4
25971: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25972: LD_ADDR_OWVAR 41
25976: PUSH
25977: LD_VAR 0 5
25981: ST_TO_ADDR
// end ;
25982: LD_VAR 0 6
25986: RET
// export function WantPlant ( unit ) ; var task ; begin
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
// result := false ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 437
26013: ST_TO_ADDR
// if task then
26014: LD_VAR 0 3
26018: IFFALSE 26046
// if task [ 1 ] [ 1 ] = p then
26020: LD_VAR 0 3
26024: PUSH
26025: LD_INT 1
26027: ARRAY
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: PUSH
26033: LD_STRING p
26035: EQUAL
26036: IFFALSE 26046
// result := true ;
26038: LD_ADDR_VAR 0 2
26042: PUSH
26043: LD_INT 1
26045: ST_TO_ADDR
// end ;
26046: LD_VAR 0 2
26050: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26051: LD_INT 0
26053: PPUSH
26054: PPUSH
26055: PPUSH
26056: PPUSH
// if pos < 1 then
26057: LD_VAR 0 2
26061: PUSH
26062: LD_INT 1
26064: LESS
26065: IFFALSE 26069
// exit ;
26067: GO 26372
// if pos = 1 then
26069: LD_VAR 0 2
26073: PUSH
26074: LD_INT 1
26076: EQUAL
26077: IFFALSE 26110
// result := Replace ( arr , pos [ 1 ] , value ) else
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
26108: GO 26372
// begin tmp := arr ;
26110: LD_ADDR_VAR 0 6
26114: PUSH
26115: LD_VAR 0 1
26119: ST_TO_ADDR
// s_arr := [ tmp ] ;
26120: LD_ADDR_VAR 0 7
26124: PUSH
26125: LD_VAR 0 6
26129: PUSH
26130: EMPTY
26131: LIST
26132: ST_TO_ADDR
// for i = 1 to pos - 1 do
26133: LD_ADDR_VAR 0 5
26137: PUSH
26138: DOUBLE
26139: LD_INT 1
26141: DEC
26142: ST_TO_ADDR
26143: LD_VAR 0 2
26147: PUSH
26148: LD_INT 1
26150: MINUS
26151: PUSH
26152: FOR_TO
26153: IFFALSE 26198
// begin tmp := tmp [ pos [ i ] ] ;
26155: LD_ADDR_VAR 0 6
26159: PUSH
26160: LD_VAR 0 6
26164: PUSH
26165: LD_VAR 0 2
26169: PUSH
26170: LD_VAR 0 5
26174: ARRAY
26175: ARRAY
26176: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26177: LD_ADDR_VAR 0 7
26181: PUSH
26182: LD_VAR 0 7
26186: PUSH
26187: LD_VAR 0 6
26191: PUSH
26192: EMPTY
26193: LIST
26194: ADD
26195: ST_TO_ADDR
// end ;
26196: GO 26152
26198: POP
26199: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26200: LD_ADDR_VAR 0 6
26204: PUSH
26205: LD_VAR 0 6
26209: PPUSH
26210: LD_VAR 0 2
26214: PUSH
26215: LD_VAR 0 2
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 3
26225: PPUSH
26226: CALL_OW 1
26230: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26231: LD_ADDR_VAR 0 7
26235: PUSH
26236: LD_VAR 0 7
26240: PPUSH
26241: LD_VAR 0 7
26245: PPUSH
26246: LD_VAR 0 6
26250: PPUSH
26251: CALL_OW 1
26255: ST_TO_ADDR
// for i = s_arr downto 2 do
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: DOUBLE
26262: LD_VAR 0 7
26266: INC
26267: ST_TO_ADDR
26268: LD_INT 2
26270: PUSH
26271: FOR_DOWNTO
26272: IFFALSE 26356
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26274: LD_ADDR_VAR 0 6
26278: PUSH
26279: LD_VAR 0 7
26283: PUSH
26284: LD_VAR 0 5
26288: PUSH
26289: LD_INT 1
26291: MINUS
26292: ARRAY
26293: PPUSH
26294: LD_VAR 0 2
26298: PUSH
26299: LD_VAR 0 5
26303: PUSH
26304: LD_INT 1
26306: MINUS
26307: ARRAY
26308: PPUSH
26309: LD_VAR 0 7
26313: PUSH
26314: LD_VAR 0 5
26318: ARRAY
26319: PPUSH
26320: CALL_OW 1
26324: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26325: LD_ADDR_VAR 0 7
26329: PUSH
26330: LD_VAR 0 7
26334: PPUSH
26335: LD_VAR 0 5
26339: PUSH
26340: LD_INT 1
26342: MINUS
26343: PPUSH
26344: LD_VAR 0 6
26348: PPUSH
26349: CALL_OW 1
26353: ST_TO_ADDR
// end ;
26354: GO 26271
26356: POP
26357: POP
// result := s_arr [ 1 ] ;
26358: LD_ADDR_VAR 0 4
26362: PUSH
26363: LD_VAR 0 7
26367: PUSH
26368: LD_INT 1
26370: ARRAY
26371: ST_TO_ADDR
// end ; end ;
26372: LD_VAR 0 4
26376: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26377: LD_INT 0
26379: PPUSH
26380: PPUSH
// if not list then
26381: LD_VAR 0 1
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26481
// i := list [ pos1 ] ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 1
26399: PUSH
26400: LD_VAR 0 2
26404: ARRAY
26405: ST_TO_ADDR
// if not i then
26406: LD_VAR 0 5
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26481
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26415: LD_ADDR_VAR 0 1
26419: PUSH
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_VAR 0 1
26434: PUSH
26435: LD_VAR 0 3
26439: ARRAY
26440: PPUSH
26441: CALL_OW 1
26445: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_VAR 0 3
26460: PPUSH
26461: LD_VAR 0 5
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// result := list ;
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: LD_VAR 0 1
26480: ST_TO_ADDR
// end ;
26481: LD_VAR 0 4
26485: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26486: LD_INT 0
26488: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26489: LD_ADDR_VAR 0 5
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 250
26503: PPUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 251
26513: PPUSH
26514: LD_VAR 0 2
26518: PPUSH
26519: LD_VAR 0 3
26523: PPUSH
26524: LD_VAR 0 4
26528: PPUSH
26529: CALL 26539 0 5
26533: ST_TO_ADDR
// end ;
26534: LD_VAR 0 5
26538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
// if not list then
26545: LD_VAR 0 3
26549: NOT
26550: IFFALSE 26554
// exit ;
26552: GO 26942
// result := [ ] ;
26554: LD_ADDR_VAR 0 6
26558: PUSH
26559: EMPTY
26560: ST_TO_ADDR
// for i in list do
26561: LD_ADDR_VAR 0 7
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: FOR_IN
26572: IFFALSE 26774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26574: LD_ADDR_VAR 0 9
26578: PUSH
26579: LD_VAR 0 7
26583: PPUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: CALL_OW 297
26598: ST_TO_ADDR
// if not result then
26599: LD_VAR 0 6
26603: NOT
26604: IFFALSE 26630
// result := [ [ i , tmp ] ] else
26606: LD_ADDR_VAR 0 6
26610: PUSH
26611: LD_VAR 0 7
26615: PUSH
26616: LD_VAR 0 9
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: ST_TO_ADDR
26628: GO 26772
// begin if result [ result ] [ 2 ] < tmp then
26630: LD_VAR 0 6
26634: PUSH
26635: LD_VAR 0 6
26639: ARRAY
26640: PUSH
26641: LD_INT 2
26643: ARRAY
26644: PUSH
26645: LD_VAR 0 9
26649: LESS
26650: IFFALSE 26692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26652: LD_ADDR_VAR 0 6
26656: PUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: LD_VAR 0 6
26666: PUSH
26667: LD_INT 1
26669: PLUS
26670: PPUSH
26671: LD_VAR 0 7
26675: PUSH
26676: LD_VAR 0 9
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 2
26689: ST_TO_ADDR
26690: GO 26772
// for j = 1 to result do
26692: LD_ADDR_VAR 0 8
26696: PUSH
26697: DOUBLE
26698: LD_INT 1
26700: DEC
26701: ST_TO_ADDR
26702: LD_VAR 0 6
26706: PUSH
26707: FOR_TO
26708: IFFALSE 26770
// begin if tmp < result [ j ] [ 2 ] then
26710: LD_VAR 0 9
26714: PUSH
26715: LD_VAR 0 6
26719: PUSH
26720: LD_VAR 0 8
26724: ARRAY
26725: PUSH
26726: LD_INT 2
26728: ARRAY
26729: LESS
26730: IFFALSE 26768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 8
26746: PPUSH
26747: LD_VAR 0 7
26751: PUSH
26752: LD_VAR 0 9
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PPUSH
26761: CALL_OW 2
26765: ST_TO_ADDR
// break ;
26766: GO 26770
// end ; end ;
26768: GO 26707
26770: POP
26771: POP
// end ; end ;
26772: GO 26571
26774: POP
26775: POP
// if result and not asc then
26776: LD_VAR 0 6
26780: PUSH
26781: LD_VAR 0 4
26785: NOT
26786: AND
26787: IFFALSE 26862
// begin tmp := result ;
26789: LD_ADDR_VAR 0 9
26793: PUSH
26794: LD_VAR 0 6
26798: ST_TO_ADDR
// for i = tmp downto 1 do
26799: LD_ADDR_VAR 0 7
26803: PUSH
26804: DOUBLE
26805: LD_VAR 0 9
26809: INC
26810: ST_TO_ADDR
26811: LD_INT 1
26813: PUSH
26814: FOR_DOWNTO
26815: IFFALSE 26860
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26817: LD_ADDR_VAR 0 6
26821: PUSH
26822: LD_VAR 0 6
26826: PPUSH
26827: LD_VAR 0 9
26831: PUSH
26832: LD_VAR 0 7
26836: MINUS
26837: PUSH
26838: LD_INT 1
26840: PLUS
26841: PPUSH
26842: LD_VAR 0 9
26846: PUSH
26847: LD_VAR 0 7
26851: ARRAY
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
26858: GO 26814
26860: POP
26861: POP
// end ; tmp := [ ] ;
26862: LD_ADDR_VAR 0 9
26866: PUSH
26867: EMPTY
26868: ST_TO_ADDR
// if mode then
26869: LD_VAR 0 5
26873: IFFALSE 26942
// begin for i = 1 to result do
26875: LD_ADDR_VAR 0 7
26879: PUSH
26880: DOUBLE
26881: LD_INT 1
26883: DEC
26884: ST_TO_ADDR
26885: LD_VAR 0 6
26889: PUSH
26890: FOR_TO
26891: IFFALSE 26930
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26893: LD_ADDR_VAR 0 9
26897: PUSH
26898: LD_VAR 0 9
26902: PPUSH
26903: LD_VAR 0 7
26907: PPUSH
26908: LD_VAR 0 6
26912: PUSH
26913: LD_VAR 0 7
26917: ARRAY
26918: PUSH
26919: LD_INT 1
26921: ARRAY
26922: PPUSH
26923: CALL_OW 1
26927: ST_TO_ADDR
26928: GO 26890
26930: POP
26931: POP
// result := tmp ;
26932: LD_ADDR_VAR 0 6
26936: PUSH
26937: LD_VAR 0 9
26941: ST_TO_ADDR
// end ; end ;
26942: LD_VAR 0 6
26946: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26947: LD_INT 0
26949: PPUSH
26950: PPUSH
26951: PPUSH
26952: PPUSH
26953: PPUSH
26954: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26955: LD_ADDR_VAR 0 5
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// if not x or not y then
26977: LD_VAR 0 2
26981: NOT
26982: PUSH
26983: LD_VAR 0 3
26987: NOT
26988: OR
26989: IFFALSE 26993
// exit ;
26991: GO 28639
// if not range then
26993: LD_VAR 0 4
26997: NOT
26998: IFFALSE 27008
// range := 10 ;
27000: LD_ADDR_VAR 0 4
27004: PUSH
27005: LD_INT 10
27007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_INT 81
27015: PUSH
27016: LD_VAR 0 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 92
27027: PUSH
27028: LD_VAR 0 2
27032: PUSH
27033: LD_VAR 0 3
27037: PUSH
27038: LD_VAR 0 4
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: LD_INT 21
27054: PUSH
27055: LD_INT 3
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if not tmp then
27076: LD_VAR 0 8
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 28639
// for i in tmp do
27085: LD_ADDR_VAR 0 6
27089: PUSH
27090: LD_VAR 0 8
27094: PUSH
27095: FOR_IN
27096: IFFALSE 28614
// begin points := [ 0 , 0 , 0 ] ;
27098: LD_ADDR_VAR 0 9
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// bpoints := 1 ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_INT 1
27124: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27125: LD_VAR 0 6
27129: PPUSH
27130: CALL_OW 247
27134: PUSH
27135: LD_INT 1
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27721
27143: POP
// begin if GetClass ( i ) = 1 then
27144: LD_VAR 0 6
27148: PPUSH
27149: CALL_OW 257
27153: PUSH
27154: LD_INT 1
27156: EQUAL
27157: IFFALSE 27178
// points := [ 10 , 5 , 3 ] ;
27159: LD_ADDR_VAR 0 9
27163: PUSH
27164: LD_INT 10
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27178: LD_VAR 0 6
27182: PPUSH
27183: CALL_OW 257
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: LD_INT 4
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: IN
27202: IFFALSE 27223
// points := [ 3 , 2 , 1 ] ;
27204: LD_ADDR_VAR 0 9
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27223: LD_VAR 0 6
27227: PPUSH
27228: CALL_OW 257
27232: PUSH
27233: LD_INT 5
27235: EQUAL
27236: IFFALSE 27257
// points := [ 130 , 5 , 2 ] ;
27238: LD_ADDR_VAR 0 9
27242: PUSH
27243: LD_INT 130
27245: PUSH
27246: LD_INT 5
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27257: LD_VAR 0 6
27261: PPUSH
27262: CALL_OW 257
27266: PUSH
27267: LD_INT 8
27269: EQUAL
27270: IFFALSE 27291
// points := [ 35 , 35 , 30 ] ;
27272: LD_ADDR_VAR 0 9
27276: PUSH
27277: LD_INT 35
27279: PUSH
27280: LD_INT 35
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27291: LD_VAR 0 6
27295: PPUSH
27296: CALL_OW 257
27300: PUSH
27301: LD_INT 9
27303: EQUAL
27304: IFFALSE 27325
// points := [ 20 , 55 , 40 ] ;
27306: LD_ADDR_VAR 0 9
27310: PUSH
27311: LD_INT 20
27313: PUSH
27314: LD_INT 55
27316: PUSH
27317: LD_INT 40
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27325: LD_VAR 0 6
27329: PPUSH
27330: CALL_OW 257
27334: PUSH
27335: LD_INT 12
27337: PUSH
27338: LD_INT 16
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: IN
27345: IFFALSE 27366
// points := [ 5 , 3 , 2 ] ;
27347: LD_ADDR_VAR 0 9
27351: PUSH
27352: LD_INT 5
27354: PUSH
27355: LD_INT 3
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 257
27375: PUSH
27376: LD_INT 17
27378: EQUAL
27379: IFFALSE 27400
// points := [ 100 , 50 , 75 ] ;
27381: LD_ADDR_VAR 0 9
27385: PUSH
27386: LD_INT 100
27388: PUSH
27389: LD_INT 50
27391: PUSH
27392: LD_INT 75
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27400: LD_VAR 0 6
27404: PPUSH
27405: CALL_OW 257
27409: PUSH
27410: LD_INT 15
27412: EQUAL
27413: IFFALSE 27434
// points := [ 10 , 5 , 3 ] ;
27415: LD_ADDR_VAR 0 9
27419: PUSH
27420: LD_INT 10
27422: PUSH
27423: LD_INT 5
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27434: LD_VAR 0 6
27438: PPUSH
27439: CALL_OW 257
27443: PUSH
27444: LD_INT 14
27446: EQUAL
27447: IFFALSE 27468
// points := [ 10 , 0 , 0 ] ;
27449: LD_ADDR_VAR 0 9
27453: PUSH
27454: LD_INT 10
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27468: LD_VAR 0 6
27472: PPUSH
27473: CALL_OW 257
27477: PUSH
27478: LD_INT 11
27480: EQUAL
27481: IFFALSE 27502
// points := [ 30 , 10 , 5 ] ;
27483: LD_ADDR_VAR 0 9
27487: PUSH
27488: LD_INT 30
27490: PUSH
27491: LD_INT 10
27493: PUSH
27494: LD_INT 5
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27502: LD_VAR 0 1
27506: PPUSH
27507: LD_INT 5
27509: PPUSH
27510: CALL_OW 321
27514: PUSH
27515: LD_INT 2
27517: EQUAL
27518: IFFALSE 27535
// bpoints := bpoints * 1.8 ;
27520: LD_ADDR_VAR 0 10
27524: PUSH
27525: LD_VAR 0 10
27529: PUSH
27530: LD_REAL  1.80000000000000E+0000
27533: MUL
27534: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 257
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 4
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: IN
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_INT 51
27571: PPUSH
27572: CALL_OW 321
27576: PUSH
27577: LD_INT 2
27579: EQUAL
27580: AND
27581: IFFALSE 27598
// bpoints := bpoints * 1.2 ;
27583: LD_ADDR_VAR 0 10
27587: PUSH
27588: LD_VAR 0 10
27592: PUSH
27593: LD_REAL  1.20000000000000E+0000
27596: MUL
27597: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 257
27607: PUSH
27608: LD_INT 5
27610: PUSH
27611: LD_INT 7
27613: PUSH
27614: LD_INT 9
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: IN
27622: PUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_INT 52
27630: PPUSH
27631: CALL_OW 321
27635: PUSH
27636: LD_INT 2
27638: EQUAL
27639: AND
27640: IFFALSE 27657
// bpoints := bpoints * 1.5 ;
27642: LD_ADDR_VAR 0 10
27646: PUSH
27647: LD_VAR 0 10
27651: PUSH
27652: LD_REAL  1.50000000000000E+0000
27655: MUL
27656: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_INT 66
27664: PPUSH
27665: CALL_OW 321
27669: PUSH
27670: LD_INT 2
27672: EQUAL
27673: IFFALSE 27690
// bpoints := bpoints * 1.1 ;
27675: LD_ADDR_VAR 0 10
27679: PUSH
27680: LD_VAR 0 10
27684: PUSH
27685: LD_REAL  1.10000000000000E+0000
27688: MUL
27689: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27690: LD_ADDR_VAR 0 10
27694: PUSH
27695: LD_VAR 0 10
27699: PUSH
27700: LD_VAR 0 6
27704: PPUSH
27705: LD_INT 1
27707: PPUSH
27708: CALL_OW 259
27712: PUSH
27713: LD_REAL  1.15000000000000E+0000
27716: MUL
27717: MUL
27718: ST_TO_ADDR
// end ; unit_vehicle :
27719: GO 28543
27721: LD_INT 2
27723: DOUBLE
27724: EQUAL
27725: IFTRUE 27729
27727: GO 28531
27729: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 264
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: LD_INT 42
27745: PUSH
27746: LD_INT 24
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: IN
27754: IFFALSE 27775
// points := [ 25 , 5 , 3 ] ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_INT 25
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27775: LD_VAR 0 6
27779: PPUSH
27780: CALL_OW 264
27784: PUSH
27785: LD_INT 4
27787: PUSH
27788: LD_INT 43
27790: PUSH
27791: LD_INT 25
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: IN
27799: IFFALSE 27820
// points := [ 40 , 15 , 5 ] ;
27801: LD_ADDR_VAR 0 9
27805: PUSH
27806: LD_INT 40
27808: PUSH
27809: LD_INT 15
27811: PUSH
27812: LD_INT 5
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27820: LD_VAR 0 6
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 23
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: IN
27840: IFFALSE 27861
// points := [ 7 , 25 , 8 ] ;
27842: LD_ADDR_VAR 0 9
27846: PUSH
27847: LD_INT 7
27849: PUSH
27850: LD_INT 25
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27861: LD_VAR 0 6
27865: PPUSH
27866: CALL_OW 264
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: LD_INT 27
27876: PUSH
27877: LD_INT 44
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: IN
27885: IFFALSE 27906
// points := [ 14 , 50 , 16 ] ;
27887: LD_ADDR_VAR 0 9
27891: PUSH
27892: LD_INT 14
27894: PUSH
27895: LD_INT 50
27897: PUSH
27898: LD_INT 16
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27906: LD_VAR 0 6
27910: PPUSH
27911: CALL_OW 264
27915: PUSH
27916: LD_INT 6
27918: PUSH
27919: LD_INT 46
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: IN
27926: IFFALSE 27947
// points := [ 32 , 120 , 70 ] ;
27928: LD_ADDR_VAR 0 9
27932: PUSH
27933: LD_INT 32
27935: PUSH
27936: LD_INT 120
27938: PUSH
27939: LD_INT 70
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27947: LD_VAR 0 6
27951: PPUSH
27952: CALL_OW 264
27956: PUSH
27957: LD_INT 7
27959: PUSH
27960: LD_INT 28
27962: PUSH
27963: LD_INT 45
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: IN
27971: IFFALSE 27992
// points := [ 35 , 20 , 45 ] ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_INT 35
27980: PUSH
27981: LD_INT 20
27983: PUSH
27984: LD_INT 45
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27992: LD_VAR 0 6
27996: PPUSH
27997: CALL_OW 264
28001: PUSH
28002: LD_INT 47
28004: PUSH
28005: EMPTY
28006: LIST
28007: IN
28008: IFFALSE 28029
// points := [ 67 , 45 , 75 ] ;
28010: LD_ADDR_VAR 0 9
28014: PUSH
28015: LD_INT 67
28017: PUSH
28018: LD_INT 45
28020: PUSH
28021: LD_INT 75
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28029: LD_VAR 0 6
28033: PPUSH
28034: CALL_OW 264
28038: PUSH
28039: LD_INT 26
28041: PUSH
28042: EMPTY
28043: LIST
28044: IN
28045: IFFALSE 28066
// points := [ 120 , 30 , 80 ] ;
28047: LD_ADDR_VAR 0 9
28051: PUSH
28052: LD_INT 120
28054: PUSH
28055: LD_INT 30
28057: PUSH
28058: LD_INT 80
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28066: LD_VAR 0 6
28070: PPUSH
28071: CALL_OW 264
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: EMPTY
28080: LIST
28081: IN
28082: IFFALSE 28103
// points := [ 40 , 1 , 1 ] ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_INT 40
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28103: LD_VAR 0 6
28107: PPUSH
28108: CALL_OW 264
28112: PUSH
28113: LD_INT 29
28115: PUSH
28116: EMPTY
28117: LIST
28118: IN
28119: IFFALSE 28140
// points := [ 70 , 200 , 400 ] ;
28121: LD_ADDR_VAR 0 9
28125: PUSH
28126: LD_INT 70
28128: PUSH
28129: LD_INT 200
28131: PUSH
28132: LD_INT 400
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28140: LD_VAR 0 6
28144: PPUSH
28145: CALL_OW 264
28149: PUSH
28150: LD_INT 14
28152: PUSH
28153: LD_INT 53
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: IN
28160: IFFALSE 28181
// points := [ 40 , 10 , 20 ] ;
28162: LD_ADDR_VAR 0 9
28166: PUSH
28167: LD_INT 40
28169: PUSH
28170: LD_INT 10
28172: PUSH
28173: LD_INT 20
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28181: LD_VAR 0 6
28185: PPUSH
28186: CALL_OW 264
28190: PUSH
28191: LD_INT 9
28193: PUSH
28194: EMPTY
28195: LIST
28196: IN
28197: IFFALSE 28218
// points := [ 5 , 70 , 20 ] ;
28199: LD_ADDR_VAR 0 9
28203: PUSH
28204: LD_INT 5
28206: PUSH
28207: LD_INT 70
28209: PUSH
28210: LD_INT 20
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28218: LD_VAR 0 6
28222: PPUSH
28223: CALL_OW 264
28227: PUSH
28228: LD_INT 10
28230: PUSH
28231: EMPTY
28232: LIST
28233: IN
28234: IFFALSE 28255
// points := [ 35 , 110 , 70 ] ;
28236: LD_ADDR_VAR 0 9
28240: PUSH
28241: LD_INT 35
28243: PUSH
28244: LD_INT 110
28246: PUSH
28247: LD_INT 70
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28255: LD_VAR 0 6
28259: PPUSH
28260: CALL_OW 265
28264: PUSH
28265: LD_INT 25
28267: EQUAL
28268: IFFALSE 28289
// points := [ 80 , 65 , 100 ] ;
28270: LD_ADDR_VAR 0 9
28274: PUSH
28275: LD_INT 80
28277: PUSH
28278: LD_INT 65
28280: PUSH
28281: LD_INT 100
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28289: LD_VAR 0 6
28293: PPUSH
28294: CALL_OW 263
28298: PUSH
28299: LD_INT 1
28301: EQUAL
28302: IFFALSE 28337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28304: LD_ADDR_VAR 0 10
28308: PUSH
28309: LD_VAR 0 10
28313: PUSH
28314: LD_VAR 0 6
28318: PPUSH
28319: CALL_OW 311
28323: PPUSH
28324: LD_INT 3
28326: PPUSH
28327: CALL_OW 259
28331: PUSH
28332: LD_INT 4
28334: MUL
28335: MUL
28336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28337: LD_VAR 0 6
28341: PPUSH
28342: CALL_OW 263
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: IFFALSE 28401
// begin j := IsControledBy ( i ) ;
28352: LD_ADDR_VAR 0 7
28356: PUSH
28357: LD_VAR 0 6
28361: PPUSH
28362: CALL_OW 312
28366: ST_TO_ADDR
// if j then
28367: LD_VAR 0 7
28371: IFFALSE 28401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28373: LD_ADDR_VAR 0 10
28377: PUSH
28378: LD_VAR 0 10
28382: PUSH
28383: LD_VAR 0 7
28387: PPUSH
28388: LD_INT 3
28390: PPUSH
28391: CALL_OW 259
28395: PUSH
28396: LD_INT 3
28398: MUL
28399: MUL
28400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28401: LD_VAR 0 6
28405: PPUSH
28406: CALL_OW 264
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: LD_INT 6
28416: PUSH
28417: LD_INT 46
28419: PUSH
28420: LD_INT 44
28422: PUSH
28423: LD_INT 47
28425: PUSH
28426: LD_INT 45
28428: PUSH
28429: LD_INT 28
28431: PUSH
28432: LD_INT 7
28434: PUSH
28435: LD_INT 27
28437: PUSH
28438: LD_INT 29
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: IN
28453: PUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: LD_INT 52
28461: PPUSH
28462: CALL_OW 321
28466: PUSH
28467: LD_INT 2
28469: EQUAL
28470: AND
28471: IFFALSE 28488
// bpoints := bpoints * 1.2 ;
28473: LD_ADDR_VAR 0 10
28477: PUSH
28478: LD_VAR 0 10
28482: PUSH
28483: LD_REAL  1.20000000000000E+0000
28486: MUL
28487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 6
28500: PUSH
28501: LD_INT 46
28503: PUSH
28504: LD_INT 47
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: IN
28512: IFFALSE 28529
// bpoints := bpoints * 1.2 ;
28514: LD_ADDR_VAR 0 10
28518: PUSH
28519: LD_VAR 0 10
28523: PUSH
28524: LD_REAL  1.20000000000000E+0000
28527: MUL
28528: ST_TO_ADDR
// end ; unit_building :
28529: GO 28543
28531: LD_INT 3
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28542
28539: POP
// ; end ;
28540: GO 28543
28542: POP
// for j = 1 to 3 do
28543: LD_ADDR_VAR 0 7
28547: PUSH
28548: DOUBLE
28549: LD_INT 1
28551: DEC
28552: ST_TO_ADDR
28553: LD_INT 3
28555: PUSH
28556: FOR_TO
28557: IFFALSE 28610
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28559: LD_ADDR_VAR 0 5
28563: PUSH
28564: LD_VAR 0 5
28568: PPUSH
28569: LD_VAR 0 7
28573: PPUSH
28574: LD_VAR 0 5
28578: PUSH
28579: LD_VAR 0 7
28583: ARRAY
28584: PUSH
28585: LD_VAR 0 9
28589: PUSH
28590: LD_VAR 0 7
28594: ARRAY
28595: PUSH
28596: LD_VAR 0 10
28600: MUL
28601: PLUS
28602: PPUSH
28603: CALL_OW 1
28607: ST_TO_ADDR
28608: GO 28556
28610: POP
28611: POP
// end ;
28612: GO 27095
28614: POP
28615: POP
// result := Replace ( result , 4 , tmp ) ;
28616: LD_ADDR_VAR 0 5
28620: PUSH
28621: LD_VAR 0 5
28625: PPUSH
28626: LD_INT 4
28628: PPUSH
28629: LD_VAR 0 8
28633: PPUSH
28634: CALL_OW 1
28638: ST_TO_ADDR
// end ;
28639: LD_VAR 0 5
28643: RET
// export function DangerAtRange ( unit , range ) ; begin
28644: LD_INT 0
28646: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 255
28661: PPUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 250
28671: PPUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 251
28681: PPUSH
28682: LD_VAR 0 2
28686: PPUSH
28687: CALL 26947 0 4
28691: ST_TO_ADDR
// end ;
28692: LD_VAR 0 3
28696: RET
// export function DangerInArea ( side , area ) ; begin
28697: LD_INT 0
28699: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28700: LD_ADDR_VAR 0 3
28704: PUSH
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_INT 81
28712: PUSH
28713: LD_VAR 0 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 70
28726: ST_TO_ADDR
// end ;
28727: LD_VAR 0 3
28731: RET
// export function IsExtension ( b ) ; begin
28732: LD_INT 0
28734: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_VAR 0 1
28744: PUSH
28745: LD_INT 23
28747: PUSH
28748: LD_INT 20
28750: PUSH
28751: LD_INT 22
28753: PUSH
28754: LD_INT 17
28756: PUSH
28757: LD_INT 24
28759: PUSH
28760: LD_INT 21
28762: PUSH
28763: LD_INT 19
28765: PUSH
28766: LD_INT 16
28768: PUSH
28769: LD_INT 25
28771: PUSH
28772: LD_INT 18
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: IN
28787: ST_TO_ADDR
// end ;
28788: LD_VAR 0 2
28792: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
// result := [ ] ;
28798: LD_ADDR_VAR 0 3
28802: PUSH
28803: EMPTY
28804: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28805: LD_ADDR_VAR 0 4
28809: PUSH
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 21
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PPUSH
28825: CALL_OW 70
28829: ST_TO_ADDR
// if not tmp then
28830: LD_VAR 0 4
28834: NOT
28835: IFFALSE 28839
// exit ;
28837: GO 28897
// for i in tmp do
28839: LD_ADDR_VAR 0 5
28843: PUSH
28844: LD_VAR 0 4
28848: PUSH
28849: FOR_IN
28850: IFFALSE 28885
// if GetBase ( i ) <> base then
28852: LD_VAR 0 5
28856: PPUSH
28857: CALL_OW 274
28861: PUSH
28862: LD_VAR 0 1
28866: NONEQUAL
28867: IFFALSE 28883
// ComLinkToBase ( base , i ) ;
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_VAR 0 5
28878: PPUSH
28879: CALL_OW 169
28883: GO 28849
28885: POP
28886: POP
// result := tmp ;
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_VAR 0 4
28896: ST_TO_ADDR
// end ;
28897: LD_VAR 0 3
28901: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
// if BuildingStatus ( b ) = bs_build then
28906: LD_VAR 0 2
28910: PPUSH
28911: CALL_OW 461
28915: PUSH
28916: LD_INT 1
28918: EQUAL
28919: IFFALSE 28979
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28921: LD_VAR 0 1
28925: PPUSH
28926: LD_STRING h
28928: PUSH
28929: LD_VAR 0 2
28933: PPUSH
28934: CALL_OW 250
28938: PUSH
28939: LD_VAR 0 2
28943: PPUSH
28944: CALL_OW 251
28948: PUSH
28949: LD_VAR 0 2
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: PPUSH
28975: CALL_OW 446
// end ;
28979: LD_VAR 0 3
28983: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28984: LD_INT 0
28986: PPUSH
28987: PPUSH
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28992: LD_VAR 0 1
28996: NOT
28997: PUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 263
29007: PUSH
29008: LD_INT 2
29010: EQUAL
29011: NOT
29012: OR
29013: IFFALSE 29017
// exit ;
29015: GO 29333
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29017: LD_ADDR_VAR 0 6
29021: PUSH
29022: LD_INT 22
29024: PUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 255
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: LD_INT 36
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 34
29054: PUSH
29055: LD_INT 31
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 69
29075: ST_TO_ADDR
// if not tmp then
29076: LD_VAR 0 6
29080: NOT
29081: IFFALSE 29085
// exit ;
29083: GO 29333
// result := [ ] ;
29085: LD_ADDR_VAR 0 2
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// for i in tmp do
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_VAR 0 6
29101: PUSH
29102: FOR_IN
29103: IFFALSE 29174
// begin t := UnitsInside ( i ) ;
29105: LD_ADDR_VAR 0 4
29109: PUSH
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 313
29119: ST_TO_ADDR
// if t then
29120: LD_VAR 0 4
29124: IFFALSE 29172
// for j in t do
29126: LD_ADDR_VAR 0 7
29130: PUSH
29131: LD_VAR 0 4
29135: PUSH
29136: FOR_IN
29137: IFFALSE 29170
// result := Insert ( result , result + 1 , j ) ;
29139: LD_ADDR_VAR 0 2
29143: PUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: LD_VAR 0 2
29153: PUSH
29154: LD_INT 1
29156: PLUS
29157: PPUSH
29158: LD_VAR 0 7
29162: PPUSH
29163: CALL_OW 2
29167: ST_TO_ADDR
29168: GO 29136
29170: POP
29171: POP
// end ;
29172: GO 29102
29174: POP
29175: POP
// if not result then
29176: LD_VAR 0 2
29180: NOT
29181: IFFALSE 29185
// exit ;
29183: GO 29333
// mech := result [ 1 ] ;
29185: LD_ADDR_VAR 0 5
29189: PUSH
29190: LD_VAR 0 2
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: ST_TO_ADDR
// if result > 1 then
29199: LD_VAR 0 2
29203: PUSH
29204: LD_INT 1
29206: GREATER
29207: IFFALSE 29319
// for i = 2 to result do
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: DOUBLE
29215: LD_INT 2
29217: DEC
29218: ST_TO_ADDR
29219: LD_VAR 0 2
29223: PUSH
29224: FOR_TO
29225: IFFALSE 29317
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_VAR 0 2
29236: PUSH
29237: LD_VAR 0 3
29241: ARRAY
29242: PPUSH
29243: LD_INT 3
29245: PPUSH
29246: CALL_OW 259
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: LD_VAR 0 3
29260: ARRAY
29261: PPUSH
29262: CALL_OW 432
29266: MINUS
29267: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29268: LD_VAR 0 4
29272: PUSH
29273: LD_VAR 0 5
29277: PPUSH
29278: LD_INT 3
29280: PPUSH
29281: CALL_OW 259
29285: PUSH
29286: LD_VAR 0 5
29290: PPUSH
29291: CALL_OW 432
29295: MINUS
29296: GREATEREQUAL
29297: IFFALSE 29315
// mech := result [ i ] ;
29299: LD_ADDR_VAR 0 5
29303: PUSH
29304: LD_VAR 0 2
29308: PUSH
29309: LD_VAR 0 3
29313: ARRAY
29314: ST_TO_ADDR
// end ;
29315: GO 29224
29317: POP
29318: POP
// ComLinkTo ( vehicle , mech ) ;
29319: LD_VAR 0 1
29323: PPUSH
29324: LD_VAR 0 5
29328: PPUSH
29329: CALL_OW 135
// end ;
29333: LD_VAR 0 2
29337: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
// result := [ ] ;
29353: LD_ADDR_VAR 0 7
29357: PUSH
29358: EMPTY
29359: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 266
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: IN
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 31016
// if name then
29385: LD_VAR 0 3
29389: IFFALSE 29405
// SetBName ( base_dep , name ) ;
29391: LD_VAR 0 1
29395: PPUSH
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 500
// base := GetBase ( base_dep ) ;
29405: LD_ADDR_VAR 0 15
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 274
29419: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29420: LD_ADDR_VAR 0 16
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 255
29434: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29435: LD_ADDR_VAR 0 17
29439: PUSH
29440: LD_VAR 0 1
29444: PPUSH
29445: CALL_OW 248
29449: ST_TO_ADDR
// if sources then
29450: LD_VAR 0 5
29454: IFFALSE 29501
// for i = 1 to 3 do
29456: LD_ADDR_VAR 0 8
29460: PUSH
29461: DOUBLE
29462: LD_INT 1
29464: DEC
29465: ST_TO_ADDR
29466: LD_INT 3
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29499
// AddResourceType ( base , i , sources [ i ] ) ;
29472: LD_VAR 0 15
29476: PPUSH
29477: LD_VAR 0 8
29481: PPUSH
29482: LD_VAR 0 5
29486: PUSH
29487: LD_VAR 0 8
29491: ARRAY
29492: PPUSH
29493: CALL_OW 276
29497: GO 29469
29499: POP
29500: POP
// buildings := GetBaseBuildings ( base , area ) ;
29501: LD_ADDR_VAR 0 18
29505: PUSH
29506: LD_VAR 0 15
29510: PPUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: CALL 28793 0 2
29520: ST_TO_ADDR
// InitHc ;
29521: CALL_OW 19
// InitUc ;
29525: CALL_OW 18
// uc_side := side ;
29529: LD_ADDR_OWVAR 20
29533: PUSH
29534: LD_VAR 0 16
29538: ST_TO_ADDR
// uc_nation := nation ;
29539: LD_ADDR_OWVAR 21
29543: PUSH
29544: LD_VAR 0 17
29548: ST_TO_ADDR
// if buildings then
29549: LD_VAR 0 18
29553: IFFALSE 30875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29555: LD_ADDR_VAR 0 19
29559: PUSH
29560: LD_VAR 0 18
29564: PPUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_INT 29
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: LD_INT 30
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 72
29597: ST_TO_ADDR
// if tmp then
29598: LD_VAR 0 19
29602: IFFALSE 29650
// for i in tmp do
29604: LD_ADDR_VAR 0 8
29608: PUSH
29609: LD_VAR 0 19
29613: PUSH
29614: FOR_IN
29615: IFFALSE 29648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29617: LD_VAR 0 8
29621: PPUSH
29622: CALL_OW 250
29626: PPUSH
29627: LD_VAR 0 8
29631: PPUSH
29632: CALL_OW 251
29636: PPUSH
29637: LD_VAR 0 16
29641: PPUSH
29642: CALL_OW 441
29646: GO 29614
29648: POP
29649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29650: LD_VAR 0 18
29654: PPUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 30
29660: PUSH
29661: LD_INT 32
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 30
29670: PUSH
29671: LD_INT 33
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 72
29687: IFFALSE 29775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29689: LD_ADDR_VAR 0 8
29693: PUSH
29694: LD_VAR 0 18
29698: PPUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 32
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 33
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: PPUSH
29727: CALL_OW 72
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29773
// begin if not GetBWeapon ( i ) then
29735: LD_VAR 0 8
29739: PPUSH
29740: CALL_OW 269
29744: NOT
29745: IFFALSE 29771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29747: LD_VAR 0 8
29751: PPUSH
29752: LD_VAR 0 8
29756: PPUSH
29757: LD_VAR 0 2
29761: PPUSH
29762: CALL 31021 0 2
29766: PPUSH
29767: CALL_OW 431
// end ;
29771: GO 29732
29773: POP
29774: POP
// end ; for i = 1 to personel do
29775: LD_ADDR_VAR 0 8
29779: PUSH
29780: DOUBLE
29781: LD_INT 1
29783: DEC
29784: ST_TO_ADDR
29785: LD_VAR 0 6
29789: PUSH
29790: FOR_TO
29791: IFFALSE 30855
// begin if i > 4 then
29793: LD_VAR 0 8
29797: PUSH
29798: LD_INT 4
29800: GREATER
29801: IFFALSE 29805
// break ;
29803: GO 30855
// case i of 1 :
29805: LD_VAR 0 8
29809: PUSH
29810: LD_INT 1
29812: DOUBLE
29813: EQUAL
29814: IFTRUE 29818
29816: GO 29898
29818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29819: LD_ADDR_VAR 0 12
29823: PUSH
29824: LD_VAR 0 18
29828: PPUSH
29829: LD_INT 22
29831: PUSH
29832: LD_VAR 0 16
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 58
29843: PUSH
29844: EMPTY
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 30
29852: PUSH
29853: LD_INT 32
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 30
29862: PUSH
29863: LD_INT 4
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 30
29872: PUSH
29873: LD_INT 5
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: PPUSH
29891: CALL_OW 72
29895: ST_TO_ADDR
29896: GO 30120
29898: LD_INT 2
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29968
29906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29907: LD_ADDR_VAR 0 12
29911: PUSH
29912: LD_VAR 0 18
29916: PPUSH
29917: LD_INT 22
29919: PUSH
29920: LD_VAR 0 16
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 30
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 30
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PPUSH
29961: CALL_OW 72
29965: ST_TO_ADDR
29966: GO 30120
29968: LD_INT 3
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 30038
29976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29977: LD_ADDR_VAR 0 12
29981: PUSH
29982: LD_VAR 0 18
29986: PPUSH
29987: LD_INT 22
29989: PUSH
29990: LD_VAR 0 16
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 30
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 30
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 72
30035: ST_TO_ADDR
30036: GO 30120
30038: LD_INT 4
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30119
30046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30047: LD_ADDR_VAR 0 12
30051: PUSH
30052: LD_VAR 0 18
30056: PPUSH
30057: LD_INT 22
30059: PUSH
30060: LD_VAR 0 16
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 30
30074: PUSH
30075: LD_INT 6
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 30
30084: PUSH
30085: LD_INT 7
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 8
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PPUSH
30112: CALL_OW 72
30116: ST_TO_ADDR
30117: GO 30120
30119: POP
// if i = 1 then
30120: LD_VAR 0 8
30124: PUSH
30125: LD_INT 1
30127: EQUAL
30128: IFFALSE 30239
// begin tmp := [ ] ;
30130: LD_ADDR_VAR 0 19
30134: PUSH
30135: EMPTY
30136: ST_TO_ADDR
// for j in f do
30137: LD_ADDR_VAR 0 9
30141: PUSH
30142: LD_VAR 0 12
30146: PUSH
30147: FOR_IN
30148: IFFALSE 30221
// if GetBType ( j ) = b_bunker then
30150: LD_VAR 0 9
30154: PPUSH
30155: CALL_OW 266
30159: PUSH
30160: LD_INT 32
30162: EQUAL
30163: IFFALSE 30190
// tmp := Insert ( tmp , 1 , j ) else
30165: LD_ADDR_VAR 0 19
30169: PUSH
30170: LD_VAR 0 19
30174: PPUSH
30175: LD_INT 1
30177: PPUSH
30178: LD_VAR 0 9
30182: PPUSH
30183: CALL_OW 2
30187: ST_TO_ADDR
30188: GO 30219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30190: LD_ADDR_VAR 0 19
30194: PUSH
30195: LD_VAR 0 19
30199: PPUSH
30200: LD_VAR 0 19
30204: PUSH
30205: LD_INT 1
30207: PLUS
30208: PPUSH
30209: LD_VAR 0 9
30213: PPUSH
30214: CALL_OW 2
30218: ST_TO_ADDR
30219: GO 30147
30221: POP
30222: POP
// if tmp then
30223: LD_VAR 0 19
30227: IFFALSE 30239
// f := tmp ;
30229: LD_ADDR_VAR 0 12
30233: PUSH
30234: LD_VAR 0 19
30238: ST_TO_ADDR
// end ; x := personel [ i ] ;
30239: LD_ADDR_VAR 0 13
30243: PUSH
30244: LD_VAR 0 6
30248: PUSH
30249: LD_VAR 0 8
30253: ARRAY
30254: ST_TO_ADDR
// if x = - 1 then
30255: LD_VAR 0 13
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: EQUAL
30264: IFFALSE 30473
// begin for j in f do
30266: LD_ADDR_VAR 0 9
30270: PUSH
30271: LD_VAR 0 12
30275: PUSH
30276: FOR_IN
30277: IFFALSE 30469
// repeat InitHc ;
30279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30283: LD_VAR 0 9
30287: PPUSH
30288: CALL_OW 266
30292: PUSH
30293: LD_INT 5
30295: EQUAL
30296: IFFALSE 30366
// begin if UnitsInside ( j ) < 3 then
30298: LD_VAR 0 9
30302: PPUSH
30303: CALL_OW 313
30307: PUSH
30308: LD_INT 3
30310: LESS
30311: IFFALSE 30347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30313: LD_INT 0
30315: PPUSH
30316: LD_INT 5
30318: PUSH
30319: LD_INT 8
30321: PUSH
30322: LD_INT 9
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: PUSH
30330: LD_VAR 0 17
30334: ARRAY
30335: PPUSH
30336: LD_VAR 0 4
30340: PPUSH
30341: CALL_OW 380
30345: GO 30364
// PrepareHuman ( false , i , skill ) ;
30347: LD_INT 0
30349: PPUSH
30350: LD_VAR 0 8
30354: PPUSH
30355: LD_VAR 0 4
30359: PPUSH
30360: CALL_OW 380
// end else
30364: GO 30383
// PrepareHuman ( false , i , skill ) ;
30366: LD_INT 0
30368: PPUSH
30369: LD_VAR 0 8
30373: PPUSH
30374: LD_VAR 0 4
30378: PPUSH
30379: CALL_OW 380
// un := CreateHuman ;
30383: LD_ADDR_VAR 0 14
30387: PUSH
30388: CALL_OW 44
30392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30393: LD_ADDR_VAR 0 7
30397: PUSH
30398: LD_VAR 0 7
30402: PPUSH
30403: LD_INT 1
30405: PPUSH
30406: LD_VAR 0 14
30410: PPUSH
30411: CALL_OW 2
30415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30416: LD_VAR 0 14
30420: PPUSH
30421: LD_VAR 0 9
30425: PPUSH
30426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30430: LD_VAR 0 9
30434: PPUSH
30435: CALL_OW 313
30439: PUSH
30440: LD_INT 6
30442: EQUAL
30443: PUSH
30444: LD_VAR 0 9
30448: PPUSH
30449: CALL_OW 266
30453: PUSH
30454: LD_INT 32
30456: PUSH
30457: LD_INT 31
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: IN
30464: OR
30465: IFFALSE 30279
30467: GO 30276
30469: POP
30470: POP
// end else
30471: GO 30853
// for j = 1 to x do
30473: LD_ADDR_VAR 0 9
30477: PUSH
30478: DOUBLE
30479: LD_INT 1
30481: DEC
30482: ST_TO_ADDR
30483: LD_VAR 0 13
30487: PUSH
30488: FOR_TO
30489: IFFALSE 30851
// begin InitHc ;
30491: CALL_OW 19
// if not f then
30495: LD_VAR 0 12
30499: NOT
30500: IFFALSE 30589
// begin PrepareHuman ( false , i , skill ) ;
30502: LD_INT 0
30504: PPUSH
30505: LD_VAR 0 8
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: CALL_OW 380
// un := CreateHuman ;
30519: LD_ADDR_VAR 0 14
30523: PUSH
30524: CALL_OW 44
30528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30529: LD_ADDR_VAR 0 7
30533: PUSH
30534: LD_VAR 0 7
30538: PPUSH
30539: LD_INT 1
30541: PPUSH
30542: LD_VAR 0 14
30546: PPUSH
30547: CALL_OW 2
30551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30552: LD_VAR 0 14
30556: PPUSH
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL_OW 250
30566: PPUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 251
30576: PPUSH
30577: LD_INT 10
30579: PPUSH
30580: LD_INT 0
30582: PPUSH
30583: CALL_OW 50
// continue ;
30587: GO 30488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30589: LD_VAR 0 12
30593: PUSH
30594: LD_INT 1
30596: ARRAY
30597: PPUSH
30598: CALL_OW 313
30602: PUSH
30603: LD_VAR 0 12
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PPUSH
30612: CALL_OW 266
30616: PUSH
30617: LD_INT 32
30619: PUSH
30620: LD_INT 31
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: IN
30627: AND
30628: PUSH
30629: LD_VAR 0 12
30633: PUSH
30634: LD_INT 1
30636: ARRAY
30637: PPUSH
30638: CALL_OW 313
30642: PUSH
30643: LD_INT 6
30645: EQUAL
30646: OR
30647: IFFALSE 30667
// f := Delete ( f , 1 ) ;
30649: LD_ADDR_VAR 0 12
30653: PUSH
30654: LD_VAR 0 12
30658: PPUSH
30659: LD_INT 1
30661: PPUSH
30662: CALL_OW 3
30666: ST_TO_ADDR
// if not f then
30667: LD_VAR 0 12
30671: NOT
30672: IFFALSE 30690
// begin x := x + 2 ;
30674: LD_ADDR_VAR 0 13
30678: PUSH
30679: LD_VAR 0 13
30683: PUSH
30684: LD_INT 2
30686: PLUS
30687: ST_TO_ADDR
// continue ;
30688: GO 30488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30690: LD_VAR 0 12
30694: PUSH
30695: LD_INT 1
30697: ARRAY
30698: PPUSH
30699: CALL_OW 266
30703: PUSH
30704: LD_INT 5
30706: EQUAL
30707: IFFALSE 30781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30709: LD_VAR 0 12
30713: PUSH
30714: LD_INT 1
30716: ARRAY
30717: PPUSH
30718: CALL_OW 313
30722: PUSH
30723: LD_INT 3
30725: LESS
30726: IFFALSE 30762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30728: LD_INT 0
30730: PPUSH
30731: LD_INT 5
30733: PUSH
30734: LD_INT 8
30736: PUSH
30737: LD_INT 9
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: LD_VAR 0 17
30749: ARRAY
30750: PPUSH
30751: LD_VAR 0 4
30755: PPUSH
30756: CALL_OW 380
30760: GO 30779
// PrepareHuman ( false , i , skill ) ;
30762: LD_INT 0
30764: PPUSH
30765: LD_VAR 0 8
30769: PPUSH
30770: LD_VAR 0 4
30774: PPUSH
30775: CALL_OW 380
// end else
30779: GO 30798
// PrepareHuman ( false , i , skill ) ;
30781: LD_INT 0
30783: PPUSH
30784: LD_VAR 0 8
30788: PPUSH
30789: LD_VAR 0 4
30793: PPUSH
30794: CALL_OW 380
// un := CreateHuman ;
30798: LD_ADDR_VAR 0 14
30802: PUSH
30803: CALL_OW 44
30807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30808: LD_ADDR_VAR 0 7
30812: PUSH
30813: LD_VAR 0 7
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: LD_VAR 0 14
30825: PPUSH
30826: CALL_OW 2
30830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30831: LD_VAR 0 14
30835: PPUSH
30836: LD_VAR 0 12
30840: PUSH
30841: LD_INT 1
30843: ARRAY
30844: PPUSH
30845: CALL_OW 52
// end ;
30849: GO 30488
30851: POP
30852: POP
// end ;
30853: GO 29790
30855: POP
30856: POP
// result := result ^ buildings ;
30857: LD_ADDR_VAR 0 7
30861: PUSH
30862: LD_VAR 0 7
30866: PUSH
30867: LD_VAR 0 18
30871: ADD
30872: ST_TO_ADDR
// end else
30873: GO 31016
// begin for i = 1 to personel do
30875: LD_ADDR_VAR 0 8
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_VAR 0 6
30889: PUSH
30890: FOR_TO
30891: IFFALSE 31014
// begin if i > 4 then
30893: LD_VAR 0 8
30897: PUSH
30898: LD_INT 4
30900: GREATER
30901: IFFALSE 30905
// break ;
30903: GO 31014
// x := personel [ i ] ;
30905: LD_ADDR_VAR 0 13
30909: PUSH
30910: LD_VAR 0 6
30914: PUSH
30915: LD_VAR 0 8
30919: ARRAY
30920: ST_TO_ADDR
// if x = - 1 then
30921: LD_VAR 0 13
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: EQUAL
30930: IFFALSE 30934
// continue ;
30932: GO 30890
// PrepareHuman ( false , i , skill ) ;
30934: LD_INT 0
30936: PPUSH
30937: LD_VAR 0 8
30941: PPUSH
30942: LD_VAR 0 4
30946: PPUSH
30947: CALL_OW 380
// un := CreateHuman ;
30951: LD_ADDR_VAR 0 14
30955: PUSH
30956: CALL_OW 44
30960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30961: LD_VAR 0 14
30965: PPUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 250
30975: PPUSH
30976: LD_VAR 0 1
30980: PPUSH
30981: CALL_OW 251
30985: PPUSH
30986: LD_INT 10
30988: PPUSH
30989: LD_INT 0
30991: PPUSH
30992: CALL_OW 50
// result := result ^ un ;
30996: LD_ADDR_VAR 0 7
31000: PUSH
31001: LD_VAR 0 7
31005: PUSH
31006: LD_VAR 0 14
31010: ADD
31011: ST_TO_ADDR
// end ;
31012: GO 30890
31014: POP
31015: POP
// end ; end ;
31016: LD_VAR 0 7
31020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31021: LD_INT 0
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
// result := false ;
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 0
31046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31047: LD_VAR 0 1
31051: NOT
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 266
31062: PUSH
31063: LD_INT 32
31065: PUSH
31066: LD_INT 33
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: IN
31073: NOT
31074: OR
31075: IFFALSE 31079
// exit ;
31077: GO 32215
// nat := GetNation ( tower ) ;
31079: LD_ADDR_VAR 0 12
31083: PUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL_OW 248
31093: ST_TO_ADDR
// side := GetSide ( tower ) ;
31094: LD_ADDR_VAR 0 16
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 255
31108: ST_TO_ADDR
// x := GetX ( tower ) ;
31109: LD_ADDR_VAR 0 10
31113: PUSH
31114: LD_VAR 0 1
31118: PPUSH
31119: CALL_OW 250
31123: ST_TO_ADDR
// y := GetY ( tower ) ;
31124: LD_ADDR_VAR 0 11
31128: PUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 251
31138: ST_TO_ADDR
// if not x or not y then
31139: LD_VAR 0 10
31143: NOT
31144: PUSH
31145: LD_VAR 0 11
31149: NOT
31150: OR
31151: IFFALSE 31155
// exit ;
31153: GO 32215
// weapon := 0 ;
31155: LD_ADDR_VAR 0 18
31159: PUSH
31160: LD_INT 0
31162: ST_TO_ADDR
// fac_list := [ ] ;
31163: LD_ADDR_VAR 0 17
31167: PUSH
31168: EMPTY
31169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31170: LD_ADDR_VAR 0 6
31174: PUSH
31175: LD_VAR 0 1
31179: PPUSH
31180: CALL_OW 274
31184: PPUSH
31185: LD_VAR 0 2
31189: PPUSH
31190: CALL 28793 0 2
31194: PPUSH
31195: LD_INT 30
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PPUSH
31205: CALL_OW 72
31209: ST_TO_ADDR
// if not factories then
31210: LD_VAR 0 6
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 32215
// for i in factories do
31219: LD_ADDR_VAR 0 8
31223: PUSH
31224: LD_VAR 0 6
31228: PUSH
31229: FOR_IN
31230: IFFALSE 31255
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31232: LD_ADDR_VAR 0 17
31236: PUSH
31237: LD_VAR 0 17
31241: PUSH
31242: LD_VAR 0 8
31246: PPUSH
31247: CALL_OW 478
31251: UNION
31252: ST_TO_ADDR
31253: GO 31229
31255: POP
31256: POP
// if not fac_list then
31257: LD_VAR 0 17
31261: NOT
31262: IFFALSE 31266
// exit ;
31264: GO 32215
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31266: LD_ADDR_VAR 0 5
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: LD_INT 5
31276: PUSH
31277: LD_INT 9
31279: PUSH
31280: LD_INT 10
31282: PUSH
31283: LD_INT 6
31285: PUSH
31286: LD_INT 7
31288: PUSH
31289: LD_INT 11
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 27
31303: PUSH
31304: LD_INT 28
31306: PUSH
31307: LD_INT 26
31309: PUSH
31310: LD_INT 30
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 43
31321: PUSH
31322: LD_INT 44
31324: PUSH
31325: LD_INT 46
31327: PUSH
31328: LD_INT 45
31330: PUSH
31331: LD_INT 47
31333: PUSH
31334: LD_INT 49
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: PUSH
31350: LD_VAR 0 12
31354: ARRAY
31355: ST_TO_ADDR
// for i in list do
31356: LD_ADDR_VAR 0 8
31360: PUSH
31361: LD_VAR 0 5
31365: PUSH
31366: FOR_IN
31367: IFFALSE 31400
// if not i in fac_list then
31369: LD_VAR 0 8
31373: PUSH
31374: LD_VAR 0 17
31378: IN
31379: NOT
31380: IFFALSE 31398
// list := list diff i ;
31382: LD_ADDR_VAR 0 5
31386: PUSH
31387: LD_VAR 0 5
31391: PUSH
31392: LD_VAR 0 8
31396: DIFF
31397: ST_TO_ADDR
31398: GO 31366
31400: POP
31401: POP
// if not list then
31402: LD_VAR 0 5
31406: NOT
31407: IFFALSE 31411
// exit ;
31409: GO 32215
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31411: LD_VAR 0 12
31415: PUSH
31416: LD_INT 3
31418: EQUAL
31419: PUSH
31420: LD_INT 49
31422: PUSH
31423: LD_VAR 0 5
31427: IN
31428: AND
31429: PUSH
31430: LD_INT 31
31432: PPUSH
31433: LD_VAR 0 16
31437: PPUSH
31438: CALL_OW 321
31442: PUSH
31443: LD_INT 2
31445: EQUAL
31446: AND
31447: IFFALSE 31507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31449: LD_INT 22
31451: PUSH
31452: LD_VAR 0 16
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 35
31463: PUSH
31464: LD_INT 49
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 91
31473: PUSH
31474: LD_VAR 0 1
31478: PUSH
31479: LD_INT 10
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: PPUSH
31492: CALL_OW 69
31496: NOT
31497: IFFALSE 31507
// weapon := ru_time_lapser ;
31499: LD_ADDR_VAR 0 18
31503: PUSH
31504: LD_INT 49
31506: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31507: LD_VAR 0 12
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: IN
31522: PUSH
31523: LD_INT 11
31525: PUSH
31526: LD_VAR 0 5
31530: IN
31531: PUSH
31532: LD_INT 30
31534: PUSH
31535: LD_VAR 0 5
31539: IN
31540: OR
31541: AND
31542: PUSH
31543: LD_INT 6
31545: PPUSH
31546: LD_VAR 0 16
31550: PPUSH
31551: CALL_OW 321
31555: PUSH
31556: LD_INT 2
31558: EQUAL
31559: AND
31560: IFFALSE 31725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31562: LD_INT 22
31564: PUSH
31565: LD_VAR 0 16
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 35
31579: PUSH
31580: LD_INT 11
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 35
31589: PUSH
31590: LD_INT 30
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 91
31604: PUSH
31605: LD_VAR 0 1
31609: PUSH
31610: LD_INT 18
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: PPUSH
31623: CALL_OW 69
31627: NOT
31628: PUSH
31629: LD_INT 22
31631: PUSH
31632: LD_VAR 0 16
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 30
31646: PUSH
31647: LD_INT 32
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 30
31656: PUSH
31657: LD_INT 33
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 91
31671: PUSH
31672: LD_VAR 0 1
31676: PUSH
31677: LD_INT 12
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: PPUSH
31693: CALL_OW 69
31697: PUSH
31698: LD_INT 2
31700: GREATER
31701: AND
31702: IFFALSE 31725
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31704: LD_ADDR_VAR 0 18
31708: PUSH
31709: LD_INT 11
31711: PUSH
31712: LD_INT 30
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_VAR 0 12
31723: ARRAY
31724: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31725: LD_VAR 0 18
31729: NOT
31730: PUSH
31731: LD_INT 40
31733: PPUSH
31734: LD_VAR 0 16
31738: PPUSH
31739: CALL_OW 321
31743: PUSH
31744: LD_INT 2
31746: EQUAL
31747: AND
31748: PUSH
31749: LD_INT 7
31751: PUSH
31752: LD_VAR 0 5
31756: IN
31757: PUSH
31758: LD_INT 28
31760: PUSH
31761: LD_VAR 0 5
31765: IN
31766: OR
31767: PUSH
31768: LD_INT 45
31770: PUSH
31771: LD_VAR 0 5
31775: IN
31776: OR
31777: AND
31778: IFFALSE 32032
// begin hex := GetHexInfo ( x , y ) ;
31780: LD_ADDR_VAR 0 4
31784: PUSH
31785: LD_VAR 0 10
31789: PPUSH
31790: LD_VAR 0 11
31794: PPUSH
31795: CALL_OW 546
31799: ST_TO_ADDR
// if hex [ 1 ] then
31800: LD_VAR 0 4
31804: PUSH
31805: LD_INT 1
31807: ARRAY
31808: IFFALSE 31812
// exit ;
31810: GO 32215
// height := hex [ 2 ] ;
31812: LD_ADDR_VAR 0 15
31816: PUSH
31817: LD_VAR 0 4
31821: PUSH
31822: LD_INT 2
31824: ARRAY
31825: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31826: LD_ADDR_VAR 0 14
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: LD_INT 5
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// for i in tmp do
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_VAR 0 14
31858: PUSH
31859: FOR_IN
31860: IFFALSE 32030
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31862: LD_ADDR_VAR 0 9
31866: PUSH
31867: LD_VAR 0 10
31871: PPUSH
31872: LD_VAR 0 8
31876: PPUSH
31877: LD_INT 5
31879: PPUSH
31880: CALL_OW 272
31884: PUSH
31885: LD_VAR 0 11
31889: PPUSH
31890: LD_VAR 0 8
31894: PPUSH
31895: LD_INT 5
31897: PPUSH
31898: CALL_OW 273
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31907: LD_VAR 0 9
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: LD_VAR 0 9
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: PPUSH
31925: CALL_OW 488
31929: IFFALSE 32028
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31931: LD_ADDR_VAR 0 4
31935: PUSH
31936: LD_VAR 0 9
31940: PUSH
31941: LD_INT 1
31943: ARRAY
31944: PPUSH
31945: LD_VAR 0 9
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: PPUSH
31954: CALL_OW 546
31958: ST_TO_ADDR
// if hex [ 1 ] then
31959: LD_VAR 0 4
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: IFFALSE 31971
// continue ;
31969: GO 31859
// h := hex [ 2 ] ;
31971: LD_ADDR_VAR 0 13
31975: PUSH
31976: LD_VAR 0 4
31980: PUSH
31981: LD_INT 2
31983: ARRAY
31984: ST_TO_ADDR
// if h + 7 < height then
31985: LD_VAR 0 13
31989: PUSH
31990: LD_INT 7
31992: PLUS
31993: PUSH
31994: LD_VAR 0 15
31998: LESS
31999: IFFALSE 32028
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32001: LD_ADDR_VAR 0 18
32005: PUSH
32006: LD_INT 7
32008: PUSH
32009: LD_INT 28
32011: PUSH
32012: LD_INT 45
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: PUSH
32020: LD_VAR 0 12
32024: ARRAY
32025: ST_TO_ADDR
// break ;
32026: GO 32030
// end ; end ; end ;
32028: GO 31859
32030: POP
32031: POP
// end ; if not weapon then
32032: LD_VAR 0 18
32036: NOT
32037: IFFALSE 32097
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32039: LD_ADDR_VAR 0 5
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: LD_INT 11
32051: PUSH
32052: LD_INT 30
32054: PUSH
32055: LD_INT 49
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: DIFF
32063: ST_TO_ADDR
// if not list then
32064: LD_VAR 0 5
32068: NOT
32069: IFFALSE 32073
// exit ;
32071: GO 32215
// weapon := list [ rand ( 1 , list ) ] ;
32073: LD_ADDR_VAR 0 18
32077: PUSH
32078: LD_VAR 0 5
32082: PUSH
32083: LD_INT 1
32085: PPUSH
32086: LD_VAR 0 5
32090: PPUSH
32091: CALL_OW 12
32095: ARRAY
32096: ST_TO_ADDR
// end ; if weapon then
32097: LD_VAR 0 18
32101: IFFALSE 32215
// begin tmp := CostOfWeapon ( weapon ) ;
32103: LD_ADDR_VAR 0 14
32107: PUSH
32108: LD_VAR 0 18
32112: PPUSH
32113: CALL_OW 451
32117: ST_TO_ADDR
// j := GetBase ( tower ) ;
32118: LD_ADDR_VAR 0 9
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 274
32132: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: CALL_OW 275
32145: PUSH
32146: LD_VAR 0 14
32150: PUSH
32151: LD_INT 1
32153: ARRAY
32154: GREATEREQUAL
32155: PUSH
32156: LD_VAR 0 9
32160: PPUSH
32161: LD_INT 2
32163: PPUSH
32164: CALL_OW 275
32168: PUSH
32169: LD_VAR 0 14
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: GREATEREQUAL
32178: AND
32179: PUSH
32180: LD_VAR 0 9
32184: PPUSH
32185: LD_INT 3
32187: PPUSH
32188: CALL_OW 275
32192: PUSH
32193: LD_VAR 0 14
32197: PUSH
32198: LD_INT 3
32200: ARRAY
32201: GREATEREQUAL
32202: AND
32203: IFFALSE 32215
// result := weapon ;
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_VAR 0 18
32214: ST_TO_ADDR
// end ; end ;
32215: LD_VAR 0 3
32219: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32220: LD_INT 0
32222: PPUSH
32223: PPUSH
// result := true ;
32224: LD_ADDR_VAR 0 3
32228: PUSH
32229: LD_INT 1
32231: ST_TO_ADDR
// if array1 = array2 then
32232: LD_VAR 0 1
32236: PUSH
32237: LD_VAR 0 2
32241: EQUAL
32242: IFFALSE 32302
// begin for i = 1 to array1 do
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: DOUBLE
32250: LD_INT 1
32252: DEC
32253: ST_TO_ADDR
32254: LD_VAR 0 1
32258: PUSH
32259: FOR_TO
32260: IFFALSE 32298
// if array1 [ i ] <> array2 [ i ] then
32262: LD_VAR 0 1
32266: PUSH
32267: LD_VAR 0 4
32271: ARRAY
32272: PUSH
32273: LD_VAR 0 2
32277: PUSH
32278: LD_VAR 0 4
32282: ARRAY
32283: NONEQUAL
32284: IFFALSE 32296
// begin result := false ;
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 0
32293: ST_TO_ADDR
// break ;
32294: GO 32298
// end ;
32296: GO 32259
32298: POP
32299: POP
// end else
32300: GO 32310
// result := false ;
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_INT 0
32309: ST_TO_ADDR
// end ;
32310: LD_VAR 0 3
32314: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32315: LD_INT 0
32317: PPUSH
32318: PPUSH
32319: PPUSH
// pom := GetBase ( fac ) ;
32320: LD_ADDR_VAR 0 5
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 274
32334: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32335: LD_ADDR_VAR 0 4
32339: PUSH
32340: LD_VAR 0 2
32344: PUSH
32345: LD_INT 1
32347: ARRAY
32348: PPUSH
32349: LD_VAR 0 2
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: PPUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_INT 3
32365: ARRAY
32366: PPUSH
32367: LD_VAR 0 2
32371: PUSH
32372: LD_INT 4
32374: ARRAY
32375: PPUSH
32376: CALL_OW 449
32380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32381: LD_ADDR_VAR 0 3
32385: PUSH
32386: LD_VAR 0 5
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: CALL_OW 275
32398: PUSH
32399: LD_VAR 0 4
32403: PUSH
32404: LD_INT 1
32406: ARRAY
32407: GREATEREQUAL
32408: PUSH
32409: LD_VAR 0 5
32413: PPUSH
32414: LD_INT 2
32416: PPUSH
32417: CALL_OW 275
32421: PUSH
32422: LD_VAR 0 4
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: GREATEREQUAL
32431: AND
32432: PUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_INT 3
32440: PPUSH
32441: CALL_OW 275
32445: PUSH
32446: LD_VAR 0 4
32450: PUSH
32451: LD_INT 3
32453: ARRAY
32454: GREATEREQUAL
32455: AND
32456: ST_TO_ADDR
// end ;
32457: LD_VAR 0 3
32461: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32462: LD_INT 0
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
// pom := GetBase ( building ) ;
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 274
32482: ST_TO_ADDR
// if not pom then
32483: LD_VAR 0 3
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32662
// btype := GetBType ( building ) ;
32492: LD_ADDR_VAR 0 5
32496: PUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 266
32506: ST_TO_ADDR
// if btype = b_armoury then
32507: LD_VAR 0 5
32511: PUSH
32512: LD_INT 4
32514: EQUAL
32515: IFFALSE 32525
// btype := b_barracks ;
32517: LD_ADDR_VAR 0 5
32521: PUSH
32522: LD_INT 5
32524: ST_TO_ADDR
// if btype = b_depot then
32525: LD_VAR 0 5
32529: PUSH
32530: LD_INT 0
32532: EQUAL
32533: IFFALSE 32543
// btype := b_warehouse ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_INT 1
32542: ST_TO_ADDR
// if btype = b_workshop then
32543: LD_VAR 0 5
32547: PUSH
32548: LD_INT 2
32550: EQUAL
32551: IFFALSE 32561
// btype := b_factory ;
32553: LD_ADDR_VAR 0 5
32557: PUSH
32558: LD_INT 3
32560: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 5
32570: PPUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 248
32580: PPUSH
32581: CALL_OW 450
32585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_VAR 0 3
32595: PPUSH
32596: LD_INT 1
32598: PPUSH
32599: CALL_OW 275
32603: PUSH
32604: LD_VAR 0 4
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: GREATEREQUAL
32613: PUSH
32614: LD_VAR 0 3
32618: PPUSH
32619: LD_INT 2
32621: PPUSH
32622: CALL_OW 275
32626: PUSH
32627: LD_VAR 0 4
32631: PUSH
32632: LD_INT 2
32634: ARRAY
32635: GREATEREQUAL
32636: AND
32637: PUSH
32638: LD_VAR 0 3
32642: PPUSH
32643: LD_INT 3
32645: PPUSH
32646: CALL_OW 275
32650: PUSH
32651: LD_VAR 0 4
32655: PUSH
32656: LD_INT 3
32658: ARRAY
32659: GREATEREQUAL
32660: AND
32661: ST_TO_ADDR
// end ;
32662: LD_VAR 0 2
32666: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32667: LD_INT 0
32669: PPUSH
32670: PPUSH
32671: PPUSH
// pom := GetBase ( building ) ;
32672: LD_ADDR_VAR 0 4
32676: PUSH
32677: LD_VAR 0 1
32681: PPUSH
32682: CALL_OW 274
32686: ST_TO_ADDR
// if not pom then
32687: LD_VAR 0 4
32691: NOT
32692: IFFALSE 32696
// exit ;
32694: GO 32797
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: LD_VAR 0 1
32710: PPUSH
32711: CALL_OW 248
32715: PPUSH
32716: CALL_OW 450
32720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: LD_INT 1
32733: PPUSH
32734: CALL_OW 275
32738: PUSH
32739: LD_VAR 0 5
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: GREATEREQUAL
32748: PUSH
32749: LD_VAR 0 4
32753: PPUSH
32754: LD_INT 2
32756: PPUSH
32757: CALL_OW 275
32761: PUSH
32762: LD_VAR 0 5
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: GREATEREQUAL
32771: AND
32772: PUSH
32773: LD_VAR 0 4
32777: PPUSH
32778: LD_INT 3
32780: PPUSH
32781: CALL_OW 275
32785: PUSH
32786: LD_VAR 0 5
32790: PUSH
32791: LD_INT 3
32793: ARRAY
32794: GREATEREQUAL
32795: AND
32796: ST_TO_ADDR
// end ;
32797: LD_VAR 0 3
32801: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32802: LD_INT 0
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
// result := false ;
32814: LD_ADDR_VAR 0 6
32818: PUSH
32819: LD_INT 0
32821: ST_TO_ADDR
// if not base or not btype or not x or not y then
32822: LD_VAR 0 1
32826: NOT
32827: PUSH
32828: LD_VAR 0 2
32832: NOT
32833: OR
32834: PUSH
32835: LD_VAR 0 3
32839: NOT
32840: OR
32841: PUSH
32842: LD_VAR 0 4
32846: NOT
32847: OR
32848: IFFALSE 32852
// exit ;
32850: GO 33461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32852: LD_ADDR_VAR 0 12
32856: PUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: LD_VAR 0 1
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PPUSH
32886: CALL_OW 248
32890: PPUSH
32891: LD_INT 0
32893: PPUSH
32894: CALL 34298 0 6
32898: ST_TO_ADDR
// if not hexes then
32899: LD_VAR 0 12
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 33461
// for i = 1 to hexes do
32908: LD_ADDR_VAR 0 7
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_VAR 0 12
32922: PUSH
32923: FOR_TO
32924: IFFALSE 33459
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32926: LD_ADDR_VAR 0 11
32930: PUSH
32931: LD_VAR 0 12
32935: PUSH
32936: LD_VAR 0 7
32940: ARRAY
32941: PUSH
32942: LD_INT 1
32944: ARRAY
32945: PPUSH
32946: LD_VAR 0 12
32950: PUSH
32951: LD_VAR 0 7
32955: ARRAY
32956: PUSH
32957: LD_INT 2
32959: ARRAY
32960: PPUSH
32961: CALL_OW 428
32965: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32966: LD_VAR 0 12
32970: PUSH
32971: LD_VAR 0 7
32975: ARRAY
32976: PUSH
32977: LD_INT 1
32979: ARRAY
32980: PPUSH
32981: LD_VAR 0 12
32985: PUSH
32986: LD_VAR 0 7
32990: ARRAY
32991: PUSH
32992: LD_INT 2
32994: ARRAY
32995: PPUSH
32996: CALL_OW 351
33000: PUSH
33001: LD_VAR 0 12
33005: PUSH
33006: LD_VAR 0 7
33010: ARRAY
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PPUSH
33016: LD_VAR 0 12
33020: PUSH
33021: LD_VAR 0 7
33025: ARRAY
33026: PUSH
33027: LD_INT 2
33029: ARRAY
33030: PPUSH
33031: CALL_OW 488
33035: NOT
33036: OR
33037: PUSH
33038: LD_VAR 0 11
33042: PPUSH
33043: CALL_OW 247
33047: PUSH
33048: LD_INT 3
33050: EQUAL
33051: OR
33052: IFFALSE 33058
// exit ;
33054: POP
33055: POP
33056: GO 33461
// if not tmp or not tmp in base then
33058: LD_VAR 0 11
33062: NOT
33063: PUSH
33064: LD_VAR 0 11
33068: PUSH
33069: LD_VAR 0 1
33073: IN
33074: NOT
33075: OR
33076: IFFALSE 33080
// continue ;
33078: GO 32923
// result := true ;
33080: LD_ADDR_VAR 0 6
33084: PUSH
33085: LD_INT 1
33087: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33088: LD_ADDR_VAR 0 15
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_INT 22
33100: PUSH
33101: LD_VAR 0 11
33105: PPUSH
33106: CALL_OW 255
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 30
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PPUSH
33147: CALL_OW 72
33151: ST_TO_ADDR
// if dep then
33152: LD_VAR 0 15
33156: IFFALSE 33292
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33158: LD_ADDR_VAR 0 14
33162: PUSH
33163: LD_VAR 0 15
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 250
33176: PPUSH
33177: LD_VAR 0 15
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: PPUSH
33186: CALL_OW 254
33190: PPUSH
33191: LD_INT 5
33193: PPUSH
33194: CALL_OW 272
33198: PUSH
33199: LD_VAR 0 15
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: PPUSH
33208: CALL_OW 251
33212: PPUSH
33213: LD_VAR 0 15
33217: PUSH
33218: LD_INT 1
33220: ARRAY
33221: PPUSH
33222: CALL_OW 254
33226: PPUSH
33227: LD_INT 5
33229: PPUSH
33230: CALL_OW 273
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33239: LD_VAR 0 14
33243: PUSH
33244: LD_INT 1
33246: ARRAY
33247: PPUSH
33248: LD_VAR 0 14
33252: PUSH
33253: LD_INT 2
33255: ARRAY
33256: PPUSH
33257: CALL_OW 488
33261: IFFALSE 33292
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33263: LD_VAR 0 11
33267: PPUSH
33268: LD_VAR 0 14
33272: PUSH
33273: LD_INT 1
33275: ARRAY
33276: PPUSH
33277: LD_VAR 0 14
33281: PUSH
33282: LD_INT 2
33284: ARRAY
33285: PPUSH
33286: CALL_OW 111
// continue ;
33290: GO 32923
// end ; end ; r := GetDir ( tmp ) ;
33292: LD_ADDR_VAR 0 13
33296: PUSH
33297: LD_VAR 0 11
33301: PPUSH
33302: CALL_OW 254
33306: ST_TO_ADDR
// if r = 5 then
33307: LD_VAR 0 13
33311: PUSH
33312: LD_INT 5
33314: EQUAL
33315: IFFALSE 33325
// r := 0 ;
33317: LD_ADDR_VAR 0 13
33321: PUSH
33322: LD_INT 0
33324: ST_TO_ADDR
// for j = r to 5 do
33325: LD_ADDR_VAR 0 8
33329: PUSH
33330: DOUBLE
33331: LD_VAR 0 13
33335: DEC
33336: ST_TO_ADDR
33337: LD_INT 5
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33455
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33343: LD_ADDR_VAR 0 9
33347: PUSH
33348: LD_VAR 0 11
33352: PPUSH
33353: CALL_OW 250
33357: PPUSH
33358: LD_VAR 0 8
33362: PPUSH
33363: LD_INT 2
33365: PPUSH
33366: CALL_OW 272
33370: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33371: LD_ADDR_VAR 0 10
33375: PUSH
33376: LD_VAR 0 11
33380: PPUSH
33381: CALL_OW 251
33385: PPUSH
33386: LD_VAR 0 8
33390: PPUSH
33391: LD_INT 2
33393: PPUSH
33394: CALL_OW 273
33398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33399: LD_VAR 0 9
33403: PPUSH
33404: LD_VAR 0 10
33408: PPUSH
33409: CALL_OW 488
33413: PUSH
33414: LD_VAR 0 9
33418: PPUSH
33419: LD_VAR 0 10
33423: PPUSH
33424: CALL_OW 428
33428: NOT
33429: AND
33430: IFFALSE 33453
// begin ComMoveXY ( tmp , _x , _y ) ;
33432: LD_VAR 0 11
33436: PPUSH
33437: LD_VAR 0 9
33441: PPUSH
33442: LD_VAR 0 10
33446: PPUSH
33447: CALL_OW 111
// break ;
33451: GO 33455
// end ; end ;
33453: GO 33340
33455: POP
33456: POP
// end ;
33457: GO 32923
33459: POP
33460: POP
// end ;
33461: LD_VAR 0 6
33465: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33466: LD_INT 0
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
// result := false ;
33478: LD_ADDR_VAR 0 6
33482: PUSH
33483: LD_INT 0
33485: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33486: LD_VAR 0 1
33490: NOT
33491: PUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 266
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: IN
33512: NOT
33513: OR
33514: PUSH
33515: LD_VAR 0 2
33519: NOT
33520: OR
33521: PUSH
33522: LD_VAR 0 5
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 4
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: IN
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 3
33560: PPUSH
33561: LD_VAR 0 4
33565: PPUSH
33566: CALL_OW 488
33570: NOT
33571: OR
33572: IFFALSE 33576
// exit ;
33574: GO 34293
// pom := GetBase ( depot ) ;
33576: LD_ADDR_VAR 0 10
33580: PUSH
33581: LD_VAR 0 1
33585: PPUSH
33586: CALL_OW 274
33590: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33591: LD_ADDR_VAR 0 11
33595: PUSH
33596: LD_VAR 0 2
33600: PPUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 248
33610: PPUSH
33611: CALL_OW 450
33615: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33616: LD_VAR 0 10
33620: PPUSH
33621: LD_INT 1
33623: PPUSH
33624: CALL_OW 275
33628: PUSH
33629: LD_VAR 0 11
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: GREATEREQUAL
33638: PUSH
33639: LD_VAR 0 10
33643: PPUSH
33644: LD_INT 2
33646: PPUSH
33647: CALL_OW 275
33651: PUSH
33652: LD_VAR 0 11
33656: PUSH
33657: LD_INT 2
33659: ARRAY
33660: GREATEREQUAL
33661: AND
33662: PUSH
33663: LD_VAR 0 10
33667: PPUSH
33668: LD_INT 3
33670: PPUSH
33671: CALL_OW 275
33675: PUSH
33676: LD_VAR 0 11
33680: PUSH
33681: LD_INT 3
33683: ARRAY
33684: GREATEREQUAL
33685: AND
33686: NOT
33687: IFFALSE 33691
// exit ;
33689: GO 34293
// if GetBType ( depot ) = b_depot then
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL_OW 266
33700: PUSH
33701: LD_INT 0
33703: EQUAL
33704: IFFALSE 33716
// dist := 28 else
33706: LD_ADDR_VAR 0 14
33710: PUSH
33711: LD_INT 28
33713: ST_TO_ADDR
33714: GO 33724
// dist := 36 ;
33716: LD_ADDR_VAR 0 14
33720: PUSH
33721: LD_INT 36
33723: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33724: LD_VAR 0 1
33728: PPUSH
33729: LD_VAR 0 3
33733: PPUSH
33734: LD_VAR 0 4
33738: PPUSH
33739: CALL_OW 297
33743: PUSH
33744: LD_VAR 0 14
33748: GREATER
33749: IFFALSE 33753
// exit ;
33751: GO 34293
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33753: LD_ADDR_VAR 0 12
33757: PUSH
33758: LD_VAR 0 2
33762: PPUSH
33763: LD_VAR 0 3
33767: PPUSH
33768: LD_VAR 0 4
33772: PPUSH
33773: LD_VAR 0 5
33777: PPUSH
33778: LD_VAR 0 1
33782: PPUSH
33783: CALL_OW 248
33787: PPUSH
33788: LD_INT 0
33790: PPUSH
33791: CALL 34298 0 6
33795: ST_TO_ADDR
// if not hexes then
33796: LD_VAR 0 12
33800: NOT
33801: IFFALSE 33805
// exit ;
33803: GO 34293
// hex := GetHexInfo ( x , y ) ;
33805: LD_ADDR_VAR 0 15
33809: PUSH
33810: LD_VAR 0 3
33814: PPUSH
33815: LD_VAR 0 4
33819: PPUSH
33820: CALL_OW 546
33824: ST_TO_ADDR
// if hex [ 1 ] then
33825: LD_VAR 0 15
33829: PUSH
33830: LD_INT 1
33832: ARRAY
33833: IFFALSE 33837
// exit ;
33835: GO 34293
// height := hex [ 2 ] ;
33837: LD_ADDR_VAR 0 13
33841: PUSH
33842: LD_VAR 0 15
33846: PUSH
33847: LD_INT 2
33849: ARRAY
33850: ST_TO_ADDR
// for i = 1 to hexes do
33851: LD_ADDR_VAR 0 7
33855: PUSH
33856: DOUBLE
33857: LD_INT 1
33859: DEC
33860: ST_TO_ADDR
33861: LD_VAR 0 12
33865: PUSH
33866: FOR_TO
33867: IFFALSE 34197
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33869: LD_VAR 0 12
33873: PUSH
33874: LD_VAR 0 7
33878: ARRAY
33879: PUSH
33880: LD_INT 1
33882: ARRAY
33883: PPUSH
33884: LD_VAR 0 12
33888: PUSH
33889: LD_VAR 0 7
33893: ARRAY
33894: PUSH
33895: LD_INT 2
33897: ARRAY
33898: PPUSH
33899: CALL_OW 488
33903: NOT
33904: PUSH
33905: LD_VAR 0 12
33909: PUSH
33910: LD_VAR 0 7
33914: ARRAY
33915: PUSH
33916: LD_INT 1
33918: ARRAY
33919: PPUSH
33920: LD_VAR 0 12
33924: PUSH
33925: LD_VAR 0 7
33929: ARRAY
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: PPUSH
33935: CALL_OW 428
33939: PUSH
33940: LD_INT 0
33942: GREATER
33943: OR
33944: PUSH
33945: LD_VAR 0 12
33949: PUSH
33950: LD_VAR 0 7
33954: ARRAY
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PPUSH
33960: LD_VAR 0 12
33964: PUSH
33965: LD_VAR 0 7
33969: ARRAY
33970: PUSH
33971: LD_INT 2
33973: ARRAY
33974: PPUSH
33975: CALL_OW 351
33979: OR
33980: IFFALSE 33986
// exit ;
33982: POP
33983: POP
33984: GO 34293
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: LD_VAR 0 12
33995: PUSH
33996: LD_VAR 0 7
34000: ARRAY
34001: PUSH
34002: LD_INT 1
34004: ARRAY
34005: PPUSH
34006: LD_VAR 0 12
34010: PUSH
34011: LD_VAR 0 7
34015: ARRAY
34016: PUSH
34017: LD_INT 2
34019: ARRAY
34020: PPUSH
34021: CALL_OW 546
34025: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34026: LD_VAR 0 8
34030: PUSH
34031: LD_INT 1
34033: ARRAY
34034: PUSH
34035: LD_VAR 0 8
34039: PUSH
34040: LD_INT 2
34042: ARRAY
34043: PUSH
34044: LD_VAR 0 13
34048: PUSH
34049: LD_INT 2
34051: PLUS
34052: GREATER
34053: OR
34054: PUSH
34055: LD_VAR 0 8
34059: PUSH
34060: LD_INT 2
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 13
34068: PUSH
34069: LD_INT 2
34071: MINUS
34072: LESS
34073: OR
34074: PUSH
34075: LD_VAR 0 8
34079: PUSH
34080: LD_INT 3
34082: ARRAY
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 8
34089: PUSH
34090: LD_INT 9
34092: PUSH
34093: LD_INT 10
34095: PUSH
34096: LD_INT 11
34098: PUSH
34099: LD_INT 12
34101: PUSH
34102: LD_INT 13
34104: PUSH
34105: LD_INT 16
34107: PUSH
34108: LD_INT 17
34110: PUSH
34111: LD_INT 18
34113: PUSH
34114: LD_INT 19
34116: PUSH
34117: LD_INT 20
34119: PUSH
34120: LD_INT 21
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: IN
34138: NOT
34139: OR
34140: PUSH
34141: LD_VAR 0 8
34145: PUSH
34146: LD_INT 5
34148: ARRAY
34149: NOT
34150: OR
34151: PUSH
34152: LD_VAR 0 8
34156: PUSH
34157: LD_INT 6
34159: ARRAY
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 7
34169: PUSH
34170: LD_INT 9
34172: PUSH
34173: LD_INT 10
34175: PUSH
34176: LD_INT 11
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: IN
34187: NOT
34188: OR
34189: IFFALSE 34195
// exit ;
34191: POP
34192: POP
34193: GO 34293
// end ;
34195: GO 33866
34197: POP
34198: POP
// side := GetSide ( depot ) ;
34199: LD_ADDR_VAR 0 9
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 255
34213: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34214: LD_VAR 0 9
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: LD_VAR 0 4
34228: PPUSH
34229: LD_INT 20
34231: PPUSH
34232: CALL 26947 0 4
34236: PUSH
34237: LD_INT 4
34239: ARRAY
34240: IFFALSE 34244
// exit ;
34242: GO 34293
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34244: LD_VAR 0 2
34248: PUSH
34249: LD_INT 29
34251: PUSH
34252: LD_INT 30
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: IN
34259: PUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 9
34274: PPUSH
34275: CALL_OW 440
34279: NOT
34280: AND
34281: IFFALSE 34285
// exit ;
34283: GO 34293
// result := true ;
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: LD_INT 1
34292: ST_TO_ADDR
// end ;
34293: LD_VAR 0 6
34297: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34298: LD_INT 0
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
// result = [ ] ;
34358: LD_ADDR_VAR 0 7
34362: PUSH
34363: EMPTY
34364: ST_TO_ADDR
// temp_list = [ ] ;
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: EMPTY
34371: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34372: LD_VAR 0 4
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 3
34388: PUSH
34389: LD_INT 4
34391: PUSH
34392: LD_INT 5
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: IN
34403: NOT
34404: PUSH
34405: LD_VAR 0 1
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: IN
34420: PUSH
34421: LD_VAR 0 5
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: IN
34440: NOT
34441: AND
34442: OR
34443: IFFALSE 34447
// exit ;
34445: GO 52838
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34447: LD_VAR 0 1
34451: PUSH
34452: LD_INT 6
34454: PUSH
34455: LD_INT 7
34457: PUSH
34458: LD_INT 8
34460: PUSH
34461: LD_INT 13
34463: PUSH
34464: LD_INT 12
34466: PUSH
34467: LD_INT 15
34469: PUSH
34470: LD_INT 11
34472: PUSH
34473: LD_INT 14
34475: PUSH
34476: LD_INT 10
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: IN
34490: IFFALSE 34500
// btype = b_lab ;
34492: LD_ADDR_VAR 0 1
34496: PUSH
34497: LD_INT 6
34499: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34500: LD_VAR 0 6
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: IN
34519: NOT
34520: PUSH
34521: LD_VAR 0 1
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 6
34540: PUSH
34541: LD_INT 36
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 31
34552: PUSH
34553: LD_INT 32
34555: PUSH
34556: LD_INT 33
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: IN
34572: NOT
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_INT 1
34581: EQUAL
34582: AND
34583: OR
34584: PUSH
34585: LD_VAR 0 1
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: IN
34600: NOT
34601: PUSH
34602: LD_VAR 0 6
34606: PUSH
34607: LD_INT 2
34609: EQUAL
34610: AND
34611: OR
34612: IFFALSE 34622
// mode = 0 ;
34614: LD_ADDR_VAR 0 6
34618: PUSH
34619: LD_INT 0
34621: ST_TO_ADDR
// case mode of 0 :
34622: LD_VAR 0 6
34626: PUSH
34627: LD_INT 0
34629: DOUBLE
34630: EQUAL
34631: IFTRUE 34635
34633: GO 46088
34635: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34636: LD_ADDR_VAR 0 11
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34829: LD_ADDR_VAR 0 12
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35025: LD_ADDR_VAR 0 13
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35224: LD_ADDR_VAR 0 14
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 3
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35420: LD_ADDR_VAR 0 15
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35613: LD_ADDR_VAR 0 16
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35806: LD_ADDR_VAR 0 17
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: LD_INT 2
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36036: LD_ADDR_VAR 0 18
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: LD_INT 2
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36266: LD_ADDR_VAR 0 19
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36496: LD_ADDR_VAR 0 20
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36726: LD_ADDR_VAR 0 21
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36956: LD_ADDR_VAR 0 22
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: NEG
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: LD_INT 2
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37186: LD_ADDR_VAR 0 23
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 3
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37466: LD_ADDR_VAR 0 24
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 3
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37742: LD_ADDR_VAR 0 25
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38016: LD_ADDR_VAR 0 26
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38292: LD_ADDR_VAR 0 27
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: LD_INT 2
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38572: LD_ADDR_VAR 0 28
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 3
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38854: LD_ADDR_VAR 0 29
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39133: LD_ADDR_VAR 0 30
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 3
39376: NEG
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39411: LD_ADDR_VAR 0 31
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 3
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 3
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39689: LD_ADDR_VAR 0 32
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39967: LD_ADDR_VAR 0 33
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: LD_INT 3
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40246: LD_ADDR_VAR 0 34
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 3
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40526: LD_ADDR_VAR 0 35
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40638: LD_ADDR_VAR 0 36
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40750: LD_ADDR_VAR 0 37
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40862: LD_ADDR_VAR 0 38
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40974: LD_ADDR_VAR 0 39
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41086: LD_ADDR_VAR 0 40
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41198: LD_ADDR_VAR 0 41
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41548: LD_ADDR_VAR 0 42
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 3
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41898: LD_ADDR_VAR 0 43
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42246: LD_ADDR_VAR 0 44
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: NEG
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42596: LD_ADDR_VAR 0 45
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42946: LD_ADDR_VAR 0 46
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43294: LD_ADDR_VAR 0 47
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43445: LD_ADDR_VAR 0 48
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43592: LD_ADDR_VAR 0 49
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43736: LD_ADDR_VAR 0 50
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43880: LD_ADDR_VAR 0 51
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 52
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44178: LD_ADDR_VAR 0 53
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44408: LD_ADDR_VAR 0 54
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44638: LD_ADDR_VAR 0 55
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44868: LD_ADDR_VAR 0 56
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45098: LD_ADDR_VAR 0 57
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45328: LD_ADDR_VAR 0 58
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45558: LD_ADDR_VAR 0 59
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45646: LD_ADDR_VAR 0 60
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45734: LD_ADDR_VAR 0 61
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45822: LD_ADDR_VAR 0 62
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45910: LD_ADDR_VAR 0 63
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45998: LD_ADDR_VAR 0 64
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// end ; 1 :
46086: GO 51983
46088: LD_INT 1
46090: DOUBLE
46091: EQUAL
46092: IFTRUE 46096
46094: GO 48719
46096: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46097: LD_ADDR_VAR 0 11
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46141: LD_ADDR_VAR 0 12
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 3
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46182: LD_ADDR_VAR 0 13
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46222: LD_ADDR_VAR 0 14
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46263: LD_ADDR_VAR 0 15
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: NEG
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46307: LD_ADDR_VAR 0 16
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: NEG
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46353: LD_ADDR_VAR 0 17
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 3
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46397: LD_ADDR_VAR 0 18
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46438: LD_ADDR_VAR 0 19
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46478: LD_ADDR_VAR 0 20
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46519: LD_ADDR_VAR 0 21
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46563: LD_ADDR_VAR 0 22
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46609: LD_ADDR_VAR 0 23
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 3
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46653: LD_ADDR_VAR 0 24
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 4
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46694: LD_ADDR_VAR 0 25
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 4
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 4
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46734: LD_ADDR_VAR 0 26
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46775: LD_ADDR_VAR 0 27
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 4
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46819: LD_ADDR_VAR 0 28
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46865: LD_ADDR_VAR 0 29
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 5
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 5
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 4
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 6
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 6
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 5
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47020: LD_ADDR_VAR 0 30
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 4
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 5
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 6
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 6
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47163: LD_ADDR_VAR 0 31
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 4
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 4
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: LD_INT 4
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 5
47230: PUSH
47231: LD_INT 4
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 5
47240: PUSH
47241: LD_INT 5
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: LD_INT 5
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 6
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 6
47270: PUSH
47271: LD_INT 6
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: LD_INT 6
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47302: LD_ADDR_VAR 0 32
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 4
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 6
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 6
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 5
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47445: LD_ADDR_VAR 0 33
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 4
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 4
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 5
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 5
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 6
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 6
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47600: LD_ADDR_VAR 0 34
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: LD_INT 4
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 4
47655: NEG
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 4
47667: NEG
47668: PUSH
47669: LD_INT 4
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: LD_INT 5
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 5
47691: NEG
47692: PUSH
47693: LD_INT 4
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 5
47703: NEG
47704: PUSH
47705: LD_INT 5
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 5
47715: NEG
47716: PUSH
47717: LD_INT 6
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 6
47727: NEG
47728: PUSH
47729: LD_INT 5
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 6
47739: NEG
47740: PUSH
47741: LD_INT 6
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47763: LD_ADDR_VAR 0 41
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47807: LD_ADDR_VAR 0 42
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47848: LD_ADDR_VAR 0 43
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47888: LD_ADDR_VAR 0 44
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47929: LD_ADDR_VAR 0 45
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47973: LD_ADDR_VAR 0 46
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48019: LD_ADDR_VAR 0 47
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48052: LD_ADDR_VAR 0 48
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48083: LD_ADDR_VAR 0 49
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48112: LD_ADDR_VAR 0 50
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 3
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48141: LD_ADDR_VAR 0 51
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 52
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48205: LD_ADDR_VAR 0 53
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 3
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48249: LD_ADDR_VAR 0 54
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48290: LD_ADDR_VAR 0 55
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48330: LD_ADDR_VAR 0 56
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48371: LD_ADDR_VAR 0 57
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48415: LD_ADDR_VAR 0 58
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 59
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48505: LD_ADDR_VAR 0 60
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48546: LD_ADDR_VAR 0 61
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48586: LD_ADDR_VAR 0 62
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48627: LD_ADDR_VAR 0 63
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48671: LD_ADDR_VAR 0 64
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// end ; 2 :
48717: GO 51983
48719: LD_INT 2
48721: DOUBLE
48722: EQUAL
48723: IFTRUE 48727
48725: GO 51982
48727: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48728: LD_ADDR_VAR 0 29
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 5
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 5
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 4
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 5
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 4
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 5
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 4
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 4
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 4
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 4
49113: NEG
49114: PUSH
49115: LD_INT 4
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 4
49125: NEG
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 4
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 5
49173: NEG
49174: PUSH
49175: LD_INT 4
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 5
49185: NEG
49186: PUSH
49187: LD_INT 5
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: LD_INT 5
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49266: LD_ADDR_VAR 0 30
49270: PUSH
49271: LD_INT 4
49273: PUSH
49274: LD_INT 4
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 5
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 5
49303: PUSH
49304: LD_INT 5
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: LD_INT 5
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: LD_INT 4
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 5
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 5
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 4
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 4
49456: NEG
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 4
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 4
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 5
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 5
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 5
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 4
49630: NEG
49631: PUSH
49632: LD_INT 4
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 4
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 4
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 4
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 5
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 5
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49813: LD_ADDR_VAR 0 31
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 4
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 5
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 5
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 5
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 4
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 4
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 4
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 4
50015: NEG
50016: PUSH
50017: LD_INT 4
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 4
50027: NEG
50028: PUSH
50029: LD_INT 5
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: LD_INT 4
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 5
50075: NEG
50076: PUSH
50077: LD_INT 4
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 5
50087: NEG
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 5
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 5
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 4
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 4
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 4
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 5
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 5
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 5
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50363: LD_ADDR_VAR 0 32
50367: PUSH
50368: LD_INT 4
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 4
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 5
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 5
50449: NEG
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: NEG
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 4
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 4
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 5
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 4
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 4
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 5
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 5
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: LD_INT 5
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: LD_INT 5
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50910: LD_ADDR_VAR 0 33
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 4
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 5
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 4
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: LD_INT 4
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 5
50989: NEG
50990: PUSH
50991: LD_INT 5
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 5
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 5
51013: NEG
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 4
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 5
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 5
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 5
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 5
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 5
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51448: LD_ADDR_VAR 0 34
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 5
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 4
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 5
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 4
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 4
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: LD_INT 4
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 5
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: LD_INT 5
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: LD_INT 5
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 5
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 4
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 4
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 5
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 5
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 5
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// end ; end ;
51980: GO 51983
51982: POP
// case btype of b_depot , b_warehouse :
51983: LD_VAR 0 1
51987: PUSH
51988: LD_INT 0
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 52002
51994: LD_INT 1
51996: DOUBLE
51997: EQUAL
51998: IFTRUE 52002
52000: GO 52203
52002: POP
// case nation of nation_american :
52003: LD_VAR 0 5
52007: PUSH
52008: LD_INT 1
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52016
52014: GO 52072
52016: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52017: LD_ADDR_VAR 0 9
52021: PUSH
52022: LD_VAR 0 11
52026: PUSH
52027: LD_VAR 0 12
52031: PUSH
52032: LD_VAR 0 13
52036: PUSH
52037: LD_VAR 0 14
52041: PUSH
52042: LD_VAR 0 15
52046: PUSH
52047: LD_VAR 0 16
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: PUSH
52060: LD_VAR 0 4
52064: PUSH
52065: LD_INT 1
52067: PLUS
52068: ARRAY
52069: ST_TO_ADDR
52070: GO 52201
52072: LD_INT 2
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52080
52078: GO 52136
52080: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52081: LD_ADDR_VAR 0 9
52085: PUSH
52086: LD_VAR 0 17
52090: PUSH
52091: LD_VAR 0 18
52095: PUSH
52096: LD_VAR 0 19
52100: PUSH
52101: LD_VAR 0 20
52105: PUSH
52106: LD_VAR 0 21
52110: PUSH
52111: LD_VAR 0 22
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: PUSH
52124: LD_VAR 0 4
52128: PUSH
52129: LD_INT 1
52131: PLUS
52132: ARRAY
52133: ST_TO_ADDR
52134: GO 52201
52136: LD_INT 3
52138: DOUBLE
52139: EQUAL
52140: IFTRUE 52144
52142: GO 52200
52144: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52145: LD_ADDR_VAR 0 9
52149: PUSH
52150: LD_VAR 0 23
52154: PUSH
52155: LD_VAR 0 24
52159: PUSH
52160: LD_VAR 0 25
52164: PUSH
52165: LD_VAR 0 26
52169: PUSH
52170: LD_VAR 0 27
52174: PUSH
52175: LD_VAR 0 28
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: PUSH
52188: LD_VAR 0 4
52192: PUSH
52193: LD_INT 1
52195: PLUS
52196: ARRAY
52197: ST_TO_ADDR
52198: GO 52201
52200: POP
52201: GO 52756
52203: LD_INT 2
52205: DOUBLE
52206: EQUAL
52207: IFTRUE 52217
52209: LD_INT 3
52211: DOUBLE
52212: EQUAL
52213: IFTRUE 52217
52215: GO 52273
52217: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52218: LD_ADDR_VAR 0 9
52222: PUSH
52223: LD_VAR 0 29
52227: PUSH
52228: LD_VAR 0 30
52232: PUSH
52233: LD_VAR 0 31
52237: PUSH
52238: LD_VAR 0 32
52242: PUSH
52243: LD_VAR 0 33
52247: PUSH
52248: LD_VAR 0 34
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: LD_VAR 0 4
52265: PUSH
52266: LD_INT 1
52268: PLUS
52269: ARRAY
52270: ST_TO_ADDR
52271: GO 52756
52273: LD_INT 16
52275: DOUBLE
52276: EQUAL
52277: IFTRUE 52335
52279: LD_INT 17
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52335
52285: LD_INT 18
52287: DOUBLE
52288: EQUAL
52289: IFTRUE 52335
52291: LD_INT 19
52293: DOUBLE
52294: EQUAL
52295: IFTRUE 52335
52297: LD_INT 22
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52335
52303: LD_INT 20
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52335
52309: LD_INT 21
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52335
52315: LD_INT 23
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52335
52321: LD_INT 24
52323: DOUBLE
52324: EQUAL
52325: IFTRUE 52335
52327: LD_INT 25
52329: DOUBLE
52330: EQUAL
52331: IFTRUE 52335
52333: GO 52391
52335: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52336: LD_ADDR_VAR 0 9
52340: PUSH
52341: LD_VAR 0 35
52345: PUSH
52346: LD_VAR 0 36
52350: PUSH
52351: LD_VAR 0 37
52355: PUSH
52356: LD_VAR 0 38
52360: PUSH
52361: LD_VAR 0 39
52365: PUSH
52366: LD_VAR 0 40
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: LD_VAR 0 4
52383: PUSH
52384: LD_INT 1
52386: PLUS
52387: ARRAY
52388: ST_TO_ADDR
52389: GO 52756
52391: LD_INT 6
52393: DOUBLE
52394: EQUAL
52395: IFTRUE 52447
52397: LD_INT 7
52399: DOUBLE
52400: EQUAL
52401: IFTRUE 52447
52403: LD_INT 8
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52447
52409: LD_INT 13
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52447
52415: LD_INT 12
52417: DOUBLE
52418: EQUAL
52419: IFTRUE 52447
52421: LD_INT 15
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52447
52427: LD_INT 11
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52447
52433: LD_INT 14
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52447
52439: LD_INT 10
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52447
52445: GO 52503
52447: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52448: LD_ADDR_VAR 0 9
52452: PUSH
52453: LD_VAR 0 41
52457: PUSH
52458: LD_VAR 0 42
52462: PUSH
52463: LD_VAR 0 43
52467: PUSH
52468: LD_VAR 0 44
52472: PUSH
52473: LD_VAR 0 45
52477: PUSH
52478: LD_VAR 0 46
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: PUSH
52491: LD_VAR 0 4
52495: PUSH
52496: LD_INT 1
52498: PLUS
52499: ARRAY
52500: ST_TO_ADDR
52501: GO 52756
52503: LD_INT 36
52505: DOUBLE
52506: EQUAL
52507: IFTRUE 52511
52509: GO 52567
52511: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52512: LD_ADDR_VAR 0 9
52516: PUSH
52517: LD_VAR 0 47
52521: PUSH
52522: LD_VAR 0 48
52526: PUSH
52527: LD_VAR 0 49
52531: PUSH
52532: LD_VAR 0 50
52536: PUSH
52537: LD_VAR 0 51
52541: PUSH
52542: LD_VAR 0 52
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: PUSH
52555: LD_VAR 0 4
52559: PUSH
52560: LD_INT 1
52562: PLUS
52563: ARRAY
52564: ST_TO_ADDR
52565: GO 52756
52567: LD_INT 4
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52593
52573: LD_INT 5
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52593
52579: LD_INT 34
52581: DOUBLE
52582: EQUAL
52583: IFTRUE 52593
52585: LD_INT 37
52587: DOUBLE
52588: EQUAL
52589: IFTRUE 52593
52591: GO 52649
52593: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52594: LD_ADDR_VAR 0 9
52598: PUSH
52599: LD_VAR 0 53
52603: PUSH
52604: LD_VAR 0 54
52608: PUSH
52609: LD_VAR 0 55
52613: PUSH
52614: LD_VAR 0 56
52618: PUSH
52619: LD_VAR 0 57
52623: PUSH
52624: LD_VAR 0 58
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: PUSH
52637: LD_VAR 0 4
52641: PUSH
52642: LD_INT 1
52644: PLUS
52645: ARRAY
52646: ST_TO_ADDR
52647: GO 52756
52649: LD_INT 31
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52699
52655: LD_INT 32
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52699
52661: LD_INT 33
52663: DOUBLE
52664: EQUAL
52665: IFTRUE 52699
52667: LD_INT 27
52669: DOUBLE
52670: EQUAL
52671: IFTRUE 52699
52673: LD_INT 26
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52699
52679: LD_INT 28
52681: DOUBLE
52682: EQUAL
52683: IFTRUE 52699
52685: LD_INT 29
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52699
52691: LD_INT 30
52693: DOUBLE
52694: EQUAL
52695: IFTRUE 52699
52697: GO 52755
52699: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52700: LD_ADDR_VAR 0 9
52704: PUSH
52705: LD_VAR 0 59
52709: PUSH
52710: LD_VAR 0 60
52714: PUSH
52715: LD_VAR 0 61
52719: PUSH
52720: LD_VAR 0 62
52724: PUSH
52725: LD_VAR 0 63
52729: PUSH
52730: LD_VAR 0 64
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: PUSH
52743: LD_VAR 0 4
52747: PUSH
52748: LD_INT 1
52750: PLUS
52751: ARRAY
52752: ST_TO_ADDR
52753: GO 52756
52755: POP
// temp_list2 = [ ] ;
52756: LD_ADDR_VAR 0 10
52760: PUSH
52761: EMPTY
52762: ST_TO_ADDR
// for i in temp_list do
52763: LD_ADDR_VAR 0 8
52767: PUSH
52768: LD_VAR 0 9
52772: PUSH
52773: FOR_IN
52774: IFFALSE 52826
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52776: LD_ADDR_VAR 0 10
52780: PUSH
52781: LD_VAR 0 10
52785: PUSH
52786: LD_VAR 0 8
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PUSH
52795: LD_VAR 0 2
52799: PLUS
52800: PUSH
52801: LD_VAR 0 8
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PUSH
52810: LD_VAR 0 3
52814: PLUS
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: ADD
52823: ST_TO_ADDR
52824: GO 52773
52826: POP
52827: POP
// result = temp_list2 ;
52828: LD_ADDR_VAR 0 7
52832: PUSH
52833: LD_VAR 0 10
52837: ST_TO_ADDR
// end ;
52838: LD_VAR 0 7
52842: RET
// export function EnemyInRange ( unit , dist ) ; begin
52843: LD_INT 0
52845: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52846: LD_ADDR_VAR 0 3
52850: PUSH
52851: LD_VAR 0 1
52855: PPUSH
52856: CALL_OW 255
52860: PPUSH
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL_OW 250
52870: PPUSH
52871: LD_VAR 0 1
52875: PPUSH
52876: CALL_OW 251
52880: PPUSH
52881: LD_VAR 0 2
52885: PPUSH
52886: CALL 26947 0 4
52890: PUSH
52891: LD_INT 4
52893: ARRAY
52894: ST_TO_ADDR
// end ;
52895: LD_VAR 0 3
52899: RET
// export function PlayerSeeMe ( unit ) ; begin
52900: LD_INT 0
52902: PPUSH
// result := See ( your_side , unit ) ;
52903: LD_ADDR_VAR 0 2
52907: PUSH
52908: LD_OWVAR 2
52912: PPUSH
52913: LD_VAR 0 1
52917: PPUSH
52918: CALL_OW 292
52922: ST_TO_ADDR
// end ;
52923: LD_VAR 0 2
52927: RET
// export function ReverseDir ( unit ) ; begin
52928: LD_INT 0
52930: PPUSH
// if not unit then
52931: LD_VAR 0 1
52935: NOT
52936: IFFALSE 52940
// exit ;
52938: GO 52986
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52940: LD_ADDR_VAR 0 2
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: LD_INT 4
52950: PUSH
52951: LD_INT 5
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 254
52980: PUSH
52981: LD_INT 1
52983: PLUS
52984: ARRAY
52985: ST_TO_ADDR
// end ;
52986: LD_VAR 0 2
52990: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52991: LD_INT 0
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
// if not hexes then
52998: LD_VAR 0 2
53002: NOT
53003: IFFALSE 53007
// exit ;
53005: GO 53155
// dist := 9999 ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_INT 9999
53014: ST_TO_ADDR
// for i = 1 to hexes do
53015: LD_ADDR_VAR 0 4
53019: PUSH
53020: DOUBLE
53021: LD_INT 1
53023: DEC
53024: ST_TO_ADDR
53025: LD_VAR 0 2
53029: PUSH
53030: FOR_TO
53031: IFFALSE 53143
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53033: LD_VAR 0 1
53037: PPUSH
53038: LD_VAR 0 2
53042: PUSH
53043: LD_VAR 0 4
53047: ARRAY
53048: PUSH
53049: LD_INT 1
53051: ARRAY
53052: PPUSH
53053: LD_VAR 0 2
53057: PUSH
53058: LD_VAR 0 4
53062: ARRAY
53063: PUSH
53064: LD_INT 2
53066: ARRAY
53067: PPUSH
53068: CALL_OW 297
53072: PUSH
53073: LD_VAR 0 5
53077: LESS
53078: IFFALSE 53141
// begin hex := hexes [ i ] ;
53080: LD_ADDR_VAR 0 7
53084: PUSH
53085: LD_VAR 0 2
53089: PUSH
53090: LD_VAR 0 4
53094: ARRAY
53095: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53096: LD_ADDR_VAR 0 5
53100: PUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: LD_VAR 0 2
53110: PUSH
53111: LD_VAR 0 4
53115: ARRAY
53116: PUSH
53117: LD_INT 1
53119: ARRAY
53120: PPUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_VAR 0 4
53130: ARRAY
53131: PUSH
53132: LD_INT 2
53134: ARRAY
53135: PPUSH
53136: CALL_OW 297
53140: ST_TO_ADDR
// end ; end ;
53141: GO 53030
53143: POP
53144: POP
// result := hex ;
53145: LD_ADDR_VAR 0 3
53149: PUSH
53150: LD_VAR 0 7
53154: ST_TO_ADDR
// end ;
53155: LD_VAR 0 3
53159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53160: LD_INT 0
53162: PPUSH
53163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53164: LD_VAR 0 1
53168: NOT
53169: PUSH
53170: LD_VAR 0 1
53174: PUSH
53175: LD_INT 21
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 23
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PPUSH
53199: CALL_OW 69
53203: IN
53204: NOT
53205: OR
53206: IFFALSE 53210
// exit ;
53208: GO 53257
// for i = 1 to 3 do
53210: LD_ADDR_VAR 0 3
53214: PUSH
53215: DOUBLE
53216: LD_INT 1
53218: DEC
53219: ST_TO_ADDR
53220: LD_INT 3
53222: PUSH
53223: FOR_TO
53224: IFFALSE 53255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53226: LD_VAR 0 1
53230: PPUSH
53231: CALL_OW 250
53235: PPUSH
53236: LD_VAR 0 1
53240: PPUSH
53241: CALL_OW 251
53245: PPUSH
53246: LD_INT 1
53248: PPUSH
53249: CALL_OW 453
53253: GO 53223
53255: POP
53256: POP
// end ;
53257: LD_VAR 0 2
53261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53262: LD_INT 0
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
53268: PPUSH
53269: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53270: LD_VAR 0 1
53274: NOT
53275: PUSH
53276: LD_VAR 0 2
53280: NOT
53281: OR
53282: PUSH
53283: LD_VAR 0 1
53287: PPUSH
53288: CALL_OW 314
53292: OR
53293: IFFALSE 53297
// exit ;
53295: GO 53738
// x := GetX ( enemy_unit ) ;
53297: LD_ADDR_VAR 0 7
53301: PUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: CALL_OW 250
53311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53312: LD_ADDR_VAR 0 8
53316: PUSH
53317: LD_VAR 0 2
53321: PPUSH
53322: CALL_OW 251
53326: ST_TO_ADDR
// if not x or not y then
53327: LD_VAR 0 7
53331: NOT
53332: PUSH
53333: LD_VAR 0 8
53337: NOT
53338: OR
53339: IFFALSE 53343
// exit ;
53341: GO 53738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53343: LD_ADDR_VAR 0 6
53347: PUSH
53348: LD_VAR 0 7
53352: PPUSH
53353: LD_INT 0
53355: PPUSH
53356: LD_INT 4
53358: PPUSH
53359: CALL_OW 272
53363: PUSH
53364: LD_VAR 0 8
53368: PPUSH
53369: LD_INT 0
53371: PPUSH
53372: LD_INT 4
53374: PPUSH
53375: CALL_OW 273
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_VAR 0 7
53388: PPUSH
53389: LD_INT 1
53391: PPUSH
53392: LD_INT 4
53394: PPUSH
53395: CALL_OW 272
53399: PUSH
53400: LD_VAR 0 8
53404: PPUSH
53405: LD_INT 1
53407: PPUSH
53408: LD_INT 4
53410: PPUSH
53411: CALL_OW 273
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_VAR 0 7
53424: PPUSH
53425: LD_INT 2
53427: PPUSH
53428: LD_INT 4
53430: PPUSH
53431: CALL_OW 272
53435: PUSH
53436: LD_VAR 0 8
53440: PPUSH
53441: LD_INT 2
53443: PPUSH
53444: LD_INT 4
53446: PPUSH
53447: CALL_OW 273
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_VAR 0 7
53460: PPUSH
53461: LD_INT 3
53463: PPUSH
53464: LD_INT 4
53466: PPUSH
53467: CALL_OW 272
53471: PUSH
53472: LD_VAR 0 8
53476: PPUSH
53477: LD_INT 3
53479: PPUSH
53480: LD_INT 4
53482: PPUSH
53483: CALL_OW 273
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_VAR 0 7
53496: PPUSH
53497: LD_INT 4
53499: PPUSH
53500: LD_INT 4
53502: PPUSH
53503: CALL_OW 272
53507: PUSH
53508: LD_VAR 0 8
53512: PPUSH
53513: LD_INT 4
53515: PPUSH
53516: LD_INT 4
53518: PPUSH
53519: CALL_OW 273
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_VAR 0 7
53532: PPUSH
53533: LD_INT 5
53535: PPUSH
53536: LD_INT 4
53538: PPUSH
53539: CALL_OW 272
53543: PUSH
53544: LD_VAR 0 8
53548: PPUSH
53549: LD_INT 5
53551: PPUSH
53552: LD_INT 4
53554: PPUSH
53555: CALL_OW 273
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// for i = tmp downto 1 do
53572: LD_ADDR_VAR 0 4
53576: PUSH
53577: DOUBLE
53578: LD_VAR 0 6
53582: INC
53583: ST_TO_ADDR
53584: LD_INT 1
53586: PUSH
53587: FOR_DOWNTO
53588: IFFALSE 53689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53590: LD_VAR 0 6
53594: PUSH
53595: LD_VAR 0 4
53599: ARRAY
53600: PUSH
53601: LD_INT 1
53603: ARRAY
53604: PPUSH
53605: LD_VAR 0 6
53609: PUSH
53610: LD_VAR 0 4
53614: ARRAY
53615: PUSH
53616: LD_INT 2
53618: ARRAY
53619: PPUSH
53620: CALL_OW 488
53624: NOT
53625: PUSH
53626: LD_VAR 0 6
53630: PUSH
53631: LD_VAR 0 4
53635: ARRAY
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PPUSH
53641: LD_VAR 0 6
53645: PUSH
53646: LD_VAR 0 4
53650: ARRAY
53651: PUSH
53652: LD_INT 2
53654: ARRAY
53655: PPUSH
53656: CALL_OW 428
53660: PUSH
53661: LD_INT 0
53663: NONEQUAL
53664: OR
53665: IFFALSE 53687
// tmp := Delete ( tmp , i ) ;
53667: LD_ADDR_VAR 0 6
53671: PUSH
53672: LD_VAR 0 6
53676: PPUSH
53677: LD_VAR 0 4
53681: PPUSH
53682: CALL_OW 3
53686: ST_TO_ADDR
53687: GO 53587
53689: POP
53690: POP
// j := GetClosestHex ( unit , tmp ) ;
53691: LD_ADDR_VAR 0 5
53695: PUSH
53696: LD_VAR 0 1
53700: PPUSH
53701: LD_VAR 0 6
53705: PPUSH
53706: CALL 52991 0 2
53710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53711: LD_VAR 0 1
53715: PPUSH
53716: LD_VAR 0 5
53720: PUSH
53721: LD_INT 1
53723: ARRAY
53724: PPUSH
53725: LD_VAR 0 5
53729: PUSH
53730: LD_INT 2
53732: ARRAY
53733: PPUSH
53734: CALL_OW 111
// end ;
53738: LD_VAR 0 3
53742: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53743: LD_INT 0
53745: PPUSH
53746: PPUSH
53747: PPUSH
// uc_side = 0 ;
53748: LD_ADDR_OWVAR 20
53752: PUSH
53753: LD_INT 0
53755: ST_TO_ADDR
// uc_nation = 0 ;
53756: LD_ADDR_OWVAR 21
53760: PUSH
53761: LD_INT 0
53763: ST_TO_ADDR
// InitHc ;
53764: CALL_OW 19
// InitVc ;
53768: CALL_OW 20
// if mastodonts then
53772: LD_VAR 0 6
53776: IFFALSE 53843
// for i = 1 to mastodonts do
53778: LD_ADDR_VAR 0 11
53782: PUSH
53783: DOUBLE
53784: LD_INT 1
53786: DEC
53787: ST_TO_ADDR
53788: LD_VAR 0 6
53792: PUSH
53793: FOR_TO
53794: IFFALSE 53841
// begin vc_chassis := 31 ;
53796: LD_ADDR_OWVAR 37
53800: PUSH
53801: LD_INT 31
53803: ST_TO_ADDR
// vc_control := control_rider ;
53804: LD_ADDR_OWVAR 38
53808: PUSH
53809: LD_INT 4
53811: ST_TO_ADDR
// animal := CreateVehicle ;
53812: LD_ADDR_VAR 0 12
53816: PUSH
53817: CALL_OW 45
53821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53822: LD_VAR 0 12
53826: PPUSH
53827: LD_VAR 0 8
53831: PPUSH
53832: LD_INT 0
53834: PPUSH
53835: CALL 60588 0 3
// end ;
53839: GO 53793
53841: POP
53842: POP
// if horses then
53843: LD_VAR 0 5
53847: IFFALSE 53914
// for i = 1 to horses do
53849: LD_ADDR_VAR 0 11
53853: PUSH
53854: DOUBLE
53855: LD_INT 1
53857: DEC
53858: ST_TO_ADDR
53859: LD_VAR 0 5
53863: PUSH
53864: FOR_TO
53865: IFFALSE 53912
// begin hc_class := 21 ;
53867: LD_ADDR_OWVAR 28
53871: PUSH
53872: LD_INT 21
53874: ST_TO_ADDR
// hc_gallery :=  ;
53875: LD_ADDR_OWVAR 33
53879: PUSH
53880: LD_STRING 
53882: ST_TO_ADDR
// animal := CreateHuman ;
53883: LD_ADDR_VAR 0 12
53887: PUSH
53888: CALL_OW 44
53892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53893: LD_VAR 0 12
53897: PPUSH
53898: LD_VAR 0 8
53902: PPUSH
53903: LD_INT 0
53905: PPUSH
53906: CALL 60588 0 3
// end ;
53910: GO 53864
53912: POP
53913: POP
// if birds then
53914: LD_VAR 0 1
53918: IFFALSE 53985
// for i = 1 to birds do
53920: LD_ADDR_VAR 0 11
53924: PUSH
53925: DOUBLE
53926: LD_INT 1
53928: DEC
53929: ST_TO_ADDR
53930: LD_VAR 0 1
53934: PUSH
53935: FOR_TO
53936: IFFALSE 53983
// begin hc_class = 18 ;
53938: LD_ADDR_OWVAR 28
53942: PUSH
53943: LD_INT 18
53945: ST_TO_ADDR
// hc_gallery =  ;
53946: LD_ADDR_OWVAR 33
53950: PUSH
53951: LD_STRING 
53953: ST_TO_ADDR
// animal := CreateHuman ;
53954: LD_ADDR_VAR 0 12
53958: PUSH
53959: CALL_OW 44
53963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53964: LD_VAR 0 12
53968: PPUSH
53969: LD_VAR 0 8
53973: PPUSH
53974: LD_INT 0
53976: PPUSH
53977: CALL 60588 0 3
// end ;
53981: GO 53935
53983: POP
53984: POP
// if tigers then
53985: LD_VAR 0 2
53989: IFFALSE 54073
// for i = 1 to tigers do
53991: LD_ADDR_VAR 0 11
53995: PUSH
53996: DOUBLE
53997: LD_INT 1
53999: DEC
54000: ST_TO_ADDR
54001: LD_VAR 0 2
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54071
// begin hc_class = class_tiger ;
54009: LD_ADDR_OWVAR 28
54013: PUSH
54014: LD_INT 14
54016: ST_TO_ADDR
// hc_gallery =  ;
54017: LD_ADDR_OWVAR 33
54021: PUSH
54022: LD_STRING 
54024: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54025: LD_ADDR_OWVAR 35
54029: PUSH
54030: LD_INT 7
54032: NEG
54033: PPUSH
54034: LD_INT 7
54036: PPUSH
54037: CALL_OW 12
54041: ST_TO_ADDR
// animal := CreateHuman ;
54042: LD_ADDR_VAR 0 12
54046: PUSH
54047: CALL_OW 44
54051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54052: LD_VAR 0 12
54056: PPUSH
54057: LD_VAR 0 8
54061: PPUSH
54062: LD_INT 0
54064: PPUSH
54065: CALL 60588 0 3
// end ;
54069: GO 54006
54071: POP
54072: POP
// if apemans then
54073: LD_VAR 0 3
54077: IFFALSE 54200
// for i = 1 to apemans do
54079: LD_ADDR_VAR 0 11
54083: PUSH
54084: DOUBLE
54085: LD_INT 1
54087: DEC
54088: ST_TO_ADDR
54089: LD_VAR 0 3
54093: PUSH
54094: FOR_TO
54095: IFFALSE 54198
// begin hc_class = class_apeman ;
54097: LD_ADDR_OWVAR 28
54101: PUSH
54102: LD_INT 12
54104: ST_TO_ADDR
// hc_gallery =  ;
54105: LD_ADDR_OWVAR 33
54109: PUSH
54110: LD_STRING 
54112: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54113: LD_ADDR_OWVAR 35
54117: PUSH
54118: LD_INT 5
54120: NEG
54121: PPUSH
54122: LD_INT 5
54124: PPUSH
54125: CALL_OW 12
54129: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54130: LD_ADDR_OWVAR 31
54134: PUSH
54135: LD_INT 1
54137: PPUSH
54138: LD_INT 3
54140: PPUSH
54141: CALL_OW 12
54145: PUSH
54146: LD_INT 1
54148: PPUSH
54149: LD_INT 3
54151: PPUSH
54152: CALL_OW 12
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// animal := CreateHuman ;
54169: LD_ADDR_VAR 0 12
54173: PUSH
54174: CALL_OW 44
54178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54179: LD_VAR 0 12
54183: PPUSH
54184: LD_VAR 0 8
54188: PPUSH
54189: LD_INT 0
54191: PPUSH
54192: CALL 60588 0 3
// end ;
54196: GO 54094
54198: POP
54199: POP
// if enchidnas then
54200: LD_VAR 0 4
54204: IFFALSE 54271
// for i = 1 to enchidnas do
54206: LD_ADDR_VAR 0 11
54210: PUSH
54211: DOUBLE
54212: LD_INT 1
54214: DEC
54215: ST_TO_ADDR
54216: LD_VAR 0 4
54220: PUSH
54221: FOR_TO
54222: IFFALSE 54269
// begin hc_class = 13 ;
54224: LD_ADDR_OWVAR 28
54228: PUSH
54229: LD_INT 13
54231: ST_TO_ADDR
// hc_gallery =  ;
54232: LD_ADDR_OWVAR 33
54236: PUSH
54237: LD_STRING 
54239: ST_TO_ADDR
// animal := CreateHuman ;
54240: LD_ADDR_VAR 0 12
54244: PUSH
54245: CALL_OW 44
54249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54250: LD_VAR 0 12
54254: PPUSH
54255: LD_VAR 0 8
54259: PPUSH
54260: LD_INT 0
54262: PPUSH
54263: CALL 60588 0 3
// end ;
54267: GO 54221
54269: POP
54270: POP
// if fishes then
54271: LD_VAR 0 7
54275: IFFALSE 54342
// for i = 1 to fishes do
54277: LD_ADDR_VAR 0 11
54281: PUSH
54282: DOUBLE
54283: LD_INT 1
54285: DEC
54286: ST_TO_ADDR
54287: LD_VAR 0 7
54291: PUSH
54292: FOR_TO
54293: IFFALSE 54340
// begin hc_class = 20 ;
54295: LD_ADDR_OWVAR 28
54299: PUSH
54300: LD_INT 20
54302: ST_TO_ADDR
// hc_gallery =  ;
54303: LD_ADDR_OWVAR 33
54307: PUSH
54308: LD_STRING 
54310: ST_TO_ADDR
// animal := CreateHuman ;
54311: LD_ADDR_VAR 0 12
54315: PUSH
54316: CALL_OW 44
54320: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54321: LD_VAR 0 12
54325: PPUSH
54326: LD_VAR 0 9
54330: PPUSH
54331: LD_INT 0
54333: PPUSH
54334: CALL 60588 0 3
// end ;
54338: GO 54292
54340: POP
54341: POP
// end ;
54342: LD_VAR 0 10
54346: RET
// export function WantHeal ( sci , unit ) ; begin
54347: LD_INT 0
54349: PPUSH
// if GetTaskList ( sci ) > 0 then
54350: LD_VAR 0 1
54354: PPUSH
54355: CALL_OW 437
54359: PUSH
54360: LD_INT 0
54362: GREATER
54363: IFFALSE 54433
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54365: LD_VAR 0 1
54369: PPUSH
54370: CALL_OW 437
54374: PUSH
54375: LD_INT 1
54377: ARRAY
54378: PUSH
54379: LD_INT 1
54381: ARRAY
54382: PUSH
54383: LD_STRING l
54385: EQUAL
54386: PUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: CALL_OW 437
54396: PUSH
54397: LD_INT 1
54399: ARRAY
54400: PUSH
54401: LD_INT 4
54403: ARRAY
54404: PUSH
54405: LD_VAR 0 2
54409: EQUAL
54410: AND
54411: IFFALSE 54423
// result := true else
54413: LD_ADDR_VAR 0 3
54417: PUSH
54418: LD_INT 1
54420: ST_TO_ADDR
54421: GO 54431
// result := false ;
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_INT 0
54430: ST_TO_ADDR
// end else
54431: GO 54441
// result := false ;
54433: LD_ADDR_VAR 0 3
54437: PUSH
54438: LD_INT 0
54440: ST_TO_ADDR
// end ;
54441: LD_VAR 0 3
54445: RET
// export function HealTarget ( sci ) ; begin
54446: LD_INT 0
54448: PPUSH
// if not sci then
54449: LD_VAR 0 1
54453: NOT
54454: IFFALSE 54458
// exit ;
54456: GO 54523
// result := 0 ;
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_INT 0
54465: ST_TO_ADDR
// if GetTaskList ( sci ) then
54466: LD_VAR 0 1
54470: PPUSH
54471: CALL_OW 437
54475: IFFALSE 54523
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54477: LD_VAR 0 1
54481: PPUSH
54482: CALL_OW 437
54486: PUSH
54487: LD_INT 1
54489: ARRAY
54490: PUSH
54491: LD_INT 1
54493: ARRAY
54494: PUSH
54495: LD_STRING l
54497: EQUAL
54498: IFFALSE 54523
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54500: LD_ADDR_VAR 0 2
54504: PUSH
54505: LD_VAR 0 1
54509: PPUSH
54510: CALL_OW 437
54514: PUSH
54515: LD_INT 1
54517: ARRAY
54518: PUSH
54519: LD_INT 4
54521: ARRAY
54522: ST_TO_ADDR
// end ;
54523: LD_VAR 0 2
54527: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54528: LD_INT 0
54530: PPUSH
54531: PPUSH
54532: PPUSH
54533: PPUSH
54534: PPUSH
54535: PPUSH
54536: PPUSH
54537: PPUSH
54538: PPUSH
54539: PPUSH
54540: PPUSH
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
// if not list then
54564: LD_VAR 0 1
54568: NOT
54569: IFFALSE 54573
// exit ;
54571: GO 59199
// base := list [ 1 ] ;
54573: LD_ADDR_VAR 0 3
54577: PUSH
54578: LD_VAR 0 1
54582: PUSH
54583: LD_INT 1
54585: ARRAY
54586: ST_TO_ADDR
// group := list [ 2 ] ;
54587: LD_ADDR_VAR 0 4
54591: PUSH
54592: LD_VAR 0 1
54596: PUSH
54597: LD_INT 2
54599: ARRAY
54600: ST_TO_ADDR
// path := list [ 3 ] ;
54601: LD_ADDR_VAR 0 5
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_INT 3
54613: ARRAY
54614: ST_TO_ADDR
// flags := list [ 4 ] ;
54615: LD_ADDR_VAR 0 6
54619: PUSH
54620: LD_VAR 0 1
54624: PUSH
54625: LD_INT 4
54627: ARRAY
54628: ST_TO_ADDR
// mined := [ ] ;
54629: LD_ADDR_VAR 0 27
54633: PUSH
54634: EMPTY
54635: ST_TO_ADDR
// bombed := [ ] ;
54636: LD_ADDR_VAR 0 28
54640: PUSH
54641: EMPTY
54642: ST_TO_ADDR
// healers := [ ] ;
54643: LD_ADDR_VAR 0 31
54647: PUSH
54648: EMPTY
54649: ST_TO_ADDR
// to_heal := [ ] ;
54650: LD_ADDR_VAR 0 30
54654: PUSH
54655: EMPTY
54656: ST_TO_ADDR
// repairs := [ ] ;
54657: LD_ADDR_VAR 0 33
54661: PUSH
54662: EMPTY
54663: ST_TO_ADDR
// to_repair := [ ] ;
54664: LD_ADDR_VAR 0 32
54668: PUSH
54669: EMPTY
54670: ST_TO_ADDR
// if not group or not path then
54671: LD_VAR 0 4
54675: NOT
54676: PUSH
54677: LD_VAR 0 5
54681: NOT
54682: OR
54683: IFFALSE 54687
// exit ;
54685: GO 59199
// side := GetSide ( group [ 1 ] ) ;
54687: LD_ADDR_VAR 0 35
54691: PUSH
54692: LD_VAR 0 4
54696: PUSH
54697: LD_INT 1
54699: ARRAY
54700: PPUSH
54701: CALL_OW 255
54705: ST_TO_ADDR
// if flags then
54706: LD_VAR 0 6
54710: IFFALSE 54854
// begin f_ignore_area := flags [ 1 ] ;
54712: LD_ADDR_VAR 0 17
54716: PUSH
54717: LD_VAR 0 6
54721: PUSH
54722: LD_INT 1
54724: ARRAY
54725: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54726: LD_ADDR_VAR 0 18
54730: PUSH
54731: LD_VAR 0 6
54735: PUSH
54736: LD_INT 2
54738: ARRAY
54739: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54740: LD_ADDR_VAR 0 19
54744: PUSH
54745: LD_VAR 0 6
54749: PUSH
54750: LD_INT 3
54752: ARRAY
54753: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54754: LD_ADDR_VAR 0 20
54758: PUSH
54759: LD_VAR 0 6
54763: PUSH
54764: LD_INT 4
54766: ARRAY
54767: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54768: LD_ADDR_VAR 0 21
54772: PUSH
54773: LD_VAR 0 6
54777: PUSH
54778: LD_INT 5
54780: ARRAY
54781: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54782: LD_ADDR_VAR 0 22
54786: PUSH
54787: LD_VAR 0 6
54791: PUSH
54792: LD_INT 6
54794: ARRAY
54795: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54796: LD_ADDR_VAR 0 23
54800: PUSH
54801: LD_VAR 0 6
54805: PUSH
54806: LD_INT 7
54808: ARRAY
54809: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54810: LD_ADDR_VAR 0 24
54814: PUSH
54815: LD_VAR 0 6
54819: PUSH
54820: LD_INT 8
54822: ARRAY
54823: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54824: LD_ADDR_VAR 0 25
54828: PUSH
54829: LD_VAR 0 6
54833: PUSH
54834: LD_INT 9
54836: ARRAY
54837: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54838: LD_ADDR_VAR 0 26
54842: PUSH
54843: LD_VAR 0 6
54847: PUSH
54848: LD_INT 10
54850: ARRAY
54851: ST_TO_ADDR
// end else
54852: GO 54934
// begin f_ignore_area := false ;
54854: LD_ADDR_VAR 0 17
54858: PUSH
54859: LD_INT 0
54861: ST_TO_ADDR
// f_capture := false ;
54862: LD_ADDR_VAR 0 18
54866: PUSH
54867: LD_INT 0
54869: ST_TO_ADDR
// f_ignore_civ := false ;
54870: LD_ADDR_VAR 0 19
54874: PUSH
54875: LD_INT 0
54877: ST_TO_ADDR
// f_murder := false ;
54878: LD_ADDR_VAR 0 20
54882: PUSH
54883: LD_INT 0
54885: ST_TO_ADDR
// f_mines := false ;
54886: LD_ADDR_VAR 0 21
54890: PUSH
54891: LD_INT 0
54893: ST_TO_ADDR
// f_repair := false ;
54894: LD_ADDR_VAR 0 22
54898: PUSH
54899: LD_INT 0
54901: ST_TO_ADDR
// f_heal := false ;
54902: LD_ADDR_VAR 0 23
54906: PUSH
54907: LD_INT 0
54909: ST_TO_ADDR
// f_spacetime := false ;
54910: LD_ADDR_VAR 0 24
54914: PUSH
54915: LD_INT 0
54917: ST_TO_ADDR
// f_attack_depot := false ;
54918: LD_ADDR_VAR 0 25
54922: PUSH
54923: LD_INT 0
54925: ST_TO_ADDR
// f_crawl := false ;
54926: LD_ADDR_VAR 0 26
54930: PUSH
54931: LD_INT 0
54933: ST_TO_ADDR
// end ; if f_heal then
54934: LD_VAR 0 23
54938: IFFALSE 54965
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54940: LD_ADDR_VAR 0 31
54944: PUSH
54945: LD_VAR 0 4
54949: PPUSH
54950: LD_INT 25
54952: PUSH
54953: LD_INT 4
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PPUSH
54960: CALL_OW 72
54964: ST_TO_ADDR
// if f_repair then
54965: LD_VAR 0 22
54969: IFFALSE 54996
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54971: LD_ADDR_VAR 0 33
54975: PUSH
54976: LD_VAR 0 4
54980: PPUSH
54981: LD_INT 25
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PPUSH
54991: CALL_OW 72
54995: ST_TO_ADDR
// units_path := [ ] ;
54996: LD_ADDR_VAR 0 16
55000: PUSH
55001: EMPTY
55002: ST_TO_ADDR
// for i = 1 to group do
55003: LD_ADDR_VAR 0 7
55007: PUSH
55008: DOUBLE
55009: LD_INT 1
55011: DEC
55012: ST_TO_ADDR
55013: LD_VAR 0 4
55017: PUSH
55018: FOR_TO
55019: IFFALSE 55048
// units_path := Replace ( units_path , i , path ) ;
55021: LD_ADDR_VAR 0 16
55025: PUSH
55026: LD_VAR 0 16
55030: PPUSH
55031: LD_VAR 0 7
55035: PPUSH
55036: LD_VAR 0 5
55040: PPUSH
55041: CALL_OW 1
55045: ST_TO_ADDR
55046: GO 55018
55048: POP
55049: POP
// repeat for i = group downto 1 do
55050: LD_ADDR_VAR 0 7
55054: PUSH
55055: DOUBLE
55056: LD_VAR 0 4
55060: INC
55061: ST_TO_ADDR
55062: LD_INT 1
55064: PUSH
55065: FOR_DOWNTO
55066: IFFALSE 59162
// begin wait ( 5 ) ;
55068: LD_INT 5
55070: PPUSH
55071: CALL_OW 67
// tmp := [ ] ;
55075: LD_ADDR_VAR 0 14
55079: PUSH
55080: EMPTY
55081: ST_TO_ADDR
// attacking := false ;
55082: LD_ADDR_VAR 0 29
55086: PUSH
55087: LD_INT 0
55089: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55090: LD_VAR 0 4
55094: PUSH
55095: LD_VAR 0 7
55099: ARRAY
55100: PPUSH
55101: CALL_OW 301
55105: PUSH
55106: LD_VAR 0 4
55110: PUSH
55111: LD_VAR 0 7
55115: ARRAY
55116: NOT
55117: OR
55118: IFFALSE 55227
// begin if GetType ( group [ i ] ) = unit_human then
55120: LD_VAR 0 4
55124: PUSH
55125: LD_VAR 0 7
55129: ARRAY
55130: PPUSH
55131: CALL_OW 247
55135: PUSH
55136: LD_INT 1
55138: EQUAL
55139: IFFALSE 55185
// begin to_heal := to_heal diff group [ i ] ;
55141: LD_ADDR_VAR 0 30
55145: PUSH
55146: LD_VAR 0 30
55150: PUSH
55151: LD_VAR 0 4
55155: PUSH
55156: LD_VAR 0 7
55160: ARRAY
55161: DIFF
55162: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55163: LD_ADDR_VAR 0 31
55167: PUSH
55168: LD_VAR 0 31
55172: PUSH
55173: LD_VAR 0 4
55177: PUSH
55178: LD_VAR 0 7
55182: ARRAY
55183: DIFF
55184: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55185: LD_ADDR_VAR 0 4
55189: PUSH
55190: LD_VAR 0 4
55194: PPUSH
55195: LD_VAR 0 7
55199: PPUSH
55200: CALL_OW 3
55204: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55205: LD_ADDR_VAR 0 16
55209: PUSH
55210: LD_VAR 0 16
55214: PPUSH
55215: LD_VAR 0 7
55219: PPUSH
55220: CALL_OW 3
55224: ST_TO_ADDR
// continue ;
55225: GO 55065
// end ; if f_repair then
55227: LD_VAR 0 22
55231: IFFALSE 55720
// begin if GetType ( group [ i ] ) = unit_vehicle then
55233: LD_VAR 0 4
55237: PUSH
55238: LD_VAR 0 7
55242: ARRAY
55243: PPUSH
55244: CALL_OW 247
55248: PUSH
55249: LD_INT 2
55251: EQUAL
55252: IFFALSE 55442
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55254: LD_VAR 0 4
55258: PUSH
55259: LD_VAR 0 7
55263: ARRAY
55264: PPUSH
55265: CALL_OW 256
55269: PUSH
55270: LD_INT 700
55272: LESS
55273: PUSH
55274: LD_VAR 0 4
55278: PUSH
55279: LD_VAR 0 7
55283: ARRAY
55284: PUSH
55285: LD_VAR 0 32
55289: IN
55290: NOT
55291: AND
55292: IFFALSE 55316
// to_repair := to_repair union group [ i ] ;
55294: LD_ADDR_VAR 0 32
55298: PUSH
55299: LD_VAR 0 32
55303: PUSH
55304: LD_VAR 0 4
55308: PUSH
55309: LD_VAR 0 7
55313: ARRAY
55314: UNION
55315: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55316: LD_VAR 0 4
55320: PUSH
55321: LD_VAR 0 7
55325: ARRAY
55326: PPUSH
55327: CALL_OW 256
55331: PUSH
55332: LD_INT 1000
55334: EQUAL
55335: PUSH
55336: LD_VAR 0 4
55340: PUSH
55341: LD_VAR 0 7
55345: ARRAY
55346: PUSH
55347: LD_VAR 0 32
55351: IN
55352: AND
55353: IFFALSE 55377
// to_repair := to_repair diff group [ i ] ;
55355: LD_ADDR_VAR 0 32
55359: PUSH
55360: LD_VAR 0 32
55364: PUSH
55365: LD_VAR 0 4
55369: PUSH
55370: LD_VAR 0 7
55374: ARRAY
55375: DIFF
55376: ST_TO_ADDR
// if group [ i ] in to_repair then
55377: LD_VAR 0 4
55381: PUSH
55382: LD_VAR 0 7
55386: ARRAY
55387: PUSH
55388: LD_VAR 0 32
55392: IN
55393: IFFALSE 55440
// begin if not IsInArea ( group [ i ] , f_repair ) then
55395: LD_VAR 0 4
55399: PUSH
55400: LD_VAR 0 7
55404: ARRAY
55405: PPUSH
55406: LD_VAR 0 22
55410: PPUSH
55411: CALL_OW 308
55415: NOT
55416: IFFALSE 55438
// ComMoveToArea ( group [ i ] , f_repair ) ;
55418: LD_VAR 0 4
55422: PUSH
55423: LD_VAR 0 7
55427: ARRAY
55428: PPUSH
55429: LD_VAR 0 22
55433: PPUSH
55434: CALL_OW 113
// continue ;
55438: GO 55065
// end ; end else
55440: GO 55720
// if group [ i ] in repairs then
55442: LD_VAR 0 4
55446: PUSH
55447: LD_VAR 0 7
55451: ARRAY
55452: PUSH
55453: LD_VAR 0 33
55457: IN
55458: IFFALSE 55720
// begin if IsInUnit ( group [ i ] ) then
55460: LD_VAR 0 4
55464: PUSH
55465: LD_VAR 0 7
55469: ARRAY
55470: PPUSH
55471: CALL_OW 310
55475: IFFALSE 55543
// begin z := IsInUnit ( group [ i ] ) ;
55477: LD_ADDR_VAR 0 13
55481: PUSH
55482: LD_VAR 0 4
55486: PUSH
55487: LD_VAR 0 7
55491: ARRAY
55492: PPUSH
55493: CALL_OW 310
55497: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55498: LD_VAR 0 13
55502: PUSH
55503: LD_VAR 0 32
55507: IN
55508: PUSH
55509: LD_VAR 0 13
55513: PPUSH
55514: LD_VAR 0 22
55518: PPUSH
55519: CALL_OW 308
55523: AND
55524: IFFALSE 55541
// ComExitVehicle ( group [ i ] ) ;
55526: LD_VAR 0 4
55530: PUSH
55531: LD_VAR 0 7
55535: ARRAY
55536: PPUSH
55537: CALL_OW 121
// end else
55541: GO 55720
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55543: LD_ADDR_VAR 0 13
55547: PUSH
55548: LD_VAR 0 4
55552: PPUSH
55553: LD_INT 95
55555: PUSH
55556: LD_VAR 0 22
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 58
55567: PUSH
55568: EMPTY
55569: LIST
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PPUSH
55575: CALL_OW 72
55579: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55580: LD_VAR 0 4
55584: PUSH
55585: LD_VAR 0 7
55589: ARRAY
55590: PPUSH
55591: CALL_OW 314
55595: NOT
55596: IFFALSE 55718
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55598: LD_ADDR_VAR 0 10
55602: PUSH
55603: LD_VAR 0 13
55607: PPUSH
55608: LD_VAR 0 4
55612: PUSH
55613: LD_VAR 0 7
55617: ARRAY
55618: PPUSH
55619: CALL_OW 74
55623: ST_TO_ADDR
// if not x then
55624: LD_VAR 0 10
55628: NOT
55629: IFFALSE 55633
// continue ;
55631: GO 55065
// if GetLives ( x ) < 1000 then
55633: LD_VAR 0 10
55637: PPUSH
55638: CALL_OW 256
55642: PUSH
55643: LD_INT 1000
55645: LESS
55646: IFFALSE 55670
// ComRepairVehicle ( group [ i ] , x ) else
55648: LD_VAR 0 4
55652: PUSH
55653: LD_VAR 0 7
55657: ARRAY
55658: PPUSH
55659: LD_VAR 0 10
55663: PPUSH
55664: CALL_OW 129
55668: GO 55718
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55670: LD_VAR 0 23
55674: PUSH
55675: LD_VAR 0 4
55679: PUSH
55680: LD_VAR 0 7
55684: ARRAY
55685: PPUSH
55686: CALL_OW 256
55690: PUSH
55691: LD_INT 1000
55693: LESS
55694: AND
55695: NOT
55696: IFFALSE 55718
// ComEnterUnit ( group [ i ] , x ) ;
55698: LD_VAR 0 4
55702: PUSH
55703: LD_VAR 0 7
55707: ARRAY
55708: PPUSH
55709: LD_VAR 0 10
55713: PPUSH
55714: CALL_OW 120
// end ; continue ;
55718: GO 55065
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55720: LD_VAR 0 23
55724: PUSH
55725: LD_VAR 0 4
55729: PUSH
55730: LD_VAR 0 7
55734: ARRAY
55735: PPUSH
55736: CALL_OW 247
55740: PUSH
55741: LD_INT 1
55743: EQUAL
55744: AND
55745: IFFALSE 56223
// begin if group [ i ] in healers then
55747: LD_VAR 0 4
55751: PUSH
55752: LD_VAR 0 7
55756: ARRAY
55757: PUSH
55758: LD_VAR 0 31
55762: IN
55763: IFFALSE 56036
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55765: LD_VAR 0 4
55769: PUSH
55770: LD_VAR 0 7
55774: ARRAY
55775: PPUSH
55776: LD_VAR 0 23
55780: PPUSH
55781: CALL_OW 308
55785: NOT
55786: PUSH
55787: LD_VAR 0 4
55791: PUSH
55792: LD_VAR 0 7
55796: ARRAY
55797: PPUSH
55798: CALL_OW 314
55802: NOT
55803: AND
55804: IFFALSE 55828
// ComMoveToArea ( group [ i ] , f_heal ) else
55806: LD_VAR 0 4
55810: PUSH
55811: LD_VAR 0 7
55815: ARRAY
55816: PPUSH
55817: LD_VAR 0 23
55821: PPUSH
55822: CALL_OW 113
55826: GO 56034
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55828: LD_VAR 0 4
55832: PUSH
55833: LD_VAR 0 7
55837: ARRAY
55838: PPUSH
55839: CALL 54446 0 1
55843: PPUSH
55844: CALL_OW 256
55848: PUSH
55849: LD_INT 1000
55851: EQUAL
55852: IFFALSE 55871
// ComStop ( group [ i ] ) else
55854: LD_VAR 0 4
55858: PUSH
55859: LD_VAR 0 7
55863: ARRAY
55864: PPUSH
55865: CALL_OW 141
55869: GO 56034
// if not HasTask ( group [ i ] ) and to_heal then
55871: LD_VAR 0 4
55875: PUSH
55876: LD_VAR 0 7
55880: ARRAY
55881: PPUSH
55882: CALL_OW 314
55886: NOT
55887: PUSH
55888: LD_VAR 0 30
55892: AND
55893: IFFALSE 56034
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55895: LD_ADDR_VAR 0 13
55899: PUSH
55900: LD_VAR 0 30
55904: PPUSH
55905: LD_INT 3
55907: PUSH
55908: LD_INT 54
55910: PUSH
55911: EMPTY
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PPUSH
55918: CALL_OW 72
55922: PPUSH
55923: LD_VAR 0 4
55927: PUSH
55928: LD_VAR 0 7
55932: ARRAY
55933: PPUSH
55934: CALL_OW 74
55938: ST_TO_ADDR
// if z then
55939: LD_VAR 0 13
55943: IFFALSE 56034
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55945: LD_INT 91
55947: PUSH
55948: LD_VAR 0 13
55952: PUSH
55953: LD_INT 10
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 81
55963: PUSH
55964: LD_VAR 0 13
55968: PPUSH
55969: CALL_OW 255
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PPUSH
55982: CALL_OW 69
55986: PUSH
55987: LD_INT 0
55989: EQUAL
55990: IFFALSE 56014
// ComHeal ( group [ i ] , z ) else
55992: LD_VAR 0 4
55996: PUSH
55997: LD_VAR 0 7
56001: ARRAY
56002: PPUSH
56003: LD_VAR 0 13
56007: PPUSH
56008: CALL_OW 128
56012: GO 56034
// ComMoveToArea ( group [ i ] , f_heal ) ;
56014: LD_VAR 0 4
56018: PUSH
56019: LD_VAR 0 7
56023: ARRAY
56024: PPUSH
56025: LD_VAR 0 23
56029: PPUSH
56030: CALL_OW 113
// end ; continue ;
56034: GO 55065
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56036: LD_VAR 0 4
56040: PUSH
56041: LD_VAR 0 7
56045: ARRAY
56046: PPUSH
56047: CALL_OW 256
56051: PUSH
56052: LD_INT 700
56054: LESS
56055: PUSH
56056: LD_VAR 0 4
56060: PUSH
56061: LD_VAR 0 7
56065: ARRAY
56066: PUSH
56067: LD_VAR 0 30
56071: IN
56072: NOT
56073: AND
56074: IFFALSE 56098
// to_heal := to_heal union group [ i ] ;
56076: LD_ADDR_VAR 0 30
56080: PUSH
56081: LD_VAR 0 30
56085: PUSH
56086: LD_VAR 0 4
56090: PUSH
56091: LD_VAR 0 7
56095: ARRAY
56096: UNION
56097: ST_TO_ADDR
// if group [ i ] in to_heal then
56098: LD_VAR 0 4
56102: PUSH
56103: LD_VAR 0 7
56107: ARRAY
56108: PUSH
56109: LD_VAR 0 30
56113: IN
56114: IFFALSE 56223
// begin if GetLives ( group [ i ] ) = 1000 then
56116: LD_VAR 0 4
56120: PUSH
56121: LD_VAR 0 7
56125: ARRAY
56126: PPUSH
56127: CALL_OW 256
56131: PUSH
56132: LD_INT 1000
56134: EQUAL
56135: IFFALSE 56161
// to_heal := to_heal diff group [ i ] else
56137: LD_ADDR_VAR 0 30
56141: PUSH
56142: LD_VAR 0 30
56146: PUSH
56147: LD_VAR 0 4
56151: PUSH
56152: LD_VAR 0 7
56156: ARRAY
56157: DIFF
56158: ST_TO_ADDR
56159: GO 56223
// begin if not IsInArea ( group [ i ] , to_heal ) then
56161: LD_VAR 0 4
56165: PUSH
56166: LD_VAR 0 7
56170: ARRAY
56171: PPUSH
56172: LD_VAR 0 30
56176: PPUSH
56177: CALL_OW 308
56181: NOT
56182: IFFALSE 56206
// ComMoveToArea ( group [ i ] , f_heal ) else
56184: LD_VAR 0 4
56188: PUSH
56189: LD_VAR 0 7
56193: ARRAY
56194: PPUSH
56195: LD_VAR 0 23
56199: PPUSH
56200: CALL_OW 113
56204: GO 56221
// ComHold ( group [ i ] ) ;
56206: LD_VAR 0 4
56210: PUSH
56211: LD_VAR 0 7
56215: ARRAY
56216: PPUSH
56217: CALL_OW 140
// continue ;
56221: GO 55065
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56223: LD_VAR 0 4
56227: PUSH
56228: LD_VAR 0 7
56232: ARRAY
56233: PPUSH
56234: LD_INT 10
56236: PPUSH
56237: CALL 52843 0 2
56241: NOT
56242: PUSH
56243: LD_VAR 0 16
56247: PUSH
56248: LD_VAR 0 7
56252: ARRAY
56253: PUSH
56254: EMPTY
56255: EQUAL
56256: NOT
56257: AND
56258: IFFALSE 56524
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56260: LD_VAR 0 4
56264: PUSH
56265: LD_VAR 0 7
56269: ARRAY
56270: PPUSH
56271: CALL_OW 262
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: IN
56286: IFFALSE 56327
// if GetFuel ( group [ i ] ) < 10 then
56288: LD_VAR 0 4
56292: PUSH
56293: LD_VAR 0 7
56297: ARRAY
56298: PPUSH
56299: CALL_OW 261
56303: PUSH
56304: LD_INT 10
56306: LESS
56307: IFFALSE 56327
// SetFuel ( group [ i ] , 12 ) ;
56309: LD_VAR 0 4
56313: PUSH
56314: LD_VAR 0 7
56318: ARRAY
56319: PPUSH
56320: LD_INT 12
56322: PPUSH
56323: CALL_OW 240
// if units_path [ i ] then
56327: LD_VAR 0 16
56331: PUSH
56332: LD_VAR 0 7
56336: ARRAY
56337: IFFALSE 56522
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56339: LD_VAR 0 4
56343: PUSH
56344: LD_VAR 0 7
56348: ARRAY
56349: PPUSH
56350: LD_VAR 0 16
56354: PUSH
56355: LD_VAR 0 7
56359: ARRAY
56360: PUSH
56361: LD_INT 1
56363: ARRAY
56364: PUSH
56365: LD_INT 1
56367: ARRAY
56368: PPUSH
56369: LD_VAR 0 16
56373: PUSH
56374: LD_VAR 0 7
56378: ARRAY
56379: PUSH
56380: LD_INT 1
56382: ARRAY
56383: PUSH
56384: LD_INT 2
56386: ARRAY
56387: PPUSH
56388: CALL_OW 297
56392: PUSH
56393: LD_INT 6
56395: GREATER
56396: IFFALSE 56471
// begin if not HasTask ( group [ i ] ) then
56398: LD_VAR 0 4
56402: PUSH
56403: LD_VAR 0 7
56407: ARRAY
56408: PPUSH
56409: CALL_OW 314
56413: NOT
56414: IFFALSE 56469
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56416: LD_VAR 0 4
56420: PUSH
56421: LD_VAR 0 7
56425: ARRAY
56426: PPUSH
56427: LD_VAR 0 16
56431: PUSH
56432: LD_VAR 0 7
56436: ARRAY
56437: PUSH
56438: LD_INT 1
56440: ARRAY
56441: PUSH
56442: LD_INT 1
56444: ARRAY
56445: PPUSH
56446: LD_VAR 0 16
56450: PUSH
56451: LD_VAR 0 7
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PUSH
56461: LD_INT 2
56463: ARRAY
56464: PPUSH
56465: CALL_OW 114
// end else
56469: GO 56522
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56471: LD_ADDR_VAR 0 15
56475: PUSH
56476: LD_VAR 0 16
56480: PUSH
56481: LD_VAR 0 7
56485: ARRAY
56486: PPUSH
56487: LD_INT 1
56489: PPUSH
56490: CALL_OW 3
56494: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56495: LD_ADDR_VAR 0 16
56499: PUSH
56500: LD_VAR 0 16
56504: PPUSH
56505: LD_VAR 0 7
56509: PPUSH
56510: LD_VAR 0 15
56514: PPUSH
56515: CALL_OW 1
56519: ST_TO_ADDR
// continue ;
56520: GO 55065
// end ; end ; end else
56522: GO 59160
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56524: LD_ADDR_VAR 0 14
56528: PUSH
56529: LD_INT 81
56531: PUSH
56532: LD_VAR 0 4
56536: PUSH
56537: LD_VAR 0 7
56541: ARRAY
56542: PPUSH
56543: CALL_OW 255
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PPUSH
56552: CALL_OW 69
56556: ST_TO_ADDR
// if not tmp then
56557: LD_VAR 0 14
56561: NOT
56562: IFFALSE 56566
// continue ;
56564: GO 55065
// if f_ignore_area then
56566: LD_VAR 0 17
56570: IFFALSE 56658
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56572: LD_ADDR_VAR 0 15
56576: PUSH
56577: LD_VAR 0 14
56581: PPUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 92
56587: PUSH
56588: LD_VAR 0 17
56592: PUSH
56593: LD_INT 1
56595: ARRAY
56596: PUSH
56597: LD_VAR 0 17
56601: PUSH
56602: LD_INT 2
56604: ARRAY
56605: PUSH
56606: LD_VAR 0 17
56610: PUSH
56611: LD_INT 3
56613: ARRAY
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PPUSH
56625: CALL_OW 72
56629: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56630: LD_VAR 0 14
56634: PUSH
56635: LD_VAR 0 15
56639: DIFF
56640: IFFALSE 56658
// tmp := tmp diff tmp2 ;
56642: LD_ADDR_VAR 0 14
56646: PUSH
56647: LD_VAR 0 14
56651: PUSH
56652: LD_VAR 0 15
56656: DIFF
56657: ST_TO_ADDR
// end ; if not f_murder then
56658: LD_VAR 0 20
56662: NOT
56663: IFFALSE 56721
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56665: LD_ADDR_VAR 0 15
56669: PUSH
56670: LD_VAR 0 14
56674: PPUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 50
56680: PUSH
56681: EMPTY
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PPUSH
56688: CALL_OW 72
56692: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56693: LD_VAR 0 14
56697: PUSH
56698: LD_VAR 0 15
56702: DIFF
56703: IFFALSE 56721
// tmp := tmp diff tmp2 ;
56705: LD_ADDR_VAR 0 14
56709: PUSH
56710: LD_VAR 0 14
56714: PUSH
56715: LD_VAR 0 15
56719: DIFF
56720: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56721: LD_ADDR_VAR 0 14
56725: PUSH
56726: LD_VAR 0 4
56730: PUSH
56731: LD_VAR 0 7
56735: ARRAY
56736: PPUSH
56737: LD_VAR 0 14
56741: PPUSH
56742: LD_INT 1
56744: PPUSH
56745: LD_INT 1
56747: PPUSH
56748: CALL 26486 0 4
56752: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56753: LD_VAR 0 4
56757: PUSH
56758: LD_VAR 0 7
56762: ARRAY
56763: PPUSH
56764: CALL_OW 257
56768: PUSH
56769: LD_INT 1
56771: EQUAL
56772: IFFALSE 57220
// begin if WantPlant ( group [ i ] ) then
56774: LD_VAR 0 4
56778: PUSH
56779: LD_VAR 0 7
56783: ARRAY
56784: PPUSH
56785: CALL 25987 0 1
56789: IFFALSE 56793
// continue ;
56791: GO 55065
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56793: LD_VAR 0 18
56797: PUSH
56798: LD_VAR 0 4
56802: PUSH
56803: LD_VAR 0 7
56807: ARRAY
56808: PPUSH
56809: CALL_OW 310
56813: NOT
56814: AND
56815: PUSH
56816: LD_VAR 0 14
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_VAR 0 14
56829: PPUSH
56830: LD_INT 21
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 58
56842: PUSH
56843: EMPTY
56844: LIST
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PPUSH
56850: CALL_OW 72
56854: IN
56855: AND
56856: IFFALSE 56892
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56858: LD_VAR 0 4
56862: PUSH
56863: LD_VAR 0 7
56867: ARRAY
56868: PPUSH
56869: LD_VAR 0 14
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: PPUSH
56878: CALL_OW 120
// attacking := true ;
56882: LD_ADDR_VAR 0 29
56886: PUSH
56887: LD_INT 1
56889: ST_TO_ADDR
// continue ;
56890: GO 55065
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56892: LD_VAR 0 26
56896: PUSH
56897: LD_VAR 0 4
56901: PUSH
56902: LD_VAR 0 7
56906: ARRAY
56907: PPUSH
56908: CALL_OW 257
56912: PUSH
56913: LD_INT 1
56915: EQUAL
56916: AND
56917: PUSH
56918: LD_VAR 0 4
56922: PUSH
56923: LD_VAR 0 7
56927: ARRAY
56928: PPUSH
56929: CALL_OW 256
56933: PUSH
56934: LD_INT 800
56936: LESS
56937: AND
56938: PUSH
56939: LD_VAR 0 4
56943: PUSH
56944: LD_VAR 0 7
56948: ARRAY
56949: PPUSH
56950: CALL_OW 318
56954: NOT
56955: AND
56956: IFFALSE 56973
// ComCrawl ( group [ i ] ) ;
56958: LD_VAR 0 4
56962: PUSH
56963: LD_VAR 0 7
56967: ARRAY
56968: PPUSH
56969: CALL_OW 137
// if f_mines then
56973: LD_VAR 0 21
56977: IFFALSE 57220
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56979: LD_VAR 0 14
56983: PUSH
56984: LD_INT 1
56986: ARRAY
56987: PPUSH
56988: CALL_OW 247
56992: PUSH
56993: LD_INT 3
56995: EQUAL
56996: PUSH
56997: LD_VAR 0 14
57001: PUSH
57002: LD_INT 1
57004: ARRAY
57005: PUSH
57006: LD_VAR 0 27
57010: IN
57011: NOT
57012: AND
57013: IFFALSE 57220
// begin x := GetX ( tmp [ 1 ] ) ;
57015: LD_ADDR_VAR 0 10
57019: PUSH
57020: LD_VAR 0 14
57024: PUSH
57025: LD_INT 1
57027: ARRAY
57028: PPUSH
57029: CALL_OW 250
57033: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57034: LD_ADDR_VAR 0 11
57038: PUSH
57039: LD_VAR 0 14
57043: PUSH
57044: LD_INT 1
57046: ARRAY
57047: PPUSH
57048: CALL_OW 251
57052: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57053: LD_ADDR_VAR 0 12
57057: PUSH
57058: LD_VAR 0 4
57062: PUSH
57063: LD_VAR 0 7
57067: ARRAY
57068: PPUSH
57069: CALL 52928 0 1
57073: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57074: LD_VAR 0 4
57078: PUSH
57079: LD_VAR 0 7
57083: ARRAY
57084: PPUSH
57085: LD_VAR 0 10
57089: PPUSH
57090: LD_VAR 0 11
57094: PPUSH
57095: LD_VAR 0 14
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PPUSH
57104: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57108: LD_VAR 0 4
57112: PUSH
57113: LD_VAR 0 7
57117: ARRAY
57118: PPUSH
57119: LD_VAR 0 10
57123: PPUSH
57124: LD_VAR 0 12
57128: PPUSH
57129: LD_INT 7
57131: PPUSH
57132: CALL_OW 272
57136: PPUSH
57137: LD_VAR 0 11
57141: PPUSH
57142: LD_VAR 0 12
57146: PPUSH
57147: LD_INT 7
57149: PPUSH
57150: CALL_OW 273
57154: PPUSH
57155: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57159: LD_VAR 0 4
57163: PUSH
57164: LD_VAR 0 7
57168: ARRAY
57169: PPUSH
57170: LD_INT 71
57172: PPUSH
57173: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57177: LD_ADDR_VAR 0 27
57181: PUSH
57182: LD_VAR 0 27
57186: PPUSH
57187: LD_VAR 0 27
57191: PUSH
57192: LD_INT 1
57194: PLUS
57195: PPUSH
57196: LD_VAR 0 14
57200: PUSH
57201: LD_INT 1
57203: ARRAY
57204: PPUSH
57205: CALL_OW 1
57209: ST_TO_ADDR
// attacking := true ;
57210: LD_ADDR_VAR 0 29
57214: PUSH
57215: LD_INT 1
57217: ST_TO_ADDR
// continue ;
57218: GO 55065
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57220: LD_VAR 0 4
57224: PUSH
57225: LD_VAR 0 7
57229: ARRAY
57230: PPUSH
57231: CALL_OW 257
57235: PUSH
57236: LD_INT 17
57238: EQUAL
57239: PUSH
57240: LD_VAR 0 4
57244: PUSH
57245: LD_VAR 0 7
57249: ARRAY
57250: PPUSH
57251: CALL_OW 110
57255: PUSH
57256: LD_INT 71
57258: EQUAL
57259: NOT
57260: AND
57261: IFFALSE 57407
// begin attacking := false ;
57263: LD_ADDR_VAR 0 29
57267: PUSH
57268: LD_INT 0
57270: ST_TO_ADDR
// k := 5 ;
57271: LD_ADDR_VAR 0 9
57275: PUSH
57276: LD_INT 5
57278: ST_TO_ADDR
// if tmp < k then
57279: LD_VAR 0 14
57283: PUSH
57284: LD_VAR 0 9
57288: LESS
57289: IFFALSE 57301
// k := tmp ;
57291: LD_ADDR_VAR 0 9
57295: PUSH
57296: LD_VAR 0 14
57300: ST_TO_ADDR
// for j = 1 to k do
57301: LD_ADDR_VAR 0 8
57305: PUSH
57306: DOUBLE
57307: LD_INT 1
57309: DEC
57310: ST_TO_ADDR
57311: LD_VAR 0 9
57315: PUSH
57316: FOR_TO
57317: IFFALSE 57405
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57319: LD_VAR 0 14
57323: PUSH
57324: LD_VAR 0 8
57328: ARRAY
57329: PUSH
57330: LD_VAR 0 14
57334: PPUSH
57335: LD_INT 58
57337: PUSH
57338: EMPTY
57339: LIST
57340: PPUSH
57341: CALL_OW 72
57345: IN
57346: NOT
57347: IFFALSE 57403
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57349: LD_VAR 0 4
57353: PUSH
57354: LD_VAR 0 7
57358: ARRAY
57359: PPUSH
57360: LD_VAR 0 14
57364: PUSH
57365: LD_VAR 0 8
57369: ARRAY
57370: PPUSH
57371: CALL_OW 115
// attacking := true ;
57375: LD_ADDR_VAR 0 29
57379: PUSH
57380: LD_INT 1
57382: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57383: LD_VAR 0 4
57387: PUSH
57388: LD_VAR 0 7
57392: ARRAY
57393: PPUSH
57394: LD_INT 71
57396: PPUSH
57397: CALL_OW 109
// continue ;
57401: GO 57316
// end ; end ;
57403: GO 57316
57405: POP
57406: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57407: LD_VAR 0 4
57411: PUSH
57412: LD_VAR 0 7
57416: ARRAY
57417: PPUSH
57418: CALL_OW 257
57422: PUSH
57423: LD_INT 8
57425: EQUAL
57426: PUSH
57427: LD_VAR 0 4
57431: PUSH
57432: LD_VAR 0 7
57436: ARRAY
57437: PPUSH
57438: CALL_OW 264
57442: PUSH
57443: LD_INT 28
57445: PUSH
57446: LD_INT 45
57448: PUSH
57449: LD_INT 7
57451: PUSH
57452: LD_INT 47
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: IN
57461: OR
57462: IFFALSE 57692
// begin attacking := false ;
57464: LD_ADDR_VAR 0 29
57468: PUSH
57469: LD_INT 0
57471: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57472: LD_VAR 0 14
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: CALL_OW 266
57485: PUSH
57486: LD_INT 32
57488: PUSH
57489: LD_INT 31
57491: PUSH
57492: LD_INT 33
57494: PUSH
57495: LD_INT 4
57497: PUSH
57498: LD_INT 5
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: IN
57508: IFFALSE 57692
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57510: LD_ADDR_VAR 0 9
57514: PUSH
57515: LD_VAR 0 14
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: PPUSH
57524: CALL_OW 266
57528: PPUSH
57529: LD_VAR 0 14
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PPUSH
57538: CALL_OW 250
57542: PPUSH
57543: LD_VAR 0 14
57547: PUSH
57548: LD_INT 1
57550: ARRAY
57551: PPUSH
57552: CALL_OW 251
57556: PPUSH
57557: LD_VAR 0 14
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PPUSH
57566: CALL_OW 254
57570: PPUSH
57571: LD_VAR 0 14
57575: PUSH
57576: LD_INT 1
57578: ARRAY
57579: PPUSH
57580: CALL_OW 248
57584: PPUSH
57585: LD_INT 0
57587: PPUSH
57588: CALL 34298 0 6
57592: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57593: LD_ADDR_VAR 0 8
57597: PUSH
57598: LD_VAR 0 4
57602: PUSH
57603: LD_VAR 0 7
57607: ARRAY
57608: PPUSH
57609: LD_VAR 0 9
57613: PPUSH
57614: CALL 52991 0 2
57618: ST_TO_ADDR
// if j then
57619: LD_VAR 0 8
57623: IFFALSE 57692
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57625: LD_VAR 0 8
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: PPUSH
57634: LD_VAR 0 8
57638: PUSH
57639: LD_INT 2
57641: ARRAY
57642: PPUSH
57643: CALL_OW 488
57647: IFFALSE 57692
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57649: LD_VAR 0 4
57653: PUSH
57654: LD_VAR 0 7
57658: ARRAY
57659: PPUSH
57660: LD_VAR 0 8
57664: PUSH
57665: LD_INT 1
57667: ARRAY
57668: PPUSH
57669: LD_VAR 0 8
57673: PUSH
57674: LD_INT 2
57676: ARRAY
57677: PPUSH
57678: CALL_OW 116
// attacking := true ;
57682: LD_ADDR_VAR 0 29
57686: PUSH
57687: LD_INT 1
57689: ST_TO_ADDR
// continue ;
57690: GO 55065
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57692: LD_VAR 0 4
57696: PUSH
57697: LD_VAR 0 7
57701: ARRAY
57702: PPUSH
57703: CALL_OW 265
57707: PUSH
57708: LD_INT 11
57710: EQUAL
57711: IFFALSE 57989
// begin k := 10 ;
57713: LD_ADDR_VAR 0 9
57717: PUSH
57718: LD_INT 10
57720: ST_TO_ADDR
// x := 0 ;
57721: LD_ADDR_VAR 0 10
57725: PUSH
57726: LD_INT 0
57728: ST_TO_ADDR
// if tmp < k then
57729: LD_VAR 0 14
57733: PUSH
57734: LD_VAR 0 9
57738: LESS
57739: IFFALSE 57751
// k := tmp ;
57741: LD_ADDR_VAR 0 9
57745: PUSH
57746: LD_VAR 0 14
57750: ST_TO_ADDR
// for j = k downto 1 do
57751: LD_ADDR_VAR 0 8
57755: PUSH
57756: DOUBLE
57757: LD_VAR 0 9
57761: INC
57762: ST_TO_ADDR
57763: LD_INT 1
57765: PUSH
57766: FOR_DOWNTO
57767: IFFALSE 57842
// begin if GetType ( tmp [ j ] ) = unit_human then
57769: LD_VAR 0 14
57773: PUSH
57774: LD_VAR 0 8
57778: ARRAY
57779: PPUSH
57780: CALL_OW 247
57784: PUSH
57785: LD_INT 1
57787: EQUAL
57788: IFFALSE 57840
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57790: LD_VAR 0 4
57794: PUSH
57795: LD_VAR 0 7
57799: ARRAY
57800: PPUSH
57801: LD_VAR 0 14
57805: PUSH
57806: LD_VAR 0 8
57810: ARRAY
57811: PPUSH
57812: CALL 53262 0 2
// x := tmp [ j ] ;
57816: LD_ADDR_VAR 0 10
57820: PUSH
57821: LD_VAR 0 14
57825: PUSH
57826: LD_VAR 0 8
57830: ARRAY
57831: ST_TO_ADDR
// attacking := true ;
57832: LD_ADDR_VAR 0 29
57836: PUSH
57837: LD_INT 1
57839: ST_TO_ADDR
// end ; end ;
57840: GO 57766
57842: POP
57843: POP
// if not x then
57844: LD_VAR 0 10
57848: NOT
57849: IFFALSE 57989
// begin attacking := true ;
57851: LD_ADDR_VAR 0 29
57855: PUSH
57856: LD_INT 1
57858: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57859: LD_VAR 0 4
57863: PUSH
57864: LD_VAR 0 7
57868: ARRAY
57869: PPUSH
57870: CALL_OW 250
57874: PPUSH
57875: LD_VAR 0 4
57879: PUSH
57880: LD_VAR 0 7
57884: ARRAY
57885: PPUSH
57886: CALL_OW 251
57890: PPUSH
57891: CALL_OW 546
57895: PUSH
57896: LD_INT 2
57898: ARRAY
57899: PUSH
57900: LD_VAR 0 14
57904: PUSH
57905: LD_INT 1
57907: ARRAY
57908: PPUSH
57909: CALL_OW 250
57913: PPUSH
57914: LD_VAR 0 14
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PPUSH
57923: CALL_OW 251
57927: PPUSH
57928: CALL_OW 546
57932: PUSH
57933: LD_INT 2
57935: ARRAY
57936: EQUAL
57937: IFFALSE 57965
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57939: LD_VAR 0 4
57943: PUSH
57944: LD_VAR 0 7
57948: ARRAY
57949: PPUSH
57950: LD_VAR 0 14
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: PPUSH
57959: CALL 53262 0 2
57963: GO 57989
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57965: LD_VAR 0 4
57969: PUSH
57970: LD_VAR 0 7
57974: ARRAY
57975: PPUSH
57976: LD_VAR 0 14
57980: PUSH
57981: LD_INT 1
57983: ARRAY
57984: PPUSH
57985: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
57989: LD_VAR 0 4
57993: PUSH
57994: LD_VAR 0 7
57998: ARRAY
57999: PPUSH
58000: CALL_OW 264
58004: PUSH
58005: LD_INT 29
58007: EQUAL
58008: IFFALSE 58374
// begin if WantsToAttack ( group [ i ] ) in bombed then
58010: LD_VAR 0 4
58014: PUSH
58015: LD_VAR 0 7
58019: ARRAY
58020: PPUSH
58021: CALL_OW 319
58025: PUSH
58026: LD_VAR 0 28
58030: IN
58031: IFFALSE 58035
// continue ;
58033: GO 55065
// k := 8 ;
58035: LD_ADDR_VAR 0 9
58039: PUSH
58040: LD_INT 8
58042: ST_TO_ADDR
// x := 0 ;
58043: LD_ADDR_VAR 0 10
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// if tmp < k then
58051: LD_VAR 0 14
58055: PUSH
58056: LD_VAR 0 9
58060: LESS
58061: IFFALSE 58073
// k := tmp ;
58063: LD_ADDR_VAR 0 9
58067: PUSH
58068: LD_VAR 0 14
58072: ST_TO_ADDR
// for j = 1 to k do
58073: LD_ADDR_VAR 0 8
58077: PUSH
58078: DOUBLE
58079: LD_INT 1
58081: DEC
58082: ST_TO_ADDR
58083: LD_VAR 0 9
58087: PUSH
58088: FOR_TO
58089: IFFALSE 58221
// begin if GetType ( tmp [ j ] ) = unit_building then
58091: LD_VAR 0 14
58095: PUSH
58096: LD_VAR 0 8
58100: ARRAY
58101: PPUSH
58102: CALL_OW 247
58106: PUSH
58107: LD_INT 3
58109: EQUAL
58110: IFFALSE 58219
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58112: LD_VAR 0 14
58116: PUSH
58117: LD_VAR 0 8
58121: ARRAY
58122: PUSH
58123: LD_VAR 0 28
58127: IN
58128: NOT
58129: PUSH
58130: LD_VAR 0 14
58134: PUSH
58135: LD_VAR 0 8
58139: ARRAY
58140: PPUSH
58141: CALL_OW 313
58145: AND
58146: IFFALSE 58219
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58148: LD_VAR 0 4
58152: PUSH
58153: LD_VAR 0 7
58157: ARRAY
58158: PPUSH
58159: LD_VAR 0 14
58163: PUSH
58164: LD_VAR 0 8
58168: ARRAY
58169: PPUSH
58170: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58174: LD_ADDR_VAR 0 28
58178: PUSH
58179: LD_VAR 0 28
58183: PPUSH
58184: LD_VAR 0 28
58188: PUSH
58189: LD_INT 1
58191: PLUS
58192: PPUSH
58193: LD_VAR 0 14
58197: PUSH
58198: LD_VAR 0 8
58202: ARRAY
58203: PPUSH
58204: CALL_OW 1
58208: ST_TO_ADDR
// attacking := true ;
58209: LD_ADDR_VAR 0 29
58213: PUSH
58214: LD_INT 1
58216: ST_TO_ADDR
// break ;
58217: GO 58221
// end ; end ;
58219: GO 58088
58221: POP
58222: POP
// if not attacking and f_attack_depot then
58223: LD_VAR 0 29
58227: NOT
58228: PUSH
58229: LD_VAR 0 25
58233: AND
58234: IFFALSE 58329
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58236: LD_ADDR_VAR 0 13
58240: PUSH
58241: LD_VAR 0 14
58245: PPUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 30
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 30
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: PPUSH
58274: CALL_OW 72
58278: ST_TO_ADDR
// if z then
58279: LD_VAR 0 13
58283: IFFALSE 58329
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58285: LD_VAR 0 4
58289: PUSH
58290: LD_VAR 0 7
58294: ARRAY
58295: PPUSH
58296: LD_VAR 0 13
58300: PPUSH
58301: LD_VAR 0 4
58305: PUSH
58306: LD_VAR 0 7
58310: ARRAY
58311: PPUSH
58312: CALL_OW 74
58316: PPUSH
58317: CALL_OW 115
// attacking := true ;
58321: LD_ADDR_VAR 0 29
58325: PUSH
58326: LD_INT 1
58328: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58329: LD_VAR 0 4
58333: PUSH
58334: LD_VAR 0 7
58338: ARRAY
58339: PPUSH
58340: CALL_OW 256
58344: PUSH
58345: LD_INT 500
58347: LESS
58348: IFFALSE 58374
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58350: LD_VAR 0 4
58354: PUSH
58355: LD_VAR 0 7
58359: ARRAY
58360: PPUSH
58361: LD_VAR 0 14
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PPUSH
58370: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58374: LD_VAR 0 4
58378: PUSH
58379: LD_VAR 0 7
58383: ARRAY
58384: PPUSH
58385: CALL_OW 264
58389: PUSH
58390: LD_INT 49
58392: EQUAL
58393: IFFALSE 58514
// begin if not HasTask ( group [ i ] ) then
58395: LD_VAR 0 4
58399: PUSH
58400: LD_VAR 0 7
58404: ARRAY
58405: PPUSH
58406: CALL_OW 314
58410: NOT
58411: IFFALSE 58514
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58413: LD_ADDR_VAR 0 9
58417: PUSH
58418: LD_INT 81
58420: PUSH
58421: LD_VAR 0 4
58425: PUSH
58426: LD_VAR 0 7
58430: ARRAY
58431: PPUSH
58432: CALL_OW 255
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PPUSH
58441: CALL_OW 69
58445: PPUSH
58446: LD_VAR 0 4
58450: PUSH
58451: LD_VAR 0 7
58455: ARRAY
58456: PPUSH
58457: CALL_OW 74
58461: ST_TO_ADDR
// if k then
58462: LD_VAR 0 9
58466: IFFALSE 58514
// if GetDistUnits ( group [ i ] , k ) > 10 then
58468: LD_VAR 0 4
58472: PUSH
58473: LD_VAR 0 7
58477: ARRAY
58478: PPUSH
58479: LD_VAR 0 9
58483: PPUSH
58484: CALL_OW 296
58488: PUSH
58489: LD_INT 10
58491: GREATER
58492: IFFALSE 58514
// ComMoveUnit ( group [ i ] , k ) ;
58494: LD_VAR 0 4
58498: PUSH
58499: LD_VAR 0 7
58503: ARRAY
58504: PPUSH
58505: LD_VAR 0 9
58509: PPUSH
58510: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58514: LD_VAR 0 4
58518: PUSH
58519: LD_VAR 0 7
58523: ARRAY
58524: PPUSH
58525: CALL_OW 256
58529: PUSH
58530: LD_INT 250
58532: LESS
58533: PUSH
58534: LD_VAR 0 4
58538: PUSH
58539: LD_VAR 0 7
58543: ARRAY
58544: PUSH
58545: LD_INT 21
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 23
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PPUSH
58569: CALL_OW 69
58573: IN
58574: AND
58575: IFFALSE 58700
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58577: LD_ADDR_VAR 0 9
58581: PUSH
58582: LD_OWVAR 3
58586: PUSH
58587: LD_VAR 0 4
58591: PUSH
58592: LD_VAR 0 7
58596: ARRAY
58597: DIFF
58598: PPUSH
58599: LD_VAR 0 4
58603: PUSH
58604: LD_VAR 0 7
58608: ARRAY
58609: PPUSH
58610: CALL_OW 74
58614: ST_TO_ADDR
// if not k then
58615: LD_VAR 0 9
58619: NOT
58620: IFFALSE 58624
// continue ;
58622: GO 55065
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58624: LD_VAR 0 9
58628: PUSH
58629: LD_INT 81
58631: PUSH
58632: LD_VAR 0 4
58636: PUSH
58637: LD_VAR 0 7
58641: ARRAY
58642: PPUSH
58643: CALL_OW 255
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PPUSH
58652: CALL_OW 69
58656: IN
58657: PUSH
58658: LD_VAR 0 9
58662: PPUSH
58663: LD_VAR 0 4
58667: PUSH
58668: LD_VAR 0 7
58672: ARRAY
58673: PPUSH
58674: CALL_OW 296
58678: PUSH
58679: LD_INT 5
58681: LESS
58682: AND
58683: IFFALSE 58700
// ComAutodestruct ( group [ i ] ) ;
58685: LD_VAR 0 4
58689: PUSH
58690: LD_VAR 0 7
58694: ARRAY
58695: PPUSH
58696: CALL 53160 0 1
// end ; if f_attack_depot then
58700: LD_VAR 0 25
58704: IFFALSE 58816
// begin k := 6 ;
58706: LD_ADDR_VAR 0 9
58710: PUSH
58711: LD_INT 6
58713: ST_TO_ADDR
// if tmp < k then
58714: LD_VAR 0 14
58718: PUSH
58719: LD_VAR 0 9
58723: LESS
58724: IFFALSE 58736
// k := tmp ;
58726: LD_ADDR_VAR 0 9
58730: PUSH
58731: LD_VAR 0 14
58735: ST_TO_ADDR
// for j = 1 to k do
58736: LD_ADDR_VAR 0 8
58740: PUSH
58741: DOUBLE
58742: LD_INT 1
58744: DEC
58745: ST_TO_ADDR
58746: LD_VAR 0 9
58750: PUSH
58751: FOR_TO
58752: IFFALSE 58814
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58754: LD_VAR 0 8
58758: PPUSH
58759: CALL_OW 266
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: IN
58774: IFFALSE 58812
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58776: LD_VAR 0 4
58780: PUSH
58781: LD_VAR 0 7
58785: ARRAY
58786: PPUSH
58787: LD_VAR 0 14
58791: PUSH
58792: LD_VAR 0 8
58796: ARRAY
58797: PPUSH
58798: CALL_OW 115
// attacking := true ;
58802: LD_ADDR_VAR 0 29
58806: PUSH
58807: LD_INT 1
58809: ST_TO_ADDR
// break ;
58810: GO 58814
// end ;
58812: GO 58751
58814: POP
58815: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58816: LD_VAR 0 4
58820: PUSH
58821: LD_VAR 0 7
58825: ARRAY
58826: PPUSH
58827: CALL_OW 302
58831: PUSH
58832: LD_VAR 0 29
58836: NOT
58837: AND
58838: IFFALSE 59160
// begin if GetTag ( group [ i ] ) = 71 then
58840: LD_VAR 0 4
58844: PUSH
58845: LD_VAR 0 7
58849: ARRAY
58850: PPUSH
58851: CALL_OW 110
58855: PUSH
58856: LD_INT 71
58858: EQUAL
58859: IFFALSE 58900
// begin if HasTask ( group [ i ] ) then
58861: LD_VAR 0 4
58865: PUSH
58866: LD_VAR 0 7
58870: ARRAY
58871: PPUSH
58872: CALL_OW 314
58876: IFFALSE 58882
// continue else
58878: GO 55065
58880: GO 58900
// SetTag ( group [ i ] , 0 ) ;
58882: LD_VAR 0 4
58886: PUSH
58887: LD_VAR 0 7
58891: ARRAY
58892: PPUSH
58893: LD_INT 0
58895: PPUSH
58896: CALL_OW 109
// end ; k := 8 ;
58900: LD_ADDR_VAR 0 9
58904: PUSH
58905: LD_INT 8
58907: ST_TO_ADDR
// x := 0 ;
58908: LD_ADDR_VAR 0 10
58912: PUSH
58913: LD_INT 0
58915: ST_TO_ADDR
// if tmp < k then
58916: LD_VAR 0 14
58920: PUSH
58921: LD_VAR 0 9
58925: LESS
58926: IFFALSE 58938
// k := tmp ;
58928: LD_ADDR_VAR 0 9
58932: PUSH
58933: LD_VAR 0 14
58937: ST_TO_ADDR
// for j = 1 to k do
58938: LD_ADDR_VAR 0 8
58942: PUSH
58943: DOUBLE
58944: LD_INT 1
58946: DEC
58947: ST_TO_ADDR
58948: LD_VAR 0 9
58952: PUSH
58953: FOR_TO
58954: IFFALSE 59052
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58956: LD_VAR 0 14
58960: PUSH
58961: LD_VAR 0 8
58965: ARRAY
58966: PPUSH
58967: CALL_OW 247
58971: PUSH
58972: LD_INT 1
58974: EQUAL
58975: PUSH
58976: LD_VAR 0 14
58980: PUSH
58981: LD_VAR 0 8
58985: ARRAY
58986: PPUSH
58987: CALL_OW 256
58991: PUSH
58992: LD_INT 250
58994: LESS
58995: PUSH
58996: LD_VAR 0 20
59000: AND
59001: PUSH
59002: LD_VAR 0 20
59006: NOT
59007: PUSH
59008: LD_VAR 0 14
59012: PUSH
59013: LD_VAR 0 8
59017: ARRAY
59018: PPUSH
59019: CALL_OW 256
59023: PUSH
59024: LD_INT 250
59026: GREATEREQUAL
59027: AND
59028: OR
59029: AND
59030: IFFALSE 59050
// begin x := tmp [ j ] ;
59032: LD_ADDR_VAR 0 10
59036: PUSH
59037: LD_VAR 0 14
59041: PUSH
59042: LD_VAR 0 8
59046: ARRAY
59047: ST_TO_ADDR
// break ;
59048: GO 59052
// end ;
59050: GO 58953
59052: POP
59053: POP
// if x then
59054: LD_VAR 0 10
59058: IFFALSE 59082
// ComAttackUnit ( group [ i ] , x ) else
59060: LD_VAR 0 4
59064: PUSH
59065: LD_VAR 0 7
59069: ARRAY
59070: PPUSH
59071: LD_VAR 0 10
59075: PPUSH
59076: CALL_OW 115
59080: GO 59106
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59082: LD_VAR 0 4
59086: PUSH
59087: LD_VAR 0 7
59091: ARRAY
59092: PPUSH
59093: LD_VAR 0 14
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PPUSH
59102: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59106: LD_VAR 0 4
59110: PUSH
59111: LD_VAR 0 7
59115: ARRAY
59116: PPUSH
59117: CALL_OW 314
59121: NOT
59122: IFFALSE 59160
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59124: LD_VAR 0 4
59128: PUSH
59129: LD_VAR 0 7
59133: ARRAY
59134: PPUSH
59135: LD_VAR 0 14
59139: PPUSH
59140: LD_VAR 0 4
59144: PUSH
59145: LD_VAR 0 7
59149: ARRAY
59150: PPUSH
59151: CALL_OW 74
59155: PPUSH
59156: CALL_OW 115
// end ; end ; end ;
59160: GO 55065
59162: POP
59163: POP
// wait ( 0 0$1 ) ;
59164: LD_INT 35
59166: PPUSH
59167: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59171: LD_VAR 0 4
59175: PUSH
59176: EMPTY
59177: EQUAL
59178: PUSH
59179: LD_INT 81
59181: PUSH
59182: LD_VAR 0 35
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PPUSH
59191: CALL_OW 69
59195: NOT
59196: OR
59197: IFFALSE 55050
// end ;
59199: LD_VAR 0 2
59203: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59204: LD_INT 0
59206: PPUSH
59207: PPUSH
59208: PPUSH
59209: PPUSH
// if not base_units then
59210: LD_VAR 0 1
59214: NOT
59215: IFFALSE 59219
// exit ;
59217: GO 59306
// result := false ;
59219: LD_ADDR_VAR 0 2
59223: PUSH
59224: LD_INT 0
59226: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59227: LD_ADDR_VAR 0 5
59231: PUSH
59232: LD_VAR 0 1
59236: PPUSH
59237: LD_INT 21
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PPUSH
59247: CALL_OW 72
59251: ST_TO_ADDR
// if not tmp then
59252: LD_VAR 0 5
59256: NOT
59257: IFFALSE 59261
// exit ;
59259: GO 59306
// for i in tmp do
59261: LD_ADDR_VAR 0 3
59265: PUSH
59266: LD_VAR 0 5
59270: PUSH
59271: FOR_IN
59272: IFFALSE 59304
// begin result := EnemyInRange ( i , 22 ) ;
59274: LD_ADDR_VAR 0 2
59278: PUSH
59279: LD_VAR 0 3
59283: PPUSH
59284: LD_INT 22
59286: PPUSH
59287: CALL 52843 0 2
59291: ST_TO_ADDR
// if result then
59292: LD_VAR 0 2
59296: IFFALSE 59302
// exit ;
59298: POP
59299: POP
59300: GO 59306
// end ;
59302: GO 59271
59304: POP
59305: POP
// end ;
59306: LD_VAR 0 2
59310: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59311: LD_INT 0
59313: PPUSH
59314: PPUSH
// if not units then
59315: LD_VAR 0 1
59319: NOT
59320: IFFALSE 59324
// exit ;
59322: GO 59394
// result := [ ] ;
59324: LD_ADDR_VAR 0 3
59328: PUSH
59329: EMPTY
59330: ST_TO_ADDR
// for i in units do
59331: LD_ADDR_VAR 0 4
59335: PUSH
59336: LD_VAR 0 1
59340: PUSH
59341: FOR_IN
59342: IFFALSE 59392
// if GetTag ( i ) = tag then
59344: LD_VAR 0 4
59348: PPUSH
59349: CALL_OW 110
59353: PUSH
59354: LD_VAR 0 2
59358: EQUAL
59359: IFFALSE 59390
// result := Insert ( result , result + 1 , i ) ;
59361: LD_ADDR_VAR 0 3
59365: PUSH
59366: LD_VAR 0 3
59370: PPUSH
59371: LD_VAR 0 3
59375: PUSH
59376: LD_INT 1
59378: PLUS
59379: PPUSH
59380: LD_VAR 0 4
59384: PPUSH
59385: CALL_OW 2
59389: ST_TO_ADDR
59390: GO 59341
59392: POP
59393: POP
// end ;
59394: LD_VAR 0 3
59398: RET
// export function IsDriver ( un ) ; begin
59399: LD_INT 0
59401: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59402: LD_ADDR_VAR 0 2
59406: PUSH
59407: LD_VAR 0 1
59411: PUSH
59412: LD_INT 55
59414: PUSH
59415: EMPTY
59416: LIST
59417: PPUSH
59418: CALL_OW 69
59422: IN
59423: ST_TO_ADDR
// end ;
59424: LD_VAR 0 2
59428: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59429: LD_INT 0
59431: PPUSH
59432: PPUSH
// list := [ ] ;
59433: LD_ADDR_VAR 0 5
59437: PUSH
59438: EMPTY
59439: ST_TO_ADDR
// case d of 0 :
59440: LD_VAR 0 3
59444: PUSH
59445: LD_INT 0
59447: DOUBLE
59448: EQUAL
59449: IFTRUE 59453
59451: GO 59586
59453: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59454: LD_ADDR_VAR 0 5
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_INT 4
59466: MINUS
59467: PUSH
59468: LD_VAR 0 2
59472: PUSH
59473: LD_INT 4
59475: MINUS
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: PUSH
59485: LD_VAR 0 1
59489: PUSH
59490: LD_INT 3
59492: MINUS
59493: PUSH
59494: LD_VAR 0 2
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: PUSH
59507: LD_VAR 0 1
59511: PUSH
59512: LD_INT 4
59514: PLUS
59515: PUSH
59516: LD_VAR 0 2
59520: PUSH
59521: LD_INT 4
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: PUSH
59529: LD_VAR 0 1
59533: PUSH
59534: LD_INT 3
59536: PLUS
59537: PUSH
59538: LD_VAR 0 2
59542: PUSH
59543: LD_INT 3
59545: PLUS
59546: PUSH
59547: LD_INT 5
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_VAR 0 2
59564: PUSH
59565: LD_INT 4
59567: PLUS
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// end ; 1 :
59584: GO 60284
59586: LD_INT 1
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59594
59592: GO 59727
59594: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59595: LD_ADDR_VAR 0 5
59599: PUSH
59600: LD_VAR 0 1
59604: PUSH
59605: LD_VAR 0 2
59609: PUSH
59610: LD_INT 4
59612: MINUS
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: PUSH
59622: LD_VAR 0 1
59626: PUSH
59627: LD_INT 3
59629: MINUS
59630: PUSH
59631: LD_VAR 0 2
59635: PUSH
59636: LD_INT 3
59638: MINUS
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: PUSH
59648: LD_VAR 0 1
59652: PUSH
59653: LD_INT 4
59655: MINUS
59656: PUSH
59657: LD_VAR 0 2
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: PUSH
59670: LD_VAR 0 1
59674: PUSH
59675: LD_VAR 0 2
59679: PUSH
59680: LD_INT 3
59682: PLUS
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_INT 4
59699: PLUS
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: PLUS
59709: PUSH
59710: LD_INT 5
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// end ; 2 :
59725: GO 60284
59727: LD_INT 2
59729: DOUBLE
59730: EQUAL
59731: IFTRUE 59735
59733: GO 59864
59735: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59736: LD_ADDR_VAR 0 5
59740: PUSH
59741: LD_VAR 0 1
59745: PUSH
59746: LD_VAR 0 2
59750: PUSH
59751: LD_INT 3
59753: MINUS
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: PUSH
59763: LD_VAR 0 1
59767: PUSH
59768: LD_INT 4
59770: PLUS
59771: PUSH
59772: LD_VAR 0 2
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: PUSH
59785: LD_VAR 0 1
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: LD_INT 4
59797: PLUS
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 3
59814: MINUS
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: PUSH
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 4
59836: MINUS
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_INT 4
59845: MINUS
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// end ; 3 :
59862: GO 60284
59864: LD_INT 3
59866: DOUBLE
59867: EQUAL
59868: IFTRUE 59872
59870: GO 60005
59872: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59873: LD_ADDR_VAR 0 5
59877: PUSH
59878: LD_VAR 0 1
59882: PUSH
59883: LD_INT 3
59885: PLUS
59886: PUSH
59887: LD_VAR 0 2
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: PUSH
59900: LD_VAR 0 1
59904: PUSH
59905: LD_INT 4
59907: PLUS
59908: PUSH
59909: LD_VAR 0 2
59913: PUSH
59914: LD_INT 4
59916: PLUS
59917: PUSH
59918: LD_INT 5
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: LD_INT 4
59933: MINUS
59934: PUSH
59935: LD_VAR 0 2
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: LD_INT 4
59960: MINUS
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 3
59977: MINUS
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 3
59986: MINUS
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
// end ; 4 :
60003: GO 60284
60005: LD_INT 4
60007: DOUBLE
60008: EQUAL
60009: IFTRUE 60013
60011: GO 60146
60013: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60014: LD_ADDR_VAR 0 5
60018: PUSH
60019: LD_VAR 0 1
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_INT 4
60031: PLUS
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: PUSH
60041: LD_VAR 0 1
60045: PUSH
60046: LD_INT 3
60048: PLUS
60049: PUSH
60050: LD_VAR 0 2
60054: PUSH
60055: LD_INT 3
60057: PLUS
60058: PUSH
60059: LD_INT 5
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: PUSH
60067: LD_VAR 0 1
60071: PUSH
60072: LD_INT 4
60074: PLUS
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: PUSH
60089: LD_VAR 0 1
60093: PUSH
60094: LD_VAR 0 2
60098: PUSH
60099: LD_INT 3
60101: MINUS
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 4
60118: MINUS
60119: PUSH
60120: LD_VAR 0 2
60124: PUSH
60125: LD_INT 4
60127: MINUS
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// end ; 5 :
60144: GO 60284
60146: LD_INT 5
60148: DOUBLE
60149: EQUAL
60150: IFTRUE 60154
60152: GO 60283
60154: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60155: LD_ADDR_VAR 0 5
60159: PUSH
60160: LD_VAR 0 1
60164: PUSH
60165: LD_INT 4
60167: MINUS
60168: PUSH
60169: LD_VAR 0 2
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: PUSH
60182: LD_VAR 0 1
60186: PUSH
60187: LD_VAR 0 2
60191: PUSH
60192: LD_INT 4
60194: MINUS
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: PUSH
60204: LD_VAR 0 1
60208: PUSH
60209: LD_INT 4
60211: PLUS
60212: PUSH
60213: LD_VAR 0 2
60217: PUSH
60218: LD_INT 4
60220: PLUS
60221: PUSH
60222: LD_INT 5
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: PUSH
60230: LD_VAR 0 1
60234: PUSH
60235: LD_INT 3
60237: PLUS
60238: PUSH
60239: LD_VAR 0 2
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: PUSH
60252: LD_VAR 0 1
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_INT 3
60264: PLUS
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// end ; end ;
60281: GO 60284
60283: POP
// result := list ;
60284: LD_ADDR_VAR 0 4
60288: PUSH
60289: LD_VAR 0 5
60293: ST_TO_ADDR
// end ;
60294: LD_VAR 0 4
60298: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60299: LD_INT 0
60301: PPUSH
60302: PPUSH
60303: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60304: LD_VAR 0 1
60308: NOT
60309: PUSH
60310: LD_VAR 0 2
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: LD_INT 4
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: IN
60333: NOT
60334: OR
60335: IFFALSE 60339
// exit ;
60337: GO 60431
// tmp := [ ] ;
60339: LD_ADDR_VAR 0 5
60343: PUSH
60344: EMPTY
60345: ST_TO_ADDR
// for i in units do
60346: LD_ADDR_VAR 0 4
60350: PUSH
60351: LD_VAR 0 1
60355: PUSH
60356: FOR_IN
60357: IFFALSE 60400
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60359: LD_ADDR_VAR 0 5
60363: PUSH
60364: LD_VAR 0 5
60368: PPUSH
60369: LD_VAR 0 5
60373: PUSH
60374: LD_INT 1
60376: PLUS
60377: PPUSH
60378: LD_VAR 0 4
60382: PPUSH
60383: LD_VAR 0 2
60387: PPUSH
60388: CALL_OW 259
60392: PPUSH
60393: CALL_OW 2
60397: ST_TO_ADDR
60398: GO 60356
60400: POP
60401: POP
// if not tmp then
60402: LD_VAR 0 5
60406: NOT
60407: IFFALSE 60411
// exit ;
60409: GO 60431
// result := SortListByListDesc ( units , tmp ) ;
60411: LD_ADDR_VAR 0 3
60415: PUSH
60416: LD_VAR 0 1
60420: PPUSH
60421: LD_VAR 0 5
60425: PPUSH
60426: CALL_OW 77
60430: ST_TO_ADDR
// end ;
60431: LD_VAR 0 3
60435: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60436: LD_INT 0
60438: PPUSH
60439: PPUSH
60440: PPUSH
// x := GetX ( building ) ;
60441: LD_ADDR_VAR 0 4
60445: PUSH
60446: LD_VAR 0 2
60450: PPUSH
60451: CALL_OW 250
60455: ST_TO_ADDR
// y := GetY ( building ) ;
60456: LD_ADDR_VAR 0 5
60460: PUSH
60461: LD_VAR 0 2
60465: PPUSH
60466: CALL_OW 251
60470: ST_TO_ADDR
// if GetTaskList ( unit ) then
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 437
60480: IFFALSE 60575
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60482: LD_STRING e
60484: PUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL_OW 437
60494: PUSH
60495: LD_INT 1
60497: ARRAY
60498: PUSH
60499: LD_INT 1
60501: ARRAY
60502: EQUAL
60503: PUSH
60504: LD_VAR 0 4
60508: PUSH
60509: LD_VAR 0 1
60513: PPUSH
60514: CALL_OW 437
60518: PUSH
60519: LD_INT 1
60521: ARRAY
60522: PUSH
60523: LD_INT 2
60525: ARRAY
60526: EQUAL
60527: AND
60528: PUSH
60529: LD_VAR 0 5
60533: PUSH
60534: LD_VAR 0 1
60538: PPUSH
60539: CALL_OW 437
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: PUSH
60548: LD_INT 3
60550: ARRAY
60551: EQUAL
60552: AND
60553: IFFALSE 60565
// result := true else
60555: LD_ADDR_VAR 0 3
60559: PUSH
60560: LD_INT 1
60562: ST_TO_ADDR
60563: GO 60573
// result := false ;
60565: LD_ADDR_VAR 0 3
60569: PUSH
60570: LD_INT 0
60572: ST_TO_ADDR
// end else
60573: GO 60583
// result := false ;
60575: LD_ADDR_VAR 0 3
60579: PUSH
60580: LD_INT 0
60582: ST_TO_ADDR
// end ;
60583: LD_VAR 0 3
60587: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60588: LD_INT 0
60590: PPUSH
60591: PPUSH
60592: PPUSH
60593: PPUSH
// if not unit or not area then
60594: LD_VAR 0 1
60598: NOT
60599: PUSH
60600: LD_VAR 0 2
60604: NOT
60605: OR
60606: IFFALSE 60610
// exit ;
60608: GO 60774
// tmp := AreaToList ( area , i ) ;
60610: LD_ADDR_VAR 0 6
60614: PUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: LD_VAR 0 5
60624: PPUSH
60625: CALL_OW 517
60629: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: DOUBLE
60636: LD_INT 1
60638: DEC
60639: ST_TO_ADDR
60640: LD_VAR 0 6
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PUSH
60649: FOR_TO
60650: IFFALSE 60772
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60652: LD_ADDR_VAR 0 7
60656: PUSH
60657: LD_VAR 0 6
60661: PUSH
60662: LD_INT 1
60664: ARRAY
60665: PUSH
60666: LD_VAR 0 5
60670: ARRAY
60671: PUSH
60672: LD_VAR 0 6
60676: PUSH
60677: LD_INT 2
60679: ARRAY
60680: PUSH
60681: LD_VAR 0 5
60685: ARRAY
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60691: LD_VAR 0 7
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PPUSH
60700: LD_VAR 0 7
60704: PUSH
60705: LD_INT 2
60707: ARRAY
60708: PPUSH
60709: CALL_OW 428
60713: PUSH
60714: LD_INT 0
60716: EQUAL
60717: IFFALSE 60770
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60719: LD_VAR 0 1
60723: PPUSH
60724: LD_VAR 0 7
60728: PUSH
60729: LD_INT 1
60731: ARRAY
60732: PPUSH
60733: LD_VAR 0 7
60737: PUSH
60738: LD_INT 2
60740: ARRAY
60741: PPUSH
60742: LD_VAR 0 3
60746: PPUSH
60747: CALL_OW 48
// result := IsPlaced ( unit ) ;
60751: LD_ADDR_VAR 0 4
60755: PUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: CALL_OW 305
60765: ST_TO_ADDR
// exit ;
60766: POP
60767: POP
60768: GO 60774
// end ; end ;
60770: GO 60649
60772: POP
60773: POP
// end ;
60774: LD_VAR 0 4
60778: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60779: LD_INT 0
60781: PPUSH
60782: PPUSH
60783: PPUSH
// if not side or side > 8 then
60784: LD_VAR 0 1
60788: NOT
60789: PUSH
60790: LD_VAR 0 1
60794: PUSH
60795: LD_INT 8
60797: GREATER
60798: OR
60799: IFFALSE 60803
// exit ;
60801: GO 60990
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60803: LD_ADDR_VAR 0 4
60807: PUSH
60808: LD_INT 22
60810: PUSH
60811: LD_VAR 0 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 21
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PPUSH
60834: CALL_OW 69
60838: ST_TO_ADDR
// if not tmp then
60839: LD_VAR 0 4
60843: NOT
60844: IFFALSE 60848
// exit ;
60846: GO 60990
// enable_addtolog := true ;
60848: LD_ADDR_OWVAR 81
60852: PUSH
60853: LD_INT 1
60855: ST_TO_ADDR
// AddToLog ( [ ) ;
60856: LD_STRING [
60858: PPUSH
60859: CALL_OW 561
// for i in tmp do
60863: LD_ADDR_VAR 0 3
60867: PUSH
60868: LD_VAR 0 4
60872: PUSH
60873: FOR_IN
60874: IFFALSE 60981
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60876: LD_STRING [
60878: PUSH
60879: LD_VAR 0 3
60883: PPUSH
60884: CALL_OW 266
60888: STR
60889: PUSH
60890: LD_STRING , 
60892: STR
60893: PUSH
60894: LD_VAR 0 3
60898: PPUSH
60899: CALL_OW 250
60903: STR
60904: PUSH
60905: LD_STRING , 
60907: STR
60908: PUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 251
60918: STR
60919: PUSH
60920: LD_STRING , 
60922: STR
60923: PUSH
60924: LD_VAR 0 3
60928: PPUSH
60929: CALL_OW 254
60933: STR
60934: PUSH
60935: LD_STRING , 
60937: STR
60938: PUSH
60939: LD_VAR 0 3
60943: PPUSH
60944: LD_INT 1
60946: PPUSH
60947: CALL_OW 268
60951: STR
60952: PUSH
60953: LD_STRING , 
60955: STR
60956: PUSH
60957: LD_VAR 0 3
60961: PPUSH
60962: LD_INT 2
60964: PPUSH
60965: CALL_OW 268
60969: STR
60970: PUSH
60971: LD_STRING ],
60973: STR
60974: PPUSH
60975: CALL_OW 561
// end ;
60979: GO 60873
60981: POP
60982: POP
// AddToLog ( ]; ) ;
60983: LD_STRING ];
60985: PPUSH
60986: CALL_OW 561
// end ;
60990: LD_VAR 0 2
60994: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60995: LD_INT 0
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
// if not area or not rate or not max then
61002: LD_VAR 0 1
61006: NOT
61007: PUSH
61008: LD_VAR 0 2
61012: NOT
61013: OR
61014: PUSH
61015: LD_VAR 0 4
61019: NOT
61020: OR
61021: IFFALSE 61025
// exit ;
61023: GO 61217
// while 1 do
61025: LD_INT 1
61027: IFFALSE 61217
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61029: LD_ADDR_VAR 0 9
61033: PUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: LD_INT 1
61041: PPUSH
61042: CALL_OW 287
61046: PUSH
61047: LD_INT 10
61049: MUL
61050: ST_TO_ADDR
// r := rate / 10 ;
61051: LD_ADDR_VAR 0 7
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_INT 10
61063: DIVREAL
61064: ST_TO_ADDR
// time := 1 1$00 ;
61065: LD_ADDR_VAR 0 8
61069: PUSH
61070: LD_INT 2100
61072: ST_TO_ADDR
// if amount < min then
61073: LD_VAR 0 9
61077: PUSH
61078: LD_VAR 0 3
61082: LESS
61083: IFFALSE 61101
// r := r * 2 else
61085: LD_ADDR_VAR 0 7
61089: PUSH
61090: LD_VAR 0 7
61094: PUSH
61095: LD_INT 2
61097: MUL
61098: ST_TO_ADDR
61099: GO 61127
// if amount > max then
61101: LD_VAR 0 9
61105: PUSH
61106: LD_VAR 0 4
61110: GREATER
61111: IFFALSE 61127
// r := r / 2 ;
61113: LD_ADDR_VAR 0 7
61117: PUSH
61118: LD_VAR 0 7
61122: PUSH
61123: LD_INT 2
61125: DIVREAL
61126: ST_TO_ADDR
// time := time / r ;
61127: LD_ADDR_VAR 0 8
61131: PUSH
61132: LD_VAR 0 8
61136: PUSH
61137: LD_VAR 0 7
61141: DIVREAL
61142: ST_TO_ADDR
// if time < 0 then
61143: LD_VAR 0 8
61147: PUSH
61148: LD_INT 0
61150: LESS
61151: IFFALSE 61168
// time := time * - 1 ;
61153: LD_ADDR_VAR 0 8
61157: PUSH
61158: LD_VAR 0 8
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: MUL
61167: ST_TO_ADDR
// wait ( time ) ;
61168: LD_VAR 0 8
61172: PPUSH
61173: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61177: LD_INT 35
61179: PPUSH
61180: LD_INT 875
61182: PPUSH
61183: CALL_OW 12
61187: PPUSH
61188: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61192: LD_INT 1
61194: PPUSH
61195: LD_INT 5
61197: PPUSH
61198: CALL_OW 12
61202: PPUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: LD_INT 1
61210: PPUSH
61211: CALL_OW 55
// end ;
61215: GO 61025
// end ;
61217: LD_VAR 0 5
61221: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61222: LD_INT 0
61224: PPUSH
61225: PPUSH
61226: PPUSH
61227: PPUSH
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
// if not turrets or not factories then
61232: LD_VAR 0 1
61236: NOT
61237: PUSH
61238: LD_VAR 0 2
61242: NOT
61243: OR
61244: IFFALSE 61248
// exit ;
61246: GO 61555
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61248: LD_ADDR_VAR 0 10
61252: PUSH
61253: LD_INT 5
61255: PUSH
61256: LD_INT 6
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 4
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: LD_INT 5
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 24
61290: PUSH
61291: LD_INT 25
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 23
61300: PUSH
61301: LD_INT 27
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 42
61314: PUSH
61315: LD_INT 43
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 44
61324: PUSH
61325: LD_INT 46
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 45
61334: PUSH
61335: LD_INT 47
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: ST_TO_ADDR
// result := [ ] ;
61352: LD_ADDR_VAR 0 3
61356: PUSH
61357: EMPTY
61358: ST_TO_ADDR
// for i in turrets do
61359: LD_ADDR_VAR 0 4
61363: PUSH
61364: LD_VAR 0 1
61368: PUSH
61369: FOR_IN
61370: IFFALSE 61553
// begin nat := GetNation ( i ) ;
61372: LD_ADDR_VAR 0 7
61376: PUSH
61377: LD_VAR 0 4
61381: PPUSH
61382: CALL_OW 248
61386: ST_TO_ADDR
// weapon := 0 ;
61387: LD_ADDR_VAR 0 8
61391: PUSH
61392: LD_INT 0
61394: ST_TO_ADDR
// if not nat then
61395: LD_VAR 0 7
61399: NOT
61400: IFFALSE 61404
// continue ;
61402: GO 61369
// for j in list [ nat ] do
61404: LD_ADDR_VAR 0 5
61408: PUSH
61409: LD_VAR 0 10
61413: PUSH
61414: LD_VAR 0 7
61418: ARRAY
61419: PUSH
61420: FOR_IN
61421: IFFALSE 61462
// if GetBWeapon ( i ) = j [ 1 ] then
61423: LD_VAR 0 4
61427: PPUSH
61428: CALL_OW 269
61432: PUSH
61433: LD_VAR 0 5
61437: PUSH
61438: LD_INT 1
61440: ARRAY
61441: EQUAL
61442: IFFALSE 61460
// begin weapon := j [ 2 ] ;
61444: LD_ADDR_VAR 0 8
61448: PUSH
61449: LD_VAR 0 5
61453: PUSH
61454: LD_INT 2
61456: ARRAY
61457: ST_TO_ADDR
// break ;
61458: GO 61462
// end ;
61460: GO 61420
61462: POP
61463: POP
// if not weapon then
61464: LD_VAR 0 8
61468: NOT
61469: IFFALSE 61473
// continue ;
61471: GO 61369
// for k in factories do
61473: LD_ADDR_VAR 0 6
61477: PUSH
61478: LD_VAR 0 2
61482: PUSH
61483: FOR_IN
61484: IFFALSE 61549
// begin weapons := AvailableWeaponList ( k ) ;
61486: LD_ADDR_VAR 0 9
61490: PUSH
61491: LD_VAR 0 6
61495: PPUSH
61496: CALL_OW 478
61500: ST_TO_ADDR
// if not weapons then
61501: LD_VAR 0 9
61505: NOT
61506: IFFALSE 61510
// continue ;
61508: GO 61483
// if weapon in weapons then
61510: LD_VAR 0 8
61514: PUSH
61515: LD_VAR 0 9
61519: IN
61520: IFFALSE 61547
// begin result := [ i , weapon ] ;
61522: LD_ADDR_VAR 0 3
61526: PUSH
61527: LD_VAR 0 4
61531: PUSH
61532: LD_VAR 0 8
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: ST_TO_ADDR
// exit ;
61541: POP
61542: POP
61543: POP
61544: POP
61545: GO 61555
// end ; end ;
61547: GO 61483
61549: POP
61550: POP
// end ;
61551: GO 61369
61553: POP
61554: POP
// end ;
61555: LD_VAR 0 3
61559: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61560: LD_INT 0
61562: PPUSH
// if not side or side > 8 then
61563: LD_VAR 0 3
61567: NOT
61568: PUSH
61569: LD_VAR 0 3
61573: PUSH
61574: LD_INT 8
61576: GREATER
61577: OR
61578: IFFALSE 61582
// exit ;
61580: GO 61641
// if not range then
61582: LD_VAR 0 4
61586: NOT
61587: IFFALSE 61598
// range := - 12 ;
61589: LD_ADDR_VAR 0 4
61593: PUSH
61594: LD_INT 12
61596: NEG
61597: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61598: LD_VAR 0 1
61602: PPUSH
61603: LD_VAR 0 2
61607: PPUSH
61608: LD_VAR 0 3
61612: PPUSH
61613: LD_VAR 0 4
61617: PPUSH
61618: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61622: LD_VAR 0 1
61626: PPUSH
61627: LD_VAR 0 2
61631: PPUSH
61632: LD_VAR 0 3
61636: PPUSH
61637: CALL_OW 331
// end ;
61641: LD_VAR 0 5
61645: RET
// export function Video ( mode ) ; begin
61646: LD_INT 0
61648: PPUSH
// ingame_video = mode ;
61649: LD_ADDR_OWVAR 52
61653: PUSH
61654: LD_VAR 0 1
61658: ST_TO_ADDR
// interface_hidden = mode ;
61659: LD_ADDR_OWVAR 54
61663: PUSH
61664: LD_VAR 0 1
61668: ST_TO_ADDR
// end ;
61669: LD_VAR 0 2
61673: RET
// export function Join ( array , element ) ; begin
61674: LD_INT 0
61676: PPUSH
// result := array ^ element ;
61677: LD_ADDR_VAR 0 3
61681: PUSH
61682: LD_VAR 0 1
61686: PUSH
61687: LD_VAR 0 2
61691: ADD
61692: ST_TO_ADDR
// end ;
61693: LD_VAR 0 3
61697: RET
// export function JoinUnion ( array , element ) ; begin
61698: LD_INT 0
61700: PPUSH
// result := array union element ;
61701: LD_ADDR_VAR 0 3
61705: PUSH
61706: LD_VAR 0 1
61710: PUSH
61711: LD_VAR 0 2
61715: UNION
61716: ST_TO_ADDR
// end ;
61717: LD_VAR 0 3
61721: RET
// export function GetBehemoths ( side ) ; begin
61722: LD_INT 0
61724: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61725: LD_ADDR_VAR 0 2
61729: PUSH
61730: LD_INT 22
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 31
61744: PUSH
61745: LD_INT 25
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PPUSH
61756: CALL_OW 69
61760: ST_TO_ADDR
// end ;
61761: LD_VAR 0 2
61765: RET
// export function Shuffle ( array ) ; var i , index ; begin
61766: LD_INT 0
61768: PPUSH
61769: PPUSH
61770: PPUSH
// result := [ ] ;
61771: LD_ADDR_VAR 0 2
61775: PUSH
61776: EMPTY
61777: ST_TO_ADDR
// if not array then
61778: LD_VAR 0 1
61782: NOT
61783: IFFALSE 61787
// exit ;
61785: GO 61886
// Randomize ;
61787: CALL_OW 10
// for i = array downto 1 do
61791: LD_ADDR_VAR 0 3
61795: PUSH
61796: DOUBLE
61797: LD_VAR 0 1
61801: INC
61802: ST_TO_ADDR
61803: LD_INT 1
61805: PUSH
61806: FOR_DOWNTO
61807: IFFALSE 61884
// begin index := rand ( 1 , array ) ;
61809: LD_ADDR_VAR 0 4
61813: PUSH
61814: LD_INT 1
61816: PPUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 12
61826: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61827: LD_ADDR_VAR 0 2
61831: PUSH
61832: LD_VAR 0 2
61836: PPUSH
61837: LD_VAR 0 2
61841: PUSH
61842: LD_INT 1
61844: PLUS
61845: PPUSH
61846: LD_VAR 0 1
61850: PUSH
61851: LD_VAR 0 4
61855: ARRAY
61856: PPUSH
61857: CALL_OW 2
61861: ST_TO_ADDR
// array := Delete ( array , index ) ;
61862: LD_ADDR_VAR 0 1
61866: PUSH
61867: LD_VAR 0 1
61871: PPUSH
61872: LD_VAR 0 4
61876: PPUSH
61877: CALL_OW 3
61881: ST_TO_ADDR
// end ;
61882: GO 61806
61884: POP
61885: POP
// end ; end_of_file
61886: LD_VAR 0 2
61890: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61891: GO 61893
61893: DISABLE
// begin ru_radar := 98 ;
61894: LD_ADDR_EXP 29
61898: PUSH
61899: LD_INT 98
61901: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61902: LD_ADDR_EXP 30
61906: PUSH
61907: LD_INT 89
61909: ST_TO_ADDR
// us_hack := 99 ;
61910: LD_ADDR_EXP 31
61914: PUSH
61915: LD_INT 99
61917: ST_TO_ADDR
// us_artillery := 97 ;
61918: LD_ADDR_EXP 32
61922: PUSH
61923: LD_INT 97
61925: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61926: LD_ADDR_EXP 33
61930: PUSH
61931: LD_INT 91
61933: ST_TO_ADDR
// end ; end_of_file
61934: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61935: LD_INT 0
61937: PPUSH
61938: PPUSH
// skirmish := false ;
61939: LD_ADDR_EXP 34
61943: PUSH
61944: LD_INT 0
61946: ST_TO_ADDR
// debug_mc := false ;
61947: LD_ADDR_EXP 35
61951: PUSH
61952: LD_INT 0
61954: ST_TO_ADDR
// mc_bases := [ ] ;
61955: LD_ADDR_EXP 36
61959: PUSH
61960: EMPTY
61961: ST_TO_ADDR
// mc_sides := [ ] ;
61962: LD_ADDR_EXP 62
61966: PUSH
61967: EMPTY
61968: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61969: LD_ADDR_EXP 37
61973: PUSH
61974: EMPTY
61975: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61976: LD_ADDR_EXP 38
61980: PUSH
61981: EMPTY
61982: ST_TO_ADDR
// mc_need_heal := [ ] ;
61983: LD_ADDR_EXP 39
61987: PUSH
61988: EMPTY
61989: ST_TO_ADDR
// mc_healers := [ ] ;
61990: LD_ADDR_EXP 40
61994: PUSH
61995: EMPTY
61996: ST_TO_ADDR
// mc_build_list := [ ] ;
61997: LD_ADDR_EXP 41
62001: PUSH
62002: EMPTY
62003: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62004: LD_ADDR_EXP 68
62008: PUSH
62009: EMPTY
62010: ST_TO_ADDR
// mc_builders := [ ] ;
62011: LD_ADDR_EXP 42
62015: PUSH
62016: EMPTY
62017: ST_TO_ADDR
// mc_construct_list := [ ] ;
62018: LD_ADDR_EXP 43
62022: PUSH
62023: EMPTY
62024: ST_TO_ADDR
// mc_turret_list := [ ] ;
62025: LD_ADDR_EXP 44
62029: PUSH
62030: EMPTY
62031: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62032: LD_ADDR_EXP 45
62036: PUSH
62037: EMPTY
62038: ST_TO_ADDR
// mc_miners := [ ] ;
62039: LD_ADDR_EXP 50
62043: PUSH
62044: EMPTY
62045: ST_TO_ADDR
// mc_mines := [ ] ;
62046: LD_ADDR_EXP 49
62050: PUSH
62051: EMPTY
62052: ST_TO_ADDR
// mc_minefields := [ ] ;
62053: LD_ADDR_EXP 51
62057: PUSH
62058: EMPTY
62059: ST_TO_ADDR
// mc_crates := [ ] ;
62060: LD_ADDR_EXP 52
62064: PUSH
62065: EMPTY
62066: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62067: LD_ADDR_EXP 53
62071: PUSH
62072: EMPTY
62073: ST_TO_ADDR
// mc_crates_area := [ ] ;
62074: LD_ADDR_EXP 54
62078: PUSH
62079: EMPTY
62080: ST_TO_ADDR
// mc_vehicles := [ ] ;
62081: LD_ADDR_EXP 55
62085: PUSH
62086: EMPTY
62087: ST_TO_ADDR
// mc_attack := [ ] ;
62088: LD_ADDR_EXP 56
62092: PUSH
62093: EMPTY
62094: ST_TO_ADDR
// mc_produce := [ ] ;
62095: LD_ADDR_EXP 57
62099: PUSH
62100: EMPTY
62101: ST_TO_ADDR
// mc_defender := [ ] ;
62102: LD_ADDR_EXP 58
62106: PUSH
62107: EMPTY
62108: ST_TO_ADDR
// mc_parking := [ ] ;
62109: LD_ADDR_EXP 60
62113: PUSH
62114: EMPTY
62115: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62116: LD_ADDR_EXP 46
62120: PUSH
62121: EMPTY
62122: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62123: LD_ADDR_EXP 48
62127: PUSH
62128: EMPTY
62129: ST_TO_ADDR
// mc_scan := [ ] ;
62130: LD_ADDR_EXP 59
62134: PUSH
62135: EMPTY
62136: ST_TO_ADDR
// mc_scan_area := [ ] ;
62137: LD_ADDR_EXP 61
62141: PUSH
62142: EMPTY
62143: ST_TO_ADDR
// mc_tech := [ ] ;
62144: LD_ADDR_EXP 63
62148: PUSH
62149: EMPTY
62150: ST_TO_ADDR
// mc_class := [ ] ;
62151: LD_ADDR_EXP 77
62155: PUSH
62156: EMPTY
62157: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62158: LD_ADDR_EXP 78
62162: PUSH
62163: EMPTY
62164: ST_TO_ADDR
// end ;
62165: LD_VAR 0 1
62169: RET
// export function MC_Kill ( base ) ; begin
62170: LD_INT 0
62172: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62173: LD_ADDR_EXP 36
62177: PUSH
62178: LD_EXP 36
62182: PPUSH
62183: LD_VAR 0 1
62187: PPUSH
62188: EMPTY
62189: PPUSH
62190: CALL_OW 1
62194: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62195: LD_ADDR_EXP 37
62199: PUSH
62200: LD_EXP 37
62204: PPUSH
62205: LD_VAR 0 1
62209: PPUSH
62210: EMPTY
62211: PPUSH
62212: CALL_OW 1
62216: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62217: LD_ADDR_EXP 38
62221: PUSH
62222: LD_EXP 38
62226: PPUSH
62227: LD_VAR 0 1
62231: PPUSH
62232: EMPTY
62233: PPUSH
62234: CALL_OW 1
62238: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62239: LD_ADDR_EXP 39
62243: PUSH
62244: LD_EXP 39
62248: PPUSH
62249: LD_VAR 0 1
62253: PPUSH
62254: EMPTY
62255: PPUSH
62256: CALL_OW 1
62260: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62261: LD_ADDR_EXP 40
62265: PUSH
62266: LD_EXP 40
62270: PPUSH
62271: LD_VAR 0 1
62275: PPUSH
62276: EMPTY
62277: PPUSH
62278: CALL_OW 1
62282: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62283: LD_ADDR_EXP 41
62287: PUSH
62288: LD_EXP 41
62292: PPUSH
62293: LD_VAR 0 1
62297: PPUSH
62298: EMPTY
62299: PPUSH
62300: CALL_OW 1
62304: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62305: LD_ADDR_EXP 42
62309: PUSH
62310: LD_EXP 42
62314: PPUSH
62315: LD_VAR 0 1
62319: PPUSH
62320: EMPTY
62321: PPUSH
62322: CALL_OW 1
62326: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62327: LD_ADDR_EXP 43
62331: PUSH
62332: LD_EXP 43
62336: PPUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: EMPTY
62343: PPUSH
62344: CALL_OW 1
62348: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62349: LD_ADDR_EXP 44
62353: PUSH
62354: LD_EXP 44
62358: PPUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: EMPTY
62365: PPUSH
62366: CALL_OW 1
62370: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62371: LD_ADDR_EXP 45
62375: PUSH
62376: LD_EXP 45
62380: PPUSH
62381: LD_VAR 0 1
62385: PPUSH
62386: EMPTY
62387: PPUSH
62388: CALL_OW 1
62392: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62393: LD_ADDR_EXP 46
62397: PUSH
62398: LD_EXP 46
62402: PPUSH
62403: LD_VAR 0 1
62407: PPUSH
62408: EMPTY
62409: PPUSH
62410: CALL_OW 1
62414: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62415: LD_ADDR_EXP 47
62419: PUSH
62420: LD_EXP 47
62424: PPUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_INT 0
62432: PPUSH
62433: CALL_OW 1
62437: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62438: LD_ADDR_EXP 48
62442: PUSH
62443: LD_EXP 48
62447: PPUSH
62448: LD_VAR 0 1
62452: PPUSH
62453: EMPTY
62454: PPUSH
62455: CALL_OW 1
62459: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62460: LD_ADDR_EXP 49
62464: PUSH
62465: LD_EXP 49
62469: PPUSH
62470: LD_VAR 0 1
62474: PPUSH
62475: EMPTY
62476: PPUSH
62477: CALL_OW 1
62481: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62482: LD_ADDR_EXP 50
62486: PUSH
62487: LD_EXP 50
62491: PPUSH
62492: LD_VAR 0 1
62496: PPUSH
62497: EMPTY
62498: PPUSH
62499: CALL_OW 1
62503: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62504: LD_ADDR_EXP 51
62508: PUSH
62509: LD_EXP 51
62513: PPUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: EMPTY
62520: PPUSH
62521: CALL_OW 1
62525: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62526: LD_ADDR_EXP 52
62530: PUSH
62531: LD_EXP 52
62535: PPUSH
62536: LD_VAR 0 1
62540: PPUSH
62541: EMPTY
62542: PPUSH
62543: CALL_OW 1
62547: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62548: LD_ADDR_EXP 53
62552: PUSH
62553: LD_EXP 53
62557: PPUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: EMPTY
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62570: LD_ADDR_EXP 54
62574: PUSH
62575: LD_EXP 54
62579: PPUSH
62580: LD_VAR 0 1
62584: PPUSH
62585: EMPTY
62586: PPUSH
62587: CALL_OW 1
62591: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62592: LD_ADDR_EXP 55
62596: PUSH
62597: LD_EXP 55
62601: PPUSH
62602: LD_VAR 0 1
62606: PPUSH
62607: EMPTY
62608: PPUSH
62609: CALL_OW 1
62613: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62614: LD_ADDR_EXP 56
62618: PUSH
62619: LD_EXP 56
62623: PPUSH
62624: LD_VAR 0 1
62628: PPUSH
62629: EMPTY
62630: PPUSH
62631: CALL_OW 1
62635: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62636: LD_ADDR_EXP 57
62640: PUSH
62641: LD_EXP 57
62645: PPUSH
62646: LD_VAR 0 1
62650: PPUSH
62651: EMPTY
62652: PPUSH
62653: CALL_OW 1
62657: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62658: LD_ADDR_EXP 58
62662: PUSH
62663: LD_EXP 58
62667: PPUSH
62668: LD_VAR 0 1
62672: PPUSH
62673: EMPTY
62674: PPUSH
62675: CALL_OW 1
62679: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62680: LD_ADDR_EXP 59
62684: PUSH
62685: LD_EXP 59
62689: PPUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: EMPTY
62696: PPUSH
62697: CALL_OW 1
62701: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62702: LD_ADDR_EXP 60
62706: PUSH
62707: LD_EXP 60
62711: PPUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: EMPTY
62718: PPUSH
62719: CALL_OW 1
62723: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62724: LD_ADDR_EXP 61
62728: PUSH
62729: LD_EXP 61
62733: PPUSH
62734: LD_VAR 0 1
62738: PPUSH
62739: EMPTY
62740: PPUSH
62741: CALL_OW 1
62745: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62746: LD_ADDR_EXP 63
62750: PUSH
62751: LD_EXP 63
62755: PPUSH
62756: LD_VAR 0 1
62760: PPUSH
62761: EMPTY
62762: PPUSH
62763: CALL_OW 1
62767: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62768: LD_ADDR_EXP 65
62772: PUSH
62773: LD_EXP 65
62777: PPUSH
62778: LD_VAR 0 1
62782: PPUSH
62783: EMPTY
62784: PPUSH
62785: CALL_OW 1
62789: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62790: LD_ADDR_EXP 66
62794: PUSH
62795: LD_EXP 66
62799: PPUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: EMPTY
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62812: LD_ADDR_EXP 67
62816: PUSH
62817: LD_EXP 67
62821: PPUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: EMPTY
62828: PPUSH
62829: CALL_OW 1
62833: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62834: LD_ADDR_EXP 68
62838: PUSH
62839: LD_EXP 68
62843: PPUSH
62844: LD_VAR 0 1
62848: PPUSH
62849: EMPTY
62850: PPUSH
62851: CALL_OW 1
62855: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62856: LD_ADDR_EXP 69
62860: PUSH
62861: LD_EXP 69
62865: PPUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: EMPTY
62872: PPUSH
62873: CALL_OW 1
62877: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62878: LD_ADDR_EXP 70
62882: PUSH
62883: LD_EXP 70
62887: PPUSH
62888: LD_VAR 0 1
62892: PPUSH
62893: EMPTY
62894: PPUSH
62895: CALL_OW 1
62899: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62900: LD_ADDR_EXP 71
62904: PUSH
62905: LD_EXP 71
62909: PPUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: EMPTY
62916: PPUSH
62917: CALL_OW 1
62921: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62922: LD_ADDR_EXP 72
62926: PUSH
62927: LD_EXP 72
62931: PPUSH
62932: LD_VAR 0 1
62936: PPUSH
62937: EMPTY
62938: PPUSH
62939: CALL_OW 1
62943: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62944: LD_ADDR_EXP 73
62948: PUSH
62949: LD_EXP 73
62953: PPUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: EMPTY
62960: PPUSH
62961: CALL_OW 1
62965: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62966: LD_ADDR_EXP 74
62970: PUSH
62971: LD_EXP 74
62975: PPUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: EMPTY
62982: PPUSH
62983: CALL_OW 1
62987: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62988: LD_ADDR_EXP 75
62992: PUSH
62993: LD_EXP 75
62997: PPUSH
62998: LD_VAR 0 1
63002: PPUSH
63003: EMPTY
63004: PPUSH
63005: CALL_OW 1
63009: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63010: LD_ADDR_EXP 76
63014: PUSH
63015: LD_EXP 76
63019: PPUSH
63020: LD_VAR 0 1
63024: PPUSH
63025: EMPTY
63026: PPUSH
63027: CALL_OW 1
63031: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63032: LD_ADDR_EXP 77
63036: PUSH
63037: LD_EXP 77
63041: PPUSH
63042: LD_VAR 0 1
63046: PPUSH
63047: EMPTY
63048: PPUSH
63049: CALL_OW 1
63053: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63054: LD_ADDR_EXP 78
63058: PUSH
63059: LD_EXP 78
63063: PPUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: LD_INT 0
63071: PPUSH
63072: CALL_OW 1
63076: ST_TO_ADDR
// end ;
63077: LD_VAR 0 2
63081: RET
// export function MC_Add ( side , units ) ; var base ; begin
63082: LD_INT 0
63084: PPUSH
63085: PPUSH
// base := mc_bases + 1 ;
63086: LD_ADDR_VAR 0 4
63090: PUSH
63091: LD_EXP 36
63095: PUSH
63096: LD_INT 1
63098: PLUS
63099: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63100: LD_ADDR_EXP 62
63104: PUSH
63105: LD_EXP 62
63109: PPUSH
63110: LD_VAR 0 4
63114: PPUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 1
63124: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63125: LD_ADDR_EXP 36
63129: PUSH
63130: LD_EXP 36
63134: PPUSH
63135: LD_VAR 0 4
63139: PPUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: CALL_OW 1
63149: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63150: LD_ADDR_EXP 37
63154: PUSH
63155: LD_EXP 37
63159: PPUSH
63160: LD_VAR 0 4
63164: PPUSH
63165: EMPTY
63166: PPUSH
63167: CALL_OW 1
63171: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63172: LD_ADDR_EXP 38
63176: PUSH
63177: LD_EXP 38
63181: PPUSH
63182: LD_VAR 0 4
63186: PPUSH
63187: EMPTY
63188: PPUSH
63189: CALL_OW 1
63193: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63194: LD_ADDR_EXP 39
63198: PUSH
63199: LD_EXP 39
63203: PPUSH
63204: LD_VAR 0 4
63208: PPUSH
63209: EMPTY
63210: PPUSH
63211: CALL_OW 1
63215: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63216: LD_ADDR_EXP 40
63220: PUSH
63221: LD_EXP 40
63225: PPUSH
63226: LD_VAR 0 4
63230: PPUSH
63231: EMPTY
63232: PPUSH
63233: CALL_OW 1
63237: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63238: LD_ADDR_EXP 41
63242: PUSH
63243: LD_EXP 41
63247: PPUSH
63248: LD_VAR 0 4
63252: PPUSH
63253: EMPTY
63254: PPUSH
63255: CALL_OW 1
63259: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63260: LD_ADDR_EXP 42
63264: PUSH
63265: LD_EXP 42
63269: PPUSH
63270: LD_VAR 0 4
63274: PPUSH
63275: EMPTY
63276: PPUSH
63277: CALL_OW 1
63281: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63282: LD_ADDR_EXP 43
63286: PUSH
63287: LD_EXP 43
63291: PPUSH
63292: LD_VAR 0 4
63296: PPUSH
63297: EMPTY
63298: PPUSH
63299: CALL_OW 1
63303: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63304: LD_ADDR_EXP 44
63308: PUSH
63309: LD_EXP 44
63313: PPUSH
63314: LD_VAR 0 4
63318: PPUSH
63319: EMPTY
63320: PPUSH
63321: CALL_OW 1
63325: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63326: LD_ADDR_EXP 45
63330: PUSH
63331: LD_EXP 45
63335: PPUSH
63336: LD_VAR 0 4
63340: PPUSH
63341: EMPTY
63342: PPUSH
63343: CALL_OW 1
63347: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63348: LD_ADDR_EXP 46
63352: PUSH
63353: LD_EXP 46
63357: PPUSH
63358: LD_VAR 0 4
63362: PPUSH
63363: EMPTY
63364: PPUSH
63365: CALL_OW 1
63369: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63370: LD_ADDR_EXP 47
63374: PUSH
63375: LD_EXP 47
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: LD_INT 0
63387: PPUSH
63388: CALL_OW 1
63392: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63393: LD_ADDR_EXP 48
63397: PUSH
63398: LD_EXP 48
63402: PPUSH
63403: LD_VAR 0 4
63407: PPUSH
63408: EMPTY
63409: PPUSH
63410: CALL_OW 1
63414: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63415: LD_ADDR_EXP 49
63419: PUSH
63420: LD_EXP 49
63424: PPUSH
63425: LD_VAR 0 4
63429: PPUSH
63430: EMPTY
63431: PPUSH
63432: CALL_OW 1
63436: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63437: LD_ADDR_EXP 50
63441: PUSH
63442: LD_EXP 50
63446: PPUSH
63447: LD_VAR 0 4
63451: PPUSH
63452: EMPTY
63453: PPUSH
63454: CALL_OW 1
63458: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63459: LD_ADDR_EXP 51
63463: PUSH
63464: LD_EXP 51
63468: PPUSH
63469: LD_VAR 0 4
63473: PPUSH
63474: EMPTY
63475: PPUSH
63476: CALL_OW 1
63480: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63481: LD_ADDR_EXP 52
63485: PUSH
63486: LD_EXP 52
63490: PPUSH
63491: LD_VAR 0 4
63495: PPUSH
63496: EMPTY
63497: PPUSH
63498: CALL_OW 1
63502: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63503: LD_ADDR_EXP 53
63507: PUSH
63508: LD_EXP 53
63512: PPUSH
63513: LD_VAR 0 4
63517: PPUSH
63518: EMPTY
63519: PPUSH
63520: CALL_OW 1
63524: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63525: LD_ADDR_EXP 54
63529: PUSH
63530: LD_EXP 54
63534: PPUSH
63535: LD_VAR 0 4
63539: PPUSH
63540: EMPTY
63541: PPUSH
63542: CALL_OW 1
63546: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63547: LD_ADDR_EXP 55
63551: PUSH
63552: LD_EXP 55
63556: PPUSH
63557: LD_VAR 0 4
63561: PPUSH
63562: EMPTY
63563: PPUSH
63564: CALL_OW 1
63568: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63569: LD_ADDR_EXP 56
63573: PUSH
63574: LD_EXP 56
63578: PPUSH
63579: LD_VAR 0 4
63583: PPUSH
63584: EMPTY
63585: PPUSH
63586: CALL_OW 1
63590: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63591: LD_ADDR_EXP 57
63595: PUSH
63596: LD_EXP 57
63600: PPUSH
63601: LD_VAR 0 4
63605: PPUSH
63606: EMPTY
63607: PPUSH
63608: CALL_OW 1
63612: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63613: LD_ADDR_EXP 58
63617: PUSH
63618: LD_EXP 58
63622: PPUSH
63623: LD_VAR 0 4
63627: PPUSH
63628: EMPTY
63629: PPUSH
63630: CALL_OW 1
63634: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63635: LD_ADDR_EXP 59
63639: PUSH
63640: LD_EXP 59
63644: PPUSH
63645: LD_VAR 0 4
63649: PPUSH
63650: EMPTY
63651: PPUSH
63652: CALL_OW 1
63656: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63657: LD_ADDR_EXP 60
63661: PUSH
63662: LD_EXP 60
63666: PPUSH
63667: LD_VAR 0 4
63671: PPUSH
63672: EMPTY
63673: PPUSH
63674: CALL_OW 1
63678: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63679: LD_ADDR_EXP 61
63683: PUSH
63684: LD_EXP 61
63688: PPUSH
63689: LD_VAR 0 4
63693: PPUSH
63694: EMPTY
63695: PPUSH
63696: CALL_OW 1
63700: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63701: LD_ADDR_EXP 63
63705: PUSH
63706: LD_EXP 63
63710: PPUSH
63711: LD_VAR 0 4
63715: PPUSH
63716: EMPTY
63717: PPUSH
63718: CALL_OW 1
63722: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63723: LD_ADDR_EXP 65
63727: PUSH
63728: LD_EXP 65
63732: PPUSH
63733: LD_VAR 0 4
63737: PPUSH
63738: EMPTY
63739: PPUSH
63740: CALL_OW 1
63744: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63745: LD_ADDR_EXP 66
63749: PUSH
63750: LD_EXP 66
63754: PPUSH
63755: LD_VAR 0 4
63759: PPUSH
63760: EMPTY
63761: PPUSH
63762: CALL_OW 1
63766: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63767: LD_ADDR_EXP 67
63771: PUSH
63772: LD_EXP 67
63776: PPUSH
63777: LD_VAR 0 4
63781: PPUSH
63782: EMPTY
63783: PPUSH
63784: CALL_OW 1
63788: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63789: LD_ADDR_EXP 68
63793: PUSH
63794: LD_EXP 68
63798: PPUSH
63799: LD_VAR 0 4
63803: PPUSH
63804: EMPTY
63805: PPUSH
63806: CALL_OW 1
63810: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63811: LD_ADDR_EXP 69
63815: PUSH
63816: LD_EXP 69
63820: PPUSH
63821: LD_VAR 0 4
63825: PPUSH
63826: EMPTY
63827: PPUSH
63828: CALL_OW 1
63832: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63833: LD_ADDR_EXP 70
63837: PUSH
63838: LD_EXP 70
63842: PPUSH
63843: LD_VAR 0 4
63847: PPUSH
63848: EMPTY
63849: PPUSH
63850: CALL_OW 1
63854: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63855: LD_ADDR_EXP 71
63859: PUSH
63860: LD_EXP 71
63864: PPUSH
63865: LD_VAR 0 4
63869: PPUSH
63870: EMPTY
63871: PPUSH
63872: CALL_OW 1
63876: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63877: LD_ADDR_EXP 72
63881: PUSH
63882: LD_EXP 72
63886: PPUSH
63887: LD_VAR 0 4
63891: PPUSH
63892: EMPTY
63893: PPUSH
63894: CALL_OW 1
63898: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63899: LD_ADDR_EXP 73
63903: PUSH
63904: LD_EXP 73
63908: PPUSH
63909: LD_VAR 0 4
63913: PPUSH
63914: EMPTY
63915: PPUSH
63916: CALL_OW 1
63920: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63921: LD_ADDR_EXP 74
63925: PUSH
63926: LD_EXP 74
63930: PPUSH
63931: LD_VAR 0 4
63935: PPUSH
63936: EMPTY
63937: PPUSH
63938: CALL_OW 1
63942: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63943: LD_ADDR_EXP 75
63947: PUSH
63948: LD_EXP 75
63952: PPUSH
63953: LD_VAR 0 4
63957: PPUSH
63958: EMPTY
63959: PPUSH
63960: CALL_OW 1
63964: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63965: LD_ADDR_EXP 76
63969: PUSH
63970: LD_EXP 76
63974: PPUSH
63975: LD_VAR 0 4
63979: PPUSH
63980: EMPTY
63981: PPUSH
63982: CALL_OW 1
63986: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63987: LD_ADDR_EXP 77
63991: PUSH
63992: LD_EXP 77
63996: PPUSH
63997: LD_VAR 0 4
64001: PPUSH
64002: EMPTY
64003: PPUSH
64004: CALL_OW 1
64008: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64009: LD_ADDR_EXP 78
64013: PUSH
64014: LD_EXP 78
64018: PPUSH
64019: LD_VAR 0 4
64023: PPUSH
64024: LD_INT 0
64026: PPUSH
64027: CALL_OW 1
64031: ST_TO_ADDR
// result := base ;
64032: LD_ADDR_VAR 0 3
64036: PUSH
64037: LD_VAR 0 4
64041: ST_TO_ADDR
// end ;
64042: LD_VAR 0 3
64046: RET
// export function MC_Start ( ) ; var i ; begin
64047: LD_INT 0
64049: PPUSH
64050: PPUSH
// for i = 1 to mc_bases do
64051: LD_ADDR_VAR 0 2
64055: PUSH
64056: DOUBLE
64057: LD_INT 1
64059: DEC
64060: ST_TO_ADDR
64061: LD_EXP 36
64065: PUSH
64066: FOR_TO
64067: IFFALSE 65144
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64069: LD_ADDR_EXP 36
64073: PUSH
64074: LD_EXP 36
64078: PPUSH
64079: LD_VAR 0 2
64083: PPUSH
64084: LD_EXP 36
64088: PUSH
64089: LD_VAR 0 2
64093: ARRAY
64094: PUSH
64095: LD_INT 0
64097: DIFF
64098: PPUSH
64099: CALL_OW 1
64103: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64104: LD_ADDR_EXP 37
64108: PUSH
64109: LD_EXP 37
64113: PPUSH
64114: LD_VAR 0 2
64118: PPUSH
64119: EMPTY
64120: PPUSH
64121: CALL_OW 1
64125: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64126: LD_ADDR_EXP 38
64130: PUSH
64131: LD_EXP 38
64135: PPUSH
64136: LD_VAR 0 2
64140: PPUSH
64141: EMPTY
64142: PPUSH
64143: CALL_OW 1
64147: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64148: LD_ADDR_EXP 39
64152: PUSH
64153: LD_EXP 39
64157: PPUSH
64158: LD_VAR 0 2
64162: PPUSH
64163: EMPTY
64164: PPUSH
64165: CALL_OW 1
64169: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64170: LD_ADDR_EXP 40
64174: PUSH
64175: LD_EXP 40
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: EMPTY
64186: PUSH
64187: EMPTY
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PPUSH
64193: CALL_OW 1
64197: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64198: LD_ADDR_EXP 41
64202: PUSH
64203: LD_EXP 41
64207: PPUSH
64208: LD_VAR 0 2
64212: PPUSH
64213: EMPTY
64214: PPUSH
64215: CALL_OW 1
64219: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64220: LD_ADDR_EXP 68
64224: PUSH
64225: LD_EXP 68
64229: PPUSH
64230: LD_VAR 0 2
64234: PPUSH
64235: EMPTY
64236: PPUSH
64237: CALL_OW 1
64241: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64242: LD_ADDR_EXP 42
64246: PUSH
64247: LD_EXP 42
64251: PPUSH
64252: LD_VAR 0 2
64256: PPUSH
64257: EMPTY
64258: PPUSH
64259: CALL_OW 1
64263: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64264: LD_ADDR_EXP 43
64268: PUSH
64269: LD_EXP 43
64273: PPUSH
64274: LD_VAR 0 2
64278: PPUSH
64279: EMPTY
64280: PPUSH
64281: CALL_OW 1
64285: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64286: LD_ADDR_EXP 44
64290: PUSH
64291: LD_EXP 44
64295: PPUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: LD_EXP 36
64305: PUSH
64306: LD_VAR 0 2
64310: ARRAY
64311: PPUSH
64312: LD_INT 2
64314: PUSH
64315: LD_INT 30
64317: PUSH
64318: LD_INT 32
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 30
64327: PUSH
64328: LD_INT 33
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: PPUSH
64340: CALL_OW 72
64344: PPUSH
64345: CALL_OW 1
64349: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64350: LD_ADDR_EXP 45
64354: PUSH
64355: LD_EXP 45
64359: PPUSH
64360: LD_VAR 0 2
64364: PPUSH
64365: LD_EXP 36
64369: PUSH
64370: LD_VAR 0 2
64374: ARRAY
64375: PPUSH
64376: LD_INT 2
64378: PUSH
64379: LD_INT 30
64381: PUSH
64382: LD_INT 32
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 30
64391: PUSH
64392: LD_INT 31
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 58
64406: PUSH
64407: EMPTY
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PPUSH
64414: CALL_OW 72
64418: PPUSH
64419: CALL_OW 1
64423: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64424: LD_ADDR_EXP 46
64428: PUSH
64429: LD_EXP 46
64433: PPUSH
64434: LD_VAR 0 2
64438: PPUSH
64439: EMPTY
64440: PPUSH
64441: CALL_OW 1
64445: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64446: LD_ADDR_EXP 50
64450: PUSH
64451: LD_EXP 50
64455: PPUSH
64456: LD_VAR 0 2
64460: PPUSH
64461: EMPTY
64462: PPUSH
64463: CALL_OW 1
64467: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64468: LD_ADDR_EXP 49
64472: PUSH
64473: LD_EXP 49
64477: PPUSH
64478: LD_VAR 0 2
64482: PPUSH
64483: EMPTY
64484: PPUSH
64485: CALL_OW 1
64489: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64490: LD_ADDR_EXP 51
64494: PUSH
64495: LD_EXP 51
64499: PPUSH
64500: LD_VAR 0 2
64504: PPUSH
64505: EMPTY
64506: PPUSH
64507: CALL_OW 1
64511: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64512: LD_ADDR_EXP 52
64516: PUSH
64517: LD_EXP 52
64521: PPUSH
64522: LD_VAR 0 2
64526: PPUSH
64527: EMPTY
64528: PPUSH
64529: CALL_OW 1
64533: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64534: LD_ADDR_EXP 53
64538: PUSH
64539: LD_EXP 53
64543: PPUSH
64544: LD_VAR 0 2
64548: PPUSH
64549: EMPTY
64550: PPUSH
64551: CALL_OW 1
64555: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64556: LD_ADDR_EXP 54
64560: PUSH
64561: LD_EXP 54
64565: PPUSH
64566: LD_VAR 0 2
64570: PPUSH
64571: EMPTY
64572: PPUSH
64573: CALL_OW 1
64577: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64578: LD_ADDR_EXP 55
64582: PUSH
64583: LD_EXP 55
64587: PPUSH
64588: LD_VAR 0 2
64592: PPUSH
64593: EMPTY
64594: PPUSH
64595: CALL_OW 1
64599: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64600: LD_ADDR_EXP 56
64604: PUSH
64605: LD_EXP 56
64609: PPUSH
64610: LD_VAR 0 2
64614: PPUSH
64615: EMPTY
64616: PPUSH
64617: CALL_OW 1
64621: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64622: LD_ADDR_EXP 57
64626: PUSH
64627: LD_EXP 57
64631: PPUSH
64632: LD_VAR 0 2
64636: PPUSH
64637: EMPTY
64638: PPUSH
64639: CALL_OW 1
64643: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64644: LD_ADDR_EXP 58
64648: PUSH
64649: LD_EXP 58
64653: PPUSH
64654: LD_VAR 0 2
64658: PPUSH
64659: EMPTY
64660: PPUSH
64661: CALL_OW 1
64665: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64666: LD_ADDR_EXP 47
64670: PUSH
64671: LD_EXP 47
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: LD_INT 0
64683: PPUSH
64684: CALL_OW 1
64688: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64689: LD_ADDR_EXP 60
64693: PUSH
64694: LD_EXP 60
64698: PPUSH
64699: LD_VAR 0 2
64703: PPUSH
64704: LD_INT 0
64706: PPUSH
64707: CALL_OW 1
64711: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64712: LD_ADDR_EXP 48
64716: PUSH
64717: LD_EXP 48
64721: PPUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: EMPTY
64728: PPUSH
64729: CALL_OW 1
64733: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64734: LD_ADDR_EXP 59
64738: PUSH
64739: LD_EXP 59
64743: PPUSH
64744: LD_VAR 0 2
64748: PPUSH
64749: LD_INT 0
64751: PPUSH
64752: CALL_OW 1
64756: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64757: LD_ADDR_EXP 61
64761: PUSH
64762: LD_EXP 61
64766: PPUSH
64767: LD_VAR 0 2
64771: PPUSH
64772: EMPTY
64773: PPUSH
64774: CALL_OW 1
64778: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64779: LD_ADDR_EXP 64
64783: PUSH
64784: LD_EXP 64
64788: PPUSH
64789: LD_VAR 0 2
64793: PPUSH
64794: LD_INT 0
64796: PPUSH
64797: CALL_OW 1
64801: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64802: LD_ADDR_EXP 65
64806: PUSH
64807: LD_EXP 65
64811: PPUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: EMPTY
64818: PPUSH
64819: CALL_OW 1
64823: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64824: LD_ADDR_EXP 66
64828: PUSH
64829: LD_EXP 66
64833: PPUSH
64834: LD_VAR 0 2
64838: PPUSH
64839: EMPTY
64840: PPUSH
64841: CALL_OW 1
64845: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64846: LD_ADDR_EXP 67
64850: PUSH
64851: LD_EXP 67
64855: PPUSH
64856: LD_VAR 0 2
64860: PPUSH
64861: EMPTY
64862: PPUSH
64863: CALL_OW 1
64867: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64868: LD_ADDR_EXP 69
64872: PUSH
64873: LD_EXP 69
64877: PPUSH
64878: LD_VAR 0 2
64882: PPUSH
64883: LD_EXP 36
64887: PUSH
64888: LD_VAR 0 2
64892: ARRAY
64893: PPUSH
64894: LD_INT 2
64896: PUSH
64897: LD_INT 30
64899: PUSH
64900: LD_INT 6
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 30
64909: PUSH
64910: LD_INT 7
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 30
64919: PUSH
64920: LD_INT 8
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: PPUSH
64933: CALL_OW 72
64937: PPUSH
64938: CALL_OW 1
64942: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64943: LD_ADDR_EXP 70
64947: PUSH
64948: LD_EXP 70
64952: PPUSH
64953: LD_VAR 0 2
64957: PPUSH
64958: EMPTY
64959: PPUSH
64960: CALL_OW 1
64964: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64965: LD_ADDR_EXP 71
64969: PUSH
64970: LD_EXP 71
64974: PPUSH
64975: LD_VAR 0 2
64979: PPUSH
64980: EMPTY
64981: PPUSH
64982: CALL_OW 1
64986: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
64987: LD_ADDR_EXP 72
64991: PUSH
64992: LD_EXP 72
64996: PPUSH
64997: LD_VAR 0 2
65001: PPUSH
65002: EMPTY
65003: PPUSH
65004: CALL_OW 1
65008: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65009: LD_ADDR_EXP 73
65013: PUSH
65014: LD_EXP 73
65018: PPUSH
65019: LD_VAR 0 2
65023: PPUSH
65024: EMPTY
65025: PPUSH
65026: CALL_OW 1
65030: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65031: LD_ADDR_EXP 74
65035: PUSH
65036: LD_EXP 74
65040: PPUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: EMPTY
65047: PPUSH
65048: CALL_OW 1
65052: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65053: LD_ADDR_EXP 75
65057: PUSH
65058: LD_EXP 75
65062: PPUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: EMPTY
65069: PPUSH
65070: CALL_OW 1
65074: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65075: LD_ADDR_EXP 76
65079: PUSH
65080: LD_EXP 76
65084: PPUSH
65085: LD_VAR 0 2
65089: PPUSH
65090: EMPTY
65091: PPUSH
65092: CALL_OW 1
65096: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65097: LD_ADDR_EXP 77
65101: PUSH
65102: LD_EXP 77
65106: PPUSH
65107: LD_VAR 0 2
65111: PPUSH
65112: EMPTY
65113: PPUSH
65114: CALL_OW 1
65118: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65119: LD_ADDR_EXP 78
65123: PUSH
65124: LD_EXP 78
65128: PPUSH
65129: LD_VAR 0 2
65133: PPUSH
65134: LD_INT 0
65136: PPUSH
65137: CALL_OW 1
65141: ST_TO_ADDR
// end ;
65142: GO 64066
65144: POP
65145: POP
// MC_InitSides ( ) ;
65146: CALL 65432 0 0
// MC_InitResearch ( ) ;
65150: CALL 65171 0 0
// CustomInitMacro ( ) ;
65154: CALL 1407 0 0
// skirmish := true ;
65158: LD_ADDR_EXP 34
65162: PUSH
65163: LD_INT 1
65165: ST_TO_ADDR
// end ;
65166: LD_VAR 0 1
65170: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65171: LD_INT 0
65173: PPUSH
65174: PPUSH
65175: PPUSH
65176: PPUSH
65177: PPUSH
65178: PPUSH
// if not mc_bases then
65179: LD_EXP 36
65183: NOT
65184: IFFALSE 65188
// exit ;
65186: GO 65427
// for i = 1 to 8 do
65188: LD_ADDR_VAR 0 2
65192: PUSH
65193: DOUBLE
65194: LD_INT 1
65196: DEC
65197: ST_TO_ADDR
65198: LD_INT 8
65200: PUSH
65201: FOR_TO
65202: IFFALSE 65228
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65204: LD_ADDR_EXP 63
65208: PUSH
65209: LD_EXP 63
65213: PPUSH
65214: LD_VAR 0 2
65218: PPUSH
65219: EMPTY
65220: PPUSH
65221: CALL_OW 1
65225: ST_TO_ADDR
65226: GO 65201
65228: POP
65229: POP
// tmp := [ ] ;
65230: LD_ADDR_VAR 0 5
65234: PUSH
65235: EMPTY
65236: ST_TO_ADDR
// for i = 1 to mc_sides do
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: DOUBLE
65243: LD_INT 1
65245: DEC
65246: ST_TO_ADDR
65247: LD_EXP 62
65251: PUSH
65252: FOR_TO
65253: IFFALSE 65311
// if not mc_sides [ i ] in tmp then
65255: LD_EXP 62
65259: PUSH
65260: LD_VAR 0 2
65264: ARRAY
65265: PUSH
65266: LD_VAR 0 5
65270: IN
65271: NOT
65272: IFFALSE 65309
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65274: LD_ADDR_VAR 0 5
65278: PUSH
65279: LD_VAR 0 5
65283: PPUSH
65284: LD_VAR 0 5
65288: PUSH
65289: LD_INT 1
65291: PLUS
65292: PPUSH
65293: LD_EXP 62
65297: PUSH
65298: LD_VAR 0 2
65302: ARRAY
65303: PPUSH
65304: CALL_OW 2
65308: ST_TO_ADDR
65309: GO 65252
65311: POP
65312: POP
// if not tmp then
65313: LD_VAR 0 5
65317: NOT
65318: IFFALSE 65322
// exit ;
65320: GO 65427
// for j in tmp do
65322: LD_ADDR_VAR 0 3
65326: PUSH
65327: LD_VAR 0 5
65331: PUSH
65332: FOR_IN
65333: IFFALSE 65425
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65335: LD_ADDR_VAR 0 6
65339: PUSH
65340: LD_INT 22
65342: PUSH
65343: LD_VAR 0 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PPUSH
65352: CALL_OW 69
65356: ST_TO_ADDR
// if not un then
65357: LD_VAR 0 6
65361: NOT
65362: IFFALSE 65366
// continue ;
65364: GO 65332
// nation := GetNation ( un [ 1 ] ) ;
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_VAR 0 6
65375: PUSH
65376: LD_INT 1
65378: ARRAY
65379: PPUSH
65380: CALL_OW 248
65384: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65385: LD_ADDR_EXP 63
65389: PUSH
65390: LD_EXP 63
65394: PPUSH
65395: LD_VAR 0 3
65399: PPUSH
65400: LD_VAR 0 3
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: LD_INT 1
65412: PPUSH
65413: CALL 19389 0 3
65417: PPUSH
65418: CALL_OW 1
65422: ST_TO_ADDR
// end ;
65423: GO 65332
65425: POP
65426: POP
// end ;
65427: LD_VAR 0 1
65431: RET
// export function MC_InitSides ( ) ; var i ; begin
65432: LD_INT 0
65434: PPUSH
65435: PPUSH
// if not mc_bases then
65436: LD_EXP 36
65440: NOT
65441: IFFALSE 65445
// exit ;
65443: GO 65519
// for i = 1 to mc_bases do
65445: LD_ADDR_VAR 0 2
65449: PUSH
65450: DOUBLE
65451: LD_INT 1
65453: DEC
65454: ST_TO_ADDR
65455: LD_EXP 36
65459: PUSH
65460: FOR_TO
65461: IFFALSE 65517
// if mc_bases [ i ] then
65463: LD_EXP 36
65467: PUSH
65468: LD_VAR 0 2
65472: ARRAY
65473: IFFALSE 65515
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65475: LD_ADDR_EXP 62
65479: PUSH
65480: LD_EXP 62
65484: PPUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: LD_EXP 36
65494: PUSH
65495: LD_VAR 0 2
65499: ARRAY
65500: PUSH
65501: LD_INT 1
65503: ARRAY
65504: PPUSH
65505: CALL_OW 255
65509: PPUSH
65510: CALL_OW 1
65514: ST_TO_ADDR
65515: GO 65460
65517: POP
65518: POP
// end ;
65519: LD_VAR 0 1
65523: RET
// every 0 0$01 trigger skirmish do
65524: LD_EXP 34
65528: IFFALSE 65682
65530: GO 65532
65532: DISABLE
// begin enable ;
65533: ENABLE
// MC_CheckBuildings ( ) ;
65534: CALL 70171 0 0
// MC_CheckPeopleLife ( ) ;
65538: CALL 70296 0 0
// RaiseSailEvent ( 100 ) ;
65542: LD_INT 100
65544: PPUSH
65545: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65549: LD_INT 103
65551: PPUSH
65552: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65556: LD_INT 104
65558: PPUSH
65559: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65563: LD_INT 105
65565: PPUSH
65566: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65570: LD_INT 106
65572: PPUSH
65573: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65577: LD_INT 107
65579: PPUSH
65580: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65584: LD_INT 108
65586: PPUSH
65587: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65591: LD_INT 109
65593: PPUSH
65594: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65598: LD_INT 110
65600: PPUSH
65601: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65605: LD_INT 111
65607: PPUSH
65608: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65612: LD_INT 112
65614: PPUSH
65615: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65619: LD_INT 113
65621: PPUSH
65622: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65626: LD_INT 120
65628: PPUSH
65629: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65633: LD_INT 121
65635: PPUSH
65636: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65640: LD_INT 122
65642: PPUSH
65643: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65647: LD_INT 123
65649: PPUSH
65650: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65654: LD_INT 124
65656: PPUSH
65657: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65661: LD_INT 125
65663: PPUSH
65664: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65668: LD_INT 126
65670: PPUSH
65671: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65675: LD_INT 200
65677: PPUSH
65678: CALL_OW 427
// end ;
65682: END
// on SailEvent ( event ) do begin if event < 100 then
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 100
65690: LESS
65691: IFFALSE 65702
// CustomEvent ( event ) ;
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL 18588 0 1
// if event = 100 then
65702: LD_VAR 0 1
65706: PUSH
65707: LD_INT 100
65709: EQUAL
65710: IFFALSE 65716
// MC_ClassManager ( ) ;
65712: CALL 66108 0 0
// if event = 101 then
65716: LD_VAR 0 1
65720: PUSH
65721: LD_INT 101
65723: EQUAL
65724: IFFALSE 65730
// MC_RepairBuildings ( ) ;
65726: CALL 70892 0 0
// if event = 102 then
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 102
65737: EQUAL
65738: IFFALSE 65744
// MC_Heal ( ) ;
65740: CALL 71298 0 0
// if event = 103 then
65744: LD_VAR 0 1
65748: PUSH
65749: LD_INT 103
65751: EQUAL
65752: IFFALSE 65758
// MC_Build ( ) ;
65754: CALL 71720 0 0
// if event = 104 then
65758: LD_VAR 0 1
65762: PUSH
65763: LD_INT 104
65765: EQUAL
65766: IFFALSE 65772
// MC_TurretWeapon ( ) ;
65768: CALL 73333 0 0
// if event = 105 then
65772: LD_VAR 0 1
65776: PUSH
65777: LD_INT 105
65779: EQUAL
65780: IFFALSE 65786
// MC_BuildUpgrade ( ) ;
65782: CALL 72884 0 0
// if event = 106 then
65786: LD_VAR 0 1
65790: PUSH
65791: LD_INT 106
65793: EQUAL
65794: IFFALSE 65800
// MC_PlantMines ( ) ;
65796: CALL 73763 0 0
// if event = 107 then
65800: LD_VAR 0 1
65804: PUSH
65805: LD_INT 107
65807: EQUAL
65808: IFFALSE 65814
// MC_CollectCrates ( ) ;
65810: CALL 74797 0 0
// if event = 108 then
65814: LD_VAR 0 1
65818: PUSH
65819: LD_INT 108
65821: EQUAL
65822: IFFALSE 65828
// MC_LinkRemoteControl ( ) ;
65824: CALL 76554 0 0
// if event = 109 then
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 109
65835: EQUAL
65836: IFFALSE 65842
// MC_ProduceVehicle ( ) ;
65838: CALL 76735 0 0
// if event = 110 then
65842: LD_VAR 0 1
65846: PUSH
65847: LD_INT 110
65849: EQUAL
65850: IFFALSE 65856
// MC_SendAttack ( ) ;
65852: CALL 77216 0 0
// if event = 111 then
65856: LD_VAR 0 1
65860: PUSH
65861: LD_INT 111
65863: EQUAL
65864: IFFALSE 65870
// MC_Defend ( ) ;
65866: CALL 77324 0 0
// if event = 112 then
65870: LD_VAR 0 1
65874: PUSH
65875: LD_INT 112
65877: EQUAL
65878: IFFALSE 65884
// MC_Research ( ) ;
65880: CALL 77929 0 0
// if event = 113 then
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 113
65891: EQUAL
65892: IFFALSE 65898
// MC_MinesTrigger ( ) ;
65894: CALL 79043 0 0
// if event = 120 then
65898: LD_VAR 0 1
65902: PUSH
65903: LD_INT 120
65905: EQUAL
65906: IFFALSE 65912
// MC_RepairVehicle ( ) ;
65908: CALL 79142 0 0
// if event = 121 then
65912: LD_VAR 0 1
65916: PUSH
65917: LD_INT 121
65919: EQUAL
65920: IFFALSE 65926
// MC_TameApe ( ) ;
65922: CALL 79849 0 0
// if event = 122 then
65926: LD_VAR 0 1
65930: PUSH
65931: LD_INT 122
65933: EQUAL
65934: IFFALSE 65940
// MC_ChangeApeClass ( ) ;
65936: CALL 80678 0 0
// if event = 123 then
65940: LD_VAR 0 1
65944: PUSH
65945: LD_INT 123
65947: EQUAL
65948: IFFALSE 65954
// MC_Bazooka ( ) ;
65950: CALL 81328 0 0
// if event = 124 then
65954: LD_VAR 0 1
65958: PUSH
65959: LD_INT 124
65961: EQUAL
65962: IFFALSE 65968
// MC_TeleportExit ( ) ;
65964: CALL 81526 0 0
// if event = 125 then
65968: LD_VAR 0 1
65972: PUSH
65973: LD_INT 125
65975: EQUAL
65976: IFFALSE 65982
// MC_Deposits ( ) ;
65978: CALL 82173 0 0
// if event = 126 then
65982: LD_VAR 0 1
65986: PUSH
65987: LD_INT 126
65989: EQUAL
65990: IFFALSE 65996
// MC_RemoteDriver ( ) ;
65992: CALL 82798 0 0
// if event = 200 then
65996: LD_VAR 0 1
66000: PUSH
66001: LD_INT 200
66003: EQUAL
66004: IFFALSE 66010
// MC_Idle ( ) ;
66006: CALL 84531 0 0
// end ;
66010: PPOPN 1
66012: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66013: LD_INT 0
66015: PPUSH
66016: PPUSH
// if not mc_bases [ base ] or not tag then
66017: LD_EXP 36
66021: PUSH
66022: LD_VAR 0 1
66026: ARRAY
66027: NOT
66028: PUSH
66029: LD_VAR 0 2
66033: NOT
66034: OR
66035: IFFALSE 66039
// exit ;
66037: GO 66103
// for i in mc_bases [ base ] union mc_ape [ base ] do
66039: LD_ADDR_VAR 0 4
66043: PUSH
66044: LD_EXP 36
66048: PUSH
66049: LD_VAR 0 1
66053: ARRAY
66054: PUSH
66055: LD_EXP 65
66059: PUSH
66060: LD_VAR 0 1
66064: ARRAY
66065: UNION
66066: PUSH
66067: FOR_IN
66068: IFFALSE 66101
// if GetTag ( i ) = tag then
66070: LD_VAR 0 4
66074: PPUSH
66075: CALL_OW 110
66079: PUSH
66080: LD_VAR 0 2
66084: EQUAL
66085: IFFALSE 66099
// SetTag ( i , 0 ) ;
66087: LD_VAR 0 4
66091: PPUSH
66092: LD_INT 0
66094: PPUSH
66095: CALL_OW 109
66099: GO 66067
66101: POP
66102: POP
// end ;
66103: LD_VAR 0 3
66107: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66108: LD_INT 0
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
66114: PPUSH
66115: PPUSH
66116: PPUSH
66117: PPUSH
// if not mc_bases then
66118: LD_EXP 36
66122: NOT
66123: IFFALSE 66127
// exit ;
66125: GO 66585
// for i = 1 to mc_bases do
66127: LD_ADDR_VAR 0 2
66131: PUSH
66132: DOUBLE
66133: LD_INT 1
66135: DEC
66136: ST_TO_ADDR
66137: LD_EXP 36
66141: PUSH
66142: FOR_TO
66143: IFFALSE 66583
// begin tmp := MC_ClassCheckReq ( i ) ;
66145: LD_ADDR_VAR 0 4
66149: PUSH
66150: LD_VAR 0 2
66154: PPUSH
66155: CALL 66590 0 1
66159: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66160: LD_ADDR_EXP 77
66164: PUSH
66165: LD_EXP 77
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_VAR 0 4
66179: PPUSH
66180: CALL_OW 1
66184: ST_TO_ADDR
// if not tmp then
66185: LD_VAR 0 4
66189: NOT
66190: IFFALSE 66194
// continue ;
66192: GO 66142
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66194: LD_ADDR_VAR 0 6
66198: PUSH
66199: LD_EXP 36
66203: PUSH
66204: LD_VAR 0 2
66208: ARRAY
66209: PPUSH
66210: LD_INT 2
66212: PUSH
66213: LD_INT 30
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 30
66225: PUSH
66226: LD_INT 5
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: PPUSH
66238: CALL_OW 72
66242: PUSH
66243: LD_EXP 36
66247: PUSH
66248: LD_VAR 0 2
66252: ARRAY
66253: PPUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 30
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 30
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PPUSH
66282: CALL_OW 72
66286: PUSH
66287: LD_EXP 36
66291: PUSH
66292: LD_VAR 0 2
66296: ARRAY
66297: PPUSH
66298: LD_INT 30
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PPUSH
66308: CALL_OW 72
66312: PUSH
66313: LD_EXP 36
66317: PUSH
66318: LD_VAR 0 2
66322: ARRAY
66323: PPUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 30
66329: PUSH
66330: LD_INT 6
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 30
66339: PUSH
66340: LD_INT 7
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 30
66349: PUSH
66350: LD_INT 8
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: PPUSH
66363: CALL_OW 72
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: ST_TO_ADDR
// for j = 1 to 4 do
66374: LD_ADDR_VAR 0 3
66378: PUSH
66379: DOUBLE
66380: LD_INT 1
66382: DEC
66383: ST_TO_ADDR
66384: LD_INT 4
66386: PUSH
66387: FOR_TO
66388: IFFALSE 66579
// begin if not tmp [ j ] then
66390: LD_VAR 0 4
66394: PUSH
66395: LD_VAR 0 3
66399: ARRAY
66400: NOT
66401: IFFALSE 66405
// continue ;
66403: GO 66387
// for p in tmp [ j ] do
66405: LD_ADDR_VAR 0 5
66409: PUSH
66410: LD_VAR 0 4
66414: PUSH
66415: LD_VAR 0 3
66419: ARRAY
66420: PUSH
66421: FOR_IN
66422: IFFALSE 66575
// begin if not b [ j ] then
66424: LD_VAR 0 6
66428: PUSH
66429: LD_VAR 0 3
66433: ARRAY
66434: NOT
66435: IFFALSE 66439
// break ;
66437: GO 66575
// e := 0 ;
66439: LD_ADDR_VAR 0 7
66443: PUSH
66444: LD_INT 0
66446: ST_TO_ADDR
// for k in b [ j ] do
66447: LD_ADDR_VAR 0 8
66451: PUSH
66452: LD_VAR 0 6
66456: PUSH
66457: LD_VAR 0 3
66461: ARRAY
66462: PUSH
66463: FOR_IN
66464: IFFALSE 66491
// if IsNotFull ( k ) then
66466: LD_VAR 0 8
66470: PPUSH
66471: CALL 23378 0 1
66475: IFFALSE 66489
// begin e := k ;
66477: LD_ADDR_VAR 0 7
66481: PUSH
66482: LD_VAR 0 8
66486: ST_TO_ADDR
// break ;
66487: GO 66491
// end ;
66489: GO 66463
66491: POP
66492: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66493: LD_VAR 0 7
66497: PUSH
66498: LD_VAR 0 5
66502: PPUSH
66503: LD_VAR 0 7
66507: PPUSH
66508: CALL 60436 0 2
66512: NOT
66513: AND
66514: IFFALSE 66573
// begin if IsInUnit ( p ) then
66516: LD_VAR 0 5
66520: PPUSH
66521: CALL_OW 310
66525: IFFALSE 66536
// ComExitBuilding ( p ) ;
66527: LD_VAR 0 5
66531: PPUSH
66532: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66536: LD_VAR 0 5
66540: PPUSH
66541: LD_VAR 0 7
66545: PPUSH
66546: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66550: LD_VAR 0 5
66554: PPUSH
66555: LD_VAR 0 3
66559: PPUSH
66560: CALL_OW 183
// AddComExitBuilding ( p ) ;
66564: LD_VAR 0 5
66568: PPUSH
66569: CALL_OW 182
// end ; end ;
66573: GO 66421
66575: POP
66576: POP
// end ;
66577: GO 66387
66579: POP
66580: POP
// end ;
66581: GO 66142
66583: POP
66584: POP
// end ;
66585: LD_VAR 0 1
66589: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66590: LD_INT 0
66592: PPUSH
66593: PPUSH
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
66598: PPUSH
66599: PPUSH
66600: PPUSH
66601: PPUSH
66602: PPUSH
66603: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66604: LD_VAR 0 1
66608: NOT
66609: PUSH
66610: LD_EXP 36
66614: PUSH
66615: LD_VAR 0 1
66619: ARRAY
66620: NOT
66621: OR
66622: PUSH
66623: LD_EXP 36
66627: PUSH
66628: LD_VAR 0 1
66632: ARRAY
66633: PPUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 30
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 30
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: PPUSH
66662: CALL_OW 72
66666: NOT
66667: OR
66668: IFFALSE 66672
// exit ;
66670: GO 70166
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66672: LD_ADDR_VAR 0 4
66676: PUSH
66677: LD_EXP 36
66681: PUSH
66682: LD_VAR 0 1
66686: ARRAY
66687: PPUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 25
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 25
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 25
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 25
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 25
66733: PUSH
66734: LD_INT 5
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 25
66743: PUSH
66744: LD_INT 8
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 25
66753: PUSH
66754: LD_INT 9
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: PPUSH
66771: CALL_OW 72
66775: ST_TO_ADDR
// for i in tmp do
66776: LD_ADDR_VAR 0 3
66780: PUSH
66781: LD_VAR 0 4
66785: PUSH
66786: FOR_IN
66787: IFFALSE 66818
// if GetTag ( i ) then
66789: LD_VAR 0 3
66793: PPUSH
66794: CALL_OW 110
66798: IFFALSE 66816
// tmp := tmp diff i ;
66800: LD_ADDR_VAR 0 4
66804: PUSH
66805: LD_VAR 0 4
66809: PUSH
66810: LD_VAR 0 3
66814: DIFF
66815: ST_TO_ADDR
66816: GO 66786
66818: POP
66819: POP
// if not tmp then
66820: LD_VAR 0 4
66824: NOT
66825: IFFALSE 66829
// exit ;
66827: GO 70166
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66829: LD_ADDR_VAR 0 5
66833: PUSH
66834: LD_EXP 36
66838: PUSH
66839: LD_VAR 0 1
66843: ARRAY
66844: PPUSH
66845: LD_INT 2
66847: PUSH
66848: LD_INT 25
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 25
66860: PUSH
66861: LD_INT 5
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 25
66870: PUSH
66871: LD_INT 8
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 25
66880: PUSH
66881: LD_INT 9
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: PPUSH
66895: CALL_OW 72
66899: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66900: LD_ADDR_VAR 0 6
66904: PUSH
66905: LD_EXP 36
66909: PUSH
66910: LD_VAR 0 1
66914: ARRAY
66915: PPUSH
66916: LD_INT 25
66918: PUSH
66919: LD_INT 2
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PPUSH
66926: CALL_OW 72
66930: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66931: LD_ADDR_VAR 0 7
66935: PUSH
66936: LD_EXP 36
66940: PUSH
66941: LD_VAR 0 1
66945: ARRAY
66946: PPUSH
66947: LD_INT 25
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PPUSH
66957: CALL_OW 72
66961: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66962: LD_ADDR_VAR 0 8
66966: PUSH
66967: LD_EXP 36
66971: PUSH
66972: LD_VAR 0 1
66976: ARRAY
66977: PPUSH
66978: LD_INT 25
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 24
66990: PUSH
66991: LD_INT 251
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PPUSH
67002: CALL_OW 72
67006: ST_TO_ADDR
// if mc_scan [ base ] then
67007: LD_EXP 59
67011: PUSH
67012: LD_VAR 0 1
67016: ARRAY
67017: IFFALSE 67478
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67019: LD_ADDR_EXP 78
67023: PUSH
67024: LD_EXP 78
67028: PPUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: LD_INT 4
67036: PPUSH
67037: CALL_OW 1
67041: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67042: LD_ADDR_VAR 0 12
67046: PUSH
67047: LD_EXP 36
67051: PUSH
67052: LD_VAR 0 1
67056: ARRAY
67057: PPUSH
67058: LD_INT 2
67060: PUSH
67061: LD_INT 30
67063: PUSH
67064: LD_INT 4
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 30
67073: PUSH
67074: LD_INT 5
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: LIST
67085: PPUSH
67086: CALL_OW 72
67090: ST_TO_ADDR
// if not b then
67091: LD_VAR 0 12
67095: NOT
67096: IFFALSE 67100
// exit ;
67098: GO 70166
// p := [ ] ;
67100: LD_ADDR_VAR 0 11
67104: PUSH
67105: EMPTY
67106: ST_TO_ADDR
// if sci >= 2 then
67107: LD_VAR 0 8
67111: PUSH
67112: LD_INT 2
67114: GREATEREQUAL
67115: IFFALSE 67146
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67117: LD_ADDR_VAR 0 8
67121: PUSH
67122: LD_VAR 0 8
67126: PUSH
67127: LD_INT 1
67129: ARRAY
67130: PUSH
67131: LD_VAR 0 8
67135: PUSH
67136: LD_INT 2
67138: ARRAY
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: ST_TO_ADDR
67144: GO 67207
// if sci = 1 then
67146: LD_VAR 0 8
67150: PUSH
67151: LD_INT 1
67153: EQUAL
67154: IFFALSE 67175
// sci := [ sci [ 1 ] ] else
67156: LD_ADDR_VAR 0 8
67160: PUSH
67161: LD_VAR 0 8
67165: PUSH
67166: LD_INT 1
67168: ARRAY
67169: PUSH
67170: EMPTY
67171: LIST
67172: ST_TO_ADDR
67173: GO 67207
// if sci = 0 then
67175: LD_VAR 0 8
67179: PUSH
67180: LD_INT 0
67182: EQUAL
67183: IFFALSE 67207
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67185: LD_ADDR_VAR 0 11
67189: PUSH
67190: LD_VAR 0 4
67194: PPUSH
67195: LD_INT 4
67197: PPUSH
67198: CALL 60299 0 2
67202: PUSH
67203: LD_INT 1
67205: ARRAY
67206: ST_TO_ADDR
// if eng > 4 then
67207: LD_VAR 0 6
67211: PUSH
67212: LD_INT 4
67214: GREATER
67215: IFFALSE 67261
// for i = eng downto 4 do
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: DOUBLE
67223: LD_VAR 0 6
67227: INC
67228: ST_TO_ADDR
67229: LD_INT 4
67231: PUSH
67232: FOR_DOWNTO
67233: IFFALSE 67259
// eng := eng diff eng [ i ] ;
67235: LD_ADDR_VAR 0 6
67239: PUSH
67240: LD_VAR 0 6
67244: PUSH
67245: LD_VAR 0 6
67249: PUSH
67250: LD_VAR 0 3
67254: ARRAY
67255: DIFF
67256: ST_TO_ADDR
67257: GO 67232
67259: POP
67260: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67261: LD_ADDR_VAR 0 4
67265: PUSH
67266: LD_VAR 0 4
67270: PUSH
67271: LD_VAR 0 5
67275: PUSH
67276: LD_VAR 0 6
67280: UNION
67281: PUSH
67282: LD_VAR 0 7
67286: UNION
67287: PUSH
67288: LD_VAR 0 8
67292: UNION
67293: DIFF
67294: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67295: LD_ADDR_VAR 0 13
67299: PUSH
67300: LD_EXP 36
67304: PUSH
67305: LD_VAR 0 1
67309: ARRAY
67310: PPUSH
67311: LD_INT 2
67313: PUSH
67314: LD_INT 30
67316: PUSH
67317: LD_INT 32
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 30
67326: PUSH
67327: LD_INT 31
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: PPUSH
67339: CALL_OW 72
67343: PUSH
67344: LD_EXP 36
67348: PUSH
67349: LD_VAR 0 1
67353: ARRAY
67354: PPUSH
67355: LD_INT 2
67357: PUSH
67358: LD_INT 30
67360: PUSH
67361: LD_INT 4
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 30
67370: PUSH
67371: LD_INT 5
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: PPUSH
67383: CALL_OW 72
67387: PUSH
67388: LD_INT 6
67390: MUL
67391: PLUS
67392: ST_TO_ADDR
// if bcount < tmp then
67393: LD_VAR 0 13
67397: PUSH
67398: LD_VAR 0 4
67402: LESS
67403: IFFALSE 67449
// for i = tmp downto bcount do
67405: LD_ADDR_VAR 0 3
67409: PUSH
67410: DOUBLE
67411: LD_VAR 0 4
67415: INC
67416: ST_TO_ADDR
67417: LD_VAR 0 13
67421: PUSH
67422: FOR_DOWNTO
67423: IFFALSE 67447
// tmp := Delete ( tmp , tmp ) ;
67425: LD_ADDR_VAR 0 4
67429: PUSH
67430: LD_VAR 0 4
67434: PPUSH
67435: LD_VAR 0 4
67439: PPUSH
67440: CALL_OW 3
67444: ST_TO_ADDR
67445: GO 67422
67447: POP
67448: POP
// result := [ tmp , 0 , 0 , p ] ;
67449: LD_ADDR_VAR 0 2
67453: PUSH
67454: LD_VAR 0 4
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_VAR 0 11
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// exit ;
67476: GO 70166
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67478: LD_EXP 36
67482: PUSH
67483: LD_VAR 0 1
67487: ARRAY
67488: PPUSH
67489: LD_INT 2
67491: PUSH
67492: LD_INT 30
67494: PUSH
67495: LD_INT 6
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 30
67504: PUSH
67505: LD_INT 7
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 30
67514: PUSH
67515: LD_INT 8
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: PPUSH
67528: CALL_OW 72
67532: NOT
67533: PUSH
67534: LD_EXP 36
67538: PUSH
67539: LD_VAR 0 1
67543: ARRAY
67544: PPUSH
67545: LD_INT 30
67547: PUSH
67548: LD_INT 3
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PPUSH
67555: CALL_OW 72
67559: NOT
67560: AND
67561: IFFALSE 67633
// begin if eng = tmp then
67563: LD_VAR 0 6
67567: PUSH
67568: LD_VAR 0 4
67572: EQUAL
67573: IFFALSE 67577
// exit ;
67575: GO 70166
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67577: LD_ADDR_EXP 78
67581: PUSH
67582: LD_EXP 78
67586: PPUSH
67587: LD_VAR 0 1
67591: PPUSH
67592: LD_INT 1
67594: PPUSH
67595: CALL_OW 1
67599: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67600: LD_ADDR_VAR 0 2
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: LD_VAR 0 4
67612: PUSH
67613: LD_VAR 0 6
67617: DIFF
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: ST_TO_ADDR
// exit ;
67631: GO 70166
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67633: LD_EXP 63
67637: PUSH
67638: LD_EXP 62
67642: PUSH
67643: LD_VAR 0 1
67647: ARRAY
67648: ARRAY
67649: PUSH
67650: LD_EXP 36
67654: PUSH
67655: LD_VAR 0 1
67659: ARRAY
67660: PPUSH
67661: LD_INT 2
67663: PUSH
67664: LD_INT 30
67666: PUSH
67667: LD_INT 6
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 30
67676: PUSH
67677: LD_INT 7
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 30
67686: PUSH
67687: LD_INT 8
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: PPUSH
67700: CALL_OW 72
67704: AND
67705: PUSH
67706: LD_EXP 36
67710: PUSH
67711: LD_VAR 0 1
67715: ARRAY
67716: PPUSH
67717: LD_INT 30
67719: PUSH
67720: LD_INT 3
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PPUSH
67727: CALL_OW 72
67731: NOT
67732: AND
67733: IFFALSE 67947
// begin if sci >= 6 then
67735: LD_VAR 0 8
67739: PUSH
67740: LD_INT 6
67742: GREATEREQUAL
67743: IFFALSE 67747
// exit ;
67745: GO 70166
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67747: LD_ADDR_EXP 78
67751: PUSH
67752: LD_EXP 78
67756: PPUSH
67757: LD_VAR 0 1
67761: PPUSH
67762: LD_INT 2
67764: PPUSH
67765: CALL_OW 1
67769: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67770: LD_ADDR_VAR 0 9
67774: PUSH
67775: LD_VAR 0 4
67779: PUSH
67780: LD_VAR 0 8
67784: DIFF
67785: PPUSH
67786: LD_INT 4
67788: PPUSH
67789: CALL 60299 0 2
67793: ST_TO_ADDR
// p := [ ] ;
67794: LD_ADDR_VAR 0 11
67798: PUSH
67799: EMPTY
67800: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67801: LD_VAR 0 8
67805: PUSH
67806: LD_INT 6
67808: LESS
67809: PUSH
67810: LD_VAR 0 9
67814: PUSH
67815: LD_INT 6
67817: GREATER
67818: AND
67819: IFFALSE 67900
// begin for i = 1 to 6 - sci do
67821: LD_ADDR_VAR 0 3
67825: PUSH
67826: DOUBLE
67827: LD_INT 1
67829: DEC
67830: ST_TO_ADDR
67831: LD_INT 6
67833: PUSH
67834: LD_VAR 0 8
67838: MINUS
67839: PUSH
67840: FOR_TO
67841: IFFALSE 67896
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67843: LD_ADDR_VAR 0 11
67847: PUSH
67848: LD_VAR 0 11
67852: PPUSH
67853: LD_VAR 0 11
67857: PUSH
67858: LD_INT 1
67860: PLUS
67861: PPUSH
67862: LD_VAR 0 9
67866: PUSH
67867: LD_INT 1
67869: ARRAY
67870: PPUSH
67871: CALL_OW 2
67875: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67876: LD_ADDR_VAR 0 9
67880: PUSH
67881: LD_VAR 0 9
67885: PPUSH
67886: LD_INT 1
67888: PPUSH
67889: CALL_OW 3
67893: ST_TO_ADDR
// end ;
67894: GO 67840
67896: POP
67897: POP
// end else
67898: GO 67920
// if sort then
67900: LD_VAR 0 9
67904: IFFALSE 67920
// p := sort [ 1 ] ;
67906: LD_ADDR_VAR 0 11
67910: PUSH
67911: LD_VAR 0 9
67915: PUSH
67916: LD_INT 1
67918: ARRAY
67919: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67920: LD_ADDR_VAR 0 2
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_VAR 0 11
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: ST_TO_ADDR
// exit ;
67945: GO 70166
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67947: LD_EXP 63
67951: PUSH
67952: LD_EXP 62
67956: PUSH
67957: LD_VAR 0 1
67961: ARRAY
67962: ARRAY
67963: PUSH
67964: LD_EXP 36
67968: PUSH
67969: LD_VAR 0 1
67973: ARRAY
67974: PPUSH
67975: LD_INT 2
67977: PUSH
67978: LD_INT 30
67980: PUSH
67981: LD_INT 6
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 30
67990: PUSH
67991: LD_INT 7
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 30
68000: PUSH
68001: LD_INT 8
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: PPUSH
68014: CALL_OW 72
68018: AND
68019: PUSH
68020: LD_EXP 36
68024: PUSH
68025: LD_VAR 0 1
68029: ARRAY
68030: PPUSH
68031: LD_INT 30
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PPUSH
68041: CALL_OW 72
68045: AND
68046: IFFALSE 68780
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68048: LD_ADDR_EXP 78
68052: PUSH
68053: LD_EXP 78
68057: PPUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: LD_INT 3
68065: PPUSH
68066: CALL_OW 1
68070: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68071: LD_ADDR_VAR 0 2
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// if not eng then
68094: LD_VAR 0 6
68098: NOT
68099: IFFALSE 68162
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68101: LD_ADDR_VAR 0 11
68105: PUSH
68106: LD_VAR 0 4
68110: PPUSH
68111: LD_INT 2
68113: PPUSH
68114: CALL 60299 0 2
68118: PUSH
68119: LD_INT 1
68121: ARRAY
68122: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68123: LD_ADDR_VAR 0 2
68127: PUSH
68128: LD_VAR 0 2
68132: PPUSH
68133: LD_INT 2
68135: PPUSH
68136: LD_VAR 0 11
68140: PPUSH
68141: CALL_OW 1
68145: ST_TO_ADDR
// tmp := tmp diff p ;
68146: LD_ADDR_VAR 0 4
68150: PUSH
68151: LD_VAR 0 4
68155: PUSH
68156: LD_VAR 0 11
68160: DIFF
68161: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68162: LD_VAR 0 4
68166: PUSH
68167: LD_VAR 0 8
68171: PUSH
68172: LD_INT 6
68174: LESS
68175: AND
68176: IFFALSE 68364
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68178: LD_ADDR_VAR 0 9
68182: PUSH
68183: LD_VAR 0 4
68187: PUSH
68188: LD_VAR 0 8
68192: PUSH
68193: LD_VAR 0 7
68197: UNION
68198: DIFF
68199: PPUSH
68200: LD_INT 4
68202: PPUSH
68203: CALL 60299 0 2
68207: ST_TO_ADDR
// p := [ ] ;
68208: LD_ADDR_VAR 0 11
68212: PUSH
68213: EMPTY
68214: ST_TO_ADDR
// if sort then
68215: LD_VAR 0 9
68219: IFFALSE 68335
// for i = 1 to 6 - sci do
68221: LD_ADDR_VAR 0 3
68225: PUSH
68226: DOUBLE
68227: LD_INT 1
68229: DEC
68230: ST_TO_ADDR
68231: LD_INT 6
68233: PUSH
68234: LD_VAR 0 8
68238: MINUS
68239: PUSH
68240: FOR_TO
68241: IFFALSE 68333
// begin if i = sort then
68243: LD_VAR 0 3
68247: PUSH
68248: LD_VAR 0 9
68252: EQUAL
68253: IFFALSE 68257
// break ;
68255: GO 68333
// if GetClass ( i ) = 4 then
68257: LD_VAR 0 3
68261: PPUSH
68262: CALL_OW 257
68266: PUSH
68267: LD_INT 4
68269: EQUAL
68270: IFFALSE 68274
// continue ;
68272: GO 68240
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68274: LD_ADDR_VAR 0 11
68278: PUSH
68279: LD_VAR 0 11
68283: PPUSH
68284: LD_VAR 0 11
68288: PUSH
68289: LD_INT 1
68291: PLUS
68292: PPUSH
68293: LD_VAR 0 9
68297: PUSH
68298: LD_VAR 0 3
68302: ARRAY
68303: PPUSH
68304: CALL_OW 2
68308: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68309: LD_ADDR_VAR 0 4
68313: PUSH
68314: LD_VAR 0 4
68318: PUSH
68319: LD_VAR 0 9
68323: PUSH
68324: LD_VAR 0 3
68328: ARRAY
68329: DIFF
68330: ST_TO_ADDR
// end ;
68331: GO 68240
68333: POP
68334: POP
// if p then
68335: LD_VAR 0 11
68339: IFFALSE 68364
// result := Replace ( result , 4 , p ) ;
68341: LD_ADDR_VAR 0 2
68345: PUSH
68346: LD_VAR 0 2
68350: PPUSH
68351: LD_INT 4
68353: PPUSH
68354: LD_VAR 0 11
68358: PPUSH
68359: CALL_OW 1
68363: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68364: LD_VAR 0 4
68368: PUSH
68369: LD_VAR 0 7
68373: PUSH
68374: LD_INT 6
68376: LESS
68377: AND
68378: IFFALSE 68566
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68380: LD_ADDR_VAR 0 9
68384: PUSH
68385: LD_VAR 0 4
68389: PUSH
68390: LD_VAR 0 8
68394: PUSH
68395: LD_VAR 0 7
68399: UNION
68400: DIFF
68401: PPUSH
68402: LD_INT 3
68404: PPUSH
68405: CALL 60299 0 2
68409: ST_TO_ADDR
// p := [ ] ;
68410: LD_ADDR_VAR 0 11
68414: PUSH
68415: EMPTY
68416: ST_TO_ADDR
// if sort then
68417: LD_VAR 0 9
68421: IFFALSE 68537
// for i = 1 to 6 - mech do
68423: LD_ADDR_VAR 0 3
68427: PUSH
68428: DOUBLE
68429: LD_INT 1
68431: DEC
68432: ST_TO_ADDR
68433: LD_INT 6
68435: PUSH
68436: LD_VAR 0 7
68440: MINUS
68441: PUSH
68442: FOR_TO
68443: IFFALSE 68535
// begin if i = sort then
68445: LD_VAR 0 3
68449: PUSH
68450: LD_VAR 0 9
68454: EQUAL
68455: IFFALSE 68459
// break ;
68457: GO 68535
// if GetClass ( i ) = 3 then
68459: LD_VAR 0 3
68463: PPUSH
68464: CALL_OW 257
68468: PUSH
68469: LD_INT 3
68471: EQUAL
68472: IFFALSE 68476
// continue ;
68474: GO 68442
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68476: LD_ADDR_VAR 0 11
68480: PUSH
68481: LD_VAR 0 11
68485: PPUSH
68486: LD_VAR 0 11
68490: PUSH
68491: LD_INT 1
68493: PLUS
68494: PPUSH
68495: LD_VAR 0 9
68499: PUSH
68500: LD_VAR 0 3
68504: ARRAY
68505: PPUSH
68506: CALL_OW 2
68510: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68511: LD_ADDR_VAR 0 4
68515: PUSH
68516: LD_VAR 0 4
68520: PUSH
68521: LD_VAR 0 9
68525: PUSH
68526: LD_VAR 0 3
68530: ARRAY
68531: DIFF
68532: ST_TO_ADDR
// end ;
68533: GO 68442
68535: POP
68536: POP
// if p then
68537: LD_VAR 0 11
68541: IFFALSE 68566
// result := Replace ( result , 3 , p ) ;
68543: LD_ADDR_VAR 0 2
68547: PUSH
68548: LD_VAR 0 2
68552: PPUSH
68553: LD_INT 3
68555: PPUSH
68556: LD_VAR 0 11
68560: PPUSH
68561: CALL_OW 1
68565: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68566: LD_VAR 0 4
68570: PUSH
68571: LD_INT 6
68573: GREATER
68574: PUSH
68575: LD_VAR 0 6
68579: PUSH
68580: LD_INT 6
68582: LESS
68583: AND
68584: IFFALSE 68778
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68586: LD_ADDR_VAR 0 9
68590: PUSH
68591: LD_VAR 0 4
68595: PUSH
68596: LD_VAR 0 8
68600: PUSH
68601: LD_VAR 0 7
68605: UNION
68606: PUSH
68607: LD_VAR 0 6
68611: UNION
68612: DIFF
68613: PPUSH
68614: LD_INT 2
68616: PPUSH
68617: CALL 60299 0 2
68621: ST_TO_ADDR
// p := [ ] ;
68622: LD_ADDR_VAR 0 11
68626: PUSH
68627: EMPTY
68628: ST_TO_ADDR
// if sort then
68629: LD_VAR 0 9
68633: IFFALSE 68749
// for i = 1 to 6 - eng do
68635: LD_ADDR_VAR 0 3
68639: PUSH
68640: DOUBLE
68641: LD_INT 1
68643: DEC
68644: ST_TO_ADDR
68645: LD_INT 6
68647: PUSH
68648: LD_VAR 0 6
68652: MINUS
68653: PUSH
68654: FOR_TO
68655: IFFALSE 68747
// begin if i = sort then
68657: LD_VAR 0 3
68661: PUSH
68662: LD_VAR 0 9
68666: EQUAL
68667: IFFALSE 68671
// break ;
68669: GO 68747
// if GetClass ( i ) = 2 then
68671: LD_VAR 0 3
68675: PPUSH
68676: CALL_OW 257
68680: PUSH
68681: LD_INT 2
68683: EQUAL
68684: IFFALSE 68688
// continue ;
68686: GO 68654
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68688: LD_ADDR_VAR 0 11
68692: PUSH
68693: LD_VAR 0 11
68697: PPUSH
68698: LD_VAR 0 11
68702: PUSH
68703: LD_INT 1
68705: PLUS
68706: PPUSH
68707: LD_VAR 0 9
68711: PUSH
68712: LD_VAR 0 3
68716: ARRAY
68717: PPUSH
68718: CALL_OW 2
68722: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68723: LD_ADDR_VAR 0 4
68727: PUSH
68728: LD_VAR 0 4
68732: PUSH
68733: LD_VAR 0 9
68737: PUSH
68738: LD_VAR 0 3
68742: ARRAY
68743: DIFF
68744: ST_TO_ADDR
// end ;
68745: GO 68654
68747: POP
68748: POP
// if p then
68749: LD_VAR 0 11
68753: IFFALSE 68778
// result := Replace ( result , 2 , p ) ;
68755: LD_ADDR_VAR 0 2
68759: PUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: LD_INT 2
68767: PPUSH
68768: LD_VAR 0 11
68772: PPUSH
68773: CALL_OW 1
68777: ST_TO_ADDR
// end ; exit ;
68778: GO 70166
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68780: LD_EXP 63
68784: PUSH
68785: LD_EXP 62
68789: PUSH
68790: LD_VAR 0 1
68794: ARRAY
68795: ARRAY
68796: NOT
68797: PUSH
68798: LD_EXP 36
68802: PUSH
68803: LD_VAR 0 1
68807: ARRAY
68808: PPUSH
68809: LD_INT 30
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PPUSH
68819: CALL_OW 72
68823: AND
68824: PUSH
68825: LD_EXP 41
68829: PUSH
68830: LD_VAR 0 1
68834: ARRAY
68835: AND
68836: IFFALSE 69444
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68838: LD_ADDR_EXP 78
68842: PUSH
68843: LD_EXP 78
68847: PPUSH
68848: LD_VAR 0 1
68852: PPUSH
68853: LD_INT 5
68855: PPUSH
68856: CALL_OW 1
68860: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68861: LD_ADDR_VAR 0 2
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: ST_TO_ADDR
// if sci > 1 then
68884: LD_VAR 0 8
68888: PUSH
68889: LD_INT 1
68891: GREATER
68892: IFFALSE 68920
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68894: LD_ADDR_VAR 0 4
68898: PUSH
68899: LD_VAR 0 4
68903: PUSH
68904: LD_VAR 0 8
68908: PUSH
68909: LD_VAR 0 8
68913: PUSH
68914: LD_INT 1
68916: ARRAY
68917: DIFF
68918: DIFF
68919: ST_TO_ADDR
// if tmp and not sci then
68920: LD_VAR 0 4
68924: PUSH
68925: LD_VAR 0 8
68929: NOT
68930: AND
68931: IFFALSE 69000
// begin sort := SortBySkill ( tmp , 4 ) ;
68933: LD_ADDR_VAR 0 9
68937: PUSH
68938: LD_VAR 0 4
68942: PPUSH
68943: LD_INT 4
68945: PPUSH
68946: CALL 60299 0 2
68950: ST_TO_ADDR
// if sort then
68951: LD_VAR 0 9
68955: IFFALSE 68971
// p := sort [ 1 ] ;
68957: LD_ADDR_VAR 0 11
68961: PUSH
68962: LD_VAR 0 9
68966: PUSH
68967: LD_INT 1
68969: ARRAY
68970: ST_TO_ADDR
// if p then
68971: LD_VAR 0 11
68975: IFFALSE 69000
// result := Replace ( result , 4 , p ) ;
68977: LD_ADDR_VAR 0 2
68981: PUSH
68982: LD_VAR 0 2
68986: PPUSH
68987: LD_INT 4
68989: PPUSH
68990: LD_VAR 0 11
68994: PPUSH
68995: CALL_OW 1
68999: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69000: LD_ADDR_VAR 0 4
69004: PUSH
69005: LD_VAR 0 4
69009: PUSH
69010: LD_VAR 0 7
69014: DIFF
69015: ST_TO_ADDR
// if tmp and mech < 6 then
69016: LD_VAR 0 4
69020: PUSH
69021: LD_VAR 0 7
69025: PUSH
69026: LD_INT 6
69028: LESS
69029: AND
69030: IFFALSE 69218
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69032: LD_ADDR_VAR 0 9
69036: PUSH
69037: LD_VAR 0 4
69041: PUSH
69042: LD_VAR 0 8
69046: PUSH
69047: LD_VAR 0 7
69051: UNION
69052: DIFF
69053: PPUSH
69054: LD_INT 3
69056: PPUSH
69057: CALL 60299 0 2
69061: ST_TO_ADDR
// p := [ ] ;
69062: LD_ADDR_VAR 0 11
69066: PUSH
69067: EMPTY
69068: ST_TO_ADDR
// if sort then
69069: LD_VAR 0 9
69073: IFFALSE 69189
// for i = 1 to 6 - mech do
69075: LD_ADDR_VAR 0 3
69079: PUSH
69080: DOUBLE
69081: LD_INT 1
69083: DEC
69084: ST_TO_ADDR
69085: LD_INT 6
69087: PUSH
69088: LD_VAR 0 7
69092: MINUS
69093: PUSH
69094: FOR_TO
69095: IFFALSE 69187
// begin if i = sort then
69097: LD_VAR 0 3
69101: PUSH
69102: LD_VAR 0 9
69106: EQUAL
69107: IFFALSE 69111
// break ;
69109: GO 69187
// if GetClass ( i ) = 3 then
69111: LD_VAR 0 3
69115: PPUSH
69116: CALL_OW 257
69120: PUSH
69121: LD_INT 3
69123: EQUAL
69124: IFFALSE 69128
// continue ;
69126: GO 69094
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69128: LD_ADDR_VAR 0 11
69132: PUSH
69133: LD_VAR 0 11
69137: PPUSH
69138: LD_VAR 0 11
69142: PUSH
69143: LD_INT 1
69145: PLUS
69146: PPUSH
69147: LD_VAR 0 9
69151: PUSH
69152: LD_VAR 0 3
69156: ARRAY
69157: PPUSH
69158: CALL_OW 2
69162: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69163: LD_ADDR_VAR 0 4
69167: PUSH
69168: LD_VAR 0 4
69172: PUSH
69173: LD_VAR 0 9
69177: PUSH
69178: LD_VAR 0 3
69182: ARRAY
69183: DIFF
69184: ST_TO_ADDR
// end ;
69185: GO 69094
69187: POP
69188: POP
// if p then
69189: LD_VAR 0 11
69193: IFFALSE 69218
// result := Replace ( result , 3 , p ) ;
69195: LD_ADDR_VAR 0 2
69199: PUSH
69200: LD_VAR 0 2
69204: PPUSH
69205: LD_INT 3
69207: PPUSH
69208: LD_VAR 0 11
69212: PPUSH
69213: CALL_OW 1
69217: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69218: LD_ADDR_VAR 0 4
69222: PUSH
69223: LD_VAR 0 4
69227: PUSH
69228: LD_VAR 0 6
69232: DIFF
69233: ST_TO_ADDR
// if tmp and eng < 6 then
69234: LD_VAR 0 4
69238: PUSH
69239: LD_VAR 0 6
69243: PUSH
69244: LD_INT 6
69246: LESS
69247: AND
69248: IFFALSE 69442
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69250: LD_ADDR_VAR 0 9
69254: PUSH
69255: LD_VAR 0 4
69259: PUSH
69260: LD_VAR 0 8
69264: PUSH
69265: LD_VAR 0 7
69269: UNION
69270: PUSH
69271: LD_VAR 0 6
69275: UNION
69276: DIFF
69277: PPUSH
69278: LD_INT 2
69280: PPUSH
69281: CALL 60299 0 2
69285: ST_TO_ADDR
// p := [ ] ;
69286: LD_ADDR_VAR 0 11
69290: PUSH
69291: EMPTY
69292: ST_TO_ADDR
// if sort then
69293: LD_VAR 0 9
69297: IFFALSE 69413
// for i = 1 to 6 - eng do
69299: LD_ADDR_VAR 0 3
69303: PUSH
69304: DOUBLE
69305: LD_INT 1
69307: DEC
69308: ST_TO_ADDR
69309: LD_INT 6
69311: PUSH
69312: LD_VAR 0 6
69316: MINUS
69317: PUSH
69318: FOR_TO
69319: IFFALSE 69411
// begin if i = sort then
69321: LD_VAR 0 3
69325: PUSH
69326: LD_VAR 0 9
69330: EQUAL
69331: IFFALSE 69335
// break ;
69333: GO 69411
// if GetClass ( i ) = 2 then
69335: LD_VAR 0 3
69339: PPUSH
69340: CALL_OW 257
69344: PUSH
69345: LD_INT 2
69347: EQUAL
69348: IFFALSE 69352
// continue ;
69350: GO 69318
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69352: LD_ADDR_VAR 0 11
69356: PUSH
69357: LD_VAR 0 11
69361: PPUSH
69362: LD_VAR 0 11
69366: PUSH
69367: LD_INT 1
69369: PLUS
69370: PPUSH
69371: LD_VAR 0 9
69375: PUSH
69376: LD_VAR 0 3
69380: ARRAY
69381: PPUSH
69382: CALL_OW 2
69386: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69387: LD_ADDR_VAR 0 4
69391: PUSH
69392: LD_VAR 0 4
69396: PUSH
69397: LD_VAR 0 9
69401: PUSH
69402: LD_VAR 0 3
69406: ARRAY
69407: DIFF
69408: ST_TO_ADDR
// end ;
69409: GO 69318
69411: POP
69412: POP
// if p then
69413: LD_VAR 0 11
69417: IFFALSE 69442
// result := Replace ( result , 2 , p ) ;
69419: LD_ADDR_VAR 0 2
69423: PUSH
69424: LD_VAR 0 2
69428: PPUSH
69429: LD_INT 2
69431: PPUSH
69432: LD_VAR 0 11
69436: PPUSH
69437: CALL_OW 1
69441: ST_TO_ADDR
// end ; exit ;
69442: GO 70166
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69444: LD_EXP 63
69448: PUSH
69449: LD_EXP 62
69453: PUSH
69454: LD_VAR 0 1
69458: ARRAY
69459: ARRAY
69460: NOT
69461: PUSH
69462: LD_EXP 36
69466: PUSH
69467: LD_VAR 0 1
69471: ARRAY
69472: PPUSH
69473: LD_INT 30
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PPUSH
69483: CALL_OW 72
69487: AND
69488: PUSH
69489: LD_EXP 41
69493: PUSH
69494: LD_VAR 0 1
69498: ARRAY
69499: NOT
69500: AND
69501: IFFALSE 70166
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69503: LD_ADDR_EXP 78
69507: PUSH
69508: LD_EXP 78
69512: PPUSH
69513: LD_VAR 0 1
69517: PPUSH
69518: LD_INT 6
69520: PPUSH
69521: CALL_OW 1
69525: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69526: LD_ADDR_VAR 0 2
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: LD_INT 0
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: ST_TO_ADDR
// if sci >= 1 then
69549: LD_VAR 0 8
69553: PUSH
69554: LD_INT 1
69556: GREATEREQUAL
69557: IFFALSE 69579
// tmp := tmp diff sci [ 1 ] ;
69559: LD_ADDR_VAR 0 4
69563: PUSH
69564: LD_VAR 0 4
69568: PUSH
69569: LD_VAR 0 8
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: DIFF
69578: ST_TO_ADDR
// if tmp and not sci then
69579: LD_VAR 0 4
69583: PUSH
69584: LD_VAR 0 8
69588: NOT
69589: AND
69590: IFFALSE 69659
// begin sort := SortBySkill ( tmp , 4 ) ;
69592: LD_ADDR_VAR 0 9
69596: PUSH
69597: LD_VAR 0 4
69601: PPUSH
69602: LD_INT 4
69604: PPUSH
69605: CALL 60299 0 2
69609: ST_TO_ADDR
// if sort then
69610: LD_VAR 0 9
69614: IFFALSE 69630
// p := sort [ 1 ] ;
69616: LD_ADDR_VAR 0 11
69620: PUSH
69621: LD_VAR 0 9
69625: PUSH
69626: LD_INT 1
69628: ARRAY
69629: ST_TO_ADDR
// if p then
69630: LD_VAR 0 11
69634: IFFALSE 69659
// result := Replace ( result , 4 , p ) ;
69636: LD_ADDR_VAR 0 2
69640: PUSH
69641: LD_VAR 0 2
69645: PPUSH
69646: LD_INT 4
69648: PPUSH
69649: LD_VAR 0 11
69653: PPUSH
69654: CALL_OW 1
69658: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69659: LD_ADDR_VAR 0 4
69663: PUSH
69664: LD_VAR 0 4
69668: PUSH
69669: LD_VAR 0 7
69673: DIFF
69674: ST_TO_ADDR
// if tmp and mech < 6 then
69675: LD_VAR 0 4
69679: PUSH
69680: LD_VAR 0 7
69684: PUSH
69685: LD_INT 6
69687: LESS
69688: AND
69689: IFFALSE 69871
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69691: LD_ADDR_VAR 0 9
69695: PUSH
69696: LD_VAR 0 4
69700: PUSH
69701: LD_VAR 0 7
69705: DIFF
69706: PPUSH
69707: LD_INT 3
69709: PPUSH
69710: CALL 60299 0 2
69714: ST_TO_ADDR
// p := [ ] ;
69715: LD_ADDR_VAR 0 11
69719: PUSH
69720: EMPTY
69721: ST_TO_ADDR
// if sort then
69722: LD_VAR 0 9
69726: IFFALSE 69842
// for i = 1 to 6 - mech do
69728: LD_ADDR_VAR 0 3
69732: PUSH
69733: DOUBLE
69734: LD_INT 1
69736: DEC
69737: ST_TO_ADDR
69738: LD_INT 6
69740: PUSH
69741: LD_VAR 0 7
69745: MINUS
69746: PUSH
69747: FOR_TO
69748: IFFALSE 69840
// begin if i = sort then
69750: LD_VAR 0 3
69754: PUSH
69755: LD_VAR 0 9
69759: EQUAL
69760: IFFALSE 69764
// break ;
69762: GO 69840
// if GetClass ( i ) = 3 then
69764: LD_VAR 0 3
69768: PPUSH
69769: CALL_OW 257
69773: PUSH
69774: LD_INT 3
69776: EQUAL
69777: IFFALSE 69781
// continue ;
69779: GO 69747
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69781: LD_ADDR_VAR 0 11
69785: PUSH
69786: LD_VAR 0 11
69790: PPUSH
69791: LD_VAR 0 11
69795: PUSH
69796: LD_INT 1
69798: PLUS
69799: PPUSH
69800: LD_VAR 0 9
69804: PUSH
69805: LD_VAR 0 3
69809: ARRAY
69810: PPUSH
69811: CALL_OW 2
69815: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69816: LD_ADDR_VAR 0 4
69820: PUSH
69821: LD_VAR 0 4
69825: PUSH
69826: LD_VAR 0 9
69830: PUSH
69831: LD_VAR 0 3
69835: ARRAY
69836: DIFF
69837: ST_TO_ADDR
// end ;
69838: GO 69747
69840: POP
69841: POP
// if p then
69842: LD_VAR 0 11
69846: IFFALSE 69871
// result := Replace ( result , 3 , p ) ;
69848: LD_ADDR_VAR 0 2
69852: PUSH
69853: LD_VAR 0 2
69857: PPUSH
69858: LD_INT 3
69860: PPUSH
69861: LD_VAR 0 11
69865: PPUSH
69866: CALL_OW 1
69870: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69871: LD_ADDR_VAR 0 4
69875: PUSH
69876: LD_VAR 0 4
69880: PUSH
69881: LD_VAR 0 6
69885: DIFF
69886: ST_TO_ADDR
// if tmp and eng < 4 then
69887: LD_VAR 0 4
69891: PUSH
69892: LD_VAR 0 6
69896: PUSH
69897: LD_INT 4
69899: LESS
69900: AND
69901: IFFALSE 70091
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69903: LD_ADDR_VAR 0 9
69907: PUSH
69908: LD_VAR 0 4
69912: PUSH
69913: LD_VAR 0 7
69917: PUSH
69918: LD_VAR 0 6
69922: UNION
69923: DIFF
69924: PPUSH
69925: LD_INT 2
69927: PPUSH
69928: CALL 60299 0 2
69932: ST_TO_ADDR
// p := [ ] ;
69933: LD_ADDR_VAR 0 11
69937: PUSH
69938: EMPTY
69939: ST_TO_ADDR
// if sort then
69940: LD_VAR 0 9
69944: IFFALSE 70060
// for i = 1 to 4 - eng do
69946: LD_ADDR_VAR 0 3
69950: PUSH
69951: DOUBLE
69952: LD_INT 1
69954: DEC
69955: ST_TO_ADDR
69956: LD_INT 4
69958: PUSH
69959: LD_VAR 0 6
69963: MINUS
69964: PUSH
69965: FOR_TO
69966: IFFALSE 70058
// begin if i = sort then
69968: LD_VAR 0 3
69972: PUSH
69973: LD_VAR 0 9
69977: EQUAL
69978: IFFALSE 69982
// break ;
69980: GO 70058
// if GetClass ( i ) = 2 then
69982: LD_VAR 0 3
69986: PPUSH
69987: CALL_OW 257
69991: PUSH
69992: LD_INT 2
69994: EQUAL
69995: IFFALSE 69999
// continue ;
69997: GO 69965
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69999: LD_ADDR_VAR 0 11
70003: PUSH
70004: LD_VAR 0 11
70008: PPUSH
70009: LD_VAR 0 11
70013: PUSH
70014: LD_INT 1
70016: PLUS
70017: PPUSH
70018: LD_VAR 0 9
70022: PUSH
70023: LD_VAR 0 3
70027: ARRAY
70028: PPUSH
70029: CALL_OW 2
70033: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70034: LD_ADDR_VAR 0 4
70038: PUSH
70039: LD_VAR 0 4
70043: PUSH
70044: LD_VAR 0 9
70048: PUSH
70049: LD_VAR 0 3
70053: ARRAY
70054: DIFF
70055: ST_TO_ADDR
// end ;
70056: GO 69965
70058: POP
70059: POP
// if p then
70060: LD_VAR 0 11
70064: IFFALSE 70089
// result := Replace ( result , 2 , p ) ;
70066: LD_ADDR_VAR 0 2
70070: PUSH
70071: LD_VAR 0 2
70075: PPUSH
70076: LD_INT 2
70078: PPUSH
70079: LD_VAR 0 11
70083: PPUSH
70084: CALL_OW 1
70088: ST_TO_ADDR
// end else
70089: GO 70135
// for i = eng downto 5 do
70091: LD_ADDR_VAR 0 3
70095: PUSH
70096: DOUBLE
70097: LD_VAR 0 6
70101: INC
70102: ST_TO_ADDR
70103: LD_INT 5
70105: PUSH
70106: FOR_DOWNTO
70107: IFFALSE 70133
// tmp := tmp union eng [ i ] ;
70109: LD_ADDR_VAR 0 4
70113: PUSH
70114: LD_VAR 0 4
70118: PUSH
70119: LD_VAR 0 6
70123: PUSH
70124: LD_VAR 0 3
70128: ARRAY
70129: UNION
70130: ST_TO_ADDR
70131: GO 70106
70133: POP
70134: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70135: LD_ADDR_VAR 0 2
70139: PUSH
70140: LD_VAR 0 2
70144: PPUSH
70145: LD_INT 1
70147: PPUSH
70148: LD_VAR 0 4
70152: PUSH
70153: LD_VAR 0 5
70157: DIFF
70158: PPUSH
70159: CALL_OW 1
70163: ST_TO_ADDR
// exit ;
70164: GO 70166
// end ; end ;
70166: LD_VAR 0 2
70170: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70171: LD_INT 0
70173: PPUSH
70174: PPUSH
70175: PPUSH
// if not mc_bases then
70176: LD_EXP 36
70180: NOT
70181: IFFALSE 70185
// exit ;
70183: GO 70291
// for i = 1 to mc_bases do
70185: LD_ADDR_VAR 0 2
70189: PUSH
70190: DOUBLE
70191: LD_INT 1
70193: DEC
70194: ST_TO_ADDR
70195: LD_EXP 36
70199: PUSH
70200: FOR_TO
70201: IFFALSE 70282
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70203: LD_ADDR_VAR 0 3
70207: PUSH
70208: LD_EXP 36
70212: PUSH
70213: LD_VAR 0 2
70217: ARRAY
70218: PPUSH
70219: LD_INT 21
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 3
70231: PUSH
70232: LD_INT 24
70234: PUSH
70235: LD_INT 1000
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PPUSH
70250: CALL_OW 72
70254: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70255: LD_ADDR_EXP 37
70259: PUSH
70260: LD_EXP 37
70264: PPUSH
70265: LD_VAR 0 2
70269: PPUSH
70270: LD_VAR 0 3
70274: PPUSH
70275: CALL_OW 1
70279: ST_TO_ADDR
// end ;
70280: GO 70200
70282: POP
70283: POP
// RaiseSailEvent ( 101 ) ;
70284: LD_INT 101
70286: PPUSH
70287: CALL_OW 427
// end ;
70291: LD_VAR 0 1
70295: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70296: LD_INT 0
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
// if not mc_bases then
70305: LD_EXP 36
70309: NOT
70310: IFFALSE 70314
// exit ;
70312: GO 70887
// for i = 1 to mc_bases do
70314: LD_ADDR_VAR 0 2
70318: PUSH
70319: DOUBLE
70320: LD_INT 1
70322: DEC
70323: ST_TO_ADDR
70324: LD_EXP 36
70328: PUSH
70329: FOR_TO
70330: IFFALSE 70878
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70332: LD_ADDR_VAR 0 5
70336: PUSH
70337: LD_EXP 36
70341: PUSH
70342: LD_VAR 0 2
70346: ARRAY
70347: PUSH
70348: LD_EXP 65
70352: PUSH
70353: LD_VAR 0 2
70357: ARRAY
70358: UNION
70359: PPUSH
70360: LD_INT 21
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 1
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 54
70378: PUSH
70379: EMPTY
70380: LIST
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: LD_INT 24
70391: PUSH
70392: LD_INT 800
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PPUSH
70412: CALL_OW 72
70416: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70417: LD_ADDR_VAR 0 6
70421: PUSH
70422: LD_EXP 36
70426: PUSH
70427: LD_VAR 0 2
70431: ARRAY
70432: PPUSH
70433: LD_INT 21
70435: PUSH
70436: LD_INT 1
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 3
70448: PUSH
70449: LD_INT 54
70451: PUSH
70452: EMPTY
70453: LIST
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: LD_INT 24
70464: PUSH
70465: LD_INT 250
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PPUSH
70485: CALL_OW 72
70489: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70490: LD_ADDR_VAR 0 7
70494: PUSH
70495: LD_VAR 0 5
70499: PUSH
70500: LD_VAR 0 6
70504: DIFF
70505: ST_TO_ADDR
// if not need_heal_1 then
70506: LD_VAR 0 6
70510: NOT
70511: IFFALSE 70544
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70513: LD_ADDR_EXP 39
70517: PUSH
70518: LD_EXP 39
70522: PPUSH
70523: LD_VAR 0 2
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PPUSH
70535: EMPTY
70536: PPUSH
70537: CALL 26051 0 3
70541: ST_TO_ADDR
70542: GO 70614
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70544: LD_ADDR_EXP 39
70548: PUSH
70549: LD_EXP 39
70553: PPUSH
70554: LD_VAR 0 2
70558: PUSH
70559: LD_INT 1
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PPUSH
70566: LD_EXP 39
70570: PUSH
70571: LD_VAR 0 2
70575: ARRAY
70576: PUSH
70577: LD_INT 1
70579: ARRAY
70580: PPUSH
70581: LD_INT 3
70583: PUSH
70584: LD_INT 24
70586: PUSH
70587: LD_INT 1000
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PPUSH
70598: CALL_OW 72
70602: PUSH
70603: LD_VAR 0 6
70607: UNION
70608: PPUSH
70609: CALL 26051 0 3
70613: ST_TO_ADDR
// if not need_heal_2 then
70614: LD_VAR 0 7
70618: NOT
70619: IFFALSE 70652
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70621: LD_ADDR_EXP 39
70625: PUSH
70626: LD_EXP 39
70630: PPUSH
70631: LD_VAR 0 2
70635: PUSH
70636: LD_INT 2
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PPUSH
70643: EMPTY
70644: PPUSH
70645: CALL 26051 0 3
70649: ST_TO_ADDR
70650: GO 70684
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70652: LD_ADDR_EXP 39
70656: PUSH
70657: LD_EXP 39
70661: PPUSH
70662: LD_VAR 0 2
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PPUSH
70674: LD_VAR 0 7
70678: PPUSH
70679: CALL 26051 0 3
70683: ST_TO_ADDR
// if need_heal_2 then
70684: LD_VAR 0 7
70688: IFFALSE 70860
// for j in need_heal_2 do
70690: LD_ADDR_VAR 0 3
70694: PUSH
70695: LD_VAR 0 7
70699: PUSH
70700: FOR_IN
70701: IFFALSE 70858
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70703: LD_ADDR_VAR 0 5
70707: PUSH
70708: LD_EXP 36
70712: PUSH
70713: LD_VAR 0 2
70717: ARRAY
70718: PPUSH
70719: LD_INT 2
70721: PUSH
70722: LD_INT 30
70724: PUSH
70725: LD_INT 6
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 30
70734: PUSH
70735: LD_INT 7
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 30
70744: PUSH
70745: LD_INT 8
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 30
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 30
70764: PUSH
70765: LD_INT 1
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 25
70774: PUSH
70775: LD_INT 4
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: PPUSH
70791: CALL_OW 72
70795: ST_TO_ADDR
// if tmp then
70796: LD_VAR 0 5
70800: IFFALSE 70856
// begin k := NearestUnitToUnit ( tmp , j ) ;
70802: LD_ADDR_VAR 0 4
70806: PUSH
70807: LD_VAR 0 5
70811: PPUSH
70812: LD_VAR 0 3
70816: PPUSH
70817: CALL_OW 74
70821: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_VAR 0 4
70831: PPUSH
70832: CALL_OW 296
70836: PUSH
70837: LD_INT 7
70839: GREATER
70840: IFFALSE 70856
// ComMoveUnit ( j , k ) ;
70842: LD_VAR 0 3
70846: PPUSH
70847: LD_VAR 0 4
70851: PPUSH
70852: CALL_OW 112
// end ; end ;
70856: GO 70700
70858: POP
70859: POP
// if not need_heal_1 and not need_heal_2 then
70860: LD_VAR 0 6
70864: NOT
70865: PUSH
70866: LD_VAR 0 7
70870: NOT
70871: AND
70872: IFFALSE 70876
// continue ;
70874: GO 70329
// end ;
70876: GO 70329
70878: POP
70879: POP
// RaiseSailEvent ( 102 ) ;
70880: LD_INT 102
70882: PPUSH
70883: CALL_OW 427
// end ;
70887: LD_VAR 0 1
70891: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70892: LD_INT 0
70894: PPUSH
70895: PPUSH
70896: PPUSH
70897: PPUSH
70898: PPUSH
// if not mc_bases then
70899: LD_EXP 36
70903: NOT
70904: IFFALSE 70908
// exit ;
70906: GO 71293
// for i = 1 to mc_bases do
70908: LD_ADDR_VAR 0 2
70912: PUSH
70913: DOUBLE
70914: LD_INT 1
70916: DEC
70917: ST_TO_ADDR
70918: LD_EXP 36
70922: PUSH
70923: FOR_TO
70924: IFFALSE 71291
// begin if not mc_building_need_repair [ i ] then
70926: LD_EXP 37
70930: PUSH
70931: LD_VAR 0 2
70935: ARRAY
70936: NOT
70937: IFFALSE 70975
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70939: LD_ADDR_EXP 38
70943: PUSH
70944: LD_EXP 38
70948: PPUSH
70949: LD_VAR 0 2
70953: PPUSH
70954: EMPTY
70955: PPUSH
70956: CALL_OW 1
70960: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70961: LD_VAR 0 2
70965: PPUSH
70966: LD_INT 101
70968: PPUSH
70969: CALL 66013 0 2
// continue ;
70973: GO 70923
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70975: LD_ADDR_EXP 42
70979: PUSH
70980: LD_EXP 42
70984: PPUSH
70985: LD_VAR 0 2
70989: PPUSH
70990: EMPTY
70991: PPUSH
70992: CALL_OW 1
70996: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70997: LD_VAR 0 2
71001: PPUSH
71002: LD_INT 103
71004: PPUSH
71005: CALL 66013 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71009: LD_ADDR_VAR 0 5
71013: PUSH
71014: LD_EXP 36
71018: PUSH
71019: LD_VAR 0 2
71023: ARRAY
71024: PUSH
71025: LD_EXP 65
71029: PUSH
71030: LD_VAR 0 2
71034: ARRAY
71035: UNION
71036: PPUSH
71037: LD_INT 2
71039: PUSH
71040: LD_INT 25
71042: PUSH
71043: LD_INT 2
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 25
71052: PUSH
71053: LD_INT 16
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: PPUSH
71068: CALL_OW 72
71072: ST_TO_ADDR
// if not tmp then
71073: LD_VAR 0 5
71077: NOT
71078: IFFALSE 71082
// continue ;
71080: GO 70923
// for j in tmp do
71082: LD_ADDR_VAR 0 3
71086: PUSH
71087: LD_VAR 0 5
71091: PUSH
71092: FOR_IN
71093: IFFALSE 71287
// begin if mc_need_heal [ i ] then
71095: LD_EXP 39
71099: PUSH
71100: LD_VAR 0 2
71104: ARRAY
71105: IFFALSE 71153
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71107: LD_VAR 0 3
71111: PUSH
71112: LD_EXP 39
71116: PUSH
71117: LD_VAR 0 2
71121: ARRAY
71122: PUSH
71123: LD_INT 1
71125: ARRAY
71126: IN
71127: PUSH
71128: LD_VAR 0 3
71132: PUSH
71133: LD_EXP 39
71137: PUSH
71138: LD_VAR 0 2
71142: ARRAY
71143: PUSH
71144: LD_INT 2
71146: ARRAY
71147: IN
71148: OR
71149: IFFALSE 71153
// continue ;
71151: GO 71092
// if IsInUnit ( j ) then
71153: LD_VAR 0 3
71157: PPUSH
71158: CALL_OW 310
71162: IFFALSE 71173
// ComExitBuilding ( j ) ;
71164: LD_VAR 0 3
71168: PPUSH
71169: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71173: LD_VAR 0 3
71177: PUSH
71178: LD_EXP 38
71182: PUSH
71183: LD_VAR 0 2
71187: ARRAY
71188: IN
71189: NOT
71190: IFFALSE 71248
// begin SetTag ( j , 101 ) ;
71192: LD_VAR 0 3
71196: PPUSH
71197: LD_INT 101
71199: PPUSH
71200: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71204: LD_ADDR_EXP 38
71208: PUSH
71209: LD_EXP 38
71213: PPUSH
71214: LD_VAR 0 2
71218: PUSH
71219: LD_EXP 38
71223: PUSH
71224: LD_VAR 0 2
71228: ARRAY
71229: PUSH
71230: LD_INT 1
71232: PLUS
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PPUSH
71238: LD_VAR 0 3
71242: PPUSH
71243: CALL 26051 0 3
71247: ST_TO_ADDR
// end ; wait ( 1 ) ;
71248: LD_INT 1
71250: PPUSH
71251: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71255: LD_VAR 0 3
71259: PPUSH
71260: LD_EXP 37
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PPUSH
71271: LD_VAR 0 3
71275: PPUSH
71276: CALL_OW 74
71280: PPUSH
71281: CALL_OW 130
// end ;
71285: GO 71092
71287: POP
71288: POP
// end ;
71289: GO 70923
71291: POP
71292: POP
// end ;
71293: LD_VAR 0 1
71297: RET
// export function MC_Heal ; var i , j , tmp ; begin
71298: LD_INT 0
71300: PPUSH
71301: PPUSH
71302: PPUSH
71303: PPUSH
// if not mc_bases then
71304: LD_EXP 36
71308: NOT
71309: IFFALSE 71313
// exit ;
71311: GO 71715
// for i = 1 to mc_bases do
71313: LD_ADDR_VAR 0 2
71317: PUSH
71318: DOUBLE
71319: LD_INT 1
71321: DEC
71322: ST_TO_ADDR
71323: LD_EXP 36
71327: PUSH
71328: FOR_TO
71329: IFFALSE 71713
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71331: LD_EXP 39
71335: PUSH
71336: LD_VAR 0 2
71340: ARRAY
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: NOT
71346: PUSH
71347: LD_EXP 39
71351: PUSH
71352: LD_VAR 0 2
71356: ARRAY
71357: PUSH
71358: LD_INT 2
71360: ARRAY
71361: NOT
71362: AND
71363: IFFALSE 71401
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71365: LD_ADDR_EXP 40
71369: PUSH
71370: LD_EXP 40
71374: PPUSH
71375: LD_VAR 0 2
71379: PPUSH
71380: EMPTY
71381: PPUSH
71382: CALL_OW 1
71386: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71387: LD_VAR 0 2
71391: PPUSH
71392: LD_INT 102
71394: PPUSH
71395: CALL 66013 0 2
// continue ;
71399: GO 71328
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71401: LD_ADDR_VAR 0 4
71405: PUSH
71406: LD_EXP 36
71410: PUSH
71411: LD_VAR 0 2
71415: ARRAY
71416: PPUSH
71417: LD_INT 25
71419: PUSH
71420: LD_INT 4
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 72
71431: ST_TO_ADDR
// if not tmp then
71432: LD_VAR 0 4
71436: NOT
71437: IFFALSE 71441
// continue ;
71439: GO 71328
// if mc_taming [ i ] then
71441: LD_EXP 67
71445: PUSH
71446: LD_VAR 0 2
71450: ARRAY
71451: IFFALSE 71475
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71453: LD_ADDR_EXP 67
71457: PUSH
71458: LD_EXP 67
71462: PPUSH
71463: LD_VAR 0 2
71467: PPUSH
71468: EMPTY
71469: PPUSH
71470: CALL_OW 1
71474: ST_TO_ADDR
// for j in tmp do
71475: LD_ADDR_VAR 0 3
71479: PUSH
71480: LD_VAR 0 4
71484: PUSH
71485: FOR_IN
71486: IFFALSE 71709
// begin if IsInUnit ( j ) then
71488: LD_VAR 0 3
71492: PPUSH
71493: CALL_OW 310
71497: IFFALSE 71508
// ComExitBuilding ( j ) ;
71499: LD_VAR 0 3
71503: PPUSH
71504: CALL_OW 122
// if not j in mc_healers [ i ] then
71508: LD_VAR 0 3
71512: PUSH
71513: LD_EXP 40
71517: PUSH
71518: LD_VAR 0 2
71522: ARRAY
71523: IN
71524: NOT
71525: IFFALSE 71571
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
71527: LD_ADDR_EXP 40
71531: PUSH
71532: LD_EXP 40
71536: PPUSH
71537: LD_VAR 0 2
71541: PUSH
71542: LD_EXP 40
71546: PUSH
71547: LD_VAR 0 2
71551: ARRAY
71552: PUSH
71553: LD_INT 1
71555: PLUS
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PPUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: CALL 26051 0 3
71570: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71571: LD_VAR 0 3
71575: PPUSH
71576: CALL_OW 110
71580: PUSH
71581: LD_INT 102
71583: NONEQUAL
71584: IFFALSE 71598
// SetTag ( j , 102 ) ;
71586: LD_VAR 0 3
71590: PPUSH
71591: LD_INT 102
71593: PPUSH
71594: CALL_OW 109
// Wait ( 3 ) ;
71598: LD_INT 3
71600: PPUSH
71601: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
71605: LD_EXP 39
71609: PUSH
71610: LD_VAR 0 2
71614: ARRAY
71615: PUSH
71616: LD_INT 1
71618: ARRAY
71619: IFFALSE 71651
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71621: LD_VAR 0 3
71625: PPUSH
71626: LD_EXP 39
71630: PUSH
71631: LD_VAR 0 2
71635: ARRAY
71636: PUSH
71637: LD_INT 1
71639: ARRAY
71640: PUSH
71641: LD_INT 1
71643: ARRAY
71644: PPUSH
71645: CALL_OW 128
71649: GO 71707
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71651: LD_VAR 0 3
71655: PPUSH
71656: CALL_OW 314
71660: NOT
71661: PUSH
71662: LD_EXP 39
71666: PUSH
71667: LD_VAR 0 2
71671: ARRAY
71672: PUSH
71673: LD_INT 2
71675: ARRAY
71676: AND
71677: IFFALSE 71707
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71679: LD_VAR 0 3
71683: PPUSH
71684: LD_EXP 39
71688: PUSH
71689: LD_VAR 0 2
71693: ARRAY
71694: PUSH
71695: LD_INT 2
71697: ARRAY
71698: PUSH
71699: LD_INT 1
71701: ARRAY
71702: PPUSH
71703: CALL_OW 128
// end ;
71707: GO 71485
71709: POP
71710: POP
// end ;
71711: GO 71328
71713: POP
71714: POP
// end ;
71715: LD_VAR 0 1
71719: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
// if not mc_bases then
71727: LD_EXP 36
71731: NOT
71732: IFFALSE 71736
// exit ;
71734: GO 72879
// for i = 1 to mc_bases do
71736: LD_ADDR_VAR 0 2
71740: PUSH
71741: DOUBLE
71742: LD_INT 1
71744: DEC
71745: ST_TO_ADDR
71746: LD_EXP 36
71750: PUSH
71751: FOR_TO
71752: IFFALSE 72877
// begin if mc_scan [ i ] then
71754: LD_EXP 59
71758: PUSH
71759: LD_VAR 0 2
71763: ARRAY
71764: IFFALSE 71768
// continue ;
71766: GO 71751
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71768: LD_EXP 41
71772: PUSH
71773: LD_VAR 0 2
71777: ARRAY
71778: NOT
71779: PUSH
71780: LD_EXP 43
71784: PUSH
71785: LD_VAR 0 2
71789: ARRAY
71790: NOT
71791: AND
71792: PUSH
71793: LD_EXP 42
71797: PUSH
71798: LD_VAR 0 2
71802: ARRAY
71803: AND
71804: IFFALSE 71842
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71806: LD_ADDR_EXP 42
71810: PUSH
71811: LD_EXP 42
71815: PPUSH
71816: LD_VAR 0 2
71820: PPUSH
71821: EMPTY
71822: PPUSH
71823: CALL_OW 1
71827: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71828: LD_VAR 0 2
71832: PPUSH
71833: LD_INT 103
71835: PPUSH
71836: CALL 66013 0 2
// continue ;
71840: GO 71751
// end ; if mc_construct_list [ i ] then
71842: LD_EXP 43
71846: PUSH
71847: LD_VAR 0 2
71851: ARRAY
71852: IFFALSE 72072
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71854: LD_ADDR_VAR 0 4
71858: PUSH
71859: LD_EXP 36
71863: PUSH
71864: LD_VAR 0 2
71868: ARRAY
71869: PPUSH
71870: LD_INT 25
71872: PUSH
71873: LD_INT 2
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 72
71884: PUSH
71885: LD_EXP 38
71889: PUSH
71890: LD_VAR 0 2
71894: ARRAY
71895: DIFF
71896: ST_TO_ADDR
// if not tmp then
71897: LD_VAR 0 4
71901: NOT
71902: IFFALSE 71906
// continue ;
71904: GO 71751
// for j in tmp do
71906: LD_ADDR_VAR 0 3
71910: PUSH
71911: LD_VAR 0 4
71915: PUSH
71916: FOR_IN
71917: IFFALSE 72068
// begin if not mc_builders [ i ] then
71919: LD_EXP 42
71923: PUSH
71924: LD_VAR 0 2
71928: ARRAY
71929: NOT
71930: IFFALSE 71988
// begin SetTag ( j , 103 ) ;
71932: LD_VAR 0 3
71936: PPUSH
71937: LD_INT 103
71939: PPUSH
71940: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71944: LD_ADDR_EXP 42
71948: PUSH
71949: LD_EXP 42
71953: PPUSH
71954: LD_VAR 0 2
71958: PUSH
71959: LD_EXP 42
71963: PUSH
71964: LD_VAR 0 2
71968: ARRAY
71969: PUSH
71970: LD_INT 1
71972: PLUS
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PPUSH
71978: LD_VAR 0 3
71982: PPUSH
71983: CALL 26051 0 3
71987: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71988: LD_VAR 0 3
71992: PPUSH
71993: CALL_OW 310
71997: IFFALSE 72008
// ComExitBuilding ( j ) ;
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 122
// wait ( 3 ) ;
72008: LD_INT 3
72010: PPUSH
72011: CALL_OW 67
// if not mc_construct_list [ i ] then
72015: LD_EXP 43
72019: PUSH
72020: LD_VAR 0 2
72024: ARRAY
72025: NOT
72026: IFFALSE 72030
// break ;
72028: GO 72068
// if not HasTask ( j ) then
72030: LD_VAR 0 3
72034: PPUSH
72035: CALL_OW 314
72039: NOT
72040: IFFALSE 72066
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72042: LD_VAR 0 3
72046: PPUSH
72047: LD_EXP 43
72051: PUSH
72052: LD_VAR 0 2
72056: ARRAY
72057: PUSH
72058: LD_INT 1
72060: ARRAY
72061: PPUSH
72062: CALL 28902 0 2
// end ;
72066: GO 71916
72068: POP
72069: POP
// end else
72070: GO 72875
// if mc_build_list [ i ] then
72072: LD_EXP 41
72076: PUSH
72077: LD_VAR 0 2
72081: ARRAY
72082: IFFALSE 72875
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72084: LD_ADDR_VAR 0 5
72088: PUSH
72089: LD_EXP 36
72093: PUSH
72094: LD_VAR 0 2
72098: ARRAY
72099: PPUSH
72100: LD_INT 2
72102: PUSH
72103: LD_INT 30
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 30
72115: PUSH
72116: LD_INT 1
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: PPUSH
72128: CALL_OW 72
72132: ST_TO_ADDR
// if depot then
72133: LD_VAR 0 5
72137: IFFALSE 72155
// depot := depot [ 1 ] else
72139: LD_ADDR_VAR 0 5
72143: PUSH
72144: LD_VAR 0 5
72148: PUSH
72149: LD_INT 1
72151: ARRAY
72152: ST_TO_ADDR
72153: GO 72163
// depot := 0 ;
72155: LD_ADDR_VAR 0 5
72159: PUSH
72160: LD_INT 0
72162: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72163: LD_EXP 41
72167: PUSH
72168: LD_VAR 0 2
72172: ARRAY
72173: PUSH
72174: LD_INT 1
72176: ARRAY
72177: PUSH
72178: LD_INT 1
72180: ARRAY
72181: PPUSH
72182: CALL 28732 0 1
72186: PUSH
72187: LD_EXP 36
72191: PUSH
72192: LD_VAR 0 2
72196: ARRAY
72197: PPUSH
72198: LD_INT 2
72200: PUSH
72201: LD_INT 30
72203: PUSH
72204: LD_INT 2
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 30
72213: PUSH
72214: LD_INT 3
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: PPUSH
72226: CALL_OW 72
72230: NOT
72231: AND
72232: IFFALSE 72337
// begin for j = 1 to mc_build_list [ i ] do
72234: LD_ADDR_VAR 0 3
72238: PUSH
72239: DOUBLE
72240: LD_INT 1
72242: DEC
72243: ST_TO_ADDR
72244: LD_EXP 41
72248: PUSH
72249: LD_VAR 0 2
72253: ARRAY
72254: PUSH
72255: FOR_TO
72256: IFFALSE 72335
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72258: LD_EXP 41
72262: PUSH
72263: LD_VAR 0 2
72267: ARRAY
72268: PUSH
72269: LD_VAR 0 3
72273: ARRAY
72274: PUSH
72275: LD_INT 1
72277: ARRAY
72278: PUSH
72279: LD_INT 2
72281: EQUAL
72282: IFFALSE 72333
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72284: LD_ADDR_EXP 41
72288: PUSH
72289: LD_EXP 41
72293: PPUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_EXP 41
72303: PUSH
72304: LD_VAR 0 2
72308: ARRAY
72309: PPUSH
72310: LD_VAR 0 3
72314: PPUSH
72315: LD_INT 1
72317: PPUSH
72318: LD_INT 0
72320: PPUSH
72321: CALL 25469 0 4
72325: PPUSH
72326: CALL_OW 1
72330: ST_TO_ADDR
// break ;
72331: GO 72335
// end ;
72333: GO 72255
72335: POP
72336: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72337: LD_EXP 41
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: PUSH
72348: LD_INT 1
72350: ARRAY
72351: PUSH
72352: LD_INT 1
72354: ARRAY
72355: PUSH
72356: LD_INT 0
72358: EQUAL
72359: PUSH
72360: LD_VAR 0 5
72364: PUSH
72365: LD_VAR 0 5
72369: PPUSH
72370: LD_EXP 41
72374: PUSH
72375: LD_VAR 0 2
72379: ARRAY
72380: PUSH
72381: LD_INT 1
72383: ARRAY
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PPUSH
72389: LD_EXP 41
72393: PUSH
72394: LD_VAR 0 2
72398: ARRAY
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PUSH
72404: LD_INT 2
72406: ARRAY
72407: PPUSH
72408: LD_EXP 41
72412: PUSH
72413: LD_VAR 0 2
72417: ARRAY
72418: PUSH
72419: LD_INT 1
72421: ARRAY
72422: PUSH
72423: LD_INT 3
72425: ARRAY
72426: PPUSH
72427: LD_EXP 41
72431: PUSH
72432: LD_VAR 0 2
72436: ARRAY
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PUSH
72442: LD_INT 4
72444: ARRAY
72445: PPUSH
72446: CALL 33466 0 5
72450: AND
72451: OR
72452: IFFALSE 72733
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72454: LD_ADDR_VAR 0 4
72458: PUSH
72459: LD_EXP 36
72463: PUSH
72464: LD_VAR 0 2
72468: ARRAY
72469: PPUSH
72470: LD_INT 25
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PPUSH
72480: CALL_OW 72
72484: PUSH
72485: LD_EXP 38
72489: PUSH
72490: LD_VAR 0 2
72494: ARRAY
72495: DIFF
72496: ST_TO_ADDR
// if not tmp then
72497: LD_VAR 0 4
72501: NOT
72502: IFFALSE 72506
// continue ;
72504: GO 71751
// for j in tmp do
72506: LD_ADDR_VAR 0 3
72510: PUSH
72511: LD_VAR 0 4
72515: PUSH
72516: FOR_IN
72517: IFFALSE 72729
// begin if not mc_builders [ i ] then
72519: LD_EXP 42
72523: PUSH
72524: LD_VAR 0 2
72528: ARRAY
72529: NOT
72530: IFFALSE 72588
// begin SetTag ( j , 103 ) ;
72532: LD_VAR 0 3
72536: PPUSH
72537: LD_INT 103
72539: PPUSH
72540: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72544: LD_ADDR_EXP 42
72548: PUSH
72549: LD_EXP 42
72553: PPUSH
72554: LD_VAR 0 2
72558: PUSH
72559: LD_EXP 42
72563: PUSH
72564: LD_VAR 0 2
72568: ARRAY
72569: PUSH
72570: LD_INT 1
72572: PLUS
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PPUSH
72578: LD_VAR 0 3
72582: PPUSH
72583: CALL 26051 0 3
72587: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72588: LD_VAR 0 3
72592: PPUSH
72593: CALL_OW 310
72597: IFFALSE 72608
// ComExitBuilding ( j ) ;
72599: LD_VAR 0 3
72603: PPUSH
72604: CALL_OW 122
// wait ( 3 ) ;
72608: LD_INT 3
72610: PPUSH
72611: CALL_OW 67
// if not mc_build_list [ i ] then
72615: LD_EXP 41
72619: PUSH
72620: LD_VAR 0 2
72624: ARRAY
72625: NOT
72626: IFFALSE 72630
// break ;
72628: GO 72729
// if not HasTask ( j ) then
72630: LD_VAR 0 3
72634: PPUSH
72635: CALL_OW 314
72639: NOT
72640: IFFALSE 72727
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72642: LD_VAR 0 3
72646: PPUSH
72647: LD_EXP 41
72651: PUSH
72652: LD_VAR 0 2
72656: ARRAY
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: LD_EXP 41
72670: PUSH
72671: LD_VAR 0 2
72675: ARRAY
72676: PUSH
72677: LD_INT 1
72679: ARRAY
72680: PUSH
72681: LD_INT 2
72683: ARRAY
72684: PPUSH
72685: LD_EXP 41
72689: PUSH
72690: LD_VAR 0 2
72694: ARRAY
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: PUSH
72700: LD_INT 3
72702: ARRAY
72703: PPUSH
72704: LD_EXP 41
72708: PUSH
72709: LD_VAR 0 2
72713: ARRAY
72714: PUSH
72715: LD_INT 1
72717: ARRAY
72718: PUSH
72719: LD_INT 4
72721: ARRAY
72722: PPUSH
72723: CALL_OW 145
// end ;
72727: GO 72516
72729: POP
72730: POP
// end else
72731: GO 72875
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72733: LD_EXP 36
72737: PUSH
72738: LD_VAR 0 2
72742: ARRAY
72743: PPUSH
72744: LD_EXP 41
72748: PUSH
72749: LD_VAR 0 2
72753: ARRAY
72754: PUSH
72755: LD_INT 1
72757: ARRAY
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PPUSH
72763: LD_EXP 41
72767: PUSH
72768: LD_VAR 0 2
72772: ARRAY
72773: PUSH
72774: LD_INT 1
72776: ARRAY
72777: PUSH
72778: LD_INT 2
72780: ARRAY
72781: PPUSH
72782: LD_EXP 41
72786: PUSH
72787: LD_VAR 0 2
72791: ARRAY
72792: PUSH
72793: LD_INT 1
72795: ARRAY
72796: PUSH
72797: LD_INT 3
72799: ARRAY
72800: PPUSH
72801: LD_EXP 41
72805: PUSH
72806: LD_VAR 0 2
72810: ARRAY
72811: PUSH
72812: LD_INT 1
72814: ARRAY
72815: PUSH
72816: LD_INT 4
72818: ARRAY
72819: PPUSH
72820: CALL 32802 0 5
72824: NOT
72825: IFFALSE 72875
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72827: LD_ADDR_EXP 41
72831: PUSH
72832: LD_EXP 41
72836: PPUSH
72837: LD_VAR 0 2
72841: PPUSH
72842: LD_EXP 41
72846: PUSH
72847: LD_VAR 0 2
72851: ARRAY
72852: PPUSH
72853: LD_INT 1
72855: PPUSH
72856: LD_INT 1
72858: NEG
72859: PPUSH
72860: LD_INT 0
72862: PPUSH
72863: CALL 25469 0 4
72867: PPUSH
72868: CALL_OW 1
72872: ST_TO_ADDR
// continue ;
72873: GO 71751
// end ; end ; end ;
72875: GO 71751
72877: POP
72878: POP
// end ;
72879: LD_VAR 0 1
72883: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72884: LD_INT 0
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
// if not mc_bases then
72892: LD_EXP 36
72896: NOT
72897: IFFALSE 72901
// exit ;
72899: GO 73328
// for i = 1 to mc_bases do
72901: LD_ADDR_VAR 0 2
72905: PUSH
72906: DOUBLE
72907: LD_INT 1
72909: DEC
72910: ST_TO_ADDR
72911: LD_EXP 36
72915: PUSH
72916: FOR_TO
72917: IFFALSE 73326
// begin tmp := mc_build_upgrade [ i ] ;
72919: LD_ADDR_VAR 0 4
72923: PUSH
72924: LD_EXP 68
72928: PUSH
72929: LD_VAR 0 2
72933: ARRAY
72934: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72935: LD_ADDR_VAR 0 6
72939: PUSH
72940: LD_EXP 69
72944: PUSH
72945: LD_VAR 0 2
72949: ARRAY
72950: PPUSH
72951: LD_INT 2
72953: PUSH
72954: LD_INT 30
72956: PUSH
72957: LD_INT 6
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 30
72966: PUSH
72967: LD_INT 7
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: LIST
72978: PPUSH
72979: CALL_OW 72
72983: ST_TO_ADDR
// if not tmp and not lab then
72984: LD_VAR 0 4
72988: NOT
72989: PUSH
72990: LD_VAR 0 6
72994: NOT
72995: AND
72996: IFFALSE 73000
// continue ;
72998: GO 72916
// if tmp then
73000: LD_VAR 0 4
73004: IFFALSE 73124
// for j in tmp do
73006: LD_ADDR_VAR 0 3
73010: PUSH
73011: LD_VAR 0 4
73015: PUSH
73016: FOR_IN
73017: IFFALSE 73122
// begin if UpgradeCost ( j ) then
73019: LD_VAR 0 3
73023: PPUSH
73024: CALL 32462 0 1
73028: IFFALSE 73120
// begin ComUpgrade ( j ) ;
73030: LD_VAR 0 3
73034: PPUSH
73035: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73039: LD_ADDR_EXP 68
73043: PUSH
73044: LD_EXP 68
73048: PPUSH
73049: LD_VAR 0 2
73053: PPUSH
73054: LD_EXP 68
73058: PUSH
73059: LD_VAR 0 2
73063: ARRAY
73064: PUSH
73065: LD_VAR 0 3
73069: DIFF
73070: PPUSH
73071: CALL_OW 1
73075: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73076: LD_ADDR_EXP 43
73080: PUSH
73081: LD_EXP 43
73085: PPUSH
73086: LD_VAR 0 2
73090: PUSH
73091: LD_EXP 43
73095: PUSH
73096: LD_VAR 0 2
73100: ARRAY
73101: PUSH
73102: LD_INT 1
73104: PLUS
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PPUSH
73110: LD_VAR 0 3
73114: PPUSH
73115: CALL 26051 0 3
73119: ST_TO_ADDR
// end ; end ;
73120: GO 73016
73122: POP
73123: POP
// if not lab or not mc_lab_upgrade [ i ] then
73124: LD_VAR 0 6
73128: NOT
73129: PUSH
73130: LD_EXP 70
73134: PUSH
73135: LD_VAR 0 2
73139: ARRAY
73140: NOT
73141: OR
73142: IFFALSE 73146
// continue ;
73144: GO 72916
// for j in lab do
73146: LD_ADDR_VAR 0 3
73150: PUSH
73151: LD_VAR 0 6
73155: PUSH
73156: FOR_IN
73157: IFFALSE 73322
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73159: LD_VAR 0 3
73163: PPUSH
73164: CALL_OW 266
73168: PUSH
73169: LD_INT 6
73171: PUSH
73172: LD_INT 7
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: IN
73179: PUSH
73180: LD_VAR 0 3
73184: PPUSH
73185: CALL_OW 461
73189: PUSH
73190: LD_INT 1
73192: NONEQUAL
73193: AND
73194: IFFALSE 73320
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73196: LD_VAR 0 3
73200: PPUSH
73201: LD_EXP 70
73205: PUSH
73206: LD_VAR 0 2
73210: ARRAY
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: CALL 32667 0 2
73220: IFFALSE 73320
// begin ComCancel ( j ) ;
73222: LD_VAR 0 3
73226: PPUSH
73227: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73231: LD_VAR 0 3
73235: PPUSH
73236: LD_EXP 70
73240: PUSH
73241: LD_VAR 0 2
73245: ARRAY
73246: PUSH
73247: LD_INT 1
73249: ARRAY
73250: PPUSH
73251: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73255: LD_VAR 0 3
73259: PUSH
73260: LD_EXP 43
73264: PUSH
73265: LD_VAR 0 2
73269: ARRAY
73270: IN
73271: NOT
73272: IFFALSE 73318
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73274: LD_ADDR_EXP 43
73278: PUSH
73279: LD_EXP 43
73283: PPUSH
73284: LD_VAR 0 2
73288: PUSH
73289: LD_EXP 43
73293: PUSH
73294: LD_VAR 0 2
73298: ARRAY
73299: PUSH
73300: LD_INT 1
73302: PLUS
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PPUSH
73308: LD_VAR 0 3
73312: PPUSH
73313: CALL 26051 0 3
73317: ST_TO_ADDR
// break ;
73318: GO 73322
// end ; end ; end ;
73320: GO 73156
73322: POP
73323: POP
// end ;
73324: GO 72916
73326: POP
73327: POP
// end ;
73328: LD_VAR 0 1
73332: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73333: LD_INT 0
73335: PPUSH
73336: PPUSH
73337: PPUSH
73338: PPUSH
73339: PPUSH
73340: PPUSH
73341: PPUSH
73342: PPUSH
73343: PPUSH
// if not mc_bases then
73344: LD_EXP 36
73348: NOT
73349: IFFALSE 73353
// exit ;
73351: GO 73758
// for i = 1 to mc_bases do
73353: LD_ADDR_VAR 0 2
73357: PUSH
73358: DOUBLE
73359: LD_INT 1
73361: DEC
73362: ST_TO_ADDR
73363: LD_EXP 36
73367: PUSH
73368: FOR_TO
73369: IFFALSE 73756
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73371: LD_EXP 44
73375: PUSH
73376: LD_VAR 0 2
73380: ARRAY
73381: NOT
73382: PUSH
73383: LD_EXP 36
73387: PUSH
73388: LD_VAR 0 2
73392: ARRAY
73393: PPUSH
73394: LD_INT 30
73396: PUSH
73397: LD_INT 3
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PPUSH
73404: CALL_OW 72
73408: NOT
73409: OR
73410: IFFALSE 73414
// continue ;
73412: GO 73368
// busy := false ;
73414: LD_ADDR_VAR 0 8
73418: PUSH
73419: LD_INT 0
73421: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73422: LD_ADDR_VAR 0 4
73426: PUSH
73427: LD_EXP 36
73431: PUSH
73432: LD_VAR 0 2
73436: ARRAY
73437: PPUSH
73438: LD_INT 30
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PPUSH
73448: CALL_OW 72
73452: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73453: LD_ADDR_VAR 0 6
73457: PUSH
73458: LD_EXP 44
73462: PUSH
73463: LD_VAR 0 2
73467: ARRAY
73468: PPUSH
73469: LD_INT 2
73471: PUSH
73472: LD_INT 30
73474: PUSH
73475: LD_INT 32
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 30
73484: PUSH
73485: LD_INT 33
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: LIST
73496: PPUSH
73497: CALL_OW 72
73501: ST_TO_ADDR
// if not t then
73502: LD_VAR 0 6
73506: NOT
73507: IFFALSE 73511
// continue ;
73509: GO 73368
// for j in tmp do
73511: LD_ADDR_VAR 0 3
73515: PUSH
73516: LD_VAR 0 4
73520: PUSH
73521: FOR_IN
73522: IFFALSE 73552
// if not BuildingStatus ( j ) = bs_idle then
73524: LD_VAR 0 3
73528: PPUSH
73529: CALL_OW 461
73533: PUSH
73534: LD_INT 2
73536: EQUAL
73537: NOT
73538: IFFALSE 73550
// begin busy := true ;
73540: LD_ADDR_VAR 0 8
73544: PUSH
73545: LD_INT 1
73547: ST_TO_ADDR
// break ;
73548: GO 73552
// end ;
73550: GO 73521
73552: POP
73553: POP
// if busy then
73554: LD_VAR 0 8
73558: IFFALSE 73562
// continue ;
73560: GO 73368
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73562: LD_ADDR_VAR 0 7
73566: PUSH
73567: LD_VAR 0 6
73571: PPUSH
73572: LD_INT 35
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PPUSH
73582: CALL_OW 72
73586: ST_TO_ADDR
// if tw then
73587: LD_VAR 0 7
73591: IFFALSE 73668
// begin tw := tw [ 1 ] ;
73593: LD_ADDR_VAR 0 7
73597: PUSH
73598: LD_VAR 0 7
73602: PUSH
73603: LD_INT 1
73605: ARRAY
73606: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73607: LD_ADDR_VAR 0 9
73611: PUSH
73612: LD_VAR 0 7
73616: PPUSH
73617: LD_EXP 61
73621: PUSH
73622: LD_VAR 0 2
73626: ARRAY
73627: PPUSH
73628: CALL 31021 0 2
73632: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73633: LD_EXP 75
73637: PUSH
73638: LD_VAR 0 2
73642: ARRAY
73643: IFFALSE 73666
// if not weapon in mc_allowed_tower_weapons [ i ] then
73645: LD_VAR 0 9
73649: PUSH
73650: LD_EXP 75
73654: PUSH
73655: LD_VAR 0 2
73659: ARRAY
73660: IN
73661: NOT
73662: IFFALSE 73666
// continue ;
73664: GO 73368
// end else
73666: GO 73731
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73668: LD_ADDR_VAR 0 5
73672: PUSH
73673: LD_EXP 44
73677: PUSH
73678: LD_VAR 0 2
73682: ARRAY
73683: PPUSH
73684: LD_VAR 0 4
73688: PPUSH
73689: CALL 61222 0 2
73693: ST_TO_ADDR
// if not tmp2 then
73694: LD_VAR 0 5
73698: NOT
73699: IFFALSE 73703
// continue ;
73701: GO 73368
// tw := tmp2 [ 1 ] ;
73703: LD_ADDR_VAR 0 7
73707: PUSH
73708: LD_VAR 0 5
73712: PUSH
73713: LD_INT 1
73715: ARRAY
73716: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 5
73726: PUSH
73727: LD_INT 2
73729: ARRAY
73730: ST_TO_ADDR
// end ; if not weapon then
73731: LD_VAR 0 9
73735: NOT
73736: IFFALSE 73740
// continue ;
73738: GO 73368
// ComPlaceWeapon ( tw , weapon ) ;
73740: LD_VAR 0 7
73744: PPUSH
73745: LD_VAR 0 9
73749: PPUSH
73750: CALL_OW 148
// end ;
73754: GO 73368
73756: POP
73757: POP
// end ;
73758: LD_VAR 0 1
73762: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73763: LD_INT 0
73765: PPUSH
73766: PPUSH
73767: PPUSH
73768: PPUSH
73769: PPUSH
73770: PPUSH
// if not mc_bases then
73771: LD_EXP 36
73775: NOT
73776: IFFALSE 73780
// exit ;
73778: GO 74792
// for i = 1 to mc_bases do
73780: LD_ADDR_VAR 0 2
73784: PUSH
73785: DOUBLE
73786: LD_INT 1
73788: DEC
73789: ST_TO_ADDR
73790: LD_EXP 36
73794: PUSH
73795: FOR_TO
73796: IFFALSE 74790
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73798: LD_EXP 49
73802: PUSH
73803: LD_VAR 0 2
73807: ARRAY
73808: NOT
73809: PUSH
73810: LD_EXP 49
73814: PUSH
73815: LD_VAR 0 2
73819: ARRAY
73820: PUSH
73821: LD_EXP 50
73825: PUSH
73826: LD_VAR 0 2
73830: ARRAY
73831: EQUAL
73832: OR
73833: IFFALSE 73837
// continue ;
73835: GO 73795
// if mc_miners [ i ] then
73837: LD_EXP 50
73841: PUSH
73842: LD_VAR 0 2
73846: ARRAY
73847: IFFALSE 74477
// begin k := 1 ;
73849: LD_ADDR_VAR 0 4
73853: PUSH
73854: LD_INT 1
73856: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73857: LD_ADDR_VAR 0 3
73861: PUSH
73862: DOUBLE
73863: LD_EXP 50
73867: PUSH
73868: LD_VAR 0 2
73872: ARRAY
73873: INC
73874: ST_TO_ADDR
73875: LD_INT 1
73877: PUSH
73878: FOR_DOWNTO
73879: IFFALSE 74475
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73881: LD_EXP 50
73885: PUSH
73886: LD_VAR 0 2
73890: ARRAY
73891: PUSH
73892: LD_VAR 0 3
73896: ARRAY
73897: PPUSH
73898: CALL_OW 301
73902: PUSH
73903: LD_EXP 50
73907: PUSH
73908: LD_VAR 0 2
73912: ARRAY
73913: PUSH
73914: LD_VAR 0 3
73918: ARRAY
73919: PPUSH
73920: CALL_OW 257
73924: PUSH
73925: LD_INT 1
73927: NONEQUAL
73928: OR
73929: IFFALSE 73992
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73931: LD_ADDR_VAR 0 5
73935: PUSH
73936: LD_EXP 50
73940: PUSH
73941: LD_VAR 0 2
73945: ARRAY
73946: PUSH
73947: LD_EXP 50
73951: PUSH
73952: LD_VAR 0 2
73956: ARRAY
73957: PUSH
73958: LD_VAR 0 3
73962: ARRAY
73963: DIFF
73964: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73965: LD_ADDR_EXP 50
73969: PUSH
73970: LD_EXP 50
73974: PPUSH
73975: LD_VAR 0 2
73979: PPUSH
73980: LD_VAR 0 5
73984: PPUSH
73985: CALL_OW 1
73989: ST_TO_ADDR
// continue ;
73990: GO 73878
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
73992: LD_EXP 50
73996: PUSH
73997: LD_VAR 0 2
74001: ARRAY
74002: PUSH
74003: LD_VAR 0 3
74007: ARRAY
74008: PPUSH
74009: CALL 25987 0 1
74013: PUSH
74014: LD_EXP 50
74018: PUSH
74019: LD_VAR 0 2
74023: ARRAY
74024: PUSH
74025: LD_VAR 0 3
74029: ARRAY
74030: PPUSH
74031: CALL_OW 255
74035: PPUSH
74036: LD_EXP 49
74040: PUSH
74041: LD_VAR 0 2
74045: ARRAY
74046: PUSH
74047: LD_VAR 0 4
74051: ARRAY
74052: PUSH
74053: LD_INT 1
74055: ARRAY
74056: PPUSH
74057: LD_EXP 49
74061: PUSH
74062: LD_VAR 0 2
74066: ARRAY
74067: PUSH
74068: LD_VAR 0 4
74072: ARRAY
74073: PUSH
74074: LD_INT 2
74076: ARRAY
74077: PPUSH
74078: LD_INT 15
74080: PPUSH
74081: CALL 26947 0 4
74085: PUSH
74086: LD_INT 4
74088: ARRAY
74089: PUSH
74090: LD_EXP 50
74094: PUSH
74095: LD_VAR 0 2
74099: ARRAY
74100: PUSH
74101: LD_VAR 0 3
74105: ARRAY
74106: PPUSH
74107: LD_INT 10
74109: PPUSH
74110: CALL 28644 0 2
74114: PUSH
74115: LD_INT 4
74117: ARRAY
74118: OR
74119: AND
74120: IFFALSE 74143
// ComStop ( mc_miners [ i ] [ j ] ) ;
74122: LD_EXP 50
74126: PUSH
74127: LD_VAR 0 2
74131: ARRAY
74132: PUSH
74133: LD_VAR 0 3
74137: ARRAY
74138: PPUSH
74139: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74143: LD_EXP 50
74147: PUSH
74148: LD_VAR 0 2
74152: ARRAY
74153: PUSH
74154: LD_VAR 0 3
74158: ARRAY
74159: PPUSH
74160: CALL_OW 257
74164: PUSH
74165: LD_INT 1
74167: EQUAL
74168: PUSH
74169: LD_EXP 50
74173: PUSH
74174: LD_VAR 0 2
74178: ARRAY
74179: PUSH
74180: LD_VAR 0 3
74184: ARRAY
74185: PPUSH
74186: CALL_OW 459
74190: NOT
74191: AND
74192: PUSH
74193: LD_EXP 50
74197: PUSH
74198: LD_VAR 0 2
74202: ARRAY
74203: PUSH
74204: LD_VAR 0 3
74208: ARRAY
74209: PPUSH
74210: CALL_OW 255
74214: PPUSH
74215: LD_EXP 49
74219: PUSH
74220: LD_VAR 0 2
74224: ARRAY
74225: PUSH
74226: LD_VAR 0 4
74230: ARRAY
74231: PUSH
74232: LD_INT 1
74234: ARRAY
74235: PPUSH
74236: LD_EXP 49
74240: PUSH
74241: LD_VAR 0 2
74245: ARRAY
74246: PUSH
74247: LD_VAR 0 4
74251: ARRAY
74252: PUSH
74253: LD_INT 2
74255: ARRAY
74256: PPUSH
74257: LD_INT 15
74259: PPUSH
74260: CALL 26947 0 4
74264: PUSH
74265: LD_INT 4
74267: ARRAY
74268: PUSH
74269: LD_INT 0
74271: EQUAL
74272: AND
74273: PUSH
74274: LD_EXP 50
74278: PUSH
74279: LD_VAR 0 2
74283: ARRAY
74284: PUSH
74285: LD_VAR 0 3
74289: ARRAY
74290: PPUSH
74291: CALL_OW 314
74295: NOT
74296: AND
74297: IFFALSE 74473
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74299: LD_EXP 50
74303: PUSH
74304: LD_VAR 0 2
74308: ARRAY
74309: PUSH
74310: LD_VAR 0 3
74314: ARRAY
74315: PPUSH
74316: CALL_OW 310
74320: IFFALSE 74343
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74322: LD_EXP 50
74326: PUSH
74327: LD_VAR 0 2
74331: ARRAY
74332: PUSH
74333: LD_VAR 0 3
74337: ARRAY
74338: PPUSH
74339: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74343: LD_EXP 50
74347: PUSH
74348: LD_VAR 0 2
74352: ARRAY
74353: PUSH
74354: LD_VAR 0 3
74358: ARRAY
74359: PPUSH
74360: CALL_OW 314
74364: NOT
74365: IFFALSE 74433
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74367: LD_EXP 50
74371: PUSH
74372: LD_VAR 0 2
74376: ARRAY
74377: PUSH
74378: LD_VAR 0 3
74382: ARRAY
74383: PPUSH
74384: LD_EXP 49
74388: PUSH
74389: LD_VAR 0 2
74393: ARRAY
74394: PUSH
74395: LD_VAR 0 4
74399: ARRAY
74400: PUSH
74401: LD_INT 1
74403: ARRAY
74404: PPUSH
74405: LD_EXP 49
74409: PUSH
74410: LD_VAR 0 2
74414: ARRAY
74415: PUSH
74416: LD_VAR 0 4
74420: ARRAY
74421: PUSH
74422: LD_INT 2
74424: ARRAY
74425: PPUSH
74426: LD_INT 0
74428: PPUSH
74429: CALL_OW 193
// k := k + 1 ;
74433: LD_ADDR_VAR 0 4
74437: PUSH
74438: LD_VAR 0 4
74442: PUSH
74443: LD_INT 1
74445: PLUS
74446: ST_TO_ADDR
// if k > mc_mines [ i ] then
74447: LD_VAR 0 4
74451: PUSH
74452: LD_EXP 49
74456: PUSH
74457: LD_VAR 0 2
74461: ARRAY
74462: GREATER
74463: IFFALSE 74473
// k := 1 ;
74465: LD_ADDR_VAR 0 4
74469: PUSH
74470: LD_INT 1
74472: ST_TO_ADDR
// end ; end ;
74473: GO 73878
74475: POP
74476: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74477: LD_ADDR_VAR 0 5
74481: PUSH
74482: LD_EXP 36
74486: PUSH
74487: LD_VAR 0 2
74491: ARRAY
74492: PPUSH
74493: LD_INT 2
74495: PUSH
74496: LD_INT 30
74498: PUSH
74499: LD_INT 4
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 30
74508: PUSH
74509: LD_INT 5
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 30
74518: PUSH
74519: LD_INT 32
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: PPUSH
74532: CALL_OW 72
74536: ST_TO_ADDR
// if not tmp then
74537: LD_VAR 0 5
74541: NOT
74542: IFFALSE 74546
// continue ;
74544: GO 73795
// list := [ ] ;
74546: LD_ADDR_VAR 0 6
74550: PUSH
74551: EMPTY
74552: ST_TO_ADDR
// for j in tmp do
74553: LD_ADDR_VAR 0 3
74557: PUSH
74558: LD_VAR 0 5
74562: PUSH
74563: FOR_IN
74564: IFFALSE 74633
// begin for k in UnitsInside ( j ) do
74566: LD_ADDR_VAR 0 4
74570: PUSH
74571: LD_VAR 0 3
74575: PPUSH
74576: CALL_OW 313
74580: PUSH
74581: FOR_IN
74582: IFFALSE 74629
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74584: LD_VAR 0 4
74588: PPUSH
74589: CALL_OW 257
74593: PUSH
74594: LD_INT 1
74596: EQUAL
74597: PUSH
74598: LD_VAR 0 4
74602: PPUSH
74603: CALL_OW 459
74607: NOT
74608: AND
74609: IFFALSE 74627
// list := list ^ k ;
74611: LD_ADDR_VAR 0 6
74615: PUSH
74616: LD_VAR 0 6
74620: PUSH
74621: LD_VAR 0 4
74625: ADD
74626: ST_TO_ADDR
74627: GO 74581
74629: POP
74630: POP
// end ;
74631: GO 74563
74633: POP
74634: POP
// list := list diff mc_miners [ i ] ;
74635: LD_ADDR_VAR 0 6
74639: PUSH
74640: LD_VAR 0 6
74644: PUSH
74645: LD_EXP 50
74649: PUSH
74650: LD_VAR 0 2
74654: ARRAY
74655: DIFF
74656: ST_TO_ADDR
// if not list then
74657: LD_VAR 0 6
74661: NOT
74662: IFFALSE 74666
// continue ;
74664: GO 73795
// k := mc_mines [ i ] - mc_miners [ i ] ;
74666: LD_ADDR_VAR 0 4
74670: PUSH
74671: LD_EXP 49
74675: PUSH
74676: LD_VAR 0 2
74680: ARRAY
74681: PUSH
74682: LD_EXP 50
74686: PUSH
74687: LD_VAR 0 2
74691: ARRAY
74692: MINUS
74693: ST_TO_ADDR
// if k > list then
74694: LD_VAR 0 4
74698: PUSH
74699: LD_VAR 0 6
74703: GREATER
74704: IFFALSE 74716
// k := list ;
74706: LD_ADDR_VAR 0 4
74710: PUSH
74711: LD_VAR 0 6
74715: ST_TO_ADDR
// for j = 1 to k do
74716: LD_ADDR_VAR 0 3
74720: PUSH
74721: DOUBLE
74722: LD_INT 1
74724: DEC
74725: ST_TO_ADDR
74726: LD_VAR 0 4
74730: PUSH
74731: FOR_TO
74732: IFFALSE 74786
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74734: LD_ADDR_EXP 50
74738: PUSH
74739: LD_EXP 50
74743: PPUSH
74744: LD_VAR 0 2
74748: PUSH
74749: LD_EXP 50
74753: PUSH
74754: LD_VAR 0 2
74758: ARRAY
74759: PUSH
74760: LD_INT 1
74762: PLUS
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PPUSH
74768: LD_VAR 0 6
74772: PUSH
74773: LD_VAR 0 3
74777: ARRAY
74778: PPUSH
74779: CALL 26051 0 3
74783: ST_TO_ADDR
74784: GO 74731
74786: POP
74787: POP
// end ;
74788: GO 73795
74790: POP
74791: POP
// end ;
74792: LD_VAR 0 1
74796: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74797: LD_INT 0
74799: PPUSH
74800: PPUSH
74801: PPUSH
74802: PPUSH
74803: PPUSH
74804: PPUSH
74805: PPUSH
74806: PPUSH
74807: PPUSH
74808: PPUSH
// if not mc_bases then
74809: LD_EXP 36
74813: NOT
74814: IFFALSE 74818
// exit ;
74816: GO 76549
// for i = 1 to mc_bases do
74818: LD_ADDR_VAR 0 2
74822: PUSH
74823: DOUBLE
74824: LD_INT 1
74826: DEC
74827: ST_TO_ADDR
74828: LD_EXP 36
74832: PUSH
74833: FOR_TO
74834: IFFALSE 76547
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74836: LD_EXP 36
74840: PUSH
74841: LD_VAR 0 2
74845: ARRAY
74846: NOT
74847: PUSH
74848: LD_EXP 43
74852: PUSH
74853: LD_VAR 0 2
74857: ARRAY
74858: OR
74859: IFFALSE 74863
// continue ;
74861: GO 74833
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74863: LD_EXP 52
74867: PUSH
74868: LD_VAR 0 2
74872: ARRAY
74873: NOT
74874: PUSH
74875: LD_EXP 53
74879: PUSH
74880: LD_VAR 0 2
74884: ARRAY
74885: AND
74886: IFFALSE 74924
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74888: LD_ADDR_EXP 53
74892: PUSH
74893: LD_EXP 53
74897: PPUSH
74898: LD_VAR 0 2
74902: PPUSH
74903: EMPTY
74904: PPUSH
74905: CALL_OW 1
74909: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74910: LD_VAR 0 2
74914: PPUSH
74915: LD_INT 107
74917: PPUSH
74918: CALL 66013 0 2
// continue ;
74922: GO 74833
// end ; target := [ ] ;
74924: LD_ADDR_VAR 0 6
74928: PUSH
74929: EMPTY
74930: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74931: LD_ADDR_VAR 0 3
74935: PUSH
74936: DOUBLE
74937: LD_EXP 52
74941: PUSH
74942: LD_VAR 0 2
74946: ARRAY
74947: INC
74948: ST_TO_ADDR
74949: LD_INT 1
74951: PUSH
74952: FOR_DOWNTO
74953: IFFALSE 75213
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74955: LD_EXP 52
74959: PUSH
74960: LD_VAR 0 2
74964: ARRAY
74965: PUSH
74966: LD_VAR 0 3
74970: ARRAY
74971: PUSH
74972: LD_INT 2
74974: ARRAY
74975: PPUSH
74976: LD_EXP 52
74980: PUSH
74981: LD_VAR 0 2
74985: ARRAY
74986: PUSH
74987: LD_VAR 0 3
74991: ARRAY
74992: PUSH
74993: LD_INT 3
74995: ARRAY
74996: PPUSH
74997: CALL_OW 488
75001: PUSH
75002: LD_EXP 52
75006: PUSH
75007: LD_VAR 0 2
75011: ARRAY
75012: PUSH
75013: LD_VAR 0 3
75017: ARRAY
75018: PUSH
75019: LD_INT 2
75021: ARRAY
75022: PPUSH
75023: LD_EXP 52
75027: PUSH
75028: LD_VAR 0 2
75032: ARRAY
75033: PUSH
75034: LD_VAR 0 3
75038: ARRAY
75039: PUSH
75040: LD_INT 3
75042: ARRAY
75043: PPUSH
75044: CALL_OW 284
75048: PUSH
75049: LD_INT 0
75051: EQUAL
75052: AND
75053: IFFALSE 75108
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75055: LD_ADDR_VAR 0 5
75059: PUSH
75060: LD_EXP 52
75064: PUSH
75065: LD_VAR 0 2
75069: ARRAY
75070: PPUSH
75071: LD_VAR 0 3
75075: PPUSH
75076: CALL_OW 3
75080: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75081: LD_ADDR_EXP 52
75085: PUSH
75086: LD_EXP 52
75090: PPUSH
75091: LD_VAR 0 2
75095: PPUSH
75096: LD_VAR 0 5
75100: PPUSH
75101: CALL_OW 1
75105: ST_TO_ADDR
// continue ;
75106: GO 74952
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75108: LD_EXP 36
75112: PUSH
75113: LD_VAR 0 2
75117: ARRAY
75118: PUSH
75119: LD_INT 1
75121: ARRAY
75122: PPUSH
75123: CALL_OW 255
75127: PPUSH
75128: LD_EXP 52
75132: PUSH
75133: LD_VAR 0 2
75137: ARRAY
75138: PUSH
75139: LD_VAR 0 3
75143: ARRAY
75144: PUSH
75145: LD_INT 2
75147: ARRAY
75148: PPUSH
75149: LD_EXP 52
75153: PUSH
75154: LD_VAR 0 2
75158: ARRAY
75159: PUSH
75160: LD_VAR 0 3
75164: ARRAY
75165: PUSH
75166: LD_INT 3
75168: ARRAY
75169: PPUSH
75170: LD_INT 30
75172: PPUSH
75173: CALL 26947 0 4
75177: PUSH
75178: LD_INT 4
75180: ARRAY
75181: PUSH
75182: LD_INT 0
75184: EQUAL
75185: IFFALSE 75211
// begin target := mc_crates [ i ] [ j ] ;
75187: LD_ADDR_VAR 0 6
75191: PUSH
75192: LD_EXP 52
75196: PUSH
75197: LD_VAR 0 2
75201: ARRAY
75202: PUSH
75203: LD_VAR 0 3
75207: ARRAY
75208: ST_TO_ADDR
// break ;
75209: GO 75213
// end ; end ;
75211: GO 74952
75213: POP
75214: POP
// if not target then
75215: LD_VAR 0 6
75219: NOT
75220: IFFALSE 75224
// continue ;
75222: GO 74833
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75224: LD_ADDR_VAR 0 7
75228: PUSH
75229: LD_EXP 55
75233: PUSH
75234: LD_VAR 0 2
75238: ARRAY
75239: PPUSH
75240: LD_INT 2
75242: PUSH
75243: LD_INT 3
75245: PUSH
75246: LD_INT 58
75248: PUSH
75249: EMPTY
75250: LIST
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 61
75258: PUSH
75259: EMPTY
75260: LIST
75261: PUSH
75262: LD_INT 33
75264: PUSH
75265: LD_INT 5
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 33
75274: PUSH
75275: LD_INT 3
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 2
75291: PUSH
75292: LD_INT 34
75294: PUSH
75295: LD_INT 32
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 34
75304: PUSH
75305: LD_INT 51
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 34
75314: PUSH
75315: LD_INT 12
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PPUSH
75332: CALL_OW 72
75336: ST_TO_ADDR
// if not cargo then
75337: LD_VAR 0 7
75341: NOT
75342: IFFALSE 75985
// begin if mc_crates_collector [ i ] < 5 then
75344: LD_EXP 53
75348: PUSH
75349: LD_VAR 0 2
75353: ARRAY
75354: PUSH
75355: LD_INT 5
75357: LESS
75358: IFFALSE 75724
// begin if mc_ape [ i ] then
75360: LD_EXP 65
75364: PUSH
75365: LD_VAR 0 2
75369: ARRAY
75370: IFFALSE 75417
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75372: LD_ADDR_VAR 0 5
75376: PUSH
75377: LD_EXP 65
75381: PUSH
75382: LD_VAR 0 2
75386: ARRAY
75387: PPUSH
75388: LD_INT 25
75390: PUSH
75391: LD_INT 16
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 24
75400: PUSH
75401: LD_INT 750
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PPUSH
75412: CALL_OW 72
75416: ST_TO_ADDR
// if not tmp then
75417: LD_VAR 0 5
75421: NOT
75422: IFFALSE 75469
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75424: LD_ADDR_VAR 0 5
75428: PUSH
75429: LD_EXP 36
75433: PUSH
75434: LD_VAR 0 2
75438: ARRAY
75439: PPUSH
75440: LD_INT 25
75442: PUSH
75443: LD_INT 2
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 24
75452: PUSH
75453: LD_INT 750
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PPUSH
75464: CALL_OW 72
75468: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75469: LD_EXP 65
75473: PUSH
75474: LD_VAR 0 2
75478: ARRAY
75479: PUSH
75480: LD_EXP 36
75484: PUSH
75485: LD_VAR 0 2
75489: ARRAY
75490: PPUSH
75491: LD_INT 25
75493: PUSH
75494: LD_INT 2
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: LD_INT 24
75503: PUSH
75504: LD_INT 750
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PPUSH
75515: CALL_OW 72
75519: AND
75520: PUSH
75521: LD_VAR 0 5
75525: PUSH
75526: LD_INT 5
75528: LESS
75529: AND
75530: IFFALSE 75612
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: LD_EXP 36
75541: PUSH
75542: LD_VAR 0 2
75546: ARRAY
75547: PPUSH
75548: LD_INT 25
75550: PUSH
75551: LD_INT 2
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 24
75560: PUSH
75561: LD_INT 750
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PPUSH
75572: CALL_OW 72
75576: PUSH
75577: FOR_IN
75578: IFFALSE 75610
// begin tmp := tmp union j ;
75580: LD_ADDR_VAR 0 5
75584: PUSH
75585: LD_VAR 0 5
75589: PUSH
75590: LD_VAR 0 3
75594: UNION
75595: ST_TO_ADDR
// if tmp >= 5 then
75596: LD_VAR 0 5
75600: PUSH
75601: LD_INT 5
75603: GREATEREQUAL
75604: IFFALSE 75608
// break ;
75606: GO 75610
// end ;
75608: GO 75577
75610: POP
75611: POP
// end ; if not tmp then
75612: LD_VAR 0 5
75616: NOT
75617: IFFALSE 75621
// continue ;
75619: GO 74833
// for j in tmp do
75621: LD_ADDR_VAR 0 3
75625: PUSH
75626: LD_VAR 0 5
75630: PUSH
75631: FOR_IN
75632: IFFALSE 75722
// if not GetTag ( j ) then
75634: LD_VAR 0 3
75638: PPUSH
75639: CALL_OW 110
75643: NOT
75644: IFFALSE 75720
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75646: LD_ADDR_EXP 53
75650: PUSH
75651: LD_EXP 53
75655: PPUSH
75656: LD_VAR 0 2
75660: PUSH
75661: LD_EXP 53
75665: PUSH
75666: LD_VAR 0 2
75670: ARRAY
75671: PUSH
75672: LD_INT 1
75674: PLUS
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PPUSH
75680: LD_VAR 0 3
75684: PPUSH
75685: CALL 26051 0 3
75689: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75690: LD_VAR 0 3
75694: PPUSH
75695: LD_INT 107
75697: PPUSH
75698: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
75702: LD_EXP 53
75706: PUSH
75707: LD_VAR 0 2
75711: ARRAY
75712: PUSH
75713: LD_INT 5
75715: GREATEREQUAL
75716: IFFALSE 75720
// break ;
75718: GO 75722
// end ;
75720: GO 75631
75722: POP
75723: POP
// end ; if mc_crates_collector [ i ] and target then
75724: LD_EXP 53
75728: PUSH
75729: LD_VAR 0 2
75733: ARRAY
75734: PUSH
75735: LD_VAR 0 6
75739: AND
75740: IFFALSE 75983
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75742: LD_EXP 53
75746: PUSH
75747: LD_VAR 0 2
75751: ARRAY
75752: PUSH
75753: LD_VAR 0 6
75757: PUSH
75758: LD_INT 1
75760: ARRAY
75761: LESS
75762: IFFALSE 75782
// tmp := mc_crates_collector [ i ] else
75764: LD_ADDR_VAR 0 5
75768: PUSH
75769: LD_EXP 53
75773: PUSH
75774: LD_VAR 0 2
75778: ARRAY
75779: ST_TO_ADDR
75780: GO 75796
// tmp := target [ 1 ] ;
75782: LD_ADDR_VAR 0 5
75786: PUSH
75787: LD_VAR 0 6
75791: PUSH
75792: LD_INT 1
75794: ARRAY
75795: ST_TO_ADDR
// k := 0 ;
75796: LD_ADDR_VAR 0 4
75800: PUSH
75801: LD_INT 0
75803: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75804: LD_ADDR_VAR 0 3
75808: PUSH
75809: LD_EXP 53
75813: PUSH
75814: LD_VAR 0 2
75818: ARRAY
75819: PUSH
75820: FOR_IN
75821: IFFALSE 75981
// begin k := k + 1 ;
75823: LD_ADDR_VAR 0 4
75827: PUSH
75828: LD_VAR 0 4
75832: PUSH
75833: LD_INT 1
75835: PLUS
75836: ST_TO_ADDR
// if k > tmp then
75837: LD_VAR 0 4
75841: PUSH
75842: LD_VAR 0 5
75846: GREATER
75847: IFFALSE 75851
// break ;
75849: GO 75981
// if not GetClass ( j ) in [ 2 , 16 ] then
75851: LD_VAR 0 3
75855: PPUSH
75856: CALL_OW 257
75860: PUSH
75861: LD_INT 2
75863: PUSH
75864: LD_INT 16
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: IN
75871: NOT
75872: IFFALSE 75925
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75874: LD_ADDR_EXP 53
75878: PUSH
75879: LD_EXP 53
75883: PPUSH
75884: LD_VAR 0 2
75888: PPUSH
75889: LD_EXP 53
75893: PUSH
75894: LD_VAR 0 2
75898: ARRAY
75899: PUSH
75900: LD_VAR 0 3
75904: DIFF
75905: PPUSH
75906: CALL_OW 1
75910: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75911: LD_VAR 0 3
75915: PPUSH
75916: LD_INT 0
75918: PPUSH
75919: CALL_OW 109
// continue ;
75923: GO 75820
// end ; if IsInUnit ( j ) then
75925: LD_VAR 0 3
75929: PPUSH
75930: CALL_OW 310
75934: IFFALSE 75945
// ComExitBuilding ( j ) ;
75936: LD_VAR 0 3
75940: PPUSH
75941: CALL_OW 122
// wait ( 3 ) ;
75945: LD_INT 3
75947: PPUSH
75948: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75952: LD_VAR 0 3
75956: PPUSH
75957: LD_VAR 0 6
75961: PUSH
75962: LD_INT 2
75964: ARRAY
75965: PPUSH
75966: LD_VAR 0 6
75970: PUSH
75971: LD_INT 3
75973: ARRAY
75974: PPUSH
75975: CALL_OW 117
// end ;
75979: GO 75820
75981: POP
75982: POP
// end ; end else
75983: GO 76545
// begin for j in cargo do
75985: LD_ADDR_VAR 0 3
75989: PUSH
75990: LD_VAR 0 7
75994: PUSH
75995: FOR_IN
75996: IFFALSE 76543
// begin if GetTag ( j ) <> 0 then
75998: LD_VAR 0 3
76002: PPUSH
76003: CALL_OW 110
76007: PUSH
76008: LD_INT 0
76010: NONEQUAL
76011: IFFALSE 76015
// continue ;
76013: GO 75995
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76015: LD_VAR 0 3
76019: PPUSH
76020: CALL_OW 256
76024: PUSH
76025: LD_INT 1000
76027: LESS
76028: PUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: LD_EXP 60
76038: PUSH
76039: LD_VAR 0 2
76043: ARRAY
76044: PPUSH
76045: CALL_OW 308
76049: NOT
76050: AND
76051: IFFALSE 76073
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76053: LD_VAR 0 3
76057: PPUSH
76058: LD_EXP 60
76062: PUSH
76063: LD_VAR 0 2
76067: ARRAY
76068: PPUSH
76069: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76073: LD_VAR 0 3
76077: PPUSH
76078: CALL_OW 256
76082: PUSH
76083: LD_INT 1000
76085: LESS
76086: PUSH
76087: LD_VAR 0 3
76091: PPUSH
76092: LD_EXP 60
76096: PUSH
76097: LD_VAR 0 2
76101: ARRAY
76102: PPUSH
76103: CALL_OW 308
76107: AND
76108: IFFALSE 76112
// continue ;
76110: GO 75995
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76112: LD_VAR 0 3
76116: PPUSH
76117: CALL_OW 262
76121: PUSH
76122: LD_INT 2
76124: EQUAL
76125: PUSH
76126: LD_VAR 0 3
76130: PPUSH
76131: CALL_OW 261
76135: PUSH
76136: LD_INT 15
76138: LESS
76139: AND
76140: IFFALSE 76144
// continue ;
76142: GO 75995
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76144: LD_VAR 0 3
76148: PPUSH
76149: CALL_OW 262
76153: PUSH
76154: LD_INT 1
76156: EQUAL
76157: PUSH
76158: LD_VAR 0 3
76162: PPUSH
76163: CALL_OW 261
76167: PUSH
76168: LD_INT 10
76170: LESS
76171: AND
76172: IFFALSE 76482
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76174: LD_ADDR_VAR 0 8
76178: PUSH
76179: LD_EXP 36
76183: PUSH
76184: LD_VAR 0 2
76188: ARRAY
76189: PPUSH
76190: LD_INT 2
76192: PUSH
76193: LD_INT 30
76195: PUSH
76196: LD_INT 0
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 30
76205: PUSH
76206: LD_INT 1
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: LIST
76217: PPUSH
76218: CALL_OW 72
76222: ST_TO_ADDR
// if not depot then
76223: LD_VAR 0 8
76227: NOT
76228: IFFALSE 76232
// continue ;
76230: GO 75995
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76232: LD_VAR 0 3
76236: PPUSH
76237: LD_VAR 0 8
76241: PPUSH
76242: LD_VAR 0 3
76246: PPUSH
76247: CALL_OW 74
76251: PPUSH
76252: CALL_OW 296
76256: PUSH
76257: LD_INT 6
76259: LESS
76260: IFFALSE 76276
// SetFuel ( j , 100 ) else
76262: LD_VAR 0 3
76266: PPUSH
76267: LD_INT 100
76269: PPUSH
76270: CALL_OW 240
76274: GO 76482
// if GetFuel ( j ) = 0 then
76276: LD_VAR 0 3
76280: PPUSH
76281: CALL_OW 261
76285: PUSH
76286: LD_INT 0
76288: EQUAL
76289: IFFALSE 76482
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76291: LD_ADDR_EXP 55
76295: PUSH
76296: LD_EXP 55
76300: PPUSH
76301: LD_VAR 0 2
76305: PPUSH
76306: LD_EXP 55
76310: PUSH
76311: LD_VAR 0 2
76315: ARRAY
76316: PUSH
76317: LD_VAR 0 3
76321: DIFF
76322: PPUSH
76323: CALL_OW 1
76327: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76328: LD_VAR 0 3
76332: PPUSH
76333: CALL_OW 263
76337: PUSH
76338: LD_INT 1
76340: EQUAL
76341: IFFALSE 76357
// ComExitVehicle ( IsInUnit ( j ) ) ;
76343: LD_VAR 0 3
76347: PPUSH
76348: CALL_OW 310
76352: PPUSH
76353: CALL_OW 121
// if GetControl ( j ) = control_remote then
76357: LD_VAR 0 3
76361: PPUSH
76362: CALL_OW 263
76366: PUSH
76367: LD_INT 2
76369: EQUAL
76370: IFFALSE 76381
// ComUnlink ( j ) ;
76372: LD_VAR 0 3
76376: PPUSH
76377: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76381: LD_ADDR_VAR 0 9
76385: PUSH
76386: LD_VAR 0 2
76390: PPUSH
76391: LD_INT 3
76393: PPUSH
76394: CALL 85528 0 2
76398: ST_TO_ADDR
// if fac then
76399: LD_VAR 0 9
76403: IFFALSE 76480
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76405: LD_ADDR_VAR 0 10
76409: PUSH
76410: LD_VAR 0 9
76414: PPUSH
76415: LD_VAR 0 3
76419: PPUSH
76420: CALL_OW 265
76424: PPUSH
76425: LD_VAR 0 3
76429: PPUSH
76430: CALL_OW 262
76434: PPUSH
76435: LD_VAR 0 3
76439: PPUSH
76440: CALL_OW 263
76444: PPUSH
76445: LD_VAR 0 3
76449: PPUSH
76450: CALL_OW 264
76454: PPUSH
76455: CALL 23644 0 5
76459: ST_TO_ADDR
// if components then
76460: LD_VAR 0 10
76464: IFFALSE 76480
// MC_InsertProduceList ( i , components ) ;
76466: LD_VAR 0 2
76470: PPUSH
76471: LD_VAR 0 10
76475: PPUSH
76476: CALL 85156 0 2
// end ; continue ;
76480: GO 75995
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76482: LD_VAR 0 3
76486: PPUSH
76487: LD_INT 1
76489: PPUSH
76490: CALL_OW 289
76494: PUSH
76495: LD_INT 100
76497: LESS
76498: PUSH
76499: LD_VAR 0 3
76503: PPUSH
76504: CALL_OW 314
76508: NOT
76509: AND
76510: IFFALSE 76539
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76512: LD_VAR 0 3
76516: PPUSH
76517: LD_VAR 0 6
76521: PUSH
76522: LD_INT 2
76524: ARRAY
76525: PPUSH
76526: LD_VAR 0 6
76530: PUSH
76531: LD_INT 3
76533: ARRAY
76534: PPUSH
76535: CALL_OW 117
// break ;
76539: GO 76543
// end ;
76541: GO 75995
76543: POP
76544: POP
// end ; end ;
76545: GO 74833
76547: POP
76548: POP
// end ;
76549: LD_VAR 0 1
76553: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76554: LD_INT 0
76556: PPUSH
76557: PPUSH
76558: PPUSH
76559: PPUSH
// if not mc_bases then
76560: LD_EXP 36
76564: NOT
76565: IFFALSE 76569
// exit ;
76567: GO 76730
// for i = 1 to mc_bases do
76569: LD_ADDR_VAR 0 2
76573: PUSH
76574: DOUBLE
76575: LD_INT 1
76577: DEC
76578: ST_TO_ADDR
76579: LD_EXP 36
76583: PUSH
76584: FOR_TO
76585: IFFALSE 76728
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76587: LD_ADDR_VAR 0 4
76591: PUSH
76592: LD_EXP 55
76596: PUSH
76597: LD_VAR 0 2
76601: ARRAY
76602: PUSH
76603: LD_EXP 58
76607: PUSH
76608: LD_VAR 0 2
76612: ARRAY
76613: UNION
76614: PPUSH
76615: LD_INT 33
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PPUSH
76625: CALL_OW 72
76629: ST_TO_ADDR
// if tmp then
76630: LD_VAR 0 4
76634: IFFALSE 76726
// for j in tmp do
76636: LD_ADDR_VAR 0 3
76640: PUSH
76641: LD_VAR 0 4
76645: PUSH
76646: FOR_IN
76647: IFFALSE 76724
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76649: LD_VAR 0 3
76653: PPUSH
76654: CALL_OW 312
76658: NOT
76659: PUSH
76660: LD_VAR 0 3
76664: PPUSH
76665: CALL_OW 256
76669: PUSH
76670: LD_INT 250
76672: GREATEREQUAL
76673: AND
76674: IFFALSE 76687
// Connect ( j ) else
76676: LD_VAR 0 3
76680: PPUSH
76681: CALL 28984 0 1
76685: GO 76722
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76687: LD_VAR 0 3
76691: PPUSH
76692: CALL_OW 256
76696: PUSH
76697: LD_INT 250
76699: LESS
76700: PUSH
76701: LD_VAR 0 3
76705: PPUSH
76706: CALL_OW 312
76710: AND
76711: IFFALSE 76722
// ComUnlink ( j ) ;
76713: LD_VAR 0 3
76717: PPUSH
76718: CALL_OW 136
76722: GO 76646
76724: POP
76725: POP
// end ;
76726: GO 76584
76728: POP
76729: POP
// end ;
76730: LD_VAR 0 1
76734: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76735: LD_INT 0
76737: PPUSH
76738: PPUSH
76739: PPUSH
76740: PPUSH
76741: PPUSH
// if not mc_bases then
76742: LD_EXP 36
76746: NOT
76747: IFFALSE 76751
// exit ;
76749: GO 77211
// for i = 1 to mc_bases do
76751: LD_ADDR_VAR 0 2
76755: PUSH
76756: DOUBLE
76757: LD_INT 1
76759: DEC
76760: ST_TO_ADDR
76761: LD_EXP 36
76765: PUSH
76766: FOR_TO
76767: IFFALSE 77209
// begin if not mc_produce [ i ] then
76769: LD_EXP 57
76773: PUSH
76774: LD_VAR 0 2
76778: ARRAY
76779: NOT
76780: IFFALSE 76784
// continue ;
76782: GO 76766
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76784: LD_ADDR_VAR 0 5
76788: PUSH
76789: LD_EXP 36
76793: PUSH
76794: LD_VAR 0 2
76798: ARRAY
76799: PPUSH
76800: LD_INT 30
76802: PUSH
76803: LD_INT 3
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PPUSH
76810: CALL_OW 72
76814: ST_TO_ADDR
// if not fac then
76815: LD_VAR 0 5
76819: NOT
76820: IFFALSE 76824
// continue ;
76822: GO 76766
// for j in fac do
76824: LD_ADDR_VAR 0 3
76828: PUSH
76829: LD_VAR 0 5
76833: PUSH
76834: FOR_IN
76835: IFFALSE 77205
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76837: LD_VAR 0 3
76841: PPUSH
76842: CALL_OW 461
76846: PUSH
76847: LD_INT 2
76849: NONEQUAL
76850: PUSH
76851: LD_VAR 0 3
76855: PPUSH
76856: LD_INT 15
76858: PPUSH
76859: CALL 28644 0 2
76863: PUSH
76864: LD_INT 4
76866: ARRAY
76867: OR
76868: PUSH
76869: LD_VAR 0 3
76873: PPUSH
76874: CALL_OW 313
76878: PUSH
76879: LD_INT 0
76881: EQUAL
76882: OR
76883: IFFALSE 76887
// continue ;
76885: GO 76834
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76887: LD_VAR 0 3
76891: PPUSH
76892: LD_EXP 57
76896: PUSH
76897: LD_VAR 0 2
76901: ARRAY
76902: PUSH
76903: LD_INT 1
76905: ARRAY
76906: PUSH
76907: LD_INT 1
76909: ARRAY
76910: PPUSH
76911: LD_EXP 57
76915: PUSH
76916: LD_VAR 0 2
76920: ARRAY
76921: PUSH
76922: LD_INT 1
76924: ARRAY
76925: PUSH
76926: LD_INT 2
76928: ARRAY
76929: PPUSH
76930: LD_EXP 57
76934: PUSH
76935: LD_VAR 0 2
76939: ARRAY
76940: PUSH
76941: LD_INT 1
76943: ARRAY
76944: PUSH
76945: LD_INT 3
76947: ARRAY
76948: PPUSH
76949: LD_EXP 57
76953: PUSH
76954: LD_VAR 0 2
76958: ARRAY
76959: PUSH
76960: LD_INT 1
76962: ARRAY
76963: PUSH
76964: LD_INT 4
76966: ARRAY
76967: PPUSH
76968: CALL_OW 448
76972: PUSH
76973: LD_VAR 0 3
76977: PPUSH
76978: LD_EXP 57
76982: PUSH
76983: LD_VAR 0 2
76987: ARRAY
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PUSH
76993: LD_INT 1
76995: ARRAY
76996: PUSH
76997: LD_EXP 57
77001: PUSH
77002: LD_VAR 0 2
77006: ARRAY
77007: PUSH
77008: LD_INT 1
77010: ARRAY
77011: PUSH
77012: LD_INT 2
77014: ARRAY
77015: PUSH
77016: LD_EXP 57
77020: PUSH
77021: LD_VAR 0 2
77025: ARRAY
77026: PUSH
77027: LD_INT 1
77029: ARRAY
77030: PUSH
77031: LD_INT 3
77033: ARRAY
77034: PUSH
77035: LD_EXP 57
77039: PUSH
77040: LD_VAR 0 2
77044: ARRAY
77045: PUSH
77046: LD_INT 1
77048: ARRAY
77049: PUSH
77050: LD_INT 4
77052: ARRAY
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: PPUSH
77060: CALL 32315 0 2
77064: AND
77065: IFFALSE 77203
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77067: LD_VAR 0 3
77071: PPUSH
77072: LD_EXP 57
77076: PUSH
77077: LD_VAR 0 2
77081: ARRAY
77082: PUSH
77083: LD_INT 1
77085: ARRAY
77086: PUSH
77087: LD_INT 1
77089: ARRAY
77090: PPUSH
77091: LD_EXP 57
77095: PUSH
77096: LD_VAR 0 2
77100: ARRAY
77101: PUSH
77102: LD_INT 1
77104: ARRAY
77105: PUSH
77106: LD_INT 2
77108: ARRAY
77109: PPUSH
77110: LD_EXP 57
77114: PUSH
77115: LD_VAR 0 2
77119: ARRAY
77120: PUSH
77121: LD_INT 1
77123: ARRAY
77124: PUSH
77125: LD_INT 3
77127: ARRAY
77128: PPUSH
77129: LD_EXP 57
77133: PUSH
77134: LD_VAR 0 2
77138: ARRAY
77139: PUSH
77140: LD_INT 1
77142: ARRAY
77143: PUSH
77144: LD_INT 4
77146: ARRAY
77147: PPUSH
77148: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77152: LD_ADDR_VAR 0 4
77156: PUSH
77157: LD_EXP 57
77161: PUSH
77162: LD_VAR 0 2
77166: ARRAY
77167: PPUSH
77168: LD_INT 1
77170: PPUSH
77171: CALL_OW 3
77175: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77176: LD_ADDR_EXP 57
77180: PUSH
77181: LD_EXP 57
77185: PPUSH
77186: LD_VAR 0 2
77190: PPUSH
77191: LD_VAR 0 4
77195: PPUSH
77196: CALL_OW 1
77200: ST_TO_ADDR
// break ;
77201: GO 77205
// end ; end ;
77203: GO 76834
77205: POP
77206: POP
// end ;
77207: GO 76766
77209: POP
77210: POP
// end ;
77211: LD_VAR 0 1
77215: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77216: LD_INT 0
77218: PPUSH
77219: PPUSH
77220: PPUSH
// if not mc_bases then
77221: LD_EXP 36
77225: NOT
77226: IFFALSE 77230
// exit ;
77228: GO 77319
// for i = 1 to mc_bases do
77230: LD_ADDR_VAR 0 2
77234: PUSH
77235: DOUBLE
77236: LD_INT 1
77238: DEC
77239: ST_TO_ADDR
77240: LD_EXP 36
77244: PUSH
77245: FOR_TO
77246: IFFALSE 77317
// begin if mc_attack [ i ] then
77248: LD_EXP 56
77252: PUSH
77253: LD_VAR 0 2
77257: ARRAY
77258: IFFALSE 77315
// begin tmp := mc_attack [ i ] [ 1 ] ;
77260: LD_ADDR_VAR 0 3
77264: PUSH
77265: LD_EXP 56
77269: PUSH
77270: LD_VAR 0 2
77274: ARRAY
77275: PUSH
77276: LD_INT 1
77278: ARRAY
77279: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77280: LD_ADDR_EXP 56
77284: PUSH
77285: LD_EXP 56
77289: PPUSH
77290: LD_VAR 0 2
77294: PPUSH
77295: EMPTY
77296: PPUSH
77297: CALL_OW 1
77301: ST_TO_ADDR
// Attack ( tmp ) ;
77302: LD_VAR 0 3
77306: PPUSH
77307: CALL 54528 0 1
// exit ;
77311: POP
77312: POP
77313: GO 77319
// end ; end ;
77315: GO 77245
77317: POP
77318: POP
// end ;
77319: LD_VAR 0 1
77323: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77324: LD_INT 0
77326: PPUSH
77327: PPUSH
77328: PPUSH
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
// if not mc_bases then
77333: LD_EXP 36
77337: NOT
77338: IFFALSE 77342
// exit ;
77340: GO 77924
// for i = 1 to mc_bases do
77342: LD_ADDR_VAR 0 2
77346: PUSH
77347: DOUBLE
77348: LD_INT 1
77350: DEC
77351: ST_TO_ADDR
77352: LD_EXP 36
77356: PUSH
77357: FOR_TO
77358: IFFALSE 77922
// begin if not mc_bases [ i ] then
77360: LD_EXP 36
77364: PUSH
77365: LD_VAR 0 2
77369: ARRAY
77370: NOT
77371: IFFALSE 77375
// continue ;
77373: GO 77357
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77375: LD_ADDR_VAR 0 7
77379: PUSH
77380: LD_EXP 36
77384: PUSH
77385: LD_VAR 0 2
77389: ARRAY
77390: PUSH
77391: LD_INT 1
77393: ARRAY
77394: PPUSH
77395: CALL 22948 0 1
77399: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77400: LD_ADDR_EXP 59
77404: PUSH
77405: LD_EXP 59
77409: PPUSH
77410: LD_VAR 0 2
77414: PPUSH
77415: LD_EXP 36
77419: PUSH
77420: LD_VAR 0 2
77424: ARRAY
77425: PUSH
77426: LD_INT 1
77428: ARRAY
77429: PPUSH
77430: CALL_OW 255
77434: PPUSH
77435: LD_EXP 61
77439: PUSH
77440: LD_VAR 0 2
77444: ARRAY
77445: PPUSH
77446: CALL 20945 0 2
77450: PPUSH
77451: CALL_OW 1
77455: ST_TO_ADDR
// if not mc_scan [ i ] then
77456: LD_EXP 59
77460: PUSH
77461: LD_VAR 0 2
77465: ARRAY
77466: NOT
77467: IFFALSE 77622
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77469: LD_ADDR_VAR 0 4
77473: PUSH
77474: LD_EXP 36
77478: PUSH
77479: LD_VAR 0 2
77483: ARRAY
77484: PPUSH
77485: LD_INT 2
77487: PUSH
77488: LD_INT 25
77490: PUSH
77491: LD_INT 5
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: LD_INT 25
77500: PUSH
77501: LD_INT 8
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: PUSH
77508: LD_INT 25
77510: PUSH
77511: LD_INT 9
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: PPUSH
77524: CALL_OW 72
77528: ST_TO_ADDR
// if not tmp then
77529: LD_VAR 0 4
77533: NOT
77534: IFFALSE 77538
// continue ;
77536: GO 77357
// for j in tmp do
77538: LD_ADDR_VAR 0 3
77542: PUSH
77543: LD_VAR 0 4
77547: PUSH
77548: FOR_IN
77549: IFFALSE 77620
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77551: LD_VAR 0 3
77555: PPUSH
77556: CALL_OW 310
77560: PPUSH
77561: CALL_OW 266
77565: PUSH
77566: LD_INT 5
77568: EQUAL
77569: PUSH
77570: LD_VAR 0 3
77574: PPUSH
77575: CALL_OW 257
77579: PUSH
77580: LD_INT 1
77582: EQUAL
77583: AND
77584: PUSH
77585: LD_VAR 0 3
77589: PPUSH
77590: CALL_OW 459
77594: NOT
77595: AND
77596: PUSH
77597: LD_VAR 0 7
77601: AND
77602: IFFALSE 77618
// ComChangeProfession ( j , class ) ;
77604: LD_VAR 0 3
77608: PPUSH
77609: LD_VAR 0 7
77613: PPUSH
77614: CALL_OW 123
77618: GO 77548
77620: POP
77621: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77622: LD_EXP 59
77626: PUSH
77627: LD_VAR 0 2
77631: ARRAY
77632: PUSH
77633: LD_EXP 58
77637: PUSH
77638: LD_VAR 0 2
77642: ARRAY
77643: NOT
77644: AND
77645: PUSH
77646: LD_EXP 36
77650: PUSH
77651: LD_VAR 0 2
77655: ARRAY
77656: PPUSH
77657: LD_INT 30
77659: PUSH
77660: LD_INT 32
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PPUSH
77667: CALL_OW 72
77671: NOT
77672: AND
77673: PUSH
77674: LD_EXP 36
77678: PUSH
77679: LD_VAR 0 2
77683: ARRAY
77684: PPUSH
77685: LD_INT 2
77687: PUSH
77688: LD_INT 30
77690: PUSH
77691: LD_INT 4
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 30
77700: PUSH
77701: LD_INT 5
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: LIST
77712: PPUSH
77713: CALL_OW 72
77717: NOT
77718: AND
77719: IFFALSE 77851
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77721: LD_ADDR_VAR 0 4
77725: PUSH
77726: LD_EXP 36
77730: PUSH
77731: LD_VAR 0 2
77735: ARRAY
77736: PPUSH
77737: LD_INT 2
77739: PUSH
77740: LD_INT 25
77742: PUSH
77743: LD_INT 1
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: PUSH
77750: LD_INT 25
77752: PUSH
77753: LD_INT 5
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PUSH
77760: LD_INT 25
77762: PUSH
77763: LD_INT 8
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 25
77772: PUSH
77773: LD_INT 9
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: PPUSH
77787: CALL_OW 72
77791: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77792: LD_ADDR_VAR 0 4
77796: PUSH
77797: LD_VAR 0 4
77801: PUSH
77802: LD_VAR 0 4
77806: PPUSH
77807: LD_INT 18
77809: PPUSH
77810: CALL 59311 0 2
77814: DIFF
77815: ST_TO_ADDR
// if tmp then
77816: LD_VAR 0 4
77820: IFFALSE 77851
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77822: LD_VAR 0 2
77826: PPUSH
77827: LD_VAR 0 4
77831: PPUSH
77832: LD_EXP 61
77836: PUSH
77837: LD_VAR 0 2
77841: ARRAY
77842: PPUSH
77843: CALL 20980 0 3
// exit ;
77847: POP
77848: POP
77849: GO 77924
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77851: LD_EXP 59
77855: PUSH
77856: LD_VAR 0 2
77860: ARRAY
77861: PUSH
77862: LD_EXP 58
77866: PUSH
77867: LD_VAR 0 2
77871: ARRAY
77872: AND
77873: IFFALSE 77920
// begin tmp := mc_defender [ i ] ;
77875: LD_ADDR_VAR 0 4
77879: PUSH
77880: LD_EXP 58
77884: PUSH
77885: LD_VAR 0 2
77889: ARRAY
77890: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77891: LD_VAR 0 2
77895: PPUSH
77896: LD_VAR 0 4
77900: PPUSH
77901: LD_EXP 59
77905: PUSH
77906: LD_VAR 0 2
77910: ARRAY
77911: PPUSH
77912: CALL 21478 0 3
// exit ;
77916: POP
77917: POP
77918: GO 77924
// end ; end ;
77920: GO 77357
77922: POP
77923: POP
// end ;
77924: LD_VAR 0 1
77928: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77929: LD_INT 0
77931: PPUSH
77932: PPUSH
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
77940: PPUSH
77941: PPUSH
// if not mc_bases then
77942: LD_EXP 36
77946: NOT
77947: IFFALSE 77951
// exit ;
77949: GO 79038
// for i = 1 to mc_bases do
77951: LD_ADDR_VAR 0 2
77955: PUSH
77956: DOUBLE
77957: LD_INT 1
77959: DEC
77960: ST_TO_ADDR
77961: LD_EXP 36
77965: PUSH
77966: FOR_TO
77967: IFFALSE 79036
// begin tmp := mc_lab [ i ] ;
77969: LD_ADDR_VAR 0 6
77973: PUSH
77974: LD_EXP 69
77978: PUSH
77979: LD_VAR 0 2
77983: ARRAY
77984: ST_TO_ADDR
// if not tmp then
77985: LD_VAR 0 6
77989: NOT
77990: IFFALSE 77994
// continue ;
77992: GO 77966
// idle_lab := 0 ;
77994: LD_ADDR_VAR 0 11
77998: PUSH
77999: LD_INT 0
78001: ST_TO_ADDR
// for j in tmp do
78002: LD_ADDR_VAR 0 3
78006: PUSH
78007: LD_VAR 0 6
78011: PUSH
78012: FOR_IN
78013: IFFALSE 79032
// begin researching := false ;
78015: LD_ADDR_VAR 0 10
78019: PUSH
78020: LD_INT 0
78022: ST_TO_ADDR
// side := GetSide ( j ) ;
78023: LD_ADDR_VAR 0 4
78027: PUSH
78028: LD_VAR 0 3
78032: PPUSH
78033: CALL_OW 255
78037: ST_TO_ADDR
// if not mc_tech [ side ] then
78038: LD_EXP 63
78042: PUSH
78043: LD_VAR 0 4
78047: ARRAY
78048: NOT
78049: IFFALSE 78053
// continue ;
78051: GO 78012
// if BuildingStatus ( j ) = bs_idle then
78053: LD_VAR 0 3
78057: PPUSH
78058: CALL_OW 461
78062: PUSH
78063: LD_INT 2
78065: EQUAL
78066: IFFALSE 78254
// begin if idle_lab and UnitsInside ( j ) < 6 then
78068: LD_VAR 0 11
78072: PUSH
78073: LD_VAR 0 3
78077: PPUSH
78078: CALL_OW 313
78082: PUSH
78083: LD_INT 6
78085: LESS
78086: AND
78087: IFFALSE 78158
// begin tmp2 := UnitsInside ( idle_lab ) ;
78089: LD_ADDR_VAR 0 9
78093: PUSH
78094: LD_VAR 0 11
78098: PPUSH
78099: CALL_OW 313
78103: ST_TO_ADDR
// if tmp2 then
78104: LD_VAR 0 9
78108: IFFALSE 78150
// for x in tmp2 do
78110: LD_ADDR_VAR 0 7
78114: PUSH
78115: LD_VAR 0 9
78119: PUSH
78120: FOR_IN
78121: IFFALSE 78148
// begin ComExitBuilding ( x ) ;
78123: LD_VAR 0 7
78127: PPUSH
78128: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78132: LD_VAR 0 7
78136: PPUSH
78137: LD_VAR 0 3
78141: PPUSH
78142: CALL_OW 180
// end ;
78146: GO 78120
78148: POP
78149: POP
// idle_lab := 0 ;
78150: LD_ADDR_VAR 0 11
78154: PUSH
78155: LD_INT 0
78157: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78158: LD_ADDR_VAR 0 5
78162: PUSH
78163: LD_EXP 63
78167: PUSH
78168: LD_VAR 0 4
78172: ARRAY
78173: PUSH
78174: FOR_IN
78175: IFFALSE 78235
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78177: LD_VAR 0 3
78181: PPUSH
78182: LD_VAR 0 5
78186: PPUSH
78187: CALL_OW 430
78191: PUSH
78192: LD_VAR 0 4
78196: PPUSH
78197: LD_VAR 0 5
78201: PPUSH
78202: CALL 20050 0 2
78206: AND
78207: IFFALSE 78233
// begin researching := true ;
78209: LD_ADDR_VAR 0 10
78213: PUSH
78214: LD_INT 1
78216: ST_TO_ADDR
// ComResearch ( j , t ) ;
78217: LD_VAR 0 3
78221: PPUSH
78222: LD_VAR 0 5
78226: PPUSH
78227: CALL_OW 124
// break ;
78231: GO 78235
// end ;
78233: GO 78174
78235: POP
78236: POP
// if not researching then
78237: LD_VAR 0 10
78241: NOT
78242: IFFALSE 78254
// idle_lab := j ;
78244: LD_ADDR_VAR 0 11
78248: PUSH
78249: LD_VAR 0 3
78253: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78254: LD_VAR 0 3
78258: PPUSH
78259: CALL_OW 461
78263: PUSH
78264: LD_INT 10
78266: EQUAL
78267: IFFALSE 78855
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78269: LD_EXP 65
78273: PUSH
78274: LD_VAR 0 2
78278: ARRAY
78279: NOT
78280: PUSH
78281: LD_EXP 66
78285: PUSH
78286: LD_VAR 0 2
78290: ARRAY
78291: NOT
78292: AND
78293: PUSH
78294: LD_EXP 63
78298: PUSH
78299: LD_VAR 0 4
78303: ARRAY
78304: PUSH
78305: LD_INT 1
78307: GREATER
78308: AND
78309: IFFALSE 78440
// begin ComCancel ( j ) ;
78311: LD_VAR 0 3
78315: PPUSH
78316: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78320: LD_ADDR_EXP 63
78324: PUSH
78325: LD_EXP 63
78329: PPUSH
78330: LD_VAR 0 4
78334: PPUSH
78335: LD_EXP 63
78339: PUSH
78340: LD_VAR 0 4
78344: ARRAY
78345: PPUSH
78346: LD_EXP 63
78350: PUSH
78351: LD_VAR 0 4
78355: ARRAY
78356: PUSH
78357: LD_INT 1
78359: MINUS
78360: PPUSH
78361: LD_EXP 63
78365: PUSH
78366: LD_VAR 0 4
78370: ARRAY
78371: PPUSH
78372: LD_INT 0
78374: PPUSH
78375: CALL 25469 0 4
78379: PPUSH
78380: CALL_OW 1
78384: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78385: LD_ADDR_EXP 63
78389: PUSH
78390: LD_EXP 63
78394: PPUSH
78395: LD_VAR 0 4
78399: PPUSH
78400: LD_EXP 63
78404: PUSH
78405: LD_VAR 0 4
78409: ARRAY
78410: PPUSH
78411: LD_EXP 63
78415: PUSH
78416: LD_VAR 0 4
78420: ARRAY
78421: PPUSH
78422: LD_INT 1
78424: PPUSH
78425: LD_INT 0
78427: PPUSH
78428: CALL 25469 0 4
78432: PPUSH
78433: CALL_OW 1
78437: ST_TO_ADDR
// continue ;
78438: GO 78012
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78440: LD_EXP 65
78444: PUSH
78445: LD_VAR 0 2
78449: ARRAY
78450: PUSH
78451: LD_EXP 66
78455: PUSH
78456: LD_VAR 0 2
78460: ARRAY
78461: NOT
78462: AND
78463: IFFALSE 78590
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78465: LD_ADDR_EXP 66
78469: PUSH
78470: LD_EXP 66
78474: PPUSH
78475: LD_VAR 0 2
78479: PUSH
78480: LD_EXP 66
78484: PUSH
78485: LD_VAR 0 2
78489: ARRAY
78490: PUSH
78491: LD_INT 1
78493: PLUS
78494: PUSH
78495: EMPTY
78496: LIST
78497: LIST
78498: PPUSH
78499: LD_EXP 65
78503: PUSH
78504: LD_VAR 0 2
78508: ARRAY
78509: PUSH
78510: LD_INT 1
78512: ARRAY
78513: PPUSH
78514: CALL 26051 0 3
78518: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
78519: LD_EXP 65
78523: PUSH
78524: LD_VAR 0 2
78528: ARRAY
78529: PUSH
78530: LD_INT 1
78532: ARRAY
78533: PPUSH
78534: LD_INT 112
78536: PPUSH
78537: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78541: LD_ADDR_VAR 0 9
78545: PUSH
78546: LD_EXP 65
78550: PUSH
78551: LD_VAR 0 2
78555: ARRAY
78556: PPUSH
78557: LD_INT 1
78559: PPUSH
78560: CALL_OW 3
78564: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78565: LD_ADDR_EXP 65
78569: PUSH
78570: LD_EXP 65
78574: PPUSH
78575: LD_VAR 0 2
78579: PPUSH
78580: LD_VAR 0 9
78584: PPUSH
78585: CALL_OW 1
78589: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78590: LD_EXP 65
78594: PUSH
78595: LD_VAR 0 2
78599: ARRAY
78600: PUSH
78601: LD_EXP 66
78605: PUSH
78606: LD_VAR 0 2
78610: ARRAY
78611: AND
78612: PUSH
78613: LD_EXP 66
78617: PUSH
78618: LD_VAR 0 2
78622: ARRAY
78623: PUSH
78624: LD_INT 1
78626: ARRAY
78627: PPUSH
78628: CALL_OW 310
78632: NOT
78633: AND
78634: PUSH
78635: LD_VAR 0 3
78639: PPUSH
78640: CALL_OW 313
78644: PUSH
78645: LD_INT 6
78647: EQUAL
78648: AND
78649: IFFALSE 78705
// begin tmp2 := UnitsInside ( j ) ;
78651: LD_ADDR_VAR 0 9
78655: PUSH
78656: LD_VAR 0 3
78660: PPUSH
78661: CALL_OW 313
78665: ST_TO_ADDR
// if tmp2 = 6 then
78666: LD_VAR 0 9
78670: PUSH
78671: LD_INT 6
78673: EQUAL
78674: IFFALSE 78705
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78676: LD_VAR 0 9
78680: PUSH
78681: LD_INT 1
78683: ARRAY
78684: PPUSH
78685: LD_INT 112
78687: PPUSH
78688: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78692: LD_VAR 0 9
78696: PUSH
78697: LD_INT 1
78699: ARRAY
78700: PPUSH
78701: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78705: LD_EXP 66
78709: PUSH
78710: LD_VAR 0 2
78714: ARRAY
78715: PUSH
78716: LD_EXP 66
78720: PUSH
78721: LD_VAR 0 2
78725: ARRAY
78726: PUSH
78727: LD_INT 1
78729: ARRAY
78730: PPUSH
78731: CALL_OW 314
78735: NOT
78736: AND
78737: PUSH
78738: LD_EXP 66
78742: PUSH
78743: LD_VAR 0 2
78747: ARRAY
78748: PUSH
78749: LD_INT 1
78751: ARRAY
78752: PPUSH
78753: CALL_OW 310
78757: NOT
78758: AND
78759: IFFALSE 78785
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78761: LD_EXP 66
78765: PUSH
78766: LD_VAR 0 2
78770: ARRAY
78771: PUSH
78772: LD_INT 1
78774: ARRAY
78775: PPUSH
78776: LD_VAR 0 3
78780: PPUSH
78781: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78785: LD_EXP 66
78789: PUSH
78790: LD_VAR 0 2
78794: ARRAY
78795: PUSH
78796: LD_INT 1
78798: ARRAY
78799: PPUSH
78800: CALL_OW 310
78804: PUSH
78805: LD_EXP 66
78809: PUSH
78810: LD_VAR 0 2
78814: ARRAY
78815: PUSH
78816: LD_INT 1
78818: ARRAY
78819: PPUSH
78820: CALL_OW 310
78824: PPUSH
78825: CALL_OW 461
78829: PUSH
78830: LD_INT 3
78832: NONEQUAL
78833: AND
78834: IFFALSE 78855
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78836: LD_EXP 66
78840: PUSH
78841: LD_VAR 0 2
78845: ARRAY
78846: PUSH
78847: LD_INT 1
78849: ARRAY
78850: PPUSH
78851: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78855: LD_VAR 0 3
78859: PPUSH
78860: CALL_OW 461
78864: PUSH
78865: LD_INT 6
78867: EQUAL
78868: PUSH
78869: LD_VAR 0 6
78873: PUSH
78874: LD_INT 1
78876: GREATER
78877: AND
78878: IFFALSE 79030
// begin sci := [ ] ;
78880: LD_ADDR_VAR 0 8
78884: PUSH
78885: EMPTY
78886: ST_TO_ADDR
// for x in ( tmp diff j ) do
78887: LD_ADDR_VAR 0 7
78891: PUSH
78892: LD_VAR 0 6
78896: PUSH
78897: LD_VAR 0 3
78901: DIFF
78902: PUSH
78903: FOR_IN
78904: IFFALSE 78956
// begin if sci = 6 then
78906: LD_VAR 0 8
78910: PUSH
78911: LD_INT 6
78913: EQUAL
78914: IFFALSE 78918
// break ;
78916: GO 78956
// if BuildingStatus ( x ) = bs_idle then
78918: LD_VAR 0 7
78922: PPUSH
78923: CALL_OW 461
78927: PUSH
78928: LD_INT 2
78930: EQUAL
78931: IFFALSE 78954
// sci := sci ^ UnitsInside ( x ) ;
78933: LD_ADDR_VAR 0 8
78937: PUSH
78938: LD_VAR 0 8
78942: PUSH
78943: LD_VAR 0 7
78947: PPUSH
78948: CALL_OW 313
78952: ADD
78953: ST_TO_ADDR
// end ;
78954: GO 78903
78956: POP
78957: POP
// if not sci then
78958: LD_VAR 0 8
78962: NOT
78963: IFFALSE 78967
// continue ;
78965: GO 78012
// for x in sci do
78967: LD_ADDR_VAR 0 7
78971: PUSH
78972: LD_VAR 0 8
78976: PUSH
78977: FOR_IN
78978: IFFALSE 79028
// if IsInUnit ( x ) and not HasTask ( x ) then
78980: LD_VAR 0 7
78984: PPUSH
78985: CALL_OW 310
78989: PUSH
78990: LD_VAR 0 7
78994: PPUSH
78995: CALL_OW 314
78999: NOT
79000: AND
79001: IFFALSE 79026
// begin ComExitBuilding ( x ) ;
79003: LD_VAR 0 7
79007: PPUSH
79008: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79012: LD_VAR 0 7
79016: PPUSH
79017: LD_VAR 0 3
79021: PPUSH
79022: CALL_OW 180
// end ;
79026: GO 78977
79028: POP
79029: POP
// end ; end ;
79030: GO 78012
79032: POP
79033: POP
// end ;
79034: GO 77966
79036: POP
79037: POP
// end ;
79038: LD_VAR 0 1
79042: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79043: LD_INT 0
79045: PPUSH
79046: PPUSH
// if not mc_bases then
79047: LD_EXP 36
79051: NOT
79052: IFFALSE 79056
// exit ;
79054: GO 79137
// for i = 1 to mc_bases do
79056: LD_ADDR_VAR 0 2
79060: PUSH
79061: DOUBLE
79062: LD_INT 1
79064: DEC
79065: ST_TO_ADDR
79066: LD_EXP 36
79070: PUSH
79071: FOR_TO
79072: IFFALSE 79135
// if mc_mines [ i ] and mc_miners [ i ] then
79074: LD_EXP 49
79078: PUSH
79079: LD_VAR 0 2
79083: ARRAY
79084: PUSH
79085: LD_EXP 50
79089: PUSH
79090: LD_VAR 0 2
79094: ARRAY
79095: AND
79096: IFFALSE 79133
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79098: LD_EXP 50
79102: PUSH
79103: LD_VAR 0 2
79107: ARRAY
79108: PUSH
79109: LD_INT 1
79111: ARRAY
79112: PPUSH
79113: CALL_OW 255
79117: PPUSH
79118: LD_EXP 49
79122: PUSH
79123: LD_VAR 0 2
79127: ARRAY
79128: PPUSH
79129: CALL 23101 0 2
79133: GO 79071
79135: POP
79136: POP
// end ;
79137: LD_VAR 0 1
79141: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79142: LD_INT 0
79144: PPUSH
79145: PPUSH
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
79151: PPUSH
// if not mc_bases or not mc_parking then
79152: LD_EXP 36
79156: NOT
79157: PUSH
79158: LD_EXP 60
79162: NOT
79163: OR
79164: IFFALSE 79168
// exit ;
79166: GO 79844
// for i = 1 to mc_bases do
79168: LD_ADDR_VAR 0 2
79172: PUSH
79173: DOUBLE
79174: LD_INT 1
79176: DEC
79177: ST_TO_ADDR
79178: LD_EXP 36
79182: PUSH
79183: FOR_TO
79184: IFFALSE 79842
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79186: LD_EXP 36
79190: PUSH
79191: LD_VAR 0 2
79195: ARRAY
79196: NOT
79197: PUSH
79198: LD_EXP 60
79202: PUSH
79203: LD_VAR 0 2
79207: ARRAY
79208: NOT
79209: OR
79210: IFFALSE 79214
// continue ;
79212: GO 79183
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79214: LD_ADDR_VAR 0 5
79218: PUSH
79219: LD_EXP 36
79223: PUSH
79224: LD_VAR 0 2
79228: ARRAY
79229: PUSH
79230: LD_INT 1
79232: ARRAY
79233: PPUSH
79234: CALL_OW 255
79238: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79239: LD_ADDR_VAR 0 6
79243: PUSH
79244: LD_EXP 36
79248: PUSH
79249: LD_VAR 0 2
79253: ARRAY
79254: PPUSH
79255: LD_INT 30
79257: PUSH
79258: LD_INT 3
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PPUSH
79265: CALL_OW 72
79269: ST_TO_ADDR
// if not fac then
79270: LD_VAR 0 6
79274: NOT
79275: IFFALSE 79326
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79277: LD_ADDR_VAR 0 6
79281: PUSH
79282: LD_EXP 36
79286: PUSH
79287: LD_VAR 0 2
79291: ARRAY
79292: PPUSH
79293: LD_INT 2
79295: PUSH
79296: LD_INT 30
79298: PUSH
79299: LD_INT 0
79301: PUSH
79302: EMPTY
79303: LIST
79304: LIST
79305: PUSH
79306: LD_INT 30
79308: PUSH
79309: LD_INT 1
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: LIST
79320: PPUSH
79321: CALL_OW 72
79325: ST_TO_ADDR
// if not fac then
79326: LD_VAR 0 6
79330: NOT
79331: IFFALSE 79335
// continue ;
79333: GO 79183
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79335: LD_ADDR_VAR 0 7
79339: PUSH
79340: LD_EXP 60
79344: PUSH
79345: LD_VAR 0 2
79349: ARRAY
79350: PPUSH
79351: LD_INT 22
79353: PUSH
79354: LD_VAR 0 5
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: PUSH
79363: LD_INT 21
79365: PUSH
79366: LD_INT 2
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: PUSH
79373: LD_INT 3
79375: PUSH
79376: LD_INT 24
79378: PUSH
79379: LD_INT 1000
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: LIST
79394: PPUSH
79395: CALL_OW 70
79399: PUSH
79400: LD_INT 22
79402: PUSH
79403: LD_VAR 0 5
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 91
79414: PUSH
79415: LD_VAR 0 6
79419: PUSH
79420: LD_INT 1
79422: ARRAY
79423: PUSH
79424: LD_INT 25
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: LIST
79431: PUSH
79432: LD_INT 21
79434: PUSH
79435: LD_INT 2
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: PUSH
79442: LD_INT 3
79444: PUSH
79445: LD_INT 24
79447: PUSH
79448: LD_INT 1000
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: EMPTY
79460: LIST
79461: LIST
79462: LIST
79463: LIST
79464: PPUSH
79465: CALL_OW 69
79469: UNION
79470: ST_TO_ADDR
// if not vehs then
79471: LD_VAR 0 7
79475: NOT
79476: IFFALSE 79502
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79478: LD_ADDR_EXP 48
79482: PUSH
79483: LD_EXP 48
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: EMPTY
79494: PPUSH
79495: CALL_OW 1
79499: ST_TO_ADDR
// continue ;
79500: GO 79183
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79502: LD_ADDR_VAR 0 8
79506: PUSH
79507: LD_EXP 36
79511: PUSH
79512: LD_VAR 0 2
79516: ARRAY
79517: PPUSH
79518: LD_INT 30
79520: PUSH
79521: LD_INT 3
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PPUSH
79528: CALL_OW 72
79532: ST_TO_ADDR
// if tmp then
79533: LD_VAR 0 8
79537: IFFALSE 79640
// begin for j in tmp do
79539: LD_ADDR_VAR 0 3
79543: PUSH
79544: LD_VAR 0 8
79548: PUSH
79549: FOR_IN
79550: IFFALSE 79638
// for k in UnitsInside ( j ) do
79552: LD_ADDR_VAR 0 4
79556: PUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: CALL_OW 313
79566: PUSH
79567: FOR_IN
79568: IFFALSE 79634
// if k then
79570: LD_VAR 0 4
79574: IFFALSE 79632
// if not k in mc_repair_vehicle [ i ] then
79576: LD_VAR 0 4
79580: PUSH
79581: LD_EXP 48
79585: PUSH
79586: LD_VAR 0 2
79590: ARRAY
79591: IN
79592: NOT
79593: IFFALSE 79632
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79595: LD_ADDR_EXP 48
79599: PUSH
79600: LD_EXP 48
79604: PPUSH
79605: LD_VAR 0 2
79609: PPUSH
79610: LD_EXP 48
79614: PUSH
79615: LD_VAR 0 2
79619: ARRAY
79620: PUSH
79621: LD_VAR 0 4
79625: UNION
79626: PPUSH
79627: CALL_OW 1
79631: ST_TO_ADDR
79632: GO 79567
79634: POP
79635: POP
79636: GO 79549
79638: POP
79639: POP
// end ; if not mc_repair_vehicle [ i ] then
79640: LD_EXP 48
79644: PUSH
79645: LD_VAR 0 2
79649: ARRAY
79650: NOT
79651: IFFALSE 79655
// continue ;
79653: GO 79183
// for j in mc_repair_vehicle [ i ] do
79655: LD_ADDR_VAR 0 3
79659: PUSH
79660: LD_EXP 48
79664: PUSH
79665: LD_VAR 0 2
79669: ARRAY
79670: PUSH
79671: FOR_IN
79672: IFFALSE 79838
// begin if GetClass ( j ) <> 3 then
79674: LD_VAR 0 3
79678: PPUSH
79679: CALL_OW 257
79683: PUSH
79684: LD_INT 3
79686: NONEQUAL
79687: IFFALSE 79728
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79689: LD_ADDR_EXP 48
79693: PUSH
79694: LD_EXP 48
79698: PPUSH
79699: LD_VAR 0 2
79703: PPUSH
79704: LD_EXP 48
79708: PUSH
79709: LD_VAR 0 2
79713: ARRAY
79714: PUSH
79715: LD_VAR 0 3
79719: DIFF
79720: PPUSH
79721: CALL_OW 1
79725: ST_TO_ADDR
// continue ;
79726: GO 79671
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79728: LD_VAR 0 3
79732: PPUSH
79733: CALL_OW 311
79737: NOT
79738: PUSH
79739: LD_VAR 0 3
79743: PUSH
79744: LD_EXP 39
79748: PUSH
79749: LD_VAR 0 2
79753: ARRAY
79754: PUSH
79755: LD_INT 1
79757: ARRAY
79758: IN
79759: NOT
79760: AND
79761: PUSH
79762: LD_VAR 0 3
79766: PUSH
79767: LD_EXP 39
79771: PUSH
79772: LD_VAR 0 2
79776: ARRAY
79777: PUSH
79778: LD_INT 2
79780: ARRAY
79781: IN
79782: NOT
79783: AND
79784: IFFALSE 79836
// begin if IsInUnit ( j ) then
79786: LD_VAR 0 3
79790: PPUSH
79791: CALL_OW 310
79795: IFFALSE 79806
// ComExitBuilding ( j ) ;
79797: LD_VAR 0 3
79801: PPUSH
79802: CALL_OW 122
// if not HasTask ( j ) then
79806: LD_VAR 0 3
79810: PPUSH
79811: CALL_OW 314
79815: NOT
79816: IFFALSE 79836
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79818: LD_VAR 0 3
79822: PPUSH
79823: LD_VAR 0 7
79827: PUSH
79828: LD_INT 1
79830: ARRAY
79831: PPUSH
79832: CALL_OW 189
// end ; end ;
79836: GO 79671
79838: POP
79839: POP
// end ;
79840: GO 79183
79842: POP
79843: POP
// end ;
79844: LD_VAR 0 1
79848: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79849: LD_INT 0
79851: PPUSH
79852: PPUSH
79853: PPUSH
79854: PPUSH
79855: PPUSH
79856: PPUSH
79857: PPUSH
79858: PPUSH
79859: PPUSH
79860: PPUSH
79861: PPUSH
// if not mc_bases then
79862: LD_EXP 36
79866: NOT
79867: IFFALSE 79871
// exit ;
79869: GO 80673
// for i = 1 to mc_bases do
79871: LD_ADDR_VAR 0 2
79875: PUSH
79876: DOUBLE
79877: LD_INT 1
79879: DEC
79880: ST_TO_ADDR
79881: LD_EXP 36
79885: PUSH
79886: FOR_TO
79887: IFFALSE 80671
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79889: LD_EXP 64
79893: PUSH
79894: LD_VAR 0 2
79898: ARRAY
79899: NOT
79900: PUSH
79901: LD_EXP 39
79905: PUSH
79906: LD_VAR 0 2
79910: ARRAY
79911: PUSH
79912: LD_INT 1
79914: ARRAY
79915: OR
79916: PUSH
79917: LD_EXP 39
79921: PUSH
79922: LD_VAR 0 2
79926: ARRAY
79927: PUSH
79928: LD_INT 2
79930: ARRAY
79931: OR
79932: PUSH
79933: LD_EXP 62
79937: PUSH
79938: LD_VAR 0 2
79942: ARRAY
79943: PPUSH
79944: LD_INT 1
79946: PPUSH
79947: CALL_OW 325
79951: NOT
79952: OR
79953: PUSH
79954: LD_EXP 59
79958: PUSH
79959: LD_VAR 0 2
79963: ARRAY
79964: OR
79965: IFFALSE 79969
// continue ;
79967: GO 79886
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79969: LD_ADDR_VAR 0 8
79973: PUSH
79974: LD_EXP 36
79978: PUSH
79979: LD_VAR 0 2
79983: ARRAY
79984: PPUSH
79985: LD_INT 25
79987: PUSH
79988: LD_INT 4
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PUSH
79995: LD_INT 50
79997: PUSH
79998: EMPTY
79999: LIST
80000: PUSH
80001: LD_INT 3
80003: PUSH
80004: LD_INT 60
80006: PUSH
80007: EMPTY
80008: LIST
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: LIST
80018: PPUSH
80019: CALL_OW 72
80023: PUSH
80024: LD_EXP 40
80028: PUSH
80029: LD_VAR 0 2
80033: ARRAY
80034: DIFF
80035: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80036: LD_ADDR_VAR 0 9
80040: PUSH
80041: LD_EXP 36
80045: PUSH
80046: LD_VAR 0 2
80050: ARRAY
80051: PPUSH
80052: LD_INT 2
80054: PUSH
80055: LD_INT 30
80057: PUSH
80058: LD_INT 0
80060: PUSH
80061: EMPTY
80062: LIST
80063: LIST
80064: PUSH
80065: LD_INT 30
80067: PUSH
80068: LD_INT 1
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: LIST
80079: PPUSH
80080: CALL_OW 72
80084: ST_TO_ADDR
// if not tmp or not dep then
80085: LD_VAR 0 8
80089: NOT
80090: PUSH
80091: LD_VAR 0 9
80095: NOT
80096: OR
80097: IFFALSE 80101
// continue ;
80099: GO 79886
// side := GetSide ( tmp [ 1 ] ) ;
80101: LD_ADDR_VAR 0 11
80105: PUSH
80106: LD_VAR 0 8
80110: PUSH
80111: LD_INT 1
80113: ARRAY
80114: PPUSH
80115: CALL_OW 255
80119: ST_TO_ADDR
// dep := dep [ 1 ] ;
80120: LD_ADDR_VAR 0 9
80124: PUSH
80125: LD_VAR 0 9
80129: PUSH
80130: LD_INT 1
80132: ARRAY
80133: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80134: LD_ADDR_VAR 0 7
80138: PUSH
80139: LD_EXP 64
80143: PUSH
80144: LD_VAR 0 2
80148: ARRAY
80149: PPUSH
80150: LD_INT 22
80152: PUSH
80153: LD_INT 0
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: LD_INT 25
80162: PUSH
80163: LD_INT 12
80165: PUSH
80166: EMPTY
80167: LIST
80168: LIST
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: PPUSH
80174: CALL_OW 70
80178: PUSH
80179: LD_INT 22
80181: PUSH
80182: LD_INT 0
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 25
80191: PUSH
80192: LD_INT 12
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: LD_INT 91
80201: PUSH
80202: LD_VAR 0 9
80206: PUSH
80207: LD_INT 20
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: LIST
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: LIST
80219: PPUSH
80220: CALL_OW 69
80224: UNION
80225: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80226: LD_ADDR_VAR 0 10
80230: PUSH
80231: LD_EXP 64
80235: PUSH
80236: LD_VAR 0 2
80240: ARRAY
80241: PPUSH
80242: LD_INT 81
80244: PUSH
80245: LD_VAR 0 11
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PPUSH
80254: CALL_OW 70
80258: ST_TO_ADDR
// if not apes or danger_at_area then
80259: LD_VAR 0 7
80263: NOT
80264: PUSH
80265: LD_VAR 0 10
80269: OR
80270: IFFALSE 80320
// begin if mc_taming [ i ] then
80272: LD_EXP 67
80276: PUSH
80277: LD_VAR 0 2
80281: ARRAY
80282: IFFALSE 80318
// begin MC_Reset ( i , 121 ) ;
80284: LD_VAR 0 2
80288: PPUSH
80289: LD_INT 121
80291: PPUSH
80292: CALL 66013 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80296: LD_ADDR_EXP 67
80300: PUSH
80301: LD_EXP 67
80305: PPUSH
80306: LD_VAR 0 2
80310: PPUSH
80311: EMPTY
80312: PPUSH
80313: CALL_OW 1
80317: ST_TO_ADDR
// end ; continue ;
80318: GO 79886
// end ; for j in tmp do
80320: LD_ADDR_VAR 0 3
80324: PUSH
80325: LD_VAR 0 8
80329: PUSH
80330: FOR_IN
80331: IFFALSE 80667
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80333: LD_VAR 0 3
80337: PUSH
80338: LD_EXP 67
80342: PUSH
80343: LD_VAR 0 2
80347: ARRAY
80348: IN
80349: NOT
80350: PUSH
80351: LD_EXP 67
80355: PUSH
80356: LD_VAR 0 2
80360: ARRAY
80361: PUSH
80362: LD_INT 3
80364: LESS
80365: AND
80366: IFFALSE 80424
// begin SetTag ( j , 121 ) ;
80368: LD_VAR 0 3
80372: PPUSH
80373: LD_INT 121
80375: PPUSH
80376: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80380: LD_ADDR_EXP 67
80384: PUSH
80385: LD_EXP 67
80389: PPUSH
80390: LD_VAR 0 2
80394: PUSH
80395: LD_EXP 67
80399: PUSH
80400: LD_VAR 0 2
80404: ARRAY
80405: PUSH
80406: LD_INT 1
80408: PLUS
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PPUSH
80414: LD_VAR 0 3
80418: PPUSH
80419: CALL 26051 0 3
80423: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80424: LD_VAR 0 3
80428: PUSH
80429: LD_EXP 67
80433: PUSH
80434: LD_VAR 0 2
80438: ARRAY
80439: IN
80440: IFFALSE 80665
// begin if GetClass ( j ) <> 4 then
80442: LD_VAR 0 3
80446: PPUSH
80447: CALL_OW 257
80451: PUSH
80452: LD_INT 4
80454: NONEQUAL
80455: IFFALSE 80508
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80457: LD_ADDR_EXP 67
80461: PUSH
80462: LD_EXP 67
80466: PPUSH
80467: LD_VAR 0 2
80471: PPUSH
80472: LD_EXP 67
80476: PUSH
80477: LD_VAR 0 2
80481: ARRAY
80482: PUSH
80483: LD_VAR 0 3
80487: DIFF
80488: PPUSH
80489: CALL_OW 1
80493: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80494: LD_VAR 0 3
80498: PPUSH
80499: LD_INT 0
80501: PPUSH
80502: CALL_OW 109
// continue ;
80506: GO 80330
// end ; if IsInUnit ( j ) then
80508: LD_VAR 0 3
80512: PPUSH
80513: CALL_OW 310
80517: IFFALSE 80528
// ComExitBuilding ( j ) ;
80519: LD_VAR 0 3
80523: PPUSH
80524: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
80528: LD_ADDR_VAR 0 6
80532: PUSH
80533: LD_VAR 0 7
80537: PPUSH
80538: LD_VAR 0 3
80542: PPUSH
80543: CALL_OW 74
80547: ST_TO_ADDR
// if not ape then
80548: LD_VAR 0 6
80552: NOT
80553: IFFALSE 80557
// break ;
80555: GO 80667
// x := GetX ( ape ) ;
80557: LD_ADDR_VAR 0 4
80561: PUSH
80562: LD_VAR 0 6
80566: PPUSH
80567: CALL_OW 250
80571: ST_TO_ADDR
// y := GetY ( ape ) ;
80572: LD_ADDR_VAR 0 5
80576: PUSH
80577: LD_VAR 0 6
80581: PPUSH
80582: CALL_OW 251
80586: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80587: LD_VAR 0 4
80591: PPUSH
80592: LD_VAR 0 5
80596: PPUSH
80597: CALL_OW 488
80601: NOT
80602: PUSH
80603: LD_VAR 0 11
80607: PPUSH
80608: LD_VAR 0 4
80612: PPUSH
80613: LD_VAR 0 5
80617: PPUSH
80618: LD_INT 20
80620: PPUSH
80621: CALL 26947 0 4
80625: PUSH
80626: LD_INT 4
80628: ARRAY
80629: OR
80630: IFFALSE 80634
// break ;
80632: GO 80667
// if not HasTask ( j ) then
80634: LD_VAR 0 3
80638: PPUSH
80639: CALL_OW 314
80643: NOT
80644: IFFALSE 80665
// ComTameXY ( j , x , y ) ;
80646: LD_VAR 0 3
80650: PPUSH
80651: LD_VAR 0 4
80655: PPUSH
80656: LD_VAR 0 5
80660: PPUSH
80661: CALL_OW 131
// end ; end ;
80665: GO 80330
80667: POP
80668: POP
// end ;
80669: GO 79886
80671: POP
80672: POP
// end ;
80673: LD_VAR 0 1
80677: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80678: LD_INT 0
80680: PPUSH
80681: PPUSH
80682: PPUSH
80683: PPUSH
80684: PPUSH
80685: PPUSH
80686: PPUSH
80687: PPUSH
// if not mc_bases then
80688: LD_EXP 36
80692: NOT
80693: IFFALSE 80697
// exit ;
80695: GO 81323
// for i = 1 to mc_bases do
80697: LD_ADDR_VAR 0 2
80701: PUSH
80702: DOUBLE
80703: LD_INT 1
80705: DEC
80706: ST_TO_ADDR
80707: LD_EXP 36
80711: PUSH
80712: FOR_TO
80713: IFFALSE 81321
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80715: LD_EXP 65
80719: PUSH
80720: LD_VAR 0 2
80724: ARRAY
80725: NOT
80726: PUSH
80727: LD_EXP 65
80731: PUSH
80732: LD_VAR 0 2
80736: ARRAY
80737: PPUSH
80738: LD_INT 25
80740: PUSH
80741: LD_INT 12
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PPUSH
80748: CALL_OW 72
80752: NOT
80753: OR
80754: IFFALSE 80758
// continue ;
80756: GO 80712
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80758: LD_ADDR_VAR 0 5
80762: PUSH
80763: LD_EXP 65
80767: PUSH
80768: LD_VAR 0 2
80772: ARRAY
80773: PUSH
80774: LD_INT 1
80776: ARRAY
80777: PPUSH
80778: CALL_OW 255
80782: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80783: LD_VAR 0 5
80787: PPUSH
80788: LD_INT 2
80790: PPUSH
80791: CALL_OW 325
80795: IFFALSE 81048
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80797: LD_ADDR_VAR 0 4
80801: PUSH
80802: LD_EXP 65
80806: PUSH
80807: LD_VAR 0 2
80811: ARRAY
80812: PPUSH
80813: LD_INT 25
80815: PUSH
80816: LD_INT 16
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PPUSH
80823: CALL_OW 72
80827: ST_TO_ADDR
// if tmp < 6 then
80828: LD_VAR 0 4
80832: PUSH
80833: LD_INT 6
80835: LESS
80836: IFFALSE 81048
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80838: LD_ADDR_VAR 0 6
80842: PUSH
80843: LD_EXP 36
80847: PUSH
80848: LD_VAR 0 2
80852: ARRAY
80853: PPUSH
80854: LD_INT 2
80856: PUSH
80857: LD_INT 30
80859: PUSH
80860: LD_INT 0
80862: PUSH
80863: EMPTY
80864: LIST
80865: LIST
80866: PUSH
80867: LD_INT 30
80869: PUSH
80870: LD_INT 1
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: EMPTY
80878: LIST
80879: LIST
80880: LIST
80881: PPUSH
80882: CALL_OW 72
80886: ST_TO_ADDR
// if depot then
80887: LD_VAR 0 6
80891: IFFALSE 81048
// begin selected := 0 ;
80893: LD_ADDR_VAR 0 7
80897: PUSH
80898: LD_INT 0
80900: ST_TO_ADDR
// for j in depot do
80901: LD_ADDR_VAR 0 3
80905: PUSH
80906: LD_VAR 0 6
80910: PUSH
80911: FOR_IN
80912: IFFALSE 80943
// begin if UnitsInside ( j ) < 6 then
80914: LD_VAR 0 3
80918: PPUSH
80919: CALL_OW 313
80923: PUSH
80924: LD_INT 6
80926: LESS
80927: IFFALSE 80941
// begin selected := j ;
80929: LD_ADDR_VAR 0 7
80933: PUSH
80934: LD_VAR 0 3
80938: ST_TO_ADDR
// break ;
80939: GO 80943
// end ; end ;
80941: GO 80911
80943: POP
80944: POP
// if selected then
80945: LD_VAR 0 7
80949: IFFALSE 81048
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80951: LD_ADDR_VAR 0 3
80955: PUSH
80956: LD_EXP 65
80960: PUSH
80961: LD_VAR 0 2
80965: ARRAY
80966: PPUSH
80967: LD_INT 25
80969: PUSH
80970: LD_INT 12
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: PPUSH
80977: CALL_OW 72
80981: PUSH
80982: FOR_IN
80983: IFFALSE 81046
// if not HasTask ( j ) then
80985: LD_VAR 0 3
80989: PPUSH
80990: CALL_OW 314
80994: NOT
80995: IFFALSE 81044
// begin if not IsInUnit ( j ) then
80997: LD_VAR 0 3
81001: PPUSH
81002: CALL_OW 310
81006: NOT
81007: IFFALSE 81023
// ComEnterUnit ( j , selected ) ;
81009: LD_VAR 0 3
81013: PPUSH
81014: LD_VAR 0 7
81018: PPUSH
81019: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81023: LD_VAR 0 3
81027: PPUSH
81028: LD_INT 16
81030: PPUSH
81031: CALL_OW 183
// AddComExitBuilding ( j ) ;
81035: LD_VAR 0 3
81039: PPUSH
81040: CALL_OW 182
// end ;
81044: GO 80982
81046: POP
81047: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81048: LD_VAR 0 5
81052: PPUSH
81053: LD_INT 11
81055: PPUSH
81056: CALL_OW 325
81060: IFFALSE 81319
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81062: LD_ADDR_VAR 0 4
81066: PUSH
81067: LD_EXP 65
81071: PUSH
81072: LD_VAR 0 2
81076: ARRAY
81077: PPUSH
81078: LD_INT 25
81080: PUSH
81081: LD_INT 16
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PPUSH
81088: CALL_OW 72
81092: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81093: LD_VAR 0 4
81097: PUSH
81098: LD_INT 6
81100: GREATEREQUAL
81101: PUSH
81102: LD_VAR 0 5
81106: PPUSH
81107: LD_INT 2
81109: PPUSH
81110: CALL_OW 325
81114: NOT
81115: OR
81116: IFFALSE 81319
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81118: LD_ADDR_VAR 0 8
81122: PUSH
81123: LD_EXP 36
81127: PUSH
81128: LD_VAR 0 2
81132: ARRAY
81133: PPUSH
81134: LD_INT 2
81136: PUSH
81137: LD_INT 30
81139: PUSH
81140: LD_INT 4
81142: PUSH
81143: EMPTY
81144: LIST
81145: LIST
81146: PUSH
81147: LD_INT 30
81149: PUSH
81150: LD_INT 5
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: PUSH
81157: EMPTY
81158: LIST
81159: LIST
81160: LIST
81161: PPUSH
81162: CALL_OW 72
81166: ST_TO_ADDR
// if barracks then
81167: LD_VAR 0 8
81171: IFFALSE 81319
// begin selected := 0 ;
81173: LD_ADDR_VAR 0 7
81177: PUSH
81178: LD_INT 0
81180: ST_TO_ADDR
// for j in barracks do
81181: LD_ADDR_VAR 0 3
81185: PUSH
81186: LD_VAR 0 8
81190: PUSH
81191: FOR_IN
81192: IFFALSE 81223
// begin if UnitsInside ( j ) < 6 then
81194: LD_VAR 0 3
81198: PPUSH
81199: CALL_OW 313
81203: PUSH
81204: LD_INT 6
81206: LESS
81207: IFFALSE 81221
// begin selected := j ;
81209: LD_ADDR_VAR 0 7
81213: PUSH
81214: LD_VAR 0 3
81218: ST_TO_ADDR
// break ;
81219: GO 81223
// end ; end ;
81221: GO 81191
81223: POP
81224: POP
// if selected then
81225: LD_VAR 0 7
81229: IFFALSE 81319
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81231: LD_ADDR_VAR 0 3
81235: PUSH
81236: LD_EXP 65
81240: PUSH
81241: LD_VAR 0 2
81245: ARRAY
81246: PPUSH
81247: LD_INT 25
81249: PUSH
81250: LD_INT 12
81252: PUSH
81253: EMPTY
81254: LIST
81255: LIST
81256: PPUSH
81257: CALL_OW 72
81261: PUSH
81262: FOR_IN
81263: IFFALSE 81317
// if not IsInUnit ( j ) and not HasTask ( j ) then
81265: LD_VAR 0 3
81269: PPUSH
81270: CALL_OW 310
81274: NOT
81275: PUSH
81276: LD_VAR 0 3
81280: PPUSH
81281: CALL_OW 314
81285: NOT
81286: AND
81287: IFFALSE 81315
// begin ComEnterUnit ( j , selected ) ;
81289: LD_VAR 0 3
81293: PPUSH
81294: LD_VAR 0 7
81298: PPUSH
81299: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81303: LD_VAR 0 3
81307: PPUSH
81308: LD_INT 15
81310: PPUSH
81311: CALL_OW 183
// end ;
81315: GO 81262
81317: POP
81318: POP
// end ; end ; end ; end ; end ;
81319: GO 80712
81321: POP
81322: POP
// end ;
81323: LD_VAR 0 1
81327: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81328: LD_INT 0
81330: PPUSH
81331: PPUSH
81332: PPUSH
81333: PPUSH
// if not mc_bases then
81334: LD_EXP 36
81338: NOT
81339: IFFALSE 81343
// exit ;
81341: GO 81521
// for i = 1 to mc_bases do
81343: LD_ADDR_VAR 0 2
81347: PUSH
81348: DOUBLE
81349: LD_INT 1
81351: DEC
81352: ST_TO_ADDR
81353: LD_EXP 36
81357: PUSH
81358: FOR_TO
81359: IFFALSE 81519
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81361: LD_ADDR_VAR 0 4
81365: PUSH
81366: LD_EXP 36
81370: PUSH
81371: LD_VAR 0 2
81375: ARRAY
81376: PPUSH
81377: LD_INT 25
81379: PUSH
81380: LD_INT 9
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: PPUSH
81387: CALL_OW 72
81391: ST_TO_ADDR
// if not tmp then
81392: LD_VAR 0 4
81396: NOT
81397: IFFALSE 81401
// continue ;
81399: GO 81358
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81401: LD_EXP 62
81405: PUSH
81406: LD_VAR 0 2
81410: ARRAY
81411: PPUSH
81412: LD_INT 29
81414: PPUSH
81415: CALL_OW 325
81419: NOT
81420: PUSH
81421: LD_EXP 62
81425: PUSH
81426: LD_VAR 0 2
81430: ARRAY
81431: PPUSH
81432: LD_INT 28
81434: PPUSH
81435: CALL_OW 325
81439: NOT
81440: AND
81441: IFFALSE 81445
// continue ;
81443: GO 81358
// for j in tmp do
81445: LD_ADDR_VAR 0 3
81449: PUSH
81450: LD_VAR 0 4
81454: PUSH
81455: FOR_IN
81456: IFFALSE 81515
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81458: LD_VAR 0 3
81462: PUSH
81463: LD_EXP 39
81467: PUSH
81468: LD_VAR 0 2
81472: ARRAY
81473: PUSH
81474: LD_INT 1
81476: ARRAY
81477: IN
81478: NOT
81479: PUSH
81480: LD_VAR 0 3
81484: PUSH
81485: LD_EXP 39
81489: PUSH
81490: LD_VAR 0 2
81494: ARRAY
81495: PUSH
81496: LD_INT 2
81498: ARRAY
81499: IN
81500: NOT
81501: AND
81502: IFFALSE 81513
// ComSpaceTimeShoot ( j ) ;
81504: LD_VAR 0 3
81508: PPUSH
81509: CALL 20141 0 1
81513: GO 81455
81515: POP
81516: POP
// end ;
81517: GO 81358
81519: POP
81520: POP
// end ;
81521: LD_VAR 0 1
81525: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81526: LD_INT 0
81528: PPUSH
81529: PPUSH
81530: PPUSH
81531: PPUSH
81532: PPUSH
81533: PPUSH
81534: PPUSH
81535: PPUSH
81536: PPUSH
// if not mc_bases then
81537: LD_EXP 36
81541: NOT
81542: IFFALSE 81546
// exit ;
81544: GO 82168
// for i = 1 to mc_bases do
81546: LD_ADDR_VAR 0 2
81550: PUSH
81551: DOUBLE
81552: LD_INT 1
81554: DEC
81555: ST_TO_ADDR
81556: LD_EXP 36
81560: PUSH
81561: FOR_TO
81562: IFFALSE 82166
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81564: LD_EXP 71
81568: PUSH
81569: LD_VAR 0 2
81573: ARRAY
81574: NOT
81575: PUSH
81576: LD_INT 38
81578: PPUSH
81579: LD_EXP 62
81583: PUSH
81584: LD_VAR 0 2
81588: ARRAY
81589: PPUSH
81590: CALL_OW 321
81594: PUSH
81595: LD_INT 2
81597: NONEQUAL
81598: OR
81599: IFFALSE 81603
// continue ;
81601: GO 81561
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81603: LD_ADDR_VAR 0 8
81607: PUSH
81608: LD_EXP 36
81612: PUSH
81613: LD_VAR 0 2
81617: ARRAY
81618: PPUSH
81619: LD_INT 30
81621: PUSH
81622: LD_INT 34
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PPUSH
81629: CALL_OW 72
81633: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81634: LD_ADDR_VAR 0 9
81638: PUSH
81639: LD_EXP 36
81643: PUSH
81644: LD_VAR 0 2
81648: ARRAY
81649: PPUSH
81650: LD_INT 25
81652: PUSH
81653: LD_INT 4
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PPUSH
81660: CALL_OW 72
81664: PPUSH
81665: LD_INT 0
81667: PPUSH
81668: CALL 59311 0 2
81672: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81673: LD_VAR 0 9
81677: NOT
81678: PUSH
81679: LD_VAR 0 8
81683: NOT
81684: OR
81685: PUSH
81686: LD_EXP 36
81690: PUSH
81691: LD_VAR 0 2
81695: ARRAY
81696: PPUSH
81697: LD_INT 124
81699: PPUSH
81700: CALL 59311 0 2
81704: OR
81705: IFFALSE 81709
// continue ;
81707: GO 81561
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81709: LD_EXP 72
81713: PUSH
81714: LD_VAR 0 2
81718: ARRAY
81719: PUSH
81720: LD_EXP 71
81724: PUSH
81725: LD_VAR 0 2
81729: ARRAY
81730: LESS
81731: PUSH
81732: LD_EXP 72
81736: PUSH
81737: LD_VAR 0 2
81741: ARRAY
81742: PUSH
81743: LD_VAR 0 8
81747: LESS
81748: AND
81749: IFFALSE 82164
// begin tmp := sci [ 1 ] ;
81751: LD_ADDR_VAR 0 7
81755: PUSH
81756: LD_VAR 0 9
81760: PUSH
81761: LD_INT 1
81763: ARRAY
81764: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81765: LD_VAR 0 7
81769: PPUSH
81770: LD_INT 124
81772: PPUSH
81773: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81777: LD_ADDR_VAR 0 3
81781: PUSH
81782: DOUBLE
81783: LD_EXP 71
81787: PUSH
81788: LD_VAR 0 2
81792: ARRAY
81793: INC
81794: ST_TO_ADDR
81795: LD_EXP 71
81799: PUSH
81800: LD_VAR 0 2
81804: ARRAY
81805: PUSH
81806: FOR_DOWNTO
81807: IFFALSE 82150
// begin if IsInUnit ( tmp ) then
81809: LD_VAR 0 7
81813: PPUSH
81814: CALL_OW 310
81818: IFFALSE 81829
// ComExitBuilding ( tmp ) ;
81820: LD_VAR 0 7
81824: PPUSH
81825: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
81829: LD_INT 35
81831: PPUSH
81832: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81836: LD_VAR 0 7
81840: PPUSH
81841: CALL_OW 310
81845: NOT
81846: PUSH
81847: LD_VAR 0 7
81851: PPUSH
81852: CALL_OW 314
81856: NOT
81857: AND
81858: IFFALSE 81829
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81860: LD_ADDR_VAR 0 6
81864: PUSH
81865: LD_VAR 0 7
81869: PPUSH
81870: CALL_OW 250
81874: PUSH
81875: LD_VAR 0 7
81879: PPUSH
81880: CALL_OW 251
81884: PUSH
81885: EMPTY
81886: LIST
81887: LIST
81888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81889: LD_INT 35
81891: PPUSH
81892: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81896: LD_ADDR_VAR 0 4
81900: PUSH
81901: LD_EXP 71
81905: PUSH
81906: LD_VAR 0 2
81910: ARRAY
81911: PUSH
81912: LD_VAR 0 3
81916: ARRAY
81917: PUSH
81918: LD_INT 1
81920: ARRAY
81921: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81922: LD_ADDR_VAR 0 5
81926: PUSH
81927: LD_EXP 71
81931: PUSH
81932: LD_VAR 0 2
81936: ARRAY
81937: PUSH
81938: LD_VAR 0 3
81942: ARRAY
81943: PUSH
81944: LD_INT 2
81946: ARRAY
81947: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81948: LD_VAR 0 7
81952: PPUSH
81953: LD_INT 10
81955: PPUSH
81956: CALL 28644 0 2
81960: PUSH
81961: LD_INT 4
81963: ARRAY
81964: IFFALSE 82002
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81966: LD_VAR 0 7
81970: PPUSH
81971: LD_VAR 0 6
81975: PUSH
81976: LD_INT 1
81978: ARRAY
81979: PPUSH
81980: LD_VAR 0 6
81984: PUSH
81985: LD_INT 2
81987: ARRAY
81988: PPUSH
81989: CALL_OW 111
// wait ( 0 0$10 ) ;
81993: LD_INT 350
81995: PPUSH
81996: CALL_OW 67
// end else
82000: GO 82028
// begin ComMoveXY ( tmp , x , y ) ;
82002: LD_VAR 0 7
82006: PPUSH
82007: LD_VAR 0 4
82011: PPUSH
82012: LD_VAR 0 5
82016: PPUSH
82017: CALL_OW 111
// wait ( 0 0$3 ) ;
82021: LD_INT 105
82023: PPUSH
82024: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82028: LD_VAR 0 7
82032: PPUSH
82033: LD_VAR 0 4
82037: PPUSH
82038: LD_VAR 0 5
82042: PPUSH
82043: CALL_OW 307
82047: IFFALSE 81889
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82049: LD_VAR 0 7
82053: PPUSH
82054: LD_VAR 0 4
82058: PPUSH
82059: LD_VAR 0 5
82063: PPUSH
82064: LD_VAR 0 8
82068: PUSH
82069: LD_VAR 0 3
82073: ARRAY
82074: PPUSH
82075: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82079: LD_INT 35
82081: PPUSH
82082: CALL_OW 67
// until not HasTask ( tmp ) ;
82086: LD_VAR 0 7
82090: PPUSH
82091: CALL_OW 314
82095: NOT
82096: IFFALSE 82079
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82098: LD_ADDR_EXP 72
82102: PUSH
82103: LD_EXP 72
82107: PPUSH
82108: LD_VAR 0 2
82112: PUSH
82113: LD_EXP 72
82117: PUSH
82118: LD_VAR 0 2
82122: ARRAY
82123: PUSH
82124: LD_INT 1
82126: PLUS
82127: PUSH
82128: EMPTY
82129: LIST
82130: LIST
82131: PPUSH
82132: LD_VAR 0 8
82136: PUSH
82137: LD_VAR 0 3
82141: ARRAY
82142: PPUSH
82143: CALL 26051 0 3
82147: ST_TO_ADDR
// end ;
82148: GO 81806
82150: POP
82151: POP
// MC_Reset ( i , 124 ) ;
82152: LD_VAR 0 2
82156: PPUSH
82157: LD_INT 124
82159: PPUSH
82160: CALL 66013 0 2
// end ; end ;
82164: GO 81561
82166: POP
82167: POP
// end ;
82168: LD_VAR 0 1
82172: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82173: LD_INT 0
82175: PPUSH
82176: PPUSH
82177: PPUSH
// if not mc_bases then
82178: LD_EXP 36
82182: NOT
82183: IFFALSE 82187
// exit ;
82185: GO 82793
// for i = 1 to mc_bases do
82187: LD_ADDR_VAR 0 2
82191: PUSH
82192: DOUBLE
82193: LD_INT 1
82195: DEC
82196: ST_TO_ADDR
82197: LD_EXP 36
82201: PUSH
82202: FOR_TO
82203: IFFALSE 82791
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82205: LD_ADDR_VAR 0 3
82209: PUSH
82210: LD_EXP 36
82214: PUSH
82215: LD_VAR 0 2
82219: ARRAY
82220: PPUSH
82221: LD_INT 25
82223: PUSH
82224: LD_INT 4
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: PPUSH
82231: CALL_OW 72
82235: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82236: LD_VAR 0 3
82240: NOT
82241: PUSH
82242: LD_EXP 73
82246: PUSH
82247: LD_VAR 0 2
82251: ARRAY
82252: NOT
82253: OR
82254: PUSH
82255: LD_EXP 36
82259: PUSH
82260: LD_VAR 0 2
82264: ARRAY
82265: PPUSH
82266: LD_INT 2
82268: PUSH
82269: LD_INT 30
82271: PUSH
82272: LD_INT 0
82274: PUSH
82275: EMPTY
82276: LIST
82277: LIST
82278: PUSH
82279: LD_INT 30
82281: PUSH
82282: LD_INT 1
82284: PUSH
82285: EMPTY
82286: LIST
82287: LIST
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: LIST
82293: PPUSH
82294: CALL_OW 72
82298: NOT
82299: OR
82300: IFFALSE 82350
// begin if mc_deposits_finder [ i ] then
82302: LD_EXP 74
82306: PUSH
82307: LD_VAR 0 2
82311: ARRAY
82312: IFFALSE 82348
// begin MC_Reset ( i , 125 ) ;
82314: LD_VAR 0 2
82318: PPUSH
82319: LD_INT 125
82321: PPUSH
82322: CALL 66013 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82326: LD_ADDR_EXP 74
82330: PUSH
82331: LD_EXP 74
82335: PPUSH
82336: LD_VAR 0 2
82340: PPUSH
82341: EMPTY
82342: PPUSH
82343: CALL_OW 1
82347: ST_TO_ADDR
// end ; continue ;
82348: GO 82202
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82350: LD_EXP 73
82354: PUSH
82355: LD_VAR 0 2
82359: ARRAY
82360: PUSH
82361: LD_INT 1
82363: ARRAY
82364: PUSH
82365: LD_INT 3
82367: ARRAY
82368: PUSH
82369: LD_INT 1
82371: EQUAL
82372: PUSH
82373: LD_INT 20
82375: PPUSH
82376: LD_EXP 62
82380: PUSH
82381: LD_VAR 0 2
82385: ARRAY
82386: PPUSH
82387: CALL_OW 321
82391: PUSH
82392: LD_INT 2
82394: NONEQUAL
82395: AND
82396: IFFALSE 82446
// begin if mc_deposits_finder [ i ] then
82398: LD_EXP 74
82402: PUSH
82403: LD_VAR 0 2
82407: ARRAY
82408: IFFALSE 82444
// begin MC_Reset ( i , 125 ) ;
82410: LD_VAR 0 2
82414: PPUSH
82415: LD_INT 125
82417: PPUSH
82418: CALL 66013 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82422: LD_ADDR_EXP 74
82426: PUSH
82427: LD_EXP 74
82431: PPUSH
82432: LD_VAR 0 2
82436: PPUSH
82437: EMPTY
82438: PPUSH
82439: CALL_OW 1
82443: ST_TO_ADDR
// end ; continue ;
82444: GO 82202
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82446: LD_EXP 73
82450: PUSH
82451: LD_VAR 0 2
82455: ARRAY
82456: PUSH
82457: LD_INT 1
82459: ARRAY
82460: PUSH
82461: LD_INT 1
82463: ARRAY
82464: PPUSH
82465: LD_EXP 73
82469: PUSH
82470: LD_VAR 0 2
82474: ARRAY
82475: PUSH
82476: LD_INT 1
82478: ARRAY
82479: PUSH
82480: LD_INT 2
82482: ARRAY
82483: PPUSH
82484: LD_EXP 62
82488: PUSH
82489: LD_VAR 0 2
82493: ARRAY
82494: PPUSH
82495: CALL_OW 440
82499: IFFALSE 82542
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82501: LD_ADDR_EXP 73
82505: PUSH
82506: LD_EXP 73
82510: PPUSH
82511: LD_VAR 0 2
82515: PPUSH
82516: LD_EXP 73
82520: PUSH
82521: LD_VAR 0 2
82525: ARRAY
82526: PPUSH
82527: LD_INT 1
82529: PPUSH
82530: CALL_OW 3
82534: PPUSH
82535: CALL_OW 1
82539: ST_TO_ADDR
82540: GO 82789
// begin if not mc_deposits_finder [ i ] then
82542: LD_EXP 74
82546: PUSH
82547: LD_VAR 0 2
82551: ARRAY
82552: NOT
82553: IFFALSE 82605
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82555: LD_ADDR_EXP 74
82559: PUSH
82560: LD_EXP 74
82564: PPUSH
82565: LD_VAR 0 2
82569: PPUSH
82570: LD_VAR 0 3
82574: PUSH
82575: LD_INT 1
82577: ARRAY
82578: PUSH
82579: EMPTY
82580: LIST
82581: PPUSH
82582: CALL_OW 1
82586: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82587: LD_VAR 0 3
82591: PUSH
82592: LD_INT 1
82594: ARRAY
82595: PPUSH
82596: LD_INT 125
82598: PPUSH
82599: CALL_OW 109
// end else
82603: GO 82789
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82605: LD_EXP 74
82609: PUSH
82610: LD_VAR 0 2
82614: ARRAY
82615: PUSH
82616: LD_INT 1
82618: ARRAY
82619: PPUSH
82620: CALL_OW 310
82624: IFFALSE 82647
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82626: LD_EXP 74
82630: PUSH
82631: LD_VAR 0 2
82635: ARRAY
82636: PUSH
82637: LD_INT 1
82639: ARRAY
82640: PPUSH
82641: CALL_OW 122
82645: GO 82789
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82647: LD_EXP 74
82651: PUSH
82652: LD_VAR 0 2
82656: ARRAY
82657: PUSH
82658: LD_INT 1
82660: ARRAY
82661: PPUSH
82662: CALL_OW 314
82666: NOT
82667: PUSH
82668: LD_EXP 74
82672: PUSH
82673: LD_VAR 0 2
82677: ARRAY
82678: PUSH
82679: LD_INT 1
82681: ARRAY
82682: PPUSH
82683: LD_EXP 73
82687: PUSH
82688: LD_VAR 0 2
82692: ARRAY
82693: PUSH
82694: LD_INT 1
82696: ARRAY
82697: PUSH
82698: LD_INT 1
82700: ARRAY
82701: PPUSH
82702: LD_EXP 73
82706: PUSH
82707: LD_VAR 0 2
82711: ARRAY
82712: PUSH
82713: LD_INT 1
82715: ARRAY
82716: PUSH
82717: LD_INT 2
82719: ARRAY
82720: PPUSH
82721: CALL_OW 297
82725: PUSH
82726: LD_INT 6
82728: GREATER
82729: AND
82730: IFFALSE 82789
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82732: LD_EXP 74
82736: PUSH
82737: LD_VAR 0 2
82741: ARRAY
82742: PUSH
82743: LD_INT 1
82745: ARRAY
82746: PPUSH
82747: LD_EXP 73
82751: PUSH
82752: LD_VAR 0 2
82756: ARRAY
82757: PUSH
82758: LD_INT 1
82760: ARRAY
82761: PUSH
82762: LD_INT 1
82764: ARRAY
82765: PPUSH
82766: LD_EXP 73
82770: PUSH
82771: LD_VAR 0 2
82775: ARRAY
82776: PUSH
82777: LD_INT 1
82779: ARRAY
82780: PUSH
82781: LD_INT 2
82783: ARRAY
82784: PPUSH
82785: CALL_OW 111
// end ; end ; end ;
82789: GO 82202
82791: POP
82792: POP
// end ;
82793: LD_VAR 0 1
82797: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82798: LD_INT 0
82800: PPUSH
82801: PPUSH
82802: PPUSH
82803: PPUSH
82804: PPUSH
82805: PPUSH
82806: PPUSH
82807: PPUSH
82808: PPUSH
82809: PPUSH
82810: PPUSH
// if not mc_bases then
82811: LD_EXP 36
82815: NOT
82816: IFFALSE 82820
// exit ;
82818: GO 83544
// for i = 1 to mc_bases do
82820: LD_ADDR_VAR 0 2
82824: PUSH
82825: DOUBLE
82826: LD_INT 1
82828: DEC
82829: ST_TO_ADDR
82830: LD_EXP 36
82834: PUSH
82835: FOR_TO
82836: IFFALSE 83542
// begin if not mc_bases [ i ] then
82838: LD_EXP 36
82842: PUSH
82843: LD_VAR 0 2
82847: ARRAY
82848: NOT
82849: IFFALSE 82853
// continue ;
82851: GO 82835
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82853: LD_ADDR_VAR 0 7
82857: PUSH
82858: LD_EXP 36
82862: PUSH
82863: LD_VAR 0 2
82867: ARRAY
82868: PUSH
82869: LD_INT 1
82871: ARRAY
82872: PPUSH
82873: CALL_OW 248
82877: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82878: LD_VAR 0 7
82882: PUSH
82883: LD_INT 3
82885: EQUAL
82886: PUSH
82887: LD_EXP 55
82891: PUSH
82892: LD_VAR 0 2
82896: ARRAY
82897: PUSH
82898: LD_EXP 58
82902: PUSH
82903: LD_VAR 0 2
82907: ARRAY
82908: UNION
82909: PPUSH
82910: LD_INT 33
82912: PUSH
82913: LD_INT 2
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PPUSH
82920: CALL_OW 72
82924: NOT
82925: OR
82926: IFFALSE 82930
// continue ;
82928: GO 82835
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82930: LD_ADDR_VAR 0 9
82934: PUSH
82935: LD_EXP 36
82939: PUSH
82940: LD_VAR 0 2
82944: ARRAY
82945: PPUSH
82946: LD_INT 30
82948: PUSH
82949: LD_INT 36
82951: PUSH
82952: EMPTY
82953: LIST
82954: LIST
82955: PPUSH
82956: CALL_OW 72
82960: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82961: LD_ADDR_VAR 0 10
82965: PUSH
82966: LD_EXP 55
82970: PUSH
82971: LD_VAR 0 2
82975: ARRAY
82976: PPUSH
82977: LD_INT 34
82979: PUSH
82980: LD_INT 31
82982: PUSH
82983: EMPTY
82984: LIST
82985: LIST
82986: PPUSH
82987: CALL_OW 72
82991: ST_TO_ADDR
// if not cts and not mcts then
82992: LD_VAR 0 9
82996: NOT
82997: PUSH
82998: LD_VAR 0 10
83002: NOT
83003: AND
83004: IFFALSE 83008
// continue ;
83006: GO 82835
// x := cts ;
83008: LD_ADDR_VAR 0 11
83012: PUSH
83013: LD_VAR 0 9
83017: ST_TO_ADDR
// if not x then
83018: LD_VAR 0 11
83022: NOT
83023: IFFALSE 83035
// x := mcts ;
83025: LD_ADDR_VAR 0 11
83029: PUSH
83030: LD_VAR 0 10
83034: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83035: LD_EXP 76
83039: PUSH
83040: LD_VAR 0 2
83044: ARRAY
83045: IFFALSE 83314
// for j in mc_remote_driver [ i ] do
83047: LD_ADDR_VAR 0 3
83051: PUSH
83052: LD_EXP 76
83056: PUSH
83057: LD_VAR 0 2
83061: ARRAY
83062: PUSH
83063: FOR_IN
83064: IFFALSE 83312
// begin if GetClass ( j ) <> 3 then
83066: LD_VAR 0 3
83070: PPUSH
83071: CALL_OW 257
83075: PUSH
83076: LD_INT 3
83078: NONEQUAL
83079: IFFALSE 83132
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83081: LD_ADDR_EXP 76
83085: PUSH
83086: LD_EXP 76
83090: PPUSH
83091: LD_VAR 0 2
83095: PPUSH
83096: LD_EXP 76
83100: PUSH
83101: LD_VAR 0 2
83105: ARRAY
83106: PUSH
83107: LD_VAR 0 3
83111: DIFF
83112: PPUSH
83113: CALL_OW 1
83117: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83118: LD_VAR 0 3
83122: PPUSH
83123: LD_INT 0
83125: PPUSH
83126: CALL_OW 109
// continue ;
83130: GO 83063
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83132: LD_VAR 0 3
83136: PPUSH
83137: CALL_OW 310
83141: NOT
83142: PUSH
83143: LD_VAR 0 3
83147: PPUSH
83148: CALL_OW 310
83152: PPUSH
83153: CALL_OW 266
83157: PUSH
83158: LD_INT 36
83160: NONEQUAL
83161: PUSH
83162: LD_VAR 0 3
83166: PPUSH
83167: CALL 59399 0 1
83171: NOT
83172: AND
83173: OR
83174: IFFALSE 83310
// begin if IsInUnit ( j ) then
83176: LD_VAR 0 3
83180: PPUSH
83181: CALL_OW 310
83185: IFFALSE 83196
// ComExitBuilding ( j ) ;
83187: LD_VAR 0 3
83191: PPUSH
83192: CALL_OW 122
// ct := 0 ;
83196: LD_ADDR_VAR 0 8
83200: PUSH
83201: LD_INT 0
83203: ST_TO_ADDR
// for k in x do
83204: LD_ADDR_VAR 0 4
83208: PUSH
83209: LD_VAR 0 11
83213: PUSH
83214: FOR_IN
83215: IFFALSE 83288
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83217: LD_VAR 0 4
83221: PPUSH
83222: CALL_OW 264
83226: PUSH
83227: LD_INT 31
83229: EQUAL
83230: PUSH
83231: LD_VAR 0 4
83235: PPUSH
83236: CALL_OW 311
83240: NOT
83241: AND
83242: PUSH
83243: LD_VAR 0 4
83247: PPUSH
83248: CALL_OW 266
83252: PUSH
83253: LD_INT 36
83255: EQUAL
83256: PUSH
83257: LD_VAR 0 4
83261: PPUSH
83262: CALL_OW 313
83266: PUSH
83267: LD_INT 3
83269: LESS
83270: AND
83271: OR
83272: IFFALSE 83286
// begin ct := k ;
83274: LD_ADDR_VAR 0 8
83278: PUSH
83279: LD_VAR 0 4
83283: ST_TO_ADDR
// break ;
83284: GO 83288
// end ;
83286: GO 83214
83288: POP
83289: POP
// if ct then
83290: LD_VAR 0 8
83294: IFFALSE 83310
// ComEnterUnit ( j , ct ) ;
83296: LD_VAR 0 3
83300: PPUSH
83301: LD_VAR 0 8
83305: PPUSH
83306: CALL_OW 120
// end ; end ;
83310: GO 83063
83312: POP
83313: POP
// places := 0 ;
83314: LD_ADDR_VAR 0 5
83318: PUSH
83319: LD_INT 0
83321: ST_TO_ADDR
// for j = 1 to x do
83322: LD_ADDR_VAR 0 3
83326: PUSH
83327: DOUBLE
83328: LD_INT 1
83330: DEC
83331: ST_TO_ADDR
83332: LD_VAR 0 11
83336: PUSH
83337: FOR_TO
83338: IFFALSE 83393
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83340: LD_VAR 0 11
83344: PUSH
83345: LD_VAR 0 3
83349: ARRAY
83350: PPUSH
83351: CALL_OW 264
83355: PUSH
83356: LD_INT 31
83358: EQUAL
83359: IFFALSE 83377
// places := places + 1 else
83361: LD_ADDR_VAR 0 5
83365: PUSH
83366: LD_VAR 0 5
83370: PUSH
83371: LD_INT 1
83373: PLUS
83374: ST_TO_ADDR
83375: GO 83391
// places := places + 3 ;
83377: LD_ADDR_VAR 0 5
83381: PUSH
83382: LD_VAR 0 5
83386: PUSH
83387: LD_INT 3
83389: PLUS
83390: ST_TO_ADDR
83391: GO 83337
83393: POP
83394: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83395: LD_ADDR_VAR 0 6
83399: PUSH
83400: LD_EXP 36
83404: PUSH
83405: LD_VAR 0 2
83409: ARRAY
83410: PPUSH
83411: LD_INT 25
83413: PUSH
83414: LD_INT 3
83416: PUSH
83417: EMPTY
83418: LIST
83419: LIST
83420: PPUSH
83421: CALL_OW 72
83425: PUSH
83426: LD_EXP 76
83430: PUSH
83431: LD_VAR 0 2
83435: ARRAY
83436: DIFF
83437: PPUSH
83438: LD_INT 3
83440: PPUSH
83441: CALL 60299 0 2
83445: ST_TO_ADDR
// if not tmp then
83446: LD_VAR 0 6
83450: NOT
83451: IFFALSE 83455
// continue ;
83453: GO 82835
// places := places - mc_remote_driver [ i ] ;
83455: LD_ADDR_VAR 0 5
83459: PUSH
83460: LD_VAR 0 5
83464: PUSH
83465: LD_EXP 76
83469: PUSH
83470: LD_VAR 0 2
83474: ARRAY
83475: MINUS
83476: ST_TO_ADDR
// if places then
83477: LD_VAR 0 5
83481: IFFALSE 83540
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
83483: LD_ADDR_EXP 76
83487: PUSH
83488: LD_EXP 76
83492: PPUSH
83493: LD_VAR 0 2
83497: PPUSH
83498: LD_EXP 76
83502: PUSH
83503: LD_VAR 0 2
83507: ARRAY
83508: PUSH
83509: LD_VAR 0 6
83513: PUSH
83514: LD_INT 1
83516: ARRAY
83517: UNION
83518: PPUSH
83519: CALL_OW 1
83523: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83524: LD_VAR 0 6
83528: PUSH
83529: LD_INT 1
83531: ARRAY
83532: PPUSH
83533: LD_INT 126
83535: PPUSH
83536: CALL_OW 109
// end ; end ;
83540: GO 82835
83542: POP
83543: POP
// end ;
83544: LD_VAR 0 1
83548: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83549: LD_INT 0
83551: PPUSH
83552: PPUSH
83553: PPUSH
83554: PPUSH
83555: PPUSH
83556: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83557: LD_VAR 0 1
83561: NOT
83562: PUSH
83563: LD_VAR 0 2
83567: NOT
83568: OR
83569: PUSH
83570: LD_VAR 0 3
83574: NOT
83575: OR
83576: PUSH
83577: LD_VAR 0 4
83581: PUSH
83582: LD_INT 1
83584: PUSH
83585: LD_INT 2
83587: PUSH
83588: LD_INT 3
83590: PUSH
83591: LD_INT 4
83593: PUSH
83594: LD_INT 5
83596: PUSH
83597: LD_INT 8
83599: PUSH
83600: LD_INT 9
83602: PUSH
83603: LD_INT 15
83605: PUSH
83606: LD_INT 16
83608: PUSH
83609: EMPTY
83610: LIST
83611: LIST
83612: LIST
83613: LIST
83614: LIST
83615: LIST
83616: LIST
83617: LIST
83618: LIST
83619: IN
83620: NOT
83621: OR
83622: IFFALSE 83626
// exit ;
83624: GO 84526
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83626: LD_ADDR_VAR 0 2
83630: PUSH
83631: LD_VAR 0 2
83635: PPUSH
83636: LD_INT 21
83638: PUSH
83639: LD_INT 3
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: PUSH
83646: LD_INT 24
83648: PUSH
83649: LD_INT 250
83651: PUSH
83652: EMPTY
83653: LIST
83654: LIST
83655: PUSH
83656: EMPTY
83657: LIST
83658: LIST
83659: PPUSH
83660: CALL_OW 72
83664: ST_TO_ADDR
// case class of 1 , 15 :
83665: LD_VAR 0 4
83669: PUSH
83670: LD_INT 1
83672: DOUBLE
83673: EQUAL
83674: IFTRUE 83684
83676: LD_INT 15
83678: DOUBLE
83679: EQUAL
83680: IFTRUE 83684
83682: GO 83769
83684: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83685: LD_ADDR_VAR 0 8
83689: PUSH
83690: LD_VAR 0 2
83694: PPUSH
83695: LD_INT 2
83697: PUSH
83698: LD_INT 30
83700: PUSH
83701: LD_INT 32
83703: PUSH
83704: EMPTY
83705: LIST
83706: LIST
83707: PUSH
83708: LD_INT 30
83710: PUSH
83711: LD_INT 31
83713: PUSH
83714: EMPTY
83715: LIST
83716: LIST
83717: PUSH
83718: EMPTY
83719: LIST
83720: LIST
83721: LIST
83722: PPUSH
83723: CALL_OW 72
83727: PUSH
83728: LD_VAR 0 2
83732: PPUSH
83733: LD_INT 2
83735: PUSH
83736: LD_INT 30
83738: PUSH
83739: LD_INT 4
83741: PUSH
83742: EMPTY
83743: LIST
83744: LIST
83745: PUSH
83746: LD_INT 30
83748: PUSH
83749: LD_INT 5
83751: PUSH
83752: EMPTY
83753: LIST
83754: LIST
83755: PUSH
83756: EMPTY
83757: LIST
83758: LIST
83759: LIST
83760: PPUSH
83761: CALL_OW 72
83765: ADD
83766: ST_TO_ADDR
83767: GO 84015
83769: LD_INT 2
83771: DOUBLE
83772: EQUAL
83773: IFTRUE 83783
83775: LD_INT 16
83777: DOUBLE
83778: EQUAL
83779: IFTRUE 83783
83781: GO 83829
83783: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83784: LD_ADDR_VAR 0 8
83788: PUSH
83789: LD_VAR 0 2
83793: PPUSH
83794: LD_INT 2
83796: PUSH
83797: LD_INT 30
83799: PUSH
83800: LD_INT 0
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: PUSH
83807: LD_INT 30
83809: PUSH
83810: LD_INT 1
83812: PUSH
83813: EMPTY
83814: LIST
83815: LIST
83816: PUSH
83817: EMPTY
83818: LIST
83819: LIST
83820: LIST
83821: PPUSH
83822: CALL_OW 72
83826: ST_TO_ADDR
83827: GO 84015
83829: LD_INT 3
83831: DOUBLE
83832: EQUAL
83833: IFTRUE 83837
83835: GO 83883
83837: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83838: LD_ADDR_VAR 0 8
83842: PUSH
83843: LD_VAR 0 2
83847: PPUSH
83848: LD_INT 2
83850: PUSH
83851: LD_INT 30
83853: PUSH
83854: LD_INT 2
83856: PUSH
83857: EMPTY
83858: LIST
83859: LIST
83860: PUSH
83861: LD_INT 30
83863: PUSH
83864: LD_INT 3
83866: PUSH
83867: EMPTY
83868: LIST
83869: LIST
83870: PUSH
83871: EMPTY
83872: LIST
83873: LIST
83874: LIST
83875: PPUSH
83876: CALL_OW 72
83880: ST_TO_ADDR
83881: GO 84015
83883: LD_INT 4
83885: DOUBLE
83886: EQUAL
83887: IFTRUE 83891
83889: GO 83948
83891: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83892: LD_ADDR_VAR 0 8
83896: PUSH
83897: LD_VAR 0 2
83901: PPUSH
83902: LD_INT 2
83904: PUSH
83905: LD_INT 30
83907: PUSH
83908: LD_INT 6
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: LD_INT 30
83917: PUSH
83918: LD_INT 7
83920: PUSH
83921: EMPTY
83922: LIST
83923: LIST
83924: PUSH
83925: LD_INT 30
83927: PUSH
83928: LD_INT 8
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PUSH
83935: EMPTY
83936: LIST
83937: LIST
83938: LIST
83939: LIST
83940: PPUSH
83941: CALL_OW 72
83945: ST_TO_ADDR
83946: GO 84015
83948: LD_INT 5
83950: DOUBLE
83951: EQUAL
83952: IFTRUE 83968
83954: LD_INT 8
83956: DOUBLE
83957: EQUAL
83958: IFTRUE 83968
83960: LD_INT 9
83962: DOUBLE
83963: EQUAL
83964: IFTRUE 83968
83966: GO 84014
83968: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83969: LD_ADDR_VAR 0 8
83973: PUSH
83974: LD_VAR 0 2
83978: PPUSH
83979: LD_INT 2
83981: PUSH
83982: LD_INT 30
83984: PUSH
83985: LD_INT 4
83987: PUSH
83988: EMPTY
83989: LIST
83990: LIST
83991: PUSH
83992: LD_INT 30
83994: PUSH
83995: LD_INT 5
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: PUSH
84002: EMPTY
84003: LIST
84004: LIST
84005: LIST
84006: PPUSH
84007: CALL_OW 72
84011: ST_TO_ADDR
84012: GO 84015
84014: POP
// if not tmp then
84015: LD_VAR 0 8
84019: NOT
84020: IFFALSE 84024
// exit ;
84022: GO 84526
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84024: LD_VAR 0 4
84028: PUSH
84029: LD_INT 1
84031: PUSH
84032: LD_INT 15
84034: PUSH
84035: EMPTY
84036: LIST
84037: LIST
84038: IN
84039: PUSH
84040: LD_EXP 45
84044: PUSH
84045: LD_VAR 0 1
84049: ARRAY
84050: AND
84051: IFFALSE 84207
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84053: LD_ADDR_VAR 0 9
84057: PUSH
84058: LD_EXP 45
84062: PUSH
84063: LD_VAR 0 1
84067: ARRAY
84068: PUSH
84069: LD_INT 1
84071: ARRAY
84072: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84073: LD_VAR 0 9
84077: PUSH
84078: LD_EXP 46
84082: PUSH
84083: LD_VAR 0 1
84087: ARRAY
84088: IN
84089: NOT
84090: IFFALSE 84205
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84092: LD_ADDR_EXP 46
84096: PUSH
84097: LD_EXP 46
84101: PPUSH
84102: LD_VAR 0 1
84106: PUSH
84107: LD_EXP 46
84111: PUSH
84112: LD_VAR 0 1
84116: ARRAY
84117: PUSH
84118: LD_INT 1
84120: PLUS
84121: PUSH
84122: EMPTY
84123: LIST
84124: LIST
84125: PPUSH
84126: LD_VAR 0 9
84130: PPUSH
84131: CALL 26051 0 3
84135: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84136: LD_ADDR_EXP 45
84140: PUSH
84141: LD_EXP 45
84145: PPUSH
84146: LD_VAR 0 1
84150: PPUSH
84151: LD_EXP 45
84155: PUSH
84156: LD_VAR 0 1
84160: ARRAY
84161: PUSH
84162: LD_VAR 0 9
84166: DIFF
84167: PPUSH
84168: CALL_OW 1
84172: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84173: LD_VAR 0 3
84177: PPUSH
84178: LD_EXP 46
84182: PUSH
84183: LD_VAR 0 1
84187: ARRAY
84188: PUSH
84189: LD_EXP 46
84193: PUSH
84194: LD_VAR 0 1
84198: ARRAY
84199: ARRAY
84200: PPUSH
84201: CALL_OW 120
// end ; exit ;
84205: GO 84526
// end ; if tmp > 1 then
84207: LD_VAR 0 8
84211: PUSH
84212: LD_INT 1
84214: GREATER
84215: IFFALSE 84319
// for i = 2 to tmp do
84217: LD_ADDR_VAR 0 6
84221: PUSH
84222: DOUBLE
84223: LD_INT 2
84225: DEC
84226: ST_TO_ADDR
84227: LD_VAR 0 8
84231: PUSH
84232: FOR_TO
84233: IFFALSE 84317
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84235: LD_VAR 0 8
84239: PUSH
84240: LD_VAR 0 6
84244: ARRAY
84245: PPUSH
84246: CALL_OW 461
84250: PUSH
84251: LD_INT 6
84253: EQUAL
84254: IFFALSE 84315
// begin x := tmp [ i ] ;
84256: LD_ADDR_VAR 0 9
84260: PUSH
84261: LD_VAR 0 8
84265: PUSH
84266: LD_VAR 0 6
84270: ARRAY
84271: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84272: LD_ADDR_VAR 0 8
84276: PUSH
84277: LD_VAR 0 8
84281: PPUSH
84282: LD_VAR 0 6
84286: PPUSH
84287: CALL_OW 3
84291: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84292: LD_ADDR_VAR 0 8
84296: PUSH
84297: LD_VAR 0 8
84301: PPUSH
84302: LD_INT 1
84304: PPUSH
84305: LD_VAR 0 9
84309: PPUSH
84310: CALL_OW 2
84314: ST_TO_ADDR
// end ;
84315: GO 84232
84317: POP
84318: POP
// for i in tmp do
84319: LD_ADDR_VAR 0 6
84323: PUSH
84324: LD_VAR 0 8
84328: PUSH
84329: FOR_IN
84330: IFFALSE 84399
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84332: LD_VAR 0 6
84336: PPUSH
84337: CALL_OW 313
84341: PUSH
84342: LD_INT 6
84344: LESS
84345: PUSH
84346: LD_VAR 0 6
84350: PPUSH
84351: CALL_OW 266
84355: PUSH
84356: LD_INT 31
84358: PUSH
84359: LD_INT 32
84361: PUSH
84362: EMPTY
84363: LIST
84364: LIST
84365: IN
84366: NOT
84367: AND
84368: PUSH
84369: LD_VAR 0 6
84373: PPUSH
84374: CALL_OW 313
84378: PUSH
84379: LD_INT 0
84381: EQUAL
84382: OR
84383: IFFALSE 84397
// begin j := i ;
84385: LD_ADDR_VAR 0 7
84389: PUSH
84390: LD_VAR 0 6
84394: ST_TO_ADDR
// break ;
84395: GO 84399
// end ; end ;
84397: GO 84329
84399: POP
84400: POP
// if j then
84401: LD_VAR 0 7
84405: IFFALSE 84423
// ComEnterUnit ( unit , j ) else
84407: LD_VAR 0 3
84411: PPUSH
84412: LD_VAR 0 7
84416: PPUSH
84417: CALL_OW 120
84421: GO 84526
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84423: LD_ADDR_VAR 0 10
84427: PUSH
84428: LD_VAR 0 2
84432: PPUSH
84433: LD_INT 2
84435: PUSH
84436: LD_INT 30
84438: PUSH
84439: LD_INT 0
84441: PUSH
84442: EMPTY
84443: LIST
84444: LIST
84445: PUSH
84446: LD_INT 30
84448: PUSH
84449: LD_INT 1
84451: PUSH
84452: EMPTY
84453: LIST
84454: LIST
84455: PUSH
84456: EMPTY
84457: LIST
84458: LIST
84459: LIST
84460: PPUSH
84461: CALL_OW 72
84465: ST_TO_ADDR
// if depot then
84466: LD_VAR 0 10
84470: IFFALSE 84526
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84472: LD_ADDR_VAR 0 10
84476: PUSH
84477: LD_VAR 0 10
84481: PPUSH
84482: LD_VAR 0 3
84486: PPUSH
84487: CALL_OW 74
84491: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84492: LD_VAR 0 3
84496: PPUSH
84497: LD_VAR 0 10
84501: PPUSH
84502: CALL_OW 296
84506: PUSH
84507: LD_INT 10
84509: GREATER
84510: IFFALSE 84526
// ComStandNearbyBuilding ( unit , depot ) ;
84512: LD_VAR 0 3
84516: PPUSH
84517: LD_VAR 0 10
84521: PPUSH
84522: CALL 20758 0 2
// end ; end ; end ;
84526: LD_VAR 0 5
84530: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84531: LD_INT 0
84533: PPUSH
84534: PPUSH
84535: PPUSH
84536: PPUSH
// if not mc_bases then
84537: LD_EXP 36
84541: NOT
84542: IFFALSE 84546
// exit ;
84544: GO 84785
// for i = 1 to mc_bases do
84546: LD_ADDR_VAR 0 2
84550: PUSH
84551: DOUBLE
84552: LD_INT 1
84554: DEC
84555: ST_TO_ADDR
84556: LD_EXP 36
84560: PUSH
84561: FOR_TO
84562: IFFALSE 84783
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84564: LD_ADDR_VAR 0 4
84568: PUSH
84569: LD_EXP 36
84573: PUSH
84574: LD_VAR 0 2
84578: ARRAY
84579: PPUSH
84580: LD_INT 21
84582: PUSH
84583: LD_INT 1
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PPUSH
84590: CALL_OW 72
84594: PUSH
84595: LD_EXP 65
84599: PUSH
84600: LD_VAR 0 2
84604: ARRAY
84605: UNION
84606: ST_TO_ADDR
// if not tmp then
84607: LD_VAR 0 4
84611: NOT
84612: IFFALSE 84616
// continue ;
84614: GO 84561
// for j in tmp do
84616: LD_ADDR_VAR 0 3
84620: PUSH
84621: LD_VAR 0 4
84625: PUSH
84626: FOR_IN
84627: IFFALSE 84779
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84629: LD_VAR 0 3
84633: PPUSH
84634: CALL_OW 110
84638: NOT
84639: PUSH
84640: LD_VAR 0 3
84644: PPUSH
84645: CALL_OW 314
84649: NOT
84650: AND
84651: PUSH
84652: LD_VAR 0 3
84656: PPUSH
84657: CALL_OW 311
84661: NOT
84662: AND
84663: PUSH
84664: LD_VAR 0 3
84668: PPUSH
84669: CALL_OW 310
84673: NOT
84674: AND
84675: PUSH
84676: LD_VAR 0 3
84680: PUSH
84681: LD_EXP 39
84685: PUSH
84686: LD_VAR 0 2
84690: ARRAY
84691: PUSH
84692: LD_INT 1
84694: ARRAY
84695: IN
84696: NOT
84697: AND
84698: PUSH
84699: LD_VAR 0 3
84703: PUSH
84704: LD_EXP 39
84708: PUSH
84709: LD_VAR 0 2
84713: ARRAY
84714: PUSH
84715: LD_INT 2
84717: ARRAY
84718: IN
84719: NOT
84720: AND
84721: PUSH
84722: LD_VAR 0 3
84726: PUSH
84727: LD_EXP 48
84731: PUSH
84732: LD_VAR 0 2
84736: ARRAY
84737: IN
84738: NOT
84739: AND
84740: IFFALSE 84777
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84742: LD_VAR 0 2
84746: PPUSH
84747: LD_EXP 36
84751: PUSH
84752: LD_VAR 0 2
84756: ARRAY
84757: PPUSH
84758: LD_VAR 0 3
84762: PPUSH
84763: LD_VAR 0 3
84767: PPUSH
84768: CALL_OW 257
84772: PPUSH
84773: CALL 83549 0 4
// end ;
84777: GO 84626
84779: POP
84780: POP
// end ;
84781: GO 84561
84783: POP
84784: POP
// end ;
84785: LD_VAR 0 1
84789: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84790: LD_INT 0
84792: PPUSH
84793: PPUSH
84794: PPUSH
84795: PPUSH
84796: PPUSH
84797: PPUSH
// if not mc_bases [ base ] then
84798: LD_EXP 36
84802: PUSH
84803: LD_VAR 0 1
84807: ARRAY
84808: NOT
84809: IFFALSE 84813
// exit ;
84811: GO 84995
// tmp := [ ] ;
84813: LD_ADDR_VAR 0 6
84817: PUSH
84818: EMPTY
84819: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84820: LD_ADDR_VAR 0 7
84824: PUSH
84825: LD_VAR 0 3
84829: PPUSH
84830: LD_INT 0
84832: PPUSH
84833: CALL_OW 517
84837: ST_TO_ADDR
// if not list then
84838: LD_VAR 0 7
84842: NOT
84843: IFFALSE 84847
// exit ;
84845: GO 84995
// for i = 1 to amount do
84847: LD_ADDR_VAR 0 5
84851: PUSH
84852: DOUBLE
84853: LD_INT 1
84855: DEC
84856: ST_TO_ADDR
84857: LD_VAR 0 2
84861: PUSH
84862: FOR_TO
84863: IFFALSE 84943
// begin x := rand ( 1 , list [ 1 ] ) ;
84865: LD_ADDR_VAR 0 8
84869: PUSH
84870: LD_INT 1
84872: PPUSH
84873: LD_VAR 0 7
84877: PUSH
84878: LD_INT 1
84880: ARRAY
84881: PPUSH
84882: CALL_OW 12
84886: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84887: LD_ADDR_VAR 0 6
84891: PUSH
84892: LD_VAR 0 6
84896: PPUSH
84897: LD_VAR 0 5
84901: PPUSH
84902: LD_VAR 0 7
84906: PUSH
84907: LD_INT 1
84909: ARRAY
84910: PUSH
84911: LD_VAR 0 8
84915: ARRAY
84916: PUSH
84917: LD_VAR 0 7
84921: PUSH
84922: LD_INT 2
84924: ARRAY
84925: PUSH
84926: LD_VAR 0 8
84930: ARRAY
84931: PUSH
84932: EMPTY
84933: LIST
84934: LIST
84935: PPUSH
84936: CALL_OW 1
84940: ST_TO_ADDR
// end ;
84941: GO 84862
84943: POP
84944: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84945: LD_ADDR_EXP 49
84949: PUSH
84950: LD_EXP 49
84954: PPUSH
84955: LD_VAR 0 1
84959: PPUSH
84960: LD_VAR 0 6
84964: PPUSH
84965: CALL_OW 1
84969: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84970: LD_ADDR_EXP 51
84974: PUSH
84975: LD_EXP 51
84979: PPUSH
84980: LD_VAR 0 1
84984: PPUSH
84985: LD_VAR 0 3
84989: PPUSH
84990: CALL_OW 1
84994: ST_TO_ADDR
// end ;
84995: LD_VAR 0 4
84999: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85000: LD_INT 0
85002: PPUSH
// if not mc_bases [ base ] then
85003: LD_EXP 36
85007: PUSH
85008: LD_VAR 0 1
85012: ARRAY
85013: NOT
85014: IFFALSE 85018
// exit ;
85016: GO 85043
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85018: LD_ADDR_EXP 41
85022: PUSH
85023: LD_EXP 41
85027: PPUSH
85028: LD_VAR 0 1
85032: PPUSH
85033: LD_VAR 0 2
85037: PPUSH
85038: CALL_OW 1
85042: ST_TO_ADDR
// end ;
85043: LD_VAR 0 3
85047: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85048: LD_INT 0
85050: PPUSH
// if not mc_bases [ base ] then
85051: LD_EXP 36
85055: PUSH
85056: LD_VAR 0 1
85060: ARRAY
85061: NOT
85062: IFFALSE 85066
// exit ;
85064: GO 85103
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85066: LD_ADDR_EXP 41
85070: PUSH
85071: LD_EXP 41
85075: PPUSH
85076: LD_VAR 0 1
85080: PPUSH
85081: LD_EXP 41
85085: PUSH
85086: LD_VAR 0 1
85090: ARRAY
85091: PUSH
85092: LD_VAR 0 2
85096: UNION
85097: PPUSH
85098: CALL_OW 1
85102: ST_TO_ADDR
// end ;
85103: LD_VAR 0 3
85107: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85108: LD_INT 0
85110: PPUSH
// if not mc_bases [ base ] then
85111: LD_EXP 36
85115: PUSH
85116: LD_VAR 0 1
85120: ARRAY
85121: NOT
85122: IFFALSE 85126
// exit ;
85124: GO 85151
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85126: LD_ADDR_EXP 57
85130: PUSH
85131: LD_EXP 57
85135: PPUSH
85136: LD_VAR 0 1
85140: PPUSH
85141: LD_VAR 0 2
85145: PPUSH
85146: CALL_OW 1
85150: ST_TO_ADDR
// end ;
85151: LD_VAR 0 3
85155: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85156: LD_INT 0
85158: PPUSH
// if not mc_bases [ base ] then
85159: LD_EXP 36
85163: PUSH
85164: LD_VAR 0 1
85168: ARRAY
85169: NOT
85170: IFFALSE 85174
// exit ;
85172: GO 85211
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85174: LD_ADDR_EXP 57
85178: PUSH
85179: LD_EXP 57
85183: PPUSH
85184: LD_VAR 0 1
85188: PPUSH
85189: LD_EXP 57
85193: PUSH
85194: LD_VAR 0 1
85198: ARRAY
85199: PUSH
85200: LD_VAR 0 2
85204: ADD
85205: PPUSH
85206: CALL_OW 1
85210: ST_TO_ADDR
// end ;
85211: LD_VAR 0 3
85215: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85216: LD_INT 0
85218: PPUSH
// if not mc_bases [ base ] then
85219: LD_EXP 36
85223: PUSH
85224: LD_VAR 0 1
85228: ARRAY
85229: NOT
85230: IFFALSE 85234
// exit ;
85232: GO 85288
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85234: LD_ADDR_EXP 58
85238: PUSH
85239: LD_EXP 58
85243: PPUSH
85244: LD_VAR 0 1
85248: PPUSH
85249: LD_VAR 0 2
85253: PPUSH
85254: CALL_OW 1
85258: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85259: LD_ADDR_EXP 47
85263: PUSH
85264: LD_EXP 47
85268: PPUSH
85269: LD_VAR 0 1
85273: PPUSH
85274: LD_VAR 0 2
85278: PUSH
85279: LD_INT 0
85281: PLUS
85282: PPUSH
85283: CALL_OW 1
85287: ST_TO_ADDR
// end ;
85288: LD_VAR 0 3
85292: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85293: LD_INT 0
85295: PPUSH
// if not mc_bases [ base ] then
85296: LD_EXP 36
85300: PUSH
85301: LD_VAR 0 1
85305: ARRAY
85306: NOT
85307: IFFALSE 85311
// exit ;
85309: GO 85336
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85311: LD_ADDR_EXP 47
85315: PUSH
85316: LD_EXP 47
85320: PPUSH
85321: LD_VAR 0 1
85325: PPUSH
85326: LD_VAR 0 2
85330: PPUSH
85331: CALL_OW 1
85335: ST_TO_ADDR
// end ;
85336: LD_VAR 0 3
85340: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85341: LD_INT 0
85343: PPUSH
85344: PPUSH
85345: PPUSH
85346: PPUSH
// if not mc_bases [ base ] then
85347: LD_EXP 36
85351: PUSH
85352: LD_VAR 0 1
85356: ARRAY
85357: NOT
85358: IFFALSE 85362
// exit ;
85360: GO 85427
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85362: LD_ADDR_EXP 56
85366: PUSH
85367: LD_EXP 56
85371: PPUSH
85372: LD_VAR 0 1
85376: PUSH
85377: LD_EXP 56
85381: PUSH
85382: LD_VAR 0 1
85386: ARRAY
85387: PUSH
85388: LD_INT 1
85390: PLUS
85391: PUSH
85392: EMPTY
85393: LIST
85394: LIST
85395: PPUSH
85396: LD_VAR 0 1
85400: PUSH
85401: LD_VAR 0 2
85405: PUSH
85406: LD_VAR 0 3
85410: PUSH
85411: LD_VAR 0 4
85415: PUSH
85416: EMPTY
85417: LIST
85418: LIST
85419: LIST
85420: LIST
85421: PPUSH
85422: CALL 26051 0 3
85426: ST_TO_ADDR
// end ;
85427: LD_VAR 0 5
85431: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85432: LD_INT 0
85434: PPUSH
// if not mc_bases [ base ] then
85435: LD_EXP 36
85439: PUSH
85440: LD_VAR 0 1
85444: ARRAY
85445: NOT
85446: IFFALSE 85450
// exit ;
85448: GO 85475
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85450: LD_ADDR_EXP 73
85454: PUSH
85455: LD_EXP 73
85459: PPUSH
85460: LD_VAR 0 1
85464: PPUSH
85465: LD_VAR 0 2
85469: PPUSH
85470: CALL_OW 1
85474: ST_TO_ADDR
// end ;
85475: LD_VAR 0 3
85479: RET
// export function MC_GetMinesField ( base ) ; begin
85480: LD_INT 0
85482: PPUSH
// result := mc_mines [ base ] ;
85483: LD_ADDR_VAR 0 2
85487: PUSH
85488: LD_EXP 49
85492: PUSH
85493: LD_VAR 0 1
85497: ARRAY
85498: ST_TO_ADDR
// end ;
85499: LD_VAR 0 2
85503: RET
// export function MC_GetProduceList ( base ) ; begin
85504: LD_INT 0
85506: PPUSH
// result := mc_produce [ base ] ;
85507: LD_ADDR_VAR 0 2
85511: PUSH
85512: LD_EXP 57
85516: PUSH
85517: LD_VAR 0 1
85521: ARRAY
85522: ST_TO_ADDR
// end ;
85523: LD_VAR 0 2
85527: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85528: LD_INT 0
85530: PPUSH
85531: PPUSH
// if not mc_bases then
85532: LD_EXP 36
85536: NOT
85537: IFFALSE 85541
// exit ;
85539: GO 85606
// if mc_bases [ base ] then
85541: LD_EXP 36
85545: PUSH
85546: LD_VAR 0 1
85550: ARRAY
85551: IFFALSE 85606
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85553: LD_ADDR_VAR 0 3
85557: PUSH
85558: LD_EXP 36
85562: PUSH
85563: LD_VAR 0 1
85567: ARRAY
85568: PPUSH
85569: LD_INT 30
85571: PUSH
85572: LD_VAR 0 2
85576: PUSH
85577: EMPTY
85578: LIST
85579: LIST
85580: PPUSH
85581: CALL_OW 72
85585: ST_TO_ADDR
// if result then
85586: LD_VAR 0 3
85590: IFFALSE 85606
// result := result [ 1 ] ;
85592: LD_ADDR_VAR 0 3
85596: PUSH
85597: LD_VAR 0 3
85601: PUSH
85602: LD_INT 1
85604: ARRAY
85605: ST_TO_ADDR
// end ; end ;
85606: LD_VAR 0 3
85610: RET
// export function MC_SetTame ( base , area ) ; begin
85611: LD_INT 0
85613: PPUSH
// if not mc_bases or not base then
85614: LD_EXP 36
85618: NOT
85619: PUSH
85620: LD_VAR 0 1
85624: NOT
85625: OR
85626: IFFALSE 85630
// exit ;
85628: GO 85655
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85630: LD_ADDR_EXP 64
85634: PUSH
85635: LD_EXP 64
85639: PPUSH
85640: LD_VAR 0 1
85644: PPUSH
85645: LD_VAR 0 2
85649: PPUSH
85650: CALL_OW 1
85654: ST_TO_ADDR
// end ;
85655: LD_VAR 0 3
85659: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85660: LD_INT 0
85662: PPUSH
85663: PPUSH
// if not mc_bases or not base then
85664: LD_EXP 36
85668: NOT
85669: PUSH
85670: LD_VAR 0 1
85674: NOT
85675: OR
85676: IFFALSE 85680
// exit ;
85678: GO 85782
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85680: LD_ADDR_VAR 0 4
85684: PUSH
85685: LD_EXP 36
85689: PUSH
85690: LD_VAR 0 1
85694: ARRAY
85695: PPUSH
85696: LD_INT 30
85698: PUSH
85699: LD_VAR 0 2
85703: PUSH
85704: EMPTY
85705: LIST
85706: LIST
85707: PPUSH
85708: CALL_OW 72
85712: ST_TO_ADDR
// if not tmp then
85713: LD_VAR 0 4
85717: NOT
85718: IFFALSE 85722
// exit ;
85720: GO 85782
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85722: LD_ADDR_EXP 68
85726: PUSH
85727: LD_EXP 68
85731: PPUSH
85732: LD_VAR 0 1
85736: PPUSH
85737: LD_EXP 68
85741: PUSH
85742: LD_VAR 0 1
85746: ARRAY
85747: PPUSH
85748: LD_EXP 68
85752: PUSH
85753: LD_VAR 0 1
85757: ARRAY
85758: PUSH
85759: LD_INT 1
85761: PLUS
85762: PPUSH
85763: LD_VAR 0 4
85767: PUSH
85768: LD_INT 1
85770: ARRAY
85771: PPUSH
85772: CALL_OW 2
85776: PPUSH
85777: CALL_OW 1
85781: ST_TO_ADDR
// end ;
85782: LD_VAR 0 3
85786: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85787: LD_INT 0
85789: PPUSH
85790: PPUSH
// if not mc_bases or not base or not kinds then
85791: LD_EXP 36
85795: NOT
85796: PUSH
85797: LD_VAR 0 1
85801: NOT
85802: OR
85803: PUSH
85804: LD_VAR 0 2
85808: NOT
85809: OR
85810: IFFALSE 85814
// exit ;
85812: GO 85875
// for i in kinds do
85814: LD_ADDR_VAR 0 4
85818: PUSH
85819: LD_VAR 0 2
85823: PUSH
85824: FOR_IN
85825: IFFALSE 85873
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85827: LD_ADDR_EXP 70
85831: PUSH
85832: LD_EXP 70
85836: PPUSH
85837: LD_VAR 0 1
85841: PUSH
85842: LD_EXP 70
85846: PUSH
85847: LD_VAR 0 1
85851: ARRAY
85852: PUSH
85853: LD_INT 1
85855: PLUS
85856: PUSH
85857: EMPTY
85858: LIST
85859: LIST
85860: PPUSH
85861: LD_VAR 0 4
85865: PPUSH
85866: CALL 26051 0 3
85870: ST_TO_ADDR
85871: GO 85824
85873: POP
85874: POP
// end ;
85875: LD_VAR 0 3
85879: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85880: LD_INT 0
85882: PPUSH
// if not mc_bases or not base or not areas then
85883: LD_EXP 36
85887: NOT
85888: PUSH
85889: LD_VAR 0 1
85893: NOT
85894: OR
85895: PUSH
85896: LD_VAR 0 2
85900: NOT
85901: OR
85902: IFFALSE 85906
// exit ;
85904: GO 85931
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85906: LD_ADDR_EXP 54
85910: PUSH
85911: LD_EXP 54
85915: PPUSH
85916: LD_VAR 0 1
85920: PPUSH
85921: LD_VAR 0 2
85925: PPUSH
85926: CALL_OW 1
85930: ST_TO_ADDR
// end ;
85931: LD_VAR 0 3
85935: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85936: LD_INT 0
85938: PPUSH
// if not mc_bases or not base or not teleports_exit then
85939: LD_EXP 36
85943: NOT
85944: PUSH
85945: LD_VAR 0 1
85949: NOT
85950: OR
85951: PUSH
85952: LD_VAR 0 2
85956: NOT
85957: OR
85958: IFFALSE 85962
// exit ;
85960: GO 85987
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85962: LD_ADDR_EXP 71
85966: PUSH
85967: LD_EXP 71
85971: PPUSH
85972: LD_VAR 0 1
85976: PPUSH
85977: LD_VAR 0 2
85981: PPUSH
85982: CALL_OW 1
85986: ST_TO_ADDR
// end ;
85987: LD_VAR 0 3
85991: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
85992: LD_INT 0
85994: PPUSH
85995: PPUSH
85996: PPUSH
// if not mc_bases or not base or not ext_list then
85997: LD_EXP 36
86001: NOT
86002: PUSH
86003: LD_VAR 0 1
86007: NOT
86008: OR
86009: PUSH
86010: LD_VAR 0 5
86014: NOT
86015: OR
86016: IFFALSE 86020
// exit ;
86018: GO 86193
// tmp := GetFacExtXYD ( x , y , d ) ;
86020: LD_ADDR_VAR 0 8
86024: PUSH
86025: LD_VAR 0 2
86029: PPUSH
86030: LD_VAR 0 3
86034: PPUSH
86035: LD_VAR 0 4
86039: PPUSH
86040: CALL 59429 0 3
86044: ST_TO_ADDR
// if not tmp then
86045: LD_VAR 0 8
86049: NOT
86050: IFFALSE 86054
// exit ;
86052: GO 86193
// for i in tmp do
86054: LD_ADDR_VAR 0 7
86058: PUSH
86059: LD_VAR 0 8
86063: PUSH
86064: FOR_IN
86065: IFFALSE 86191
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86067: LD_ADDR_EXP 41
86071: PUSH
86072: LD_EXP 41
86076: PPUSH
86077: LD_VAR 0 1
86081: PPUSH
86082: LD_EXP 41
86086: PUSH
86087: LD_VAR 0 1
86091: ARRAY
86092: PPUSH
86093: LD_EXP 41
86097: PUSH
86098: LD_VAR 0 1
86102: ARRAY
86103: PUSH
86104: LD_INT 1
86106: PLUS
86107: PPUSH
86108: LD_VAR 0 5
86112: PUSH
86113: LD_INT 1
86115: ARRAY
86116: PUSH
86117: LD_VAR 0 7
86121: PUSH
86122: LD_INT 1
86124: ARRAY
86125: PUSH
86126: LD_VAR 0 7
86130: PUSH
86131: LD_INT 2
86133: ARRAY
86134: PUSH
86135: LD_VAR 0 7
86139: PUSH
86140: LD_INT 3
86142: ARRAY
86143: PUSH
86144: EMPTY
86145: LIST
86146: LIST
86147: LIST
86148: LIST
86149: PPUSH
86150: CALL_OW 2
86154: PPUSH
86155: CALL_OW 1
86159: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86160: LD_ADDR_VAR 0 5
86164: PUSH
86165: LD_VAR 0 5
86169: PPUSH
86170: LD_INT 1
86172: PPUSH
86173: CALL_OW 3
86177: ST_TO_ADDR
// if not ext_list then
86178: LD_VAR 0 5
86182: NOT
86183: IFFALSE 86189
// exit ;
86185: POP
86186: POP
86187: GO 86193
// end ;
86189: GO 86064
86191: POP
86192: POP
// end ;
86193: LD_VAR 0 6
86197: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86198: LD_INT 0
86200: PPUSH
// if not mc_bases or not base or not weapon_list then
86201: LD_EXP 36
86205: NOT
86206: PUSH
86207: LD_VAR 0 1
86211: NOT
86212: OR
86213: PUSH
86214: LD_VAR 0 2
86218: NOT
86219: OR
86220: IFFALSE 86224
// exit ;
86222: GO 86249
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86224: LD_ADDR_EXP 75
86228: PUSH
86229: LD_EXP 75
86233: PPUSH
86234: LD_VAR 0 1
86238: PPUSH
86239: LD_VAR 0 2
86243: PPUSH
86244: CALL_OW 1
86248: ST_TO_ADDR
// end ;
86249: LD_VAR 0 3
86253: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86254: LD_INT 0
86256: PPUSH
// if not mc_bases or not base or not tech_list then
86257: LD_EXP 36
86261: NOT
86262: PUSH
86263: LD_VAR 0 1
86267: NOT
86268: OR
86269: PUSH
86270: LD_VAR 0 2
86274: NOT
86275: OR
86276: IFFALSE 86280
// exit ;
86278: GO 86305
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86280: LD_ADDR_EXP 63
86284: PUSH
86285: LD_EXP 63
86289: PPUSH
86290: LD_VAR 0 1
86294: PPUSH
86295: LD_VAR 0 2
86299: PPUSH
86300: CALL_OW 1
86304: ST_TO_ADDR
// end ;
86305: LD_VAR 0 3
86309: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86310: LD_INT 0
86312: PPUSH
// if not mc_bases or not parking_area or not base then
86313: LD_EXP 36
86317: NOT
86318: PUSH
86319: LD_VAR 0 2
86323: NOT
86324: OR
86325: PUSH
86326: LD_VAR 0 1
86330: NOT
86331: OR
86332: IFFALSE 86336
// exit ;
86334: GO 86361
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86336: LD_ADDR_EXP 60
86340: PUSH
86341: LD_EXP 60
86345: PPUSH
86346: LD_VAR 0 1
86350: PPUSH
86351: LD_VAR 0 2
86355: PPUSH
86356: CALL_OW 1
86360: ST_TO_ADDR
// end ;
86361: LD_VAR 0 3
86365: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86366: LD_INT 0
86368: PPUSH
// if not mc_bases or not base or not scan_area then
86369: LD_EXP 36
86373: NOT
86374: PUSH
86375: LD_VAR 0 1
86379: NOT
86380: OR
86381: PUSH
86382: LD_VAR 0 2
86386: NOT
86387: OR
86388: IFFALSE 86392
// exit ;
86390: GO 86417
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86392: LD_ADDR_EXP 61
86396: PUSH
86397: LD_EXP 61
86401: PPUSH
86402: LD_VAR 0 1
86406: PPUSH
86407: LD_VAR 0 2
86411: PPUSH
86412: CALL_OW 1
86416: ST_TO_ADDR
// end ;
86417: LD_VAR 0 3
86421: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86422: LD_INT 0
86424: PPUSH
86425: PPUSH
// if not mc_bases or not base then
86426: LD_EXP 36
86430: NOT
86431: PUSH
86432: LD_VAR 0 1
86436: NOT
86437: OR
86438: IFFALSE 86442
// exit ;
86440: GO 86506
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86442: LD_ADDR_VAR 0 3
86446: PUSH
86447: LD_INT 1
86449: PUSH
86450: LD_INT 2
86452: PUSH
86453: LD_INT 3
86455: PUSH
86456: LD_INT 4
86458: PUSH
86459: LD_INT 11
86461: PUSH
86462: EMPTY
86463: LIST
86464: LIST
86465: LIST
86466: LIST
86467: LIST
86468: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
86469: LD_ADDR_EXP 63
86473: PUSH
86474: LD_EXP 63
86478: PPUSH
86479: LD_VAR 0 1
86483: PPUSH
86484: LD_EXP 63
86488: PUSH
86489: LD_VAR 0 1
86493: ARRAY
86494: PUSH
86495: LD_VAR 0 3
86499: DIFF
86500: PPUSH
86501: CALL_OW 1
86505: ST_TO_ADDR
// end ;
86506: LD_VAR 0 2
86510: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86511: LD_INT 0
86513: PPUSH
// result := mc_vehicles [ base ] ;
86514: LD_ADDR_VAR 0 3
86518: PUSH
86519: LD_EXP 55
86523: PUSH
86524: LD_VAR 0 1
86528: ARRAY
86529: ST_TO_ADDR
// if onlyCombat then
86530: LD_VAR 0 2
86534: IFFALSE 86699
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86536: LD_ADDR_VAR 0 3
86540: PUSH
86541: LD_VAR 0 3
86545: PUSH
86546: LD_VAR 0 3
86550: PPUSH
86551: LD_INT 2
86553: PUSH
86554: LD_INT 34
86556: PUSH
86557: LD_INT 12
86559: PUSH
86560: EMPTY
86561: LIST
86562: LIST
86563: PUSH
86564: LD_INT 34
86566: PUSH
86567: LD_INT 51
86569: PUSH
86570: EMPTY
86571: LIST
86572: LIST
86573: PUSH
86574: LD_INT 34
86576: PUSH
86577: LD_EXP 30
86581: PUSH
86582: EMPTY
86583: LIST
86584: LIST
86585: PUSH
86586: LD_INT 34
86588: PUSH
86589: LD_INT 32
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: PUSH
86596: LD_INT 34
86598: PUSH
86599: LD_INT 13
86601: PUSH
86602: EMPTY
86603: LIST
86604: LIST
86605: PUSH
86606: LD_INT 34
86608: PUSH
86609: LD_INT 52
86611: PUSH
86612: EMPTY
86613: LIST
86614: LIST
86615: PUSH
86616: LD_INT 34
86618: PUSH
86619: LD_INT 14
86621: PUSH
86622: EMPTY
86623: LIST
86624: LIST
86625: PUSH
86626: LD_INT 34
86628: PUSH
86629: LD_INT 53
86631: PUSH
86632: EMPTY
86633: LIST
86634: LIST
86635: PUSH
86636: LD_INT 34
86638: PUSH
86639: LD_EXP 29
86643: PUSH
86644: EMPTY
86645: LIST
86646: LIST
86647: PUSH
86648: LD_INT 34
86650: PUSH
86651: LD_INT 31
86653: PUSH
86654: EMPTY
86655: LIST
86656: LIST
86657: PUSH
86658: LD_INT 34
86660: PUSH
86661: LD_INT 48
86663: PUSH
86664: EMPTY
86665: LIST
86666: LIST
86667: PUSH
86668: LD_INT 34
86670: PUSH
86671: LD_INT 8
86673: PUSH
86674: EMPTY
86675: LIST
86676: LIST
86677: PUSH
86678: EMPTY
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: LIST
86685: LIST
86686: LIST
86687: LIST
86688: LIST
86689: LIST
86690: LIST
86691: LIST
86692: PPUSH
86693: CALL_OW 72
86697: DIFF
86698: ST_TO_ADDR
// end ; end_of_file
86699: LD_VAR 0 3
86703: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86704: LD_INT 0
86706: PPUSH
86707: PPUSH
86708: PPUSH
// if not mc_bases or not skirmish then
86709: LD_EXP 36
86713: NOT
86714: PUSH
86715: LD_EXP 34
86719: NOT
86720: OR
86721: IFFALSE 86725
// exit ;
86723: GO 86890
// for i = 1 to mc_bases do
86725: LD_ADDR_VAR 0 4
86729: PUSH
86730: DOUBLE
86731: LD_INT 1
86733: DEC
86734: ST_TO_ADDR
86735: LD_EXP 36
86739: PUSH
86740: FOR_TO
86741: IFFALSE 86888
// begin if sci in mc_bases [ i ] then
86743: LD_VAR 0 2
86747: PUSH
86748: LD_EXP 36
86752: PUSH
86753: LD_VAR 0 4
86757: ARRAY
86758: IN
86759: IFFALSE 86886
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86761: LD_ADDR_EXP 65
86765: PUSH
86766: LD_EXP 65
86770: PPUSH
86771: LD_VAR 0 4
86775: PUSH
86776: LD_EXP 65
86780: PUSH
86781: LD_VAR 0 4
86785: ARRAY
86786: PUSH
86787: LD_INT 1
86789: PLUS
86790: PUSH
86791: EMPTY
86792: LIST
86793: LIST
86794: PPUSH
86795: LD_VAR 0 1
86799: PPUSH
86800: CALL 26051 0 3
86804: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86805: LD_ADDR_VAR 0 5
86809: PUSH
86810: LD_EXP 36
86814: PUSH
86815: LD_VAR 0 4
86819: ARRAY
86820: PPUSH
86821: LD_INT 2
86823: PUSH
86824: LD_INT 30
86826: PUSH
86827: LD_INT 0
86829: PUSH
86830: EMPTY
86831: LIST
86832: LIST
86833: PUSH
86834: LD_INT 30
86836: PUSH
86837: LD_INT 1
86839: PUSH
86840: EMPTY
86841: LIST
86842: LIST
86843: PUSH
86844: EMPTY
86845: LIST
86846: LIST
86847: LIST
86848: PPUSH
86849: CALL_OW 72
86853: PPUSH
86854: LD_VAR 0 1
86858: PPUSH
86859: CALL_OW 74
86863: ST_TO_ADDR
// if tmp then
86864: LD_VAR 0 5
86868: IFFALSE 86884
// ComStandNearbyBuilding ( ape , tmp ) ;
86870: LD_VAR 0 1
86874: PPUSH
86875: LD_VAR 0 5
86879: PPUSH
86880: CALL 20758 0 2
// break ;
86884: GO 86888
// end ; end ;
86886: GO 86740
86888: POP
86889: POP
// end ;
86890: LD_VAR 0 3
86894: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86895: LD_INT 0
86897: PPUSH
86898: PPUSH
86899: PPUSH
// if not mc_bases or not skirmish then
86900: LD_EXP 36
86904: NOT
86905: PUSH
86906: LD_EXP 34
86910: NOT
86911: OR
86912: IFFALSE 86916
// exit ;
86914: GO 87005
// for i = 1 to mc_bases do
86916: LD_ADDR_VAR 0 4
86920: PUSH
86921: DOUBLE
86922: LD_INT 1
86924: DEC
86925: ST_TO_ADDR
86926: LD_EXP 36
86930: PUSH
86931: FOR_TO
86932: IFFALSE 87003
// begin if building in mc_busy_turret_list [ i ] then
86934: LD_VAR 0 1
86938: PUSH
86939: LD_EXP 46
86943: PUSH
86944: LD_VAR 0 4
86948: ARRAY
86949: IN
86950: IFFALSE 87001
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86952: LD_ADDR_VAR 0 5
86956: PUSH
86957: LD_EXP 46
86961: PUSH
86962: LD_VAR 0 4
86966: ARRAY
86967: PUSH
86968: LD_VAR 0 1
86972: DIFF
86973: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86974: LD_ADDR_EXP 46
86978: PUSH
86979: LD_EXP 46
86983: PPUSH
86984: LD_VAR 0 4
86988: PPUSH
86989: LD_VAR 0 5
86993: PPUSH
86994: CALL_OW 1
86998: ST_TO_ADDR
// break ;
86999: GO 87003
// end ; end ;
87001: GO 86931
87003: POP
87004: POP
// end ;
87005: LD_VAR 0 3
87009: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87010: LD_INT 0
87012: PPUSH
87013: PPUSH
87014: PPUSH
// if not mc_bases or not skirmish then
87015: LD_EXP 36
87019: NOT
87020: PUSH
87021: LD_EXP 34
87025: NOT
87026: OR
87027: IFFALSE 87031
// exit ;
87029: GO 87230
// for i = 1 to mc_bases do
87031: LD_ADDR_VAR 0 5
87035: PUSH
87036: DOUBLE
87037: LD_INT 1
87039: DEC
87040: ST_TO_ADDR
87041: LD_EXP 36
87045: PUSH
87046: FOR_TO
87047: IFFALSE 87228
// if building in mc_bases [ i ] then
87049: LD_VAR 0 1
87053: PUSH
87054: LD_EXP 36
87058: PUSH
87059: LD_VAR 0 5
87063: ARRAY
87064: IN
87065: IFFALSE 87226
// begin tmp := mc_bases [ i ] diff building ;
87067: LD_ADDR_VAR 0 6
87071: PUSH
87072: LD_EXP 36
87076: PUSH
87077: LD_VAR 0 5
87081: ARRAY
87082: PUSH
87083: LD_VAR 0 1
87087: DIFF
87088: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87089: LD_ADDR_EXP 36
87093: PUSH
87094: LD_EXP 36
87098: PPUSH
87099: LD_VAR 0 5
87103: PPUSH
87104: LD_VAR 0 6
87108: PPUSH
87109: CALL_OW 1
87113: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87114: LD_VAR 0 1
87118: PUSH
87119: LD_EXP 44
87123: PUSH
87124: LD_VAR 0 5
87128: ARRAY
87129: IN
87130: IFFALSE 87169
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87132: LD_ADDR_EXP 44
87136: PUSH
87137: LD_EXP 44
87141: PPUSH
87142: LD_VAR 0 5
87146: PPUSH
87147: LD_EXP 44
87151: PUSH
87152: LD_VAR 0 5
87156: ARRAY
87157: PUSH
87158: LD_VAR 0 1
87162: DIFF
87163: PPUSH
87164: CALL_OW 1
87168: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87169: LD_VAR 0 1
87173: PUSH
87174: LD_EXP 45
87178: PUSH
87179: LD_VAR 0 5
87183: ARRAY
87184: IN
87185: IFFALSE 87224
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87187: LD_ADDR_EXP 45
87191: PUSH
87192: LD_EXP 45
87196: PPUSH
87197: LD_VAR 0 5
87201: PPUSH
87202: LD_EXP 45
87206: PUSH
87207: LD_VAR 0 5
87211: ARRAY
87212: PUSH
87213: LD_VAR 0 1
87217: DIFF
87218: PPUSH
87219: CALL_OW 1
87223: ST_TO_ADDR
// break ;
87224: GO 87228
// end ;
87226: GO 87046
87228: POP
87229: POP
// end ;
87230: LD_VAR 0 4
87234: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87235: LD_INT 0
87237: PPUSH
87238: PPUSH
87239: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87240: LD_EXP 36
87244: NOT
87245: PUSH
87246: LD_EXP 34
87250: NOT
87251: OR
87252: PUSH
87253: LD_VAR 0 3
87257: PUSH
87258: LD_EXP 62
87262: IN
87263: NOT
87264: OR
87265: IFFALSE 87269
// exit ;
87267: GO 87392
// for i = 1 to mc_vehicles do
87269: LD_ADDR_VAR 0 6
87273: PUSH
87274: DOUBLE
87275: LD_INT 1
87277: DEC
87278: ST_TO_ADDR
87279: LD_EXP 55
87283: PUSH
87284: FOR_TO
87285: IFFALSE 87390
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87287: LD_VAR 0 2
87291: PUSH
87292: LD_EXP 55
87296: PUSH
87297: LD_VAR 0 6
87301: ARRAY
87302: IN
87303: PUSH
87304: LD_VAR 0 1
87308: PUSH
87309: LD_EXP 55
87313: PUSH
87314: LD_VAR 0 6
87318: ARRAY
87319: IN
87320: OR
87321: IFFALSE 87388
// begin tmp := mc_vehicles [ i ] diff old ;
87323: LD_ADDR_VAR 0 7
87327: PUSH
87328: LD_EXP 55
87332: PUSH
87333: LD_VAR 0 6
87337: ARRAY
87338: PUSH
87339: LD_VAR 0 2
87343: DIFF
87344: ST_TO_ADDR
// tmp := tmp diff new ;
87345: LD_ADDR_VAR 0 7
87349: PUSH
87350: LD_VAR 0 7
87354: PUSH
87355: LD_VAR 0 1
87359: DIFF
87360: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87361: LD_ADDR_EXP 55
87365: PUSH
87366: LD_EXP 55
87370: PPUSH
87371: LD_VAR 0 6
87375: PPUSH
87376: LD_VAR 0 7
87380: PPUSH
87381: CALL_OW 1
87385: ST_TO_ADDR
// break ;
87386: GO 87390
// end ;
87388: GO 87284
87390: POP
87391: POP
// end ;
87392: LD_VAR 0 5
87396: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87397: LD_INT 0
87399: PPUSH
87400: PPUSH
87401: PPUSH
87402: PPUSH
// if not mc_bases or not skirmish then
87403: LD_EXP 36
87407: NOT
87408: PUSH
87409: LD_EXP 34
87413: NOT
87414: OR
87415: IFFALSE 87419
// exit ;
87417: GO 87796
// side := GetSide ( vehicle ) ;
87419: LD_ADDR_VAR 0 5
87423: PUSH
87424: LD_VAR 0 1
87428: PPUSH
87429: CALL_OW 255
87433: ST_TO_ADDR
// for i = 1 to mc_bases do
87434: LD_ADDR_VAR 0 4
87438: PUSH
87439: DOUBLE
87440: LD_INT 1
87442: DEC
87443: ST_TO_ADDR
87444: LD_EXP 36
87448: PUSH
87449: FOR_TO
87450: IFFALSE 87794
// begin if factory in mc_bases [ i ] then
87452: LD_VAR 0 2
87456: PUSH
87457: LD_EXP 36
87461: PUSH
87462: LD_VAR 0 4
87466: ARRAY
87467: IN
87468: IFFALSE 87792
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
87470: LD_EXP 58
87474: PUSH
87475: LD_VAR 0 4
87479: ARRAY
87480: PUSH
87481: LD_EXP 47
87485: PUSH
87486: LD_VAR 0 4
87490: ARRAY
87491: LESS
87492: PUSH
87493: LD_VAR 0 1
87497: PPUSH
87498: CALL_OW 264
87502: PUSH
87503: LD_INT 31
87505: PUSH
87506: LD_INT 32
87508: PUSH
87509: LD_INT 51
87511: PUSH
87512: LD_EXP 30
87516: PUSH
87517: LD_INT 12
87519: PUSH
87520: LD_INT 30
87522: PUSH
87523: LD_EXP 29
87527: PUSH
87528: LD_INT 11
87530: PUSH
87531: LD_INT 53
87533: PUSH
87534: LD_INT 14
87536: PUSH
87537: LD_EXP 33
87541: PUSH
87542: LD_INT 29
87544: PUSH
87545: LD_EXP 31
87549: PUSH
87550: LD_INT 13
87552: PUSH
87553: LD_INT 52
87555: PUSH
87556: LD_INT 48
87558: PUSH
87559: LD_INT 8
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: LIST
87570: LIST
87571: LIST
87572: LIST
87573: LIST
87574: LIST
87575: LIST
87576: LIST
87577: LIST
87578: LIST
87579: LIST
87580: IN
87581: NOT
87582: AND
87583: IFFALSE 87631
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
87585: LD_ADDR_EXP 58
87589: PUSH
87590: LD_EXP 58
87594: PPUSH
87595: LD_VAR 0 4
87599: PUSH
87600: LD_EXP 58
87604: PUSH
87605: LD_VAR 0 4
87609: ARRAY
87610: PUSH
87611: LD_INT 1
87613: PLUS
87614: PUSH
87615: EMPTY
87616: LIST
87617: LIST
87618: PPUSH
87619: LD_VAR 0 1
87623: PPUSH
87624: CALL 26051 0 3
87628: ST_TO_ADDR
87629: GO 87675
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87631: LD_ADDR_EXP 55
87635: PUSH
87636: LD_EXP 55
87640: PPUSH
87641: LD_VAR 0 4
87645: PUSH
87646: LD_EXP 55
87650: PUSH
87651: LD_VAR 0 4
87655: ARRAY
87656: PUSH
87657: LD_INT 1
87659: PLUS
87660: PUSH
87661: EMPTY
87662: LIST
87663: LIST
87664: PPUSH
87665: LD_VAR 0 1
87669: PPUSH
87670: CALL 26051 0 3
87674: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
87675: LD_VAR 0 1
87679: PPUSH
87680: CALL_OW 263
87684: PUSH
87685: LD_INT 2
87687: EQUAL
87688: IFFALSE 87708
// begin repeat wait ( 0 0$1 ) ;
87690: LD_INT 35
87692: PPUSH
87693: CALL_OW 67
// until IsControledBy ( vehicle ) ;
87697: LD_VAR 0 1
87701: PPUSH
87702: CALL_OW 312
87706: IFFALSE 87690
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87708: LD_VAR 0 1
87712: PPUSH
87713: LD_EXP 60
87717: PUSH
87718: LD_VAR 0 4
87722: ARRAY
87723: PPUSH
87724: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
87728: LD_VAR 0 1
87732: PPUSH
87733: CALL_OW 263
87737: PUSH
87738: LD_INT 1
87740: NONEQUAL
87741: IFFALSE 87745
// break ;
87743: GO 87794
// repeat wait ( 0 0$1 ) ;
87745: LD_INT 35
87747: PPUSH
87748: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87752: LD_VAR 0 1
87756: PPUSH
87757: LD_EXP 60
87761: PUSH
87762: LD_VAR 0 4
87766: ARRAY
87767: PPUSH
87768: CALL_OW 308
87772: IFFALSE 87745
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87774: LD_VAR 0 1
87778: PPUSH
87779: CALL_OW 311
87783: PPUSH
87784: CALL_OW 121
// exit ;
87788: POP
87789: POP
87790: GO 87796
// end ; end ;
87792: GO 87449
87794: POP
87795: POP
// end ;
87796: LD_VAR 0 3
87800: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87801: LD_INT 0
87803: PPUSH
87804: PPUSH
87805: PPUSH
87806: PPUSH
// if not mc_bases or not skirmish then
87807: LD_EXP 36
87811: NOT
87812: PUSH
87813: LD_EXP 34
87817: NOT
87818: OR
87819: IFFALSE 87823
// exit ;
87821: GO 88176
// repeat wait ( 0 0$1 ) ;
87823: LD_INT 35
87825: PPUSH
87826: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87830: LD_VAR 0 2
87834: PPUSH
87835: LD_VAR 0 3
87839: PPUSH
87840: CALL_OW 284
87844: IFFALSE 87823
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87846: LD_VAR 0 2
87850: PPUSH
87851: LD_VAR 0 3
87855: PPUSH
87856: CALL_OW 283
87860: PUSH
87861: LD_INT 4
87863: EQUAL
87864: IFFALSE 87868
// exit ;
87866: GO 88176
// for i = 1 to mc_bases do
87868: LD_ADDR_VAR 0 7
87872: PUSH
87873: DOUBLE
87874: LD_INT 1
87876: DEC
87877: ST_TO_ADDR
87878: LD_EXP 36
87882: PUSH
87883: FOR_TO
87884: IFFALSE 88174
// begin if mc_crates_area [ i ] then
87886: LD_EXP 54
87890: PUSH
87891: LD_VAR 0 7
87895: ARRAY
87896: IFFALSE 88007
// for j in mc_crates_area [ i ] do
87898: LD_ADDR_VAR 0 8
87902: PUSH
87903: LD_EXP 54
87907: PUSH
87908: LD_VAR 0 7
87912: ARRAY
87913: PUSH
87914: FOR_IN
87915: IFFALSE 88005
// if InArea ( x , y , j ) then
87917: LD_VAR 0 2
87921: PPUSH
87922: LD_VAR 0 3
87926: PPUSH
87927: LD_VAR 0 8
87931: PPUSH
87932: CALL_OW 309
87936: IFFALSE 88003
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87938: LD_ADDR_EXP 52
87942: PUSH
87943: LD_EXP 52
87947: PPUSH
87948: LD_VAR 0 7
87952: PUSH
87953: LD_EXP 52
87957: PUSH
87958: LD_VAR 0 7
87962: ARRAY
87963: PUSH
87964: LD_INT 1
87966: PLUS
87967: PUSH
87968: EMPTY
87969: LIST
87970: LIST
87971: PPUSH
87972: LD_VAR 0 4
87976: PUSH
87977: LD_VAR 0 2
87981: PUSH
87982: LD_VAR 0 3
87986: PUSH
87987: EMPTY
87988: LIST
87989: LIST
87990: LIST
87991: PPUSH
87992: CALL 26051 0 3
87996: ST_TO_ADDR
// exit ;
87997: POP
87998: POP
87999: POP
88000: POP
88001: GO 88176
// end ;
88003: GO 87914
88005: POP
88006: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88007: LD_ADDR_VAR 0 9
88011: PUSH
88012: LD_EXP 36
88016: PUSH
88017: LD_VAR 0 7
88021: ARRAY
88022: PPUSH
88023: LD_INT 2
88025: PUSH
88026: LD_INT 30
88028: PUSH
88029: LD_INT 0
88031: PUSH
88032: EMPTY
88033: LIST
88034: LIST
88035: PUSH
88036: LD_INT 30
88038: PUSH
88039: LD_INT 1
88041: PUSH
88042: EMPTY
88043: LIST
88044: LIST
88045: PUSH
88046: EMPTY
88047: LIST
88048: LIST
88049: LIST
88050: PPUSH
88051: CALL_OW 72
88055: ST_TO_ADDR
// if not depot then
88056: LD_VAR 0 9
88060: NOT
88061: IFFALSE 88065
// continue ;
88063: GO 87883
// for j in depot do
88065: LD_ADDR_VAR 0 8
88069: PUSH
88070: LD_VAR 0 9
88074: PUSH
88075: FOR_IN
88076: IFFALSE 88170
// if GetDistUnitXY ( j , x , y ) < 30 then
88078: LD_VAR 0 8
88082: PPUSH
88083: LD_VAR 0 2
88087: PPUSH
88088: LD_VAR 0 3
88092: PPUSH
88093: CALL_OW 297
88097: PUSH
88098: LD_INT 30
88100: LESS
88101: IFFALSE 88168
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88103: LD_ADDR_EXP 52
88107: PUSH
88108: LD_EXP 52
88112: PPUSH
88113: LD_VAR 0 7
88117: PUSH
88118: LD_EXP 52
88122: PUSH
88123: LD_VAR 0 7
88127: ARRAY
88128: PUSH
88129: LD_INT 1
88131: PLUS
88132: PUSH
88133: EMPTY
88134: LIST
88135: LIST
88136: PPUSH
88137: LD_VAR 0 4
88141: PUSH
88142: LD_VAR 0 2
88146: PUSH
88147: LD_VAR 0 3
88151: PUSH
88152: EMPTY
88153: LIST
88154: LIST
88155: LIST
88156: PPUSH
88157: CALL 26051 0 3
88161: ST_TO_ADDR
// exit ;
88162: POP
88163: POP
88164: POP
88165: POP
88166: GO 88176
// end ;
88168: GO 88075
88170: POP
88171: POP
// end ;
88172: GO 87883
88174: POP
88175: POP
// end ;
88176: LD_VAR 0 6
88180: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88181: LD_INT 0
88183: PPUSH
88184: PPUSH
88185: PPUSH
88186: PPUSH
// if not mc_bases or not skirmish then
88187: LD_EXP 36
88191: NOT
88192: PUSH
88193: LD_EXP 34
88197: NOT
88198: OR
88199: IFFALSE 88203
// exit ;
88201: GO 88480
// side := GetSide ( lab ) ;
88203: LD_ADDR_VAR 0 4
88207: PUSH
88208: LD_VAR 0 2
88212: PPUSH
88213: CALL_OW 255
88217: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88218: LD_VAR 0 4
88222: PUSH
88223: LD_EXP 62
88227: IN
88228: NOT
88229: PUSH
88230: LD_EXP 63
88234: NOT
88235: OR
88236: PUSH
88237: LD_EXP 36
88241: NOT
88242: OR
88243: IFFALSE 88247
// exit ;
88245: GO 88480
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88247: LD_ADDR_EXP 63
88251: PUSH
88252: LD_EXP 63
88256: PPUSH
88257: LD_VAR 0 4
88261: PPUSH
88262: LD_EXP 63
88266: PUSH
88267: LD_VAR 0 4
88271: ARRAY
88272: PUSH
88273: LD_VAR 0 1
88277: DIFF
88278: PPUSH
88279: CALL_OW 1
88283: ST_TO_ADDR
// for i = 1 to mc_bases do
88284: LD_ADDR_VAR 0 5
88288: PUSH
88289: DOUBLE
88290: LD_INT 1
88292: DEC
88293: ST_TO_ADDR
88294: LD_EXP 36
88298: PUSH
88299: FOR_TO
88300: IFFALSE 88478
// begin if lab in mc_bases [ i ] then
88302: LD_VAR 0 2
88306: PUSH
88307: LD_EXP 36
88311: PUSH
88312: LD_VAR 0 5
88316: ARRAY
88317: IN
88318: IFFALSE 88476
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88320: LD_VAR 0 1
88324: PUSH
88325: LD_INT 11
88327: PUSH
88328: LD_INT 4
88330: PUSH
88331: LD_INT 3
88333: PUSH
88334: LD_INT 2
88336: PUSH
88337: EMPTY
88338: LIST
88339: LIST
88340: LIST
88341: LIST
88342: IN
88343: PUSH
88344: LD_EXP 66
88348: PUSH
88349: LD_VAR 0 5
88353: ARRAY
88354: AND
88355: IFFALSE 88476
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88357: LD_ADDR_VAR 0 6
88361: PUSH
88362: LD_EXP 66
88366: PUSH
88367: LD_VAR 0 5
88371: ARRAY
88372: PUSH
88373: LD_INT 1
88375: ARRAY
88376: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88377: LD_ADDR_EXP 66
88381: PUSH
88382: LD_EXP 66
88386: PPUSH
88387: LD_VAR 0 5
88391: PPUSH
88392: EMPTY
88393: PPUSH
88394: CALL_OW 1
88398: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88399: LD_VAR 0 6
88403: PPUSH
88404: LD_INT 0
88406: PPUSH
88407: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88411: LD_VAR 0 6
88415: PPUSH
88416: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88420: LD_ADDR_EXP 65
88424: PUSH
88425: LD_EXP 65
88429: PPUSH
88430: LD_VAR 0 5
88434: PPUSH
88435: LD_EXP 65
88439: PUSH
88440: LD_VAR 0 5
88444: ARRAY
88445: PPUSH
88446: LD_INT 1
88448: PPUSH
88449: LD_VAR 0 6
88453: PPUSH
88454: CALL_OW 2
88458: PPUSH
88459: CALL_OW 1
88463: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
88464: LD_VAR 0 5
88468: PPUSH
88469: LD_INT 112
88471: PPUSH
88472: CALL 66013 0 2
// end ; end ; end ;
88476: GO 88299
88478: POP
88479: POP
// end ;
88480: LD_VAR 0 3
88484: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
88485: LD_INT 0
88487: PPUSH
88488: PPUSH
88489: PPUSH
88490: PPUSH
88491: PPUSH
88492: PPUSH
88493: PPUSH
88494: PPUSH
// if not mc_bases or not skirmish then
88495: LD_EXP 36
88499: NOT
88500: PUSH
88501: LD_EXP 34
88505: NOT
88506: OR
88507: IFFALSE 88511
// exit ;
88509: GO 89603
// for i = 1 to mc_bases do
88511: LD_ADDR_VAR 0 3
88515: PUSH
88516: DOUBLE
88517: LD_INT 1
88519: DEC
88520: ST_TO_ADDR
88521: LD_EXP 36
88525: PUSH
88526: FOR_TO
88527: IFFALSE 89601
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88529: LD_VAR 0 1
88533: PUSH
88534: LD_EXP 36
88538: PUSH
88539: LD_VAR 0 3
88543: ARRAY
88544: IN
88545: PUSH
88546: LD_VAR 0 1
88550: PUSH
88551: LD_EXP 43
88555: PUSH
88556: LD_VAR 0 3
88560: ARRAY
88561: IN
88562: OR
88563: PUSH
88564: LD_VAR 0 1
88568: PUSH
88569: LD_EXP 58
88573: PUSH
88574: LD_VAR 0 3
88578: ARRAY
88579: IN
88580: OR
88581: PUSH
88582: LD_VAR 0 1
88586: PUSH
88587: LD_EXP 55
88591: PUSH
88592: LD_VAR 0 3
88596: ARRAY
88597: IN
88598: OR
88599: PUSH
88600: LD_VAR 0 1
88604: PUSH
88605: LD_EXP 65
88609: PUSH
88610: LD_VAR 0 3
88614: ARRAY
88615: IN
88616: OR
88617: PUSH
88618: LD_VAR 0 1
88622: PUSH
88623: LD_EXP 66
88627: PUSH
88628: LD_VAR 0 3
88632: ARRAY
88633: IN
88634: OR
88635: IFFALSE 89599
// begin if un in mc_ape [ i ] then
88637: LD_VAR 0 1
88641: PUSH
88642: LD_EXP 65
88646: PUSH
88647: LD_VAR 0 3
88651: ARRAY
88652: IN
88653: IFFALSE 88692
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88655: LD_ADDR_EXP 65
88659: PUSH
88660: LD_EXP 65
88664: PPUSH
88665: LD_VAR 0 3
88669: PPUSH
88670: LD_EXP 65
88674: PUSH
88675: LD_VAR 0 3
88679: ARRAY
88680: PUSH
88681: LD_VAR 0 1
88685: DIFF
88686: PPUSH
88687: CALL_OW 1
88691: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88692: LD_VAR 0 1
88696: PUSH
88697: LD_EXP 66
88701: PUSH
88702: LD_VAR 0 3
88706: ARRAY
88707: IN
88708: IFFALSE 88732
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88710: LD_ADDR_EXP 66
88714: PUSH
88715: LD_EXP 66
88719: PPUSH
88720: LD_VAR 0 3
88724: PPUSH
88725: EMPTY
88726: PPUSH
88727: CALL_OW 1
88731: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88732: LD_VAR 0 1
88736: PPUSH
88737: CALL_OW 247
88741: PUSH
88742: LD_INT 2
88744: EQUAL
88745: PUSH
88746: LD_VAR 0 1
88750: PPUSH
88751: CALL_OW 110
88755: PUSH
88756: LD_INT 20
88758: EQUAL
88759: PUSH
88760: LD_VAR 0 1
88764: PUSH
88765: LD_EXP 58
88769: PUSH
88770: LD_VAR 0 3
88774: ARRAY
88775: IN
88776: OR
88777: AND
88778: IFFALSE 88939
// begin if un in mc_defender [ i ] then
88780: LD_VAR 0 1
88784: PUSH
88785: LD_EXP 58
88789: PUSH
88790: LD_VAR 0 3
88794: ARRAY
88795: IN
88796: IFFALSE 88835
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88798: LD_ADDR_EXP 58
88802: PUSH
88803: LD_EXP 58
88807: PPUSH
88808: LD_VAR 0 3
88812: PPUSH
88813: LD_EXP 58
88817: PUSH
88818: LD_VAR 0 3
88822: ARRAY
88823: PUSH
88824: LD_VAR 0 1
88828: DIFF
88829: PPUSH
88830: CALL_OW 1
88834: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
88835: LD_ADDR_VAR 0 8
88839: PUSH
88840: LD_VAR 0 3
88844: PPUSH
88845: LD_INT 3
88847: PPUSH
88848: CALL 85528 0 2
88852: ST_TO_ADDR
// if fac then
88853: LD_VAR 0 8
88857: IFFALSE 88939
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88859: LD_ADDR_VAR 0 9
88863: PUSH
88864: LD_VAR 0 8
88868: PPUSH
88869: LD_VAR 0 1
88873: PPUSH
88874: CALL_OW 265
88878: PPUSH
88879: LD_VAR 0 1
88883: PPUSH
88884: CALL_OW 262
88888: PPUSH
88889: LD_VAR 0 1
88893: PPUSH
88894: CALL_OW 263
88898: PPUSH
88899: LD_VAR 0 1
88903: PPUSH
88904: CALL_OW 264
88908: PPUSH
88909: CALL 23644 0 5
88913: ST_TO_ADDR
// if components then
88914: LD_VAR 0 9
88918: IFFALSE 88937
// MC_InsertProduceList ( i , [ components ] ) ;
88920: LD_VAR 0 3
88924: PPUSH
88925: LD_VAR 0 9
88929: PUSH
88930: EMPTY
88931: LIST
88932: PPUSH
88933: CALL 85156 0 2
// break ;
88937: GO 89601
// end ; end ; if GetType ( un ) = unit_building then
88939: LD_VAR 0 1
88943: PPUSH
88944: CALL_OW 247
88948: PUSH
88949: LD_INT 3
88951: EQUAL
88952: IFFALSE 89267
// begin btype := GetBType ( un ) ;
88954: LD_ADDR_VAR 0 5
88958: PUSH
88959: LD_VAR 0 1
88963: PPUSH
88964: CALL_OW 266
88968: ST_TO_ADDR
// if btype = b_warehouse then
88969: LD_VAR 0 5
88973: PUSH
88974: LD_INT 1
88976: EQUAL
88977: IFFALSE 88995
// begin btype := b_depot ;
88979: LD_ADDR_VAR 0 5
88983: PUSH
88984: LD_INT 0
88986: ST_TO_ADDR
// pos := 1 ;
88987: LD_ADDR_VAR 0 6
88991: PUSH
88992: LD_INT 1
88994: ST_TO_ADDR
// end ; if btype = b_factory then
88995: LD_VAR 0 5
88999: PUSH
89000: LD_INT 3
89002: EQUAL
89003: IFFALSE 89021
// begin btype := b_workshop ;
89005: LD_ADDR_VAR 0 5
89009: PUSH
89010: LD_INT 2
89012: ST_TO_ADDR
// pos := 1 ;
89013: LD_ADDR_VAR 0 6
89017: PUSH
89018: LD_INT 1
89020: ST_TO_ADDR
// end ; if btype = b_barracks then
89021: LD_VAR 0 5
89025: PUSH
89026: LD_INT 5
89028: EQUAL
89029: IFFALSE 89039
// btype := b_armoury ;
89031: LD_ADDR_VAR 0 5
89035: PUSH
89036: LD_INT 4
89038: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89039: LD_VAR 0 5
89043: PUSH
89044: LD_INT 7
89046: PUSH
89047: LD_INT 8
89049: PUSH
89050: EMPTY
89051: LIST
89052: LIST
89053: IN
89054: IFFALSE 89064
// btype := b_lab ;
89056: LD_ADDR_VAR 0 5
89060: PUSH
89061: LD_INT 6
89063: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89064: LD_ADDR_EXP 41
89068: PUSH
89069: LD_EXP 41
89073: PPUSH
89074: LD_VAR 0 3
89078: PUSH
89079: LD_EXP 41
89083: PUSH
89084: LD_VAR 0 3
89088: ARRAY
89089: PUSH
89090: LD_INT 1
89092: PLUS
89093: PUSH
89094: EMPTY
89095: LIST
89096: LIST
89097: PPUSH
89098: LD_VAR 0 5
89102: PUSH
89103: LD_VAR 0 1
89107: PPUSH
89108: CALL_OW 250
89112: PUSH
89113: LD_VAR 0 1
89117: PPUSH
89118: CALL_OW 251
89122: PUSH
89123: LD_VAR 0 1
89127: PPUSH
89128: CALL_OW 254
89132: PUSH
89133: EMPTY
89134: LIST
89135: LIST
89136: LIST
89137: LIST
89138: PPUSH
89139: CALL 26051 0 3
89143: ST_TO_ADDR
// if pos = 1 then
89144: LD_VAR 0 6
89148: PUSH
89149: LD_INT 1
89151: EQUAL
89152: IFFALSE 89267
// begin tmp := mc_build_list [ i ] ;
89154: LD_ADDR_VAR 0 7
89158: PUSH
89159: LD_EXP 41
89163: PUSH
89164: LD_VAR 0 3
89168: ARRAY
89169: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89170: LD_VAR 0 7
89174: PPUSH
89175: LD_INT 2
89177: PUSH
89178: LD_INT 30
89180: PUSH
89181: LD_INT 0
89183: PUSH
89184: EMPTY
89185: LIST
89186: LIST
89187: PUSH
89188: LD_INT 30
89190: PUSH
89191: LD_INT 1
89193: PUSH
89194: EMPTY
89195: LIST
89196: LIST
89197: PUSH
89198: EMPTY
89199: LIST
89200: LIST
89201: LIST
89202: PPUSH
89203: CALL_OW 72
89207: IFFALSE 89217
// pos := 2 ;
89209: LD_ADDR_VAR 0 6
89213: PUSH
89214: LD_INT 2
89216: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89217: LD_ADDR_VAR 0 7
89221: PUSH
89222: LD_VAR 0 7
89226: PPUSH
89227: LD_VAR 0 6
89231: PPUSH
89232: LD_VAR 0 7
89236: PPUSH
89237: CALL 26377 0 3
89241: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89242: LD_ADDR_EXP 41
89246: PUSH
89247: LD_EXP 41
89251: PPUSH
89252: LD_VAR 0 3
89256: PPUSH
89257: LD_VAR 0 7
89261: PPUSH
89262: CALL_OW 1
89266: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89267: LD_VAR 0 1
89271: PUSH
89272: LD_EXP 36
89276: PUSH
89277: LD_VAR 0 3
89281: ARRAY
89282: IN
89283: IFFALSE 89322
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89285: LD_ADDR_EXP 36
89289: PUSH
89290: LD_EXP 36
89294: PPUSH
89295: LD_VAR 0 3
89299: PPUSH
89300: LD_EXP 36
89304: PUSH
89305: LD_VAR 0 3
89309: ARRAY
89310: PUSH
89311: LD_VAR 0 1
89315: DIFF
89316: PPUSH
89317: CALL_OW 1
89321: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89322: LD_VAR 0 1
89326: PUSH
89327: LD_EXP 43
89331: PUSH
89332: LD_VAR 0 3
89336: ARRAY
89337: IN
89338: IFFALSE 89377
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89340: LD_ADDR_EXP 43
89344: PUSH
89345: LD_EXP 43
89349: PPUSH
89350: LD_VAR 0 3
89354: PPUSH
89355: LD_EXP 43
89359: PUSH
89360: LD_VAR 0 3
89364: ARRAY
89365: PUSH
89366: LD_VAR 0 1
89370: DIFF
89371: PPUSH
89372: CALL_OW 1
89376: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89377: LD_VAR 0 1
89381: PUSH
89382: LD_EXP 55
89386: PUSH
89387: LD_VAR 0 3
89391: ARRAY
89392: IN
89393: IFFALSE 89432
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89395: LD_ADDR_EXP 55
89399: PUSH
89400: LD_EXP 55
89404: PPUSH
89405: LD_VAR 0 3
89409: PPUSH
89410: LD_EXP 55
89414: PUSH
89415: LD_VAR 0 3
89419: ARRAY
89420: PUSH
89421: LD_VAR 0 1
89425: DIFF
89426: PPUSH
89427: CALL_OW 1
89431: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89432: LD_VAR 0 1
89436: PUSH
89437: LD_EXP 58
89441: PUSH
89442: LD_VAR 0 3
89446: ARRAY
89447: IN
89448: IFFALSE 89487
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89450: LD_ADDR_EXP 58
89454: PUSH
89455: LD_EXP 58
89459: PPUSH
89460: LD_VAR 0 3
89464: PPUSH
89465: LD_EXP 58
89469: PUSH
89470: LD_VAR 0 3
89474: ARRAY
89475: PUSH
89476: LD_VAR 0 1
89480: DIFF
89481: PPUSH
89482: CALL_OW 1
89486: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89487: LD_VAR 0 1
89491: PUSH
89492: LD_EXP 45
89496: PUSH
89497: LD_VAR 0 3
89501: ARRAY
89502: IN
89503: IFFALSE 89542
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89505: LD_ADDR_EXP 45
89509: PUSH
89510: LD_EXP 45
89514: PPUSH
89515: LD_VAR 0 3
89519: PPUSH
89520: LD_EXP 45
89524: PUSH
89525: LD_VAR 0 3
89529: ARRAY
89530: PUSH
89531: LD_VAR 0 1
89535: DIFF
89536: PPUSH
89537: CALL_OW 1
89541: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89542: LD_VAR 0 1
89546: PUSH
89547: LD_EXP 44
89551: PUSH
89552: LD_VAR 0 3
89556: ARRAY
89557: IN
89558: IFFALSE 89597
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89560: LD_ADDR_EXP 44
89564: PUSH
89565: LD_EXP 44
89569: PPUSH
89570: LD_VAR 0 3
89574: PPUSH
89575: LD_EXP 44
89579: PUSH
89580: LD_VAR 0 3
89584: ARRAY
89585: PUSH
89586: LD_VAR 0 1
89590: DIFF
89591: PPUSH
89592: CALL_OW 1
89596: ST_TO_ADDR
// end ; break ;
89597: GO 89601
// end ;
89599: GO 88526
89601: POP
89602: POP
// end ;
89603: LD_VAR 0 2
89607: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89608: LD_INT 0
89610: PPUSH
89611: PPUSH
89612: PPUSH
// if not mc_bases or not skirmish then
89613: LD_EXP 36
89617: NOT
89618: PUSH
89619: LD_EXP 34
89623: NOT
89624: OR
89625: IFFALSE 89629
// exit ;
89627: GO 89844
// for i = 1 to mc_bases do
89629: LD_ADDR_VAR 0 3
89633: PUSH
89634: DOUBLE
89635: LD_INT 1
89637: DEC
89638: ST_TO_ADDR
89639: LD_EXP 36
89643: PUSH
89644: FOR_TO
89645: IFFALSE 89842
// begin if building in mc_construct_list [ i ] then
89647: LD_VAR 0 1
89651: PUSH
89652: LD_EXP 43
89656: PUSH
89657: LD_VAR 0 3
89661: ARRAY
89662: IN
89663: IFFALSE 89840
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89665: LD_ADDR_EXP 43
89669: PUSH
89670: LD_EXP 43
89674: PPUSH
89675: LD_VAR 0 3
89679: PPUSH
89680: LD_EXP 43
89684: PUSH
89685: LD_VAR 0 3
89689: ARRAY
89690: PUSH
89691: LD_VAR 0 1
89695: DIFF
89696: PPUSH
89697: CALL_OW 1
89701: ST_TO_ADDR
// if building in mc_lab [ i ] then
89702: LD_VAR 0 1
89706: PUSH
89707: LD_EXP 69
89711: PUSH
89712: LD_VAR 0 3
89716: ARRAY
89717: IN
89718: IFFALSE 89773
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89720: LD_ADDR_EXP 70
89724: PUSH
89725: LD_EXP 70
89729: PPUSH
89730: LD_VAR 0 3
89734: PPUSH
89735: LD_EXP 70
89739: PUSH
89740: LD_VAR 0 3
89744: ARRAY
89745: PPUSH
89746: LD_INT 1
89748: PPUSH
89749: LD_EXP 70
89753: PUSH
89754: LD_VAR 0 3
89758: ARRAY
89759: PPUSH
89760: LD_INT 0
89762: PPUSH
89763: CALL 25469 0 4
89767: PPUSH
89768: CALL_OW 1
89772: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89773: LD_VAR 0 1
89777: PUSH
89778: LD_EXP 36
89782: PUSH
89783: LD_VAR 0 3
89787: ARRAY
89788: IN
89789: NOT
89790: IFFALSE 89836
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89792: LD_ADDR_EXP 36
89796: PUSH
89797: LD_EXP 36
89801: PPUSH
89802: LD_VAR 0 3
89806: PUSH
89807: LD_EXP 36
89811: PUSH
89812: LD_VAR 0 3
89816: ARRAY
89817: PUSH
89818: LD_INT 1
89820: PLUS
89821: PUSH
89822: EMPTY
89823: LIST
89824: LIST
89825: PPUSH
89826: LD_VAR 0 1
89830: PPUSH
89831: CALL 26051 0 3
89835: ST_TO_ADDR
// exit ;
89836: POP
89837: POP
89838: GO 89844
// end ; end ;
89840: GO 89644
89842: POP
89843: POP
// end ;
89844: LD_VAR 0 2
89848: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89849: LD_INT 0
89851: PPUSH
89852: PPUSH
89853: PPUSH
89854: PPUSH
89855: PPUSH
89856: PPUSH
89857: PPUSH
// if not mc_bases or not skirmish then
89858: LD_EXP 36
89862: NOT
89863: PUSH
89864: LD_EXP 34
89868: NOT
89869: OR
89870: IFFALSE 89874
// exit ;
89872: GO 90535
// for i = 1 to mc_bases do
89874: LD_ADDR_VAR 0 3
89878: PUSH
89879: DOUBLE
89880: LD_INT 1
89882: DEC
89883: ST_TO_ADDR
89884: LD_EXP 36
89888: PUSH
89889: FOR_TO
89890: IFFALSE 90533
// begin if building in mc_construct_list [ i ] then
89892: LD_VAR 0 1
89896: PUSH
89897: LD_EXP 43
89901: PUSH
89902: LD_VAR 0 3
89906: ARRAY
89907: IN
89908: IFFALSE 90531
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89910: LD_ADDR_EXP 43
89914: PUSH
89915: LD_EXP 43
89919: PPUSH
89920: LD_VAR 0 3
89924: PPUSH
89925: LD_EXP 43
89929: PUSH
89930: LD_VAR 0 3
89934: ARRAY
89935: PUSH
89936: LD_VAR 0 1
89940: DIFF
89941: PPUSH
89942: CALL_OW 1
89946: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89947: LD_ADDR_EXP 36
89951: PUSH
89952: LD_EXP 36
89956: PPUSH
89957: LD_VAR 0 3
89961: PUSH
89962: LD_EXP 36
89966: PUSH
89967: LD_VAR 0 3
89971: ARRAY
89972: PUSH
89973: LD_INT 1
89975: PLUS
89976: PUSH
89977: EMPTY
89978: LIST
89979: LIST
89980: PPUSH
89981: LD_VAR 0 1
89985: PPUSH
89986: CALL 26051 0 3
89990: ST_TO_ADDR
// btype := GetBType ( building ) ;
89991: LD_ADDR_VAR 0 5
89995: PUSH
89996: LD_VAR 0 1
90000: PPUSH
90001: CALL_OW 266
90005: ST_TO_ADDR
// side := GetSide ( building ) ;
90006: LD_ADDR_VAR 0 8
90010: PUSH
90011: LD_VAR 0 1
90015: PPUSH
90016: CALL_OW 255
90020: ST_TO_ADDR
// if btype = b_lab then
90021: LD_VAR 0 5
90025: PUSH
90026: LD_INT 6
90028: EQUAL
90029: IFFALSE 90079
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90031: LD_ADDR_EXP 69
90035: PUSH
90036: LD_EXP 69
90040: PPUSH
90041: LD_VAR 0 3
90045: PUSH
90046: LD_EXP 69
90050: PUSH
90051: LD_VAR 0 3
90055: ARRAY
90056: PUSH
90057: LD_INT 1
90059: PLUS
90060: PUSH
90061: EMPTY
90062: LIST
90063: LIST
90064: PPUSH
90065: LD_VAR 0 1
90069: PPUSH
90070: CALL 26051 0 3
90074: ST_TO_ADDR
// exit ;
90075: POP
90076: POP
90077: GO 90535
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90079: LD_VAR 0 5
90083: PUSH
90084: LD_INT 0
90086: PUSH
90087: LD_INT 2
90089: PUSH
90090: LD_INT 4
90092: PUSH
90093: EMPTY
90094: LIST
90095: LIST
90096: LIST
90097: IN
90098: IFFALSE 90222
// begin if btype = b_armoury then
90100: LD_VAR 0 5
90104: PUSH
90105: LD_INT 4
90107: EQUAL
90108: IFFALSE 90118
// btype := b_barracks ;
90110: LD_ADDR_VAR 0 5
90114: PUSH
90115: LD_INT 5
90117: ST_TO_ADDR
// if btype = b_depot then
90118: LD_VAR 0 5
90122: PUSH
90123: LD_INT 0
90125: EQUAL
90126: IFFALSE 90136
// btype := b_warehouse ;
90128: LD_ADDR_VAR 0 5
90132: PUSH
90133: LD_INT 1
90135: ST_TO_ADDR
// if btype = b_workshop then
90136: LD_VAR 0 5
90140: PUSH
90141: LD_INT 2
90143: EQUAL
90144: IFFALSE 90154
// btype := b_factory ;
90146: LD_ADDR_VAR 0 5
90150: PUSH
90151: LD_INT 3
90153: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90154: LD_VAR 0 5
90158: PPUSH
90159: LD_VAR 0 8
90163: PPUSH
90164: CALL_OW 323
90168: PUSH
90169: LD_INT 1
90171: EQUAL
90172: IFFALSE 90218
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90174: LD_ADDR_EXP 68
90178: PUSH
90179: LD_EXP 68
90183: PPUSH
90184: LD_VAR 0 3
90188: PUSH
90189: LD_EXP 68
90193: PUSH
90194: LD_VAR 0 3
90198: ARRAY
90199: PUSH
90200: LD_INT 1
90202: PLUS
90203: PUSH
90204: EMPTY
90205: LIST
90206: LIST
90207: PPUSH
90208: LD_VAR 0 1
90212: PPUSH
90213: CALL 26051 0 3
90217: ST_TO_ADDR
// exit ;
90218: POP
90219: POP
90220: GO 90535
// end ; if btype in [ b_bunker , b_turret ] then
90222: LD_VAR 0 5
90226: PUSH
90227: LD_INT 32
90229: PUSH
90230: LD_INT 33
90232: PUSH
90233: EMPTY
90234: LIST
90235: LIST
90236: IN
90237: IFFALSE 90527
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90239: LD_ADDR_EXP 44
90243: PUSH
90244: LD_EXP 44
90248: PPUSH
90249: LD_VAR 0 3
90253: PUSH
90254: LD_EXP 44
90258: PUSH
90259: LD_VAR 0 3
90263: ARRAY
90264: PUSH
90265: LD_INT 1
90267: PLUS
90268: PUSH
90269: EMPTY
90270: LIST
90271: LIST
90272: PPUSH
90273: LD_VAR 0 1
90277: PPUSH
90278: CALL 26051 0 3
90282: ST_TO_ADDR
// if btype = b_bunker then
90283: LD_VAR 0 5
90287: PUSH
90288: LD_INT 32
90290: EQUAL
90291: IFFALSE 90527
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90293: LD_ADDR_EXP 45
90297: PUSH
90298: LD_EXP 45
90302: PPUSH
90303: LD_VAR 0 3
90307: PUSH
90308: LD_EXP 45
90312: PUSH
90313: LD_VAR 0 3
90317: ARRAY
90318: PUSH
90319: LD_INT 1
90321: PLUS
90322: PUSH
90323: EMPTY
90324: LIST
90325: LIST
90326: PPUSH
90327: LD_VAR 0 1
90331: PPUSH
90332: CALL 26051 0 3
90336: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90337: LD_ADDR_VAR 0 6
90341: PUSH
90342: LD_EXP 36
90346: PUSH
90347: LD_VAR 0 3
90351: ARRAY
90352: PPUSH
90353: LD_INT 25
90355: PUSH
90356: LD_INT 1
90358: PUSH
90359: EMPTY
90360: LIST
90361: LIST
90362: PUSH
90363: LD_INT 3
90365: PUSH
90366: LD_INT 54
90368: PUSH
90369: EMPTY
90370: LIST
90371: PUSH
90372: EMPTY
90373: LIST
90374: LIST
90375: PUSH
90376: EMPTY
90377: LIST
90378: LIST
90379: PPUSH
90380: CALL_OW 72
90384: ST_TO_ADDR
// if tmp then
90385: LD_VAR 0 6
90389: IFFALSE 90395
// exit ;
90391: POP
90392: POP
90393: GO 90535
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90395: LD_ADDR_VAR 0 6
90399: PUSH
90400: LD_EXP 36
90404: PUSH
90405: LD_VAR 0 3
90409: ARRAY
90410: PPUSH
90411: LD_INT 2
90413: PUSH
90414: LD_INT 30
90416: PUSH
90417: LD_INT 4
90419: PUSH
90420: EMPTY
90421: LIST
90422: LIST
90423: PUSH
90424: LD_INT 30
90426: PUSH
90427: LD_INT 5
90429: PUSH
90430: EMPTY
90431: LIST
90432: LIST
90433: PUSH
90434: EMPTY
90435: LIST
90436: LIST
90437: LIST
90438: PPUSH
90439: CALL_OW 72
90443: ST_TO_ADDR
// if not tmp then
90444: LD_VAR 0 6
90448: NOT
90449: IFFALSE 90455
// exit ;
90451: POP
90452: POP
90453: GO 90535
// for j in tmp do
90455: LD_ADDR_VAR 0 4
90459: PUSH
90460: LD_VAR 0 6
90464: PUSH
90465: FOR_IN
90466: IFFALSE 90525
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90468: LD_ADDR_VAR 0 7
90472: PUSH
90473: LD_VAR 0 4
90477: PPUSH
90478: CALL_OW 313
90482: PPUSH
90483: LD_INT 25
90485: PUSH
90486: LD_INT 1
90488: PUSH
90489: EMPTY
90490: LIST
90491: LIST
90492: PPUSH
90493: CALL_OW 72
90497: ST_TO_ADDR
// if units then
90498: LD_VAR 0 7
90502: IFFALSE 90523
// begin ComExitBuilding ( units [ 1 ] ) ;
90504: LD_VAR 0 7
90508: PUSH
90509: LD_INT 1
90511: ARRAY
90512: PPUSH
90513: CALL_OW 122
// exit ;
90517: POP
90518: POP
90519: POP
90520: POP
90521: GO 90535
// end ; end ;
90523: GO 90465
90525: POP
90526: POP
// end ; end ; exit ;
90527: POP
90528: POP
90529: GO 90535
// end ; end ;
90531: GO 89889
90533: POP
90534: POP
// end ;
90535: LD_VAR 0 2
90539: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90540: LD_INT 0
90542: PPUSH
90543: PPUSH
90544: PPUSH
90545: PPUSH
90546: PPUSH
90547: PPUSH
90548: PPUSH
// if not mc_bases or not skirmish then
90549: LD_EXP 36
90553: NOT
90554: PUSH
90555: LD_EXP 34
90559: NOT
90560: OR
90561: IFFALSE 90565
// exit ;
90563: GO 90796
// btype := GetBType ( building ) ;
90565: LD_ADDR_VAR 0 6
90569: PUSH
90570: LD_VAR 0 1
90574: PPUSH
90575: CALL_OW 266
90579: ST_TO_ADDR
// x := GetX ( building ) ;
90580: LD_ADDR_VAR 0 7
90584: PUSH
90585: LD_VAR 0 1
90589: PPUSH
90590: CALL_OW 250
90594: ST_TO_ADDR
// y := GetY ( building ) ;
90595: LD_ADDR_VAR 0 8
90599: PUSH
90600: LD_VAR 0 1
90604: PPUSH
90605: CALL_OW 251
90609: ST_TO_ADDR
// d := GetDir ( building ) ;
90610: LD_ADDR_VAR 0 9
90614: PUSH
90615: LD_VAR 0 1
90619: PPUSH
90620: CALL_OW 254
90624: ST_TO_ADDR
// for i = 1 to mc_bases do
90625: LD_ADDR_VAR 0 4
90629: PUSH
90630: DOUBLE
90631: LD_INT 1
90633: DEC
90634: ST_TO_ADDR
90635: LD_EXP 36
90639: PUSH
90640: FOR_TO
90641: IFFALSE 90794
// begin if not mc_build_list [ i ] then
90643: LD_EXP 41
90647: PUSH
90648: LD_VAR 0 4
90652: ARRAY
90653: NOT
90654: IFFALSE 90658
// continue ;
90656: GO 90640
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90658: LD_VAR 0 6
90662: PUSH
90663: LD_VAR 0 7
90667: PUSH
90668: LD_VAR 0 8
90672: PUSH
90673: LD_VAR 0 9
90677: PUSH
90678: EMPTY
90679: LIST
90680: LIST
90681: LIST
90682: LIST
90683: PPUSH
90684: LD_EXP 41
90688: PUSH
90689: LD_VAR 0 4
90693: ARRAY
90694: PUSH
90695: LD_INT 1
90697: ARRAY
90698: PPUSH
90699: CALL 32220 0 2
90703: IFFALSE 90792
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90705: LD_ADDR_EXP 41
90709: PUSH
90710: LD_EXP 41
90714: PPUSH
90715: LD_VAR 0 4
90719: PPUSH
90720: LD_EXP 41
90724: PUSH
90725: LD_VAR 0 4
90729: ARRAY
90730: PPUSH
90731: LD_INT 1
90733: PPUSH
90734: CALL_OW 3
90738: PPUSH
90739: CALL_OW 1
90743: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90744: LD_ADDR_EXP 43
90748: PUSH
90749: LD_EXP 43
90753: PPUSH
90754: LD_VAR 0 4
90758: PUSH
90759: LD_EXP 43
90763: PUSH
90764: LD_VAR 0 4
90768: ARRAY
90769: PUSH
90770: LD_INT 1
90772: PLUS
90773: PUSH
90774: EMPTY
90775: LIST
90776: LIST
90777: PPUSH
90778: LD_VAR 0 1
90782: PPUSH
90783: CALL 26051 0 3
90787: ST_TO_ADDR
// exit ;
90788: POP
90789: POP
90790: GO 90796
// end ; end ;
90792: GO 90640
90794: POP
90795: POP
// end ;
90796: LD_VAR 0 3
90800: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90801: LD_INT 0
90803: PPUSH
90804: PPUSH
90805: PPUSH
// if not mc_bases or not skirmish then
90806: LD_EXP 36
90810: NOT
90811: PUSH
90812: LD_EXP 34
90816: NOT
90817: OR
90818: IFFALSE 90822
// exit ;
90820: GO 91012
// for i = 1 to mc_bases do
90822: LD_ADDR_VAR 0 4
90826: PUSH
90827: DOUBLE
90828: LD_INT 1
90830: DEC
90831: ST_TO_ADDR
90832: LD_EXP 36
90836: PUSH
90837: FOR_TO
90838: IFFALSE 90925
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90840: LD_VAR 0 1
90844: PUSH
90845: LD_EXP 44
90849: PUSH
90850: LD_VAR 0 4
90854: ARRAY
90855: IN
90856: PUSH
90857: LD_VAR 0 1
90861: PUSH
90862: LD_EXP 45
90866: PUSH
90867: LD_VAR 0 4
90871: ARRAY
90872: IN
90873: NOT
90874: AND
90875: IFFALSE 90923
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90877: LD_ADDR_EXP 45
90881: PUSH
90882: LD_EXP 45
90886: PPUSH
90887: LD_VAR 0 4
90891: PUSH
90892: LD_EXP 45
90896: PUSH
90897: LD_VAR 0 4
90901: ARRAY
90902: PUSH
90903: LD_INT 1
90905: PLUS
90906: PUSH
90907: EMPTY
90908: LIST
90909: LIST
90910: PPUSH
90911: LD_VAR 0 1
90915: PPUSH
90916: CALL 26051 0 3
90920: ST_TO_ADDR
// break ;
90921: GO 90925
// end ; end ;
90923: GO 90837
90925: POP
90926: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90927: LD_VAR 0 1
90931: PPUSH
90932: CALL_OW 257
90936: PUSH
90937: LD_EXP 62
90941: IN
90942: PUSH
90943: LD_VAR 0 1
90947: PPUSH
90948: CALL_OW 266
90952: PUSH
90953: LD_INT 5
90955: EQUAL
90956: AND
90957: PUSH
90958: LD_VAR 0 2
90962: PPUSH
90963: CALL_OW 110
90967: PUSH
90968: LD_INT 18
90970: NONEQUAL
90971: AND
90972: IFFALSE 91012
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90974: LD_VAR 0 2
90978: PPUSH
90979: CALL_OW 257
90983: PUSH
90984: LD_INT 5
90986: PUSH
90987: LD_INT 8
90989: PUSH
90990: LD_INT 9
90992: PUSH
90993: EMPTY
90994: LIST
90995: LIST
90996: LIST
90997: IN
90998: IFFALSE 91012
// SetClass ( unit , 1 ) ;
91000: LD_VAR 0 2
91004: PPUSH
91005: LD_INT 1
91007: PPUSH
91008: CALL_OW 336
// end ;
91012: LD_VAR 0 3
91016: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91017: LD_INT 0
91019: PPUSH
91020: PPUSH
// if not mc_bases or not skirmish then
91021: LD_EXP 36
91025: NOT
91026: PUSH
91027: LD_EXP 34
91031: NOT
91032: OR
91033: IFFALSE 91037
// exit ;
91035: GO 91153
// if GetLives ( abandoned_vehicle ) > 250 then
91037: LD_VAR 0 2
91041: PPUSH
91042: CALL_OW 256
91046: PUSH
91047: LD_INT 250
91049: GREATER
91050: IFFALSE 91054
// exit ;
91052: GO 91153
// for i = 1 to mc_bases do
91054: LD_ADDR_VAR 0 6
91058: PUSH
91059: DOUBLE
91060: LD_INT 1
91062: DEC
91063: ST_TO_ADDR
91064: LD_EXP 36
91068: PUSH
91069: FOR_TO
91070: IFFALSE 91151
// begin if driver in mc_bases [ i ] then
91072: LD_VAR 0 1
91076: PUSH
91077: LD_EXP 36
91081: PUSH
91082: LD_VAR 0 6
91086: ARRAY
91087: IN
91088: IFFALSE 91149
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91090: LD_VAR 0 1
91094: PPUSH
91095: LD_EXP 36
91099: PUSH
91100: LD_VAR 0 6
91104: ARRAY
91105: PPUSH
91106: LD_INT 2
91108: PUSH
91109: LD_INT 30
91111: PUSH
91112: LD_INT 0
91114: PUSH
91115: EMPTY
91116: LIST
91117: LIST
91118: PUSH
91119: LD_INT 30
91121: PUSH
91122: LD_INT 1
91124: PUSH
91125: EMPTY
91126: LIST
91127: LIST
91128: PUSH
91129: EMPTY
91130: LIST
91131: LIST
91132: LIST
91133: PPUSH
91134: CALL_OW 72
91138: PUSH
91139: LD_INT 1
91141: ARRAY
91142: PPUSH
91143: CALL_OW 112
// break ;
91147: GO 91151
// end ; end ;
91149: GO 91069
91151: POP
91152: POP
// end ;
91153: LD_VAR 0 5
91157: RET
