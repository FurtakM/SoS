// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 595 0 0
// SetDiplomacy ;
  35: CALL 807 0 0
// PrepareGame ;
  39: CALL 889 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 426
  88: PUSH
  89: LD_INT 1
  91: MINUS
  92: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
  93: LD_ADDR_EXP 24
  97: PUSH
  98: LD_INT 2
 100: PPUSH
 101: CALL_OW 426
 105: PUSH
 106: LD_INT 1
 108: MINUS
 109: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: LD_INT 3
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 4
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not commander then
 136: LD_EXP 25
 140: NOT
 141: IFFALSE 151
// commander := 3 ;
 143: LD_ADDR_EXP 25
 147: PUSH
 148: LD_INT 3
 150: ST_TO_ADDR
// if not debug then
 151: LD_EXP 1
 155: NOT
 156: IFFALSE 160
// exit ;
 158: GO 217
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 160: LD_ADDR_OWVAR 47
 164: PUSH
 165: LD_STRING Difficulty: 
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING sibBomb: 
 176: PUSH
 177: LD_EXP 23
 181: STR
 182: PUSH
 183: LD_STRING reinforceAllowed: 
 185: PUSH
 186: LD_EXP 24
 190: STR
 191: PUSH
 192: LD_STRING cratesSpawn: 
 194: PUSH
 195: LD_EXP 26
 199: STR
 200: PUSH
 201: LD_STRING commander: 
 203: PUSH
 204: LD_EXP 25
 208: STR
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: LIST
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 222: LD_EXP 3
 226: PUSH
 227: LD_EXP 2
 231: PUSH
 232: LD_INT 1
 234: EQUAL
 235: AND
 236: PUSH
 237: LD_EXP 4
 241: NOT
 242: AND
 243: IFFALSE 266
 245: GO 247
 247: DISABLE
// begin enable ;
 248: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 249: LD_ADDR_OWVAR 47
 253: PUSH
 254: LD_STRING #SkrTime
 256: PUSH
 257: LD_OWVAR 1
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// end ;
 266: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 267: LD_EXP 19
 271: PUSH
 272: LD_EXP 3
 276: AND
 277: PUSH
 278: LD_EXP 2
 282: PUSH
 283: LD_INT 1
 285: EQUAL
 286: AND
 287: IFFALSE 348
 289: GO 291
 291: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 292: LD_EXP 19
 296: PUSH
 297: LD_INT 1
 299: ARRAY
 300: PUSH
 301: LD_INT 1
 303: ARRAY
 304: PPUSH
 305: LD_EXP 19
 309: PUSH
 310: LD_INT 1
 312: ARRAY
 313: PUSH
 314: LD_INT 2
 316: ARRAY
 317: PPUSH
 318: LD_EXP 19
 322: PUSH
 323: LD_INT 1
 325: ARRAY
 326: PUSH
 327: LD_INT 3
 329: ARRAY
 330: PPUSH
 331: LD_EXP 19
 335: PUSH
 336: LD_INT 1
 338: ARRAY
 339: PUSH
 340: LD_INT 4
 342: ARRAY
 343: PPUSH
 344: CALL 54539 0 4
 348: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 349: LD_EXP 19
 353: PUSH
 354: LD_EXP 3
 358: AND
 359: PUSH
 360: LD_EXP 2
 364: PUSH
 365: LD_INT 1
 367: EQUAL
 368: AND
 369: IFFALSE 430
 371: GO 373
 373: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 374: LD_EXP 19
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 1
 385: ARRAY
 386: PPUSH
 387: LD_EXP 19
 391: PUSH
 392: LD_INT 2
 394: ARRAY
 395: PUSH
 396: LD_INT 2
 398: ARRAY
 399: PPUSH
 400: LD_EXP 19
 404: PUSH
 405: LD_INT 2
 407: ARRAY
 408: PUSH
 409: LD_INT 3
 411: ARRAY
 412: PPUSH
 413: LD_EXP 19
 417: PUSH
 418: LD_INT 2
 420: ARRAY
 421: PUSH
 422: LD_INT 4
 424: ARRAY
 425: PPUSH
 426: CALL 54539 0 4
 430: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 431: LD_EXP 19
 435: PUSH
 436: LD_EXP 3
 440: AND
 441: PUSH
 442: LD_EXP 2
 446: PUSH
 447: LD_INT 1
 449: EQUAL
 450: AND
 451: IFFALSE 512
 453: GO 455
 455: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 3
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: PPUSH
 469: LD_EXP 19
 473: PUSH
 474: LD_INT 3
 476: ARRAY
 477: PUSH
 478: LD_INT 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 19
 486: PUSH
 487: LD_INT 3
 489: ARRAY
 490: PUSH
 491: LD_INT 3
 493: ARRAY
 494: PPUSH
 495: LD_EXP 19
 499: PUSH
 500: LD_INT 3
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: ARRAY
 507: PPUSH
 508: CALL 54539 0 4
 512: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 513: LD_EXP 19
 517: PUSH
 518: LD_EXP 3
 522: AND
 523: PUSH
 524: LD_EXP 2
 528: PUSH
 529: LD_INT 1
 531: EQUAL
 532: AND
 533: IFFALSE 594
 535: GO 537
 537: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 538: LD_EXP 19
 542: PUSH
 543: LD_INT 4
 545: ARRAY
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PPUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_INT 4
 558: ARRAY
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PPUSH
 564: LD_EXP 19
 568: PUSH
 569: LD_INT 4
 571: ARRAY
 572: PUSH
 573: LD_INT 3
 575: ARRAY
 576: PPUSH
 577: LD_EXP 19
 581: PUSH
 582: LD_INT 4
 584: ARRAY
 585: PUSH
 586: LD_INT 4
 588: ARRAY
 589: PPUSH
 590: CALL 54539 0 4
 594: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if GameType = 1 then
 602: LD_EXP 2
 606: PUSH
 607: LD_INT 1
 609: EQUAL
 610: IFFALSE 679
// begin ban_techs := [ ] ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: EMPTY
 618: ST_TO_ADDR
// if sibBombAllowed < 2 then
 619: LD_EXP 23
 623: PUSH
 624: LD_INT 2
 626: LESS
 627: IFFALSE 640
// ban_techs := [ tech_sibFiss ] ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: LD_INT 25
 636: PUSH
 637: EMPTY
 638: LIST
 639: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 48
 653: PUSH
 654: LD_INT 49
 656: PUSH
 657: LD_INT 50
 659: PUSH
 660: LD_INT 39
 662: PUSH
 663: LD_INT 69
 665: PUSH
 666: LD_INT 40
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// end ; for i = 1 to 8 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 8
 691: PUSH
 692: FOR_TO
 693: IFFALSE 777
// begin if res_techs then
 695: LD_VAR 0 5
 699: IFFALSE 735
// for j in res_techs do
 701: LD_ADDR_VAR 0 3
 705: PUSH
 706: LD_VAR 0 5
 710: PUSH
 711: FOR_IN
 712: IFFALSE 733
// SetTech ( j , i , state_researched ) ;
 714: LD_VAR 0 3
 718: PPUSH
 719: LD_VAR 0 2
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 322
 731: GO 711
 733: POP
 734: POP
// if ban_techs then
 735: LD_VAR 0 4
 739: IFFALSE 775
// for j in ban_techs do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 4
 750: PUSH
 751: FOR_IN
 752: IFFALSE 773
// SetTech ( j , i , state_disabled ) ;
 754: LD_VAR 0 3
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 322
 771: GO 751
 773: POP
 774: POP
// end ;
 775: GO 692
 777: POP
 778: POP
// if sibBombAllowed = 1 then
 779: LD_EXP 23
 783: PUSH
 784: LD_INT 1
 786: EQUAL
 787: IFFALSE 802
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 789: LD_INT 25
 791: PPUSH
 792: LD_INT 3
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 322
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SetDiplomacy ; begin
 807: LD_INT 0
 809: PPUSH
// if GameType = 1 then
 810: LD_EXP 2
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 884
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 820: LD_INT 1
 822: PPUSH
 823: LD_INT 4
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 836: LD_INT 3
 838: PPUSH
 839: LD_INT 6
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 8
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 868: LD_INT 6
 870: PPUSH
 871: LD_INT 8
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// end ; end ;
 884: LD_VAR 0 1
 888: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 889: LD_INT 0
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// if GameType = 1 then
 895: LD_EXP 2
 899: PUSH
 900: LD_INT 1
 902: EQUAL
 903: IFFALSE 1395
// begin game := false ;
 905: LD_ADDR_EXP 3
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// your_side := 1 ;
 913: LD_ADDR_OWVAR 2
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// mc_amer := 1 ;
 921: LD_ADDR_EXP 5
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// mc_leg := 2 ;
 929: LD_ADDR_EXP 6
 933: PUSH
 934: LD_INT 2
 936: ST_TO_ADDR
// mc_rus_1 := 3 ;
 937: LD_ADDR_EXP 7
 941: PUSH
 942: LD_INT 3
 944: ST_TO_ADDR
// mc_rus_2 := 4 ;
 945: LD_ADDR_EXP 8
 949: PUSH
 950: LD_INT 4
 952: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 953: LD_ADDR_EXP 19
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 200
 969: PUSH
 970: LD_INT 250
 972: PUSH
 973: LD_INT 300
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_EXP 26
 985: ARRAY
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 13
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 500
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 17
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: LD_INT 50
1019: PUSH
1020: LD_INT 300
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 18
1031: PUSH
1032: LD_INT 4
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_EXP 26
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 300
1057: PUSH
1058: LD_INT 450
1060: PUSH
1061: LD_INT 500
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_INT 190
1094: PUSH
1095: LD_INT 193
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 182
1108: PUSH
1109: LD_INT 117
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 43
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 114
1136: PUSH
1137: LD_INT 152
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 85
1150: PUSH
1151: LD_INT 38
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// for i in sources do
1169: LD_ADDR_VAR 0 2
1173: PUSH
1174: LD_VAR 0 4
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1215
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 62
1213: GO 1179
1215: POP
1216: POP
// disableGlobalTimer := false ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1225: LD_ADDR_EXP 15
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 5
1235: PUSH
1236: LD_INT 6
1238: PUSH
1239: LD_INT 7
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// ruOutpost := [ ] ;
1257: LD_ADDR_EXP 14
1261: PUSH
1262: EMPTY
1263: ST_TO_ADDR
// staticMines := [ ] ;
1264: LD_ADDR_EXP 16
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// baseCaptured := false ;
1271: LD_ADDR_EXP 17
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// legDestCounter := 0 ;
1279: LD_ADDR_EXP 18
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legOfferAccepted := false ;
1287: LD_ADDR_EXP 20
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legChangeSide := false ;
1295: LD_ADDR_EXP 21
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// allyDestCounter := 0 ;
1303: LD_ADDR_EXP 22
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// outpostEscape := false ;
1311: LD_ADDR_EXP 27
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// dialogueMineDetected := false ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// PrepareAmericans ;
1327: CALL 7243 0 0
// PrepareLegion ;
1331: CALL 5508 0 0
// PrepareRussians ;
1335: CALL 2474 0 0
// playerForces := PreparePlayer ;
1339: LD_ADDR_EXP 10
1343: PUSH
1344: CALL 8486 0 0
1348: ST_TO_ADDR
// AnimateTrees ( true ) ;
1349: LD_INT 1
1351: PPUSH
1352: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 8
1376: PPUSH
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: CALL 51963 0 9
// MC_Start ;
1387: CALL 57949 0 0
// Action ;
1391: CALL 10682 0 0
// end ; end ;
1395: LD_VAR 0 1
1399: RET
// export function CustomInitMacro ; begin
1400: LD_INT 0
1402: PPUSH
// if GameType <> 1 then
1403: LD_EXP 2
1407: PUSH
1408: LD_INT 1
1410: NONEQUAL
1411: IFFALSE 1415
// exit ;
1413: GO 2469
// MC_SetScanArea ( mc_amer , amerBase ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: CALL 80789 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL 80733 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1439: LD_EXP 5
1443: PPUSH
1444: LD_INT 11
1446: PUSH
1447: LD_INT 6
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL 80621 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1470: LD_EXP 5
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 80303 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1482: LD_EXP 5
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL 80034 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1494: LD_EXP 5
1498: PPUSH
1499: LD_INT 4
1501: PPUSH
1502: CALL 79653 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_INT 3
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 9
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 6
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL 79468 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_INT 33
1600: PUSH
1601: LD_INT 114
1603: PUSH
1604: LD_INT 16
1606: PUSH
1607: LD_INT 0
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: LD_INT 110
1621: PUSH
1622: LD_INT 12
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL 79360 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1642: LD_EXP 5
1646: PPUSH
1647: LD_INT 10
1649: PUSH
1650: LD_INT 15
1652: PUSH
1653: LD_INT 12
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 80210 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: CALL 80789 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1681: LD_EXP 6
1685: PPUSH
1686: LD_INT 7
1688: PPUSH
1689: CALL 80733 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1693: LD_EXP 6
1697: PPUSH
1698: LD_INT 30
1700: PUSH
1701: LD_INT 27
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL 80621 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 17
1727: PPUSH
1728: CALL 80303 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1732: LD_EXP 6
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: CALL 80034 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1744: LD_EXP 6
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: CALL 79653 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: LD_INT 9
1766: PPUSH
1767: CALL 79150 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 157
1781: PUSH
1782: LD_INT 144
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 32
1796: PUSH
1797: LD_INT 151
1799: PUSH
1800: LD_INT 142
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 161
1817: PUSH
1818: LD_INT 144
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 32
1832: PUSH
1833: LD_INT 140
1835: PUSH
1836: LD_INT 133
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL 79360 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1858: LD_EXP 6
1862: PPUSH
1863: LD_INT 13
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 31
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 13
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 13
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 2
1925: PUSH
1926: LD_INT 27
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 13
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 27
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 13
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 28
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 13
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 13
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL 79468 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2021: LD_INT 165
2023: PPUSH
2024: LD_INT 156
2026: PPUSH
2027: LD_INT 8
2029: PPUSH
2030: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 15
2041: PPUSH
2042: CALL 80789 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 16
2053: PPUSH
2054: CALL 80733 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 43
2065: PUSH
2066: LD_INT 47
2068: PUSH
2069: LD_INT 45
2071: PUSH
2072: LD_INT 49
2074: PUSH
2075: LD_INT 46
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL 80621 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2089: LD_EXP 7
2093: PPUSH
2094: LD_INT 13
2096: PPUSH
2097: CALL 80303 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2101: LD_EXP 7
2105: PPUSH
2106: LD_INT 15
2108: PPUSH
2109: CALL 80034 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2113: LD_EXP 7
2117: PPUSH
2118: LD_INT 5
2120: PPUSH
2121: CALL 79653 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2125: LD_EXP 7
2129: PPUSH
2130: LD_INT 23
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: LD_INT 46
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 23
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 46
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 23
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: LD_INT 45
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 23
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 47
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 23
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 3
2210: PUSH
2211: LD_INT 46
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 3
2228: PUSH
2229: LD_INT 51
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: LD_INT 3
2246: PUSH
2247: LD_INT 52
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL 79468 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2269: LD_EXP 8
2273: PPUSH
2274: LD_INT 11
2276: PPUSH
2277: CALL 80789 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2281: LD_EXP 8
2285: PPUSH
2286: LD_INT 12
2288: PPUSH
2289: CALL 80733 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2293: LD_EXP 8
2297: PPUSH
2298: LD_INT 43
2300: PUSH
2301: LD_INT 47
2303: PUSH
2304: LD_INT 45
2306: PUSH
2307: LD_INT 49
2309: PUSH
2310: LD_INT 46
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL 80621 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2324: LD_EXP 8
2328: PPUSH
2329: LD_INT 13
2331: PPUSH
2332: CALL 80303 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2336: LD_EXP 8
2340: PPUSH
2341: LD_INT 11
2343: PPUSH
2344: CALL 80034 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2348: LD_EXP 8
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: CALL 79653 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2360: LD_EXP 8
2364: PPUSH
2365: LD_INT 115
2367: PUSH
2368: LD_INT 201
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: PPUSH
2378: CALL 80359 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2382: LD_EXP 8
2386: PPUSH
2387: LD_INT 24
2389: PUSH
2390: LD_INT 3
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 46
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: PUSH
2405: LD_INT 24
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 46
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 24
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 46
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 24
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 46
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: PPUSH
2465: CALL 79468 0 2
// end ;
2469: LD_VAR 0 1
2473: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2484: LD_INT 0
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_INT 14
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL 51963 0 9
// side := 3 ;
2515: LD_ADDR_VAR 0 5
2519: PUSH
2520: LD_INT 3
2522: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2523: LD_INT 38
2525: PPUSH
2526: LD_VAR 0 5
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2538: LD_INT 39
2540: PPUSH
2541: LD_VAR 0 5
2545: PPUSH
2546: LD_INT 2
2548: PPUSH
2549: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2553: LD_INT 34
2555: PPUSH
2556: LD_VAR 0 5
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2568: LD_ADDR_VAR 0 4
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: LD_INT 208
2578: PUSH
2579: LD_INT 163
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 0
2587: PUSH
2588: LD_INT 0
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 3
2601: PUSH
2602: LD_INT 194
2604: PUSH
2605: LD_INT 161
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 0
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 17
2627: PUSH
2628: LD_INT 190
2630: PUSH
2631: LD_INT 161
2633: PUSH
2634: LD_INT 1
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 5
2653: PUSH
2654: LD_INT 200
2656: PUSH
2657: LD_INT 145
2659: PUSH
2660: LD_INT 3
2662: PUSH
2663: LD_INT 0
2665: PUSH
2666: LD_INT 0
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: LD_INT 192
2682: PUSH
2683: LD_INT 144
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 216
2708: PUSH
2709: LD_INT 172
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: LD_INT 0
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 26
2731: PUSH
2732: LD_INT 218
2734: PUSH
2735: LD_INT 176
2737: PUSH
2738: LD_INT 3
2740: PUSH
2741: LD_INT 0
2743: PUSH
2744: LD_INT 0
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 29
2757: PUSH
2758: LD_INT 182
2760: PUSH
2761: LD_INT 149
2763: PUSH
2764: LD_INT 3
2766: PUSH
2767: LD_INT 0
2769: PUSH
2770: LD_INT 0
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 8
2783: PUSH
2784: LD_INT 201
2786: PUSH
2787: LD_INT 171
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 10
2795: PUSH
2796: LD_INT 11
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 32
2809: PUSH
2810: LD_INT 188
2812: PUSH
2813: LD_INT 167
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: LD_INT 0
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 32
2835: PUSH
2836: LD_INT 202
2838: PUSH
2839: LD_INT 179
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 32
2861: PUSH
2862: LD_INT 209
2864: PUSH
2865: LD_INT 182
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: LD_INT 0
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 32
2887: PUSH
2888: LD_INT 220
2890: PUSH
2891: LD_INT 183
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 32
2913: PUSH
2914: LD_INT 225
2916: PUSH
2917: LD_INT 181
2919: PUSH
2920: LD_INT 5
2922: PUSH
2923: LD_INT 0
2925: PUSH
2926: LD_INT 0
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 26
2939: PUSH
2940: LD_INT 220
2942: PUSH
2943: LD_INT 174
2945: PUSH
2946: LD_INT 5
2948: PUSH
2949: LD_INT 0
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: LD_INT 84
2968: PUSH
2969: LD_INT 128
2971: PUSH
2972: LD_INT 4
2974: PUSH
2975: LD_INT 0
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: LD_INT 68
2994: PUSH
2995: LD_INT 121
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: LD_INT 0
3003: PUSH
3004: LD_INT 0
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 19
3017: PUSH
3018: LD_INT 72
3020: PUSH
3021: LD_INT 125
3023: PUSH
3024: LD_INT 5
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 18
3043: PUSH
3044: LD_INT 68
3046: PUSH
3047: LD_INT 124
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: LD_INT 0
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 24
3069: PUSH
3070: LD_INT 64
3072: PUSH
3073: LD_INT 121
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: LD_INT 0
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 17
3095: PUSH
3096: LD_INT 65
3098: PUSH
3099: LD_INT 118
3101: PUSH
3102: LD_INT 2
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: LD_INT 0
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 21
3121: PUSH
3122: LD_INT 68
3124: PUSH
3125: LD_INT 117
3127: PUSH
3128: LD_INT 3
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: LD_INT 0
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 8
3147: PUSH
3148: LD_INT 68
3150: PUSH
3151: LD_INT 130
3153: PUSH
3154: LD_INT 1
3156: PUSH
3157: LD_INT 14
3159: PUSH
3160: LD_INT 10
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 8
3173: PUSH
3174: LD_INT 67
3176: PUSH
3177: LD_INT 110
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 11
3185: PUSH
3186: LD_INT 12
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 28
3199: PUSH
3200: LD_INT 85
3202: PUSH
3203: LD_INT 108
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 28
3225: PUSH
3226: LD_INT 85
3228: PUSH
3229: LD_INT 124
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 0
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 30
3251: PUSH
3252: LD_INT 97
3254: PUSH
3255: LD_INT 119
3257: PUSH
3258: LD_INT 2
3260: PUSH
3261: LD_INT 0
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 5
3277: PUSH
3278: LD_INT 111
3280: PUSH
3281: LD_INT 138
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: LD_INT 0
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 33
3303: PUSH
3304: LD_INT 104
3306: PUSH
3307: LD_INT 130
3309: PUSH
3310: LD_INT 3
3312: PUSH
3313: LD_INT 0
3315: PUSH
3316: LD_INT 0
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 33
3329: PUSH
3330: LD_INT 110
3332: PUSH
3333: LD_INT 142
3335: PUSH
3336: LD_INT 5
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 33
3355: PUSH
3356: LD_INT 91
3358: PUSH
3359: LD_INT 131
3361: PUSH
3362: LD_INT 5
3364: PUSH
3365: LD_INT 0
3367: PUSH
3368: LD_INT 0
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 33
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 157
3387: PUSH
3388: LD_INT 5
3390: PUSH
3391: LD_INT 0
3393: PUSH
3394: LD_INT 0
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 33
3407: PUSH
3408: LD_INT 104
3410: PUSH
3411: LD_INT 160
3413: PUSH
3414: LD_INT 5
3416: PUSH
3417: LD_INT 0
3419: PUSH
3420: LD_INT 0
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 33
3433: PUSH
3434: LD_INT 101
3436: PUSH
3437: LD_INT 162
3439: PUSH
3440: LD_INT 5
3442: PUSH
3443: LD_INT 0
3445: PUSH
3446: LD_INT 0
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 32
3459: PUSH
3460: LD_INT 87
3462: PUSH
3463: LD_INT 157
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 32
3485: PUSH
3486: LD_INT 105
3488: PUSH
3489: LD_INT 158
3491: PUSH
3492: LD_INT 5
3494: PUSH
3495: LD_INT 0
3497: PUSH
3498: LD_INT 0
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 33
3511: PUSH
3512: LD_INT 91
3514: PUSH
3515: LD_INT 118
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: LD_INT 0
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 33
3537: PUSH
3538: LD_INT 89
3540: PUSH
3541: LD_INT 107
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 0
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 5
3563: PUSH
3564: LD_INT 86
3566: PUSH
3567: LD_INT 96
3569: PUSH
3570: LD_INT 3
3572: PUSH
3573: LD_INT 0
3575: PUSH
3576: LD_INT 0
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 33
3589: PUSH
3590: LD_INT 91
3592: PUSH
3593: LD_INT 102
3595: PUSH
3596: LD_INT 4
3598: PUSH
3599: LD_INT 0
3601: PUSH
3602: LD_INT 0
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 32
3615: PUSH
3616: LD_INT 80
3618: PUSH
3619: LD_INT 95
3621: PUSH
3622: LD_INT 3
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 0
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 28
3641: PUSH
3642: LD_INT 77
3644: PUSH
3645: LD_INT 105
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: LD_INT 0
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 28
3667: PUSH
3668: LD_INT 85
3670: PUSH
3671: LD_INT 113
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 0
3679: PUSH
3680: LD_INT 0
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 28
3693: PUSH
3694: LD_INT 55
3696: PUSH
3697: LD_INT 97
3699: PUSH
3700: LD_INT 3
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 28
3719: PUSH
3720: LD_INT 88
3722: PUSH
3723: LD_INT 128
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 0
3731: PUSH
3732: LD_INT 0
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 69
3748: PUSH
3749: LD_INT 101
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 0
3757: PUSH
3758: LD_INT 0
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 34
3774: PUSH
3775: LD_INT 23
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 0
3783: PUSH
3784: LD_INT 0
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 8
3797: PUSH
3798: LD_INT 25
3800: PUSH
3801: LD_INT 4
3803: PUSH
3804: LD_INT 3
3806: PUSH
3807: LD_INT 11
3809: PUSH
3810: LD_INT 10
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 8
3823: PUSH
3824: LD_INT 15
3826: PUSH
3827: LD_INT 4
3829: PUSH
3830: LD_INT 2
3832: PUSH
3833: LD_INT 14
3835: PUSH
3836: LD_INT 12
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 29
3849: PUSH
3850: LD_INT 55
3852: PUSH
3853: LD_INT 35
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: LD_INT 0
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 29
3875: PUSH
3876: LD_INT 24
3878: PUSH
3879: LD_INT 44
3881: PUSH
3882: LD_INT 2
3884: PUSH
3885: LD_INT 0
3887: PUSH
3888: LD_INT 0
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 34
3901: PUSH
3902: LD_INT 34
3904: PUSH
3905: LD_INT 32
3907: PUSH
3908: LD_INT 4
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: LD_INT 0
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 14
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: LD_INT 0
3939: PUSH
3940: LD_INT 0
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 24
3953: PUSH
3954: LD_INT 10
3956: PUSH
3957: LD_INT 16
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 0
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 21
3979: PUSH
3980: LD_INT 11
3982: PUSH
3983: LD_INT 13
3985: PUSH
3986: LD_INT 2
3988: PUSH
3989: LD_INT 0
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 18
4005: PUSH
4006: LD_INT 14
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: LD_INT 0
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 16
4031: PUSH
4032: LD_INT 14
4034: PUSH
4035: LD_INT 19
4037: PUSH
4038: LD_INT 0
4040: PUSH
4041: LD_INT 0
4043: PUSH
4044: LD_INT 0
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 17
4057: PUSH
4058: LD_INT 18
4060: PUSH
4061: LD_INT 20
4063: PUSH
4064: LD_INT 5
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 28
4083: PUSH
4084: LD_INT 10
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: LD_INT 1
4092: PUSH
4093: LD_INT 0
4095: PUSH
4096: LD_INT 0
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 28
4109: PUSH
4110: LD_INT 8
4112: PUSH
4113: LD_INT 8
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 26
4135: PUSH
4136: LD_INT 19
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: LD_INT 0
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 26
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 5
4187: PUSH
4188: LD_INT 59
4190: PUSH
4191: LD_INT 20
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 32
4213: PUSH
4214: LD_INT 60
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 0
4225: PUSH
4226: LD_INT 0
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: LD_INT 32
4239: PUSH
4240: LD_INT 61
4242: PUSH
4243: LD_INT 45
4245: PUSH
4246: LD_INT 5
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: LD_INT 0
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 32
4265: PUSH
4266: LD_INT 52
4268: PUSH
4269: LD_INT 51
4271: PUSH
4272: LD_INT 5
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 0
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 33
4291: PUSH
4292: LD_INT 56
4294: PUSH
4295: LD_INT 51
4297: PUSH
4298: LD_INT 5
4300: PUSH
4301: LD_INT 0
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: PUSH
4315: LD_INT 33
4317: PUSH
4318: LD_INT 62
4320: PUSH
4321: LD_INT 49
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 0
4329: PUSH
4330: LD_INT 0
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 33
4343: PUSH
4344: LD_INT 41
4346: PUSH
4347: LD_INT 47
4349: PUSH
4350: LD_INT 5
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 33
4369: PUSH
4370: LD_INT 33
4372: PUSH
4373: LD_INT 52
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 5
4395: PUSH
4396: LD_INT 31
4398: PUSH
4399: LD_INT 40
4401: PUSH
4402: LD_INT 0
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: LD_INT 0
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 33
4421: PUSH
4422: LD_INT 65
4424: PUSH
4425: LD_INT 37
4427: PUSH
4428: LD_INT 5
4430: PUSH
4431: LD_INT 0
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 33
4447: PUSH
4448: LD_INT 63
4450: PUSH
4451: LD_INT 29
4453: PUSH
4454: LD_INT 4
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 33
4473: PUSH
4474: LD_INT 54
4476: PUSH
4477: LD_INT 11
4479: PUSH
4480: LD_INT 4
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: LD_INT 0
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 33
4499: PUSH
4500: LD_INT 56
4502: PUSH
4503: LD_INT 15
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 33
4525: PUSH
4526: LD_INT 51
4528: PUSH
4529: LD_INT 6
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 39
4554: PUSH
4555: LD_INT 25
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 26
4577: PUSH
4578: LD_INT 37
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 0
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 32
4603: PUSH
4604: LD_INT 35
4606: PUSH
4607: LD_INT 17
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 33
4629: PUSH
4630: LD_INT 35
4632: PUSH
4633: LD_INT 28
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: LD_INT 0
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 33
4655: PUSH
4656: LD_INT 28
4658: PUSH
4659: LD_INT 46
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 0
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 33
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 6
4687: PUSH
4688: LD_INT 4
4690: PUSH
4691: LD_INT 0
4693: PUSH
4694: LD_INT 0
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 26
4707: PUSH
4708: LD_INT 54
4710: PUSH
4711: LD_INT 38
4713: PUSH
4714: LD_INT 4
4716: PUSH
4717: LD_INT 0
4719: PUSH
4720: LD_INT 0
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 33
4733: PUSH
4734: LD_INT 207
4736: PUSH
4737: LD_INT 167
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 30
4759: PUSH
4760: LD_INT 43
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 4
4768: PUSH
4769: LD_INT 0
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// for i in tmp do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: LD_VAR 0 4
4879: PUSH
4880: FOR_IN
4881: IFFALSE 5112
// begin uc_side := side ;
4883: LD_ADDR_OWVAR 20
4887: PUSH
4888: LD_VAR 0 5
4892: ST_TO_ADDR
// uc_nation := nation_russian ;
4893: LD_ADDR_OWVAR 21
4897: PUSH
4898: LD_INT 3
4900: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4901: LD_ADDR_OWVAR 42
4905: PUSH
4906: LD_VAR 0 2
4910: PUSH
4911: LD_INT 1
4913: ARRAY
4914: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4915: LD_ADDR_OWVAR 43
4919: PUSH
4920: LD_INT 5
4922: PPUSH
4923: LD_INT 6
4925: PPUSH
4926: CALL_OW 12
4930: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4931: LD_ADDR_OWVAR 44
4935: PUSH
4936: LD_VAR 0 2
4940: PUSH
4941: LD_INT 5
4943: ARRAY
4944: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4945: LD_ADDR_OWVAR 45
4949: PUSH
4950: LD_VAR 0 2
4954: PUSH
4955: LD_INT 6
4957: ARRAY
4958: ST_TO_ADDR
// sr := 0 ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_INT 0
4966: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PUSH
4976: LD_INT 29
4978: EQUAL
4979: IFFALSE 4991
// sr := mat_oil else
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: LD_INT 2
4988: ST_TO_ADDR
4989: GO 5013
// if i [ 1 ] = b_siberite_mine then
4991: LD_VAR 0 2
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PUSH
5000: LD_INT 30
5002: EQUAL
5003: IFFALSE 5013
// sr := mat_siberit ;
5005: LD_ADDR_VAR 0 6
5009: PUSH
5010: LD_INT 3
5012: ST_TO_ADDR
// if sr then
5013: LD_VAR 0 6
5017: IFFALSE 5073
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5019: LD_VAR 0 2
5023: PUSH
5024: LD_INT 2
5026: ARRAY
5027: PPUSH
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 3
5035: ARRAY
5036: PPUSH
5037: LD_VAR 0 6
5041: PPUSH
5042: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5046: LD_VAR 0 2
5050: PUSH
5051: LD_INT 2
5053: ARRAY
5054: PPUSH
5055: LD_VAR 0 2
5059: PUSH
5060: LD_INT 3
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 5
5068: PPUSH
5069: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 2
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 47
5109: ST_TO_ADDR
// end ;
5110: GO 4880
5112: POP
5113: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5114: LD_ADDR_VAR 0 7
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_VAR 0 5
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 30
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 69
5149: ST_TO_ADDR
// if not depot then
5150: LD_VAR 0 7
5154: NOT
5155: IFFALSE 5159
// exit ;
5157: GO 5503
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5159: LD_ADDR_VAR 0 8
5163: PUSH
5164: LD_INT 84
5166: PPUSH
5167: LD_INT 128
5169: PPUSH
5170: CALL_OW 428
5174: PPUSH
5175: LD_INT 15
5177: PPUSH
5178: LD_INT 0
5180: PPUSH
5181: LD_INT 6
5183: PUSH
5184: LD_INT 7
5186: PUSH
5187: LD_INT 8
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: LD_OWVAR 67
5199: ARRAY
5200: PPUSH
5201: LD_INT 3000
5203: PUSH
5204: LD_INT 300
5206: PUSH
5207: LD_INT 100
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: LD_INT 12
5217: PUSH
5218: LD_INT 6
5220: PUSH
5221: LD_INT 6
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL 27581 0 6
5237: ST_TO_ADDR
// if not base then
5238: LD_VAR 0 8
5242: NOT
5243: IFFALSE 5247
// exit ;
5245: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5247: LD_ADDR_EXP 45
5251: PUSH
5252: LD_EXP 45
5256: PPUSH
5257: LD_EXP 7
5261: PPUSH
5262: LD_VAR 0 8
5266: PPUSH
5267: CALL_OW 1
5271: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5272: LD_ADDR_VAR 0 8
5276: PUSH
5277: LD_INT 34
5279: PPUSH
5280: LD_INT 23
5282: PPUSH
5283: CALL_OW 428
5287: PPUSH
5288: LD_INT 11
5290: PPUSH
5291: LD_INT 0
5293: PPUSH
5294: LD_INT 6
5296: PUSH
5297: LD_INT 7
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: LD_OWVAR 67
5312: ARRAY
5313: PPUSH
5314: LD_INT 20000
5316: PUSH
5317: LD_INT 3000
5319: PUSH
5320: LD_INT 1000
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 6
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL 27581 0 6
5350: ST_TO_ADDR
// if not base then
5351: LD_VAR 0 8
5355: NOT
5356: IFFALSE 5360
// exit ;
5358: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5360: LD_ADDR_EXP 45
5364: PUSH
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 8
5374: PPUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 1
5384: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5385: LD_ADDR_EXP 14
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 3
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 30
5402: PUSH
5403: LD_INT 0
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PPUSH
5414: CALL_OW 69
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 25
5425: PPUSH
5426: LD_INT 0
5428: PPUSH
5429: LD_INT 6
5431: PUSH
5432: LD_INT 7
5434: PUSH
5435: LD_INT 8
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_OWVAR 67
5447: ARRAY
5448: PPUSH
5449: LD_INT 500
5451: PUSH
5452: LD_INT 100
5454: PUSH
5455: LD_INT 10
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: PPUSH
5463: LD_INT 6
5465: PUSH
5466: LD_INT 7
5468: PUSH
5469: LD_INT 8
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: LIST
5476: PUSH
5477: LD_OWVAR 67
5481: ARRAY
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 0
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 27581 0 6
5502: ST_TO_ADDR
// end ;
5503: LD_VAR 0 1
5507: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5521: LD_INT 0
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: LD_INT 6
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: LD_INT 0
5541: PPUSH
5542: LD_INT 8
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: CALL 51963 0 9
// side := 8 ;
5552: LD_ADDR_VAR 0 8
5556: PUSH
5557: LD_INT 8
5559: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5560: LD_ADDR_VAR 0 5
5564: PUSH
5565: LD_INT 20
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 517
5575: ST_TO_ADDR
// if Difficulty > 2 then
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: GREATER
5584: IFFALSE 5728
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5586: LD_ADDR_VAR 0 6
5590: PUSH
5591: LD_INT 27
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 517
5601: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_VAR 0 6
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5726
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: LD_VAR 0 6
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: CALL 24294 0 3
5673: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5674: LD_ADDR_VAR 0 5
5678: PUSH
5679: LD_VAR 0 5
5683: PPUSH
5684: LD_INT 2
5686: PUSH
5687: LD_VAR 0 5
5691: PUSH
5692: LD_INT 2
5694: ARRAY
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: LD_VAR 0 6
5708: PUSH
5709: LD_INT 2
5711: ARRAY
5712: PUSH
5713: LD_VAR 0 2
5717: ARRAY
5718: PPUSH
5719: CALL 24294 0 3
5723: ST_TO_ADDR
// end ;
5724: GO 5621
5726: POP
5727: POP
// end ; if tmp then
5728: LD_VAR 0 5
5732: IFFALSE 5860
// begin for i = 1 to tmp [ 1 ] do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 5
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PUSH
5753: FOR_TO
5754: IFFALSE 5858
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5756: LD_VAR 0 5
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 2
5769: ARRAY
5770: PPUSH
5771: LD_VAR 0 5
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: PUSH
5780: LD_VAR 0 2
5784: ARRAY
5785: PPUSH
5786: LD_VAR 0 8
5790: PPUSH
5791: LD_INT 0
5793: PPUSH
5794: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5798: LD_ADDR_EXP 16
5802: PUSH
5803: LD_EXP 16
5807: PPUSH
5808: LD_EXP 16
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_VAR 0 5
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: PUSH
5837: LD_INT 2
5839: ARRAY
5840: PUSH
5841: LD_VAR 0 2
5845: ARRAY
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 2
5855: ST_TO_ADDR
// end ;
5856: GO 5753
5858: POP
5859: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: LD_INT 165
5867: PUSH
5868: LD_INT 156
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 143
5877: PUSH
5878: LD_INT 145
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 152
5887: PUSH
5888: LD_INT 165
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 123
5897: PUSH
5898: LD_INT 153
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 161
5907: PUSH
5908: LD_INT 215
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 172
5917: PUSH
5918: LD_INT 100
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 148
5927: PUSH
5928: LD_INT 83
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 122
5937: PUSH
5938: LD_INT 68
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 105
5947: PUSH
5948: LD_INT 74
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 97
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: ST_TO_ADDR
// for i in cameras do
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_VAR 0 7
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6019
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5990: LD_VAR 0 2
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 2
6003: PUSH
6004: LD_INT 2
6006: ARRAY
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: CALL_OW 244
6017: GO 5987
6019: POP
6020: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 144
6031: PUSH
6032: LD_INT 110
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 151
6057: PUSH
6058: LD_INT 118
6060: PUSH
6061: LD_INT 0
6063: PUSH
6064: LD_INT 0
6066: PUSH
6067: LD_INT 0
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 8
6080: PUSH
6081: LD_INT 158
6083: PUSH
6084: LD_INT 110
6086: PUSH
6087: LD_INT 4
6089: PUSH
6090: LD_INT 10
6092: PUSH
6093: LD_INT 15
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 23
6106: PUSH
6107: LD_INT 154
6109: PUSH
6110: LD_INT 121
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 22
6132: PUSH
6133: LD_INT 155
6135: PUSH
6136: LD_INT 118
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 151
6161: PUSH
6162: LD_INT 122
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 18
6184: PUSH
6185: LD_INT 148
6187: PUSH
6188: LD_INT 118
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 17
6210: PUSH
6211: LD_INT 147
6213: PUSH
6214: LD_INT 114
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 29
6236: PUSH
6237: LD_INT 163
6239: PUSH
6240: LD_INT 120
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 137
6265: PUSH
6266: LD_INT 116
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 27
6288: PUSH
6289: LD_INT 133
6291: PUSH
6292: LD_INT 111
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 0
6300: PUSH
6301: LD_INT 0
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 27
6314: PUSH
6315: LD_INT 132
6317: PUSH
6318: LD_INT 106
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 26
6340: PUSH
6341: LD_INT 137
6343: PUSH
6344: LD_INT 111
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 8
6366: PUSH
6367: LD_INT 141
6369: PUSH
6370: LD_INT 117
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: LD_INT 13
6378: PUSH
6379: LD_INT 11
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 140
6395: PUSH
6396: LD_INT 128
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 5
6418: PUSH
6419: LD_INT 146
6421: PUSH
6422: LD_INT 96
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 150
6447: PUSH
6448: LD_INT 98
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: LD_INT 0
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 32
6470: PUSH
6471: LD_INT 142
6473: PUSH
6474: LD_INT 95
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 0
6482: PUSH
6483: LD_INT 0
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 32
6496: PUSH
6497: LD_INT 159
6499: PUSH
6500: LD_INT 104
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 0
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 32
6522: PUSH
6523: LD_INT 133
6525: PUSH
6526: LD_INT 95
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: LD_INT 131
6551: PUSH
6552: LD_INT 102
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 32
6574: PUSH
6575: LD_INT 164
6577: PUSH
6578: LD_INT 144
6580: PUSH
6581: LD_INT 0
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 32
6600: PUSH
6601: LD_INT 146
6603: PUSH
6604: LD_INT 139
6606: PUSH
6607: LD_INT 0
6609: PUSH
6610: LD_INT 0
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 26
6626: PUSH
6627: LD_INT 143
6629: PUSH
6630: LD_INT 122
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 0
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 26
6652: PUSH
6653: LD_INT 164
6655: PUSH
6656: LD_INT 116
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 0
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: ST_TO_ADDR
// for i in tmp do
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: LD_VAR 0 5
6712: PUSH
6713: FOR_IN
6714: IFFALSE 6945
// begin uc_side := side ;
6716: LD_ADDR_OWVAR 20
6720: PUSH
6721: LD_VAR 0 8
6725: ST_TO_ADDR
// uc_nation := nation_arabian ;
6726: LD_ADDR_OWVAR 21
6730: PUSH
6731: LD_INT 2
6733: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6734: LD_ADDR_OWVAR 42
6738: PUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6748: LD_ADDR_OWVAR 43
6752: PUSH
6753: LD_INT 5
6755: PPUSH
6756: LD_INT 6
6758: PPUSH
6759: CALL_OW 12
6763: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6764: LD_ADDR_OWVAR 44
6768: PUSH
6769: LD_VAR 0 2
6773: PUSH
6774: LD_INT 5
6776: ARRAY
6777: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6778: LD_ADDR_OWVAR 45
6782: PUSH
6783: LD_VAR 0 2
6787: PUSH
6788: LD_INT 6
6790: ARRAY
6791: ST_TO_ADDR
// sr := 0 ;
6792: LD_ADDR_VAR 0 9
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6800: LD_VAR 0 2
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PUSH
6809: LD_INT 29
6811: EQUAL
6812: IFFALSE 6824
// sr := mat_oil else
6814: LD_ADDR_VAR 0 9
6818: PUSH
6819: LD_INT 2
6821: ST_TO_ADDR
6822: GO 6846
// if i [ 1 ] = b_siberite_mine then
6824: LD_VAR 0 2
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 30
6835: EQUAL
6836: IFFALSE 6846
// sr := mat_siberit ;
6838: LD_ADDR_VAR 0 9
6842: PUSH
6843: LD_INT 3
6845: ST_TO_ADDR
// if sr then
6846: LD_VAR 0 9
6850: IFFALSE 6906
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 2
6859: ARRAY
6860: PPUSH
6861: LD_VAR 0 2
6865: PUSH
6866: LD_INT 3
6868: ARRAY
6869: PPUSH
6870: LD_VAR 0 9
6874: PPUSH
6875: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6879: LD_VAR 0 2
6883: PUSH
6884: LD_INT 2
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 2
6892: PUSH
6893: LD_INT 3
6895: ARRAY
6896: PPUSH
6897: LD_VAR 0 8
6901: PPUSH
6902: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: PPUSH
6938: CALL_OW 47
6942: ST_TO_ADDR
// end ;
6943: GO 6713
6945: POP
6946: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6947: LD_ADDR_VAR 0 10
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_VAR 0 8
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 69
6982: ST_TO_ADDR
// if not depot then
6983: LD_VAR 0 10
6987: NOT
6988: IFFALSE 6992
// exit ;
6990: GO 7238
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_VAR 0 10
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: PPUSH
7006: LD_INT 6
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: LD_INT 7
7014: PUSH
7015: LD_INT 8
7017: PUSH
7018: LD_INT 10
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_OWVAR 67
7030: ARRAY
7031: PPUSH
7032: LD_INT 3000
7034: PUSH
7035: LD_INT 300
7037: PUSH
7038: LD_INT 100
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PPUSH
7046: LD_INT 14
7048: PUSH
7049: LD_INT 6
7051: PUSH
7052: LD_INT 6
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL 27581 0 6
7068: ST_TO_ADDR
// if not base then
7069: LD_VAR 0 11
7073: NOT
7074: IFFALSE 7078
// exit ;
7076: GO 7238
// if Difficulty > 1 then
7078: LD_OWVAR 67
7082: PUSH
7083: LD_INT 1
7085: GREATER
7086: IFFALSE 7159
// begin InitHc ;
7088: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 5
7097: PPUSH
7098: LD_INT 5
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_OWVAR 67
7112: PUSH
7113: LD_INT 1
7115: MINUS
7116: ARRAY
7117: PPUSH
7118: CALL_OW 380
// for i = 1 to Difficulty do
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: DOUBLE
7128: LD_INT 1
7130: DEC
7131: ST_TO_ADDR
7132: LD_OWVAR 67
7136: PUSH
7137: FOR_TO
7138: IFFALSE 7157
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7140: CALL_OW 44
7144: PPUSH
7145: LD_INT 24
7147: PPUSH
7148: LD_INT 0
7150: PPUSH
7151: CALL_OW 49
7155: GO 7137
7157: POP
7158: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7159: LD_ADDR_EXP 45
7163: PUSH
7164: LD_EXP 45
7168: PPUSH
7169: LD_EXP 6
7173: PPUSH
7174: LD_VAR 0 11
7178: PPUSH
7179: CALL_OW 1
7183: ST_TO_ADDR
// hc_gallery := ru ;
7184: LD_ADDR_OWVAR 33
7188: PUSH
7189: LD_STRING ru
7191: ST_TO_ADDR
// hc_face_number := 44 ;
7192: LD_ADDR_OWVAR 34
7196: PUSH
7197: LD_INT 44
7199: ST_TO_ADDR
// hc_name := Robert Farmer ;
7200: LD_ADDR_OWVAR 26
7204: PUSH
7205: LD_STRING Robert Farmer
7207: ST_TO_ADDR
// hc_sex := sex_male ;
7208: LD_ADDR_OWVAR 27
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// hc_class := 1 ;
7216: LD_ADDR_OWVAR 28
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// Farmer := CreateHuman ;
7224: LD_ADDR_EXP 13
7228: PUSH
7229: CALL_OW 44
7233: ST_TO_ADDR
// InitHc ;
7234: CALL_OW 19
// end ;
7238: LD_VAR 0 1
7242: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7253: LD_INT 0
7255: PPUSH
7256: LD_INT 0
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: LD_INT 0
7264: PPUSH
7265: LD_INT 0
7267: PPUSH
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 0
7273: PPUSH
7274: LD_INT 10
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: CALL 51963 0 9
// side := 4 ;
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: LD_INT 4
7291: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: LD_INT 144
7302: PUSH
7303: LD_INT 18
7305: PUSH
7306: LD_INT 4
7308: PUSH
7309: LD_INT 0
7311: PUSH
7312: LD_INT 0
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: LD_INT 137
7328: PUSH
7329: LD_INT 8
7331: PUSH
7332: LD_INT 4
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: LD_INT 0
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_INT 141
7354: PUSH
7355: LD_INT 8
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: LD_INT 0
7363: PUSH
7364: LD_INT 0
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 137
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 18
7403: PUSH
7404: LD_INT 137
7406: PUSH
7407: LD_INT 12
7409: PUSH
7410: LD_INT 0
7412: PUSH
7413: LD_INT 0
7415: PUSH
7416: LD_INT 0
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 17
7429: PUSH
7430: LD_INT 133
7432: PUSH
7433: LD_INT 4
7435: PUSH
7436: LD_INT 2
7438: PUSH
7439: LD_INT 0
7441: PUSH
7442: LD_INT 0
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 16
7455: PUSH
7456: LD_INT 140
7458: PUSH
7459: LD_INT 11
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: LD_INT 0
7467: PUSH
7468: LD_INT 0
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 8
7481: PUSH
7482: LD_INT 149
7484: PUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 4
7490: PUSH
7491: LD_INT 10
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: LD_INT 142
7510: PUSH
7511: LD_INT 26
7513: PUSH
7514: LD_INT 1
7516: PUSH
7517: LD_INT 11
7519: PUSH
7520: LD_INT 12
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 27
7533: PUSH
7534: LD_INT 153
7536: PUSH
7537: LD_INT 32
7539: PUSH
7540: LD_INT 5
7542: PUSH
7543: LD_INT 0
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 27
7559: PUSH
7560: LD_INT 145
7562: PUSH
7563: LD_INT 32
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 27
7585: PUSH
7586: LD_INT 138
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: LD_INT 0
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 27
7611: PUSH
7612: LD_INT 144
7614: PUSH
7615: LD_INT 13
7617: PUSH
7618: LD_INT 0
7620: PUSH
7621: LD_INT 0
7623: PUSH
7624: LD_INT 0
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 26
7637: PUSH
7638: LD_INT 124
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: LD_INT 4
7646: PUSH
7647: LD_INT 0
7649: PUSH
7650: LD_INT 0
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 26
7663: PUSH
7664: LD_INT 121
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 0
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 26
7689: PUSH
7690: LD_INT 118
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 1
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 0
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 29
7715: PUSH
7716: LD_INT 159
7718: PUSH
7719: LD_INT 47
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 32
7741: PUSH
7742: LD_INT 146
7744: PUSH
7745: LD_INT 41
7747: PUSH
7748: LD_INT 0
7750: PUSH
7751: LD_INT 0
7753: PUSH
7754: LD_INT 0
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 33
7767: PUSH
7768: LD_INT 136
7770: PUSH
7771: LD_INT 37
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: LD_INT 0
7779: PUSH
7780: LD_INT 0
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 33
7793: PUSH
7794: LD_INT 132
7796: PUSH
7797: LD_INT 34
7799: PUSH
7800: LD_INT 0
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 36
7819: PUSH
7820: LD_INT 124
7822: PUSH
7823: LD_INT 7
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: LD_INT 0
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 5
7845: PUSH
7846: LD_INT 124
7848: PUSH
7849: LD_INT 19
7851: PUSH
7852: LD_INT 0
7854: PUSH
7855: LD_INT 0
7857: PUSH
7858: LD_INT 0
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 32
7871: PUSH
7872: LD_INT 127
7874: PUSH
7875: LD_INT 23
7877: PUSH
7878: LD_INT 0
7880: PUSH
7881: LD_INT 0
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: ST_TO_ADDR
// for i in tmp do
7920: LD_ADDR_VAR 0 2
7924: PUSH
7925: LD_VAR 0 4
7929: PUSH
7930: FOR_IN
7931: IFFALSE 8162
// begin uc_side := side ;
7933: LD_ADDR_OWVAR 20
7937: PUSH
7938: LD_VAR 0 5
7942: ST_TO_ADDR
// uc_nation := nation_american ;
7943: LD_ADDR_OWVAR 21
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7951: LD_ADDR_OWVAR 42
7955: PUSH
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7965: LD_ADDR_OWVAR 43
7969: PUSH
7970: LD_INT 5
7972: PPUSH
7973: LD_INT 6
7975: PPUSH
7976: CALL_OW 12
7980: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7981: LD_ADDR_OWVAR 44
7985: PUSH
7986: LD_VAR 0 2
7990: PUSH
7991: LD_INT 5
7993: ARRAY
7994: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7995: LD_ADDR_OWVAR 45
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_INT 6
8007: ARRAY
8008: ST_TO_ADDR
// sr := 0 ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8017: LD_VAR 0 2
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_INT 29
8028: EQUAL
8029: IFFALSE 8041
// sr := mat_oil else
8031: LD_ADDR_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ST_TO_ADDR
8039: GO 8063
// if i [ 1 ] = b_siberite_mine then
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PUSH
8050: LD_INT 30
8052: EQUAL
8053: IFFALSE 8063
// sr := mat_siberit ;
8055: LD_ADDR_VAR 0 6
8059: PUSH
8060: LD_INT 3
8062: ST_TO_ADDR
// if sr then
8063: LD_VAR 0 6
8067: IFFALSE 8123
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8069: LD_VAR 0 2
8073: PUSH
8074: LD_INT 2
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 3
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8096: LD_VAR 0 2
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PPUSH
8105: LD_VAR 0 2
8109: PUSH
8110: LD_INT 3
8112: ARRAY
8113: PPUSH
8114: LD_VAR 0 5
8118: PPUSH
8119: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8123: LD_ADDR_VAR 0 3
8127: PUSH
8128: LD_VAR 0 2
8132: PUSH
8133: LD_INT 2
8135: ARRAY
8136: PPUSH
8137: LD_VAR 0 2
8141: PUSH
8142: LD_INT 3
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 4
8153: ARRAY
8154: PPUSH
8155: CALL_OW 47
8159: ST_TO_ADDR
// end ;
8160: GO 7930
8162: POP
8163: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8164: LD_ADDR_VAR 0 8
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_VAR 0 5
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// if not depot then
8200: LD_VAR 0 8
8204: NOT
8205: IFFALSE 8209
// exit ;
8207: GO 8481
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 8
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: LD_INT 3
8225: PPUSH
8226: LD_STRING theta3
8228: PPUSH
8229: LD_INT 8
8231: PUSH
8232: LD_INT 7
8234: PUSH
8235: LD_INT 6
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: LD_OWVAR 67
8247: ARRAY
8248: PPUSH
8249: LD_INT 2500
8251: PUSH
8252: LD_INT 2000
8254: PUSH
8255: LD_INT 1750
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_OWVAR 67
8267: ARRAY
8268: PUSH
8269: LD_INT 300
8271: PUSH
8272: LD_INT 250
8274: PUSH
8275: LD_INT 200
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: PUSH
8283: LD_OWVAR 67
8287: ARRAY
8288: PUSH
8289: LD_INT 80
8291: PUSH
8292: LD_INT 60
8294: PUSH
8295: LD_INT 50
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: PPUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 6
8319: PUSH
8320: LD_INT 5
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL 27581 0 6
8336: ST_TO_ADDR
// if not base then
8337: LD_VAR 0 7
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8481
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8346: LD_ADDR_EXP 45
8350: PUSH
8351: LD_EXP 45
8355: PPUSH
8356: LD_EXP 5
8360: PPUSH
8361: LD_VAR 0 7
8365: PPUSH
8366: CALL_OW 1
8370: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8371: LD_INT 1
8373: PPUSH
8374: LD_INT 1
8376: PPUSH
8377: LD_INT 7
8379: PPUSH
8380: CALL_OW 380
// allyCommander := CreateHuman ;
8384: LD_ADDR_EXP 11
8388: PUSH
8389: CALL_OW 44
8393: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8394: LD_EXP 11
8398: PPUSH
8399: LD_INT 139
8401: PPUSH
8402: LD_INT 15
8404: PPUSH
8405: LD_INT 0
8407: PPUSH
8408: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8412: LD_EXP 11
8416: PPUSH
8417: LD_INT 137
8419: PPUSH
8420: LD_INT 15
8422: PPUSH
8423: CALL_OW 118
// hc_gallery := us ;
8427: LD_ADDR_OWVAR 33
8431: PUSH
8432: LD_STRING us
8434: ST_TO_ADDR
// hc_face_number := 7 ;
8435: LD_ADDR_OWVAR 34
8439: PUSH
8440: LD_INT 7
8442: ST_TO_ADDR
// hc_name := Arthur Powell ;
8443: LD_ADDR_OWVAR 26
8447: PUSH
8448: LD_STRING Arthur Powell
8450: ST_TO_ADDR
// hc_sex := sex_male ;
8451: LD_ADDR_OWVAR 27
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// hc_class := 1 ;
8459: LD_ADDR_OWVAR 28
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// Powell := CreateHuman ;
8467: LD_ADDR_EXP 12
8471: PUSH
8472: CALL_OW 44
8476: ST_TO_ADDR
// InitHc ;
8477: CALL_OW 19
// end ;
8481: LD_VAR 0 1
8485: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
8496: PPUSH
// side := 1 ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_INT 1
8504: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8505: LD_ADDR_VAR 0 1
8509: PUSH
8510: EMPTY
8511: PUSH
8512: EMPTY
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// uc_side := side ;
8518: LD_ADDR_OWVAR 20
8522: PUSH
8523: LD_VAR 0 3
8527: ST_TO_ADDR
// uc_nation := nation_american ;
8528: LD_ADDR_OWVAR 21
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// InitHc ;
8536: CALL_OW 19
// InitVc ;
8540: CALL_OW 20
// hc_importance := 0 ;
8544: LD_ADDR_OWVAR 32
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8552: LD_ADDR_VAR 0 7
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// if commander = 2 then
8571: LD_EXP 25
8575: PUSH
8576: LD_INT 2
8578: EQUAL
8579: IFFALSE 8600
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8581: LD_ADDR_VAR 0 7
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: ST_TO_ADDR
// if commander = 3 then
8600: LD_EXP 25
8604: PUSH
8605: LD_INT 3
8607: EQUAL
8608: IFFALSE 8629
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8610: LD_ADDR_VAR 0 7
8614: PUSH
8615: LD_INT 2
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 5
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8629: LD_ADDR_VAR 0 8
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: ST_TO_ADDR
// if commander = 2 then
8648: LD_EXP 25
8652: PUSH
8653: LD_INT 2
8655: EQUAL
8656: IFFALSE 8677
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8658: LD_ADDR_VAR 0 8
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: ST_TO_ADDR
// if commander = 3 then
8677: LD_EXP 25
8681: PUSH
8682: LD_INT 3
8684: EQUAL
8685: IFFALSE 8706
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8687: LD_ADDR_VAR 0 8
8691: PUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 1
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8706: LD_ADDR_VAR 0 9
8710: PUSH
8711: LD_INT 5
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: LD_INT 4
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: ST_TO_ADDR
// if commander = 2 then
8725: LD_EXP 25
8729: PUSH
8730: LD_INT 2
8732: EQUAL
8733: IFFALSE 8754
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 5
8745: PUSH
8746: LD_INT 6
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: ST_TO_ADDR
// if commander = 3 then
8754: LD_EXP 25
8758: PUSH
8759: LD_INT 3
8761: EQUAL
8762: IFFALSE 8783
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8764: LD_ADDR_VAR 0 9
8768: PUSH
8769: LD_INT 9
8771: PUSH
8772: LD_INT 10
8774: PUSH
8775: LD_INT 7
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: LD_INT 5
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_OWVAR 67
8806: ARRAY
8807: ST_TO_ADDR
// if commander = 2 then
8808: LD_EXP 25
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: IFFALSE 8832
// tanks := tanks + 3 ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 3
8830: PLUS
8831: ST_TO_ADDR
// for i = 1 to tanks do
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: DOUBLE
8838: LD_INT 1
8840: DEC
8841: ST_TO_ADDR
8842: LD_VAR 0 5
8846: PUSH
8847: FOR_TO
8848: IFFALSE 8958
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8850: LD_VAR 0 7
8854: PUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_INT 3
8862: MOD
8863: PUSH
8864: LD_INT 1
8866: PLUS
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 8
8873: PUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: CALL_OW 12
8884: ARRAY
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: LD_VAR 0 9
8893: PUSH
8894: LD_VAR 0 2
8898: PUSH
8899: LD_INT 3
8901: MOD
8902: PUSH
8903: LD_INT 1
8905: PLUS
8906: ARRAY
8907: PPUSH
8908: LD_INT 60
8910: PPUSH
8911: LD_INT 70
8913: PPUSH
8914: CALL_OW 12
8918: PPUSH
8919: CALL 24172 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: LD_INT 1
8935: PPUSH
8936: LD_VAR 0 1
8940: PUSH
8941: LD_INT 1
8943: ARRAY
8944: PUSH
8945: CALL_OW 45
8949: ADD
8950: PPUSH
8951: CALL_OW 1
8955: ST_TO_ADDR
// end ;
8956: GO 8847
8958: POP
8959: POP
// cl := 1 ;
8960: LD_ADDR_VAR 0 6
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// for i = 1 to 10 do
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 10
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9097
// begin if i mod 4 = 0 then
8984: LD_VAR 0 2
8988: PUSH
8989: LD_INT 4
8991: MOD
8992: PUSH
8993: LD_INT 0
8995: EQUAL
8996: IFFALSE 9012
// cl := cl + 1 ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 6
9007: PUSH
9008: LD_INT 1
9010: PLUS
9011: ST_TO_ADDR
// if cl = 2 then
9012: LD_VAR 0 6
9016: PUSH
9017: LD_INT 2
9019: EQUAL
9020: IFFALSE 9030
// cl := 3 ;
9022: LD_ADDR_VAR 0 6
9026: PUSH
9027: LD_INT 3
9029: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9030: LD_INT 0
9032: PPUSH
9033: LD_VAR 0 6
9037: PPUSH
9038: LD_INT 6
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 5
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: LD_OWVAR 67
9056: ARRAY
9057: PPUSH
9058: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_INT 2
9074: PPUSH
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 2
9082: ARRAY
9083: PUSH
9084: CALL_OW 44
9088: ADD
9089: PPUSH
9090: CALL_OW 1
9094: ST_TO_ADDR
// end ;
9095: GO 8981
9097: POP
9098: POP
// if commander = 1 then
9099: LD_EXP 25
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: IFFALSE 9175
// for i = 1 to 4 do
9109: LD_ADDR_VAR 0 2
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_INT 4
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9173
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 8
9133: PPUSH
9134: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9138: LD_ADDR_VAR 0 1
9142: PUSH
9143: LD_VAR 0 1
9147: PPUSH
9148: LD_INT 2
9150: PPUSH
9151: LD_VAR 0 1
9155: PUSH
9156: LD_INT 2
9158: ARRAY
9159: PUSH
9160: CALL_OW 44
9164: ADD
9165: PPUSH
9166: CALL_OW 1
9170: ST_TO_ADDR
// end ;
9171: GO 9122
9173: POP
9174: POP
// techs := [ ] ;
9175: LD_ADDR_VAR 0 4
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// if commander = 1 then
9182: LD_EXP 25
9186: PUSH
9187: LD_INT 1
9189: EQUAL
9190: IFFALSE 9215
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9192: LD_ADDR_VAR 0 4
9196: PUSH
9197: LD_INT 51
9199: PUSH
9200: LD_INT 52
9202: PUSH
9203: LD_INT 53
9205: PUSH
9206: LD_INT 12
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: ST_TO_ADDR
// if commander = 2 then
9215: LD_EXP 25
9219: PUSH
9220: LD_INT 2
9222: EQUAL
9223: IFFALSE 9260
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 48
9232: PUSH
9233: LD_INT 47
9235: PUSH
9236: LD_INT 46
9238: PUSH
9239: LD_INT 45
9241: PUSH
9242: LD_INT 35
9244: PUSH
9245: LD_INT 60
9247: PUSH
9248: LD_INT 6
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if commander = 3 then
9260: LD_EXP 25
9264: PUSH
9265: LD_INT 3
9267: EQUAL
9268: IFFALSE 9317
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9270: LD_ADDR_VAR 0 4
9274: PUSH
9275: LD_INT 27
9277: PUSH
9278: LD_INT 36
9280: PUSH
9281: LD_INT 32
9283: PUSH
9284: LD_INT 57
9286: PUSH
9287: LD_INT 58
9289: PUSH
9290: LD_INT 47
9292: PUSH
9293: LD_INT 46
9295: PUSH
9296: LD_INT 51
9298: PUSH
9299: LD_INT 69
9301: PUSH
9302: LD_INT 39
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: ST_TO_ADDR
// if techs then
9317: LD_VAR 0 4
9321: IFFALSE 9355
// for i in techs do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: LD_VAR 0 4
9332: PUSH
9333: FOR_IN
9334: IFFALSE 9353
// SetTech ( i , 1 , state_researched ) ;
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: LD_INT 2
9346: PPUSH
9347: CALL_OW 322
9351: GO 9333
9353: POP
9354: POP
// hc_gallery := skirmish ;
9355: LD_ADDR_OWVAR 33
9359: PUSH
9360: LD_STRING skirmish
9362: ST_TO_ADDR
// hc_face_number := commander ;
9363: LD_ADDR_OWVAR 34
9367: PUSH
9368: LD_EXP 25
9372: ST_TO_ADDR
// hc_importance := 100 ;
9373: LD_ADDR_OWVAR 32
9377: PUSH
9378: LD_INT 100
9380: ST_TO_ADDR
// case commander of 1 :
9381: LD_EXP 25
9385: PUSH
9386: LD_INT 1
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9394
9392: GO 9418
9394: POP
// begin hc_name := Jeff Ironside ;
9395: LD_ADDR_OWVAR 26
9399: PUSH
9400: LD_STRING Jeff Ironside
9402: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9403: LD_INT 1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 7
9411: PPUSH
9412: CALL_OW 380
// end ; 2 :
9416: GO 9483
9418: LD_INT 2
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9450
9426: POP
// begin hc_name := Paul Johnson ;
9427: LD_ADDR_OWVAR 26
9431: PUSH
9432: LD_STRING Paul Johnson
9434: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: LD_INT 7
9443: PPUSH
9444: CALL_OW 380
// end ; 3 :
9448: GO 9483
9450: LD_INT 3
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9482
9458: POP
// begin hc_name := Lisa Stuart ;
9459: LD_ADDR_OWVAR 26
9463: PUSH
9464: LD_STRING Lisa Stuart
9466: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9467: LD_INT 2
9469: PPUSH
9470: LD_INT 4
9472: PPUSH
9473: LD_INT 7
9475: PPUSH
9476: CALL_OW 380
// end ; end ;
9480: GO 9483
9482: POP
// playerCommander := CreateHuman ;
9483: LD_ADDR_EXP 9
9487: PUSH
9488: CALL_OW 44
9492: ST_TO_ADDR
// hc_importance := 0 ;
9493: LD_ADDR_OWVAR 32
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// hc_gallery :=  ;
9501: LD_ADDR_OWVAR 33
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: LD_VAR 0 1
9526: PUSH
9527: LD_INT 2
9529: ARRAY
9530: PUSH
9531: LD_EXP 9
9535: ADD
9536: PPUSH
9537: CALL_OW 1
9541: ST_TO_ADDR
// end ;
9542: LD_VAR 0 1
9546: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
// uc_side := 1 ;
9555: LD_ADDR_OWVAR 20
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// uc_nation := 1 ;
9563: LD_ADDR_OWVAR 21
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// InitHc ;
9571: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_OWVAR 67
9598: ARRAY
9599: ST_TO_ADDR
// for i = 1 to peopleAmount do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_VAR 0 3
9614: PUSH
9615: FOR_TO
9616: IFFALSE 9665
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9618: LD_INT 0
9620: PPUSH
9621: LD_INT 2
9623: PPUSH
9624: LD_INT 7
9626: PUSH
9627: LD_INT 6
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_OWVAR 67
9642: ARRAY
9643: PPUSH
9644: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9648: CALL_OW 44
9652: PPUSH
9653: LD_INT 19
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: CALL 54132 0 3
// end ;
9663: GO 9615
9665: POP
9666: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9667: LD_INT 2
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: LD_INT 3
9675: PPUSH
9676: LD_INT 13
9678: PPUSH
9679: LD_INT 58
9681: PPUSH
9682: CALL 24172 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9686: CALL_OW 45
9690: PPUSH
9691: LD_INT 19
9693: PPUSH
9694: LD_INT 0
9696: PPUSH
9697: CALL 54132 0 3
// if commander = 1 then
9701: LD_EXP 25
9705: PUSH
9706: LD_INT 1
9708: EQUAL
9709: IFFALSE 9720
// wait ( 6 6$00 ) else
9711: LD_INT 12600
9713: PPUSH
9714: CALL_OW 67
9718: GO 9727
// wait ( 8 8$00 ) ;
9720: LD_INT 16800
9722: PPUSH
9723: CALL_OW 67
// uc_side := 1 ;
9727: LD_ADDR_OWVAR 20
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// uc_nation := 1 ;
9735: LD_ADDR_OWVAR 21
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// InitVc ;
9743: CALL_OW 20
// InitHc ;
9747: CALL_OW 19
// for i = 1 to 5 do
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_INT 5
9763: PUSH
9764: FOR_TO
9765: IFFALSE 10009
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9767: LD_INT 4
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_VAR 0 2
9785: PUSH
9786: LD_INT 3
9788: MOD
9789: PUSH
9790: LD_INT 1
9792: PLUS
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: LD_INT 1
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_VAR 0 2
9816: PUSH
9817: LD_INT 3
9819: MOD
9820: PUSH
9821: LD_INT 1
9823: PLUS
9824: ARRAY
9825: PPUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 12
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_VAR 0 2
9844: PUSH
9845: LD_INT 3
9847: MOD
9848: PUSH
9849: LD_INT 1
9851: PLUS
9852: ARRAY
9853: PPUSH
9854: LD_INT 40
9856: PPUSH
9857: LD_INT 55
9859: PPUSH
9860: CALL_OW 12
9864: PPUSH
9865: CALL 24172 0 5
// veh := CreateVehicle ;
9869: LD_ADDR_VAR 0 6
9873: PUSH
9874: CALL_OW 45
9878: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9879: LD_VAR 0 6
9883: PPUSH
9884: LD_INT 19
9886: PPUSH
9887: LD_INT 0
9889: PPUSH
9890: CALL 54132 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 264
9903: PUSH
9904: LD_INT 12
9906: EQUAL
9907: IFFALSE 9939
// begin AddCargo ( veh , mat_cans , 70 ) ;
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: LD_INT 70
9919: PPUSH
9920: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9924: LD_VAR 0 6
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: LD_INT 30
9934: PPUSH
9935: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9939: LD_VAR 0 6
9943: PPUSH
9944: CALL_OW 263
9948: PUSH
9949: LD_INT 1
9951: EQUAL
9952: IFFALSE 10007
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9954: LD_INT 1
9956: PPUSH
9957: LD_INT 3
9959: PPUSH
9960: LD_INT 6
9962: PPUSH
9963: CALL_OW 380
// un := CreateHuman ;
9967: LD_ADDR_VAR 0 5
9971: PUSH
9972: CALL_OW 44
9976: ST_TO_ADDR
// tmp := tmp ^ un ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_VAR 0 5
9991: ADD
9992: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9993: LD_VAR 0 5
9997: PPUSH
9998: LD_VAR 0 6
10002: PPUSH
10003: CALL_OW 52
// end ; end ;
10007: GO 9764
10009: POP
10010: POP
// if tmp then
10011: LD_VAR 0 4
10015: IFFALSE 10079
// begin CenterNowOnUnits ( tmp ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10026: LD_VAR 0 4
10030: PUSH
10031: LD_INT 1
10033: ARRAY
10034: PPUSH
10035: LD_STRING DAR-1
10037: PPUSH
10038: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10042: LD_EXP 9
10046: PPUSH
10047: LD_STRING D
10049: PUSH
10050: LD_STRING I
10052: PUSH
10053: LD_STRING J
10055: PUSH
10056: LD_STRING S
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_EXP 25
10068: ARRAY
10069: STR
10070: PUSH
10071: LD_STRING -1-DAR
10073: STR
10074: PPUSH
10075: CALL_OW 88
// end ; if not reinforceAllowed then
10079: LD_EXP 24
10083: NOT
10084: IFFALSE 10088
// exit ;
10086: GO 10242
// wait ( 25 25$00 ) ;
10088: LD_INT 52500
10090: PPUSH
10091: CALL_OW 67
// uc_side := 1 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// uc_nation := 1 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// InitVc ;
10111: CALL_OW 20
// InitHc ;
10115: CALL_OW 19
// for i = 1 to 4 do
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_INT 4
10131: PUSH
10132: FOR_TO
10133: IFFALSE 10240
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10135: LD_INT 5
10137: PPUSH
10138: LD_INT 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: LD_INT 6
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL 24172 0 5
// veh := CreateVehicle ;
10154: LD_ADDR_VAR 0 6
10158: PUSH
10159: CALL_OW 45
10163: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10164: LD_VAR 0 6
10168: PPUSH
10169: LD_INT 19
10171: PPUSH
10172: LD_INT 0
10174: PPUSH
10175: CALL 54132 0 3
// if GetControl ( veh ) = control_manual then
10179: LD_VAR 0 6
10183: PPUSH
10184: CALL_OW 263
10188: PUSH
10189: LD_INT 1
10191: EQUAL
10192: IFFALSE 10238
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10194: LD_INT 0
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: LD_INT 7
10202: PUSH
10203: LD_INT 6
10205: PUSH
10206: LD_INT 5
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: LD_OWVAR 67
10218: ARRAY
10219: PPUSH
10220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10224: CALL_OW 44
10228: PPUSH
10229: LD_VAR 0 6
10233: PPUSH
10234: CALL_OW 52
// end ; end ;
10238: GO 10132
10240: POP
10241: POP
// end ;
10242: LD_VAR 0 1
10246: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10247: LD_INT 0
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
// uc_side := 8 ;
10254: LD_ADDR_OWVAR 20
10258: PUSH
10259: LD_INT 8
10261: ST_TO_ADDR
// uc_nation := nation_arabian ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: LD_INT 2
10269: ST_TO_ADDR
// for i = 1 to 2 do
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: DOUBLE
10276: LD_INT 1
10278: DEC
10279: ST_TO_ADDR
10280: LD_INT 2
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10364
// for j = 1 to 4 do
10286: LD_ADDR_VAR 0 4
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_INT 4
10298: PUSH
10299: FOR_TO
10300: IFFALSE 10360
// begin PrepareHuman ( false , j , 8 ) ;
10302: LD_INT 0
10304: PPUSH
10305: LD_VAR 0 4
10309: PPUSH
10310: LD_INT 8
10312: PPUSH
10313: CALL_OW 380
// un := CreateHuman ;
10317: LD_ADDR_VAR 0 3
10321: PUSH
10322: CALL_OW 44
10326: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 23
10334: PPUSH
10335: LD_INT 0
10337: PPUSH
10338: CALL_OW 49
// tmp := tmp union un ;
10342: LD_ADDR_VAR 0 5
10346: PUSH
10347: LD_VAR 0 5
10351: PUSH
10352: LD_VAR 0 3
10356: UNION
10357: ST_TO_ADDR
// end ;
10358: GO 10299
10360: POP
10361: POP
10362: GO 10283
10364: POP
10365: POP
// for i in tmp do
10366: LD_ADDR_VAR 0 2
10370: PUSH
10371: LD_VAR 0 5
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10396
// ComMoveXY ( i , 150 , 136 ) ;
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_INT 150
10386: PPUSH
10387: LD_INT 136
10389: PPUSH
10390: CALL_OW 111
10394: GO 10376
10396: POP
10397: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10398: LD_ADDR_EXP 45
10402: PUSH
10403: LD_EXP 45
10407: PPUSH
10408: LD_EXP 6
10412: PPUSH
10413: LD_EXP 45
10417: PUSH
10418: LD_EXP 6
10422: ARRAY
10423: PUSH
10424: LD_VAR 0 5
10428: UNION
10429: PPUSH
10430: CALL_OW 1
10434: ST_TO_ADDR
// end ;
10435: LD_VAR 0 1
10439: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10440: LD_OWVAR 67
10444: PUSH
10445: LD_INT 1
10447: GREATER
10448: PUSH
10449: LD_INT 31
10451: PPUSH
10452: LD_INT 3
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: AND
10464: IFFALSE 10681
10466: GO 10468
10468: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10469: LD_EXP 7
10473: PPUSH
10474: LD_INT 33
10476: PUSH
10477: LD_INT 101
10479: PUSH
10480: LD_INT 159
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 33
10494: PUSH
10495: LD_INT 105
10497: PUSH
10498: LD_INT 158
10500: PUSH
10501: LD_INT 5
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 33
10512: PUSH
10513: LD_INT 96
10515: PUSH
10516: LD_INT 136
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 33
10530: PUSH
10531: LD_INT 94
10533: PUSH
10534: LD_INT 133
10536: PUSH
10537: LD_INT 4
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 33
10548: PUSH
10549: LD_INT 84
10551: PUSH
10552: LD_INT 102
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL 79408 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10575: LD_EXP 8
10579: PPUSH
10580: LD_INT 33
10582: PUSH
10583: LD_INT 50
10585: PUSH
10586: LD_INT 17
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 33
10600: PUSH
10601: LD_INT 52
10603: PUSH
10604: LD_INT 20
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 33
10618: PUSH
10619: LD_INT 53
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 33
10636: PUSH
10637: LD_INT 45
10639: PUSH
10640: LD_INT 32
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 45
10657: PUSH
10658: LD_INT 39
10660: PUSH
10661: LD_INT 4
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL 79408 0 2
// end ; end_of_file
10681: END
// export function Action ; var i , tmp ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
10686: PPUSH
// InGameOn ;
10687: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10691: LD_INT 225
10693: PPUSH
10694: LD_INT 217
10696: PPUSH
10697: CALL_OW 86
// for i in playerForces [ 2 ] do
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 2
10713: ARRAY
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10849
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10718: LD_EXP 10
10722: PUSH
10723: LD_INT 1
10725: ARRAY
10726: PUSH
10727: LD_VAR 0 2
10731: PPUSH
10732: CALL_OW 257
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 4
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: IN
10747: AND
10748: IFFALSE 10832
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10750: LD_EXP 10
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_INT 19
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL 54132 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10773: LD_VAR 0 2
10777: PPUSH
10778: LD_EXP 10
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10795: LD_ADDR_EXP 10
10799: PUSH
10800: LD_EXP 10
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 3
10824: PPUSH
10825: CALL_OW 1
10829: ST_TO_ADDR
// end else
10830: GO 10847
// PlaceUnitInArea ( i , startArea , false ) ;
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_INT 19
10839: PPUSH
10840: LD_INT 0
10842: PPUSH
10843: CALL 54132 0 3
// end ;
10847: GO 10715
10849: POP
10850: POP
// wait ( 0 0$2 ) ;
10851: LD_INT 70
10853: PPUSH
10854: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10858: LD_EXP 9
10862: PPUSH
10863: LD_STRING D
10865: PUSH
10866: LD_STRING I
10868: PUSH
10869: LD_STRING J
10871: PUSH
10872: LD_STRING S
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: LD_EXP 25
10884: ARRAY
10885: STR
10886: PUSH
10887: LD_STRING -1
10889: STR
10890: PPUSH
10891: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10895: LD_EXP 12
10899: PPUSH
10900: LD_STRING DP-1
10902: PPUSH
10903: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10907: LD_EXP 12
10911: PPUSH
10912: LD_STRING DP-2
10914: PPUSH
10915: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10919: LD_EXP 9
10923: PPUSH
10924: LD_STRING D
10926: PUSH
10927: LD_STRING I
10929: PUSH
10930: LD_STRING J
10932: PUSH
10933: LD_STRING S
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_EXP 25
10945: ARRAY
10946: STR
10947: PUSH
10948: LD_STRING -2
10950: STR
10951: PPUSH
10952: CALL_OW 88
// InGameOff ;
10956: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10960: LD_STRING O1
10962: PPUSH
10963: CALL_OW 337
// game := true ;
10967: LD_ADDR_EXP 3
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// SaveForQuickRestart ;
10975: CALL_OW 22
// wait ( 0 0$5 ) ;
10979: LD_INT 175
10981: PPUSH
10982: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10986: LD_EXP 9
10990: PPUSH
10991: LD_STRING D
10993: PUSH
10994: LD_STRING I
10996: PUSH
10997: LD_STRING J
10999: PUSH
11000: LD_STRING S
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_EXP 25
11012: ARRAY
11013: STR
11014: PUSH
11015: LD_STRING -3
11017: STR
11018: PPUSH
11019: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11030: LD_EXP 15
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: PUSH
11039: LD_EXP 15
11043: PUSH
11044: LD_INT 2
11046: ARRAY
11047: GREATEREQUAL
11048: IFFALSE 11023
// outpostEscape := true ;
11050: LD_ADDR_EXP 27
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11058: LD_ADDR_VAR 0 3
11062: PUSH
11063: LD_EXP 14
11067: PPUSH
11068: LD_INT 26
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 72
11082: ST_TO_ADDR
// if tmp then
11083: LD_VAR 0 3
11087: IFFALSE 11105
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_STRING DR-1-Escape
11100: PPUSH
11101: CALL_OW 88
// wait ( 0 0$1 ) ;
11105: LD_INT 35
11107: PPUSH
11108: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11112: LD_EXP 9
11116: PPUSH
11117: LD_STRING D
11119: PUSH
11120: LD_STRING I
11122: PUSH
11123: LD_STRING J
11125: PUSH
11126: LD_STRING S
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: LD_EXP 25
11138: ARRAY
11139: STR
11140: PUSH
11141: LD_STRING -1-Escape
11143: STR
11144: PPUSH
11145: CALL_OW 88
// for i in ruOutpost do
11149: LD_ADDR_VAR 0 2
11153: PUSH
11154: LD_EXP 14
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11214
// begin if IsInUnit ( i ) then
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 310
11171: IFFALSE 11182
// ComExitBuilding ( i ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11182: LD_VAR 0 2
11186: PPUSH
11187: LD_INT 179
11189: PPUSH
11190: LD_INT 102
11192: PPUSH
11193: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11197: LD_VAR 0 2
11201: PPUSH
11202: LD_INT 28
11204: PPUSH
11205: LD_INT 20
11207: PPUSH
11208: CALL_OW 171
// end ;
11212: GO 11159
11214: POP
11215: POP
// tmp := [ ] ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11223: LD_INT 35
11225: PPUSH
11226: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: LD_EXP 14
11239: PPUSH
11240: LD_INT 95
11242: PUSH
11243: LD_INT 11
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 72
11254: ST_TO_ADDR
// if tmp then
11255: LD_VAR 0 3
11259: IFFALSE 11338
// for i in tmp do
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 3
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11336
// begin ruOutpost := ruOutpost diff i ;
11274: LD_ADDR_EXP 14
11278: PUSH
11279: LD_EXP 14
11283: PUSH
11284: LD_VAR 0 2
11288: DIFF
11289: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11290: LD_ADDR_EXP 45
11294: PUSH
11295: LD_EXP 45
11299: PPUSH
11300: LD_EXP 8
11304: PUSH
11305: LD_EXP 45
11309: PUSH
11310: LD_EXP 8
11314: ARRAY
11315: PUSH
11316: LD_INT 1
11318: PLUS
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: LD_VAR 0 2
11328: PPUSH
11329: CALL 24294 0 3
11333: ST_TO_ADDR
// end ;
11334: GO 11271
11336: POP
11337: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 72
11357: NOT
11358: IFFALSE 11223
// ruOutpost := [ ] ;
11360: LD_ADDR_EXP 14
11364: PUSH
11365: EMPTY
11366: ST_TO_ADDR
// end ;
11367: LD_VAR 0 1
11371: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11372: LD_EXP 27
11376: IFFALSE 11565
11378: GO 11380
11380: DISABLE
11381: LD_INT 0
11383: PPUSH
11384: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11385: LD_INT 875
11387: PPUSH
11388: LD_INT 1225
11390: PPUSH
11391: CALL_OW 12
11395: PPUSH
11396: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 208
11407: PUSH
11408: LD_INT 166
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 218
11417: PUSH
11418: LD_INT 174
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 201
11427: PUSH
11428: LD_INT 173
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 189
11437: PUSH
11438: LD_INT 167
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 191
11447: PUSH
11448: LD_INT 160
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 209
11457: PUSH
11458: LD_INT 181
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 192
11467: PUSH
11468: LD_INT 162
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 197
11477: PUSH
11478: LD_INT 166
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: DOUBLE
11501: LD_INT 1
11503: DEC
11504: ST_TO_ADDR
11505: LD_INT 5
11507: PUSH
11508: LD_OWVAR 67
11512: PLUS
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11563
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11517: LD_VAR 0 2
11521: PUSH
11522: LD_VAR 0 1
11526: ARRAY
11527: PUSH
11528: LD_INT 1
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 2
11536: PUSH
11537: LD_VAR 0 1
11541: ARRAY
11542: PUSH
11543: LD_INT 2
11545: ARRAY
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11554: LD_INT 28
11556: PPUSH
11557: CALL_OW 67
// end ;
11561: GO 11514
11563: POP
11564: POP
// end ;
11565: PPOPN 2
11567: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11568: LD_EXP 27
11572: NOT
11573: IFFALSE 12227
11575: GO 11577
11577: DISABLE
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
// begin enable ;
11587: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: LD_EXP 14
11597: PPUSH
11598: LD_INT 22
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 72
11626: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_EXP 14
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 2
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: LD_EXP 14
11675: PPUSH
11676: LD_INT 22
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 24
11701: PUSH
11702: LD_INT 1000
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: ST_TO_ADDR
// if engs and buildings then
11723: LD_VAR 0 2
11727: PUSH
11728: LD_VAR 0 3
11732: AND
11733: IFFALSE 11806
// begin for i in engs do
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_VAR 0 2
11744: PUSH
11745: FOR_IN
11746: IFFALSE 11802
// if IsInUnit ( i ) then
11748: LD_VAR 0 5
11752: PPUSH
11753: CALL_OW 310
11757: IFFALSE 11770
// ComExitBuilding ( i ) else
11759: LD_VAR 0 5
11763: PPUSH
11764: CALL_OW 122
11768: GO 11800
// if not HasTask ( i ) then
11770: LD_VAR 0 5
11774: PPUSH
11775: CALL_OW 314
11779: NOT
11780: IFFALSE 11800
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11782: LD_VAR 0 5
11786: PPUSH
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PPUSH
11796: CALL_OW 130
11800: GO 11745
11802: POP
11803: POP
// end else
11804: GO 11909
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11806: LD_VAR 0 3
11810: NOT
11811: PUSH
11812: LD_EXP 14
11816: PPUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 0
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: AND
11832: PUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: AND
11856: IFFALSE 11909
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 3
11865: PUSH
11866: LD_INT 54
11868: PUSH
11869: EMPTY
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 72
11880: PPUSH
11881: LD_EXP 14
11885: PPUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 0
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: PPUSH
11905: CALL_OW 120
// if not tmp then
11909: LD_VAR 0 1
11913: NOT
11914: IFFALSE 11918
// exit ;
11916: GO 12227
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11918: LD_INT 26
11920: PPUSH
11921: LD_INT 81
11923: PUSH
11924: LD_INT 3
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 70
11935: PUSH
11936: LD_INT 1
11938: GREATER
11939: IFFALSE 11995
// begin for i in tmp do
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 1
11950: PUSH
11951: FOR_IN
11952: IFFALSE 11991
// begin if IsInUnit ( i ) then
11954: LD_VAR 0 5
11958: PPUSH
11959: CALL_OW 310
11963: IFFALSE 11974
// ComExitBuilding ( i ) ;
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11974: LD_VAR 0 5
11978: PPUSH
11979: LD_INT 204
11981: PPUSH
11982: LD_INT 164
11984: PPUSH
11985: CALL_OW 174
// end ;
11989: GO 11951
11991: POP
11992: POP
// end else
11993: GO 12227
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 54
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 72
12017: IFFALSE 12227
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12019: LD_ADDR_VAR 0 4
12023: PUSH
12024: LD_EXP 14
12028: PPUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 32
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 58
12041: PUSH
12042: EMPTY
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12054: LD_VAR 0 4
12058: NOT
12059: PUSH
12060: LD_EXP 14
12064: PPUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 72
12079: AND
12080: IFFALSE 12117
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_EXP 14
12091: PPUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 5
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 72
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PPUSH
12111: CALL_OW 120
// exit ;
12115: GO 12227
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_INT 3
12129: PUSH
12130: LD_INT 54
12132: PUSH
12133: EMPTY
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 72
12144: ST_TO_ADDR
// if j < empty then
12145: LD_VAR 0 6
12149: PUSH
12150: LD_VAR 0 4
12154: LESS
12155: IFFALSE 12169
// k := j else
12157: LD_ADDR_VAR 0 7
12161: PUSH
12162: LD_VAR 0 6
12166: ST_TO_ADDR
12167: GO 12179
// k := empty ;
12169: LD_ADDR_VAR 0 7
12173: PUSH
12174: LD_VAR 0 4
12178: ST_TO_ADDR
// for i = 1 to k do
12179: LD_ADDR_VAR 0 5
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_VAR 0 7
12193: PUSH
12194: FOR_TO
12195: IFFALSE 12225
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12197: LD_VAR 0 6
12201: PUSH
12202: LD_VAR 0 5
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 4
12212: PUSH
12213: LD_VAR 0 5
12217: ARRAY
12218: PPUSH
12219: CALL_OW 120
12223: GO 12194
12225: POP
12226: POP
// end ; end ;
12227: PPOPN 7
12229: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12230: LD_EXP 2
12234: PUSH
12235: LD_INT 1
12237: EQUAL
12238: PUSH
12239: LD_EXP 27
12243: AND
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 92
12257: PUSH
12258: LD_INT 208
12260: PUSH
12261: LD_INT 163
12263: PUSH
12264: LD_INT 8
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: AND
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 21
12295: PUSH
12296: LD_INT 1
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 92
12305: PUSH
12306: LD_INT 208
12308: PUSH
12309: LD_INT 163
12311: PUSH
12312: LD_INT 14
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: NOT
12331: AND
12332: IFFALSE 12637
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
// begin InGameOn ;
12340: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12344: LD_EXP 9
12348: PPUSH
12349: CALL_OW 87
// wait ( 0 0$1 ) ;
12353: LD_INT 35
12355: PPUSH
12356: CALL_OW 67
// DialogueOn ;
12360: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12364: LD_EXP 9
12368: PPUSH
12369: LD_STRING D
12371: PUSH
12372: LD_STRING I
12374: PUSH
12375: LD_STRING J
12377: PUSH
12378: LD_STRING S
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_EXP 25
12390: ARRAY
12391: STR
12392: PUSH
12393: LD_STRING -1-BaseCaptured
12395: STR
12396: PPUSH
12397: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12401: LD_EXP 12
12405: PPUSH
12406: LD_STRING DP-1-BaseCaptured
12408: PPUSH
12409: CALL_OW 94
// if sibBombAllowed then
12413: LD_EXP 23
12417: IFFALSE 12559
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12419: LD_EXP 9
12423: PPUSH
12424: LD_STRING D
12426: PUSH
12427: LD_STRING I
12429: PUSH
12430: LD_STRING J
12432: PUSH
12433: LD_STRING S
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: LD_EXP 25
12445: ARRAY
12446: STR
12447: PUSH
12448: LD_STRING -2-BaseCaptured
12450: STR
12451: PPUSH
12452: CALL_OW 88
// if commander = 1 then
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: EQUAL
12464: IFFALSE 12478
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12466: LD_EXP 12
12470: PPUSH
12471: LD_STRING DP-2b-BaseCaptured
12473: PPUSH
12474: CALL_OW 94
// if commander = 2 then
12478: LD_EXP 25
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12500
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12488: LD_EXP 12
12492: PPUSH
12493: LD_STRING DP-2-BaseCaptured
12495: PPUSH
12496: CALL_OW 94
// if commander = 3 then
12500: LD_EXP 25
12504: PUSH
12505: LD_INT 3
12507: EQUAL
12508: IFFALSE 12522
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12510: LD_EXP 12
12514: PPUSH
12515: LD_STRING DP-2a-BaseCaptured
12517: PPUSH
12518: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12522: LD_EXP 9
12526: PPUSH
12527: LD_STRING D
12529: PUSH
12530: LD_STRING I
12532: PUSH
12533: LD_STRING J
12535: PUSH
12536: LD_STRING S
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_EXP 25
12548: ARRAY
12549: STR
12550: PUSH
12551: LD_STRING -3-BaseCaptured
12553: STR
12554: PPUSH
12555: CALL_OW 88
// end ; DialogueOff ;
12559: CALL_OW 7
// InGameOff ;
12563: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12567: LD_STRING O2
12569: PPUSH
12570: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12574: LD_ADDR_VAR 0 1
12578: PUSH
12579: LD_EXP 14
12583: PPUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 72
12598: PUSH
12599: FOR_IN
12600: IFFALSE 12616
// SetSide ( i , 1 ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 235
12614: GO 12599
12616: POP
12617: POP
// baseCaptured := true ;
12618: LD_ADDR_EXP 17
12622: PUSH
12623: LD_INT 1
12625: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12626: LD_INT 1225
12628: PPUSH
12629: CALL_OW 67
// PrepareReinforcements ;
12633: CALL 9547 0 0
// end ;
12637: PPOPN 1
12639: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12640: LD_INT 22
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 92
12652: PUSH
12653: LD_INT 167
12655: PUSH
12656: LD_INT 197
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: LD_INT 3
12679: GREATER
12680: IFFALSE 12697
12682: GO 12684
12684: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12685: LD_EXP 12
12689: PPUSH
12690: LD_STRING DP-RuAttack
12692: PPUSH
12693: CALL_OW 94
12697: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12698: LD_EXP 1
12702: NOT
12703: PUSH
12704: LD_INT 1
12706: PPUSH
12707: LD_INT 168
12709: PPUSH
12710: LD_INT 74
12712: PPUSH
12713: CALL_OW 293
12717: AND
12718: PUSH
12719: LD_INT 168
12721: PPUSH
12722: LD_INT 72
12724: PPUSH
12725: CALL_OW 553
12729: AND
12730: IFFALSE 12782
12732: GO 12734
12734: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12735: LD_INT 168
12737: PPUSH
12738: LD_INT 72
12740: PPUSH
12741: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12745: LD_EXP 9
12749: PPUSH
12750: LD_STRING D
12752: PUSH
12753: LD_STRING I
12755: PUSH
12756: LD_STRING J
12758: PUSH
12759: LD_STRING S
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_EXP 25
12771: ARRAY
12772: STR
12773: PUSH
12774: LD_STRING -1-Blockade
12776: STR
12777: PPUSH
12778: CALL_OW 88
// end ;
12782: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12783: LD_EXP 2
12787: PUSH
12788: LD_INT 1
12790: EQUAL
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 101
12804: PUSH
12805: LD_INT 4
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: IFFALSE 13353
12823: GO 12825
12825: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12826: LD_INT 4
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 343
// DialogueOn ;
12836: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12840: LD_EXP 11
12844: PPUSH
12845: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12849: LD_EXP 11
12853: PPUSH
12854: LD_STRING DM-1-Contact
12856: PPUSH
12857: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12861: LD_EXP 9
12865: PPUSH
12866: LD_STRING D
12868: PUSH
12869: LD_STRING I
12871: PUSH
12872: LD_STRING J
12874: PUSH
12875: LD_STRING S
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_EXP 25
12887: ARRAY
12888: STR
12889: PUSH
12890: LD_STRING -1-Contact
12892: STR
12893: PPUSH
12894: CALL_OW 88
// if commander = 1 then
12898: LD_EXP 25
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: IFFALSE 13038
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12908: LD_EXP 11
12912: PPUSH
12913: LD_STRING DM-2-Contact
12915: PPUSH
12916: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12920: LD_EXP 9
12924: PPUSH
12925: LD_STRING DI-2-Contact
12927: PPUSH
12928: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12932: LD_INT 22
12934: PUSH
12935: LD_INT 8
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: PUSH
12961: LD_INT 8
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 81
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: AND
12976: IFFALSE 13002
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12978: LD_EXP 11
12982: PPUSH
12983: LD_STRING DM-3-Contact
12985: PPUSH
12986: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12990: LD_EXP 9
12994: PPUSH
12995: LD_STRING DI-3-Contact
12997: PPUSH
12998: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13002: LD_EXP 11
13006: PPUSH
13007: LD_STRING DM-4-Contact
13009: PPUSH
13010: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13014: LD_EXP 9
13018: PPUSH
13019: LD_STRING DI-4-Contact
13021: PPUSH
13022: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13026: LD_EXP 11
13030: PPUSH
13031: LD_STRING DM-5-Contact
13033: PPUSH
13034: CALL_OW 94
// end ; if commander = 2 then
13038: LD_EXP 25
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13178
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13048: LD_EXP 11
13052: PPUSH
13053: LD_STRING DM-2c-Contact
13055: PPUSH
13056: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13060: LD_EXP 9
13064: PPUSH
13065: LD_STRING DJ-2-Contact
13067: PPUSH
13068: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13072: LD_INT 22
13074: PUSH
13075: LD_INT 8
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PUSH
13101: LD_INT 8
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 81
13111: PUSH
13112: LD_INT 2
13114: EQUAL
13115: AND
13116: IFFALSE 13142
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13118: LD_EXP 11
13122: PPUSH
13123: LD_STRING DM-3-Contact
13125: PPUSH
13126: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13130: LD_EXP 9
13134: PPUSH
13135: LD_STRING DJ-3-Contact
13137: PPUSH
13138: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13142: LD_EXP 11
13146: PPUSH
13147: LD_STRING DM-4-Contact
13149: PPUSH
13150: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13154: LD_EXP 9
13158: PPUSH
13159: LD_STRING DJ-4-Contact
13161: PPUSH
13162: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13166: LD_EXP 11
13170: PPUSH
13171: LD_STRING DM-5a-Contact
13173: PPUSH
13174: CALL_OW 94
// end ; if commander = 3 then
13178: LD_EXP 25
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: IFFALSE 13342
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13188: LD_EXP 11
13192: PPUSH
13193: LD_STRING DM-2a-Contact
13195: PPUSH
13196: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13200: LD_EXP 9
13204: PPUSH
13205: LD_STRING DS-2a-Contact
13207: PPUSH
13208: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13212: LD_EXP 11
13216: PPUSH
13217: LD_STRING DM-2b-Contact
13219: PPUSH
13220: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13224: LD_EXP 9
13228: PPUSH
13229: LD_STRING DS-2b-Contact
13231: PPUSH
13232: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13236: LD_INT 22
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: PUSH
13265: LD_INT 8
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 81
13275: PUSH
13276: LD_INT 2
13278: EQUAL
13279: AND
13280: IFFALSE 13306
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13282: LD_EXP 11
13286: PPUSH
13287: LD_STRING DM-3-Contact
13289: PPUSH
13290: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13294: LD_EXP 9
13298: PPUSH
13299: LD_STRING DS-3-Contact
13301: PPUSH
13302: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13306: LD_EXP 11
13310: PPUSH
13311: LD_STRING DM-4-Contact
13313: PPUSH
13314: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13318: LD_EXP 9
13322: PPUSH
13323: LD_STRING DS-4-Contact
13325: PPUSH
13326: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13330: LD_EXP 11
13334: PPUSH
13335: LD_STRING DM-5-Contact
13337: PPUSH
13338: CALL_OW 94
// end ; DialogueOff ;
13342: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13346: LD_STRING O3
13348: PPUSH
13349: CALL_OW 337
// end ;
13353: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13354: LD_EXP 2
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: PUSH
13363: LD_EXP 18
13367: PUSH
13368: LD_INT 15
13370: PUSH
13371: LD_INT 20
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: LD_OWVAR 67
13386: ARRAY
13387: GREATEREQUAL
13388: AND
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 30
13402: PUSH
13403: LD_INT 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: AND
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 8
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PPUSH
13444: CALL_OW 69
13448: PUSH
13449: LD_INT 5
13451: GREATEREQUAL
13452: AND
13453: IFFALSE 13976
13455: GO 13457
13457: DISABLE
13458: LD_INT 0
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
// begin DialogueOn ;
13464: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13468: LD_EXP 13
13472: PPUSH
13473: LD_STRING DF-1-Leg
13475: PPUSH
13476: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13480: LD_EXP 9
13484: PPUSH
13485: LD_STRING D
13487: PUSH
13488: LD_STRING I
13490: PUSH
13491: LD_STRING J
13493: PUSH
13494: LD_STRING S
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_EXP 25
13506: ARRAY
13507: STR
13508: PUSH
13509: LD_STRING -1-Leg
13511: STR
13512: PPUSH
13513: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13517: LD_EXP 13
13521: PPUSH
13522: LD_STRING DF-2-Leg
13524: PPUSH
13525: CALL_OW 94
// DialogueOff ;
13529: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13533: LD_STRING QLegionOffer
13535: PPUSH
13536: CALL_OW 97
13540: PUSH
13541: LD_INT 1
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13552
13549: POP
// ; 2 :
13550: GO 13566
13552: LD_INT 2
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13565
13560: POP
// exit ; end ;
13561: GO 13976
13563: GO 13566
13565: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13566: LD_EXP 9
13570: PPUSH
13571: LD_STRING D
13573: PUSH
13574: LD_STRING I
13576: PUSH
13577: LD_STRING J
13579: PUSH
13580: LD_STRING S
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: LD_EXP 25
13592: ARRAY
13593: STR
13594: PUSH
13595: LD_STRING -2-Leg
13597: STR
13598: PPUSH
13599: CALL_OW 88
// legOfferAccepted := true ;
13603: LD_ADDR_EXP 20
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13611: LD_INT 21
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13621: LD_INT 190
13623: PPUSH
13624: LD_INT 227
13626: PPUSH
13627: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 16800
13638: PUSH
13639: LD_INT 14700
13641: PUSH
13642: LD_INT 12600
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: LD_OWVAR 67
13654: ARRAY
13655: ST_TO_ADDR
// sib := 100 ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_INT 100
13663: ST_TO_ADDR
// disableGlobalTimer := true ;
13664: LD_ADDR_EXP 4
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13672: LD_INT 35
13674: PPUSH
13675: CALL_OW 67
// time := time - 0 0$1 ;
13679: LD_ADDR_VAR 0 1
13683: PUSH
13684: LD_VAR 0 1
13688: PUSH
13689: LD_INT 35
13691: MINUS
13692: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 21
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: CALL_OW 287
13708: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13709: LD_ADDR_OWVAR 47
13713: PUSH
13714: LD_STRING #SkrTime
13716: PUSH
13717: LD_OWVAR 1
13721: PUSH
13722: LD_STRING #Skr-LegOffer
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_VAR 0 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: ST_TO_ADDR
// if sources then
13742: LD_VAR 0 3
13746: IFFALSE 13778
// begin sib := sib - sources * 10 ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_VAR 0 2
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 10
13765: MUL
13766: MINUS
13767: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13768: LD_INT 21
13770: PPUSH
13771: LD_INT 3
13773: PPUSH
13774: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13778: LD_VAR 0 1
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: PUSH
13787: LD_VAR 0 2
13791: PUSH
13792: LD_INT 0
13794: LESSEQUAL
13795: OR
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 8
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: NOT
13812: OR
13813: IFFALSE 13672
// SetAreaMapShow ( legOfferArea , 0 ) ;
13815: LD_INT 21
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 424
// disableGlobalTimer := false ;
13825: LD_ADDR_EXP 4
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// if sib <= 0 then
13833: LD_VAR 0 2
13837: PUSH
13838: LD_INT 0
13840: LESSEQUAL
13841: IFFALSE 13957
// begin legChangeSide := true ;
13843: LD_ADDR_EXP 21
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13851: LD_EXP 13
13855: PPUSH
13856: LD_STRING DF-4y-Leg
13858: PPUSH
13859: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13863: LD_STRING O3a
13865: PPUSH
13866: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13870: LD_INT 8
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13880: LD_INT 8
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13896: LD_INT 8
13898: PPUSH
13899: LD_INT 4
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13912: LD_INT 8
13914: PPUSH
13915: LD_INT 6
13917: PPUSH
13918: LD_INT 2
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13928: LD_INT 8
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 2
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 80
// wait ( 0 0$30 ) ;
13944: LD_INT 1050
13946: PPUSH
13947: CALL_OW 67
// PrepareLegionReinforcements ;
13951: CALL 10247 0 0
// end else
13955: GO 13976
// begin ChangeMissionObjectives ( O3a ) ;
13957: LD_STRING O3a
13959: PPUSH
13960: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING DF-4n-Leg
13971: PPUSH
13972: CALL_OW 94
// end ; end ;
13976: PPOPN 4
13978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13979: LD_INT 22
13981: PUSH
13982: LD_INT 8
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 69
14007: PUSH
14008: LD_INT 0
14010: EQUAL
14011: PUSH
14012: LD_INT 8
14014: PPUSH
14015: LD_INT 1
14017: PPUSH
14018: CALL_OW 81
14022: PUSH
14023: LD_INT 2
14025: EQUAL
14026: AND
14027: IFFALSE 14039
14029: GO 14031
14031: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14032: LD_STRING O3a
14034: PPUSH
14035: CALL_OW 337
14039: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14040: LD_EXP 2
14044: PUSH
14045: LD_INT 1
14047: EQUAL
14048: PUSH
14049: LD_EXP 3
14053: AND
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 21
14067: PUSH
14068: LD_INT 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: PUSH
14084: LD_INT 0
14086: EQUAL
14087: AND
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: PUSH
14118: LD_INT 0
14120: EQUAL
14121: AND
14122: IFFALSE 14360
14124: GO 14126
14126: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14127: LD_EXP 9
14131: PPUSH
14132: LD_STRING D
14134: PUSH
14135: LD_STRING I
14137: PUSH
14138: LD_STRING J
14140: PUSH
14141: LD_STRING S
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_EXP 25
14153: ARRAY
14154: STR
14155: PUSH
14156: LD_STRING -1-Win
14158: STR
14159: PPUSH
14160: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14164: LD_OWVAR 1
14168: PUSH
14169: LD_INT 315000
14171: PUSH
14172: LD_INT 273000
14174: PUSH
14175: LD_INT 231000
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_OWVAR 67
14187: ARRAY
14188: GREATEREQUAL
14189: IFFALSE 14204
// AddMedal ( med1 , - 1 ) else
14191: LD_STRING med1
14193: PPUSH
14194: LD_INT 1
14196: NEG
14197: PPUSH
14198: CALL_OW 101
14202: GO 14214
// AddMedal ( med1 , 1 ) ;
14204: LD_STRING med1
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14214: LD_EXP 22
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 15
14224: PUSH
14225: LD_INT 10
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_OWVAR 67
14237: ARRAY
14238: GREATEREQUAL
14239: IFFALSE 14254
// AddMedal ( med2 , - 1 ) else
14241: LD_STRING med2
14243: PPUSH
14244: LD_INT 1
14246: NEG
14247: PPUSH
14248: CALL_OW 101
14252: GO 14264
// AddMedal ( med2 , 1 ) ;
14254: LD_STRING med2
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14264: LD_INT 8
14266: PPUSH
14267: LD_INT 1
14269: PPUSH
14270: CALL_OW 81
14274: PUSH
14275: LD_INT 1
14277: EQUAL
14278: IFFALSE 14292
// AddMedal ( med3 , 1 ) else
14280: LD_STRING med3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 101
14290: GO 14349
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14292: LD_INT 22
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: IFFALSE 14338
// AddMedal ( med3 , 2 ) else
14326: LD_STRING med3
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 101
14336: GO 14349
// AddMedal ( med3 , - 1 ) ;
14338: LD_STRING med3
14340: PPUSH
14341: LD_INT 1
14343: NEG
14344: PPUSH
14345: CALL_OW 101
// GiveMedals ( MAIN ) ;
14349: LD_STRING MAIN
14351: PPUSH
14352: CALL_OW 102
// YouWin ;
14356: CALL_OW 103
// end ;
14360: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14361: LD_EXP 2
14365: PUSH
14366: LD_INT 1
14368: EQUAL
14369: PUSH
14370: LD_EXP 16
14374: AND
14375: PUSH
14376: LD_INT 20
14378: PPUSH
14379: LD_INT 81
14381: PUSH
14382: LD_INT 8
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 70
14393: AND
14394: IFFALSE 14673
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
// begin enable ;
14406: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_INT 20
14414: PPUSH
14415: LD_INT 81
14417: PUSH
14418: LD_INT 8
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 70
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 3
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14673
// for i in tmp do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 3
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14671
// begin x := GetX ( i ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 250
14466: ST_TO_ADDR
// y := GetY ( i ) ;
14467: LD_ADDR_VAR 0 5
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 251
14481: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: CALL_OW 458
14496: IFFALSE 14669
// begin LaunchMineAtPos ( x , y , 8 ) ;
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: LD_INT 8
14510: PPUSH
14511: CALL_OW 456
// if not dialogueMineDetected then
14515: LD_EXP 28
14519: NOT
14520: IFFALSE 14581
// begin CenterNowOnXY ( x , y ) ;
14522: LD_VAR 0 4
14526: PPUSH
14527: LD_VAR 0 5
14531: PPUSH
14532: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14536: LD_EXP 9
14540: PPUSH
14541: LD_STRING D
14543: PUSH
14544: LD_STRING I
14546: PUSH
14547: LD_STRING J
14549: PUSH
14550: LD_STRING S
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: PUSH
14558: LD_EXP 25
14562: ARRAY
14563: STR
14564: PUSH
14565: LD_STRING -1-Mine
14567: STR
14568: PPUSH
14569: CALL_OW 88
// dialogueMineDetected := true ;
14573: LD_ADDR_EXP 28
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_EXP 16
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14667
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14599: LD_EXP 16
14603: PUSH
14604: LD_VAR 0 2
14608: ARRAY
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PUSH
14614: LD_VAR 0 4
14618: EQUAL
14619: PUSH
14620: LD_EXP 16
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: PUSH
14635: LD_VAR 0 5
14639: EQUAL
14640: AND
14641: IFFALSE 14665
// begin staticMines := Delete ( staticMines , j ) ;
14643: LD_ADDR_EXP 16
14647: PUSH
14648: LD_EXP 16
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: CALL_OW 3
14662: ST_TO_ADDR
// break ;
14663: GO 14667
// end ;
14665: GO 14596
14667: POP
14668: POP
// end ; end ;
14669: GO 14449
14671: POP
14672: POP
// end ;
14673: PPOPN 5
14675: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14676: LD_EXP 2
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: PUSH
14685: LD_EXP 3
14689: AND
14690: PUSH
14691: LD_EXP 23
14695: AND
14696: PUSH
14697: LD_EXP 45
14701: PUSH
14702: LD_EXP 7
14706: ARRAY
14707: PPUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 72
14722: AND
14723: IFFALSE 14927
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// begin enable ;
14732: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14733: LD_EXP 7
14737: PPUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: LD_INT 48
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: PPUSH
14759: CALL 79516 0 2
// repeat wait ( 0 0$1 ) ;
14763: LD_INT 35
14765: PPUSH
14766: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14770: LD_INT 22
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 48
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: IFFALSE 14763
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 34
14817: PUSH
14818: LD_INT 48
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 69
14833: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_INT 81
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if e then
14868: LD_VAR 0 2
14872: IFFALSE 14898
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: LD_VAR 0 1
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 74
14897: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 250
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 251
14922: PPUSH
14923: CALL_OW 116
// end ;
14927: PPOPN 2
14929: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14930: LD_OWVAR 67
14934: PUSH
14935: LD_INT 1
14937: GREATER
14938: PUSH
14939: LD_EXP 45
14943: PUSH
14944: LD_EXP 7
14948: ARRAY
14949: PPUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 72
14964: AND
14965: PUSH
14966: LD_EXP 2
14970: PUSH
14971: LD_INT 1
14973: EQUAL
14974: AND
14975: PUSH
14976: LD_EXP 3
14980: AND
14981: PUSH
14982: LD_INT 23
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: CALL_OW 321
14992: PUSH
14993: LD_INT 2
14995: EQUAL
14996: AND
14997: IFFALSE 15124
14999: GO 15001
15001: DISABLE
15002: LD_INT 0
15004: PPUSH
15005: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15006: LD_ADDR_VAR 0 1
15010: PUSH
15011: LD_EXP 45
15015: PUSH
15016: LD_EXP 7
15020: ARRAY
15021: PPUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 72
15036: ST_TO_ADDR
// if not tmp then
15037: LD_VAR 0 1
15041: NOT
15042: IFFALSE 15046
// exit ;
15044: GO 15124
// for i in tmp do
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_VAR 0 1
15055: PUSH
15056: FOR_IN
15057: IFFALSE 15103
// begin SetTag ( i , 29 ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 29
15066: PPUSH
15067: CALL_OW 109
// ComExitBuilding ( i ) ;
15071: LD_VAR 0 2
15075: PPUSH
15076: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 37
15087: PPUSH
15088: LD_INT 97
15090: PPUSH
15091: LD_INT 133
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: CALL_OW 230
// end ;
15101: GO 15056
15103: POP
15104: POP
// wait ( 1 1$00 ) ;
15105: LD_INT 2100
15107: PPUSH
15108: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15112: LD_EXP 7
15116: PPUSH
15117: LD_INT 29
15119: PPUSH
15120: CALL 59915 0 2
// end ;
15124: PPOPN 2
15126: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15127: LD_EXP 2
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: PUSH
15136: LD_INT 84
15138: PPUSH
15139: LD_INT 128
15141: PPUSH
15142: CALL_OW 428
15146: PPUSH
15147: CALL_OW 266
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: AND
15156: PUSH
15157: LD_INT 84
15159: PPUSH
15160: LD_INT 128
15162: PPUSH
15163: CALL_OW 428
15167: PPUSH
15168: CALL_OW 255
15172: PUSH
15173: LD_INT 3
15175: EQUAL
15176: AND
15177: IFFALSE 15350
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
15185: PPUSH
// begin enable ;
15186: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15187: LD_ADDR_VAR 0 2
15191: PUSH
15192: LD_INT 84
15194: PPUSH
15195: LD_INT 128
15197: PPUSH
15198: CALL_OW 428
15202: ST_TO_ADDR
// uc_side := 3 ;
15203: LD_ADDR_OWVAR 20
15207: PUSH
15208: LD_INT 3
15210: ST_TO_ADDR
// uc_nation := 3 ;
15211: LD_ADDR_OWVAR 21
15215: PUSH
15216: LD_INT 3
15218: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15219: LD_INT 21
15221: PPUSH
15222: LD_INT 3
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: LD_INT 51
15230: PPUSH
15231: LD_INT 0
15233: PPUSH
15234: CALL 24172 0 5
// veh := CreateVehicle ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: CALL_OW 45
15247: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_INT 126
15255: PPUSH
15256: LD_INT 227
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: LD_INT 100
15276: PPUSH
15277: CALL_OW 290
// ComGive ( veh , depot ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_VAR 0 2
15290: PPUSH
15291: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 126
15302: PPUSH
15303: LD_INT 227
15305: PPUSH
15306: CALL_OW 171
// wait ( 0 0$10 ) ;
15310: LD_INT 350
15312: PPUSH
15313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 126
15331: PPUSH
15332: LD_INT 227
15334: PPUSH
15335: CALL_OW 307
15339: IFFALSE 15317
// RemoveUnit ( veh ) ;
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 64
// end ;
15350: PPOPN 2
15352: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15353: LD_EXP 2
15357: PUSH
15358: LD_INT 1
15360: EQUAL
15361: PUSH
15362: LD_EXP 27
15366: AND
15367: PUSH
15368: LD_EXP 25
15372: PUSH
15373: LD_INT 2
15375: EQUAL
15376: AND
15377: IFFALSE 15569
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
// begin enable ;
15386: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15387: LD_OWVAR 1
15391: PUSH
15392: LD_INT 105000
15394: PUSH
15395: LD_INT 84000
15397: PUSH
15398: LD_INT 63000
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: LD_OWVAR 67
15410: ARRAY
15411: GREATEREQUAL
15412: IFFALSE 15415
// disable ;
15414: DISABLE
// uc_side := 4 ;
15415: LD_ADDR_OWVAR 20
15419: PUSH
15420: LD_INT 4
15422: ST_TO_ADDR
// uc_nation := 1 ;
15423: LD_ADDR_OWVAR 21
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15431: LD_INT 2
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: LD_INT 3
15439: PPUSH
15440: LD_INT 12
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL 24172 0 5
// veh := CreateVehicle ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 45
15459: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 229
15467: PPUSH
15468: LD_INT 226
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_INT 100
15488: PPUSH
15489: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 25
15500: PPUSH
15501: CALL_OW 173
// AddComUnload ( veh ) ;
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 229
15521: PPUSH
15522: LD_INT 226
15524: PPUSH
15525: CALL_OW 171
// wait ( 0 0$10 ) ;
15529: LD_INT 350
15531: PPUSH
15532: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15536: LD_INT 35
15538: PPUSH
15539: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15543: LD_VAR 0 1
15547: PPUSH
15548: LD_INT 229
15550: PPUSH
15551: LD_INT 226
15553: PPUSH
15554: CALL_OW 307
15558: IFFALSE 15536
// RemoveUnit ( veh ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 64
// end ;
15569: PPOPN 2
15571: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15572: LD_EXP 2
15576: PUSH
15577: LD_INT 1
15579: EQUAL
15580: PUSH
15581: LD_EXP 3
15585: AND
15586: PUSH
15587: LD_EXP 24
15591: AND
15592: IFFALSE 15925
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
// begin enable ;
15604: ENABLE
// tmp := [ ] ;
15605: LD_ADDR_VAR 0 4
15609: PUSH
15610: EMPTY
15611: ST_TO_ADDR
// if commander = 1 then
15612: LD_EXP 25
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: IFFALSE 15632
// amount := 3 else
15622: LD_ADDR_VAR 0 5
15626: PUSH
15627: LD_INT 3
15629: ST_TO_ADDR
15630: GO 15640
// amount := 2 ;
15632: LD_ADDR_VAR 0 5
15636: PUSH
15637: LD_INT 2
15639: ST_TO_ADDR
// for i = 1 to amount do
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: DOUBLE
15646: LD_INT 1
15648: DEC
15649: ST_TO_ADDR
15650: LD_VAR 0 5
15654: PUSH
15655: FOR_TO
15656: IFFALSE 15820
// begin wait ( 0 0$5 ) ;
15658: LD_INT 175
15660: PPUSH
15661: CALL_OW 67
// for j = 1 to 3 do
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: DOUBLE
15671: LD_INT 1
15673: DEC
15674: ST_TO_ADDR
15675: LD_INT 3
15677: PUSH
15678: FOR_TO
15679: IFFALSE 15816
// begin uc_side := 4 ;
15681: LD_ADDR_OWVAR 20
15685: PUSH
15686: LD_INT 4
15688: ST_TO_ADDR
// uc_nation := 1 ;
15689: LD_ADDR_OWVAR 21
15693: PUSH
15694: LD_INT 1
15696: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15697: LD_INT 3
15699: PUSH
15700: LD_INT 5
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 12
15717: ARRAY
15718: PPUSH
15719: LD_INT 3
15721: PPUSH
15722: LD_INT 3
15724: PPUSH
15725: LD_INT 9
15727: PUSH
15728: LD_INT 5
15730: PUSH
15731: LD_INT 7
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 1
15741: PPUSH
15742: LD_INT 3
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: LD_INT 100
15753: PPUSH
15754: CALL 24172 0 5
// veh := CreateVehicle ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: CALL_OW 45
15767: ST_TO_ADDR
// tmp := tmp ^ veh ;
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_VAR 0 4
15777: PUSH
15778: LD_VAR 0 3
15782: ADD
15783: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 22
15791: PPUSH
15792: LD_INT 0
15794: PPUSH
15795: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 119
15806: PPUSH
15807: LD_INT 215
15809: PPUSH
15810: CALL_OW 111
// end ;
15814: GO 15678
15816: POP
15817: POP
// end ;
15818: GO 15655
15820: POP
15821: POP
// wait ( 0 0$3 ) ;
15822: LD_INT 105
15824: PPUSH
15825: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15829: LD_INT 35
15831: PPUSH
15832: CALL_OW 67
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 4
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15914
// if IsDead ( i ) then
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 301
15858: IFFALSE 15878
// tmp := tmp diff i else
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_VAR 0 4
15869: PUSH
15870: LD_VAR 0 1
15874: DIFF
15875: ST_TO_ADDR
15876: GO 15912
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 81
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PPUSH
15893: CALL_OW 69
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 74
15907: PPUSH
15908: CALL_OW 115
15912: GO 15846
15914: POP
15915: POP
// until tmp = [ ] ;
15916: LD_VAR 0 4
15920: PUSH
15921: EMPTY
15922: EQUAL
15923: IFFALSE 15829
// end ;
15925: PPOPN 5
15927: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15928: LD_EXP 2
15932: PUSH
15933: LD_INT 1
15935: EQUAL
15936: PUSH
15937: LD_EXP 3
15941: AND
15942: IFFALSE 16043
15944: GO 15946
15946: DISABLE
15947: LD_INT 0
15949: PPUSH
15950: PPUSH
// begin enable ;
15951: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15952: LD_ADDR_VAR 0 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 32
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: ST_TO_ADDR
// if tmp then
15993: LD_VAR 0 2
15997: IFFALSE 16043
// for i in tmp do
15999: LD_ADDR_VAR 0 1
16003: PUSH
16004: LD_VAR 0 2
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16041
// if GetFuel ( i ) < 3 then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 261
16021: PUSH
16022: LD_INT 3
16024: LESS
16025: IFFALSE 16039
// SetFuel ( i , 3 ) ;
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_INT 3
16034: PPUSH
16035: CALL_OW 240
16039: GO 16009
16041: POP
16042: POP
// end ;
16043: PPOPN 2
16045: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16046: LD_EXP 3
16050: PUSH
16051: LD_INT 8
16053: PPUSH
16054: LD_INT 4
16056: PPUSH
16057: CALL_OW 81
16061: PUSH
16062: LD_INT 2
16064: EQUAL
16065: AND
16066: IFFALSE 16276
16068: GO 16070
16070: DISABLE
16071: LD_INT 0
16073: PPUSH
16074: PPUSH
16075: PPUSH
// begin enable ;
16076: ENABLE
// tmp := [ ] ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: EMPTY
16083: ST_TO_ADDR
// for i = 1 to 4 do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: DOUBLE
16090: LD_INT 1
16092: DEC
16093: ST_TO_ADDR
16094: LD_INT 4
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16242
// begin uc_side := 8 ;
16100: LD_ADDR_OWVAR 20
16104: PUSH
16105: LD_INT 8
16107: ST_TO_ADDR
// uc_nation := nation_arabian ;
16108: LD_ADDR_OWVAR 21
16112: PUSH
16113: LD_INT 2
16115: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16116: LD_INT 11
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: LD_INT 5
16124: PPUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 23
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 1
16137: PPUSH
16138: LD_INT 2
16140: PPUSH
16141: CALL_OW 12
16145: ARRAY
16146: PPUSH
16147: LD_INT 60
16149: PPUSH
16150: LD_INT 80
16152: PPUSH
16153: CALL_OW 12
16157: PPUSH
16158: CALL 24172 0 5
// un := CreateVehicle ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: CALL_OW 45
16171: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 2
16179: PPUSH
16180: CALL_OW 233
// tmp := tmp ^ un ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_VAR 0 2
16198: ADD
16199: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16200: LD_VAR 0 2
16204: PPUSH
16205: LD_INT 88
16207: PPUSH
16208: LD_INT 2
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16218: LD_VAR 0 2
16222: PPUSH
16223: LD_INT 93
16225: PPUSH
16226: LD_INT 13
16228: PPUSH
16229: CALL_OW 111
// wait ( 0 0$2 ) ;
16233: LD_INT 70
16235: PPUSH
16236: CALL_OW 67
// end ;
16240: GO 16097
16242: POP
16243: POP
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16274
// AddComMoveXY ( i , 136 , 19 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 136
16264: PPUSH
16265: LD_INT 19
16267: PPUSH
16268: CALL_OW 171
16272: GO 16254
16274: POP
16275: POP
// end ;
16276: PPOPN 3
16278: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16279: LD_EXP 3
16283: IFFALSE 17202
16285: GO 16287
16287: DISABLE
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
// begin enable ;
16294: ENABLE
// base := mc_leg ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_EXP 6
16304: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16305: LD_INT 22
16307: PUSH
16308: LD_INT 8
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: PPUSH
16340: CALL_OW 69
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 17202
// if Prob ( 40 ) then
16349: LD_INT 40
16351: PPUSH
16352: CALL_OW 13
16356: IFFALSE 16485
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_INT 13
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 28
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 13
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 28
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 13
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: LD_INT 28
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 13
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 28
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 13
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 28
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 13
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 26
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL 79516 0 2
// end else
16483: GO 16702
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_INT 13
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 27
16501: PUSH
16502: LD_INT 26
16504: PUSH
16505: LD_INT 26
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_INT 3
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 13
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 27
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 26
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 12
16564: ARRAY
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 26
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: LD_INT 29
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 3
16600: PPUSH
16601: CALL_OW 12
16605: ARRAY
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 13
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 26
16624: PUSH
16625: LD_INT 29
16627: PUSH
16628: LD_INT 29
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PPUSH
16639: LD_INT 3
16641: PPUSH
16642: CALL_OW 12
16646: ARRAY
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 13
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 29
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 13
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 26
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL 79516 0 2
// end ; repeat wait ( 0 0$1 ) ;
16702: LD_INT 35
16704: PPUSH
16705: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL 80934 0 2
16721: PUSH
16722: LD_INT 6
16724: GREATEREQUAL
16725: PUSH
16726: LD_OWVAR 1
16730: PUSH
16731: LD_INT 21000
16733: MOD
16734: PUSH
16735: LD_INT 0
16737: EQUAL
16738: OR
16739: IFFALSE 16702
// wait ( 0 0$30 ) ;
16741: LD_INT 1050
16743: PPUSH
16744: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL 80934 0 2
16765: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16766: LD_ADDR_EXP 64
16770: PUSH
16771: LD_EXP 64
16775: PPUSH
16776: LD_VAR 0 2
16780: PPUSH
16781: LD_EXP 64
16785: PUSH
16786: LD_VAR 0 2
16790: ARRAY
16791: PUSH
16792: LD_VAR 0 3
16796: DIFF
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16803: LD_ADDR_VAR 0 4
16807: PUSH
16808: LD_INT 0
16810: PPUSH
16811: LD_INT 2
16813: PPUSH
16814: CALL_OW 12
16818: ST_TO_ADDR
// if legChangeSide then
16819: LD_EXP 21
16823: IFFALSE 16833
// target := 2 ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// if target = 2 then
16833: LD_VAR 0 4
16837: PUSH
16838: LD_INT 2
16840: EQUAL
16841: IFFALSE 16969
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16843: LD_ADDR_VAR 0 3
16847: PUSH
16848: LD_VAR 0 3
16852: PPUSH
16853: LD_INT 24
16855: PUSH
16856: LD_INT 250
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 72
16867: ST_TO_ADDR
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 3
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16919
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 112
16888: PPUSH
16889: LD_INT 64
16891: PPUSH
16892: CALL_OW 297
16896: PUSH
16897: LD_INT 9
16899: GREATER
16900: IFFALSE 16917
// ComMoveXY ( i , 112 , 64 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 112
16909: PPUSH
16910: LD_INT 64
16912: PPUSH
16913: CALL_OW 111
16917: GO 16878
16919: POP
16920: POP
// wait ( 0 0$1 ) ;
16921: LD_INT 35
16923: PPUSH
16924: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 92
16935: PUSH
16936: LD_INT 112
16938: PUSH
16939: LD_INT 64
16941: PUSH
16942: LD_INT 9
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 72
16955: PUSH
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 1
16963: MINUS
16964: GREATEREQUAL
16965: IFFALSE 16843
// end else
16967: GO 17093
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 24
16981: PUSH
16982: LD_INT 250
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 72
16993: ST_TO_ADDR
// for i in tmp do
16994: LD_ADDR_VAR 0 1
16998: PUSH
16999: LD_VAR 0 3
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17045
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 174
17014: PPUSH
17015: LD_INT 94
17017: PPUSH
17018: CALL_OW 297
17022: PUSH
17023: LD_INT 9
17025: GREATER
17026: IFFALSE 17043
// ComMoveXY ( i , 174 , 94 ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 174
17035: PPUSH
17036: LD_INT 94
17038: PPUSH
17039: CALL_OW 111
17043: GO 17004
17045: POP
17046: POP
// wait ( 0 0$1 ) ;
17047: LD_INT 35
17049: PPUSH
17050: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 92
17061: PUSH
17062: LD_INT 174
17064: PUSH
17065: LD_INT 94
17067: PUSH
17068: LD_INT 9
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 72
17081: PUSH
17082: LD_VAR 0 3
17086: PUSH
17087: LD_INT 1
17089: MINUS
17090: GREATEREQUAL
17091: IFFALSE 16969
// end ; repeat wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// for i in tmp do
17100: LD_ADDR_VAR 0 1
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17193
// begin if GetLives ( i ) > 251 then
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 256
17122: PUSH
17123: LD_INT 251
17125: GREATER
17126: IFFALSE 17164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_INT 81
17135: PUSH
17136: LD_INT 8
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 69
17147: PPUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 74
17157: PPUSH
17158: CALL_OW 115
17162: GO 17191
// if IsDead ( i ) then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 301
17173: IFFALSE 17191
// tmp := tmp diff i ;
17175: LD_ADDR_VAR 0 3
17179: PUSH
17180: LD_VAR 0 3
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// end ;
17191: GO 17110
17193: POP
17194: POP
// until not tmp ;
17195: LD_VAR 0 3
17199: NOT
17200: IFFALSE 17093
// end ;
17202: PPOPN 4
17204: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17205: LD_EXP 3
17209: IFFALSE 18197
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
// begin enable ;
17221: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17222: LD_EXP 45
17226: PUSH
17227: LD_EXP 8
17231: ARRAY
17232: PPUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 30
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 72
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 18197
// base := mc_rus_2 ;
17266: LD_ADDR_VAR 0 2
17270: PUSH
17271: LD_EXP 8
17275: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17276: LD_ADDR_VAR 0 5
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 30
17293: PUSH
17294: LD_INT 34
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if Prob ( 40 ) then
17310: LD_INT 40
17312: PPUSH
17313: CALL_OW 13
17317: IFFALSE 17446
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17319: LD_VAR 0 2
17323: PPUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: LD_INT 49
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 49
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 49
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 24
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 46
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 24
17398: PUSH
17399: LD_INT 3
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 46
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 24
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 46
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL 79516 0 2
// end else
17444: GO 17571
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17446: LD_VAR 0 2
17450: PPUSH
17451: LD_INT 24
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: LD_INT 47
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 24
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 47
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 24
17489: PUSH
17490: LD_INT 3
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 47
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 24
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 46
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 24
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: LD_INT 46
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 24
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 46
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL 79516 0 2
// end ; if Difficulty > 1 then
17571: LD_OWVAR 67
17575: PUSH
17576: LD_INT 1
17578: GREATER
17579: IFFALSE 17611
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17581: LD_VAR 0 2
17585: PPUSH
17586: LD_INT 24
17588: PUSH
17589: LD_INT 3
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 47
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: PPUSH
17607: CALL 79516 0 2
// repeat wait ( 0 0$1 ) ;
17611: LD_INT 35
17613: PPUSH
17614: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL 80934 0 2
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: PUSH
17645: LD_OWVAR 67
17649: ARRAY
17650: GREATEREQUAL
17651: PUSH
17652: LD_OWVAR 1
17656: PUSH
17657: LD_INT 21000
17659: MOD
17660: PUSH
17661: LD_INT 0
17663: EQUAL
17664: OR
17665: IFFALSE 17611
// wait ( 0 0$45 ) ;
17667: LD_INT 1575
17669: PPUSH
17670: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17674: LD_ADDR_VAR 0 3
17678: PUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL 80934 0 2
17691: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17692: LD_ADDR_EXP 64
17696: PUSH
17697: LD_EXP 64
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: LD_EXP 64
17711: PUSH
17712: LD_VAR 0 2
17716: ARRAY
17717: PUSH
17718: LD_VAR 0 3
17722: DIFF
17723: PPUSH
17724: CALL_OW 1
17728: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_INT 0
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 12
17744: ST_TO_ADDR
// if target then
17745: LD_VAR 0 4
17749: IFFALSE 17877
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 24
17763: PUSH
17764: LD_INT 250
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 72
17775: ST_TO_ADDR
// for i in tmp do
17776: LD_ADDR_VAR 0 1
17780: PUSH
17781: LD_VAR 0 3
17785: PUSH
17786: FOR_IN
17787: IFFALSE 17827
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_INT 84
17796: PPUSH
17797: LD_INT 32
17799: PPUSH
17800: CALL_OW 297
17804: PUSH
17805: LD_INT 9
17807: GREATER
17808: IFFALSE 17825
// ComMoveXY ( i , 84 , 32 ) ;
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 84
17817: PPUSH
17818: LD_INT 32
17820: PPUSH
17821: CALL_OW 111
17825: GO 17786
17827: POP
17828: POP
// wait ( 0 0$1 ) ;
17829: LD_INT 35
17831: PPUSH
17832: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 92
17843: PUSH
17844: LD_INT 84
17846: PUSH
17847: LD_INT 32
17849: PUSH
17850: LD_INT 9
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 72
17863: PUSH
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 1
17871: MINUS
17872: GREATEREQUAL
17873: IFFALSE 17751
// end else
17875: GO 18037
// begin if teleport then
17877: LD_VAR 0 5
17881: IFFALSE 17901
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_VAR 0 5
17892: PUSH
17893: LD_INT 1
17895: ARRAY
17896: PPUSH
17897: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17901: LD_ADDR_VAR 0 3
17905: PUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 24
17913: PUSH
17914: LD_INT 250
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 72
17925: ST_TO_ADDR
// for i in tmp do
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_VAR 0 3
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17989
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17939: LD_VAR 0 1
17943: PPUSH
17944: LD_INT 140
17946: PPUSH
17947: LD_INT 219
17949: PPUSH
17950: CALL_OW 297
17954: PUSH
17955: LD_INT 9
17957: GREATER
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 314
17968: NOT
17969: AND
17970: IFFALSE 17987
// AddComMoveXY ( i , 140 , 219 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 140
17979: PPUSH
17980: LD_INT 219
17982: PPUSH
17983: CALL_OW 171
17987: GO 17936
17989: POP
17990: POP
// wait ( 0 0$1 ) ;
17991: LD_INT 35
17993: PPUSH
17994: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_INT 92
18005: PUSH
18006: LD_INT 140
18008: PUSH
18009: LD_INT 219
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 72
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 1
18033: MINUS
18034: GREATEREQUAL
18035: IFFALSE 17901
// end ; repeat wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// for i in tmp do
18044: LD_ADDR_VAR 0 1
18048: PUSH
18049: LD_VAR 0 3
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18188
// begin if GetLives ( i ) > 251 then
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 256
18066: PUSH
18067: LD_INT 251
18069: GREATER
18070: IFFALSE 18159
// begin if GetWeapon ( i ) = ru_time_lapser then
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 264
18081: PUSH
18082: LD_INT 49
18084: EQUAL
18085: IFFALSE 18123
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 81
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PPUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 74
18116: PPUSH
18117: CALL_OW 112
18121: GO 18157
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18123: LD_VAR 0 1
18127: PPUSH
18128: LD_INT 81
18130: PUSH
18131: LD_INT 3
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 74
18152: PPUSH
18153: CALL_OW 115
// end else
18157: GO 18186
// if IsDead ( i ) then
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18186
// tmp := tmp diff i ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_VAR 0 3
18179: PUSH
18180: LD_VAR 0 1
18184: DIFF
18185: ST_TO_ADDR
// end ;
18186: GO 18054
18188: POP
18189: POP
// until not tmp ;
18190: LD_VAR 0 3
18194: NOT
18195: IFFALSE 18037
// end ;
18197: PPOPN 5
18199: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18200: LD_EXP 3
18204: IFFALSE 18586
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
// begin enable ;
18215: ENABLE
// base := mc_amer ;
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: LD_EXP 5
18225: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18226: LD_INT 22
18228: PUSH
18229: LD_INT 4
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 23
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 30
18248: PUSH
18249: LD_INT 3
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18586
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 9
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 3
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 7
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 7
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL 79516 0 2
// repeat wait ( 0 0$1 ) ;
18376: LD_INT 35
18378: PPUSH
18379: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18383: LD_VAR 0 2
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL 80934 0 2
18395: PUSH
18396: LD_INT 5
18398: GREATEREQUAL
18399: PUSH
18400: LD_OWVAR 1
18404: PUSH
18405: LD_INT 21000
18407: MOD
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18376
// wait ( 0 0$30 ) ;
18415: LD_INT 1050
18417: PPUSH
18418: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18422: LD_ADDR_VAR 0 3
18426: PUSH
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_INT 1
18434: PPUSH
18435: CALL 80934 0 2
18439: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18440: LD_ADDR_EXP 64
18444: PUSH
18445: LD_EXP 64
18449: PPUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_EXP 64
18459: PUSH
18460: LD_VAR 0 2
18464: ARRAY
18465: PUSH
18466: LD_VAR 0 3
18470: DIFF
18471: PPUSH
18472: CALL_OW 1
18476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18477: LD_INT 35
18479: PPUSH
18480: CALL_OW 67
// for i in tmp do
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18577
// begin if GetLives ( i ) > 251 then
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 256
18506: PUSH
18507: LD_INT 251
18509: GREATER
18510: IFFALSE 18548
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_INT 81
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 74
18541: PPUSH
18542: CALL_OW 115
18546: GO 18575
// if IsDead ( i ) then
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 301
18557: IFFALSE 18575
// tmp := tmp diff i ;
18559: LD_ADDR_VAR 0 3
18563: PUSH
18564: LD_VAR 0 3
18568: PUSH
18569: LD_VAR 0 1
18573: DIFF
18574: ST_TO_ADDR
// end ;
18575: GO 18494
18577: POP
18578: POP
// until not tmp ;
18579: LD_VAR 0 3
18583: NOT
18584: IFFALSE 18477
// end ; end_of_file
18586: PPOPN 4
18588: END
// export function CustomEvent ( event ) ; begin
18589: LD_INT 0
18591: PPUSH
// end ;
18592: LD_VAR 0 2
18596: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_VAR 0 2
18610: PUSH
18611: LD_INT 4
18613: EQUAL
18614: AND
18615: IFFALSE 18643
// begin SayRadio ( Powell , DP-Lost ) ;
18617: LD_EXP 12
18621: PPUSH
18622: LD_STRING DP-Lost
18624: PPUSH
18625: CALL_OW 94
// wait ( 0 0$2 ) ;
18629: LD_INT 70
18631: PPUSH
18632: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18636: LD_STRING FriendlyFire
18638: PPUSH
18639: CALL_OW 104
// end ; end ;
18643: PPOPN 2
18645: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL 96911 0 1
// if GameType = 1 then
18655: LD_EXP 2
18659: PUSH
18660: LD_INT 1
18662: EQUAL
18663: IFFALSE 18898
// begin if un = playerCommander then
18665: LD_VAR 0 1
18669: PUSH
18670: LD_EXP 9
18674: EQUAL
18675: IFFALSE 18684
// YouLost ( commanderDied ) ;
18677: LD_STRING commanderDied
18679: PPUSH
18680: CALL_OW 104
// if un = allyCommander then
18684: LD_VAR 0 1
18688: PUSH
18689: LD_EXP 11
18693: EQUAL
18694: IFFALSE 18703
// YouLost ( Theta ) ;
18696: LD_STRING Theta
18698: PPUSH
18699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18703: LD_VAR 0 1
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: IN
18755: IFFALSE 18771
// legDestCounter := legDestCounter + 1 ;
18757: LD_ADDR_EXP 18
18761: PUSH
18762: LD_EXP 18
18766: PUSH
18767: LD_INT 1
18769: PLUS
18770: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 21
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: IN
18823: IFFALSE 18839
// allyDestCounter := allyDestCounter + 1 ;
18825: LD_ADDR_EXP 22
18829: PUSH
18830: LD_EXP 22
18834: PUSH
18835: LD_INT 1
18837: PLUS
18838: ST_TO_ADDR
// if un in ruOutpost then
18839: LD_VAR 0 1
18843: PUSH
18844: LD_EXP 14
18848: IN
18849: IFFALSE 18898
// begin ruOutpost := ruOutpost diff un ;
18851: LD_ADDR_EXP 14
18855: PUSH
18856: LD_EXP 14
18860: PUSH
18861: LD_VAR 0 1
18865: DIFF
18866: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18867: LD_ADDR_EXP 15
18871: PUSH
18872: LD_EXP 15
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: LD_EXP 15
18884: PUSH
18885: LD_INT 1
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: PLUS
18892: PPUSH
18893: CALL_OW 1
18897: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL 82908 0 1
// end ;
18907: PPOPN 1
18909: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_VAR 0 2
18919: PPUSH
18920: CALL 85242 0 2
// end ;
18924: PPOPN 2
18926: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL 84310 0 1
// end ;
18936: PPOPN 1
18938: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL 84551 0 1
// end ;
18948: PPOPN 1
18950: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18951: LD_VAR 0 1
18955: PUSH
18956: LD_INT 14
18958: EQUAL
18959: PUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 1
18972: EQUAL
18973: AND
18974: IFFALSE 19015
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18976: LD_EXP 9
18980: PPUSH
18981: LD_STRING D
18983: PUSH
18984: LD_STRING I
18986: PUSH
18987: LD_STRING J
18989: PUSH
18990: LD_STRING S
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: LD_EXP 25
19002: ARRAY
19003: STR
19004: PUSH
19005: LD_STRING -1-Laser
19007: STR
19008: PPUSH
19009: CALL_OW 88
// exit ;
19013: GO 19157
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 7
19022: EQUAL
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 255
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: AND
19038: IFFALSE 19079
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19040: LD_EXP 9
19044: PPUSH
19045: LD_STRING D
19047: PUSH
19048: LD_STRING I
19050: PUSH
19051: LD_STRING J
19053: PUSH
19054: LD_STRING S
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: LD_EXP 25
19066: ARRAY
19067: STR
19068: PUSH
19069: LD_STRING -1-Materialization
19071: STR
19072: PPUSH
19073: CALL_OW 88
// exit ;
19077: GO 19157
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 25
19086: EQUAL
19087: PUSH
19088: LD_VAR 0 2
19092: PPUSH
19093: CALL_OW 255
19097: PUSH
19098: LD_INT 1
19100: EQUAL
19101: AND
19102: IFFALSE 19143
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19104: LD_EXP 9
19108: PPUSH
19109: LD_STRING D
19111: PUSH
19112: LD_STRING I
19114: PUSH
19115: LD_STRING J
19117: PUSH
19118: LD_STRING S
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: LD_EXP 25
19130: ARRAY
19131: STR
19132: PUSH
19133: LD_STRING -1-Rocket
19135: STR
19136: PPUSH
19137: CALL_OW 88
// exit ;
19141: GO 19157
// end ; MCE_ResearchComplete ( tech , lab ) ;
19143: LD_VAR 0 1
19147: PPUSH
19148: LD_VAR 0 2
19152: PPUSH
19153: CALL 82604 0 2
// end ;
19157: PPOPN 2
19159: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_VAR 0 3
19174: PPUSH
19175: LD_VAR 0 4
19179: PPUSH
19180: LD_VAR 0 5
19184: PPUSH
19185: CALL 82224 0 5
// end ;
19189: PPOPN 5
19191: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19192: LD_VAR 0 1
19196: PPUSH
19197: LD_VAR 0 2
19201: PPUSH
19202: CALL 81820 0 2
// end ;
19206: PPOPN 2
19208: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_VAR 0 2
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: CALL 81658 0 4
// end ;
19233: PPOPN 4
19235: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: CALL 81433 0 3
// end ;
19255: PPOPN 3
19257: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_VAR 0 2
19267: PPUSH
19268: CALL 81318 0 2
// end ;
19272: PPOPN 2
19274: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: LD_VAR 0 2
19284: PPUSH
19285: CALL 85503 0 2
// end ;
19289: PPOPN 2
19291: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_VAR 0 3
19306: PPUSH
19307: LD_VAR 0 4
19311: PPUSH
19312: CALL 85719 0 4
// end ;
19316: PPOPN 4
19318: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL 81127 0 2
// end ;
19333: PPOPN 2
19335: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL 97017 0 1
// end ; end_of_file
19345: PPOPN 1
19347: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
// if exist_mode then
19352: LD_VAR 0 2
19356: IFFALSE 19381
// unit := CreateCharacter ( prefix & ident ) else
19358: LD_ADDR_VAR 0 5
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 1
19372: STR
19373: PPUSH
19374: CALL_OW 34
19378: ST_TO_ADDR
19379: GO 19396
// unit := NewCharacter ( ident ) ;
19381: LD_ADDR_VAR 0 5
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 25
19395: ST_TO_ADDR
// result := unit ;
19396: LD_ADDR_VAR 0 4
19400: PUSH
19401: LD_VAR 0 5
19405: ST_TO_ADDR
// end ;
19406: LD_VAR 0 4
19410: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
// if not side or not nation then
19415: LD_VAR 0 1
19419: NOT
19420: PUSH
19421: LD_VAR 0 2
19425: NOT
19426: OR
19427: IFFALSE 19431
// exit ;
19429: GO 20195
// case nation of nation_american :
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 1
19438: DOUBLE
19439: EQUAL
19440: IFTRUE 19444
19442: GO 19658
19444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_INT 35
19452: PUSH
19453: LD_INT 45
19455: PUSH
19456: LD_INT 46
19458: PUSH
19459: LD_INT 47
19461: PUSH
19462: LD_INT 82
19464: PUSH
19465: LD_INT 83
19467: PUSH
19468: LD_INT 84
19470: PUSH
19471: LD_INT 85
19473: PUSH
19474: LD_INT 86
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 6
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 7
19494: PUSH
19495: LD_INT 12
19497: PUSH
19498: LD_INT 13
19500: PUSH
19501: LD_INT 10
19503: PUSH
19504: LD_INT 14
19506: PUSH
19507: LD_INT 20
19509: PUSH
19510: LD_INT 21
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 32
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: LD_INT 36
19527: PUSH
19528: LD_INT 69
19530: PUSH
19531: LD_INT 39
19533: PUSH
19534: LD_INT 34
19536: PUSH
19537: LD_INT 40
19539: PUSH
19540: LD_INT 48
19542: PUSH
19543: LD_INT 49
19545: PUSH
19546: LD_INT 50
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: LD_INT 52
19554: PUSH
19555: LD_INT 53
19557: PUSH
19558: LD_INT 54
19560: PUSH
19561: LD_INT 55
19563: PUSH
19564: LD_INT 56
19566: PUSH
19567: LD_INT 57
19569: PUSH
19570: LD_INT 58
19572: PUSH
19573: LD_INT 59
19575: PUSH
19576: LD_INT 60
19578: PUSH
19579: LD_INT 61
19581: PUSH
19582: LD_INT 62
19584: PUSH
19585: LD_INT 80
19587: PUSH
19588: LD_INT 82
19590: PUSH
19591: LD_INT 83
19593: PUSH
19594: LD_INT 84
19596: PUSH
19597: LD_INT 85
19599: PUSH
19600: LD_INT 86
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20119
19658: LD_INT 2
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19888
19666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19667: LD_ADDR_VAR 0 4
19671: PUSH
19672: LD_INT 35
19674: PUSH
19675: LD_INT 45
19677: PUSH
19678: LD_INT 46
19680: PUSH
19681: LD_INT 47
19683: PUSH
19684: LD_INT 82
19686: PUSH
19687: LD_INT 83
19689: PUSH
19690: LD_INT 84
19692: PUSH
19693: LD_INT 85
19695: PUSH
19696: LD_INT 87
19698: PUSH
19699: LD_INT 70
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 11
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: LD_INT 5
19716: PUSH
19717: LD_INT 6
19719: PUSH
19720: LD_INT 15
19722: PUSH
19723: LD_INT 18
19725: PUSH
19726: LD_INT 7
19728: PUSH
19729: LD_INT 17
19731: PUSH
19732: LD_INT 8
19734: PUSH
19735: LD_INT 20
19737: PUSH
19738: LD_INT 21
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_INT 72
19746: PUSH
19747: LD_INT 26
19749: PUSH
19750: LD_INT 69
19752: PUSH
19753: LD_INT 39
19755: PUSH
19756: LD_INT 40
19758: PUSH
19759: LD_INT 41
19761: PUSH
19762: LD_INT 42
19764: PUSH
19765: LD_INT 43
19767: PUSH
19768: LD_INT 48
19770: PUSH
19771: LD_INT 49
19773: PUSH
19774: LD_INT 50
19776: PUSH
19777: LD_INT 51
19779: PUSH
19780: LD_INT 52
19782: PUSH
19783: LD_INT 53
19785: PUSH
19786: LD_INT 54
19788: PUSH
19789: LD_INT 55
19791: PUSH
19792: LD_INT 56
19794: PUSH
19795: LD_INT 60
19797: PUSH
19798: LD_INT 61
19800: PUSH
19801: LD_INT 62
19803: PUSH
19804: LD_INT 66
19806: PUSH
19807: LD_INT 67
19809: PUSH
19810: LD_INT 68
19812: PUSH
19813: LD_INT 81
19815: PUSH
19816: LD_INT 82
19818: PUSH
19819: LD_INT 83
19821: PUSH
19822: LD_INT 84
19824: PUSH
19825: LD_INT 85
19827: PUSH
19828: LD_INT 87
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
19886: GO 20119
19888: LD_INT 3
19890: DOUBLE
19891: EQUAL
19892: IFTRUE 19896
19894: GO 20118
19896: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19897: LD_ADDR_VAR 0 4
19901: PUSH
19902: LD_INT 46
19904: PUSH
19905: LD_INT 47
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 82
19916: PUSH
19917: LD_INT 83
19919: PUSH
19920: LD_INT 84
19922: PUSH
19923: LD_INT 85
19925: PUSH
19926: LD_INT 86
19928: PUSH
19929: LD_INT 11
19931: PUSH
19932: LD_INT 9
19934: PUSH
19935: LD_INT 20
19937: PUSH
19938: LD_INT 19
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 24
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_INT 25
19952: PUSH
19953: LD_INT 28
19955: PUSH
19956: LD_INT 29
19958: PUSH
19959: LD_INT 30
19961: PUSH
19962: LD_INT 31
19964: PUSH
19965: LD_INT 37
19967: PUSH
19968: LD_INT 38
19970: PUSH
19971: LD_INT 32
19973: PUSH
19974: LD_INT 27
19976: PUSH
19977: LD_INT 33
19979: PUSH
19980: LD_INT 69
19982: PUSH
19983: LD_INT 39
19985: PUSH
19986: LD_INT 34
19988: PUSH
19989: LD_INT 40
19991: PUSH
19992: LD_INT 71
19994: PUSH
19995: LD_INT 23
19997: PUSH
19998: LD_INT 44
20000: PUSH
20001: LD_INT 48
20003: PUSH
20004: LD_INT 49
20006: PUSH
20007: LD_INT 50
20009: PUSH
20010: LD_INT 51
20012: PUSH
20013: LD_INT 52
20015: PUSH
20016: LD_INT 53
20018: PUSH
20019: LD_INT 54
20021: PUSH
20022: LD_INT 55
20024: PUSH
20025: LD_INT 56
20027: PUSH
20028: LD_INT 57
20030: PUSH
20031: LD_INT 58
20033: PUSH
20034: LD_INT 59
20036: PUSH
20037: LD_INT 63
20039: PUSH
20040: LD_INT 64
20042: PUSH
20043: LD_INT 65
20045: PUSH
20046: LD_INT 82
20048: PUSH
20049: LD_INT 83
20051: PUSH
20052: LD_INT 84
20054: PUSH
20055: LD_INT 85
20057: PUSH
20058: LD_INT 86
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 20119
20118: POP
// if state > - 1 and state < 3 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: GREATER
20128: PUSH
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 3
20136: LESS
20137: AND
20138: IFFALSE 20195
// for i in result do
20140: LD_ADDR_VAR 0 5
20144: PUSH
20145: LD_VAR 0 4
20149: PUSH
20150: FOR_IN
20151: IFFALSE 20193
// if GetTech ( i , side ) <> state then
20153: LD_VAR 0 5
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 321
20167: PUSH
20168: LD_VAR 0 3
20172: NONEQUAL
20173: IFFALSE 20191
// result := result diff i ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_VAR 0 4
20184: PUSH
20185: LD_VAR 0 5
20189: DIFF
20190: ST_TO_ADDR
20191: GO 20150
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 4
20199: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// result := true ;
20205: LD_ADDR_VAR 0 3
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20213: LD_ADDR_VAR 0 5
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 480
20227: ST_TO_ADDR
// if not tmp then
20228: LD_VAR 0 5
20232: NOT
20233: IFFALSE 20237
// exit ;
20235: GO 20286
// for i in tmp do
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: LD_VAR 0 5
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20284
// if GetTech ( i , side ) <> state_researched then
20250: LD_VAR 0 4
20254: PPUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 321
20264: PUSH
20265: LD_INT 2
20267: NONEQUAL
20268: IFFALSE 20282
// begin result := false ;
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// exit ;
20278: POP
20279: POP
20280: GO 20286
// end ;
20282: GO 20247
20284: POP
20285: POP
// end ;
20286: LD_VAR 0 3
20290: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20306: LD_VAR 0 1
20310: NOT
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 257
20321: PUSH
20322: LD_INT 9
20324: NONEQUAL
20325: OR
20326: IFFALSE 20330
// exit ;
20328: GO 20903
// side := GetSide ( unit ) ;
20330: LD_ADDR_VAR 0 9
20334: PUSH
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 255
20344: ST_TO_ADDR
// tech_space := tech_spacanom ;
20345: LD_ADDR_VAR 0 12
20349: PUSH
20350: LD_INT 29
20352: ST_TO_ADDR
// tech_time := tech_taurad ;
20353: LD_ADDR_VAR 0 13
20357: PUSH
20358: LD_INT 28
20360: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20361: LD_ADDR_VAR 0 11
20365: PUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 310
20375: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20376: LD_VAR 0 11
20380: PPUSH
20381: CALL_OW 247
20385: PUSH
20386: LD_INT 2
20388: EQUAL
20389: IFFALSE 20393
// exit ;
20391: GO 20903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: LD_INT 81
20400: PUSH
20401: LD_VAR 0 9
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: LD_INT 21
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// if not tmp then
20436: LD_VAR 0 8
20440: NOT
20441: IFFALSE 20445
// exit ;
20443: GO 20903
// if in_unit then
20445: LD_VAR 0 11
20449: IFFALSE 20473
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20451: LD_ADDR_VAR 0 10
20455: PUSH
20456: LD_VAR 0 8
20460: PPUSH
20461: LD_VAR 0 11
20465: PPUSH
20466: CALL_OW 74
20470: ST_TO_ADDR
20471: GO 20493
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20473: LD_ADDR_VAR 0 10
20477: PUSH
20478: LD_VAR 0 8
20482: PPUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 74
20492: ST_TO_ADDR
// if not enemy then
20493: LD_VAR 0 10
20497: NOT
20498: IFFALSE 20502
// exit ;
20500: GO 20903
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20502: LD_VAR 0 11
20506: PUSH
20507: LD_VAR 0 11
20511: PPUSH
20512: LD_VAR 0 10
20516: PPUSH
20517: CALL_OW 296
20521: PUSH
20522: LD_INT 13
20524: GREATER
20525: AND
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: CALL_OW 296
20541: PUSH
20542: LD_INT 12
20544: GREATER
20545: OR
20546: IFFALSE 20550
// exit ;
20548: GO 20903
// missile := [ 1 ] ;
20550: LD_ADDR_VAR 0 14
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20561: LD_VAR 0 9
20565: PPUSH
20566: LD_VAR 0 12
20570: PPUSH
20571: CALL_OW 325
20575: IFFALSE 20604
// missile := Insert ( missile , missile + 1 , 2 ) ;
20577: LD_ADDR_VAR 0 14
20581: PUSH
20582: LD_VAR 0 14
20586: PPUSH
20587: LD_VAR 0 14
20591: PUSH
20592: LD_INT 1
20594: PLUS
20595: PPUSH
20596: LD_INT 2
20598: PPUSH
20599: CALL_OW 2
20603: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20604: LD_VAR 0 9
20608: PPUSH
20609: LD_VAR 0 13
20613: PPUSH
20614: CALL_OW 325
20618: PUSH
20619: LD_VAR 0 10
20623: PPUSH
20624: CALL_OW 255
20628: PPUSH
20629: LD_VAR 0 13
20633: PPUSH
20634: CALL_OW 325
20638: NOT
20639: AND
20640: IFFALSE 20669
// missile := Insert ( missile , missile + 1 , 3 ) ;
20642: LD_ADDR_VAR 0 14
20646: PUSH
20647: LD_VAR 0 14
20651: PPUSH
20652: LD_VAR 0 14
20656: PUSH
20657: LD_INT 1
20659: PLUS
20660: PPUSH
20661: LD_INT 3
20663: PPUSH
20664: CALL_OW 2
20668: ST_TO_ADDR
// if missile < 2 then
20669: LD_VAR 0 14
20673: PUSH
20674: LD_INT 2
20676: LESS
20677: IFFALSE 20681
// exit ;
20679: GO 20903
// x := GetX ( enemy ) ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_VAR 0 10
20690: PPUSH
20691: CALL_OW 250
20695: ST_TO_ADDR
// y := GetY ( enemy ) ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 251
20710: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20711: LD_ADDR_VAR 0 6
20715: PUSH
20716: LD_VAR 0 4
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: CALL_OW 12
20732: PLUS
20733: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20734: LD_ADDR_VAR 0 7
20738: PUSH
20739: LD_VAR 0 5
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 12
20755: PLUS
20756: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: CALL_OW 488
20771: NOT
20772: IFFALSE 20794
// begin _x := x ;
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: LD_VAR 0 4
20783: ST_TO_ADDR
// _y := y ;
20784: LD_ADDR_VAR 0 7
20788: PUSH
20789: LD_VAR 0 5
20793: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 14
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// case i of 1 :
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 1
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20842
20825: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_VAR 0 10
20835: PPUSH
20836: CALL_OW 115
20840: GO 20903
20842: LD_INT 2
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20872
20850: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_VAR 0 6
20860: PPUSH
20861: LD_VAR 0 7
20865: PPUSH
20866: CALL_OW 153
20870: GO 20903
20872: LD_INT 3
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20902
20880: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_VAR 0 6
20890: PPUSH
20891: LD_VAR 0 7
20895: PPUSH
20896: CALL_OW 154
20900: GO 20903
20902: POP
// end ;
20903: LD_VAR 0 2
20907: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not unit or not building then
20916: LD_VAR 0 1
20920: NOT
20921: PUSH
20922: LD_VAR 0 2
20926: NOT
20927: OR
20928: IFFALSE 20932
// exit ;
20930: GO 21090
// x := GetX ( building ) ;
20932: LD_ADDR_VAR 0 5
20936: PUSH
20937: LD_VAR 0 2
20941: PPUSH
20942: CALL_OW 250
20946: ST_TO_ADDR
// y := GetY ( building ) ;
20947: LD_ADDR_VAR 0 6
20951: PUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 251
20961: ST_TO_ADDR
// for i = 0 to 5 do
20962: LD_ADDR_VAR 0 4
20966: PUSH
20967: DOUBLE
20968: LD_INT 0
20970: DEC
20971: ST_TO_ADDR
20972: LD_INT 5
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21088
// begin _x := ShiftX ( x , i , 3 ) ;
20978: LD_ADDR_VAR 0 7
20982: PUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: LD_VAR 0 4
20992: PPUSH
20993: LD_INT 3
20995: PPUSH
20996: CALL_OW 272
21000: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21001: LD_ADDR_VAR 0 8
21005: PUSH
21006: LD_VAR 0 6
21010: PPUSH
21011: LD_VAR 0 4
21015: PPUSH
21016: LD_INT 3
21018: PPUSH
21019: CALL_OW 273
21023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21024: LD_VAR 0 7
21028: PPUSH
21029: LD_VAR 0 8
21033: PPUSH
21034: CALL_OW 488
21038: NOT
21039: IFFALSE 21043
// continue ;
21041: GO 20975
// if HexInfo ( _x , _y ) = 0 then
21043: LD_VAR 0 7
21047: PPUSH
21048: LD_VAR 0 8
21052: PPUSH
21053: CALL_OW 428
21057: PUSH
21058: LD_INT 0
21060: EQUAL
21061: IFFALSE 21086
// begin ComMoveXY ( unit , _x , _y ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_VAR 0 7
21072: PPUSH
21073: LD_VAR 0 8
21077: PPUSH
21078: CALL_OW 111
// exit ;
21082: POP
21083: POP
21084: GO 21090
// end ; end ;
21086: GO 20975
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 3
21094: RET
// export function ScanBase ( side , base_area ) ; begin
21095: LD_INT 0
21097: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21098: LD_ADDR_VAR 0 3
21102: PUSH
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 81
21110: PUSH
21111: LD_VAR 0 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 70
21124: ST_TO_ADDR
// end ;
21125: LD_VAR 0 3
21129: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
21135: PPUSH
// result := false ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// side := GetSide ( unit ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 255
21158: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21159: LD_ADDR_VAR 0 4
21163: PUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 248
21173: ST_TO_ADDR
// case nat of 1 :
21174: LD_VAR 0 4
21178: PUSH
21179: LD_INT 1
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21198
21187: POP
// tech := tech_lassight ; 2 :
21188: LD_ADDR_VAR 0 5
21192: PUSH
21193: LD_INT 12
21195: ST_TO_ADDR
21196: GO 21237
21198: LD_INT 2
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21217
21206: POP
// tech := tech_mortar ; 3 :
21207: LD_ADDR_VAR 0 5
21211: PUSH
21212: LD_INT 41
21214: ST_TO_ADDR
21215: GO 21237
21217: LD_INT 3
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21236
21225: POP
// tech := tech_bazooka ; end ;
21226: LD_ADDR_VAR 0 5
21230: PUSH
21231: LD_INT 44
21233: ST_TO_ADDR
21234: GO 21237
21236: POP
// if Researched ( side , tech ) then
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL_OW 325
21251: IFFALSE 21278
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_INT 5
21260: PUSH
21261: LD_INT 8
21263: PUSH
21264: LD_INT 9
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_VAR 0 4
21276: ARRAY
21277: ST_TO_ADDR
// end ;
21278: LD_VAR 0 2
21282: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
// if not mines then
21288: LD_VAR 0 2
21292: NOT
21293: IFFALSE 21297
// exit ;
21295: GO 21441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21297: LD_ADDR_VAR 0 5
21301: PUSH
21302: LD_INT 81
21304: PUSH
21305: LD_VAR 0 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PPUSH
21335: CALL_OW 69
21339: ST_TO_ADDR
// for i in mines do
21340: LD_ADDR_VAR 0 4
21344: PUSH
21345: LD_VAR 0 2
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21439
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21353: LD_VAR 0 4
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: PPUSH
21362: LD_VAR 0 4
21366: PUSH
21367: LD_INT 2
21369: ARRAY
21370: PPUSH
21371: CALL_OW 458
21375: NOT
21376: IFFALSE 21380
// continue ;
21378: GO 21350
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21380: LD_VAR 0 4
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PPUSH
21389: LD_VAR 0 4
21393: PUSH
21394: LD_INT 2
21396: ARRAY
21397: PPUSH
21398: CALL_OW 428
21402: PUSH
21403: LD_VAR 0 5
21407: IN
21408: IFFALSE 21437
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 1
21417: ARRAY
21418: PPUSH
21419: LD_VAR 0 4
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: PPUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: CALL_OW 456
// end ;
21437: GO 21350
21439: POP
21440: POP
// end ;
21441: LD_VAR 0 3
21445: RET
// export function Count ( array ) ; var i ; begin
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
// result := 0 ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// for i in array do
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: PUSH
21468: FOR_IN
21469: IFFALSE 21493
// if i then
21471: LD_VAR 0 3
21475: IFFALSE 21491
// result := result + 1 ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_INT 1
21489: PLUS
21490: ST_TO_ADDR
21491: GO 21468
21493: POP
21494: POP
// end ;
21495: LD_VAR 0 2
21499: RET
// export function IsEmpty ( building ) ; begin
21500: LD_INT 0
21502: PPUSH
// if not building then
21503: LD_VAR 0 1
21507: NOT
21508: IFFALSE 21512
// exit ;
21510: GO 21555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21512: LD_ADDR_VAR 0 2
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 255
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 58
21541: PUSH
21542: EMPTY
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 69
21553: IN
21554: ST_TO_ADDR
// end ;
21555: LD_VAR 0 2
21559: RET
// export function IsNotFull ( building ) ; begin
21560: LD_INT 0
21562: PPUSH
// if not building then
21563: LD_VAR 0 1
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21591
// result := UnitsInside ( building ) < 6 ;
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 313
21586: PUSH
21587: LD_INT 6
21589: LESS
21590: ST_TO_ADDR
// end ;
21591: LD_VAR 0 2
21595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21596: LD_INT 0
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
// tmp := [ ] ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: EMPTY
21608: ST_TO_ADDR
// list := [ ] ;
21609: LD_ADDR_VAR 0 5
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// for i = 16 to 25 do
21616: LD_ADDR_VAR 0 4
21620: PUSH
21621: DOUBLE
21622: LD_INT 16
21624: DEC
21625: ST_TO_ADDR
21626: LD_INT 25
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 255
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 91
21661: PUSH
21662: LD_VAR 0 1
21666: PUSH
21667: LD_INT 6
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_VAR 0 4
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ADD
21700: ST_TO_ADDR
21701: GO 21629
21703: POP
21704: POP
// for i = 1 to tmp do
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: DOUBLE
21711: LD_INT 1
21713: DEC
21714: ST_TO_ADDR
21715: LD_VAR 0 3
21719: PUSH
21720: FOR_TO
21721: IFFALSE 21809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21723: LD_ADDR_VAR 0 5
21727: PUSH
21728: LD_VAR 0 5
21732: PUSH
21733: LD_VAR 0 3
21737: PUSH
21738: LD_VAR 0 4
21742: ARRAY
21743: PPUSH
21744: CALL_OW 266
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ARRAY
21759: PPUSH
21760: CALL_OW 250
21764: PUSH
21765: LD_VAR 0 3
21769: PUSH
21770: LD_VAR 0 4
21774: ARRAY
21775: PPUSH
21776: CALL_OW 251
21780: PUSH
21781: LD_VAR 0 3
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PPUSH
21792: CALL_OW 254
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: ADD
21806: ST_TO_ADDR
21807: GO 21720
21809: POP
21810: POP
// result := list ;
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_VAR 0 5
21820: ST_TO_ADDR
// end ;
21821: LD_VAR 0 2
21825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21826: LD_INT 0
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
// if not factory then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 22437
// if control = control_apeman then
21844: LD_VAR 0 4
21848: PUSH
21849: LD_INT 5
21851: EQUAL
21852: IFFALSE 21961
// begin tmp := UnitsInside ( factory ) ;
21854: LD_ADDR_VAR 0 8
21858: PUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 313
21868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_INT 25
21876: PUSH
21877: LD_INT 12
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 72
21888: NOT
21889: IFFALSE 21899
// control := control_manual ;
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21899: LD_ADDR_VAR 0 8
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL 21596 0 1
21913: ST_TO_ADDR
// if tmp then
21914: LD_VAR 0 8
21918: IFFALSE 21961
// begin for i in tmp do
21920: LD_ADDR_VAR 0 7
21924: PUSH
21925: LD_VAR 0 8
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21959
// if i [ 1 ] = b_ext_radio then
21933: LD_VAR 0 7
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PUSH
21942: LD_INT 22
21944: EQUAL
21945: IFFALSE 21957
// begin control := control_remote ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_INT 2
21954: ST_TO_ADDR
// break ;
21955: GO 21959
// end ;
21957: GO 21930
21959: POP
21960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21961: LD_VAR 0 1
21965: PPUSH
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_VAR 0 4
21980: PPUSH
21981: LD_VAR 0 5
21985: PPUSH
21986: CALL_OW 448
21990: IFFALSE 22025
// begin result := [ chassis , engine , control , weapon ] ;
21992: LD_ADDR_VAR 0 6
21996: PUSH
21997: LD_VAR 0 2
22001: PUSH
22002: LD_VAR 0 3
22006: PUSH
22007: LD_VAR 0 4
22011: PUSH
22012: LD_VAR 0 5
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: ST_TO_ADDR
// exit ;
22023: GO 22437
// end ; _chassis := AvailableChassisList ( factory ) ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 475
22039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22040: LD_ADDR_VAR 0 11
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 476
22054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22055: LD_ADDR_VAR 0 12
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 477
22069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22070: LD_ADDR_VAR 0 10
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 478
22084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22085: LD_VAR 0 9
22089: NOT
22090: PUSH
22091: LD_VAR 0 11
22095: NOT
22096: OR
22097: PUSH
22098: LD_VAR 0 12
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 10
22109: NOT
22110: OR
22111: IFFALSE 22146
// begin result := [ chassis , engine , control , weapon ] ;
22113: LD_ADDR_VAR 0 6
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: LD_VAR 0 3
22127: PUSH
22128: LD_VAR 0 4
22132: PUSH
22133: LD_VAR 0 5
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: ST_TO_ADDR
// exit ;
22144: GO 22437
// end ; if not chassis in _chassis then
22146: LD_VAR 0 2
22150: PUSH
22151: LD_VAR 0 9
22155: IN
22156: NOT
22157: IFFALSE 22183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22159: LD_ADDR_VAR 0 2
22163: PUSH
22164: LD_VAR 0 9
22168: PUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_VAR 0 9
22176: PPUSH
22177: CALL_OW 12
22181: ARRAY
22182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22183: LD_VAR 0 2
22187: PPUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: CALL 22442 0 2
22197: NOT
22198: IFFALSE 22257
// repeat engine := _engine [ 1 ] ;
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_VAR 0 11
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22214: LD_ADDR_VAR 0 11
22218: PUSH
22219: LD_VAR 0 11
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: CALL_OW 3
22231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22232: LD_VAR 0 2
22236: PPUSH
22237: LD_VAR 0 3
22241: PPUSH
22242: CALL 22442 0 2
22246: PUSH
22247: LD_VAR 0 11
22251: PUSH
22252: EMPTY
22253: EQUAL
22254: OR
22255: IFFALSE 22200
// if not control in _control then
22257: LD_VAR 0 4
22261: PUSH
22262: LD_VAR 0 12
22266: IN
22267: NOT
22268: IFFALSE 22294
// control := _control [ rand ( 1 , _control ) ] ;
22270: LD_ADDR_VAR 0 4
22274: PUSH
22275: LD_VAR 0 12
22279: PUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_VAR 0 12
22287: PPUSH
22288: CALL_OW 12
22292: ARRAY
22293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22294: LD_VAR 0 2
22298: PPUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL 22662 0 2
22308: NOT
22309: IFFALSE 22368
// repeat weapon := _weapon [ 1 ] ;
22311: LD_ADDR_VAR 0 5
22315: PUSH
22316: LD_VAR 0 10
22320: PUSH
22321: LD_INT 1
22323: ARRAY
22324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22325: LD_ADDR_VAR 0 10
22329: PUSH
22330: LD_VAR 0 10
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 3
22342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL 22662 0 2
22357: PUSH
22358: LD_VAR 0 10
22362: PUSH
22363: EMPTY
22364: EQUAL
22365: OR
22366: IFFALSE 22311
// result := [ ] ;
22368: LD_ADDR_VAR 0 6
22372: PUSH
22373: EMPTY
22374: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22375: LD_VAR 0 1
22379: PPUSH
22380: LD_VAR 0 2
22384: PPUSH
22385: LD_VAR 0 3
22389: PPUSH
22390: LD_VAR 0 4
22394: PPUSH
22395: LD_VAR 0 5
22399: PPUSH
22400: CALL_OW 448
22404: IFFALSE 22437
// result := [ chassis , engine , control , weapon ] ;
22406: LD_ADDR_VAR 0 6
22410: PUSH
22411: LD_VAR 0 2
22415: PUSH
22416: LD_VAR 0 3
22420: PUSH
22421: LD_VAR 0 4
22425: PUSH
22426: LD_VAR 0 5
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
// end ;
22437: LD_VAR 0 6
22441: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22442: LD_INT 0
22444: PPUSH
// if not chassis or not engine then
22445: LD_VAR 0 1
22449: NOT
22450: PUSH
22451: LD_VAR 0 2
22455: NOT
22456: OR
22457: IFFALSE 22461
// exit ;
22459: GO 22657
// case engine of engine_solar :
22461: LD_VAR 0 2
22465: PUSH
22466: LD_INT 2
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22512
22474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_INT 11
22482: PUSH
22483: LD_INT 12
22485: PUSH
22486: LD_INT 13
22488: PUSH
22489: LD_INT 14
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 22641
22512: LD_INT 1
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22582
22520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22521: LD_ADDR_VAR 0 3
22525: PUSH
22526: LD_INT 11
22528: PUSH
22529: LD_INT 12
22531: PUSH
22532: LD_INT 13
22534: PUSH
22535: LD_INT 14
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 3
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 21
22555: PUSH
22556: LD_INT 23
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 24
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: ST_TO_ADDR
22580: GO 22641
22582: LD_INT 3
22584: DOUBLE
22585: EQUAL
22586: IFTRUE 22590
22588: GO 22640
22590: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22591: LD_ADDR_VAR 0 3
22595: PUSH
22596: LD_INT 13
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 21
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_INT 23
22622: PUSH
22623: LD_INT 24
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 22641
22640: POP
// result := ( chassis in result ) ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_VAR 0 1
22650: PUSH
22651: LD_VAR 0 3
22655: IN
22656: ST_TO_ADDR
// end ;
22657: LD_VAR 0 3
22661: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22662: LD_INT 0
22664: PPUSH
// if not chassis or not weapon then
22665: LD_VAR 0 1
22669: NOT
22670: PUSH
22671: LD_VAR 0 2
22675: NOT
22676: OR
22677: IFFALSE 22681
// exit ;
22679: GO 23707
// case weapon of us_machine_gun :
22681: LD_VAR 0 2
22685: PUSH
22686: LD_INT 2
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22724
22694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22695: LD_ADDR_VAR 0 3
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
22722: GO 23691
22724: LD_INT 3
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22762
22732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: ST_TO_ADDR
22760: GO 23691
22762: LD_INT 11
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22800
22770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22771: LD_ADDR_VAR 0 3
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: LD_INT 4
22787: PUSH
22788: LD_INT 5
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
22798: GO 23691
22800: LD_INT 4
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22834
22808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23691
22834: LD_INT 5
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22868
22842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 4
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: ST_TO_ADDR
22866: GO 23691
22868: LD_INT 9
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22902
22876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22877: LD_ADDR_VAR 0 3
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 4
22890: PUSH
22891: LD_INT 5
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: ST_TO_ADDR
22900: GO 23691
22902: LD_INT 7
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22936
22910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22911: LD_ADDR_VAR 0 3
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 4
22924: PUSH
22925: LD_INT 5
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: ST_TO_ADDR
22934: GO 23691
22936: LD_INT 12
22938: DOUBLE
22939: EQUAL
22940: IFTRUE 22944
22942: GO 22970
22944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22945: LD_ADDR_VAR 0 3
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: LD_INT 4
22958: PUSH
22959: LD_INT 5
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
22968: GO 23691
22970: LD_INT 13
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23004
22978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 4
22992: PUSH
22993: LD_INT 5
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 23691
23004: LD_INT 14
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23030
23012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_INT 4
23020: PUSH
23021: LD_INT 5
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: ST_TO_ADDR
23028: GO 23691
23030: LD_INT 6
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23056
23038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: LD_INT 5
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 23691
23056: LD_INT 10
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23082
23064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 4
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 23691
23082: LD_INT 22
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23116
23090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23691
23116: LD_INT 23
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23150
23124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_INT 11
23132: PUSH
23133: LD_INT 12
23135: PUSH
23136: LD_INT 13
23138: PUSH
23139: LD_INT 14
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
23148: GO 23691
23150: LD_INT 24
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23184
23158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_INT 11
23166: PUSH
23167: LD_INT 12
23169: PUSH
23170: LD_INT 13
23172: PUSH
23173: LD_INT 14
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23691
23184: LD_INT 30
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23218
23192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 12
23203: PUSH
23204: LD_INT 13
23206: PUSH
23207: LD_INT 14
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: ST_TO_ADDR
23216: GO 23691
23218: LD_INT 25
23220: DOUBLE
23221: EQUAL
23222: IFTRUE 23226
23224: GO 23244
23226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_INT 13
23234: PUSH
23235: LD_INT 14
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: ST_TO_ADDR
23242: GO 23691
23244: LD_INT 27
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23270
23252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: ST_TO_ADDR
23268: GO 23691
23270: LD_INT 28
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23296
23278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 13
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23691
23296: LD_INT 29
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23322
23304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 13
23312: PUSH
23313: LD_INT 14
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
23320: GO 23691
23322: LD_INT 31
23324: DOUBLE
23325: EQUAL
23326: IFTRUE 23330
23328: GO 23348
23330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23331: LD_ADDR_VAR 0 3
23335: PUSH
23336: LD_INT 13
23338: PUSH
23339: LD_INT 14
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23691
23348: LD_INT 26
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23374
23356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: ST_TO_ADDR
23372: GO 23691
23374: LD_INT 42
23376: DOUBLE
23377: EQUAL
23378: IFTRUE 23382
23380: GO 23408
23382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_INT 21
23390: PUSH
23391: LD_INT 22
23393: PUSH
23394: LD_INT 23
23396: PUSH
23397: LD_INT 24
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
23406: GO 23691
23408: LD_INT 43
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23442
23416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 22
23427: PUSH
23428: LD_INT 23
23430: PUSH
23431: LD_INT 24
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23691
23442: LD_INT 44
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23476
23450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 23691
23476: LD_INT 45
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23510
23484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: ST_TO_ADDR
23508: GO 23691
23510: LD_INT 49
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23544
23518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23691
23544: LD_INT 51
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23578
23552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 22
23563: PUSH
23564: LD_INT 23
23566: PUSH
23567: LD_INT 24
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23691
23578: LD_INT 52
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23612
23586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 23
23600: PUSH
23601: LD_INT 24
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
23610: GO 23691
23612: LD_INT 53
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23638
23620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 24
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: ST_TO_ADDR
23636: GO 23691
23638: LD_INT 46
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23664
23646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 24
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 23691
23664: LD_INT 47
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23690
23672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 24
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: ST_TO_ADDR
23688: GO 23691
23690: POP
// result := ( chassis in result ) ;
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: LD_VAR 0 3
23705: IN
23706: ST_TO_ADDR
// end ;
23707: LD_VAR 0 3
23711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23712: LD_INT 0
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// result := array ;
23721: LD_ADDR_VAR 0 5
23725: PUSH
23726: LD_VAR 0 1
23730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23731: LD_VAR 0 1
23735: NOT
23736: PUSH
23737: LD_VAR 0 2
23741: NOT
23742: OR
23743: PUSH
23744: LD_VAR 0 3
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 2
23755: PUSH
23756: LD_VAR 0 1
23760: GREATER
23761: OR
23762: PUSH
23763: LD_VAR 0 3
23767: PUSH
23768: LD_VAR 0 1
23772: GREATER
23773: OR
23774: IFFALSE 23778
// exit ;
23776: GO 24074
// if direction then
23778: LD_VAR 0 4
23782: IFFALSE 23846
// begin d := 1 ;
23784: LD_ADDR_VAR 0 9
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
// if i_from > i_to then
23792: LD_VAR 0 2
23796: PUSH
23797: LD_VAR 0 3
23801: GREATER
23802: IFFALSE 23828
// length := ( array - i_from ) + i_to else
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_VAR 0 1
23813: PUSH
23814: LD_VAR 0 2
23818: MINUS
23819: PUSH
23820: LD_VAR 0 3
23824: PLUS
23825: ST_TO_ADDR
23826: GO 23844
// length := i_to - i_from ;
23828: LD_ADDR_VAR 0 11
23832: PUSH
23833: LD_VAR 0 3
23837: PUSH
23838: LD_VAR 0 2
23842: MINUS
23843: ST_TO_ADDR
// end else
23844: GO 23907
// begin d := - 1 ;
23846: LD_ADDR_VAR 0 9
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: ST_TO_ADDR
// if i_from > i_to then
23855: LD_VAR 0 2
23859: PUSH
23860: LD_VAR 0 3
23864: GREATER
23865: IFFALSE 23885
// length := i_from - i_to else
23867: LD_ADDR_VAR 0 11
23871: PUSH
23872: LD_VAR 0 2
23876: PUSH
23877: LD_VAR 0 3
23881: MINUS
23882: ST_TO_ADDR
23883: GO 23907
// length := ( array - i_to ) + i_from ;
23885: LD_ADDR_VAR 0 11
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_VAR 0 3
23899: MINUS
23900: PUSH
23901: LD_VAR 0 2
23905: PLUS
23906: ST_TO_ADDR
// end ; if not length then
23907: LD_VAR 0 11
23911: NOT
23912: IFFALSE 23916
// exit ;
23914: GO 24074
// tmp := array ;
23916: LD_ADDR_VAR 0 10
23920: PUSH
23921: LD_VAR 0 1
23925: ST_TO_ADDR
// for i = 1 to length do
23926: LD_ADDR_VAR 0 6
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_VAR 0 11
23940: PUSH
23941: FOR_TO
23942: IFFALSE 24062
// begin for j = 1 to array do
23944: LD_ADDR_VAR 0 7
23948: PUSH
23949: DOUBLE
23950: LD_INT 1
23952: DEC
23953: ST_TO_ADDR
23954: LD_VAR 0 1
23958: PUSH
23959: FOR_TO
23960: IFFALSE 24048
// begin k := j + d ;
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: LD_VAR 0 7
23971: PUSH
23972: LD_VAR 0 9
23976: PLUS
23977: ST_TO_ADDR
// if k > array then
23978: LD_VAR 0 8
23982: PUSH
23983: LD_VAR 0 1
23987: GREATER
23988: IFFALSE 23998
// k := 1 ;
23990: LD_ADDR_VAR 0 8
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// if not k then
23998: LD_VAR 0 8
24002: NOT
24003: IFFALSE 24015
// k := array ;
24005: LD_ADDR_VAR 0 8
24009: PUSH
24010: LD_VAR 0 1
24014: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_VAR 0 10
24024: PPUSH
24025: LD_VAR 0 8
24029: PPUSH
24030: LD_VAR 0 1
24034: PUSH
24035: LD_VAR 0 7
24039: ARRAY
24040: PPUSH
24041: CALL_OW 1
24045: ST_TO_ADDR
// end ;
24046: GO 23959
24048: POP
24049: POP
// array := tmp ;
24050: LD_ADDR_VAR 0 1
24054: PUSH
24055: LD_VAR 0 10
24059: ST_TO_ADDR
// end ;
24060: GO 23941
24062: POP
24063: POP
// result := array ;
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_VAR 0 1
24073: ST_TO_ADDR
// end ;
24074: LD_VAR 0 5
24078: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24079: LD_INT 0
24081: PPUSH
24082: PPUSH
// result := 0 ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 0
24090: ST_TO_ADDR
// if not array or not value in array then
24091: LD_VAR 0 1
24095: NOT
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: LD_VAR 0 1
24106: IN
24107: NOT
24108: OR
24109: IFFALSE 24113
// exit ;
24111: GO 24167
// for i = 1 to array do
24113: LD_ADDR_VAR 0 4
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_VAR 0 1
24127: PUSH
24128: FOR_TO
24129: IFFALSE 24165
// if value = array [ i ] then
24131: LD_VAR 0 2
24135: PUSH
24136: LD_VAR 0 1
24140: PUSH
24141: LD_VAR 0 4
24145: ARRAY
24146: EQUAL
24147: IFFALSE 24163
// begin result := i ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_VAR 0 4
24158: ST_TO_ADDR
// exit ;
24159: POP
24160: POP
24161: GO 24167
// end ;
24163: GO 24128
24165: POP
24166: POP
// end ;
24167: LD_VAR 0 3
24171: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24172: LD_INT 0
24174: PPUSH
// vc_chassis := chassis ;
24175: LD_ADDR_OWVAR 37
24179: PUSH
24180: LD_VAR 0 1
24184: ST_TO_ADDR
// vc_engine := engine ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_VAR 0 2
24194: ST_TO_ADDR
// vc_control := control ;
24195: LD_ADDR_OWVAR 38
24199: PUSH
24200: LD_VAR 0 3
24204: ST_TO_ADDR
// vc_weapon := weapon ;
24205: LD_ADDR_OWVAR 40
24209: PUSH
24210: LD_VAR 0 4
24214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24215: LD_ADDR_OWVAR 41
24219: PUSH
24220: LD_VAR 0 5
24224: ST_TO_ADDR
// end ;
24225: LD_VAR 0 6
24229: RET
// export function WantPlant ( unit ) ; var task ; begin
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
// result := false ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_INT 0
24241: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 437
24256: ST_TO_ADDR
// if task then
24257: LD_VAR 0 3
24261: IFFALSE 24289
// if task [ 1 ] [ 1 ] = p then
24263: LD_VAR 0 3
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PUSH
24272: LD_INT 1
24274: ARRAY
24275: PUSH
24276: LD_STRING p
24278: EQUAL
24279: IFFALSE 24289
// result := true ;
24281: LD_ADDR_VAR 0 2
24285: PUSH
24286: LD_INT 1
24288: ST_TO_ADDR
// end ;
24289: LD_VAR 0 2
24293: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
24298: PPUSH
24299: PPUSH
// if pos < 1 then
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 1
24307: LESS
24308: IFFALSE 24312
// exit ;
24310: GO 24615
// if pos = 1 then
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: EQUAL
24320: IFFALSE 24353
// result := Replace ( arr , pos [ 1 ] , value ) else
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 1
24350: ST_TO_ADDR
24351: GO 24615
// begin tmp := arr ;
24353: LD_ADDR_VAR 0 6
24357: PUSH
24358: LD_VAR 0 1
24362: ST_TO_ADDR
// s_arr := [ tmp ] ;
24363: LD_ADDR_VAR 0 7
24367: PUSH
24368: LD_VAR 0 6
24372: PUSH
24373: EMPTY
24374: LIST
24375: ST_TO_ADDR
// for i = 1 to pos - 1 do
24376: LD_ADDR_VAR 0 5
24380: PUSH
24381: DOUBLE
24382: LD_INT 1
24384: DEC
24385: ST_TO_ADDR
24386: LD_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: MINUS
24394: PUSH
24395: FOR_TO
24396: IFFALSE 24441
// begin tmp := tmp [ pos [ i ] ] ;
24398: LD_ADDR_VAR 0 6
24402: PUSH
24403: LD_VAR 0 6
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: LD_VAR 0 5
24417: ARRAY
24418: ARRAY
24419: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24420: LD_ADDR_VAR 0 7
24424: PUSH
24425: LD_VAR 0 7
24429: PUSH
24430: LD_VAR 0 6
24434: PUSH
24435: EMPTY
24436: LIST
24437: ADD
24438: ST_TO_ADDR
// end ;
24439: GO 24395
24441: POP
24442: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24443: LD_ADDR_VAR 0 6
24447: PUSH
24448: LD_VAR 0 6
24452: PPUSH
24453: LD_VAR 0 2
24457: PUSH
24458: LD_VAR 0 2
24462: ARRAY
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: CALL_OW 1
24473: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24474: LD_ADDR_VAR 0 7
24478: PUSH
24479: LD_VAR 0 7
24483: PPUSH
24484: LD_VAR 0 7
24488: PPUSH
24489: LD_VAR 0 6
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
// for i = s_arr downto 2 do
24499: LD_ADDR_VAR 0 5
24503: PUSH
24504: DOUBLE
24505: LD_VAR 0 7
24509: INC
24510: ST_TO_ADDR
24511: LD_INT 2
24513: PUSH
24514: FOR_DOWNTO
24515: IFFALSE 24599
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24517: LD_ADDR_VAR 0 6
24521: PUSH
24522: LD_VAR 0 7
24526: PUSH
24527: LD_VAR 0 5
24531: PUSH
24532: LD_INT 1
24534: MINUS
24535: ARRAY
24536: PPUSH
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 5
24546: PUSH
24547: LD_INT 1
24549: MINUS
24550: ARRAY
24551: PPUSH
24552: LD_VAR 0 7
24556: PUSH
24557: LD_VAR 0 5
24561: ARRAY
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24568: LD_ADDR_VAR 0 7
24572: PUSH
24573: LD_VAR 0 7
24577: PPUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: MINUS
24586: PPUSH
24587: LD_VAR 0 6
24591: PPUSH
24592: CALL_OW 1
24596: ST_TO_ADDR
// end ;
24597: GO 24514
24599: POP
24600: POP
// result := s_arr [ 1 ] ;
24601: LD_ADDR_VAR 0 4
24605: PUSH
24606: LD_VAR 0 7
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: ST_TO_ADDR
// end ; end ;
24615: LD_VAR 0 4
24619: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// if not list then
24624: LD_VAR 0 1
24628: NOT
24629: IFFALSE 24633
// exit ;
24631: GO 24724
// i := list [ pos1 ] ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 1
24642: PUSH
24643: LD_VAR 0 2
24647: ARRAY
24648: ST_TO_ADDR
// if not i then
24649: LD_VAR 0 5
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24724
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_VAR 0 1
24677: PUSH
24678: LD_VAR 0 3
24682: ARRAY
24683: PPUSH
24684: CALL_OW 1
24688: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24689: LD_ADDR_VAR 0 1
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: LD_VAR 0 5
24708: PPUSH
24709: CALL_OW 1
24713: ST_TO_ADDR
// result := list ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 1
24723: ST_TO_ADDR
// end ;
24724: LD_VAR 0 4
24728: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24729: LD_INT 0
24731: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24732: LD_ADDR_VAR 0 5
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 250
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 251
24756: PPUSH
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_VAR 0 3
24766: PPUSH
24767: LD_VAR 0 4
24771: PPUSH
24772: CALL 24782 0 5
24776: ST_TO_ADDR
// end ;
24777: LD_VAR 0 5
24781: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
// if not list then
24788: LD_VAR 0 3
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25185
// result := [ ] ;
24797: LD_ADDR_VAR 0 6
24801: PUSH
24802: EMPTY
24803: ST_TO_ADDR
// for i in list do
24804: LD_ADDR_VAR 0 7
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: FOR_IN
24815: IFFALSE 25017
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24817: LD_ADDR_VAR 0 9
24821: PUSH
24822: LD_VAR 0 7
24826: PPUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: CALL_OW 297
24841: ST_TO_ADDR
// if not result then
24842: LD_VAR 0 6
24846: NOT
24847: IFFALSE 24873
// result := [ [ i , tmp ] ] else
24849: LD_ADDR_VAR 0 6
24853: PUSH
24854: LD_VAR 0 7
24858: PUSH
24859: LD_VAR 0 9
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: ST_TO_ADDR
24871: GO 25015
// begin if result [ result ] [ 2 ] < tmp then
24873: LD_VAR 0 6
24877: PUSH
24878: LD_VAR 0 6
24882: ARRAY
24883: PUSH
24884: LD_INT 2
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 9
24892: LESS
24893: IFFALSE 24935
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24895: LD_ADDR_VAR 0 6
24899: PUSH
24900: LD_VAR 0 6
24904: PPUSH
24905: LD_VAR 0 6
24909: PUSH
24910: LD_INT 1
24912: PLUS
24913: PPUSH
24914: LD_VAR 0 7
24918: PUSH
24919: LD_VAR 0 9
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 2
24932: ST_TO_ADDR
24933: GO 25015
// for j = 1 to result do
24935: LD_ADDR_VAR 0 8
24939: PUSH
24940: DOUBLE
24941: LD_INT 1
24943: DEC
24944: ST_TO_ADDR
24945: LD_VAR 0 6
24949: PUSH
24950: FOR_TO
24951: IFFALSE 25013
// begin if tmp < result [ j ] [ 2 ] then
24953: LD_VAR 0 9
24957: PUSH
24958: LD_VAR 0 6
24962: PUSH
24963: LD_VAR 0 8
24967: ARRAY
24968: PUSH
24969: LD_INT 2
24971: ARRAY
24972: LESS
24973: IFFALSE 25011
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24975: LD_ADDR_VAR 0 6
24979: PUSH
24980: LD_VAR 0 6
24984: PPUSH
24985: LD_VAR 0 8
24989: PPUSH
24990: LD_VAR 0 7
24994: PUSH
24995: LD_VAR 0 9
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 2
25008: ST_TO_ADDR
// break ;
25009: GO 25013
// end ; end ;
25011: GO 24950
25013: POP
25014: POP
// end ; end ;
25015: GO 24814
25017: POP
25018: POP
// if result and not asc then
25019: LD_VAR 0 6
25023: PUSH
25024: LD_VAR 0 4
25028: NOT
25029: AND
25030: IFFALSE 25105
// begin tmp := result ;
25032: LD_ADDR_VAR 0 9
25036: PUSH
25037: LD_VAR 0 6
25041: ST_TO_ADDR
// for i = tmp downto 1 do
25042: LD_ADDR_VAR 0 7
25046: PUSH
25047: DOUBLE
25048: LD_VAR 0 9
25052: INC
25053: ST_TO_ADDR
25054: LD_INT 1
25056: PUSH
25057: FOR_DOWNTO
25058: IFFALSE 25103
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 6
25069: PPUSH
25070: LD_VAR 0 9
25074: PUSH
25075: LD_VAR 0 7
25079: MINUS
25080: PUSH
25081: LD_INT 1
25083: PLUS
25084: PPUSH
25085: LD_VAR 0 9
25089: PUSH
25090: LD_VAR 0 7
25094: ARRAY
25095: PPUSH
25096: CALL_OW 1
25100: ST_TO_ADDR
25101: GO 25057
25103: POP
25104: POP
// end ; tmp := [ ] ;
25105: LD_ADDR_VAR 0 9
25109: PUSH
25110: EMPTY
25111: ST_TO_ADDR
// if mode then
25112: LD_VAR 0 5
25116: IFFALSE 25185
// begin for i = 1 to result do
25118: LD_ADDR_VAR 0 7
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_VAR 0 6
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25173
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25136: LD_ADDR_VAR 0 9
25140: PUSH
25141: LD_VAR 0 9
25145: PPUSH
25146: LD_VAR 0 7
25150: PPUSH
25151: LD_VAR 0 6
25155: PUSH
25156: LD_VAR 0 7
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: CALL_OW 1
25170: ST_TO_ADDR
25171: GO 25133
25173: POP
25174: POP
// result := tmp ;
25175: LD_ADDR_VAR 0 6
25179: PUSH
25180: LD_VAR 0 9
25184: ST_TO_ADDR
// end ; end ;
25185: LD_VAR 0 6
25189: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: ST_TO_ADDR
// if not x or not y then
25220: LD_VAR 0 2
25224: NOT
25225: PUSH
25226: LD_VAR 0 3
25230: NOT
25231: OR
25232: IFFALSE 25236
// exit ;
25234: GO 26882
// if not range then
25236: LD_VAR 0 4
25240: NOT
25241: IFFALSE 25251
// range := 10 ;
25243: LD_ADDR_VAR 0 4
25247: PUSH
25248: LD_INT 10
25250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25251: LD_ADDR_VAR 0 8
25255: PUSH
25256: LD_INT 81
25258: PUSH
25259: LD_VAR 0 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 92
25270: PUSH
25271: LD_VAR 0 2
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 4
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: ST_TO_ADDR
// if not tmp then
25319: LD_VAR 0 8
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 26882
// for i in tmp do
25328: LD_ADDR_VAR 0 6
25332: PUSH
25333: LD_VAR 0 8
25337: PUSH
25338: FOR_IN
25339: IFFALSE 26857
// begin points := [ 0 , 0 , 0 ] ;
25341: LD_ADDR_VAR 0 9
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: ST_TO_ADDR
// bpoints := 1 ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_INT 1
25367: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25368: LD_VAR 0 6
25372: PPUSH
25373: CALL_OW 247
25377: PUSH
25378: LD_INT 1
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25964
25386: POP
// begin if GetClass ( i ) = 1 then
25387: LD_VAR 0 6
25391: PPUSH
25392: CALL_OW 257
25396: PUSH
25397: LD_INT 1
25399: EQUAL
25400: IFFALSE 25421
// points := [ 10 , 5 , 3 ] ;
25402: LD_ADDR_VAR 0 9
25406: PUSH
25407: LD_INT 10
25409: PUSH
25410: LD_INT 5
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25421: LD_VAR 0 6
25425: PPUSH
25426: CALL_OW 257
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: IN
25445: IFFALSE 25466
// points := [ 3 , 2 , 1 ] ;
25447: LD_ADDR_VAR 0 9
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25466: LD_VAR 0 6
25470: PPUSH
25471: CALL_OW 257
25475: PUSH
25476: LD_INT 5
25478: EQUAL
25479: IFFALSE 25500
// points := [ 130 , 5 , 2 ] ;
25481: LD_ADDR_VAR 0 9
25485: PUSH
25486: LD_INT 130
25488: PUSH
25489: LD_INT 5
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25500: LD_VAR 0 6
25504: PPUSH
25505: CALL_OW 257
25509: PUSH
25510: LD_INT 8
25512: EQUAL
25513: IFFALSE 25534
// points := [ 35 , 35 , 30 ] ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_INT 35
25522: PUSH
25523: LD_INT 35
25525: PUSH
25526: LD_INT 30
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25534: LD_VAR 0 6
25538: PPUSH
25539: CALL_OW 257
25543: PUSH
25544: LD_INT 9
25546: EQUAL
25547: IFFALSE 25568
// points := [ 20 , 55 , 40 ] ;
25549: LD_ADDR_VAR 0 9
25553: PUSH
25554: LD_INT 20
25556: PUSH
25557: LD_INT 55
25559: PUSH
25560: LD_INT 40
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25568: LD_VAR 0 6
25572: PPUSH
25573: CALL_OW 257
25577: PUSH
25578: LD_INT 12
25580: PUSH
25581: LD_INT 16
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: IN
25588: IFFALSE 25609
// points := [ 5 , 3 , 2 ] ;
25590: LD_ADDR_VAR 0 9
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25609: LD_VAR 0 6
25613: PPUSH
25614: CALL_OW 257
25618: PUSH
25619: LD_INT 17
25621: EQUAL
25622: IFFALSE 25643
// points := [ 100 , 50 , 75 ] ;
25624: LD_ADDR_VAR 0 9
25628: PUSH
25629: LD_INT 100
25631: PUSH
25632: LD_INT 50
25634: PUSH
25635: LD_INT 75
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25643: LD_VAR 0 6
25647: PPUSH
25648: CALL_OW 257
25652: PUSH
25653: LD_INT 15
25655: EQUAL
25656: IFFALSE 25677
// points := [ 10 , 5 , 3 ] ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 10
25665: PUSH
25666: LD_INT 5
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 14
25689: EQUAL
25690: IFFALSE 25711
// points := [ 10 , 0 , 0 ] ;
25692: LD_ADDR_VAR 0 9
25696: PUSH
25697: LD_INT 10
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25711: LD_VAR 0 6
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 11
25723: EQUAL
25724: IFFALSE 25745
// points := [ 30 , 10 , 5 ] ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_INT 30
25733: PUSH
25734: LD_INT 10
25736: PUSH
25737: LD_INT 5
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_INT 5
25752: PPUSH
25753: CALL_OW 321
25757: PUSH
25758: LD_INT 2
25760: EQUAL
25761: IFFALSE 25778
// bpoints := bpoints * 1.8 ;
25763: LD_ADDR_VAR 0 10
25767: PUSH
25768: LD_VAR 0 10
25772: PUSH
25773: LD_REAL  1.80000000000000E+0000
25776: MUL
25777: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25778: LD_VAR 0 6
25782: PPUSH
25783: CALL_OW 257
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: LD_INT 4
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: IN
25806: PUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_INT 51
25814: PPUSH
25815: CALL_OW 321
25819: PUSH
25820: LD_INT 2
25822: EQUAL
25823: AND
25824: IFFALSE 25841
// bpoints := bpoints * 1.2 ;
25826: LD_ADDR_VAR 0 10
25830: PUSH
25831: LD_VAR 0 10
25835: PUSH
25836: LD_REAL  1.20000000000000E+0000
25839: MUL
25840: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25841: LD_VAR 0 6
25845: PPUSH
25846: CALL_OW 257
25850: PUSH
25851: LD_INT 5
25853: PUSH
25854: LD_INT 7
25856: PUSH
25857: LD_INT 9
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: IN
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_INT 52
25873: PPUSH
25874: CALL_OW 321
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: IFFALSE 25900
// bpoints := bpoints * 1.5 ;
25885: LD_ADDR_VAR 0 10
25889: PUSH
25890: LD_VAR 0 10
25894: PUSH
25895: LD_REAL  1.50000000000000E+0000
25898: MUL
25899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 66
25907: PPUSH
25908: CALL_OW 321
25912: PUSH
25913: LD_INT 2
25915: EQUAL
25916: IFFALSE 25933
// bpoints := bpoints * 1.1 ;
25918: LD_ADDR_VAR 0 10
25922: PUSH
25923: LD_VAR 0 10
25927: PUSH
25928: LD_REAL  1.10000000000000E+0000
25931: MUL
25932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25933: LD_ADDR_VAR 0 10
25937: PUSH
25938: LD_VAR 0 10
25942: PUSH
25943: LD_VAR 0 6
25947: PPUSH
25948: LD_INT 1
25950: PPUSH
25951: CALL_OW 259
25955: PUSH
25956: LD_REAL  1.15000000000000E+0000
25959: MUL
25960: MUL
25961: ST_TO_ADDR
// end ; unit_vehicle :
25962: GO 26786
25964: LD_INT 2
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 26774
25972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25973: LD_VAR 0 6
25977: PPUSH
25978: CALL_OW 264
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 42
25988: PUSH
25989: LD_INT 24
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: IN
25997: IFFALSE 26018
// points := [ 25 , 5 , 3 ] ;
25999: LD_ADDR_VAR 0 9
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 5
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26018: LD_VAR 0 6
26022: PPUSH
26023: CALL_OW 264
26027: PUSH
26028: LD_INT 4
26030: PUSH
26031: LD_INT 43
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: IN
26042: IFFALSE 26063
// points := [ 40 , 15 , 5 ] ;
26044: LD_ADDR_VAR 0 9
26048: PUSH
26049: LD_INT 40
26051: PUSH
26052: LD_INT 15
26054: PUSH
26055: LD_INT 5
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26063: LD_VAR 0 6
26067: PPUSH
26068: CALL_OW 264
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: LD_INT 23
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: IN
26083: IFFALSE 26104
// points := [ 7 , 25 , 8 ] ;
26085: LD_ADDR_VAR 0 9
26089: PUSH
26090: LD_INT 7
26092: PUSH
26093: LD_INT 25
26095: PUSH
26096: LD_INT 8
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26104: LD_VAR 0 6
26108: PPUSH
26109: CALL_OW 264
26113: PUSH
26114: LD_INT 5
26116: PUSH
26117: LD_INT 27
26119: PUSH
26120: LD_INT 44
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: IN
26128: IFFALSE 26149
// points := [ 14 , 50 , 16 ] ;
26130: LD_ADDR_VAR 0 9
26134: PUSH
26135: LD_INT 14
26137: PUSH
26138: LD_INT 50
26140: PUSH
26141: LD_INT 16
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26149: LD_VAR 0 6
26153: PPUSH
26154: CALL_OW 264
26158: PUSH
26159: LD_INT 6
26161: PUSH
26162: LD_INT 46
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: IN
26169: IFFALSE 26190
// points := [ 32 , 120 , 70 ] ;
26171: LD_ADDR_VAR 0 9
26175: PUSH
26176: LD_INT 32
26178: PUSH
26179: LD_INT 120
26181: PUSH
26182: LD_INT 70
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26190: LD_VAR 0 6
26194: PPUSH
26195: CALL_OW 264
26199: PUSH
26200: LD_INT 7
26202: PUSH
26203: LD_INT 28
26205: PUSH
26206: LD_INT 45
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: IN
26214: IFFALSE 26235
// points := [ 35 , 20 , 45 ] ;
26216: LD_ADDR_VAR 0 9
26220: PUSH
26221: LD_INT 35
26223: PUSH
26224: LD_INT 20
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26235: LD_VAR 0 6
26239: PPUSH
26240: CALL_OW 264
26244: PUSH
26245: LD_INT 47
26247: PUSH
26248: EMPTY
26249: LIST
26250: IN
26251: IFFALSE 26272
// points := [ 67 , 45 , 75 ] ;
26253: LD_ADDR_VAR 0 9
26257: PUSH
26258: LD_INT 67
26260: PUSH
26261: LD_INT 45
26263: PUSH
26264: LD_INT 75
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26272: LD_VAR 0 6
26276: PPUSH
26277: CALL_OW 264
26281: PUSH
26282: LD_INT 26
26284: PUSH
26285: EMPTY
26286: LIST
26287: IN
26288: IFFALSE 26309
// points := [ 120 , 30 , 80 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 120
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 80
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26309: LD_VAR 0 6
26313: PPUSH
26314: CALL_OW 264
26318: PUSH
26319: LD_INT 22
26321: PUSH
26322: EMPTY
26323: LIST
26324: IN
26325: IFFALSE 26346
// points := [ 40 , 1 , 1 ] ;
26327: LD_ADDR_VAR 0 9
26331: PUSH
26332: LD_INT 40
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26346: LD_VAR 0 6
26350: PPUSH
26351: CALL_OW 264
26355: PUSH
26356: LD_INT 29
26358: PUSH
26359: EMPTY
26360: LIST
26361: IN
26362: IFFALSE 26383
// points := [ 70 , 200 , 400 ] ;
26364: LD_ADDR_VAR 0 9
26368: PUSH
26369: LD_INT 70
26371: PUSH
26372: LD_INT 200
26374: PUSH
26375: LD_INT 400
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26383: LD_VAR 0 6
26387: PPUSH
26388: CALL_OW 264
26392: PUSH
26393: LD_INT 14
26395: PUSH
26396: LD_INT 53
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: IN
26403: IFFALSE 26424
// points := [ 40 , 10 , 20 ] ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_INT 40
26412: PUSH
26413: LD_INT 10
26415: PUSH
26416: LD_INT 20
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26424: LD_VAR 0 6
26428: PPUSH
26429: CALL_OW 264
26433: PUSH
26434: LD_INT 9
26436: PUSH
26437: EMPTY
26438: LIST
26439: IN
26440: IFFALSE 26461
// points := [ 5 , 70 , 20 ] ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_INT 5
26449: PUSH
26450: LD_INT 70
26452: PUSH
26453: LD_INT 20
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 10
26473: PUSH
26474: EMPTY
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 35 , 110 , 70 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 35
26486: PUSH
26487: LD_INT 110
26489: PUSH
26490: LD_INT 70
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 265
26507: PUSH
26508: LD_INT 25
26510: EQUAL
26511: IFFALSE 26532
// points := [ 80 , 65 , 100 ] ;
26513: LD_ADDR_VAR 0 9
26517: PUSH
26518: LD_INT 80
26520: PUSH
26521: LD_INT 65
26523: PUSH
26524: LD_INT 100
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 263
26541: PUSH
26542: LD_INT 1
26544: EQUAL
26545: IFFALSE 26580
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26547: LD_ADDR_VAR 0 10
26551: PUSH
26552: LD_VAR 0 10
26556: PUSH
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 311
26566: PPUSH
26567: LD_INT 3
26569: PPUSH
26570: CALL_OW 259
26574: PUSH
26575: LD_INT 4
26577: MUL
26578: MUL
26579: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26580: LD_VAR 0 6
26584: PPUSH
26585: CALL_OW 263
26589: PUSH
26590: LD_INT 2
26592: EQUAL
26593: IFFALSE 26644
// begin j := IsControledBy ( i ) ;
26595: LD_ADDR_VAR 0 7
26599: PUSH
26600: LD_VAR 0 6
26604: PPUSH
26605: CALL_OW 312
26609: ST_TO_ADDR
// if j then
26610: LD_VAR 0 7
26614: IFFALSE 26644
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26616: LD_ADDR_VAR 0 10
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_VAR 0 7
26630: PPUSH
26631: LD_INT 3
26633: PPUSH
26634: CALL_OW 259
26638: PUSH
26639: LD_INT 3
26641: MUL
26642: MUL
26643: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 5
26656: PUSH
26657: LD_INT 6
26659: PUSH
26660: LD_INT 46
26662: PUSH
26663: LD_INT 44
26665: PUSH
26666: LD_INT 47
26668: PUSH
26669: LD_INT 45
26671: PUSH
26672: LD_INT 28
26674: PUSH
26675: LD_INT 7
26677: PUSH
26678: LD_INT 27
26680: PUSH
26681: LD_INT 29
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: IN
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_INT 52
26704: PPUSH
26705: CALL_OW 321
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: AND
26714: IFFALSE 26731
// bpoints := bpoints * 1.2 ;
26716: LD_ADDR_VAR 0 10
26720: PUSH
26721: LD_VAR 0 10
26725: PUSH
26726: LD_REAL  1.20000000000000E+0000
26729: MUL
26730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26731: LD_VAR 0 6
26735: PPUSH
26736: CALL_OW 264
26740: PUSH
26741: LD_INT 6
26743: PUSH
26744: LD_INT 46
26746: PUSH
26747: LD_INT 47
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: IN
26755: IFFALSE 26772
// bpoints := bpoints * 1.2 ;
26757: LD_ADDR_VAR 0 10
26761: PUSH
26762: LD_VAR 0 10
26766: PUSH
26767: LD_REAL  1.20000000000000E+0000
26770: MUL
26771: ST_TO_ADDR
// end ; unit_building :
26772: GO 26786
26774: LD_INT 3
26776: DOUBLE
26777: EQUAL
26778: IFTRUE 26782
26780: GO 26785
26782: POP
// ; end ;
26783: GO 26786
26785: POP
// for j = 1 to 3 do
26786: LD_ADDR_VAR 0 7
26790: PUSH
26791: DOUBLE
26792: LD_INT 1
26794: DEC
26795: ST_TO_ADDR
26796: LD_INT 3
26798: PUSH
26799: FOR_TO
26800: IFFALSE 26853
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26802: LD_ADDR_VAR 0 5
26806: PUSH
26807: LD_VAR 0 5
26811: PPUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 5
26821: PUSH
26822: LD_VAR 0 7
26826: ARRAY
26827: PUSH
26828: LD_VAR 0 9
26832: PUSH
26833: LD_VAR 0 7
26837: ARRAY
26838: PUSH
26839: LD_VAR 0 10
26843: MUL
26844: PLUS
26845: PPUSH
26846: CALL_OW 1
26850: ST_TO_ADDR
26851: GO 26799
26853: POP
26854: POP
// end ;
26855: GO 25338
26857: POP
26858: POP
// result := Replace ( result , 4 , tmp ) ;
26859: LD_ADDR_VAR 0 5
26863: PUSH
26864: LD_VAR 0 5
26868: PPUSH
26869: LD_INT 4
26871: PPUSH
26872: LD_VAR 0 8
26876: PPUSH
26877: CALL_OW 1
26881: ST_TO_ADDR
// end ;
26882: LD_VAR 0 5
26886: RET
// export function DangerAtRange ( unit , range ) ; begin
26887: LD_INT 0
26889: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26890: LD_ADDR_VAR 0 3
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 255
26904: PPUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 250
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 251
26924: PPUSH
26925: LD_VAR 0 2
26929: PPUSH
26930: CALL 25190 0 4
26934: ST_TO_ADDR
// end ;
26935: LD_VAR 0 3
26939: RET
// export function DangerInArea ( side , area ) ; begin
26940: LD_INT 0
26942: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_INT 81
26955: PUSH
26956: LD_VAR 0 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 70
26969: ST_TO_ADDR
// end ;
26970: LD_VAR 0 3
26974: RET
// export function IsExtension ( b ) ; begin
26975: LD_INT 0
26977: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 23
26990: PUSH
26991: LD_INT 20
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_INT 17
26999: PUSH
27000: LD_INT 24
27002: PUSH
27003: LD_INT 21
27005: PUSH
27006: LD_INT 19
27008: PUSH
27009: LD_INT 16
27011: PUSH
27012: LD_INT 25
27014: PUSH
27015: LD_INT 18
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: IN
27030: ST_TO_ADDR
// end ;
27031: LD_VAR 0 2
27035: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
27040: PPUSH
// result := [ ] ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: EMPTY
27047: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_INT 21
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 70
27072: ST_TO_ADDR
// if not tmp then
27073: LD_VAR 0 4
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27140
// for i in tmp do
27082: LD_ADDR_VAR 0 5
27086: PUSH
27087: LD_VAR 0 4
27091: PUSH
27092: FOR_IN
27093: IFFALSE 27128
// if GetBase ( i ) <> base then
27095: LD_VAR 0 5
27099: PPUSH
27100: CALL_OW 274
27104: PUSH
27105: LD_VAR 0 1
27109: NONEQUAL
27110: IFFALSE 27126
// ComLinkToBase ( base , i ) ;
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_VAR 0 5
27121: PPUSH
27122: CALL_OW 169
27126: GO 27092
27128: POP
27129: POP
// result := tmp ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_VAR 0 4
27139: ST_TO_ADDR
// end ;
27140: LD_VAR 0 3
27144: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
// if BuildingStatus ( b ) = bs_build then
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 461
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: IFFALSE 27222
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_STRING h
27171: PUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 250
27181: PUSH
27182: LD_VAR 0 2
27186: PPUSH
27187: CALL_OW 251
27191: PUSH
27192: LD_VAR 0 2
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: PPUSH
27218: CALL_OW 446
// end ;
27222: LD_VAR 0 3
27226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27227: LD_INT 0
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27235: LD_VAR 0 1
27239: NOT
27240: PUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 263
27250: PUSH
27251: LD_INT 2
27253: EQUAL
27254: NOT
27255: OR
27256: IFFALSE 27260
// exit ;
27258: GO 27576
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27260: LD_ADDR_VAR 0 6
27264: PUSH
27265: LD_INT 22
27267: PUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 255
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_INT 36
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 34
27297: PUSH
27298: LD_INT 31
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PPUSH
27314: CALL_OW 69
27318: ST_TO_ADDR
// if not tmp then
27319: LD_VAR 0 6
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 27576
// result := [ ] ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: EMPTY
27334: ST_TO_ADDR
// for i in tmp do
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_VAR 0 6
27344: PUSH
27345: FOR_IN
27346: IFFALSE 27417
// begin t := UnitsInside ( i ) ;
27348: LD_ADDR_VAR 0 4
27352: PUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 313
27362: ST_TO_ADDR
// if t then
27363: LD_VAR 0 4
27367: IFFALSE 27415
// for j in t do
27369: LD_ADDR_VAR 0 7
27373: PUSH
27374: LD_VAR 0 4
27378: PUSH
27379: FOR_IN
27380: IFFALSE 27413
// result := Insert ( result , result + 1 , j ) ;
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_INT 1
27399: PLUS
27400: PPUSH
27401: LD_VAR 0 7
27405: PPUSH
27406: CALL_OW 2
27410: ST_TO_ADDR
27411: GO 27379
27413: POP
27414: POP
// end ;
27415: GO 27345
27417: POP
27418: POP
// if not result then
27419: LD_VAR 0 2
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27576
// mech := result [ 1 ] ;
27428: LD_ADDR_VAR 0 5
27432: PUSH
27433: LD_VAR 0 2
27437: PUSH
27438: LD_INT 1
27440: ARRAY
27441: ST_TO_ADDR
// if result > 1 then
27442: LD_VAR 0 2
27446: PUSH
27447: LD_INT 1
27449: GREATER
27450: IFFALSE 27562
// for i = 2 to result do
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: DOUBLE
27458: LD_INT 2
27460: DEC
27461: ST_TO_ADDR
27462: LD_VAR 0 2
27466: PUSH
27467: FOR_TO
27468: IFFALSE 27560
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27470: LD_ADDR_VAR 0 4
27474: PUSH
27475: LD_VAR 0 2
27479: PUSH
27480: LD_VAR 0 3
27484: ARRAY
27485: PPUSH
27486: LD_INT 3
27488: PPUSH
27489: CALL_OW 259
27493: PUSH
27494: LD_VAR 0 2
27498: PUSH
27499: LD_VAR 0 3
27503: ARRAY
27504: PPUSH
27505: CALL_OW 432
27509: MINUS
27510: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27511: LD_VAR 0 4
27515: PUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: CALL_OW 259
27528: PUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: CALL_OW 432
27538: MINUS
27539: GREATEREQUAL
27540: IFFALSE 27558
// mech := result [ i ] ;
27542: LD_ADDR_VAR 0 5
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: ST_TO_ADDR
// end ;
27558: GO 27467
27560: POP
27561: POP
// ComLinkTo ( vehicle , mech ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 5
27571: PPUSH
27572: CALL_OW 135
// end ;
27576: LD_VAR 0 2
27580: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27581: LD_INT 0
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
// result := [ ] ;
27596: LD_ADDR_VAR 0 7
27600: PUSH
27601: EMPTY
27602: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 266
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: IN
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 29259
// if name then
27628: LD_VAR 0 3
27632: IFFALSE 27648
// SetBName ( base_dep , name ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: LD_VAR 0 3
27643: PPUSH
27644: CALL_OW 500
// base := GetBase ( base_dep ) ;
27648: LD_ADDR_VAR 0 15
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 274
27662: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27663: LD_ADDR_VAR 0 16
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 255
27677: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27678: LD_ADDR_VAR 0 17
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 248
27692: ST_TO_ADDR
// if sources then
27693: LD_VAR 0 5
27697: IFFALSE 27744
// for i = 1 to 3 do
27699: LD_ADDR_VAR 0 8
27703: PUSH
27704: DOUBLE
27705: LD_INT 1
27707: DEC
27708: ST_TO_ADDR
27709: LD_INT 3
27711: PUSH
27712: FOR_TO
27713: IFFALSE 27742
// AddResourceType ( base , i , sources [ i ] ) ;
27715: LD_VAR 0 15
27719: PPUSH
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 5
27729: PUSH
27730: LD_VAR 0 8
27734: ARRAY
27735: PPUSH
27736: CALL_OW 276
27740: GO 27712
27742: POP
27743: POP
// buildings := GetBaseBuildings ( base , area ) ;
27744: LD_ADDR_VAR 0 18
27748: PUSH
27749: LD_VAR 0 15
27753: PPUSH
27754: LD_VAR 0 2
27758: PPUSH
27759: CALL 27036 0 2
27763: ST_TO_ADDR
// InitHc ;
27764: CALL_OW 19
// InitUc ;
27768: CALL_OW 18
// uc_side := side ;
27772: LD_ADDR_OWVAR 20
27776: PUSH
27777: LD_VAR 0 16
27781: ST_TO_ADDR
// uc_nation := nation ;
27782: LD_ADDR_OWVAR 21
27786: PUSH
27787: LD_VAR 0 17
27791: ST_TO_ADDR
// if buildings then
27792: LD_VAR 0 18
27796: IFFALSE 29118
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27798: LD_ADDR_VAR 0 19
27802: PUSH
27803: LD_VAR 0 18
27807: PPUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 29
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 72
27840: ST_TO_ADDR
// if tmp then
27841: LD_VAR 0 19
27845: IFFALSE 27893
// for i in tmp do
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_VAR 0 19
27856: PUSH
27857: FOR_IN
27858: IFFALSE 27891
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27860: LD_VAR 0 8
27864: PPUSH
27865: CALL_OW 250
27869: PPUSH
27870: LD_VAR 0 8
27874: PPUSH
27875: CALL_OW 251
27879: PPUSH
27880: LD_VAR 0 16
27884: PPUSH
27885: CALL_OW 441
27889: GO 27857
27891: POP
27892: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27893: LD_VAR 0 18
27897: PPUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 32
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 30
27913: PUSH
27914: LD_INT 33
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 72
27930: IFFALSE 28018
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_VAR 0 18
27941: PPUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 30
27947: PUSH
27948: LD_INT 32
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 33
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 72
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28016
// begin if not GetBWeapon ( i ) then
27978: LD_VAR 0 8
27982: PPUSH
27983: CALL_OW 269
27987: NOT
27988: IFFALSE 28014
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27990: LD_VAR 0 8
27994: PPUSH
27995: LD_VAR 0 8
27999: PPUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL 29264 0 2
28009: PPUSH
28010: CALL_OW 431
// end ;
28014: GO 27975
28016: POP
28017: POP
// end ; for i = 1 to personel do
28018: LD_ADDR_VAR 0 8
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 6
28032: PUSH
28033: FOR_TO
28034: IFFALSE 29098
// begin if i > 4 then
28036: LD_VAR 0 8
28040: PUSH
28041: LD_INT 4
28043: GREATER
28044: IFFALSE 28048
// break ;
28046: GO 29098
// case i of 1 :
28048: LD_VAR 0 8
28052: PUSH
28053: LD_INT 1
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28141
28061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28062: LD_ADDR_VAR 0 12
28066: PUSH
28067: LD_VAR 0 18
28071: PPUSH
28072: LD_INT 22
28074: PUSH
28075: LD_VAR 0 16
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 58
28086: PUSH
28087: EMPTY
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 32
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 30
28105: PUSH
28106: LD_INT 4
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 30
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 72
28138: ST_TO_ADDR
28139: GO 28363
28141: LD_INT 2
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28211
28149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28150: LD_ADDR_VAR 0 12
28154: PUSH
28155: LD_VAR 0 18
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 16
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 30
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 30
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: ST_TO_ADDR
28209: GO 28363
28211: LD_INT 3
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28281
28219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28220: LD_ADDR_VAR 0 12
28224: PUSH
28225: LD_VAR 0 18
28229: PPUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 16
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 30
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 72
28278: ST_TO_ADDR
28279: GO 28363
28281: LD_INT 4
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28362
28289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28290: LD_ADDR_VAR 0 12
28294: PUSH
28295: LD_VAR 0 18
28299: PPUSH
28300: LD_INT 22
28302: PUSH
28303: LD_VAR 0 16
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_INT 6
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 8
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 72
28359: ST_TO_ADDR
28360: GO 28363
28362: POP
// if i = 1 then
28363: LD_VAR 0 8
28367: PUSH
28368: LD_INT 1
28370: EQUAL
28371: IFFALSE 28482
// begin tmp := [ ] ;
28373: LD_ADDR_VAR 0 19
28377: PUSH
28378: EMPTY
28379: ST_TO_ADDR
// for j in f do
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_VAR 0 12
28389: PUSH
28390: FOR_IN
28391: IFFALSE 28464
// if GetBType ( j ) = b_bunker then
28393: LD_VAR 0 9
28397: PPUSH
28398: CALL_OW 266
28402: PUSH
28403: LD_INT 32
28405: EQUAL
28406: IFFALSE 28433
// tmp := Insert ( tmp , 1 , j ) else
28408: LD_ADDR_VAR 0 19
28412: PUSH
28413: LD_VAR 0 19
28417: PPUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_VAR 0 9
28425: PPUSH
28426: CALL_OW 2
28430: ST_TO_ADDR
28431: GO 28462
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28433: LD_ADDR_VAR 0 19
28437: PUSH
28438: LD_VAR 0 19
28442: PPUSH
28443: LD_VAR 0 19
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 9
28456: PPUSH
28457: CALL_OW 2
28461: ST_TO_ADDR
28462: GO 28390
28464: POP
28465: POP
// if tmp then
28466: LD_VAR 0 19
28470: IFFALSE 28482
// f := tmp ;
28472: LD_ADDR_VAR 0 12
28476: PUSH
28477: LD_VAR 0 19
28481: ST_TO_ADDR
// end ; x := personel [ i ] ;
28482: LD_ADDR_VAR 0 13
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_VAR 0 8
28496: ARRAY
28497: ST_TO_ADDR
// if x = - 1 then
28498: LD_VAR 0 13
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: EQUAL
28507: IFFALSE 28716
// begin for j in f do
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_VAR 0 12
28518: PUSH
28519: FOR_IN
28520: IFFALSE 28712
// repeat InitHc ;
28522: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28526: LD_VAR 0 9
28530: PPUSH
28531: CALL_OW 266
28535: PUSH
28536: LD_INT 5
28538: EQUAL
28539: IFFALSE 28609
// begin if UnitsInside ( j ) < 3 then
28541: LD_VAR 0 9
28545: PPUSH
28546: CALL_OW 313
28550: PUSH
28551: LD_INT 3
28553: LESS
28554: IFFALSE 28590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28556: LD_INT 0
28558: PPUSH
28559: LD_INT 5
28561: PUSH
28562: LD_INT 8
28564: PUSH
28565: LD_INT 9
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: PUSH
28573: LD_VAR 0 17
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 4
28583: PPUSH
28584: CALL_OW 380
28588: GO 28607
// PrepareHuman ( false , i , skill ) ;
28590: LD_INT 0
28592: PPUSH
28593: LD_VAR 0 8
28597: PPUSH
28598: LD_VAR 0 4
28602: PPUSH
28603: CALL_OW 380
// end else
28607: GO 28626
// PrepareHuman ( false , i , skill ) ;
28609: LD_INT 0
28611: PPUSH
28612: LD_VAR 0 8
28616: PPUSH
28617: LD_VAR 0 4
28621: PPUSH
28622: CALL_OW 380
// un := CreateHuman ;
28626: LD_ADDR_VAR 0 14
28630: PUSH
28631: CALL_OW 44
28635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: LD_VAR 0 7
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: LD_VAR 0 14
28653: PPUSH
28654: CALL_OW 2
28658: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28659: LD_VAR 0 14
28663: PPUSH
28664: LD_VAR 0 9
28668: PPUSH
28669: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28673: LD_VAR 0 9
28677: PPUSH
28678: CALL_OW 313
28682: PUSH
28683: LD_INT 6
28685: EQUAL
28686: PUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: CALL_OW 266
28696: PUSH
28697: LD_INT 32
28699: PUSH
28700: LD_INT 31
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: IN
28707: OR
28708: IFFALSE 28522
28710: GO 28519
28712: POP
28713: POP
// end else
28714: GO 29096
// for j = 1 to x do
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_VAR 0 13
28730: PUSH
28731: FOR_TO
28732: IFFALSE 29094
// begin InitHc ;
28734: CALL_OW 19
// if not f then
28738: LD_VAR 0 12
28742: NOT
28743: IFFALSE 28832
// begin PrepareHuman ( false , i , skill ) ;
28745: LD_INT 0
28747: PPUSH
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 4
28757: PPUSH
28758: CALL_OW 380
// un := CreateHuman ;
28762: LD_ADDR_VAR 0 14
28766: PUSH
28767: CALL_OW 44
28771: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 14
28789: PPUSH
28790: CALL_OW 2
28794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28795: LD_VAR 0 14
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 250
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 251
28819: PPUSH
28820: LD_INT 10
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 50
// continue ;
28830: GO 28731
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 313
28845: PUSH
28846: LD_VAR 0 12
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 32
28862: PUSH
28863: LD_INT 31
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: IN
28870: AND
28871: PUSH
28872: LD_VAR 0 12
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 313
28885: PUSH
28886: LD_INT 6
28888: EQUAL
28889: OR
28890: IFFALSE 28910
// f := Delete ( f , 1 ) ;
28892: LD_ADDR_VAR 0 12
28896: PUSH
28897: LD_VAR 0 12
28901: PPUSH
28902: LD_INT 1
28904: PPUSH
28905: CALL_OW 3
28909: ST_TO_ADDR
// if not f then
28910: LD_VAR 0 12
28914: NOT
28915: IFFALSE 28933
// begin x := x + 2 ;
28917: LD_ADDR_VAR 0 13
28921: PUSH
28922: LD_VAR 0 13
28926: PUSH
28927: LD_INT 2
28929: PLUS
28930: ST_TO_ADDR
// continue ;
28931: GO 28731
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28933: LD_VAR 0 12
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 5
28949: EQUAL
28950: IFFALSE 29024
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28952: LD_VAR 0 12
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 313
28965: PUSH
28966: LD_INT 3
28968: LESS
28969: IFFALSE 29005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28971: LD_INT 0
28973: PPUSH
28974: LD_INT 5
28976: PUSH
28977: LD_INT 8
28979: PUSH
28980: LD_INT 9
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: LD_VAR 0 17
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 380
29003: GO 29022
// PrepareHuman ( false , i , skill ) ;
29005: LD_INT 0
29007: PPUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: LD_VAR 0 4
29017: PPUSH
29018: CALL_OW 380
// end else
29022: GO 29041
// PrepareHuman ( false , i , skill ) ;
29024: LD_INT 0
29026: PPUSH
29027: LD_VAR 0 8
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 380
// un := CreateHuman ;
29041: LD_ADDR_VAR 0 14
29045: PUSH
29046: CALL_OW 44
29050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: LD_VAR 0 7
29060: PPUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: CALL_OW 2
29073: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29074: LD_VAR 0 14
29078: PPUSH
29079: LD_VAR 0 12
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: CALL_OW 52
// end ;
29092: GO 28731
29094: POP
29095: POP
// end ;
29096: GO 28033
29098: POP
29099: POP
// result := result ^ buildings ;
29100: LD_ADDR_VAR 0 7
29104: PUSH
29105: LD_VAR 0 7
29109: PUSH
29110: LD_VAR 0 18
29114: ADD
29115: ST_TO_ADDR
// end else
29116: GO 29259
// begin for i = 1 to personel do
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: DOUBLE
29124: LD_INT 1
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 6
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29257
// begin if i > 4 then
29136: LD_VAR 0 8
29140: PUSH
29141: LD_INT 4
29143: GREATER
29144: IFFALSE 29148
// break ;
29146: GO 29257
// x := personel [ i ] ;
29148: LD_ADDR_VAR 0 13
29152: PUSH
29153: LD_VAR 0 6
29157: PUSH
29158: LD_VAR 0 8
29162: ARRAY
29163: ST_TO_ADDR
// if x = - 1 then
29164: LD_VAR 0 13
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: EQUAL
29173: IFFALSE 29177
// continue ;
29175: GO 29133
// PrepareHuman ( false , i , skill ) ;
29177: LD_INT 0
29179: PPUSH
29180: LD_VAR 0 8
29184: PPUSH
29185: LD_VAR 0 4
29189: PPUSH
29190: CALL_OW 380
// un := CreateHuman ;
29194: LD_ADDR_VAR 0 14
29198: PUSH
29199: CALL_OW 44
29203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29204: LD_VAR 0 14
29208: PPUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 250
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 251
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: LD_INT 0
29234: PPUSH
29235: CALL_OW 50
// result := result ^ un ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_VAR 0 7
29248: PUSH
29249: LD_VAR 0 14
29253: ADD
29254: ST_TO_ADDR
// end ;
29255: GO 29133
29257: POP
29258: POP
// end ; end ;
29259: LD_VAR 0 7
29263: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
// result := false ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29290: LD_VAR 0 1
29294: NOT
29295: PUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 266
29305: PUSH
29306: LD_INT 32
29308: PUSH
29309: LD_INT 33
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: IN
29316: NOT
29317: OR
29318: IFFALSE 29322
// exit ;
29320: GO 30458
// nat := GetNation ( tower ) ;
29322: LD_ADDR_VAR 0 12
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 248
29336: ST_TO_ADDR
// side := GetSide ( tower ) ;
29337: LD_ADDR_VAR 0 16
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 255
29351: ST_TO_ADDR
// x := GetX ( tower ) ;
29352: LD_ADDR_VAR 0 10
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 250
29366: ST_TO_ADDR
// y := GetY ( tower ) ;
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 251
29381: ST_TO_ADDR
// if not x or not y then
29382: LD_VAR 0 10
29386: NOT
29387: PUSH
29388: LD_VAR 0 11
29392: NOT
29393: OR
29394: IFFALSE 29398
// exit ;
29396: GO 30458
// weapon := 0 ;
29398: LD_ADDR_VAR 0 18
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// fac_list := [ ] ;
29406: LD_ADDR_VAR 0 17
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29413: LD_ADDR_VAR 0 6
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 274
29427: PPUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL 27036 0 2
29437: PPUSH
29438: LD_INT 30
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 72
29452: ST_TO_ADDR
// if not factories then
29453: LD_VAR 0 6
29457: NOT
29458: IFFALSE 29462
// exit ;
29460: GO 30458
// for i in factories do
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: LD_VAR 0 6
29471: PUSH
29472: FOR_IN
29473: IFFALSE 29498
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29475: LD_ADDR_VAR 0 17
29479: PUSH
29480: LD_VAR 0 17
29484: PUSH
29485: LD_VAR 0 8
29489: PPUSH
29490: CALL_OW 478
29494: UNION
29495: ST_TO_ADDR
29496: GO 29472
29498: POP
29499: POP
// if not fac_list then
29500: LD_VAR 0 17
29504: NOT
29505: IFFALSE 29509
// exit ;
29507: GO 30458
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29509: LD_ADDR_VAR 0 5
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: LD_INT 9
29522: PUSH
29523: LD_INT 10
29525: PUSH
29526: LD_INT 6
29528: PUSH
29529: LD_INT 7
29531: PUSH
29532: LD_INT 11
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 27
29546: PUSH
29547: LD_INT 28
29549: PUSH
29550: LD_INT 26
29552: PUSH
29553: LD_INT 30
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 43
29564: PUSH
29565: LD_INT 44
29567: PUSH
29568: LD_INT 46
29570: PUSH
29571: LD_INT 45
29573: PUSH
29574: LD_INT 47
29576: PUSH
29577: LD_INT 49
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: LD_VAR 0 12
29597: ARRAY
29598: ST_TO_ADDR
// for i in list do
29599: LD_ADDR_VAR 0 8
29603: PUSH
29604: LD_VAR 0 5
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29643
// if not i in fac_list then
29612: LD_VAR 0 8
29616: PUSH
29617: LD_VAR 0 17
29621: IN
29622: NOT
29623: IFFALSE 29641
// list := list diff i ;
29625: LD_ADDR_VAR 0 5
29629: PUSH
29630: LD_VAR 0 5
29634: PUSH
29635: LD_VAR 0 8
29639: DIFF
29640: ST_TO_ADDR
29641: GO 29609
29643: POP
29644: POP
// if not list then
29645: LD_VAR 0 5
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 30458
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29654: LD_VAR 0 12
29658: PUSH
29659: LD_INT 3
29661: EQUAL
29662: PUSH
29663: LD_INT 49
29665: PUSH
29666: LD_VAR 0 5
29670: IN
29671: AND
29672: PUSH
29673: LD_INT 31
29675: PPUSH
29676: LD_VAR 0 16
29680: PPUSH
29681: CALL_OW 321
29685: PUSH
29686: LD_INT 2
29688: EQUAL
29689: AND
29690: IFFALSE 29750
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29692: LD_INT 22
29694: PUSH
29695: LD_VAR 0 16
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 35
29706: PUSH
29707: LD_INT 49
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 91
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: LD_INT 10
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: NOT
29740: IFFALSE 29750
// weapon := ru_time_lapser ;
29742: LD_ADDR_VAR 0 18
29746: PUSH
29747: LD_INT 49
29749: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29750: LD_VAR 0 12
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: IN
29765: PUSH
29766: LD_INT 11
29768: PUSH
29769: LD_VAR 0 5
29773: IN
29774: PUSH
29775: LD_INT 30
29777: PUSH
29778: LD_VAR 0 5
29782: IN
29783: OR
29784: AND
29785: PUSH
29786: LD_INT 6
29788: PPUSH
29789: LD_VAR 0 16
29793: PPUSH
29794: CALL_OW 321
29798: PUSH
29799: LD_INT 2
29801: EQUAL
29802: AND
29803: IFFALSE 29968
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29805: LD_INT 22
29807: PUSH
29808: LD_VAR 0 16
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 35
29822: PUSH
29823: LD_INT 11
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 35
29832: PUSH
29833: LD_INT 30
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 91
29847: PUSH
29848: LD_VAR 0 1
29852: PUSH
29853: LD_INT 18
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: PPUSH
29866: CALL_OW 69
29870: NOT
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_VAR 0 16
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 30
29889: PUSH
29890: LD_INT 32
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 30
29899: PUSH
29900: LD_INT 33
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 91
29914: PUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_INT 12
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: PUSH
29941: LD_INT 2
29943: GREATER
29944: AND
29945: IFFALSE 29968
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29947: LD_ADDR_VAR 0 18
29951: PUSH
29952: LD_INT 11
29954: PUSH
29955: LD_INT 30
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_VAR 0 12
29966: ARRAY
29967: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29968: LD_VAR 0 18
29972: NOT
29973: PUSH
29974: LD_INT 40
29976: PPUSH
29977: LD_VAR 0 16
29981: PPUSH
29982: CALL_OW 321
29986: PUSH
29987: LD_INT 2
29989: EQUAL
29990: AND
29991: PUSH
29992: LD_INT 7
29994: PUSH
29995: LD_VAR 0 5
29999: IN
30000: PUSH
30001: LD_INT 28
30003: PUSH
30004: LD_VAR 0 5
30008: IN
30009: OR
30010: PUSH
30011: LD_INT 45
30013: PUSH
30014: LD_VAR 0 5
30018: IN
30019: OR
30020: AND
30021: IFFALSE 30275
// begin hex := GetHexInfo ( x , y ) ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_VAR 0 10
30032: PPUSH
30033: LD_VAR 0 11
30037: PPUSH
30038: CALL_OW 546
30042: ST_TO_ADDR
// if hex [ 1 ] then
30043: LD_VAR 0 4
30047: PUSH
30048: LD_INT 1
30050: ARRAY
30051: IFFALSE 30055
// exit ;
30053: GO 30458
// height := hex [ 2 ] ;
30055: LD_ADDR_VAR 0 15
30059: PUSH
30060: LD_VAR 0 4
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30069: LD_ADDR_VAR 0 14
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// for i in tmp do
30092: LD_ADDR_VAR 0 8
30096: PUSH
30097: LD_VAR 0 14
30101: PUSH
30102: FOR_IN
30103: IFFALSE 30273
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: LD_VAR 0 8
30119: PPUSH
30120: LD_INT 5
30122: PPUSH
30123: CALL_OW 272
30127: PUSH
30128: LD_VAR 0 11
30132: PPUSH
30133: LD_VAR 0 8
30137: PPUSH
30138: LD_INT 5
30140: PPUSH
30141: CALL_OW 273
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30150: LD_VAR 0 9
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 9
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: CALL_OW 488
30172: IFFALSE 30271
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 9
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 9
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: PPUSH
30197: CALL_OW 546
30201: ST_TO_ADDR
// if hex [ 1 ] then
30202: LD_VAR 0 4
30206: PUSH
30207: LD_INT 1
30209: ARRAY
30210: IFFALSE 30214
// continue ;
30212: GO 30102
// h := hex [ 2 ] ;
30214: LD_ADDR_VAR 0 13
30218: PUSH
30219: LD_VAR 0 4
30223: PUSH
30224: LD_INT 2
30226: ARRAY
30227: ST_TO_ADDR
// if h + 7 < height then
30228: LD_VAR 0 13
30232: PUSH
30233: LD_INT 7
30235: PLUS
30236: PUSH
30237: LD_VAR 0 15
30241: LESS
30242: IFFALSE 30271
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30244: LD_ADDR_VAR 0 18
30248: PUSH
30249: LD_INT 7
30251: PUSH
30252: LD_INT 28
30254: PUSH
30255: LD_INT 45
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: LD_VAR 0 12
30267: ARRAY
30268: ST_TO_ADDR
// break ;
30269: GO 30273
// end ; end ; end ;
30271: GO 30102
30273: POP
30274: POP
// end ; if not weapon then
30275: LD_VAR 0 18
30279: NOT
30280: IFFALSE 30340
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_VAR 0 5
30291: PUSH
30292: LD_INT 11
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 49
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: DIFF
30306: ST_TO_ADDR
// if not list then
30307: LD_VAR 0 5
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30458
// weapon := list [ rand ( 1 , list ) ] ;
30316: LD_ADDR_VAR 0 18
30320: PUSH
30321: LD_VAR 0 5
30325: PUSH
30326: LD_INT 1
30328: PPUSH
30329: LD_VAR 0 5
30333: PPUSH
30334: CALL_OW 12
30338: ARRAY
30339: ST_TO_ADDR
// end ; if weapon then
30340: LD_VAR 0 18
30344: IFFALSE 30458
// begin tmp := CostOfWeapon ( weapon ) ;
30346: LD_ADDR_VAR 0 14
30350: PUSH
30351: LD_VAR 0 18
30355: PPUSH
30356: CALL_OW 451
30360: ST_TO_ADDR
// j := GetBase ( tower ) ;
30361: LD_ADDR_VAR 0 9
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 274
30375: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30376: LD_VAR 0 9
30380: PPUSH
30381: LD_INT 1
30383: PPUSH
30384: CALL_OW 275
30388: PUSH
30389: LD_VAR 0 14
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: GREATEREQUAL
30398: PUSH
30399: LD_VAR 0 9
30403: PPUSH
30404: LD_INT 2
30406: PPUSH
30407: CALL_OW 275
30411: PUSH
30412: LD_VAR 0 14
30416: PUSH
30417: LD_INT 2
30419: ARRAY
30420: GREATEREQUAL
30421: AND
30422: PUSH
30423: LD_VAR 0 9
30427: PPUSH
30428: LD_INT 3
30430: PPUSH
30431: CALL_OW 275
30435: PUSH
30436: LD_VAR 0 14
30440: PUSH
30441: LD_INT 3
30443: ARRAY
30444: GREATEREQUAL
30445: AND
30446: IFFALSE 30458
// result := weapon ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_VAR 0 18
30457: ST_TO_ADDR
// end ; end ;
30458: LD_VAR 0 3
30462: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30463: LD_INT 0
30465: PPUSH
30466: PPUSH
// result := true ;
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// if array1 = array2 then
30475: LD_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: EQUAL
30485: IFFALSE 30545
// begin for i = 1 to array1 do
30487: LD_ADDR_VAR 0 4
30491: PUSH
30492: DOUBLE
30493: LD_INT 1
30495: DEC
30496: ST_TO_ADDR
30497: LD_VAR 0 1
30501: PUSH
30502: FOR_TO
30503: IFFALSE 30541
// if array1 [ i ] <> array2 [ i ] then
30505: LD_VAR 0 1
30509: PUSH
30510: LD_VAR 0 4
30514: ARRAY
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_VAR 0 4
30525: ARRAY
30526: NONEQUAL
30527: IFFALSE 30539
// begin result := false ;
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 0
30536: ST_TO_ADDR
// break ;
30537: GO 30541
// end ;
30539: GO 30502
30541: POP
30542: POP
// end else
30543: GO 30553
// result := false ;
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_INT 0
30552: ST_TO_ADDR
// end ;
30553: LD_VAR 0 3
30557: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
// pom := GetBase ( fac ) ;
30563: LD_ADDR_VAR 0 5
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 274
30577: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: LD_VAR 0 2
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_VAR 0 2
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PUSH
30606: LD_INT 3
30608: ARRAY
30609: PPUSH
30610: LD_VAR 0 2
30614: PUSH
30615: LD_INT 4
30617: ARRAY
30618: PPUSH
30619: CALL_OW 449
30623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 5
30633: PPUSH
30634: LD_INT 1
30636: PPUSH
30637: CALL_OW 275
30641: PUSH
30642: LD_VAR 0 4
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: GREATEREQUAL
30651: PUSH
30652: LD_VAR 0 5
30656: PPUSH
30657: LD_INT 2
30659: PPUSH
30660: CALL_OW 275
30664: PUSH
30665: LD_VAR 0 4
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: GREATEREQUAL
30674: AND
30675: PUSH
30676: LD_VAR 0 5
30680: PPUSH
30681: LD_INT 3
30683: PPUSH
30684: CALL_OW 275
30688: PUSH
30689: LD_VAR 0 4
30693: PUSH
30694: LD_INT 3
30696: ARRAY
30697: GREATEREQUAL
30698: AND
30699: ST_TO_ADDR
// end ;
30700: LD_VAR 0 3
30704: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30705: LD_INT 0
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// pom := GetBase ( building ) ;
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 274
30725: ST_TO_ADDR
// if not pom then
30726: LD_VAR 0 3
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 30905
// btype := GetBType ( building ) ;
30735: LD_ADDR_VAR 0 5
30739: PUSH
30740: LD_VAR 0 1
30744: PPUSH
30745: CALL_OW 266
30749: ST_TO_ADDR
// if btype = b_armoury then
30750: LD_VAR 0 5
30754: PUSH
30755: LD_INT 4
30757: EQUAL
30758: IFFALSE 30768
// btype := b_barracks ;
30760: LD_ADDR_VAR 0 5
30764: PUSH
30765: LD_INT 5
30767: ST_TO_ADDR
// if btype = b_depot then
30768: LD_VAR 0 5
30772: PUSH
30773: LD_INT 0
30775: EQUAL
30776: IFFALSE 30786
// btype := b_warehouse ;
30778: LD_ADDR_VAR 0 5
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
// if btype = b_workshop then
30786: LD_VAR 0 5
30790: PUSH
30791: LD_INT 2
30793: EQUAL
30794: IFFALSE 30804
// btype := b_factory ;
30796: LD_ADDR_VAR 0 5
30800: PUSH
30801: LD_INT 3
30803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30804: LD_ADDR_VAR 0 4
30808: PUSH
30809: LD_VAR 0 5
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 248
30823: PPUSH
30824: CALL_OW 450
30828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30829: LD_ADDR_VAR 0 2
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_INT 1
30841: PPUSH
30842: CALL_OW 275
30846: PUSH
30847: LD_VAR 0 4
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: GREATEREQUAL
30856: PUSH
30857: LD_VAR 0 3
30861: PPUSH
30862: LD_INT 2
30864: PPUSH
30865: CALL_OW 275
30869: PUSH
30870: LD_VAR 0 4
30874: PUSH
30875: LD_INT 2
30877: ARRAY
30878: GREATEREQUAL
30879: AND
30880: PUSH
30881: LD_VAR 0 3
30885: PPUSH
30886: LD_INT 3
30888: PPUSH
30889: CALL_OW 275
30893: PUSH
30894: LD_VAR 0 4
30898: PUSH
30899: LD_INT 3
30901: ARRAY
30902: GREATEREQUAL
30903: AND
30904: ST_TO_ADDR
// end ;
30905: LD_VAR 0 2
30909: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
// pom := GetBase ( building ) ;
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 274
30929: ST_TO_ADDR
// if not pom then
30930: LD_VAR 0 4
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31040
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 248
30958: PPUSH
30959: CALL_OW 450
30963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_VAR 0 4
30973: PPUSH
30974: LD_INT 1
30976: PPUSH
30977: CALL_OW 275
30981: PUSH
30982: LD_VAR 0 5
30986: PUSH
30987: LD_INT 1
30989: ARRAY
30990: GREATEREQUAL
30991: PUSH
30992: LD_VAR 0 4
30996: PPUSH
30997: LD_INT 2
30999: PPUSH
31000: CALL_OW 275
31004: PUSH
31005: LD_VAR 0 5
31009: PUSH
31010: LD_INT 2
31012: ARRAY
31013: GREATEREQUAL
31014: AND
31015: PUSH
31016: LD_VAR 0 4
31020: PPUSH
31021: LD_INT 3
31023: PPUSH
31024: CALL_OW 275
31028: PUSH
31029: LD_VAR 0 5
31033: PUSH
31034: LD_INT 3
31036: ARRAY
31037: GREATEREQUAL
31038: AND
31039: ST_TO_ADDR
// end ;
31040: LD_VAR 0 3
31044: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31045: LD_INT 0
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
// result := false ;
31057: LD_ADDR_VAR 0 6
31061: PUSH
31062: LD_INT 0
31064: ST_TO_ADDR
// if not base or not btype or not x or not y then
31065: LD_VAR 0 1
31069: NOT
31070: PUSH
31071: LD_VAR 0 2
31075: NOT
31076: OR
31077: PUSH
31078: LD_VAR 0 3
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 4
31089: NOT
31090: OR
31091: IFFALSE 31095
// exit ;
31093: GO 31704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31095: LD_ADDR_VAR 0 12
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: LD_VAR 0 5
31119: PPUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PPUSH
31129: CALL_OW 248
31133: PPUSH
31134: LD_INT 0
31136: PPUSH
31137: CALL 32541 0 6
31141: ST_TO_ADDR
// if not hexes then
31142: LD_VAR 0 12
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31704
// for i = 1 to hexes do
31151: LD_ADDR_VAR 0 7
31155: PUSH
31156: DOUBLE
31157: LD_INT 1
31159: DEC
31160: ST_TO_ADDR
31161: LD_VAR 0 12
31165: PUSH
31166: FOR_TO
31167: IFFALSE 31702
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31169: LD_ADDR_VAR 0 11
31173: PUSH
31174: LD_VAR 0 12
31178: PUSH
31179: LD_VAR 0 7
31183: ARRAY
31184: PUSH
31185: LD_INT 1
31187: ARRAY
31188: PPUSH
31189: LD_VAR 0 12
31193: PUSH
31194: LD_VAR 0 7
31198: ARRAY
31199: PUSH
31200: LD_INT 2
31202: ARRAY
31203: PPUSH
31204: CALL_OW 428
31208: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31209: LD_VAR 0 12
31213: PUSH
31214: LD_VAR 0 7
31218: ARRAY
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PPUSH
31224: LD_VAR 0 12
31228: PUSH
31229: LD_VAR 0 7
31233: ARRAY
31234: PUSH
31235: LD_INT 2
31237: ARRAY
31238: PPUSH
31239: CALL_OW 351
31243: PUSH
31244: LD_VAR 0 12
31248: PUSH
31249: LD_VAR 0 7
31253: ARRAY
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: LD_VAR 0 12
31263: PUSH
31264: LD_VAR 0 7
31268: ARRAY
31269: PUSH
31270: LD_INT 2
31272: ARRAY
31273: PPUSH
31274: CALL_OW 488
31278: NOT
31279: OR
31280: PUSH
31281: LD_VAR 0 11
31285: PPUSH
31286: CALL_OW 247
31290: PUSH
31291: LD_INT 3
31293: EQUAL
31294: OR
31295: IFFALSE 31301
// exit ;
31297: POP
31298: POP
31299: GO 31704
// if not tmp or not tmp in base then
31301: LD_VAR 0 11
31305: NOT
31306: PUSH
31307: LD_VAR 0 11
31311: PUSH
31312: LD_VAR 0 1
31316: IN
31317: NOT
31318: OR
31319: IFFALSE 31323
// continue ;
31321: GO 31166
// result := true ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_INT 1
31330: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31331: LD_ADDR_VAR 0 15
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_INT 22
31343: PUSH
31344: LD_VAR 0 11
31348: PPUSH
31349: CALL_OW 255
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 72
31394: ST_TO_ADDR
// if dep then
31395: LD_VAR 0 15
31399: IFFALSE 31535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31401: LD_ADDR_VAR 0 14
31405: PUSH
31406: LD_VAR 0 15
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: CALL_OW 250
31419: PPUSH
31420: LD_VAR 0 15
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: PPUSH
31429: CALL_OW 254
31433: PPUSH
31434: LD_INT 5
31436: PPUSH
31437: CALL_OW 272
31441: PUSH
31442: LD_VAR 0 15
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: CALL_OW 251
31455: PPUSH
31456: LD_VAR 0 15
31460: PUSH
31461: LD_INT 1
31463: ARRAY
31464: PPUSH
31465: CALL_OW 254
31469: PPUSH
31470: LD_INT 5
31472: PPUSH
31473: CALL_OW 273
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31482: LD_VAR 0 14
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: LD_VAR 0 14
31495: PUSH
31496: LD_INT 2
31498: ARRAY
31499: PPUSH
31500: CALL_OW 488
31504: IFFALSE 31535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31506: LD_VAR 0 11
31510: PPUSH
31511: LD_VAR 0 14
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 14
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 111
// continue ;
31533: GO 31166
// end ; end ; r := GetDir ( tmp ) ;
31535: LD_ADDR_VAR 0 13
31539: PUSH
31540: LD_VAR 0 11
31544: PPUSH
31545: CALL_OW 254
31549: ST_TO_ADDR
// if r = 5 then
31550: LD_VAR 0 13
31554: PUSH
31555: LD_INT 5
31557: EQUAL
31558: IFFALSE 31568
// r := 0 ;
31560: LD_ADDR_VAR 0 13
31564: PUSH
31565: LD_INT 0
31567: ST_TO_ADDR
// for j = r to 5 do
31568: LD_ADDR_VAR 0 8
31572: PUSH
31573: DOUBLE
31574: LD_VAR 0 13
31578: DEC
31579: ST_TO_ADDR
31580: LD_INT 5
31582: PUSH
31583: FOR_TO
31584: IFFALSE 31698
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31586: LD_ADDR_VAR 0 9
31590: PUSH
31591: LD_VAR 0 11
31595: PPUSH
31596: CALL_OW 250
31600: PPUSH
31601: LD_VAR 0 8
31605: PPUSH
31606: LD_INT 2
31608: PPUSH
31609: CALL_OW 272
31613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31614: LD_ADDR_VAR 0 10
31618: PUSH
31619: LD_VAR 0 11
31623: PPUSH
31624: CALL_OW 251
31628: PPUSH
31629: LD_VAR 0 8
31633: PPUSH
31634: LD_INT 2
31636: PPUSH
31637: CALL_OW 273
31641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31642: LD_VAR 0 9
31646: PPUSH
31647: LD_VAR 0 10
31651: PPUSH
31652: CALL_OW 488
31656: PUSH
31657: LD_VAR 0 9
31661: PPUSH
31662: LD_VAR 0 10
31666: PPUSH
31667: CALL_OW 428
31671: NOT
31672: AND
31673: IFFALSE 31696
// begin ComMoveXY ( tmp , _x , _y ) ;
31675: LD_VAR 0 11
31679: PPUSH
31680: LD_VAR 0 9
31684: PPUSH
31685: LD_VAR 0 10
31689: PPUSH
31690: CALL_OW 111
// break ;
31694: GO 31698
// end ; end ;
31696: GO 31583
31698: POP
31699: POP
// end ;
31700: GO 31166
31702: POP
31703: POP
// end ;
31704: LD_VAR 0 6
31708: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
// result := false ;
31721: LD_ADDR_VAR 0 6
31725: PUSH
31726: LD_INT 0
31728: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31729: LD_VAR 0 1
31733: NOT
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 266
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: IN
31755: NOT
31756: OR
31757: PUSH
31758: LD_VAR 0 2
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 5
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 5
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: IN
31796: NOT
31797: OR
31798: PUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_VAR 0 4
31808: PPUSH
31809: CALL_OW 488
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 32536
// pom := GetBase ( depot ) ;
31819: LD_ADDR_VAR 0 10
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 274
31833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31834: LD_ADDR_VAR 0 11
31838: PUSH
31839: LD_VAR 0 2
31843: PPUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 248
31853: PPUSH
31854: CALL_OW 450
31858: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31859: LD_VAR 0 10
31863: PPUSH
31864: LD_INT 1
31866: PPUSH
31867: CALL_OW 275
31871: PUSH
31872: LD_VAR 0 11
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: GREATEREQUAL
31881: PUSH
31882: LD_VAR 0 10
31886: PPUSH
31887: LD_INT 2
31889: PPUSH
31890: CALL_OW 275
31894: PUSH
31895: LD_VAR 0 11
31899: PUSH
31900: LD_INT 2
31902: ARRAY
31903: GREATEREQUAL
31904: AND
31905: PUSH
31906: LD_VAR 0 10
31910: PPUSH
31911: LD_INT 3
31913: PPUSH
31914: CALL_OW 275
31918: PUSH
31919: LD_VAR 0 11
31923: PUSH
31924: LD_INT 3
31926: ARRAY
31927: GREATEREQUAL
31928: AND
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 32536
// if GetBType ( depot ) = b_depot then
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 266
31943: PUSH
31944: LD_INT 0
31946: EQUAL
31947: IFFALSE 31959
// dist := 28 else
31949: LD_ADDR_VAR 0 14
31953: PUSH
31954: LD_INT 28
31956: ST_TO_ADDR
31957: GO 31967
// dist := 36 ;
31959: LD_ADDR_VAR 0 14
31963: PUSH
31964: LD_INT 36
31966: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31967: LD_VAR 0 1
31971: PPUSH
31972: LD_VAR 0 3
31976: PPUSH
31977: LD_VAR 0 4
31981: PPUSH
31982: CALL_OW 297
31986: PUSH
31987: LD_VAR 0 14
31991: GREATER
31992: IFFALSE 31996
// exit ;
31994: GO 32536
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31996: LD_ADDR_VAR 0 12
32000: PUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_VAR 0 4
32015: PPUSH
32016: LD_VAR 0 5
32020: PPUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 248
32030: PPUSH
32031: LD_INT 0
32033: PPUSH
32034: CALL 32541 0 6
32038: ST_TO_ADDR
// if not hexes then
32039: LD_VAR 0 12
32043: NOT
32044: IFFALSE 32048
// exit ;
32046: GO 32536
// hex := GetHexInfo ( x , y ) ;
32048: LD_ADDR_VAR 0 15
32052: PUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: CALL_OW 546
32067: ST_TO_ADDR
// if hex [ 1 ] then
32068: LD_VAR 0 15
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: IFFALSE 32080
// exit ;
32078: GO 32536
// height := hex [ 2 ] ;
32080: LD_ADDR_VAR 0 13
32084: PUSH
32085: LD_VAR 0 15
32089: PUSH
32090: LD_INT 2
32092: ARRAY
32093: ST_TO_ADDR
// for i = 1 to hexes do
32094: LD_ADDR_VAR 0 7
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_VAR 0 12
32108: PUSH
32109: FOR_TO
32110: IFFALSE 32440
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32112: LD_VAR 0 12
32116: PUSH
32117: LD_VAR 0 7
32121: ARRAY
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PPUSH
32127: LD_VAR 0 12
32131: PUSH
32132: LD_VAR 0 7
32136: ARRAY
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 488
32146: NOT
32147: PUSH
32148: LD_VAR 0 12
32152: PUSH
32153: LD_VAR 0 7
32157: ARRAY
32158: PUSH
32159: LD_INT 1
32161: ARRAY
32162: PPUSH
32163: LD_VAR 0 12
32167: PUSH
32168: LD_VAR 0 7
32172: ARRAY
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: PPUSH
32178: CALL_OW 428
32182: PUSH
32183: LD_INT 0
32185: GREATER
32186: OR
32187: PUSH
32188: LD_VAR 0 12
32192: PUSH
32193: LD_VAR 0 7
32197: ARRAY
32198: PUSH
32199: LD_INT 1
32201: ARRAY
32202: PPUSH
32203: LD_VAR 0 12
32207: PUSH
32208: LD_VAR 0 7
32212: ARRAY
32213: PUSH
32214: LD_INT 2
32216: ARRAY
32217: PPUSH
32218: CALL_OW 351
32222: OR
32223: IFFALSE 32229
// exit ;
32225: POP
32226: POP
32227: GO 32536
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32229: LD_ADDR_VAR 0 8
32233: PUSH
32234: LD_VAR 0 12
32238: PUSH
32239: LD_VAR 0 7
32243: ARRAY
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: PPUSH
32249: LD_VAR 0 12
32253: PUSH
32254: LD_VAR 0 7
32258: ARRAY
32259: PUSH
32260: LD_INT 2
32262: ARRAY
32263: PPUSH
32264: CALL_OW 546
32268: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32269: LD_VAR 0 8
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: PUSH
32278: LD_VAR 0 8
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: PUSH
32287: LD_VAR 0 13
32291: PUSH
32292: LD_INT 2
32294: PLUS
32295: GREATER
32296: OR
32297: PUSH
32298: LD_VAR 0 8
32302: PUSH
32303: LD_INT 2
32305: ARRAY
32306: PUSH
32307: LD_VAR 0 13
32311: PUSH
32312: LD_INT 2
32314: MINUS
32315: LESS
32316: OR
32317: PUSH
32318: LD_VAR 0 8
32322: PUSH
32323: LD_INT 3
32325: ARRAY
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 8
32332: PUSH
32333: LD_INT 9
32335: PUSH
32336: LD_INT 10
32338: PUSH
32339: LD_INT 11
32341: PUSH
32342: LD_INT 12
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: LD_INT 16
32350: PUSH
32351: LD_INT 17
32353: PUSH
32354: LD_INT 18
32356: PUSH
32357: LD_INT 19
32359: PUSH
32360: LD_INT 20
32362: PUSH
32363: LD_INT 21
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: IN
32381: NOT
32382: OR
32383: PUSH
32384: LD_VAR 0 8
32388: PUSH
32389: LD_INT 5
32391: ARRAY
32392: NOT
32393: OR
32394: PUSH
32395: LD_VAR 0 8
32399: PUSH
32400: LD_INT 6
32402: ARRAY
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 7
32412: PUSH
32413: LD_INT 9
32415: PUSH
32416: LD_INT 10
32418: PUSH
32419: LD_INT 11
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: IN
32430: NOT
32431: OR
32432: IFFALSE 32438
// exit ;
32434: POP
32435: POP
32436: GO 32536
// end ;
32438: GO 32109
32440: POP
32441: POP
// side := GetSide ( depot ) ;
32442: LD_ADDR_VAR 0 9
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 255
32456: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32457: LD_VAR 0 9
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_VAR 0 4
32471: PPUSH
32472: LD_INT 20
32474: PPUSH
32475: CALL 25190 0 4
32479: PUSH
32480: LD_INT 4
32482: ARRAY
32483: IFFALSE 32487
// exit ;
32485: GO 32536
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32487: LD_VAR 0 2
32491: PUSH
32492: LD_INT 29
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: IN
32502: PUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: LD_VAR 0 4
32512: PPUSH
32513: LD_VAR 0 9
32517: PPUSH
32518: CALL_OW 440
32522: NOT
32523: AND
32524: IFFALSE 32528
// exit ;
32526: GO 32536
// result := true ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_INT 1
32535: ST_TO_ADDR
// end ;
32536: LD_VAR 0 6
32540: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32541: LD_INT 0
32543: PPUSH
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
// result = [ ] ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: EMPTY
32607: ST_TO_ADDR
// temp_list = [ ] ;
32608: LD_ADDR_VAR 0 9
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32615: LD_VAR 0 4
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: IN
32646: NOT
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: IN
32663: PUSH
32664: LD_VAR 0 5
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: IN
32683: NOT
32684: AND
32685: OR
32686: IFFALSE 32690
// exit ;
32688: GO 51081
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32690: LD_VAR 0 1
32694: PUSH
32695: LD_INT 6
32697: PUSH
32698: LD_INT 7
32700: PUSH
32701: LD_INT 8
32703: PUSH
32704: LD_INT 13
32706: PUSH
32707: LD_INT 12
32709: PUSH
32710: LD_INT 15
32712: PUSH
32713: LD_INT 11
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: LD_INT 10
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: IN
32733: IFFALSE 32743
// btype = b_lab ;
32735: LD_ADDR_VAR 0 1
32739: PUSH
32740: LD_INT 6
32742: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32743: LD_VAR 0 6
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: IN
32762: NOT
32763: PUSH
32764: LD_VAR 0 1
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 36
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 31
32795: PUSH
32796: LD_INT 32
32798: PUSH
32799: LD_INT 33
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: IN
32815: NOT
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: LD_INT 1
32824: EQUAL
32825: AND
32826: OR
32827: PUSH
32828: LD_VAR 0 1
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: IN
32843: NOT
32844: PUSH
32845: LD_VAR 0 6
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: AND
32854: OR
32855: IFFALSE 32865
// mode = 0 ;
32857: LD_ADDR_VAR 0 6
32861: PUSH
32862: LD_INT 0
32864: ST_TO_ADDR
// case mode of 0 :
32865: LD_VAR 0 6
32869: PUSH
32870: LD_INT 0
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 44331
32878: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32879: LD_ADDR_VAR 0 11
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33268: LD_ADDR_VAR 0 13
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: NEG
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33467: LD_ADDR_VAR 0 14
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 3
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33663: LD_ADDR_VAR 0 15
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33856: LD_ADDR_VAR 0 16
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34049: LD_ADDR_VAR 0 17
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34279: LD_ADDR_VAR 0 18
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34509: LD_ADDR_VAR 0 19
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 20
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34969: LD_ADDR_VAR 0 21
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 22
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35429: LD_ADDR_VAR 0 23
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 3
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 3
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35709: LD_ADDR_VAR 0 24
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35985: LD_ADDR_VAR 0 25
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36259: LD_ADDR_VAR 0 26
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36535: LD_ADDR_VAR 0 27
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 3
36780: NEG
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36815: LD_ADDR_VAR 0 28
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 3
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37097: LD_ADDR_VAR 0 29
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37376: LD_ADDR_VAR 0 30
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 3
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37654: LD_ADDR_VAR 0 31
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 3
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37932: LD_ADDR_VAR 0 32
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 3
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38210: LD_ADDR_VAR 0 33
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 3
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38489: LD_ADDR_VAR 0 34
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38769: LD_ADDR_VAR 0 35
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38881: LD_ADDR_VAR 0 36
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38993: LD_ADDR_VAR 0 37
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39105: LD_ADDR_VAR 0 38
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39217: LD_ADDR_VAR 0 39
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39329: LD_ADDR_VAR 0 40
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39441: LD_ADDR_VAR 0 41
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 3
39738: NEG
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: LD_INT 3
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39791: LD_ADDR_VAR 0 42
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40141: LD_ADDR_VAR 0 43
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 3
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40489: LD_ADDR_VAR 0 44
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40839: LD_ADDR_VAR 0 45
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41189: LD_ADDR_VAR 0 46
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41537: LD_ADDR_VAR 0 47
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41688: LD_ADDR_VAR 0 48
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41835: LD_ADDR_VAR 0 49
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41979: LD_ADDR_VAR 0 50
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42123: LD_ADDR_VAR 0 51
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42270: LD_ADDR_VAR 0 52
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42421: LD_ADDR_VAR 0 53
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42651: LD_ADDR_VAR 0 54
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 55
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43111: LD_ADDR_VAR 0 56
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43341: LD_ADDR_VAR 0 57
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43571: LD_ADDR_VAR 0 58
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 59
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43889: LD_ADDR_VAR 0 60
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43977: LD_ADDR_VAR 0 61
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44065: LD_ADDR_VAR 0 62
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44153: LD_ADDR_VAR 0 63
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44241: LD_ADDR_VAR 0 64
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// end ; 1 :
44329: GO 50226
44331: LD_INT 1
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44339
44337: GO 46962
44339: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44340: LD_ADDR_VAR 0 11
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44384: LD_ADDR_VAR 0 12
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44425: LD_ADDR_VAR 0 13
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44465: LD_ADDR_VAR 0 14
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44506: LD_ADDR_VAR 0 15
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44550: LD_ADDR_VAR 0 16
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44596: LD_ADDR_VAR 0 17
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44640: LD_ADDR_VAR 0 18
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44681: LD_ADDR_VAR 0 19
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44721: LD_ADDR_VAR 0 20
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44762: LD_ADDR_VAR 0 21
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44806: LD_ADDR_VAR 0 22
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: NEG
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44852: LD_ADDR_VAR 0 23
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 4
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44896: LD_ADDR_VAR 0 24
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44937: LD_ADDR_VAR 0 25
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44977: LD_ADDR_VAR 0 26
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 4
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45018: LD_ADDR_VAR 0 27
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 4
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45062: LD_ADDR_VAR 0 28
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45108: LD_ADDR_VAR 0 29
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 3
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 4
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 5
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 5
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 6
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 6
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45263: LD_ADDR_VAR 0 30
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 6
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45406: LD_ADDR_VAR 0 31
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 4
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 5
45473: PUSH
45474: LD_INT 4
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 5
45483: PUSH
45484: LD_INT 5
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 6
45513: PUSH
45514: LD_INT 6
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: LD_INT 6
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45545: LD_ADDR_VAR 0 32
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 6
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 6
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 5
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45688: LD_ADDR_VAR 0 33
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 4
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 4
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 5
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 5
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 6
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 6
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45843: LD_ADDR_VAR 0 34
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 4
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 4
45898: NEG
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 4
45910: NEG
45911: PUSH
45912: LD_INT 4
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 4
45922: NEG
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 5
45934: NEG
45935: PUSH
45936: LD_INT 4
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: NEG
45947: PUSH
45948: LD_INT 5
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 5
45958: NEG
45959: PUSH
45960: LD_INT 6
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 6
45970: NEG
45971: PUSH
45972: LD_INT 5
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 6
45982: NEG
45983: PUSH
45984: LD_INT 6
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46006: LD_ADDR_VAR 0 41
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46050: LD_ADDR_VAR 0 42
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46091: LD_ADDR_VAR 0 43
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46131: LD_ADDR_VAR 0 44
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46172: LD_ADDR_VAR 0 45
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46216: LD_ADDR_VAR 0 46
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46262: LD_ADDR_VAR 0 47
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46295: LD_ADDR_VAR 0 48
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46326: LD_ADDR_VAR 0 49
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46355: LD_ADDR_VAR 0 50
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46384: LD_ADDR_VAR 0 51
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46415: LD_ADDR_VAR 0 52
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 53
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46492: LD_ADDR_VAR 0 54
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46533: LD_ADDR_VAR 0 55
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46573: LD_ADDR_VAR 0 56
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46614: LD_ADDR_VAR 0 57
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46658: LD_ADDR_VAR 0 58
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46704: LD_ADDR_VAR 0 59
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46748: LD_ADDR_VAR 0 60
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46789: LD_ADDR_VAR 0 61
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46829: LD_ADDR_VAR 0 62
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46870: LD_ADDR_VAR 0 63
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46914: LD_ADDR_VAR 0 64
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// end ; 2 :
46960: GO 50226
46962: LD_INT 2
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46970
46968: GO 50225
46970: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46971: LD_ADDR_VAR 0 29
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 5
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 4
47101: PUSH
47102: LD_INT 4
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 4
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 4
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 4
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 4
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: NEG
47357: PUSH
47358: LD_INT 4
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: NEG
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 5
47416: NEG
47417: PUSH
47418: LD_INT 4
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 5
47428: NEG
47429: PUSH
47430: LD_INT 5
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 5
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47509: LD_ADDR_VAR 0 30
47513: PUSH
47514: LD_INT 4
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: LD_INT 5
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 5
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 5
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 4
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 4
47699: NEG
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 4
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 4
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: NEG
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 5
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 5
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 4
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 4
47873: NEG
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 4
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 4
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 5
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 4
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 5
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 5
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48056: LD_ADDR_VAR 0 31
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 4
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 4
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: LD_INT 5
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 4
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 5
48318: NEG
48319: PUSH
48320: LD_INT 4
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 5
48330: NEG
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: LD_INT 5
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 5
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 4
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 3
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 4
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 4
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 4
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 4
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48606: LD_ADDR_VAR 0 32
48610: PUSH
48611: LD_INT 4
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 4
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 5
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 5
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 4
48787: NEG
48788: PUSH
48789: LD_INT 4
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 4
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 4
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 5
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 4
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 4
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 5
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 3
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 5
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: PUSH
49039: LD_INT 4
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 5
49048: PUSH
49049: LD_INT 5
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 5
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: LD_INT 5
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49153: LD_ADDR_VAR 0 33
49157: PUSH
49158: LD_INT 4
49160: NEG
49161: PUSH
49162: LD_INT 4
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: NEG
49173: PUSH
49174: LD_INT 5
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 4
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 4
49208: NEG
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: NEG
49221: PUSH
49222: LD_INT 4
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 5
49232: NEG
49233: PUSH
49234: LD_INT 5
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 5
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 4
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 4
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 4
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 4
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 4
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 4
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 4
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 5
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 5
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49691: LD_ADDR_VAR 0 34
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 5
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 5
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 4
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 4
49933: PUSH
49934: LD_INT 5
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: LD_INT 4
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 5
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 4
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 4
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 4
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 5
50132: NEG
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 5
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 5
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// end ; end ;
50223: GO 50226
50225: POP
// case btype of b_depot , b_warehouse :
50226: LD_VAR 0 1
50230: PUSH
50231: LD_INT 0
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50245
50237: LD_INT 1
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50245
50243: GO 50446
50245: POP
// case nation of nation_american :
50246: LD_VAR 0 5
50250: PUSH
50251: LD_INT 1
50253: DOUBLE
50254: EQUAL
50255: IFTRUE 50259
50257: GO 50315
50259: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50260: LD_ADDR_VAR 0 9
50264: PUSH
50265: LD_VAR 0 11
50269: PUSH
50270: LD_VAR 0 12
50274: PUSH
50275: LD_VAR 0 13
50279: PUSH
50280: LD_VAR 0 14
50284: PUSH
50285: LD_VAR 0 15
50289: PUSH
50290: LD_VAR 0 16
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: PUSH
50303: LD_VAR 0 4
50307: PUSH
50308: LD_INT 1
50310: PLUS
50311: ARRAY
50312: ST_TO_ADDR
50313: GO 50444
50315: LD_INT 2
50317: DOUBLE
50318: EQUAL
50319: IFTRUE 50323
50321: GO 50379
50323: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50324: LD_ADDR_VAR 0 9
50328: PUSH
50329: LD_VAR 0 17
50333: PUSH
50334: LD_VAR 0 18
50338: PUSH
50339: LD_VAR 0 19
50343: PUSH
50344: LD_VAR 0 20
50348: PUSH
50349: LD_VAR 0 21
50353: PUSH
50354: LD_VAR 0 22
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 1
50374: PLUS
50375: ARRAY
50376: ST_TO_ADDR
50377: GO 50444
50379: LD_INT 3
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50443
50387: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50388: LD_ADDR_VAR 0 9
50392: PUSH
50393: LD_VAR 0 23
50397: PUSH
50398: LD_VAR 0 24
50402: PUSH
50403: LD_VAR 0 25
50407: PUSH
50408: LD_VAR 0 26
50412: PUSH
50413: LD_VAR 0 27
50417: PUSH
50418: LD_VAR 0 28
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: LD_VAR 0 4
50435: PUSH
50436: LD_INT 1
50438: PLUS
50439: ARRAY
50440: ST_TO_ADDR
50441: GO 50444
50443: POP
50444: GO 50999
50446: LD_INT 2
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50460
50452: LD_INT 3
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50460
50458: GO 50516
50460: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50461: LD_ADDR_VAR 0 9
50465: PUSH
50466: LD_VAR 0 29
50470: PUSH
50471: LD_VAR 0 30
50475: PUSH
50476: LD_VAR 0 31
50480: PUSH
50481: LD_VAR 0 32
50485: PUSH
50486: LD_VAR 0 33
50490: PUSH
50491: LD_VAR 0 34
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: LD_VAR 0 4
50508: PUSH
50509: LD_INT 1
50511: PLUS
50512: ARRAY
50513: ST_TO_ADDR
50514: GO 50999
50516: LD_INT 16
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50578
50522: LD_INT 17
50524: DOUBLE
50525: EQUAL
50526: IFTRUE 50578
50528: LD_INT 18
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50578
50534: LD_INT 19
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50578
50540: LD_INT 22
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50578
50546: LD_INT 20
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50578
50552: LD_INT 21
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50578
50558: LD_INT 23
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50578
50564: LD_INT 24
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50578
50570: LD_INT 25
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50634
50578: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50579: LD_ADDR_VAR 0 9
50583: PUSH
50584: LD_VAR 0 35
50588: PUSH
50589: LD_VAR 0 36
50593: PUSH
50594: LD_VAR 0 37
50598: PUSH
50599: LD_VAR 0 38
50603: PUSH
50604: LD_VAR 0 39
50608: PUSH
50609: LD_VAR 0 40
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: LD_INT 1
50629: PLUS
50630: ARRAY
50631: ST_TO_ADDR
50632: GO 50999
50634: LD_INT 6
50636: DOUBLE
50637: EQUAL
50638: IFTRUE 50690
50640: LD_INT 7
50642: DOUBLE
50643: EQUAL
50644: IFTRUE 50690
50646: LD_INT 8
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50690
50652: LD_INT 13
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50690
50658: LD_INT 12
50660: DOUBLE
50661: EQUAL
50662: IFTRUE 50690
50664: LD_INT 15
50666: DOUBLE
50667: EQUAL
50668: IFTRUE 50690
50670: LD_INT 11
50672: DOUBLE
50673: EQUAL
50674: IFTRUE 50690
50676: LD_INT 14
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50690
50682: LD_INT 10
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50746
50690: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: LD_VAR 0 41
50700: PUSH
50701: LD_VAR 0 42
50705: PUSH
50706: LD_VAR 0 43
50710: PUSH
50711: LD_VAR 0 44
50715: PUSH
50716: LD_VAR 0 45
50720: PUSH
50721: LD_VAR 0 46
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: PUSH
50734: LD_VAR 0 4
50738: PUSH
50739: LD_INT 1
50741: PLUS
50742: ARRAY
50743: ST_TO_ADDR
50744: GO 50999
50746: LD_INT 36
50748: DOUBLE
50749: EQUAL
50750: IFTRUE 50754
50752: GO 50810
50754: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50755: LD_ADDR_VAR 0 9
50759: PUSH
50760: LD_VAR 0 47
50764: PUSH
50765: LD_VAR 0 48
50769: PUSH
50770: LD_VAR 0 49
50774: PUSH
50775: LD_VAR 0 50
50779: PUSH
50780: LD_VAR 0 51
50784: PUSH
50785: LD_VAR 0 52
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: PUSH
50798: LD_VAR 0 4
50802: PUSH
50803: LD_INT 1
50805: PLUS
50806: ARRAY
50807: ST_TO_ADDR
50808: GO 50999
50810: LD_INT 4
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50836
50816: LD_INT 5
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50836
50822: LD_INT 34
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50836
50828: LD_INT 37
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50892
50836: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50837: LD_ADDR_VAR 0 9
50841: PUSH
50842: LD_VAR 0 53
50846: PUSH
50847: LD_VAR 0 54
50851: PUSH
50852: LD_VAR 0 55
50856: PUSH
50857: LD_VAR 0 56
50861: PUSH
50862: LD_VAR 0 57
50866: PUSH
50867: LD_VAR 0 58
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: LD_VAR 0 4
50884: PUSH
50885: LD_INT 1
50887: PLUS
50888: ARRAY
50889: ST_TO_ADDR
50890: GO 50999
50892: LD_INT 31
50894: DOUBLE
50895: EQUAL
50896: IFTRUE 50942
50898: LD_INT 32
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50942
50904: LD_INT 33
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50942
50910: LD_INT 27
50912: DOUBLE
50913: EQUAL
50914: IFTRUE 50942
50916: LD_INT 26
50918: DOUBLE
50919: EQUAL
50920: IFTRUE 50942
50922: LD_INT 28
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50942
50928: LD_INT 29
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50942
50934: LD_INT 30
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50998
50942: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50943: LD_ADDR_VAR 0 9
50947: PUSH
50948: LD_VAR 0 59
50952: PUSH
50953: LD_VAR 0 60
50957: PUSH
50958: LD_VAR 0 61
50962: PUSH
50963: LD_VAR 0 62
50967: PUSH
50968: LD_VAR 0 63
50972: PUSH
50973: LD_VAR 0 64
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 4
50990: PUSH
50991: LD_INT 1
50993: PLUS
50994: ARRAY
50995: ST_TO_ADDR
50996: GO 50999
50998: POP
// temp_list2 = [ ] ;
50999: LD_ADDR_VAR 0 10
51003: PUSH
51004: EMPTY
51005: ST_TO_ADDR
// for i in temp_list do
51006: LD_ADDR_VAR 0 8
51010: PUSH
51011: LD_VAR 0 9
51015: PUSH
51016: FOR_IN
51017: IFFALSE 51069
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51019: LD_ADDR_VAR 0 10
51023: PUSH
51024: LD_VAR 0 10
51028: PUSH
51029: LD_VAR 0 8
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PUSH
51038: LD_VAR 0 2
51042: PLUS
51043: PUSH
51044: LD_VAR 0 8
51048: PUSH
51049: LD_INT 2
51051: ARRAY
51052: PUSH
51053: LD_VAR 0 3
51057: PLUS
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: ADD
51066: ST_TO_ADDR
51067: GO 51016
51069: POP
51070: POP
// result = temp_list2 ;
51071: LD_ADDR_VAR 0 7
51075: PUSH
51076: LD_VAR 0 10
51080: ST_TO_ADDR
// end ;
51081: LD_VAR 0 7
51085: RET
// export function EnemyInRange ( unit , dist ) ; begin
51086: LD_INT 0
51088: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_VAR 0 1
51098: PPUSH
51099: CALL_OW 255
51103: PPUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 250
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 251
51123: PPUSH
51124: LD_VAR 0 2
51128: PPUSH
51129: CALL 25190 0 4
51133: PUSH
51134: LD_INT 4
51136: ARRAY
51137: ST_TO_ADDR
// end ;
51138: LD_VAR 0 3
51142: RET
// export function PlayerSeeMe ( unit ) ; begin
51143: LD_INT 0
51145: PPUSH
// result := See ( your_side , unit ) ;
51146: LD_ADDR_VAR 0 2
51150: PUSH
51151: LD_OWVAR 2
51155: PPUSH
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 292
51165: ST_TO_ADDR
// end ;
51166: LD_VAR 0 2
51170: RET
// export function ReverseDir ( unit ) ; begin
51171: LD_INT 0
51173: PPUSH
// if not unit then
51174: LD_VAR 0 1
51178: NOT
51179: IFFALSE 51183
// exit ;
51181: GO 51206
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51183: LD_ADDR_VAR 0 2
51187: PUSH
51188: LD_VAR 0 1
51192: PPUSH
51193: CALL_OW 254
51197: PUSH
51198: LD_INT 3
51200: PLUS
51201: PUSH
51202: LD_INT 6
51204: MOD
51205: ST_TO_ADDR
// end ;
51206: LD_VAR 0 2
51210: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51211: LD_INT 0
51213: PPUSH
51214: PPUSH
51215: PPUSH
51216: PPUSH
51217: PPUSH
// if not hexes then
51218: LD_VAR 0 2
51222: NOT
51223: IFFALSE 51227
// exit ;
51225: GO 51375
// dist := 9999 ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_INT 9999
51234: ST_TO_ADDR
// for i = 1 to hexes do
51235: LD_ADDR_VAR 0 4
51239: PUSH
51240: DOUBLE
51241: LD_INT 1
51243: DEC
51244: ST_TO_ADDR
51245: LD_VAR 0 2
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51363
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51253: LD_VAR 0 1
51257: PPUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_VAR 0 4
51267: ARRAY
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: PPUSH
51273: LD_VAR 0 2
51277: PUSH
51278: LD_VAR 0 4
51282: ARRAY
51283: PUSH
51284: LD_INT 2
51286: ARRAY
51287: PPUSH
51288: CALL_OW 297
51292: PUSH
51293: LD_VAR 0 5
51297: LESS
51298: IFFALSE 51361
// begin hex := hexes [ i ] ;
51300: LD_ADDR_VAR 0 7
51304: PUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_VAR 0 4
51314: ARRAY
51315: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_VAR 0 4
51335: ARRAY
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 2
51345: PUSH
51346: LD_VAR 0 4
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 297
51360: ST_TO_ADDR
// end ; end ;
51361: GO 51250
51363: POP
51364: POP
// result := hex ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_VAR 0 7
51374: ST_TO_ADDR
// end ;
51375: LD_VAR 0 3
51379: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51384: LD_VAR 0 1
51388: NOT
51389: PUSH
51390: LD_VAR 0 1
51394: PUSH
51395: LD_INT 21
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 23
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 69
51423: IN
51424: NOT
51425: OR
51426: IFFALSE 51430
// exit ;
51428: GO 51477
// for i = 1 to 3 do
51430: LD_ADDR_VAR 0 3
51434: PUSH
51435: DOUBLE
51436: LD_INT 1
51438: DEC
51439: ST_TO_ADDR
51440: LD_INT 3
51442: PUSH
51443: FOR_TO
51444: IFFALSE 51475
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 250
51455: PPUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: CALL_OW 251
51465: PPUSH
51466: LD_INT 1
51468: PPUSH
51469: CALL_OW 453
51473: GO 51443
51475: POP
51476: POP
// end ;
51477: LD_VAR 0 2
51481: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51490: LD_VAR 0 1
51494: NOT
51495: PUSH
51496: LD_VAR 0 2
51500: NOT
51501: OR
51502: PUSH
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 314
51512: OR
51513: IFFALSE 51517
// exit ;
51515: GO 51958
// x := GetX ( enemy_unit ) ;
51517: LD_ADDR_VAR 0 7
51521: PUSH
51522: LD_VAR 0 2
51526: PPUSH
51527: CALL_OW 250
51531: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51532: LD_ADDR_VAR 0 8
51536: PUSH
51537: LD_VAR 0 2
51541: PPUSH
51542: CALL_OW 251
51546: ST_TO_ADDR
// if not x or not y then
51547: LD_VAR 0 7
51551: NOT
51552: PUSH
51553: LD_VAR 0 8
51557: NOT
51558: OR
51559: IFFALSE 51563
// exit ;
51561: GO 51958
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51563: LD_ADDR_VAR 0 6
51567: PUSH
51568: LD_VAR 0 7
51572: PPUSH
51573: LD_INT 0
51575: PPUSH
51576: LD_INT 4
51578: PPUSH
51579: CALL_OW 272
51583: PUSH
51584: LD_VAR 0 8
51588: PPUSH
51589: LD_INT 0
51591: PPUSH
51592: LD_INT 4
51594: PPUSH
51595: CALL_OW 273
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_VAR 0 7
51608: PPUSH
51609: LD_INT 1
51611: PPUSH
51612: LD_INT 4
51614: PPUSH
51615: CALL_OW 272
51619: PUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: LD_INT 1
51627: PPUSH
51628: LD_INT 4
51630: PPUSH
51631: CALL_OW 273
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_VAR 0 7
51644: PPUSH
51645: LD_INT 2
51647: PPUSH
51648: LD_INT 4
51650: PPUSH
51651: CALL_OW 272
51655: PUSH
51656: LD_VAR 0 8
51660: PPUSH
51661: LD_INT 2
51663: PPUSH
51664: LD_INT 4
51666: PPUSH
51667: CALL_OW 273
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_VAR 0 7
51680: PPUSH
51681: LD_INT 3
51683: PPUSH
51684: LD_INT 4
51686: PPUSH
51687: CALL_OW 272
51691: PUSH
51692: LD_VAR 0 8
51696: PPUSH
51697: LD_INT 3
51699: PPUSH
51700: LD_INT 4
51702: PPUSH
51703: CALL_OW 273
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_VAR 0 7
51716: PPUSH
51717: LD_INT 4
51719: PPUSH
51720: LD_INT 4
51722: PPUSH
51723: CALL_OW 272
51727: PUSH
51728: LD_VAR 0 8
51732: PPUSH
51733: LD_INT 4
51735: PPUSH
51736: LD_INT 4
51738: PPUSH
51739: CALL_OW 273
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_VAR 0 7
51752: PPUSH
51753: LD_INT 5
51755: PPUSH
51756: LD_INT 4
51758: PPUSH
51759: CALL_OW 272
51763: PUSH
51764: LD_VAR 0 8
51768: PPUSH
51769: LD_INT 5
51771: PPUSH
51772: LD_INT 4
51774: PPUSH
51775: CALL_OW 273
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// for i = tmp downto 1 do
51792: LD_ADDR_VAR 0 4
51796: PUSH
51797: DOUBLE
51798: LD_VAR 0 6
51802: INC
51803: ST_TO_ADDR
51804: LD_INT 1
51806: PUSH
51807: FOR_DOWNTO
51808: IFFALSE 51909
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51810: LD_VAR 0 6
51814: PUSH
51815: LD_VAR 0 4
51819: ARRAY
51820: PUSH
51821: LD_INT 1
51823: ARRAY
51824: PPUSH
51825: LD_VAR 0 6
51829: PUSH
51830: LD_VAR 0 4
51834: ARRAY
51835: PUSH
51836: LD_INT 2
51838: ARRAY
51839: PPUSH
51840: CALL_OW 488
51844: NOT
51845: PUSH
51846: LD_VAR 0 6
51850: PUSH
51851: LD_VAR 0 4
51855: ARRAY
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 6
51865: PUSH
51866: LD_VAR 0 4
51870: ARRAY
51871: PUSH
51872: LD_INT 2
51874: ARRAY
51875: PPUSH
51876: CALL_OW 428
51880: PUSH
51881: LD_INT 0
51883: NONEQUAL
51884: OR
51885: IFFALSE 51907
// tmp := Delete ( tmp , i ) ;
51887: LD_ADDR_VAR 0 6
51891: PUSH
51892: LD_VAR 0 6
51896: PPUSH
51897: LD_VAR 0 4
51901: PPUSH
51902: CALL_OW 3
51906: ST_TO_ADDR
51907: GO 51807
51909: POP
51910: POP
// j := GetClosestHex ( unit , tmp ) ;
51911: LD_ADDR_VAR 0 5
51915: PUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: LD_VAR 0 6
51925: PPUSH
51926: CALL 51211 0 2
51930: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51931: LD_VAR 0 1
51935: PPUSH
51936: LD_VAR 0 5
51940: PUSH
51941: LD_INT 1
51943: ARRAY
51944: PPUSH
51945: LD_VAR 0 5
51949: PUSH
51950: LD_INT 2
51952: ARRAY
51953: PPUSH
51954: CALL_OW 111
// end ;
51958: LD_VAR 0 3
51962: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51963: LD_INT 0
51965: PPUSH
51966: PPUSH
51967: PPUSH
// uc_side = 0 ;
51968: LD_ADDR_OWVAR 20
51972: PUSH
51973: LD_INT 0
51975: ST_TO_ADDR
// uc_nation = 0 ;
51976: LD_ADDR_OWVAR 21
51980: PUSH
51981: LD_INT 0
51983: ST_TO_ADDR
// InitHc ;
51984: CALL_OW 19
// InitVc ;
51988: CALL_OW 20
// if mastodonts then
51992: LD_VAR 0 6
51996: IFFALSE 52063
// for i = 1 to mastodonts do
51998: LD_ADDR_VAR 0 11
52002: PUSH
52003: DOUBLE
52004: LD_INT 1
52006: DEC
52007: ST_TO_ADDR
52008: LD_VAR 0 6
52012: PUSH
52013: FOR_TO
52014: IFFALSE 52061
// begin vc_chassis := 31 ;
52016: LD_ADDR_OWVAR 37
52020: PUSH
52021: LD_INT 31
52023: ST_TO_ADDR
// vc_control := control_rider ;
52024: LD_ADDR_OWVAR 38
52028: PUSH
52029: LD_INT 4
52031: ST_TO_ADDR
// animal := CreateVehicle ;
52032: LD_ADDR_VAR 0 12
52036: PUSH
52037: CALL_OW 45
52041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52042: LD_VAR 0 12
52046: PPUSH
52047: LD_VAR 0 8
52051: PPUSH
52052: LD_INT 0
52054: PPUSH
52055: CALL 54132 0 3
// end ;
52059: GO 52013
52061: POP
52062: POP
// if horses then
52063: LD_VAR 0 5
52067: IFFALSE 52134
// for i = 1 to horses do
52069: LD_ADDR_VAR 0 11
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_VAR 0 5
52083: PUSH
52084: FOR_TO
52085: IFFALSE 52132
// begin hc_class := 21 ;
52087: LD_ADDR_OWVAR 28
52091: PUSH
52092: LD_INT 21
52094: ST_TO_ADDR
// hc_gallery :=  ;
52095: LD_ADDR_OWVAR 33
52099: PUSH
52100: LD_STRING 
52102: ST_TO_ADDR
// animal := CreateHuman ;
52103: LD_ADDR_VAR 0 12
52107: PUSH
52108: CALL_OW 44
52112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52113: LD_VAR 0 12
52117: PPUSH
52118: LD_VAR 0 8
52122: PPUSH
52123: LD_INT 0
52125: PPUSH
52126: CALL 54132 0 3
// end ;
52130: GO 52084
52132: POP
52133: POP
// if birds then
52134: LD_VAR 0 1
52138: IFFALSE 52205
// for i = 1 to birds do
52140: LD_ADDR_VAR 0 11
52144: PUSH
52145: DOUBLE
52146: LD_INT 1
52148: DEC
52149: ST_TO_ADDR
52150: LD_VAR 0 1
52154: PUSH
52155: FOR_TO
52156: IFFALSE 52203
// begin hc_class = 18 ;
52158: LD_ADDR_OWVAR 28
52162: PUSH
52163: LD_INT 18
52165: ST_TO_ADDR
// hc_gallery =  ;
52166: LD_ADDR_OWVAR 33
52170: PUSH
52171: LD_STRING 
52173: ST_TO_ADDR
// animal := CreateHuman ;
52174: LD_ADDR_VAR 0 12
52178: PUSH
52179: CALL_OW 44
52183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52184: LD_VAR 0 12
52188: PPUSH
52189: LD_VAR 0 8
52193: PPUSH
52194: LD_INT 0
52196: PPUSH
52197: CALL 54132 0 3
// end ;
52201: GO 52155
52203: POP
52204: POP
// if tigers then
52205: LD_VAR 0 2
52209: IFFALSE 52293
// for i = 1 to tigers do
52211: LD_ADDR_VAR 0 11
52215: PUSH
52216: DOUBLE
52217: LD_INT 1
52219: DEC
52220: ST_TO_ADDR
52221: LD_VAR 0 2
52225: PUSH
52226: FOR_TO
52227: IFFALSE 52291
// begin hc_class = class_tiger ;
52229: LD_ADDR_OWVAR 28
52233: PUSH
52234: LD_INT 14
52236: ST_TO_ADDR
// hc_gallery =  ;
52237: LD_ADDR_OWVAR 33
52241: PUSH
52242: LD_STRING 
52244: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52245: LD_ADDR_OWVAR 35
52249: PUSH
52250: LD_INT 7
52252: NEG
52253: PPUSH
52254: LD_INT 7
52256: PPUSH
52257: CALL_OW 12
52261: ST_TO_ADDR
// animal := CreateHuman ;
52262: LD_ADDR_VAR 0 12
52266: PUSH
52267: CALL_OW 44
52271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52272: LD_VAR 0 12
52276: PPUSH
52277: LD_VAR 0 8
52281: PPUSH
52282: LD_INT 0
52284: PPUSH
52285: CALL 54132 0 3
// end ;
52289: GO 52226
52291: POP
52292: POP
// if apemans then
52293: LD_VAR 0 3
52297: IFFALSE 52420
// for i = 1 to apemans do
52299: LD_ADDR_VAR 0 11
52303: PUSH
52304: DOUBLE
52305: LD_INT 1
52307: DEC
52308: ST_TO_ADDR
52309: LD_VAR 0 3
52313: PUSH
52314: FOR_TO
52315: IFFALSE 52418
// begin hc_class = class_apeman ;
52317: LD_ADDR_OWVAR 28
52321: PUSH
52322: LD_INT 12
52324: ST_TO_ADDR
// hc_gallery =  ;
52325: LD_ADDR_OWVAR 33
52329: PUSH
52330: LD_STRING 
52332: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52333: LD_ADDR_OWVAR 35
52337: PUSH
52338: LD_INT 5
52340: NEG
52341: PPUSH
52342: LD_INT 5
52344: PPUSH
52345: CALL_OW 12
52349: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52350: LD_ADDR_OWVAR 31
52354: PUSH
52355: LD_INT 1
52357: PPUSH
52358: LD_INT 3
52360: PPUSH
52361: CALL_OW 12
52365: PUSH
52366: LD_INT 1
52368: PPUSH
52369: LD_INT 3
52371: PPUSH
52372: CALL_OW 12
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// animal := CreateHuman ;
52389: LD_ADDR_VAR 0 12
52393: PUSH
52394: CALL_OW 44
52398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52399: LD_VAR 0 12
52403: PPUSH
52404: LD_VAR 0 8
52408: PPUSH
52409: LD_INT 0
52411: PPUSH
52412: CALL 54132 0 3
// end ;
52416: GO 52314
52418: POP
52419: POP
// if enchidnas then
52420: LD_VAR 0 4
52424: IFFALSE 52491
// for i = 1 to enchidnas do
52426: LD_ADDR_VAR 0 11
52430: PUSH
52431: DOUBLE
52432: LD_INT 1
52434: DEC
52435: ST_TO_ADDR
52436: LD_VAR 0 4
52440: PUSH
52441: FOR_TO
52442: IFFALSE 52489
// begin hc_class = 13 ;
52444: LD_ADDR_OWVAR 28
52448: PUSH
52449: LD_INT 13
52451: ST_TO_ADDR
// hc_gallery =  ;
52452: LD_ADDR_OWVAR 33
52456: PUSH
52457: LD_STRING 
52459: ST_TO_ADDR
// animal := CreateHuman ;
52460: LD_ADDR_VAR 0 12
52464: PUSH
52465: CALL_OW 44
52469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52470: LD_VAR 0 12
52474: PPUSH
52475: LD_VAR 0 8
52479: PPUSH
52480: LD_INT 0
52482: PPUSH
52483: CALL 54132 0 3
// end ;
52487: GO 52441
52489: POP
52490: POP
// if fishes then
52491: LD_VAR 0 7
52495: IFFALSE 52562
// for i = 1 to fishes do
52497: LD_ADDR_VAR 0 11
52501: PUSH
52502: DOUBLE
52503: LD_INT 1
52505: DEC
52506: ST_TO_ADDR
52507: LD_VAR 0 7
52511: PUSH
52512: FOR_TO
52513: IFFALSE 52560
// begin hc_class = 20 ;
52515: LD_ADDR_OWVAR 28
52519: PUSH
52520: LD_INT 20
52522: ST_TO_ADDR
// hc_gallery =  ;
52523: LD_ADDR_OWVAR 33
52527: PUSH
52528: LD_STRING 
52530: ST_TO_ADDR
// animal := CreateHuman ;
52531: LD_ADDR_VAR 0 12
52535: PUSH
52536: CALL_OW 44
52540: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52541: LD_VAR 0 12
52545: PPUSH
52546: LD_VAR 0 9
52550: PPUSH
52551: LD_INT 0
52553: PPUSH
52554: CALL 54132 0 3
// end ;
52558: GO 52512
52560: POP
52561: POP
// end ;
52562: LD_VAR 0 10
52566: RET
// export function WantHeal ( sci , unit ) ; begin
52567: LD_INT 0
52569: PPUSH
// if GetTaskList ( sci ) > 0 then
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 437
52579: PUSH
52580: LD_INT 0
52582: GREATER
52583: IFFALSE 52653
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL_OW 437
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PUSH
52603: LD_STRING l
52605: EQUAL
52606: PUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 437
52616: PUSH
52617: LD_INT 1
52619: ARRAY
52620: PUSH
52621: LD_INT 4
52623: ARRAY
52624: PUSH
52625: LD_VAR 0 2
52629: EQUAL
52630: AND
52631: IFFALSE 52643
// result := true else
52633: LD_ADDR_VAR 0 3
52637: PUSH
52638: LD_INT 1
52640: ST_TO_ADDR
52641: GO 52651
// result := false ;
52643: LD_ADDR_VAR 0 3
52647: PUSH
52648: LD_INT 0
52650: ST_TO_ADDR
// end else
52651: GO 52661
// result := false ;
52653: LD_ADDR_VAR 0 3
52657: PUSH
52658: LD_INT 0
52660: ST_TO_ADDR
// end ;
52661: LD_VAR 0 3
52665: RET
// export function HealTarget ( sci ) ; begin
52666: LD_INT 0
52668: PPUSH
// if not sci then
52669: LD_VAR 0 1
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 52743
// result := 0 ;
52678: LD_ADDR_VAR 0 2
52682: PUSH
52683: LD_INT 0
52685: ST_TO_ADDR
// if GetTaskList ( sci ) then
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 437
52695: IFFALSE 52743
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 437
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: LD_STRING l
52717: EQUAL
52718: IFFALSE 52743
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52720: LD_ADDR_VAR 0 2
52724: PUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 437
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PUSH
52739: LD_INT 4
52741: ARRAY
52742: ST_TO_ADDR
// end ;
52743: LD_VAR 0 2
52747: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52748: LD_INT 0
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
// if not base_units then
52754: LD_VAR 0 1
52758: NOT
52759: IFFALSE 52763
// exit ;
52761: GO 52850
// result := false ;
52763: LD_ADDR_VAR 0 2
52767: PUSH
52768: LD_INT 0
52770: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52771: LD_ADDR_VAR 0 5
52775: PUSH
52776: LD_VAR 0 1
52780: PPUSH
52781: LD_INT 21
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PPUSH
52791: CALL_OW 72
52795: ST_TO_ADDR
// if not tmp then
52796: LD_VAR 0 5
52800: NOT
52801: IFFALSE 52805
// exit ;
52803: GO 52850
// for i in tmp do
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: FOR_IN
52816: IFFALSE 52848
// begin result := EnemyInRange ( i , 22 ) ;
52818: LD_ADDR_VAR 0 2
52822: PUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_INT 22
52830: PPUSH
52831: CALL 51086 0 2
52835: ST_TO_ADDR
// if result then
52836: LD_VAR 0 2
52840: IFFALSE 52846
// exit ;
52842: POP
52843: POP
52844: GO 52850
// end ;
52846: GO 52815
52848: POP
52849: POP
// end ;
52850: LD_VAR 0 2
52854: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52855: LD_INT 0
52857: PPUSH
52858: PPUSH
// if not units then
52859: LD_VAR 0 1
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52938
// result := [ ] ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: EMPTY
52874: ST_TO_ADDR
// for i in units do
52875: LD_ADDR_VAR 0 4
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: FOR_IN
52886: IFFALSE 52936
// if GetTag ( i ) = tag then
52888: LD_VAR 0 4
52892: PPUSH
52893: CALL_OW 110
52897: PUSH
52898: LD_VAR 0 2
52902: EQUAL
52903: IFFALSE 52934
// result := Insert ( result , result + 1 , i ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 3
52914: PPUSH
52915: LD_VAR 0 3
52919: PUSH
52920: LD_INT 1
52922: PLUS
52923: PPUSH
52924: LD_VAR 0 4
52928: PPUSH
52929: CALL_OW 2
52933: ST_TO_ADDR
52934: GO 52885
52936: POP
52937: POP
// end ;
52938: LD_VAR 0 3
52942: RET
// export function IsDriver ( un ) ; begin
52943: LD_INT 0
52945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52946: LD_ADDR_VAR 0 2
52950: PUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 55
52958: PUSH
52959: EMPTY
52960: LIST
52961: PPUSH
52962: CALL_OW 69
52966: IN
52967: ST_TO_ADDR
// end ;
52968: LD_VAR 0 2
52972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52973: LD_INT 0
52975: PPUSH
52976: PPUSH
// list := [ ] ;
52977: LD_ADDR_VAR 0 5
52981: PUSH
52982: EMPTY
52983: ST_TO_ADDR
// case d of 0 :
52984: LD_VAR 0 3
52988: PUSH
52989: LD_INT 0
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53130
52997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: LD_VAR 0 1
53007: PUSH
53008: LD_INT 4
53010: MINUS
53011: PUSH
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 4
53019: MINUS
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 3
53036: MINUS
53037: PUSH
53038: LD_VAR 0 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: LD_VAR 0 1
53055: PUSH
53056: LD_INT 4
53058: PLUS
53059: PUSH
53060: LD_VAR 0 2
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: LD_VAR 0 1
53077: PUSH
53078: LD_INT 3
53080: PLUS
53081: PUSH
53082: LD_VAR 0 2
53086: PUSH
53087: LD_INT 3
53089: PLUS
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_VAR 0 2
53108: PUSH
53109: LD_INT 4
53111: PLUS
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// end ; 1 :
53128: GO 53828
53130: LD_INT 1
53132: DOUBLE
53133: EQUAL
53134: IFTRUE 53138
53136: GO 53271
53138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53139: LD_ADDR_VAR 0 5
53143: PUSH
53144: LD_VAR 0 1
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 4
53156: MINUS
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 3
53173: MINUS
53174: PUSH
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 3
53182: MINUS
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: PUSH
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 4
53199: MINUS
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: PUSH
53214: LD_VAR 0 1
53218: PUSH
53219: LD_VAR 0 2
53223: PUSH
53224: LD_INT 3
53226: PLUS
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_VAR 0 1
53240: PUSH
53241: LD_INT 4
53243: PLUS
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 4
53252: PLUS
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// end ; 2 :
53269: GO 53828
53271: LD_INT 2
53273: DOUBLE
53274: EQUAL
53275: IFTRUE 53279
53277: GO 53408
53279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53280: LD_ADDR_VAR 0 5
53284: PUSH
53285: LD_VAR 0 1
53289: PUSH
53290: LD_VAR 0 2
53294: PUSH
53295: LD_INT 3
53297: MINUS
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: PUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_INT 4
53314: PLUS
53315: PUSH
53316: LD_VAR 0 2
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: LD_VAR 0 2
53338: PUSH
53339: LD_INT 4
53341: PLUS
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 3
53358: MINUS
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: PUSH
53373: LD_VAR 0 1
53377: PUSH
53378: LD_INT 4
53380: MINUS
53381: PUSH
53382: LD_VAR 0 2
53386: PUSH
53387: LD_INT 4
53389: MINUS
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// end ; 3 :
53406: GO 53828
53408: LD_INT 3
53410: DOUBLE
53411: EQUAL
53412: IFTRUE 53416
53414: GO 53549
53416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 3
53429: PLUS
53430: PUSH
53431: LD_VAR 0 2
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: LD_VAR 0 1
53448: PUSH
53449: LD_INT 4
53451: PLUS
53452: PUSH
53453: LD_VAR 0 2
53457: PUSH
53458: LD_INT 4
53460: PLUS
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_INT 4
53477: MINUS
53478: PUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: LD_VAR 0 1
53496: PUSH
53497: LD_VAR 0 2
53501: PUSH
53502: LD_INT 4
53504: MINUS
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: PUSH
53514: LD_VAR 0 1
53518: PUSH
53519: LD_INT 3
53521: MINUS
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 3
53530: MINUS
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// end ; 4 :
53547: GO 53828
53549: LD_INT 4
53551: DOUBLE
53552: EQUAL
53553: IFTRUE 53557
53555: GO 53690
53557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53558: LD_ADDR_VAR 0 5
53562: PUSH
53563: LD_VAR 0 1
53567: PUSH
53568: LD_VAR 0 2
53572: PUSH
53573: LD_INT 4
53575: PLUS
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: PUSH
53585: LD_VAR 0 1
53589: PUSH
53590: LD_INT 3
53592: PLUS
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_INT 3
53601: PLUS
53602: PUSH
53603: LD_INT 5
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: PUSH
53611: LD_VAR 0 1
53615: PUSH
53616: LD_INT 4
53618: PLUS
53619: PUSH
53620: LD_VAR 0 2
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 3
53645: MINUS
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 1
53659: PUSH
53660: LD_INT 4
53662: MINUS
53663: PUSH
53664: LD_VAR 0 2
53668: PUSH
53669: LD_INT 4
53671: MINUS
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// end ; 5 :
53688: GO 53828
53690: LD_INT 5
53692: DOUBLE
53693: EQUAL
53694: IFTRUE 53698
53696: GO 53827
53698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53699: LD_ADDR_VAR 0 5
53703: PUSH
53704: LD_VAR 0 1
53708: PUSH
53709: LD_INT 4
53711: MINUS
53712: PUSH
53713: LD_VAR 0 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: LD_VAR 0 1
53730: PUSH
53731: LD_VAR 0 2
53735: PUSH
53736: LD_INT 4
53738: MINUS
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 4
53755: PLUS
53756: PUSH
53757: LD_VAR 0 2
53761: PUSH
53762: LD_INT 4
53764: PLUS
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: LD_INT 3
53781: PLUS
53782: PUSH
53783: LD_VAR 0 2
53787: PUSH
53788: LD_INT 4
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: PUSH
53796: LD_VAR 0 1
53800: PUSH
53801: LD_VAR 0 2
53805: PUSH
53806: LD_INT 3
53808: PLUS
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// end ; end ;
53825: GO 53828
53827: POP
// result := list ;
53828: LD_ADDR_VAR 0 4
53832: PUSH
53833: LD_VAR 0 5
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 4
53842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
53847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53848: LD_VAR 0 1
53852: NOT
53853: PUSH
53854: LD_VAR 0 2
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: IN
53877: NOT
53878: OR
53879: IFFALSE 53883
// exit ;
53881: GO 53975
// tmp := [ ] ;
53883: LD_ADDR_VAR 0 5
53887: PUSH
53888: EMPTY
53889: ST_TO_ADDR
// for i in units do
53890: LD_ADDR_VAR 0 4
53894: PUSH
53895: LD_VAR 0 1
53899: PUSH
53900: FOR_IN
53901: IFFALSE 53944
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53903: LD_ADDR_VAR 0 5
53907: PUSH
53908: LD_VAR 0 5
53912: PPUSH
53913: LD_VAR 0 5
53917: PUSH
53918: LD_INT 1
53920: PLUS
53921: PPUSH
53922: LD_VAR 0 4
53926: PPUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: CALL_OW 259
53936: PPUSH
53937: CALL_OW 2
53941: ST_TO_ADDR
53942: GO 53900
53944: POP
53945: POP
// if not tmp then
53946: LD_VAR 0 5
53950: NOT
53951: IFFALSE 53955
// exit ;
53953: GO 53975
// result := SortListByListDesc ( units , tmp ) ;
53955: LD_ADDR_VAR 0 3
53959: PUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: LD_VAR 0 5
53969: PPUSH
53970: CALL_OW 77
53974: ST_TO_ADDR
// end ;
53975: LD_VAR 0 3
53979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53980: LD_INT 0
53982: PPUSH
53983: PPUSH
53984: PPUSH
// x := GetX ( building ) ;
53985: LD_ADDR_VAR 0 4
53989: PUSH
53990: LD_VAR 0 2
53994: PPUSH
53995: CALL_OW 250
53999: ST_TO_ADDR
// y := GetY ( building ) ;
54000: LD_ADDR_VAR 0 5
54004: PUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: CALL_OW 251
54014: ST_TO_ADDR
// if GetTaskList ( unit ) then
54015: LD_VAR 0 1
54019: PPUSH
54020: CALL_OW 437
54024: IFFALSE 54119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54026: LD_STRING e
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 437
54038: PUSH
54039: LD_INT 1
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: EQUAL
54047: PUSH
54048: LD_VAR 0 4
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: CALL_OW 437
54062: PUSH
54063: LD_INT 1
54065: ARRAY
54066: PUSH
54067: LD_INT 2
54069: ARRAY
54070: EQUAL
54071: AND
54072: PUSH
54073: LD_VAR 0 5
54077: PUSH
54078: LD_VAR 0 1
54082: PPUSH
54083: CALL_OW 437
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PUSH
54092: LD_INT 3
54094: ARRAY
54095: EQUAL
54096: AND
54097: IFFALSE 54109
// result := true else
54099: LD_ADDR_VAR 0 3
54103: PUSH
54104: LD_INT 1
54106: ST_TO_ADDR
54107: GO 54117
// result := false ;
54109: LD_ADDR_VAR 0 3
54113: PUSH
54114: LD_INT 0
54116: ST_TO_ADDR
// end else
54117: GO 54127
// result := false ;
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 0
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 3
54131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// if not unit or not area then
54138: LD_VAR 0 1
54142: NOT
54143: PUSH
54144: LD_VAR 0 2
54148: NOT
54149: OR
54150: IFFALSE 54154
// exit ;
54152: GO 54318
// tmp := AreaToList ( area , i ) ;
54154: LD_ADDR_VAR 0 6
54158: PUSH
54159: LD_VAR 0 2
54163: PPUSH
54164: LD_VAR 0 5
54168: PPUSH
54169: CALL_OW 517
54173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54174: LD_ADDR_VAR 0 5
54178: PUSH
54179: DOUBLE
54180: LD_INT 1
54182: DEC
54183: ST_TO_ADDR
54184: LD_VAR 0 6
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: PUSH
54193: FOR_TO
54194: IFFALSE 54316
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54196: LD_ADDR_VAR 0 7
54200: PUSH
54201: LD_VAR 0 6
54205: PUSH
54206: LD_INT 1
54208: ARRAY
54209: PUSH
54210: LD_VAR 0 5
54214: ARRAY
54215: PUSH
54216: LD_VAR 0 6
54220: PUSH
54221: LD_INT 2
54223: ARRAY
54224: PUSH
54225: LD_VAR 0 5
54229: ARRAY
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54235: LD_VAR 0 7
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PPUSH
54244: LD_VAR 0 7
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: PPUSH
54253: CALL_OW 428
54257: PUSH
54258: LD_INT 0
54260: EQUAL
54261: IFFALSE 54314
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_VAR 0 7
54272: PUSH
54273: LD_INT 1
54275: ARRAY
54276: PPUSH
54277: LD_VAR 0 7
54281: PUSH
54282: LD_INT 2
54284: ARRAY
54285: PPUSH
54286: LD_VAR 0 3
54290: PPUSH
54291: CALL_OW 48
// result := IsPlaced ( unit ) ;
54295: LD_ADDR_VAR 0 4
54299: PUSH
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 305
54309: ST_TO_ADDR
// exit ;
54310: POP
54311: POP
54312: GO 54318
// end ; end ;
54314: GO 54193
54316: POP
54317: POP
// end ;
54318: LD_VAR 0 4
54322: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54323: LD_INT 0
54325: PPUSH
54326: PPUSH
54327: PPUSH
// if not side or side > 8 then
54328: LD_VAR 0 1
54332: NOT
54333: PUSH
54334: LD_VAR 0 1
54338: PUSH
54339: LD_INT 8
54341: GREATER
54342: OR
54343: IFFALSE 54347
// exit ;
54345: GO 54534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54347: LD_ADDR_VAR 0 4
54351: PUSH
54352: LD_INT 22
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 21
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PPUSH
54378: CALL_OW 69
54382: ST_TO_ADDR
// if not tmp then
54383: LD_VAR 0 4
54387: NOT
54388: IFFALSE 54392
// exit ;
54390: GO 54534
// enable_addtolog := true ;
54392: LD_ADDR_OWVAR 81
54396: PUSH
54397: LD_INT 1
54399: ST_TO_ADDR
// AddToLog ( [ ) ;
54400: LD_STRING [
54402: PPUSH
54403: CALL_OW 561
// for i in tmp do
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_VAR 0 4
54416: PUSH
54417: FOR_IN
54418: IFFALSE 54525
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54420: LD_STRING [
54422: PUSH
54423: LD_VAR 0 3
54427: PPUSH
54428: CALL_OW 266
54432: STR
54433: PUSH
54434: LD_STRING , 
54436: STR
54437: PUSH
54438: LD_VAR 0 3
54442: PPUSH
54443: CALL_OW 250
54447: STR
54448: PUSH
54449: LD_STRING , 
54451: STR
54452: PUSH
54453: LD_VAR 0 3
54457: PPUSH
54458: CALL_OW 251
54462: STR
54463: PUSH
54464: LD_STRING , 
54466: STR
54467: PUSH
54468: LD_VAR 0 3
54472: PPUSH
54473: CALL_OW 254
54477: STR
54478: PUSH
54479: LD_STRING , 
54481: STR
54482: PUSH
54483: LD_VAR 0 3
54487: PPUSH
54488: LD_INT 1
54490: PPUSH
54491: CALL_OW 268
54495: STR
54496: PUSH
54497: LD_STRING , 
54499: STR
54500: PUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 2
54508: PPUSH
54509: CALL_OW 268
54513: STR
54514: PUSH
54515: LD_STRING ],
54517: STR
54518: PPUSH
54519: CALL_OW 561
// end ;
54523: GO 54417
54525: POP
54526: POP
// AddToLog ( ]; ) ;
54527: LD_STRING ];
54529: PPUSH
54530: CALL_OW 561
// end ;
54534: LD_VAR 0 2
54538: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
// if not area or not rate or not max then
54546: LD_VAR 0 1
54550: NOT
54551: PUSH
54552: LD_VAR 0 2
54556: NOT
54557: OR
54558: PUSH
54559: LD_VAR 0 4
54563: NOT
54564: OR
54565: IFFALSE 54569
// exit ;
54567: GO 54761
// while 1 do
54569: LD_INT 1
54571: IFFALSE 54761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54573: LD_ADDR_VAR 0 9
54577: PUSH
54578: LD_VAR 0 1
54582: PPUSH
54583: LD_INT 1
54585: PPUSH
54586: CALL_OW 287
54590: PUSH
54591: LD_INT 10
54593: MUL
54594: ST_TO_ADDR
// r := rate / 10 ;
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: LD_VAR 0 2
54604: PUSH
54605: LD_INT 10
54607: DIVREAL
54608: ST_TO_ADDR
// time := 1 1$00 ;
54609: LD_ADDR_VAR 0 8
54613: PUSH
54614: LD_INT 2100
54616: ST_TO_ADDR
// if amount < min then
54617: LD_VAR 0 9
54621: PUSH
54622: LD_VAR 0 3
54626: LESS
54627: IFFALSE 54645
// r := r * 2 else
54629: LD_ADDR_VAR 0 7
54633: PUSH
54634: LD_VAR 0 7
54638: PUSH
54639: LD_INT 2
54641: MUL
54642: ST_TO_ADDR
54643: GO 54671
// if amount > max then
54645: LD_VAR 0 9
54649: PUSH
54650: LD_VAR 0 4
54654: GREATER
54655: IFFALSE 54671
// r := r / 2 ;
54657: LD_ADDR_VAR 0 7
54661: PUSH
54662: LD_VAR 0 7
54666: PUSH
54667: LD_INT 2
54669: DIVREAL
54670: ST_TO_ADDR
// time := time / r ;
54671: LD_ADDR_VAR 0 8
54675: PUSH
54676: LD_VAR 0 8
54680: PUSH
54681: LD_VAR 0 7
54685: DIVREAL
54686: ST_TO_ADDR
// if time < 0 then
54687: LD_VAR 0 8
54691: PUSH
54692: LD_INT 0
54694: LESS
54695: IFFALSE 54712
// time := time * - 1 ;
54697: LD_ADDR_VAR 0 8
54701: PUSH
54702: LD_VAR 0 8
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: MUL
54711: ST_TO_ADDR
// wait ( time ) ;
54712: LD_VAR 0 8
54716: PPUSH
54717: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54721: LD_INT 35
54723: PPUSH
54724: LD_INT 875
54726: PPUSH
54727: CALL_OW 12
54731: PPUSH
54732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 5
54741: PPUSH
54742: CALL_OW 12
54746: PPUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: LD_INT 1
54754: PPUSH
54755: CALL_OW 55
// end ;
54759: GO 54569
// end ;
54761: LD_VAR 0 5
54765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54766: LD_INT 0
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
54774: PPUSH
54775: PPUSH
// if not turrets or not factories then
54776: LD_VAR 0 1
54780: NOT
54781: PUSH
54782: LD_VAR 0 2
54786: NOT
54787: OR
54788: IFFALSE 54792
// exit ;
54790: GO 55099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54792: LD_ADDR_VAR 0 10
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: LD_INT 6
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 5
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 24
54834: PUSH
54835: LD_INT 25
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 23
54844: PUSH
54845: LD_INT 27
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 42
54858: PUSH
54859: LD_INT 43
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 44
54868: PUSH
54869: LD_INT 46
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 45
54878: PUSH
54879: LD_INT 47
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// result := [ ] ;
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: EMPTY
54902: ST_TO_ADDR
// for i in turrets do
54903: LD_ADDR_VAR 0 4
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: FOR_IN
54914: IFFALSE 55097
// begin nat := GetNation ( i ) ;
54916: LD_ADDR_VAR 0 7
54920: PUSH
54921: LD_VAR 0 4
54925: PPUSH
54926: CALL_OW 248
54930: ST_TO_ADDR
// weapon := 0 ;
54931: LD_ADDR_VAR 0 8
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// if not nat then
54939: LD_VAR 0 7
54943: NOT
54944: IFFALSE 54948
// continue ;
54946: GO 54913
// for j in list [ nat ] do
54948: LD_ADDR_VAR 0 5
54952: PUSH
54953: LD_VAR 0 10
54957: PUSH
54958: LD_VAR 0 7
54962: ARRAY
54963: PUSH
54964: FOR_IN
54965: IFFALSE 55006
// if GetBWeapon ( i ) = j [ 1 ] then
54967: LD_VAR 0 4
54971: PPUSH
54972: CALL_OW 269
54976: PUSH
54977: LD_VAR 0 5
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: EQUAL
54986: IFFALSE 55004
// begin weapon := j [ 2 ] ;
54988: LD_ADDR_VAR 0 8
54992: PUSH
54993: LD_VAR 0 5
54997: PUSH
54998: LD_INT 2
55000: ARRAY
55001: ST_TO_ADDR
// break ;
55002: GO 55006
// end ;
55004: GO 54964
55006: POP
55007: POP
// if not weapon then
55008: LD_VAR 0 8
55012: NOT
55013: IFFALSE 55017
// continue ;
55015: GO 54913
// for k in factories do
55017: LD_ADDR_VAR 0 6
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: FOR_IN
55028: IFFALSE 55093
// begin weapons := AvailableWeaponList ( k ) ;
55030: LD_ADDR_VAR 0 9
55034: PUSH
55035: LD_VAR 0 6
55039: PPUSH
55040: CALL_OW 478
55044: ST_TO_ADDR
// if not weapons then
55045: LD_VAR 0 9
55049: NOT
55050: IFFALSE 55054
// continue ;
55052: GO 55027
// if weapon in weapons then
55054: LD_VAR 0 8
55058: PUSH
55059: LD_VAR 0 9
55063: IN
55064: IFFALSE 55091
// begin result := [ i , weapon ] ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_VAR 0 4
55075: PUSH
55076: LD_VAR 0 8
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// exit ;
55085: POP
55086: POP
55087: POP
55088: POP
55089: GO 55099
// end ; end ;
55091: GO 55027
55093: POP
55094: POP
// end ;
55095: GO 54913
55097: POP
55098: POP
// end ;
55099: LD_VAR 0 3
55103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55104: LD_INT 0
55106: PPUSH
// if not side or side > 8 then
55107: LD_VAR 0 3
55111: NOT
55112: PUSH
55113: LD_VAR 0 3
55117: PUSH
55118: LD_INT 8
55120: GREATER
55121: OR
55122: IFFALSE 55126
// exit ;
55124: GO 55185
// if not range then
55126: LD_VAR 0 4
55130: NOT
55131: IFFALSE 55142
// range := - 12 ;
55133: LD_ADDR_VAR 0 4
55137: PUSH
55138: LD_INT 12
55140: NEG
55141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_VAR 0 2
55151: PPUSH
55152: LD_VAR 0 3
55156: PPUSH
55157: LD_VAR 0 4
55161: PPUSH
55162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55166: LD_VAR 0 1
55170: PPUSH
55171: LD_VAR 0 2
55175: PPUSH
55176: LD_VAR 0 3
55180: PPUSH
55181: CALL_OW 331
// end ;
55185: LD_VAR 0 5
55189: RET
// export function Video ( mode ) ; begin
55190: LD_INT 0
55192: PPUSH
// ingame_video = mode ;
55193: LD_ADDR_OWVAR 52
55197: PUSH
55198: LD_VAR 0 1
55202: ST_TO_ADDR
// interface_hidden = mode ;
55203: LD_ADDR_OWVAR 54
55207: PUSH
55208: LD_VAR 0 1
55212: ST_TO_ADDR
// end ;
55213: LD_VAR 0 2
55217: RET
// export function Join ( array , element ) ; begin
55218: LD_INT 0
55220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: LD_VAR 0 1
55230: PPUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_INT 1
55238: PLUS
55239: PPUSH
55240: LD_VAR 0 2
55244: PPUSH
55245: CALL_OW 1
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 3
55254: RET
// export function JoinUnion ( array , element ) ; begin
55255: LD_INT 0
55257: PPUSH
// result := array union element ;
55258: LD_ADDR_VAR 0 3
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_VAR 0 2
55272: UNION
55273: ST_TO_ADDR
// end ;
55274: LD_VAR 0 3
55278: RET
// export function GetBehemoths ( side ) ; begin
55279: LD_INT 0
55281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55282: LD_ADDR_VAR 0 2
55286: PUSH
55287: LD_INT 22
55289: PUSH
55290: LD_VAR 0 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 31
55301: PUSH
55302: LD_INT 25
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PPUSH
55313: CALL_OW 69
55317: ST_TO_ADDR
// end ;
55318: LD_VAR 0 2
55322: RET
// export function Shuffle ( array ) ; var i , index ; begin
55323: LD_INT 0
55325: PPUSH
55326: PPUSH
55327: PPUSH
// result := [ ] ;
55328: LD_ADDR_VAR 0 2
55332: PUSH
55333: EMPTY
55334: ST_TO_ADDR
// if not array then
55335: LD_VAR 0 1
55339: NOT
55340: IFFALSE 55344
// exit ;
55342: GO 55443
// Randomize ;
55344: CALL_OW 10
// for i = array downto 1 do
55348: LD_ADDR_VAR 0 3
55352: PUSH
55353: DOUBLE
55354: LD_VAR 0 1
55358: INC
55359: ST_TO_ADDR
55360: LD_INT 1
55362: PUSH
55363: FOR_DOWNTO
55364: IFFALSE 55441
// begin index := rand ( 1 , array ) ;
55366: LD_ADDR_VAR 0 4
55370: PUSH
55371: LD_INT 1
55373: PPUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: CALL_OW 12
55383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55384: LD_ADDR_VAR 0 2
55388: PUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: LD_VAR 0 2
55398: PUSH
55399: LD_INT 1
55401: PLUS
55402: PPUSH
55403: LD_VAR 0 1
55407: PUSH
55408: LD_VAR 0 4
55412: ARRAY
55413: PPUSH
55414: CALL_OW 2
55418: ST_TO_ADDR
// array := Delete ( array , index ) ;
55419: LD_ADDR_VAR 0 1
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 4
55433: PPUSH
55434: CALL_OW 3
55438: ST_TO_ADDR
// end ;
55439: GO 55363
55441: POP
55442: POP
// end ;
55443: LD_VAR 0 2
55447: RET
// export function GetBaseMaterials ( base ) ; begin
55448: LD_INT 0
55450: PPUSH
// result := [ 0 , 0 , 0 ] ;
55451: LD_ADDR_VAR 0 2
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// if not base then
55470: LD_VAR 0 1
55474: NOT
55475: IFFALSE 55479
// exit ;
55477: GO 55528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55479: LD_ADDR_VAR 0 2
55483: PUSH
55484: LD_VAR 0 1
55488: PPUSH
55489: LD_INT 1
55491: PPUSH
55492: CALL_OW 275
55496: PUSH
55497: LD_VAR 0 1
55501: PPUSH
55502: LD_INT 2
55504: PPUSH
55505: CALL_OW 275
55509: PUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: LD_INT 3
55517: PPUSH
55518: CALL_OW 275
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// end ;
55528: LD_VAR 0 2
55532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
// result := array ;
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_VAR 0 1
55546: ST_TO_ADDR
// if size > 0 then
55547: LD_VAR 0 2
55551: PUSH
55552: LD_INT 0
55554: GREATER
55555: IFFALSE 55601
// for i := array downto size do
55557: LD_ADDR_VAR 0 4
55561: PUSH
55562: DOUBLE
55563: LD_VAR 0 1
55567: INC
55568: ST_TO_ADDR
55569: LD_VAR 0 2
55573: PUSH
55574: FOR_DOWNTO
55575: IFFALSE 55599
// result := Delete ( result , result ) ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: LD_VAR 0 3
55586: PPUSH
55587: LD_VAR 0 3
55591: PPUSH
55592: CALL_OW 3
55596: ST_TO_ADDR
55597: GO 55574
55599: POP
55600: POP
// end ;
55601: LD_VAR 0 3
55605: RET
// export function ComExit ( unit ) ; var tmp ; begin
55606: LD_INT 0
55608: PPUSH
55609: PPUSH
// if not IsInUnit ( unit ) then
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 310
55619: NOT
55620: IFFALSE 55624
// exit ;
55622: GO 55684
// tmp := IsInUnit ( unit ) ;
55624: LD_ADDR_VAR 0 3
55628: PUSH
55629: LD_VAR 0 1
55633: PPUSH
55634: CALL_OW 310
55638: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55639: LD_VAR 0 3
55643: PPUSH
55644: CALL_OW 247
55648: PUSH
55649: LD_INT 2
55651: EQUAL
55652: IFFALSE 55665
// ComExitVehicle ( unit ) else
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 121
55663: GO 55674
// ComExitBuilding ( unit ) ;
55665: LD_VAR 0 1
55669: PPUSH
55670: CALL_OW 122
// result := tmp ;
55674: LD_ADDR_VAR 0 2
55678: PUSH
55679: LD_VAR 0 3
55683: ST_TO_ADDR
// end ;
55684: LD_VAR 0 2
55688: RET
// export function ResetHc ; begin
55689: LD_INT 0
55691: PPUSH
// InitHc ;
55692: CALL_OW 19
// hc_importance := 0 ;
55696: LD_ADDR_OWVAR 32
55700: PUSH
55701: LD_INT 0
55703: ST_TO_ADDR
// end ; end_of_file
55704: LD_VAR 0 1
55708: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
55709: LD_INT 0
55711: PPUSH
// ru_radar := 98 ;
55712: LD_ADDR_EXP 29
55716: PUSH
55717: LD_INT 98
55719: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55720: LD_ADDR_EXP 30
55724: PUSH
55725: LD_INT 89
55727: ST_TO_ADDR
// us_hack := 99 ;
55728: LD_ADDR_EXP 31
55732: PUSH
55733: LD_INT 99
55735: ST_TO_ADDR
// us_artillery := 97 ;
55736: LD_ADDR_EXP 32
55740: PUSH
55741: LD_INT 97
55743: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55744: LD_ADDR_EXP 33
55748: PUSH
55749: LD_INT 91
55751: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
55752: LD_ADDR_EXP 34
55756: PUSH
55757: LD_INT 92
55759: ST_TO_ADDR
// tech_Artillery := 80 ;
55760: LD_ADDR_EXP 35
55764: PUSH
55765: LD_INT 80
55767: ST_TO_ADDR
// tech_RadMat := 81 ;
55768: LD_ADDR_EXP 36
55772: PUSH
55773: LD_INT 81
55775: ST_TO_ADDR
// tech_BasicTools := 82 ;
55776: LD_ADDR_EXP 37
55780: PUSH
55781: LD_INT 82
55783: ST_TO_ADDR
// tech_Cargo := 83 ;
55784: LD_ADDR_EXP 38
55788: PUSH
55789: LD_INT 83
55791: ST_TO_ADDR
// tech_Track := 84 ;
55792: LD_ADDR_EXP 39
55796: PUSH
55797: LD_INT 84
55799: ST_TO_ADDR
// tech_Crane := 85 ;
55800: LD_ADDR_EXP 40
55804: PUSH
55805: LD_INT 85
55807: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55808: LD_ADDR_EXP 41
55812: PUSH
55813: LD_INT 86
55815: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55816: LD_ADDR_EXP 42
55820: PUSH
55821: LD_INT 87
55823: ST_TO_ADDR
// end ;
55824: LD_VAR 0 1
55828: RET
// every 1 do
55829: GO 55831
55831: DISABLE
// InitGlobalVariables ; end_of_file
55832: CALL 55709 0 0
55836: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55837: LD_INT 0
55839: PPUSH
55840: PPUSH
// skirmish := false ;
55841: LD_ADDR_EXP 43
55845: PUSH
55846: LD_INT 0
55848: ST_TO_ADDR
// debug_mc := false ;
55849: LD_ADDR_EXP 44
55853: PUSH
55854: LD_INT 0
55856: ST_TO_ADDR
// mc_bases := [ ] ;
55857: LD_ADDR_EXP 45
55861: PUSH
55862: EMPTY
55863: ST_TO_ADDR
// mc_sides := [ ] ;
55864: LD_ADDR_EXP 71
55868: PUSH
55869: EMPTY
55870: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55871: LD_ADDR_EXP 46
55875: PUSH
55876: EMPTY
55877: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55878: LD_ADDR_EXP 47
55882: PUSH
55883: EMPTY
55884: ST_TO_ADDR
// mc_need_heal := [ ] ;
55885: LD_ADDR_EXP 48
55889: PUSH
55890: EMPTY
55891: ST_TO_ADDR
// mc_healers := [ ] ;
55892: LD_ADDR_EXP 49
55896: PUSH
55897: EMPTY
55898: ST_TO_ADDR
// mc_build_list := [ ] ;
55899: LD_ADDR_EXP 50
55903: PUSH
55904: EMPTY
55905: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55906: LD_ADDR_EXP 77
55910: PUSH
55911: EMPTY
55912: ST_TO_ADDR
// mc_builders := [ ] ;
55913: LD_ADDR_EXP 51
55917: PUSH
55918: EMPTY
55919: ST_TO_ADDR
// mc_construct_list := [ ] ;
55920: LD_ADDR_EXP 52
55924: PUSH
55925: EMPTY
55926: ST_TO_ADDR
// mc_turret_list := [ ] ;
55927: LD_ADDR_EXP 53
55931: PUSH
55932: EMPTY
55933: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55934: LD_ADDR_EXP 54
55938: PUSH
55939: EMPTY
55940: ST_TO_ADDR
// mc_miners := [ ] ;
55941: LD_ADDR_EXP 59
55945: PUSH
55946: EMPTY
55947: ST_TO_ADDR
// mc_mines := [ ] ;
55948: LD_ADDR_EXP 58
55952: PUSH
55953: EMPTY
55954: ST_TO_ADDR
// mc_minefields := [ ] ;
55955: LD_ADDR_EXP 60
55959: PUSH
55960: EMPTY
55961: ST_TO_ADDR
// mc_crates := [ ] ;
55962: LD_ADDR_EXP 61
55966: PUSH
55967: EMPTY
55968: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55969: LD_ADDR_EXP 62
55973: PUSH
55974: EMPTY
55975: ST_TO_ADDR
// mc_crates_area := [ ] ;
55976: LD_ADDR_EXP 63
55980: PUSH
55981: EMPTY
55982: ST_TO_ADDR
// mc_vehicles := [ ] ;
55983: LD_ADDR_EXP 64
55987: PUSH
55988: EMPTY
55989: ST_TO_ADDR
// mc_attack := [ ] ;
55990: LD_ADDR_EXP 65
55994: PUSH
55995: EMPTY
55996: ST_TO_ADDR
// mc_produce := [ ] ;
55997: LD_ADDR_EXP 66
56001: PUSH
56002: EMPTY
56003: ST_TO_ADDR
// mc_defender := [ ] ;
56004: LD_ADDR_EXP 67
56008: PUSH
56009: EMPTY
56010: ST_TO_ADDR
// mc_parking := [ ] ;
56011: LD_ADDR_EXP 69
56015: PUSH
56016: EMPTY
56017: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
56018: LD_ADDR_EXP 55
56022: PUSH
56023: EMPTY
56024: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
56025: LD_ADDR_EXP 57
56029: PUSH
56030: EMPTY
56031: ST_TO_ADDR
// mc_scan := [ ] ;
56032: LD_ADDR_EXP 68
56036: PUSH
56037: EMPTY
56038: ST_TO_ADDR
// mc_scan_area := [ ] ;
56039: LD_ADDR_EXP 70
56043: PUSH
56044: EMPTY
56045: ST_TO_ADDR
// mc_tech := [ ] ;
56046: LD_ADDR_EXP 72
56050: PUSH
56051: EMPTY
56052: ST_TO_ADDR
// mc_class := [ ] ;
56053: LD_ADDR_EXP 86
56057: PUSH
56058: EMPTY
56059: ST_TO_ADDR
// mc_class_case_use := [ ] ;
56060: LD_ADDR_EXP 87
56064: PUSH
56065: EMPTY
56066: ST_TO_ADDR
// end ;
56067: LD_VAR 0 1
56071: RET
// export function MC_Kill ( base ) ; begin
56072: LD_INT 0
56074: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
56075: LD_ADDR_EXP 45
56079: PUSH
56080: LD_EXP 45
56084: PPUSH
56085: LD_VAR 0 1
56089: PPUSH
56090: EMPTY
56091: PPUSH
56092: CALL_OW 1
56096: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56097: LD_ADDR_EXP 46
56101: PUSH
56102: LD_EXP 46
56106: PPUSH
56107: LD_VAR 0 1
56111: PPUSH
56112: EMPTY
56113: PPUSH
56114: CALL_OW 1
56118: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56119: LD_ADDR_EXP 47
56123: PUSH
56124: LD_EXP 47
56128: PPUSH
56129: LD_VAR 0 1
56133: PPUSH
56134: EMPTY
56135: PPUSH
56136: CALL_OW 1
56140: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56141: LD_ADDR_EXP 48
56145: PUSH
56146: LD_EXP 48
56150: PPUSH
56151: LD_VAR 0 1
56155: PPUSH
56156: EMPTY
56157: PPUSH
56158: CALL_OW 1
56162: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56163: LD_ADDR_EXP 49
56167: PUSH
56168: LD_EXP 49
56172: PPUSH
56173: LD_VAR 0 1
56177: PPUSH
56178: EMPTY
56179: PPUSH
56180: CALL_OW 1
56184: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56185: LD_ADDR_EXP 50
56189: PUSH
56190: LD_EXP 50
56194: PPUSH
56195: LD_VAR 0 1
56199: PPUSH
56200: EMPTY
56201: PPUSH
56202: CALL_OW 1
56206: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56207: LD_ADDR_EXP 51
56211: PUSH
56212: LD_EXP 51
56216: PPUSH
56217: LD_VAR 0 1
56221: PPUSH
56222: EMPTY
56223: PPUSH
56224: CALL_OW 1
56228: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56229: LD_ADDR_EXP 52
56233: PUSH
56234: LD_EXP 52
56238: PPUSH
56239: LD_VAR 0 1
56243: PPUSH
56244: EMPTY
56245: PPUSH
56246: CALL_OW 1
56250: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56251: LD_ADDR_EXP 53
56255: PUSH
56256: LD_EXP 53
56260: PPUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: EMPTY
56267: PPUSH
56268: CALL_OW 1
56272: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56273: LD_ADDR_EXP 54
56277: PUSH
56278: LD_EXP 54
56282: PPUSH
56283: LD_VAR 0 1
56287: PPUSH
56288: EMPTY
56289: PPUSH
56290: CALL_OW 1
56294: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56295: LD_ADDR_EXP 55
56299: PUSH
56300: LD_EXP 55
56304: PPUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: EMPTY
56311: PPUSH
56312: CALL_OW 1
56316: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56317: LD_ADDR_EXP 56
56321: PUSH
56322: LD_EXP 56
56326: PPUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: LD_INT 0
56334: PPUSH
56335: CALL_OW 1
56339: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56340: LD_ADDR_EXP 57
56344: PUSH
56345: LD_EXP 57
56349: PPUSH
56350: LD_VAR 0 1
56354: PPUSH
56355: EMPTY
56356: PPUSH
56357: CALL_OW 1
56361: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56362: LD_ADDR_EXP 58
56366: PUSH
56367: LD_EXP 58
56371: PPUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: EMPTY
56378: PPUSH
56379: CALL_OW 1
56383: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56384: LD_ADDR_EXP 59
56388: PUSH
56389: LD_EXP 59
56393: PPUSH
56394: LD_VAR 0 1
56398: PPUSH
56399: EMPTY
56400: PPUSH
56401: CALL_OW 1
56405: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56406: LD_ADDR_EXP 60
56410: PUSH
56411: LD_EXP 60
56415: PPUSH
56416: LD_VAR 0 1
56420: PPUSH
56421: EMPTY
56422: PPUSH
56423: CALL_OW 1
56427: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56428: LD_ADDR_EXP 61
56432: PUSH
56433: LD_EXP 61
56437: PPUSH
56438: LD_VAR 0 1
56442: PPUSH
56443: EMPTY
56444: PPUSH
56445: CALL_OW 1
56449: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56450: LD_ADDR_EXP 62
56454: PUSH
56455: LD_EXP 62
56459: PPUSH
56460: LD_VAR 0 1
56464: PPUSH
56465: EMPTY
56466: PPUSH
56467: CALL_OW 1
56471: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56472: LD_ADDR_EXP 63
56476: PUSH
56477: LD_EXP 63
56481: PPUSH
56482: LD_VAR 0 1
56486: PPUSH
56487: EMPTY
56488: PPUSH
56489: CALL_OW 1
56493: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56494: LD_ADDR_EXP 64
56498: PUSH
56499: LD_EXP 64
56503: PPUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: EMPTY
56510: PPUSH
56511: CALL_OW 1
56515: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56516: LD_ADDR_EXP 65
56520: PUSH
56521: LD_EXP 65
56525: PPUSH
56526: LD_VAR 0 1
56530: PPUSH
56531: EMPTY
56532: PPUSH
56533: CALL_OW 1
56537: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56538: LD_ADDR_EXP 66
56542: PUSH
56543: LD_EXP 66
56547: PPUSH
56548: LD_VAR 0 1
56552: PPUSH
56553: EMPTY
56554: PPUSH
56555: CALL_OW 1
56559: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56560: LD_ADDR_EXP 67
56564: PUSH
56565: LD_EXP 67
56569: PPUSH
56570: LD_VAR 0 1
56574: PPUSH
56575: EMPTY
56576: PPUSH
56577: CALL_OW 1
56581: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56582: LD_ADDR_EXP 68
56586: PUSH
56587: LD_EXP 68
56591: PPUSH
56592: LD_VAR 0 1
56596: PPUSH
56597: EMPTY
56598: PPUSH
56599: CALL_OW 1
56603: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56604: LD_ADDR_EXP 69
56608: PUSH
56609: LD_EXP 69
56613: PPUSH
56614: LD_VAR 0 1
56618: PPUSH
56619: EMPTY
56620: PPUSH
56621: CALL_OW 1
56625: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56626: LD_ADDR_EXP 70
56630: PUSH
56631: LD_EXP 70
56635: PPUSH
56636: LD_VAR 0 1
56640: PPUSH
56641: EMPTY
56642: PPUSH
56643: CALL_OW 1
56647: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56648: LD_ADDR_EXP 72
56652: PUSH
56653: LD_EXP 72
56657: PPUSH
56658: LD_VAR 0 1
56662: PPUSH
56663: EMPTY
56664: PPUSH
56665: CALL_OW 1
56669: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56670: LD_ADDR_EXP 74
56674: PUSH
56675: LD_EXP 74
56679: PPUSH
56680: LD_VAR 0 1
56684: PPUSH
56685: EMPTY
56686: PPUSH
56687: CALL_OW 1
56691: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56692: LD_ADDR_EXP 75
56696: PUSH
56697: LD_EXP 75
56701: PPUSH
56702: LD_VAR 0 1
56706: PPUSH
56707: EMPTY
56708: PPUSH
56709: CALL_OW 1
56713: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56714: LD_ADDR_EXP 76
56718: PUSH
56719: LD_EXP 76
56723: PPUSH
56724: LD_VAR 0 1
56728: PPUSH
56729: EMPTY
56730: PPUSH
56731: CALL_OW 1
56735: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56736: LD_ADDR_EXP 77
56740: PUSH
56741: LD_EXP 77
56745: PPUSH
56746: LD_VAR 0 1
56750: PPUSH
56751: EMPTY
56752: PPUSH
56753: CALL_OW 1
56757: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56758: LD_ADDR_EXP 78
56762: PUSH
56763: LD_EXP 78
56767: PPUSH
56768: LD_VAR 0 1
56772: PPUSH
56773: EMPTY
56774: PPUSH
56775: CALL_OW 1
56779: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56780: LD_ADDR_EXP 79
56784: PUSH
56785: LD_EXP 79
56789: PPUSH
56790: LD_VAR 0 1
56794: PPUSH
56795: EMPTY
56796: PPUSH
56797: CALL_OW 1
56801: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56802: LD_ADDR_EXP 80
56806: PUSH
56807: LD_EXP 80
56811: PPUSH
56812: LD_VAR 0 1
56816: PPUSH
56817: EMPTY
56818: PPUSH
56819: CALL_OW 1
56823: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56824: LD_ADDR_EXP 81
56828: PUSH
56829: LD_EXP 81
56833: PPUSH
56834: LD_VAR 0 1
56838: PPUSH
56839: EMPTY
56840: PPUSH
56841: CALL_OW 1
56845: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56846: LD_ADDR_EXP 82
56850: PUSH
56851: LD_EXP 82
56855: PPUSH
56856: LD_VAR 0 1
56860: PPUSH
56861: EMPTY
56862: PPUSH
56863: CALL_OW 1
56867: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56868: LD_ADDR_EXP 83
56872: PUSH
56873: LD_EXP 83
56877: PPUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: EMPTY
56884: PPUSH
56885: CALL_OW 1
56889: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56890: LD_ADDR_EXP 84
56894: PUSH
56895: LD_EXP 84
56899: PPUSH
56900: LD_VAR 0 1
56904: PPUSH
56905: EMPTY
56906: PPUSH
56907: CALL_OW 1
56911: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56912: LD_ADDR_EXP 85
56916: PUSH
56917: LD_EXP 85
56921: PPUSH
56922: LD_VAR 0 1
56926: PPUSH
56927: EMPTY
56928: PPUSH
56929: CALL_OW 1
56933: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56934: LD_ADDR_EXP 86
56938: PUSH
56939: LD_EXP 86
56943: PPUSH
56944: LD_VAR 0 1
56948: PPUSH
56949: EMPTY
56950: PPUSH
56951: CALL_OW 1
56955: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56956: LD_ADDR_EXP 87
56960: PUSH
56961: LD_EXP 87
56965: PPUSH
56966: LD_VAR 0 1
56970: PPUSH
56971: LD_INT 0
56973: PPUSH
56974: CALL_OW 1
56978: ST_TO_ADDR
// end ;
56979: LD_VAR 0 2
56983: RET
// export function MC_Add ( side , units ) ; var base ; begin
56984: LD_INT 0
56986: PPUSH
56987: PPUSH
// base := mc_bases + 1 ;
56988: LD_ADDR_VAR 0 4
56992: PUSH
56993: LD_EXP 45
56997: PUSH
56998: LD_INT 1
57000: PLUS
57001: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
57002: LD_ADDR_EXP 71
57006: PUSH
57007: LD_EXP 71
57011: PPUSH
57012: LD_VAR 0 4
57016: PPUSH
57017: LD_VAR 0 1
57021: PPUSH
57022: CALL_OW 1
57026: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
57027: LD_ADDR_EXP 45
57031: PUSH
57032: LD_EXP 45
57036: PPUSH
57037: LD_VAR 0 4
57041: PPUSH
57042: LD_VAR 0 2
57046: PPUSH
57047: CALL_OW 1
57051: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57052: LD_ADDR_EXP 46
57056: PUSH
57057: LD_EXP 46
57061: PPUSH
57062: LD_VAR 0 4
57066: PPUSH
57067: EMPTY
57068: PPUSH
57069: CALL_OW 1
57073: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57074: LD_ADDR_EXP 47
57078: PUSH
57079: LD_EXP 47
57083: PPUSH
57084: LD_VAR 0 4
57088: PPUSH
57089: EMPTY
57090: PPUSH
57091: CALL_OW 1
57095: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57096: LD_ADDR_EXP 48
57100: PUSH
57101: LD_EXP 48
57105: PPUSH
57106: LD_VAR 0 4
57110: PPUSH
57111: EMPTY
57112: PPUSH
57113: CALL_OW 1
57117: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57118: LD_ADDR_EXP 49
57122: PUSH
57123: LD_EXP 49
57127: PPUSH
57128: LD_VAR 0 4
57132: PPUSH
57133: EMPTY
57134: PPUSH
57135: CALL_OW 1
57139: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57140: LD_ADDR_EXP 50
57144: PUSH
57145: LD_EXP 50
57149: PPUSH
57150: LD_VAR 0 4
57154: PPUSH
57155: EMPTY
57156: PPUSH
57157: CALL_OW 1
57161: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57162: LD_ADDR_EXP 51
57166: PUSH
57167: LD_EXP 51
57171: PPUSH
57172: LD_VAR 0 4
57176: PPUSH
57177: EMPTY
57178: PPUSH
57179: CALL_OW 1
57183: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57184: LD_ADDR_EXP 52
57188: PUSH
57189: LD_EXP 52
57193: PPUSH
57194: LD_VAR 0 4
57198: PPUSH
57199: EMPTY
57200: PPUSH
57201: CALL_OW 1
57205: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57206: LD_ADDR_EXP 53
57210: PUSH
57211: LD_EXP 53
57215: PPUSH
57216: LD_VAR 0 4
57220: PPUSH
57221: EMPTY
57222: PPUSH
57223: CALL_OW 1
57227: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57228: LD_ADDR_EXP 54
57232: PUSH
57233: LD_EXP 54
57237: PPUSH
57238: LD_VAR 0 4
57242: PPUSH
57243: EMPTY
57244: PPUSH
57245: CALL_OW 1
57249: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57250: LD_ADDR_EXP 55
57254: PUSH
57255: LD_EXP 55
57259: PPUSH
57260: LD_VAR 0 4
57264: PPUSH
57265: EMPTY
57266: PPUSH
57267: CALL_OW 1
57271: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57272: LD_ADDR_EXP 56
57276: PUSH
57277: LD_EXP 56
57281: PPUSH
57282: LD_VAR 0 4
57286: PPUSH
57287: LD_INT 0
57289: PPUSH
57290: CALL_OW 1
57294: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57295: LD_ADDR_EXP 57
57299: PUSH
57300: LD_EXP 57
57304: PPUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: EMPTY
57311: PPUSH
57312: CALL_OW 1
57316: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57317: LD_ADDR_EXP 58
57321: PUSH
57322: LD_EXP 58
57326: PPUSH
57327: LD_VAR 0 4
57331: PPUSH
57332: EMPTY
57333: PPUSH
57334: CALL_OW 1
57338: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57339: LD_ADDR_EXP 59
57343: PUSH
57344: LD_EXP 59
57348: PPUSH
57349: LD_VAR 0 4
57353: PPUSH
57354: EMPTY
57355: PPUSH
57356: CALL_OW 1
57360: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57361: LD_ADDR_EXP 60
57365: PUSH
57366: LD_EXP 60
57370: PPUSH
57371: LD_VAR 0 4
57375: PPUSH
57376: EMPTY
57377: PPUSH
57378: CALL_OW 1
57382: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57383: LD_ADDR_EXP 61
57387: PUSH
57388: LD_EXP 61
57392: PPUSH
57393: LD_VAR 0 4
57397: PPUSH
57398: EMPTY
57399: PPUSH
57400: CALL_OW 1
57404: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57405: LD_ADDR_EXP 62
57409: PUSH
57410: LD_EXP 62
57414: PPUSH
57415: LD_VAR 0 4
57419: PPUSH
57420: EMPTY
57421: PPUSH
57422: CALL_OW 1
57426: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57427: LD_ADDR_EXP 63
57431: PUSH
57432: LD_EXP 63
57436: PPUSH
57437: LD_VAR 0 4
57441: PPUSH
57442: EMPTY
57443: PPUSH
57444: CALL_OW 1
57448: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57449: LD_ADDR_EXP 64
57453: PUSH
57454: LD_EXP 64
57458: PPUSH
57459: LD_VAR 0 4
57463: PPUSH
57464: EMPTY
57465: PPUSH
57466: CALL_OW 1
57470: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57471: LD_ADDR_EXP 65
57475: PUSH
57476: LD_EXP 65
57480: PPUSH
57481: LD_VAR 0 4
57485: PPUSH
57486: EMPTY
57487: PPUSH
57488: CALL_OW 1
57492: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57493: LD_ADDR_EXP 66
57497: PUSH
57498: LD_EXP 66
57502: PPUSH
57503: LD_VAR 0 4
57507: PPUSH
57508: EMPTY
57509: PPUSH
57510: CALL_OW 1
57514: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57515: LD_ADDR_EXP 67
57519: PUSH
57520: LD_EXP 67
57524: PPUSH
57525: LD_VAR 0 4
57529: PPUSH
57530: EMPTY
57531: PPUSH
57532: CALL_OW 1
57536: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57537: LD_ADDR_EXP 68
57541: PUSH
57542: LD_EXP 68
57546: PPUSH
57547: LD_VAR 0 4
57551: PPUSH
57552: EMPTY
57553: PPUSH
57554: CALL_OW 1
57558: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57559: LD_ADDR_EXP 69
57563: PUSH
57564: LD_EXP 69
57568: PPUSH
57569: LD_VAR 0 4
57573: PPUSH
57574: EMPTY
57575: PPUSH
57576: CALL_OW 1
57580: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57581: LD_ADDR_EXP 70
57585: PUSH
57586: LD_EXP 70
57590: PPUSH
57591: LD_VAR 0 4
57595: PPUSH
57596: EMPTY
57597: PPUSH
57598: CALL_OW 1
57602: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57603: LD_ADDR_EXP 72
57607: PUSH
57608: LD_EXP 72
57612: PPUSH
57613: LD_VAR 0 4
57617: PPUSH
57618: EMPTY
57619: PPUSH
57620: CALL_OW 1
57624: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57625: LD_ADDR_EXP 74
57629: PUSH
57630: LD_EXP 74
57634: PPUSH
57635: LD_VAR 0 4
57639: PPUSH
57640: EMPTY
57641: PPUSH
57642: CALL_OW 1
57646: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57647: LD_ADDR_EXP 75
57651: PUSH
57652: LD_EXP 75
57656: PPUSH
57657: LD_VAR 0 4
57661: PPUSH
57662: EMPTY
57663: PPUSH
57664: CALL_OW 1
57668: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57669: LD_ADDR_EXP 76
57673: PUSH
57674: LD_EXP 76
57678: PPUSH
57679: LD_VAR 0 4
57683: PPUSH
57684: EMPTY
57685: PPUSH
57686: CALL_OW 1
57690: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57691: LD_ADDR_EXP 77
57695: PUSH
57696: LD_EXP 77
57700: PPUSH
57701: LD_VAR 0 4
57705: PPUSH
57706: EMPTY
57707: PPUSH
57708: CALL_OW 1
57712: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57713: LD_ADDR_EXP 78
57717: PUSH
57718: LD_EXP 78
57722: PPUSH
57723: LD_VAR 0 4
57727: PPUSH
57728: EMPTY
57729: PPUSH
57730: CALL_OW 1
57734: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57735: LD_ADDR_EXP 79
57739: PUSH
57740: LD_EXP 79
57744: PPUSH
57745: LD_VAR 0 4
57749: PPUSH
57750: EMPTY
57751: PPUSH
57752: CALL_OW 1
57756: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57757: LD_ADDR_EXP 80
57761: PUSH
57762: LD_EXP 80
57766: PPUSH
57767: LD_VAR 0 4
57771: PPUSH
57772: EMPTY
57773: PPUSH
57774: CALL_OW 1
57778: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57779: LD_ADDR_EXP 81
57783: PUSH
57784: LD_EXP 81
57788: PPUSH
57789: LD_VAR 0 4
57793: PPUSH
57794: EMPTY
57795: PPUSH
57796: CALL_OW 1
57800: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57801: LD_ADDR_EXP 82
57805: PUSH
57806: LD_EXP 82
57810: PPUSH
57811: LD_VAR 0 4
57815: PPUSH
57816: EMPTY
57817: PPUSH
57818: CALL_OW 1
57822: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57823: LD_ADDR_EXP 83
57827: PUSH
57828: LD_EXP 83
57832: PPUSH
57833: LD_VAR 0 4
57837: PPUSH
57838: EMPTY
57839: PPUSH
57840: CALL_OW 1
57844: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57845: LD_ADDR_EXP 84
57849: PUSH
57850: LD_EXP 84
57854: PPUSH
57855: LD_VAR 0 4
57859: PPUSH
57860: EMPTY
57861: PPUSH
57862: CALL_OW 1
57866: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57867: LD_ADDR_EXP 85
57871: PUSH
57872: LD_EXP 85
57876: PPUSH
57877: LD_VAR 0 4
57881: PPUSH
57882: EMPTY
57883: PPUSH
57884: CALL_OW 1
57888: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57889: LD_ADDR_EXP 86
57893: PUSH
57894: LD_EXP 86
57898: PPUSH
57899: LD_VAR 0 4
57903: PPUSH
57904: EMPTY
57905: PPUSH
57906: CALL_OW 1
57910: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57911: LD_ADDR_EXP 87
57915: PUSH
57916: LD_EXP 87
57920: PPUSH
57921: LD_VAR 0 4
57925: PPUSH
57926: LD_INT 0
57928: PPUSH
57929: CALL_OW 1
57933: ST_TO_ADDR
// result := base ;
57934: LD_ADDR_VAR 0 3
57938: PUSH
57939: LD_VAR 0 4
57943: ST_TO_ADDR
// end ;
57944: LD_VAR 0 3
57948: RET
// export function MC_Start ( ) ; var i ; begin
57949: LD_INT 0
57951: PPUSH
57952: PPUSH
// for i = 1 to mc_bases do
57953: LD_ADDR_VAR 0 2
57957: PUSH
57958: DOUBLE
57959: LD_INT 1
57961: DEC
57962: ST_TO_ADDR
57963: LD_EXP 45
57967: PUSH
57968: FOR_TO
57969: IFFALSE 59046
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57971: LD_ADDR_EXP 45
57975: PUSH
57976: LD_EXP 45
57980: PPUSH
57981: LD_VAR 0 2
57985: PPUSH
57986: LD_EXP 45
57990: PUSH
57991: LD_VAR 0 2
57995: ARRAY
57996: PUSH
57997: LD_INT 0
57999: DIFF
58000: PPUSH
58001: CALL_OW 1
58005: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
58006: LD_ADDR_EXP 46
58010: PUSH
58011: LD_EXP 46
58015: PPUSH
58016: LD_VAR 0 2
58020: PPUSH
58021: EMPTY
58022: PPUSH
58023: CALL_OW 1
58027: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58028: LD_ADDR_EXP 47
58032: PUSH
58033: LD_EXP 47
58037: PPUSH
58038: LD_VAR 0 2
58042: PPUSH
58043: EMPTY
58044: PPUSH
58045: CALL_OW 1
58049: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58050: LD_ADDR_EXP 48
58054: PUSH
58055: LD_EXP 48
58059: PPUSH
58060: LD_VAR 0 2
58064: PPUSH
58065: EMPTY
58066: PPUSH
58067: CALL_OW 1
58071: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58072: LD_ADDR_EXP 49
58076: PUSH
58077: LD_EXP 49
58081: PPUSH
58082: LD_VAR 0 2
58086: PPUSH
58087: EMPTY
58088: PUSH
58089: EMPTY
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PPUSH
58095: CALL_OW 1
58099: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58100: LD_ADDR_EXP 50
58104: PUSH
58105: LD_EXP 50
58109: PPUSH
58110: LD_VAR 0 2
58114: PPUSH
58115: EMPTY
58116: PPUSH
58117: CALL_OW 1
58121: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58122: LD_ADDR_EXP 77
58126: PUSH
58127: LD_EXP 77
58131: PPUSH
58132: LD_VAR 0 2
58136: PPUSH
58137: EMPTY
58138: PPUSH
58139: CALL_OW 1
58143: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58144: LD_ADDR_EXP 51
58148: PUSH
58149: LD_EXP 51
58153: PPUSH
58154: LD_VAR 0 2
58158: PPUSH
58159: EMPTY
58160: PPUSH
58161: CALL_OW 1
58165: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58166: LD_ADDR_EXP 52
58170: PUSH
58171: LD_EXP 52
58175: PPUSH
58176: LD_VAR 0 2
58180: PPUSH
58181: EMPTY
58182: PPUSH
58183: CALL_OW 1
58187: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58188: LD_ADDR_EXP 53
58192: PUSH
58193: LD_EXP 53
58197: PPUSH
58198: LD_VAR 0 2
58202: PPUSH
58203: LD_EXP 45
58207: PUSH
58208: LD_VAR 0 2
58212: ARRAY
58213: PPUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 30
58219: PUSH
58220: LD_INT 32
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 30
58229: PUSH
58230: LD_INT 33
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 72
58246: PPUSH
58247: CALL_OW 1
58251: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58252: LD_ADDR_EXP 54
58256: PUSH
58257: LD_EXP 54
58261: PPUSH
58262: LD_VAR 0 2
58266: PPUSH
58267: LD_EXP 45
58271: PUSH
58272: LD_VAR 0 2
58276: ARRAY
58277: PPUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 30
58283: PUSH
58284: LD_INT 32
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 30
58293: PUSH
58294: LD_INT 31
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 58
58308: PUSH
58309: EMPTY
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PPUSH
58316: CALL_OW 72
58320: PPUSH
58321: CALL_OW 1
58325: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58326: LD_ADDR_EXP 55
58330: PUSH
58331: LD_EXP 55
58335: PPUSH
58336: LD_VAR 0 2
58340: PPUSH
58341: EMPTY
58342: PPUSH
58343: CALL_OW 1
58347: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58348: LD_ADDR_EXP 59
58352: PUSH
58353: LD_EXP 59
58357: PPUSH
58358: LD_VAR 0 2
58362: PPUSH
58363: EMPTY
58364: PPUSH
58365: CALL_OW 1
58369: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58370: LD_ADDR_EXP 58
58374: PUSH
58375: LD_EXP 58
58379: PPUSH
58380: LD_VAR 0 2
58384: PPUSH
58385: EMPTY
58386: PPUSH
58387: CALL_OW 1
58391: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58392: LD_ADDR_EXP 60
58396: PUSH
58397: LD_EXP 60
58401: PPUSH
58402: LD_VAR 0 2
58406: PPUSH
58407: EMPTY
58408: PPUSH
58409: CALL_OW 1
58413: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58414: LD_ADDR_EXP 61
58418: PUSH
58419: LD_EXP 61
58423: PPUSH
58424: LD_VAR 0 2
58428: PPUSH
58429: EMPTY
58430: PPUSH
58431: CALL_OW 1
58435: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58436: LD_ADDR_EXP 62
58440: PUSH
58441: LD_EXP 62
58445: PPUSH
58446: LD_VAR 0 2
58450: PPUSH
58451: EMPTY
58452: PPUSH
58453: CALL_OW 1
58457: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58458: LD_ADDR_EXP 63
58462: PUSH
58463: LD_EXP 63
58467: PPUSH
58468: LD_VAR 0 2
58472: PPUSH
58473: EMPTY
58474: PPUSH
58475: CALL_OW 1
58479: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58480: LD_ADDR_EXP 64
58484: PUSH
58485: LD_EXP 64
58489: PPUSH
58490: LD_VAR 0 2
58494: PPUSH
58495: EMPTY
58496: PPUSH
58497: CALL_OW 1
58501: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58502: LD_ADDR_EXP 65
58506: PUSH
58507: LD_EXP 65
58511: PPUSH
58512: LD_VAR 0 2
58516: PPUSH
58517: EMPTY
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58524: LD_ADDR_EXP 66
58528: PUSH
58529: LD_EXP 66
58533: PPUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: EMPTY
58540: PPUSH
58541: CALL_OW 1
58545: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58546: LD_ADDR_EXP 67
58550: PUSH
58551: LD_EXP 67
58555: PPUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: EMPTY
58562: PPUSH
58563: CALL_OW 1
58567: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58568: LD_ADDR_EXP 56
58572: PUSH
58573: LD_EXP 56
58577: PPUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: LD_INT 0
58585: PPUSH
58586: CALL_OW 1
58590: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58591: LD_ADDR_EXP 69
58595: PUSH
58596: LD_EXP 69
58600: PPUSH
58601: LD_VAR 0 2
58605: PPUSH
58606: LD_INT 0
58608: PPUSH
58609: CALL_OW 1
58613: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58614: LD_ADDR_EXP 57
58618: PUSH
58619: LD_EXP 57
58623: PPUSH
58624: LD_VAR 0 2
58628: PPUSH
58629: EMPTY
58630: PPUSH
58631: CALL_OW 1
58635: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58636: LD_ADDR_EXP 68
58640: PUSH
58641: LD_EXP 68
58645: PPUSH
58646: LD_VAR 0 2
58650: PPUSH
58651: LD_INT 0
58653: PPUSH
58654: CALL_OW 1
58658: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58659: LD_ADDR_EXP 70
58663: PUSH
58664: LD_EXP 70
58668: PPUSH
58669: LD_VAR 0 2
58673: PPUSH
58674: EMPTY
58675: PPUSH
58676: CALL_OW 1
58680: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58681: LD_ADDR_EXP 73
58685: PUSH
58686: LD_EXP 73
58690: PPUSH
58691: LD_VAR 0 2
58695: PPUSH
58696: LD_INT 0
58698: PPUSH
58699: CALL_OW 1
58703: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58704: LD_ADDR_EXP 74
58708: PUSH
58709: LD_EXP 74
58713: PPUSH
58714: LD_VAR 0 2
58718: PPUSH
58719: EMPTY
58720: PPUSH
58721: CALL_OW 1
58725: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58726: LD_ADDR_EXP 75
58730: PUSH
58731: LD_EXP 75
58735: PPUSH
58736: LD_VAR 0 2
58740: PPUSH
58741: EMPTY
58742: PPUSH
58743: CALL_OW 1
58747: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58748: LD_ADDR_EXP 76
58752: PUSH
58753: LD_EXP 76
58757: PPUSH
58758: LD_VAR 0 2
58762: PPUSH
58763: EMPTY
58764: PPUSH
58765: CALL_OW 1
58769: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58770: LD_ADDR_EXP 78
58774: PUSH
58775: LD_EXP 78
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: LD_EXP 45
58789: PUSH
58790: LD_VAR 0 2
58794: ARRAY
58795: PPUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 30
58801: PUSH
58802: LD_INT 6
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 30
58811: PUSH
58812: LD_INT 7
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 30
58821: PUSH
58822: LD_INT 8
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: PPUSH
58835: CALL_OW 72
58839: PPUSH
58840: CALL_OW 1
58844: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58845: LD_ADDR_EXP 79
58849: PUSH
58850: LD_EXP 79
58854: PPUSH
58855: LD_VAR 0 2
58859: PPUSH
58860: EMPTY
58861: PPUSH
58862: CALL_OW 1
58866: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58867: LD_ADDR_EXP 80
58871: PUSH
58872: LD_EXP 80
58876: PPUSH
58877: LD_VAR 0 2
58881: PPUSH
58882: EMPTY
58883: PPUSH
58884: CALL_OW 1
58888: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58889: LD_ADDR_EXP 81
58893: PUSH
58894: LD_EXP 81
58898: PPUSH
58899: LD_VAR 0 2
58903: PPUSH
58904: EMPTY
58905: PPUSH
58906: CALL_OW 1
58910: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58911: LD_ADDR_EXP 82
58915: PUSH
58916: LD_EXP 82
58920: PPUSH
58921: LD_VAR 0 2
58925: PPUSH
58926: EMPTY
58927: PPUSH
58928: CALL_OW 1
58932: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58933: LD_ADDR_EXP 83
58937: PUSH
58938: LD_EXP 83
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: EMPTY
58949: PPUSH
58950: CALL_OW 1
58954: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58955: LD_ADDR_EXP 84
58959: PUSH
58960: LD_EXP 84
58964: PPUSH
58965: LD_VAR 0 2
58969: PPUSH
58970: EMPTY
58971: PPUSH
58972: CALL_OW 1
58976: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58977: LD_ADDR_EXP 85
58981: PUSH
58982: LD_EXP 85
58986: PPUSH
58987: LD_VAR 0 2
58991: PPUSH
58992: EMPTY
58993: PPUSH
58994: CALL_OW 1
58998: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
58999: LD_ADDR_EXP 86
59003: PUSH
59004: LD_EXP 86
59008: PPUSH
59009: LD_VAR 0 2
59013: PPUSH
59014: EMPTY
59015: PPUSH
59016: CALL_OW 1
59020: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
59021: LD_ADDR_EXP 87
59025: PUSH
59026: LD_EXP 87
59030: PPUSH
59031: LD_VAR 0 2
59035: PPUSH
59036: LD_INT 0
59038: PPUSH
59039: CALL_OW 1
59043: ST_TO_ADDR
// end ;
59044: GO 57968
59046: POP
59047: POP
// MC_InitSides ( ) ;
59048: CALL 59334 0 0
// MC_InitResearch ( ) ;
59052: CALL 59073 0 0
// CustomInitMacro ( ) ;
59056: CALL 1400 0 0
// skirmish := true ;
59060: LD_ADDR_EXP 43
59064: PUSH
59065: LD_INT 1
59067: ST_TO_ADDR
// end ;
59068: LD_VAR 0 1
59072: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59073: LD_INT 0
59075: PPUSH
59076: PPUSH
59077: PPUSH
59078: PPUSH
59079: PPUSH
59080: PPUSH
// if not mc_bases then
59081: LD_EXP 45
59085: NOT
59086: IFFALSE 59090
// exit ;
59088: GO 59329
// for i = 1 to 8 do
59090: LD_ADDR_VAR 0 2
59094: PUSH
59095: DOUBLE
59096: LD_INT 1
59098: DEC
59099: ST_TO_ADDR
59100: LD_INT 8
59102: PUSH
59103: FOR_TO
59104: IFFALSE 59130
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59106: LD_ADDR_EXP 72
59110: PUSH
59111: LD_EXP 72
59115: PPUSH
59116: LD_VAR 0 2
59120: PPUSH
59121: EMPTY
59122: PPUSH
59123: CALL_OW 1
59127: ST_TO_ADDR
59128: GO 59103
59130: POP
59131: POP
// tmp := [ ] ;
59132: LD_ADDR_VAR 0 5
59136: PUSH
59137: EMPTY
59138: ST_TO_ADDR
// for i = 1 to mc_sides do
59139: LD_ADDR_VAR 0 2
59143: PUSH
59144: DOUBLE
59145: LD_INT 1
59147: DEC
59148: ST_TO_ADDR
59149: LD_EXP 71
59153: PUSH
59154: FOR_TO
59155: IFFALSE 59213
// if not mc_sides [ i ] in tmp then
59157: LD_EXP 71
59161: PUSH
59162: LD_VAR 0 2
59166: ARRAY
59167: PUSH
59168: LD_VAR 0 5
59172: IN
59173: NOT
59174: IFFALSE 59211
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59176: LD_ADDR_VAR 0 5
59180: PUSH
59181: LD_VAR 0 5
59185: PPUSH
59186: LD_VAR 0 5
59190: PUSH
59191: LD_INT 1
59193: PLUS
59194: PPUSH
59195: LD_EXP 71
59199: PUSH
59200: LD_VAR 0 2
59204: ARRAY
59205: PPUSH
59206: CALL_OW 2
59210: ST_TO_ADDR
59211: GO 59154
59213: POP
59214: POP
// if not tmp then
59215: LD_VAR 0 5
59219: NOT
59220: IFFALSE 59224
// exit ;
59222: GO 59329
// for j in tmp do
59224: LD_ADDR_VAR 0 3
59228: PUSH
59229: LD_VAR 0 5
59233: PUSH
59234: FOR_IN
59235: IFFALSE 59327
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59237: LD_ADDR_VAR 0 6
59241: PUSH
59242: LD_INT 22
59244: PUSH
59245: LD_VAR 0 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PPUSH
59254: CALL_OW 69
59258: ST_TO_ADDR
// if not un then
59259: LD_VAR 0 6
59263: NOT
59264: IFFALSE 59268
// continue ;
59266: GO 59234
// nation := GetNation ( un [ 1 ] ) ;
59268: LD_ADDR_VAR 0 4
59272: PUSH
59273: LD_VAR 0 6
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PPUSH
59282: CALL_OW 248
59286: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59287: LD_ADDR_EXP 72
59291: PUSH
59292: LD_EXP 72
59296: PPUSH
59297: LD_VAR 0 3
59301: PPUSH
59302: LD_VAR 0 3
59306: PPUSH
59307: LD_VAR 0 4
59311: PPUSH
59312: LD_INT 1
59314: PPUSH
59315: CALL 19411 0 3
59319: PPUSH
59320: CALL_OW 1
59324: ST_TO_ADDR
// end ;
59325: GO 59234
59327: POP
59328: POP
// end ;
59329: LD_VAR 0 1
59333: RET
// export function MC_InitSides ( ) ; var i ; begin
59334: LD_INT 0
59336: PPUSH
59337: PPUSH
// if not mc_bases then
59338: LD_EXP 45
59342: NOT
59343: IFFALSE 59347
// exit ;
59345: GO 59421
// for i = 1 to mc_bases do
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: DOUBLE
59353: LD_INT 1
59355: DEC
59356: ST_TO_ADDR
59357: LD_EXP 45
59361: PUSH
59362: FOR_TO
59363: IFFALSE 59419
// if mc_bases [ i ] then
59365: LD_EXP 45
59369: PUSH
59370: LD_VAR 0 2
59374: ARRAY
59375: IFFALSE 59417
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59377: LD_ADDR_EXP 71
59381: PUSH
59382: LD_EXP 71
59386: PPUSH
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_EXP 45
59396: PUSH
59397: LD_VAR 0 2
59401: ARRAY
59402: PUSH
59403: LD_INT 1
59405: ARRAY
59406: PPUSH
59407: CALL_OW 255
59411: PPUSH
59412: CALL_OW 1
59416: ST_TO_ADDR
59417: GO 59362
59419: POP
59420: POP
// end ;
59421: LD_VAR 0 1
59425: RET
// every 0 0$01 trigger skirmish do
59426: LD_EXP 43
59430: IFFALSE 59584
59432: GO 59434
59434: DISABLE
// begin enable ;
59435: ENABLE
// MC_CheckBuildings ( ) ;
59436: CALL 64082 0 0
// MC_CheckPeopleLife ( ) ;
59440: CALL 64207 0 0
// RaiseSailEvent ( 100 ) ;
59444: LD_INT 100
59446: PPUSH
59447: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59451: LD_INT 103
59453: PPUSH
59454: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59458: LD_INT 104
59460: PPUSH
59461: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59465: LD_INT 105
59467: PPUSH
59468: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59472: LD_INT 106
59474: PPUSH
59475: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59479: LD_INT 107
59481: PPUSH
59482: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59486: LD_INT 108
59488: PPUSH
59489: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59493: LD_INT 109
59495: PPUSH
59496: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59500: LD_INT 110
59502: PPUSH
59503: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59507: LD_INT 111
59509: PPUSH
59510: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59514: LD_INT 112
59516: PPUSH
59517: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59521: LD_INT 113
59523: PPUSH
59524: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59528: LD_INT 120
59530: PPUSH
59531: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59535: LD_INT 121
59537: PPUSH
59538: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59542: LD_INT 122
59544: PPUSH
59545: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59549: LD_INT 123
59551: PPUSH
59552: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59556: LD_INT 124
59558: PPUSH
59559: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59563: LD_INT 125
59565: PPUSH
59566: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59570: LD_INT 126
59572: PPUSH
59573: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59577: LD_INT 200
59579: PPUSH
59580: CALL_OW 427
// end ;
59584: END
// on SailEvent ( event ) do begin if event < 100 then
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 100
59592: LESS
59593: IFFALSE 59604
// CustomEvent ( event ) ;
59595: LD_VAR 0 1
59599: PPUSH
59600: CALL 18589 0 1
// if event = 100 then
59604: LD_VAR 0 1
59608: PUSH
59609: LD_INT 100
59611: EQUAL
59612: IFFALSE 59618
// MC_ClassManager ( ) ;
59614: CALL 60010 0 0
// if event = 101 then
59618: LD_VAR 0 1
59622: PUSH
59623: LD_INT 101
59625: EQUAL
59626: IFFALSE 59632
// MC_RepairBuildings ( ) ;
59628: CALL 64792 0 0
// if event = 102 then
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 102
59639: EQUAL
59640: IFFALSE 59646
// MC_Heal ( ) ;
59642: CALL 65651 0 0
// if event = 103 then
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 103
59653: EQUAL
59654: IFFALSE 59660
// MC_Build ( ) ;
59656: CALL 66073 0 0
// if event = 104 then
59660: LD_VAR 0 1
59664: PUSH
59665: LD_INT 104
59667: EQUAL
59668: IFFALSE 59674
// MC_TurretWeapon ( ) ;
59670: CALL 67686 0 0
// if event = 105 then
59674: LD_VAR 0 1
59678: PUSH
59679: LD_INT 105
59681: EQUAL
59682: IFFALSE 59688
// MC_BuildUpgrade ( ) ;
59684: CALL 67237 0 0
// if event = 106 then
59688: LD_VAR 0 1
59692: PUSH
59693: LD_INT 106
59695: EQUAL
59696: IFFALSE 59702
// MC_PlantMines ( ) ;
59698: CALL 68116 0 0
// if event = 107 then
59702: LD_VAR 0 1
59706: PUSH
59707: LD_INT 107
59709: EQUAL
59710: IFFALSE 59716
// MC_CollectCrates ( ) ;
59712: CALL 68914 0 0
// if event = 108 then
59716: LD_VAR 0 1
59720: PUSH
59721: LD_INT 108
59723: EQUAL
59724: IFFALSE 59730
// MC_LinkRemoteControl ( ) ;
59726: CALL 70690 0 0
// if event = 109 then
59730: LD_VAR 0 1
59734: PUSH
59735: LD_INT 109
59737: EQUAL
59738: IFFALSE 59744
// MC_ProduceVehicle ( ) ;
59740: CALL 70871 0 0
// if event = 110 then
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 110
59751: EQUAL
59752: IFFALSE 59758
// MC_SendAttack ( ) ;
59754: CALL 71337 0 0
// if event = 111 then
59758: LD_VAR 0 1
59762: PUSH
59763: LD_INT 111
59765: EQUAL
59766: IFFALSE 59772
// MC_Defend ( ) ;
59768: CALL 71445 0 0
// if event = 112 then
59772: LD_VAR 0 1
59776: PUSH
59777: LD_INT 112
59779: EQUAL
59780: IFFALSE 59786
// MC_Research ( ) ;
59782: CALL 72050 0 0
// if event = 113 then
59786: LD_VAR 0 1
59790: PUSH
59791: LD_INT 113
59793: EQUAL
59794: IFFALSE 59800
// MC_MinesTrigger ( ) ;
59796: CALL 73164 0 0
// if event = 120 then
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 120
59807: EQUAL
59808: IFFALSE 59814
// MC_RepairVehicle ( ) ;
59810: CALL 73263 0 0
// if event = 121 then
59814: LD_VAR 0 1
59818: PUSH
59819: LD_INT 121
59821: EQUAL
59822: IFFALSE 59828
// MC_TameApe ( ) ;
59824: CALL 73993 0 0
// if event = 122 then
59828: LD_VAR 0 1
59832: PUSH
59833: LD_INT 122
59835: EQUAL
59836: IFFALSE 59842
// MC_ChangeApeClass ( ) ;
59838: CALL 74822 0 0
// if event = 123 then
59842: LD_VAR 0 1
59846: PUSH
59847: LD_INT 123
59849: EQUAL
59850: IFFALSE 59856
// MC_Bazooka ( ) ;
59852: CALL 75472 0 0
// if event = 124 then
59856: LD_VAR 0 1
59860: PUSH
59861: LD_INT 124
59863: EQUAL
59864: IFFALSE 59870
// MC_TeleportExit ( ) ;
59866: CALL 75670 0 0
// if event = 125 then
59870: LD_VAR 0 1
59874: PUSH
59875: LD_INT 125
59877: EQUAL
59878: IFFALSE 59884
// MC_Deposits ( ) ;
59880: CALL 76317 0 0
// if event = 126 then
59884: LD_VAR 0 1
59888: PUSH
59889: LD_INT 126
59891: EQUAL
59892: IFFALSE 59898
// MC_RemoteDriver ( ) ;
59894: CALL 76942 0 0
// if event = 200 then
59898: LD_VAR 0 1
59902: PUSH
59903: LD_INT 200
59905: EQUAL
59906: IFFALSE 59912
// MC_Idle ( ) ;
59908: CALL 78891 0 0
// end ;
59912: PPOPN 1
59914: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59915: LD_INT 0
59917: PPUSH
59918: PPUSH
// if not mc_bases [ base ] or not tag then
59919: LD_EXP 45
59923: PUSH
59924: LD_VAR 0 1
59928: ARRAY
59929: NOT
59930: PUSH
59931: LD_VAR 0 2
59935: NOT
59936: OR
59937: IFFALSE 59941
// exit ;
59939: GO 60005
// for i in mc_bases [ base ] union mc_ape [ base ] do
59941: LD_ADDR_VAR 0 4
59945: PUSH
59946: LD_EXP 45
59950: PUSH
59951: LD_VAR 0 1
59955: ARRAY
59956: PUSH
59957: LD_EXP 74
59961: PUSH
59962: LD_VAR 0 1
59966: ARRAY
59967: UNION
59968: PUSH
59969: FOR_IN
59970: IFFALSE 60003
// if GetTag ( i ) = tag then
59972: LD_VAR 0 4
59976: PPUSH
59977: CALL_OW 110
59981: PUSH
59982: LD_VAR 0 2
59986: EQUAL
59987: IFFALSE 60001
// SetTag ( i , 0 ) ;
59989: LD_VAR 0 4
59993: PPUSH
59994: LD_INT 0
59996: PPUSH
59997: CALL_OW 109
60001: GO 59969
60003: POP
60004: POP
// end ;
60005: LD_VAR 0 3
60009: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
60010: LD_INT 0
60012: PPUSH
60013: PPUSH
60014: PPUSH
60015: PPUSH
60016: PPUSH
60017: PPUSH
60018: PPUSH
60019: PPUSH
// if not mc_bases then
60020: LD_EXP 45
60024: NOT
60025: IFFALSE 60029
// exit ;
60027: GO 60487
// for i = 1 to mc_bases do
60029: LD_ADDR_VAR 0 2
60033: PUSH
60034: DOUBLE
60035: LD_INT 1
60037: DEC
60038: ST_TO_ADDR
60039: LD_EXP 45
60043: PUSH
60044: FOR_TO
60045: IFFALSE 60485
// begin tmp := MC_ClassCheckReq ( i ) ;
60047: LD_ADDR_VAR 0 4
60051: PUSH
60052: LD_VAR 0 2
60056: PPUSH
60057: CALL 60492 0 1
60061: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
60062: LD_ADDR_EXP 86
60066: PUSH
60067: LD_EXP 86
60071: PPUSH
60072: LD_VAR 0 2
60076: PPUSH
60077: LD_VAR 0 4
60081: PPUSH
60082: CALL_OW 1
60086: ST_TO_ADDR
// if not tmp then
60087: LD_VAR 0 4
60091: NOT
60092: IFFALSE 60096
// continue ;
60094: GO 60044
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
60096: LD_ADDR_VAR 0 6
60100: PUSH
60101: LD_EXP 45
60105: PUSH
60106: LD_VAR 0 2
60110: ARRAY
60111: PPUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 30
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 30
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: PPUSH
60140: CALL_OW 72
60144: PUSH
60145: LD_EXP 45
60149: PUSH
60150: LD_VAR 0 2
60154: ARRAY
60155: PPUSH
60156: LD_INT 2
60158: PUSH
60159: LD_INT 30
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 30
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PPUSH
60184: CALL_OW 72
60188: PUSH
60189: LD_EXP 45
60193: PUSH
60194: LD_VAR 0 2
60198: ARRAY
60199: PPUSH
60200: LD_INT 30
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PPUSH
60210: CALL_OW 72
60214: PUSH
60215: LD_EXP 45
60219: PUSH
60220: LD_VAR 0 2
60224: ARRAY
60225: PPUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 30
60231: PUSH
60232: LD_INT 6
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 30
60241: PUSH
60242: LD_INT 7
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 30
60251: PUSH
60252: LD_INT 8
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: PPUSH
60265: CALL_OW 72
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// for j = 1 to 4 do
60276: LD_ADDR_VAR 0 3
60280: PUSH
60281: DOUBLE
60282: LD_INT 1
60284: DEC
60285: ST_TO_ADDR
60286: LD_INT 4
60288: PUSH
60289: FOR_TO
60290: IFFALSE 60481
// begin if not tmp [ j ] then
60292: LD_VAR 0 4
60296: PUSH
60297: LD_VAR 0 3
60301: ARRAY
60302: NOT
60303: IFFALSE 60307
// continue ;
60305: GO 60289
// for p in tmp [ j ] do
60307: LD_ADDR_VAR 0 5
60311: PUSH
60312: LD_VAR 0 4
60316: PUSH
60317: LD_VAR 0 3
60321: ARRAY
60322: PUSH
60323: FOR_IN
60324: IFFALSE 60477
// begin if not b [ j ] then
60326: LD_VAR 0 6
60330: PUSH
60331: LD_VAR 0 3
60335: ARRAY
60336: NOT
60337: IFFALSE 60341
// break ;
60339: GO 60477
// e := 0 ;
60341: LD_ADDR_VAR 0 7
60345: PUSH
60346: LD_INT 0
60348: ST_TO_ADDR
// for k in b [ j ] do
60349: LD_ADDR_VAR 0 8
60353: PUSH
60354: LD_VAR 0 6
60358: PUSH
60359: LD_VAR 0 3
60363: ARRAY
60364: PUSH
60365: FOR_IN
60366: IFFALSE 60393
// if IsNotFull ( k ) then
60368: LD_VAR 0 8
60372: PPUSH
60373: CALL 21560 0 1
60377: IFFALSE 60391
// begin e := k ;
60379: LD_ADDR_VAR 0 7
60383: PUSH
60384: LD_VAR 0 8
60388: ST_TO_ADDR
// break ;
60389: GO 60393
// end ;
60391: GO 60365
60393: POP
60394: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60395: LD_VAR 0 7
60399: PUSH
60400: LD_VAR 0 5
60404: PPUSH
60405: LD_VAR 0 7
60409: PPUSH
60410: CALL 53980 0 2
60414: NOT
60415: AND
60416: IFFALSE 60475
// begin if IsInUnit ( p ) then
60418: LD_VAR 0 5
60422: PPUSH
60423: CALL_OW 310
60427: IFFALSE 60438
// ComExitBuilding ( p ) ;
60429: LD_VAR 0 5
60433: PPUSH
60434: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60438: LD_VAR 0 5
60442: PPUSH
60443: LD_VAR 0 7
60447: PPUSH
60448: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60452: LD_VAR 0 5
60456: PPUSH
60457: LD_VAR 0 3
60461: PPUSH
60462: CALL_OW 183
// AddComExitBuilding ( p ) ;
60466: LD_VAR 0 5
60470: PPUSH
60471: CALL_OW 182
// end ; end ;
60475: GO 60323
60477: POP
60478: POP
// end ;
60479: GO 60289
60481: POP
60482: POP
// end ;
60483: GO 60044
60485: POP
60486: POP
// end ;
60487: LD_VAR 0 1
60491: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
60496: PPUSH
60497: PPUSH
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
60502: PPUSH
60503: PPUSH
60504: PPUSH
60505: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60506: LD_VAR 0 1
60510: NOT
60511: PUSH
60512: LD_EXP 45
60516: PUSH
60517: LD_VAR 0 1
60521: ARRAY
60522: NOT
60523: OR
60524: PUSH
60525: LD_EXP 45
60529: PUSH
60530: LD_VAR 0 1
60534: ARRAY
60535: PPUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 30
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 30
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: PPUSH
60564: CALL_OW 72
60568: NOT
60569: OR
60570: IFFALSE 60574
// exit ;
60572: GO 64077
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60574: LD_ADDR_VAR 0 4
60578: PUSH
60579: LD_EXP 45
60583: PUSH
60584: LD_VAR 0 1
60588: ARRAY
60589: PPUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 25
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 25
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 25
60615: PUSH
60616: LD_INT 3
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 25
60625: PUSH
60626: LD_INT 4
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 25
60635: PUSH
60636: LD_INT 5
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 25
60645: PUSH
60646: LD_INT 8
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 25
60655: PUSH
60656: LD_INT 9
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: PPUSH
60673: CALL_OW 72
60677: ST_TO_ADDR
// if not tmp then
60678: LD_VAR 0 4
60682: NOT
60683: IFFALSE 60687
// exit ;
60685: GO 64077
// for i in tmp do
60687: LD_ADDR_VAR 0 3
60691: PUSH
60692: LD_VAR 0 4
60696: PUSH
60697: FOR_IN
60698: IFFALSE 60729
// if GetTag ( i ) then
60700: LD_VAR 0 3
60704: PPUSH
60705: CALL_OW 110
60709: IFFALSE 60727
// tmp := tmp diff i ;
60711: LD_ADDR_VAR 0 4
60715: PUSH
60716: LD_VAR 0 4
60720: PUSH
60721: LD_VAR 0 3
60725: DIFF
60726: ST_TO_ADDR
60727: GO 60697
60729: POP
60730: POP
// if not tmp then
60731: LD_VAR 0 4
60735: NOT
60736: IFFALSE 60740
// exit ;
60738: GO 64077
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60740: LD_ADDR_VAR 0 5
60744: PUSH
60745: LD_EXP 45
60749: PUSH
60750: LD_VAR 0 1
60754: ARRAY
60755: PPUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 25
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 25
60771: PUSH
60772: LD_INT 5
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 25
60781: PUSH
60782: LD_INT 8
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 25
60791: PUSH
60792: LD_INT 9
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: PPUSH
60806: CALL_OW 72
60810: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60811: LD_ADDR_VAR 0 6
60815: PUSH
60816: LD_EXP 45
60820: PUSH
60821: LD_VAR 0 1
60825: ARRAY
60826: PPUSH
60827: LD_INT 25
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PPUSH
60837: CALL_OW 72
60841: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60842: LD_ADDR_VAR 0 7
60846: PUSH
60847: LD_EXP 45
60851: PUSH
60852: LD_VAR 0 1
60856: ARRAY
60857: PPUSH
60858: LD_INT 25
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PPUSH
60868: CALL_OW 72
60872: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60873: LD_ADDR_VAR 0 8
60877: PUSH
60878: LD_EXP 45
60882: PUSH
60883: LD_VAR 0 1
60887: ARRAY
60888: PPUSH
60889: LD_INT 25
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 24
60901: PUSH
60902: LD_INT 251
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PPUSH
60913: CALL_OW 72
60917: ST_TO_ADDR
// if mc_scan [ base ] then
60918: LD_EXP 68
60922: PUSH
60923: LD_VAR 0 1
60927: ARRAY
60928: IFFALSE 61389
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60930: LD_ADDR_EXP 87
60934: PUSH
60935: LD_EXP 87
60939: PPUSH
60940: LD_VAR 0 1
60944: PPUSH
60945: LD_INT 4
60947: PPUSH
60948: CALL_OW 1
60952: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60953: LD_ADDR_VAR 0 12
60957: PUSH
60958: LD_EXP 45
60962: PUSH
60963: LD_VAR 0 1
60967: ARRAY
60968: PPUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 30
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 30
60984: PUSH
60985: LD_INT 5
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PPUSH
60997: CALL_OW 72
61001: ST_TO_ADDR
// if not b then
61002: LD_VAR 0 12
61006: NOT
61007: IFFALSE 61011
// exit ;
61009: GO 64077
// p := [ ] ;
61011: LD_ADDR_VAR 0 11
61015: PUSH
61016: EMPTY
61017: ST_TO_ADDR
// if sci >= 2 then
61018: LD_VAR 0 8
61022: PUSH
61023: LD_INT 2
61025: GREATEREQUAL
61026: IFFALSE 61057
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
61028: LD_ADDR_VAR 0 8
61032: PUSH
61033: LD_VAR 0 8
61037: PUSH
61038: LD_INT 1
61040: ARRAY
61041: PUSH
61042: LD_VAR 0 8
61046: PUSH
61047: LD_INT 2
61049: ARRAY
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: ST_TO_ADDR
61055: GO 61118
// if sci = 1 then
61057: LD_VAR 0 8
61061: PUSH
61062: LD_INT 1
61064: EQUAL
61065: IFFALSE 61086
// sci := [ sci [ 1 ] ] else
61067: LD_ADDR_VAR 0 8
61071: PUSH
61072: LD_VAR 0 8
61076: PUSH
61077: LD_INT 1
61079: ARRAY
61080: PUSH
61081: EMPTY
61082: LIST
61083: ST_TO_ADDR
61084: GO 61118
// if sci = 0 then
61086: LD_VAR 0 8
61090: PUSH
61091: LD_INT 0
61093: EQUAL
61094: IFFALSE 61118
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
61096: LD_ADDR_VAR 0 11
61100: PUSH
61101: LD_VAR 0 4
61105: PPUSH
61106: LD_INT 4
61108: PPUSH
61109: CALL 53843 0 2
61113: PUSH
61114: LD_INT 1
61116: ARRAY
61117: ST_TO_ADDR
// if eng > 4 then
61118: LD_VAR 0 6
61122: PUSH
61123: LD_INT 4
61125: GREATER
61126: IFFALSE 61172
// for i = eng downto 4 do
61128: LD_ADDR_VAR 0 3
61132: PUSH
61133: DOUBLE
61134: LD_VAR 0 6
61138: INC
61139: ST_TO_ADDR
61140: LD_INT 4
61142: PUSH
61143: FOR_DOWNTO
61144: IFFALSE 61170
// eng := eng diff eng [ i ] ;
61146: LD_ADDR_VAR 0 6
61150: PUSH
61151: LD_VAR 0 6
61155: PUSH
61156: LD_VAR 0 6
61160: PUSH
61161: LD_VAR 0 3
61165: ARRAY
61166: DIFF
61167: ST_TO_ADDR
61168: GO 61143
61170: POP
61171: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61172: LD_ADDR_VAR 0 4
61176: PUSH
61177: LD_VAR 0 4
61181: PUSH
61182: LD_VAR 0 5
61186: PUSH
61187: LD_VAR 0 6
61191: UNION
61192: PUSH
61193: LD_VAR 0 7
61197: UNION
61198: PUSH
61199: LD_VAR 0 8
61203: UNION
61204: DIFF
61205: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61206: LD_ADDR_VAR 0 13
61210: PUSH
61211: LD_EXP 45
61215: PUSH
61216: LD_VAR 0 1
61220: ARRAY
61221: PPUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 30
61227: PUSH
61228: LD_INT 32
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 30
61237: PUSH
61238: LD_INT 31
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: PPUSH
61250: CALL_OW 72
61254: PUSH
61255: LD_EXP 45
61259: PUSH
61260: LD_VAR 0 1
61264: ARRAY
61265: PPUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 30
61271: PUSH
61272: LD_INT 4
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 30
61281: PUSH
61282: LD_INT 5
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: PPUSH
61294: CALL_OW 72
61298: PUSH
61299: LD_INT 6
61301: MUL
61302: PLUS
61303: ST_TO_ADDR
// if bcount < tmp then
61304: LD_VAR 0 13
61308: PUSH
61309: LD_VAR 0 4
61313: LESS
61314: IFFALSE 61360
// for i = tmp downto bcount do
61316: LD_ADDR_VAR 0 3
61320: PUSH
61321: DOUBLE
61322: LD_VAR 0 4
61326: INC
61327: ST_TO_ADDR
61328: LD_VAR 0 13
61332: PUSH
61333: FOR_DOWNTO
61334: IFFALSE 61358
// tmp := Delete ( tmp , tmp ) ;
61336: LD_ADDR_VAR 0 4
61340: PUSH
61341: LD_VAR 0 4
61345: PPUSH
61346: LD_VAR 0 4
61350: PPUSH
61351: CALL_OW 3
61355: ST_TO_ADDR
61356: GO 61333
61358: POP
61359: POP
// result := [ tmp , 0 , 0 , p ] ;
61360: LD_ADDR_VAR 0 2
61364: PUSH
61365: LD_VAR 0 4
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_VAR 0 11
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// exit ;
61387: GO 64077
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61389: LD_EXP 45
61393: PUSH
61394: LD_VAR 0 1
61398: ARRAY
61399: PPUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 30
61405: PUSH
61406: LD_INT 6
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 30
61415: PUSH
61416: LD_INT 7
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 30
61425: PUSH
61426: LD_INT 8
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: PPUSH
61439: CALL_OW 72
61443: NOT
61444: PUSH
61445: LD_EXP 45
61449: PUSH
61450: LD_VAR 0 1
61454: ARRAY
61455: PPUSH
61456: LD_INT 30
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PPUSH
61466: CALL_OW 72
61470: NOT
61471: AND
61472: IFFALSE 61544
// begin if eng = tmp then
61474: LD_VAR 0 6
61478: PUSH
61479: LD_VAR 0 4
61483: EQUAL
61484: IFFALSE 61488
// exit ;
61486: GO 64077
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61488: LD_ADDR_EXP 87
61492: PUSH
61493: LD_EXP 87
61497: PPUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: LD_INT 1
61505: PPUSH
61506: CALL_OW 1
61510: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61511: LD_ADDR_VAR 0 2
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_VAR 0 4
61523: PUSH
61524: LD_VAR 0 6
61528: DIFF
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// exit ;
61542: GO 64077
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61544: LD_EXP 72
61548: PUSH
61549: LD_EXP 71
61553: PUSH
61554: LD_VAR 0 1
61558: ARRAY
61559: ARRAY
61560: PUSH
61561: LD_EXP 45
61565: PUSH
61566: LD_VAR 0 1
61570: ARRAY
61571: PPUSH
61572: LD_INT 2
61574: PUSH
61575: LD_INT 30
61577: PUSH
61578: LD_INT 6
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 30
61587: PUSH
61588: LD_INT 7
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 30
61597: PUSH
61598: LD_INT 8
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: PPUSH
61611: CALL_OW 72
61615: AND
61616: PUSH
61617: LD_EXP 45
61621: PUSH
61622: LD_VAR 0 1
61626: ARRAY
61627: PPUSH
61628: LD_INT 30
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PPUSH
61638: CALL_OW 72
61642: NOT
61643: AND
61644: IFFALSE 61858
// begin if sci >= 6 then
61646: LD_VAR 0 8
61650: PUSH
61651: LD_INT 6
61653: GREATEREQUAL
61654: IFFALSE 61658
// exit ;
61656: GO 64077
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61658: LD_ADDR_EXP 87
61662: PUSH
61663: LD_EXP 87
61667: PPUSH
61668: LD_VAR 0 1
61672: PPUSH
61673: LD_INT 2
61675: PPUSH
61676: CALL_OW 1
61680: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61681: LD_ADDR_VAR 0 9
61685: PUSH
61686: LD_VAR 0 4
61690: PUSH
61691: LD_VAR 0 8
61695: DIFF
61696: PPUSH
61697: LD_INT 4
61699: PPUSH
61700: CALL 53843 0 2
61704: ST_TO_ADDR
// p := [ ] ;
61705: LD_ADDR_VAR 0 11
61709: PUSH
61710: EMPTY
61711: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61712: LD_VAR 0 8
61716: PUSH
61717: LD_INT 6
61719: LESS
61720: PUSH
61721: LD_VAR 0 9
61725: PUSH
61726: LD_INT 6
61728: GREATER
61729: AND
61730: IFFALSE 61811
// begin for i = 1 to 6 - sci do
61732: LD_ADDR_VAR 0 3
61736: PUSH
61737: DOUBLE
61738: LD_INT 1
61740: DEC
61741: ST_TO_ADDR
61742: LD_INT 6
61744: PUSH
61745: LD_VAR 0 8
61749: MINUS
61750: PUSH
61751: FOR_TO
61752: IFFALSE 61807
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61754: LD_ADDR_VAR 0 11
61758: PUSH
61759: LD_VAR 0 11
61763: PPUSH
61764: LD_VAR 0 11
61768: PUSH
61769: LD_INT 1
61771: PLUS
61772: PPUSH
61773: LD_VAR 0 9
61777: PUSH
61778: LD_INT 1
61780: ARRAY
61781: PPUSH
61782: CALL_OW 2
61786: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61787: LD_ADDR_VAR 0 9
61791: PUSH
61792: LD_VAR 0 9
61796: PPUSH
61797: LD_INT 1
61799: PPUSH
61800: CALL_OW 3
61804: ST_TO_ADDR
// end ;
61805: GO 61751
61807: POP
61808: POP
// end else
61809: GO 61831
// if sort then
61811: LD_VAR 0 9
61815: IFFALSE 61831
// p := sort [ 1 ] ;
61817: LD_ADDR_VAR 0 11
61821: PUSH
61822: LD_VAR 0 9
61826: PUSH
61827: LD_INT 1
61829: ARRAY
61830: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61831: LD_ADDR_VAR 0 2
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_VAR 0 11
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// exit ;
61856: GO 64077
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61858: LD_EXP 72
61862: PUSH
61863: LD_EXP 71
61867: PUSH
61868: LD_VAR 0 1
61872: ARRAY
61873: ARRAY
61874: PUSH
61875: LD_EXP 45
61879: PUSH
61880: LD_VAR 0 1
61884: ARRAY
61885: PPUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 30
61891: PUSH
61892: LD_INT 6
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 30
61901: PUSH
61902: LD_INT 7
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 30
61911: PUSH
61912: LD_INT 8
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: PPUSH
61925: CALL_OW 72
61929: AND
61930: PUSH
61931: LD_EXP 45
61935: PUSH
61936: LD_VAR 0 1
61940: ARRAY
61941: PPUSH
61942: LD_INT 30
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PPUSH
61952: CALL_OW 72
61956: AND
61957: IFFALSE 62691
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61959: LD_ADDR_EXP 87
61963: PUSH
61964: LD_EXP 87
61968: PPUSH
61969: LD_VAR 0 1
61973: PPUSH
61974: LD_INT 3
61976: PPUSH
61977: CALL_OW 1
61981: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61982: LD_ADDR_VAR 0 2
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// if not eng then
62005: LD_VAR 0 6
62009: NOT
62010: IFFALSE 62073
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
62012: LD_ADDR_VAR 0 11
62016: PUSH
62017: LD_VAR 0 4
62021: PPUSH
62022: LD_INT 2
62024: PPUSH
62025: CALL 53843 0 2
62029: PUSH
62030: LD_INT 1
62032: ARRAY
62033: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
62034: LD_ADDR_VAR 0 2
62038: PUSH
62039: LD_VAR 0 2
62043: PPUSH
62044: LD_INT 2
62046: PPUSH
62047: LD_VAR 0 11
62051: PPUSH
62052: CALL_OW 1
62056: ST_TO_ADDR
// tmp := tmp diff p ;
62057: LD_ADDR_VAR 0 4
62061: PUSH
62062: LD_VAR 0 4
62066: PUSH
62067: LD_VAR 0 11
62071: DIFF
62072: ST_TO_ADDR
// end ; if tmp and sci < 6 then
62073: LD_VAR 0 4
62077: PUSH
62078: LD_VAR 0 8
62082: PUSH
62083: LD_INT 6
62085: LESS
62086: AND
62087: IFFALSE 62275
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
62089: LD_ADDR_VAR 0 9
62093: PUSH
62094: LD_VAR 0 4
62098: PUSH
62099: LD_VAR 0 8
62103: PUSH
62104: LD_VAR 0 7
62108: UNION
62109: DIFF
62110: PPUSH
62111: LD_INT 4
62113: PPUSH
62114: CALL 53843 0 2
62118: ST_TO_ADDR
// p := [ ] ;
62119: LD_ADDR_VAR 0 11
62123: PUSH
62124: EMPTY
62125: ST_TO_ADDR
// if sort then
62126: LD_VAR 0 9
62130: IFFALSE 62246
// for i = 1 to 6 - sci do
62132: LD_ADDR_VAR 0 3
62136: PUSH
62137: DOUBLE
62138: LD_INT 1
62140: DEC
62141: ST_TO_ADDR
62142: LD_INT 6
62144: PUSH
62145: LD_VAR 0 8
62149: MINUS
62150: PUSH
62151: FOR_TO
62152: IFFALSE 62244
// begin if i = sort then
62154: LD_VAR 0 3
62158: PUSH
62159: LD_VAR 0 9
62163: EQUAL
62164: IFFALSE 62168
// break ;
62166: GO 62244
// if GetClass ( i ) = 4 then
62168: LD_VAR 0 3
62172: PPUSH
62173: CALL_OW 257
62177: PUSH
62178: LD_INT 4
62180: EQUAL
62181: IFFALSE 62185
// continue ;
62183: GO 62151
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62185: LD_ADDR_VAR 0 11
62189: PUSH
62190: LD_VAR 0 11
62194: PPUSH
62195: LD_VAR 0 11
62199: PUSH
62200: LD_INT 1
62202: PLUS
62203: PPUSH
62204: LD_VAR 0 9
62208: PUSH
62209: LD_VAR 0 3
62213: ARRAY
62214: PPUSH
62215: CALL_OW 2
62219: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62220: LD_ADDR_VAR 0 4
62224: PUSH
62225: LD_VAR 0 4
62229: PUSH
62230: LD_VAR 0 9
62234: PUSH
62235: LD_VAR 0 3
62239: ARRAY
62240: DIFF
62241: ST_TO_ADDR
// end ;
62242: GO 62151
62244: POP
62245: POP
// if p then
62246: LD_VAR 0 11
62250: IFFALSE 62275
// result := Replace ( result , 4 , p ) ;
62252: LD_ADDR_VAR 0 2
62256: PUSH
62257: LD_VAR 0 2
62261: PPUSH
62262: LD_INT 4
62264: PPUSH
62265: LD_VAR 0 11
62269: PPUSH
62270: CALL_OW 1
62274: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62275: LD_VAR 0 4
62279: PUSH
62280: LD_VAR 0 7
62284: PUSH
62285: LD_INT 6
62287: LESS
62288: AND
62289: IFFALSE 62477
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62291: LD_ADDR_VAR 0 9
62295: PUSH
62296: LD_VAR 0 4
62300: PUSH
62301: LD_VAR 0 8
62305: PUSH
62306: LD_VAR 0 7
62310: UNION
62311: DIFF
62312: PPUSH
62313: LD_INT 3
62315: PPUSH
62316: CALL 53843 0 2
62320: ST_TO_ADDR
// p := [ ] ;
62321: LD_ADDR_VAR 0 11
62325: PUSH
62326: EMPTY
62327: ST_TO_ADDR
// if sort then
62328: LD_VAR 0 9
62332: IFFALSE 62448
// for i = 1 to 6 - mech do
62334: LD_ADDR_VAR 0 3
62338: PUSH
62339: DOUBLE
62340: LD_INT 1
62342: DEC
62343: ST_TO_ADDR
62344: LD_INT 6
62346: PUSH
62347: LD_VAR 0 7
62351: MINUS
62352: PUSH
62353: FOR_TO
62354: IFFALSE 62446
// begin if i = sort then
62356: LD_VAR 0 3
62360: PUSH
62361: LD_VAR 0 9
62365: EQUAL
62366: IFFALSE 62370
// break ;
62368: GO 62446
// if GetClass ( i ) = 3 then
62370: LD_VAR 0 3
62374: PPUSH
62375: CALL_OW 257
62379: PUSH
62380: LD_INT 3
62382: EQUAL
62383: IFFALSE 62387
// continue ;
62385: GO 62353
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62387: LD_ADDR_VAR 0 11
62391: PUSH
62392: LD_VAR 0 11
62396: PPUSH
62397: LD_VAR 0 11
62401: PUSH
62402: LD_INT 1
62404: PLUS
62405: PPUSH
62406: LD_VAR 0 9
62410: PUSH
62411: LD_VAR 0 3
62415: ARRAY
62416: PPUSH
62417: CALL_OW 2
62421: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_VAR 0 4
62431: PUSH
62432: LD_VAR 0 9
62436: PUSH
62437: LD_VAR 0 3
62441: ARRAY
62442: DIFF
62443: ST_TO_ADDR
// end ;
62444: GO 62353
62446: POP
62447: POP
// if p then
62448: LD_VAR 0 11
62452: IFFALSE 62477
// result := Replace ( result , 3 , p ) ;
62454: LD_ADDR_VAR 0 2
62458: PUSH
62459: LD_VAR 0 2
62463: PPUSH
62464: LD_INT 3
62466: PPUSH
62467: LD_VAR 0 11
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62477: LD_VAR 0 4
62481: PUSH
62482: LD_INT 6
62484: GREATER
62485: PUSH
62486: LD_VAR 0 6
62490: PUSH
62491: LD_INT 6
62493: LESS
62494: AND
62495: IFFALSE 62689
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62497: LD_ADDR_VAR 0 9
62501: PUSH
62502: LD_VAR 0 4
62506: PUSH
62507: LD_VAR 0 8
62511: PUSH
62512: LD_VAR 0 7
62516: UNION
62517: PUSH
62518: LD_VAR 0 6
62522: UNION
62523: DIFF
62524: PPUSH
62525: LD_INT 2
62527: PPUSH
62528: CALL 53843 0 2
62532: ST_TO_ADDR
// p := [ ] ;
62533: LD_ADDR_VAR 0 11
62537: PUSH
62538: EMPTY
62539: ST_TO_ADDR
// if sort then
62540: LD_VAR 0 9
62544: IFFALSE 62660
// for i = 1 to 6 - eng do
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: DOUBLE
62552: LD_INT 1
62554: DEC
62555: ST_TO_ADDR
62556: LD_INT 6
62558: PUSH
62559: LD_VAR 0 6
62563: MINUS
62564: PUSH
62565: FOR_TO
62566: IFFALSE 62658
// begin if i = sort then
62568: LD_VAR 0 3
62572: PUSH
62573: LD_VAR 0 9
62577: EQUAL
62578: IFFALSE 62582
// break ;
62580: GO 62658
// if GetClass ( i ) = 2 then
62582: LD_VAR 0 3
62586: PPUSH
62587: CALL_OW 257
62591: PUSH
62592: LD_INT 2
62594: EQUAL
62595: IFFALSE 62599
// continue ;
62597: GO 62565
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62599: LD_ADDR_VAR 0 11
62603: PUSH
62604: LD_VAR 0 11
62608: PPUSH
62609: LD_VAR 0 11
62613: PUSH
62614: LD_INT 1
62616: PLUS
62617: PPUSH
62618: LD_VAR 0 9
62622: PUSH
62623: LD_VAR 0 3
62627: ARRAY
62628: PPUSH
62629: CALL_OW 2
62633: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62634: LD_ADDR_VAR 0 4
62638: PUSH
62639: LD_VAR 0 4
62643: PUSH
62644: LD_VAR 0 9
62648: PUSH
62649: LD_VAR 0 3
62653: ARRAY
62654: DIFF
62655: ST_TO_ADDR
// end ;
62656: GO 62565
62658: POP
62659: POP
// if p then
62660: LD_VAR 0 11
62664: IFFALSE 62689
// result := Replace ( result , 2 , p ) ;
62666: LD_ADDR_VAR 0 2
62670: PUSH
62671: LD_VAR 0 2
62675: PPUSH
62676: LD_INT 2
62678: PPUSH
62679: LD_VAR 0 11
62683: PPUSH
62684: CALL_OW 1
62688: ST_TO_ADDR
// end ; exit ;
62689: GO 64077
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62691: LD_EXP 72
62695: PUSH
62696: LD_EXP 71
62700: PUSH
62701: LD_VAR 0 1
62705: ARRAY
62706: ARRAY
62707: NOT
62708: PUSH
62709: LD_EXP 45
62713: PUSH
62714: LD_VAR 0 1
62718: ARRAY
62719: PPUSH
62720: LD_INT 30
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PPUSH
62730: CALL_OW 72
62734: AND
62735: PUSH
62736: LD_EXP 50
62740: PUSH
62741: LD_VAR 0 1
62745: ARRAY
62746: AND
62747: IFFALSE 63355
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62749: LD_ADDR_EXP 87
62753: PUSH
62754: LD_EXP 87
62758: PPUSH
62759: LD_VAR 0 1
62763: PPUSH
62764: LD_INT 5
62766: PPUSH
62767: CALL_OW 1
62771: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62772: LD_ADDR_VAR 0 2
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: ST_TO_ADDR
// if sci > 1 then
62795: LD_VAR 0 8
62799: PUSH
62800: LD_INT 1
62802: GREATER
62803: IFFALSE 62831
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62805: LD_ADDR_VAR 0 4
62809: PUSH
62810: LD_VAR 0 4
62814: PUSH
62815: LD_VAR 0 8
62819: PUSH
62820: LD_VAR 0 8
62824: PUSH
62825: LD_INT 1
62827: ARRAY
62828: DIFF
62829: DIFF
62830: ST_TO_ADDR
// if tmp and not sci then
62831: LD_VAR 0 4
62835: PUSH
62836: LD_VAR 0 8
62840: NOT
62841: AND
62842: IFFALSE 62911
// begin sort := SortBySkill ( tmp , 4 ) ;
62844: LD_ADDR_VAR 0 9
62848: PUSH
62849: LD_VAR 0 4
62853: PPUSH
62854: LD_INT 4
62856: PPUSH
62857: CALL 53843 0 2
62861: ST_TO_ADDR
// if sort then
62862: LD_VAR 0 9
62866: IFFALSE 62882
// p := sort [ 1 ] ;
62868: LD_ADDR_VAR 0 11
62872: PUSH
62873: LD_VAR 0 9
62877: PUSH
62878: LD_INT 1
62880: ARRAY
62881: ST_TO_ADDR
// if p then
62882: LD_VAR 0 11
62886: IFFALSE 62911
// result := Replace ( result , 4 , p ) ;
62888: LD_ADDR_VAR 0 2
62892: PUSH
62893: LD_VAR 0 2
62897: PPUSH
62898: LD_INT 4
62900: PPUSH
62901: LD_VAR 0 11
62905: PPUSH
62906: CALL_OW 1
62910: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62911: LD_ADDR_VAR 0 4
62915: PUSH
62916: LD_VAR 0 4
62920: PUSH
62921: LD_VAR 0 7
62925: DIFF
62926: ST_TO_ADDR
// if tmp and mech < 6 then
62927: LD_VAR 0 4
62931: PUSH
62932: LD_VAR 0 7
62936: PUSH
62937: LD_INT 6
62939: LESS
62940: AND
62941: IFFALSE 63129
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62943: LD_ADDR_VAR 0 9
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: LD_VAR 0 8
62957: PUSH
62958: LD_VAR 0 7
62962: UNION
62963: DIFF
62964: PPUSH
62965: LD_INT 3
62967: PPUSH
62968: CALL 53843 0 2
62972: ST_TO_ADDR
// p := [ ] ;
62973: LD_ADDR_VAR 0 11
62977: PUSH
62978: EMPTY
62979: ST_TO_ADDR
// if sort then
62980: LD_VAR 0 9
62984: IFFALSE 63100
// for i = 1 to 6 - mech do
62986: LD_ADDR_VAR 0 3
62990: PUSH
62991: DOUBLE
62992: LD_INT 1
62994: DEC
62995: ST_TO_ADDR
62996: LD_INT 6
62998: PUSH
62999: LD_VAR 0 7
63003: MINUS
63004: PUSH
63005: FOR_TO
63006: IFFALSE 63098
// begin if i = sort then
63008: LD_VAR 0 3
63012: PUSH
63013: LD_VAR 0 9
63017: EQUAL
63018: IFFALSE 63022
// break ;
63020: GO 63098
// if GetClass ( i ) = 3 then
63022: LD_VAR 0 3
63026: PPUSH
63027: CALL_OW 257
63031: PUSH
63032: LD_INT 3
63034: EQUAL
63035: IFFALSE 63039
// continue ;
63037: GO 63005
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63039: LD_ADDR_VAR 0 11
63043: PUSH
63044: LD_VAR 0 11
63048: PPUSH
63049: LD_VAR 0 11
63053: PUSH
63054: LD_INT 1
63056: PLUS
63057: PPUSH
63058: LD_VAR 0 9
63062: PUSH
63063: LD_VAR 0 3
63067: ARRAY
63068: PPUSH
63069: CALL_OW 2
63073: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63074: LD_ADDR_VAR 0 4
63078: PUSH
63079: LD_VAR 0 4
63083: PUSH
63084: LD_VAR 0 9
63088: PUSH
63089: LD_VAR 0 3
63093: ARRAY
63094: DIFF
63095: ST_TO_ADDR
// end ;
63096: GO 63005
63098: POP
63099: POP
// if p then
63100: LD_VAR 0 11
63104: IFFALSE 63129
// result := Replace ( result , 3 , p ) ;
63106: LD_ADDR_VAR 0 2
63110: PUSH
63111: LD_VAR 0 2
63115: PPUSH
63116: LD_INT 3
63118: PPUSH
63119: LD_VAR 0 11
63123: PPUSH
63124: CALL_OW 1
63128: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63129: LD_ADDR_VAR 0 4
63133: PUSH
63134: LD_VAR 0 4
63138: PUSH
63139: LD_VAR 0 6
63143: DIFF
63144: ST_TO_ADDR
// if tmp and eng < 6 then
63145: LD_VAR 0 4
63149: PUSH
63150: LD_VAR 0 6
63154: PUSH
63155: LD_INT 6
63157: LESS
63158: AND
63159: IFFALSE 63353
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63161: LD_ADDR_VAR 0 9
63165: PUSH
63166: LD_VAR 0 4
63170: PUSH
63171: LD_VAR 0 8
63175: PUSH
63176: LD_VAR 0 7
63180: UNION
63181: PUSH
63182: LD_VAR 0 6
63186: UNION
63187: DIFF
63188: PPUSH
63189: LD_INT 2
63191: PPUSH
63192: CALL 53843 0 2
63196: ST_TO_ADDR
// p := [ ] ;
63197: LD_ADDR_VAR 0 11
63201: PUSH
63202: EMPTY
63203: ST_TO_ADDR
// if sort then
63204: LD_VAR 0 9
63208: IFFALSE 63324
// for i = 1 to 6 - eng do
63210: LD_ADDR_VAR 0 3
63214: PUSH
63215: DOUBLE
63216: LD_INT 1
63218: DEC
63219: ST_TO_ADDR
63220: LD_INT 6
63222: PUSH
63223: LD_VAR 0 6
63227: MINUS
63228: PUSH
63229: FOR_TO
63230: IFFALSE 63322
// begin if i = sort then
63232: LD_VAR 0 3
63236: PUSH
63237: LD_VAR 0 9
63241: EQUAL
63242: IFFALSE 63246
// break ;
63244: GO 63322
// if GetClass ( i ) = 2 then
63246: LD_VAR 0 3
63250: PPUSH
63251: CALL_OW 257
63255: PUSH
63256: LD_INT 2
63258: EQUAL
63259: IFFALSE 63263
// continue ;
63261: GO 63229
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63263: LD_ADDR_VAR 0 11
63267: PUSH
63268: LD_VAR 0 11
63272: PPUSH
63273: LD_VAR 0 11
63277: PUSH
63278: LD_INT 1
63280: PLUS
63281: PPUSH
63282: LD_VAR 0 9
63286: PUSH
63287: LD_VAR 0 3
63291: ARRAY
63292: PPUSH
63293: CALL_OW 2
63297: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63298: LD_ADDR_VAR 0 4
63302: PUSH
63303: LD_VAR 0 4
63307: PUSH
63308: LD_VAR 0 9
63312: PUSH
63313: LD_VAR 0 3
63317: ARRAY
63318: DIFF
63319: ST_TO_ADDR
// end ;
63320: GO 63229
63322: POP
63323: POP
// if p then
63324: LD_VAR 0 11
63328: IFFALSE 63353
// result := Replace ( result , 2 , p ) ;
63330: LD_ADDR_VAR 0 2
63334: PUSH
63335: LD_VAR 0 2
63339: PPUSH
63340: LD_INT 2
63342: PPUSH
63343: LD_VAR 0 11
63347: PPUSH
63348: CALL_OW 1
63352: ST_TO_ADDR
// end ; exit ;
63353: GO 64077
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63355: LD_EXP 72
63359: PUSH
63360: LD_EXP 71
63364: PUSH
63365: LD_VAR 0 1
63369: ARRAY
63370: ARRAY
63371: NOT
63372: PUSH
63373: LD_EXP 45
63377: PUSH
63378: LD_VAR 0 1
63382: ARRAY
63383: PPUSH
63384: LD_INT 30
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PPUSH
63394: CALL_OW 72
63398: AND
63399: PUSH
63400: LD_EXP 50
63404: PUSH
63405: LD_VAR 0 1
63409: ARRAY
63410: NOT
63411: AND
63412: IFFALSE 64077
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63414: LD_ADDR_EXP 87
63418: PUSH
63419: LD_EXP 87
63423: PPUSH
63424: LD_VAR 0 1
63428: PPUSH
63429: LD_INT 6
63431: PPUSH
63432: CALL_OW 1
63436: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63437: LD_ADDR_VAR 0 2
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// if sci >= 1 then
63460: LD_VAR 0 8
63464: PUSH
63465: LD_INT 1
63467: GREATEREQUAL
63468: IFFALSE 63490
// tmp := tmp diff sci [ 1 ] ;
63470: LD_ADDR_VAR 0 4
63474: PUSH
63475: LD_VAR 0 4
63479: PUSH
63480: LD_VAR 0 8
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: DIFF
63489: ST_TO_ADDR
// if tmp and not sci then
63490: LD_VAR 0 4
63494: PUSH
63495: LD_VAR 0 8
63499: NOT
63500: AND
63501: IFFALSE 63570
// begin sort := SortBySkill ( tmp , 4 ) ;
63503: LD_ADDR_VAR 0 9
63507: PUSH
63508: LD_VAR 0 4
63512: PPUSH
63513: LD_INT 4
63515: PPUSH
63516: CALL 53843 0 2
63520: ST_TO_ADDR
// if sort then
63521: LD_VAR 0 9
63525: IFFALSE 63541
// p := sort [ 1 ] ;
63527: LD_ADDR_VAR 0 11
63531: PUSH
63532: LD_VAR 0 9
63536: PUSH
63537: LD_INT 1
63539: ARRAY
63540: ST_TO_ADDR
// if p then
63541: LD_VAR 0 11
63545: IFFALSE 63570
// result := Replace ( result , 4 , p ) ;
63547: LD_ADDR_VAR 0 2
63551: PUSH
63552: LD_VAR 0 2
63556: PPUSH
63557: LD_INT 4
63559: PPUSH
63560: LD_VAR 0 11
63564: PPUSH
63565: CALL_OW 1
63569: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63570: LD_ADDR_VAR 0 4
63574: PUSH
63575: LD_VAR 0 4
63579: PUSH
63580: LD_VAR 0 7
63584: DIFF
63585: ST_TO_ADDR
// if tmp and mech < 6 then
63586: LD_VAR 0 4
63590: PUSH
63591: LD_VAR 0 7
63595: PUSH
63596: LD_INT 6
63598: LESS
63599: AND
63600: IFFALSE 63782
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63602: LD_ADDR_VAR 0 9
63606: PUSH
63607: LD_VAR 0 4
63611: PUSH
63612: LD_VAR 0 7
63616: DIFF
63617: PPUSH
63618: LD_INT 3
63620: PPUSH
63621: CALL 53843 0 2
63625: ST_TO_ADDR
// p := [ ] ;
63626: LD_ADDR_VAR 0 11
63630: PUSH
63631: EMPTY
63632: ST_TO_ADDR
// if sort then
63633: LD_VAR 0 9
63637: IFFALSE 63753
// for i = 1 to 6 - mech do
63639: LD_ADDR_VAR 0 3
63643: PUSH
63644: DOUBLE
63645: LD_INT 1
63647: DEC
63648: ST_TO_ADDR
63649: LD_INT 6
63651: PUSH
63652: LD_VAR 0 7
63656: MINUS
63657: PUSH
63658: FOR_TO
63659: IFFALSE 63751
// begin if i = sort then
63661: LD_VAR 0 3
63665: PUSH
63666: LD_VAR 0 9
63670: EQUAL
63671: IFFALSE 63675
// break ;
63673: GO 63751
// if GetClass ( i ) = 3 then
63675: LD_VAR 0 3
63679: PPUSH
63680: CALL_OW 257
63684: PUSH
63685: LD_INT 3
63687: EQUAL
63688: IFFALSE 63692
// continue ;
63690: GO 63658
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63692: LD_ADDR_VAR 0 11
63696: PUSH
63697: LD_VAR 0 11
63701: PPUSH
63702: LD_VAR 0 11
63706: PUSH
63707: LD_INT 1
63709: PLUS
63710: PPUSH
63711: LD_VAR 0 9
63715: PUSH
63716: LD_VAR 0 3
63720: ARRAY
63721: PPUSH
63722: CALL_OW 2
63726: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63727: LD_ADDR_VAR 0 4
63731: PUSH
63732: LD_VAR 0 4
63736: PUSH
63737: LD_VAR 0 9
63741: PUSH
63742: LD_VAR 0 3
63746: ARRAY
63747: DIFF
63748: ST_TO_ADDR
// end ;
63749: GO 63658
63751: POP
63752: POP
// if p then
63753: LD_VAR 0 11
63757: IFFALSE 63782
// result := Replace ( result , 3 , p ) ;
63759: LD_ADDR_VAR 0 2
63763: PUSH
63764: LD_VAR 0 2
63768: PPUSH
63769: LD_INT 3
63771: PPUSH
63772: LD_VAR 0 11
63776: PPUSH
63777: CALL_OW 1
63781: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63782: LD_ADDR_VAR 0 4
63786: PUSH
63787: LD_VAR 0 4
63791: PUSH
63792: LD_VAR 0 6
63796: DIFF
63797: ST_TO_ADDR
// if tmp and eng < 4 then
63798: LD_VAR 0 4
63802: PUSH
63803: LD_VAR 0 6
63807: PUSH
63808: LD_INT 4
63810: LESS
63811: AND
63812: IFFALSE 64002
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63814: LD_ADDR_VAR 0 9
63818: PUSH
63819: LD_VAR 0 4
63823: PUSH
63824: LD_VAR 0 7
63828: PUSH
63829: LD_VAR 0 6
63833: UNION
63834: DIFF
63835: PPUSH
63836: LD_INT 2
63838: PPUSH
63839: CALL 53843 0 2
63843: ST_TO_ADDR
// p := [ ] ;
63844: LD_ADDR_VAR 0 11
63848: PUSH
63849: EMPTY
63850: ST_TO_ADDR
// if sort then
63851: LD_VAR 0 9
63855: IFFALSE 63971
// for i = 1 to 4 - eng do
63857: LD_ADDR_VAR 0 3
63861: PUSH
63862: DOUBLE
63863: LD_INT 1
63865: DEC
63866: ST_TO_ADDR
63867: LD_INT 4
63869: PUSH
63870: LD_VAR 0 6
63874: MINUS
63875: PUSH
63876: FOR_TO
63877: IFFALSE 63969
// begin if i = sort then
63879: LD_VAR 0 3
63883: PUSH
63884: LD_VAR 0 9
63888: EQUAL
63889: IFFALSE 63893
// break ;
63891: GO 63969
// if GetClass ( i ) = 2 then
63893: LD_VAR 0 3
63897: PPUSH
63898: CALL_OW 257
63902: PUSH
63903: LD_INT 2
63905: EQUAL
63906: IFFALSE 63910
// continue ;
63908: GO 63876
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63910: LD_ADDR_VAR 0 11
63914: PUSH
63915: LD_VAR 0 11
63919: PPUSH
63920: LD_VAR 0 11
63924: PUSH
63925: LD_INT 1
63927: PLUS
63928: PPUSH
63929: LD_VAR 0 9
63933: PUSH
63934: LD_VAR 0 3
63938: ARRAY
63939: PPUSH
63940: CALL_OW 2
63944: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63945: LD_ADDR_VAR 0 4
63949: PUSH
63950: LD_VAR 0 4
63954: PUSH
63955: LD_VAR 0 9
63959: PUSH
63960: LD_VAR 0 3
63964: ARRAY
63965: DIFF
63966: ST_TO_ADDR
// end ;
63967: GO 63876
63969: POP
63970: POP
// if p then
63971: LD_VAR 0 11
63975: IFFALSE 64000
// result := Replace ( result , 2 , p ) ;
63977: LD_ADDR_VAR 0 2
63981: PUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: LD_INT 2
63989: PPUSH
63990: LD_VAR 0 11
63994: PPUSH
63995: CALL_OW 1
63999: ST_TO_ADDR
// end else
64000: GO 64046
// for i = eng downto 5 do
64002: LD_ADDR_VAR 0 3
64006: PUSH
64007: DOUBLE
64008: LD_VAR 0 6
64012: INC
64013: ST_TO_ADDR
64014: LD_INT 5
64016: PUSH
64017: FOR_DOWNTO
64018: IFFALSE 64044
// tmp := tmp union eng [ i ] ;
64020: LD_ADDR_VAR 0 4
64024: PUSH
64025: LD_VAR 0 4
64029: PUSH
64030: LD_VAR 0 6
64034: PUSH
64035: LD_VAR 0 3
64039: ARRAY
64040: UNION
64041: ST_TO_ADDR
64042: GO 64017
64044: POP
64045: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
64046: LD_ADDR_VAR 0 2
64050: PUSH
64051: LD_VAR 0 2
64055: PPUSH
64056: LD_INT 1
64058: PPUSH
64059: LD_VAR 0 4
64063: PUSH
64064: LD_VAR 0 5
64068: DIFF
64069: PPUSH
64070: CALL_OW 1
64074: ST_TO_ADDR
// exit ;
64075: GO 64077
// end ; end ;
64077: LD_VAR 0 2
64081: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64082: LD_INT 0
64084: PPUSH
64085: PPUSH
64086: PPUSH
// if not mc_bases then
64087: LD_EXP 45
64091: NOT
64092: IFFALSE 64096
// exit ;
64094: GO 64202
// for i = 1 to mc_bases do
64096: LD_ADDR_VAR 0 2
64100: PUSH
64101: DOUBLE
64102: LD_INT 1
64104: DEC
64105: ST_TO_ADDR
64106: LD_EXP 45
64110: PUSH
64111: FOR_TO
64112: IFFALSE 64193
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_EXP 45
64123: PUSH
64124: LD_VAR 0 2
64128: ARRAY
64129: PPUSH
64130: LD_INT 21
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 24
64145: PUSH
64146: LD_INT 1000
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PPUSH
64161: CALL_OW 72
64165: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64166: LD_ADDR_EXP 46
64170: PUSH
64171: LD_EXP 46
64175: PPUSH
64176: LD_VAR 0 2
64180: PPUSH
64181: LD_VAR 0 3
64185: PPUSH
64186: CALL_OW 1
64190: ST_TO_ADDR
// end ;
64191: GO 64111
64193: POP
64194: POP
// RaiseSailEvent ( 101 ) ;
64195: LD_INT 101
64197: PPUSH
64198: CALL_OW 427
// end ;
64202: LD_VAR 0 1
64206: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
64211: PPUSH
64212: PPUSH
64213: PPUSH
64214: PPUSH
64215: PPUSH
// if not mc_bases then
64216: LD_EXP 45
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64787
// for i = 1 to mc_bases do
64225: LD_ADDR_VAR 0 2
64229: PUSH
64230: DOUBLE
64231: LD_INT 1
64233: DEC
64234: ST_TO_ADDR
64235: LD_EXP 45
64239: PUSH
64240: FOR_TO
64241: IFFALSE 64778
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64243: LD_ADDR_VAR 0 5
64247: PUSH
64248: LD_EXP 45
64252: PUSH
64253: LD_VAR 0 2
64257: ARRAY
64258: PUSH
64259: LD_EXP 74
64263: PUSH
64264: LD_VAR 0 2
64268: ARRAY
64269: UNION
64270: PPUSH
64271: LD_INT 21
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: LD_INT 54
64289: PUSH
64290: EMPTY
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: LD_INT 24
64302: PUSH
64303: LD_INT 800
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PPUSH
64323: CALL_OW 72
64327: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64328: LD_ADDR_VAR 0 6
64332: PUSH
64333: LD_EXP 45
64337: PUSH
64338: LD_VAR 0 2
64342: ARRAY
64343: PPUSH
64344: LD_INT 21
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: LD_INT 54
64362: PUSH
64363: EMPTY
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: LD_INT 24
64375: PUSH
64376: LD_INT 250
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PPUSH
64396: CALL_OW 72
64400: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64401: LD_ADDR_VAR 0 7
64405: PUSH
64406: LD_VAR 0 5
64410: PUSH
64411: LD_VAR 0 6
64415: DIFF
64416: ST_TO_ADDR
// if not need_heal_1 then
64417: LD_VAR 0 6
64421: NOT
64422: IFFALSE 64455
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64424: LD_ADDR_EXP 48
64428: PUSH
64429: LD_EXP 48
64433: PPUSH
64434: LD_VAR 0 2
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PPUSH
64446: EMPTY
64447: PPUSH
64448: CALL 24294 0 3
64452: ST_TO_ADDR
64453: GO 64525
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64455: LD_ADDR_EXP 48
64459: PUSH
64460: LD_EXP 48
64464: PPUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PPUSH
64477: LD_EXP 48
64481: PUSH
64482: LD_VAR 0 2
64486: ARRAY
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: PPUSH
64492: LD_INT 3
64494: PUSH
64495: LD_INT 24
64497: PUSH
64498: LD_INT 1000
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PPUSH
64509: CALL_OW 72
64513: PUSH
64514: LD_VAR 0 6
64518: UNION
64519: PPUSH
64520: CALL 24294 0 3
64524: ST_TO_ADDR
// if not need_heal_2 then
64525: LD_VAR 0 7
64529: NOT
64530: IFFALSE 64563
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64532: LD_ADDR_EXP 48
64536: PUSH
64537: LD_EXP 48
64541: PPUSH
64542: LD_VAR 0 2
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PPUSH
64554: EMPTY
64555: PPUSH
64556: CALL 24294 0 3
64560: ST_TO_ADDR
64561: GO 64595
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64563: LD_ADDR_EXP 48
64567: PUSH
64568: LD_EXP 48
64572: PPUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PPUSH
64585: LD_VAR 0 7
64589: PPUSH
64590: CALL 24294 0 3
64594: ST_TO_ADDR
// if need_heal_2 then
64595: LD_VAR 0 7
64599: IFFALSE 64760
// for j in need_heal_2 do
64601: LD_ADDR_VAR 0 3
64605: PUSH
64606: LD_VAR 0 7
64610: PUSH
64611: FOR_IN
64612: IFFALSE 64758
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64614: LD_ADDR_VAR 0 5
64618: PUSH
64619: LD_EXP 45
64623: PUSH
64624: LD_VAR 0 2
64628: ARRAY
64629: PPUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 30
64635: PUSH
64636: LD_INT 6
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 30
64645: PUSH
64646: LD_INT 7
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 30
64655: PUSH
64656: LD_INT 8
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 30
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 30
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: PPUSH
64691: CALL_OW 72
64695: ST_TO_ADDR
// if tmp then
64696: LD_VAR 0 5
64700: IFFALSE 64756
// begin k := NearestUnitToUnit ( tmp , j ) ;
64702: LD_ADDR_VAR 0 4
64706: PUSH
64707: LD_VAR 0 5
64711: PPUSH
64712: LD_VAR 0 3
64716: PPUSH
64717: CALL_OW 74
64721: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
64722: LD_VAR 0 3
64726: PPUSH
64727: LD_VAR 0 4
64731: PPUSH
64732: CALL_OW 296
64736: PUSH
64737: LD_INT 5
64739: GREATER
64740: IFFALSE 64756
// ComMoveUnit ( j , k ) ;
64742: LD_VAR 0 3
64746: PPUSH
64747: LD_VAR 0 4
64751: PPUSH
64752: CALL_OW 112
// end ; end ;
64756: GO 64611
64758: POP
64759: POP
// if not need_heal_1 and not need_heal_2 then
64760: LD_VAR 0 6
64764: NOT
64765: PUSH
64766: LD_VAR 0 7
64770: NOT
64771: AND
64772: IFFALSE 64776
// continue ;
64774: GO 64240
// end ;
64776: GO 64240
64778: POP
64779: POP
// RaiseSailEvent ( 102 ) ;
64780: LD_INT 102
64782: PPUSH
64783: CALL_OW 427
// end ;
64787: LD_VAR 0 1
64791: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64792: LD_INT 0
64794: PPUSH
64795: PPUSH
64796: PPUSH
64797: PPUSH
64798: PPUSH
64799: PPUSH
64800: PPUSH
64801: PPUSH
// if not mc_bases then
64802: LD_EXP 45
64806: NOT
64807: IFFALSE 64811
// exit ;
64809: GO 65646
// for i = 1 to mc_bases do
64811: LD_ADDR_VAR 0 2
64815: PUSH
64816: DOUBLE
64817: LD_INT 1
64819: DEC
64820: ST_TO_ADDR
64821: LD_EXP 45
64825: PUSH
64826: FOR_TO
64827: IFFALSE 65644
// begin if not mc_building_need_repair [ i ] then
64829: LD_EXP 46
64833: PUSH
64834: LD_VAR 0 2
64838: ARRAY
64839: NOT
64840: IFFALSE 65014
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64842: LD_ADDR_VAR 0 6
64846: PUSH
64847: LD_EXP 64
64851: PUSH
64852: LD_VAR 0 2
64856: ARRAY
64857: PPUSH
64858: LD_INT 3
64860: PUSH
64861: LD_INT 24
64863: PUSH
64864: LD_INT 1000
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 34
64880: PUSH
64881: LD_INT 13
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 34
64890: PUSH
64891: LD_INT 52
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PPUSH
64907: CALL_OW 72
64911: ST_TO_ADDR
// if cranes then
64912: LD_VAR 0 6
64916: IFFALSE 64978
// for j in cranes do
64918: LD_ADDR_VAR 0 3
64922: PUSH
64923: LD_VAR 0 6
64927: PUSH
64928: FOR_IN
64929: IFFALSE 64976
// if not IsInArea ( j , mc_parking [ i ] ) then
64931: LD_VAR 0 3
64935: PPUSH
64936: LD_EXP 69
64940: PUSH
64941: LD_VAR 0 2
64945: ARRAY
64946: PPUSH
64947: CALL_OW 308
64951: NOT
64952: IFFALSE 64974
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64954: LD_VAR 0 3
64958: PPUSH
64959: LD_EXP 69
64963: PUSH
64964: LD_VAR 0 2
64968: ARRAY
64969: PPUSH
64970: CALL_OW 113
64974: GO 64928
64976: POP
64977: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64978: LD_ADDR_EXP 47
64982: PUSH
64983: LD_EXP 47
64987: PPUSH
64988: LD_VAR 0 2
64992: PPUSH
64993: EMPTY
64994: PPUSH
64995: CALL_OW 1
64999: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
65000: LD_VAR 0 2
65004: PPUSH
65005: LD_INT 101
65007: PPUSH
65008: CALL 59915 0 2
// continue ;
65012: GO 64826
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
65014: LD_ADDR_EXP 51
65018: PUSH
65019: LD_EXP 51
65023: PPUSH
65024: LD_VAR 0 2
65028: PPUSH
65029: EMPTY
65030: PPUSH
65031: CALL_OW 1
65035: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65036: LD_VAR 0 2
65040: PPUSH
65041: LD_INT 103
65043: PPUSH
65044: CALL 59915 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
65048: LD_ADDR_VAR 0 5
65052: PUSH
65053: LD_EXP 45
65057: PUSH
65058: LD_VAR 0 2
65062: ARRAY
65063: PUSH
65064: LD_EXP 74
65068: PUSH
65069: LD_VAR 0 2
65073: ARRAY
65074: UNION
65075: PPUSH
65076: LD_INT 2
65078: PUSH
65079: LD_INT 25
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 25
65091: PUSH
65092: LD_INT 16
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: PPUSH
65107: CALL_OW 72
65111: PUSH
65112: LD_EXP 48
65116: PUSH
65117: LD_VAR 0 2
65121: ARRAY
65122: PUSH
65123: LD_INT 1
65125: ARRAY
65126: PUSH
65127: LD_EXP 48
65131: PUSH
65132: LD_VAR 0 2
65136: ARRAY
65137: PUSH
65138: LD_INT 2
65140: ARRAY
65141: UNION
65142: DIFF
65143: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
65144: LD_ADDR_VAR 0 6
65148: PUSH
65149: LD_EXP 64
65153: PUSH
65154: LD_VAR 0 2
65158: ARRAY
65159: PPUSH
65160: LD_INT 2
65162: PUSH
65163: LD_INT 34
65165: PUSH
65166: LD_INT 13
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 34
65175: PUSH
65176: LD_INT 52
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PPUSH
65188: CALL_OW 72
65192: ST_TO_ADDR
// if cranes then
65193: LD_VAR 0 6
65197: IFFALSE 65333
// begin for j in cranes do
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_VAR 0 6
65208: PUSH
65209: FOR_IN
65210: IFFALSE 65331
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
65212: LD_VAR 0 3
65216: PPUSH
65217: CALL_OW 256
65221: PUSH
65222: LD_INT 500
65224: GREATEREQUAL
65225: PUSH
65226: LD_VAR 0 3
65230: PPUSH
65231: CALL_OW 314
65235: NOT
65236: AND
65237: IFFALSE 65271
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65239: LD_VAR 0 3
65243: PPUSH
65244: LD_EXP 46
65248: PUSH
65249: LD_VAR 0 2
65253: ARRAY
65254: PPUSH
65255: LD_VAR 0 3
65259: PPUSH
65260: CALL_OW 74
65264: PPUSH
65265: CALL_OW 130
65269: GO 65329
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65271: LD_VAR 0 3
65275: PPUSH
65276: CALL_OW 256
65280: PUSH
65281: LD_INT 500
65283: LESS
65284: PUSH
65285: LD_VAR 0 3
65289: PPUSH
65290: LD_EXP 69
65294: PUSH
65295: LD_VAR 0 2
65299: ARRAY
65300: PPUSH
65301: CALL_OW 308
65305: NOT
65306: AND
65307: IFFALSE 65329
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65309: LD_VAR 0 3
65313: PPUSH
65314: LD_EXP 69
65318: PUSH
65319: LD_VAR 0 2
65323: ARRAY
65324: PPUSH
65325: CALL_OW 113
65329: GO 65209
65331: POP
65332: POP
// end ; if tmp > 3 then
65333: LD_VAR 0 5
65337: PUSH
65338: LD_INT 3
65340: GREATER
65341: IFFALSE 65361
// tmp := ShrinkArray ( tmp , 4 ) ;
65343: LD_ADDR_VAR 0 5
65347: PUSH
65348: LD_VAR 0 5
65352: PPUSH
65353: LD_INT 4
65355: PPUSH
65356: CALL 55533 0 2
65360: ST_TO_ADDR
// if not tmp then
65361: LD_VAR 0 5
65365: NOT
65366: IFFALSE 65370
// continue ;
65368: GO 64826
// for j in tmp do
65370: LD_ADDR_VAR 0 3
65374: PUSH
65375: LD_VAR 0 5
65379: PUSH
65380: FOR_IN
65381: IFFALSE 65640
// begin if IsInUnit ( j ) then
65383: LD_VAR 0 3
65387: PPUSH
65388: CALL_OW 310
65392: IFFALSE 65403
// ComExitBuilding ( j ) ;
65394: LD_VAR 0 3
65398: PPUSH
65399: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65403: LD_VAR 0 3
65407: PUSH
65408: LD_EXP 47
65412: PUSH
65413: LD_VAR 0 2
65417: ARRAY
65418: IN
65419: NOT
65420: IFFALSE 65478
// begin SetTag ( j , 101 ) ;
65422: LD_VAR 0 3
65426: PPUSH
65427: LD_INT 101
65429: PPUSH
65430: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65434: LD_ADDR_EXP 47
65438: PUSH
65439: LD_EXP 47
65443: PPUSH
65444: LD_VAR 0 2
65448: PUSH
65449: LD_EXP 47
65453: PUSH
65454: LD_VAR 0 2
65458: ARRAY
65459: PUSH
65460: LD_INT 1
65462: PLUS
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PPUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: CALL 24294 0 3
65477: ST_TO_ADDR
// end ; wait ( 1 ) ;
65478: LD_INT 1
65480: PPUSH
65481: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65485: LD_ADDR_VAR 0 7
65489: PUSH
65490: LD_EXP 46
65494: PUSH
65495: LD_VAR 0 2
65499: ARRAY
65500: ST_TO_ADDR
// if mc_scan [ i ] then
65501: LD_EXP 68
65505: PUSH
65506: LD_VAR 0 2
65510: ARRAY
65511: IFFALSE 65573
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
65513: LD_ADDR_VAR 0 7
65517: PUSH
65518: LD_EXP 46
65522: PUSH
65523: LD_VAR 0 2
65527: ARRAY
65528: PPUSH
65529: LD_INT 3
65531: PUSH
65532: LD_INT 30
65534: PUSH
65535: LD_INT 32
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 30
65544: PUSH
65545: LD_INT 33
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 30
65554: PUSH
65555: LD_INT 31
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: PPUSH
65568: CALL_OW 72
65572: ST_TO_ADDR
// if not to_repair_tmp then
65573: LD_VAR 0 7
65577: NOT
65578: IFFALSE 65582
// continue ;
65580: GO 65380
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65582: LD_ADDR_VAR 0 8
65586: PUSH
65587: LD_VAR 0 7
65591: PPUSH
65592: LD_VAR 0 3
65596: PPUSH
65597: CALL_OW 74
65601: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
65602: LD_VAR 0 8
65606: PPUSH
65607: LD_INT 16
65609: PPUSH
65610: CALL 26887 0 2
65614: PUSH
65615: LD_INT 4
65617: ARRAY
65618: PUSH
65619: LD_INT 5
65621: LESS
65622: IFFALSE 65638
// ComRepairBuilding ( j , to_repair ) ;
65624: LD_VAR 0 3
65628: PPUSH
65629: LD_VAR 0 8
65633: PPUSH
65634: CALL_OW 130
// end ;
65638: GO 65380
65640: POP
65641: POP
// end ;
65642: GO 64826
65644: POP
65645: POP
// end ;
65646: LD_VAR 0 1
65650: RET
// export function MC_Heal ; var i , j , tmp ; begin
65651: LD_INT 0
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
// if not mc_bases then
65657: LD_EXP 45
65661: NOT
65662: IFFALSE 65666
// exit ;
65664: GO 66068
// for i = 1 to mc_bases do
65666: LD_ADDR_VAR 0 2
65670: PUSH
65671: DOUBLE
65672: LD_INT 1
65674: DEC
65675: ST_TO_ADDR
65676: LD_EXP 45
65680: PUSH
65681: FOR_TO
65682: IFFALSE 66066
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65684: LD_EXP 48
65688: PUSH
65689: LD_VAR 0 2
65693: ARRAY
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: NOT
65699: PUSH
65700: LD_EXP 48
65704: PUSH
65705: LD_VAR 0 2
65709: ARRAY
65710: PUSH
65711: LD_INT 2
65713: ARRAY
65714: NOT
65715: AND
65716: IFFALSE 65754
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65718: LD_ADDR_EXP 49
65722: PUSH
65723: LD_EXP 49
65727: PPUSH
65728: LD_VAR 0 2
65732: PPUSH
65733: EMPTY
65734: PPUSH
65735: CALL_OW 1
65739: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65740: LD_VAR 0 2
65744: PPUSH
65745: LD_INT 102
65747: PPUSH
65748: CALL 59915 0 2
// continue ;
65752: GO 65681
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: LD_EXP 45
65763: PUSH
65764: LD_VAR 0 2
65768: ARRAY
65769: PPUSH
65770: LD_INT 25
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PPUSH
65780: CALL_OW 72
65784: ST_TO_ADDR
// if not tmp then
65785: LD_VAR 0 4
65789: NOT
65790: IFFALSE 65794
// continue ;
65792: GO 65681
// if mc_taming [ i ] then
65794: LD_EXP 76
65798: PUSH
65799: LD_VAR 0 2
65803: ARRAY
65804: IFFALSE 65828
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65806: LD_ADDR_EXP 76
65810: PUSH
65811: LD_EXP 76
65815: PPUSH
65816: LD_VAR 0 2
65820: PPUSH
65821: EMPTY
65822: PPUSH
65823: CALL_OW 1
65827: ST_TO_ADDR
// for j in tmp do
65828: LD_ADDR_VAR 0 3
65832: PUSH
65833: LD_VAR 0 4
65837: PUSH
65838: FOR_IN
65839: IFFALSE 66062
// begin if IsInUnit ( j ) then
65841: LD_VAR 0 3
65845: PPUSH
65846: CALL_OW 310
65850: IFFALSE 65861
// ComExitBuilding ( j ) ;
65852: LD_VAR 0 3
65856: PPUSH
65857: CALL_OW 122
// if not j in mc_healers [ i ] then
65861: LD_VAR 0 3
65865: PUSH
65866: LD_EXP 49
65870: PUSH
65871: LD_VAR 0 2
65875: ARRAY
65876: IN
65877: NOT
65878: IFFALSE 65924
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65880: LD_ADDR_EXP 49
65884: PUSH
65885: LD_EXP 49
65889: PPUSH
65890: LD_VAR 0 2
65894: PUSH
65895: LD_EXP 49
65899: PUSH
65900: LD_VAR 0 2
65904: ARRAY
65905: PUSH
65906: LD_INT 1
65908: PLUS
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PPUSH
65914: LD_VAR 0 3
65918: PPUSH
65919: CALL 24294 0 3
65923: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65924: LD_VAR 0 3
65928: PPUSH
65929: CALL_OW 110
65933: PUSH
65934: LD_INT 102
65936: NONEQUAL
65937: IFFALSE 65951
// SetTag ( j , 102 ) ;
65939: LD_VAR 0 3
65943: PPUSH
65944: LD_INT 102
65946: PPUSH
65947: CALL_OW 109
// Wait ( 3 ) ;
65951: LD_INT 3
65953: PPUSH
65954: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65958: LD_EXP 48
65962: PUSH
65963: LD_VAR 0 2
65967: ARRAY
65968: PUSH
65969: LD_INT 1
65971: ARRAY
65972: IFFALSE 66004
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65974: LD_VAR 0 3
65978: PPUSH
65979: LD_EXP 48
65983: PUSH
65984: LD_VAR 0 2
65988: ARRAY
65989: PUSH
65990: LD_INT 1
65992: ARRAY
65993: PUSH
65994: LD_INT 1
65996: ARRAY
65997: PPUSH
65998: CALL_OW 128
66002: GO 66060
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
66004: LD_VAR 0 3
66008: PPUSH
66009: CALL_OW 314
66013: NOT
66014: PUSH
66015: LD_EXP 48
66019: PUSH
66020: LD_VAR 0 2
66024: ARRAY
66025: PUSH
66026: LD_INT 2
66028: ARRAY
66029: AND
66030: IFFALSE 66060
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66032: LD_VAR 0 3
66036: PPUSH
66037: LD_EXP 48
66041: PUSH
66042: LD_VAR 0 2
66046: ARRAY
66047: PUSH
66048: LD_INT 2
66050: ARRAY
66051: PUSH
66052: LD_INT 1
66054: ARRAY
66055: PPUSH
66056: CALL_OW 128
// end ;
66060: GO 65838
66062: POP
66063: POP
// end ;
66064: GO 65681
66066: POP
66067: POP
// end ;
66068: LD_VAR 0 1
66072: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66073: LD_INT 0
66075: PPUSH
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
// if not mc_bases then
66080: LD_EXP 45
66084: NOT
66085: IFFALSE 66089
// exit ;
66087: GO 67232
// for i = 1 to mc_bases do
66089: LD_ADDR_VAR 0 2
66093: PUSH
66094: DOUBLE
66095: LD_INT 1
66097: DEC
66098: ST_TO_ADDR
66099: LD_EXP 45
66103: PUSH
66104: FOR_TO
66105: IFFALSE 67230
// begin if mc_scan [ i ] then
66107: LD_EXP 68
66111: PUSH
66112: LD_VAR 0 2
66116: ARRAY
66117: IFFALSE 66121
// continue ;
66119: GO 66104
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66121: LD_EXP 50
66125: PUSH
66126: LD_VAR 0 2
66130: ARRAY
66131: NOT
66132: PUSH
66133: LD_EXP 52
66137: PUSH
66138: LD_VAR 0 2
66142: ARRAY
66143: NOT
66144: AND
66145: PUSH
66146: LD_EXP 51
66150: PUSH
66151: LD_VAR 0 2
66155: ARRAY
66156: AND
66157: IFFALSE 66195
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66159: LD_ADDR_EXP 51
66163: PUSH
66164: LD_EXP 51
66168: PPUSH
66169: LD_VAR 0 2
66173: PPUSH
66174: EMPTY
66175: PPUSH
66176: CALL_OW 1
66180: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66181: LD_VAR 0 2
66185: PPUSH
66186: LD_INT 103
66188: PPUSH
66189: CALL 59915 0 2
// continue ;
66193: GO 66104
// end ; if mc_construct_list [ i ] then
66195: LD_EXP 52
66199: PUSH
66200: LD_VAR 0 2
66204: ARRAY
66205: IFFALSE 66425
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66207: LD_ADDR_VAR 0 4
66211: PUSH
66212: LD_EXP 45
66216: PUSH
66217: LD_VAR 0 2
66221: ARRAY
66222: PPUSH
66223: LD_INT 25
66225: PUSH
66226: LD_INT 2
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PPUSH
66233: CALL_OW 72
66237: PUSH
66238: LD_EXP 47
66242: PUSH
66243: LD_VAR 0 2
66247: ARRAY
66248: DIFF
66249: ST_TO_ADDR
// if not tmp then
66250: LD_VAR 0 4
66254: NOT
66255: IFFALSE 66259
// continue ;
66257: GO 66104
// for j in tmp do
66259: LD_ADDR_VAR 0 3
66263: PUSH
66264: LD_VAR 0 4
66268: PUSH
66269: FOR_IN
66270: IFFALSE 66421
// begin if not mc_builders [ i ] then
66272: LD_EXP 51
66276: PUSH
66277: LD_VAR 0 2
66281: ARRAY
66282: NOT
66283: IFFALSE 66341
// begin SetTag ( j , 103 ) ;
66285: LD_VAR 0 3
66289: PPUSH
66290: LD_INT 103
66292: PPUSH
66293: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66297: LD_ADDR_EXP 51
66301: PUSH
66302: LD_EXP 51
66306: PPUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_EXP 51
66316: PUSH
66317: LD_VAR 0 2
66321: ARRAY
66322: PUSH
66323: LD_INT 1
66325: PLUS
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PPUSH
66331: LD_VAR 0 3
66335: PPUSH
66336: CALL 24294 0 3
66340: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66341: LD_VAR 0 3
66345: PPUSH
66346: CALL_OW 310
66350: IFFALSE 66361
// ComExitBuilding ( j ) ;
66352: LD_VAR 0 3
66356: PPUSH
66357: CALL_OW 122
// wait ( 3 ) ;
66361: LD_INT 3
66363: PPUSH
66364: CALL_OW 67
// if not mc_construct_list [ i ] then
66368: LD_EXP 52
66372: PUSH
66373: LD_VAR 0 2
66377: ARRAY
66378: NOT
66379: IFFALSE 66383
// break ;
66381: GO 66421
// if not HasTask ( j ) then
66383: LD_VAR 0 3
66387: PPUSH
66388: CALL_OW 314
66392: NOT
66393: IFFALSE 66419
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66395: LD_VAR 0 3
66399: PPUSH
66400: LD_EXP 52
66404: PUSH
66405: LD_VAR 0 2
66409: ARRAY
66410: PUSH
66411: LD_INT 1
66413: ARRAY
66414: PPUSH
66415: CALL 27145 0 2
// end ;
66419: GO 66269
66421: POP
66422: POP
// end else
66423: GO 67228
// if mc_build_list [ i ] then
66425: LD_EXP 50
66429: PUSH
66430: LD_VAR 0 2
66434: ARRAY
66435: IFFALSE 67228
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66437: LD_ADDR_VAR 0 5
66441: PUSH
66442: LD_EXP 45
66446: PUSH
66447: LD_VAR 0 2
66451: ARRAY
66452: PPUSH
66453: LD_INT 2
66455: PUSH
66456: LD_INT 30
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 30
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: PPUSH
66481: CALL_OW 72
66485: ST_TO_ADDR
// if depot then
66486: LD_VAR 0 5
66490: IFFALSE 66508
// depot := depot [ 1 ] else
66492: LD_ADDR_VAR 0 5
66496: PUSH
66497: LD_VAR 0 5
66501: PUSH
66502: LD_INT 1
66504: ARRAY
66505: ST_TO_ADDR
66506: GO 66516
// depot := 0 ;
66508: LD_ADDR_VAR 0 5
66512: PUSH
66513: LD_INT 0
66515: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66516: LD_EXP 50
66520: PUSH
66521: LD_VAR 0 2
66525: ARRAY
66526: PUSH
66527: LD_INT 1
66529: ARRAY
66530: PUSH
66531: LD_INT 1
66533: ARRAY
66534: PPUSH
66535: CALL 26975 0 1
66539: PUSH
66540: LD_EXP 45
66544: PUSH
66545: LD_VAR 0 2
66549: ARRAY
66550: PPUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 30
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 30
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: PPUSH
66579: CALL_OW 72
66583: NOT
66584: AND
66585: IFFALSE 66690
// begin for j = 1 to mc_build_list [ i ] do
66587: LD_ADDR_VAR 0 3
66591: PUSH
66592: DOUBLE
66593: LD_INT 1
66595: DEC
66596: ST_TO_ADDR
66597: LD_EXP 50
66601: PUSH
66602: LD_VAR 0 2
66606: ARRAY
66607: PUSH
66608: FOR_TO
66609: IFFALSE 66688
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66611: LD_EXP 50
66615: PUSH
66616: LD_VAR 0 2
66620: ARRAY
66621: PUSH
66622: LD_VAR 0 3
66626: ARRAY
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PUSH
66632: LD_INT 2
66634: EQUAL
66635: IFFALSE 66686
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66637: LD_ADDR_EXP 50
66641: PUSH
66642: LD_EXP 50
66646: PPUSH
66647: LD_VAR 0 2
66651: PPUSH
66652: LD_EXP 50
66656: PUSH
66657: LD_VAR 0 2
66661: ARRAY
66662: PPUSH
66663: LD_VAR 0 3
66667: PPUSH
66668: LD_INT 1
66670: PPUSH
66671: LD_INT 0
66673: PPUSH
66674: CALL 23712 0 4
66678: PPUSH
66679: CALL_OW 1
66683: ST_TO_ADDR
// break ;
66684: GO 66688
// end ;
66686: GO 66608
66688: POP
66689: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66690: LD_EXP 50
66694: PUSH
66695: LD_VAR 0 2
66699: ARRAY
66700: PUSH
66701: LD_INT 1
66703: ARRAY
66704: PUSH
66705: LD_INT 1
66707: ARRAY
66708: PUSH
66709: LD_INT 0
66711: EQUAL
66712: PUSH
66713: LD_VAR 0 5
66717: PUSH
66718: LD_VAR 0 5
66722: PPUSH
66723: LD_EXP 50
66727: PUSH
66728: LD_VAR 0 2
66732: ARRAY
66733: PUSH
66734: LD_INT 1
66736: ARRAY
66737: PUSH
66738: LD_INT 1
66740: ARRAY
66741: PPUSH
66742: LD_EXP 50
66746: PUSH
66747: LD_VAR 0 2
66751: ARRAY
66752: PUSH
66753: LD_INT 1
66755: ARRAY
66756: PUSH
66757: LD_INT 2
66759: ARRAY
66760: PPUSH
66761: LD_EXP 50
66765: PUSH
66766: LD_VAR 0 2
66770: ARRAY
66771: PUSH
66772: LD_INT 1
66774: ARRAY
66775: PUSH
66776: LD_INT 3
66778: ARRAY
66779: PPUSH
66780: LD_EXP 50
66784: PUSH
66785: LD_VAR 0 2
66789: ARRAY
66790: PUSH
66791: LD_INT 1
66793: ARRAY
66794: PUSH
66795: LD_INT 4
66797: ARRAY
66798: PPUSH
66799: CALL 31709 0 5
66803: AND
66804: OR
66805: IFFALSE 67086
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66807: LD_ADDR_VAR 0 4
66811: PUSH
66812: LD_EXP 45
66816: PUSH
66817: LD_VAR 0 2
66821: ARRAY
66822: PPUSH
66823: LD_INT 25
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PPUSH
66833: CALL_OW 72
66837: PUSH
66838: LD_EXP 47
66842: PUSH
66843: LD_VAR 0 2
66847: ARRAY
66848: DIFF
66849: ST_TO_ADDR
// if not tmp then
66850: LD_VAR 0 4
66854: NOT
66855: IFFALSE 66859
// continue ;
66857: GO 66104
// for j in tmp do
66859: LD_ADDR_VAR 0 3
66863: PUSH
66864: LD_VAR 0 4
66868: PUSH
66869: FOR_IN
66870: IFFALSE 67082
// begin if not mc_builders [ i ] then
66872: LD_EXP 51
66876: PUSH
66877: LD_VAR 0 2
66881: ARRAY
66882: NOT
66883: IFFALSE 66941
// begin SetTag ( j , 103 ) ;
66885: LD_VAR 0 3
66889: PPUSH
66890: LD_INT 103
66892: PPUSH
66893: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66897: LD_ADDR_EXP 51
66901: PUSH
66902: LD_EXP 51
66906: PPUSH
66907: LD_VAR 0 2
66911: PUSH
66912: LD_EXP 51
66916: PUSH
66917: LD_VAR 0 2
66921: ARRAY
66922: PUSH
66923: LD_INT 1
66925: PLUS
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PPUSH
66931: LD_VAR 0 3
66935: PPUSH
66936: CALL 24294 0 3
66940: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66941: LD_VAR 0 3
66945: PPUSH
66946: CALL_OW 310
66950: IFFALSE 66961
// ComExitBuilding ( j ) ;
66952: LD_VAR 0 3
66956: PPUSH
66957: CALL_OW 122
// wait ( 3 ) ;
66961: LD_INT 3
66963: PPUSH
66964: CALL_OW 67
// if not mc_build_list [ i ] then
66968: LD_EXP 50
66972: PUSH
66973: LD_VAR 0 2
66977: ARRAY
66978: NOT
66979: IFFALSE 66983
// break ;
66981: GO 67082
// if not HasTask ( j ) then
66983: LD_VAR 0 3
66987: PPUSH
66988: CALL_OW 314
66992: NOT
66993: IFFALSE 67080
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66995: LD_VAR 0 3
66999: PPUSH
67000: LD_EXP 50
67004: PUSH
67005: LD_VAR 0 2
67009: ARRAY
67010: PUSH
67011: LD_INT 1
67013: ARRAY
67014: PUSH
67015: LD_INT 1
67017: ARRAY
67018: PPUSH
67019: LD_EXP 50
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PUSH
67034: LD_INT 2
67036: ARRAY
67037: PPUSH
67038: LD_EXP 50
67042: PUSH
67043: LD_VAR 0 2
67047: ARRAY
67048: PUSH
67049: LD_INT 1
67051: ARRAY
67052: PUSH
67053: LD_INT 3
67055: ARRAY
67056: PPUSH
67057: LD_EXP 50
67061: PUSH
67062: LD_VAR 0 2
67066: ARRAY
67067: PUSH
67068: LD_INT 1
67070: ARRAY
67071: PUSH
67072: LD_INT 4
67074: ARRAY
67075: PPUSH
67076: CALL_OW 145
// end ;
67080: GO 66869
67082: POP
67083: POP
// end else
67084: GO 67228
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67086: LD_EXP 45
67090: PUSH
67091: LD_VAR 0 2
67095: ARRAY
67096: PPUSH
67097: LD_EXP 50
67101: PUSH
67102: LD_VAR 0 2
67106: ARRAY
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: PUSH
67112: LD_INT 1
67114: ARRAY
67115: PPUSH
67116: LD_EXP 50
67120: PUSH
67121: LD_VAR 0 2
67125: ARRAY
67126: PUSH
67127: LD_INT 1
67129: ARRAY
67130: PUSH
67131: LD_INT 2
67133: ARRAY
67134: PPUSH
67135: LD_EXP 50
67139: PUSH
67140: LD_VAR 0 2
67144: ARRAY
67145: PUSH
67146: LD_INT 1
67148: ARRAY
67149: PUSH
67150: LD_INT 3
67152: ARRAY
67153: PPUSH
67154: LD_EXP 50
67158: PUSH
67159: LD_VAR 0 2
67163: ARRAY
67164: PUSH
67165: LD_INT 1
67167: ARRAY
67168: PUSH
67169: LD_INT 4
67171: ARRAY
67172: PPUSH
67173: CALL 31045 0 5
67177: NOT
67178: IFFALSE 67228
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67180: LD_ADDR_EXP 50
67184: PUSH
67185: LD_EXP 50
67189: PPUSH
67190: LD_VAR 0 2
67194: PPUSH
67195: LD_EXP 50
67199: PUSH
67200: LD_VAR 0 2
67204: ARRAY
67205: PPUSH
67206: LD_INT 1
67208: PPUSH
67209: LD_INT 1
67211: NEG
67212: PPUSH
67213: LD_INT 0
67215: PPUSH
67216: CALL 23712 0 4
67220: PPUSH
67221: CALL_OW 1
67225: ST_TO_ADDR
// continue ;
67226: GO 66104
// end ; end ; end ;
67228: GO 66104
67230: POP
67231: POP
// end ;
67232: LD_VAR 0 1
67236: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67237: LD_INT 0
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
67244: PPUSH
// if not mc_bases then
67245: LD_EXP 45
67249: NOT
67250: IFFALSE 67254
// exit ;
67252: GO 67681
// for i = 1 to mc_bases do
67254: LD_ADDR_VAR 0 2
67258: PUSH
67259: DOUBLE
67260: LD_INT 1
67262: DEC
67263: ST_TO_ADDR
67264: LD_EXP 45
67268: PUSH
67269: FOR_TO
67270: IFFALSE 67679
// begin tmp := mc_build_upgrade [ i ] ;
67272: LD_ADDR_VAR 0 4
67276: PUSH
67277: LD_EXP 77
67281: PUSH
67282: LD_VAR 0 2
67286: ARRAY
67287: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67288: LD_ADDR_VAR 0 6
67292: PUSH
67293: LD_EXP 78
67297: PUSH
67298: LD_VAR 0 2
67302: ARRAY
67303: PPUSH
67304: LD_INT 2
67306: PUSH
67307: LD_INT 30
67309: PUSH
67310: LD_INT 6
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 30
67319: PUSH
67320: LD_INT 7
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: PPUSH
67332: CALL_OW 72
67336: ST_TO_ADDR
// if not tmp and not lab then
67337: LD_VAR 0 4
67341: NOT
67342: PUSH
67343: LD_VAR 0 6
67347: NOT
67348: AND
67349: IFFALSE 67353
// continue ;
67351: GO 67269
// if tmp then
67353: LD_VAR 0 4
67357: IFFALSE 67477
// for j in tmp do
67359: LD_ADDR_VAR 0 3
67363: PUSH
67364: LD_VAR 0 4
67368: PUSH
67369: FOR_IN
67370: IFFALSE 67475
// begin if UpgradeCost ( j ) then
67372: LD_VAR 0 3
67376: PPUSH
67377: CALL 30705 0 1
67381: IFFALSE 67473
// begin ComUpgrade ( j ) ;
67383: LD_VAR 0 3
67387: PPUSH
67388: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67392: LD_ADDR_EXP 77
67396: PUSH
67397: LD_EXP 77
67401: PPUSH
67402: LD_VAR 0 2
67406: PPUSH
67407: LD_EXP 77
67411: PUSH
67412: LD_VAR 0 2
67416: ARRAY
67417: PUSH
67418: LD_VAR 0 3
67422: DIFF
67423: PPUSH
67424: CALL_OW 1
67428: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67429: LD_ADDR_EXP 52
67433: PUSH
67434: LD_EXP 52
67438: PPUSH
67439: LD_VAR 0 2
67443: PUSH
67444: LD_EXP 52
67448: PUSH
67449: LD_VAR 0 2
67453: ARRAY
67454: PUSH
67455: LD_INT 1
67457: PLUS
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PPUSH
67463: LD_VAR 0 3
67467: PPUSH
67468: CALL 24294 0 3
67472: ST_TO_ADDR
// end ; end ;
67473: GO 67369
67475: POP
67476: POP
// if not lab or not mc_lab_upgrade [ i ] then
67477: LD_VAR 0 6
67481: NOT
67482: PUSH
67483: LD_EXP 79
67487: PUSH
67488: LD_VAR 0 2
67492: ARRAY
67493: NOT
67494: OR
67495: IFFALSE 67499
// continue ;
67497: GO 67269
// for j in lab do
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_VAR 0 6
67508: PUSH
67509: FOR_IN
67510: IFFALSE 67675
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67512: LD_VAR 0 3
67516: PPUSH
67517: CALL_OW 266
67521: PUSH
67522: LD_INT 6
67524: PUSH
67525: LD_INT 7
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: IN
67532: PUSH
67533: LD_VAR 0 3
67537: PPUSH
67538: CALL_OW 461
67542: PUSH
67543: LD_INT 1
67545: NONEQUAL
67546: AND
67547: IFFALSE 67673
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67549: LD_VAR 0 3
67553: PPUSH
67554: LD_EXP 79
67558: PUSH
67559: LD_VAR 0 2
67563: ARRAY
67564: PUSH
67565: LD_INT 1
67567: ARRAY
67568: PPUSH
67569: CALL 30910 0 2
67573: IFFALSE 67673
// begin ComCancel ( j ) ;
67575: LD_VAR 0 3
67579: PPUSH
67580: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67584: LD_VAR 0 3
67588: PPUSH
67589: LD_EXP 79
67593: PUSH
67594: LD_VAR 0 2
67598: ARRAY
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: PPUSH
67604: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67608: LD_VAR 0 3
67612: PUSH
67613: LD_EXP 52
67617: PUSH
67618: LD_VAR 0 2
67622: ARRAY
67623: IN
67624: NOT
67625: IFFALSE 67671
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67627: LD_ADDR_EXP 52
67631: PUSH
67632: LD_EXP 52
67636: PPUSH
67637: LD_VAR 0 2
67641: PUSH
67642: LD_EXP 52
67646: PUSH
67647: LD_VAR 0 2
67651: ARRAY
67652: PUSH
67653: LD_INT 1
67655: PLUS
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PPUSH
67661: LD_VAR 0 3
67665: PPUSH
67666: CALL 24294 0 3
67670: ST_TO_ADDR
// break ;
67671: GO 67675
// end ; end ; end ;
67673: GO 67509
67675: POP
67676: POP
// end ;
67677: GO 67269
67679: POP
67680: POP
// end ;
67681: LD_VAR 0 1
67685: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67686: LD_INT 0
67688: PPUSH
67689: PPUSH
67690: PPUSH
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
67695: PPUSH
67696: PPUSH
// if not mc_bases then
67697: LD_EXP 45
67701: NOT
67702: IFFALSE 67706
// exit ;
67704: GO 68111
// for i = 1 to mc_bases do
67706: LD_ADDR_VAR 0 2
67710: PUSH
67711: DOUBLE
67712: LD_INT 1
67714: DEC
67715: ST_TO_ADDR
67716: LD_EXP 45
67720: PUSH
67721: FOR_TO
67722: IFFALSE 68109
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67724: LD_EXP 53
67728: PUSH
67729: LD_VAR 0 2
67733: ARRAY
67734: NOT
67735: PUSH
67736: LD_EXP 45
67740: PUSH
67741: LD_VAR 0 2
67745: ARRAY
67746: PPUSH
67747: LD_INT 30
67749: PUSH
67750: LD_INT 3
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PPUSH
67757: CALL_OW 72
67761: NOT
67762: OR
67763: IFFALSE 67767
// continue ;
67765: GO 67721
// busy := false ;
67767: LD_ADDR_VAR 0 8
67771: PUSH
67772: LD_INT 0
67774: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67775: LD_ADDR_VAR 0 4
67779: PUSH
67780: LD_EXP 45
67784: PUSH
67785: LD_VAR 0 2
67789: ARRAY
67790: PPUSH
67791: LD_INT 30
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PPUSH
67801: CALL_OW 72
67805: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67806: LD_ADDR_VAR 0 6
67810: PUSH
67811: LD_EXP 53
67815: PUSH
67816: LD_VAR 0 2
67820: ARRAY
67821: PPUSH
67822: LD_INT 2
67824: PUSH
67825: LD_INT 30
67827: PUSH
67828: LD_INT 32
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 30
67837: PUSH
67838: LD_INT 33
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: PPUSH
67850: CALL_OW 72
67854: ST_TO_ADDR
// if not t then
67855: LD_VAR 0 6
67859: NOT
67860: IFFALSE 67864
// continue ;
67862: GO 67721
// for j in tmp do
67864: LD_ADDR_VAR 0 3
67868: PUSH
67869: LD_VAR 0 4
67873: PUSH
67874: FOR_IN
67875: IFFALSE 67905
// if not BuildingStatus ( j ) = bs_idle then
67877: LD_VAR 0 3
67881: PPUSH
67882: CALL_OW 461
67886: PUSH
67887: LD_INT 2
67889: EQUAL
67890: NOT
67891: IFFALSE 67903
// begin busy := true ;
67893: LD_ADDR_VAR 0 8
67897: PUSH
67898: LD_INT 1
67900: ST_TO_ADDR
// break ;
67901: GO 67905
// end ;
67903: GO 67874
67905: POP
67906: POP
// if busy then
67907: LD_VAR 0 8
67911: IFFALSE 67915
// continue ;
67913: GO 67721
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67915: LD_ADDR_VAR 0 7
67919: PUSH
67920: LD_VAR 0 6
67924: PPUSH
67925: LD_INT 35
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PPUSH
67935: CALL_OW 72
67939: ST_TO_ADDR
// if tw then
67940: LD_VAR 0 7
67944: IFFALSE 68021
// begin tw := tw [ 1 ] ;
67946: LD_ADDR_VAR 0 7
67950: PUSH
67951: LD_VAR 0 7
67955: PUSH
67956: LD_INT 1
67958: ARRAY
67959: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67960: LD_ADDR_VAR 0 9
67964: PUSH
67965: LD_VAR 0 7
67969: PPUSH
67970: LD_EXP 70
67974: PUSH
67975: LD_VAR 0 2
67979: ARRAY
67980: PPUSH
67981: CALL 29264 0 2
67985: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67986: LD_EXP 84
67990: PUSH
67991: LD_VAR 0 2
67995: ARRAY
67996: IFFALSE 68019
// if not weapon in mc_allowed_tower_weapons [ i ] then
67998: LD_VAR 0 9
68002: PUSH
68003: LD_EXP 84
68007: PUSH
68008: LD_VAR 0 2
68012: ARRAY
68013: IN
68014: NOT
68015: IFFALSE 68019
// continue ;
68017: GO 67721
// end else
68019: GO 68084
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
68021: LD_ADDR_VAR 0 5
68025: PUSH
68026: LD_EXP 53
68030: PUSH
68031: LD_VAR 0 2
68035: ARRAY
68036: PPUSH
68037: LD_VAR 0 4
68041: PPUSH
68042: CALL 54766 0 2
68046: ST_TO_ADDR
// if not tmp2 then
68047: LD_VAR 0 5
68051: NOT
68052: IFFALSE 68056
// continue ;
68054: GO 67721
// tw := tmp2 [ 1 ] ;
68056: LD_ADDR_VAR 0 7
68060: PUSH
68061: LD_VAR 0 5
68065: PUSH
68066: LD_INT 1
68068: ARRAY
68069: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
68070: LD_ADDR_VAR 0 9
68074: PUSH
68075: LD_VAR 0 5
68079: PUSH
68080: LD_INT 2
68082: ARRAY
68083: ST_TO_ADDR
// end ; if not weapon then
68084: LD_VAR 0 9
68088: NOT
68089: IFFALSE 68093
// continue ;
68091: GO 67721
// ComPlaceWeapon ( tw , weapon ) ;
68093: LD_VAR 0 7
68097: PPUSH
68098: LD_VAR 0 9
68102: PPUSH
68103: CALL_OW 148
// end ;
68107: GO 67721
68109: POP
68110: POP
// end ;
68111: LD_VAR 0 1
68115: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
68116: LD_INT 0
68118: PPUSH
68119: PPUSH
68120: PPUSH
68121: PPUSH
68122: PPUSH
68123: PPUSH
// if not mc_bases then
68124: LD_EXP 45
68128: NOT
68129: IFFALSE 68133
// exit ;
68131: GO 68909
// for i = 1 to mc_bases do
68133: LD_ADDR_VAR 0 2
68137: PUSH
68138: DOUBLE
68139: LD_INT 1
68141: DEC
68142: ST_TO_ADDR
68143: LD_EXP 45
68147: PUSH
68148: FOR_TO
68149: IFFALSE 68907
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68151: LD_EXP 58
68155: PUSH
68156: LD_VAR 0 2
68160: ARRAY
68161: NOT
68162: PUSH
68163: LD_EXP 58
68167: PUSH
68168: LD_VAR 0 2
68172: ARRAY
68173: PUSH
68174: LD_EXP 59
68178: PUSH
68179: LD_VAR 0 2
68183: ARRAY
68184: EQUAL
68185: OR
68186: PUSH
68187: LD_EXP 68
68191: PUSH
68192: LD_VAR 0 2
68196: ARRAY
68197: OR
68198: IFFALSE 68202
// continue ;
68200: GO 68148
// if mc_miners [ i ] then
68202: LD_EXP 59
68206: PUSH
68207: LD_VAR 0 2
68211: ARRAY
68212: IFFALSE 68594
// begin for j = mc_miners [ i ] downto 1 do
68214: LD_ADDR_VAR 0 3
68218: PUSH
68219: DOUBLE
68220: LD_EXP 59
68224: PUSH
68225: LD_VAR 0 2
68229: ARRAY
68230: INC
68231: ST_TO_ADDR
68232: LD_INT 1
68234: PUSH
68235: FOR_DOWNTO
68236: IFFALSE 68592
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68238: LD_EXP 59
68242: PUSH
68243: LD_VAR 0 2
68247: ARRAY
68248: PUSH
68249: LD_VAR 0 3
68253: ARRAY
68254: PPUSH
68255: CALL_OW 301
68259: PUSH
68260: LD_EXP 59
68264: PUSH
68265: LD_VAR 0 2
68269: ARRAY
68270: PUSH
68271: LD_VAR 0 3
68275: ARRAY
68276: PPUSH
68277: CALL_OW 257
68281: PUSH
68282: LD_INT 1
68284: NONEQUAL
68285: OR
68286: IFFALSE 68349
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68288: LD_ADDR_VAR 0 5
68292: PUSH
68293: LD_EXP 59
68297: PUSH
68298: LD_VAR 0 2
68302: ARRAY
68303: PUSH
68304: LD_EXP 59
68308: PUSH
68309: LD_VAR 0 2
68313: ARRAY
68314: PUSH
68315: LD_VAR 0 3
68319: ARRAY
68320: DIFF
68321: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68322: LD_ADDR_EXP 59
68326: PUSH
68327: LD_EXP 59
68331: PPUSH
68332: LD_VAR 0 2
68336: PPUSH
68337: LD_VAR 0 5
68341: PPUSH
68342: CALL_OW 1
68346: ST_TO_ADDR
// continue ;
68347: GO 68235
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68349: LD_EXP 59
68353: PUSH
68354: LD_VAR 0 2
68358: ARRAY
68359: PUSH
68360: LD_VAR 0 3
68364: ARRAY
68365: PPUSH
68366: CALL_OW 257
68370: PUSH
68371: LD_INT 1
68373: EQUAL
68374: PUSH
68375: LD_EXP 59
68379: PUSH
68380: LD_VAR 0 2
68384: ARRAY
68385: PUSH
68386: LD_VAR 0 3
68390: ARRAY
68391: PPUSH
68392: CALL_OW 459
68396: NOT
68397: AND
68398: PUSH
68399: LD_EXP 59
68403: PUSH
68404: LD_VAR 0 2
68408: ARRAY
68409: PUSH
68410: LD_VAR 0 3
68414: ARRAY
68415: PPUSH
68416: CALL_OW 314
68420: NOT
68421: AND
68422: IFFALSE 68590
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68424: LD_EXP 59
68428: PUSH
68429: LD_VAR 0 2
68433: ARRAY
68434: PUSH
68435: LD_VAR 0 3
68439: ARRAY
68440: PPUSH
68441: CALL_OW 310
68445: IFFALSE 68468
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68447: LD_EXP 59
68451: PUSH
68452: LD_VAR 0 2
68456: ARRAY
68457: PUSH
68458: LD_VAR 0 3
68462: ARRAY
68463: PPUSH
68464: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68468: LD_EXP 59
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PUSH
68479: LD_VAR 0 3
68483: ARRAY
68484: PPUSH
68485: CALL_OW 314
68489: NOT
68490: IFFALSE 68590
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68492: LD_EXP 59
68496: PUSH
68497: LD_VAR 0 2
68501: ARRAY
68502: PUSH
68503: LD_VAR 0 3
68507: ARRAY
68508: PPUSH
68509: LD_EXP 58
68513: PUSH
68514: LD_VAR 0 2
68518: ARRAY
68519: PUSH
68520: LD_VAR 0 3
68524: PUSH
68525: LD_EXP 58
68529: PUSH
68530: LD_VAR 0 2
68534: ARRAY
68535: MOD
68536: PUSH
68537: LD_INT 1
68539: PLUS
68540: ARRAY
68541: PUSH
68542: LD_INT 1
68544: ARRAY
68545: PPUSH
68546: LD_EXP 58
68550: PUSH
68551: LD_VAR 0 2
68555: ARRAY
68556: PUSH
68557: LD_VAR 0 3
68561: PUSH
68562: LD_EXP 58
68566: PUSH
68567: LD_VAR 0 2
68571: ARRAY
68572: MOD
68573: PUSH
68574: LD_INT 1
68576: PLUS
68577: ARRAY
68578: PUSH
68579: LD_INT 2
68581: ARRAY
68582: PPUSH
68583: LD_INT 0
68585: PPUSH
68586: CALL_OW 193
// end ; end ;
68590: GO 68235
68592: POP
68593: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68594: LD_ADDR_VAR 0 5
68598: PUSH
68599: LD_EXP 45
68603: PUSH
68604: LD_VAR 0 2
68608: ARRAY
68609: PPUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 30
68615: PUSH
68616: LD_INT 4
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 30
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 30
68635: PUSH
68636: LD_INT 32
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: PPUSH
68649: CALL_OW 72
68653: ST_TO_ADDR
// if not tmp then
68654: LD_VAR 0 5
68658: NOT
68659: IFFALSE 68663
// continue ;
68661: GO 68148
// list := [ ] ;
68663: LD_ADDR_VAR 0 6
68667: PUSH
68668: EMPTY
68669: ST_TO_ADDR
// for j in tmp do
68670: LD_ADDR_VAR 0 3
68674: PUSH
68675: LD_VAR 0 5
68679: PUSH
68680: FOR_IN
68681: IFFALSE 68750
// begin for k in UnitsInside ( j ) do
68683: LD_ADDR_VAR 0 4
68687: PUSH
68688: LD_VAR 0 3
68692: PPUSH
68693: CALL_OW 313
68697: PUSH
68698: FOR_IN
68699: IFFALSE 68746
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68701: LD_VAR 0 4
68705: PPUSH
68706: CALL_OW 257
68710: PUSH
68711: LD_INT 1
68713: EQUAL
68714: PUSH
68715: LD_VAR 0 4
68719: PPUSH
68720: CALL_OW 459
68724: NOT
68725: AND
68726: IFFALSE 68744
// list := list ^ k ;
68728: LD_ADDR_VAR 0 6
68732: PUSH
68733: LD_VAR 0 6
68737: PUSH
68738: LD_VAR 0 4
68742: ADD
68743: ST_TO_ADDR
68744: GO 68698
68746: POP
68747: POP
// end ;
68748: GO 68680
68750: POP
68751: POP
// list := list diff mc_miners [ i ] ;
68752: LD_ADDR_VAR 0 6
68756: PUSH
68757: LD_VAR 0 6
68761: PUSH
68762: LD_EXP 59
68766: PUSH
68767: LD_VAR 0 2
68771: ARRAY
68772: DIFF
68773: ST_TO_ADDR
// if not list then
68774: LD_VAR 0 6
68778: NOT
68779: IFFALSE 68783
// continue ;
68781: GO 68148
// k := mc_mines [ i ] - mc_miners [ i ] ;
68783: LD_ADDR_VAR 0 4
68787: PUSH
68788: LD_EXP 58
68792: PUSH
68793: LD_VAR 0 2
68797: ARRAY
68798: PUSH
68799: LD_EXP 59
68803: PUSH
68804: LD_VAR 0 2
68808: ARRAY
68809: MINUS
68810: ST_TO_ADDR
// if k > list then
68811: LD_VAR 0 4
68815: PUSH
68816: LD_VAR 0 6
68820: GREATER
68821: IFFALSE 68833
// k := list ;
68823: LD_ADDR_VAR 0 4
68827: PUSH
68828: LD_VAR 0 6
68832: ST_TO_ADDR
// for j = 1 to k do
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: DOUBLE
68839: LD_INT 1
68841: DEC
68842: ST_TO_ADDR
68843: LD_VAR 0 4
68847: PUSH
68848: FOR_TO
68849: IFFALSE 68903
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68851: LD_ADDR_EXP 59
68855: PUSH
68856: LD_EXP 59
68860: PPUSH
68861: LD_VAR 0 2
68865: PUSH
68866: LD_EXP 59
68870: PUSH
68871: LD_VAR 0 2
68875: ARRAY
68876: PUSH
68877: LD_INT 1
68879: PLUS
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PPUSH
68885: LD_VAR 0 6
68889: PUSH
68890: LD_VAR 0 3
68894: ARRAY
68895: PPUSH
68896: CALL 24294 0 3
68900: ST_TO_ADDR
68901: GO 68848
68903: POP
68904: POP
// end ;
68905: GO 68148
68907: POP
68908: POP
// end ;
68909: LD_VAR 0 1
68913: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68914: LD_INT 0
68916: PPUSH
68917: PPUSH
68918: PPUSH
68919: PPUSH
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
68925: PPUSH
// if not mc_bases then
68926: LD_EXP 45
68930: NOT
68931: IFFALSE 68935
// exit ;
68933: GO 70685
// for i = 1 to mc_bases do
68935: LD_ADDR_VAR 0 2
68939: PUSH
68940: DOUBLE
68941: LD_INT 1
68943: DEC
68944: ST_TO_ADDR
68945: LD_EXP 45
68949: PUSH
68950: FOR_TO
68951: IFFALSE 70683
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68953: LD_EXP 45
68957: PUSH
68958: LD_VAR 0 2
68962: ARRAY
68963: NOT
68964: PUSH
68965: LD_EXP 52
68969: PUSH
68970: LD_VAR 0 2
68974: ARRAY
68975: OR
68976: IFFALSE 68980
// continue ;
68978: GO 68950
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68980: LD_EXP 61
68984: PUSH
68985: LD_VAR 0 2
68989: ARRAY
68990: NOT
68991: PUSH
68992: LD_EXP 62
68996: PUSH
68997: LD_VAR 0 2
69001: ARRAY
69002: AND
69003: IFFALSE 69041
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
69005: LD_ADDR_EXP 62
69009: PUSH
69010: LD_EXP 62
69014: PPUSH
69015: LD_VAR 0 2
69019: PPUSH
69020: EMPTY
69021: PPUSH
69022: CALL_OW 1
69026: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69027: LD_VAR 0 2
69031: PPUSH
69032: LD_INT 107
69034: PPUSH
69035: CALL 59915 0 2
// continue ;
69039: GO 68950
// end ; target := [ ] ;
69041: LD_ADDR_VAR 0 6
69045: PUSH
69046: EMPTY
69047: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: DOUBLE
69054: LD_EXP 61
69058: PUSH
69059: LD_VAR 0 2
69063: ARRAY
69064: INC
69065: ST_TO_ADDR
69066: LD_INT 1
69068: PUSH
69069: FOR_DOWNTO
69070: IFFALSE 69330
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69072: LD_EXP 61
69076: PUSH
69077: LD_VAR 0 2
69081: ARRAY
69082: PUSH
69083: LD_VAR 0 3
69087: ARRAY
69088: PUSH
69089: LD_INT 2
69091: ARRAY
69092: PPUSH
69093: LD_EXP 61
69097: PUSH
69098: LD_VAR 0 2
69102: ARRAY
69103: PUSH
69104: LD_VAR 0 3
69108: ARRAY
69109: PUSH
69110: LD_INT 3
69112: ARRAY
69113: PPUSH
69114: CALL_OW 488
69118: PUSH
69119: LD_EXP 61
69123: PUSH
69124: LD_VAR 0 2
69128: ARRAY
69129: PUSH
69130: LD_VAR 0 3
69134: ARRAY
69135: PUSH
69136: LD_INT 2
69138: ARRAY
69139: PPUSH
69140: LD_EXP 61
69144: PUSH
69145: LD_VAR 0 2
69149: ARRAY
69150: PUSH
69151: LD_VAR 0 3
69155: ARRAY
69156: PUSH
69157: LD_INT 3
69159: ARRAY
69160: PPUSH
69161: CALL_OW 284
69165: PUSH
69166: LD_INT 0
69168: EQUAL
69169: AND
69170: IFFALSE 69225
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69172: LD_ADDR_VAR 0 5
69176: PUSH
69177: LD_EXP 61
69181: PUSH
69182: LD_VAR 0 2
69186: ARRAY
69187: PPUSH
69188: LD_VAR 0 3
69192: PPUSH
69193: CALL_OW 3
69197: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69198: LD_ADDR_EXP 61
69202: PUSH
69203: LD_EXP 61
69207: PPUSH
69208: LD_VAR 0 2
69212: PPUSH
69213: LD_VAR 0 5
69217: PPUSH
69218: CALL_OW 1
69222: ST_TO_ADDR
// continue ;
69223: GO 69069
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69225: LD_EXP 45
69229: PUSH
69230: LD_VAR 0 2
69234: ARRAY
69235: PUSH
69236: LD_INT 1
69238: ARRAY
69239: PPUSH
69240: CALL_OW 255
69244: PPUSH
69245: LD_EXP 61
69249: PUSH
69250: LD_VAR 0 2
69254: ARRAY
69255: PUSH
69256: LD_VAR 0 3
69260: ARRAY
69261: PUSH
69262: LD_INT 2
69264: ARRAY
69265: PPUSH
69266: LD_EXP 61
69270: PUSH
69271: LD_VAR 0 2
69275: ARRAY
69276: PUSH
69277: LD_VAR 0 3
69281: ARRAY
69282: PUSH
69283: LD_INT 3
69285: ARRAY
69286: PPUSH
69287: LD_INT 30
69289: PPUSH
69290: CALL 25190 0 4
69294: PUSH
69295: LD_INT 4
69297: ARRAY
69298: PUSH
69299: LD_INT 0
69301: EQUAL
69302: IFFALSE 69328
// begin target := mc_crates [ i ] [ j ] ;
69304: LD_ADDR_VAR 0 6
69308: PUSH
69309: LD_EXP 61
69313: PUSH
69314: LD_VAR 0 2
69318: ARRAY
69319: PUSH
69320: LD_VAR 0 3
69324: ARRAY
69325: ST_TO_ADDR
// break ;
69326: GO 69330
// end ; end ;
69328: GO 69069
69330: POP
69331: POP
// if not target then
69332: LD_VAR 0 6
69336: NOT
69337: IFFALSE 69341
// continue ;
69339: GO 68950
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69341: LD_ADDR_VAR 0 7
69345: PUSH
69346: LD_EXP 64
69350: PUSH
69351: LD_VAR 0 2
69355: ARRAY
69356: PPUSH
69357: LD_INT 2
69359: PUSH
69360: LD_INT 3
69362: PUSH
69363: LD_INT 58
69365: PUSH
69366: EMPTY
69367: LIST
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 61
69375: PUSH
69376: EMPTY
69377: LIST
69378: PUSH
69379: LD_INT 33
69381: PUSH
69382: LD_INT 5
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 33
69391: PUSH
69392: LD_INT 3
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 34
69411: PUSH
69412: LD_INT 32
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 34
69421: PUSH
69422: LD_INT 51
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 34
69431: PUSH
69432: LD_INT 12
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PPUSH
69449: CALL_OW 72
69453: ST_TO_ADDR
// if not cargo then
69454: LD_VAR 0 7
69458: NOT
69459: IFFALSE 70102
// begin if mc_crates_collector [ i ] < 5 then
69461: LD_EXP 62
69465: PUSH
69466: LD_VAR 0 2
69470: ARRAY
69471: PUSH
69472: LD_INT 5
69474: LESS
69475: IFFALSE 69841
// begin if mc_ape [ i ] then
69477: LD_EXP 74
69481: PUSH
69482: LD_VAR 0 2
69486: ARRAY
69487: IFFALSE 69534
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69489: LD_ADDR_VAR 0 5
69493: PUSH
69494: LD_EXP 74
69498: PUSH
69499: LD_VAR 0 2
69503: ARRAY
69504: PPUSH
69505: LD_INT 25
69507: PUSH
69508: LD_INT 16
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 24
69517: PUSH
69518: LD_INT 750
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PPUSH
69529: CALL_OW 72
69533: ST_TO_ADDR
// if not tmp then
69534: LD_VAR 0 5
69538: NOT
69539: IFFALSE 69586
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69541: LD_ADDR_VAR 0 5
69545: PUSH
69546: LD_EXP 45
69550: PUSH
69551: LD_VAR 0 2
69555: ARRAY
69556: PPUSH
69557: LD_INT 25
69559: PUSH
69560: LD_INT 2
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 24
69569: PUSH
69570: LD_INT 750
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PPUSH
69581: CALL_OW 72
69585: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69586: LD_EXP 74
69590: PUSH
69591: LD_VAR 0 2
69595: ARRAY
69596: PUSH
69597: LD_EXP 45
69601: PUSH
69602: LD_VAR 0 2
69606: ARRAY
69607: PPUSH
69608: LD_INT 25
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 24
69620: PUSH
69621: LD_INT 750
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PPUSH
69632: CALL_OW 72
69636: AND
69637: PUSH
69638: LD_VAR 0 5
69642: PUSH
69643: LD_INT 5
69645: LESS
69646: AND
69647: IFFALSE 69729
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69649: LD_ADDR_VAR 0 3
69653: PUSH
69654: LD_EXP 45
69658: PUSH
69659: LD_VAR 0 2
69663: ARRAY
69664: PPUSH
69665: LD_INT 25
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 24
69677: PUSH
69678: LD_INT 750
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PPUSH
69689: CALL_OW 72
69693: PUSH
69694: FOR_IN
69695: IFFALSE 69727
// begin tmp := tmp union j ;
69697: LD_ADDR_VAR 0 5
69701: PUSH
69702: LD_VAR 0 5
69706: PUSH
69707: LD_VAR 0 3
69711: UNION
69712: ST_TO_ADDR
// if tmp >= 5 then
69713: LD_VAR 0 5
69717: PUSH
69718: LD_INT 5
69720: GREATEREQUAL
69721: IFFALSE 69725
// break ;
69723: GO 69727
// end ;
69725: GO 69694
69727: POP
69728: POP
// end ; if not tmp then
69729: LD_VAR 0 5
69733: NOT
69734: IFFALSE 69738
// continue ;
69736: GO 68950
// for j in tmp do
69738: LD_ADDR_VAR 0 3
69742: PUSH
69743: LD_VAR 0 5
69747: PUSH
69748: FOR_IN
69749: IFFALSE 69839
// if not GetTag ( j ) then
69751: LD_VAR 0 3
69755: PPUSH
69756: CALL_OW 110
69760: NOT
69761: IFFALSE 69837
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69763: LD_ADDR_EXP 62
69767: PUSH
69768: LD_EXP 62
69772: PPUSH
69773: LD_VAR 0 2
69777: PUSH
69778: LD_EXP 62
69782: PUSH
69783: LD_VAR 0 2
69787: ARRAY
69788: PUSH
69789: LD_INT 1
69791: PLUS
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PPUSH
69797: LD_VAR 0 3
69801: PPUSH
69802: CALL 24294 0 3
69806: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69807: LD_VAR 0 3
69811: PPUSH
69812: LD_INT 107
69814: PPUSH
69815: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69819: LD_EXP 62
69823: PUSH
69824: LD_VAR 0 2
69828: ARRAY
69829: PUSH
69830: LD_INT 5
69832: GREATEREQUAL
69833: IFFALSE 69837
// break ;
69835: GO 69839
// end ;
69837: GO 69748
69839: POP
69840: POP
// end ; if mc_crates_collector [ i ] and target then
69841: LD_EXP 62
69845: PUSH
69846: LD_VAR 0 2
69850: ARRAY
69851: PUSH
69852: LD_VAR 0 6
69856: AND
69857: IFFALSE 70100
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69859: LD_EXP 62
69863: PUSH
69864: LD_VAR 0 2
69868: ARRAY
69869: PUSH
69870: LD_VAR 0 6
69874: PUSH
69875: LD_INT 1
69877: ARRAY
69878: LESS
69879: IFFALSE 69899
// tmp := mc_crates_collector [ i ] else
69881: LD_ADDR_VAR 0 5
69885: PUSH
69886: LD_EXP 62
69890: PUSH
69891: LD_VAR 0 2
69895: ARRAY
69896: ST_TO_ADDR
69897: GO 69913
// tmp := target [ 1 ] ;
69899: LD_ADDR_VAR 0 5
69903: PUSH
69904: LD_VAR 0 6
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: ST_TO_ADDR
// k := 0 ;
69913: LD_ADDR_VAR 0 4
69917: PUSH
69918: LD_INT 0
69920: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69921: LD_ADDR_VAR 0 3
69925: PUSH
69926: LD_EXP 62
69930: PUSH
69931: LD_VAR 0 2
69935: ARRAY
69936: PUSH
69937: FOR_IN
69938: IFFALSE 70098
// begin k := k + 1 ;
69940: LD_ADDR_VAR 0 4
69944: PUSH
69945: LD_VAR 0 4
69949: PUSH
69950: LD_INT 1
69952: PLUS
69953: ST_TO_ADDR
// if k > tmp then
69954: LD_VAR 0 4
69958: PUSH
69959: LD_VAR 0 5
69963: GREATER
69964: IFFALSE 69968
// break ;
69966: GO 70098
// if not GetClass ( j ) in [ 2 , 16 ] then
69968: LD_VAR 0 3
69972: PPUSH
69973: CALL_OW 257
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: LD_INT 16
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: IN
69988: NOT
69989: IFFALSE 70042
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69991: LD_ADDR_EXP 62
69995: PUSH
69996: LD_EXP 62
70000: PPUSH
70001: LD_VAR 0 2
70005: PPUSH
70006: LD_EXP 62
70010: PUSH
70011: LD_VAR 0 2
70015: ARRAY
70016: PUSH
70017: LD_VAR 0 3
70021: DIFF
70022: PPUSH
70023: CALL_OW 1
70027: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70028: LD_VAR 0 3
70032: PPUSH
70033: LD_INT 0
70035: PPUSH
70036: CALL_OW 109
// continue ;
70040: GO 69937
// end ; if IsInUnit ( j ) then
70042: LD_VAR 0 3
70046: PPUSH
70047: CALL_OW 310
70051: IFFALSE 70062
// ComExitBuilding ( j ) ;
70053: LD_VAR 0 3
70057: PPUSH
70058: CALL_OW 122
// wait ( 3 ) ;
70062: LD_INT 3
70064: PPUSH
70065: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70069: LD_VAR 0 3
70073: PPUSH
70074: LD_VAR 0 6
70078: PUSH
70079: LD_INT 2
70081: ARRAY
70082: PPUSH
70083: LD_VAR 0 6
70087: PUSH
70088: LD_INT 3
70090: ARRAY
70091: PPUSH
70092: CALL_OW 117
// end ;
70096: GO 69937
70098: POP
70099: POP
// end ; end else
70100: GO 70681
// begin for j in cargo do
70102: LD_ADDR_VAR 0 3
70106: PUSH
70107: LD_VAR 0 7
70111: PUSH
70112: FOR_IN
70113: IFFALSE 70679
// begin if GetTag ( j ) <> 0 then
70115: LD_VAR 0 3
70119: PPUSH
70120: CALL_OW 110
70124: PUSH
70125: LD_INT 0
70127: NONEQUAL
70128: IFFALSE 70132
// continue ;
70130: GO 70112
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70132: LD_VAR 0 3
70136: PPUSH
70137: CALL_OW 256
70141: PUSH
70142: LD_INT 1000
70144: LESS
70145: PUSH
70146: LD_VAR 0 3
70150: PPUSH
70151: LD_EXP 69
70155: PUSH
70156: LD_VAR 0 2
70160: ARRAY
70161: PPUSH
70162: CALL_OW 308
70166: NOT
70167: AND
70168: IFFALSE 70190
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70170: LD_VAR 0 3
70174: PPUSH
70175: LD_EXP 69
70179: PUSH
70180: LD_VAR 0 2
70184: ARRAY
70185: PPUSH
70186: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70190: LD_VAR 0 3
70194: PPUSH
70195: CALL_OW 256
70199: PUSH
70200: LD_INT 1000
70202: LESS
70203: PUSH
70204: LD_VAR 0 3
70208: PPUSH
70209: LD_EXP 69
70213: PUSH
70214: LD_VAR 0 2
70218: ARRAY
70219: PPUSH
70220: CALL_OW 308
70224: AND
70225: IFFALSE 70229
// continue ;
70227: GO 70112
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70229: LD_VAR 0 3
70233: PPUSH
70234: CALL_OW 262
70238: PUSH
70239: LD_INT 2
70241: EQUAL
70242: PUSH
70243: LD_VAR 0 3
70247: PPUSH
70248: CALL_OW 261
70252: PUSH
70253: LD_INT 15
70255: LESS
70256: AND
70257: IFFALSE 70261
// continue ;
70259: GO 70112
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70261: LD_VAR 0 3
70265: PPUSH
70266: CALL_OW 262
70270: PUSH
70271: LD_INT 1
70273: EQUAL
70274: PUSH
70275: LD_VAR 0 3
70279: PPUSH
70280: CALL_OW 261
70284: PUSH
70285: LD_INT 10
70287: LESS
70288: AND
70289: IFFALSE 70618
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70291: LD_ADDR_VAR 0 8
70295: PUSH
70296: LD_EXP 45
70300: PUSH
70301: LD_VAR 0 2
70305: ARRAY
70306: PPUSH
70307: LD_INT 2
70309: PUSH
70310: LD_INT 30
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 30
70322: PUSH
70323: LD_INT 1
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: PPUSH
70335: CALL_OW 72
70339: ST_TO_ADDR
// if not depot then
70340: LD_VAR 0 8
70344: NOT
70345: IFFALSE 70349
// continue ;
70347: GO 70112
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70349: LD_VAR 0 3
70353: PPUSH
70354: LD_VAR 0 8
70358: PPUSH
70359: LD_VAR 0 3
70363: PPUSH
70364: CALL_OW 74
70368: PPUSH
70369: CALL_OW 296
70373: PUSH
70374: LD_INT 6
70376: LESS
70377: IFFALSE 70393
// SetFuel ( j , 100 ) else
70379: LD_VAR 0 3
70383: PPUSH
70384: LD_INT 100
70386: PPUSH
70387: CALL_OW 240
70391: GO 70618
// if GetFuel ( j ) = 0 then
70393: LD_VAR 0 3
70397: PPUSH
70398: CALL_OW 261
70402: PUSH
70403: LD_INT 0
70405: EQUAL
70406: IFFALSE 70618
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70408: LD_ADDR_EXP 64
70412: PUSH
70413: LD_EXP 64
70417: PPUSH
70418: LD_VAR 0 2
70422: PPUSH
70423: LD_EXP 64
70427: PUSH
70428: LD_VAR 0 2
70432: ARRAY
70433: PUSH
70434: LD_VAR 0 3
70438: DIFF
70439: PPUSH
70440: CALL_OW 1
70444: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70445: LD_VAR 0 3
70449: PPUSH
70450: CALL_OW 263
70454: PUSH
70455: LD_INT 1
70457: EQUAL
70458: IFFALSE 70474
// ComExitVehicle ( IsInUnit ( j ) ) ;
70460: LD_VAR 0 3
70464: PPUSH
70465: CALL_OW 310
70469: PPUSH
70470: CALL_OW 121
// if GetControl ( j ) = control_remote then
70474: LD_VAR 0 3
70478: PPUSH
70479: CALL_OW 263
70483: PUSH
70484: LD_INT 2
70486: EQUAL
70487: IFFALSE 70498
// ComUnlink ( j ) ;
70489: LD_VAR 0 3
70493: PPUSH
70494: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70498: LD_ADDR_VAR 0 9
70502: PUSH
70503: LD_VAR 0 2
70507: PPUSH
70508: LD_INT 3
70510: PPUSH
70511: CALL 79971 0 2
70515: ST_TO_ADDR
// if fac then
70516: LD_VAR 0 9
70520: IFFALSE 70616
// begin for k in fac do
70522: LD_ADDR_VAR 0 4
70526: PUSH
70527: LD_VAR 0 9
70531: PUSH
70532: FOR_IN
70533: IFFALSE 70614
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70535: LD_ADDR_VAR 0 10
70539: PUSH
70540: LD_VAR 0 9
70544: PPUSH
70545: LD_VAR 0 3
70549: PPUSH
70550: CALL_OW 265
70554: PPUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: CALL_OW 262
70564: PPUSH
70565: LD_VAR 0 3
70569: PPUSH
70570: CALL_OW 263
70574: PPUSH
70575: LD_VAR 0 3
70579: PPUSH
70580: CALL_OW 264
70584: PPUSH
70585: CALL 21826 0 5
70589: ST_TO_ADDR
// if components then
70590: LD_VAR 0 10
70594: IFFALSE 70612
// begin MC_InsertProduceList ( i , components ) ;
70596: LD_VAR 0 2
70600: PPUSH
70601: LD_VAR 0 10
70605: PPUSH
70606: CALL 79516 0 2
// break ;
70610: GO 70614
// end ; end ;
70612: GO 70532
70614: POP
70615: POP
// end ; continue ;
70616: GO 70112
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70618: LD_VAR 0 3
70622: PPUSH
70623: LD_INT 1
70625: PPUSH
70626: CALL_OW 289
70630: PUSH
70631: LD_INT 100
70633: LESS
70634: PUSH
70635: LD_VAR 0 3
70639: PPUSH
70640: CALL_OW 314
70644: NOT
70645: AND
70646: IFFALSE 70675
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70648: LD_VAR 0 3
70652: PPUSH
70653: LD_VAR 0 6
70657: PUSH
70658: LD_INT 2
70660: ARRAY
70661: PPUSH
70662: LD_VAR 0 6
70666: PUSH
70667: LD_INT 3
70669: ARRAY
70670: PPUSH
70671: CALL_OW 117
// break ;
70675: GO 70679
// end ;
70677: GO 70112
70679: POP
70680: POP
// end ; end ;
70681: GO 68950
70683: POP
70684: POP
// end ;
70685: LD_VAR 0 1
70689: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70690: LD_INT 0
70692: PPUSH
70693: PPUSH
70694: PPUSH
70695: PPUSH
// if not mc_bases then
70696: LD_EXP 45
70700: NOT
70701: IFFALSE 70705
// exit ;
70703: GO 70866
// for i = 1 to mc_bases do
70705: LD_ADDR_VAR 0 2
70709: PUSH
70710: DOUBLE
70711: LD_INT 1
70713: DEC
70714: ST_TO_ADDR
70715: LD_EXP 45
70719: PUSH
70720: FOR_TO
70721: IFFALSE 70864
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70723: LD_ADDR_VAR 0 4
70727: PUSH
70728: LD_EXP 64
70732: PUSH
70733: LD_VAR 0 2
70737: ARRAY
70738: PUSH
70739: LD_EXP 67
70743: PUSH
70744: LD_VAR 0 2
70748: ARRAY
70749: UNION
70750: PPUSH
70751: LD_INT 33
70753: PUSH
70754: LD_INT 2
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PPUSH
70761: CALL_OW 72
70765: ST_TO_ADDR
// if tmp then
70766: LD_VAR 0 4
70770: IFFALSE 70862
// for j in tmp do
70772: LD_ADDR_VAR 0 3
70776: PUSH
70777: LD_VAR 0 4
70781: PUSH
70782: FOR_IN
70783: IFFALSE 70860
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70785: LD_VAR 0 3
70789: PPUSH
70790: CALL_OW 312
70794: NOT
70795: PUSH
70796: LD_VAR 0 3
70800: PPUSH
70801: CALL_OW 256
70805: PUSH
70806: LD_INT 250
70808: GREATEREQUAL
70809: AND
70810: IFFALSE 70823
// Connect ( j ) else
70812: LD_VAR 0 3
70816: PPUSH
70817: CALL 27227 0 1
70821: GO 70858
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70823: LD_VAR 0 3
70827: PPUSH
70828: CALL_OW 256
70832: PUSH
70833: LD_INT 250
70835: LESS
70836: PUSH
70837: LD_VAR 0 3
70841: PPUSH
70842: CALL_OW 312
70846: AND
70847: IFFALSE 70858
// ComUnlink ( j ) ;
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL_OW 136
70858: GO 70782
70860: POP
70861: POP
// end ;
70862: GO 70720
70864: POP
70865: POP
// end ;
70866: LD_VAR 0 1
70870: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70871: LD_INT 0
70873: PPUSH
70874: PPUSH
70875: PPUSH
70876: PPUSH
70877: PPUSH
// if not mc_bases then
70878: LD_EXP 45
70882: NOT
70883: IFFALSE 70887
// exit ;
70885: GO 71332
// for i = 1 to mc_bases do
70887: LD_ADDR_VAR 0 2
70891: PUSH
70892: DOUBLE
70893: LD_INT 1
70895: DEC
70896: ST_TO_ADDR
70897: LD_EXP 45
70901: PUSH
70902: FOR_TO
70903: IFFALSE 71330
// begin if not mc_produce [ i ] then
70905: LD_EXP 66
70909: PUSH
70910: LD_VAR 0 2
70914: ARRAY
70915: NOT
70916: IFFALSE 70920
// continue ;
70918: GO 70902
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70920: LD_ADDR_VAR 0 5
70924: PUSH
70925: LD_EXP 45
70929: PUSH
70930: LD_VAR 0 2
70934: ARRAY
70935: PPUSH
70936: LD_INT 30
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PPUSH
70946: CALL_OW 72
70950: ST_TO_ADDR
// if not fac then
70951: LD_VAR 0 5
70955: NOT
70956: IFFALSE 70960
// continue ;
70958: GO 70902
// for j in fac do
70960: LD_ADDR_VAR 0 3
70964: PUSH
70965: LD_VAR 0 5
70969: PUSH
70970: FOR_IN
70971: IFFALSE 71326
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70973: LD_VAR 0 3
70977: PPUSH
70978: CALL_OW 461
70982: PUSH
70983: LD_INT 2
70985: NONEQUAL
70986: PUSH
70987: LD_VAR 0 3
70991: PPUSH
70992: LD_INT 15
70994: PPUSH
70995: CALL 26887 0 2
70999: PUSH
71000: LD_INT 4
71002: ARRAY
71003: OR
71004: IFFALSE 71008
// continue ;
71006: GO 70970
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
71008: LD_VAR 0 3
71012: PPUSH
71013: LD_EXP 66
71017: PUSH
71018: LD_VAR 0 2
71022: ARRAY
71023: PUSH
71024: LD_INT 1
71026: ARRAY
71027: PUSH
71028: LD_INT 1
71030: ARRAY
71031: PPUSH
71032: LD_EXP 66
71036: PUSH
71037: LD_VAR 0 2
71041: ARRAY
71042: PUSH
71043: LD_INT 1
71045: ARRAY
71046: PUSH
71047: LD_INT 2
71049: ARRAY
71050: PPUSH
71051: LD_EXP 66
71055: PUSH
71056: LD_VAR 0 2
71060: ARRAY
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PUSH
71066: LD_INT 3
71068: ARRAY
71069: PPUSH
71070: LD_EXP 66
71074: PUSH
71075: LD_VAR 0 2
71079: ARRAY
71080: PUSH
71081: LD_INT 1
71083: ARRAY
71084: PUSH
71085: LD_INT 4
71087: ARRAY
71088: PPUSH
71089: CALL_OW 448
71093: PUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: LD_EXP 66
71103: PUSH
71104: LD_VAR 0 2
71108: ARRAY
71109: PUSH
71110: LD_INT 1
71112: ARRAY
71113: PUSH
71114: LD_INT 1
71116: ARRAY
71117: PUSH
71118: LD_EXP 66
71122: PUSH
71123: LD_VAR 0 2
71127: ARRAY
71128: PUSH
71129: LD_INT 1
71131: ARRAY
71132: PUSH
71133: LD_INT 2
71135: ARRAY
71136: PUSH
71137: LD_EXP 66
71141: PUSH
71142: LD_VAR 0 2
71146: ARRAY
71147: PUSH
71148: LD_INT 1
71150: ARRAY
71151: PUSH
71152: LD_INT 3
71154: ARRAY
71155: PUSH
71156: LD_EXP 66
71160: PUSH
71161: LD_VAR 0 2
71165: ARRAY
71166: PUSH
71167: LD_INT 1
71169: ARRAY
71170: PUSH
71171: LD_INT 4
71173: ARRAY
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: PPUSH
71181: CALL 30558 0 2
71185: AND
71186: IFFALSE 71324
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71188: LD_VAR 0 3
71192: PPUSH
71193: LD_EXP 66
71197: PUSH
71198: LD_VAR 0 2
71202: ARRAY
71203: PUSH
71204: LD_INT 1
71206: ARRAY
71207: PUSH
71208: LD_INT 1
71210: ARRAY
71211: PPUSH
71212: LD_EXP 66
71216: PUSH
71217: LD_VAR 0 2
71221: ARRAY
71222: PUSH
71223: LD_INT 1
71225: ARRAY
71226: PUSH
71227: LD_INT 2
71229: ARRAY
71230: PPUSH
71231: LD_EXP 66
71235: PUSH
71236: LD_VAR 0 2
71240: ARRAY
71241: PUSH
71242: LD_INT 1
71244: ARRAY
71245: PUSH
71246: LD_INT 3
71248: ARRAY
71249: PPUSH
71250: LD_EXP 66
71254: PUSH
71255: LD_VAR 0 2
71259: ARRAY
71260: PUSH
71261: LD_INT 1
71263: ARRAY
71264: PUSH
71265: LD_INT 4
71267: ARRAY
71268: PPUSH
71269: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71273: LD_ADDR_VAR 0 4
71277: PUSH
71278: LD_EXP 66
71282: PUSH
71283: LD_VAR 0 2
71287: ARRAY
71288: PPUSH
71289: LD_INT 1
71291: PPUSH
71292: CALL_OW 3
71296: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71297: LD_ADDR_EXP 66
71301: PUSH
71302: LD_EXP 66
71306: PPUSH
71307: LD_VAR 0 2
71311: PPUSH
71312: LD_VAR 0 4
71316: PPUSH
71317: CALL_OW 1
71321: ST_TO_ADDR
// break ;
71322: GO 71326
// end ; end ;
71324: GO 70970
71326: POP
71327: POP
// end ;
71328: GO 70902
71330: POP
71331: POP
// end ;
71332: LD_VAR 0 1
71336: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71337: LD_INT 0
71339: PPUSH
71340: PPUSH
71341: PPUSH
// if not mc_bases then
71342: LD_EXP 45
71346: NOT
71347: IFFALSE 71351
// exit ;
71349: GO 71440
// for i = 1 to mc_bases do
71351: LD_ADDR_VAR 0 2
71355: PUSH
71356: DOUBLE
71357: LD_INT 1
71359: DEC
71360: ST_TO_ADDR
71361: LD_EXP 45
71365: PUSH
71366: FOR_TO
71367: IFFALSE 71438
// begin if mc_attack [ i ] then
71369: LD_EXP 65
71373: PUSH
71374: LD_VAR 0 2
71378: ARRAY
71379: IFFALSE 71436
// begin tmp := mc_attack [ i ] [ 1 ] ;
71381: LD_ADDR_VAR 0 3
71385: PUSH
71386: LD_EXP 65
71390: PUSH
71391: LD_VAR 0 2
71395: ARRAY
71396: PUSH
71397: LD_INT 1
71399: ARRAY
71400: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71401: LD_ADDR_EXP 65
71405: PUSH
71406: LD_EXP 65
71410: PPUSH
71411: LD_VAR 0 2
71415: PPUSH
71416: EMPTY
71417: PPUSH
71418: CALL_OW 1
71422: ST_TO_ADDR
// Attack ( tmp ) ;
71423: LD_VAR 0 3
71427: PPUSH
71428: CALL 98583 0 1
// exit ;
71432: POP
71433: POP
71434: GO 71440
// end ; end ;
71436: GO 71366
71438: POP
71439: POP
// end ;
71440: LD_VAR 0 1
71444: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71445: LD_INT 0
71447: PPUSH
71448: PPUSH
71449: PPUSH
71450: PPUSH
71451: PPUSH
71452: PPUSH
71453: PPUSH
// if not mc_bases then
71454: LD_EXP 45
71458: NOT
71459: IFFALSE 71463
// exit ;
71461: GO 72045
// for i = 1 to mc_bases do
71463: LD_ADDR_VAR 0 2
71467: PUSH
71468: DOUBLE
71469: LD_INT 1
71471: DEC
71472: ST_TO_ADDR
71473: LD_EXP 45
71477: PUSH
71478: FOR_TO
71479: IFFALSE 72043
// begin if not mc_bases [ i ] then
71481: LD_EXP 45
71485: PUSH
71486: LD_VAR 0 2
71490: ARRAY
71491: NOT
71492: IFFALSE 71496
// continue ;
71494: GO 71478
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71496: LD_ADDR_VAR 0 7
71500: PUSH
71501: LD_EXP 45
71505: PUSH
71506: LD_VAR 0 2
71510: ARRAY
71511: PUSH
71512: LD_INT 1
71514: ARRAY
71515: PPUSH
71516: CALL 21130 0 1
71520: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71521: LD_ADDR_EXP 68
71525: PUSH
71526: LD_EXP 68
71530: PPUSH
71531: LD_VAR 0 2
71535: PPUSH
71536: LD_EXP 45
71540: PUSH
71541: LD_VAR 0 2
71545: ARRAY
71546: PUSH
71547: LD_INT 1
71549: ARRAY
71550: PPUSH
71551: CALL_OW 255
71555: PPUSH
71556: LD_EXP 70
71560: PUSH
71561: LD_VAR 0 2
71565: ARRAY
71566: PPUSH
71567: CALL 21095 0 2
71571: PPUSH
71572: CALL_OW 1
71576: ST_TO_ADDR
// if not mc_scan [ i ] then
71577: LD_EXP 68
71581: PUSH
71582: LD_VAR 0 2
71586: ARRAY
71587: NOT
71588: IFFALSE 71743
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71590: LD_ADDR_VAR 0 4
71594: PUSH
71595: LD_EXP 45
71599: PUSH
71600: LD_VAR 0 2
71604: ARRAY
71605: PPUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 25
71611: PUSH
71612: LD_INT 5
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 25
71621: PUSH
71622: LD_INT 8
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 25
71631: PUSH
71632: LD_INT 9
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: PPUSH
71645: CALL_OW 72
71649: ST_TO_ADDR
// if not tmp then
71650: LD_VAR 0 4
71654: NOT
71655: IFFALSE 71659
// continue ;
71657: GO 71478
// for j in tmp do
71659: LD_ADDR_VAR 0 3
71663: PUSH
71664: LD_VAR 0 4
71668: PUSH
71669: FOR_IN
71670: IFFALSE 71741
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71672: LD_VAR 0 3
71676: PPUSH
71677: CALL_OW 310
71681: PPUSH
71682: CALL_OW 266
71686: PUSH
71687: LD_INT 5
71689: EQUAL
71690: PUSH
71691: LD_VAR 0 3
71695: PPUSH
71696: CALL_OW 257
71700: PUSH
71701: LD_INT 1
71703: EQUAL
71704: AND
71705: PUSH
71706: LD_VAR 0 3
71710: PPUSH
71711: CALL_OW 459
71715: NOT
71716: AND
71717: PUSH
71718: LD_VAR 0 7
71722: AND
71723: IFFALSE 71739
// ComChangeProfession ( j , class ) ;
71725: LD_VAR 0 3
71729: PPUSH
71730: LD_VAR 0 7
71734: PPUSH
71735: CALL_OW 123
71739: GO 71669
71741: POP
71742: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71743: LD_EXP 68
71747: PUSH
71748: LD_VAR 0 2
71752: ARRAY
71753: PUSH
71754: LD_EXP 67
71758: PUSH
71759: LD_VAR 0 2
71763: ARRAY
71764: NOT
71765: AND
71766: PUSH
71767: LD_EXP 45
71771: PUSH
71772: LD_VAR 0 2
71776: ARRAY
71777: PPUSH
71778: LD_INT 30
71780: PUSH
71781: LD_INT 32
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PPUSH
71788: CALL_OW 72
71792: NOT
71793: AND
71794: PUSH
71795: LD_EXP 45
71799: PUSH
71800: LD_VAR 0 2
71804: ARRAY
71805: PPUSH
71806: LD_INT 2
71808: PUSH
71809: LD_INT 30
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 30
71821: PUSH
71822: LD_INT 5
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: LIST
71833: PPUSH
71834: CALL_OW 72
71838: NOT
71839: AND
71840: IFFALSE 71972
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71842: LD_ADDR_VAR 0 4
71846: PUSH
71847: LD_EXP 45
71851: PUSH
71852: LD_VAR 0 2
71856: ARRAY
71857: PPUSH
71858: LD_INT 2
71860: PUSH
71861: LD_INT 25
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 25
71873: PUSH
71874: LD_INT 5
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 25
71883: PUSH
71884: LD_INT 8
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 25
71893: PUSH
71894: LD_INT 9
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: PPUSH
71908: CALL_OW 72
71912: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71913: LD_ADDR_VAR 0 4
71917: PUSH
71918: LD_VAR 0 4
71922: PUSH
71923: LD_VAR 0 4
71927: PPUSH
71928: LD_INT 18
71930: PPUSH
71931: CALL 52855 0 2
71935: DIFF
71936: ST_TO_ADDR
// if tmp then
71937: LD_VAR 0 4
71941: IFFALSE 71972
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71943: LD_VAR 0 2
71947: PPUSH
71948: LD_VAR 0 4
71952: PPUSH
71953: LD_EXP 70
71957: PUSH
71958: LD_VAR 0 2
71962: ARRAY
71963: PPUSH
71964: CALL 103292 0 3
// exit ;
71968: POP
71969: POP
71970: GO 72045
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71972: LD_EXP 68
71976: PUSH
71977: LD_VAR 0 2
71981: ARRAY
71982: PUSH
71983: LD_EXP 67
71987: PUSH
71988: LD_VAR 0 2
71992: ARRAY
71993: AND
71994: IFFALSE 72041
// begin tmp := mc_defender [ i ] ;
71996: LD_ADDR_VAR 0 4
72000: PUSH
72001: LD_EXP 67
72005: PUSH
72006: LD_VAR 0 2
72010: ARRAY
72011: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
72012: LD_VAR 0 2
72016: PPUSH
72017: LD_VAR 0 4
72021: PPUSH
72022: LD_EXP 68
72026: PUSH
72027: LD_VAR 0 2
72031: ARRAY
72032: PPUSH
72033: CALL 103853 0 3
// exit ;
72037: POP
72038: POP
72039: GO 72045
// end ; end ;
72041: GO 71478
72043: POP
72044: POP
// end ;
72045: LD_VAR 0 1
72049: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
72056: PPUSH
72057: PPUSH
72058: PPUSH
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
// if not mc_bases then
72063: LD_EXP 45
72067: NOT
72068: IFFALSE 72072
// exit ;
72070: GO 73159
// for i = 1 to mc_bases do
72072: LD_ADDR_VAR 0 2
72076: PUSH
72077: DOUBLE
72078: LD_INT 1
72080: DEC
72081: ST_TO_ADDR
72082: LD_EXP 45
72086: PUSH
72087: FOR_TO
72088: IFFALSE 73157
// begin tmp := mc_lab [ i ] ;
72090: LD_ADDR_VAR 0 6
72094: PUSH
72095: LD_EXP 78
72099: PUSH
72100: LD_VAR 0 2
72104: ARRAY
72105: ST_TO_ADDR
// if not tmp then
72106: LD_VAR 0 6
72110: NOT
72111: IFFALSE 72115
// continue ;
72113: GO 72087
// idle_lab := 0 ;
72115: LD_ADDR_VAR 0 11
72119: PUSH
72120: LD_INT 0
72122: ST_TO_ADDR
// for j in tmp do
72123: LD_ADDR_VAR 0 3
72127: PUSH
72128: LD_VAR 0 6
72132: PUSH
72133: FOR_IN
72134: IFFALSE 73153
// begin researching := false ;
72136: LD_ADDR_VAR 0 10
72140: PUSH
72141: LD_INT 0
72143: ST_TO_ADDR
// side := GetSide ( j ) ;
72144: LD_ADDR_VAR 0 4
72148: PUSH
72149: LD_VAR 0 3
72153: PPUSH
72154: CALL_OW 255
72158: ST_TO_ADDR
// if not mc_tech [ side ] then
72159: LD_EXP 72
72163: PUSH
72164: LD_VAR 0 4
72168: ARRAY
72169: NOT
72170: IFFALSE 72174
// continue ;
72172: GO 72133
// if BuildingStatus ( j ) = bs_idle then
72174: LD_VAR 0 3
72178: PPUSH
72179: CALL_OW 461
72183: PUSH
72184: LD_INT 2
72186: EQUAL
72187: IFFALSE 72375
// begin if idle_lab and UnitsInside ( j ) < 6 then
72189: LD_VAR 0 11
72193: PUSH
72194: LD_VAR 0 3
72198: PPUSH
72199: CALL_OW 313
72203: PUSH
72204: LD_INT 6
72206: LESS
72207: AND
72208: IFFALSE 72279
// begin tmp2 := UnitsInside ( idle_lab ) ;
72210: LD_ADDR_VAR 0 9
72214: PUSH
72215: LD_VAR 0 11
72219: PPUSH
72220: CALL_OW 313
72224: ST_TO_ADDR
// if tmp2 then
72225: LD_VAR 0 9
72229: IFFALSE 72271
// for x in tmp2 do
72231: LD_ADDR_VAR 0 7
72235: PUSH
72236: LD_VAR 0 9
72240: PUSH
72241: FOR_IN
72242: IFFALSE 72269
// begin ComExitBuilding ( x ) ;
72244: LD_VAR 0 7
72248: PPUSH
72249: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72253: LD_VAR 0 7
72257: PPUSH
72258: LD_VAR 0 3
72262: PPUSH
72263: CALL_OW 180
// end ;
72267: GO 72241
72269: POP
72270: POP
// idle_lab := 0 ;
72271: LD_ADDR_VAR 0 11
72275: PUSH
72276: LD_INT 0
72278: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72279: LD_ADDR_VAR 0 5
72283: PUSH
72284: LD_EXP 72
72288: PUSH
72289: LD_VAR 0 4
72293: ARRAY
72294: PUSH
72295: FOR_IN
72296: IFFALSE 72356
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72298: LD_VAR 0 3
72302: PPUSH
72303: LD_VAR 0 5
72307: PPUSH
72308: CALL_OW 430
72312: PUSH
72313: LD_VAR 0 4
72317: PPUSH
72318: LD_VAR 0 5
72322: PPUSH
72323: CALL 20200 0 2
72327: AND
72328: IFFALSE 72354
// begin researching := true ;
72330: LD_ADDR_VAR 0 10
72334: PUSH
72335: LD_INT 1
72337: ST_TO_ADDR
// ComResearch ( j , t ) ;
72338: LD_VAR 0 3
72342: PPUSH
72343: LD_VAR 0 5
72347: PPUSH
72348: CALL_OW 124
// break ;
72352: GO 72356
// end ;
72354: GO 72295
72356: POP
72357: POP
// if not researching then
72358: LD_VAR 0 10
72362: NOT
72363: IFFALSE 72375
// idle_lab := j ;
72365: LD_ADDR_VAR 0 11
72369: PUSH
72370: LD_VAR 0 3
72374: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72375: LD_VAR 0 3
72379: PPUSH
72380: CALL_OW 461
72384: PUSH
72385: LD_INT 10
72387: EQUAL
72388: IFFALSE 72976
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72390: LD_EXP 74
72394: PUSH
72395: LD_VAR 0 2
72399: ARRAY
72400: NOT
72401: PUSH
72402: LD_EXP 75
72406: PUSH
72407: LD_VAR 0 2
72411: ARRAY
72412: NOT
72413: AND
72414: PUSH
72415: LD_EXP 72
72419: PUSH
72420: LD_VAR 0 4
72424: ARRAY
72425: PUSH
72426: LD_INT 1
72428: GREATER
72429: AND
72430: IFFALSE 72561
// begin ComCancel ( j ) ;
72432: LD_VAR 0 3
72436: PPUSH
72437: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72441: LD_ADDR_EXP 72
72445: PUSH
72446: LD_EXP 72
72450: PPUSH
72451: LD_VAR 0 4
72455: PPUSH
72456: LD_EXP 72
72460: PUSH
72461: LD_VAR 0 4
72465: ARRAY
72466: PPUSH
72467: LD_EXP 72
72471: PUSH
72472: LD_VAR 0 4
72476: ARRAY
72477: PUSH
72478: LD_INT 1
72480: MINUS
72481: PPUSH
72482: LD_EXP 72
72486: PUSH
72487: LD_VAR 0 4
72491: ARRAY
72492: PPUSH
72493: LD_INT 0
72495: PPUSH
72496: CALL 23712 0 4
72500: PPUSH
72501: CALL_OW 1
72505: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72506: LD_ADDR_EXP 72
72510: PUSH
72511: LD_EXP 72
72515: PPUSH
72516: LD_VAR 0 4
72520: PPUSH
72521: LD_EXP 72
72525: PUSH
72526: LD_VAR 0 4
72530: ARRAY
72531: PPUSH
72532: LD_EXP 72
72536: PUSH
72537: LD_VAR 0 4
72541: ARRAY
72542: PPUSH
72543: LD_INT 1
72545: PPUSH
72546: LD_INT 0
72548: PPUSH
72549: CALL 23712 0 4
72553: PPUSH
72554: CALL_OW 1
72558: ST_TO_ADDR
// continue ;
72559: GO 72133
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72561: LD_EXP 74
72565: PUSH
72566: LD_VAR 0 2
72570: ARRAY
72571: PUSH
72572: LD_EXP 75
72576: PUSH
72577: LD_VAR 0 2
72581: ARRAY
72582: NOT
72583: AND
72584: IFFALSE 72711
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72586: LD_ADDR_EXP 75
72590: PUSH
72591: LD_EXP 75
72595: PPUSH
72596: LD_VAR 0 2
72600: PUSH
72601: LD_EXP 75
72605: PUSH
72606: LD_VAR 0 2
72610: ARRAY
72611: PUSH
72612: LD_INT 1
72614: PLUS
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PPUSH
72620: LD_EXP 74
72624: PUSH
72625: LD_VAR 0 2
72629: ARRAY
72630: PUSH
72631: LD_INT 1
72633: ARRAY
72634: PPUSH
72635: CALL 24294 0 3
72639: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72640: LD_EXP 74
72644: PUSH
72645: LD_VAR 0 2
72649: ARRAY
72650: PUSH
72651: LD_INT 1
72653: ARRAY
72654: PPUSH
72655: LD_INT 112
72657: PPUSH
72658: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72662: LD_ADDR_VAR 0 9
72666: PUSH
72667: LD_EXP 74
72671: PUSH
72672: LD_VAR 0 2
72676: ARRAY
72677: PPUSH
72678: LD_INT 1
72680: PPUSH
72681: CALL_OW 3
72685: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72686: LD_ADDR_EXP 74
72690: PUSH
72691: LD_EXP 74
72695: PPUSH
72696: LD_VAR 0 2
72700: PPUSH
72701: LD_VAR 0 9
72705: PPUSH
72706: CALL_OW 1
72710: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72711: LD_EXP 74
72715: PUSH
72716: LD_VAR 0 2
72720: ARRAY
72721: PUSH
72722: LD_EXP 75
72726: PUSH
72727: LD_VAR 0 2
72731: ARRAY
72732: AND
72733: PUSH
72734: LD_EXP 75
72738: PUSH
72739: LD_VAR 0 2
72743: ARRAY
72744: PUSH
72745: LD_INT 1
72747: ARRAY
72748: PPUSH
72749: CALL_OW 310
72753: NOT
72754: AND
72755: PUSH
72756: LD_VAR 0 3
72760: PPUSH
72761: CALL_OW 313
72765: PUSH
72766: LD_INT 6
72768: EQUAL
72769: AND
72770: IFFALSE 72826
// begin tmp2 := UnitsInside ( j ) ;
72772: LD_ADDR_VAR 0 9
72776: PUSH
72777: LD_VAR 0 3
72781: PPUSH
72782: CALL_OW 313
72786: ST_TO_ADDR
// if tmp2 = 6 then
72787: LD_VAR 0 9
72791: PUSH
72792: LD_INT 6
72794: EQUAL
72795: IFFALSE 72826
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72797: LD_VAR 0 9
72801: PUSH
72802: LD_INT 1
72804: ARRAY
72805: PPUSH
72806: LD_INT 112
72808: PPUSH
72809: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72813: LD_VAR 0 9
72817: PUSH
72818: LD_INT 1
72820: ARRAY
72821: PPUSH
72822: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72826: LD_EXP 75
72830: PUSH
72831: LD_VAR 0 2
72835: ARRAY
72836: PUSH
72837: LD_EXP 75
72841: PUSH
72842: LD_VAR 0 2
72846: ARRAY
72847: PUSH
72848: LD_INT 1
72850: ARRAY
72851: PPUSH
72852: CALL_OW 314
72856: NOT
72857: AND
72858: PUSH
72859: LD_EXP 75
72863: PUSH
72864: LD_VAR 0 2
72868: ARRAY
72869: PUSH
72870: LD_INT 1
72872: ARRAY
72873: PPUSH
72874: CALL_OW 310
72878: NOT
72879: AND
72880: IFFALSE 72906
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72882: LD_EXP 75
72886: PUSH
72887: LD_VAR 0 2
72891: ARRAY
72892: PUSH
72893: LD_INT 1
72895: ARRAY
72896: PPUSH
72897: LD_VAR 0 3
72901: PPUSH
72902: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72906: LD_EXP 75
72910: PUSH
72911: LD_VAR 0 2
72915: ARRAY
72916: PUSH
72917: LD_INT 1
72919: ARRAY
72920: PPUSH
72921: CALL_OW 310
72925: PUSH
72926: LD_EXP 75
72930: PUSH
72931: LD_VAR 0 2
72935: ARRAY
72936: PUSH
72937: LD_INT 1
72939: ARRAY
72940: PPUSH
72941: CALL_OW 310
72945: PPUSH
72946: CALL_OW 461
72950: PUSH
72951: LD_INT 3
72953: NONEQUAL
72954: AND
72955: IFFALSE 72976
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72957: LD_EXP 75
72961: PUSH
72962: LD_VAR 0 2
72966: ARRAY
72967: PUSH
72968: LD_INT 1
72970: ARRAY
72971: PPUSH
72972: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72976: LD_VAR 0 3
72980: PPUSH
72981: CALL_OW 461
72985: PUSH
72986: LD_INT 6
72988: EQUAL
72989: PUSH
72990: LD_VAR 0 6
72994: PUSH
72995: LD_INT 1
72997: GREATER
72998: AND
72999: IFFALSE 73151
// begin sci := [ ] ;
73001: LD_ADDR_VAR 0 8
73005: PUSH
73006: EMPTY
73007: ST_TO_ADDR
// for x in ( tmp diff j ) do
73008: LD_ADDR_VAR 0 7
73012: PUSH
73013: LD_VAR 0 6
73017: PUSH
73018: LD_VAR 0 3
73022: DIFF
73023: PUSH
73024: FOR_IN
73025: IFFALSE 73077
// begin if sci = 6 then
73027: LD_VAR 0 8
73031: PUSH
73032: LD_INT 6
73034: EQUAL
73035: IFFALSE 73039
// break ;
73037: GO 73077
// if BuildingStatus ( x ) = bs_idle then
73039: LD_VAR 0 7
73043: PPUSH
73044: CALL_OW 461
73048: PUSH
73049: LD_INT 2
73051: EQUAL
73052: IFFALSE 73075
// sci := sci ^ UnitsInside ( x ) ;
73054: LD_ADDR_VAR 0 8
73058: PUSH
73059: LD_VAR 0 8
73063: PUSH
73064: LD_VAR 0 7
73068: PPUSH
73069: CALL_OW 313
73073: ADD
73074: ST_TO_ADDR
// end ;
73075: GO 73024
73077: POP
73078: POP
// if not sci then
73079: LD_VAR 0 8
73083: NOT
73084: IFFALSE 73088
// continue ;
73086: GO 72133
// for x in sci do
73088: LD_ADDR_VAR 0 7
73092: PUSH
73093: LD_VAR 0 8
73097: PUSH
73098: FOR_IN
73099: IFFALSE 73149
// if IsInUnit ( x ) and not HasTask ( x ) then
73101: LD_VAR 0 7
73105: PPUSH
73106: CALL_OW 310
73110: PUSH
73111: LD_VAR 0 7
73115: PPUSH
73116: CALL_OW 314
73120: NOT
73121: AND
73122: IFFALSE 73147
// begin ComExitBuilding ( x ) ;
73124: LD_VAR 0 7
73128: PPUSH
73129: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73133: LD_VAR 0 7
73137: PPUSH
73138: LD_VAR 0 3
73142: PPUSH
73143: CALL_OW 180
// end ;
73147: GO 73098
73149: POP
73150: POP
// end ; end ;
73151: GO 72133
73153: POP
73154: POP
// end ;
73155: GO 72087
73157: POP
73158: POP
// end ;
73159: LD_VAR 0 1
73163: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73164: LD_INT 0
73166: PPUSH
73167: PPUSH
// if not mc_bases then
73168: LD_EXP 45
73172: NOT
73173: IFFALSE 73177
// exit ;
73175: GO 73258
// for i = 1 to mc_bases do
73177: LD_ADDR_VAR 0 2
73181: PUSH
73182: DOUBLE
73183: LD_INT 1
73185: DEC
73186: ST_TO_ADDR
73187: LD_EXP 45
73191: PUSH
73192: FOR_TO
73193: IFFALSE 73256
// if mc_mines [ i ] and mc_miners [ i ] then
73195: LD_EXP 58
73199: PUSH
73200: LD_VAR 0 2
73204: ARRAY
73205: PUSH
73206: LD_EXP 59
73210: PUSH
73211: LD_VAR 0 2
73215: ARRAY
73216: AND
73217: IFFALSE 73254
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73219: LD_EXP 59
73223: PUSH
73224: LD_VAR 0 2
73228: ARRAY
73229: PUSH
73230: LD_INT 1
73232: ARRAY
73233: PPUSH
73234: CALL_OW 255
73238: PPUSH
73239: LD_EXP 58
73243: PUSH
73244: LD_VAR 0 2
73248: ARRAY
73249: PPUSH
73250: CALL 21283 0 2
73254: GO 73192
73256: POP
73257: POP
// end ;
73258: LD_VAR 0 1
73262: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73263: LD_INT 0
73265: PPUSH
73266: PPUSH
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
73271: PPUSH
73272: PPUSH
// if not mc_bases or not mc_parking then
73273: LD_EXP 45
73277: NOT
73278: PUSH
73279: LD_EXP 69
73283: NOT
73284: OR
73285: IFFALSE 73289
// exit ;
73287: GO 73988
// for i = 1 to mc_bases do
73289: LD_ADDR_VAR 0 2
73293: PUSH
73294: DOUBLE
73295: LD_INT 1
73297: DEC
73298: ST_TO_ADDR
73299: LD_EXP 45
73303: PUSH
73304: FOR_TO
73305: IFFALSE 73986
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73307: LD_EXP 45
73311: PUSH
73312: LD_VAR 0 2
73316: ARRAY
73317: NOT
73318: PUSH
73319: LD_EXP 69
73323: PUSH
73324: LD_VAR 0 2
73328: ARRAY
73329: NOT
73330: OR
73331: IFFALSE 73335
// continue ;
73333: GO 73304
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73335: LD_ADDR_VAR 0 5
73339: PUSH
73340: LD_EXP 45
73344: PUSH
73345: LD_VAR 0 2
73349: ARRAY
73350: PUSH
73351: LD_INT 1
73353: ARRAY
73354: PPUSH
73355: CALL_OW 255
73359: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73360: LD_ADDR_VAR 0 6
73364: PUSH
73365: LD_EXP 45
73369: PUSH
73370: LD_VAR 0 2
73374: ARRAY
73375: PPUSH
73376: LD_INT 30
73378: PUSH
73379: LD_INT 3
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PPUSH
73386: CALL_OW 72
73390: ST_TO_ADDR
// if not fac then
73391: LD_VAR 0 6
73395: NOT
73396: IFFALSE 73447
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73398: LD_ADDR_VAR 0 6
73402: PUSH
73403: LD_EXP 45
73407: PUSH
73408: LD_VAR 0 2
73412: ARRAY
73413: PPUSH
73414: LD_INT 2
73416: PUSH
73417: LD_INT 30
73419: PUSH
73420: LD_INT 0
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 30
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: LIST
73441: PPUSH
73442: CALL_OW 72
73446: ST_TO_ADDR
// if not fac then
73447: LD_VAR 0 6
73451: NOT
73452: IFFALSE 73456
// continue ;
73454: GO 73304
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73456: LD_ADDR_VAR 0 7
73460: PUSH
73461: LD_EXP 69
73465: PUSH
73466: LD_VAR 0 2
73470: ARRAY
73471: PPUSH
73472: LD_INT 22
73474: PUSH
73475: LD_VAR 0 5
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 21
73486: PUSH
73487: LD_INT 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 3
73496: PUSH
73497: LD_INT 24
73499: PUSH
73500: LD_INT 1000
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: LIST
73515: PPUSH
73516: CALL_OW 70
73520: ST_TO_ADDR
// for j in fac do
73521: LD_ADDR_VAR 0 3
73525: PUSH
73526: LD_VAR 0 6
73530: PUSH
73531: FOR_IN
73532: IFFALSE 73613
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73534: LD_ADDR_VAR 0 7
73538: PUSH
73539: LD_VAR 0 7
73543: PUSH
73544: LD_INT 22
73546: PUSH
73547: LD_VAR 0 5
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 91
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: LD_INT 15
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 21
73574: PUSH
73575: LD_INT 2
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 3
73584: PUSH
73585: LD_INT 24
73587: PUSH
73588: LD_INT 1000
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: PPUSH
73605: CALL_OW 69
73609: UNION
73610: ST_TO_ADDR
73611: GO 73531
73613: POP
73614: POP
// if not vehs then
73615: LD_VAR 0 7
73619: NOT
73620: IFFALSE 73646
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73622: LD_ADDR_EXP 57
73626: PUSH
73627: LD_EXP 57
73631: PPUSH
73632: LD_VAR 0 2
73636: PPUSH
73637: EMPTY
73638: PPUSH
73639: CALL_OW 1
73643: ST_TO_ADDR
// continue ;
73644: GO 73304
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73646: LD_ADDR_VAR 0 8
73650: PUSH
73651: LD_EXP 45
73655: PUSH
73656: LD_VAR 0 2
73660: ARRAY
73661: PPUSH
73662: LD_INT 30
73664: PUSH
73665: LD_INT 3
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PPUSH
73672: CALL_OW 72
73676: ST_TO_ADDR
// if tmp then
73677: LD_VAR 0 8
73681: IFFALSE 73784
// begin for j in tmp do
73683: LD_ADDR_VAR 0 3
73687: PUSH
73688: LD_VAR 0 8
73692: PUSH
73693: FOR_IN
73694: IFFALSE 73782
// for k in UnitsInside ( j ) do
73696: LD_ADDR_VAR 0 4
73700: PUSH
73701: LD_VAR 0 3
73705: PPUSH
73706: CALL_OW 313
73710: PUSH
73711: FOR_IN
73712: IFFALSE 73778
// if k then
73714: LD_VAR 0 4
73718: IFFALSE 73776
// if not k in mc_repair_vehicle [ i ] then
73720: LD_VAR 0 4
73724: PUSH
73725: LD_EXP 57
73729: PUSH
73730: LD_VAR 0 2
73734: ARRAY
73735: IN
73736: NOT
73737: IFFALSE 73776
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73739: LD_ADDR_EXP 57
73743: PUSH
73744: LD_EXP 57
73748: PPUSH
73749: LD_VAR 0 2
73753: PPUSH
73754: LD_EXP 57
73758: PUSH
73759: LD_VAR 0 2
73763: ARRAY
73764: PUSH
73765: LD_VAR 0 4
73769: UNION
73770: PPUSH
73771: CALL_OW 1
73775: ST_TO_ADDR
73776: GO 73711
73778: POP
73779: POP
73780: GO 73693
73782: POP
73783: POP
// end ; if not mc_repair_vehicle [ i ] then
73784: LD_EXP 57
73788: PUSH
73789: LD_VAR 0 2
73793: ARRAY
73794: NOT
73795: IFFALSE 73799
// continue ;
73797: GO 73304
// for j in mc_repair_vehicle [ i ] do
73799: LD_ADDR_VAR 0 3
73803: PUSH
73804: LD_EXP 57
73808: PUSH
73809: LD_VAR 0 2
73813: ARRAY
73814: PUSH
73815: FOR_IN
73816: IFFALSE 73982
// begin if GetClass ( j ) <> 3 then
73818: LD_VAR 0 3
73822: PPUSH
73823: CALL_OW 257
73827: PUSH
73828: LD_INT 3
73830: NONEQUAL
73831: IFFALSE 73872
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73833: LD_ADDR_EXP 57
73837: PUSH
73838: LD_EXP 57
73842: PPUSH
73843: LD_VAR 0 2
73847: PPUSH
73848: LD_EXP 57
73852: PUSH
73853: LD_VAR 0 2
73857: ARRAY
73858: PUSH
73859: LD_VAR 0 3
73863: DIFF
73864: PPUSH
73865: CALL_OW 1
73869: ST_TO_ADDR
// continue ;
73870: GO 73815
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73872: LD_VAR 0 3
73876: PPUSH
73877: CALL_OW 311
73881: NOT
73882: PUSH
73883: LD_VAR 0 3
73887: PUSH
73888: LD_EXP 48
73892: PUSH
73893: LD_VAR 0 2
73897: ARRAY
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: IN
73903: NOT
73904: AND
73905: PUSH
73906: LD_VAR 0 3
73910: PUSH
73911: LD_EXP 48
73915: PUSH
73916: LD_VAR 0 2
73920: ARRAY
73921: PUSH
73922: LD_INT 2
73924: ARRAY
73925: IN
73926: NOT
73927: AND
73928: IFFALSE 73980
// begin if IsInUnit ( j ) then
73930: LD_VAR 0 3
73934: PPUSH
73935: CALL_OW 310
73939: IFFALSE 73950
// ComExitBuilding ( j ) ;
73941: LD_VAR 0 3
73945: PPUSH
73946: CALL_OW 122
// if not HasTask ( j ) then
73950: LD_VAR 0 3
73954: PPUSH
73955: CALL_OW 314
73959: NOT
73960: IFFALSE 73980
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73962: LD_VAR 0 3
73966: PPUSH
73967: LD_VAR 0 7
73971: PUSH
73972: LD_INT 1
73974: ARRAY
73975: PPUSH
73976: CALL_OW 189
// end ; end ;
73980: GO 73815
73982: POP
73983: POP
// end ;
73984: GO 73304
73986: POP
73987: POP
// end ;
73988: LD_VAR 0 1
73992: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73993: LD_INT 0
73995: PPUSH
73996: PPUSH
73997: PPUSH
73998: PPUSH
73999: PPUSH
74000: PPUSH
74001: PPUSH
74002: PPUSH
74003: PPUSH
74004: PPUSH
74005: PPUSH
// if not mc_bases then
74006: LD_EXP 45
74010: NOT
74011: IFFALSE 74015
// exit ;
74013: GO 74817
// for i = 1 to mc_bases do
74015: LD_ADDR_VAR 0 2
74019: PUSH
74020: DOUBLE
74021: LD_INT 1
74023: DEC
74024: ST_TO_ADDR
74025: LD_EXP 45
74029: PUSH
74030: FOR_TO
74031: IFFALSE 74815
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
74033: LD_EXP 73
74037: PUSH
74038: LD_VAR 0 2
74042: ARRAY
74043: NOT
74044: PUSH
74045: LD_EXP 48
74049: PUSH
74050: LD_VAR 0 2
74054: ARRAY
74055: PUSH
74056: LD_INT 1
74058: ARRAY
74059: OR
74060: PUSH
74061: LD_EXP 48
74065: PUSH
74066: LD_VAR 0 2
74070: ARRAY
74071: PUSH
74072: LD_INT 2
74074: ARRAY
74075: OR
74076: PUSH
74077: LD_EXP 71
74081: PUSH
74082: LD_VAR 0 2
74086: ARRAY
74087: PPUSH
74088: LD_INT 1
74090: PPUSH
74091: CALL_OW 325
74095: NOT
74096: OR
74097: PUSH
74098: LD_EXP 68
74102: PUSH
74103: LD_VAR 0 2
74107: ARRAY
74108: OR
74109: IFFALSE 74113
// continue ;
74111: GO 74030
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
74113: LD_ADDR_VAR 0 8
74117: PUSH
74118: LD_EXP 45
74122: PUSH
74123: LD_VAR 0 2
74127: ARRAY
74128: PPUSH
74129: LD_INT 25
74131: PUSH
74132: LD_INT 4
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 50
74141: PUSH
74142: EMPTY
74143: LIST
74144: PUSH
74145: LD_INT 3
74147: PUSH
74148: LD_INT 60
74150: PUSH
74151: EMPTY
74152: LIST
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: LIST
74162: PPUSH
74163: CALL_OW 72
74167: PUSH
74168: LD_EXP 49
74172: PUSH
74173: LD_VAR 0 2
74177: ARRAY
74178: DIFF
74179: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74180: LD_ADDR_VAR 0 9
74184: PUSH
74185: LD_EXP 45
74189: PUSH
74190: LD_VAR 0 2
74194: ARRAY
74195: PPUSH
74196: LD_INT 2
74198: PUSH
74199: LD_INT 30
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 30
74211: PUSH
74212: LD_INT 1
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: LIST
74223: PPUSH
74224: CALL_OW 72
74228: ST_TO_ADDR
// if not tmp or not dep then
74229: LD_VAR 0 8
74233: NOT
74234: PUSH
74235: LD_VAR 0 9
74239: NOT
74240: OR
74241: IFFALSE 74245
// continue ;
74243: GO 74030
// side := GetSide ( tmp [ 1 ] ) ;
74245: LD_ADDR_VAR 0 11
74249: PUSH
74250: LD_VAR 0 8
74254: PUSH
74255: LD_INT 1
74257: ARRAY
74258: PPUSH
74259: CALL_OW 255
74263: ST_TO_ADDR
// dep := dep [ 1 ] ;
74264: LD_ADDR_VAR 0 9
74268: PUSH
74269: LD_VAR 0 9
74273: PUSH
74274: LD_INT 1
74276: ARRAY
74277: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74278: LD_ADDR_VAR 0 7
74282: PUSH
74283: LD_EXP 73
74287: PUSH
74288: LD_VAR 0 2
74292: ARRAY
74293: PPUSH
74294: LD_INT 22
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 25
74306: PUSH
74307: LD_INT 12
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PPUSH
74318: CALL_OW 70
74322: PUSH
74323: LD_INT 22
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 25
74335: PUSH
74336: LD_INT 12
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 91
74345: PUSH
74346: LD_VAR 0 9
74350: PUSH
74351: LD_INT 20
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: LIST
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: LIST
74363: PPUSH
74364: CALL_OW 69
74368: UNION
74369: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74370: LD_ADDR_VAR 0 10
74374: PUSH
74375: LD_EXP 73
74379: PUSH
74380: LD_VAR 0 2
74384: ARRAY
74385: PPUSH
74386: LD_INT 81
74388: PUSH
74389: LD_VAR 0 11
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PPUSH
74398: CALL_OW 70
74402: ST_TO_ADDR
// if not apes or danger_at_area then
74403: LD_VAR 0 7
74407: NOT
74408: PUSH
74409: LD_VAR 0 10
74413: OR
74414: IFFALSE 74464
// begin if mc_taming [ i ] then
74416: LD_EXP 76
74420: PUSH
74421: LD_VAR 0 2
74425: ARRAY
74426: IFFALSE 74462
// begin MC_Reset ( i , 121 ) ;
74428: LD_VAR 0 2
74432: PPUSH
74433: LD_INT 121
74435: PPUSH
74436: CALL 59915 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74440: LD_ADDR_EXP 76
74444: PUSH
74445: LD_EXP 76
74449: PPUSH
74450: LD_VAR 0 2
74454: PPUSH
74455: EMPTY
74456: PPUSH
74457: CALL_OW 1
74461: ST_TO_ADDR
// end ; continue ;
74462: GO 74030
// end ; for j in tmp do
74464: LD_ADDR_VAR 0 3
74468: PUSH
74469: LD_VAR 0 8
74473: PUSH
74474: FOR_IN
74475: IFFALSE 74811
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74477: LD_VAR 0 3
74481: PUSH
74482: LD_EXP 76
74486: PUSH
74487: LD_VAR 0 2
74491: ARRAY
74492: IN
74493: NOT
74494: PUSH
74495: LD_EXP 76
74499: PUSH
74500: LD_VAR 0 2
74504: ARRAY
74505: PUSH
74506: LD_INT 3
74508: LESS
74509: AND
74510: IFFALSE 74568
// begin SetTag ( j , 121 ) ;
74512: LD_VAR 0 3
74516: PPUSH
74517: LD_INT 121
74519: PPUSH
74520: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74524: LD_ADDR_EXP 76
74528: PUSH
74529: LD_EXP 76
74533: PPUSH
74534: LD_VAR 0 2
74538: PUSH
74539: LD_EXP 76
74543: PUSH
74544: LD_VAR 0 2
74548: ARRAY
74549: PUSH
74550: LD_INT 1
74552: PLUS
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: CALL 24294 0 3
74567: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74568: LD_VAR 0 3
74572: PUSH
74573: LD_EXP 76
74577: PUSH
74578: LD_VAR 0 2
74582: ARRAY
74583: IN
74584: IFFALSE 74809
// begin if GetClass ( j ) <> 4 then
74586: LD_VAR 0 3
74590: PPUSH
74591: CALL_OW 257
74595: PUSH
74596: LD_INT 4
74598: NONEQUAL
74599: IFFALSE 74652
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74601: LD_ADDR_EXP 76
74605: PUSH
74606: LD_EXP 76
74610: PPUSH
74611: LD_VAR 0 2
74615: PPUSH
74616: LD_EXP 76
74620: PUSH
74621: LD_VAR 0 2
74625: ARRAY
74626: PUSH
74627: LD_VAR 0 3
74631: DIFF
74632: PPUSH
74633: CALL_OW 1
74637: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74638: LD_VAR 0 3
74642: PPUSH
74643: LD_INT 0
74645: PPUSH
74646: CALL_OW 109
// continue ;
74650: GO 74474
// end ; if IsInUnit ( j ) then
74652: LD_VAR 0 3
74656: PPUSH
74657: CALL_OW 310
74661: IFFALSE 74672
// ComExitBuilding ( j ) ;
74663: LD_VAR 0 3
74667: PPUSH
74668: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74672: LD_ADDR_VAR 0 6
74676: PUSH
74677: LD_VAR 0 7
74681: PPUSH
74682: LD_VAR 0 3
74686: PPUSH
74687: CALL_OW 74
74691: ST_TO_ADDR
// if not ape then
74692: LD_VAR 0 6
74696: NOT
74697: IFFALSE 74701
// break ;
74699: GO 74811
// x := GetX ( ape ) ;
74701: LD_ADDR_VAR 0 4
74705: PUSH
74706: LD_VAR 0 6
74710: PPUSH
74711: CALL_OW 250
74715: ST_TO_ADDR
// y := GetY ( ape ) ;
74716: LD_ADDR_VAR 0 5
74720: PUSH
74721: LD_VAR 0 6
74725: PPUSH
74726: CALL_OW 251
74730: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74731: LD_VAR 0 4
74735: PPUSH
74736: LD_VAR 0 5
74740: PPUSH
74741: CALL_OW 488
74745: NOT
74746: PUSH
74747: LD_VAR 0 11
74751: PPUSH
74752: LD_VAR 0 4
74756: PPUSH
74757: LD_VAR 0 5
74761: PPUSH
74762: LD_INT 20
74764: PPUSH
74765: CALL 25190 0 4
74769: PUSH
74770: LD_INT 4
74772: ARRAY
74773: OR
74774: IFFALSE 74778
// break ;
74776: GO 74811
// if not HasTask ( j ) then
74778: LD_VAR 0 3
74782: PPUSH
74783: CALL_OW 314
74787: NOT
74788: IFFALSE 74809
// ComTameXY ( j , x , y ) ;
74790: LD_VAR 0 3
74794: PPUSH
74795: LD_VAR 0 4
74799: PPUSH
74800: LD_VAR 0 5
74804: PPUSH
74805: CALL_OW 131
// end ; end ;
74809: GO 74474
74811: POP
74812: POP
// end ;
74813: GO 74030
74815: POP
74816: POP
// end ;
74817: LD_VAR 0 1
74821: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74822: LD_INT 0
74824: PPUSH
74825: PPUSH
74826: PPUSH
74827: PPUSH
74828: PPUSH
74829: PPUSH
74830: PPUSH
74831: PPUSH
// if not mc_bases then
74832: LD_EXP 45
74836: NOT
74837: IFFALSE 74841
// exit ;
74839: GO 75467
// for i = 1 to mc_bases do
74841: LD_ADDR_VAR 0 2
74845: PUSH
74846: DOUBLE
74847: LD_INT 1
74849: DEC
74850: ST_TO_ADDR
74851: LD_EXP 45
74855: PUSH
74856: FOR_TO
74857: IFFALSE 75465
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74859: LD_EXP 74
74863: PUSH
74864: LD_VAR 0 2
74868: ARRAY
74869: NOT
74870: PUSH
74871: LD_EXP 74
74875: PUSH
74876: LD_VAR 0 2
74880: ARRAY
74881: PPUSH
74882: LD_INT 25
74884: PUSH
74885: LD_INT 12
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PPUSH
74892: CALL_OW 72
74896: NOT
74897: OR
74898: IFFALSE 74902
// continue ;
74900: GO 74856
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74902: LD_ADDR_VAR 0 5
74906: PUSH
74907: LD_EXP 74
74911: PUSH
74912: LD_VAR 0 2
74916: ARRAY
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PPUSH
74922: CALL_OW 255
74926: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74927: LD_VAR 0 5
74931: PPUSH
74932: LD_INT 2
74934: PPUSH
74935: CALL_OW 325
74939: IFFALSE 75192
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74941: LD_ADDR_VAR 0 4
74945: PUSH
74946: LD_EXP 74
74950: PUSH
74951: LD_VAR 0 2
74955: ARRAY
74956: PPUSH
74957: LD_INT 25
74959: PUSH
74960: LD_INT 16
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PPUSH
74967: CALL_OW 72
74971: ST_TO_ADDR
// if tmp < 6 then
74972: LD_VAR 0 4
74976: PUSH
74977: LD_INT 6
74979: LESS
74980: IFFALSE 75192
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74982: LD_ADDR_VAR 0 6
74986: PUSH
74987: LD_EXP 45
74991: PUSH
74992: LD_VAR 0 2
74996: ARRAY
74997: PPUSH
74998: LD_INT 2
75000: PUSH
75001: LD_INT 30
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 30
75013: PUSH
75014: LD_INT 1
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: LIST
75025: PPUSH
75026: CALL_OW 72
75030: ST_TO_ADDR
// if depot then
75031: LD_VAR 0 6
75035: IFFALSE 75192
// begin selected := 0 ;
75037: LD_ADDR_VAR 0 7
75041: PUSH
75042: LD_INT 0
75044: ST_TO_ADDR
// for j in depot do
75045: LD_ADDR_VAR 0 3
75049: PUSH
75050: LD_VAR 0 6
75054: PUSH
75055: FOR_IN
75056: IFFALSE 75087
// begin if UnitsInside ( j ) < 6 then
75058: LD_VAR 0 3
75062: PPUSH
75063: CALL_OW 313
75067: PUSH
75068: LD_INT 6
75070: LESS
75071: IFFALSE 75085
// begin selected := j ;
75073: LD_ADDR_VAR 0 7
75077: PUSH
75078: LD_VAR 0 3
75082: ST_TO_ADDR
// break ;
75083: GO 75087
// end ; end ;
75085: GO 75055
75087: POP
75088: POP
// if selected then
75089: LD_VAR 0 7
75093: IFFALSE 75192
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75095: LD_ADDR_VAR 0 3
75099: PUSH
75100: LD_EXP 74
75104: PUSH
75105: LD_VAR 0 2
75109: ARRAY
75110: PPUSH
75111: LD_INT 25
75113: PUSH
75114: LD_INT 12
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PPUSH
75121: CALL_OW 72
75125: PUSH
75126: FOR_IN
75127: IFFALSE 75190
// if not HasTask ( j ) then
75129: LD_VAR 0 3
75133: PPUSH
75134: CALL_OW 314
75138: NOT
75139: IFFALSE 75188
// begin if not IsInUnit ( j ) then
75141: LD_VAR 0 3
75145: PPUSH
75146: CALL_OW 310
75150: NOT
75151: IFFALSE 75167
// ComEnterUnit ( j , selected ) ;
75153: LD_VAR 0 3
75157: PPUSH
75158: LD_VAR 0 7
75162: PPUSH
75163: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75167: LD_VAR 0 3
75171: PPUSH
75172: LD_INT 16
75174: PPUSH
75175: CALL_OW 183
// AddComExitBuilding ( j ) ;
75179: LD_VAR 0 3
75183: PPUSH
75184: CALL_OW 182
// end ;
75188: GO 75126
75190: POP
75191: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75192: LD_VAR 0 5
75196: PPUSH
75197: LD_INT 11
75199: PPUSH
75200: CALL_OW 325
75204: IFFALSE 75463
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75206: LD_ADDR_VAR 0 4
75210: PUSH
75211: LD_EXP 74
75215: PUSH
75216: LD_VAR 0 2
75220: ARRAY
75221: PPUSH
75222: LD_INT 25
75224: PUSH
75225: LD_INT 16
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 72
75236: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75237: LD_VAR 0 4
75241: PUSH
75242: LD_INT 6
75244: GREATEREQUAL
75245: PUSH
75246: LD_VAR 0 5
75250: PPUSH
75251: LD_INT 2
75253: PPUSH
75254: CALL_OW 325
75258: NOT
75259: OR
75260: IFFALSE 75463
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75262: LD_ADDR_VAR 0 8
75266: PUSH
75267: LD_EXP 45
75271: PUSH
75272: LD_VAR 0 2
75276: ARRAY
75277: PPUSH
75278: LD_INT 2
75280: PUSH
75281: LD_INT 30
75283: PUSH
75284: LD_INT 4
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: LD_INT 30
75293: PUSH
75294: LD_INT 5
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: LIST
75305: PPUSH
75306: CALL_OW 72
75310: ST_TO_ADDR
// if barracks then
75311: LD_VAR 0 8
75315: IFFALSE 75463
// begin selected := 0 ;
75317: LD_ADDR_VAR 0 7
75321: PUSH
75322: LD_INT 0
75324: ST_TO_ADDR
// for j in barracks do
75325: LD_ADDR_VAR 0 3
75329: PUSH
75330: LD_VAR 0 8
75334: PUSH
75335: FOR_IN
75336: IFFALSE 75367
// begin if UnitsInside ( j ) < 6 then
75338: LD_VAR 0 3
75342: PPUSH
75343: CALL_OW 313
75347: PUSH
75348: LD_INT 6
75350: LESS
75351: IFFALSE 75365
// begin selected := j ;
75353: LD_ADDR_VAR 0 7
75357: PUSH
75358: LD_VAR 0 3
75362: ST_TO_ADDR
// break ;
75363: GO 75367
// end ; end ;
75365: GO 75335
75367: POP
75368: POP
// if selected then
75369: LD_VAR 0 7
75373: IFFALSE 75463
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75375: LD_ADDR_VAR 0 3
75379: PUSH
75380: LD_EXP 74
75384: PUSH
75385: LD_VAR 0 2
75389: ARRAY
75390: PPUSH
75391: LD_INT 25
75393: PUSH
75394: LD_INT 12
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PPUSH
75401: CALL_OW 72
75405: PUSH
75406: FOR_IN
75407: IFFALSE 75461
// if not IsInUnit ( j ) and not HasTask ( j ) then
75409: LD_VAR 0 3
75413: PPUSH
75414: CALL_OW 310
75418: NOT
75419: PUSH
75420: LD_VAR 0 3
75424: PPUSH
75425: CALL_OW 314
75429: NOT
75430: AND
75431: IFFALSE 75459
// begin ComEnterUnit ( j , selected ) ;
75433: LD_VAR 0 3
75437: PPUSH
75438: LD_VAR 0 7
75442: PPUSH
75443: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75447: LD_VAR 0 3
75451: PPUSH
75452: LD_INT 15
75454: PPUSH
75455: CALL_OW 183
// end ;
75459: GO 75406
75461: POP
75462: POP
// end ; end ; end ; end ; end ;
75463: GO 74856
75465: POP
75466: POP
// end ;
75467: LD_VAR 0 1
75471: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75472: LD_INT 0
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
// if not mc_bases then
75478: LD_EXP 45
75482: NOT
75483: IFFALSE 75487
// exit ;
75485: GO 75665
// for i = 1 to mc_bases do
75487: LD_ADDR_VAR 0 2
75491: PUSH
75492: DOUBLE
75493: LD_INT 1
75495: DEC
75496: ST_TO_ADDR
75497: LD_EXP 45
75501: PUSH
75502: FOR_TO
75503: IFFALSE 75663
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75505: LD_ADDR_VAR 0 4
75509: PUSH
75510: LD_EXP 45
75514: PUSH
75515: LD_VAR 0 2
75519: ARRAY
75520: PPUSH
75521: LD_INT 25
75523: PUSH
75524: LD_INT 9
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PPUSH
75531: CALL_OW 72
75535: ST_TO_ADDR
// if not tmp then
75536: LD_VAR 0 4
75540: NOT
75541: IFFALSE 75545
// continue ;
75543: GO 75502
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75545: LD_EXP 71
75549: PUSH
75550: LD_VAR 0 2
75554: ARRAY
75555: PPUSH
75556: LD_INT 29
75558: PPUSH
75559: CALL_OW 325
75563: NOT
75564: PUSH
75565: LD_EXP 71
75569: PUSH
75570: LD_VAR 0 2
75574: ARRAY
75575: PPUSH
75576: LD_INT 28
75578: PPUSH
75579: CALL_OW 325
75583: NOT
75584: AND
75585: IFFALSE 75589
// continue ;
75587: GO 75502
// for j in tmp do
75589: LD_ADDR_VAR 0 3
75593: PUSH
75594: LD_VAR 0 4
75598: PUSH
75599: FOR_IN
75600: IFFALSE 75659
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75602: LD_VAR 0 3
75606: PUSH
75607: LD_EXP 48
75611: PUSH
75612: LD_VAR 0 2
75616: ARRAY
75617: PUSH
75618: LD_INT 1
75620: ARRAY
75621: IN
75622: NOT
75623: PUSH
75624: LD_VAR 0 3
75628: PUSH
75629: LD_EXP 48
75633: PUSH
75634: LD_VAR 0 2
75638: ARRAY
75639: PUSH
75640: LD_INT 2
75642: ARRAY
75643: IN
75644: NOT
75645: AND
75646: IFFALSE 75657
// ComSpaceTimeShoot ( j ) ;
75648: LD_VAR 0 3
75652: PPUSH
75653: CALL 20291 0 1
75657: GO 75599
75659: POP
75660: POP
// end ;
75661: GO 75502
75663: POP
75664: POP
// end ;
75665: LD_VAR 0 1
75669: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75670: LD_INT 0
75672: PPUSH
75673: PPUSH
75674: PPUSH
75675: PPUSH
75676: PPUSH
75677: PPUSH
75678: PPUSH
75679: PPUSH
75680: PPUSH
// if not mc_bases then
75681: LD_EXP 45
75685: NOT
75686: IFFALSE 75690
// exit ;
75688: GO 76312
// for i = 1 to mc_bases do
75690: LD_ADDR_VAR 0 2
75694: PUSH
75695: DOUBLE
75696: LD_INT 1
75698: DEC
75699: ST_TO_ADDR
75700: LD_EXP 45
75704: PUSH
75705: FOR_TO
75706: IFFALSE 76310
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75708: LD_EXP 80
75712: PUSH
75713: LD_VAR 0 2
75717: ARRAY
75718: NOT
75719: PUSH
75720: LD_INT 38
75722: PPUSH
75723: LD_EXP 71
75727: PUSH
75728: LD_VAR 0 2
75732: ARRAY
75733: PPUSH
75734: CALL_OW 321
75738: PUSH
75739: LD_INT 2
75741: NONEQUAL
75742: OR
75743: IFFALSE 75747
// continue ;
75745: GO 75705
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75747: LD_ADDR_VAR 0 8
75751: PUSH
75752: LD_EXP 45
75756: PUSH
75757: LD_VAR 0 2
75761: ARRAY
75762: PPUSH
75763: LD_INT 30
75765: PUSH
75766: LD_INT 34
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PPUSH
75773: CALL_OW 72
75777: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75778: LD_ADDR_VAR 0 9
75782: PUSH
75783: LD_EXP 45
75787: PUSH
75788: LD_VAR 0 2
75792: ARRAY
75793: PPUSH
75794: LD_INT 25
75796: PUSH
75797: LD_INT 4
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PPUSH
75804: CALL_OW 72
75808: PPUSH
75809: LD_INT 0
75811: PPUSH
75812: CALL 52855 0 2
75816: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75817: LD_VAR 0 9
75821: NOT
75822: PUSH
75823: LD_VAR 0 8
75827: NOT
75828: OR
75829: PUSH
75830: LD_EXP 45
75834: PUSH
75835: LD_VAR 0 2
75839: ARRAY
75840: PPUSH
75841: LD_INT 124
75843: PPUSH
75844: CALL 52855 0 2
75848: OR
75849: IFFALSE 75853
// continue ;
75851: GO 75705
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75853: LD_EXP 81
75857: PUSH
75858: LD_VAR 0 2
75862: ARRAY
75863: PUSH
75864: LD_EXP 80
75868: PUSH
75869: LD_VAR 0 2
75873: ARRAY
75874: LESS
75875: PUSH
75876: LD_EXP 81
75880: PUSH
75881: LD_VAR 0 2
75885: ARRAY
75886: PUSH
75887: LD_VAR 0 8
75891: LESS
75892: AND
75893: IFFALSE 76308
// begin tmp := sci [ 1 ] ;
75895: LD_ADDR_VAR 0 7
75899: PUSH
75900: LD_VAR 0 9
75904: PUSH
75905: LD_INT 1
75907: ARRAY
75908: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75909: LD_VAR 0 7
75913: PPUSH
75914: LD_INT 124
75916: PPUSH
75917: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75921: LD_ADDR_VAR 0 3
75925: PUSH
75926: DOUBLE
75927: LD_EXP 80
75931: PUSH
75932: LD_VAR 0 2
75936: ARRAY
75937: INC
75938: ST_TO_ADDR
75939: LD_EXP 80
75943: PUSH
75944: LD_VAR 0 2
75948: ARRAY
75949: PUSH
75950: FOR_DOWNTO
75951: IFFALSE 76294
// begin if IsInUnit ( tmp ) then
75953: LD_VAR 0 7
75957: PPUSH
75958: CALL_OW 310
75962: IFFALSE 75973
// ComExitBuilding ( tmp ) ;
75964: LD_VAR 0 7
75968: PPUSH
75969: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75973: LD_INT 35
75975: PPUSH
75976: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75980: LD_VAR 0 7
75984: PPUSH
75985: CALL_OW 310
75989: NOT
75990: PUSH
75991: LD_VAR 0 7
75995: PPUSH
75996: CALL_OW 314
76000: NOT
76001: AND
76002: IFFALSE 75973
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
76004: LD_ADDR_VAR 0 6
76008: PUSH
76009: LD_VAR 0 7
76013: PPUSH
76014: CALL_OW 250
76018: PUSH
76019: LD_VAR 0 7
76023: PPUSH
76024: CALL_OW 251
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76033: LD_INT 35
76035: PPUSH
76036: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
76040: LD_ADDR_VAR 0 4
76044: PUSH
76045: LD_EXP 80
76049: PUSH
76050: LD_VAR 0 2
76054: ARRAY
76055: PUSH
76056: LD_VAR 0 3
76060: ARRAY
76061: PUSH
76062: LD_INT 1
76064: ARRAY
76065: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
76066: LD_ADDR_VAR 0 5
76070: PUSH
76071: LD_EXP 80
76075: PUSH
76076: LD_VAR 0 2
76080: ARRAY
76081: PUSH
76082: LD_VAR 0 3
76086: ARRAY
76087: PUSH
76088: LD_INT 2
76090: ARRAY
76091: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
76092: LD_VAR 0 7
76096: PPUSH
76097: LD_INT 10
76099: PPUSH
76100: CALL 26887 0 2
76104: PUSH
76105: LD_INT 4
76107: ARRAY
76108: IFFALSE 76146
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
76110: LD_VAR 0 7
76114: PPUSH
76115: LD_VAR 0 6
76119: PUSH
76120: LD_INT 1
76122: ARRAY
76123: PPUSH
76124: LD_VAR 0 6
76128: PUSH
76129: LD_INT 2
76131: ARRAY
76132: PPUSH
76133: CALL_OW 111
// wait ( 0 0$10 ) ;
76137: LD_INT 350
76139: PPUSH
76140: CALL_OW 67
// end else
76144: GO 76172
// begin ComMoveXY ( tmp , x , y ) ;
76146: LD_VAR 0 7
76150: PPUSH
76151: LD_VAR 0 4
76155: PPUSH
76156: LD_VAR 0 5
76160: PPUSH
76161: CALL_OW 111
// wait ( 0 0$3 ) ;
76165: LD_INT 105
76167: PPUSH
76168: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76172: LD_VAR 0 7
76176: PPUSH
76177: LD_VAR 0 4
76181: PPUSH
76182: LD_VAR 0 5
76186: PPUSH
76187: CALL_OW 307
76191: IFFALSE 76033
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76193: LD_VAR 0 7
76197: PPUSH
76198: LD_VAR 0 4
76202: PPUSH
76203: LD_VAR 0 5
76207: PPUSH
76208: LD_VAR 0 8
76212: PUSH
76213: LD_VAR 0 3
76217: ARRAY
76218: PPUSH
76219: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76223: LD_INT 35
76225: PPUSH
76226: CALL_OW 67
// until not HasTask ( tmp ) ;
76230: LD_VAR 0 7
76234: PPUSH
76235: CALL_OW 314
76239: NOT
76240: IFFALSE 76223
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76242: LD_ADDR_EXP 81
76246: PUSH
76247: LD_EXP 81
76251: PPUSH
76252: LD_VAR 0 2
76256: PUSH
76257: LD_EXP 81
76261: PUSH
76262: LD_VAR 0 2
76266: ARRAY
76267: PUSH
76268: LD_INT 1
76270: PLUS
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PPUSH
76276: LD_VAR 0 8
76280: PUSH
76281: LD_VAR 0 3
76285: ARRAY
76286: PPUSH
76287: CALL 24294 0 3
76291: ST_TO_ADDR
// end ;
76292: GO 75950
76294: POP
76295: POP
// MC_Reset ( i , 124 ) ;
76296: LD_VAR 0 2
76300: PPUSH
76301: LD_INT 124
76303: PPUSH
76304: CALL 59915 0 2
// end ; end ;
76308: GO 75705
76310: POP
76311: POP
// end ;
76312: LD_VAR 0 1
76316: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76317: LD_INT 0
76319: PPUSH
76320: PPUSH
76321: PPUSH
// if not mc_bases then
76322: LD_EXP 45
76326: NOT
76327: IFFALSE 76331
// exit ;
76329: GO 76937
// for i = 1 to mc_bases do
76331: LD_ADDR_VAR 0 2
76335: PUSH
76336: DOUBLE
76337: LD_INT 1
76339: DEC
76340: ST_TO_ADDR
76341: LD_EXP 45
76345: PUSH
76346: FOR_TO
76347: IFFALSE 76935
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76349: LD_ADDR_VAR 0 3
76353: PUSH
76354: LD_EXP 45
76358: PUSH
76359: LD_VAR 0 2
76363: ARRAY
76364: PPUSH
76365: LD_INT 25
76367: PUSH
76368: LD_INT 4
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PPUSH
76375: CALL_OW 72
76379: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76380: LD_VAR 0 3
76384: NOT
76385: PUSH
76386: LD_EXP 82
76390: PUSH
76391: LD_VAR 0 2
76395: ARRAY
76396: NOT
76397: OR
76398: PUSH
76399: LD_EXP 45
76403: PUSH
76404: LD_VAR 0 2
76408: ARRAY
76409: PPUSH
76410: LD_INT 2
76412: PUSH
76413: LD_INT 30
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 30
76425: PUSH
76426: LD_INT 1
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: LIST
76437: PPUSH
76438: CALL_OW 72
76442: NOT
76443: OR
76444: IFFALSE 76494
// begin if mc_deposits_finder [ i ] then
76446: LD_EXP 83
76450: PUSH
76451: LD_VAR 0 2
76455: ARRAY
76456: IFFALSE 76492
// begin MC_Reset ( i , 125 ) ;
76458: LD_VAR 0 2
76462: PPUSH
76463: LD_INT 125
76465: PPUSH
76466: CALL 59915 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76470: LD_ADDR_EXP 83
76474: PUSH
76475: LD_EXP 83
76479: PPUSH
76480: LD_VAR 0 2
76484: PPUSH
76485: EMPTY
76486: PPUSH
76487: CALL_OW 1
76491: ST_TO_ADDR
// end ; continue ;
76492: GO 76346
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76494: LD_EXP 82
76498: PUSH
76499: LD_VAR 0 2
76503: ARRAY
76504: PUSH
76505: LD_INT 1
76507: ARRAY
76508: PUSH
76509: LD_INT 3
76511: ARRAY
76512: PUSH
76513: LD_INT 1
76515: EQUAL
76516: PUSH
76517: LD_INT 20
76519: PPUSH
76520: LD_EXP 71
76524: PUSH
76525: LD_VAR 0 2
76529: ARRAY
76530: PPUSH
76531: CALL_OW 321
76535: PUSH
76536: LD_INT 2
76538: NONEQUAL
76539: AND
76540: IFFALSE 76590
// begin if mc_deposits_finder [ i ] then
76542: LD_EXP 83
76546: PUSH
76547: LD_VAR 0 2
76551: ARRAY
76552: IFFALSE 76588
// begin MC_Reset ( i , 125 ) ;
76554: LD_VAR 0 2
76558: PPUSH
76559: LD_INT 125
76561: PPUSH
76562: CALL 59915 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76566: LD_ADDR_EXP 83
76570: PUSH
76571: LD_EXP 83
76575: PPUSH
76576: LD_VAR 0 2
76580: PPUSH
76581: EMPTY
76582: PPUSH
76583: CALL_OW 1
76587: ST_TO_ADDR
// end ; continue ;
76588: GO 76346
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76590: LD_EXP 82
76594: PUSH
76595: LD_VAR 0 2
76599: ARRAY
76600: PUSH
76601: LD_INT 1
76603: ARRAY
76604: PUSH
76605: LD_INT 1
76607: ARRAY
76608: PPUSH
76609: LD_EXP 82
76613: PUSH
76614: LD_VAR 0 2
76618: ARRAY
76619: PUSH
76620: LD_INT 1
76622: ARRAY
76623: PUSH
76624: LD_INT 2
76626: ARRAY
76627: PPUSH
76628: LD_EXP 71
76632: PUSH
76633: LD_VAR 0 2
76637: ARRAY
76638: PPUSH
76639: CALL_OW 440
76643: IFFALSE 76686
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76645: LD_ADDR_EXP 82
76649: PUSH
76650: LD_EXP 82
76654: PPUSH
76655: LD_VAR 0 2
76659: PPUSH
76660: LD_EXP 82
76664: PUSH
76665: LD_VAR 0 2
76669: ARRAY
76670: PPUSH
76671: LD_INT 1
76673: PPUSH
76674: CALL_OW 3
76678: PPUSH
76679: CALL_OW 1
76683: ST_TO_ADDR
76684: GO 76933
// begin if not mc_deposits_finder [ i ] then
76686: LD_EXP 83
76690: PUSH
76691: LD_VAR 0 2
76695: ARRAY
76696: NOT
76697: IFFALSE 76749
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76699: LD_ADDR_EXP 83
76703: PUSH
76704: LD_EXP 83
76708: PPUSH
76709: LD_VAR 0 2
76713: PPUSH
76714: LD_VAR 0 3
76718: PUSH
76719: LD_INT 1
76721: ARRAY
76722: PUSH
76723: EMPTY
76724: LIST
76725: PPUSH
76726: CALL_OW 1
76730: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76731: LD_VAR 0 3
76735: PUSH
76736: LD_INT 1
76738: ARRAY
76739: PPUSH
76740: LD_INT 125
76742: PPUSH
76743: CALL_OW 109
// end else
76747: GO 76933
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76749: LD_EXP 83
76753: PUSH
76754: LD_VAR 0 2
76758: ARRAY
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PPUSH
76764: CALL_OW 310
76768: IFFALSE 76791
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76770: LD_EXP 83
76774: PUSH
76775: LD_VAR 0 2
76779: ARRAY
76780: PUSH
76781: LD_INT 1
76783: ARRAY
76784: PPUSH
76785: CALL_OW 122
76789: GO 76933
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76791: LD_EXP 83
76795: PUSH
76796: LD_VAR 0 2
76800: ARRAY
76801: PUSH
76802: LD_INT 1
76804: ARRAY
76805: PPUSH
76806: CALL_OW 314
76810: NOT
76811: PUSH
76812: LD_EXP 83
76816: PUSH
76817: LD_VAR 0 2
76821: ARRAY
76822: PUSH
76823: LD_INT 1
76825: ARRAY
76826: PPUSH
76827: LD_EXP 82
76831: PUSH
76832: LD_VAR 0 2
76836: ARRAY
76837: PUSH
76838: LD_INT 1
76840: ARRAY
76841: PUSH
76842: LD_INT 1
76844: ARRAY
76845: PPUSH
76846: LD_EXP 82
76850: PUSH
76851: LD_VAR 0 2
76855: ARRAY
76856: PUSH
76857: LD_INT 1
76859: ARRAY
76860: PUSH
76861: LD_INT 2
76863: ARRAY
76864: PPUSH
76865: CALL_OW 297
76869: PUSH
76870: LD_INT 6
76872: GREATER
76873: AND
76874: IFFALSE 76933
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76876: LD_EXP 83
76880: PUSH
76881: LD_VAR 0 2
76885: ARRAY
76886: PUSH
76887: LD_INT 1
76889: ARRAY
76890: PPUSH
76891: LD_EXP 82
76895: PUSH
76896: LD_VAR 0 2
76900: ARRAY
76901: PUSH
76902: LD_INT 1
76904: ARRAY
76905: PUSH
76906: LD_INT 1
76908: ARRAY
76909: PPUSH
76910: LD_EXP 82
76914: PUSH
76915: LD_VAR 0 2
76919: ARRAY
76920: PUSH
76921: LD_INT 1
76923: ARRAY
76924: PUSH
76925: LD_INT 2
76927: ARRAY
76928: PPUSH
76929: CALL_OW 111
// end ; end ; end ;
76933: GO 76346
76935: POP
76936: POP
// end ;
76937: LD_VAR 0 1
76941: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76942: LD_INT 0
76944: PPUSH
76945: PPUSH
76946: PPUSH
76947: PPUSH
76948: PPUSH
76949: PPUSH
76950: PPUSH
76951: PPUSH
76952: PPUSH
76953: PPUSH
76954: PPUSH
// if not mc_bases then
76955: LD_EXP 45
76959: NOT
76960: IFFALSE 76964
// exit ;
76962: GO 77904
// for i = 1 to mc_bases do
76964: LD_ADDR_VAR 0 2
76968: PUSH
76969: DOUBLE
76970: LD_INT 1
76972: DEC
76973: ST_TO_ADDR
76974: LD_EXP 45
76978: PUSH
76979: FOR_TO
76980: IFFALSE 77902
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76982: LD_EXP 45
76986: PUSH
76987: LD_VAR 0 2
76991: ARRAY
76992: NOT
76993: PUSH
76994: LD_EXP 68
76998: PUSH
76999: LD_VAR 0 2
77003: ARRAY
77004: OR
77005: IFFALSE 77009
// continue ;
77007: GO 76979
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
77009: LD_ADDR_VAR 0 7
77013: PUSH
77014: LD_EXP 45
77018: PUSH
77019: LD_VAR 0 2
77023: ARRAY
77024: PUSH
77025: LD_INT 1
77027: ARRAY
77028: PPUSH
77029: CALL_OW 248
77033: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
77034: LD_VAR 0 7
77038: PUSH
77039: LD_INT 3
77041: EQUAL
77042: PUSH
77043: LD_EXP 64
77047: PUSH
77048: LD_VAR 0 2
77052: ARRAY
77053: PUSH
77054: LD_EXP 67
77058: PUSH
77059: LD_VAR 0 2
77063: ARRAY
77064: UNION
77065: PPUSH
77066: LD_INT 33
77068: PUSH
77069: LD_INT 2
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PPUSH
77076: CALL_OW 72
77080: NOT
77081: OR
77082: IFFALSE 77086
// continue ;
77084: GO 76979
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
77086: LD_ADDR_VAR 0 9
77090: PUSH
77091: LD_EXP 45
77095: PUSH
77096: LD_VAR 0 2
77100: ARRAY
77101: PPUSH
77102: LD_INT 30
77104: PUSH
77105: LD_INT 36
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PPUSH
77112: CALL_OW 72
77116: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
77117: LD_ADDR_VAR 0 10
77121: PUSH
77122: LD_EXP 64
77126: PUSH
77127: LD_VAR 0 2
77131: ARRAY
77132: PPUSH
77133: LD_INT 34
77135: PUSH
77136: LD_INT 31
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PPUSH
77143: CALL_OW 72
77147: ST_TO_ADDR
// if not cts and not mcts then
77148: LD_VAR 0 9
77152: NOT
77153: PUSH
77154: LD_VAR 0 10
77158: NOT
77159: AND
77160: IFFALSE 77164
// continue ;
77162: GO 76979
// x := cts ;
77164: LD_ADDR_VAR 0 11
77168: PUSH
77169: LD_VAR 0 9
77173: ST_TO_ADDR
// if not x then
77174: LD_VAR 0 11
77178: NOT
77179: IFFALSE 77191
// x := mcts ;
77181: LD_ADDR_VAR 0 11
77185: PUSH
77186: LD_VAR 0 10
77190: ST_TO_ADDR
// if not x then
77191: LD_VAR 0 11
77195: NOT
77196: IFFALSE 77200
// continue ;
77198: GO 76979
// if mc_remote_driver [ i ] then
77200: LD_EXP 85
77204: PUSH
77205: LD_VAR 0 2
77209: ARRAY
77210: IFFALSE 77597
// for j in mc_remote_driver [ i ] do
77212: LD_ADDR_VAR 0 3
77216: PUSH
77217: LD_EXP 85
77221: PUSH
77222: LD_VAR 0 2
77226: ARRAY
77227: PUSH
77228: FOR_IN
77229: IFFALSE 77595
// begin if GetClass ( j ) <> 3 then
77231: LD_VAR 0 3
77235: PPUSH
77236: CALL_OW 257
77240: PUSH
77241: LD_INT 3
77243: NONEQUAL
77244: IFFALSE 77297
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77246: LD_ADDR_EXP 85
77250: PUSH
77251: LD_EXP 85
77255: PPUSH
77256: LD_VAR 0 2
77260: PPUSH
77261: LD_EXP 85
77265: PUSH
77266: LD_VAR 0 2
77270: ARRAY
77271: PUSH
77272: LD_VAR 0 3
77276: DIFF
77277: PPUSH
77278: CALL_OW 1
77282: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77283: LD_VAR 0 3
77287: PPUSH
77288: LD_INT 0
77290: PPUSH
77291: CALL_OW 109
// continue ;
77295: GO 77228
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77297: LD_EXP 64
77301: PUSH
77302: LD_VAR 0 2
77306: ARRAY
77307: PPUSH
77308: LD_INT 34
77310: PUSH
77311: LD_INT 31
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PUSH
77318: LD_INT 58
77320: PUSH
77321: EMPTY
77322: LIST
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: PPUSH
77328: CALL_OW 72
77332: PUSH
77333: LD_VAR 0 3
77337: PPUSH
77338: CALL 52943 0 1
77342: NOT
77343: AND
77344: IFFALSE 77415
// begin if IsInUnit ( j ) then
77346: LD_VAR 0 3
77350: PPUSH
77351: CALL_OW 310
77355: IFFALSE 77366
// ComExitBuilding ( j ) ;
77357: LD_VAR 0 3
77361: PPUSH
77362: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77366: LD_VAR 0 3
77370: PPUSH
77371: LD_EXP 64
77375: PUSH
77376: LD_VAR 0 2
77380: ARRAY
77381: PPUSH
77382: LD_INT 34
77384: PUSH
77385: LD_INT 31
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: PUSH
77392: LD_INT 58
77394: PUSH
77395: EMPTY
77396: LIST
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PPUSH
77402: CALL_OW 72
77406: PUSH
77407: LD_INT 1
77409: ARRAY
77410: PPUSH
77411: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77415: LD_VAR 0 3
77419: PPUSH
77420: CALL_OW 310
77424: NOT
77425: PUSH
77426: LD_VAR 0 3
77430: PPUSH
77431: CALL_OW 310
77435: PPUSH
77436: CALL_OW 266
77440: PUSH
77441: LD_INT 36
77443: NONEQUAL
77444: PUSH
77445: LD_VAR 0 3
77449: PPUSH
77450: CALL 52943 0 1
77454: NOT
77455: AND
77456: OR
77457: IFFALSE 77593
// begin if IsInUnit ( j ) then
77459: LD_VAR 0 3
77463: PPUSH
77464: CALL_OW 310
77468: IFFALSE 77479
// ComExitBuilding ( j ) ;
77470: LD_VAR 0 3
77474: PPUSH
77475: CALL_OW 122
// ct := 0 ;
77479: LD_ADDR_VAR 0 8
77483: PUSH
77484: LD_INT 0
77486: ST_TO_ADDR
// for k in x do
77487: LD_ADDR_VAR 0 4
77491: PUSH
77492: LD_VAR 0 11
77496: PUSH
77497: FOR_IN
77498: IFFALSE 77571
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77500: LD_VAR 0 4
77504: PPUSH
77505: CALL_OW 264
77509: PUSH
77510: LD_INT 31
77512: EQUAL
77513: PUSH
77514: LD_VAR 0 4
77518: PPUSH
77519: CALL_OW 311
77523: NOT
77524: AND
77525: PUSH
77526: LD_VAR 0 4
77530: PPUSH
77531: CALL_OW 266
77535: PUSH
77536: LD_INT 36
77538: EQUAL
77539: PUSH
77540: LD_VAR 0 4
77544: PPUSH
77545: CALL_OW 313
77549: PUSH
77550: LD_INT 3
77552: LESS
77553: AND
77554: OR
77555: IFFALSE 77569
// begin ct := k ;
77557: LD_ADDR_VAR 0 8
77561: PUSH
77562: LD_VAR 0 4
77566: ST_TO_ADDR
// break ;
77567: GO 77571
// end ;
77569: GO 77497
77571: POP
77572: POP
// if ct then
77573: LD_VAR 0 8
77577: IFFALSE 77593
// ComEnterUnit ( j , ct ) ;
77579: LD_VAR 0 3
77583: PPUSH
77584: LD_VAR 0 8
77588: PPUSH
77589: CALL_OW 120
// end ; end ;
77593: GO 77228
77595: POP
77596: POP
// places := 0 ;
77597: LD_ADDR_VAR 0 5
77601: PUSH
77602: LD_INT 0
77604: ST_TO_ADDR
// for j = 1 to x do
77605: LD_ADDR_VAR 0 3
77609: PUSH
77610: DOUBLE
77611: LD_INT 1
77613: DEC
77614: ST_TO_ADDR
77615: LD_VAR 0 11
77619: PUSH
77620: FOR_TO
77621: IFFALSE 77697
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77623: LD_VAR 0 11
77627: PUSH
77628: LD_VAR 0 3
77632: ARRAY
77633: PPUSH
77634: CALL_OW 264
77638: PUSH
77639: LD_INT 31
77641: EQUAL
77642: IFFALSE 77660
// places := places + 1 else
77644: LD_ADDR_VAR 0 5
77648: PUSH
77649: LD_VAR 0 5
77653: PUSH
77654: LD_INT 1
77656: PLUS
77657: ST_TO_ADDR
77658: GO 77695
// if GetBType ( x [ j ] ) = b_control_tower then
77660: LD_VAR 0 11
77664: PUSH
77665: LD_VAR 0 3
77669: ARRAY
77670: PPUSH
77671: CALL_OW 266
77675: PUSH
77676: LD_INT 36
77678: EQUAL
77679: IFFALSE 77695
// places := places + 3 ;
77681: LD_ADDR_VAR 0 5
77685: PUSH
77686: LD_VAR 0 5
77690: PUSH
77691: LD_INT 3
77693: PLUS
77694: ST_TO_ADDR
77695: GO 77620
77697: POP
77698: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77699: LD_VAR 0 5
77703: PUSH
77704: LD_INT 0
77706: EQUAL
77707: PUSH
77708: LD_VAR 0 5
77712: PUSH
77713: LD_EXP 85
77717: PUSH
77718: LD_VAR 0 2
77722: ARRAY
77723: LESSEQUAL
77724: OR
77725: IFFALSE 77729
// continue ;
77727: GO 76979
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77729: LD_ADDR_VAR 0 6
77733: PUSH
77734: LD_EXP 45
77738: PUSH
77739: LD_VAR 0 2
77743: ARRAY
77744: PPUSH
77745: LD_INT 25
77747: PUSH
77748: LD_INT 3
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PPUSH
77755: CALL_OW 72
77759: PUSH
77760: LD_EXP 85
77764: PUSH
77765: LD_VAR 0 2
77769: ARRAY
77770: DIFF
77771: PPUSH
77772: LD_INT 3
77774: PPUSH
77775: CALL 53843 0 2
77779: ST_TO_ADDR
// for j in tmp do
77780: LD_ADDR_VAR 0 3
77784: PUSH
77785: LD_VAR 0 6
77789: PUSH
77790: FOR_IN
77791: IFFALSE 77826
// if GetTag ( j ) > 0 then
77793: LD_VAR 0 3
77797: PPUSH
77798: CALL_OW 110
77802: PUSH
77803: LD_INT 0
77805: GREATER
77806: IFFALSE 77824
// tmp := tmp diff j ;
77808: LD_ADDR_VAR 0 6
77812: PUSH
77813: LD_VAR 0 6
77817: PUSH
77818: LD_VAR 0 3
77822: DIFF
77823: ST_TO_ADDR
77824: GO 77790
77826: POP
77827: POP
// if not tmp then
77828: LD_VAR 0 6
77832: NOT
77833: IFFALSE 77837
// continue ;
77835: GO 76979
// if places then
77837: LD_VAR 0 5
77841: IFFALSE 77900
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77843: LD_ADDR_EXP 85
77847: PUSH
77848: LD_EXP 85
77852: PPUSH
77853: LD_VAR 0 2
77857: PPUSH
77858: LD_EXP 85
77862: PUSH
77863: LD_VAR 0 2
77867: ARRAY
77868: PUSH
77869: LD_VAR 0 6
77873: PUSH
77874: LD_INT 1
77876: ARRAY
77877: UNION
77878: PPUSH
77879: CALL_OW 1
77883: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77884: LD_VAR 0 6
77888: PUSH
77889: LD_INT 1
77891: ARRAY
77892: PPUSH
77893: LD_INT 126
77895: PPUSH
77896: CALL_OW 109
// end ; end ;
77900: GO 76979
77902: POP
77903: POP
// end ;
77904: LD_VAR 0 1
77908: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77909: LD_INT 0
77911: PPUSH
77912: PPUSH
77913: PPUSH
77914: PPUSH
77915: PPUSH
77916: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77917: LD_VAR 0 1
77921: NOT
77922: PUSH
77923: LD_VAR 0 2
77927: NOT
77928: OR
77929: PUSH
77930: LD_VAR 0 3
77934: NOT
77935: OR
77936: PUSH
77937: LD_VAR 0 4
77941: PUSH
77942: LD_INT 1
77944: PUSH
77945: LD_INT 2
77947: PUSH
77948: LD_INT 3
77950: PUSH
77951: LD_INT 4
77953: PUSH
77954: LD_INT 5
77956: PUSH
77957: LD_INT 8
77959: PUSH
77960: LD_INT 9
77962: PUSH
77963: LD_INT 15
77965: PUSH
77966: LD_INT 16
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: IN
77980: NOT
77981: OR
77982: IFFALSE 77986
// exit ;
77984: GO 78886
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77986: LD_ADDR_VAR 0 2
77990: PUSH
77991: LD_VAR 0 2
77995: PPUSH
77996: LD_INT 21
77998: PUSH
77999: LD_INT 3
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PUSH
78006: LD_INT 24
78008: PUSH
78009: LD_INT 250
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: PPUSH
78020: CALL_OW 72
78024: ST_TO_ADDR
// case class of 1 , 15 :
78025: LD_VAR 0 4
78029: PUSH
78030: LD_INT 1
78032: DOUBLE
78033: EQUAL
78034: IFTRUE 78044
78036: LD_INT 15
78038: DOUBLE
78039: EQUAL
78040: IFTRUE 78044
78042: GO 78129
78044: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
78045: LD_ADDR_VAR 0 8
78049: PUSH
78050: LD_VAR 0 2
78054: PPUSH
78055: LD_INT 2
78057: PUSH
78058: LD_INT 30
78060: PUSH
78061: LD_INT 32
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: LD_INT 30
78070: PUSH
78071: LD_INT 31
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: LIST
78082: PPUSH
78083: CALL_OW 72
78087: PUSH
78088: LD_VAR 0 2
78092: PPUSH
78093: LD_INT 2
78095: PUSH
78096: LD_INT 30
78098: PUSH
78099: LD_INT 4
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 30
78108: PUSH
78109: LD_INT 5
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: LIST
78120: PPUSH
78121: CALL_OW 72
78125: ADD
78126: ST_TO_ADDR
78127: GO 78375
78129: LD_INT 2
78131: DOUBLE
78132: EQUAL
78133: IFTRUE 78143
78135: LD_INT 16
78137: DOUBLE
78138: EQUAL
78139: IFTRUE 78143
78141: GO 78189
78143: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78144: LD_ADDR_VAR 0 8
78148: PUSH
78149: LD_VAR 0 2
78153: PPUSH
78154: LD_INT 2
78156: PUSH
78157: LD_INT 30
78159: PUSH
78160: LD_INT 0
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PUSH
78167: LD_INT 30
78169: PUSH
78170: LD_INT 1
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: LIST
78181: PPUSH
78182: CALL_OW 72
78186: ST_TO_ADDR
78187: GO 78375
78189: LD_INT 3
78191: DOUBLE
78192: EQUAL
78193: IFTRUE 78197
78195: GO 78243
78197: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78198: LD_ADDR_VAR 0 8
78202: PUSH
78203: LD_VAR 0 2
78207: PPUSH
78208: LD_INT 2
78210: PUSH
78211: LD_INT 30
78213: PUSH
78214: LD_INT 2
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: LD_INT 30
78223: PUSH
78224: LD_INT 3
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: LIST
78235: PPUSH
78236: CALL_OW 72
78240: ST_TO_ADDR
78241: GO 78375
78243: LD_INT 4
78245: DOUBLE
78246: EQUAL
78247: IFTRUE 78251
78249: GO 78308
78251: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78252: LD_ADDR_VAR 0 8
78256: PUSH
78257: LD_VAR 0 2
78261: PPUSH
78262: LD_INT 2
78264: PUSH
78265: LD_INT 30
78267: PUSH
78268: LD_INT 6
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 30
78277: PUSH
78278: LD_INT 7
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 30
78287: PUSH
78288: LD_INT 8
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: LIST
78299: LIST
78300: PPUSH
78301: CALL_OW 72
78305: ST_TO_ADDR
78306: GO 78375
78308: LD_INT 5
78310: DOUBLE
78311: EQUAL
78312: IFTRUE 78328
78314: LD_INT 8
78316: DOUBLE
78317: EQUAL
78318: IFTRUE 78328
78320: LD_INT 9
78322: DOUBLE
78323: EQUAL
78324: IFTRUE 78328
78326: GO 78374
78328: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78329: LD_ADDR_VAR 0 8
78333: PUSH
78334: LD_VAR 0 2
78338: PPUSH
78339: LD_INT 2
78341: PUSH
78342: LD_INT 30
78344: PUSH
78345: LD_INT 4
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 30
78354: PUSH
78355: LD_INT 5
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: LIST
78366: PPUSH
78367: CALL_OW 72
78371: ST_TO_ADDR
78372: GO 78375
78374: POP
// if not tmp then
78375: LD_VAR 0 8
78379: NOT
78380: IFFALSE 78384
// exit ;
78382: GO 78886
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78384: LD_VAR 0 4
78388: PUSH
78389: LD_INT 1
78391: PUSH
78392: LD_INT 15
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: IN
78399: PUSH
78400: LD_EXP 54
78404: PUSH
78405: LD_VAR 0 1
78409: ARRAY
78410: AND
78411: IFFALSE 78567
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78413: LD_ADDR_VAR 0 9
78417: PUSH
78418: LD_EXP 54
78422: PUSH
78423: LD_VAR 0 1
78427: ARRAY
78428: PUSH
78429: LD_INT 1
78431: ARRAY
78432: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78433: LD_VAR 0 9
78437: PUSH
78438: LD_EXP 55
78442: PUSH
78443: LD_VAR 0 1
78447: ARRAY
78448: IN
78449: NOT
78450: IFFALSE 78565
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78452: LD_ADDR_EXP 55
78456: PUSH
78457: LD_EXP 55
78461: PPUSH
78462: LD_VAR 0 1
78466: PUSH
78467: LD_EXP 55
78471: PUSH
78472: LD_VAR 0 1
78476: ARRAY
78477: PUSH
78478: LD_INT 1
78480: PLUS
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PPUSH
78486: LD_VAR 0 9
78490: PPUSH
78491: CALL 24294 0 3
78495: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78496: LD_ADDR_EXP 54
78500: PUSH
78501: LD_EXP 54
78505: PPUSH
78506: LD_VAR 0 1
78510: PPUSH
78511: LD_EXP 54
78515: PUSH
78516: LD_VAR 0 1
78520: ARRAY
78521: PUSH
78522: LD_VAR 0 9
78526: DIFF
78527: PPUSH
78528: CALL_OW 1
78532: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78533: LD_VAR 0 3
78537: PPUSH
78538: LD_EXP 55
78542: PUSH
78543: LD_VAR 0 1
78547: ARRAY
78548: PUSH
78549: LD_EXP 55
78553: PUSH
78554: LD_VAR 0 1
78558: ARRAY
78559: ARRAY
78560: PPUSH
78561: CALL_OW 120
// end ; exit ;
78565: GO 78886
// end ; if tmp > 1 then
78567: LD_VAR 0 8
78571: PUSH
78572: LD_INT 1
78574: GREATER
78575: IFFALSE 78679
// for i = 2 to tmp do
78577: LD_ADDR_VAR 0 6
78581: PUSH
78582: DOUBLE
78583: LD_INT 2
78585: DEC
78586: ST_TO_ADDR
78587: LD_VAR 0 8
78591: PUSH
78592: FOR_TO
78593: IFFALSE 78677
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78595: LD_VAR 0 8
78599: PUSH
78600: LD_VAR 0 6
78604: ARRAY
78605: PPUSH
78606: CALL_OW 461
78610: PUSH
78611: LD_INT 6
78613: EQUAL
78614: IFFALSE 78675
// begin x := tmp [ i ] ;
78616: LD_ADDR_VAR 0 9
78620: PUSH
78621: LD_VAR 0 8
78625: PUSH
78626: LD_VAR 0 6
78630: ARRAY
78631: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78632: LD_ADDR_VAR 0 8
78636: PUSH
78637: LD_VAR 0 8
78641: PPUSH
78642: LD_VAR 0 6
78646: PPUSH
78647: CALL_OW 3
78651: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78652: LD_ADDR_VAR 0 8
78656: PUSH
78657: LD_VAR 0 8
78661: PPUSH
78662: LD_INT 1
78664: PPUSH
78665: LD_VAR 0 9
78669: PPUSH
78670: CALL_OW 2
78674: ST_TO_ADDR
// end ;
78675: GO 78592
78677: POP
78678: POP
// for i in tmp do
78679: LD_ADDR_VAR 0 6
78683: PUSH
78684: LD_VAR 0 8
78688: PUSH
78689: FOR_IN
78690: IFFALSE 78759
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78692: LD_VAR 0 6
78696: PPUSH
78697: CALL_OW 313
78701: PUSH
78702: LD_INT 6
78704: LESS
78705: PUSH
78706: LD_VAR 0 6
78710: PPUSH
78711: CALL_OW 266
78715: PUSH
78716: LD_INT 31
78718: PUSH
78719: LD_INT 32
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: IN
78726: NOT
78727: AND
78728: PUSH
78729: LD_VAR 0 6
78733: PPUSH
78734: CALL_OW 313
78738: PUSH
78739: LD_INT 0
78741: EQUAL
78742: OR
78743: IFFALSE 78757
// begin j := i ;
78745: LD_ADDR_VAR 0 7
78749: PUSH
78750: LD_VAR 0 6
78754: ST_TO_ADDR
// break ;
78755: GO 78759
// end ; end ;
78757: GO 78689
78759: POP
78760: POP
// if j then
78761: LD_VAR 0 7
78765: IFFALSE 78783
// ComEnterUnit ( unit , j ) else
78767: LD_VAR 0 3
78771: PPUSH
78772: LD_VAR 0 7
78776: PPUSH
78777: CALL_OW 120
78781: GO 78886
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78783: LD_ADDR_VAR 0 10
78787: PUSH
78788: LD_VAR 0 2
78792: PPUSH
78793: LD_INT 2
78795: PUSH
78796: LD_INT 30
78798: PUSH
78799: LD_INT 0
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 30
78808: PUSH
78809: LD_INT 1
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: LIST
78820: PPUSH
78821: CALL_OW 72
78825: ST_TO_ADDR
// if depot then
78826: LD_VAR 0 10
78830: IFFALSE 78886
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78832: LD_ADDR_VAR 0 10
78836: PUSH
78837: LD_VAR 0 10
78841: PPUSH
78842: LD_VAR 0 3
78846: PPUSH
78847: CALL_OW 74
78851: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78852: LD_VAR 0 3
78856: PPUSH
78857: LD_VAR 0 10
78861: PPUSH
78862: CALL_OW 296
78866: PUSH
78867: LD_INT 10
78869: GREATER
78870: IFFALSE 78886
// ComStandNearbyBuilding ( unit , depot ) ;
78872: LD_VAR 0 3
78876: PPUSH
78877: LD_VAR 0 10
78881: PPUSH
78882: CALL 20908 0 2
// end ; end ; end ;
78886: LD_VAR 0 5
78890: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78891: LD_INT 0
78893: PPUSH
78894: PPUSH
78895: PPUSH
78896: PPUSH
// if not mc_bases then
78897: LD_EXP 45
78901: NOT
78902: IFFALSE 78906
// exit ;
78904: GO 79145
// for i = 1 to mc_bases do
78906: LD_ADDR_VAR 0 2
78910: PUSH
78911: DOUBLE
78912: LD_INT 1
78914: DEC
78915: ST_TO_ADDR
78916: LD_EXP 45
78920: PUSH
78921: FOR_TO
78922: IFFALSE 79143
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78924: LD_ADDR_VAR 0 4
78928: PUSH
78929: LD_EXP 45
78933: PUSH
78934: LD_VAR 0 2
78938: ARRAY
78939: PPUSH
78940: LD_INT 21
78942: PUSH
78943: LD_INT 1
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PPUSH
78950: CALL_OW 72
78954: PUSH
78955: LD_EXP 74
78959: PUSH
78960: LD_VAR 0 2
78964: ARRAY
78965: UNION
78966: ST_TO_ADDR
// if not tmp then
78967: LD_VAR 0 4
78971: NOT
78972: IFFALSE 78976
// continue ;
78974: GO 78921
// for j in tmp do
78976: LD_ADDR_VAR 0 3
78980: PUSH
78981: LD_VAR 0 4
78985: PUSH
78986: FOR_IN
78987: IFFALSE 79139
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78989: LD_VAR 0 3
78993: PPUSH
78994: CALL_OW 110
78998: NOT
78999: PUSH
79000: LD_VAR 0 3
79004: PPUSH
79005: CALL_OW 314
79009: NOT
79010: AND
79011: PUSH
79012: LD_VAR 0 3
79016: PPUSH
79017: CALL_OW 311
79021: NOT
79022: AND
79023: PUSH
79024: LD_VAR 0 3
79028: PPUSH
79029: CALL_OW 310
79033: NOT
79034: AND
79035: PUSH
79036: LD_VAR 0 3
79040: PUSH
79041: LD_EXP 48
79045: PUSH
79046: LD_VAR 0 2
79050: ARRAY
79051: PUSH
79052: LD_INT 1
79054: ARRAY
79055: IN
79056: NOT
79057: AND
79058: PUSH
79059: LD_VAR 0 3
79063: PUSH
79064: LD_EXP 48
79068: PUSH
79069: LD_VAR 0 2
79073: ARRAY
79074: PUSH
79075: LD_INT 2
79077: ARRAY
79078: IN
79079: NOT
79080: AND
79081: PUSH
79082: LD_VAR 0 3
79086: PUSH
79087: LD_EXP 57
79091: PUSH
79092: LD_VAR 0 2
79096: ARRAY
79097: IN
79098: NOT
79099: AND
79100: IFFALSE 79137
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
79102: LD_VAR 0 2
79106: PPUSH
79107: LD_EXP 45
79111: PUSH
79112: LD_VAR 0 2
79116: ARRAY
79117: PPUSH
79118: LD_VAR 0 3
79122: PPUSH
79123: LD_VAR 0 3
79127: PPUSH
79128: CALL_OW 257
79132: PPUSH
79133: CALL 77909 0 4
// end ;
79137: GO 78986
79139: POP
79140: POP
// end ;
79141: GO 78921
79143: POP
79144: POP
// end ;
79145: LD_VAR 0 1
79149: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79150: LD_INT 0
79152: PPUSH
79153: PPUSH
79154: PPUSH
79155: PPUSH
79156: PPUSH
79157: PPUSH
// if not mc_bases [ base ] then
79158: LD_EXP 45
79162: PUSH
79163: LD_VAR 0 1
79167: ARRAY
79168: NOT
79169: IFFALSE 79173
// exit ;
79171: GO 79355
// tmp := [ ] ;
79173: LD_ADDR_VAR 0 6
79177: PUSH
79178: EMPTY
79179: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79180: LD_ADDR_VAR 0 7
79184: PUSH
79185: LD_VAR 0 3
79189: PPUSH
79190: LD_INT 0
79192: PPUSH
79193: CALL_OW 517
79197: ST_TO_ADDR
// if not list then
79198: LD_VAR 0 7
79202: NOT
79203: IFFALSE 79207
// exit ;
79205: GO 79355
// for i = 1 to amount do
79207: LD_ADDR_VAR 0 5
79211: PUSH
79212: DOUBLE
79213: LD_INT 1
79215: DEC
79216: ST_TO_ADDR
79217: LD_VAR 0 2
79221: PUSH
79222: FOR_TO
79223: IFFALSE 79303
// begin x := rand ( 1 , list [ 1 ] ) ;
79225: LD_ADDR_VAR 0 8
79229: PUSH
79230: LD_INT 1
79232: PPUSH
79233: LD_VAR 0 7
79237: PUSH
79238: LD_INT 1
79240: ARRAY
79241: PPUSH
79242: CALL_OW 12
79246: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79247: LD_ADDR_VAR 0 6
79251: PUSH
79252: LD_VAR 0 6
79256: PPUSH
79257: LD_VAR 0 5
79261: PPUSH
79262: LD_VAR 0 7
79266: PUSH
79267: LD_INT 1
79269: ARRAY
79270: PUSH
79271: LD_VAR 0 8
79275: ARRAY
79276: PUSH
79277: LD_VAR 0 7
79281: PUSH
79282: LD_INT 2
79284: ARRAY
79285: PUSH
79286: LD_VAR 0 8
79290: ARRAY
79291: PUSH
79292: EMPTY
79293: LIST
79294: LIST
79295: PPUSH
79296: CALL_OW 1
79300: ST_TO_ADDR
// end ;
79301: GO 79222
79303: POP
79304: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79305: LD_ADDR_EXP 58
79309: PUSH
79310: LD_EXP 58
79314: PPUSH
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_VAR 0 6
79324: PPUSH
79325: CALL_OW 1
79329: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79330: LD_ADDR_EXP 60
79334: PUSH
79335: LD_EXP 60
79339: PPUSH
79340: LD_VAR 0 1
79344: PPUSH
79345: LD_VAR 0 3
79349: PPUSH
79350: CALL_OW 1
79354: ST_TO_ADDR
// end ;
79355: LD_VAR 0 4
79359: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79360: LD_INT 0
79362: PPUSH
// if not mc_bases [ base ] then
79363: LD_EXP 45
79367: PUSH
79368: LD_VAR 0 1
79372: ARRAY
79373: NOT
79374: IFFALSE 79378
// exit ;
79376: GO 79403
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79378: LD_ADDR_EXP 50
79382: PUSH
79383: LD_EXP 50
79387: PPUSH
79388: LD_VAR 0 1
79392: PPUSH
79393: LD_VAR 0 2
79397: PPUSH
79398: CALL_OW 1
79402: ST_TO_ADDR
// end ;
79403: LD_VAR 0 3
79407: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79408: LD_INT 0
79410: PPUSH
// if not mc_bases [ base ] then
79411: LD_EXP 45
79415: PUSH
79416: LD_VAR 0 1
79420: ARRAY
79421: NOT
79422: IFFALSE 79426
// exit ;
79424: GO 79463
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79426: LD_ADDR_EXP 50
79430: PUSH
79431: LD_EXP 50
79435: PPUSH
79436: LD_VAR 0 1
79440: PPUSH
79441: LD_EXP 50
79445: PUSH
79446: LD_VAR 0 1
79450: ARRAY
79451: PUSH
79452: LD_VAR 0 2
79456: UNION
79457: PPUSH
79458: CALL_OW 1
79462: ST_TO_ADDR
// end ;
79463: LD_VAR 0 3
79467: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79468: LD_INT 0
79470: PPUSH
// if not mc_bases [ base ] then
79471: LD_EXP 45
79475: PUSH
79476: LD_VAR 0 1
79480: ARRAY
79481: NOT
79482: IFFALSE 79486
// exit ;
79484: GO 79511
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79486: LD_ADDR_EXP 66
79490: PUSH
79491: LD_EXP 66
79495: PPUSH
79496: LD_VAR 0 1
79500: PPUSH
79501: LD_VAR 0 2
79505: PPUSH
79506: CALL_OW 1
79510: ST_TO_ADDR
// end ;
79511: LD_VAR 0 3
79515: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79516: LD_INT 0
79518: PPUSH
// if not mc_bases [ base ] then
79519: LD_EXP 45
79523: PUSH
79524: LD_VAR 0 1
79528: ARRAY
79529: NOT
79530: IFFALSE 79534
// exit ;
79532: GO 79571
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79534: LD_ADDR_EXP 66
79538: PUSH
79539: LD_EXP 66
79543: PPUSH
79544: LD_VAR 0 1
79548: PPUSH
79549: LD_EXP 66
79553: PUSH
79554: LD_VAR 0 1
79558: ARRAY
79559: PUSH
79560: LD_VAR 0 2
79564: ADD
79565: PPUSH
79566: CALL_OW 1
79570: ST_TO_ADDR
// end ;
79571: LD_VAR 0 3
79575: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79576: LD_INT 0
79578: PPUSH
// if not mc_bases [ base ] then
79579: LD_EXP 45
79583: PUSH
79584: LD_VAR 0 1
79588: ARRAY
79589: NOT
79590: IFFALSE 79594
// exit ;
79592: GO 79648
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79594: LD_ADDR_EXP 67
79598: PUSH
79599: LD_EXP 67
79603: PPUSH
79604: LD_VAR 0 1
79608: PPUSH
79609: LD_VAR 0 2
79613: PPUSH
79614: CALL_OW 1
79618: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79619: LD_ADDR_EXP 56
79623: PUSH
79624: LD_EXP 56
79628: PPUSH
79629: LD_VAR 0 1
79633: PPUSH
79634: LD_VAR 0 2
79638: PUSH
79639: LD_INT 0
79641: PLUS
79642: PPUSH
79643: CALL_OW 1
79647: ST_TO_ADDR
// end ;
79648: LD_VAR 0 3
79652: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79653: LD_INT 0
79655: PPUSH
// if not mc_bases [ base ] then
79656: LD_EXP 45
79660: PUSH
79661: LD_VAR 0 1
79665: ARRAY
79666: NOT
79667: IFFALSE 79671
// exit ;
79669: GO 79696
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79671: LD_ADDR_EXP 56
79675: PUSH
79676: LD_EXP 56
79680: PPUSH
79681: LD_VAR 0 1
79685: PPUSH
79686: LD_VAR 0 2
79690: PPUSH
79691: CALL_OW 1
79695: ST_TO_ADDR
// end ;
79696: LD_VAR 0 3
79700: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79701: LD_INT 0
79703: PPUSH
79704: PPUSH
79705: PPUSH
79706: PPUSH
// if not mc_bases [ base ] then
79707: LD_EXP 45
79711: PUSH
79712: LD_VAR 0 1
79716: ARRAY
79717: NOT
79718: IFFALSE 79722
// exit ;
79720: GO 79787
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79722: LD_ADDR_EXP 65
79726: PUSH
79727: LD_EXP 65
79731: PPUSH
79732: LD_VAR 0 1
79736: PUSH
79737: LD_EXP 65
79741: PUSH
79742: LD_VAR 0 1
79746: ARRAY
79747: PUSH
79748: LD_INT 1
79750: PLUS
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PPUSH
79756: LD_VAR 0 1
79760: PUSH
79761: LD_VAR 0 2
79765: PUSH
79766: LD_VAR 0 3
79770: PUSH
79771: LD_VAR 0 4
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: LIST
79780: LIST
79781: PPUSH
79782: CALL 24294 0 3
79786: ST_TO_ADDR
// end ;
79787: LD_VAR 0 5
79791: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79792: LD_INT 0
79794: PPUSH
// if not mc_bases [ base ] then
79795: LD_EXP 45
79799: PUSH
79800: LD_VAR 0 1
79804: ARRAY
79805: NOT
79806: IFFALSE 79810
// exit ;
79808: GO 79835
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79810: LD_ADDR_EXP 82
79814: PUSH
79815: LD_EXP 82
79819: PPUSH
79820: LD_VAR 0 1
79824: PPUSH
79825: LD_VAR 0 2
79829: PPUSH
79830: CALL_OW 1
79834: ST_TO_ADDR
// end ;
79835: LD_VAR 0 3
79839: RET
// export function MC_GetMinesField ( base ) ; begin
79840: LD_INT 0
79842: PPUSH
// result := mc_mines [ base ] ;
79843: LD_ADDR_VAR 0 2
79847: PUSH
79848: LD_EXP 58
79852: PUSH
79853: LD_VAR 0 1
79857: ARRAY
79858: ST_TO_ADDR
// end ;
79859: LD_VAR 0 2
79863: RET
// export function MC_GetProduceList ( base ) ; begin
79864: LD_INT 0
79866: PPUSH
// result := mc_produce [ base ] ;
79867: LD_ADDR_VAR 0 2
79871: PUSH
79872: LD_EXP 66
79876: PUSH
79877: LD_VAR 0 1
79881: ARRAY
79882: ST_TO_ADDR
// end ;
79883: LD_VAR 0 2
79887: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79888: LD_INT 0
79890: PPUSH
79891: PPUSH
// if not mc_bases then
79892: LD_EXP 45
79896: NOT
79897: IFFALSE 79901
// exit ;
79899: GO 79966
// if mc_bases [ base ] then
79901: LD_EXP 45
79905: PUSH
79906: LD_VAR 0 1
79910: ARRAY
79911: IFFALSE 79966
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79913: LD_ADDR_VAR 0 3
79917: PUSH
79918: LD_EXP 45
79922: PUSH
79923: LD_VAR 0 1
79927: ARRAY
79928: PPUSH
79929: LD_INT 30
79931: PUSH
79932: LD_VAR 0 2
79936: PUSH
79937: EMPTY
79938: LIST
79939: LIST
79940: PPUSH
79941: CALL_OW 72
79945: ST_TO_ADDR
// if result then
79946: LD_VAR 0 3
79950: IFFALSE 79966
// result := result [ 1 ] ;
79952: LD_ADDR_VAR 0 3
79956: PUSH
79957: LD_VAR 0 3
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: ST_TO_ADDR
// end ; end ;
79966: LD_VAR 0 3
79970: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79971: LD_INT 0
79973: PPUSH
79974: PPUSH
// if not mc_bases then
79975: LD_EXP 45
79979: NOT
79980: IFFALSE 79984
// exit ;
79982: GO 80029
// if mc_bases [ base ] then
79984: LD_EXP 45
79988: PUSH
79989: LD_VAR 0 1
79993: ARRAY
79994: IFFALSE 80029
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79996: LD_ADDR_VAR 0 3
80000: PUSH
80001: LD_EXP 45
80005: PUSH
80006: LD_VAR 0 1
80010: ARRAY
80011: PPUSH
80012: LD_INT 30
80014: PUSH
80015: LD_VAR 0 2
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PPUSH
80024: CALL_OW 72
80028: ST_TO_ADDR
// end ;
80029: LD_VAR 0 3
80033: RET
// export function MC_SetTame ( base , area ) ; begin
80034: LD_INT 0
80036: PPUSH
// if not mc_bases or not base then
80037: LD_EXP 45
80041: NOT
80042: PUSH
80043: LD_VAR 0 1
80047: NOT
80048: OR
80049: IFFALSE 80053
// exit ;
80051: GO 80078
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
80053: LD_ADDR_EXP 73
80057: PUSH
80058: LD_EXP 73
80062: PPUSH
80063: LD_VAR 0 1
80067: PPUSH
80068: LD_VAR 0 2
80072: PPUSH
80073: CALL_OW 1
80077: ST_TO_ADDR
// end ;
80078: LD_VAR 0 3
80082: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
80083: LD_INT 0
80085: PPUSH
80086: PPUSH
// if not mc_bases or not base then
80087: LD_EXP 45
80091: NOT
80092: PUSH
80093: LD_VAR 0 1
80097: NOT
80098: OR
80099: IFFALSE 80103
// exit ;
80101: GO 80205
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80103: LD_ADDR_VAR 0 4
80107: PUSH
80108: LD_EXP 45
80112: PUSH
80113: LD_VAR 0 1
80117: ARRAY
80118: PPUSH
80119: LD_INT 30
80121: PUSH
80122: LD_VAR 0 2
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PPUSH
80131: CALL_OW 72
80135: ST_TO_ADDR
// if not tmp then
80136: LD_VAR 0 4
80140: NOT
80141: IFFALSE 80145
// exit ;
80143: GO 80205
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80145: LD_ADDR_EXP 77
80149: PUSH
80150: LD_EXP 77
80154: PPUSH
80155: LD_VAR 0 1
80159: PPUSH
80160: LD_EXP 77
80164: PUSH
80165: LD_VAR 0 1
80169: ARRAY
80170: PPUSH
80171: LD_EXP 77
80175: PUSH
80176: LD_VAR 0 1
80180: ARRAY
80181: PUSH
80182: LD_INT 1
80184: PLUS
80185: PPUSH
80186: LD_VAR 0 4
80190: PUSH
80191: LD_INT 1
80193: ARRAY
80194: PPUSH
80195: CALL_OW 2
80199: PPUSH
80200: CALL_OW 1
80204: ST_TO_ADDR
// end ;
80205: LD_VAR 0 3
80209: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80210: LD_INT 0
80212: PPUSH
80213: PPUSH
// if not mc_bases or not base or not kinds then
80214: LD_EXP 45
80218: NOT
80219: PUSH
80220: LD_VAR 0 1
80224: NOT
80225: OR
80226: PUSH
80227: LD_VAR 0 2
80231: NOT
80232: OR
80233: IFFALSE 80237
// exit ;
80235: GO 80298
// for i in kinds do
80237: LD_ADDR_VAR 0 4
80241: PUSH
80242: LD_VAR 0 2
80246: PUSH
80247: FOR_IN
80248: IFFALSE 80296
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80250: LD_ADDR_EXP 79
80254: PUSH
80255: LD_EXP 79
80259: PPUSH
80260: LD_VAR 0 1
80264: PUSH
80265: LD_EXP 79
80269: PUSH
80270: LD_VAR 0 1
80274: ARRAY
80275: PUSH
80276: LD_INT 1
80278: PLUS
80279: PUSH
80280: EMPTY
80281: LIST
80282: LIST
80283: PPUSH
80284: LD_VAR 0 4
80288: PPUSH
80289: CALL 24294 0 3
80293: ST_TO_ADDR
80294: GO 80247
80296: POP
80297: POP
// end ;
80298: LD_VAR 0 3
80302: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80303: LD_INT 0
80305: PPUSH
// if not mc_bases or not base or not areas then
80306: LD_EXP 45
80310: NOT
80311: PUSH
80312: LD_VAR 0 1
80316: NOT
80317: OR
80318: PUSH
80319: LD_VAR 0 2
80323: NOT
80324: OR
80325: IFFALSE 80329
// exit ;
80327: GO 80354
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80329: LD_ADDR_EXP 63
80333: PUSH
80334: LD_EXP 63
80338: PPUSH
80339: LD_VAR 0 1
80343: PPUSH
80344: LD_VAR 0 2
80348: PPUSH
80349: CALL_OW 1
80353: ST_TO_ADDR
// end ;
80354: LD_VAR 0 3
80358: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80359: LD_INT 0
80361: PPUSH
// if not mc_bases or not base or not teleports_exit then
80362: LD_EXP 45
80366: NOT
80367: PUSH
80368: LD_VAR 0 1
80372: NOT
80373: OR
80374: PUSH
80375: LD_VAR 0 2
80379: NOT
80380: OR
80381: IFFALSE 80385
// exit ;
80383: GO 80410
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80385: LD_ADDR_EXP 80
80389: PUSH
80390: LD_EXP 80
80394: PPUSH
80395: LD_VAR 0 1
80399: PPUSH
80400: LD_VAR 0 2
80404: PPUSH
80405: CALL_OW 1
80409: ST_TO_ADDR
// end ;
80410: LD_VAR 0 3
80414: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80415: LD_INT 0
80417: PPUSH
80418: PPUSH
80419: PPUSH
// if not mc_bases or not base or not ext_list then
80420: LD_EXP 45
80424: NOT
80425: PUSH
80426: LD_VAR 0 1
80430: NOT
80431: OR
80432: PUSH
80433: LD_VAR 0 5
80437: NOT
80438: OR
80439: IFFALSE 80443
// exit ;
80441: GO 80616
// tmp := GetFacExtXYD ( x , y , d ) ;
80443: LD_ADDR_VAR 0 8
80447: PUSH
80448: LD_VAR 0 2
80452: PPUSH
80453: LD_VAR 0 3
80457: PPUSH
80458: LD_VAR 0 4
80462: PPUSH
80463: CALL 52973 0 3
80467: ST_TO_ADDR
// if not tmp then
80468: LD_VAR 0 8
80472: NOT
80473: IFFALSE 80477
// exit ;
80475: GO 80616
// for i in tmp do
80477: LD_ADDR_VAR 0 7
80481: PUSH
80482: LD_VAR 0 8
80486: PUSH
80487: FOR_IN
80488: IFFALSE 80614
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80490: LD_ADDR_EXP 50
80494: PUSH
80495: LD_EXP 50
80499: PPUSH
80500: LD_VAR 0 1
80504: PPUSH
80505: LD_EXP 50
80509: PUSH
80510: LD_VAR 0 1
80514: ARRAY
80515: PPUSH
80516: LD_EXP 50
80520: PUSH
80521: LD_VAR 0 1
80525: ARRAY
80526: PUSH
80527: LD_INT 1
80529: PLUS
80530: PPUSH
80531: LD_VAR 0 5
80535: PUSH
80536: LD_INT 1
80538: ARRAY
80539: PUSH
80540: LD_VAR 0 7
80544: PUSH
80545: LD_INT 1
80547: ARRAY
80548: PUSH
80549: LD_VAR 0 7
80553: PUSH
80554: LD_INT 2
80556: ARRAY
80557: PUSH
80558: LD_VAR 0 7
80562: PUSH
80563: LD_INT 3
80565: ARRAY
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: LIST
80571: LIST
80572: PPUSH
80573: CALL_OW 2
80577: PPUSH
80578: CALL_OW 1
80582: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80583: LD_ADDR_VAR 0 5
80587: PUSH
80588: LD_VAR 0 5
80592: PPUSH
80593: LD_INT 1
80595: PPUSH
80596: CALL_OW 3
80600: ST_TO_ADDR
// if not ext_list then
80601: LD_VAR 0 5
80605: NOT
80606: IFFALSE 80612
// exit ;
80608: POP
80609: POP
80610: GO 80616
// end ;
80612: GO 80487
80614: POP
80615: POP
// end ;
80616: LD_VAR 0 6
80620: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80621: LD_INT 0
80623: PPUSH
// if not mc_bases or not base or not weapon_list then
80624: LD_EXP 45
80628: NOT
80629: PUSH
80630: LD_VAR 0 1
80634: NOT
80635: OR
80636: PUSH
80637: LD_VAR 0 2
80641: NOT
80642: OR
80643: IFFALSE 80647
// exit ;
80645: GO 80672
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80647: LD_ADDR_EXP 84
80651: PUSH
80652: LD_EXP 84
80656: PPUSH
80657: LD_VAR 0 1
80661: PPUSH
80662: LD_VAR 0 2
80666: PPUSH
80667: CALL_OW 1
80671: ST_TO_ADDR
// end ;
80672: LD_VAR 0 3
80676: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80677: LD_INT 0
80679: PPUSH
// if not mc_bases or not base or not tech_list then
80680: LD_EXP 45
80684: NOT
80685: PUSH
80686: LD_VAR 0 1
80690: NOT
80691: OR
80692: PUSH
80693: LD_VAR 0 2
80697: NOT
80698: OR
80699: IFFALSE 80703
// exit ;
80701: GO 80728
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80703: LD_ADDR_EXP 72
80707: PUSH
80708: LD_EXP 72
80712: PPUSH
80713: LD_VAR 0 1
80717: PPUSH
80718: LD_VAR 0 2
80722: PPUSH
80723: CALL_OW 1
80727: ST_TO_ADDR
// end ;
80728: LD_VAR 0 3
80732: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80733: LD_INT 0
80735: PPUSH
// if not mc_bases or not parking_area or not base then
80736: LD_EXP 45
80740: NOT
80741: PUSH
80742: LD_VAR 0 2
80746: NOT
80747: OR
80748: PUSH
80749: LD_VAR 0 1
80753: NOT
80754: OR
80755: IFFALSE 80759
// exit ;
80757: GO 80784
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80759: LD_ADDR_EXP 69
80763: PUSH
80764: LD_EXP 69
80768: PPUSH
80769: LD_VAR 0 1
80773: PPUSH
80774: LD_VAR 0 2
80778: PPUSH
80779: CALL_OW 1
80783: ST_TO_ADDR
// end ;
80784: LD_VAR 0 3
80788: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80789: LD_INT 0
80791: PPUSH
// if not mc_bases or not base or not scan_area then
80792: LD_EXP 45
80796: NOT
80797: PUSH
80798: LD_VAR 0 1
80802: NOT
80803: OR
80804: PUSH
80805: LD_VAR 0 2
80809: NOT
80810: OR
80811: IFFALSE 80815
// exit ;
80813: GO 80840
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80815: LD_ADDR_EXP 70
80819: PUSH
80820: LD_EXP 70
80824: PPUSH
80825: LD_VAR 0 1
80829: PPUSH
80830: LD_VAR 0 2
80834: PPUSH
80835: CALL_OW 1
80839: ST_TO_ADDR
// end ;
80840: LD_VAR 0 3
80844: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80845: LD_INT 0
80847: PPUSH
80848: PPUSH
// if not mc_bases or not base then
80849: LD_EXP 45
80853: NOT
80854: PUSH
80855: LD_VAR 0 1
80859: NOT
80860: OR
80861: IFFALSE 80865
// exit ;
80863: GO 80929
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80865: LD_ADDR_VAR 0 3
80869: PUSH
80870: LD_INT 1
80872: PUSH
80873: LD_INT 2
80875: PUSH
80876: LD_INT 3
80878: PUSH
80879: LD_INT 4
80881: PUSH
80882: LD_INT 11
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: LIST
80889: LIST
80890: LIST
80891: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80892: LD_ADDR_EXP 72
80896: PUSH
80897: LD_EXP 72
80901: PPUSH
80902: LD_VAR 0 1
80906: PPUSH
80907: LD_EXP 72
80911: PUSH
80912: LD_VAR 0 1
80916: ARRAY
80917: PUSH
80918: LD_VAR 0 3
80922: DIFF
80923: PPUSH
80924: CALL_OW 1
80928: ST_TO_ADDR
// end ;
80929: LD_VAR 0 2
80933: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80934: LD_INT 0
80936: PPUSH
// result := mc_vehicles [ base ] ;
80937: LD_ADDR_VAR 0 3
80941: PUSH
80942: LD_EXP 64
80946: PUSH
80947: LD_VAR 0 1
80951: ARRAY
80952: ST_TO_ADDR
// if onlyCombat then
80953: LD_VAR 0 2
80957: IFFALSE 81122
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80959: LD_ADDR_VAR 0 3
80963: PUSH
80964: LD_VAR 0 3
80968: PUSH
80969: LD_VAR 0 3
80973: PPUSH
80974: LD_INT 2
80976: PUSH
80977: LD_INT 34
80979: PUSH
80980: LD_INT 12
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 34
80989: PUSH
80990: LD_INT 51
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PUSH
80997: LD_INT 34
80999: PUSH
81000: LD_EXP 30
81004: PUSH
81005: EMPTY
81006: LIST
81007: LIST
81008: PUSH
81009: LD_INT 34
81011: PUSH
81012: LD_INT 32
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PUSH
81019: LD_INT 34
81021: PUSH
81022: LD_INT 13
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: PUSH
81029: LD_INT 34
81031: PUSH
81032: LD_INT 52
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: PUSH
81039: LD_INT 34
81041: PUSH
81042: LD_INT 14
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PUSH
81049: LD_INT 34
81051: PUSH
81052: LD_INT 53
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 34
81061: PUSH
81062: LD_EXP 29
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 34
81073: PUSH
81074: LD_INT 31
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 34
81083: PUSH
81084: LD_INT 48
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PUSH
81091: LD_INT 34
81093: PUSH
81094: LD_INT 8
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: EMPTY
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: LIST
81107: LIST
81108: LIST
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: LIST
81115: PPUSH
81116: CALL_OW 72
81120: DIFF
81121: ST_TO_ADDR
// end ; end_of_file
81122: LD_VAR 0 3
81126: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81127: LD_INT 0
81129: PPUSH
81130: PPUSH
81131: PPUSH
// if not mc_bases or not skirmish then
81132: LD_EXP 45
81136: NOT
81137: PUSH
81138: LD_EXP 43
81142: NOT
81143: OR
81144: IFFALSE 81148
// exit ;
81146: GO 81313
// for i = 1 to mc_bases do
81148: LD_ADDR_VAR 0 4
81152: PUSH
81153: DOUBLE
81154: LD_INT 1
81156: DEC
81157: ST_TO_ADDR
81158: LD_EXP 45
81162: PUSH
81163: FOR_TO
81164: IFFALSE 81311
// begin if sci in mc_bases [ i ] then
81166: LD_VAR 0 2
81170: PUSH
81171: LD_EXP 45
81175: PUSH
81176: LD_VAR 0 4
81180: ARRAY
81181: IN
81182: IFFALSE 81309
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81184: LD_ADDR_EXP 74
81188: PUSH
81189: LD_EXP 74
81193: PPUSH
81194: LD_VAR 0 4
81198: PUSH
81199: LD_EXP 74
81203: PUSH
81204: LD_VAR 0 4
81208: ARRAY
81209: PUSH
81210: LD_INT 1
81212: PLUS
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PPUSH
81218: LD_VAR 0 1
81222: PPUSH
81223: CALL 24294 0 3
81227: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81228: LD_ADDR_VAR 0 5
81232: PUSH
81233: LD_EXP 45
81237: PUSH
81238: LD_VAR 0 4
81242: ARRAY
81243: PPUSH
81244: LD_INT 2
81246: PUSH
81247: LD_INT 30
81249: PUSH
81250: LD_INT 0
81252: PUSH
81253: EMPTY
81254: LIST
81255: LIST
81256: PUSH
81257: LD_INT 30
81259: PUSH
81260: LD_INT 1
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: LIST
81271: PPUSH
81272: CALL_OW 72
81276: PPUSH
81277: LD_VAR 0 1
81281: PPUSH
81282: CALL_OW 74
81286: ST_TO_ADDR
// if tmp then
81287: LD_VAR 0 5
81291: IFFALSE 81307
// ComStandNearbyBuilding ( ape , tmp ) ;
81293: LD_VAR 0 1
81297: PPUSH
81298: LD_VAR 0 5
81302: PPUSH
81303: CALL 20908 0 2
// break ;
81307: GO 81311
// end ; end ;
81309: GO 81163
81311: POP
81312: POP
// end ;
81313: LD_VAR 0 3
81317: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81318: LD_INT 0
81320: PPUSH
81321: PPUSH
81322: PPUSH
// if not mc_bases or not skirmish then
81323: LD_EXP 45
81327: NOT
81328: PUSH
81329: LD_EXP 43
81333: NOT
81334: OR
81335: IFFALSE 81339
// exit ;
81337: GO 81428
// for i = 1 to mc_bases do
81339: LD_ADDR_VAR 0 4
81343: PUSH
81344: DOUBLE
81345: LD_INT 1
81347: DEC
81348: ST_TO_ADDR
81349: LD_EXP 45
81353: PUSH
81354: FOR_TO
81355: IFFALSE 81426
// begin if building in mc_busy_turret_list [ i ] then
81357: LD_VAR 0 1
81361: PUSH
81362: LD_EXP 55
81366: PUSH
81367: LD_VAR 0 4
81371: ARRAY
81372: IN
81373: IFFALSE 81424
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81375: LD_ADDR_VAR 0 5
81379: PUSH
81380: LD_EXP 55
81384: PUSH
81385: LD_VAR 0 4
81389: ARRAY
81390: PUSH
81391: LD_VAR 0 1
81395: DIFF
81396: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81397: LD_ADDR_EXP 55
81401: PUSH
81402: LD_EXP 55
81406: PPUSH
81407: LD_VAR 0 4
81411: PPUSH
81412: LD_VAR 0 5
81416: PPUSH
81417: CALL_OW 1
81421: ST_TO_ADDR
// break ;
81422: GO 81426
// end ; end ;
81424: GO 81354
81426: POP
81427: POP
// end ;
81428: LD_VAR 0 3
81432: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81433: LD_INT 0
81435: PPUSH
81436: PPUSH
81437: PPUSH
// if not mc_bases or not skirmish then
81438: LD_EXP 45
81442: NOT
81443: PUSH
81444: LD_EXP 43
81448: NOT
81449: OR
81450: IFFALSE 81454
// exit ;
81452: GO 81653
// for i = 1 to mc_bases do
81454: LD_ADDR_VAR 0 5
81458: PUSH
81459: DOUBLE
81460: LD_INT 1
81462: DEC
81463: ST_TO_ADDR
81464: LD_EXP 45
81468: PUSH
81469: FOR_TO
81470: IFFALSE 81651
// if building in mc_bases [ i ] then
81472: LD_VAR 0 1
81476: PUSH
81477: LD_EXP 45
81481: PUSH
81482: LD_VAR 0 5
81486: ARRAY
81487: IN
81488: IFFALSE 81649
// begin tmp := mc_bases [ i ] diff building ;
81490: LD_ADDR_VAR 0 6
81494: PUSH
81495: LD_EXP 45
81499: PUSH
81500: LD_VAR 0 5
81504: ARRAY
81505: PUSH
81506: LD_VAR 0 1
81510: DIFF
81511: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81512: LD_ADDR_EXP 45
81516: PUSH
81517: LD_EXP 45
81521: PPUSH
81522: LD_VAR 0 5
81526: PPUSH
81527: LD_VAR 0 6
81531: PPUSH
81532: CALL_OW 1
81536: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81537: LD_VAR 0 1
81541: PUSH
81542: LD_EXP 53
81546: PUSH
81547: LD_VAR 0 5
81551: ARRAY
81552: IN
81553: IFFALSE 81592
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81555: LD_ADDR_EXP 53
81559: PUSH
81560: LD_EXP 53
81564: PPUSH
81565: LD_VAR 0 5
81569: PPUSH
81570: LD_EXP 53
81574: PUSH
81575: LD_VAR 0 5
81579: ARRAY
81580: PUSH
81581: LD_VAR 0 1
81585: DIFF
81586: PPUSH
81587: CALL_OW 1
81591: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81592: LD_VAR 0 1
81596: PUSH
81597: LD_EXP 54
81601: PUSH
81602: LD_VAR 0 5
81606: ARRAY
81607: IN
81608: IFFALSE 81647
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81610: LD_ADDR_EXP 54
81614: PUSH
81615: LD_EXP 54
81619: PPUSH
81620: LD_VAR 0 5
81624: PPUSH
81625: LD_EXP 54
81629: PUSH
81630: LD_VAR 0 5
81634: ARRAY
81635: PUSH
81636: LD_VAR 0 1
81640: DIFF
81641: PPUSH
81642: CALL_OW 1
81646: ST_TO_ADDR
// break ;
81647: GO 81651
// end ;
81649: GO 81469
81651: POP
81652: POP
// end ;
81653: LD_VAR 0 4
81657: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81658: LD_INT 0
81660: PPUSH
81661: PPUSH
81662: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81663: LD_EXP 45
81667: NOT
81668: PUSH
81669: LD_EXP 43
81673: NOT
81674: OR
81675: PUSH
81676: LD_VAR 0 3
81680: PUSH
81681: LD_EXP 71
81685: IN
81686: NOT
81687: OR
81688: IFFALSE 81692
// exit ;
81690: GO 81815
// for i = 1 to mc_vehicles do
81692: LD_ADDR_VAR 0 6
81696: PUSH
81697: DOUBLE
81698: LD_INT 1
81700: DEC
81701: ST_TO_ADDR
81702: LD_EXP 64
81706: PUSH
81707: FOR_TO
81708: IFFALSE 81813
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81710: LD_VAR 0 2
81714: PUSH
81715: LD_EXP 64
81719: PUSH
81720: LD_VAR 0 6
81724: ARRAY
81725: IN
81726: PUSH
81727: LD_VAR 0 1
81731: PUSH
81732: LD_EXP 64
81736: PUSH
81737: LD_VAR 0 6
81741: ARRAY
81742: IN
81743: OR
81744: IFFALSE 81811
// begin tmp := mc_vehicles [ i ] diff old ;
81746: LD_ADDR_VAR 0 7
81750: PUSH
81751: LD_EXP 64
81755: PUSH
81756: LD_VAR 0 6
81760: ARRAY
81761: PUSH
81762: LD_VAR 0 2
81766: DIFF
81767: ST_TO_ADDR
// tmp := tmp diff new ;
81768: LD_ADDR_VAR 0 7
81772: PUSH
81773: LD_VAR 0 7
81777: PUSH
81778: LD_VAR 0 1
81782: DIFF
81783: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81784: LD_ADDR_EXP 64
81788: PUSH
81789: LD_EXP 64
81793: PPUSH
81794: LD_VAR 0 6
81798: PPUSH
81799: LD_VAR 0 7
81803: PPUSH
81804: CALL_OW 1
81808: ST_TO_ADDR
// break ;
81809: GO 81813
// end ;
81811: GO 81707
81813: POP
81814: POP
// end ;
81815: LD_VAR 0 5
81819: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81820: LD_INT 0
81822: PPUSH
81823: PPUSH
81824: PPUSH
81825: PPUSH
// if not mc_bases or not skirmish then
81826: LD_EXP 45
81830: NOT
81831: PUSH
81832: LD_EXP 43
81836: NOT
81837: OR
81838: IFFALSE 81842
// exit ;
81840: GO 82219
// side := GetSide ( vehicle ) ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_VAR 0 1
81851: PPUSH
81852: CALL_OW 255
81856: ST_TO_ADDR
// for i = 1 to mc_bases do
81857: LD_ADDR_VAR 0 4
81861: PUSH
81862: DOUBLE
81863: LD_INT 1
81865: DEC
81866: ST_TO_ADDR
81867: LD_EXP 45
81871: PUSH
81872: FOR_TO
81873: IFFALSE 82217
// begin if factory in mc_bases [ i ] then
81875: LD_VAR 0 2
81879: PUSH
81880: LD_EXP 45
81884: PUSH
81885: LD_VAR 0 4
81889: ARRAY
81890: IN
81891: IFFALSE 82215
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81893: LD_EXP 67
81897: PUSH
81898: LD_VAR 0 4
81902: ARRAY
81903: PUSH
81904: LD_EXP 56
81908: PUSH
81909: LD_VAR 0 4
81913: ARRAY
81914: LESS
81915: PUSH
81916: LD_VAR 0 1
81920: PPUSH
81921: CALL_OW 264
81925: PUSH
81926: LD_INT 31
81928: PUSH
81929: LD_INT 32
81931: PUSH
81932: LD_INT 51
81934: PUSH
81935: LD_EXP 30
81939: PUSH
81940: LD_INT 12
81942: PUSH
81943: LD_INT 30
81945: PUSH
81946: LD_EXP 29
81950: PUSH
81951: LD_INT 11
81953: PUSH
81954: LD_INT 53
81956: PUSH
81957: LD_INT 14
81959: PUSH
81960: LD_EXP 33
81964: PUSH
81965: LD_INT 29
81967: PUSH
81968: LD_EXP 31
81972: PUSH
81973: LD_INT 13
81975: PUSH
81976: LD_INT 52
81978: PUSH
81979: LD_INT 48
81981: PUSH
81982: LD_INT 8
81984: PUSH
81985: EMPTY
81986: LIST
81987: LIST
81988: LIST
81989: LIST
81990: LIST
81991: LIST
81992: LIST
81993: LIST
81994: LIST
81995: LIST
81996: LIST
81997: LIST
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: IN
82004: NOT
82005: AND
82006: IFFALSE 82054
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
82008: LD_ADDR_EXP 67
82012: PUSH
82013: LD_EXP 67
82017: PPUSH
82018: LD_VAR 0 4
82022: PUSH
82023: LD_EXP 67
82027: PUSH
82028: LD_VAR 0 4
82032: ARRAY
82033: PUSH
82034: LD_INT 1
82036: PLUS
82037: PUSH
82038: EMPTY
82039: LIST
82040: LIST
82041: PPUSH
82042: LD_VAR 0 1
82046: PPUSH
82047: CALL 24294 0 3
82051: ST_TO_ADDR
82052: GO 82098
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82054: LD_ADDR_EXP 64
82058: PUSH
82059: LD_EXP 64
82063: PPUSH
82064: LD_VAR 0 4
82068: PUSH
82069: LD_EXP 64
82073: PUSH
82074: LD_VAR 0 4
82078: ARRAY
82079: PUSH
82080: LD_INT 1
82082: PLUS
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: PPUSH
82088: LD_VAR 0 1
82092: PPUSH
82093: CALL 24294 0 3
82097: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82098: LD_VAR 0 1
82102: PPUSH
82103: CALL_OW 263
82107: PUSH
82108: LD_INT 2
82110: EQUAL
82111: IFFALSE 82131
// begin repeat wait ( 0 0$1 ) ;
82113: LD_INT 35
82115: PPUSH
82116: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82120: LD_VAR 0 1
82124: PPUSH
82125: CALL_OW 312
82129: IFFALSE 82113
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82131: LD_VAR 0 1
82135: PPUSH
82136: LD_EXP 69
82140: PUSH
82141: LD_VAR 0 4
82145: ARRAY
82146: PPUSH
82147: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82151: LD_VAR 0 1
82155: PPUSH
82156: CALL_OW 263
82160: PUSH
82161: LD_INT 1
82163: NONEQUAL
82164: IFFALSE 82168
// break ;
82166: GO 82217
// repeat wait ( 0 0$1 ) ;
82168: LD_INT 35
82170: PPUSH
82171: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82175: LD_VAR 0 1
82179: PPUSH
82180: LD_EXP 69
82184: PUSH
82185: LD_VAR 0 4
82189: ARRAY
82190: PPUSH
82191: CALL_OW 308
82195: IFFALSE 82168
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82197: LD_VAR 0 1
82201: PPUSH
82202: CALL_OW 311
82206: PPUSH
82207: CALL_OW 121
// exit ;
82211: POP
82212: POP
82213: GO 82219
// end ; end ;
82215: GO 81872
82217: POP
82218: POP
// end ;
82219: LD_VAR 0 3
82223: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82224: LD_INT 0
82226: PPUSH
82227: PPUSH
82228: PPUSH
82229: PPUSH
// if not mc_bases or not skirmish then
82230: LD_EXP 45
82234: NOT
82235: PUSH
82236: LD_EXP 43
82240: NOT
82241: OR
82242: IFFALSE 82246
// exit ;
82244: GO 82599
// repeat wait ( 0 0$1 ) ;
82246: LD_INT 35
82248: PPUSH
82249: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82253: LD_VAR 0 2
82257: PPUSH
82258: LD_VAR 0 3
82262: PPUSH
82263: CALL_OW 284
82267: IFFALSE 82246
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82269: LD_VAR 0 2
82273: PPUSH
82274: LD_VAR 0 3
82278: PPUSH
82279: CALL_OW 283
82283: PUSH
82284: LD_INT 4
82286: EQUAL
82287: IFFALSE 82291
// exit ;
82289: GO 82599
// for i = 1 to mc_bases do
82291: LD_ADDR_VAR 0 7
82295: PUSH
82296: DOUBLE
82297: LD_INT 1
82299: DEC
82300: ST_TO_ADDR
82301: LD_EXP 45
82305: PUSH
82306: FOR_TO
82307: IFFALSE 82597
// begin if mc_crates_area [ i ] then
82309: LD_EXP 63
82313: PUSH
82314: LD_VAR 0 7
82318: ARRAY
82319: IFFALSE 82430
// for j in mc_crates_area [ i ] do
82321: LD_ADDR_VAR 0 8
82325: PUSH
82326: LD_EXP 63
82330: PUSH
82331: LD_VAR 0 7
82335: ARRAY
82336: PUSH
82337: FOR_IN
82338: IFFALSE 82428
// if InArea ( x , y , j ) then
82340: LD_VAR 0 2
82344: PPUSH
82345: LD_VAR 0 3
82349: PPUSH
82350: LD_VAR 0 8
82354: PPUSH
82355: CALL_OW 309
82359: IFFALSE 82426
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82361: LD_ADDR_EXP 61
82365: PUSH
82366: LD_EXP 61
82370: PPUSH
82371: LD_VAR 0 7
82375: PUSH
82376: LD_EXP 61
82380: PUSH
82381: LD_VAR 0 7
82385: ARRAY
82386: PUSH
82387: LD_INT 1
82389: PLUS
82390: PUSH
82391: EMPTY
82392: LIST
82393: LIST
82394: PPUSH
82395: LD_VAR 0 4
82399: PUSH
82400: LD_VAR 0 2
82404: PUSH
82405: LD_VAR 0 3
82409: PUSH
82410: EMPTY
82411: LIST
82412: LIST
82413: LIST
82414: PPUSH
82415: CALL 24294 0 3
82419: ST_TO_ADDR
// exit ;
82420: POP
82421: POP
82422: POP
82423: POP
82424: GO 82599
// end ;
82426: GO 82337
82428: POP
82429: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82430: LD_ADDR_VAR 0 9
82434: PUSH
82435: LD_EXP 45
82439: PUSH
82440: LD_VAR 0 7
82444: ARRAY
82445: PPUSH
82446: LD_INT 2
82448: PUSH
82449: LD_INT 30
82451: PUSH
82452: LD_INT 0
82454: PUSH
82455: EMPTY
82456: LIST
82457: LIST
82458: PUSH
82459: LD_INT 30
82461: PUSH
82462: LD_INT 1
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: PUSH
82469: EMPTY
82470: LIST
82471: LIST
82472: LIST
82473: PPUSH
82474: CALL_OW 72
82478: ST_TO_ADDR
// if not depot then
82479: LD_VAR 0 9
82483: NOT
82484: IFFALSE 82488
// continue ;
82486: GO 82306
// for j in depot do
82488: LD_ADDR_VAR 0 8
82492: PUSH
82493: LD_VAR 0 9
82497: PUSH
82498: FOR_IN
82499: IFFALSE 82593
// if GetDistUnitXY ( j , x , y ) < 30 then
82501: LD_VAR 0 8
82505: PPUSH
82506: LD_VAR 0 2
82510: PPUSH
82511: LD_VAR 0 3
82515: PPUSH
82516: CALL_OW 297
82520: PUSH
82521: LD_INT 30
82523: LESS
82524: IFFALSE 82591
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82526: LD_ADDR_EXP 61
82530: PUSH
82531: LD_EXP 61
82535: PPUSH
82536: LD_VAR 0 7
82540: PUSH
82541: LD_EXP 61
82545: PUSH
82546: LD_VAR 0 7
82550: ARRAY
82551: PUSH
82552: LD_INT 1
82554: PLUS
82555: PUSH
82556: EMPTY
82557: LIST
82558: LIST
82559: PPUSH
82560: LD_VAR 0 4
82564: PUSH
82565: LD_VAR 0 2
82569: PUSH
82570: LD_VAR 0 3
82574: PUSH
82575: EMPTY
82576: LIST
82577: LIST
82578: LIST
82579: PPUSH
82580: CALL 24294 0 3
82584: ST_TO_ADDR
// exit ;
82585: POP
82586: POP
82587: POP
82588: POP
82589: GO 82599
// end ;
82591: GO 82498
82593: POP
82594: POP
// end ;
82595: GO 82306
82597: POP
82598: POP
// end ;
82599: LD_VAR 0 6
82603: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82604: LD_INT 0
82606: PPUSH
82607: PPUSH
82608: PPUSH
82609: PPUSH
// if not mc_bases or not skirmish then
82610: LD_EXP 45
82614: NOT
82615: PUSH
82616: LD_EXP 43
82620: NOT
82621: OR
82622: IFFALSE 82626
// exit ;
82624: GO 82903
// side := GetSide ( lab ) ;
82626: LD_ADDR_VAR 0 4
82630: PUSH
82631: LD_VAR 0 2
82635: PPUSH
82636: CALL_OW 255
82640: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82641: LD_VAR 0 4
82645: PUSH
82646: LD_EXP 71
82650: IN
82651: NOT
82652: PUSH
82653: LD_EXP 72
82657: NOT
82658: OR
82659: PUSH
82660: LD_EXP 45
82664: NOT
82665: OR
82666: IFFALSE 82670
// exit ;
82668: GO 82903
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82670: LD_ADDR_EXP 72
82674: PUSH
82675: LD_EXP 72
82679: PPUSH
82680: LD_VAR 0 4
82684: PPUSH
82685: LD_EXP 72
82689: PUSH
82690: LD_VAR 0 4
82694: ARRAY
82695: PUSH
82696: LD_VAR 0 1
82700: DIFF
82701: PPUSH
82702: CALL_OW 1
82706: ST_TO_ADDR
// for i = 1 to mc_bases do
82707: LD_ADDR_VAR 0 5
82711: PUSH
82712: DOUBLE
82713: LD_INT 1
82715: DEC
82716: ST_TO_ADDR
82717: LD_EXP 45
82721: PUSH
82722: FOR_TO
82723: IFFALSE 82901
// begin if lab in mc_bases [ i ] then
82725: LD_VAR 0 2
82729: PUSH
82730: LD_EXP 45
82734: PUSH
82735: LD_VAR 0 5
82739: ARRAY
82740: IN
82741: IFFALSE 82899
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82743: LD_VAR 0 1
82747: PUSH
82748: LD_INT 11
82750: PUSH
82751: LD_INT 4
82753: PUSH
82754: LD_INT 3
82756: PUSH
82757: LD_INT 2
82759: PUSH
82760: EMPTY
82761: LIST
82762: LIST
82763: LIST
82764: LIST
82765: IN
82766: PUSH
82767: LD_EXP 75
82771: PUSH
82772: LD_VAR 0 5
82776: ARRAY
82777: AND
82778: IFFALSE 82899
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82780: LD_ADDR_VAR 0 6
82784: PUSH
82785: LD_EXP 75
82789: PUSH
82790: LD_VAR 0 5
82794: ARRAY
82795: PUSH
82796: LD_INT 1
82798: ARRAY
82799: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82800: LD_ADDR_EXP 75
82804: PUSH
82805: LD_EXP 75
82809: PPUSH
82810: LD_VAR 0 5
82814: PPUSH
82815: EMPTY
82816: PPUSH
82817: CALL_OW 1
82821: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82822: LD_VAR 0 6
82826: PPUSH
82827: LD_INT 0
82829: PPUSH
82830: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82834: LD_VAR 0 6
82838: PPUSH
82839: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82843: LD_ADDR_EXP 74
82847: PUSH
82848: LD_EXP 74
82852: PPUSH
82853: LD_VAR 0 5
82857: PPUSH
82858: LD_EXP 74
82862: PUSH
82863: LD_VAR 0 5
82867: ARRAY
82868: PPUSH
82869: LD_INT 1
82871: PPUSH
82872: LD_VAR 0 6
82876: PPUSH
82877: CALL_OW 2
82881: PPUSH
82882: CALL_OW 1
82886: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82887: LD_VAR 0 5
82891: PPUSH
82892: LD_INT 112
82894: PPUSH
82895: CALL 59915 0 2
// end ; end ; end ;
82899: GO 82722
82901: POP
82902: POP
// end ;
82903: LD_VAR 0 3
82907: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82908: LD_INT 0
82910: PPUSH
82911: PPUSH
82912: PPUSH
82913: PPUSH
82914: PPUSH
82915: PPUSH
82916: PPUSH
82917: PPUSH
// if not mc_bases or not skirmish then
82918: LD_EXP 45
82922: NOT
82923: PUSH
82924: LD_EXP 43
82928: NOT
82929: OR
82930: IFFALSE 82934
// exit ;
82932: GO 84305
// for i = 1 to mc_bases do
82934: LD_ADDR_VAR 0 3
82938: PUSH
82939: DOUBLE
82940: LD_INT 1
82942: DEC
82943: ST_TO_ADDR
82944: LD_EXP 45
82948: PUSH
82949: FOR_TO
82950: IFFALSE 84303
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82952: LD_VAR 0 1
82956: PUSH
82957: LD_EXP 45
82961: PUSH
82962: LD_VAR 0 3
82966: ARRAY
82967: IN
82968: PUSH
82969: LD_VAR 0 1
82973: PUSH
82974: LD_EXP 52
82978: PUSH
82979: LD_VAR 0 3
82983: ARRAY
82984: IN
82985: OR
82986: PUSH
82987: LD_VAR 0 1
82991: PUSH
82992: LD_EXP 67
82996: PUSH
82997: LD_VAR 0 3
83001: ARRAY
83002: IN
83003: OR
83004: PUSH
83005: LD_VAR 0 1
83009: PUSH
83010: LD_EXP 64
83014: PUSH
83015: LD_VAR 0 3
83019: ARRAY
83020: IN
83021: OR
83022: PUSH
83023: LD_VAR 0 1
83027: PUSH
83028: LD_EXP 74
83032: PUSH
83033: LD_VAR 0 3
83037: ARRAY
83038: IN
83039: OR
83040: PUSH
83041: LD_VAR 0 1
83045: PUSH
83046: LD_EXP 75
83050: PUSH
83051: LD_VAR 0 3
83055: ARRAY
83056: IN
83057: OR
83058: IFFALSE 84301
// begin if un in mc_ape [ i ] then
83060: LD_VAR 0 1
83064: PUSH
83065: LD_EXP 74
83069: PUSH
83070: LD_VAR 0 3
83074: ARRAY
83075: IN
83076: IFFALSE 83115
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83078: LD_ADDR_EXP 74
83082: PUSH
83083: LD_EXP 74
83087: PPUSH
83088: LD_VAR 0 3
83092: PPUSH
83093: LD_EXP 74
83097: PUSH
83098: LD_VAR 0 3
83102: ARRAY
83103: PUSH
83104: LD_VAR 0 1
83108: DIFF
83109: PPUSH
83110: CALL_OW 1
83114: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83115: LD_VAR 0 1
83119: PUSH
83120: LD_EXP 75
83124: PUSH
83125: LD_VAR 0 3
83129: ARRAY
83130: IN
83131: IFFALSE 83155
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83133: LD_ADDR_EXP 75
83137: PUSH
83138: LD_EXP 75
83142: PPUSH
83143: LD_VAR 0 3
83147: PPUSH
83148: EMPTY
83149: PPUSH
83150: CALL_OW 1
83154: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83155: LD_VAR 0 1
83159: PPUSH
83160: CALL_OW 247
83164: PUSH
83165: LD_INT 2
83167: EQUAL
83168: PUSH
83169: LD_VAR 0 1
83173: PPUSH
83174: CALL_OW 110
83178: PUSH
83179: LD_INT 20
83181: EQUAL
83182: PUSH
83183: LD_VAR 0 1
83187: PUSH
83188: LD_EXP 67
83192: PUSH
83193: LD_VAR 0 3
83197: ARRAY
83198: IN
83199: OR
83200: PUSH
83201: LD_VAR 0 1
83205: PPUSH
83206: CALL_OW 264
83210: PUSH
83211: LD_INT 12
83213: PUSH
83214: LD_INT 51
83216: PUSH
83217: LD_EXP 30
83221: PUSH
83222: LD_INT 32
83224: PUSH
83225: LD_INT 13
83227: PUSH
83228: LD_INT 52
83230: PUSH
83231: LD_INT 31
83233: PUSH
83234: EMPTY
83235: LIST
83236: LIST
83237: LIST
83238: LIST
83239: LIST
83240: LIST
83241: LIST
83242: IN
83243: OR
83244: AND
83245: IFFALSE 83553
// begin if un in mc_defender [ i ] then
83247: LD_VAR 0 1
83251: PUSH
83252: LD_EXP 67
83256: PUSH
83257: LD_VAR 0 3
83261: ARRAY
83262: IN
83263: IFFALSE 83302
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83265: LD_ADDR_EXP 67
83269: PUSH
83270: LD_EXP 67
83274: PPUSH
83275: LD_VAR 0 3
83279: PPUSH
83280: LD_EXP 67
83284: PUSH
83285: LD_VAR 0 3
83289: ARRAY
83290: PUSH
83291: LD_VAR 0 1
83295: DIFF
83296: PPUSH
83297: CALL_OW 1
83301: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83302: LD_ADDR_VAR 0 8
83306: PUSH
83307: LD_VAR 0 3
83311: PPUSH
83312: LD_INT 3
83314: PPUSH
83315: CALL 79971 0 2
83319: ST_TO_ADDR
// if fac then
83320: LD_VAR 0 8
83324: IFFALSE 83553
// begin for j in fac do
83326: LD_ADDR_VAR 0 4
83330: PUSH
83331: LD_VAR 0 8
83335: PUSH
83336: FOR_IN
83337: IFFALSE 83551
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83339: LD_ADDR_VAR 0 9
83343: PUSH
83344: LD_VAR 0 8
83348: PPUSH
83349: LD_VAR 0 1
83353: PPUSH
83354: CALL_OW 265
83358: PPUSH
83359: LD_VAR 0 1
83363: PPUSH
83364: CALL_OW 262
83368: PPUSH
83369: LD_VAR 0 1
83373: PPUSH
83374: CALL_OW 263
83378: PPUSH
83379: LD_VAR 0 1
83383: PPUSH
83384: CALL_OW 264
83388: PPUSH
83389: CALL 21826 0 5
83393: ST_TO_ADDR
// if components then
83394: LD_VAR 0 9
83398: IFFALSE 83549
// begin if GetWeapon ( un ) = ar_control_tower then
83400: LD_VAR 0 1
83404: PPUSH
83405: CALL_OW 264
83409: PUSH
83410: LD_INT 31
83412: EQUAL
83413: IFFALSE 83530
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83415: LD_VAR 0 1
83419: PPUSH
83420: CALL_OW 311
83424: PPUSH
83425: LD_INT 0
83427: PPUSH
83428: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83432: LD_ADDR_EXP 85
83436: PUSH
83437: LD_EXP 85
83441: PPUSH
83442: LD_VAR 0 3
83446: PPUSH
83447: LD_EXP 85
83451: PUSH
83452: LD_VAR 0 3
83456: ARRAY
83457: PUSH
83458: LD_VAR 0 1
83462: PPUSH
83463: CALL_OW 311
83467: DIFF
83468: PPUSH
83469: CALL_OW 1
83473: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83474: LD_ADDR_VAR 0 7
83478: PUSH
83479: LD_EXP 66
83483: PUSH
83484: LD_VAR 0 3
83488: ARRAY
83489: PPUSH
83490: LD_INT 1
83492: PPUSH
83493: LD_VAR 0 9
83497: PPUSH
83498: CALL_OW 2
83502: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83503: LD_ADDR_EXP 66
83507: PUSH
83508: LD_EXP 66
83512: PPUSH
83513: LD_VAR 0 3
83517: PPUSH
83518: LD_VAR 0 7
83522: PPUSH
83523: CALL_OW 1
83527: ST_TO_ADDR
// end else
83528: GO 83547
// MC_InsertProduceList ( i , [ components ] ) ;
83530: LD_VAR 0 3
83534: PPUSH
83535: LD_VAR 0 9
83539: PUSH
83540: EMPTY
83541: LIST
83542: PPUSH
83543: CALL 79516 0 2
// break ;
83547: GO 83551
// end ; end ;
83549: GO 83336
83551: POP
83552: POP
// end ; end ; if GetType ( un ) = unit_building then
83553: LD_VAR 0 1
83557: PPUSH
83558: CALL_OW 247
83562: PUSH
83563: LD_INT 3
83565: EQUAL
83566: IFFALSE 83969
// begin btype := GetBType ( un ) ;
83568: LD_ADDR_VAR 0 5
83572: PUSH
83573: LD_VAR 0 1
83577: PPUSH
83578: CALL_OW 266
83582: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83583: LD_VAR 0 5
83587: PUSH
83588: LD_INT 29
83590: PUSH
83591: LD_INT 30
83593: PUSH
83594: EMPTY
83595: LIST
83596: LIST
83597: IN
83598: IFFALSE 83671
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83600: LD_VAR 0 1
83604: PPUSH
83605: CALL_OW 250
83609: PPUSH
83610: LD_VAR 0 1
83614: PPUSH
83615: CALL_OW 251
83619: PPUSH
83620: LD_VAR 0 1
83624: PPUSH
83625: CALL_OW 255
83629: PPUSH
83630: CALL_OW 440
83634: NOT
83635: IFFALSE 83671
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83637: LD_VAR 0 1
83641: PPUSH
83642: CALL_OW 250
83646: PPUSH
83647: LD_VAR 0 1
83651: PPUSH
83652: CALL_OW 251
83656: PPUSH
83657: LD_VAR 0 1
83661: PPUSH
83662: CALL_OW 255
83666: PPUSH
83667: CALL_OW 441
// end ; if btype = b_warehouse then
83671: LD_VAR 0 5
83675: PUSH
83676: LD_INT 1
83678: EQUAL
83679: IFFALSE 83697
// begin btype := b_depot ;
83681: LD_ADDR_VAR 0 5
83685: PUSH
83686: LD_INT 0
83688: ST_TO_ADDR
// pos := 1 ;
83689: LD_ADDR_VAR 0 6
83693: PUSH
83694: LD_INT 1
83696: ST_TO_ADDR
// end ; if btype = b_factory then
83697: LD_VAR 0 5
83701: PUSH
83702: LD_INT 3
83704: EQUAL
83705: IFFALSE 83723
// begin btype := b_workshop ;
83707: LD_ADDR_VAR 0 5
83711: PUSH
83712: LD_INT 2
83714: ST_TO_ADDR
// pos := 1 ;
83715: LD_ADDR_VAR 0 6
83719: PUSH
83720: LD_INT 1
83722: ST_TO_ADDR
// end ; if btype = b_barracks then
83723: LD_VAR 0 5
83727: PUSH
83728: LD_INT 5
83730: EQUAL
83731: IFFALSE 83741
// btype := b_armoury ;
83733: LD_ADDR_VAR 0 5
83737: PUSH
83738: LD_INT 4
83740: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83741: LD_VAR 0 5
83745: PUSH
83746: LD_INT 7
83748: PUSH
83749: LD_INT 8
83751: PUSH
83752: EMPTY
83753: LIST
83754: LIST
83755: IN
83756: IFFALSE 83766
// btype := b_lab ;
83758: LD_ADDR_VAR 0 5
83762: PUSH
83763: LD_INT 6
83765: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83766: LD_ADDR_EXP 50
83770: PUSH
83771: LD_EXP 50
83775: PPUSH
83776: LD_VAR 0 3
83780: PUSH
83781: LD_EXP 50
83785: PUSH
83786: LD_VAR 0 3
83790: ARRAY
83791: PUSH
83792: LD_INT 1
83794: PLUS
83795: PUSH
83796: EMPTY
83797: LIST
83798: LIST
83799: PPUSH
83800: LD_VAR 0 5
83804: PUSH
83805: LD_VAR 0 1
83809: PPUSH
83810: CALL_OW 250
83814: PUSH
83815: LD_VAR 0 1
83819: PPUSH
83820: CALL_OW 251
83824: PUSH
83825: LD_VAR 0 1
83829: PPUSH
83830: CALL_OW 254
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: LIST
83839: LIST
83840: PPUSH
83841: CALL 24294 0 3
83845: ST_TO_ADDR
// if pos = 1 then
83846: LD_VAR 0 6
83850: PUSH
83851: LD_INT 1
83853: EQUAL
83854: IFFALSE 83969
// begin tmp := mc_build_list [ i ] ;
83856: LD_ADDR_VAR 0 7
83860: PUSH
83861: LD_EXP 50
83865: PUSH
83866: LD_VAR 0 3
83870: ARRAY
83871: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83872: LD_VAR 0 7
83876: PPUSH
83877: LD_INT 2
83879: PUSH
83880: LD_INT 30
83882: PUSH
83883: LD_INT 0
83885: PUSH
83886: EMPTY
83887: LIST
83888: LIST
83889: PUSH
83890: LD_INT 30
83892: PUSH
83893: LD_INT 1
83895: PUSH
83896: EMPTY
83897: LIST
83898: LIST
83899: PUSH
83900: EMPTY
83901: LIST
83902: LIST
83903: LIST
83904: PPUSH
83905: CALL_OW 72
83909: IFFALSE 83919
// pos := 2 ;
83911: LD_ADDR_VAR 0 6
83915: PUSH
83916: LD_INT 2
83918: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83919: LD_ADDR_VAR 0 7
83923: PUSH
83924: LD_VAR 0 7
83928: PPUSH
83929: LD_VAR 0 6
83933: PPUSH
83934: LD_VAR 0 7
83938: PPUSH
83939: CALL 24620 0 3
83943: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83944: LD_ADDR_EXP 50
83948: PUSH
83949: LD_EXP 50
83953: PPUSH
83954: LD_VAR 0 3
83958: PPUSH
83959: LD_VAR 0 7
83963: PPUSH
83964: CALL_OW 1
83968: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83969: LD_VAR 0 1
83973: PUSH
83974: LD_EXP 45
83978: PUSH
83979: LD_VAR 0 3
83983: ARRAY
83984: IN
83985: IFFALSE 84024
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83987: LD_ADDR_EXP 45
83991: PUSH
83992: LD_EXP 45
83996: PPUSH
83997: LD_VAR 0 3
84001: PPUSH
84002: LD_EXP 45
84006: PUSH
84007: LD_VAR 0 3
84011: ARRAY
84012: PUSH
84013: LD_VAR 0 1
84017: DIFF
84018: PPUSH
84019: CALL_OW 1
84023: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84024: LD_VAR 0 1
84028: PUSH
84029: LD_EXP 52
84033: PUSH
84034: LD_VAR 0 3
84038: ARRAY
84039: IN
84040: IFFALSE 84079
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84042: LD_ADDR_EXP 52
84046: PUSH
84047: LD_EXP 52
84051: PPUSH
84052: LD_VAR 0 3
84056: PPUSH
84057: LD_EXP 52
84061: PUSH
84062: LD_VAR 0 3
84066: ARRAY
84067: PUSH
84068: LD_VAR 0 1
84072: DIFF
84073: PPUSH
84074: CALL_OW 1
84078: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84079: LD_VAR 0 1
84083: PUSH
84084: LD_EXP 64
84088: PUSH
84089: LD_VAR 0 3
84093: ARRAY
84094: IN
84095: IFFALSE 84134
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84097: LD_ADDR_EXP 64
84101: PUSH
84102: LD_EXP 64
84106: PPUSH
84107: LD_VAR 0 3
84111: PPUSH
84112: LD_EXP 64
84116: PUSH
84117: LD_VAR 0 3
84121: ARRAY
84122: PUSH
84123: LD_VAR 0 1
84127: DIFF
84128: PPUSH
84129: CALL_OW 1
84133: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84134: LD_VAR 0 1
84138: PUSH
84139: LD_EXP 67
84143: PUSH
84144: LD_VAR 0 3
84148: ARRAY
84149: IN
84150: IFFALSE 84189
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84152: LD_ADDR_EXP 67
84156: PUSH
84157: LD_EXP 67
84161: PPUSH
84162: LD_VAR 0 3
84166: PPUSH
84167: LD_EXP 67
84171: PUSH
84172: LD_VAR 0 3
84176: ARRAY
84177: PUSH
84178: LD_VAR 0 1
84182: DIFF
84183: PPUSH
84184: CALL_OW 1
84188: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84189: LD_VAR 0 1
84193: PUSH
84194: LD_EXP 54
84198: PUSH
84199: LD_VAR 0 3
84203: ARRAY
84204: IN
84205: IFFALSE 84244
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84207: LD_ADDR_EXP 54
84211: PUSH
84212: LD_EXP 54
84216: PPUSH
84217: LD_VAR 0 3
84221: PPUSH
84222: LD_EXP 54
84226: PUSH
84227: LD_VAR 0 3
84231: ARRAY
84232: PUSH
84233: LD_VAR 0 1
84237: DIFF
84238: PPUSH
84239: CALL_OW 1
84243: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84244: LD_VAR 0 1
84248: PUSH
84249: LD_EXP 53
84253: PUSH
84254: LD_VAR 0 3
84258: ARRAY
84259: IN
84260: IFFALSE 84299
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84262: LD_ADDR_EXP 53
84266: PUSH
84267: LD_EXP 53
84271: PPUSH
84272: LD_VAR 0 3
84276: PPUSH
84277: LD_EXP 53
84281: PUSH
84282: LD_VAR 0 3
84286: ARRAY
84287: PUSH
84288: LD_VAR 0 1
84292: DIFF
84293: PPUSH
84294: CALL_OW 1
84298: ST_TO_ADDR
// end ; break ;
84299: GO 84303
// end ;
84301: GO 82949
84303: POP
84304: POP
// end ;
84305: LD_VAR 0 2
84309: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84310: LD_INT 0
84312: PPUSH
84313: PPUSH
84314: PPUSH
// if not mc_bases or not skirmish then
84315: LD_EXP 45
84319: NOT
84320: PUSH
84321: LD_EXP 43
84325: NOT
84326: OR
84327: IFFALSE 84331
// exit ;
84329: GO 84546
// for i = 1 to mc_bases do
84331: LD_ADDR_VAR 0 3
84335: PUSH
84336: DOUBLE
84337: LD_INT 1
84339: DEC
84340: ST_TO_ADDR
84341: LD_EXP 45
84345: PUSH
84346: FOR_TO
84347: IFFALSE 84544
// begin if building in mc_construct_list [ i ] then
84349: LD_VAR 0 1
84353: PUSH
84354: LD_EXP 52
84358: PUSH
84359: LD_VAR 0 3
84363: ARRAY
84364: IN
84365: IFFALSE 84542
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84367: LD_ADDR_EXP 52
84371: PUSH
84372: LD_EXP 52
84376: PPUSH
84377: LD_VAR 0 3
84381: PPUSH
84382: LD_EXP 52
84386: PUSH
84387: LD_VAR 0 3
84391: ARRAY
84392: PUSH
84393: LD_VAR 0 1
84397: DIFF
84398: PPUSH
84399: CALL_OW 1
84403: ST_TO_ADDR
// if building in mc_lab [ i ] then
84404: LD_VAR 0 1
84408: PUSH
84409: LD_EXP 78
84413: PUSH
84414: LD_VAR 0 3
84418: ARRAY
84419: IN
84420: IFFALSE 84475
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84422: LD_ADDR_EXP 79
84426: PUSH
84427: LD_EXP 79
84431: PPUSH
84432: LD_VAR 0 3
84436: PPUSH
84437: LD_EXP 79
84441: PUSH
84442: LD_VAR 0 3
84446: ARRAY
84447: PPUSH
84448: LD_INT 1
84450: PPUSH
84451: LD_EXP 79
84455: PUSH
84456: LD_VAR 0 3
84460: ARRAY
84461: PPUSH
84462: LD_INT 0
84464: PPUSH
84465: CALL 23712 0 4
84469: PPUSH
84470: CALL_OW 1
84474: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84475: LD_VAR 0 1
84479: PUSH
84480: LD_EXP 45
84484: PUSH
84485: LD_VAR 0 3
84489: ARRAY
84490: IN
84491: NOT
84492: IFFALSE 84538
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84494: LD_ADDR_EXP 45
84498: PUSH
84499: LD_EXP 45
84503: PPUSH
84504: LD_VAR 0 3
84508: PUSH
84509: LD_EXP 45
84513: PUSH
84514: LD_VAR 0 3
84518: ARRAY
84519: PUSH
84520: LD_INT 1
84522: PLUS
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: PPUSH
84528: LD_VAR 0 1
84532: PPUSH
84533: CALL 24294 0 3
84537: ST_TO_ADDR
// exit ;
84538: POP
84539: POP
84540: GO 84546
// end ; end ;
84542: GO 84346
84544: POP
84545: POP
// end ;
84546: LD_VAR 0 2
84550: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84551: LD_INT 0
84553: PPUSH
84554: PPUSH
84555: PPUSH
84556: PPUSH
84557: PPUSH
84558: PPUSH
84559: PPUSH
// if not mc_bases or not skirmish then
84560: LD_EXP 45
84564: NOT
84565: PUSH
84566: LD_EXP 43
84570: NOT
84571: OR
84572: IFFALSE 84576
// exit ;
84574: GO 85237
// for i = 1 to mc_bases do
84576: LD_ADDR_VAR 0 3
84580: PUSH
84581: DOUBLE
84582: LD_INT 1
84584: DEC
84585: ST_TO_ADDR
84586: LD_EXP 45
84590: PUSH
84591: FOR_TO
84592: IFFALSE 85235
// begin if building in mc_construct_list [ i ] then
84594: LD_VAR 0 1
84598: PUSH
84599: LD_EXP 52
84603: PUSH
84604: LD_VAR 0 3
84608: ARRAY
84609: IN
84610: IFFALSE 85233
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84612: LD_ADDR_EXP 52
84616: PUSH
84617: LD_EXP 52
84621: PPUSH
84622: LD_VAR 0 3
84626: PPUSH
84627: LD_EXP 52
84631: PUSH
84632: LD_VAR 0 3
84636: ARRAY
84637: PUSH
84638: LD_VAR 0 1
84642: DIFF
84643: PPUSH
84644: CALL_OW 1
84648: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84649: LD_ADDR_EXP 45
84653: PUSH
84654: LD_EXP 45
84658: PPUSH
84659: LD_VAR 0 3
84663: PUSH
84664: LD_EXP 45
84668: PUSH
84669: LD_VAR 0 3
84673: ARRAY
84674: PUSH
84675: LD_INT 1
84677: PLUS
84678: PUSH
84679: EMPTY
84680: LIST
84681: LIST
84682: PPUSH
84683: LD_VAR 0 1
84687: PPUSH
84688: CALL 24294 0 3
84692: ST_TO_ADDR
// btype := GetBType ( building ) ;
84693: LD_ADDR_VAR 0 5
84697: PUSH
84698: LD_VAR 0 1
84702: PPUSH
84703: CALL_OW 266
84707: ST_TO_ADDR
// side := GetSide ( building ) ;
84708: LD_ADDR_VAR 0 8
84712: PUSH
84713: LD_VAR 0 1
84717: PPUSH
84718: CALL_OW 255
84722: ST_TO_ADDR
// if btype = b_lab then
84723: LD_VAR 0 5
84727: PUSH
84728: LD_INT 6
84730: EQUAL
84731: IFFALSE 84781
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84733: LD_ADDR_EXP 78
84737: PUSH
84738: LD_EXP 78
84742: PPUSH
84743: LD_VAR 0 3
84747: PUSH
84748: LD_EXP 78
84752: PUSH
84753: LD_VAR 0 3
84757: ARRAY
84758: PUSH
84759: LD_INT 1
84761: PLUS
84762: PUSH
84763: EMPTY
84764: LIST
84765: LIST
84766: PPUSH
84767: LD_VAR 0 1
84771: PPUSH
84772: CALL 24294 0 3
84776: ST_TO_ADDR
// exit ;
84777: POP
84778: POP
84779: GO 85237
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84781: LD_VAR 0 5
84785: PUSH
84786: LD_INT 0
84788: PUSH
84789: LD_INT 2
84791: PUSH
84792: LD_INT 4
84794: PUSH
84795: EMPTY
84796: LIST
84797: LIST
84798: LIST
84799: IN
84800: IFFALSE 84924
// begin if btype = b_armoury then
84802: LD_VAR 0 5
84806: PUSH
84807: LD_INT 4
84809: EQUAL
84810: IFFALSE 84820
// btype := b_barracks ;
84812: LD_ADDR_VAR 0 5
84816: PUSH
84817: LD_INT 5
84819: ST_TO_ADDR
// if btype = b_depot then
84820: LD_VAR 0 5
84824: PUSH
84825: LD_INT 0
84827: EQUAL
84828: IFFALSE 84838
// btype := b_warehouse ;
84830: LD_ADDR_VAR 0 5
84834: PUSH
84835: LD_INT 1
84837: ST_TO_ADDR
// if btype = b_workshop then
84838: LD_VAR 0 5
84842: PUSH
84843: LD_INT 2
84845: EQUAL
84846: IFFALSE 84856
// btype := b_factory ;
84848: LD_ADDR_VAR 0 5
84852: PUSH
84853: LD_INT 3
84855: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84856: LD_VAR 0 5
84860: PPUSH
84861: LD_VAR 0 8
84865: PPUSH
84866: CALL_OW 323
84870: PUSH
84871: LD_INT 1
84873: EQUAL
84874: IFFALSE 84920
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84876: LD_ADDR_EXP 77
84880: PUSH
84881: LD_EXP 77
84885: PPUSH
84886: LD_VAR 0 3
84890: PUSH
84891: LD_EXP 77
84895: PUSH
84896: LD_VAR 0 3
84900: ARRAY
84901: PUSH
84902: LD_INT 1
84904: PLUS
84905: PUSH
84906: EMPTY
84907: LIST
84908: LIST
84909: PPUSH
84910: LD_VAR 0 1
84914: PPUSH
84915: CALL 24294 0 3
84919: ST_TO_ADDR
// exit ;
84920: POP
84921: POP
84922: GO 85237
// end ; if btype in [ b_bunker , b_turret ] then
84924: LD_VAR 0 5
84928: PUSH
84929: LD_INT 32
84931: PUSH
84932: LD_INT 33
84934: PUSH
84935: EMPTY
84936: LIST
84937: LIST
84938: IN
84939: IFFALSE 85229
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84941: LD_ADDR_EXP 53
84945: PUSH
84946: LD_EXP 53
84950: PPUSH
84951: LD_VAR 0 3
84955: PUSH
84956: LD_EXP 53
84960: PUSH
84961: LD_VAR 0 3
84965: ARRAY
84966: PUSH
84967: LD_INT 1
84969: PLUS
84970: PUSH
84971: EMPTY
84972: LIST
84973: LIST
84974: PPUSH
84975: LD_VAR 0 1
84979: PPUSH
84980: CALL 24294 0 3
84984: ST_TO_ADDR
// if btype = b_bunker then
84985: LD_VAR 0 5
84989: PUSH
84990: LD_INT 32
84992: EQUAL
84993: IFFALSE 85229
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84995: LD_ADDR_EXP 54
84999: PUSH
85000: LD_EXP 54
85004: PPUSH
85005: LD_VAR 0 3
85009: PUSH
85010: LD_EXP 54
85014: PUSH
85015: LD_VAR 0 3
85019: ARRAY
85020: PUSH
85021: LD_INT 1
85023: PLUS
85024: PUSH
85025: EMPTY
85026: LIST
85027: LIST
85028: PPUSH
85029: LD_VAR 0 1
85033: PPUSH
85034: CALL 24294 0 3
85038: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85039: LD_ADDR_VAR 0 6
85043: PUSH
85044: LD_EXP 45
85048: PUSH
85049: LD_VAR 0 3
85053: ARRAY
85054: PPUSH
85055: LD_INT 25
85057: PUSH
85058: LD_INT 1
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: LD_INT 3
85067: PUSH
85068: LD_INT 54
85070: PUSH
85071: EMPTY
85072: LIST
85073: PUSH
85074: EMPTY
85075: LIST
85076: LIST
85077: PUSH
85078: EMPTY
85079: LIST
85080: LIST
85081: PPUSH
85082: CALL_OW 72
85086: ST_TO_ADDR
// if tmp then
85087: LD_VAR 0 6
85091: IFFALSE 85097
// exit ;
85093: POP
85094: POP
85095: GO 85237
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85097: LD_ADDR_VAR 0 6
85101: PUSH
85102: LD_EXP 45
85106: PUSH
85107: LD_VAR 0 3
85111: ARRAY
85112: PPUSH
85113: LD_INT 2
85115: PUSH
85116: LD_INT 30
85118: PUSH
85119: LD_INT 4
85121: PUSH
85122: EMPTY
85123: LIST
85124: LIST
85125: PUSH
85126: LD_INT 30
85128: PUSH
85129: LD_INT 5
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: LIST
85140: PPUSH
85141: CALL_OW 72
85145: ST_TO_ADDR
// if not tmp then
85146: LD_VAR 0 6
85150: NOT
85151: IFFALSE 85157
// exit ;
85153: POP
85154: POP
85155: GO 85237
// for j in tmp do
85157: LD_ADDR_VAR 0 4
85161: PUSH
85162: LD_VAR 0 6
85166: PUSH
85167: FOR_IN
85168: IFFALSE 85227
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85170: LD_ADDR_VAR 0 7
85174: PUSH
85175: LD_VAR 0 4
85179: PPUSH
85180: CALL_OW 313
85184: PPUSH
85185: LD_INT 25
85187: PUSH
85188: LD_INT 1
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: PPUSH
85195: CALL_OW 72
85199: ST_TO_ADDR
// if units then
85200: LD_VAR 0 7
85204: IFFALSE 85225
// begin ComExitBuilding ( units [ 1 ] ) ;
85206: LD_VAR 0 7
85210: PUSH
85211: LD_INT 1
85213: ARRAY
85214: PPUSH
85215: CALL_OW 122
// exit ;
85219: POP
85220: POP
85221: POP
85222: POP
85223: GO 85237
// end ; end ;
85225: GO 85167
85227: POP
85228: POP
// end ; end ; exit ;
85229: POP
85230: POP
85231: GO 85237
// end ; end ;
85233: GO 84591
85235: POP
85236: POP
// end ;
85237: LD_VAR 0 2
85241: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85242: LD_INT 0
85244: PPUSH
85245: PPUSH
85246: PPUSH
85247: PPUSH
85248: PPUSH
85249: PPUSH
85250: PPUSH
// if not mc_bases or not skirmish then
85251: LD_EXP 45
85255: NOT
85256: PUSH
85257: LD_EXP 43
85261: NOT
85262: OR
85263: IFFALSE 85267
// exit ;
85265: GO 85498
// btype := GetBType ( building ) ;
85267: LD_ADDR_VAR 0 6
85271: PUSH
85272: LD_VAR 0 1
85276: PPUSH
85277: CALL_OW 266
85281: ST_TO_ADDR
// x := GetX ( building ) ;
85282: LD_ADDR_VAR 0 7
85286: PUSH
85287: LD_VAR 0 1
85291: PPUSH
85292: CALL_OW 250
85296: ST_TO_ADDR
// y := GetY ( building ) ;
85297: LD_ADDR_VAR 0 8
85301: PUSH
85302: LD_VAR 0 1
85306: PPUSH
85307: CALL_OW 251
85311: ST_TO_ADDR
// d := GetDir ( building ) ;
85312: LD_ADDR_VAR 0 9
85316: PUSH
85317: LD_VAR 0 1
85321: PPUSH
85322: CALL_OW 254
85326: ST_TO_ADDR
// for i = 1 to mc_bases do
85327: LD_ADDR_VAR 0 4
85331: PUSH
85332: DOUBLE
85333: LD_INT 1
85335: DEC
85336: ST_TO_ADDR
85337: LD_EXP 45
85341: PUSH
85342: FOR_TO
85343: IFFALSE 85496
// begin if not mc_build_list [ i ] then
85345: LD_EXP 50
85349: PUSH
85350: LD_VAR 0 4
85354: ARRAY
85355: NOT
85356: IFFALSE 85360
// continue ;
85358: GO 85342
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85360: LD_VAR 0 6
85364: PUSH
85365: LD_VAR 0 7
85369: PUSH
85370: LD_VAR 0 8
85374: PUSH
85375: LD_VAR 0 9
85379: PUSH
85380: EMPTY
85381: LIST
85382: LIST
85383: LIST
85384: LIST
85385: PPUSH
85386: LD_EXP 50
85390: PUSH
85391: LD_VAR 0 4
85395: ARRAY
85396: PUSH
85397: LD_INT 1
85399: ARRAY
85400: PPUSH
85401: CALL 30463 0 2
85405: IFFALSE 85494
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85407: LD_ADDR_EXP 50
85411: PUSH
85412: LD_EXP 50
85416: PPUSH
85417: LD_VAR 0 4
85421: PPUSH
85422: LD_EXP 50
85426: PUSH
85427: LD_VAR 0 4
85431: ARRAY
85432: PPUSH
85433: LD_INT 1
85435: PPUSH
85436: CALL_OW 3
85440: PPUSH
85441: CALL_OW 1
85445: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85446: LD_ADDR_EXP 52
85450: PUSH
85451: LD_EXP 52
85455: PPUSH
85456: LD_VAR 0 4
85460: PUSH
85461: LD_EXP 52
85465: PUSH
85466: LD_VAR 0 4
85470: ARRAY
85471: PUSH
85472: LD_INT 1
85474: PLUS
85475: PUSH
85476: EMPTY
85477: LIST
85478: LIST
85479: PPUSH
85480: LD_VAR 0 1
85484: PPUSH
85485: CALL 24294 0 3
85489: ST_TO_ADDR
// exit ;
85490: POP
85491: POP
85492: GO 85498
// end ; end ;
85494: GO 85342
85496: POP
85497: POP
// end ;
85498: LD_VAR 0 3
85502: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85503: LD_INT 0
85505: PPUSH
85506: PPUSH
85507: PPUSH
// if not mc_bases or not skirmish then
85508: LD_EXP 45
85512: NOT
85513: PUSH
85514: LD_EXP 43
85518: NOT
85519: OR
85520: IFFALSE 85524
// exit ;
85522: GO 85714
// for i = 1 to mc_bases do
85524: LD_ADDR_VAR 0 4
85528: PUSH
85529: DOUBLE
85530: LD_INT 1
85532: DEC
85533: ST_TO_ADDR
85534: LD_EXP 45
85538: PUSH
85539: FOR_TO
85540: IFFALSE 85627
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85542: LD_VAR 0 1
85546: PUSH
85547: LD_EXP 53
85551: PUSH
85552: LD_VAR 0 4
85556: ARRAY
85557: IN
85558: PUSH
85559: LD_VAR 0 1
85563: PUSH
85564: LD_EXP 54
85568: PUSH
85569: LD_VAR 0 4
85573: ARRAY
85574: IN
85575: NOT
85576: AND
85577: IFFALSE 85625
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85579: LD_ADDR_EXP 54
85583: PUSH
85584: LD_EXP 54
85588: PPUSH
85589: LD_VAR 0 4
85593: PUSH
85594: LD_EXP 54
85598: PUSH
85599: LD_VAR 0 4
85603: ARRAY
85604: PUSH
85605: LD_INT 1
85607: PLUS
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: PPUSH
85613: LD_VAR 0 1
85617: PPUSH
85618: CALL 24294 0 3
85622: ST_TO_ADDR
// break ;
85623: GO 85627
// end ; end ;
85625: GO 85539
85627: POP
85628: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85629: LD_VAR 0 1
85633: PPUSH
85634: CALL_OW 257
85638: PUSH
85639: LD_EXP 71
85643: IN
85644: PUSH
85645: LD_VAR 0 1
85649: PPUSH
85650: CALL_OW 266
85654: PUSH
85655: LD_INT 5
85657: EQUAL
85658: AND
85659: PUSH
85660: LD_VAR 0 2
85664: PPUSH
85665: CALL_OW 110
85669: PUSH
85670: LD_INT 18
85672: NONEQUAL
85673: AND
85674: IFFALSE 85714
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85676: LD_VAR 0 2
85680: PPUSH
85681: CALL_OW 257
85685: PUSH
85686: LD_INT 5
85688: PUSH
85689: LD_INT 8
85691: PUSH
85692: LD_INT 9
85694: PUSH
85695: EMPTY
85696: LIST
85697: LIST
85698: LIST
85699: IN
85700: IFFALSE 85714
// SetClass ( unit , 1 ) ;
85702: LD_VAR 0 2
85706: PPUSH
85707: LD_INT 1
85709: PPUSH
85710: CALL_OW 336
// end ;
85714: LD_VAR 0 3
85718: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85719: LD_INT 0
85721: PPUSH
85722: PPUSH
// if not mc_bases or not skirmish then
85723: LD_EXP 45
85727: NOT
85728: PUSH
85729: LD_EXP 43
85733: NOT
85734: OR
85735: IFFALSE 85739
// exit ;
85737: GO 85855
// if GetLives ( abandoned_vehicle ) > 250 then
85739: LD_VAR 0 2
85743: PPUSH
85744: CALL_OW 256
85748: PUSH
85749: LD_INT 250
85751: GREATER
85752: IFFALSE 85756
// exit ;
85754: GO 85855
// for i = 1 to mc_bases do
85756: LD_ADDR_VAR 0 6
85760: PUSH
85761: DOUBLE
85762: LD_INT 1
85764: DEC
85765: ST_TO_ADDR
85766: LD_EXP 45
85770: PUSH
85771: FOR_TO
85772: IFFALSE 85853
// begin if driver in mc_bases [ i ] then
85774: LD_VAR 0 1
85778: PUSH
85779: LD_EXP 45
85783: PUSH
85784: LD_VAR 0 6
85788: ARRAY
85789: IN
85790: IFFALSE 85851
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85792: LD_VAR 0 1
85796: PPUSH
85797: LD_EXP 45
85801: PUSH
85802: LD_VAR 0 6
85806: ARRAY
85807: PPUSH
85808: LD_INT 2
85810: PUSH
85811: LD_INT 30
85813: PUSH
85814: LD_INT 0
85816: PUSH
85817: EMPTY
85818: LIST
85819: LIST
85820: PUSH
85821: LD_INT 30
85823: PUSH
85824: LD_INT 1
85826: PUSH
85827: EMPTY
85828: LIST
85829: LIST
85830: PUSH
85831: EMPTY
85832: LIST
85833: LIST
85834: LIST
85835: PPUSH
85836: CALL_OW 72
85840: PUSH
85841: LD_INT 1
85843: ARRAY
85844: PPUSH
85845: CALL_OW 112
// break ;
85849: GO 85853
// end ; end ;
85851: GO 85771
85853: POP
85854: POP
// end ; end_of_file end_of_file
85855: LD_VAR 0 5
85859: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
85860: GO 85862
85862: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
85863: LD_STRING initStreamRollete();
85865: PPUSH
85866: CALL_OW 559
// InitStreamMode ;
85870: CALL 85879 0 0
// DefineStreamItems ( ) ;
85874: CALL 86319 0 0
// end ;
85878: END
// function InitStreamMode ; begin
85879: LD_INT 0
85881: PPUSH
// streamModeActive := false ;
85882: LD_ADDR_EXP 88
85886: PUSH
85887: LD_INT 0
85889: ST_TO_ADDR
// normalCounter := 36 ;
85890: LD_ADDR_EXP 89
85894: PUSH
85895: LD_INT 36
85897: ST_TO_ADDR
// hardcoreCounter := 16 ;
85898: LD_ADDR_EXP 90
85902: PUSH
85903: LD_INT 16
85905: ST_TO_ADDR
// sRocket := false ;
85906: LD_ADDR_EXP 93
85910: PUSH
85911: LD_INT 0
85913: ST_TO_ADDR
// sSpeed := false ;
85914: LD_ADDR_EXP 92
85918: PUSH
85919: LD_INT 0
85921: ST_TO_ADDR
// sEngine := false ;
85922: LD_ADDR_EXP 94
85926: PUSH
85927: LD_INT 0
85929: ST_TO_ADDR
// sSpec := false ;
85930: LD_ADDR_EXP 91
85934: PUSH
85935: LD_INT 0
85937: ST_TO_ADDR
// sLevel := false ;
85938: LD_ADDR_EXP 95
85942: PUSH
85943: LD_INT 0
85945: ST_TO_ADDR
// sArmoury := false ;
85946: LD_ADDR_EXP 96
85950: PUSH
85951: LD_INT 0
85953: ST_TO_ADDR
// sRadar := false ;
85954: LD_ADDR_EXP 97
85958: PUSH
85959: LD_INT 0
85961: ST_TO_ADDR
// sBunker := false ;
85962: LD_ADDR_EXP 98
85966: PUSH
85967: LD_INT 0
85969: ST_TO_ADDR
// sHack := false ;
85970: LD_ADDR_EXP 99
85974: PUSH
85975: LD_INT 0
85977: ST_TO_ADDR
// sFire := false ;
85978: LD_ADDR_EXP 100
85982: PUSH
85983: LD_INT 0
85985: ST_TO_ADDR
// sRefresh := false ;
85986: LD_ADDR_EXP 101
85990: PUSH
85991: LD_INT 0
85993: ST_TO_ADDR
// sExp := false ;
85994: LD_ADDR_EXP 102
85998: PUSH
85999: LD_INT 0
86001: ST_TO_ADDR
// sDepot := false ;
86002: LD_ADDR_EXP 103
86006: PUSH
86007: LD_INT 0
86009: ST_TO_ADDR
// sFlag := false ;
86010: LD_ADDR_EXP 104
86014: PUSH
86015: LD_INT 0
86017: ST_TO_ADDR
// sKamikadze := false ;
86018: LD_ADDR_EXP 112
86022: PUSH
86023: LD_INT 0
86025: ST_TO_ADDR
// sTroll := false ;
86026: LD_ADDR_EXP 113
86030: PUSH
86031: LD_INT 0
86033: ST_TO_ADDR
// sSlow := false ;
86034: LD_ADDR_EXP 114
86038: PUSH
86039: LD_INT 0
86041: ST_TO_ADDR
// sLack := false ;
86042: LD_ADDR_EXP 115
86046: PUSH
86047: LD_INT 0
86049: ST_TO_ADDR
// sTank := false ;
86050: LD_ADDR_EXP 117
86054: PUSH
86055: LD_INT 0
86057: ST_TO_ADDR
// sRemote := false ;
86058: LD_ADDR_EXP 118
86062: PUSH
86063: LD_INT 0
86065: ST_TO_ADDR
// sPowell := false ;
86066: LD_ADDR_EXP 119
86070: PUSH
86071: LD_INT 0
86073: ST_TO_ADDR
// sTeleport := false ;
86074: LD_ADDR_EXP 122
86078: PUSH
86079: LD_INT 0
86081: ST_TO_ADDR
// sOilTower := false ;
86082: LD_ADDR_EXP 124
86086: PUSH
86087: LD_INT 0
86089: ST_TO_ADDR
// sShovel := false ;
86090: LD_ADDR_EXP 125
86094: PUSH
86095: LD_INT 0
86097: ST_TO_ADDR
// sSheik := false ;
86098: LD_ADDR_EXP 126
86102: PUSH
86103: LD_INT 0
86105: ST_TO_ADDR
// sEarthquake := false ;
86106: LD_ADDR_EXP 128
86110: PUSH
86111: LD_INT 0
86113: ST_TO_ADDR
// sAI := false ;
86114: LD_ADDR_EXP 129
86118: PUSH
86119: LD_INT 0
86121: ST_TO_ADDR
// sCargo := false ;
86122: LD_ADDR_EXP 132
86126: PUSH
86127: LD_INT 0
86129: ST_TO_ADDR
// sDLaser := false ;
86130: LD_ADDR_EXP 133
86134: PUSH
86135: LD_INT 0
86137: ST_TO_ADDR
// sExchange := false ;
86138: LD_ADDR_EXP 134
86142: PUSH
86143: LD_INT 0
86145: ST_TO_ADDR
// sFac := false ;
86146: LD_ADDR_EXP 135
86150: PUSH
86151: LD_INT 0
86153: ST_TO_ADDR
// sPower := false ;
86154: LD_ADDR_EXP 136
86158: PUSH
86159: LD_INT 0
86161: ST_TO_ADDR
// sRandom := false ;
86162: LD_ADDR_EXP 137
86166: PUSH
86167: LD_INT 0
86169: ST_TO_ADDR
// sShield := false ;
86170: LD_ADDR_EXP 138
86174: PUSH
86175: LD_INT 0
86177: ST_TO_ADDR
// sTime := false ;
86178: LD_ADDR_EXP 139
86182: PUSH
86183: LD_INT 0
86185: ST_TO_ADDR
// sTools := false ;
86186: LD_ADDR_EXP 140
86190: PUSH
86191: LD_INT 0
86193: ST_TO_ADDR
// sSold := false ;
86194: LD_ADDR_EXP 105
86198: PUSH
86199: LD_INT 0
86201: ST_TO_ADDR
// sDiff := false ;
86202: LD_ADDR_EXP 106
86206: PUSH
86207: LD_INT 0
86209: ST_TO_ADDR
// sFog := false ;
86210: LD_ADDR_EXP 109
86214: PUSH
86215: LD_INT 0
86217: ST_TO_ADDR
// sReset := false ;
86218: LD_ADDR_EXP 110
86222: PUSH
86223: LD_INT 0
86225: ST_TO_ADDR
// sSun := false ;
86226: LD_ADDR_EXP 111
86230: PUSH
86231: LD_INT 0
86233: ST_TO_ADDR
// sTiger := false ;
86234: LD_ADDR_EXP 107
86238: PUSH
86239: LD_INT 0
86241: ST_TO_ADDR
// sBomb := false ;
86242: LD_ADDR_EXP 108
86246: PUSH
86247: LD_INT 0
86249: ST_TO_ADDR
// sWound := false ;
86250: LD_ADDR_EXP 116
86254: PUSH
86255: LD_INT 0
86257: ST_TO_ADDR
// sBetray := false ;
86258: LD_ADDR_EXP 120
86262: PUSH
86263: LD_INT 0
86265: ST_TO_ADDR
// sContamin := false ;
86266: LD_ADDR_EXP 121
86270: PUSH
86271: LD_INT 0
86273: ST_TO_ADDR
// sOil := false ;
86274: LD_ADDR_EXP 123
86278: PUSH
86279: LD_INT 0
86281: ST_TO_ADDR
// sStu := false ;
86282: LD_ADDR_EXP 127
86286: PUSH
86287: LD_INT 0
86289: ST_TO_ADDR
// sBazooka := false ;
86290: LD_ADDR_EXP 130
86294: PUSH
86295: LD_INT 0
86297: ST_TO_ADDR
// sMortar := false ;
86298: LD_ADDR_EXP 131
86302: PUSH
86303: LD_INT 0
86305: ST_TO_ADDR
// sRanger := false ;
86306: LD_ADDR_EXP 141
86310: PUSH
86311: LD_INT 0
86313: ST_TO_ADDR
// end ;
86314: LD_VAR 0 1
86318: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
86319: LD_INT 0
86321: PPUSH
86322: PPUSH
86323: PPUSH
86324: PPUSH
86325: PPUSH
// result := [ ] ;
86326: LD_ADDR_VAR 0 1
86330: PUSH
86331: EMPTY
86332: ST_TO_ADDR
// if campaign_id = 1 then
86333: LD_OWVAR 69
86337: PUSH
86338: LD_INT 1
86340: EQUAL
86341: IFFALSE 89279
// begin case mission_number of 1 :
86343: LD_OWVAR 70
86347: PUSH
86348: LD_INT 1
86350: DOUBLE
86351: EQUAL
86352: IFTRUE 86356
86354: GO 86420
86356: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
86357: LD_ADDR_VAR 0 1
86361: PUSH
86362: LD_INT 2
86364: PUSH
86365: LD_INT 4
86367: PUSH
86368: LD_INT 11
86370: PUSH
86371: LD_INT 12
86373: PUSH
86374: LD_INT 15
86376: PUSH
86377: LD_INT 16
86379: PUSH
86380: LD_INT 22
86382: PUSH
86383: LD_INT 23
86385: PUSH
86386: LD_INT 26
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: LIST
86393: LIST
86394: LIST
86395: LIST
86396: LIST
86397: LIST
86398: LIST
86399: PUSH
86400: LD_INT 101
86402: PUSH
86403: LD_INT 102
86405: PUSH
86406: LD_INT 106
86408: PUSH
86409: EMPTY
86410: LIST
86411: LIST
86412: LIST
86413: PUSH
86414: EMPTY
86415: LIST
86416: LIST
86417: ST_TO_ADDR
86418: GO 89277
86420: LD_INT 2
86422: DOUBLE
86423: EQUAL
86424: IFTRUE 86428
86426: GO 86500
86428: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
86429: LD_ADDR_VAR 0 1
86433: PUSH
86434: LD_INT 2
86436: PUSH
86437: LD_INT 4
86439: PUSH
86440: LD_INT 11
86442: PUSH
86443: LD_INT 12
86445: PUSH
86446: LD_INT 15
86448: PUSH
86449: LD_INT 16
86451: PUSH
86452: LD_INT 22
86454: PUSH
86455: LD_INT 23
86457: PUSH
86458: LD_INT 26
86460: PUSH
86461: EMPTY
86462: LIST
86463: LIST
86464: LIST
86465: LIST
86466: LIST
86467: LIST
86468: LIST
86469: LIST
86470: LIST
86471: PUSH
86472: LD_INT 101
86474: PUSH
86475: LD_INT 102
86477: PUSH
86478: LD_INT 105
86480: PUSH
86481: LD_INT 106
86483: PUSH
86484: LD_INT 108
86486: PUSH
86487: EMPTY
86488: LIST
86489: LIST
86490: LIST
86491: LIST
86492: LIST
86493: PUSH
86494: EMPTY
86495: LIST
86496: LIST
86497: ST_TO_ADDR
86498: GO 89277
86500: LD_INT 3
86502: DOUBLE
86503: EQUAL
86504: IFTRUE 86508
86506: GO 86584
86508: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
86509: LD_ADDR_VAR 0 1
86513: PUSH
86514: LD_INT 2
86516: PUSH
86517: LD_INT 4
86519: PUSH
86520: LD_INT 5
86522: PUSH
86523: LD_INT 11
86525: PUSH
86526: LD_INT 12
86528: PUSH
86529: LD_INT 15
86531: PUSH
86532: LD_INT 16
86534: PUSH
86535: LD_INT 22
86537: PUSH
86538: LD_INT 26
86540: PUSH
86541: LD_INT 36
86543: PUSH
86544: EMPTY
86545: LIST
86546: LIST
86547: LIST
86548: LIST
86549: LIST
86550: LIST
86551: LIST
86552: LIST
86553: LIST
86554: LIST
86555: PUSH
86556: LD_INT 101
86558: PUSH
86559: LD_INT 102
86561: PUSH
86562: LD_INT 105
86564: PUSH
86565: LD_INT 106
86567: PUSH
86568: LD_INT 108
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: PUSH
86578: EMPTY
86579: LIST
86580: LIST
86581: ST_TO_ADDR
86582: GO 89277
86584: LD_INT 4
86586: DOUBLE
86587: EQUAL
86588: IFTRUE 86592
86590: GO 86676
86592: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
86593: LD_ADDR_VAR 0 1
86597: PUSH
86598: LD_INT 2
86600: PUSH
86601: LD_INT 4
86603: PUSH
86604: LD_INT 5
86606: PUSH
86607: LD_INT 8
86609: PUSH
86610: LD_INT 11
86612: PUSH
86613: LD_INT 12
86615: PUSH
86616: LD_INT 15
86618: PUSH
86619: LD_INT 16
86621: PUSH
86622: LD_INT 22
86624: PUSH
86625: LD_INT 23
86627: PUSH
86628: LD_INT 26
86630: PUSH
86631: LD_INT 36
86633: PUSH
86634: EMPTY
86635: LIST
86636: LIST
86637: LIST
86638: LIST
86639: LIST
86640: LIST
86641: LIST
86642: LIST
86643: LIST
86644: LIST
86645: LIST
86646: LIST
86647: PUSH
86648: LD_INT 101
86650: PUSH
86651: LD_INT 102
86653: PUSH
86654: LD_INT 105
86656: PUSH
86657: LD_INT 106
86659: PUSH
86660: LD_INT 108
86662: PUSH
86663: EMPTY
86664: LIST
86665: LIST
86666: LIST
86667: LIST
86668: LIST
86669: PUSH
86670: EMPTY
86671: LIST
86672: LIST
86673: ST_TO_ADDR
86674: GO 89277
86676: LD_INT 5
86678: DOUBLE
86679: EQUAL
86680: IFTRUE 86684
86682: GO 86784
86684: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
86685: LD_ADDR_VAR 0 1
86689: PUSH
86690: LD_INT 2
86692: PUSH
86693: LD_INT 4
86695: PUSH
86696: LD_INT 5
86698: PUSH
86699: LD_INT 6
86701: PUSH
86702: LD_INT 8
86704: PUSH
86705: LD_INT 11
86707: PUSH
86708: LD_INT 12
86710: PUSH
86711: LD_INT 15
86713: PUSH
86714: LD_INT 16
86716: PUSH
86717: LD_INT 22
86719: PUSH
86720: LD_INT 23
86722: PUSH
86723: LD_INT 25
86725: PUSH
86726: LD_INT 26
86728: PUSH
86729: LD_INT 36
86731: PUSH
86732: EMPTY
86733: LIST
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: LIST
86747: PUSH
86748: LD_INT 101
86750: PUSH
86751: LD_INT 102
86753: PUSH
86754: LD_INT 105
86756: PUSH
86757: LD_INT 106
86759: PUSH
86760: LD_INT 108
86762: PUSH
86763: LD_INT 109
86765: PUSH
86766: LD_INT 112
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: LIST
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: ST_TO_ADDR
86782: GO 89277
86784: LD_INT 6
86786: DOUBLE
86787: EQUAL
86788: IFTRUE 86792
86790: GO 86912
86792: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
86793: LD_ADDR_VAR 0 1
86797: PUSH
86798: LD_INT 2
86800: PUSH
86801: LD_INT 4
86803: PUSH
86804: LD_INT 5
86806: PUSH
86807: LD_INT 6
86809: PUSH
86810: LD_INT 8
86812: PUSH
86813: LD_INT 11
86815: PUSH
86816: LD_INT 12
86818: PUSH
86819: LD_INT 15
86821: PUSH
86822: LD_INT 16
86824: PUSH
86825: LD_INT 20
86827: PUSH
86828: LD_INT 21
86830: PUSH
86831: LD_INT 22
86833: PUSH
86834: LD_INT 23
86836: PUSH
86837: LD_INT 25
86839: PUSH
86840: LD_INT 26
86842: PUSH
86843: LD_INT 30
86845: PUSH
86846: LD_INT 31
86848: PUSH
86849: LD_INT 32
86851: PUSH
86852: LD_INT 36
86854: PUSH
86855: EMPTY
86856: LIST
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: LIST
86863: LIST
86864: LIST
86865: LIST
86866: LIST
86867: LIST
86868: LIST
86869: LIST
86870: LIST
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: PUSH
86876: LD_INT 101
86878: PUSH
86879: LD_INT 102
86881: PUSH
86882: LD_INT 105
86884: PUSH
86885: LD_INT 106
86887: PUSH
86888: LD_INT 108
86890: PUSH
86891: LD_INT 109
86893: PUSH
86894: LD_INT 112
86896: PUSH
86897: EMPTY
86898: LIST
86899: LIST
86900: LIST
86901: LIST
86902: LIST
86903: LIST
86904: LIST
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: ST_TO_ADDR
86910: GO 89277
86912: LD_INT 7
86914: DOUBLE
86915: EQUAL
86916: IFTRUE 86920
86918: GO 87020
86920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
86921: LD_ADDR_VAR 0 1
86925: PUSH
86926: LD_INT 2
86928: PUSH
86929: LD_INT 4
86931: PUSH
86932: LD_INT 5
86934: PUSH
86935: LD_INT 7
86937: PUSH
86938: LD_INT 11
86940: PUSH
86941: LD_INT 12
86943: PUSH
86944: LD_INT 15
86946: PUSH
86947: LD_INT 16
86949: PUSH
86950: LD_INT 20
86952: PUSH
86953: LD_INT 21
86955: PUSH
86956: LD_INT 22
86958: PUSH
86959: LD_INT 23
86961: PUSH
86962: LD_INT 25
86964: PUSH
86965: LD_INT 26
86967: PUSH
86968: EMPTY
86969: LIST
86970: LIST
86971: LIST
86972: LIST
86973: LIST
86974: LIST
86975: LIST
86976: LIST
86977: LIST
86978: LIST
86979: LIST
86980: LIST
86981: LIST
86982: LIST
86983: PUSH
86984: LD_INT 101
86986: PUSH
86987: LD_INT 102
86989: PUSH
86990: LD_INT 103
86992: PUSH
86993: LD_INT 105
86995: PUSH
86996: LD_INT 106
86998: PUSH
86999: LD_INT 108
87001: PUSH
87002: LD_INT 112
87004: PUSH
87005: EMPTY
87006: LIST
87007: LIST
87008: LIST
87009: LIST
87010: LIST
87011: LIST
87012: LIST
87013: PUSH
87014: EMPTY
87015: LIST
87016: LIST
87017: ST_TO_ADDR
87018: GO 89277
87020: LD_INT 8
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87028
87026: GO 87156
87028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
87029: LD_ADDR_VAR 0 1
87033: PUSH
87034: LD_INT 2
87036: PUSH
87037: LD_INT 4
87039: PUSH
87040: LD_INT 5
87042: PUSH
87043: LD_INT 6
87045: PUSH
87046: LD_INT 7
87048: PUSH
87049: LD_INT 8
87051: PUSH
87052: LD_INT 11
87054: PUSH
87055: LD_INT 12
87057: PUSH
87058: LD_INT 15
87060: PUSH
87061: LD_INT 16
87063: PUSH
87064: LD_INT 20
87066: PUSH
87067: LD_INT 21
87069: PUSH
87070: LD_INT 22
87072: PUSH
87073: LD_INT 23
87075: PUSH
87076: LD_INT 25
87078: PUSH
87079: LD_INT 26
87081: PUSH
87082: LD_INT 30
87084: PUSH
87085: LD_INT 31
87087: PUSH
87088: LD_INT 32
87090: PUSH
87091: LD_INT 36
87093: PUSH
87094: EMPTY
87095: LIST
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: PUSH
87116: LD_INT 101
87118: PUSH
87119: LD_INT 102
87121: PUSH
87122: LD_INT 103
87124: PUSH
87125: LD_INT 105
87127: PUSH
87128: LD_INT 106
87130: PUSH
87131: LD_INT 108
87133: PUSH
87134: LD_INT 109
87136: PUSH
87137: LD_INT 112
87139: PUSH
87140: EMPTY
87141: LIST
87142: LIST
87143: LIST
87144: LIST
87145: LIST
87146: LIST
87147: LIST
87148: LIST
87149: PUSH
87150: EMPTY
87151: LIST
87152: LIST
87153: ST_TO_ADDR
87154: GO 89277
87156: LD_INT 9
87158: DOUBLE
87159: EQUAL
87160: IFTRUE 87164
87162: GO 87300
87164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
87165: LD_ADDR_VAR 0 1
87169: PUSH
87170: LD_INT 2
87172: PUSH
87173: LD_INT 4
87175: PUSH
87176: LD_INT 5
87178: PUSH
87179: LD_INT 6
87181: PUSH
87182: LD_INT 7
87184: PUSH
87185: LD_INT 8
87187: PUSH
87188: LD_INT 11
87190: PUSH
87191: LD_INT 12
87193: PUSH
87194: LD_INT 15
87196: PUSH
87197: LD_INT 16
87199: PUSH
87200: LD_INT 20
87202: PUSH
87203: LD_INT 21
87205: PUSH
87206: LD_INT 22
87208: PUSH
87209: LD_INT 23
87211: PUSH
87212: LD_INT 25
87214: PUSH
87215: LD_INT 26
87217: PUSH
87218: LD_INT 28
87220: PUSH
87221: LD_INT 30
87223: PUSH
87224: LD_INT 31
87226: PUSH
87227: LD_INT 32
87229: PUSH
87230: LD_INT 36
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: LIST
87243: LIST
87244: LIST
87245: LIST
87246: LIST
87247: LIST
87248: LIST
87249: LIST
87250: LIST
87251: LIST
87252: LIST
87253: LIST
87254: LIST
87255: PUSH
87256: LD_INT 101
87258: PUSH
87259: LD_INT 102
87261: PUSH
87262: LD_INT 103
87264: PUSH
87265: LD_INT 105
87267: PUSH
87268: LD_INT 106
87270: PUSH
87271: LD_INT 108
87273: PUSH
87274: LD_INT 109
87276: PUSH
87277: LD_INT 112
87279: PUSH
87280: LD_INT 114
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: LIST
87292: LIST
87293: PUSH
87294: EMPTY
87295: LIST
87296: LIST
87297: ST_TO_ADDR
87298: GO 89277
87300: LD_INT 10
87302: DOUBLE
87303: EQUAL
87304: IFTRUE 87308
87306: GO 87492
87308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
87309: LD_ADDR_VAR 0 1
87313: PUSH
87314: LD_INT 2
87316: PUSH
87317: LD_INT 4
87319: PUSH
87320: LD_INT 5
87322: PUSH
87323: LD_INT 6
87325: PUSH
87326: LD_INT 7
87328: PUSH
87329: LD_INT 8
87331: PUSH
87332: LD_INT 9
87334: PUSH
87335: LD_INT 10
87337: PUSH
87338: LD_INT 11
87340: PUSH
87341: LD_INT 12
87343: PUSH
87344: LD_INT 13
87346: PUSH
87347: LD_INT 14
87349: PUSH
87350: LD_INT 15
87352: PUSH
87353: LD_INT 16
87355: PUSH
87356: LD_INT 17
87358: PUSH
87359: LD_INT 18
87361: PUSH
87362: LD_INT 19
87364: PUSH
87365: LD_INT 20
87367: PUSH
87368: LD_INT 21
87370: PUSH
87371: LD_INT 22
87373: PUSH
87374: LD_INT 23
87376: PUSH
87377: LD_INT 24
87379: PUSH
87380: LD_INT 25
87382: PUSH
87383: LD_INT 26
87385: PUSH
87386: LD_INT 28
87388: PUSH
87389: LD_INT 30
87391: PUSH
87392: LD_INT 31
87394: PUSH
87395: LD_INT 32
87397: PUSH
87398: LD_INT 36
87400: PUSH
87401: EMPTY
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: LIST
87415: LIST
87416: LIST
87417: LIST
87418: LIST
87419: LIST
87420: LIST
87421: LIST
87422: LIST
87423: LIST
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: LIST
87431: PUSH
87432: LD_INT 101
87434: PUSH
87435: LD_INT 102
87437: PUSH
87438: LD_INT 103
87440: PUSH
87441: LD_INT 104
87443: PUSH
87444: LD_INT 105
87446: PUSH
87447: LD_INT 106
87449: PUSH
87450: LD_INT 107
87452: PUSH
87453: LD_INT 108
87455: PUSH
87456: LD_INT 109
87458: PUSH
87459: LD_INT 110
87461: PUSH
87462: LD_INT 111
87464: PUSH
87465: LD_INT 112
87467: PUSH
87468: LD_INT 114
87470: PUSH
87471: EMPTY
87472: LIST
87473: LIST
87474: LIST
87475: LIST
87476: LIST
87477: LIST
87478: LIST
87479: LIST
87480: LIST
87481: LIST
87482: LIST
87483: LIST
87484: LIST
87485: PUSH
87486: EMPTY
87487: LIST
87488: LIST
87489: ST_TO_ADDR
87490: GO 89277
87492: LD_INT 11
87494: DOUBLE
87495: EQUAL
87496: IFTRUE 87500
87498: GO 87692
87500: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
87501: LD_ADDR_VAR 0 1
87505: PUSH
87506: LD_INT 2
87508: PUSH
87509: LD_INT 3
87511: PUSH
87512: LD_INT 4
87514: PUSH
87515: LD_INT 5
87517: PUSH
87518: LD_INT 6
87520: PUSH
87521: LD_INT 7
87523: PUSH
87524: LD_INT 8
87526: PUSH
87527: LD_INT 9
87529: PUSH
87530: LD_INT 10
87532: PUSH
87533: LD_INT 11
87535: PUSH
87536: LD_INT 12
87538: PUSH
87539: LD_INT 13
87541: PUSH
87542: LD_INT 14
87544: PUSH
87545: LD_INT 15
87547: PUSH
87548: LD_INT 16
87550: PUSH
87551: LD_INT 17
87553: PUSH
87554: LD_INT 18
87556: PUSH
87557: LD_INT 19
87559: PUSH
87560: LD_INT 20
87562: PUSH
87563: LD_INT 21
87565: PUSH
87566: LD_INT 22
87568: PUSH
87569: LD_INT 23
87571: PUSH
87572: LD_INT 24
87574: PUSH
87575: LD_INT 25
87577: PUSH
87578: LD_INT 26
87580: PUSH
87581: LD_INT 28
87583: PUSH
87584: LD_INT 30
87586: PUSH
87587: LD_INT 31
87589: PUSH
87590: LD_INT 32
87592: PUSH
87593: LD_INT 34
87595: PUSH
87596: LD_INT 36
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: LIST
87603: LIST
87604: LIST
87605: LIST
87606: LIST
87607: LIST
87608: LIST
87609: LIST
87610: LIST
87611: LIST
87612: LIST
87613: LIST
87614: LIST
87615: LIST
87616: LIST
87617: LIST
87618: LIST
87619: LIST
87620: LIST
87621: LIST
87622: LIST
87623: LIST
87624: LIST
87625: LIST
87626: LIST
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: PUSH
87632: LD_INT 101
87634: PUSH
87635: LD_INT 102
87637: PUSH
87638: LD_INT 103
87640: PUSH
87641: LD_INT 104
87643: PUSH
87644: LD_INT 105
87646: PUSH
87647: LD_INT 106
87649: PUSH
87650: LD_INT 107
87652: PUSH
87653: LD_INT 108
87655: PUSH
87656: LD_INT 109
87658: PUSH
87659: LD_INT 110
87661: PUSH
87662: LD_INT 111
87664: PUSH
87665: LD_INT 112
87667: PUSH
87668: LD_INT 114
87670: PUSH
87671: EMPTY
87672: LIST
87673: LIST
87674: LIST
87675: LIST
87676: LIST
87677: LIST
87678: LIST
87679: LIST
87680: LIST
87681: LIST
87682: LIST
87683: LIST
87684: LIST
87685: PUSH
87686: EMPTY
87687: LIST
87688: LIST
87689: ST_TO_ADDR
87690: GO 89277
87692: LD_INT 12
87694: DOUBLE
87695: EQUAL
87696: IFTRUE 87700
87698: GO 87908
87700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
87701: LD_ADDR_VAR 0 1
87705: PUSH
87706: LD_INT 1
87708: PUSH
87709: LD_INT 2
87711: PUSH
87712: LD_INT 3
87714: PUSH
87715: LD_INT 4
87717: PUSH
87718: LD_INT 5
87720: PUSH
87721: LD_INT 6
87723: PUSH
87724: LD_INT 7
87726: PUSH
87727: LD_INT 8
87729: PUSH
87730: LD_INT 9
87732: PUSH
87733: LD_INT 10
87735: PUSH
87736: LD_INT 11
87738: PUSH
87739: LD_INT 12
87741: PUSH
87742: LD_INT 13
87744: PUSH
87745: LD_INT 14
87747: PUSH
87748: LD_INT 15
87750: PUSH
87751: LD_INT 16
87753: PUSH
87754: LD_INT 17
87756: PUSH
87757: LD_INT 18
87759: PUSH
87760: LD_INT 19
87762: PUSH
87763: LD_INT 20
87765: PUSH
87766: LD_INT 21
87768: PUSH
87769: LD_INT 22
87771: PUSH
87772: LD_INT 23
87774: PUSH
87775: LD_INT 24
87777: PUSH
87778: LD_INT 25
87780: PUSH
87781: LD_INT 26
87783: PUSH
87784: LD_INT 27
87786: PUSH
87787: LD_INT 28
87789: PUSH
87790: LD_INT 30
87792: PUSH
87793: LD_INT 31
87795: PUSH
87796: LD_INT 32
87798: PUSH
87799: LD_INT 33
87801: PUSH
87802: LD_INT 34
87804: PUSH
87805: LD_INT 36
87807: PUSH
87808: EMPTY
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: LIST
87827: LIST
87828: LIST
87829: LIST
87830: LIST
87831: LIST
87832: LIST
87833: LIST
87834: LIST
87835: LIST
87836: LIST
87837: LIST
87838: LIST
87839: LIST
87840: LIST
87841: LIST
87842: LIST
87843: PUSH
87844: LD_INT 101
87846: PUSH
87847: LD_INT 102
87849: PUSH
87850: LD_INT 103
87852: PUSH
87853: LD_INT 104
87855: PUSH
87856: LD_INT 105
87858: PUSH
87859: LD_INT 106
87861: PUSH
87862: LD_INT 107
87864: PUSH
87865: LD_INT 108
87867: PUSH
87868: LD_INT 109
87870: PUSH
87871: LD_INT 110
87873: PUSH
87874: LD_INT 111
87876: PUSH
87877: LD_INT 112
87879: PUSH
87880: LD_INT 113
87882: PUSH
87883: LD_INT 114
87885: PUSH
87886: EMPTY
87887: LIST
87888: LIST
87889: LIST
87890: LIST
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: ST_TO_ADDR
87906: GO 89277
87908: LD_INT 13
87910: DOUBLE
87911: EQUAL
87912: IFTRUE 87916
87914: GO 88112
87916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
87917: LD_ADDR_VAR 0 1
87921: PUSH
87922: LD_INT 1
87924: PUSH
87925: LD_INT 2
87927: PUSH
87928: LD_INT 3
87930: PUSH
87931: LD_INT 4
87933: PUSH
87934: LD_INT 5
87936: PUSH
87937: LD_INT 8
87939: PUSH
87940: LD_INT 9
87942: PUSH
87943: LD_INT 10
87945: PUSH
87946: LD_INT 11
87948: PUSH
87949: LD_INT 12
87951: PUSH
87952: LD_INT 14
87954: PUSH
87955: LD_INT 15
87957: PUSH
87958: LD_INT 16
87960: PUSH
87961: LD_INT 17
87963: PUSH
87964: LD_INT 18
87966: PUSH
87967: LD_INT 19
87969: PUSH
87970: LD_INT 20
87972: PUSH
87973: LD_INT 21
87975: PUSH
87976: LD_INT 22
87978: PUSH
87979: LD_INT 23
87981: PUSH
87982: LD_INT 24
87984: PUSH
87985: LD_INT 25
87987: PUSH
87988: LD_INT 26
87990: PUSH
87991: LD_INT 27
87993: PUSH
87994: LD_INT 28
87996: PUSH
87997: LD_INT 30
87999: PUSH
88000: LD_INT 31
88002: PUSH
88003: LD_INT 32
88005: PUSH
88006: LD_INT 33
88008: PUSH
88009: LD_INT 34
88011: PUSH
88012: LD_INT 36
88014: PUSH
88015: EMPTY
88016: LIST
88017: LIST
88018: LIST
88019: LIST
88020: LIST
88021: LIST
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: LIST
88029: LIST
88030: LIST
88031: LIST
88032: LIST
88033: LIST
88034: LIST
88035: LIST
88036: LIST
88037: LIST
88038: LIST
88039: LIST
88040: LIST
88041: LIST
88042: LIST
88043: LIST
88044: LIST
88045: LIST
88046: LIST
88047: PUSH
88048: LD_INT 101
88050: PUSH
88051: LD_INT 102
88053: PUSH
88054: LD_INT 103
88056: PUSH
88057: LD_INT 104
88059: PUSH
88060: LD_INT 105
88062: PUSH
88063: LD_INT 106
88065: PUSH
88066: LD_INT 107
88068: PUSH
88069: LD_INT 108
88071: PUSH
88072: LD_INT 109
88074: PUSH
88075: LD_INT 110
88077: PUSH
88078: LD_INT 111
88080: PUSH
88081: LD_INT 112
88083: PUSH
88084: LD_INT 113
88086: PUSH
88087: LD_INT 114
88089: PUSH
88090: EMPTY
88091: LIST
88092: LIST
88093: LIST
88094: LIST
88095: LIST
88096: LIST
88097: LIST
88098: LIST
88099: LIST
88100: LIST
88101: LIST
88102: LIST
88103: LIST
88104: LIST
88105: PUSH
88106: EMPTY
88107: LIST
88108: LIST
88109: ST_TO_ADDR
88110: GO 89277
88112: LD_INT 14
88114: DOUBLE
88115: EQUAL
88116: IFTRUE 88120
88118: GO 88332
88120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
88121: LD_ADDR_VAR 0 1
88125: PUSH
88126: LD_INT 1
88128: PUSH
88129: LD_INT 2
88131: PUSH
88132: LD_INT 3
88134: PUSH
88135: LD_INT 4
88137: PUSH
88138: LD_INT 5
88140: PUSH
88141: LD_INT 6
88143: PUSH
88144: LD_INT 7
88146: PUSH
88147: LD_INT 8
88149: PUSH
88150: LD_INT 9
88152: PUSH
88153: LD_INT 10
88155: PUSH
88156: LD_INT 11
88158: PUSH
88159: LD_INT 12
88161: PUSH
88162: LD_INT 13
88164: PUSH
88165: LD_INT 14
88167: PUSH
88168: LD_INT 15
88170: PUSH
88171: LD_INT 16
88173: PUSH
88174: LD_INT 17
88176: PUSH
88177: LD_INT 18
88179: PUSH
88180: LD_INT 19
88182: PUSH
88183: LD_INT 20
88185: PUSH
88186: LD_INT 21
88188: PUSH
88189: LD_INT 22
88191: PUSH
88192: LD_INT 23
88194: PUSH
88195: LD_INT 24
88197: PUSH
88198: LD_INT 25
88200: PUSH
88201: LD_INT 26
88203: PUSH
88204: LD_INT 27
88206: PUSH
88207: LD_INT 28
88209: PUSH
88210: LD_INT 29
88212: PUSH
88213: LD_INT 30
88215: PUSH
88216: LD_INT 31
88218: PUSH
88219: LD_INT 32
88221: PUSH
88222: LD_INT 33
88224: PUSH
88225: LD_INT 34
88227: PUSH
88228: LD_INT 36
88230: PUSH
88231: EMPTY
88232: LIST
88233: LIST
88234: LIST
88235: LIST
88236: LIST
88237: LIST
88238: LIST
88239: LIST
88240: LIST
88241: LIST
88242: LIST
88243: LIST
88244: LIST
88245: LIST
88246: LIST
88247: LIST
88248: LIST
88249: LIST
88250: LIST
88251: LIST
88252: LIST
88253: LIST
88254: LIST
88255: LIST
88256: LIST
88257: LIST
88258: LIST
88259: LIST
88260: LIST
88261: LIST
88262: LIST
88263: LIST
88264: LIST
88265: LIST
88266: LIST
88267: PUSH
88268: LD_INT 101
88270: PUSH
88271: LD_INT 102
88273: PUSH
88274: LD_INT 103
88276: PUSH
88277: LD_INT 104
88279: PUSH
88280: LD_INT 105
88282: PUSH
88283: LD_INT 106
88285: PUSH
88286: LD_INT 107
88288: PUSH
88289: LD_INT 108
88291: PUSH
88292: LD_INT 109
88294: PUSH
88295: LD_INT 110
88297: PUSH
88298: LD_INT 111
88300: PUSH
88301: LD_INT 112
88303: PUSH
88304: LD_INT 113
88306: PUSH
88307: LD_INT 114
88309: PUSH
88310: EMPTY
88311: LIST
88312: LIST
88313: LIST
88314: LIST
88315: LIST
88316: LIST
88317: LIST
88318: LIST
88319: LIST
88320: LIST
88321: LIST
88322: LIST
88323: LIST
88324: LIST
88325: PUSH
88326: EMPTY
88327: LIST
88328: LIST
88329: ST_TO_ADDR
88330: GO 89277
88332: LD_INT 15
88334: DOUBLE
88335: EQUAL
88336: IFTRUE 88340
88338: GO 88552
88340: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
88341: LD_ADDR_VAR 0 1
88345: PUSH
88346: LD_INT 1
88348: PUSH
88349: LD_INT 2
88351: PUSH
88352: LD_INT 3
88354: PUSH
88355: LD_INT 4
88357: PUSH
88358: LD_INT 5
88360: PUSH
88361: LD_INT 6
88363: PUSH
88364: LD_INT 7
88366: PUSH
88367: LD_INT 8
88369: PUSH
88370: LD_INT 9
88372: PUSH
88373: LD_INT 10
88375: PUSH
88376: LD_INT 11
88378: PUSH
88379: LD_INT 12
88381: PUSH
88382: LD_INT 13
88384: PUSH
88385: LD_INT 14
88387: PUSH
88388: LD_INT 15
88390: PUSH
88391: LD_INT 16
88393: PUSH
88394: LD_INT 17
88396: PUSH
88397: LD_INT 18
88399: PUSH
88400: LD_INT 19
88402: PUSH
88403: LD_INT 20
88405: PUSH
88406: LD_INT 21
88408: PUSH
88409: LD_INT 22
88411: PUSH
88412: LD_INT 23
88414: PUSH
88415: LD_INT 24
88417: PUSH
88418: LD_INT 25
88420: PUSH
88421: LD_INT 26
88423: PUSH
88424: LD_INT 27
88426: PUSH
88427: LD_INT 28
88429: PUSH
88430: LD_INT 29
88432: PUSH
88433: LD_INT 30
88435: PUSH
88436: LD_INT 31
88438: PUSH
88439: LD_INT 32
88441: PUSH
88442: LD_INT 33
88444: PUSH
88445: LD_INT 34
88447: PUSH
88448: LD_INT 36
88450: PUSH
88451: EMPTY
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: LIST
88462: LIST
88463: LIST
88464: LIST
88465: LIST
88466: LIST
88467: LIST
88468: LIST
88469: LIST
88470: LIST
88471: LIST
88472: LIST
88473: LIST
88474: LIST
88475: LIST
88476: LIST
88477: LIST
88478: LIST
88479: LIST
88480: LIST
88481: LIST
88482: LIST
88483: LIST
88484: LIST
88485: LIST
88486: LIST
88487: PUSH
88488: LD_INT 101
88490: PUSH
88491: LD_INT 102
88493: PUSH
88494: LD_INT 103
88496: PUSH
88497: LD_INT 104
88499: PUSH
88500: LD_INT 105
88502: PUSH
88503: LD_INT 106
88505: PUSH
88506: LD_INT 107
88508: PUSH
88509: LD_INT 108
88511: PUSH
88512: LD_INT 109
88514: PUSH
88515: LD_INT 110
88517: PUSH
88518: LD_INT 111
88520: PUSH
88521: LD_INT 112
88523: PUSH
88524: LD_INT 113
88526: PUSH
88527: LD_INT 114
88529: PUSH
88530: EMPTY
88531: LIST
88532: LIST
88533: LIST
88534: LIST
88535: LIST
88536: LIST
88537: LIST
88538: LIST
88539: LIST
88540: LIST
88541: LIST
88542: LIST
88543: LIST
88544: LIST
88545: PUSH
88546: EMPTY
88547: LIST
88548: LIST
88549: ST_TO_ADDR
88550: GO 89277
88552: LD_INT 16
88554: DOUBLE
88555: EQUAL
88556: IFTRUE 88560
88558: GO 88684
88560: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
88561: LD_ADDR_VAR 0 1
88565: PUSH
88566: LD_INT 2
88568: PUSH
88569: LD_INT 4
88571: PUSH
88572: LD_INT 5
88574: PUSH
88575: LD_INT 7
88577: PUSH
88578: LD_INT 11
88580: PUSH
88581: LD_INT 12
88583: PUSH
88584: LD_INT 15
88586: PUSH
88587: LD_INT 16
88589: PUSH
88590: LD_INT 20
88592: PUSH
88593: LD_INT 21
88595: PUSH
88596: LD_INT 22
88598: PUSH
88599: LD_INT 23
88601: PUSH
88602: LD_INT 25
88604: PUSH
88605: LD_INT 26
88607: PUSH
88608: LD_INT 30
88610: PUSH
88611: LD_INT 31
88613: PUSH
88614: LD_INT 32
88616: PUSH
88617: LD_INT 33
88619: PUSH
88620: LD_INT 34
88622: PUSH
88623: EMPTY
88624: LIST
88625: LIST
88626: LIST
88627: LIST
88628: LIST
88629: LIST
88630: LIST
88631: LIST
88632: LIST
88633: LIST
88634: LIST
88635: LIST
88636: LIST
88637: LIST
88638: LIST
88639: LIST
88640: LIST
88641: LIST
88642: LIST
88643: PUSH
88644: LD_INT 101
88646: PUSH
88647: LD_INT 102
88649: PUSH
88650: LD_INT 103
88652: PUSH
88653: LD_INT 106
88655: PUSH
88656: LD_INT 108
88658: PUSH
88659: LD_INT 112
88661: PUSH
88662: LD_INT 113
88664: PUSH
88665: LD_INT 114
88667: PUSH
88668: EMPTY
88669: LIST
88670: LIST
88671: LIST
88672: LIST
88673: LIST
88674: LIST
88675: LIST
88676: LIST
88677: PUSH
88678: EMPTY
88679: LIST
88680: LIST
88681: ST_TO_ADDR
88682: GO 89277
88684: LD_INT 17
88686: DOUBLE
88687: EQUAL
88688: IFTRUE 88692
88690: GO 88904
88692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
88693: LD_ADDR_VAR 0 1
88697: PUSH
88698: LD_INT 1
88700: PUSH
88701: LD_INT 2
88703: PUSH
88704: LD_INT 3
88706: PUSH
88707: LD_INT 4
88709: PUSH
88710: LD_INT 5
88712: PUSH
88713: LD_INT 6
88715: PUSH
88716: LD_INT 7
88718: PUSH
88719: LD_INT 8
88721: PUSH
88722: LD_INT 9
88724: PUSH
88725: LD_INT 10
88727: PUSH
88728: LD_INT 11
88730: PUSH
88731: LD_INT 12
88733: PUSH
88734: LD_INT 13
88736: PUSH
88737: LD_INT 14
88739: PUSH
88740: LD_INT 15
88742: PUSH
88743: LD_INT 16
88745: PUSH
88746: LD_INT 17
88748: PUSH
88749: LD_INT 18
88751: PUSH
88752: LD_INT 19
88754: PUSH
88755: LD_INT 20
88757: PUSH
88758: LD_INT 21
88760: PUSH
88761: LD_INT 22
88763: PUSH
88764: LD_INT 23
88766: PUSH
88767: LD_INT 24
88769: PUSH
88770: LD_INT 25
88772: PUSH
88773: LD_INT 26
88775: PUSH
88776: LD_INT 27
88778: PUSH
88779: LD_INT 28
88781: PUSH
88782: LD_INT 29
88784: PUSH
88785: LD_INT 30
88787: PUSH
88788: LD_INT 31
88790: PUSH
88791: LD_INT 32
88793: PUSH
88794: LD_INT 33
88796: PUSH
88797: LD_INT 34
88799: PUSH
88800: LD_INT 36
88802: PUSH
88803: EMPTY
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: LIST
88820: LIST
88821: LIST
88822: LIST
88823: LIST
88824: LIST
88825: LIST
88826: LIST
88827: LIST
88828: LIST
88829: LIST
88830: LIST
88831: LIST
88832: LIST
88833: LIST
88834: LIST
88835: LIST
88836: LIST
88837: LIST
88838: LIST
88839: PUSH
88840: LD_INT 101
88842: PUSH
88843: LD_INT 102
88845: PUSH
88846: LD_INT 103
88848: PUSH
88849: LD_INT 104
88851: PUSH
88852: LD_INT 105
88854: PUSH
88855: LD_INT 106
88857: PUSH
88858: LD_INT 107
88860: PUSH
88861: LD_INT 108
88863: PUSH
88864: LD_INT 109
88866: PUSH
88867: LD_INT 110
88869: PUSH
88870: LD_INT 111
88872: PUSH
88873: LD_INT 112
88875: PUSH
88876: LD_INT 113
88878: PUSH
88879: LD_INT 114
88881: PUSH
88882: EMPTY
88883: LIST
88884: LIST
88885: LIST
88886: LIST
88887: LIST
88888: LIST
88889: LIST
88890: LIST
88891: LIST
88892: LIST
88893: LIST
88894: LIST
88895: LIST
88896: LIST
88897: PUSH
88898: EMPTY
88899: LIST
88900: LIST
88901: ST_TO_ADDR
88902: GO 89277
88904: LD_INT 18
88906: DOUBLE
88907: EQUAL
88908: IFTRUE 88912
88910: GO 89048
88912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
88913: LD_ADDR_VAR 0 1
88917: PUSH
88918: LD_INT 2
88920: PUSH
88921: LD_INT 4
88923: PUSH
88924: LD_INT 5
88926: PUSH
88927: LD_INT 7
88929: PUSH
88930: LD_INT 11
88932: PUSH
88933: LD_INT 12
88935: PUSH
88936: LD_INT 15
88938: PUSH
88939: LD_INT 16
88941: PUSH
88942: LD_INT 20
88944: PUSH
88945: LD_INT 21
88947: PUSH
88948: LD_INT 22
88950: PUSH
88951: LD_INT 23
88953: PUSH
88954: LD_INT 25
88956: PUSH
88957: LD_INT 26
88959: PUSH
88960: LD_INT 30
88962: PUSH
88963: LD_INT 31
88965: PUSH
88966: LD_INT 32
88968: PUSH
88969: LD_INT 33
88971: PUSH
88972: LD_INT 34
88974: PUSH
88975: LD_INT 35
88977: PUSH
88978: LD_INT 36
88980: PUSH
88981: EMPTY
88982: LIST
88983: LIST
88984: LIST
88985: LIST
88986: LIST
88987: LIST
88988: LIST
88989: LIST
88990: LIST
88991: LIST
88992: LIST
88993: LIST
88994: LIST
88995: LIST
88996: LIST
88997: LIST
88998: LIST
88999: LIST
89000: LIST
89001: LIST
89002: LIST
89003: PUSH
89004: LD_INT 101
89006: PUSH
89007: LD_INT 102
89009: PUSH
89010: LD_INT 103
89012: PUSH
89013: LD_INT 106
89015: PUSH
89016: LD_INT 108
89018: PUSH
89019: LD_INT 112
89021: PUSH
89022: LD_INT 113
89024: PUSH
89025: LD_INT 114
89027: PUSH
89028: LD_INT 115
89030: PUSH
89031: EMPTY
89032: LIST
89033: LIST
89034: LIST
89035: LIST
89036: LIST
89037: LIST
89038: LIST
89039: LIST
89040: LIST
89041: PUSH
89042: EMPTY
89043: LIST
89044: LIST
89045: ST_TO_ADDR
89046: GO 89277
89048: LD_INT 19
89050: DOUBLE
89051: EQUAL
89052: IFTRUE 89056
89054: GO 89276
89056: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
89057: LD_ADDR_VAR 0 1
89061: PUSH
89062: LD_INT 1
89064: PUSH
89065: LD_INT 2
89067: PUSH
89068: LD_INT 3
89070: PUSH
89071: LD_INT 4
89073: PUSH
89074: LD_INT 5
89076: PUSH
89077: LD_INT 6
89079: PUSH
89080: LD_INT 7
89082: PUSH
89083: LD_INT 8
89085: PUSH
89086: LD_INT 9
89088: PUSH
89089: LD_INT 10
89091: PUSH
89092: LD_INT 11
89094: PUSH
89095: LD_INT 12
89097: PUSH
89098: LD_INT 13
89100: PUSH
89101: LD_INT 14
89103: PUSH
89104: LD_INT 15
89106: PUSH
89107: LD_INT 16
89109: PUSH
89110: LD_INT 17
89112: PUSH
89113: LD_INT 18
89115: PUSH
89116: LD_INT 19
89118: PUSH
89119: LD_INT 20
89121: PUSH
89122: LD_INT 21
89124: PUSH
89125: LD_INT 22
89127: PUSH
89128: LD_INT 23
89130: PUSH
89131: LD_INT 24
89133: PUSH
89134: LD_INT 25
89136: PUSH
89137: LD_INT 26
89139: PUSH
89140: LD_INT 27
89142: PUSH
89143: LD_INT 28
89145: PUSH
89146: LD_INT 29
89148: PUSH
89149: LD_INT 30
89151: PUSH
89152: LD_INT 31
89154: PUSH
89155: LD_INT 32
89157: PUSH
89158: LD_INT 33
89160: PUSH
89161: LD_INT 34
89163: PUSH
89164: LD_INT 35
89166: PUSH
89167: LD_INT 36
89169: PUSH
89170: EMPTY
89171: LIST
89172: LIST
89173: LIST
89174: LIST
89175: LIST
89176: LIST
89177: LIST
89178: LIST
89179: LIST
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: LIST
89187: LIST
89188: LIST
89189: LIST
89190: LIST
89191: LIST
89192: LIST
89193: LIST
89194: LIST
89195: LIST
89196: LIST
89197: LIST
89198: LIST
89199: LIST
89200: LIST
89201: LIST
89202: LIST
89203: LIST
89204: LIST
89205: LIST
89206: LIST
89207: PUSH
89208: LD_INT 101
89210: PUSH
89211: LD_INT 102
89213: PUSH
89214: LD_INT 103
89216: PUSH
89217: LD_INT 104
89219: PUSH
89220: LD_INT 105
89222: PUSH
89223: LD_INT 106
89225: PUSH
89226: LD_INT 107
89228: PUSH
89229: LD_INT 108
89231: PUSH
89232: LD_INT 109
89234: PUSH
89235: LD_INT 110
89237: PUSH
89238: LD_INT 111
89240: PUSH
89241: LD_INT 112
89243: PUSH
89244: LD_INT 113
89246: PUSH
89247: LD_INT 114
89249: PUSH
89250: LD_INT 115
89252: PUSH
89253: EMPTY
89254: LIST
89255: LIST
89256: LIST
89257: LIST
89258: LIST
89259: LIST
89260: LIST
89261: LIST
89262: LIST
89263: LIST
89264: LIST
89265: LIST
89266: LIST
89267: LIST
89268: LIST
89269: PUSH
89270: EMPTY
89271: LIST
89272: LIST
89273: ST_TO_ADDR
89274: GO 89277
89276: POP
// end else
89277: GO 89496
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
89279: LD_ADDR_VAR 0 1
89283: PUSH
89284: LD_INT 1
89286: PUSH
89287: LD_INT 2
89289: PUSH
89290: LD_INT 3
89292: PUSH
89293: LD_INT 4
89295: PUSH
89296: LD_INT 5
89298: PUSH
89299: LD_INT 6
89301: PUSH
89302: LD_INT 7
89304: PUSH
89305: LD_INT 8
89307: PUSH
89308: LD_INT 9
89310: PUSH
89311: LD_INT 10
89313: PUSH
89314: LD_INT 11
89316: PUSH
89317: LD_INT 12
89319: PUSH
89320: LD_INT 13
89322: PUSH
89323: LD_INT 14
89325: PUSH
89326: LD_INT 15
89328: PUSH
89329: LD_INT 16
89331: PUSH
89332: LD_INT 17
89334: PUSH
89335: LD_INT 18
89337: PUSH
89338: LD_INT 19
89340: PUSH
89341: LD_INT 20
89343: PUSH
89344: LD_INT 21
89346: PUSH
89347: LD_INT 22
89349: PUSH
89350: LD_INT 23
89352: PUSH
89353: LD_INT 24
89355: PUSH
89356: LD_INT 25
89358: PUSH
89359: LD_INT 26
89361: PUSH
89362: LD_INT 27
89364: PUSH
89365: LD_INT 28
89367: PUSH
89368: LD_INT 29
89370: PUSH
89371: LD_INT 30
89373: PUSH
89374: LD_INT 31
89376: PUSH
89377: LD_INT 32
89379: PUSH
89380: LD_INT 33
89382: PUSH
89383: LD_INT 34
89385: PUSH
89386: LD_INT 35
89388: PUSH
89389: LD_INT 36
89391: PUSH
89392: EMPTY
89393: LIST
89394: LIST
89395: LIST
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: LIST
89401: LIST
89402: LIST
89403: LIST
89404: LIST
89405: LIST
89406: LIST
89407: LIST
89408: LIST
89409: LIST
89410: LIST
89411: LIST
89412: LIST
89413: LIST
89414: LIST
89415: LIST
89416: LIST
89417: LIST
89418: LIST
89419: LIST
89420: LIST
89421: LIST
89422: LIST
89423: LIST
89424: LIST
89425: LIST
89426: LIST
89427: LIST
89428: LIST
89429: PUSH
89430: LD_INT 101
89432: PUSH
89433: LD_INT 102
89435: PUSH
89436: LD_INT 103
89438: PUSH
89439: LD_INT 104
89441: PUSH
89442: LD_INT 105
89444: PUSH
89445: LD_INT 106
89447: PUSH
89448: LD_INT 107
89450: PUSH
89451: LD_INT 108
89453: PUSH
89454: LD_INT 109
89456: PUSH
89457: LD_INT 110
89459: PUSH
89460: LD_INT 111
89462: PUSH
89463: LD_INT 112
89465: PUSH
89466: LD_INT 113
89468: PUSH
89469: LD_INT 114
89471: PUSH
89472: LD_INT 115
89474: PUSH
89475: EMPTY
89476: LIST
89477: LIST
89478: LIST
89479: LIST
89480: LIST
89481: LIST
89482: LIST
89483: LIST
89484: LIST
89485: LIST
89486: LIST
89487: LIST
89488: LIST
89489: LIST
89490: LIST
89491: PUSH
89492: EMPTY
89493: LIST
89494: LIST
89495: ST_TO_ADDR
// if result then
89496: LD_VAR 0 1
89500: IFFALSE 89789
// begin normal :=  ;
89502: LD_ADDR_VAR 0 3
89506: PUSH
89507: LD_STRING 
89509: ST_TO_ADDR
// hardcore :=  ;
89510: LD_ADDR_VAR 0 4
89514: PUSH
89515: LD_STRING 
89517: ST_TO_ADDR
// for i = 1 to normalCounter do
89518: LD_ADDR_VAR 0 5
89522: PUSH
89523: DOUBLE
89524: LD_INT 1
89526: DEC
89527: ST_TO_ADDR
89528: LD_EXP 89
89532: PUSH
89533: FOR_TO
89534: IFFALSE 89635
// begin tmp := 0 ;
89536: LD_ADDR_VAR 0 2
89540: PUSH
89541: LD_STRING 0
89543: ST_TO_ADDR
// if result [ 1 ] then
89544: LD_VAR 0 1
89548: PUSH
89549: LD_INT 1
89551: ARRAY
89552: IFFALSE 89617
// if result [ 1 ] [ 1 ] = i then
89554: LD_VAR 0 1
89558: PUSH
89559: LD_INT 1
89561: ARRAY
89562: PUSH
89563: LD_INT 1
89565: ARRAY
89566: PUSH
89567: LD_VAR 0 5
89571: EQUAL
89572: IFFALSE 89617
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
89574: LD_ADDR_VAR 0 1
89578: PUSH
89579: LD_VAR 0 1
89583: PPUSH
89584: LD_INT 1
89586: PPUSH
89587: LD_VAR 0 1
89591: PUSH
89592: LD_INT 1
89594: ARRAY
89595: PPUSH
89596: LD_INT 1
89598: PPUSH
89599: CALL_OW 3
89603: PPUSH
89604: CALL_OW 1
89608: ST_TO_ADDR
// tmp := 1 ;
89609: LD_ADDR_VAR 0 2
89613: PUSH
89614: LD_STRING 1
89616: ST_TO_ADDR
// end ; normal := normal & tmp ;
89617: LD_ADDR_VAR 0 3
89621: PUSH
89622: LD_VAR 0 3
89626: PUSH
89627: LD_VAR 0 2
89631: STR
89632: ST_TO_ADDR
// end ;
89633: GO 89533
89635: POP
89636: POP
// for i = 1 to hardcoreCounter do
89637: LD_ADDR_VAR 0 5
89641: PUSH
89642: DOUBLE
89643: LD_INT 1
89645: DEC
89646: ST_TO_ADDR
89647: LD_EXP 90
89651: PUSH
89652: FOR_TO
89653: IFFALSE 89758
// begin tmp := 0 ;
89655: LD_ADDR_VAR 0 2
89659: PUSH
89660: LD_STRING 0
89662: ST_TO_ADDR
// if result [ 2 ] then
89663: LD_VAR 0 1
89667: PUSH
89668: LD_INT 2
89670: ARRAY
89671: IFFALSE 89740
// if result [ 2 ] [ 1 ] = 100 + i then
89673: LD_VAR 0 1
89677: PUSH
89678: LD_INT 2
89680: ARRAY
89681: PUSH
89682: LD_INT 1
89684: ARRAY
89685: PUSH
89686: LD_INT 100
89688: PUSH
89689: LD_VAR 0 5
89693: PLUS
89694: EQUAL
89695: IFFALSE 89740
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
89697: LD_ADDR_VAR 0 1
89701: PUSH
89702: LD_VAR 0 1
89706: PPUSH
89707: LD_INT 2
89709: PPUSH
89710: LD_VAR 0 1
89714: PUSH
89715: LD_INT 2
89717: ARRAY
89718: PPUSH
89719: LD_INT 1
89721: PPUSH
89722: CALL_OW 3
89726: PPUSH
89727: CALL_OW 1
89731: ST_TO_ADDR
// tmp := 1 ;
89732: LD_ADDR_VAR 0 2
89736: PUSH
89737: LD_STRING 1
89739: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
89740: LD_ADDR_VAR 0 4
89744: PUSH
89745: LD_VAR 0 4
89749: PUSH
89750: LD_VAR 0 2
89754: STR
89755: ST_TO_ADDR
// end ;
89756: GO 89652
89758: POP
89759: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
89760: LD_STRING getStreamItemsFromMission("
89762: PUSH
89763: LD_VAR 0 3
89767: STR
89768: PUSH
89769: LD_STRING ","
89771: STR
89772: PUSH
89773: LD_VAR 0 4
89777: STR
89778: PUSH
89779: LD_STRING ")
89781: STR
89782: PPUSH
89783: CALL_OW 559
// end else
89787: GO 89796
// ToLua ( getStreamItemsFromMission("","") ) ;
89789: LD_STRING getStreamItemsFromMission("","")
89791: PPUSH
89792: CALL_OW 559
// end ;
89796: LD_VAR 0 1
89800: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
89801: LD_VAR 0 2
89805: PUSH
89806: LD_INT 100
89808: EQUAL
89809: IFFALSE 90758
// begin if not StreamModeActive then
89811: LD_EXP 88
89815: NOT
89816: IFFALSE 89826
// StreamModeActive := true ;
89818: LD_ADDR_EXP 88
89822: PUSH
89823: LD_INT 1
89825: ST_TO_ADDR
// if p3 = 0 then
89826: LD_VAR 0 3
89830: PUSH
89831: LD_INT 0
89833: EQUAL
89834: IFFALSE 89840
// InitStreamMode ;
89836: CALL 85879 0 0
// if p3 = 1 then
89840: LD_VAR 0 3
89844: PUSH
89845: LD_INT 1
89847: EQUAL
89848: IFFALSE 89858
// sRocket := true ;
89850: LD_ADDR_EXP 93
89854: PUSH
89855: LD_INT 1
89857: ST_TO_ADDR
// if p3 = 2 then
89858: LD_VAR 0 3
89862: PUSH
89863: LD_INT 2
89865: EQUAL
89866: IFFALSE 89876
// sSpeed := true ;
89868: LD_ADDR_EXP 92
89872: PUSH
89873: LD_INT 1
89875: ST_TO_ADDR
// if p3 = 3 then
89876: LD_VAR 0 3
89880: PUSH
89881: LD_INT 3
89883: EQUAL
89884: IFFALSE 89894
// sEngine := true ;
89886: LD_ADDR_EXP 94
89890: PUSH
89891: LD_INT 1
89893: ST_TO_ADDR
// if p3 = 4 then
89894: LD_VAR 0 3
89898: PUSH
89899: LD_INT 4
89901: EQUAL
89902: IFFALSE 89912
// sSpec := true ;
89904: LD_ADDR_EXP 91
89908: PUSH
89909: LD_INT 1
89911: ST_TO_ADDR
// if p3 = 5 then
89912: LD_VAR 0 3
89916: PUSH
89917: LD_INT 5
89919: EQUAL
89920: IFFALSE 89930
// sLevel := true ;
89922: LD_ADDR_EXP 95
89926: PUSH
89927: LD_INT 1
89929: ST_TO_ADDR
// if p3 = 6 then
89930: LD_VAR 0 3
89934: PUSH
89935: LD_INT 6
89937: EQUAL
89938: IFFALSE 89948
// sArmoury := true ;
89940: LD_ADDR_EXP 96
89944: PUSH
89945: LD_INT 1
89947: ST_TO_ADDR
// if p3 = 7 then
89948: LD_VAR 0 3
89952: PUSH
89953: LD_INT 7
89955: EQUAL
89956: IFFALSE 89966
// sRadar := true ;
89958: LD_ADDR_EXP 97
89962: PUSH
89963: LD_INT 1
89965: ST_TO_ADDR
// if p3 = 8 then
89966: LD_VAR 0 3
89970: PUSH
89971: LD_INT 8
89973: EQUAL
89974: IFFALSE 89984
// sBunker := true ;
89976: LD_ADDR_EXP 98
89980: PUSH
89981: LD_INT 1
89983: ST_TO_ADDR
// if p3 = 9 then
89984: LD_VAR 0 3
89988: PUSH
89989: LD_INT 9
89991: EQUAL
89992: IFFALSE 90002
// sHack := true ;
89994: LD_ADDR_EXP 99
89998: PUSH
89999: LD_INT 1
90001: ST_TO_ADDR
// if p3 = 10 then
90002: LD_VAR 0 3
90006: PUSH
90007: LD_INT 10
90009: EQUAL
90010: IFFALSE 90020
// sFire := true ;
90012: LD_ADDR_EXP 100
90016: PUSH
90017: LD_INT 1
90019: ST_TO_ADDR
// if p3 = 11 then
90020: LD_VAR 0 3
90024: PUSH
90025: LD_INT 11
90027: EQUAL
90028: IFFALSE 90038
// sRefresh := true ;
90030: LD_ADDR_EXP 101
90034: PUSH
90035: LD_INT 1
90037: ST_TO_ADDR
// if p3 = 12 then
90038: LD_VAR 0 3
90042: PUSH
90043: LD_INT 12
90045: EQUAL
90046: IFFALSE 90056
// sExp := true ;
90048: LD_ADDR_EXP 102
90052: PUSH
90053: LD_INT 1
90055: ST_TO_ADDR
// if p3 = 13 then
90056: LD_VAR 0 3
90060: PUSH
90061: LD_INT 13
90063: EQUAL
90064: IFFALSE 90074
// sDepot := true ;
90066: LD_ADDR_EXP 103
90070: PUSH
90071: LD_INT 1
90073: ST_TO_ADDR
// if p3 = 14 then
90074: LD_VAR 0 3
90078: PUSH
90079: LD_INT 14
90081: EQUAL
90082: IFFALSE 90092
// sFlag := true ;
90084: LD_ADDR_EXP 104
90088: PUSH
90089: LD_INT 1
90091: ST_TO_ADDR
// if p3 = 15 then
90092: LD_VAR 0 3
90096: PUSH
90097: LD_INT 15
90099: EQUAL
90100: IFFALSE 90110
// sKamikadze := true ;
90102: LD_ADDR_EXP 112
90106: PUSH
90107: LD_INT 1
90109: ST_TO_ADDR
// if p3 = 16 then
90110: LD_VAR 0 3
90114: PUSH
90115: LD_INT 16
90117: EQUAL
90118: IFFALSE 90128
// sTroll := true ;
90120: LD_ADDR_EXP 113
90124: PUSH
90125: LD_INT 1
90127: ST_TO_ADDR
// if p3 = 17 then
90128: LD_VAR 0 3
90132: PUSH
90133: LD_INT 17
90135: EQUAL
90136: IFFALSE 90146
// sSlow := true ;
90138: LD_ADDR_EXP 114
90142: PUSH
90143: LD_INT 1
90145: ST_TO_ADDR
// if p3 = 18 then
90146: LD_VAR 0 3
90150: PUSH
90151: LD_INT 18
90153: EQUAL
90154: IFFALSE 90164
// sLack := true ;
90156: LD_ADDR_EXP 115
90160: PUSH
90161: LD_INT 1
90163: ST_TO_ADDR
// if p3 = 19 then
90164: LD_VAR 0 3
90168: PUSH
90169: LD_INT 19
90171: EQUAL
90172: IFFALSE 90182
// sTank := true ;
90174: LD_ADDR_EXP 117
90178: PUSH
90179: LD_INT 1
90181: ST_TO_ADDR
// if p3 = 20 then
90182: LD_VAR 0 3
90186: PUSH
90187: LD_INT 20
90189: EQUAL
90190: IFFALSE 90200
// sRemote := true ;
90192: LD_ADDR_EXP 118
90196: PUSH
90197: LD_INT 1
90199: ST_TO_ADDR
// if p3 = 21 then
90200: LD_VAR 0 3
90204: PUSH
90205: LD_INT 21
90207: EQUAL
90208: IFFALSE 90218
// sPowell := true ;
90210: LD_ADDR_EXP 119
90214: PUSH
90215: LD_INT 1
90217: ST_TO_ADDR
// if p3 = 22 then
90218: LD_VAR 0 3
90222: PUSH
90223: LD_INT 22
90225: EQUAL
90226: IFFALSE 90236
// sTeleport := true ;
90228: LD_ADDR_EXP 122
90232: PUSH
90233: LD_INT 1
90235: ST_TO_ADDR
// if p3 = 23 then
90236: LD_VAR 0 3
90240: PUSH
90241: LD_INT 23
90243: EQUAL
90244: IFFALSE 90254
// sOilTower := true ;
90246: LD_ADDR_EXP 124
90250: PUSH
90251: LD_INT 1
90253: ST_TO_ADDR
// if p3 = 24 then
90254: LD_VAR 0 3
90258: PUSH
90259: LD_INT 24
90261: EQUAL
90262: IFFALSE 90272
// sShovel := true ;
90264: LD_ADDR_EXP 125
90268: PUSH
90269: LD_INT 1
90271: ST_TO_ADDR
// if p3 = 25 then
90272: LD_VAR 0 3
90276: PUSH
90277: LD_INT 25
90279: EQUAL
90280: IFFALSE 90290
// sSheik := true ;
90282: LD_ADDR_EXP 126
90286: PUSH
90287: LD_INT 1
90289: ST_TO_ADDR
// if p3 = 26 then
90290: LD_VAR 0 3
90294: PUSH
90295: LD_INT 26
90297: EQUAL
90298: IFFALSE 90308
// sEarthquake := true ;
90300: LD_ADDR_EXP 128
90304: PUSH
90305: LD_INT 1
90307: ST_TO_ADDR
// if p3 = 27 then
90308: LD_VAR 0 3
90312: PUSH
90313: LD_INT 27
90315: EQUAL
90316: IFFALSE 90326
// sAI := true ;
90318: LD_ADDR_EXP 129
90322: PUSH
90323: LD_INT 1
90325: ST_TO_ADDR
// if p3 = 28 then
90326: LD_VAR 0 3
90330: PUSH
90331: LD_INT 28
90333: EQUAL
90334: IFFALSE 90344
// sCargo := true ;
90336: LD_ADDR_EXP 132
90340: PUSH
90341: LD_INT 1
90343: ST_TO_ADDR
// if p3 = 29 then
90344: LD_VAR 0 3
90348: PUSH
90349: LD_INT 29
90351: EQUAL
90352: IFFALSE 90362
// sDLaser := true ;
90354: LD_ADDR_EXP 133
90358: PUSH
90359: LD_INT 1
90361: ST_TO_ADDR
// if p3 = 30 then
90362: LD_VAR 0 3
90366: PUSH
90367: LD_INT 30
90369: EQUAL
90370: IFFALSE 90380
// sExchange := true ;
90372: LD_ADDR_EXP 134
90376: PUSH
90377: LD_INT 1
90379: ST_TO_ADDR
// if p3 = 31 then
90380: LD_VAR 0 3
90384: PUSH
90385: LD_INT 31
90387: EQUAL
90388: IFFALSE 90398
// sFac := true ;
90390: LD_ADDR_EXP 135
90394: PUSH
90395: LD_INT 1
90397: ST_TO_ADDR
// if p3 = 32 then
90398: LD_VAR 0 3
90402: PUSH
90403: LD_INT 32
90405: EQUAL
90406: IFFALSE 90416
// sPower := true ;
90408: LD_ADDR_EXP 136
90412: PUSH
90413: LD_INT 1
90415: ST_TO_ADDR
// if p3 = 33 then
90416: LD_VAR 0 3
90420: PUSH
90421: LD_INT 33
90423: EQUAL
90424: IFFALSE 90434
// sRandom := true ;
90426: LD_ADDR_EXP 137
90430: PUSH
90431: LD_INT 1
90433: ST_TO_ADDR
// if p3 = 34 then
90434: LD_VAR 0 3
90438: PUSH
90439: LD_INT 34
90441: EQUAL
90442: IFFALSE 90452
// sShield := true ;
90444: LD_ADDR_EXP 138
90448: PUSH
90449: LD_INT 1
90451: ST_TO_ADDR
// if p3 = 35 then
90452: LD_VAR 0 3
90456: PUSH
90457: LD_INT 35
90459: EQUAL
90460: IFFALSE 90470
// sTime := true ;
90462: LD_ADDR_EXP 139
90466: PUSH
90467: LD_INT 1
90469: ST_TO_ADDR
// if p3 = 36 then
90470: LD_VAR 0 3
90474: PUSH
90475: LD_INT 36
90477: EQUAL
90478: IFFALSE 90488
// sTools := true ;
90480: LD_ADDR_EXP 140
90484: PUSH
90485: LD_INT 1
90487: ST_TO_ADDR
// if p3 = 101 then
90488: LD_VAR 0 3
90492: PUSH
90493: LD_INT 101
90495: EQUAL
90496: IFFALSE 90506
// sSold := true ;
90498: LD_ADDR_EXP 105
90502: PUSH
90503: LD_INT 1
90505: ST_TO_ADDR
// if p3 = 102 then
90506: LD_VAR 0 3
90510: PUSH
90511: LD_INT 102
90513: EQUAL
90514: IFFALSE 90524
// sDiff := true ;
90516: LD_ADDR_EXP 106
90520: PUSH
90521: LD_INT 1
90523: ST_TO_ADDR
// if p3 = 103 then
90524: LD_VAR 0 3
90528: PUSH
90529: LD_INT 103
90531: EQUAL
90532: IFFALSE 90542
// sFog := true ;
90534: LD_ADDR_EXP 109
90538: PUSH
90539: LD_INT 1
90541: ST_TO_ADDR
// if p3 = 104 then
90542: LD_VAR 0 3
90546: PUSH
90547: LD_INT 104
90549: EQUAL
90550: IFFALSE 90560
// sReset := true ;
90552: LD_ADDR_EXP 110
90556: PUSH
90557: LD_INT 1
90559: ST_TO_ADDR
// if p3 = 105 then
90560: LD_VAR 0 3
90564: PUSH
90565: LD_INT 105
90567: EQUAL
90568: IFFALSE 90578
// sSun := true ;
90570: LD_ADDR_EXP 111
90574: PUSH
90575: LD_INT 1
90577: ST_TO_ADDR
// if p3 = 106 then
90578: LD_VAR 0 3
90582: PUSH
90583: LD_INT 106
90585: EQUAL
90586: IFFALSE 90596
// sTiger := true ;
90588: LD_ADDR_EXP 107
90592: PUSH
90593: LD_INT 1
90595: ST_TO_ADDR
// if p3 = 107 then
90596: LD_VAR 0 3
90600: PUSH
90601: LD_INT 107
90603: EQUAL
90604: IFFALSE 90614
// sBomb := true ;
90606: LD_ADDR_EXP 108
90610: PUSH
90611: LD_INT 1
90613: ST_TO_ADDR
// if p3 = 108 then
90614: LD_VAR 0 3
90618: PUSH
90619: LD_INT 108
90621: EQUAL
90622: IFFALSE 90632
// sWound := true ;
90624: LD_ADDR_EXP 116
90628: PUSH
90629: LD_INT 1
90631: ST_TO_ADDR
// if p3 = 109 then
90632: LD_VAR 0 3
90636: PUSH
90637: LD_INT 109
90639: EQUAL
90640: IFFALSE 90650
// sBetray := true ;
90642: LD_ADDR_EXP 120
90646: PUSH
90647: LD_INT 1
90649: ST_TO_ADDR
// if p3 = 110 then
90650: LD_VAR 0 3
90654: PUSH
90655: LD_INT 110
90657: EQUAL
90658: IFFALSE 90668
// sContamin := true ;
90660: LD_ADDR_EXP 121
90664: PUSH
90665: LD_INT 1
90667: ST_TO_ADDR
// if p3 = 111 then
90668: LD_VAR 0 3
90672: PUSH
90673: LD_INT 111
90675: EQUAL
90676: IFFALSE 90686
// sOil := true ;
90678: LD_ADDR_EXP 123
90682: PUSH
90683: LD_INT 1
90685: ST_TO_ADDR
// if p3 = 112 then
90686: LD_VAR 0 3
90690: PUSH
90691: LD_INT 112
90693: EQUAL
90694: IFFALSE 90704
// sStu := true ;
90696: LD_ADDR_EXP 127
90700: PUSH
90701: LD_INT 1
90703: ST_TO_ADDR
// if p3 = 113 then
90704: LD_VAR 0 3
90708: PUSH
90709: LD_INT 113
90711: EQUAL
90712: IFFALSE 90722
// sBazooka := true ;
90714: LD_ADDR_EXP 130
90718: PUSH
90719: LD_INT 1
90721: ST_TO_ADDR
// if p3 = 114 then
90722: LD_VAR 0 3
90726: PUSH
90727: LD_INT 114
90729: EQUAL
90730: IFFALSE 90740
// sMortar := true ;
90732: LD_ADDR_EXP 131
90736: PUSH
90737: LD_INT 1
90739: ST_TO_ADDR
// if p3 = 115 then
90740: LD_VAR 0 3
90744: PUSH
90745: LD_INT 115
90747: EQUAL
90748: IFFALSE 90758
// sRanger := true ;
90750: LD_ADDR_EXP 141
90754: PUSH
90755: LD_INT 1
90757: ST_TO_ADDR
// end ; end ;
90758: PPOPN 6
90760: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90761: LD_EXP 88
90765: PUSH
90766: LD_EXP 93
90770: AND
90771: IFFALSE 90895
90773: GO 90775
90775: DISABLE
90776: LD_INT 0
90778: PPUSH
90779: PPUSH
// begin enable ;
90780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
90781: LD_ADDR_VAR 0 2
90785: PUSH
90786: LD_INT 22
90788: PUSH
90789: LD_OWVAR 2
90793: PUSH
90794: EMPTY
90795: LIST
90796: LIST
90797: PUSH
90798: LD_INT 2
90800: PUSH
90801: LD_INT 34
90803: PUSH
90804: LD_INT 7
90806: PUSH
90807: EMPTY
90808: LIST
90809: LIST
90810: PUSH
90811: LD_INT 34
90813: PUSH
90814: LD_INT 45
90816: PUSH
90817: EMPTY
90818: LIST
90819: LIST
90820: PUSH
90821: LD_INT 34
90823: PUSH
90824: LD_INT 28
90826: PUSH
90827: EMPTY
90828: LIST
90829: LIST
90830: PUSH
90831: LD_INT 34
90833: PUSH
90834: LD_INT 47
90836: PUSH
90837: EMPTY
90838: LIST
90839: LIST
90840: PUSH
90841: EMPTY
90842: LIST
90843: LIST
90844: LIST
90845: LIST
90846: LIST
90847: PUSH
90848: EMPTY
90849: LIST
90850: LIST
90851: PPUSH
90852: CALL_OW 69
90856: ST_TO_ADDR
// if not tmp then
90857: LD_VAR 0 2
90861: NOT
90862: IFFALSE 90866
// exit ;
90864: GO 90895
// for i in tmp do
90866: LD_ADDR_VAR 0 1
90870: PUSH
90871: LD_VAR 0 2
90875: PUSH
90876: FOR_IN
90877: IFFALSE 90893
// begin SetLives ( i , 0 ) ;
90879: LD_VAR 0 1
90883: PPUSH
90884: LD_INT 0
90886: PPUSH
90887: CALL_OW 234
// end ;
90891: GO 90876
90893: POP
90894: POP
// end ;
90895: PPOPN 2
90897: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
90898: LD_EXP 88
90902: PUSH
90903: LD_EXP 94
90907: AND
90908: IFFALSE 90992
90910: GO 90912
90912: DISABLE
90913: LD_INT 0
90915: PPUSH
90916: PPUSH
// begin enable ;
90917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
90918: LD_ADDR_VAR 0 2
90922: PUSH
90923: LD_INT 22
90925: PUSH
90926: LD_OWVAR 2
90930: PUSH
90931: EMPTY
90932: LIST
90933: LIST
90934: PUSH
90935: LD_INT 32
90937: PUSH
90938: LD_INT 3
90940: PUSH
90941: EMPTY
90942: LIST
90943: LIST
90944: PUSH
90945: EMPTY
90946: LIST
90947: LIST
90948: PPUSH
90949: CALL_OW 69
90953: ST_TO_ADDR
// if not tmp then
90954: LD_VAR 0 2
90958: NOT
90959: IFFALSE 90963
// exit ;
90961: GO 90992
// for i in tmp do
90963: LD_ADDR_VAR 0 1
90967: PUSH
90968: LD_VAR 0 2
90972: PUSH
90973: FOR_IN
90974: IFFALSE 90990
// begin SetLives ( i , 0 ) ;
90976: LD_VAR 0 1
90980: PPUSH
90981: LD_INT 0
90983: PPUSH
90984: CALL_OW 234
// end ;
90988: GO 90973
90990: POP
90991: POP
// end ;
90992: PPOPN 2
90994: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
90995: LD_EXP 88
90999: PUSH
91000: LD_EXP 91
91004: AND
91005: IFFALSE 91098
91007: GO 91009
91009: DISABLE
91010: LD_INT 0
91012: PPUSH
// begin enable ;
91013: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
91014: LD_ADDR_VAR 0 1
91018: PUSH
91019: LD_INT 22
91021: PUSH
91022: LD_OWVAR 2
91026: PUSH
91027: EMPTY
91028: LIST
91029: LIST
91030: PUSH
91031: LD_INT 2
91033: PUSH
91034: LD_INT 25
91036: PUSH
91037: LD_INT 5
91039: PUSH
91040: EMPTY
91041: LIST
91042: LIST
91043: PUSH
91044: LD_INT 25
91046: PUSH
91047: LD_INT 9
91049: PUSH
91050: EMPTY
91051: LIST
91052: LIST
91053: PUSH
91054: LD_INT 25
91056: PUSH
91057: LD_INT 8
91059: PUSH
91060: EMPTY
91061: LIST
91062: LIST
91063: PUSH
91064: EMPTY
91065: LIST
91066: LIST
91067: LIST
91068: LIST
91069: PUSH
91070: EMPTY
91071: LIST
91072: LIST
91073: PPUSH
91074: CALL_OW 69
91078: PUSH
91079: FOR_IN
91080: IFFALSE 91096
// begin SetClass ( i , 1 ) ;
91082: LD_VAR 0 1
91086: PPUSH
91087: LD_INT 1
91089: PPUSH
91090: CALL_OW 336
// end ;
91094: GO 91079
91096: POP
91097: POP
// end ;
91098: PPOPN 1
91100: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
91101: LD_EXP 88
91105: PUSH
91106: LD_EXP 92
91110: AND
91111: PUSH
91112: LD_OWVAR 65
91116: PUSH
91117: LD_INT 7
91119: LESS
91120: AND
91121: IFFALSE 91135
91123: GO 91125
91125: DISABLE
// begin enable ;
91126: ENABLE
// game_speed := 7 ;
91127: LD_ADDR_OWVAR 65
91131: PUSH
91132: LD_INT 7
91134: ST_TO_ADDR
// end ;
91135: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
91136: LD_EXP 88
91140: PUSH
91141: LD_EXP 95
91145: AND
91146: IFFALSE 91348
91148: GO 91150
91150: DISABLE
91151: LD_INT 0
91153: PPUSH
91154: PPUSH
91155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
91156: LD_ADDR_VAR 0 3
91160: PUSH
91161: LD_INT 81
91163: PUSH
91164: LD_OWVAR 2
91168: PUSH
91169: EMPTY
91170: LIST
91171: LIST
91172: PUSH
91173: LD_INT 21
91175: PUSH
91176: LD_INT 1
91178: PUSH
91179: EMPTY
91180: LIST
91181: LIST
91182: PUSH
91183: EMPTY
91184: LIST
91185: LIST
91186: PPUSH
91187: CALL_OW 69
91191: ST_TO_ADDR
// if not tmp then
91192: LD_VAR 0 3
91196: NOT
91197: IFFALSE 91201
// exit ;
91199: GO 91348
// if tmp > 5 then
91201: LD_VAR 0 3
91205: PUSH
91206: LD_INT 5
91208: GREATER
91209: IFFALSE 91221
// k := 5 else
91211: LD_ADDR_VAR 0 2
91215: PUSH
91216: LD_INT 5
91218: ST_TO_ADDR
91219: GO 91231
// k := tmp ;
91221: LD_ADDR_VAR 0 2
91225: PUSH
91226: LD_VAR 0 3
91230: ST_TO_ADDR
// for i := 1 to k do
91231: LD_ADDR_VAR 0 1
91235: PUSH
91236: DOUBLE
91237: LD_INT 1
91239: DEC
91240: ST_TO_ADDR
91241: LD_VAR 0 2
91245: PUSH
91246: FOR_TO
91247: IFFALSE 91346
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91249: LD_VAR 0 3
91253: PUSH
91254: LD_VAR 0 1
91258: ARRAY
91259: PPUSH
91260: LD_VAR 0 1
91264: PUSH
91265: LD_INT 4
91267: MOD
91268: PUSH
91269: LD_INT 1
91271: PLUS
91272: PPUSH
91273: CALL_OW 259
91277: PUSH
91278: LD_INT 10
91280: LESS
91281: IFFALSE 91344
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91283: LD_VAR 0 3
91287: PUSH
91288: LD_VAR 0 1
91292: ARRAY
91293: PPUSH
91294: LD_VAR 0 1
91298: PUSH
91299: LD_INT 4
91301: MOD
91302: PUSH
91303: LD_INT 1
91305: PLUS
91306: PPUSH
91307: LD_VAR 0 3
91311: PUSH
91312: LD_VAR 0 1
91316: ARRAY
91317: PPUSH
91318: LD_VAR 0 1
91322: PUSH
91323: LD_INT 4
91325: MOD
91326: PUSH
91327: LD_INT 1
91329: PLUS
91330: PPUSH
91331: CALL_OW 259
91335: PUSH
91336: LD_INT 1
91338: PLUS
91339: PPUSH
91340: CALL_OW 237
91344: GO 91246
91346: POP
91347: POP
// end ;
91348: PPOPN 3
91350: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91351: LD_EXP 88
91355: PUSH
91356: LD_EXP 96
91360: AND
91361: IFFALSE 91381
91363: GO 91365
91365: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91366: LD_INT 4
91368: PPUSH
91369: LD_OWVAR 2
91373: PPUSH
91374: LD_INT 0
91376: PPUSH
91377: CALL_OW 324
91381: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91382: LD_EXP 88
91386: PUSH
91387: LD_EXP 125
91391: AND
91392: IFFALSE 91412
91394: GO 91396
91396: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91397: LD_INT 19
91399: PPUSH
91400: LD_OWVAR 2
91404: PPUSH
91405: LD_INT 0
91407: PPUSH
91408: CALL_OW 324
91412: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91413: LD_EXP 88
91417: PUSH
91418: LD_EXP 97
91422: AND
91423: IFFALSE 91525
91425: GO 91427
91427: DISABLE
91428: LD_INT 0
91430: PPUSH
91431: PPUSH
// begin enable ;
91432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91433: LD_ADDR_VAR 0 2
91437: PUSH
91438: LD_INT 22
91440: PUSH
91441: LD_OWVAR 2
91445: PUSH
91446: EMPTY
91447: LIST
91448: LIST
91449: PUSH
91450: LD_INT 2
91452: PUSH
91453: LD_INT 34
91455: PUSH
91456: LD_INT 11
91458: PUSH
91459: EMPTY
91460: LIST
91461: LIST
91462: PUSH
91463: LD_INT 34
91465: PUSH
91466: LD_INT 30
91468: PUSH
91469: EMPTY
91470: LIST
91471: LIST
91472: PUSH
91473: EMPTY
91474: LIST
91475: LIST
91476: LIST
91477: PUSH
91478: EMPTY
91479: LIST
91480: LIST
91481: PPUSH
91482: CALL_OW 69
91486: ST_TO_ADDR
// if not tmp then
91487: LD_VAR 0 2
91491: NOT
91492: IFFALSE 91496
// exit ;
91494: GO 91525
// for i in tmp do
91496: LD_ADDR_VAR 0 1
91500: PUSH
91501: LD_VAR 0 2
91505: PUSH
91506: FOR_IN
91507: IFFALSE 91523
// begin SetLives ( i , 0 ) ;
91509: LD_VAR 0 1
91513: PPUSH
91514: LD_INT 0
91516: PPUSH
91517: CALL_OW 234
// end ;
91521: GO 91506
91523: POP
91524: POP
// end ;
91525: PPOPN 2
91527: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91528: LD_EXP 88
91532: PUSH
91533: LD_EXP 98
91537: AND
91538: IFFALSE 91558
91540: GO 91542
91542: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91543: LD_INT 32
91545: PPUSH
91546: LD_OWVAR 2
91550: PPUSH
91551: LD_INT 0
91553: PPUSH
91554: CALL_OW 324
91558: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91559: LD_EXP 88
91563: PUSH
91564: LD_EXP 99
91568: AND
91569: IFFALSE 91750
91571: GO 91573
91573: DISABLE
91574: LD_INT 0
91576: PPUSH
91577: PPUSH
91578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91579: LD_ADDR_VAR 0 2
91583: PUSH
91584: LD_INT 22
91586: PUSH
91587: LD_OWVAR 2
91591: PUSH
91592: EMPTY
91593: LIST
91594: LIST
91595: PUSH
91596: LD_INT 33
91598: PUSH
91599: LD_INT 3
91601: PUSH
91602: EMPTY
91603: LIST
91604: LIST
91605: PUSH
91606: EMPTY
91607: LIST
91608: LIST
91609: PPUSH
91610: CALL_OW 69
91614: ST_TO_ADDR
// if not tmp then
91615: LD_VAR 0 2
91619: NOT
91620: IFFALSE 91624
// exit ;
91622: GO 91750
// side := 0 ;
91624: LD_ADDR_VAR 0 3
91628: PUSH
91629: LD_INT 0
91631: ST_TO_ADDR
// for i := 1 to 8 do
91632: LD_ADDR_VAR 0 1
91636: PUSH
91637: DOUBLE
91638: LD_INT 1
91640: DEC
91641: ST_TO_ADDR
91642: LD_INT 8
91644: PUSH
91645: FOR_TO
91646: IFFALSE 91694
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91648: LD_OWVAR 2
91652: PUSH
91653: LD_VAR 0 1
91657: NONEQUAL
91658: PUSH
91659: LD_OWVAR 2
91663: PPUSH
91664: LD_VAR 0 1
91668: PPUSH
91669: CALL_OW 81
91673: PUSH
91674: LD_INT 2
91676: EQUAL
91677: AND
91678: IFFALSE 91692
// begin side := i ;
91680: LD_ADDR_VAR 0 3
91684: PUSH
91685: LD_VAR 0 1
91689: ST_TO_ADDR
// break ;
91690: GO 91694
// end ;
91692: GO 91645
91694: POP
91695: POP
// if not side then
91696: LD_VAR 0 3
91700: NOT
91701: IFFALSE 91705
// exit ;
91703: GO 91750
// for i := 1 to tmp do
91705: LD_ADDR_VAR 0 1
91709: PUSH
91710: DOUBLE
91711: LD_INT 1
91713: DEC
91714: ST_TO_ADDR
91715: LD_VAR 0 2
91719: PUSH
91720: FOR_TO
91721: IFFALSE 91748
// if Prob ( 60 ) then
91723: LD_INT 60
91725: PPUSH
91726: CALL_OW 13
91730: IFFALSE 91746
// SetSide ( i , side ) ;
91732: LD_VAR 0 1
91736: PPUSH
91737: LD_VAR 0 3
91741: PPUSH
91742: CALL_OW 235
91746: GO 91720
91748: POP
91749: POP
// end ;
91750: PPOPN 3
91752: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91753: LD_EXP 88
91757: PUSH
91758: LD_EXP 101
91762: AND
91763: IFFALSE 91882
91765: GO 91767
91767: DISABLE
91768: LD_INT 0
91770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91771: LD_ADDR_VAR 0 1
91775: PUSH
91776: LD_INT 22
91778: PUSH
91779: LD_OWVAR 2
91783: PUSH
91784: EMPTY
91785: LIST
91786: LIST
91787: PUSH
91788: LD_INT 21
91790: PUSH
91791: LD_INT 1
91793: PUSH
91794: EMPTY
91795: LIST
91796: LIST
91797: PUSH
91798: LD_INT 3
91800: PUSH
91801: LD_INT 23
91803: PUSH
91804: LD_INT 0
91806: PUSH
91807: EMPTY
91808: LIST
91809: LIST
91810: PUSH
91811: EMPTY
91812: LIST
91813: LIST
91814: PUSH
91815: EMPTY
91816: LIST
91817: LIST
91818: LIST
91819: PPUSH
91820: CALL_OW 69
91824: PUSH
91825: FOR_IN
91826: IFFALSE 91880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
91828: LD_VAR 0 1
91832: PPUSH
91833: CALL_OW 257
91837: PUSH
91838: LD_INT 1
91840: PUSH
91841: LD_INT 2
91843: PUSH
91844: LD_INT 3
91846: PUSH
91847: LD_INT 4
91849: PUSH
91850: EMPTY
91851: LIST
91852: LIST
91853: LIST
91854: LIST
91855: IN
91856: IFFALSE 91878
// SetClass ( un , rand ( 1 , 4 ) ) ;
91858: LD_VAR 0 1
91862: PPUSH
91863: LD_INT 1
91865: PPUSH
91866: LD_INT 4
91868: PPUSH
91869: CALL_OW 12
91873: PPUSH
91874: CALL_OW 336
91878: GO 91825
91880: POP
91881: POP
// end ;
91882: PPOPN 1
91884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
91885: LD_EXP 88
91889: PUSH
91890: LD_EXP 100
91894: AND
91895: IFFALSE 91974
91897: GO 91899
91899: DISABLE
91900: LD_INT 0
91902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91903: LD_ADDR_VAR 0 1
91907: PUSH
91908: LD_INT 22
91910: PUSH
91911: LD_OWVAR 2
91915: PUSH
91916: EMPTY
91917: LIST
91918: LIST
91919: PUSH
91920: LD_INT 21
91922: PUSH
91923: LD_INT 3
91925: PUSH
91926: EMPTY
91927: LIST
91928: LIST
91929: PUSH
91930: EMPTY
91931: LIST
91932: LIST
91933: PPUSH
91934: CALL_OW 69
91938: ST_TO_ADDR
// if not tmp then
91939: LD_VAR 0 1
91943: NOT
91944: IFFALSE 91948
// exit ;
91946: GO 91974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
91948: LD_VAR 0 1
91952: PUSH
91953: LD_INT 1
91955: PPUSH
91956: LD_VAR 0 1
91960: PPUSH
91961: CALL_OW 12
91965: ARRAY
91966: PPUSH
91967: LD_INT 100
91969: PPUSH
91970: CALL_OW 234
// end ;
91974: PPOPN 1
91976: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
91977: LD_EXP 88
91981: PUSH
91982: LD_EXP 102
91986: AND
91987: IFFALSE 92085
91989: GO 91991
91991: DISABLE
91992: LD_INT 0
91994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91995: LD_ADDR_VAR 0 1
91999: PUSH
92000: LD_INT 22
92002: PUSH
92003: LD_OWVAR 2
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PUSH
92012: LD_INT 21
92014: PUSH
92015: LD_INT 1
92017: PUSH
92018: EMPTY
92019: LIST
92020: LIST
92021: PUSH
92022: EMPTY
92023: LIST
92024: LIST
92025: PPUSH
92026: CALL_OW 69
92030: ST_TO_ADDR
// if not tmp then
92031: LD_VAR 0 1
92035: NOT
92036: IFFALSE 92040
// exit ;
92038: GO 92085
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92040: LD_VAR 0 1
92044: PUSH
92045: LD_INT 1
92047: PPUSH
92048: LD_VAR 0 1
92052: PPUSH
92053: CALL_OW 12
92057: ARRAY
92058: PPUSH
92059: LD_INT 1
92061: PPUSH
92062: LD_INT 4
92064: PPUSH
92065: CALL_OW 12
92069: PPUSH
92070: LD_INT 3000
92072: PPUSH
92073: LD_INT 9000
92075: PPUSH
92076: CALL_OW 12
92080: PPUSH
92081: CALL_OW 492
// end ;
92085: PPOPN 1
92087: END
// every 0 0$1 trigger StreamModeActive and sDepot do
92088: LD_EXP 88
92092: PUSH
92093: LD_EXP 103
92097: AND
92098: IFFALSE 92118
92100: GO 92102
92102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
92103: LD_INT 1
92105: PPUSH
92106: LD_OWVAR 2
92110: PPUSH
92111: LD_INT 0
92113: PPUSH
92114: CALL_OW 324
92118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
92119: LD_EXP 88
92123: PUSH
92124: LD_EXP 104
92128: AND
92129: IFFALSE 92212
92131: GO 92133
92133: DISABLE
92134: LD_INT 0
92136: PPUSH
92137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92138: LD_ADDR_VAR 0 2
92142: PUSH
92143: LD_INT 22
92145: PUSH
92146: LD_OWVAR 2
92150: PUSH
92151: EMPTY
92152: LIST
92153: LIST
92154: PUSH
92155: LD_INT 21
92157: PUSH
92158: LD_INT 3
92160: PUSH
92161: EMPTY
92162: LIST
92163: LIST
92164: PUSH
92165: EMPTY
92166: LIST
92167: LIST
92168: PPUSH
92169: CALL_OW 69
92173: ST_TO_ADDR
// if not tmp then
92174: LD_VAR 0 2
92178: NOT
92179: IFFALSE 92183
// exit ;
92181: GO 92212
// for i in tmp do
92183: LD_ADDR_VAR 0 1
92187: PUSH
92188: LD_VAR 0 2
92192: PUSH
92193: FOR_IN
92194: IFFALSE 92210
// SetBLevel ( i , 10 ) ;
92196: LD_VAR 0 1
92200: PPUSH
92201: LD_INT 10
92203: PPUSH
92204: CALL_OW 241
92208: GO 92193
92210: POP
92211: POP
// end ;
92212: PPOPN 2
92214: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92215: LD_EXP 88
92219: PUSH
92220: LD_EXP 105
92224: AND
92225: IFFALSE 92336
92227: GO 92229
92229: DISABLE
92230: LD_INT 0
92232: PPUSH
92233: PPUSH
92234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92235: LD_ADDR_VAR 0 3
92239: PUSH
92240: LD_INT 22
92242: PUSH
92243: LD_OWVAR 2
92247: PUSH
92248: EMPTY
92249: LIST
92250: LIST
92251: PUSH
92252: LD_INT 25
92254: PUSH
92255: LD_INT 1
92257: PUSH
92258: EMPTY
92259: LIST
92260: LIST
92261: PUSH
92262: EMPTY
92263: LIST
92264: LIST
92265: PPUSH
92266: CALL_OW 69
92270: ST_TO_ADDR
// if not tmp then
92271: LD_VAR 0 3
92275: NOT
92276: IFFALSE 92280
// exit ;
92278: GO 92336
// un := tmp [ rand ( 1 , tmp ) ] ;
92280: LD_ADDR_VAR 0 2
92284: PUSH
92285: LD_VAR 0 3
92289: PUSH
92290: LD_INT 1
92292: PPUSH
92293: LD_VAR 0 3
92297: PPUSH
92298: CALL_OW 12
92302: ARRAY
92303: ST_TO_ADDR
// if Crawls ( un ) then
92304: LD_VAR 0 2
92308: PPUSH
92309: CALL_OW 318
92313: IFFALSE 92324
// ComWalk ( un ) ;
92315: LD_VAR 0 2
92319: PPUSH
92320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92324: LD_VAR 0 2
92328: PPUSH
92329: LD_INT 5
92331: PPUSH
92332: CALL_OW 336
// end ;
92336: PPOPN 3
92338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92339: LD_EXP 88
92343: PUSH
92344: LD_EXP 106
92348: AND
92349: PUSH
92350: LD_OWVAR 67
92354: PUSH
92355: LD_INT 3
92357: LESS
92358: AND
92359: IFFALSE 92378
92361: GO 92363
92363: DISABLE
// Difficulty := Difficulty + 1 ;
92364: LD_ADDR_OWVAR 67
92368: PUSH
92369: LD_OWVAR 67
92373: PUSH
92374: LD_INT 1
92376: PLUS
92377: ST_TO_ADDR
92378: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92379: LD_EXP 88
92383: PUSH
92384: LD_EXP 107
92388: AND
92389: IFFALSE 92492
92391: GO 92393
92393: DISABLE
92394: LD_INT 0
92396: PPUSH
// begin for i := 1 to 5 do
92397: LD_ADDR_VAR 0 1
92401: PUSH
92402: DOUBLE
92403: LD_INT 1
92405: DEC
92406: ST_TO_ADDR
92407: LD_INT 5
92409: PUSH
92410: FOR_TO
92411: IFFALSE 92490
// begin uc_nation := nation_nature ;
92413: LD_ADDR_OWVAR 21
92417: PUSH
92418: LD_INT 0
92420: ST_TO_ADDR
// uc_side := 0 ;
92421: LD_ADDR_OWVAR 20
92425: PUSH
92426: LD_INT 0
92428: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92429: LD_ADDR_OWVAR 29
92433: PUSH
92434: LD_INT 12
92436: PUSH
92437: LD_INT 12
92439: PUSH
92440: EMPTY
92441: LIST
92442: LIST
92443: ST_TO_ADDR
// hc_agressivity := 20 ;
92444: LD_ADDR_OWVAR 35
92448: PUSH
92449: LD_INT 20
92451: ST_TO_ADDR
// hc_class := class_tiger ;
92452: LD_ADDR_OWVAR 28
92456: PUSH
92457: LD_INT 14
92459: ST_TO_ADDR
// hc_gallery :=  ;
92460: LD_ADDR_OWVAR 33
92464: PUSH
92465: LD_STRING 
92467: ST_TO_ADDR
// hc_name :=  ;
92468: LD_ADDR_OWVAR 26
92472: PUSH
92473: LD_STRING 
92475: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92476: CALL_OW 44
92480: PPUSH
92481: LD_INT 0
92483: PPUSH
92484: CALL_OW 51
// end ;
92488: GO 92410
92490: POP
92491: POP
// end ;
92492: PPOPN 1
92494: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92495: LD_EXP 88
92499: PUSH
92500: LD_EXP 108
92504: AND
92505: IFFALSE 92514
92507: GO 92509
92509: DISABLE
// StreamSibBomb ;
92510: CALL 92515 0 0
92514: END
// export function StreamSibBomb ; var i , x , y ; begin
92515: LD_INT 0
92517: PPUSH
92518: PPUSH
92519: PPUSH
92520: PPUSH
// result := false ;
92521: LD_ADDR_VAR 0 1
92525: PUSH
92526: LD_INT 0
92528: ST_TO_ADDR
// for i := 1 to 16 do
92529: LD_ADDR_VAR 0 2
92533: PUSH
92534: DOUBLE
92535: LD_INT 1
92537: DEC
92538: ST_TO_ADDR
92539: LD_INT 16
92541: PUSH
92542: FOR_TO
92543: IFFALSE 92742
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92545: LD_ADDR_VAR 0 3
92549: PUSH
92550: LD_INT 10
92552: PUSH
92553: LD_INT 20
92555: PUSH
92556: LD_INT 30
92558: PUSH
92559: LD_INT 40
92561: PUSH
92562: LD_INT 50
92564: PUSH
92565: LD_INT 60
92567: PUSH
92568: LD_INT 70
92570: PUSH
92571: LD_INT 80
92573: PUSH
92574: LD_INT 90
92576: PUSH
92577: LD_INT 100
92579: PUSH
92580: LD_INT 110
92582: PUSH
92583: LD_INT 120
92585: PUSH
92586: LD_INT 130
92588: PUSH
92589: LD_INT 140
92591: PUSH
92592: LD_INT 150
92594: PUSH
92595: EMPTY
92596: LIST
92597: LIST
92598: LIST
92599: LIST
92600: LIST
92601: LIST
92602: LIST
92603: LIST
92604: LIST
92605: LIST
92606: LIST
92607: LIST
92608: LIST
92609: LIST
92610: LIST
92611: PUSH
92612: LD_INT 1
92614: PPUSH
92615: LD_INT 15
92617: PPUSH
92618: CALL_OW 12
92622: ARRAY
92623: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92624: LD_ADDR_VAR 0 4
92628: PUSH
92629: LD_INT 10
92631: PUSH
92632: LD_INT 20
92634: PUSH
92635: LD_INT 30
92637: PUSH
92638: LD_INT 40
92640: PUSH
92641: LD_INT 50
92643: PUSH
92644: LD_INT 60
92646: PUSH
92647: LD_INT 70
92649: PUSH
92650: LD_INT 80
92652: PUSH
92653: LD_INT 90
92655: PUSH
92656: LD_INT 100
92658: PUSH
92659: LD_INT 110
92661: PUSH
92662: LD_INT 120
92664: PUSH
92665: LD_INT 130
92667: PUSH
92668: LD_INT 140
92670: PUSH
92671: LD_INT 150
92673: PUSH
92674: EMPTY
92675: LIST
92676: LIST
92677: LIST
92678: LIST
92679: LIST
92680: LIST
92681: LIST
92682: LIST
92683: LIST
92684: LIST
92685: LIST
92686: LIST
92687: LIST
92688: LIST
92689: LIST
92690: PUSH
92691: LD_INT 1
92693: PPUSH
92694: LD_INT 15
92696: PPUSH
92697: CALL_OW 12
92701: ARRAY
92702: ST_TO_ADDR
// if ValidHex ( x , y ) then
92703: LD_VAR 0 3
92707: PPUSH
92708: LD_VAR 0 4
92712: PPUSH
92713: CALL_OW 488
92717: IFFALSE 92740
// begin result := [ x , y ] ;
92719: LD_ADDR_VAR 0 1
92723: PUSH
92724: LD_VAR 0 3
92728: PUSH
92729: LD_VAR 0 4
92733: PUSH
92734: EMPTY
92735: LIST
92736: LIST
92737: ST_TO_ADDR
// break ;
92738: GO 92742
// end ; end ;
92740: GO 92542
92742: POP
92743: POP
// if result then
92744: LD_VAR 0 1
92748: IFFALSE 92808
// begin ToLua ( playSibBomb() ) ;
92750: LD_STRING playSibBomb()
92752: PPUSH
92753: CALL_OW 559
// wait ( 0 0$14 ) ;
92757: LD_INT 490
92759: PPUSH
92760: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92764: LD_VAR 0 1
92768: PUSH
92769: LD_INT 1
92771: ARRAY
92772: PPUSH
92773: LD_VAR 0 1
92777: PUSH
92778: LD_INT 2
92780: ARRAY
92781: PPUSH
92782: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
92786: LD_VAR 0 1
92790: PUSH
92791: LD_INT 1
92793: ARRAY
92794: PPUSH
92795: LD_VAR 0 1
92799: PUSH
92800: LD_INT 2
92802: ARRAY
92803: PPUSH
92804: CALL_OW 429
// end ; end ;
92808: LD_VAR 0 1
92812: RET
// every 0 0$1 trigger StreamModeActive and sReset do
92813: LD_EXP 88
92817: PUSH
92818: LD_EXP 110
92822: AND
92823: IFFALSE 92835
92825: GO 92827
92827: DISABLE
// YouLost (  ) ;
92828: LD_STRING 
92830: PPUSH
92831: CALL_OW 104
92835: END
// every 0 0$1 trigger StreamModeActive and sFog do
92836: LD_EXP 88
92840: PUSH
92841: LD_EXP 109
92845: AND
92846: IFFALSE 92860
92848: GO 92850
92850: DISABLE
// FogOff ( your_side ) ;
92851: LD_OWVAR 2
92855: PPUSH
92856: CALL_OW 344
92860: END
// every 0 0$1 trigger StreamModeActive and sSun do
92861: LD_EXP 88
92865: PUSH
92866: LD_EXP 111
92870: AND
92871: IFFALSE 92899
92873: GO 92875
92875: DISABLE
// begin solar_recharge_percent := 0 ;
92876: LD_ADDR_OWVAR 79
92880: PUSH
92881: LD_INT 0
92883: ST_TO_ADDR
// wait ( 5 5$00 ) ;
92884: LD_INT 10500
92886: PPUSH
92887: CALL_OW 67
// solar_recharge_percent := 100 ;
92891: LD_ADDR_OWVAR 79
92895: PUSH
92896: LD_INT 100
92898: ST_TO_ADDR
// end ;
92899: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
92900: LD_EXP 88
92904: PUSH
92905: LD_EXP 112
92909: AND
92910: IFFALSE 93149
92912: GO 92914
92914: DISABLE
92915: LD_INT 0
92917: PPUSH
92918: PPUSH
92919: PPUSH
// begin tmp := [ ] ;
92920: LD_ADDR_VAR 0 3
92924: PUSH
92925: EMPTY
92926: ST_TO_ADDR
// for i := 1 to 6 do
92927: LD_ADDR_VAR 0 1
92931: PUSH
92932: DOUBLE
92933: LD_INT 1
92935: DEC
92936: ST_TO_ADDR
92937: LD_INT 6
92939: PUSH
92940: FOR_TO
92941: IFFALSE 93046
// begin uc_nation := nation_nature ;
92943: LD_ADDR_OWVAR 21
92947: PUSH
92948: LD_INT 0
92950: ST_TO_ADDR
// uc_side := 0 ;
92951: LD_ADDR_OWVAR 20
92955: PUSH
92956: LD_INT 0
92958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92959: LD_ADDR_OWVAR 29
92963: PUSH
92964: LD_INT 12
92966: PUSH
92967: LD_INT 12
92969: PUSH
92970: EMPTY
92971: LIST
92972: LIST
92973: ST_TO_ADDR
// hc_agressivity := 20 ;
92974: LD_ADDR_OWVAR 35
92978: PUSH
92979: LD_INT 20
92981: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
92982: LD_ADDR_OWVAR 28
92986: PUSH
92987: LD_INT 17
92989: ST_TO_ADDR
// hc_gallery :=  ;
92990: LD_ADDR_OWVAR 33
92994: PUSH
92995: LD_STRING 
92997: ST_TO_ADDR
// hc_name :=  ;
92998: LD_ADDR_OWVAR 26
93002: PUSH
93003: LD_STRING 
93005: ST_TO_ADDR
// un := CreateHuman ;
93006: LD_ADDR_VAR 0 2
93010: PUSH
93011: CALL_OW 44
93015: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
93016: LD_VAR 0 2
93020: PPUSH
93021: LD_INT 1
93023: PPUSH
93024: CALL_OW 51
// tmp := tmp ^ un ;
93028: LD_ADDR_VAR 0 3
93032: PUSH
93033: LD_VAR 0 3
93037: PUSH
93038: LD_VAR 0 2
93042: ADD
93043: ST_TO_ADDR
// end ;
93044: GO 92940
93046: POP
93047: POP
// repeat wait ( 0 0$1 ) ;
93048: LD_INT 35
93050: PPUSH
93051: CALL_OW 67
// for un in tmp do
93055: LD_ADDR_VAR 0 2
93059: PUSH
93060: LD_VAR 0 3
93064: PUSH
93065: FOR_IN
93066: IFFALSE 93140
// begin if IsDead ( un ) then
93068: LD_VAR 0 2
93072: PPUSH
93073: CALL_OW 301
93077: IFFALSE 93097
// begin tmp := tmp diff un ;
93079: LD_ADDR_VAR 0 3
93083: PUSH
93084: LD_VAR 0 3
93088: PUSH
93089: LD_VAR 0 2
93093: DIFF
93094: ST_TO_ADDR
// continue ;
93095: GO 93065
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
93097: LD_VAR 0 2
93101: PPUSH
93102: LD_INT 3
93104: PUSH
93105: LD_INT 22
93107: PUSH
93108: LD_INT 0
93110: PUSH
93111: EMPTY
93112: LIST
93113: LIST
93114: PUSH
93115: EMPTY
93116: LIST
93117: LIST
93118: PPUSH
93119: CALL_OW 69
93123: PPUSH
93124: LD_VAR 0 2
93128: PPUSH
93129: CALL_OW 74
93133: PPUSH
93134: CALL_OW 115
// end ;
93138: GO 93065
93140: POP
93141: POP
// until not tmp ;
93142: LD_VAR 0 3
93146: NOT
93147: IFFALSE 93048
// end ;
93149: PPOPN 3
93151: END
// every 0 0$1 trigger StreamModeActive and sTroll do
93152: LD_EXP 88
93156: PUSH
93157: LD_EXP 113
93161: AND
93162: IFFALSE 93216
93164: GO 93166
93166: DISABLE
// begin ToLua ( displayTroll(); ) ;
93167: LD_STRING displayTroll();
93169: PPUSH
93170: CALL_OW 559
// wait ( 3 3$00 ) ;
93174: LD_INT 6300
93176: PPUSH
93177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93181: LD_STRING hideTroll();
93183: PPUSH
93184: CALL_OW 559
// wait ( 1 1$00 ) ;
93188: LD_INT 2100
93190: PPUSH
93191: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93195: LD_STRING displayTroll();
93197: PPUSH
93198: CALL_OW 559
// wait ( 1 1$00 ) ;
93202: LD_INT 2100
93204: PPUSH
93205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93209: LD_STRING hideTroll();
93211: PPUSH
93212: CALL_OW 559
// end ;
93216: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93217: LD_EXP 88
93221: PUSH
93222: LD_EXP 114
93226: AND
93227: IFFALSE 93290
93229: GO 93231
93231: DISABLE
93232: LD_INT 0
93234: PPUSH
// begin p := 0 ;
93235: LD_ADDR_VAR 0 1
93239: PUSH
93240: LD_INT 0
93242: ST_TO_ADDR
// repeat game_speed := 1 ;
93243: LD_ADDR_OWVAR 65
93247: PUSH
93248: LD_INT 1
93250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93251: LD_INT 35
93253: PPUSH
93254: CALL_OW 67
// p := p + 1 ;
93258: LD_ADDR_VAR 0 1
93262: PUSH
93263: LD_VAR 0 1
93267: PUSH
93268: LD_INT 1
93270: PLUS
93271: ST_TO_ADDR
// until p >= 60 ;
93272: LD_VAR 0 1
93276: PUSH
93277: LD_INT 60
93279: GREATEREQUAL
93280: IFFALSE 93243
// game_speed := 4 ;
93282: LD_ADDR_OWVAR 65
93286: PUSH
93287: LD_INT 4
93289: ST_TO_ADDR
// end ;
93290: PPOPN 1
93292: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93293: LD_EXP 88
93297: PUSH
93298: LD_EXP 115
93302: AND
93303: IFFALSE 93449
93305: GO 93307
93307: DISABLE
93308: LD_INT 0
93310: PPUSH
93311: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93312: LD_ADDR_VAR 0 1
93316: PUSH
93317: LD_INT 22
93319: PUSH
93320: LD_OWVAR 2
93324: PUSH
93325: EMPTY
93326: LIST
93327: LIST
93328: PUSH
93329: LD_INT 2
93331: PUSH
93332: LD_INT 30
93334: PUSH
93335: LD_INT 0
93337: PUSH
93338: EMPTY
93339: LIST
93340: LIST
93341: PUSH
93342: LD_INT 30
93344: PUSH
93345: LD_INT 1
93347: PUSH
93348: EMPTY
93349: LIST
93350: LIST
93351: PUSH
93352: EMPTY
93353: LIST
93354: LIST
93355: LIST
93356: PUSH
93357: EMPTY
93358: LIST
93359: LIST
93360: PPUSH
93361: CALL_OW 69
93365: ST_TO_ADDR
// if not depot then
93366: LD_VAR 0 1
93370: NOT
93371: IFFALSE 93375
// exit ;
93373: GO 93449
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93375: LD_ADDR_VAR 0 2
93379: PUSH
93380: LD_VAR 0 1
93384: PUSH
93385: LD_INT 1
93387: PPUSH
93388: LD_VAR 0 1
93392: PPUSH
93393: CALL_OW 12
93397: ARRAY
93398: PPUSH
93399: CALL_OW 274
93403: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93404: LD_VAR 0 2
93408: PPUSH
93409: LD_INT 1
93411: PPUSH
93412: LD_INT 0
93414: PPUSH
93415: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93419: LD_VAR 0 2
93423: PPUSH
93424: LD_INT 2
93426: PPUSH
93427: LD_INT 0
93429: PPUSH
93430: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93434: LD_VAR 0 2
93438: PPUSH
93439: LD_INT 3
93441: PPUSH
93442: LD_INT 0
93444: PPUSH
93445: CALL_OW 277
// end ;
93449: PPOPN 2
93451: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93452: LD_EXP 88
93456: PUSH
93457: LD_EXP 116
93461: AND
93462: IFFALSE 93559
93464: GO 93466
93466: DISABLE
93467: LD_INT 0
93469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93470: LD_ADDR_VAR 0 1
93474: PUSH
93475: LD_INT 22
93477: PUSH
93478: LD_OWVAR 2
93482: PUSH
93483: EMPTY
93484: LIST
93485: LIST
93486: PUSH
93487: LD_INT 21
93489: PUSH
93490: LD_INT 1
93492: PUSH
93493: EMPTY
93494: LIST
93495: LIST
93496: PUSH
93497: LD_INT 3
93499: PUSH
93500: LD_INT 23
93502: PUSH
93503: LD_INT 0
93505: PUSH
93506: EMPTY
93507: LIST
93508: LIST
93509: PUSH
93510: EMPTY
93511: LIST
93512: LIST
93513: PUSH
93514: EMPTY
93515: LIST
93516: LIST
93517: LIST
93518: PPUSH
93519: CALL_OW 69
93523: ST_TO_ADDR
// if not tmp then
93524: LD_VAR 0 1
93528: NOT
93529: IFFALSE 93533
// exit ;
93531: GO 93559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93533: LD_VAR 0 1
93537: PUSH
93538: LD_INT 1
93540: PPUSH
93541: LD_VAR 0 1
93545: PPUSH
93546: CALL_OW 12
93550: ARRAY
93551: PPUSH
93552: LD_INT 200
93554: PPUSH
93555: CALL_OW 234
// end ;
93559: PPOPN 1
93561: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93562: LD_EXP 88
93566: PUSH
93567: LD_EXP 117
93571: AND
93572: IFFALSE 93651
93574: GO 93576
93576: DISABLE
93577: LD_INT 0
93579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93580: LD_ADDR_VAR 0 1
93584: PUSH
93585: LD_INT 22
93587: PUSH
93588: LD_OWVAR 2
93592: PUSH
93593: EMPTY
93594: LIST
93595: LIST
93596: PUSH
93597: LD_INT 21
93599: PUSH
93600: LD_INT 2
93602: PUSH
93603: EMPTY
93604: LIST
93605: LIST
93606: PUSH
93607: EMPTY
93608: LIST
93609: LIST
93610: PPUSH
93611: CALL_OW 69
93615: ST_TO_ADDR
// if not tmp then
93616: LD_VAR 0 1
93620: NOT
93621: IFFALSE 93625
// exit ;
93623: GO 93651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93625: LD_VAR 0 1
93629: PUSH
93630: LD_INT 1
93632: PPUSH
93633: LD_VAR 0 1
93637: PPUSH
93638: CALL_OW 12
93642: ARRAY
93643: PPUSH
93644: LD_INT 60
93646: PPUSH
93647: CALL_OW 234
// end ;
93651: PPOPN 1
93653: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93654: LD_EXP 88
93658: PUSH
93659: LD_EXP 118
93663: AND
93664: IFFALSE 93763
93666: GO 93668
93668: DISABLE
93669: LD_INT 0
93671: PPUSH
93672: PPUSH
// begin enable ;
93673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93674: LD_ADDR_VAR 0 1
93678: PUSH
93679: LD_INT 22
93681: PUSH
93682: LD_OWVAR 2
93686: PUSH
93687: EMPTY
93688: LIST
93689: LIST
93690: PUSH
93691: LD_INT 61
93693: PUSH
93694: EMPTY
93695: LIST
93696: PUSH
93697: LD_INT 33
93699: PUSH
93700: LD_INT 2
93702: PUSH
93703: EMPTY
93704: LIST
93705: LIST
93706: PUSH
93707: EMPTY
93708: LIST
93709: LIST
93710: LIST
93711: PPUSH
93712: CALL_OW 69
93716: ST_TO_ADDR
// if not tmp then
93717: LD_VAR 0 1
93721: NOT
93722: IFFALSE 93726
// exit ;
93724: GO 93763
// for i in tmp do
93726: LD_ADDR_VAR 0 2
93730: PUSH
93731: LD_VAR 0 1
93735: PUSH
93736: FOR_IN
93737: IFFALSE 93761
// if IsControledBy ( i ) then
93739: LD_VAR 0 2
93743: PPUSH
93744: CALL_OW 312
93748: IFFALSE 93759
// ComUnlink ( i ) ;
93750: LD_VAR 0 2
93754: PPUSH
93755: CALL_OW 136
93759: GO 93736
93761: POP
93762: POP
// end ;
93763: PPOPN 2
93765: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93766: LD_EXP 88
93770: PUSH
93771: LD_EXP 119
93775: AND
93776: IFFALSE 93916
93778: GO 93780
93780: DISABLE
93781: LD_INT 0
93783: PPUSH
93784: PPUSH
// begin ToLua ( displayPowell(); ) ;
93785: LD_STRING displayPowell();
93787: PPUSH
93788: CALL_OW 559
// uc_side := 0 ;
93792: LD_ADDR_OWVAR 20
93796: PUSH
93797: LD_INT 0
93799: ST_TO_ADDR
// uc_nation := 2 ;
93800: LD_ADDR_OWVAR 21
93804: PUSH
93805: LD_INT 2
93807: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
93808: LD_ADDR_OWVAR 37
93812: PUSH
93813: LD_INT 14
93815: ST_TO_ADDR
// vc_engine := engine_siberite ;
93816: LD_ADDR_OWVAR 39
93820: PUSH
93821: LD_INT 3
93823: ST_TO_ADDR
// vc_control := control_apeman ;
93824: LD_ADDR_OWVAR 38
93828: PUSH
93829: LD_INT 5
93831: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
93832: LD_ADDR_OWVAR 40
93836: PUSH
93837: LD_INT 29
93839: ST_TO_ADDR
// un := CreateVehicle ;
93840: LD_ADDR_VAR 0 2
93844: PUSH
93845: CALL_OW 45
93849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93850: LD_VAR 0 2
93854: PPUSH
93855: LD_INT 1
93857: PPUSH
93858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93862: LD_INT 35
93864: PPUSH
93865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93869: LD_VAR 0 2
93873: PPUSH
93874: LD_INT 22
93876: PUSH
93877: LD_OWVAR 2
93881: PUSH
93882: EMPTY
93883: LIST
93884: LIST
93885: PPUSH
93886: CALL_OW 69
93890: PPUSH
93891: LD_VAR 0 2
93895: PPUSH
93896: CALL_OW 74
93900: PPUSH
93901: CALL_OW 115
// until IsDead ( un ) ;
93905: LD_VAR 0 2
93909: PPUSH
93910: CALL_OW 301
93914: IFFALSE 93862
// end ;
93916: PPOPN 2
93918: END
// every 0 0$1 trigger StreamModeActive and sStu do
93919: LD_EXP 88
93923: PUSH
93924: LD_EXP 127
93928: AND
93929: IFFALSE 93945
93931: GO 93933
93933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
93934: LD_STRING displayStucuk();
93936: PPUSH
93937: CALL_OW 559
// ResetFog ;
93941: CALL_OW 335
// end ;
93945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
93946: LD_EXP 88
93950: PUSH
93951: LD_EXP 120
93955: AND
93956: IFFALSE 94097
93958: GO 93960
93960: DISABLE
93961: LD_INT 0
93963: PPUSH
93964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93965: LD_ADDR_VAR 0 2
93969: PUSH
93970: LD_INT 22
93972: PUSH
93973: LD_OWVAR 2
93977: PUSH
93978: EMPTY
93979: LIST
93980: LIST
93981: PUSH
93982: LD_INT 21
93984: PUSH
93985: LD_INT 1
93987: PUSH
93988: EMPTY
93989: LIST
93990: LIST
93991: PUSH
93992: EMPTY
93993: LIST
93994: LIST
93995: PPUSH
93996: CALL_OW 69
94000: ST_TO_ADDR
// if not tmp then
94001: LD_VAR 0 2
94005: NOT
94006: IFFALSE 94010
// exit ;
94008: GO 94097
// un := tmp [ rand ( 1 , tmp ) ] ;
94010: LD_ADDR_VAR 0 1
94014: PUSH
94015: LD_VAR 0 2
94019: PUSH
94020: LD_INT 1
94022: PPUSH
94023: LD_VAR 0 2
94027: PPUSH
94028: CALL_OW 12
94032: ARRAY
94033: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94034: LD_VAR 0 1
94038: PPUSH
94039: LD_INT 0
94041: PPUSH
94042: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94046: LD_VAR 0 1
94050: PPUSH
94051: LD_OWVAR 3
94055: PUSH
94056: LD_VAR 0 1
94060: DIFF
94061: PPUSH
94062: LD_VAR 0 1
94066: PPUSH
94067: CALL_OW 74
94071: PPUSH
94072: CALL_OW 115
// wait ( 0 0$20 ) ;
94076: LD_INT 700
94078: PPUSH
94079: CALL_OW 67
// SetSide ( un , your_side ) ;
94083: LD_VAR 0 1
94087: PPUSH
94088: LD_OWVAR 2
94092: PPUSH
94093: CALL_OW 235
// end ;
94097: PPOPN 2
94099: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
94100: LD_EXP 88
94104: PUSH
94105: LD_EXP 121
94109: AND
94110: IFFALSE 94216
94112: GO 94114
94114: DISABLE
94115: LD_INT 0
94117: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94118: LD_ADDR_VAR 0 1
94122: PUSH
94123: LD_INT 22
94125: PUSH
94126: LD_OWVAR 2
94130: PUSH
94131: EMPTY
94132: LIST
94133: LIST
94134: PUSH
94135: LD_INT 2
94137: PUSH
94138: LD_INT 30
94140: PUSH
94141: LD_INT 0
94143: PUSH
94144: EMPTY
94145: LIST
94146: LIST
94147: PUSH
94148: LD_INT 30
94150: PUSH
94151: LD_INT 1
94153: PUSH
94154: EMPTY
94155: LIST
94156: LIST
94157: PUSH
94158: EMPTY
94159: LIST
94160: LIST
94161: LIST
94162: PUSH
94163: EMPTY
94164: LIST
94165: LIST
94166: PPUSH
94167: CALL_OW 69
94171: ST_TO_ADDR
// if not depot then
94172: LD_VAR 0 1
94176: NOT
94177: IFFALSE 94181
// exit ;
94179: GO 94216
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
94181: LD_VAR 0 1
94185: PUSH
94186: LD_INT 1
94188: ARRAY
94189: PPUSH
94190: CALL_OW 250
94194: PPUSH
94195: LD_VAR 0 1
94199: PUSH
94200: LD_INT 1
94202: ARRAY
94203: PPUSH
94204: CALL_OW 251
94208: PPUSH
94209: LD_INT 70
94211: PPUSH
94212: CALL_OW 495
// end ;
94216: PPOPN 1
94218: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94219: LD_EXP 88
94223: PUSH
94224: LD_EXP 122
94228: AND
94229: IFFALSE 94440
94231: GO 94233
94233: DISABLE
94234: LD_INT 0
94236: PPUSH
94237: PPUSH
94238: PPUSH
94239: PPUSH
94240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94241: LD_ADDR_VAR 0 5
94245: PUSH
94246: LD_INT 22
94248: PUSH
94249: LD_OWVAR 2
94253: PUSH
94254: EMPTY
94255: LIST
94256: LIST
94257: PUSH
94258: LD_INT 21
94260: PUSH
94261: LD_INT 1
94263: PUSH
94264: EMPTY
94265: LIST
94266: LIST
94267: PUSH
94268: EMPTY
94269: LIST
94270: LIST
94271: PPUSH
94272: CALL_OW 69
94276: ST_TO_ADDR
// if not tmp then
94277: LD_VAR 0 5
94281: NOT
94282: IFFALSE 94286
// exit ;
94284: GO 94440
// for i in tmp do
94286: LD_ADDR_VAR 0 1
94290: PUSH
94291: LD_VAR 0 5
94295: PUSH
94296: FOR_IN
94297: IFFALSE 94438
// begin d := rand ( 0 , 5 ) ;
94299: LD_ADDR_VAR 0 4
94303: PUSH
94304: LD_INT 0
94306: PPUSH
94307: LD_INT 5
94309: PPUSH
94310: CALL_OW 12
94314: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94315: LD_ADDR_VAR 0 2
94319: PUSH
94320: LD_VAR 0 1
94324: PPUSH
94325: CALL_OW 250
94329: PPUSH
94330: LD_VAR 0 4
94334: PPUSH
94335: LD_INT 3
94337: PPUSH
94338: LD_INT 12
94340: PPUSH
94341: CALL_OW 12
94345: PPUSH
94346: CALL_OW 272
94350: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94351: LD_ADDR_VAR 0 3
94355: PUSH
94356: LD_VAR 0 1
94360: PPUSH
94361: CALL_OW 251
94365: PPUSH
94366: LD_VAR 0 4
94370: PPUSH
94371: LD_INT 3
94373: PPUSH
94374: LD_INT 12
94376: PPUSH
94377: CALL_OW 12
94381: PPUSH
94382: CALL_OW 273
94386: ST_TO_ADDR
// if ValidHex ( x , y ) then
94387: LD_VAR 0 2
94391: PPUSH
94392: LD_VAR 0 3
94396: PPUSH
94397: CALL_OW 488
94401: IFFALSE 94436
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94403: LD_VAR 0 1
94407: PPUSH
94408: LD_VAR 0 2
94412: PPUSH
94413: LD_VAR 0 3
94417: PPUSH
94418: LD_INT 3
94420: PPUSH
94421: LD_INT 6
94423: PPUSH
94424: CALL_OW 12
94428: PPUSH
94429: LD_INT 1
94431: PPUSH
94432: CALL_OW 483
// end ;
94436: GO 94296
94438: POP
94439: POP
// end ;
94440: PPOPN 5
94442: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94443: LD_EXP 88
94447: PUSH
94448: LD_EXP 123
94452: AND
94453: IFFALSE 94547
94455: GO 94457
94457: DISABLE
94458: LD_INT 0
94460: PPUSH
94461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94462: LD_ADDR_VAR 0 2
94466: PUSH
94467: LD_INT 22
94469: PUSH
94470: LD_OWVAR 2
94474: PUSH
94475: EMPTY
94476: LIST
94477: LIST
94478: PUSH
94479: LD_INT 32
94481: PUSH
94482: LD_INT 1
94484: PUSH
94485: EMPTY
94486: LIST
94487: LIST
94488: PUSH
94489: LD_INT 21
94491: PUSH
94492: LD_INT 2
94494: PUSH
94495: EMPTY
94496: LIST
94497: LIST
94498: PUSH
94499: EMPTY
94500: LIST
94501: LIST
94502: LIST
94503: PPUSH
94504: CALL_OW 69
94508: ST_TO_ADDR
// if not tmp then
94509: LD_VAR 0 2
94513: NOT
94514: IFFALSE 94518
// exit ;
94516: GO 94547
// for i in tmp do
94518: LD_ADDR_VAR 0 1
94522: PUSH
94523: LD_VAR 0 2
94527: PUSH
94528: FOR_IN
94529: IFFALSE 94545
// SetFuel ( i , 0 ) ;
94531: LD_VAR 0 1
94535: PPUSH
94536: LD_INT 0
94538: PPUSH
94539: CALL_OW 240
94543: GO 94528
94545: POP
94546: POP
// end ;
94547: PPOPN 2
94549: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94550: LD_EXP 88
94554: PUSH
94555: LD_EXP 124
94559: AND
94560: IFFALSE 94626
94562: GO 94564
94564: DISABLE
94565: LD_INT 0
94567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94568: LD_ADDR_VAR 0 1
94572: PUSH
94573: LD_INT 22
94575: PUSH
94576: LD_OWVAR 2
94580: PUSH
94581: EMPTY
94582: LIST
94583: LIST
94584: PUSH
94585: LD_INT 30
94587: PUSH
94588: LD_INT 29
94590: PUSH
94591: EMPTY
94592: LIST
94593: LIST
94594: PUSH
94595: EMPTY
94596: LIST
94597: LIST
94598: PPUSH
94599: CALL_OW 69
94603: ST_TO_ADDR
// if not tmp then
94604: LD_VAR 0 1
94608: NOT
94609: IFFALSE 94613
// exit ;
94611: GO 94626
// DestroyUnit ( tmp [ 1 ] ) ;
94613: LD_VAR 0 1
94617: PUSH
94618: LD_INT 1
94620: ARRAY
94621: PPUSH
94622: CALL_OW 65
// end ;
94626: PPOPN 1
94628: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94629: LD_EXP 88
94633: PUSH
94634: LD_EXP 126
94638: AND
94639: IFFALSE 94768
94641: GO 94643
94643: DISABLE
94644: LD_INT 0
94646: PPUSH
// begin uc_side := 0 ;
94647: LD_ADDR_OWVAR 20
94651: PUSH
94652: LD_INT 0
94654: ST_TO_ADDR
// uc_nation := nation_arabian ;
94655: LD_ADDR_OWVAR 21
94659: PUSH
94660: LD_INT 2
94662: ST_TO_ADDR
// hc_gallery :=  ;
94663: LD_ADDR_OWVAR 33
94667: PUSH
94668: LD_STRING 
94670: ST_TO_ADDR
// hc_name :=  ;
94671: LD_ADDR_OWVAR 26
94675: PUSH
94676: LD_STRING 
94678: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94679: LD_INT 1
94681: PPUSH
94682: LD_INT 11
94684: PPUSH
94685: LD_INT 10
94687: PPUSH
94688: CALL_OW 380
// un := CreateHuman ;
94692: LD_ADDR_VAR 0 1
94696: PUSH
94697: CALL_OW 44
94701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94702: LD_VAR 0 1
94706: PPUSH
94707: LD_INT 1
94709: PPUSH
94710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94714: LD_INT 35
94716: PPUSH
94717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94721: LD_VAR 0 1
94725: PPUSH
94726: LD_INT 22
94728: PUSH
94729: LD_OWVAR 2
94733: PUSH
94734: EMPTY
94735: LIST
94736: LIST
94737: PPUSH
94738: CALL_OW 69
94742: PPUSH
94743: LD_VAR 0 1
94747: PPUSH
94748: CALL_OW 74
94752: PPUSH
94753: CALL_OW 115
// until IsDead ( un ) ;
94757: LD_VAR 0 1
94761: PPUSH
94762: CALL_OW 301
94766: IFFALSE 94714
// end ;
94768: PPOPN 1
94770: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94771: LD_EXP 88
94775: PUSH
94776: LD_EXP 128
94780: AND
94781: IFFALSE 94793
94783: GO 94785
94785: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
94786: LD_STRING earthquake(getX(game), 0, 32)
94788: PPUSH
94789: CALL_OW 559
94793: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
94794: LD_EXP 88
94798: PUSH
94799: LD_EXP 129
94803: AND
94804: IFFALSE 94895
94806: GO 94808
94808: DISABLE
94809: LD_INT 0
94811: PPUSH
// begin enable ;
94812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
94813: LD_ADDR_VAR 0 1
94817: PUSH
94818: LD_INT 22
94820: PUSH
94821: LD_OWVAR 2
94825: PUSH
94826: EMPTY
94827: LIST
94828: LIST
94829: PUSH
94830: LD_INT 21
94832: PUSH
94833: LD_INT 2
94835: PUSH
94836: EMPTY
94837: LIST
94838: LIST
94839: PUSH
94840: LD_INT 33
94842: PUSH
94843: LD_INT 3
94845: PUSH
94846: EMPTY
94847: LIST
94848: LIST
94849: PUSH
94850: EMPTY
94851: LIST
94852: LIST
94853: LIST
94854: PPUSH
94855: CALL_OW 69
94859: ST_TO_ADDR
// if not tmp then
94860: LD_VAR 0 1
94864: NOT
94865: IFFALSE 94869
// exit ;
94867: GO 94895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94869: LD_VAR 0 1
94873: PUSH
94874: LD_INT 1
94876: PPUSH
94877: LD_VAR 0 1
94881: PPUSH
94882: CALL_OW 12
94886: ARRAY
94887: PPUSH
94888: LD_INT 1
94890: PPUSH
94891: CALL_OW 234
// end ;
94895: PPOPN 1
94897: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
94898: LD_EXP 88
94902: PUSH
94903: LD_EXP 130
94907: AND
94908: IFFALSE 95049
94910: GO 94912
94912: DISABLE
94913: LD_INT 0
94915: PPUSH
94916: PPUSH
94917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94918: LD_ADDR_VAR 0 3
94922: PUSH
94923: LD_INT 22
94925: PUSH
94926: LD_OWVAR 2
94930: PUSH
94931: EMPTY
94932: LIST
94933: LIST
94934: PUSH
94935: LD_INT 25
94937: PUSH
94938: LD_INT 1
94940: PUSH
94941: EMPTY
94942: LIST
94943: LIST
94944: PUSH
94945: EMPTY
94946: LIST
94947: LIST
94948: PPUSH
94949: CALL_OW 69
94953: ST_TO_ADDR
// if not tmp then
94954: LD_VAR 0 3
94958: NOT
94959: IFFALSE 94963
// exit ;
94961: GO 95049
// un := tmp [ rand ( 1 , tmp ) ] ;
94963: LD_ADDR_VAR 0 2
94967: PUSH
94968: LD_VAR 0 3
94972: PUSH
94973: LD_INT 1
94975: PPUSH
94976: LD_VAR 0 3
94980: PPUSH
94981: CALL_OW 12
94985: ARRAY
94986: ST_TO_ADDR
// if Crawls ( un ) then
94987: LD_VAR 0 2
94991: PPUSH
94992: CALL_OW 318
94996: IFFALSE 95007
// ComWalk ( un ) ;
94998: LD_VAR 0 2
95002: PPUSH
95003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
95007: LD_VAR 0 2
95011: PPUSH
95012: LD_INT 9
95014: PPUSH
95015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95019: LD_INT 28
95021: PPUSH
95022: LD_OWVAR 2
95026: PPUSH
95027: LD_INT 2
95029: PPUSH
95030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95034: LD_INT 29
95036: PPUSH
95037: LD_OWVAR 2
95041: PPUSH
95042: LD_INT 2
95044: PPUSH
95045: CALL_OW 322
// end ;
95049: PPOPN 3
95051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
95052: LD_EXP 88
95056: PUSH
95057: LD_EXP 131
95061: AND
95062: IFFALSE 95173
95064: GO 95066
95066: DISABLE
95067: LD_INT 0
95069: PPUSH
95070: PPUSH
95071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95072: LD_ADDR_VAR 0 3
95076: PUSH
95077: LD_INT 22
95079: PUSH
95080: LD_OWVAR 2
95084: PUSH
95085: EMPTY
95086: LIST
95087: LIST
95088: PUSH
95089: LD_INT 25
95091: PUSH
95092: LD_INT 1
95094: PUSH
95095: EMPTY
95096: LIST
95097: LIST
95098: PUSH
95099: EMPTY
95100: LIST
95101: LIST
95102: PPUSH
95103: CALL_OW 69
95107: ST_TO_ADDR
// if not tmp then
95108: LD_VAR 0 3
95112: NOT
95113: IFFALSE 95117
// exit ;
95115: GO 95173
// un := tmp [ rand ( 1 , tmp ) ] ;
95117: LD_ADDR_VAR 0 2
95121: PUSH
95122: LD_VAR 0 3
95126: PUSH
95127: LD_INT 1
95129: PPUSH
95130: LD_VAR 0 3
95134: PPUSH
95135: CALL_OW 12
95139: ARRAY
95140: ST_TO_ADDR
// if Crawls ( un ) then
95141: LD_VAR 0 2
95145: PPUSH
95146: CALL_OW 318
95150: IFFALSE 95161
// ComWalk ( un ) ;
95152: LD_VAR 0 2
95156: PPUSH
95157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95161: LD_VAR 0 2
95165: PPUSH
95166: LD_INT 8
95168: PPUSH
95169: CALL_OW 336
// end ;
95173: PPOPN 3
95175: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
95176: LD_EXP 88
95180: PUSH
95181: LD_EXP 132
95185: AND
95186: IFFALSE 95330
95188: GO 95190
95190: DISABLE
95191: LD_INT 0
95193: PPUSH
95194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95195: LD_ADDR_VAR 0 2
95199: PUSH
95200: LD_INT 22
95202: PUSH
95203: LD_OWVAR 2
95207: PUSH
95208: EMPTY
95209: LIST
95210: LIST
95211: PUSH
95212: LD_INT 21
95214: PUSH
95215: LD_INT 2
95217: PUSH
95218: EMPTY
95219: LIST
95220: LIST
95221: PUSH
95222: LD_INT 2
95224: PUSH
95225: LD_INT 34
95227: PUSH
95228: LD_INT 12
95230: PUSH
95231: EMPTY
95232: LIST
95233: LIST
95234: PUSH
95235: LD_INT 34
95237: PUSH
95238: LD_INT 51
95240: PUSH
95241: EMPTY
95242: LIST
95243: LIST
95244: PUSH
95245: LD_INT 34
95247: PUSH
95248: LD_INT 32
95250: PUSH
95251: EMPTY
95252: LIST
95253: LIST
95254: PUSH
95255: EMPTY
95256: LIST
95257: LIST
95258: LIST
95259: LIST
95260: PUSH
95261: EMPTY
95262: LIST
95263: LIST
95264: LIST
95265: PPUSH
95266: CALL_OW 69
95270: ST_TO_ADDR
// if not tmp then
95271: LD_VAR 0 2
95275: NOT
95276: IFFALSE 95280
// exit ;
95278: GO 95330
// for i in tmp do
95280: LD_ADDR_VAR 0 1
95284: PUSH
95285: LD_VAR 0 2
95289: PUSH
95290: FOR_IN
95291: IFFALSE 95328
// if GetCargo ( i , mat_artifact ) = 0 then
95293: LD_VAR 0 1
95297: PPUSH
95298: LD_INT 4
95300: PPUSH
95301: CALL_OW 289
95305: PUSH
95306: LD_INT 0
95308: EQUAL
95309: IFFALSE 95326
// SetCargo ( i , mat_siberit , 100 ) ;
95311: LD_VAR 0 1
95315: PPUSH
95316: LD_INT 3
95318: PPUSH
95319: LD_INT 100
95321: PPUSH
95322: CALL_OW 290
95326: GO 95290
95328: POP
95329: POP
// end ;
95330: PPOPN 2
95332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95333: LD_EXP 88
95337: PUSH
95338: LD_EXP 133
95342: AND
95343: IFFALSE 95526
95345: GO 95347
95347: DISABLE
95348: LD_INT 0
95350: PPUSH
95351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95352: LD_ADDR_VAR 0 2
95356: PUSH
95357: LD_INT 22
95359: PUSH
95360: LD_OWVAR 2
95364: PUSH
95365: EMPTY
95366: LIST
95367: LIST
95368: PPUSH
95369: CALL_OW 69
95373: ST_TO_ADDR
// if not tmp then
95374: LD_VAR 0 2
95378: NOT
95379: IFFALSE 95383
// exit ;
95381: GO 95526
// for i := 1 to 2 do
95383: LD_ADDR_VAR 0 1
95387: PUSH
95388: DOUBLE
95389: LD_INT 1
95391: DEC
95392: ST_TO_ADDR
95393: LD_INT 2
95395: PUSH
95396: FOR_TO
95397: IFFALSE 95524
// begin uc_side := your_side ;
95399: LD_ADDR_OWVAR 20
95403: PUSH
95404: LD_OWVAR 2
95408: ST_TO_ADDR
// uc_nation := nation_american ;
95409: LD_ADDR_OWVAR 21
95413: PUSH
95414: LD_INT 1
95416: ST_TO_ADDR
// vc_chassis := us_morphling ;
95417: LD_ADDR_OWVAR 37
95421: PUSH
95422: LD_INT 5
95424: ST_TO_ADDR
// vc_engine := engine_siberite ;
95425: LD_ADDR_OWVAR 39
95429: PUSH
95430: LD_INT 3
95432: ST_TO_ADDR
// vc_control := control_computer ;
95433: LD_ADDR_OWVAR 38
95437: PUSH
95438: LD_INT 3
95440: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95441: LD_ADDR_OWVAR 40
95445: PUSH
95446: LD_INT 10
95448: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
95449: LD_VAR 0 2
95453: PUSH
95454: LD_INT 1
95456: ARRAY
95457: PPUSH
95458: CALL_OW 310
95462: NOT
95463: IFFALSE 95510
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
95465: CALL_OW 45
95469: PPUSH
95470: LD_VAR 0 2
95474: PUSH
95475: LD_INT 1
95477: ARRAY
95478: PPUSH
95479: CALL_OW 250
95483: PPUSH
95484: LD_VAR 0 2
95488: PUSH
95489: LD_INT 1
95491: ARRAY
95492: PPUSH
95493: CALL_OW 251
95497: PPUSH
95498: LD_INT 12
95500: PPUSH
95501: LD_INT 1
95503: PPUSH
95504: CALL_OW 50
95508: GO 95522
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
95510: CALL_OW 45
95514: PPUSH
95515: LD_INT 1
95517: PPUSH
95518: CALL_OW 51
// end ;
95522: GO 95396
95524: POP
95525: POP
// end ;
95526: PPOPN 2
95528: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95529: LD_EXP 88
95533: PUSH
95534: LD_EXP 134
95538: AND
95539: IFFALSE 95761
95541: GO 95543
95543: DISABLE
95544: LD_INT 0
95546: PPUSH
95547: PPUSH
95548: PPUSH
95549: PPUSH
95550: PPUSH
95551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95552: LD_ADDR_VAR 0 6
95556: PUSH
95557: LD_INT 22
95559: PUSH
95560: LD_OWVAR 2
95564: PUSH
95565: EMPTY
95566: LIST
95567: LIST
95568: PUSH
95569: LD_INT 21
95571: PUSH
95572: LD_INT 1
95574: PUSH
95575: EMPTY
95576: LIST
95577: LIST
95578: PUSH
95579: LD_INT 3
95581: PUSH
95582: LD_INT 23
95584: PUSH
95585: LD_INT 0
95587: PUSH
95588: EMPTY
95589: LIST
95590: LIST
95591: PUSH
95592: EMPTY
95593: LIST
95594: LIST
95595: PUSH
95596: EMPTY
95597: LIST
95598: LIST
95599: LIST
95600: PPUSH
95601: CALL_OW 69
95605: ST_TO_ADDR
// if not tmp then
95606: LD_VAR 0 6
95610: NOT
95611: IFFALSE 95615
// exit ;
95613: GO 95761
// s1 := rand ( 1 , 4 ) ;
95615: LD_ADDR_VAR 0 2
95619: PUSH
95620: LD_INT 1
95622: PPUSH
95623: LD_INT 4
95625: PPUSH
95626: CALL_OW 12
95630: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95631: LD_ADDR_VAR 0 4
95635: PUSH
95636: LD_VAR 0 6
95640: PUSH
95641: LD_INT 1
95643: ARRAY
95644: PPUSH
95645: LD_VAR 0 2
95649: PPUSH
95650: CALL_OW 259
95654: ST_TO_ADDR
// if s1 = 1 then
95655: LD_VAR 0 2
95659: PUSH
95660: LD_INT 1
95662: EQUAL
95663: IFFALSE 95683
// s2 := rand ( 2 , 4 ) else
95665: LD_ADDR_VAR 0 3
95669: PUSH
95670: LD_INT 2
95672: PPUSH
95673: LD_INT 4
95675: PPUSH
95676: CALL_OW 12
95680: ST_TO_ADDR
95681: GO 95691
// s2 := 1 ;
95683: LD_ADDR_VAR 0 3
95687: PUSH
95688: LD_INT 1
95690: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95691: LD_ADDR_VAR 0 5
95695: PUSH
95696: LD_VAR 0 6
95700: PUSH
95701: LD_INT 1
95703: ARRAY
95704: PPUSH
95705: LD_VAR 0 3
95709: PPUSH
95710: CALL_OW 259
95714: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95715: LD_VAR 0 6
95719: PUSH
95720: LD_INT 1
95722: ARRAY
95723: PPUSH
95724: LD_VAR 0 2
95728: PPUSH
95729: LD_VAR 0 5
95733: PPUSH
95734: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95738: LD_VAR 0 6
95742: PUSH
95743: LD_INT 1
95745: ARRAY
95746: PPUSH
95747: LD_VAR 0 3
95751: PPUSH
95752: LD_VAR 0 4
95756: PPUSH
95757: CALL_OW 237
// end ;
95761: PPOPN 6
95763: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95764: LD_EXP 88
95768: PUSH
95769: LD_EXP 135
95773: AND
95774: IFFALSE 95853
95776: GO 95778
95778: DISABLE
95779: LD_INT 0
95781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
95782: LD_ADDR_VAR 0 1
95786: PUSH
95787: LD_INT 22
95789: PUSH
95790: LD_OWVAR 2
95794: PUSH
95795: EMPTY
95796: LIST
95797: LIST
95798: PUSH
95799: LD_INT 30
95801: PUSH
95802: LD_INT 3
95804: PUSH
95805: EMPTY
95806: LIST
95807: LIST
95808: PUSH
95809: EMPTY
95810: LIST
95811: LIST
95812: PPUSH
95813: CALL_OW 69
95817: ST_TO_ADDR
// if not tmp then
95818: LD_VAR 0 1
95822: NOT
95823: IFFALSE 95827
// exit ;
95825: GO 95853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95827: LD_VAR 0 1
95831: PUSH
95832: LD_INT 1
95834: PPUSH
95835: LD_VAR 0 1
95839: PPUSH
95840: CALL_OW 12
95844: ARRAY
95845: PPUSH
95846: LD_INT 1
95848: PPUSH
95849: CALL_OW 234
// end ;
95853: PPOPN 1
95855: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
95856: LD_EXP 88
95860: PUSH
95861: LD_EXP 136
95865: AND
95866: IFFALSE 95978
95868: GO 95870
95870: DISABLE
95871: LD_INT 0
95873: PPUSH
95874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
95875: LD_ADDR_VAR 0 2
95879: PUSH
95880: LD_INT 22
95882: PUSH
95883: LD_OWVAR 2
95887: PUSH
95888: EMPTY
95889: LIST
95890: LIST
95891: PUSH
95892: LD_INT 2
95894: PUSH
95895: LD_INT 30
95897: PUSH
95898: LD_INT 27
95900: PUSH
95901: EMPTY
95902: LIST
95903: LIST
95904: PUSH
95905: LD_INT 30
95907: PUSH
95908: LD_INT 26
95910: PUSH
95911: EMPTY
95912: LIST
95913: LIST
95914: PUSH
95915: LD_INT 30
95917: PUSH
95918: LD_INT 28
95920: PUSH
95921: EMPTY
95922: LIST
95923: LIST
95924: PUSH
95925: EMPTY
95926: LIST
95927: LIST
95928: LIST
95929: LIST
95930: PUSH
95931: EMPTY
95932: LIST
95933: LIST
95934: PPUSH
95935: CALL_OW 69
95939: ST_TO_ADDR
// if not tmp then
95940: LD_VAR 0 2
95944: NOT
95945: IFFALSE 95949
// exit ;
95947: GO 95978
// for i in tmp do
95949: LD_ADDR_VAR 0 1
95953: PUSH
95954: LD_VAR 0 2
95958: PUSH
95959: FOR_IN
95960: IFFALSE 95976
// SetLives ( i , 1 ) ;
95962: LD_VAR 0 1
95966: PPUSH
95967: LD_INT 1
95969: PPUSH
95970: CALL_OW 234
95974: GO 95959
95976: POP
95977: POP
// end ;
95978: PPOPN 2
95980: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
95981: LD_EXP 88
95985: PUSH
95986: LD_EXP 137
95990: AND
95991: IFFALSE 96265
95993: GO 95995
95995: DISABLE
95996: LD_INT 0
95998: PPUSH
95999: PPUSH
96000: PPUSH
// begin i := rand ( 1 , 7 ) ;
96001: LD_ADDR_VAR 0 1
96005: PUSH
96006: LD_INT 1
96008: PPUSH
96009: LD_INT 7
96011: PPUSH
96012: CALL_OW 12
96016: ST_TO_ADDR
// case i of 1 :
96017: LD_VAR 0 1
96021: PUSH
96022: LD_INT 1
96024: DOUBLE
96025: EQUAL
96026: IFTRUE 96030
96028: GO 96040
96030: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96031: LD_STRING earthquake(getX(game), 0, 32)
96033: PPUSH
96034: CALL_OW 559
96038: GO 96265
96040: LD_INT 2
96042: DOUBLE
96043: EQUAL
96044: IFTRUE 96048
96046: GO 96062
96048: POP
// begin ToLua ( displayStucuk(); ) ;
96049: LD_STRING displayStucuk();
96051: PPUSH
96052: CALL_OW 559
// ResetFog ;
96056: CALL_OW 335
// end ; 3 :
96060: GO 96265
96062: LD_INT 3
96064: DOUBLE
96065: EQUAL
96066: IFTRUE 96070
96068: GO 96174
96070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96071: LD_ADDR_VAR 0 2
96075: PUSH
96076: LD_INT 22
96078: PUSH
96079: LD_OWVAR 2
96083: PUSH
96084: EMPTY
96085: LIST
96086: LIST
96087: PUSH
96088: LD_INT 25
96090: PUSH
96091: LD_INT 1
96093: PUSH
96094: EMPTY
96095: LIST
96096: LIST
96097: PUSH
96098: EMPTY
96099: LIST
96100: LIST
96101: PPUSH
96102: CALL_OW 69
96106: ST_TO_ADDR
// if not tmp then
96107: LD_VAR 0 2
96111: NOT
96112: IFFALSE 96116
// exit ;
96114: GO 96265
// un := tmp [ rand ( 1 , tmp ) ] ;
96116: LD_ADDR_VAR 0 3
96120: PUSH
96121: LD_VAR 0 2
96125: PUSH
96126: LD_INT 1
96128: PPUSH
96129: LD_VAR 0 2
96133: PPUSH
96134: CALL_OW 12
96138: ARRAY
96139: ST_TO_ADDR
// if Crawls ( un ) then
96140: LD_VAR 0 3
96144: PPUSH
96145: CALL_OW 318
96149: IFFALSE 96160
// ComWalk ( un ) ;
96151: LD_VAR 0 3
96155: PPUSH
96156: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96160: LD_VAR 0 3
96164: PPUSH
96165: LD_INT 8
96167: PPUSH
96168: CALL_OW 336
// end ; 4 :
96172: GO 96265
96174: LD_INT 4
96176: DOUBLE
96177: EQUAL
96178: IFTRUE 96182
96180: GO 96243
96182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96183: LD_ADDR_VAR 0 2
96187: PUSH
96188: LD_INT 22
96190: PUSH
96191: LD_OWVAR 2
96195: PUSH
96196: EMPTY
96197: LIST
96198: LIST
96199: PUSH
96200: LD_INT 30
96202: PUSH
96203: LD_INT 29
96205: PUSH
96206: EMPTY
96207: LIST
96208: LIST
96209: PUSH
96210: EMPTY
96211: LIST
96212: LIST
96213: PPUSH
96214: CALL_OW 69
96218: ST_TO_ADDR
// if not tmp then
96219: LD_VAR 0 2
96223: NOT
96224: IFFALSE 96228
// exit ;
96226: GO 96265
// DestroyUnit ( tmp [ 1 ] ) ;
96228: LD_VAR 0 2
96232: PUSH
96233: LD_INT 1
96235: ARRAY
96236: PPUSH
96237: CALL_OW 65
// end ; 5 .. 7 :
96241: GO 96265
96243: LD_INT 5
96245: DOUBLE
96246: GREATEREQUAL
96247: IFFALSE 96255
96249: LD_INT 7
96251: DOUBLE
96252: LESSEQUAL
96253: IFTRUE 96257
96255: GO 96264
96257: POP
// StreamSibBomb ; end ;
96258: CALL 92515 0 0
96262: GO 96265
96264: POP
// end ;
96265: PPOPN 3
96267: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96268: LD_EXP 88
96272: PUSH
96273: LD_EXP 138
96277: AND
96278: IFFALSE 96434
96280: GO 96282
96282: DISABLE
96283: LD_INT 0
96285: PPUSH
96286: PPUSH
96287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96288: LD_ADDR_VAR 0 2
96292: PUSH
96293: LD_INT 81
96295: PUSH
96296: LD_OWVAR 2
96300: PUSH
96301: EMPTY
96302: LIST
96303: LIST
96304: PUSH
96305: LD_INT 2
96307: PUSH
96308: LD_INT 21
96310: PUSH
96311: LD_INT 1
96313: PUSH
96314: EMPTY
96315: LIST
96316: LIST
96317: PUSH
96318: LD_INT 21
96320: PUSH
96321: LD_INT 2
96323: PUSH
96324: EMPTY
96325: LIST
96326: LIST
96327: PUSH
96328: EMPTY
96329: LIST
96330: LIST
96331: LIST
96332: PUSH
96333: EMPTY
96334: LIST
96335: LIST
96336: PPUSH
96337: CALL_OW 69
96341: ST_TO_ADDR
// if not tmp then
96342: LD_VAR 0 2
96346: NOT
96347: IFFALSE 96351
// exit ;
96349: GO 96434
// p := 0 ;
96351: LD_ADDR_VAR 0 3
96355: PUSH
96356: LD_INT 0
96358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96359: LD_INT 35
96361: PPUSH
96362: CALL_OW 67
// p := p + 1 ;
96366: LD_ADDR_VAR 0 3
96370: PUSH
96371: LD_VAR 0 3
96375: PUSH
96376: LD_INT 1
96378: PLUS
96379: ST_TO_ADDR
// for i in tmp do
96380: LD_ADDR_VAR 0 1
96384: PUSH
96385: LD_VAR 0 2
96389: PUSH
96390: FOR_IN
96391: IFFALSE 96422
// if GetLives ( i ) < 1000 then
96393: LD_VAR 0 1
96397: PPUSH
96398: CALL_OW 256
96402: PUSH
96403: LD_INT 1000
96405: LESS
96406: IFFALSE 96420
// SetLives ( i , 1000 ) ;
96408: LD_VAR 0 1
96412: PPUSH
96413: LD_INT 1000
96415: PPUSH
96416: CALL_OW 234
96420: GO 96390
96422: POP
96423: POP
// until p > 20 ;
96424: LD_VAR 0 3
96428: PUSH
96429: LD_INT 20
96431: GREATER
96432: IFFALSE 96359
// end ;
96434: PPOPN 3
96436: END
// every 0 0$1 trigger StreamModeActive and sTime do
96437: LD_EXP 88
96441: PUSH
96442: LD_EXP 139
96446: AND
96447: IFFALSE 96482
96449: GO 96451
96451: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96452: LD_INT 28
96454: PPUSH
96455: LD_OWVAR 2
96459: PPUSH
96460: LD_INT 2
96462: PPUSH
96463: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96467: LD_INT 30
96469: PPUSH
96470: LD_OWVAR 2
96474: PPUSH
96475: LD_INT 2
96477: PPUSH
96478: CALL_OW 322
// end ;
96482: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96483: LD_EXP 88
96487: PUSH
96488: LD_EXP 140
96492: AND
96493: IFFALSE 96614
96495: GO 96497
96497: DISABLE
96498: LD_INT 0
96500: PPUSH
96501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96502: LD_ADDR_VAR 0 2
96506: PUSH
96507: LD_INT 22
96509: PUSH
96510: LD_OWVAR 2
96514: PUSH
96515: EMPTY
96516: LIST
96517: LIST
96518: PUSH
96519: LD_INT 21
96521: PUSH
96522: LD_INT 1
96524: PUSH
96525: EMPTY
96526: LIST
96527: LIST
96528: PUSH
96529: LD_INT 3
96531: PUSH
96532: LD_INT 23
96534: PUSH
96535: LD_INT 0
96537: PUSH
96538: EMPTY
96539: LIST
96540: LIST
96541: PUSH
96542: EMPTY
96543: LIST
96544: LIST
96545: PUSH
96546: EMPTY
96547: LIST
96548: LIST
96549: LIST
96550: PPUSH
96551: CALL_OW 69
96555: ST_TO_ADDR
// if not tmp then
96556: LD_VAR 0 2
96560: NOT
96561: IFFALSE 96565
// exit ;
96563: GO 96614
// for i in tmp do
96565: LD_ADDR_VAR 0 1
96569: PUSH
96570: LD_VAR 0 2
96574: PUSH
96575: FOR_IN
96576: IFFALSE 96612
// begin if Crawls ( i ) then
96578: LD_VAR 0 1
96582: PPUSH
96583: CALL_OW 318
96587: IFFALSE 96598
// ComWalk ( i ) ;
96589: LD_VAR 0 1
96593: PPUSH
96594: CALL_OW 138
// SetClass ( i , 2 ) ;
96598: LD_VAR 0 1
96602: PPUSH
96603: LD_INT 2
96605: PPUSH
96606: CALL_OW 336
// end ;
96610: GO 96575
96612: POP
96613: POP
// end ;
96614: PPOPN 2
96616: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96617: LD_EXP 88
96621: PUSH
96622: LD_EXP 141
96626: AND
96627: IFFALSE 96908
96629: GO 96631
96631: DISABLE
96632: LD_INT 0
96634: PPUSH
96635: PPUSH
96636: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96637: LD_OWVAR 2
96641: PPUSH
96642: LD_INT 9
96644: PPUSH
96645: LD_INT 1
96647: PPUSH
96648: LD_INT 1
96650: PPUSH
96651: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96655: LD_INT 9
96657: PPUSH
96658: LD_OWVAR 2
96662: PPUSH
96663: CALL_OW 343
// uc_side := 9 ;
96667: LD_ADDR_OWVAR 20
96671: PUSH
96672: LD_INT 9
96674: ST_TO_ADDR
// uc_nation := 2 ;
96675: LD_ADDR_OWVAR 21
96679: PUSH
96680: LD_INT 2
96682: ST_TO_ADDR
// hc_name := Dark Warrior ;
96683: LD_ADDR_OWVAR 26
96687: PUSH
96688: LD_STRING Dark Warrior
96690: ST_TO_ADDR
// hc_gallery :=  ;
96691: LD_ADDR_OWVAR 33
96695: PUSH
96696: LD_STRING 
96698: ST_TO_ADDR
// hc_noskilllimit := true ;
96699: LD_ADDR_OWVAR 76
96703: PUSH
96704: LD_INT 1
96706: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96707: LD_ADDR_OWVAR 31
96711: PUSH
96712: LD_INT 30
96714: PUSH
96715: LD_INT 30
96717: PUSH
96718: LD_INT 30
96720: PUSH
96721: LD_INT 30
96723: PUSH
96724: EMPTY
96725: LIST
96726: LIST
96727: LIST
96728: LIST
96729: ST_TO_ADDR
// un := CreateHuman ;
96730: LD_ADDR_VAR 0 3
96734: PUSH
96735: CALL_OW 44
96739: ST_TO_ADDR
// hc_noskilllimit := false ;
96740: LD_ADDR_OWVAR 76
96744: PUSH
96745: LD_INT 0
96747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96748: LD_VAR 0 3
96752: PPUSH
96753: LD_INT 1
96755: PPUSH
96756: CALL_OW 51
// p := 0 ;
96760: LD_ADDR_VAR 0 2
96764: PUSH
96765: LD_INT 0
96767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96768: LD_INT 35
96770: PPUSH
96771: CALL_OW 67
// p := p + 1 ;
96775: LD_ADDR_VAR 0 2
96779: PUSH
96780: LD_VAR 0 2
96784: PUSH
96785: LD_INT 1
96787: PLUS
96788: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
96789: LD_VAR 0 3
96793: PPUSH
96794: CALL_OW 256
96798: PUSH
96799: LD_INT 1000
96801: LESS
96802: IFFALSE 96816
// SetLives ( un , 1000 ) ;
96804: LD_VAR 0 3
96808: PPUSH
96809: LD_INT 1000
96811: PPUSH
96812: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
96816: LD_VAR 0 3
96820: PPUSH
96821: LD_INT 81
96823: PUSH
96824: LD_OWVAR 2
96828: PUSH
96829: EMPTY
96830: LIST
96831: LIST
96832: PUSH
96833: LD_INT 91
96835: PUSH
96836: LD_VAR 0 3
96840: PUSH
96841: LD_INT 30
96843: PUSH
96844: EMPTY
96845: LIST
96846: LIST
96847: LIST
96848: PUSH
96849: EMPTY
96850: LIST
96851: LIST
96852: PPUSH
96853: CALL_OW 69
96857: PPUSH
96858: LD_VAR 0 3
96862: PPUSH
96863: CALL_OW 74
96867: PPUSH
96868: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
96872: LD_VAR 0 2
96876: PUSH
96877: LD_INT 60
96879: GREATER
96880: PUSH
96881: LD_VAR 0 3
96885: PPUSH
96886: CALL_OW 301
96890: OR
96891: IFFALSE 96768
// if un then
96893: LD_VAR 0 3
96897: IFFALSE 96908
// RemoveUnit ( un ) ;
96899: LD_VAR 0 3
96903: PPUSH
96904: CALL_OW 64
// end ; end_of_file
96908: PPOPN 3
96910: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
96911: LD_INT 0
96913: PPUSH
96914: PPUSH
96915: PPUSH
96916: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
96917: LD_VAR 0 1
96921: PPUSH
96922: CALL_OW 264
96926: PUSH
96927: LD_EXP 33
96931: EQUAL
96932: IFFALSE 97004
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
96934: LD_INT 68
96936: PPUSH
96937: LD_VAR 0 1
96941: PPUSH
96942: CALL_OW 255
96946: PPUSH
96947: CALL_OW 321
96951: PUSH
96952: LD_INT 2
96954: EQUAL
96955: IFFALSE 96967
// eff := 70 else
96957: LD_ADDR_VAR 0 4
96961: PUSH
96962: LD_INT 70
96964: ST_TO_ADDR
96965: GO 96975
// eff := 30 ;
96967: LD_ADDR_VAR 0 4
96971: PUSH
96972: LD_INT 30
96974: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
96975: LD_VAR 0 1
96979: PPUSH
96980: CALL_OW 250
96984: PPUSH
96985: LD_VAR 0 1
96989: PPUSH
96990: CALL_OW 251
96994: PPUSH
96995: LD_VAR 0 4
96999: PPUSH
97000: CALL_OW 495
// end ; end ;
97004: LD_VAR 0 2
97008: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
97009: LD_INT 0
97011: PPUSH
// end ;
97012: LD_VAR 0 4
97016: RET
// export function SOS_Command ( cmd ) ; begin
97017: LD_INT 0
97019: PPUSH
// end ;
97020: LD_VAR 0 2
97024: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
97025: LD_VAR 0 1
97029: PUSH
97030: LD_INT 254
97032: EQUAL
97033: PUSH
97034: LD_VAR 0 2
97038: PPUSH
97039: CALL_OW 264
97043: PUSH
97044: LD_EXP 31
97048: EQUAL
97049: AND
97050: PUSH
97051: LD_VAR 0 3
97055: PPUSH
97056: CALL_OW 263
97060: PUSH
97061: LD_INT 3
97063: EQUAL
97064: AND
97065: IFFALSE 97076
// DestroyUnit ( selectedUnit ) ;
97067: LD_VAR 0 3
97071: PPUSH
97072: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
97076: LD_VAR 0 1
97080: PUSH
97081: LD_INT 255
97083: EQUAL
97084: PUSH
97085: LD_VAR 0 2
97089: PPUSH
97090: CALL_OW 264
97094: PUSH
97095: LD_INT 14
97097: PUSH
97098: LD_INT 53
97100: PUSH
97101: EMPTY
97102: LIST
97103: LIST
97104: IN
97105: AND
97106: PUSH
97107: LD_VAR 0 4
97111: PPUSH
97112: LD_VAR 0 5
97116: PPUSH
97117: CALL_OW 488
97121: AND
97122: IFFALSE 97146
// CutTreeXYR ( unit , x , y , 12 ) ;
97124: LD_VAR 0 2
97128: PPUSH
97129: LD_VAR 0 4
97133: PPUSH
97134: LD_VAR 0 5
97138: PPUSH
97139: LD_INT 12
97141: PPUSH
97142: CALL 97149 0 4
// end ;
97146: PPOPN 5
97148: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
97149: LD_INT 0
97151: PPUSH
97152: PPUSH
97153: PPUSH
97154: PPUSH
97155: PPUSH
97156: PPUSH
97157: PPUSH
97158: PPUSH
97159: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
97160: LD_VAR 0 1
97164: NOT
97165: PUSH
97166: LD_VAR 0 2
97170: PPUSH
97171: LD_VAR 0 3
97175: PPUSH
97176: CALL_OW 488
97180: NOT
97181: OR
97182: PUSH
97183: LD_VAR 0 4
97187: NOT
97188: OR
97189: IFFALSE 97193
// exit ;
97191: GO 97533
// list := [ ] ;
97193: LD_ADDR_VAR 0 13
97197: PUSH
97198: EMPTY
97199: ST_TO_ADDR
// if x - r < 0 then
97200: LD_VAR 0 2
97204: PUSH
97205: LD_VAR 0 4
97209: MINUS
97210: PUSH
97211: LD_INT 0
97213: LESS
97214: IFFALSE 97226
// min_x := 0 else
97216: LD_ADDR_VAR 0 7
97220: PUSH
97221: LD_INT 0
97223: ST_TO_ADDR
97224: GO 97242
// min_x := x - r ;
97226: LD_ADDR_VAR 0 7
97230: PUSH
97231: LD_VAR 0 2
97235: PUSH
97236: LD_VAR 0 4
97240: MINUS
97241: ST_TO_ADDR
// if y - r < 0 then
97242: LD_VAR 0 3
97246: PUSH
97247: LD_VAR 0 4
97251: MINUS
97252: PUSH
97253: LD_INT 0
97255: LESS
97256: IFFALSE 97268
// min_y := 0 else
97258: LD_ADDR_VAR 0 8
97262: PUSH
97263: LD_INT 0
97265: ST_TO_ADDR
97266: GO 97284
// min_y := y - r ;
97268: LD_ADDR_VAR 0 8
97272: PUSH
97273: LD_VAR 0 3
97277: PUSH
97278: LD_VAR 0 4
97282: MINUS
97283: ST_TO_ADDR
// max_x := x + r ;
97284: LD_ADDR_VAR 0 9
97288: PUSH
97289: LD_VAR 0 2
97293: PUSH
97294: LD_VAR 0 4
97298: PLUS
97299: ST_TO_ADDR
// max_y := y + r ;
97300: LD_ADDR_VAR 0 10
97304: PUSH
97305: LD_VAR 0 3
97309: PUSH
97310: LD_VAR 0 4
97314: PLUS
97315: ST_TO_ADDR
// for _x = min_x to max_x do
97316: LD_ADDR_VAR 0 11
97320: PUSH
97321: DOUBLE
97322: LD_VAR 0 7
97326: DEC
97327: ST_TO_ADDR
97328: LD_VAR 0 9
97332: PUSH
97333: FOR_TO
97334: IFFALSE 97451
// for _y = min_y to max_y do
97336: LD_ADDR_VAR 0 12
97340: PUSH
97341: DOUBLE
97342: LD_VAR 0 8
97346: DEC
97347: ST_TO_ADDR
97348: LD_VAR 0 10
97352: PUSH
97353: FOR_TO
97354: IFFALSE 97447
// begin if not ValidHex ( _x , _y ) then
97356: LD_VAR 0 11
97360: PPUSH
97361: LD_VAR 0 12
97365: PPUSH
97366: CALL_OW 488
97370: NOT
97371: IFFALSE 97375
// continue ;
97373: GO 97353
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
97375: LD_VAR 0 11
97379: PPUSH
97380: LD_VAR 0 12
97384: PPUSH
97385: CALL_OW 351
97389: PUSH
97390: LD_VAR 0 11
97394: PPUSH
97395: LD_VAR 0 12
97399: PPUSH
97400: CALL_OW 554
97404: AND
97405: IFFALSE 97445
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
97407: LD_ADDR_VAR 0 13
97411: PUSH
97412: LD_VAR 0 13
97416: PPUSH
97417: LD_VAR 0 13
97421: PUSH
97422: LD_INT 1
97424: PLUS
97425: PPUSH
97426: LD_VAR 0 11
97430: PUSH
97431: LD_VAR 0 12
97435: PUSH
97436: EMPTY
97437: LIST
97438: LIST
97439: PPUSH
97440: CALL_OW 2
97444: ST_TO_ADDR
// end ;
97445: GO 97353
97447: POP
97448: POP
97449: GO 97333
97451: POP
97452: POP
// if not list then
97453: LD_VAR 0 13
97457: NOT
97458: IFFALSE 97462
// exit ;
97460: GO 97533
// for i in list do
97462: LD_ADDR_VAR 0 6
97466: PUSH
97467: LD_VAR 0 13
97471: PUSH
97472: FOR_IN
97473: IFFALSE 97531
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
97475: LD_VAR 0 1
97479: PPUSH
97480: LD_STRING M
97482: PUSH
97483: LD_VAR 0 6
97487: PUSH
97488: LD_INT 1
97490: ARRAY
97491: PUSH
97492: LD_VAR 0 6
97496: PUSH
97497: LD_INT 2
97499: ARRAY
97500: PUSH
97501: LD_INT 0
97503: PUSH
97504: LD_INT 0
97506: PUSH
97507: LD_INT 0
97509: PUSH
97510: LD_INT 0
97512: PUSH
97513: EMPTY
97514: LIST
97515: LIST
97516: LIST
97517: LIST
97518: LIST
97519: LIST
97520: LIST
97521: PUSH
97522: EMPTY
97523: LIST
97524: PPUSH
97525: CALL_OW 447
97529: GO 97472
97531: POP
97532: POP
// end ;
97533: LD_VAR 0 5
97537: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
97538: LD_EXP 142
97542: NOT
97543: IFFALSE 97593
97545: GO 97547
97547: DISABLE
// begin initHack := true ;
97548: LD_ADDR_EXP 142
97552: PUSH
97553: LD_INT 1
97555: ST_TO_ADDR
// hackTanks := [ ] ;
97556: LD_ADDR_EXP 143
97560: PUSH
97561: EMPTY
97562: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
97563: LD_ADDR_EXP 144
97567: PUSH
97568: EMPTY
97569: ST_TO_ADDR
// hackLimit := 3 ;
97570: LD_ADDR_EXP 145
97574: PUSH
97575: LD_INT 3
97577: ST_TO_ADDR
// hackDist := 12 ;
97578: LD_ADDR_EXP 146
97582: PUSH
97583: LD_INT 12
97585: ST_TO_ADDR
// hackCounter := [ ] ;
97586: LD_ADDR_EXP 147
97590: PUSH
97591: EMPTY
97592: ST_TO_ADDR
// end ;
97593: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
97594: LD_EXP 142
97598: PUSH
97599: LD_INT 34
97601: PUSH
97602: LD_EXP 31
97606: PUSH
97607: EMPTY
97608: LIST
97609: LIST
97610: PPUSH
97611: CALL_OW 69
97615: AND
97616: IFFALSE 97871
97618: GO 97620
97620: DISABLE
97621: LD_INT 0
97623: PPUSH
97624: PPUSH
// begin enable ;
97625: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
97626: LD_ADDR_VAR 0 1
97630: PUSH
97631: LD_INT 34
97633: PUSH
97634: LD_EXP 31
97638: PUSH
97639: EMPTY
97640: LIST
97641: LIST
97642: PPUSH
97643: CALL_OW 69
97647: PUSH
97648: FOR_IN
97649: IFFALSE 97869
// begin if not i in hackTanks then
97651: LD_VAR 0 1
97655: PUSH
97656: LD_EXP 143
97660: IN
97661: NOT
97662: IFFALSE 97745
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
97664: LD_ADDR_EXP 143
97668: PUSH
97669: LD_EXP 143
97673: PPUSH
97674: LD_EXP 143
97678: PUSH
97679: LD_INT 1
97681: PLUS
97682: PPUSH
97683: LD_VAR 0 1
97687: PPUSH
97688: CALL_OW 1
97692: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
97693: LD_ADDR_EXP 144
97697: PUSH
97698: LD_EXP 144
97702: PPUSH
97703: LD_EXP 144
97707: PUSH
97708: LD_INT 1
97710: PLUS
97711: PPUSH
97712: EMPTY
97713: PPUSH
97714: CALL_OW 1
97718: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
97719: LD_ADDR_EXP 147
97723: PUSH
97724: LD_EXP 147
97728: PPUSH
97729: LD_EXP 147
97733: PUSH
97734: LD_INT 1
97736: PLUS
97737: PPUSH
97738: EMPTY
97739: PPUSH
97740: CALL_OW 1
97744: ST_TO_ADDR
// end ; if not IsOk ( i ) then
97745: LD_VAR 0 1
97749: PPUSH
97750: CALL_OW 302
97754: NOT
97755: IFFALSE 97768
// begin HackUnlinkAll ( i ) ;
97757: LD_VAR 0 1
97761: PPUSH
97762: CALL 97874 0 1
// continue ;
97766: GO 97648
// end ; HackCheckCapturedStatus ( i ) ;
97768: LD_VAR 0 1
97772: PPUSH
97773: CALL 98317 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
97777: LD_ADDR_VAR 0 2
97781: PUSH
97782: LD_INT 81
97784: PUSH
97785: LD_VAR 0 1
97789: PPUSH
97790: CALL_OW 255
97794: PUSH
97795: EMPTY
97796: LIST
97797: LIST
97798: PUSH
97799: LD_INT 33
97801: PUSH
97802: LD_INT 3
97804: PUSH
97805: EMPTY
97806: LIST
97807: LIST
97808: PUSH
97809: LD_INT 91
97811: PUSH
97812: LD_VAR 0 1
97816: PUSH
97817: LD_EXP 146
97821: PUSH
97822: EMPTY
97823: LIST
97824: LIST
97825: LIST
97826: PUSH
97827: LD_INT 50
97829: PUSH
97830: EMPTY
97831: LIST
97832: PUSH
97833: EMPTY
97834: LIST
97835: LIST
97836: LIST
97837: LIST
97838: PPUSH
97839: CALL_OW 69
97843: ST_TO_ADDR
// if not tmp then
97844: LD_VAR 0 2
97848: NOT
97849: IFFALSE 97853
// continue ;
97851: GO 97648
// HackLink ( i , tmp ) ;
97853: LD_VAR 0 1
97857: PPUSH
97858: LD_VAR 0 2
97862: PPUSH
97863: CALL 98010 0 2
// end ;
97867: GO 97648
97869: POP
97870: POP
// end ;
97871: PPOPN 2
97873: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
97874: LD_INT 0
97876: PPUSH
97877: PPUSH
97878: PPUSH
// if not hack in hackTanks then
97879: LD_VAR 0 1
97883: PUSH
97884: LD_EXP 143
97888: IN
97889: NOT
97890: IFFALSE 97894
// exit ;
97892: GO 98005
// index := GetElementIndex ( hackTanks , hack ) ;
97894: LD_ADDR_VAR 0 4
97898: PUSH
97899: LD_EXP 143
97903: PPUSH
97904: LD_VAR 0 1
97908: PPUSH
97909: CALL 24079 0 2
97913: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
97914: LD_EXP 144
97918: PUSH
97919: LD_VAR 0 4
97923: ARRAY
97924: IFFALSE 98005
// begin for i in hackTanksCaptured [ index ] do
97926: LD_ADDR_VAR 0 3
97930: PUSH
97931: LD_EXP 144
97935: PUSH
97936: LD_VAR 0 4
97940: ARRAY
97941: PUSH
97942: FOR_IN
97943: IFFALSE 97969
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
97945: LD_VAR 0 3
97949: PUSH
97950: LD_INT 1
97952: ARRAY
97953: PPUSH
97954: LD_VAR 0 3
97958: PUSH
97959: LD_INT 2
97961: ARRAY
97962: PPUSH
97963: CALL_OW 235
97967: GO 97942
97969: POP
97970: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
97971: LD_ADDR_EXP 144
97975: PUSH
97976: LD_EXP 144
97980: PPUSH
97981: LD_VAR 0 4
97985: PPUSH
97986: EMPTY
97987: PPUSH
97988: CALL_OW 1
97992: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
97993: LD_VAR 0 1
97997: PPUSH
97998: LD_INT 0
98000: PPUSH
98001: CALL_OW 505
// end ; end ;
98005: LD_VAR 0 2
98009: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
98010: LD_INT 0
98012: PPUSH
98013: PPUSH
98014: PPUSH
// if not hack in hackTanks or not vehicles then
98015: LD_VAR 0 1
98019: PUSH
98020: LD_EXP 143
98024: IN
98025: NOT
98026: PUSH
98027: LD_VAR 0 2
98031: NOT
98032: OR
98033: IFFALSE 98037
// exit ;
98035: GO 98312
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
98037: LD_ADDR_VAR 0 2
98041: PUSH
98042: LD_VAR 0 1
98046: PPUSH
98047: LD_VAR 0 2
98051: PPUSH
98052: LD_INT 1
98054: PPUSH
98055: LD_INT 1
98057: PPUSH
98058: CALL 24729 0 4
98062: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
98063: LD_ADDR_VAR 0 5
98067: PUSH
98068: LD_EXP 143
98072: PPUSH
98073: LD_VAR 0 1
98077: PPUSH
98078: CALL 24079 0 2
98082: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
98083: LD_EXP 144
98087: PUSH
98088: LD_VAR 0 5
98092: ARRAY
98093: PUSH
98094: LD_EXP 145
98098: LESS
98099: IFFALSE 98288
// begin for i := 1 to vehicles do
98101: LD_ADDR_VAR 0 4
98105: PUSH
98106: DOUBLE
98107: LD_INT 1
98109: DEC
98110: ST_TO_ADDR
98111: LD_VAR 0 2
98115: PUSH
98116: FOR_TO
98117: IFFALSE 98286
// begin if hackTanksCaptured [ index ] = hackLimit then
98119: LD_EXP 144
98123: PUSH
98124: LD_VAR 0 5
98128: ARRAY
98129: PUSH
98130: LD_EXP 145
98134: EQUAL
98135: IFFALSE 98139
// break ;
98137: GO 98286
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
98139: LD_ADDR_EXP 147
98143: PUSH
98144: LD_EXP 147
98148: PPUSH
98149: LD_VAR 0 5
98153: PPUSH
98154: LD_EXP 147
98158: PUSH
98159: LD_VAR 0 5
98163: ARRAY
98164: PUSH
98165: LD_INT 1
98167: PLUS
98168: PPUSH
98169: CALL_OW 1
98173: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
98174: LD_ADDR_EXP 144
98178: PUSH
98179: LD_EXP 144
98183: PPUSH
98184: LD_VAR 0 5
98188: PUSH
98189: LD_EXP 144
98193: PUSH
98194: LD_VAR 0 5
98198: ARRAY
98199: PUSH
98200: LD_INT 1
98202: PLUS
98203: PUSH
98204: EMPTY
98205: LIST
98206: LIST
98207: PPUSH
98208: LD_VAR 0 2
98212: PUSH
98213: LD_VAR 0 4
98217: ARRAY
98218: PUSH
98219: LD_VAR 0 2
98223: PUSH
98224: LD_VAR 0 4
98228: ARRAY
98229: PPUSH
98230: CALL_OW 255
98234: PUSH
98235: EMPTY
98236: LIST
98237: LIST
98238: PPUSH
98239: CALL 24294 0 3
98243: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
98244: LD_VAR 0 2
98248: PUSH
98249: LD_VAR 0 4
98253: ARRAY
98254: PPUSH
98255: LD_VAR 0 1
98259: PPUSH
98260: CALL_OW 255
98264: PPUSH
98265: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
98269: LD_VAR 0 2
98273: PUSH
98274: LD_VAR 0 4
98278: ARRAY
98279: PPUSH
98280: CALL_OW 141
// end ;
98284: GO 98116
98286: POP
98287: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
98288: LD_VAR 0 1
98292: PPUSH
98293: LD_EXP 144
98297: PUSH
98298: LD_VAR 0 5
98302: ARRAY
98303: PUSH
98304: LD_INT 0
98306: PLUS
98307: PPUSH
98308: CALL_OW 505
// end ;
98312: LD_VAR 0 3
98316: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
98317: LD_INT 0
98319: PPUSH
98320: PPUSH
98321: PPUSH
98322: PPUSH
// if not hack in hackTanks then
98323: LD_VAR 0 1
98327: PUSH
98328: LD_EXP 143
98332: IN
98333: NOT
98334: IFFALSE 98338
// exit ;
98336: GO 98578
// index := GetElementIndex ( hackTanks , hack ) ;
98338: LD_ADDR_VAR 0 4
98342: PUSH
98343: LD_EXP 143
98347: PPUSH
98348: LD_VAR 0 1
98352: PPUSH
98353: CALL 24079 0 2
98357: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
98358: LD_ADDR_VAR 0 3
98362: PUSH
98363: DOUBLE
98364: LD_EXP 144
98368: PUSH
98369: LD_VAR 0 4
98373: ARRAY
98374: INC
98375: ST_TO_ADDR
98376: LD_INT 1
98378: PUSH
98379: FOR_DOWNTO
98380: IFFALSE 98552
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
98382: LD_ADDR_VAR 0 5
98386: PUSH
98387: LD_EXP 144
98391: PUSH
98392: LD_VAR 0 4
98396: ARRAY
98397: PUSH
98398: LD_VAR 0 3
98402: ARRAY
98403: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
98404: LD_VAR 0 5
98408: PUSH
98409: LD_INT 1
98411: ARRAY
98412: PPUSH
98413: CALL_OW 302
98417: NOT
98418: PUSH
98419: LD_VAR 0 5
98423: PUSH
98424: LD_INT 1
98426: ARRAY
98427: PPUSH
98428: CALL_OW 255
98432: PUSH
98433: LD_VAR 0 1
98437: PPUSH
98438: CALL_OW 255
98442: NONEQUAL
98443: OR
98444: IFFALSE 98550
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
98446: LD_VAR 0 5
98450: PUSH
98451: LD_INT 1
98453: ARRAY
98454: PPUSH
98455: CALL_OW 305
98459: PUSH
98460: LD_VAR 0 5
98464: PUSH
98465: LD_INT 1
98467: ARRAY
98468: PPUSH
98469: CALL_OW 255
98473: PUSH
98474: LD_VAR 0 1
98478: PPUSH
98479: CALL_OW 255
98483: EQUAL
98484: AND
98485: IFFALSE 98509
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
98487: LD_VAR 0 5
98491: PUSH
98492: LD_INT 1
98494: ARRAY
98495: PPUSH
98496: LD_VAR 0 5
98500: PUSH
98501: LD_INT 2
98503: ARRAY
98504: PPUSH
98505: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
98509: LD_ADDR_EXP 144
98513: PUSH
98514: LD_EXP 144
98518: PPUSH
98519: LD_VAR 0 4
98523: PPUSH
98524: LD_EXP 144
98528: PUSH
98529: LD_VAR 0 4
98533: ARRAY
98534: PPUSH
98535: LD_VAR 0 3
98539: PPUSH
98540: CALL_OW 3
98544: PPUSH
98545: CALL_OW 1
98549: ST_TO_ADDR
// end ; end ;
98550: GO 98379
98552: POP
98553: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
98554: LD_VAR 0 1
98558: PPUSH
98559: LD_EXP 144
98563: PUSH
98564: LD_VAR 0 4
98568: ARRAY
98569: PUSH
98570: LD_INT 0
98572: PLUS
98573: PPUSH
98574: CALL_OW 505
// end ; end_of_file
98578: LD_VAR 0 2
98582: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
98583: LD_INT 0
98585: PPUSH
98586: PPUSH
98587: PPUSH
98588: PPUSH
98589: PPUSH
98590: PPUSH
98591: PPUSH
98592: PPUSH
98593: PPUSH
98594: PPUSH
98595: PPUSH
98596: PPUSH
98597: PPUSH
98598: PPUSH
98599: PPUSH
98600: PPUSH
98601: PPUSH
98602: PPUSH
98603: PPUSH
98604: PPUSH
98605: PPUSH
98606: PPUSH
98607: PPUSH
98608: PPUSH
98609: PPUSH
98610: PPUSH
98611: PPUSH
98612: PPUSH
98613: PPUSH
98614: PPUSH
98615: PPUSH
98616: PPUSH
98617: PPUSH
98618: PPUSH
// if not list then
98619: LD_VAR 0 1
98623: NOT
98624: IFFALSE 98628
// exit ;
98626: GO 103287
// base := list [ 1 ] ;
98628: LD_ADDR_VAR 0 3
98632: PUSH
98633: LD_VAR 0 1
98637: PUSH
98638: LD_INT 1
98640: ARRAY
98641: ST_TO_ADDR
// group := list [ 2 ] ;
98642: LD_ADDR_VAR 0 4
98646: PUSH
98647: LD_VAR 0 1
98651: PUSH
98652: LD_INT 2
98654: ARRAY
98655: ST_TO_ADDR
// path := list [ 3 ] ;
98656: LD_ADDR_VAR 0 5
98660: PUSH
98661: LD_VAR 0 1
98665: PUSH
98666: LD_INT 3
98668: ARRAY
98669: ST_TO_ADDR
// flags := list [ 4 ] ;
98670: LD_ADDR_VAR 0 6
98674: PUSH
98675: LD_VAR 0 1
98679: PUSH
98680: LD_INT 4
98682: ARRAY
98683: ST_TO_ADDR
// mined := [ ] ;
98684: LD_ADDR_VAR 0 27
98688: PUSH
98689: EMPTY
98690: ST_TO_ADDR
// bombed := [ ] ;
98691: LD_ADDR_VAR 0 28
98695: PUSH
98696: EMPTY
98697: ST_TO_ADDR
// healers := [ ] ;
98698: LD_ADDR_VAR 0 31
98702: PUSH
98703: EMPTY
98704: ST_TO_ADDR
// to_heal := [ ] ;
98705: LD_ADDR_VAR 0 30
98709: PUSH
98710: EMPTY
98711: ST_TO_ADDR
// repairs := [ ] ;
98712: LD_ADDR_VAR 0 33
98716: PUSH
98717: EMPTY
98718: ST_TO_ADDR
// to_repair := [ ] ;
98719: LD_ADDR_VAR 0 32
98723: PUSH
98724: EMPTY
98725: ST_TO_ADDR
// if not group or not path then
98726: LD_VAR 0 4
98730: NOT
98731: PUSH
98732: LD_VAR 0 5
98736: NOT
98737: OR
98738: IFFALSE 98742
// exit ;
98740: GO 103287
// side := GetSide ( group [ 1 ] ) ;
98742: LD_ADDR_VAR 0 35
98746: PUSH
98747: LD_VAR 0 4
98751: PUSH
98752: LD_INT 1
98754: ARRAY
98755: PPUSH
98756: CALL_OW 255
98760: ST_TO_ADDR
// if flags then
98761: LD_VAR 0 6
98765: IFFALSE 98909
// begin f_ignore_area := flags [ 1 ] ;
98767: LD_ADDR_VAR 0 17
98771: PUSH
98772: LD_VAR 0 6
98776: PUSH
98777: LD_INT 1
98779: ARRAY
98780: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
98781: LD_ADDR_VAR 0 18
98785: PUSH
98786: LD_VAR 0 6
98790: PUSH
98791: LD_INT 2
98793: ARRAY
98794: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
98795: LD_ADDR_VAR 0 19
98799: PUSH
98800: LD_VAR 0 6
98804: PUSH
98805: LD_INT 3
98807: ARRAY
98808: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
98809: LD_ADDR_VAR 0 20
98813: PUSH
98814: LD_VAR 0 6
98818: PUSH
98819: LD_INT 4
98821: ARRAY
98822: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
98823: LD_ADDR_VAR 0 21
98827: PUSH
98828: LD_VAR 0 6
98832: PUSH
98833: LD_INT 5
98835: ARRAY
98836: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
98837: LD_ADDR_VAR 0 22
98841: PUSH
98842: LD_VAR 0 6
98846: PUSH
98847: LD_INT 6
98849: ARRAY
98850: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
98851: LD_ADDR_VAR 0 23
98855: PUSH
98856: LD_VAR 0 6
98860: PUSH
98861: LD_INT 7
98863: ARRAY
98864: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
98865: LD_ADDR_VAR 0 24
98869: PUSH
98870: LD_VAR 0 6
98874: PUSH
98875: LD_INT 8
98877: ARRAY
98878: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
98879: LD_ADDR_VAR 0 25
98883: PUSH
98884: LD_VAR 0 6
98888: PUSH
98889: LD_INT 9
98891: ARRAY
98892: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
98893: LD_ADDR_VAR 0 26
98897: PUSH
98898: LD_VAR 0 6
98902: PUSH
98903: LD_INT 10
98905: ARRAY
98906: ST_TO_ADDR
// end else
98907: GO 98989
// begin f_ignore_area := false ;
98909: LD_ADDR_VAR 0 17
98913: PUSH
98914: LD_INT 0
98916: ST_TO_ADDR
// f_capture := false ;
98917: LD_ADDR_VAR 0 18
98921: PUSH
98922: LD_INT 0
98924: ST_TO_ADDR
// f_ignore_civ := false ;
98925: LD_ADDR_VAR 0 19
98929: PUSH
98930: LD_INT 0
98932: ST_TO_ADDR
// f_murder := false ;
98933: LD_ADDR_VAR 0 20
98937: PUSH
98938: LD_INT 0
98940: ST_TO_ADDR
// f_mines := false ;
98941: LD_ADDR_VAR 0 21
98945: PUSH
98946: LD_INT 0
98948: ST_TO_ADDR
// f_repair := false ;
98949: LD_ADDR_VAR 0 22
98953: PUSH
98954: LD_INT 0
98956: ST_TO_ADDR
// f_heal := false ;
98957: LD_ADDR_VAR 0 23
98961: PUSH
98962: LD_INT 0
98964: ST_TO_ADDR
// f_spacetime := false ;
98965: LD_ADDR_VAR 0 24
98969: PUSH
98970: LD_INT 0
98972: ST_TO_ADDR
// f_attack_depot := false ;
98973: LD_ADDR_VAR 0 25
98977: PUSH
98978: LD_INT 0
98980: ST_TO_ADDR
// f_crawl := false ;
98981: LD_ADDR_VAR 0 26
98985: PUSH
98986: LD_INT 0
98988: ST_TO_ADDR
// end ; if f_heal then
98989: LD_VAR 0 23
98993: IFFALSE 99020
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
98995: LD_ADDR_VAR 0 31
98999: PUSH
99000: LD_VAR 0 4
99004: PPUSH
99005: LD_INT 25
99007: PUSH
99008: LD_INT 4
99010: PUSH
99011: EMPTY
99012: LIST
99013: LIST
99014: PPUSH
99015: CALL_OW 72
99019: ST_TO_ADDR
// if f_repair then
99020: LD_VAR 0 22
99024: IFFALSE 99051
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
99026: LD_ADDR_VAR 0 33
99030: PUSH
99031: LD_VAR 0 4
99035: PPUSH
99036: LD_INT 25
99038: PUSH
99039: LD_INT 3
99041: PUSH
99042: EMPTY
99043: LIST
99044: LIST
99045: PPUSH
99046: CALL_OW 72
99050: ST_TO_ADDR
// units_path := [ ] ;
99051: LD_ADDR_VAR 0 16
99055: PUSH
99056: EMPTY
99057: ST_TO_ADDR
// for i = 1 to group do
99058: LD_ADDR_VAR 0 7
99062: PUSH
99063: DOUBLE
99064: LD_INT 1
99066: DEC
99067: ST_TO_ADDR
99068: LD_VAR 0 4
99072: PUSH
99073: FOR_TO
99074: IFFALSE 99103
// units_path := Replace ( units_path , i , path ) ;
99076: LD_ADDR_VAR 0 16
99080: PUSH
99081: LD_VAR 0 16
99085: PPUSH
99086: LD_VAR 0 7
99090: PPUSH
99091: LD_VAR 0 5
99095: PPUSH
99096: CALL_OW 1
99100: ST_TO_ADDR
99101: GO 99073
99103: POP
99104: POP
// repeat for i = group downto 1 do
99105: LD_ADDR_VAR 0 7
99109: PUSH
99110: DOUBLE
99111: LD_VAR 0 4
99115: INC
99116: ST_TO_ADDR
99117: LD_INT 1
99119: PUSH
99120: FOR_DOWNTO
99121: IFFALSE 103243
// begin wait ( 5 ) ;
99123: LD_INT 5
99125: PPUSH
99126: CALL_OW 67
// tmp := [ ] ;
99130: LD_ADDR_VAR 0 14
99134: PUSH
99135: EMPTY
99136: ST_TO_ADDR
// attacking := false ;
99137: LD_ADDR_VAR 0 29
99141: PUSH
99142: LD_INT 0
99144: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
99145: LD_VAR 0 4
99149: PUSH
99150: LD_VAR 0 7
99154: ARRAY
99155: PPUSH
99156: CALL_OW 301
99160: PUSH
99161: LD_VAR 0 4
99165: PUSH
99166: LD_VAR 0 7
99170: ARRAY
99171: NOT
99172: OR
99173: IFFALSE 99282
// begin if GetType ( group [ i ] ) = unit_human then
99175: LD_VAR 0 4
99179: PUSH
99180: LD_VAR 0 7
99184: ARRAY
99185: PPUSH
99186: CALL_OW 247
99190: PUSH
99191: LD_INT 1
99193: EQUAL
99194: IFFALSE 99240
// begin to_heal := to_heal diff group [ i ] ;
99196: LD_ADDR_VAR 0 30
99200: PUSH
99201: LD_VAR 0 30
99205: PUSH
99206: LD_VAR 0 4
99210: PUSH
99211: LD_VAR 0 7
99215: ARRAY
99216: DIFF
99217: ST_TO_ADDR
// healers := healers diff group [ i ] ;
99218: LD_ADDR_VAR 0 31
99222: PUSH
99223: LD_VAR 0 31
99227: PUSH
99228: LD_VAR 0 4
99232: PUSH
99233: LD_VAR 0 7
99237: ARRAY
99238: DIFF
99239: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
99240: LD_ADDR_VAR 0 4
99244: PUSH
99245: LD_VAR 0 4
99249: PPUSH
99250: LD_VAR 0 7
99254: PPUSH
99255: CALL_OW 3
99259: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
99260: LD_ADDR_VAR 0 16
99264: PUSH
99265: LD_VAR 0 16
99269: PPUSH
99270: LD_VAR 0 7
99274: PPUSH
99275: CALL_OW 3
99279: ST_TO_ADDR
// continue ;
99280: GO 99120
// end ; if f_repair then
99282: LD_VAR 0 22
99286: IFFALSE 99775
// begin if GetType ( group [ i ] ) = unit_vehicle then
99288: LD_VAR 0 4
99292: PUSH
99293: LD_VAR 0 7
99297: ARRAY
99298: PPUSH
99299: CALL_OW 247
99303: PUSH
99304: LD_INT 2
99306: EQUAL
99307: IFFALSE 99497
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
99309: LD_VAR 0 4
99313: PUSH
99314: LD_VAR 0 7
99318: ARRAY
99319: PPUSH
99320: CALL_OW 256
99324: PUSH
99325: LD_INT 700
99327: LESS
99328: PUSH
99329: LD_VAR 0 4
99333: PUSH
99334: LD_VAR 0 7
99338: ARRAY
99339: PUSH
99340: LD_VAR 0 32
99344: IN
99345: NOT
99346: AND
99347: IFFALSE 99371
// to_repair := to_repair union group [ i ] ;
99349: LD_ADDR_VAR 0 32
99353: PUSH
99354: LD_VAR 0 32
99358: PUSH
99359: LD_VAR 0 4
99363: PUSH
99364: LD_VAR 0 7
99368: ARRAY
99369: UNION
99370: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
99371: LD_VAR 0 4
99375: PUSH
99376: LD_VAR 0 7
99380: ARRAY
99381: PPUSH
99382: CALL_OW 256
99386: PUSH
99387: LD_INT 1000
99389: EQUAL
99390: PUSH
99391: LD_VAR 0 4
99395: PUSH
99396: LD_VAR 0 7
99400: ARRAY
99401: PUSH
99402: LD_VAR 0 32
99406: IN
99407: AND
99408: IFFALSE 99432
// to_repair := to_repair diff group [ i ] ;
99410: LD_ADDR_VAR 0 32
99414: PUSH
99415: LD_VAR 0 32
99419: PUSH
99420: LD_VAR 0 4
99424: PUSH
99425: LD_VAR 0 7
99429: ARRAY
99430: DIFF
99431: ST_TO_ADDR
// if group [ i ] in to_repair then
99432: LD_VAR 0 4
99436: PUSH
99437: LD_VAR 0 7
99441: ARRAY
99442: PUSH
99443: LD_VAR 0 32
99447: IN
99448: IFFALSE 99495
// begin if not IsInArea ( group [ i ] , f_repair ) then
99450: LD_VAR 0 4
99454: PUSH
99455: LD_VAR 0 7
99459: ARRAY
99460: PPUSH
99461: LD_VAR 0 22
99465: PPUSH
99466: CALL_OW 308
99470: NOT
99471: IFFALSE 99493
// ComMoveToArea ( group [ i ] , f_repair ) ;
99473: LD_VAR 0 4
99477: PUSH
99478: LD_VAR 0 7
99482: ARRAY
99483: PPUSH
99484: LD_VAR 0 22
99488: PPUSH
99489: CALL_OW 113
// continue ;
99493: GO 99120
// end ; end else
99495: GO 99775
// if group [ i ] in repairs then
99497: LD_VAR 0 4
99501: PUSH
99502: LD_VAR 0 7
99506: ARRAY
99507: PUSH
99508: LD_VAR 0 33
99512: IN
99513: IFFALSE 99775
// begin if IsInUnit ( group [ i ] ) then
99515: LD_VAR 0 4
99519: PUSH
99520: LD_VAR 0 7
99524: ARRAY
99525: PPUSH
99526: CALL_OW 310
99530: IFFALSE 99598
// begin z := IsInUnit ( group [ i ] ) ;
99532: LD_ADDR_VAR 0 13
99536: PUSH
99537: LD_VAR 0 4
99541: PUSH
99542: LD_VAR 0 7
99546: ARRAY
99547: PPUSH
99548: CALL_OW 310
99552: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
99553: LD_VAR 0 13
99557: PUSH
99558: LD_VAR 0 32
99562: IN
99563: PUSH
99564: LD_VAR 0 13
99568: PPUSH
99569: LD_VAR 0 22
99573: PPUSH
99574: CALL_OW 308
99578: AND
99579: IFFALSE 99596
// ComExitVehicle ( group [ i ] ) ;
99581: LD_VAR 0 4
99585: PUSH
99586: LD_VAR 0 7
99590: ARRAY
99591: PPUSH
99592: CALL_OW 121
// end else
99596: GO 99775
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
99598: LD_ADDR_VAR 0 13
99602: PUSH
99603: LD_VAR 0 4
99607: PPUSH
99608: LD_INT 95
99610: PUSH
99611: LD_VAR 0 22
99615: PUSH
99616: EMPTY
99617: LIST
99618: LIST
99619: PUSH
99620: LD_INT 58
99622: PUSH
99623: EMPTY
99624: LIST
99625: PUSH
99626: EMPTY
99627: LIST
99628: LIST
99629: PPUSH
99630: CALL_OW 72
99634: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
99635: LD_VAR 0 4
99639: PUSH
99640: LD_VAR 0 7
99644: ARRAY
99645: PPUSH
99646: CALL_OW 314
99650: NOT
99651: IFFALSE 99773
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
99653: LD_ADDR_VAR 0 10
99657: PUSH
99658: LD_VAR 0 13
99662: PPUSH
99663: LD_VAR 0 4
99667: PUSH
99668: LD_VAR 0 7
99672: ARRAY
99673: PPUSH
99674: CALL_OW 74
99678: ST_TO_ADDR
// if not x then
99679: LD_VAR 0 10
99683: NOT
99684: IFFALSE 99688
// continue ;
99686: GO 99120
// if GetLives ( x ) < 1000 then
99688: LD_VAR 0 10
99692: PPUSH
99693: CALL_OW 256
99697: PUSH
99698: LD_INT 1000
99700: LESS
99701: IFFALSE 99725
// ComRepairVehicle ( group [ i ] , x ) else
99703: LD_VAR 0 4
99707: PUSH
99708: LD_VAR 0 7
99712: ARRAY
99713: PPUSH
99714: LD_VAR 0 10
99718: PPUSH
99719: CALL_OW 129
99723: GO 99773
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
99725: LD_VAR 0 23
99729: PUSH
99730: LD_VAR 0 4
99734: PUSH
99735: LD_VAR 0 7
99739: ARRAY
99740: PPUSH
99741: CALL_OW 256
99745: PUSH
99746: LD_INT 1000
99748: LESS
99749: AND
99750: NOT
99751: IFFALSE 99773
// ComEnterUnit ( group [ i ] , x ) ;
99753: LD_VAR 0 4
99757: PUSH
99758: LD_VAR 0 7
99762: ARRAY
99763: PPUSH
99764: LD_VAR 0 10
99768: PPUSH
99769: CALL_OW 120
// end ; continue ;
99773: GO 99120
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
99775: LD_VAR 0 23
99779: PUSH
99780: LD_VAR 0 4
99784: PUSH
99785: LD_VAR 0 7
99789: ARRAY
99790: PPUSH
99791: CALL_OW 247
99795: PUSH
99796: LD_INT 1
99798: EQUAL
99799: AND
99800: IFFALSE 100278
// begin if group [ i ] in healers then
99802: LD_VAR 0 4
99806: PUSH
99807: LD_VAR 0 7
99811: ARRAY
99812: PUSH
99813: LD_VAR 0 31
99817: IN
99818: IFFALSE 100091
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
99820: LD_VAR 0 4
99824: PUSH
99825: LD_VAR 0 7
99829: ARRAY
99830: PPUSH
99831: LD_VAR 0 23
99835: PPUSH
99836: CALL_OW 308
99840: NOT
99841: PUSH
99842: LD_VAR 0 4
99846: PUSH
99847: LD_VAR 0 7
99851: ARRAY
99852: PPUSH
99853: CALL_OW 314
99857: NOT
99858: AND
99859: IFFALSE 99883
// ComMoveToArea ( group [ i ] , f_heal ) else
99861: LD_VAR 0 4
99865: PUSH
99866: LD_VAR 0 7
99870: ARRAY
99871: PPUSH
99872: LD_VAR 0 23
99876: PPUSH
99877: CALL_OW 113
99881: GO 100089
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
99883: LD_VAR 0 4
99887: PUSH
99888: LD_VAR 0 7
99892: ARRAY
99893: PPUSH
99894: CALL 52666 0 1
99898: PPUSH
99899: CALL_OW 256
99903: PUSH
99904: LD_INT 1000
99906: EQUAL
99907: IFFALSE 99926
// ComStop ( group [ i ] ) else
99909: LD_VAR 0 4
99913: PUSH
99914: LD_VAR 0 7
99918: ARRAY
99919: PPUSH
99920: CALL_OW 141
99924: GO 100089
// if not HasTask ( group [ i ] ) and to_heal then
99926: LD_VAR 0 4
99930: PUSH
99931: LD_VAR 0 7
99935: ARRAY
99936: PPUSH
99937: CALL_OW 314
99941: NOT
99942: PUSH
99943: LD_VAR 0 30
99947: AND
99948: IFFALSE 100089
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
99950: LD_ADDR_VAR 0 13
99954: PUSH
99955: LD_VAR 0 30
99959: PPUSH
99960: LD_INT 3
99962: PUSH
99963: LD_INT 54
99965: PUSH
99966: EMPTY
99967: LIST
99968: PUSH
99969: EMPTY
99970: LIST
99971: LIST
99972: PPUSH
99973: CALL_OW 72
99977: PPUSH
99978: LD_VAR 0 4
99982: PUSH
99983: LD_VAR 0 7
99987: ARRAY
99988: PPUSH
99989: CALL_OW 74
99993: ST_TO_ADDR
// if z then
99994: LD_VAR 0 13
99998: IFFALSE 100089
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
100000: LD_INT 91
100002: PUSH
100003: LD_VAR 0 13
100007: PUSH
100008: LD_INT 10
100010: PUSH
100011: EMPTY
100012: LIST
100013: LIST
100014: LIST
100015: PUSH
100016: LD_INT 81
100018: PUSH
100019: LD_VAR 0 13
100023: PPUSH
100024: CALL_OW 255
100028: PUSH
100029: EMPTY
100030: LIST
100031: LIST
100032: PUSH
100033: EMPTY
100034: LIST
100035: LIST
100036: PPUSH
100037: CALL_OW 69
100041: PUSH
100042: LD_INT 0
100044: EQUAL
100045: IFFALSE 100069
// ComHeal ( group [ i ] , z ) else
100047: LD_VAR 0 4
100051: PUSH
100052: LD_VAR 0 7
100056: ARRAY
100057: PPUSH
100058: LD_VAR 0 13
100062: PPUSH
100063: CALL_OW 128
100067: GO 100089
// ComMoveToArea ( group [ i ] , f_heal ) ;
100069: LD_VAR 0 4
100073: PUSH
100074: LD_VAR 0 7
100078: ARRAY
100079: PPUSH
100080: LD_VAR 0 23
100084: PPUSH
100085: CALL_OW 113
// end ; continue ;
100089: GO 99120
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
100091: LD_VAR 0 4
100095: PUSH
100096: LD_VAR 0 7
100100: ARRAY
100101: PPUSH
100102: CALL_OW 256
100106: PUSH
100107: LD_INT 700
100109: LESS
100110: PUSH
100111: LD_VAR 0 4
100115: PUSH
100116: LD_VAR 0 7
100120: ARRAY
100121: PUSH
100122: LD_VAR 0 30
100126: IN
100127: NOT
100128: AND
100129: IFFALSE 100153
// to_heal := to_heal union group [ i ] ;
100131: LD_ADDR_VAR 0 30
100135: PUSH
100136: LD_VAR 0 30
100140: PUSH
100141: LD_VAR 0 4
100145: PUSH
100146: LD_VAR 0 7
100150: ARRAY
100151: UNION
100152: ST_TO_ADDR
// if group [ i ] in to_heal then
100153: LD_VAR 0 4
100157: PUSH
100158: LD_VAR 0 7
100162: ARRAY
100163: PUSH
100164: LD_VAR 0 30
100168: IN
100169: IFFALSE 100278
// begin if GetLives ( group [ i ] ) = 1000 then
100171: LD_VAR 0 4
100175: PUSH
100176: LD_VAR 0 7
100180: ARRAY
100181: PPUSH
100182: CALL_OW 256
100186: PUSH
100187: LD_INT 1000
100189: EQUAL
100190: IFFALSE 100216
// to_heal := to_heal diff group [ i ] else
100192: LD_ADDR_VAR 0 30
100196: PUSH
100197: LD_VAR 0 30
100201: PUSH
100202: LD_VAR 0 4
100206: PUSH
100207: LD_VAR 0 7
100211: ARRAY
100212: DIFF
100213: ST_TO_ADDR
100214: GO 100278
// begin if not IsInArea ( group [ i ] , to_heal ) then
100216: LD_VAR 0 4
100220: PUSH
100221: LD_VAR 0 7
100225: ARRAY
100226: PPUSH
100227: LD_VAR 0 30
100231: PPUSH
100232: CALL_OW 308
100236: NOT
100237: IFFALSE 100261
// ComMoveToArea ( group [ i ] , f_heal ) else
100239: LD_VAR 0 4
100243: PUSH
100244: LD_VAR 0 7
100248: ARRAY
100249: PPUSH
100250: LD_VAR 0 23
100254: PPUSH
100255: CALL_OW 113
100259: GO 100276
// ComHold ( group [ i ] ) ;
100261: LD_VAR 0 4
100265: PUSH
100266: LD_VAR 0 7
100270: ARRAY
100271: PPUSH
100272: CALL_OW 140
// continue ;
100276: GO 99120
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
100278: LD_VAR 0 4
100282: PUSH
100283: LD_VAR 0 7
100287: ARRAY
100288: PPUSH
100289: LD_INT 10
100291: PPUSH
100292: CALL 51086 0 2
100296: NOT
100297: PUSH
100298: LD_VAR 0 16
100302: PUSH
100303: LD_VAR 0 7
100307: ARRAY
100308: PUSH
100309: EMPTY
100310: EQUAL
100311: NOT
100312: AND
100313: IFFALSE 100579
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
100315: LD_VAR 0 4
100319: PUSH
100320: LD_VAR 0 7
100324: ARRAY
100325: PPUSH
100326: CALL_OW 262
100330: PUSH
100331: LD_INT 1
100333: PUSH
100334: LD_INT 2
100336: PUSH
100337: EMPTY
100338: LIST
100339: LIST
100340: IN
100341: IFFALSE 100382
// if GetFuel ( group [ i ] ) < 10 then
100343: LD_VAR 0 4
100347: PUSH
100348: LD_VAR 0 7
100352: ARRAY
100353: PPUSH
100354: CALL_OW 261
100358: PUSH
100359: LD_INT 10
100361: LESS
100362: IFFALSE 100382
// SetFuel ( group [ i ] , 12 ) ;
100364: LD_VAR 0 4
100368: PUSH
100369: LD_VAR 0 7
100373: ARRAY
100374: PPUSH
100375: LD_INT 12
100377: PPUSH
100378: CALL_OW 240
// if units_path [ i ] then
100382: LD_VAR 0 16
100386: PUSH
100387: LD_VAR 0 7
100391: ARRAY
100392: IFFALSE 100577
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
100394: LD_VAR 0 4
100398: PUSH
100399: LD_VAR 0 7
100403: ARRAY
100404: PPUSH
100405: LD_VAR 0 16
100409: PUSH
100410: LD_VAR 0 7
100414: ARRAY
100415: PUSH
100416: LD_INT 1
100418: ARRAY
100419: PUSH
100420: LD_INT 1
100422: ARRAY
100423: PPUSH
100424: LD_VAR 0 16
100428: PUSH
100429: LD_VAR 0 7
100433: ARRAY
100434: PUSH
100435: LD_INT 1
100437: ARRAY
100438: PUSH
100439: LD_INT 2
100441: ARRAY
100442: PPUSH
100443: CALL_OW 297
100447: PUSH
100448: LD_INT 6
100450: GREATER
100451: IFFALSE 100526
// begin if not HasTask ( group [ i ] ) then
100453: LD_VAR 0 4
100457: PUSH
100458: LD_VAR 0 7
100462: ARRAY
100463: PPUSH
100464: CALL_OW 314
100468: NOT
100469: IFFALSE 100524
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
100471: LD_VAR 0 4
100475: PUSH
100476: LD_VAR 0 7
100480: ARRAY
100481: PPUSH
100482: LD_VAR 0 16
100486: PUSH
100487: LD_VAR 0 7
100491: ARRAY
100492: PUSH
100493: LD_INT 1
100495: ARRAY
100496: PUSH
100497: LD_INT 1
100499: ARRAY
100500: PPUSH
100501: LD_VAR 0 16
100505: PUSH
100506: LD_VAR 0 7
100510: ARRAY
100511: PUSH
100512: LD_INT 1
100514: ARRAY
100515: PUSH
100516: LD_INT 2
100518: ARRAY
100519: PPUSH
100520: CALL_OW 114
// end else
100524: GO 100577
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
100526: LD_ADDR_VAR 0 15
100530: PUSH
100531: LD_VAR 0 16
100535: PUSH
100536: LD_VAR 0 7
100540: ARRAY
100541: PPUSH
100542: LD_INT 1
100544: PPUSH
100545: CALL_OW 3
100549: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
100550: LD_ADDR_VAR 0 16
100554: PUSH
100555: LD_VAR 0 16
100559: PPUSH
100560: LD_VAR 0 7
100564: PPUSH
100565: LD_VAR 0 15
100569: PPUSH
100570: CALL_OW 1
100574: ST_TO_ADDR
// continue ;
100575: GO 99120
// end ; end ; end else
100577: GO 103241
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
100579: LD_ADDR_VAR 0 14
100583: PUSH
100584: LD_INT 81
100586: PUSH
100587: LD_VAR 0 4
100591: PUSH
100592: LD_VAR 0 7
100596: ARRAY
100597: PPUSH
100598: CALL_OW 255
100602: PUSH
100603: EMPTY
100604: LIST
100605: LIST
100606: PPUSH
100607: CALL_OW 69
100611: ST_TO_ADDR
// if not tmp then
100612: LD_VAR 0 14
100616: NOT
100617: IFFALSE 100621
// continue ;
100619: GO 99120
// if f_ignore_area then
100621: LD_VAR 0 17
100625: IFFALSE 100713
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
100627: LD_ADDR_VAR 0 15
100631: PUSH
100632: LD_VAR 0 14
100636: PPUSH
100637: LD_INT 3
100639: PUSH
100640: LD_INT 92
100642: PUSH
100643: LD_VAR 0 17
100647: PUSH
100648: LD_INT 1
100650: ARRAY
100651: PUSH
100652: LD_VAR 0 17
100656: PUSH
100657: LD_INT 2
100659: ARRAY
100660: PUSH
100661: LD_VAR 0 17
100665: PUSH
100666: LD_INT 3
100668: ARRAY
100669: PUSH
100670: EMPTY
100671: LIST
100672: LIST
100673: LIST
100674: LIST
100675: PUSH
100676: EMPTY
100677: LIST
100678: LIST
100679: PPUSH
100680: CALL_OW 72
100684: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100685: LD_VAR 0 14
100689: PUSH
100690: LD_VAR 0 15
100694: DIFF
100695: IFFALSE 100713
// tmp := tmp diff tmp2 ;
100697: LD_ADDR_VAR 0 14
100701: PUSH
100702: LD_VAR 0 14
100706: PUSH
100707: LD_VAR 0 15
100711: DIFF
100712: ST_TO_ADDR
// end ; if not f_murder then
100713: LD_VAR 0 20
100717: NOT
100718: IFFALSE 100776
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
100720: LD_ADDR_VAR 0 15
100724: PUSH
100725: LD_VAR 0 14
100729: PPUSH
100730: LD_INT 3
100732: PUSH
100733: LD_INT 50
100735: PUSH
100736: EMPTY
100737: LIST
100738: PUSH
100739: EMPTY
100740: LIST
100741: LIST
100742: PPUSH
100743: CALL_OW 72
100747: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100748: LD_VAR 0 14
100752: PUSH
100753: LD_VAR 0 15
100757: DIFF
100758: IFFALSE 100776
// tmp := tmp diff tmp2 ;
100760: LD_ADDR_VAR 0 14
100764: PUSH
100765: LD_VAR 0 14
100769: PUSH
100770: LD_VAR 0 15
100774: DIFF
100775: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
100776: LD_ADDR_VAR 0 14
100780: PUSH
100781: LD_VAR 0 4
100785: PUSH
100786: LD_VAR 0 7
100790: ARRAY
100791: PPUSH
100792: LD_VAR 0 14
100796: PPUSH
100797: LD_INT 1
100799: PPUSH
100800: LD_INT 1
100802: PPUSH
100803: CALL 24729 0 4
100807: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
100808: LD_VAR 0 4
100812: PUSH
100813: LD_VAR 0 7
100817: ARRAY
100818: PPUSH
100819: CALL_OW 257
100823: PUSH
100824: LD_INT 1
100826: EQUAL
100827: IFFALSE 101275
// begin if WantPlant ( group [ i ] ) then
100829: LD_VAR 0 4
100833: PUSH
100834: LD_VAR 0 7
100838: ARRAY
100839: PPUSH
100840: CALL 24230 0 1
100844: IFFALSE 100848
// continue ;
100846: GO 99120
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
100848: LD_VAR 0 18
100852: PUSH
100853: LD_VAR 0 4
100857: PUSH
100858: LD_VAR 0 7
100862: ARRAY
100863: PPUSH
100864: CALL_OW 310
100868: NOT
100869: AND
100870: PUSH
100871: LD_VAR 0 14
100875: PUSH
100876: LD_INT 1
100878: ARRAY
100879: PUSH
100880: LD_VAR 0 14
100884: PPUSH
100885: LD_INT 21
100887: PUSH
100888: LD_INT 2
100890: PUSH
100891: EMPTY
100892: LIST
100893: LIST
100894: PUSH
100895: LD_INT 58
100897: PUSH
100898: EMPTY
100899: LIST
100900: PUSH
100901: EMPTY
100902: LIST
100903: LIST
100904: PPUSH
100905: CALL_OW 72
100909: IN
100910: AND
100911: IFFALSE 100947
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
100913: LD_VAR 0 4
100917: PUSH
100918: LD_VAR 0 7
100922: ARRAY
100923: PPUSH
100924: LD_VAR 0 14
100928: PUSH
100929: LD_INT 1
100931: ARRAY
100932: PPUSH
100933: CALL_OW 120
// attacking := true ;
100937: LD_ADDR_VAR 0 29
100941: PUSH
100942: LD_INT 1
100944: ST_TO_ADDR
// continue ;
100945: GO 99120
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
100947: LD_VAR 0 26
100951: PUSH
100952: LD_VAR 0 4
100956: PUSH
100957: LD_VAR 0 7
100961: ARRAY
100962: PPUSH
100963: CALL_OW 257
100967: PUSH
100968: LD_INT 1
100970: EQUAL
100971: AND
100972: PUSH
100973: LD_VAR 0 4
100977: PUSH
100978: LD_VAR 0 7
100982: ARRAY
100983: PPUSH
100984: CALL_OW 256
100988: PUSH
100989: LD_INT 800
100991: LESS
100992: AND
100993: PUSH
100994: LD_VAR 0 4
100998: PUSH
100999: LD_VAR 0 7
101003: ARRAY
101004: PPUSH
101005: CALL_OW 318
101009: NOT
101010: AND
101011: IFFALSE 101028
// ComCrawl ( group [ i ] ) ;
101013: LD_VAR 0 4
101017: PUSH
101018: LD_VAR 0 7
101022: ARRAY
101023: PPUSH
101024: CALL_OW 137
// if f_mines then
101028: LD_VAR 0 21
101032: IFFALSE 101275
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
101034: LD_VAR 0 14
101038: PUSH
101039: LD_INT 1
101041: ARRAY
101042: PPUSH
101043: CALL_OW 247
101047: PUSH
101048: LD_INT 3
101050: EQUAL
101051: PUSH
101052: LD_VAR 0 14
101056: PUSH
101057: LD_INT 1
101059: ARRAY
101060: PUSH
101061: LD_VAR 0 27
101065: IN
101066: NOT
101067: AND
101068: IFFALSE 101275
// begin x := GetX ( tmp [ 1 ] ) ;
101070: LD_ADDR_VAR 0 10
101074: PUSH
101075: LD_VAR 0 14
101079: PUSH
101080: LD_INT 1
101082: ARRAY
101083: PPUSH
101084: CALL_OW 250
101088: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
101089: LD_ADDR_VAR 0 11
101093: PUSH
101094: LD_VAR 0 14
101098: PUSH
101099: LD_INT 1
101101: ARRAY
101102: PPUSH
101103: CALL_OW 251
101107: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
101108: LD_ADDR_VAR 0 12
101112: PUSH
101113: LD_VAR 0 4
101117: PUSH
101118: LD_VAR 0 7
101122: ARRAY
101123: PPUSH
101124: CALL 51171 0 1
101128: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
101129: LD_VAR 0 4
101133: PUSH
101134: LD_VAR 0 7
101138: ARRAY
101139: PPUSH
101140: LD_VAR 0 10
101144: PPUSH
101145: LD_VAR 0 11
101149: PPUSH
101150: LD_VAR 0 14
101154: PUSH
101155: LD_INT 1
101157: ARRAY
101158: PPUSH
101159: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
101163: LD_VAR 0 4
101167: PUSH
101168: LD_VAR 0 7
101172: ARRAY
101173: PPUSH
101174: LD_VAR 0 10
101178: PPUSH
101179: LD_VAR 0 12
101183: PPUSH
101184: LD_INT 7
101186: PPUSH
101187: CALL_OW 272
101191: PPUSH
101192: LD_VAR 0 11
101196: PPUSH
101197: LD_VAR 0 12
101201: PPUSH
101202: LD_INT 7
101204: PPUSH
101205: CALL_OW 273
101209: PPUSH
101210: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
101214: LD_VAR 0 4
101218: PUSH
101219: LD_VAR 0 7
101223: ARRAY
101224: PPUSH
101225: LD_INT 71
101227: PPUSH
101228: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
101232: LD_ADDR_VAR 0 27
101236: PUSH
101237: LD_VAR 0 27
101241: PPUSH
101242: LD_VAR 0 27
101246: PUSH
101247: LD_INT 1
101249: PLUS
101250: PPUSH
101251: LD_VAR 0 14
101255: PUSH
101256: LD_INT 1
101258: ARRAY
101259: PPUSH
101260: CALL_OW 1
101264: ST_TO_ADDR
// attacking := true ;
101265: LD_ADDR_VAR 0 29
101269: PUSH
101270: LD_INT 1
101272: ST_TO_ADDR
// continue ;
101273: GO 99120
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
101275: LD_VAR 0 4
101279: PUSH
101280: LD_VAR 0 7
101284: ARRAY
101285: PPUSH
101286: CALL_OW 257
101290: PUSH
101291: LD_INT 17
101293: EQUAL
101294: PUSH
101295: LD_VAR 0 4
101299: PUSH
101300: LD_VAR 0 7
101304: ARRAY
101305: PPUSH
101306: CALL_OW 110
101310: PUSH
101311: LD_INT 71
101313: EQUAL
101314: NOT
101315: AND
101316: IFFALSE 101462
// begin attacking := false ;
101318: LD_ADDR_VAR 0 29
101322: PUSH
101323: LD_INT 0
101325: ST_TO_ADDR
// k := 5 ;
101326: LD_ADDR_VAR 0 9
101330: PUSH
101331: LD_INT 5
101333: ST_TO_ADDR
// if tmp < k then
101334: LD_VAR 0 14
101338: PUSH
101339: LD_VAR 0 9
101343: LESS
101344: IFFALSE 101356
// k := tmp ;
101346: LD_ADDR_VAR 0 9
101350: PUSH
101351: LD_VAR 0 14
101355: ST_TO_ADDR
// for j = 1 to k do
101356: LD_ADDR_VAR 0 8
101360: PUSH
101361: DOUBLE
101362: LD_INT 1
101364: DEC
101365: ST_TO_ADDR
101366: LD_VAR 0 9
101370: PUSH
101371: FOR_TO
101372: IFFALSE 101460
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
101374: LD_VAR 0 14
101378: PUSH
101379: LD_VAR 0 8
101383: ARRAY
101384: PUSH
101385: LD_VAR 0 14
101389: PPUSH
101390: LD_INT 58
101392: PUSH
101393: EMPTY
101394: LIST
101395: PPUSH
101396: CALL_OW 72
101400: IN
101401: NOT
101402: IFFALSE 101458
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101404: LD_VAR 0 4
101408: PUSH
101409: LD_VAR 0 7
101413: ARRAY
101414: PPUSH
101415: LD_VAR 0 14
101419: PUSH
101420: LD_VAR 0 8
101424: ARRAY
101425: PPUSH
101426: CALL_OW 115
// attacking := true ;
101430: LD_ADDR_VAR 0 29
101434: PUSH
101435: LD_INT 1
101437: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
101438: LD_VAR 0 4
101442: PUSH
101443: LD_VAR 0 7
101447: ARRAY
101448: PPUSH
101449: LD_INT 71
101451: PPUSH
101452: CALL_OW 109
// continue ;
101456: GO 101371
// end ; end ;
101458: GO 101371
101460: POP
101461: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
101462: LD_VAR 0 4
101466: PUSH
101467: LD_VAR 0 7
101471: ARRAY
101472: PPUSH
101473: CALL_OW 257
101477: PUSH
101478: LD_INT 8
101480: EQUAL
101481: PUSH
101482: LD_VAR 0 4
101486: PUSH
101487: LD_VAR 0 7
101491: ARRAY
101492: PPUSH
101493: CALL_OW 264
101497: PUSH
101498: LD_INT 28
101500: PUSH
101501: LD_INT 45
101503: PUSH
101504: LD_INT 7
101506: PUSH
101507: LD_INT 47
101509: PUSH
101510: EMPTY
101511: LIST
101512: LIST
101513: LIST
101514: LIST
101515: IN
101516: OR
101517: IFFALSE 101773
// begin attacking := false ;
101519: LD_ADDR_VAR 0 29
101523: PUSH
101524: LD_INT 0
101526: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
101527: LD_VAR 0 14
101531: PUSH
101532: LD_INT 1
101534: ARRAY
101535: PPUSH
101536: CALL_OW 266
101540: PUSH
101541: LD_INT 32
101543: PUSH
101544: LD_INT 31
101546: PUSH
101547: LD_INT 33
101549: PUSH
101550: LD_INT 4
101552: PUSH
101553: LD_INT 5
101555: PUSH
101556: EMPTY
101557: LIST
101558: LIST
101559: LIST
101560: LIST
101561: LIST
101562: IN
101563: IFFALSE 101749
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
101565: LD_ADDR_VAR 0 9
101569: PUSH
101570: LD_VAR 0 14
101574: PUSH
101575: LD_INT 1
101577: ARRAY
101578: PPUSH
101579: CALL_OW 266
101583: PPUSH
101584: LD_VAR 0 14
101588: PUSH
101589: LD_INT 1
101591: ARRAY
101592: PPUSH
101593: CALL_OW 250
101597: PPUSH
101598: LD_VAR 0 14
101602: PUSH
101603: LD_INT 1
101605: ARRAY
101606: PPUSH
101607: CALL_OW 251
101611: PPUSH
101612: LD_VAR 0 14
101616: PUSH
101617: LD_INT 1
101619: ARRAY
101620: PPUSH
101621: CALL_OW 254
101625: PPUSH
101626: LD_VAR 0 14
101630: PUSH
101631: LD_INT 1
101633: ARRAY
101634: PPUSH
101635: CALL_OW 248
101639: PPUSH
101640: LD_INT 0
101642: PPUSH
101643: CALL 32541 0 6
101647: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
101648: LD_ADDR_VAR 0 8
101652: PUSH
101653: LD_VAR 0 4
101657: PUSH
101658: LD_VAR 0 7
101662: ARRAY
101663: PPUSH
101664: LD_VAR 0 9
101668: PPUSH
101669: CALL 51211 0 2
101673: ST_TO_ADDR
// if j then
101674: LD_VAR 0 8
101678: IFFALSE 101747
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
101680: LD_VAR 0 8
101684: PUSH
101685: LD_INT 1
101687: ARRAY
101688: PPUSH
101689: LD_VAR 0 8
101693: PUSH
101694: LD_INT 2
101696: ARRAY
101697: PPUSH
101698: CALL_OW 488
101702: IFFALSE 101747
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
101704: LD_VAR 0 4
101708: PUSH
101709: LD_VAR 0 7
101713: ARRAY
101714: PPUSH
101715: LD_VAR 0 8
101719: PUSH
101720: LD_INT 1
101722: ARRAY
101723: PPUSH
101724: LD_VAR 0 8
101728: PUSH
101729: LD_INT 2
101731: ARRAY
101732: PPUSH
101733: CALL_OW 116
// attacking := true ;
101737: LD_ADDR_VAR 0 29
101741: PUSH
101742: LD_INT 1
101744: ST_TO_ADDR
// continue ;
101745: GO 99120
// end ; end else
101747: GO 101773
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101749: LD_VAR 0 4
101753: PUSH
101754: LD_VAR 0 7
101758: ARRAY
101759: PPUSH
101760: LD_VAR 0 14
101764: PUSH
101765: LD_INT 1
101767: ARRAY
101768: PPUSH
101769: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
101773: LD_VAR 0 4
101777: PUSH
101778: LD_VAR 0 7
101782: ARRAY
101783: PPUSH
101784: CALL_OW 265
101788: PUSH
101789: LD_INT 11
101791: EQUAL
101792: IFFALSE 102070
// begin k := 10 ;
101794: LD_ADDR_VAR 0 9
101798: PUSH
101799: LD_INT 10
101801: ST_TO_ADDR
// x := 0 ;
101802: LD_ADDR_VAR 0 10
101806: PUSH
101807: LD_INT 0
101809: ST_TO_ADDR
// if tmp < k then
101810: LD_VAR 0 14
101814: PUSH
101815: LD_VAR 0 9
101819: LESS
101820: IFFALSE 101832
// k := tmp ;
101822: LD_ADDR_VAR 0 9
101826: PUSH
101827: LD_VAR 0 14
101831: ST_TO_ADDR
// for j = k downto 1 do
101832: LD_ADDR_VAR 0 8
101836: PUSH
101837: DOUBLE
101838: LD_VAR 0 9
101842: INC
101843: ST_TO_ADDR
101844: LD_INT 1
101846: PUSH
101847: FOR_DOWNTO
101848: IFFALSE 101923
// begin if GetType ( tmp [ j ] ) = unit_human then
101850: LD_VAR 0 14
101854: PUSH
101855: LD_VAR 0 8
101859: ARRAY
101860: PPUSH
101861: CALL_OW 247
101865: PUSH
101866: LD_INT 1
101868: EQUAL
101869: IFFALSE 101921
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
101871: LD_VAR 0 4
101875: PUSH
101876: LD_VAR 0 7
101880: ARRAY
101881: PPUSH
101882: LD_VAR 0 14
101886: PUSH
101887: LD_VAR 0 8
101891: ARRAY
101892: PPUSH
101893: CALL 51482 0 2
// x := tmp [ j ] ;
101897: LD_ADDR_VAR 0 10
101901: PUSH
101902: LD_VAR 0 14
101906: PUSH
101907: LD_VAR 0 8
101911: ARRAY
101912: ST_TO_ADDR
// attacking := true ;
101913: LD_ADDR_VAR 0 29
101917: PUSH
101918: LD_INT 1
101920: ST_TO_ADDR
// end ; end ;
101921: GO 101847
101923: POP
101924: POP
// if not x then
101925: LD_VAR 0 10
101929: NOT
101930: IFFALSE 102070
// begin attacking := true ;
101932: LD_ADDR_VAR 0 29
101936: PUSH
101937: LD_INT 1
101939: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
101940: LD_VAR 0 4
101944: PUSH
101945: LD_VAR 0 7
101949: ARRAY
101950: PPUSH
101951: CALL_OW 250
101955: PPUSH
101956: LD_VAR 0 4
101960: PUSH
101961: LD_VAR 0 7
101965: ARRAY
101966: PPUSH
101967: CALL_OW 251
101971: PPUSH
101972: CALL_OW 546
101976: PUSH
101977: LD_INT 2
101979: ARRAY
101980: PUSH
101981: LD_VAR 0 14
101985: PUSH
101986: LD_INT 1
101988: ARRAY
101989: PPUSH
101990: CALL_OW 250
101994: PPUSH
101995: LD_VAR 0 14
101999: PUSH
102000: LD_INT 1
102002: ARRAY
102003: PPUSH
102004: CALL_OW 251
102008: PPUSH
102009: CALL_OW 546
102013: PUSH
102014: LD_INT 2
102016: ARRAY
102017: EQUAL
102018: IFFALSE 102046
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
102020: LD_VAR 0 4
102024: PUSH
102025: LD_VAR 0 7
102029: ARRAY
102030: PPUSH
102031: LD_VAR 0 14
102035: PUSH
102036: LD_INT 1
102038: ARRAY
102039: PPUSH
102040: CALL 51482 0 2
102044: GO 102070
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102046: LD_VAR 0 4
102050: PUSH
102051: LD_VAR 0 7
102055: ARRAY
102056: PPUSH
102057: LD_VAR 0 14
102061: PUSH
102062: LD_INT 1
102064: ARRAY
102065: PPUSH
102066: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
102070: LD_VAR 0 4
102074: PUSH
102075: LD_VAR 0 7
102079: ARRAY
102080: PPUSH
102081: CALL_OW 264
102085: PUSH
102086: LD_INT 29
102088: EQUAL
102089: IFFALSE 102455
// begin if WantsToAttack ( group [ i ] ) in bombed then
102091: LD_VAR 0 4
102095: PUSH
102096: LD_VAR 0 7
102100: ARRAY
102101: PPUSH
102102: CALL_OW 319
102106: PUSH
102107: LD_VAR 0 28
102111: IN
102112: IFFALSE 102116
// continue ;
102114: GO 99120
// k := 8 ;
102116: LD_ADDR_VAR 0 9
102120: PUSH
102121: LD_INT 8
102123: ST_TO_ADDR
// x := 0 ;
102124: LD_ADDR_VAR 0 10
102128: PUSH
102129: LD_INT 0
102131: ST_TO_ADDR
// if tmp < k then
102132: LD_VAR 0 14
102136: PUSH
102137: LD_VAR 0 9
102141: LESS
102142: IFFALSE 102154
// k := tmp ;
102144: LD_ADDR_VAR 0 9
102148: PUSH
102149: LD_VAR 0 14
102153: ST_TO_ADDR
// for j = 1 to k do
102154: LD_ADDR_VAR 0 8
102158: PUSH
102159: DOUBLE
102160: LD_INT 1
102162: DEC
102163: ST_TO_ADDR
102164: LD_VAR 0 9
102168: PUSH
102169: FOR_TO
102170: IFFALSE 102302
// begin if GetType ( tmp [ j ] ) = unit_building then
102172: LD_VAR 0 14
102176: PUSH
102177: LD_VAR 0 8
102181: ARRAY
102182: PPUSH
102183: CALL_OW 247
102187: PUSH
102188: LD_INT 3
102190: EQUAL
102191: IFFALSE 102300
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
102193: LD_VAR 0 14
102197: PUSH
102198: LD_VAR 0 8
102202: ARRAY
102203: PUSH
102204: LD_VAR 0 28
102208: IN
102209: NOT
102210: PUSH
102211: LD_VAR 0 14
102215: PUSH
102216: LD_VAR 0 8
102220: ARRAY
102221: PPUSH
102222: CALL_OW 313
102226: AND
102227: IFFALSE 102300
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102229: LD_VAR 0 4
102233: PUSH
102234: LD_VAR 0 7
102238: ARRAY
102239: PPUSH
102240: LD_VAR 0 14
102244: PUSH
102245: LD_VAR 0 8
102249: ARRAY
102250: PPUSH
102251: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
102255: LD_ADDR_VAR 0 28
102259: PUSH
102260: LD_VAR 0 28
102264: PPUSH
102265: LD_VAR 0 28
102269: PUSH
102270: LD_INT 1
102272: PLUS
102273: PPUSH
102274: LD_VAR 0 14
102278: PUSH
102279: LD_VAR 0 8
102283: ARRAY
102284: PPUSH
102285: CALL_OW 1
102289: ST_TO_ADDR
// attacking := true ;
102290: LD_ADDR_VAR 0 29
102294: PUSH
102295: LD_INT 1
102297: ST_TO_ADDR
// break ;
102298: GO 102302
// end ; end ;
102300: GO 102169
102302: POP
102303: POP
// if not attacking and f_attack_depot then
102304: LD_VAR 0 29
102308: NOT
102309: PUSH
102310: LD_VAR 0 25
102314: AND
102315: IFFALSE 102410
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
102317: LD_ADDR_VAR 0 13
102321: PUSH
102322: LD_VAR 0 14
102326: PPUSH
102327: LD_INT 2
102329: PUSH
102330: LD_INT 30
102332: PUSH
102333: LD_INT 0
102335: PUSH
102336: EMPTY
102337: LIST
102338: LIST
102339: PUSH
102340: LD_INT 30
102342: PUSH
102343: LD_INT 1
102345: PUSH
102346: EMPTY
102347: LIST
102348: LIST
102349: PUSH
102350: EMPTY
102351: LIST
102352: LIST
102353: LIST
102354: PPUSH
102355: CALL_OW 72
102359: ST_TO_ADDR
// if z then
102360: LD_VAR 0 13
102364: IFFALSE 102410
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
102366: LD_VAR 0 4
102370: PUSH
102371: LD_VAR 0 7
102375: ARRAY
102376: PPUSH
102377: LD_VAR 0 13
102381: PPUSH
102382: LD_VAR 0 4
102386: PUSH
102387: LD_VAR 0 7
102391: ARRAY
102392: PPUSH
102393: CALL_OW 74
102397: PPUSH
102398: CALL_OW 115
// attacking := true ;
102402: LD_ADDR_VAR 0 29
102406: PUSH
102407: LD_INT 1
102409: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
102410: LD_VAR 0 4
102414: PUSH
102415: LD_VAR 0 7
102419: ARRAY
102420: PPUSH
102421: CALL_OW 256
102425: PUSH
102426: LD_INT 500
102428: LESS
102429: IFFALSE 102455
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102431: LD_VAR 0 4
102435: PUSH
102436: LD_VAR 0 7
102440: ARRAY
102441: PPUSH
102442: LD_VAR 0 14
102446: PUSH
102447: LD_INT 1
102449: ARRAY
102450: PPUSH
102451: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
102455: LD_VAR 0 4
102459: PUSH
102460: LD_VAR 0 7
102464: ARRAY
102465: PPUSH
102466: CALL_OW 264
102470: PUSH
102471: LD_INT 49
102473: EQUAL
102474: IFFALSE 102595
// begin if not HasTask ( group [ i ] ) then
102476: LD_VAR 0 4
102480: PUSH
102481: LD_VAR 0 7
102485: ARRAY
102486: PPUSH
102487: CALL_OW 314
102491: NOT
102492: IFFALSE 102595
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
102494: LD_ADDR_VAR 0 9
102498: PUSH
102499: LD_INT 81
102501: PUSH
102502: LD_VAR 0 4
102506: PUSH
102507: LD_VAR 0 7
102511: ARRAY
102512: PPUSH
102513: CALL_OW 255
102517: PUSH
102518: EMPTY
102519: LIST
102520: LIST
102521: PPUSH
102522: CALL_OW 69
102526: PPUSH
102527: LD_VAR 0 4
102531: PUSH
102532: LD_VAR 0 7
102536: ARRAY
102537: PPUSH
102538: CALL_OW 74
102542: ST_TO_ADDR
// if k then
102543: LD_VAR 0 9
102547: IFFALSE 102595
// if GetDistUnits ( group [ i ] , k ) > 10 then
102549: LD_VAR 0 4
102553: PUSH
102554: LD_VAR 0 7
102558: ARRAY
102559: PPUSH
102560: LD_VAR 0 9
102564: PPUSH
102565: CALL_OW 296
102569: PUSH
102570: LD_INT 10
102572: GREATER
102573: IFFALSE 102595
// ComMoveUnit ( group [ i ] , k ) ;
102575: LD_VAR 0 4
102579: PUSH
102580: LD_VAR 0 7
102584: ARRAY
102585: PPUSH
102586: LD_VAR 0 9
102590: PPUSH
102591: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
102595: LD_VAR 0 4
102599: PUSH
102600: LD_VAR 0 7
102604: ARRAY
102605: PPUSH
102606: CALL_OW 256
102610: PUSH
102611: LD_INT 250
102613: LESS
102614: PUSH
102615: LD_VAR 0 4
102619: PUSH
102620: LD_VAR 0 7
102624: ARRAY
102625: PUSH
102626: LD_INT 21
102628: PUSH
102629: LD_INT 2
102631: PUSH
102632: EMPTY
102633: LIST
102634: LIST
102635: PUSH
102636: LD_INT 23
102638: PUSH
102639: LD_INT 2
102641: PUSH
102642: EMPTY
102643: LIST
102644: LIST
102645: PUSH
102646: EMPTY
102647: LIST
102648: LIST
102649: PPUSH
102650: CALL_OW 69
102654: IN
102655: AND
102656: IFFALSE 102781
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
102658: LD_ADDR_VAR 0 9
102662: PUSH
102663: LD_OWVAR 3
102667: PUSH
102668: LD_VAR 0 4
102672: PUSH
102673: LD_VAR 0 7
102677: ARRAY
102678: DIFF
102679: PPUSH
102680: LD_VAR 0 4
102684: PUSH
102685: LD_VAR 0 7
102689: ARRAY
102690: PPUSH
102691: CALL_OW 74
102695: ST_TO_ADDR
// if not k then
102696: LD_VAR 0 9
102700: NOT
102701: IFFALSE 102705
// continue ;
102703: GO 99120
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
102705: LD_VAR 0 9
102709: PUSH
102710: LD_INT 81
102712: PUSH
102713: LD_VAR 0 4
102717: PUSH
102718: LD_VAR 0 7
102722: ARRAY
102723: PPUSH
102724: CALL_OW 255
102728: PUSH
102729: EMPTY
102730: LIST
102731: LIST
102732: PPUSH
102733: CALL_OW 69
102737: IN
102738: PUSH
102739: LD_VAR 0 9
102743: PPUSH
102744: LD_VAR 0 4
102748: PUSH
102749: LD_VAR 0 7
102753: ARRAY
102754: PPUSH
102755: CALL_OW 296
102759: PUSH
102760: LD_INT 5
102762: LESS
102763: AND
102764: IFFALSE 102781
// ComAutodestruct ( group [ i ] ) ;
102766: LD_VAR 0 4
102770: PUSH
102771: LD_VAR 0 7
102775: ARRAY
102776: PPUSH
102777: CALL 51380 0 1
// end ; if f_attack_depot then
102781: LD_VAR 0 25
102785: IFFALSE 102897
// begin k := 6 ;
102787: LD_ADDR_VAR 0 9
102791: PUSH
102792: LD_INT 6
102794: ST_TO_ADDR
// if tmp < k then
102795: LD_VAR 0 14
102799: PUSH
102800: LD_VAR 0 9
102804: LESS
102805: IFFALSE 102817
// k := tmp ;
102807: LD_ADDR_VAR 0 9
102811: PUSH
102812: LD_VAR 0 14
102816: ST_TO_ADDR
// for j = 1 to k do
102817: LD_ADDR_VAR 0 8
102821: PUSH
102822: DOUBLE
102823: LD_INT 1
102825: DEC
102826: ST_TO_ADDR
102827: LD_VAR 0 9
102831: PUSH
102832: FOR_TO
102833: IFFALSE 102895
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
102835: LD_VAR 0 8
102839: PPUSH
102840: CALL_OW 266
102844: PUSH
102845: LD_INT 0
102847: PUSH
102848: LD_INT 1
102850: PUSH
102851: EMPTY
102852: LIST
102853: LIST
102854: IN
102855: IFFALSE 102893
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102857: LD_VAR 0 4
102861: PUSH
102862: LD_VAR 0 7
102866: ARRAY
102867: PPUSH
102868: LD_VAR 0 14
102872: PUSH
102873: LD_VAR 0 8
102877: ARRAY
102878: PPUSH
102879: CALL_OW 115
// attacking := true ;
102883: LD_ADDR_VAR 0 29
102887: PUSH
102888: LD_INT 1
102890: ST_TO_ADDR
// break ;
102891: GO 102895
// end ;
102893: GO 102832
102895: POP
102896: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
102897: LD_VAR 0 4
102901: PUSH
102902: LD_VAR 0 7
102906: ARRAY
102907: PPUSH
102908: CALL_OW 302
102912: PUSH
102913: LD_VAR 0 29
102917: NOT
102918: AND
102919: IFFALSE 103241
// begin if GetTag ( group [ i ] ) = 71 then
102921: LD_VAR 0 4
102925: PUSH
102926: LD_VAR 0 7
102930: ARRAY
102931: PPUSH
102932: CALL_OW 110
102936: PUSH
102937: LD_INT 71
102939: EQUAL
102940: IFFALSE 102981
// begin if HasTask ( group [ i ] ) then
102942: LD_VAR 0 4
102946: PUSH
102947: LD_VAR 0 7
102951: ARRAY
102952: PPUSH
102953: CALL_OW 314
102957: IFFALSE 102963
// continue else
102959: GO 99120
102961: GO 102981
// SetTag ( group [ i ] , 0 ) ;
102963: LD_VAR 0 4
102967: PUSH
102968: LD_VAR 0 7
102972: ARRAY
102973: PPUSH
102974: LD_INT 0
102976: PPUSH
102977: CALL_OW 109
// end ; k := 8 ;
102981: LD_ADDR_VAR 0 9
102985: PUSH
102986: LD_INT 8
102988: ST_TO_ADDR
// x := 0 ;
102989: LD_ADDR_VAR 0 10
102993: PUSH
102994: LD_INT 0
102996: ST_TO_ADDR
// if tmp < k then
102997: LD_VAR 0 14
103001: PUSH
103002: LD_VAR 0 9
103006: LESS
103007: IFFALSE 103019
// k := tmp ;
103009: LD_ADDR_VAR 0 9
103013: PUSH
103014: LD_VAR 0 14
103018: ST_TO_ADDR
// for j = 1 to k do
103019: LD_ADDR_VAR 0 8
103023: PUSH
103024: DOUBLE
103025: LD_INT 1
103027: DEC
103028: ST_TO_ADDR
103029: LD_VAR 0 9
103033: PUSH
103034: FOR_TO
103035: IFFALSE 103133
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
103037: LD_VAR 0 14
103041: PUSH
103042: LD_VAR 0 8
103046: ARRAY
103047: PPUSH
103048: CALL_OW 247
103052: PUSH
103053: LD_INT 1
103055: EQUAL
103056: PUSH
103057: LD_VAR 0 14
103061: PUSH
103062: LD_VAR 0 8
103066: ARRAY
103067: PPUSH
103068: CALL_OW 256
103072: PUSH
103073: LD_INT 250
103075: LESS
103076: PUSH
103077: LD_VAR 0 20
103081: AND
103082: PUSH
103083: LD_VAR 0 20
103087: NOT
103088: PUSH
103089: LD_VAR 0 14
103093: PUSH
103094: LD_VAR 0 8
103098: ARRAY
103099: PPUSH
103100: CALL_OW 256
103104: PUSH
103105: LD_INT 250
103107: GREATEREQUAL
103108: AND
103109: OR
103110: AND
103111: IFFALSE 103131
// begin x := tmp [ j ] ;
103113: LD_ADDR_VAR 0 10
103117: PUSH
103118: LD_VAR 0 14
103122: PUSH
103123: LD_VAR 0 8
103127: ARRAY
103128: ST_TO_ADDR
// break ;
103129: GO 103133
// end ;
103131: GO 103034
103133: POP
103134: POP
// if x then
103135: LD_VAR 0 10
103139: IFFALSE 103163
// ComAttackUnit ( group [ i ] , x ) else
103141: LD_VAR 0 4
103145: PUSH
103146: LD_VAR 0 7
103150: ARRAY
103151: PPUSH
103152: LD_VAR 0 10
103156: PPUSH
103157: CALL_OW 115
103161: GO 103187
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
103163: LD_VAR 0 4
103167: PUSH
103168: LD_VAR 0 7
103172: ARRAY
103173: PPUSH
103174: LD_VAR 0 14
103178: PUSH
103179: LD_INT 1
103181: ARRAY
103182: PPUSH
103183: CALL_OW 115
// if not HasTask ( group [ i ] ) then
103187: LD_VAR 0 4
103191: PUSH
103192: LD_VAR 0 7
103196: ARRAY
103197: PPUSH
103198: CALL_OW 314
103202: NOT
103203: IFFALSE 103241
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
103205: LD_VAR 0 4
103209: PUSH
103210: LD_VAR 0 7
103214: ARRAY
103215: PPUSH
103216: LD_VAR 0 14
103220: PPUSH
103221: LD_VAR 0 4
103225: PUSH
103226: LD_VAR 0 7
103230: ARRAY
103231: PPUSH
103232: CALL_OW 74
103236: PPUSH
103237: CALL_OW 115
// end ; end ; end ;
103241: GO 99120
103243: POP
103244: POP
// wait ( 0 0$2 ) ;
103245: LD_INT 70
103247: PPUSH
103248: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
103252: LD_VAR 0 4
103256: NOT
103257: PUSH
103258: LD_VAR 0 4
103262: PUSH
103263: EMPTY
103264: EQUAL
103265: OR
103266: PUSH
103267: LD_INT 81
103269: PUSH
103270: LD_VAR 0 35
103274: PUSH
103275: EMPTY
103276: LIST
103277: LIST
103278: PPUSH
103279: CALL_OW 69
103283: NOT
103284: OR
103285: IFFALSE 99105
// end ;
103287: LD_VAR 0 2
103291: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
103292: LD_INT 0
103294: PPUSH
103295: PPUSH
103296: PPUSH
103297: PPUSH
103298: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
103299: LD_VAR 0 1
103303: NOT
103304: PUSH
103305: LD_EXP 45
103309: PUSH
103310: LD_VAR 0 1
103314: ARRAY
103315: NOT
103316: OR
103317: PUSH
103318: LD_VAR 0 2
103322: NOT
103323: OR
103324: PUSH
103325: LD_VAR 0 3
103329: NOT
103330: OR
103331: IFFALSE 103335
// exit ;
103333: GO 103848
// side := mc_sides [ base ] ;
103335: LD_ADDR_VAR 0 6
103339: PUSH
103340: LD_EXP 71
103344: PUSH
103345: LD_VAR 0 1
103349: ARRAY
103350: ST_TO_ADDR
// if not side then
103351: LD_VAR 0 6
103355: NOT
103356: IFFALSE 103360
// exit ;
103358: GO 103848
// for i in solds do
103360: LD_ADDR_VAR 0 7
103364: PUSH
103365: LD_VAR 0 2
103369: PUSH
103370: FOR_IN
103371: IFFALSE 103432
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
103373: LD_VAR 0 7
103377: PPUSH
103378: CALL_OW 310
103382: PPUSH
103383: CALL_OW 266
103387: PUSH
103388: LD_INT 32
103390: PUSH
103391: LD_INT 31
103393: PUSH
103394: EMPTY
103395: LIST
103396: LIST
103397: IN
103398: IFFALSE 103418
// solds := solds diff i else
103400: LD_ADDR_VAR 0 2
103404: PUSH
103405: LD_VAR 0 2
103409: PUSH
103410: LD_VAR 0 7
103414: DIFF
103415: ST_TO_ADDR
103416: GO 103430
// SetTag ( i , 18 ) ;
103418: LD_VAR 0 7
103422: PPUSH
103423: LD_INT 18
103425: PPUSH
103426: CALL_OW 109
103430: GO 103370
103432: POP
103433: POP
// if not solds then
103434: LD_VAR 0 2
103438: NOT
103439: IFFALSE 103443
// exit ;
103441: GO 103848
// repeat wait ( 0 0$1 ) ;
103443: LD_INT 35
103445: PPUSH
103446: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
103450: LD_ADDR_VAR 0 5
103454: PUSH
103455: LD_VAR 0 6
103459: PPUSH
103460: LD_VAR 0 3
103464: PPUSH
103465: CALL 21095 0 2
103469: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103470: LD_EXP 45
103474: PUSH
103475: LD_VAR 0 1
103479: ARRAY
103480: NOT
103481: PUSH
103482: LD_EXP 45
103486: PUSH
103487: LD_VAR 0 1
103491: ARRAY
103492: PUSH
103493: EMPTY
103494: EQUAL
103495: OR
103496: IFFALSE 103533
// begin for i in solds do
103498: LD_ADDR_VAR 0 7
103502: PUSH
103503: LD_VAR 0 2
103507: PUSH
103508: FOR_IN
103509: IFFALSE 103522
// ComStop ( i ) ;
103511: LD_VAR 0 7
103515: PPUSH
103516: CALL_OW 141
103520: GO 103508
103522: POP
103523: POP
// solds := [ ] ;
103524: LD_ADDR_VAR 0 2
103528: PUSH
103529: EMPTY
103530: ST_TO_ADDR
// exit ;
103531: GO 103848
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
103533: LD_VAR 0 5
103537: NOT
103538: PUSH
103539: LD_VAR 0 5
103543: PUSH
103544: LD_INT 3
103546: GREATER
103547: OR
103548: PUSH
103549: LD_EXP 67
103553: PUSH
103554: LD_VAR 0 1
103558: ARRAY
103559: OR
103560: IFFALSE 103601
// begin for i in solds do
103562: LD_ADDR_VAR 0 7
103566: PUSH
103567: LD_VAR 0 2
103571: PUSH
103572: FOR_IN
103573: IFFALSE 103597
// if HasTask ( i ) then
103575: LD_VAR 0 7
103579: PPUSH
103580: CALL_OW 314
103584: IFFALSE 103595
// ComStop ( i ) ;
103586: LD_VAR 0 7
103590: PPUSH
103591: CALL_OW 141
103595: GO 103572
103597: POP
103598: POP
// break ;
103599: GO 103836
// end ; for i in solds do
103601: LD_ADDR_VAR 0 7
103605: PUSH
103606: LD_VAR 0 2
103610: PUSH
103611: FOR_IN
103612: IFFALSE 103828
// begin if IsInUnit ( i ) then
103614: LD_VAR 0 7
103618: PPUSH
103619: CALL_OW 310
103623: IFFALSE 103634
// ComExitBuilding ( i ) ;
103625: LD_VAR 0 7
103629: PPUSH
103630: CALL_OW 122
// if GetLives ( i ) > 333 then
103634: LD_VAR 0 7
103638: PPUSH
103639: CALL_OW 256
103643: PUSH
103644: LD_INT 333
103646: GREATER
103647: IFFALSE 103675
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
103649: LD_VAR 0 7
103653: PPUSH
103654: LD_VAR 0 5
103658: PPUSH
103659: LD_VAR 0 7
103663: PPUSH
103664: CALL_OW 74
103668: PPUSH
103669: CALL_OW 115
103673: GO 103826
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
103675: LD_ADDR_VAR 0 8
103679: PUSH
103680: LD_EXP 45
103684: PUSH
103685: LD_VAR 0 1
103689: ARRAY
103690: PPUSH
103691: LD_INT 2
103693: PUSH
103694: LD_INT 30
103696: PUSH
103697: LD_INT 0
103699: PUSH
103700: EMPTY
103701: LIST
103702: LIST
103703: PUSH
103704: LD_INT 30
103706: PUSH
103707: LD_INT 1
103709: PUSH
103710: EMPTY
103711: LIST
103712: LIST
103713: PUSH
103714: LD_INT 30
103716: PUSH
103717: LD_INT 6
103719: PUSH
103720: EMPTY
103721: LIST
103722: LIST
103723: PUSH
103724: EMPTY
103725: LIST
103726: LIST
103727: LIST
103728: LIST
103729: PPUSH
103730: CALL_OW 72
103734: PPUSH
103735: LD_VAR 0 7
103739: PPUSH
103740: CALL_OW 74
103744: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
103745: LD_VAR 0 7
103749: PPUSH
103750: LD_VAR 0 8
103754: PPUSH
103755: CALL_OW 250
103759: PPUSH
103760: LD_INT 3
103762: PPUSH
103763: LD_INT 5
103765: PPUSH
103766: CALL_OW 272
103770: PPUSH
103771: LD_VAR 0 8
103775: PPUSH
103776: CALL_OW 251
103780: PPUSH
103781: LD_INT 3
103783: PPUSH
103784: LD_INT 5
103786: PPUSH
103787: CALL_OW 273
103791: PPUSH
103792: CALL_OW 111
// SetTag ( i , 0 ) ;
103796: LD_VAR 0 7
103800: PPUSH
103801: LD_INT 0
103803: PPUSH
103804: CALL_OW 109
// solds := solds diff i ;
103808: LD_ADDR_VAR 0 2
103812: PUSH
103813: LD_VAR 0 2
103817: PUSH
103818: LD_VAR 0 7
103822: DIFF
103823: ST_TO_ADDR
// continue ;
103824: GO 103611
// end ; end ;
103826: GO 103611
103828: POP
103829: POP
// until solds ;
103830: LD_VAR 0 2
103834: IFFALSE 103443
// MC_Reset ( base , 18 ) ;
103836: LD_VAR 0 1
103840: PPUSH
103841: LD_INT 18
103843: PPUSH
103844: CALL 59915 0 2
// end ;
103848: LD_VAR 0 4
103852: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
103853: LD_INT 0
103855: PPUSH
103856: PPUSH
103857: PPUSH
103858: PPUSH
103859: PPUSH
103860: PPUSH
103861: PPUSH
103862: PPUSH
103863: PPUSH
103864: PPUSH
103865: PPUSH
103866: PPUSH
103867: PPUSH
103868: PPUSH
103869: PPUSH
103870: PPUSH
103871: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
103872: LD_ADDR_VAR 0 13
103876: PUSH
103877: LD_EXP 45
103881: PUSH
103882: LD_VAR 0 1
103886: ARRAY
103887: PPUSH
103888: LD_INT 25
103890: PUSH
103891: LD_INT 3
103893: PUSH
103894: EMPTY
103895: LIST
103896: LIST
103897: PPUSH
103898: CALL_OW 72
103902: ST_TO_ADDR
// if mc_remote_driver [ base ] then
103903: LD_EXP 85
103907: PUSH
103908: LD_VAR 0 1
103912: ARRAY
103913: IFFALSE 103937
// mechs := mechs diff mc_remote_driver [ base ] ;
103915: LD_ADDR_VAR 0 13
103919: PUSH
103920: LD_VAR 0 13
103924: PUSH
103925: LD_EXP 85
103929: PUSH
103930: LD_VAR 0 1
103934: ARRAY
103935: DIFF
103936: ST_TO_ADDR
// for i in mechs do
103937: LD_ADDR_VAR 0 5
103941: PUSH
103942: LD_VAR 0 13
103946: PUSH
103947: FOR_IN
103948: IFFALSE 103983
// if GetTag ( i ) > 0 then
103950: LD_VAR 0 5
103954: PPUSH
103955: CALL_OW 110
103959: PUSH
103960: LD_INT 0
103962: GREATER
103963: IFFALSE 103981
// mechs := mechs diff i ;
103965: LD_ADDR_VAR 0 13
103969: PUSH
103970: LD_VAR 0 13
103974: PUSH
103975: LD_VAR 0 5
103979: DIFF
103980: ST_TO_ADDR
103981: GO 103947
103983: POP
103984: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103985: LD_ADDR_VAR 0 9
103989: PUSH
103990: LD_EXP 45
103994: PUSH
103995: LD_VAR 0 1
103999: ARRAY
104000: PPUSH
104001: LD_INT 2
104003: PUSH
104004: LD_INT 25
104006: PUSH
104007: LD_INT 1
104009: PUSH
104010: EMPTY
104011: LIST
104012: LIST
104013: PUSH
104014: LD_INT 25
104016: PUSH
104017: LD_INT 5
104019: PUSH
104020: EMPTY
104021: LIST
104022: LIST
104023: PUSH
104024: LD_INT 25
104026: PUSH
104027: LD_INT 8
104029: PUSH
104030: EMPTY
104031: LIST
104032: LIST
104033: PUSH
104034: LD_INT 25
104036: PUSH
104037: LD_INT 9
104039: PUSH
104040: EMPTY
104041: LIST
104042: LIST
104043: PUSH
104044: EMPTY
104045: LIST
104046: LIST
104047: LIST
104048: LIST
104049: LIST
104050: PPUSH
104051: CALL_OW 72
104055: ST_TO_ADDR
// if not defenders and not solds then
104056: LD_VAR 0 2
104060: NOT
104061: PUSH
104062: LD_VAR 0 9
104066: NOT
104067: AND
104068: IFFALSE 104072
// exit ;
104070: GO 105698
// depot_under_attack := false ;
104072: LD_ADDR_VAR 0 17
104076: PUSH
104077: LD_INT 0
104079: ST_TO_ADDR
// sold_defenders := [ ] ;
104080: LD_ADDR_VAR 0 18
104084: PUSH
104085: EMPTY
104086: ST_TO_ADDR
// if mechs then
104087: LD_VAR 0 13
104091: IFFALSE 104220
// for i in defenders do
104093: LD_ADDR_VAR 0 5
104097: PUSH
104098: LD_VAR 0 2
104102: PUSH
104103: FOR_IN
104104: IFFALSE 104218
// begin SetTag ( i , 20 ) ;
104106: LD_VAR 0 5
104110: PPUSH
104111: LD_INT 20
104113: PPUSH
104114: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
104118: LD_VAR 0 5
104122: PPUSH
104123: CALL_OW 263
104127: PUSH
104128: LD_INT 1
104130: EQUAL
104131: PUSH
104132: LD_VAR 0 5
104136: PPUSH
104137: CALL_OW 311
104141: NOT
104142: AND
104143: PUSH
104144: LD_VAR 0 13
104148: AND
104149: IFFALSE 104216
// begin un := mechs [ 1 ] ;
104151: LD_ADDR_VAR 0 11
104155: PUSH
104156: LD_VAR 0 13
104160: PUSH
104161: LD_INT 1
104163: ARRAY
104164: ST_TO_ADDR
// ComExitBuilding ( un ) ;
104165: LD_VAR 0 11
104169: PPUSH
104170: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
104174: LD_VAR 0 11
104178: PPUSH
104179: LD_VAR 0 5
104183: PPUSH
104184: CALL_OW 180
// SetTag ( un , 19 ) ;
104188: LD_VAR 0 11
104192: PPUSH
104193: LD_INT 19
104195: PPUSH
104196: CALL_OW 109
// mechs := mechs diff un ;
104200: LD_ADDR_VAR 0 13
104204: PUSH
104205: LD_VAR 0 13
104209: PUSH
104210: LD_VAR 0 11
104214: DIFF
104215: ST_TO_ADDR
// end ; end ;
104216: GO 104103
104218: POP
104219: POP
// if solds then
104220: LD_VAR 0 9
104224: IFFALSE 104283
// for i in solds do
104226: LD_ADDR_VAR 0 5
104230: PUSH
104231: LD_VAR 0 9
104235: PUSH
104236: FOR_IN
104237: IFFALSE 104281
// if not GetTag ( i ) then
104239: LD_VAR 0 5
104243: PPUSH
104244: CALL_OW 110
104248: NOT
104249: IFFALSE 104279
// begin defenders := defenders union i ;
104251: LD_ADDR_VAR 0 2
104255: PUSH
104256: LD_VAR 0 2
104260: PUSH
104261: LD_VAR 0 5
104265: UNION
104266: ST_TO_ADDR
// SetTag ( i , 18 ) ;
104267: LD_VAR 0 5
104271: PPUSH
104272: LD_INT 18
104274: PPUSH
104275: CALL_OW 109
// end ;
104279: GO 104236
104281: POP
104282: POP
// repeat wait ( 0 0$1 ) ;
104283: LD_INT 35
104285: PPUSH
104286: CALL_OW 67
// enemy := mc_scan [ base ] ;
104290: LD_ADDR_VAR 0 3
104294: PUSH
104295: LD_EXP 68
104299: PUSH
104300: LD_VAR 0 1
104304: ARRAY
104305: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104306: LD_EXP 45
104310: PUSH
104311: LD_VAR 0 1
104315: ARRAY
104316: NOT
104317: PUSH
104318: LD_EXP 45
104322: PUSH
104323: LD_VAR 0 1
104327: ARRAY
104328: PUSH
104329: EMPTY
104330: EQUAL
104331: OR
104332: IFFALSE 104369
// begin for i in defenders do
104334: LD_ADDR_VAR 0 5
104338: PUSH
104339: LD_VAR 0 2
104343: PUSH
104344: FOR_IN
104345: IFFALSE 104358
// ComStop ( i ) ;
104347: LD_VAR 0 5
104351: PPUSH
104352: CALL_OW 141
104356: GO 104344
104358: POP
104359: POP
// defenders := [ ] ;
104360: LD_ADDR_VAR 0 2
104364: PUSH
104365: EMPTY
104366: ST_TO_ADDR
// exit ;
104367: GO 105698
// end ; for i in defenders do
104369: LD_ADDR_VAR 0 5
104373: PUSH
104374: LD_VAR 0 2
104378: PUSH
104379: FOR_IN
104380: IFFALSE 105198
// begin e := NearestUnitToUnit ( enemy , i ) ;
104382: LD_ADDR_VAR 0 14
104386: PUSH
104387: LD_VAR 0 3
104391: PPUSH
104392: LD_VAR 0 5
104396: PPUSH
104397: CALL_OW 74
104401: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
104402: LD_ADDR_VAR 0 8
104406: PUSH
104407: LD_EXP 45
104411: PUSH
104412: LD_VAR 0 1
104416: ARRAY
104417: PPUSH
104418: LD_INT 2
104420: PUSH
104421: LD_INT 30
104423: PUSH
104424: LD_INT 0
104426: PUSH
104427: EMPTY
104428: LIST
104429: LIST
104430: PUSH
104431: LD_INT 30
104433: PUSH
104434: LD_INT 1
104436: PUSH
104437: EMPTY
104438: LIST
104439: LIST
104440: PUSH
104441: EMPTY
104442: LIST
104443: LIST
104444: LIST
104445: PPUSH
104446: CALL_OW 72
104450: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
104451: LD_ADDR_VAR 0 17
104455: PUSH
104456: LD_VAR 0 8
104460: NOT
104461: PUSH
104462: LD_VAR 0 8
104466: PPUSH
104467: LD_INT 3
104469: PUSH
104470: LD_INT 24
104472: PUSH
104473: LD_INT 600
104475: PUSH
104476: EMPTY
104477: LIST
104478: LIST
104479: PUSH
104480: EMPTY
104481: LIST
104482: LIST
104483: PPUSH
104484: CALL_OW 72
104488: OR
104489: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
104490: LD_VAR 0 5
104494: PPUSH
104495: CALL_OW 247
104499: PUSH
104500: LD_INT 2
104502: DOUBLE
104503: EQUAL
104504: IFTRUE 104508
104506: GO 104904
104508: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
104509: LD_VAR 0 5
104513: PPUSH
104514: CALL_OW 256
104518: PUSH
104519: LD_INT 650
104521: GREATER
104522: PUSH
104523: LD_VAR 0 5
104527: PPUSH
104528: LD_VAR 0 14
104532: PPUSH
104533: CALL_OW 296
104537: PUSH
104538: LD_INT 40
104540: LESS
104541: PUSH
104542: LD_VAR 0 14
104546: PPUSH
104547: LD_EXP 70
104551: PUSH
104552: LD_VAR 0 1
104556: ARRAY
104557: PPUSH
104558: CALL_OW 308
104562: OR
104563: AND
104564: IFFALSE 104686
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
104566: LD_VAR 0 5
104570: PPUSH
104571: CALL_OW 262
104575: PUSH
104576: LD_INT 1
104578: EQUAL
104579: PUSH
104580: LD_VAR 0 5
104584: PPUSH
104585: CALL_OW 261
104589: PUSH
104590: LD_INT 30
104592: LESS
104593: AND
104594: PUSH
104595: LD_VAR 0 8
104599: AND
104600: IFFALSE 104670
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
104602: LD_VAR 0 5
104606: PPUSH
104607: LD_VAR 0 8
104611: PPUSH
104612: LD_VAR 0 5
104616: PPUSH
104617: CALL_OW 74
104621: PPUSH
104622: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
104626: LD_VAR 0 5
104630: PPUSH
104631: LD_VAR 0 8
104635: PPUSH
104636: LD_VAR 0 5
104640: PPUSH
104641: CALL_OW 74
104645: PPUSH
104646: CALL_OW 296
104650: PUSH
104651: LD_INT 6
104653: LESS
104654: IFFALSE 104668
// SetFuel ( i , 100 ) ;
104656: LD_VAR 0 5
104660: PPUSH
104661: LD_INT 100
104663: PPUSH
104664: CALL_OW 240
// end else
104668: GO 104684
// ComAttackUnit ( i , e ) ;
104670: LD_VAR 0 5
104674: PPUSH
104675: LD_VAR 0 14
104679: PPUSH
104680: CALL_OW 115
// end else
104684: GO 104787
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
104686: LD_VAR 0 14
104690: PPUSH
104691: LD_EXP 70
104695: PUSH
104696: LD_VAR 0 1
104700: ARRAY
104701: PPUSH
104702: CALL_OW 308
104706: NOT
104707: PUSH
104708: LD_VAR 0 5
104712: PPUSH
104713: LD_VAR 0 14
104717: PPUSH
104718: CALL_OW 296
104722: PUSH
104723: LD_INT 40
104725: GREATEREQUAL
104726: AND
104727: PUSH
104728: LD_VAR 0 5
104732: PPUSH
104733: CALL_OW 256
104737: PUSH
104738: LD_INT 650
104740: LESSEQUAL
104741: OR
104742: PUSH
104743: LD_VAR 0 5
104747: PPUSH
104748: LD_EXP 69
104752: PUSH
104753: LD_VAR 0 1
104757: ARRAY
104758: PPUSH
104759: CALL_OW 308
104763: NOT
104764: AND
104765: IFFALSE 104787
// ComMoveToArea ( i , mc_parking [ base ] ) ;
104767: LD_VAR 0 5
104771: PPUSH
104772: LD_EXP 69
104776: PUSH
104777: LD_VAR 0 1
104781: ARRAY
104782: PPUSH
104783: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
104787: LD_VAR 0 5
104791: PPUSH
104792: CALL_OW 256
104796: PUSH
104797: LD_INT 998
104799: LESS
104800: PUSH
104801: LD_VAR 0 5
104805: PPUSH
104806: CALL_OW 263
104810: PUSH
104811: LD_INT 1
104813: EQUAL
104814: AND
104815: PUSH
104816: LD_VAR 0 5
104820: PPUSH
104821: CALL_OW 311
104825: AND
104826: PUSH
104827: LD_VAR 0 5
104831: PPUSH
104832: LD_EXP 69
104836: PUSH
104837: LD_VAR 0 1
104841: ARRAY
104842: PPUSH
104843: CALL_OW 308
104847: AND
104848: IFFALSE 104902
// begin mech := IsDrivenBy ( i ) ;
104850: LD_ADDR_VAR 0 10
104854: PUSH
104855: LD_VAR 0 5
104859: PPUSH
104860: CALL_OW 311
104864: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
104865: LD_VAR 0 10
104869: PPUSH
104870: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
104874: LD_VAR 0 10
104878: PPUSH
104879: LD_VAR 0 5
104883: PPUSH
104884: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
104888: LD_VAR 0 10
104892: PPUSH
104893: LD_VAR 0 5
104897: PPUSH
104898: CALL_OW 180
// end ; end ; unit_human :
104902: GO 105169
104904: LD_INT 1
104906: DOUBLE
104907: EQUAL
104908: IFTRUE 104912
104910: GO 105168
104912: POP
// begin b := IsInUnit ( i ) ;
104913: LD_ADDR_VAR 0 19
104917: PUSH
104918: LD_VAR 0 5
104922: PPUSH
104923: CALL_OW 310
104927: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
104928: LD_ADDR_VAR 0 20
104932: PUSH
104933: LD_VAR 0 19
104937: NOT
104938: PUSH
104939: LD_VAR 0 19
104943: PPUSH
104944: CALL_OW 266
104948: PUSH
104949: LD_INT 32
104951: PUSH
104952: LD_INT 31
104954: PUSH
104955: EMPTY
104956: LIST
104957: LIST
104958: IN
104959: OR
104960: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
104961: LD_VAR 0 17
104965: PUSH
104966: LD_VAR 0 2
104970: PPUSH
104971: LD_INT 21
104973: PUSH
104974: LD_INT 2
104976: PUSH
104977: EMPTY
104978: LIST
104979: LIST
104980: PPUSH
104981: CALL_OW 72
104985: PUSH
104986: LD_INT 1
104988: LESSEQUAL
104989: OR
104990: PUSH
104991: LD_VAR 0 20
104995: AND
104996: PUSH
104997: LD_VAR 0 5
105001: PUSH
105002: LD_VAR 0 18
105006: IN
105007: NOT
105008: AND
105009: IFFALSE 105102
// begin if b then
105011: LD_VAR 0 19
105015: IFFALSE 105064
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
105017: LD_VAR 0 19
105021: PPUSH
105022: LD_VAR 0 3
105026: PPUSH
105027: LD_VAR 0 19
105031: PPUSH
105032: CALL_OW 74
105036: PPUSH
105037: CALL_OW 296
105041: PUSH
105042: LD_INT 10
105044: LESS
105045: PUSH
105046: LD_VAR 0 19
105050: PPUSH
105051: CALL_OW 461
105055: PUSH
105056: LD_INT 7
105058: NONEQUAL
105059: AND
105060: IFFALSE 105064
// continue ;
105062: GO 104379
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
105064: LD_ADDR_VAR 0 18
105068: PUSH
105069: LD_VAR 0 18
105073: PPUSH
105074: LD_VAR 0 18
105078: PUSH
105079: LD_INT 1
105081: PLUS
105082: PPUSH
105083: LD_VAR 0 5
105087: PPUSH
105088: CALL_OW 1
105092: ST_TO_ADDR
// ComExitBuilding ( i ) ;
105093: LD_VAR 0 5
105097: PPUSH
105098: CALL_OW 122
// end ; if sold_defenders then
105102: LD_VAR 0 18
105106: IFFALSE 105166
// if i in sold_defenders then
105108: LD_VAR 0 5
105112: PUSH
105113: LD_VAR 0 18
105117: IN
105118: IFFALSE 105166
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
105120: LD_VAR 0 5
105124: PPUSH
105125: CALL_OW 314
105129: NOT
105130: PUSH
105131: LD_VAR 0 5
105135: PPUSH
105136: LD_VAR 0 14
105140: PPUSH
105141: CALL_OW 296
105145: PUSH
105146: LD_INT 30
105148: LESS
105149: AND
105150: IFFALSE 105166
// ComAttackUnit ( i , e ) ;
105152: LD_VAR 0 5
105156: PPUSH
105157: LD_VAR 0 14
105161: PPUSH
105162: CALL_OW 115
// end ; end ; end ;
105166: GO 105169
105168: POP
// if IsDead ( i ) then
105169: LD_VAR 0 5
105173: PPUSH
105174: CALL_OW 301
105178: IFFALSE 105196
// defenders := defenders diff i ;
105180: LD_ADDR_VAR 0 2
105184: PUSH
105185: LD_VAR 0 2
105189: PUSH
105190: LD_VAR 0 5
105194: DIFF
105195: ST_TO_ADDR
// end ;
105196: GO 104379
105198: POP
105199: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
105200: LD_VAR 0 3
105204: NOT
105205: PUSH
105206: LD_VAR 0 2
105210: NOT
105211: OR
105212: PUSH
105213: LD_EXP 45
105217: PUSH
105218: LD_VAR 0 1
105222: ARRAY
105223: NOT
105224: OR
105225: IFFALSE 104283
// MC_Reset ( base , 18 ) ;
105227: LD_VAR 0 1
105231: PPUSH
105232: LD_INT 18
105234: PPUSH
105235: CALL 59915 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
105239: LD_ADDR_VAR 0 2
105243: PUSH
105244: LD_VAR 0 2
105248: PUSH
105249: LD_VAR 0 2
105253: PPUSH
105254: LD_INT 2
105256: PUSH
105257: LD_INT 25
105259: PUSH
105260: LD_INT 1
105262: PUSH
105263: EMPTY
105264: LIST
105265: LIST
105266: PUSH
105267: LD_INT 25
105269: PUSH
105270: LD_INT 5
105272: PUSH
105273: EMPTY
105274: LIST
105275: LIST
105276: PUSH
105277: LD_INT 25
105279: PUSH
105280: LD_INT 8
105282: PUSH
105283: EMPTY
105284: LIST
105285: LIST
105286: PUSH
105287: LD_INT 25
105289: PUSH
105290: LD_INT 9
105292: PUSH
105293: EMPTY
105294: LIST
105295: LIST
105296: PUSH
105297: EMPTY
105298: LIST
105299: LIST
105300: LIST
105301: LIST
105302: LIST
105303: PPUSH
105304: CALL_OW 72
105308: DIFF
105309: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
105310: LD_VAR 0 3
105314: NOT
105315: PUSH
105316: LD_VAR 0 2
105320: PPUSH
105321: LD_INT 21
105323: PUSH
105324: LD_INT 2
105326: PUSH
105327: EMPTY
105328: LIST
105329: LIST
105330: PPUSH
105331: CALL_OW 72
105335: AND
105336: IFFALSE 105674
// begin tmp := FilterByTag ( defenders , 19 ) ;
105338: LD_ADDR_VAR 0 12
105342: PUSH
105343: LD_VAR 0 2
105347: PPUSH
105348: LD_INT 19
105350: PPUSH
105351: CALL 52855 0 2
105355: ST_TO_ADDR
// if tmp then
105356: LD_VAR 0 12
105360: IFFALSE 105430
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
105362: LD_ADDR_VAR 0 12
105366: PUSH
105367: LD_VAR 0 12
105371: PPUSH
105372: LD_INT 25
105374: PUSH
105375: LD_INT 3
105377: PUSH
105378: EMPTY
105379: LIST
105380: LIST
105381: PPUSH
105382: CALL_OW 72
105386: ST_TO_ADDR
// if tmp then
105387: LD_VAR 0 12
105391: IFFALSE 105430
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
105393: LD_ADDR_EXP 57
105397: PUSH
105398: LD_EXP 57
105402: PPUSH
105403: LD_VAR 0 1
105407: PPUSH
105408: LD_EXP 57
105412: PUSH
105413: LD_VAR 0 1
105417: ARRAY
105418: PUSH
105419: LD_VAR 0 12
105423: UNION
105424: PPUSH
105425: CALL_OW 1
105429: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
105430: LD_VAR 0 1
105434: PPUSH
105435: LD_INT 19
105437: PPUSH
105438: CALL 59915 0 2
// repeat wait ( 0 0$1 ) ;
105442: LD_INT 35
105444: PPUSH
105445: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
105449: LD_EXP 45
105453: PUSH
105454: LD_VAR 0 1
105458: ARRAY
105459: NOT
105460: PUSH
105461: LD_EXP 45
105465: PUSH
105466: LD_VAR 0 1
105470: ARRAY
105471: PUSH
105472: EMPTY
105473: EQUAL
105474: OR
105475: IFFALSE 105512
// begin for i in defenders do
105477: LD_ADDR_VAR 0 5
105481: PUSH
105482: LD_VAR 0 2
105486: PUSH
105487: FOR_IN
105488: IFFALSE 105501
// ComStop ( i ) ;
105490: LD_VAR 0 5
105494: PPUSH
105495: CALL_OW 141
105499: GO 105487
105501: POP
105502: POP
// defenders := [ ] ;
105503: LD_ADDR_VAR 0 2
105507: PUSH
105508: EMPTY
105509: ST_TO_ADDR
// exit ;
105510: GO 105698
// end ; for i in defenders do
105512: LD_ADDR_VAR 0 5
105516: PUSH
105517: LD_VAR 0 2
105521: PUSH
105522: FOR_IN
105523: IFFALSE 105612
// begin if not IsInArea ( i , mc_parking [ base ] ) then
105525: LD_VAR 0 5
105529: PPUSH
105530: LD_EXP 69
105534: PUSH
105535: LD_VAR 0 1
105539: ARRAY
105540: PPUSH
105541: CALL_OW 308
105545: NOT
105546: IFFALSE 105570
// ComMoveToArea ( i , mc_parking [ base ] ) else
105548: LD_VAR 0 5
105552: PPUSH
105553: LD_EXP 69
105557: PUSH
105558: LD_VAR 0 1
105562: ARRAY
105563: PPUSH
105564: CALL_OW 113
105568: GO 105610
// if GetControl ( i ) = control_manual then
105570: LD_VAR 0 5
105574: PPUSH
105575: CALL_OW 263
105579: PUSH
105580: LD_INT 1
105582: EQUAL
105583: IFFALSE 105610
// if IsDrivenBy ( i ) then
105585: LD_VAR 0 5
105589: PPUSH
105590: CALL_OW 311
105594: IFFALSE 105610
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
105596: LD_VAR 0 5
105600: PPUSH
105601: CALL_OW 311
105605: PPUSH
105606: CALL_OW 121
// end ;
105610: GO 105522
105612: POP
105613: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
105614: LD_VAR 0 2
105618: PPUSH
105619: LD_INT 95
105621: PUSH
105622: LD_EXP 69
105626: PUSH
105627: LD_VAR 0 1
105631: ARRAY
105632: PUSH
105633: EMPTY
105634: LIST
105635: LIST
105636: PPUSH
105637: CALL_OW 72
105641: PUSH
105642: LD_VAR 0 2
105646: EQUAL
105647: PUSH
105648: LD_EXP 68
105652: PUSH
105653: LD_VAR 0 1
105657: ARRAY
105658: OR
105659: PUSH
105660: LD_EXP 45
105664: PUSH
105665: LD_VAR 0 1
105669: ARRAY
105670: NOT
105671: OR
105672: IFFALSE 105442
// end ; MC_Reset ( base , 19 ) ;
105674: LD_VAR 0 1
105678: PPUSH
105679: LD_INT 19
105681: PPUSH
105682: CALL 59915 0 2
// MC_Reset ( base , 20 ) ;
105686: LD_VAR 0 1
105690: PPUSH
105691: LD_INT 20
105693: PPUSH
105694: CALL 59915 0 2
// end ;
105698: LD_VAR 0 4
105702: RET
