// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 54546 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 54546 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 54546 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 54546 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 51970 0 9
// MC_Start ;
1394: CALL 57820 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 80660 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 80604 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 80492 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 80174 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 79905 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 79524 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 79339 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 79231 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 80081 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 80660 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 80604 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 80492 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 80174 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 79905 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 79524 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 79021 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 79231 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 79339 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 80660 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 80604 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 80492 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 80174 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 79905 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 79524 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 79339 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 80660 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 80604 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 80492 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 80174 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 79905 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 79524 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 80230 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 79339 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 51970 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 27588 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 44
5258: PUSH
5259: LD_EXP 44
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 27588 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 44
5371: PUSH
5372: LD_EXP 44
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 27588 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 51970 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 24301 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 24301 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 27588 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 44
7170: PUSH
7171: LD_EXP 44
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 51970 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 27588 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 44
8357: PUSH
8358: LD_EXP 44
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 24179 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 54139 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 24179 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 54139 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 24179 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 54139 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 24179 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 54139 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 44
10409: PUSH
10410: LD_EXP 44
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 44
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 79279 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 79279 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 54139 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 54139 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 44
11301: PUSH
11302: LD_EXP 44
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 44
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 24301 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 44
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 79387 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 44
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 44
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 59786 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 24179 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 24179 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 24179 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 24179 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 79387 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 79387 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 80805 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 80805 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 63
16777: PUSH
16778: LD_EXP 63
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 63
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 44
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 79387 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 79387 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 79387 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 80805 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 80805 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 63
17703: PUSH
17704: LD_EXP 63
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 63
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 79387 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 80805 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 80805 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 63
18451: PUSH
18452: LD_EXP 63
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 63
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL 96752 0 1
// if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 82779 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 85113 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 84181 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 84422 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 82475 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 82095 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 81691 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 81529 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 81304 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 81189 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 85374 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 85590 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 80998 0 2
// end ;
19340: PPOPN 2
19342: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 96858 0 1
// end ; end_of_file
19352: PPOPN 1
19354: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// if exist_mode then
19359: LD_VAR 0 2
19363: IFFALSE 19388
// unit := CreateCharacter ( prefix & ident ) else
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 1
19379: STR
19380: PPUSH
19381: CALL_OW 34
19385: ST_TO_ADDR
19386: GO 19403
// unit := NewCharacter ( ident ) ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 25
19402: ST_TO_ADDR
// result := unit ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ;
19413: LD_VAR 0 4
19417: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// if not side or not nation then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 20202
// case nation of nation_american :
19438: LD_VAR 0 2
19442: PUSH
19443: LD_INT 1
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19665
19451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_INT 35
19459: PUSH
19460: LD_INT 45
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: LD_INT 47
19468: PUSH
19469: LD_INT 82
19471: PUSH
19472: LD_INT 83
19474: PUSH
19475: LD_INT 84
19477: PUSH
19478: LD_INT 85
19480: PUSH
19481: LD_INT 86
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 13
19507: PUSH
19508: LD_INT 10
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: LD_INT 20
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: LD_INT 69
19537: PUSH
19538: LD_INT 39
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 48
19549: PUSH
19550: LD_INT 49
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: LD_INT 51
19558: PUSH
19559: LD_INT 52
19561: PUSH
19562: LD_INT 53
19564: PUSH
19565: LD_INT 54
19567: PUSH
19568: LD_INT 55
19570: PUSH
19571: LD_INT 56
19573: PUSH
19574: LD_INT 57
19576: PUSH
19577: LD_INT 58
19579: PUSH
19580: LD_INT 59
19582: PUSH
19583: LD_INT 60
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: LD_INT 62
19591: PUSH
19592: LD_INT 80
19594: PUSH
19595: LD_INT 82
19597: PUSH
19598: LD_INT 83
19600: PUSH
19601: LD_INT 84
19603: PUSH
19604: LD_INT 85
19606: PUSH
19607: LD_INT 86
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
19663: GO 20126
19665: LD_INT 2
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19895
19673: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19674: LD_ADDR_VAR 0 4
19678: PUSH
19679: LD_INT 35
19681: PUSH
19682: LD_INT 45
19684: PUSH
19685: LD_INT 46
19687: PUSH
19688: LD_INT 47
19690: PUSH
19691: LD_INT 82
19693: PUSH
19694: LD_INT 83
19696: PUSH
19697: LD_INT 84
19699: PUSH
19700: LD_INT 85
19702: PUSH
19703: LD_INT 87
19705: PUSH
19706: LD_INT 70
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: LD_INT 4
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: LD_INT 6
19726: PUSH
19727: LD_INT 15
19729: PUSH
19730: LD_INT 18
19732: PUSH
19733: LD_INT 7
19735: PUSH
19736: LD_INT 17
19738: PUSH
19739: LD_INT 8
19741: PUSH
19742: LD_INT 20
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_INT 72
19753: PUSH
19754: LD_INT 26
19756: PUSH
19757: LD_INT 69
19759: PUSH
19760: LD_INT 39
19762: PUSH
19763: LD_INT 40
19765: PUSH
19766: LD_INT 41
19768: PUSH
19769: LD_INT 42
19771: PUSH
19772: LD_INT 43
19774: PUSH
19775: LD_INT 48
19777: PUSH
19778: LD_INT 49
19780: PUSH
19781: LD_INT 50
19783: PUSH
19784: LD_INT 51
19786: PUSH
19787: LD_INT 52
19789: PUSH
19790: LD_INT 53
19792: PUSH
19793: LD_INT 54
19795: PUSH
19796: LD_INT 55
19798: PUSH
19799: LD_INT 56
19801: PUSH
19802: LD_INT 60
19804: PUSH
19805: LD_INT 61
19807: PUSH
19808: LD_INT 62
19810: PUSH
19811: LD_INT 66
19813: PUSH
19814: LD_INT 67
19816: PUSH
19817: LD_INT 68
19819: PUSH
19820: LD_INT 81
19822: PUSH
19823: LD_INT 82
19825: PUSH
19826: LD_INT 83
19828: PUSH
19829: LD_INT 84
19831: PUSH
19832: LD_INT 85
19834: PUSH
19835: LD_INT 87
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20126
19895: LD_INT 3
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 20125
19903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_INT 46
19911: PUSH
19912: LD_INT 47
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 82
19923: PUSH
19924: LD_INT 83
19926: PUSH
19927: LD_INT 84
19929: PUSH
19930: LD_INT 85
19932: PUSH
19933: LD_INT 86
19935: PUSH
19936: LD_INT 11
19938: PUSH
19939: LD_INT 9
19941: PUSH
19942: LD_INT 20
19944: PUSH
19945: LD_INT 19
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 24
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 25
19959: PUSH
19960: LD_INT 28
19962: PUSH
19963: LD_INT 29
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 31
19971: PUSH
19972: LD_INT 37
19974: PUSH
19975: LD_INT 38
19977: PUSH
19978: LD_INT 32
19980: PUSH
19981: LD_INT 27
19983: PUSH
19984: LD_INT 33
19986: PUSH
19987: LD_INT 69
19989: PUSH
19990: LD_INT 39
19992: PUSH
19993: LD_INT 34
19995: PUSH
19996: LD_INT 40
19998: PUSH
19999: LD_INT 71
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 44
20007: PUSH
20008: LD_INT 48
20010: PUSH
20011: LD_INT 49
20013: PUSH
20014: LD_INT 50
20016: PUSH
20017: LD_INT 51
20019: PUSH
20020: LD_INT 52
20022: PUSH
20023: LD_INT 53
20025: PUSH
20026: LD_INT 54
20028: PUSH
20029: LD_INT 55
20031: PUSH
20032: LD_INT 56
20034: PUSH
20035: LD_INT 57
20037: PUSH
20038: LD_INT 58
20040: PUSH
20041: LD_INT 59
20043: PUSH
20044: LD_INT 63
20046: PUSH
20047: LD_INT 64
20049: PUSH
20050: LD_INT 65
20052: PUSH
20053: LD_INT 82
20055: PUSH
20056: LD_INT 83
20058: PUSH
20059: LD_INT 84
20061: PUSH
20062: LD_INT 85
20064: PUSH
20065: LD_INT 86
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
20123: GO 20126
20125: POP
// if state > - 1 and state < 3 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: GREATER
20135: PUSH
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 3
20143: LESS
20144: AND
20145: IFFALSE 20202
// for i in result do
20147: LD_ADDR_VAR 0 5
20151: PUSH
20152: LD_VAR 0 4
20156: PUSH
20157: FOR_IN
20158: IFFALSE 20200
// if GetTech ( i , side ) <> state then
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 321
20174: PUSH
20175: LD_VAR 0 3
20179: NONEQUAL
20180: IFFALSE 20198
// result := result diff i ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 4
20191: PUSH
20192: LD_VAR 0 5
20196: DIFF
20197: ST_TO_ADDR
20198: GO 20157
20200: POP
20201: POP
// end ;
20202: LD_VAR 0 4
20206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := true ;
20212: LD_ADDR_VAR 0 3
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 480
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 5
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20293
// for i in tmp do
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_VAR 0 5
20253: PUSH
20254: FOR_IN
20255: IFFALSE 20291
// if GetTech ( i , side ) <> state_researched then
20257: LD_VAR 0 4
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 321
20271: PUSH
20272: LD_INT 2
20274: NONEQUAL
20275: IFFALSE 20289
// begin result := false ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// exit ;
20285: POP
20286: POP
20287: GO 20293
// end ;
20289: GO 20254
20291: POP
20292: POP
// end ;
20293: LD_VAR 0 3
20297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20313: LD_VAR 0 1
20317: NOT
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 257
20328: PUSH
20329: LD_INT 9
20331: NONEQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20910
// side := GetSide ( unit ) ;
20337: LD_ADDR_VAR 0 9
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 255
20351: ST_TO_ADDR
// tech_space := tech_spacanom ;
20352: LD_ADDR_VAR 0 12
20356: PUSH
20357: LD_INT 29
20359: ST_TO_ADDR
// tech_time := tech_taurad ;
20360: LD_ADDR_VAR 0 13
20364: PUSH
20365: LD_INT 28
20367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20368: LD_ADDR_VAR 0 11
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 310
20382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20383: LD_VAR 0 11
20387: PPUSH
20388: CALL_OW 247
20392: PUSH
20393: LD_INT 2
20395: EQUAL
20396: IFFALSE 20400
// exit ;
20398: GO 20910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20400: LD_ADDR_VAR 0 8
20404: PUSH
20405: LD_INT 81
20407: PUSH
20408: LD_VAR 0 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: ST_TO_ADDR
// if not tmp then
20443: LD_VAR 0 8
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20910
// if in_unit then
20452: LD_VAR 0 11
20456: IFFALSE 20480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20458: LD_ADDR_VAR 0 10
20462: PUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 11
20472: PPUSH
20473: CALL_OW 74
20477: ST_TO_ADDR
20478: GO 20500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20480: LD_ADDR_VAR 0 10
20484: PUSH
20485: LD_VAR 0 8
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 74
20499: ST_TO_ADDR
// if not enemy then
20500: LD_VAR 0 10
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20509: LD_VAR 0 11
20513: PUSH
20514: LD_VAR 0 11
20518: PPUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: CALL_OW 296
20528: PUSH
20529: LD_INT 13
20531: GREATER
20532: AND
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_VAR 0 10
20543: PPUSH
20544: CALL_OW 296
20548: PUSH
20549: LD_INT 12
20551: GREATER
20552: OR
20553: IFFALSE 20557
// exit ;
20555: GO 20910
// missile := [ 1 ] ;
20557: LD_ADDR_VAR 0 14
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20568: LD_VAR 0 9
20572: PPUSH
20573: LD_VAR 0 12
20577: PPUSH
20578: CALL_OW 325
20582: IFFALSE 20611
// missile := Insert ( missile , missile + 1 , 2 ) ;
20584: LD_ADDR_VAR 0 14
20588: PUSH
20589: LD_VAR 0 14
20593: PPUSH
20594: LD_VAR 0 14
20598: PUSH
20599: LD_INT 1
20601: PLUS
20602: PPUSH
20603: LD_INT 2
20605: PPUSH
20606: CALL_OW 2
20610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20611: LD_VAR 0 9
20615: PPUSH
20616: LD_VAR 0 13
20620: PPUSH
20621: CALL_OW 325
20625: PUSH
20626: LD_VAR 0 10
20630: PPUSH
20631: CALL_OW 255
20635: PPUSH
20636: LD_VAR 0 13
20640: PPUSH
20641: CALL_OW 325
20645: NOT
20646: AND
20647: IFFALSE 20676
// missile := Insert ( missile , missile + 1 , 3 ) ;
20649: LD_ADDR_VAR 0 14
20653: PUSH
20654: LD_VAR 0 14
20658: PPUSH
20659: LD_VAR 0 14
20663: PUSH
20664: LD_INT 1
20666: PLUS
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: CALL_OW 2
20675: ST_TO_ADDR
// if missile < 2 then
20676: LD_VAR 0 14
20680: PUSH
20681: LD_INT 2
20683: LESS
20684: IFFALSE 20688
// exit ;
20686: GO 20910
// x := GetX ( enemy ) ;
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: LD_VAR 0 10
20697: PPUSH
20698: CALL_OW 250
20702: ST_TO_ADDR
// y := GetY ( enemy ) ;
20703: LD_ADDR_VAR 0 5
20707: PUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: CALL_OW 251
20717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20718: LD_ADDR_VAR 0 6
20722: PUSH
20723: LD_VAR 0 4
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 12
20739: PLUS
20740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20741: LD_ADDR_VAR 0 7
20745: PUSH
20746: LD_VAR 0 5
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 12
20762: PLUS
20763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 488
20778: NOT
20779: IFFALSE 20801
// begin _x := x ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 4
20790: ST_TO_ADDR
// _y := y ;
20791: LD_ADDR_VAR 0 7
20795: PUSH
20796: LD_VAR 0 5
20800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 1
20808: PPUSH
20809: LD_VAR 0 14
20813: PPUSH
20814: CALL_OW 12
20818: ST_TO_ADDR
// case i of 1 :
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20849
20832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_VAR 0 10
20842: PPUSH
20843: CALL_OW 115
20847: GO 20910
20849: LD_INT 2
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20879
20857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_VAR 0 6
20867: PPUSH
20868: LD_VAR 0 7
20872: PPUSH
20873: CALL_OW 153
20877: GO 20910
20879: LD_INT 3
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20909
20887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20888: LD_VAR 0 1
20892: PPUSH
20893: LD_VAR 0 6
20897: PPUSH
20898: LD_VAR 0 7
20902: PPUSH
20903: CALL_OW 154
20907: GO 20910
20909: POP
// end ;
20910: LD_VAR 0 2
20914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
// if not unit or not building then
20923: LD_VAR 0 1
20927: NOT
20928: PUSH
20929: LD_VAR 0 2
20933: NOT
20934: OR
20935: IFFALSE 20939
// exit ;
20937: GO 21097
// x := GetX ( building ) ;
20939: LD_ADDR_VAR 0 5
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 250
20953: ST_TO_ADDR
// y := GetY ( building ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 251
20968: ST_TO_ADDR
// for i = 0 to 5 do
20969: LD_ADDR_VAR 0 4
20973: PUSH
20974: DOUBLE
20975: LD_INT 0
20977: DEC
20978: ST_TO_ADDR
20979: LD_INT 5
20981: PUSH
20982: FOR_TO
20983: IFFALSE 21095
// begin _x := ShiftX ( x , i , 3 ) ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_VAR 0 5
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21008: LD_ADDR_VAR 0 8
21012: PUSH
21013: LD_VAR 0 6
21017: PPUSH
21018: LD_VAR 0 4
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21031: LD_VAR 0 7
21035: PPUSH
21036: LD_VAR 0 8
21040: PPUSH
21041: CALL_OW 488
21045: NOT
21046: IFFALSE 21050
// continue ;
21048: GO 20982
// if HexInfo ( _x , _y ) = 0 then
21050: LD_VAR 0 7
21054: PPUSH
21055: LD_VAR 0 8
21059: PPUSH
21060: CALL_OW 428
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: IFFALSE 21093
// begin ComMoveXY ( unit , _x , _y ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 7
21079: PPUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 111
// exit ;
21089: POP
21090: POP
21091: GO 21097
// end ; end ;
21093: GO 20982
21095: POP
21096: POP
// end ;
21097: LD_VAR 0 3
21101: RET
// export function ScanBase ( side , base_area ) ; begin
21102: LD_INT 0
21104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: PPUSH
21115: LD_INT 81
21117: PUSH
21118: LD_VAR 0 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 70
21131: ST_TO_ADDR
// end ;
21132: LD_VAR 0 3
21136: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
// result := false ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// side := GetSide ( unit ) ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 255
21165: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21166: LD_ADDR_VAR 0 4
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 248
21180: ST_TO_ADDR
// case nat of 1 :
21181: LD_VAR 0 4
21185: PUSH
21186: LD_INT 1
21188: DOUBLE
21189: EQUAL
21190: IFTRUE 21194
21192: GO 21205
21194: POP
// tech := tech_lassight ; 2 :
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_INT 12
21202: ST_TO_ADDR
21203: GO 21244
21205: LD_INT 2
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21224
21213: POP
// tech := tech_mortar ; 3 :
21214: LD_ADDR_VAR 0 5
21218: PUSH
21219: LD_INT 41
21221: ST_TO_ADDR
21222: GO 21244
21224: LD_INT 3
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21243
21232: POP
// tech := tech_bazooka ; end ;
21233: LD_ADDR_VAR 0 5
21237: PUSH
21238: LD_INT 44
21240: ST_TO_ADDR
21241: GO 21244
21243: POP
// if Researched ( side , tech ) then
21244: LD_VAR 0 3
21248: PPUSH
21249: LD_VAR 0 5
21253: PPUSH
21254: CALL_OW 325
21258: IFFALSE 21285
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21260: LD_ADDR_VAR 0 2
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: LD_INT 8
21270: PUSH
21271: LD_INT 9
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_VAR 0 4
21283: ARRAY
21284: ST_TO_ADDR
// end ;
21285: LD_VAR 0 2
21289: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
21294: PPUSH
// if not mines then
21295: LD_VAR 0 2
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21304: LD_ADDR_VAR 0 5
21308: PUSH
21309: LD_INT 81
21311: PUSH
21312: LD_VAR 0 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 3
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: ST_TO_ADDR
// for i in mines do
21347: LD_ADDR_VAR 0 4
21351: PUSH
21352: LD_VAR 0 2
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21446
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21360: LD_VAR 0 4
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PPUSH
21369: LD_VAR 0 4
21373: PUSH
21374: LD_INT 2
21376: ARRAY
21377: PPUSH
21378: CALL_OW 458
21382: NOT
21383: IFFALSE 21387
// continue ;
21385: GO 21357
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_VAR 0 4
21400: PUSH
21401: LD_INT 2
21403: ARRAY
21404: PPUSH
21405: CALL_OW 428
21409: PUSH
21410: LD_VAR 0 5
21414: IN
21415: IFFALSE 21444
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21417: LD_VAR 0 4
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: PPUSH
21426: LD_VAR 0 4
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: PPUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 456
// end ;
21444: GO 21357
21446: POP
21447: POP
// end ;
21448: LD_VAR 0 3
21452: RET
// export function Count ( array ) ; var i ; begin
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// result := 0 ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// for i in array do
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_VAR 0 1
21474: PUSH
21475: FOR_IN
21476: IFFALSE 21500
// if i then
21478: LD_VAR 0 3
21482: IFFALSE 21498
// result := result + 1 ;
21484: LD_ADDR_VAR 0 2
21488: PUSH
21489: LD_VAR 0 2
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: ST_TO_ADDR
21498: GO 21475
21500: POP
21501: POP
// end ;
21502: LD_VAR 0 2
21506: RET
// export function IsEmpty ( building ) ; begin
21507: LD_INT 0
21509: PPUSH
// if not building then
21510: LD_VAR 0 1
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21562
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 255
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 58
21548: PUSH
21549: EMPTY
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PPUSH
21556: CALL_OW 69
21560: IN
21561: ST_TO_ADDR
// end ;
21562: LD_VAR 0 2
21566: RET
// export function IsNotFull ( building ) ; begin
21567: LD_INT 0
21569: PPUSH
// if not building then
21570: LD_VAR 0 1
21574: NOT
21575: IFFALSE 21579
// exit ;
21577: GO 21598
// result := UnitsInside ( building ) < 6 ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 313
21593: PUSH
21594: LD_INT 6
21596: LESS
21597: ST_TO_ADDR
// end ;
21598: LD_VAR 0 2
21602: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
// tmp := [ ] ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// list := [ ] ;
21616: LD_ADDR_VAR 0 5
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// for i = 16 to 25 do
21623: LD_ADDR_VAR 0 4
21627: PUSH
21628: DOUBLE
21629: LD_INT 16
21631: DEC
21632: ST_TO_ADDR
21633: LD_INT 25
21635: PUSH
21636: FOR_TO
21637: IFFALSE 21710
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 255
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 91
21668: PUSH
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 6
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: LD_VAR 0 4
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: ADD
21707: ST_TO_ADDR
21708: GO 21636
21710: POP
21711: POP
// for i = 1 to tmp do
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: DOUBLE
21718: LD_INT 1
21720: DEC
21721: ST_TO_ADDR
21722: LD_VAR 0 3
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21816
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21730: LD_ADDR_VAR 0 5
21734: PUSH
21735: LD_VAR 0 5
21739: PUSH
21740: LD_VAR 0 3
21744: PUSH
21745: LD_VAR 0 4
21749: ARRAY
21750: PPUSH
21751: CALL_OW 266
21755: PUSH
21756: LD_VAR 0 3
21760: PUSH
21761: LD_VAR 0 4
21765: ARRAY
21766: PPUSH
21767: CALL_OW 250
21771: PUSH
21772: LD_VAR 0 3
21776: PUSH
21777: LD_VAR 0 4
21781: ARRAY
21782: PPUSH
21783: CALL_OW 251
21787: PUSH
21788: LD_VAR 0 3
21792: PUSH
21793: LD_VAR 0 4
21797: ARRAY
21798: PPUSH
21799: CALL_OW 254
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: ADD
21813: ST_TO_ADDR
21814: GO 21727
21816: POP
21817: POP
// result := list ;
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_VAR 0 5
21827: ST_TO_ADDR
// end ;
21828: LD_VAR 0 2
21832: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
// if not factory then
21842: LD_VAR 0 1
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 22444
// if control = control_apeman then
21851: LD_VAR 0 4
21855: PUSH
21856: LD_INT 5
21858: EQUAL
21859: IFFALSE 21968
// begin tmp := UnitsInside ( factory ) ;
21861: LD_ADDR_VAR 0 8
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 313
21875: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21876: LD_VAR 0 8
21880: PPUSH
21881: LD_INT 25
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 72
21895: NOT
21896: IFFALSE 21906
// control := control_manual ;
21898: LD_ADDR_VAR 0 4
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21906: LD_ADDR_VAR 0 8
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL 21603 0 1
21920: ST_TO_ADDR
// if tmp then
21921: LD_VAR 0 8
21925: IFFALSE 21968
// begin for i in tmp do
21927: LD_ADDR_VAR 0 7
21931: PUSH
21932: LD_VAR 0 8
21936: PUSH
21937: FOR_IN
21938: IFFALSE 21966
// if i [ 1 ] = b_ext_radio then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_INT 1
21947: ARRAY
21948: PUSH
21949: LD_INT 22
21951: EQUAL
21952: IFFALSE 21964
// begin control := control_remote ;
21954: LD_ADDR_VAR 0 4
21958: PUSH
21959: LD_INT 2
21961: ST_TO_ADDR
// break ;
21962: GO 21966
// end ;
21964: GO 21937
21966: POP
21967: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_VAR 0 3
21982: PPUSH
21983: LD_VAR 0 4
21987: PPUSH
21988: LD_VAR 0 5
21992: PPUSH
21993: CALL_OW 448
21997: IFFALSE 22032
// begin result := [ chassis , engine , control , weapon ] ;
21999: LD_ADDR_VAR 0 6
22003: PUSH
22004: LD_VAR 0 2
22008: PUSH
22009: LD_VAR 0 3
22013: PUSH
22014: LD_VAR 0 4
22018: PUSH
22019: LD_VAR 0 5
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// exit ;
22030: GO 22444
// end ; _chassis := AvailableChassisList ( factory ) ;
22032: LD_ADDR_VAR 0 9
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 475
22046: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22047: LD_ADDR_VAR 0 11
22051: PUSH
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 476
22061: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22062: LD_ADDR_VAR 0 12
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 477
22076: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22077: LD_ADDR_VAR 0 10
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 478
22091: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22092: LD_VAR 0 9
22096: NOT
22097: PUSH
22098: LD_VAR 0 11
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 12
22109: NOT
22110: OR
22111: PUSH
22112: LD_VAR 0 10
22116: NOT
22117: OR
22118: IFFALSE 22153
// begin result := [ chassis , engine , control , weapon ] ;
22120: LD_ADDR_VAR 0 6
22124: PUSH
22125: LD_VAR 0 2
22129: PUSH
22130: LD_VAR 0 3
22134: PUSH
22135: LD_VAR 0 4
22139: PUSH
22140: LD_VAR 0 5
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// exit ;
22151: GO 22444
// end ; if not chassis in _chassis then
22153: LD_VAR 0 2
22157: PUSH
22158: LD_VAR 0 9
22162: IN
22163: NOT
22164: IFFALSE 22190
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 9
22175: PUSH
22176: LD_INT 1
22178: PPUSH
22179: LD_VAR 0 9
22183: PPUSH
22184: CALL_OW 12
22188: ARRAY
22189: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22190: LD_VAR 0 2
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL 22449 0 2
22204: NOT
22205: IFFALSE 22264
// repeat engine := _engine [ 1 ] ;
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: LD_VAR 0 11
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22221: LD_ADDR_VAR 0 11
22225: PUSH
22226: LD_VAR 0 11
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 3
22238: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22239: LD_VAR 0 2
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL 22449 0 2
22253: PUSH
22254: LD_VAR 0 11
22258: PUSH
22259: EMPTY
22260: EQUAL
22261: OR
22262: IFFALSE 22207
// if not control in _control then
22264: LD_VAR 0 4
22268: PUSH
22269: LD_VAR 0 12
22273: IN
22274: NOT
22275: IFFALSE 22301
// control := _control [ rand ( 1 , _control ) ] ;
22277: LD_ADDR_VAR 0 4
22281: PUSH
22282: LD_VAR 0 12
22286: PUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_VAR 0 12
22294: PPUSH
22295: CALL_OW 12
22299: ARRAY
22300: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22301: LD_VAR 0 2
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL 22669 0 2
22315: NOT
22316: IFFALSE 22375
// repeat weapon := _weapon [ 1 ] ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 10
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22332: LD_ADDR_VAR 0 10
22336: PUSH
22337: LD_VAR 0 10
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 3
22349: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22350: LD_VAR 0 2
22354: PPUSH
22355: LD_VAR 0 5
22359: PPUSH
22360: CALL 22669 0 2
22364: PUSH
22365: LD_VAR 0 10
22369: PUSH
22370: EMPTY
22371: EQUAL
22372: OR
22373: IFFALSE 22318
// result := [ ] ;
22375: LD_ADDR_VAR 0 6
22379: PUSH
22380: EMPTY
22381: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_VAR 0 2
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: LD_VAR 0 4
22401: PPUSH
22402: LD_VAR 0 5
22406: PPUSH
22407: CALL_OW 448
22411: IFFALSE 22444
// result := [ chassis , engine , control , weapon ] ;
22413: LD_ADDR_VAR 0 6
22417: PUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_VAR 0 5
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 6
22448: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22449: LD_INT 0
22451: PPUSH
// if not chassis or not engine then
22452: LD_VAR 0 1
22456: NOT
22457: PUSH
22458: LD_VAR 0 2
22462: NOT
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 22664
// case engine of engine_solar :
22468: LD_VAR 0 2
22472: PUSH
22473: LD_INT 2
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22519
22481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 13
22495: PUSH
22496: LD_INT 14
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 22648
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22589
22527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22528: LD_ADDR_VAR 0 3
22532: PUSH
22533: LD_INT 11
22535: PUSH
22536: LD_INT 12
22538: PUSH
22539: LD_INT 13
22541: PUSH
22542: LD_INT 14
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: LD_INT 4
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 21
22562: PUSH
22563: LD_INT 23
22565: PUSH
22566: LD_INT 22
22568: PUSH
22569: LD_INT 24
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
22587: GO 22648
22589: LD_INT 3
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22647
22597: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 13
22605: PUSH
22606: LD_INT 14
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: LD_INT 5
22620: PUSH
22621: LD_INT 21
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_INT 23
22629: PUSH
22630: LD_INT 24
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 22648
22647: POP
// result := ( chassis in result ) ;
22648: LD_ADDR_VAR 0 3
22652: PUSH
22653: LD_VAR 0 1
22657: PUSH
22658: LD_VAR 0 3
22662: IN
22663: ST_TO_ADDR
// end ;
22664: LD_VAR 0 3
22668: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22669: LD_INT 0
22671: PPUSH
// if not chassis or not weapon then
22672: LD_VAR 0 1
22676: NOT
22677: PUSH
22678: LD_VAR 0 2
22682: NOT
22683: OR
22684: IFFALSE 22688
// exit ;
22686: GO 23714
// case weapon of us_machine_gun :
22688: LD_VAR 0 2
22692: PUSH
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22731
22701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 4
22718: PUSH
22719: LD_INT 5
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 23698
22731: LD_INT 3
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22769
22739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 23698
22769: LD_INT 11
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22807
22777: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 23698
22807: LD_INT 4
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22841
22815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 3
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
22839: GO 23698
22841: LD_INT 5
22843: DOUBLE
22844: EQUAL
22845: IFTRUE 22849
22847: GO 22875
22849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 4
22863: PUSH
22864: LD_INT 5
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
22873: GO 23698
22875: LD_INT 9
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22909
22883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22884: LD_ADDR_VAR 0 3
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 4
22897: PUSH
22898: LD_INT 5
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 23698
22909: LD_INT 7
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22943
22917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 4
22931: PUSH
22932: LD_INT 5
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: ST_TO_ADDR
22941: GO 23698
22943: LD_INT 12
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22951
22949: GO 22977
22951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22952: LD_ADDR_VAR 0 3
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 4
22965: PUSH
22966: LD_INT 5
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
22975: GO 23698
22977: LD_INT 13
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 23011
22985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: LD_INT 4
22999: PUSH
23000: LD_INT 5
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
23009: GO 23698
23011: LD_INT 14
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23037
23019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
23035: GO 23698
23037: LD_INT 6
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23063
23045: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 4
23053: PUSH
23054: LD_INT 5
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: ST_TO_ADDR
23061: GO 23698
23063: LD_INT 10
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23089
23071: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 23698
23089: LD_INT 22
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23123
23097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 12
23108: PUSH
23109: LD_INT 13
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
23121: GO 23698
23123: LD_INT 23
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23157
23131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 13
23145: PUSH
23146: LD_INT 14
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 23698
23157: LD_INT 24
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23191
23165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23166: LD_ADDR_VAR 0 3
23170: PUSH
23171: LD_INT 11
23173: PUSH
23174: LD_INT 12
23176: PUSH
23177: LD_INT 13
23179: PUSH
23180: LD_INT 14
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23698
23191: LD_INT 30
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23225
23199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 11
23207: PUSH
23208: LD_INT 12
23210: PUSH
23211: LD_INT 13
23213: PUSH
23214: LD_INT 14
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 23698
23225: LD_INT 25
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23251
23233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 13
23241: PUSH
23242: LD_INT 14
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: ST_TO_ADDR
23249: GO 23698
23251: LD_INT 27
23253: DOUBLE
23254: EQUAL
23255: IFTRUE 23259
23257: GO 23277
23259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: LD_INT 13
23267: PUSH
23268: LD_INT 14
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: ST_TO_ADDR
23275: GO 23698
23277: LD_INT 28
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23303
23285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 13
23293: PUSH
23294: LD_INT 14
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 23698
23303: LD_INT 29
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23329
23311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_INT 13
23319: PUSH
23320: LD_INT 14
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: ST_TO_ADDR
23327: GO 23698
23329: LD_INT 31
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23355
23337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_INT 13
23345: PUSH
23346: LD_INT 14
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 23698
23355: LD_INT 26
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23381
23363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_INT 13
23371: PUSH
23372: LD_INT 14
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: ST_TO_ADDR
23379: GO 23698
23381: LD_INT 42
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23415
23389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23390: LD_ADDR_VAR 0 3
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 23
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
23413: GO 23698
23415: LD_INT 43
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23449
23423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 21
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 23
23437: PUSH
23438: LD_INT 24
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
23447: GO 23698
23449: LD_INT 44
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23483
23457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 22
23468: PUSH
23469: LD_INT 23
23471: PUSH
23472: LD_INT 24
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 23698
23483: LD_INT 45
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23517
23491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
23515: GO 23698
23517: LD_INT 49
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23551
23525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_INT 23
23539: PUSH
23540: LD_INT 24
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
23549: GO 23698
23551: LD_INT 51
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23585
23559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 21
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 24
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 23698
23585: LD_INT 52
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23619
23593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 22
23604: PUSH
23605: LD_INT 23
23607: PUSH
23608: LD_INT 24
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
23617: GO 23698
23619: LD_INT 53
23621: DOUBLE
23622: EQUAL
23623: IFTRUE 23627
23625: GO 23645
23627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: LD_INT 23
23635: PUSH
23636: LD_INT 24
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 23698
23645: LD_INT 46
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23671
23653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: LD_INT 23
23661: PUSH
23662: LD_INT 24
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: ST_TO_ADDR
23669: GO 23698
23671: LD_INT 47
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23697
23679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_INT 23
23687: PUSH
23688: LD_INT 24
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: ST_TO_ADDR
23695: GO 23698
23697: POP
// result := ( chassis in result ) ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_VAR 0 3
23712: IN
23713: ST_TO_ADDR
// end ;
23714: LD_VAR 0 3
23718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
// result := array ;
23728: LD_ADDR_VAR 0 5
23732: PUSH
23733: LD_VAR 0 1
23737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23738: LD_VAR 0 1
23742: NOT
23743: PUSH
23744: LD_VAR 0 2
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 3
23755: NOT
23756: OR
23757: PUSH
23758: LD_VAR 0 2
23762: PUSH
23763: LD_VAR 0 1
23767: GREATER
23768: OR
23769: PUSH
23770: LD_VAR 0 3
23774: PUSH
23775: LD_VAR 0 1
23779: GREATER
23780: OR
23781: IFFALSE 23785
// exit ;
23783: GO 24081
// if direction then
23785: LD_VAR 0 4
23789: IFFALSE 23853
// begin d := 1 ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_INT 1
23798: ST_TO_ADDR
// if i_from > i_to then
23799: LD_VAR 0 2
23803: PUSH
23804: LD_VAR 0 3
23808: GREATER
23809: IFFALSE 23835
// length := ( array - i_from ) + i_to else
23811: LD_ADDR_VAR 0 11
23815: PUSH
23816: LD_VAR 0 1
23820: PUSH
23821: LD_VAR 0 2
23825: MINUS
23826: PUSH
23827: LD_VAR 0 3
23831: PLUS
23832: ST_TO_ADDR
23833: GO 23851
// length := i_to - i_from ;
23835: LD_ADDR_VAR 0 11
23839: PUSH
23840: LD_VAR 0 3
23844: PUSH
23845: LD_VAR 0 2
23849: MINUS
23850: ST_TO_ADDR
// end else
23851: GO 23914
// begin d := - 1 ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: ST_TO_ADDR
// if i_from > i_to then
23862: LD_VAR 0 2
23866: PUSH
23867: LD_VAR 0 3
23871: GREATER
23872: IFFALSE 23892
// length := i_from - i_to else
23874: LD_ADDR_VAR 0 11
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_VAR 0 3
23888: MINUS
23889: ST_TO_ADDR
23890: GO 23914
// length := ( array - i_to ) + i_from ;
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_VAR 0 3
23906: MINUS
23907: PUSH
23908: LD_VAR 0 2
23912: PLUS
23913: ST_TO_ADDR
// end ; if not length then
23914: LD_VAR 0 11
23918: NOT
23919: IFFALSE 23923
// exit ;
23921: GO 24081
// tmp := array ;
23923: LD_ADDR_VAR 0 10
23927: PUSH
23928: LD_VAR 0 1
23932: ST_TO_ADDR
// for i = 1 to length do
23933: LD_ADDR_VAR 0 6
23937: PUSH
23938: DOUBLE
23939: LD_INT 1
23941: DEC
23942: ST_TO_ADDR
23943: LD_VAR 0 11
23947: PUSH
23948: FOR_TO
23949: IFFALSE 24069
// begin for j = 1 to array do
23951: LD_ADDR_VAR 0 7
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_VAR 0 1
23965: PUSH
23966: FOR_TO
23967: IFFALSE 24055
// begin k := j + d ;
23969: LD_ADDR_VAR 0 8
23973: PUSH
23974: LD_VAR 0 7
23978: PUSH
23979: LD_VAR 0 9
23983: PLUS
23984: ST_TO_ADDR
// if k > array then
23985: LD_VAR 0 8
23989: PUSH
23990: LD_VAR 0 1
23994: GREATER
23995: IFFALSE 24005
// k := 1 ;
23997: LD_ADDR_VAR 0 8
24001: PUSH
24002: LD_INT 1
24004: ST_TO_ADDR
// if not k then
24005: LD_VAR 0 8
24009: NOT
24010: IFFALSE 24022
// k := array ;
24012: LD_ADDR_VAR 0 8
24016: PUSH
24017: LD_VAR 0 1
24021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24022: LD_ADDR_VAR 0 10
24026: PUSH
24027: LD_VAR 0 10
24031: PPUSH
24032: LD_VAR 0 8
24036: PPUSH
24037: LD_VAR 0 1
24041: PUSH
24042: LD_VAR 0 7
24046: ARRAY
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ;
24053: GO 23966
24055: POP
24056: POP
// array := tmp ;
24057: LD_ADDR_VAR 0 1
24061: PUSH
24062: LD_VAR 0 10
24066: ST_TO_ADDR
// end ;
24067: GO 23948
24069: POP
24070: POP
// result := array ;
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_VAR 0 1
24080: ST_TO_ADDR
// end ;
24081: LD_VAR 0 5
24085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24086: LD_INT 0
24088: PPUSH
24089: PPUSH
// result := 0 ;
24090: LD_ADDR_VAR 0 3
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// if not array or not value in array then
24098: LD_VAR 0 1
24102: NOT
24103: PUSH
24104: LD_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: IN
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24174
// for i = 1 to array do
24120: LD_ADDR_VAR 0 4
24124: PUSH
24125: DOUBLE
24126: LD_INT 1
24128: DEC
24129: ST_TO_ADDR
24130: LD_VAR 0 1
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24172
// if value = array [ i ] then
24138: LD_VAR 0 2
24142: PUSH
24143: LD_VAR 0 1
24147: PUSH
24148: LD_VAR 0 4
24152: ARRAY
24153: EQUAL
24154: IFFALSE 24170
// begin result := i ;
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_VAR 0 4
24165: ST_TO_ADDR
// exit ;
24166: POP
24167: POP
24168: GO 24174
// end ;
24170: GO 24135
24172: POP
24173: POP
// end ;
24174: LD_VAR 0 3
24178: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24179: LD_INT 0
24181: PPUSH
// vc_chassis := chassis ;
24182: LD_ADDR_OWVAR 37
24186: PUSH
24187: LD_VAR 0 1
24191: ST_TO_ADDR
// vc_engine := engine ;
24192: LD_ADDR_OWVAR 39
24196: PUSH
24197: LD_VAR 0 2
24201: ST_TO_ADDR
// vc_control := control ;
24202: LD_ADDR_OWVAR 38
24206: PUSH
24207: LD_VAR 0 3
24211: ST_TO_ADDR
// vc_weapon := weapon ;
24212: LD_ADDR_OWVAR 40
24216: PUSH
24217: LD_VAR 0 4
24221: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24222: LD_ADDR_OWVAR 41
24226: PUSH
24227: LD_VAR 0 5
24231: ST_TO_ADDR
// end ;
24232: LD_VAR 0 6
24236: RET
// export function WantPlant ( unit ) ; var task ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
// result := false ;
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_INT 0
24248: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL_OW 437
24263: ST_TO_ADDR
// if task then
24264: LD_VAR 0 3
24268: IFFALSE 24296
// if task [ 1 ] [ 1 ] = p then
24270: LD_VAR 0 3
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PUSH
24283: LD_STRING p
24285: EQUAL
24286: IFFALSE 24296
// result := true ;
24288: LD_ADDR_VAR 0 2
24292: PUSH
24293: LD_INT 1
24295: ST_TO_ADDR
// end ;
24296: LD_VAR 0 2
24300: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24301: LD_INT 0
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// if pos < 1 then
24307: LD_VAR 0 2
24311: PUSH
24312: LD_INT 1
24314: LESS
24315: IFFALSE 24319
// exit ;
24317: GO 24622
// if pos = 1 then
24319: LD_VAR 0 2
24323: PUSH
24324: LD_INT 1
24326: EQUAL
24327: IFFALSE 24360
// result := Replace ( arr , pos [ 1 ] , value ) else
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: CALL_OW 1
24357: ST_TO_ADDR
24358: GO 24622
// begin tmp := arr ;
24360: LD_ADDR_VAR 0 6
24364: PUSH
24365: LD_VAR 0 1
24369: ST_TO_ADDR
// s_arr := [ tmp ] ;
24370: LD_ADDR_VAR 0 7
24374: PUSH
24375: LD_VAR 0 6
24379: PUSH
24380: EMPTY
24381: LIST
24382: ST_TO_ADDR
// for i = 1 to pos - 1 do
24383: LD_ADDR_VAR 0 5
24387: PUSH
24388: DOUBLE
24389: LD_INT 1
24391: DEC
24392: ST_TO_ADDR
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: MINUS
24401: PUSH
24402: FOR_TO
24403: IFFALSE 24448
// begin tmp := tmp [ pos [ i ] ] ;
24405: LD_ADDR_VAR 0 6
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_VAR 0 5
24424: ARRAY
24425: ARRAY
24426: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24427: LD_ADDR_VAR 0 7
24431: PUSH
24432: LD_VAR 0 7
24436: PUSH
24437: LD_VAR 0 6
24441: PUSH
24442: EMPTY
24443: LIST
24444: ADD
24445: ST_TO_ADDR
// end ;
24446: GO 24402
24448: POP
24449: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24450: LD_ADDR_VAR 0 6
24454: PUSH
24455: LD_VAR 0 6
24459: PPUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_VAR 0 2
24469: ARRAY
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: CALL_OW 1
24480: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24481: LD_ADDR_VAR 0 7
24485: PUSH
24486: LD_VAR 0 7
24490: PPUSH
24491: LD_VAR 0 7
24495: PPUSH
24496: LD_VAR 0 6
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// for i = s_arr downto 2 do
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: DOUBLE
24512: LD_VAR 0 7
24516: INC
24517: ST_TO_ADDR
24518: LD_INT 2
24520: PUSH
24521: FOR_DOWNTO
24522: IFFALSE 24606
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24524: LD_ADDR_VAR 0 6
24528: PUSH
24529: LD_VAR 0 7
24533: PUSH
24534: LD_VAR 0 5
24538: PUSH
24539: LD_INT 1
24541: MINUS
24542: ARRAY
24543: PPUSH
24544: LD_VAR 0 2
24548: PUSH
24549: LD_VAR 0 5
24553: PUSH
24554: LD_INT 1
24556: MINUS
24557: ARRAY
24558: PPUSH
24559: LD_VAR 0 7
24563: PUSH
24564: LD_VAR 0 5
24568: ARRAY
24569: PPUSH
24570: CALL_OW 1
24574: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24575: LD_ADDR_VAR 0 7
24579: PUSH
24580: LD_VAR 0 7
24584: PPUSH
24585: LD_VAR 0 5
24589: PUSH
24590: LD_INT 1
24592: MINUS
24593: PPUSH
24594: LD_VAR 0 6
24598: PPUSH
24599: CALL_OW 1
24603: ST_TO_ADDR
// end ;
24604: GO 24521
24606: POP
24607: POP
// result := s_arr [ 1 ] ;
24608: LD_ADDR_VAR 0 4
24612: PUSH
24613: LD_VAR 0 7
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: ST_TO_ADDR
// end ; end ;
24622: LD_VAR 0 4
24626: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
// if not list then
24631: LD_VAR 0 1
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24731
// i := list [ pos1 ] ;
24640: LD_ADDR_VAR 0 5
24644: PUSH
24645: LD_VAR 0 1
24649: PUSH
24650: LD_VAR 0 2
24654: ARRAY
24655: ST_TO_ADDR
// if not i then
24656: LD_VAR 0 5
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 24731
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24665: LD_ADDR_VAR 0 1
24669: PUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 1
24684: PUSH
24685: LD_VAR 0 3
24689: ARRAY
24690: PPUSH
24691: CALL_OW 1
24695: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 3
24710: PPUSH
24711: LD_VAR 0 5
24715: PPUSH
24716: CALL_OW 1
24720: ST_TO_ADDR
// result := list ;
24721: LD_ADDR_VAR 0 4
24725: PUSH
24726: LD_VAR 0 1
24730: ST_TO_ADDR
// end ;
24731: LD_VAR 0 4
24735: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24736: LD_INT 0
24738: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 250
24753: PPUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 251
24763: PPUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: LD_VAR 0 4
24778: PPUSH
24779: CALL 24789 0 5
24783: ST_TO_ADDR
// end ;
24784: LD_VAR 0 5
24788: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
// if not list then
24795: LD_VAR 0 3
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 25192
// result := [ ] ;
24804: LD_ADDR_VAR 0 6
24808: PUSH
24809: EMPTY
24810: ST_TO_ADDR
// for i in list do
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: FOR_IN
24822: IFFALSE 25024
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24824: LD_ADDR_VAR 0 9
24828: PUSH
24829: LD_VAR 0 7
24833: PPUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_VAR 0 2
24843: PPUSH
24844: CALL_OW 297
24848: ST_TO_ADDR
// if not result then
24849: LD_VAR 0 6
24853: NOT
24854: IFFALSE 24880
// result := [ [ i , tmp ] ] else
24856: LD_ADDR_VAR 0 6
24860: PUSH
24861: LD_VAR 0 7
24865: PUSH
24866: LD_VAR 0 9
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: ST_TO_ADDR
24878: GO 25022
// begin if result [ result ] [ 2 ] < tmp then
24880: LD_VAR 0 6
24884: PUSH
24885: LD_VAR 0 6
24889: ARRAY
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PUSH
24895: LD_VAR 0 9
24899: LESS
24900: IFFALSE 24942
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24902: LD_ADDR_VAR 0 6
24906: PUSH
24907: LD_VAR 0 6
24911: PPUSH
24912: LD_VAR 0 6
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: LD_VAR 0 7
24925: PUSH
24926: LD_VAR 0 9
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 2
24939: ST_TO_ADDR
24940: GO 25022
// for j = 1 to result do
24942: LD_ADDR_VAR 0 8
24946: PUSH
24947: DOUBLE
24948: LD_INT 1
24950: DEC
24951: ST_TO_ADDR
24952: LD_VAR 0 6
24956: PUSH
24957: FOR_TO
24958: IFFALSE 25020
// begin if tmp < result [ j ] [ 2 ] then
24960: LD_VAR 0 9
24964: PUSH
24965: LD_VAR 0 6
24969: PUSH
24970: LD_VAR 0 8
24974: ARRAY
24975: PUSH
24976: LD_INT 2
24978: ARRAY
24979: LESS
24980: IFFALSE 25018
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: LD_VAR 0 6
24991: PPUSH
24992: LD_VAR 0 8
24996: PPUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_VAR 0 9
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PPUSH
25011: CALL_OW 2
25015: ST_TO_ADDR
// break ;
25016: GO 25020
// end ; end ;
25018: GO 24957
25020: POP
25021: POP
// end ; end ;
25022: GO 24821
25024: POP
25025: POP
// if result and not asc then
25026: LD_VAR 0 6
25030: PUSH
25031: LD_VAR 0 4
25035: NOT
25036: AND
25037: IFFALSE 25112
// begin tmp := result ;
25039: LD_ADDR_VAR 0 9
25043: PUSH
25044: LD_VAR 0 6
25048: ST_TO_ADDR
// for i = tmp downto 1 do
25049: LD_ADDR_VAR 0 7
25053: PUSH
25054: DOUBLE
25055: LD_VAR 0 9
25059: INC
25060: ST_TO_ADDR
25061: LD_INT 1
25063: PUSH
25064: FOR_DOWNTO
25065: IFFALSE 25110
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: LD_VAR 0 6
25076: PPUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_VAR 0 7
25086: MINUS
25087: PUSH
25088: LD_INT 1
25090: PLUS
25091: PPUSH
25092: LD_VAR 0 9
25096: PUSH
25097: LD_VAR 0 7
25101: ARRAY
25102: PPUSH
25103: CALL_OW 1
25107: ST_TO_ADDR
25108: GO 25064
25110: POP
25111: POP
// end ; tmp := [ ] ;
25112: LD_ADDR_VAR 0 9
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
// if mode then
25119: LD_VAR 0 5
25123: IFFALSE 25192
// begin for i = 1 to result do
25125: LD_ADDR_VAR 0 7
25129: PUSH
25130: DOUBLE
25131: LD_INT 1
25133: DEC
25134: ST_TO_ADDR
25135: LD_VAR 0 6
25139: PUSH
25140: FOR_TO
25141: IFFALSE 25180
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_VAR 0 9
25152: PPUSH
25153: LD_VAR 0 7
25157: PPUSH
25158: LD_VAR 0 6
25162: PUSH
25163: LD_VAR 0 7
25167: ARRAY
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
25178: GO 25140
25180: POP
25181: POP
// result := tmp ;
25182: LD_ADDR_VAR 0 6
25186: PUSH
25187: LD_VAR 0 9
25191: ST_TO_ADDR
// end ; end ;
25192: LD_VAR 0 6
25196: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25197: LD_INT 0
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25205: LD_ADDR_VAR 0 5
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
// if not x or not y then
25227: LD_VAR 0 2
25231: NOT
25232: PUSH
25233: LD_VAR 0 3
25237: NOT
25238: OR
25239: IFFALSE 25243
// exit ;
25241: GO 26889
// if not range then
25243: LD_VAR 0 4
25247: NOT
25248: IFFALSE 25258
// range := 10 ;
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_INT 10
25257: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25258: LD_ADDR_VAR 0 8
25262: PUSH
25263: LD_INT 81
25265: PUSH
25266: LD_VAR 0 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 92
25277: PUSH
25278: LD_VAR 0 2
25282: PUSH
25283: LD_VAR 0 3
25287: PUSH
25288: LD_VAR 0 4
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: LD_INT 21
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 69
25325: ST_TO_ADDR
// if not tmp then
25326: LD_VAR 0 8
25330: NOT
25331: IFFALSE 25335
// exit ;
25333: GO 26889
// for i in tmp do
25335: LD_ADDR_VAR 0 6
25339: PUSH
25340: LD_VAR 0 8
25344: PUSH
25345: FOR_IN
25346: IFFALSE 26864
// begin points := [ 0 , 0 , 0 ] ;
25348: LD_ADDR_VAR 0 9
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
// bpoints := 1 ;
25367: LD_ADDR_VAR 0 10
25371: PUSH
25372: LD_INT 1
25374: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25375: LD_VAR 0 6
25379: PPUSH
25380: CALL_OW 247
25384: PUSH
25385: LD_INT 1
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25971
25393: POP
// begin if GetClass ( i ) = 1 then
25394: LD_VAR 0 6
25398: PPUSH
25399: CALL_OW 257
25403: PUSH
25404: LD_INT 1
25406: EQUAL
25407: IFFALSE 25428
// points := [ 10 , 5 , 3 ] ;
25409: LD_ADDR_VAR 0 9
25413: PUSH
25414: LD_INT 10
25416: PUSH
25417: LD_INT 5
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25428: LD_VAR 0 6
25432: PPUSH
25433: CALL_OW 257
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: LD_INT 4
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: IN
25452: IFFALSE 25473
// points := [ 3 , 2 , 1 ] ;
25454: LD_ADDR_VAR 0 9
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25473: LD_VAR 0 6
25477: PPUSH
25478: CALL_OW 257
25482: PUSH
25483: LD_INT 5
25485: EQUAL
25486: IFFALSE 25507
// points := [ 130 , 5 , 2 ] ;
25488: LD_ADDR_VAR 0 9
25492: PUSH
25493: LD_INT 130
25495: PUSH
25496: LD_INT 5
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25507: LD_VAR 0 6
25511: PPUSH
25512: CALL_OW 257
25516: PUSH
25517: LD_INT 8
25519: EQUAL
25520: IFFALSE 25541
// points := [ 35 , 35 , 30 ] ;
25522: LD_ADDR_VAR 0 9
25526: PUSH
25527: LD_INT 35
25529: PUSH
25530: LD_INT 35
25532: PUSH
25533: LD_INT 30
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25541: LD_VAR 0 6
25545: PPUSH
25546: CALL_OW 257
25550: PUSH
25551: LD_INT 9
25553: EQUAL
25554: IFFALSE 25575
// points := [ 20 , 55 , 40 ] ;
25556: LD_ADDR_VAR 0 9
25560: PUSH
25561: LD_INT 20
25563: PUSH
25564: LD_INT 55
25566: PUSH
25567: LD_INT 40
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25575: LD_VAR 0 6
25579: PPUSH
25580: CALL_OW 257
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 16
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: IN
25595: IFFALSE 25616
// points := [ 5 , 3 , 2 ] ;
25597: LD_ADDR_VAR 0 9
25601: PUSH
25602: LD_INT 5
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25616: LD_VAR 0 6
25620: PPUSH
25621: CALL_OW 257
25625: PUSH
25626: LD_INT 17
25628: EQUAL
25629: IFFALSE 25650
// points := [ 100 , 50 , 75 ] ;
25631: LD_ADDR_VAR 0 9
25635: PUSH
25636: LD_INT 100
25638: PUSH
25639: LD_INT 50
25641: PUSH
25642: LD_INT 75
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25650: LD_VAR 0 6
25654: PPUSH
25655: CALL_OW 257
25659: PUSH
25660: LD_INT 15
25662: EQUAL
25663: IFFALSE 25684
// points := [ 10 , 5 , 3 ] ;
25665: LD_ADDR_VAR 0 9
25669: PUSH
25670: LD_INT 10
25672: PUSH
25673: LD_INT 5
25675: PUSH
25676: LD_INT 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25684: LD_VAR 0 6
25688: PPUSH
25689: CALL_OW 257
25693: PUSH
25694: LD_INT 14
25696: EQUAL
25697: IFFALSE 25718
// points := [ 10 , 0 , 0 ] ;
25699: LD_ADDR_VAR 0 9
25703: PUSH
25704: LD_INT 10
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25718: LD_VAR 0 6
25722: PPUSH
25723: CALL_OW 257
25727: PUSH
25728: LD_INT 11
25730: EQUAL
25731: IFFALSE 25752
// points := [ 30 , 10 , 5 ] ;
25733: LD_ADDR_VAR 0 9
25737: PUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 10
25743: PUSH
25744: LD_INT 5
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_INT 5
25759: PPUSH
25760: CALL_OW 321
25764: PUSH
25765: LD_INT 2
25767: EQUAL
25768: IFFALSE 25785
// bpoints := bpoints * 1.8 ;
25770: LD_ADDR_VAR 0 10
25774: PUSH
25775: LD_VAR 0 10
25779: PUSH
25780: LD_REAL  1.80000000000000E+0000
25783: MUL
25784: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25785: LD_VAR 0 6
25789: PPUSH
25790: CALL_OW 257
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 4
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: IN
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_INT 51
25821: PPUSH
25822: CALL_OW 321
25826: PUSH
25827: LD_INT 2
25829: EQUAL
25830: AND
25831: IFFALSE 25848
// bpoints := bpoints * 1.2 ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 10
25842: PUSH
25843: LD_REAL  1.20000000000000E+0000
25846: MUL
25847: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25848: LD_VAR 0 6
25852: PPUSH
25853: CALL_OW 257
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: LD_INT 7
25863: PUSH
25864: LD_INT 9
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: IN
25872: PUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_INT 52
25880: PPUSH
25881: CALL_OW 321
25885: PUSH
25886: LD_INT 2
25888: EQUAL
25889: AND
25890: IFFALSE 25907
// bpoints := bpoints * 1.5 ;
25892: LD_ADDR_VAR 0 10
25896: PUSH
25897: LD_VAR 0 10
25901: PUSH
25902: LD_REAL  1.50000000000000E+0000
25905: MUL
25906: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_INT 66
25914: PPUSH
25915: CALL_OW 321
25919: PUSH
25920: LD_INT 2
25922: EQUAL
25923: IFFALSE 25940
// bpoints := bpoints * 1.1 ;
25925: LD_ADDR_VAR 0 10
25929: PUSH
25930: LD_VAR 0 10
25934: PUSH
25935: LD_REAL  1.10000000000000E+0000
25938: MUL
25939: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25940: LD_ADDR_VAR 0 10
25944: PUSH
25945: LD_VAR 0 10
25949: PUSH
25950: LD_VAR 0 6
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 259
25962: PUSH
25963: LD_REAL  1.15000000000000E+0000
25966: MUL
25967: MUL
25968: ST_TO_ADDR
// end ; unit_vehicle :
25969: GO 26793
25971: LD_INT 2
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26781
25979: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25980: LD_VAR 0 6
25984: PPUSH
25985: CALL_OW 264
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 42
25995: PUSH
25996: LD_INT 24
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: IN
26004: IFFALSE 26025
// points := [ 25 , 5 , 3 ] ;
26006: LD_ADDR_VAR 0 9
26010: PUSH
26011: LD_INT 25
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26025: LD_VAR 0 6
26029: PPUSH
26030: CALL_OW 264
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: LD_INT 43
26040: PUSH
26041: LD_INT 25
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: IN
26049: IFFALSE 26070
// points := [ 40 , 15 , 5 ] ;
26051: LD_ADDR_VAR 0 9
26055: PUSH
26056: LD_INT 40
26058: PUSH
26059: LD_INT 15
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26070: LD_VAR 0 6
26074: PPUSH
26075: CALL_OW 264
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 23
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: IN
26090: IFFALSE 26111
// points := [ 7 , 25 , 8 ] ;
26092: LD_ADDR_VAR 0 9
26096: PUSH
26097: LD_INT 7
26099: PUSH
26100: LD_INT 25
26102: PUSH
26103: LD_INT 8
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26111: LD_VAR 0 6
26115: PPUSH
26116: CALL_OW 264
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: LD_INT 27
26126: PUSH
26127: LD_INT 44
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: IN
26135: IFFALSE 26156
// points := [ 14 , 50 , 16 ] ;
26137: LD_ADDR_VAR 0 9
26141: PUSH
26142: LD_INT 14
26144: PUSH
26145: LD_INT 50
26147: PUSH
26148: LD_INT 16
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26156: LD_VAR 0 6
26160: PPUSH
26161: CALL_OW 264
26165: PUSH
26166: LD_INT 6
26168: PUSH
26169: LD_INT 46
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: IN
26176: IFFALSE 26197
// points := [ 32 , 120 , 70 ] ;
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_INT 32
26185: PUSH
26186: LD_INT 120
26188: PUSH
26189: LD_INT 70
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 264
26206: PUSH
26207: LD_INT 7
26209: PUSH
26210: LD_INT 28
26212: PUSH
26213: LD_INT 45
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: IN
26221: IFFALSE 26242
// points := [ 35 , 20 , 45 ] ;
26223: LD_ADDR_VAR 0 9
26227: PUSH
26228: LD_INT 35
26230: PUSH
26231: LD_INT 20
26233: PUSH
26234: LD_INT 45
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26242: LD_VAR 0 6
26246: PPUSH
26247: CALL_OW 264
26251: PUSH
26252: LD_INT 47
26254: PUSH
26255: EMPTY
26256: LIST
26257: IN
26258: IFFALSE 26279
// points := [ 67 , 45 , 75 ] ;
26260: LD_ADDR_VAR 0 9
26264: PUSH
26265: LD_INT 67
26267: PUSH
26268: LD_INT 45
26270: PUSH
26271: LD_INT 75
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26279: LD_VAR 0 6
26283: PPUSH
26284: CALL_OW 264
26288: PUSH
26289: LD_INT 26
26291: PUSH
26292: EMPTY
26293: LIST
26294: IN
26295: IFFALSE 26316
// points := [ 120 , 30 , 80 ] ;
26297: LD_ADDR_VAR 0 9
26301: PUSH
26302: LD_INT 120
26304: PUSH
26305: LD_INT 30
26307: PUSH
26308: LD_INT 80
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26316: LD_VAR 0 6
26320: PPUSH
26321: CALL_OW 264
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: EMPTY
26330: LIST
26331: IN
26332: IFFALSE 26353
// points := [ 40 , 1 , 1 ] ;
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: LD_INT 40
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26353: LD_VAR 0 6
26357: PPUSH
26358: CALL_OW 264
26362: PUSH
26363: LD_INT 29
26365: PUSH
26366: EMPTY
26367: LIST
26368: IN
26369: IFFALSE 26390
// points := [ 70 , 200 , 400 ] ;
26371: LD_ADDR_VAR 0 9
26375: PUSH
26376: LD_INT 70
26378: PUSH
26379: LD_INT 200
26381: PUSH
26382: LD_INT 400
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26390: LD_VAR 0 6
26394: PPUSH
26395: CALL_OW 264
26399: PUSH
26400: LD_INT 14
26402: PUSH
26403: LD_INT 53
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: IN
26410: IFFALSE 26431
// points := [ 40 , 10 , 20 ] ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_INT 40
26419: PUSH
26420: LD_INT 10
26422: PUSH
26423: LD_INT 20
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 264
26440: PUSH
26441: LD_INT 9
26443: PUSH
26444: EMPTY
26445: LIST
26446: IN
26447: IFFALSE 26468
// points := [ 5 , 70 , 20 ] ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_INT 5
26456: PUSH
26457: LD_INT 70
26459: PUSH
26460: LD_INT 20
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26468: LD_VAR 0 6
26472: PPUSH
26473: CALL_OW 264
26477: PUSH
26478: LD_INT 10
26480: PUSH
26481: EMPTY
26482: LIST
26483: IN
26484: IFFALSE 26505
// points := [ 35 , 110 , 70 ] ;
26486: LD_ADDR_VAR 0 9
26490: PUSH
26491: LD_INT 35
26493: PUSH
26494: LD_INT 110
26496: PUSH
26497: LD_INT 70
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26505: LD_VAR 0 6
26509: PPUSH
26510: CALL_OW 265
26514: PUSH
26515: LD_INT 25
26517: EQUAL
26518: IFFALSE 26539
// points := [ 80 , 65 , 100 ] ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_INT 80
26527: PUSH
26528: LD_INT 65
26530: PUSH
26531: LD_INT 100
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26539: LD_VAR 0 6
26543: PPUSH
26544: CALL_OW 263
26548: PUSH
26549: LD_INT 1
26551: EQUAL
26552: IFFALSE 26587
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26554: LD_ADDR_VAR 0 10
26558: PUSH
26559: LD_VAR 0 10
26563: PUSH
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 311
26573: PPUSH
26574: LD_INT 3
26576: PPUSH
26577: CALL_OW 259
26581: PUSH
26582: LD_INT 4
26584: MUL
26585: MUL
26586: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26587: LD_VAR 0 6
26591: PPUSH
26592: CALL_OW 263
26596: PUSH
26597: LD_INT 2
26599: EQUAL
26600: IFFALSE 26651
// begin j := IsControledBy ( i ) ;
26602: LD_ADDR_VAR 0 7
26606: PUSH
26607: LD_VAR 0 6
26611: PPUSH
26612: CALL_OW 312
26616: ST_TO_ADDR
// if j then
26617: LD_VAR 0 7
26621: IFFALSE 26651
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26623: LD_ADDR_VAR 0 10
26627: PUSH
26628: LD_VAR 0 10
26632: PUSH
26633: LD_VAR 0 7
26637: PPUSH
26638: LD_INT 3
26640: PPUSH
26641: CALL_OW 259
26645: PUSH
26646: LD_INT 3
26648: MUL
26649: MUL
26650: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26651: LD_VAR 0 6
26655: PPUSH
26656: CALL_OW 264
26660: PUSH
26661: LD_INT 5
26663: PUSH
26664: LD_INT 6
26666: PUSH
26667: LD_INT 46
26669: PUSH
26670: LD_INT 44
26672: PUSH
26673: LD_INT 47
26675: PUSH
26676: LD_INT 45
26678: PUSH
26679: LD_INT 28
26681: PUSH
26682: LD_INT 7
26684: PUSH
26685: LD_INT 27
26687: PUSH
26688: LD_INT 29
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: IN
26703: PUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_INT 52
26711: PPUSH
26712: CALL_OW 321
26716: PUSH
26717: LD_INT 2
26719: EQUAL
26720: AND
26721: IFFALSE 26738
// bpoints := bpoints * 1.2 ;
26723: LD_ADDR_VAR 0 10
26727: PUSH
26728: LD_VAR 0 10
26732: PUSH
26733: LD_REAL  1.20000000000000E+0000
26736: MUL
26737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26738: LD_VAR 0 6
26742: PPUSH
26743: CALL_OW 264
26747: PUSH
26748: LD_INT 6
26750: PUSH
26751: LD_INT 46
26753: PUSH
26754: LD_INT 47
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: IN
26762: IFFALSE 26779
// bpoints := bpoints * 1.2 ;
26764: LD_ADDR_VAR 0 10
26768: PUSH
26769: LD_VAR 0 10
26773: PUSH
26774: LD_REAL  1.20000000000000E+0000
26777: MUL
26778: ST_TO_ADDR
// end ; unit_building :
26779: GO 26793
26781: LD_INT 3
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26792
26789: POP
// ; end ;
26790: GO 26793
26792: POP
// for j = 1 to 3 do
26793: LD_ADDR_VAR 0 7
26797: PUSH
26798: DOUBLE
26799: LD_INT 1
26801: DEC
26802: ST_TO_ADDR
26803: LD_INT 3
26805: PUSH
26806: FOR_TO
26807: IFFALSE 26860
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 5
26818: PPUSH
26819: LD_VAR 0 7
26823: PPUSH
26824: LD_VAR 0 5
26828: PUSH
26829: LD_VAR 0 7
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 9
26839: PUSH
26840: LD_VAR 0 7
26844: ARRAY
26845: PUSH
26846: LD_VAR 0 10
26850: MUL
26851: PLUS
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
26858: GO 26806
26860: POP
26861: POP
// end ;
26862: GO 25345
26864: POP
26865: POP
// result := Replace ( result , 4 , tmp ) ;
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: LD_VAR 0 8
26883: PPUSH
26884: CALL_OW 1
26888: ST_TO_ADDR
// end ;
26889: LD_VAR 0 5
26893: RET
// export function DangerAtRange ( unit , range ) ; begin
26894: LD_INT 0
26896: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 255
26911: PPUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 250
26921: PPUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 251
26931: PPUSH
26932: LD_VAR 0 2
26936: PPUSH
26937: CALL 25197 0 4
26941: ST_TO_ADDR
// end ;
26942: LD_VAR 0 3
26946: RET
// export function DangerInArea ( side , area ) ; begin
26947: LD_INT 0
26949: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 2
26959: PPUSH
26960: LD_INT 81
26962: PUSH
26963: LD_VAR 0 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 70
26976: ST_TO_ADDR
// end ;
26977: LD_VAR 0 3
26981: RET
// export function IsExtension ( b ) ; begin
26982: LD_INT 0
26984: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: LD_VAR 0 1
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 20
27000: PUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 17
27006: PUSH
27007: LD_INT 24
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 19
27015: PUSH
27016: LD_INT 16
27018: PUSH
27019: LD_INT 25
27021: PUSH
27022: LD_INT 18
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: IN
27037: ST_TO_ADDR
// end ;
27038: LD_VAR 0 2
27042: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
27047: PPUSH
// result := [ ] ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27055: LD_ADDR_VAR 0 4
27059: PUSH
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 70
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 4
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27147
// for i in tmp do
27089: LD_ADDR_VAR 0 5
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: FOR_IN
27100: IFFALSE 27135
// if GetBase ( i ) <> base then
27102: LD_VAR 0 5
27106: PPUSH
27107: CALL_OW 274
27111: PUSH
27112: LD_VAR 0 1
27116: NONEQUAL
27117: IFFALSE 27133
// ComLinkToBase ( base , i ) ;
27119: LD_VAR 0 1
27123: PPUSH
27124: LD_VAR 0 5
27128: PPUSH
27129: CALL_OW 169
27133: GO 27099
27135: POP
27136: POP
// result := tmp ;
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// end ;
27147: LD_VAR 0 3
27151: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27152: LD_INT 0
27154: PPUSH
27155: PPUSH
// if BuildingStatus ( b ) = bs_build then
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 461
27165: PUSH
27166: LD_INT 1
27168: EQUAL
27169: IFFALSE 27229
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_STRING h
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 250
27188: PUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 251
27198: PUSH
27199: LD_VAR 0 2
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: PPUSH
27225: CALL_OW 446
// end ;
27229: LD_VAR 0 3
27233: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27242: LD_VAR 0 1
27246: NOT
27247: PUSH
27248: LD_VAR 0 1
27252: PPUSH
27253: CALL_OW 263
27257: PUSH
27258: LD_INT 2
27260: EQUAL
27261: NOT
27262: OR
27263: IFFALSE 27267
// exit ;
27265: GO 27583
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 255
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 30
27294: PUSH
27295: LD_INT 36
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 34
27304: PUSH
27305: LD_INT 31
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 6
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27583
// result := [ ] ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: EMPTY
27341: ST_TO_ADDR
// for i in tmp do
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_VAR 0 6
27351: PUSH
27352: FOR_IN
27353: IFFALSE 27424
// begin t := UnitsInside ( i ) ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 313
27369: ST_TO_ADDR
// if t then
27370: LD_VAR 0 4
27374: IFFALSE 27422
// for j in t do
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_VAR 0 4
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27420
// result := Insert ( result , result + 1 , j ) ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_VAR 0 2
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: PPUSH
27408: LD_VAR 0 7
27412: PPUSH
27413: CALL_OW 2
27417: ST_TO_ADDR
27418: GO 27386
27420: POP
27421: POP
// end ;
27422: GO 27352
27424: POP
27425: POP
// if not result then
27426: LD_VAR 0 2
27430: NOT
27431: IFFALSE 27435
// exit ;
27433: GO 27583
// mech := result [ 1 ] ;
27435: LD_ADDR_VAR 0 5
27439: PUSH
27440: LD_VAR 0 2
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: ST_TO_ADDR
// if result > 1 then
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: GREATER
27457: IFFALSE 27569
// for i = 2 to result do
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: DOUBLE
27465: LD_INT 2
27467: DEC
27468: ST_TO_ADDR
27469: LD_VAR 0 2
27473: PUSH
27474: FOR_TO
27475: IFFALSE 27567
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_VAR 0 3
27491: ARRAY
27492: PPUSH
27493: LD_INT 3
27495: PPUSH
27496: CALL_OW 259
27500: PUSH
27501: LD_VAR 0 2
27505: PUSH
27506: LD_VAR 0 3
27510: ARRAY
27511: PPUSH
27512: CALL_OW 432
27516: MINUS
27517: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27518: LD_VAR 0 4
27522: PUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: LD_INT 3
27530: PPUSH
27531: CALL_OW 259
27535: PUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL_OW 432
27545: MINUS
27546: GREATEREQUAL
27547: IFFALSE 27565
// mech := result [ i ] ;
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 2
27558: PUSH
27559: LD_VAR 0 3
27563: ARRAY
27564: ST_TO_ADDR
// end ;
27565: GO 27474
27567: POP
27568: POP
// ComLinkTo ( vehicle , mech ) ;
27569: LD_VAR 0 1
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL_OW 135
// end ;
27583: LD_VAR 0 2
27587: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
// result := [ ] ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: EMPTY
27609: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27610: LD_VAR 0 1
27614: PPUSH
27615: CALL_OW 266
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: IN
27630: NOT
27631: IFFALSE 27635
// exit ;
27633: GO 29266
// if name then
27635: LD_VAR 0 3
27639: IFFALSE 27655
// SetBName ( base_dep , name ) ;
27641: LD_VAR 0 1
27645: PPUSH
27646: LD_VAR 0 3
27650: PPUSH
27651: CALL_OW 500
// base := GetBase ( base_dep ) ;
27655: LD_ADDR_VAR 0 15
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 274
27669: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27670: LD_ADDR_VAR 0 16
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27685: LD_ADDR_VAR 0 17
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 248
27699: ST_TO_ADDR
// if sources then
27700: LD_VAR 0 5
27704: IFFALSE 27751
// for i = 1 to 3 do
27706: LD_ADDR_VAR 0 8
27710: PUSH
27711: DOUBLE
27712: LD_INT 1
27714: DEC
27715: ST_TO_ADDR
27716: LD_INT 3
27718: PUSH
27719: FOR_TO
27720: IFFALSE 27749
// AddResourceType ( base , i , sources [ i ] ) ;
27722: LD_VAR 0 15
27726: PPUSH
27727: LD_VAR 0 8
27731: PPUSH
27732: LD_VAR 0 5
27736: PUSH
27737: LD_VAR 0 8
27741: ARRAY
27742: PPUSH
27743: CALL_OW 276
27747: GO 27719
27749: POP
27750: POP
// buildings := GetBaseBuildings ( base , area ) ;
27751: LD_ADDR_VAR 0 18
27755: PUSH
27756: LD_VAR 0 15
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL 27043 0 2
27770: ST_TO_ADDR
// InitHc ;
27771: CALL_OW 19
// InitUc ;
27775: CALL_OW 18
// uc_side := side ;
27779: LD_ADDR_OWVAR 20
27783: PUSH
27784: LD_VAR 0 16
27788: ST_TO_ADDR
// uc_nation := nation ;
27789: LD_ADDR_OWVAR 21
27793: PUSH
27794: LD_VAR 0 17
27798: ST_TO_ADDR
// if buildings then
27799: LD_VAR 0 18
27803: IFFALSE 29125
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27805: LD_ADDR_VAR 0 19
27809: PUSH
27810: LD_VAR 0 18
27814: PPUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 29
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 72
27847: ST_TO_ADDR
// if tmp then
27848: LD_VAR 0 19
27852: IFFALSE 27900
// for i in tmp do
27854: LD_ADDR_VAR 0 8
27858: PUSH
27859: LD_VAR 0 19
27863: PUSH
27864: FOR_IN
27865: IFFALSE 27898
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27867: LD_VAR 0 8
27871: PPUSH
27872: CALL_OW 250
27876: PPUSH
27877: LD_VAR 0 8
27881: PPUSH
27882: CALL_OW 251
27886: PPUSH
27887: LD_VAR 0 16
27891: PPUSH
27892: CALL_OW 441
27896: GO 27864
27898: POP
27899: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27900: LD_VAR 0 18
27904: PPUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 30
27910: PUSH
27911: LD_INT 32
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 30
27920: PUSH
27921: LD_INT 33
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 72
27937: IFFALSE 28025
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27939: LD_ADDR_VAR 0 8
27943: PUSH
27944: LD_VAR 0 18
27948: PPUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 32
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 33
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: PUSH
27982: FOR_IN
27983: IFFALSE 28023
// begin if not GetBWeapon ( i ) then
27985: LD_VAR 0 8
27989: PPUSH
27990: CALL_OW 269
27994: NOT
27995: IFFALSE 28021
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27997: LD_VAR 0 8
28001: PPUSH
28002: LD_VAR 0 8
28006: PPUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL 29271 0 2
28016: PPUSH
28017: CALL_OW 431
// end ;
28021: GO 27982
28023: POP
28024: POP
// end ; for i = 1 to personel do
28025: LD_ADDR_VAR 0 8
28029: PUSH
28030: DOUBLE
28031: LD_INT 1
28033: DEC
28034: ST_TO_ADDR
28035: LD_VAR 0 6
28039: PUSH
28040: FOR_TO
28041: IFFALSE 29105
// begin if i > 4 then
28043: LD_VAR 0 8
28047: PUSH
28048: LD_INT 4
28050: GREATER
28051: IFFALSE 28055
// break ;
28053: GO 29105
// case i of 1 :
28055: LD_VAR 0 8
28059: PUSH
28060: LD_INT 1
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28148
28068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28069: LD_ADDR_VAR 0 12
28073: PUSH
28074: LD_VAR 0 18
28078: PPUSH
28079: LD_INT 22
28081: PUSH
28082: LD_VAR 0 16
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 58
28093: PUSH
28094: EMPTY
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: LD_INT 30
28102: PUSH
28103: LD_INT 32
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 30
28112: PUSH
28113: LD_INT 4
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 30
28122: PUSH
28123: LD_INT 5
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 72
28145: ST_TO_ADDR
28146: GO 28370
28148: LD_INT 2
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28218
28156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28157: LD_ADDR_VAR 0 12
28161: PUSH
28162: LD_VAR 0 18
28166: PPUSH
28167: LD_INT 22
28169: PUSH
28170: LD_VAR 0 16
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 30
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 72
28215: ST_TO_ADDR
28216: GO 28370
28218: LD_INT 3
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28288
28226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28227: LD_ADDR_VAR 0 12
28231: PUSH
28232: LD_VAR 0 18
28236: PPUSH
28237: LD_INT 22
28239: PUSH
28240: LD_VAR 0 16
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 72
28285: ST_TO_ADDR
28286: GO 28370
28288: LD_INT 4
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28369
28296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28297: LD_ADDR_VAR 0 12
28301: PUSH
28302: LD_VAR 0 18
28306: PPUSH
28307: LD_INT 22
28309: PUSH
28310: LD_VAR 0 16
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 30
28324: PUSH
28325: LD_INT 6
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 30
28334: PUSH
28335: LD_INT 7
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 8
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PPUSH
28362: CALL_OW 72
28366: ST_TO_ADDR
28367: GO 28370
28369: POP
// if i = 1 then
28370: LD_VAR 0 8
28374: PUSH
28375: LD_INT 1
28377: EQUAL
28378: IFFALSE 28489
// begin tmp := [ ] ;
28380: LD_ADDR_VAR 0 19
28384: PUSH
28385: EMPTY
28386: ST_TO_ADDR
// for j in f do
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_VAR 0 12
28396: PUSH
28397: FOR_IN
28398: IFFALSE 28471
// if GetBType ( j ) = b_bunker then
28400: LD_VAR 0 9
28404: PPUSH
28405: CALL_OW 266
28409: PUSH
28410: LD_INT 32
28412: EQUAL
28413: IFFALSE 28440
// tmp := Insert ( tmp , 1 , j ) else
28415: LD_ADDR_VAR 0 19
28419: PUSH
28420: LD_VAR 0 19
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: LD_VAR 0 9
28432: PPUSH
28433: CALL_OW 2
28437: ST_TO_ADDR
28438: GO 28469
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28440: LD_ADDR_VAR 0 19
28444: PUSH
28445: LD_VAR 0 19
28449: PPUSH
28450: LD_VAR 0 19
28454: PUSH
28455: LD_INT 1
28457: PLUS
28458: PPUSH
28459: LD_VAR 0 9
28463: PPUSH
28464: CALL_OW 2
28468: ST_TO_ADDR
28469: GO 28397
28471: POP
28472: POP
// if tmp then
28473: LD_VAR 0 19
28477: IFFALSE 28489
// f := tmp ;
28479: LD_ADDR_VAR 0 12
28483: PUSH
28484: LD_VAR 0 19
28488: ST_TO_ADDR
// end ; x := personel [ i ] ;
28489: LD_ADDR_VAR 0 13
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_VAR 0 8
28503: ARRAY
28504: ST_TO_ADDR
// if x = - 1 then
28505: LD_VAR 0 13
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: EQUAL
28514: IFFALSE 28723
// begin for j in f do
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_VAR 0 12
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28719
// repeat InitHc ;
28529: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28533: LD_VAR 0 9
28537: PPUSH
28538: CALL_OW 266
28542: PUSH
28543: LD_INT 5
28545: EQUAL
28546: IFFALSE 28616
// begin if UnitsInside ( j ) < 3 then
28548: LD_VAR 0 9
28552: PPUSH
28553: CALL_OW 313
28557: PUSH
28558: LD_INT 3
28560: LESS
28561: IFFALSE 28597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28563: LD_INT 0
28565: PPUSH
28566: LD_INT 5
28568: PUSH
28569: LD_INT 8
28571: PUSH
28572: LD_INT 9
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: PUSH
28580: LD_VAR 0 17
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 4
28590: PPUSH
28591: CALL_OW 380
28595: GO 28614
// PrepareHuman ( false , i , skill ) ;
28597: LD_INT 0
28599: PPUSH
28600: LD_VAR 0 8
28604: PPUSH
28605: LD_VAR 0 4
28609: PPUSH
28610: CALL_OW 380
// end else
28614: GO 28633
// PrepareHuman ( false , i , skill ) ;
28616: LD_INT 0
28618: PPUSH
28619: LD_VAR 0 8
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: CALL_OW 380
// un := CreateHuman ;
28633: LD_ADDR_VAR 0 14
28637: PUSH
28638: CALL_OW 44
28642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28643: LD_ADDR_VAR 0 7
28647: PUSH
28648: LD_VAR 0 7
28652: PPUSH
28653: LD_INT 1
28655: PPUSH
28656: LD_VAR 0 14
28660: PPUSH
28661: CALL_OW 2
28665: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28666: LD_VAR 0 14
28670: PPUSH
28671: LD_VAR 0 9
28675: PPUSH
28676: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28680: LD_VAR 0 9
28684: PPUSH
28685: CALL_OW 313
28689: PUSH
28690: LD_INT 6
28692: EQUAL
28693: PUSH
28694: LD_VAR 0 9
28698: PPUSH
28699: CALL_OW 266
28703: PUSH
28704: LD_INT 32
28706: PUSH
28707: LD_INT 31
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: IN
28714: OR
28715: IFFALSE 28529
28717: GO 28526
28719: POP
28720: POP
// end else
28721: GO 29103
// for j = 1 to x do
28723: LD_ADDR_VAR 0 9
28727: PUSH
28728: DOUBLE
28729: LD_INT 1
28731: DEC
28732: ST_TO_ADDR
28733: LD_VAR 0 13
28737: PUSH
28738: FOR_TO
28739: IFFALSE 29101
// begin InitHc ;
28741: CALL_OW 19
// if not f then
28745: LD_VAR 0 12
28749: NOT
28750: IFFALSE 28839
// begin PrepareHuman ( false , i , skill ) ;
28752: LD_INT 0
28754: PPUSH
28755: LD_VAR 0 8
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: CALL_OW 380
// un := CreateHuman ;
28769: LD_ADDR_VAR 0 14
28773: PUSH
28774: CALL_OW 44
28778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_INT 1
28791: PPUSH
28792: LD_VAR 0 14
28796: PPUSH
28797: CALL_OW 2
28801: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28802: LD_VAR 0 14
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 250
28816: PPUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 251
28826: PPUSH
28827: LD_INT 10
28829: PPUSH
28830: LD_INT 0
28832: PPUSH
28833: CALL_OW 50
// continue ;
28837: GO 28738
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28839: LD_VAR 0 12
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: CALL_OW 313
28852: PUSH
28853: LD_VAR 0 12
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 266
28866: PUSH
28867: LD_INT 32
28869: PUSH
28870: LD_INT 31
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: CALL_OW 313
28892: PUSH
28893: LD_INT 6
28895: EQUAL
28896: OR
28897: IFFALSE 28917
// f := Delete ( f , 1 ) ;
28899: LD_ADDR_VAR 0 12
28903: PUSH
28904: LD_VAR 0 12
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 3
28916: ST_TO_ADDR
// if not f then
28917: LD_VAR 0 12
28921: NOT
28922: IFFALSE 28940
// begin x := x + 2 ;
28924: LD_ADDR_VAR 0 13
28928: PUSH
28929: LD_VAR 0 13
28933: PUSH
28934: LD_INT 2
28936: PLUS
28937: ST_TO_ADDR
// continue ;
28938: GO 28738
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28940: LD_VAR 0 12
28944: PUSH
28945: LD_INT 1
28947: ARRAY
28948: PPUSH
28949: CALL_OW 266
28953: PUSH
28954: LD_INT 5
28956: EQUAL
28957: IFFALSE 29031
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28959: LD_VAR 0 12
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: CALL_OW 313
28972: PUSH
28973: LD_INT 3
28975: LESS
28976: IFFALSE 29012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28978: LD_INT 0
28980: PPUSH
28981: LD_INT 5
28983: PUSH
28984: LD_INT 8
28986: PUSH
28987: LD_INT 9
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_VAR 0 17
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 4
29005: PPUSH
29006: CALL_OW 380
29010: GO 29029
// PrepareHuman ( false , i , skill ) ;
29012: LD_INT 0
29014: PPUSH
29015: LD_VAR 0 8
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: CALL_OW 380
// end else
29029: GO 29048
// PrepareHuman ( false , i , skill ) ;
29031: LD_INT 0
29033: PPUSH
29034: LD_VAR 0 8
29038: PPUSH
29039: LD_VAR 0 4
29043: PPUSH
29044: CALL_OW 380
// un := CreateHuman ;
29048: LD_ADDR_VAR 0 14
29052: PUSH
29053: CALL_OW 44
29057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29058: LD_ADDR_VAR 0 7
29062: PUSH
29063: LD_VAR 0 7
29067: PPUSH
29068: LD_INT 1
29070: PPUSH
29071: LD_VAR 0 14
29075: PPUSH
29076: CALL_OW 2
29080: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29081: LD_VAR 0 14
29085: PPUSH
29086: LD_VAR 0 12
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 52
// end ;
29099: GO 28738
29101: POP
29102: POP
// end ;
29103: GO 28040
29105: POP
29106: POP
// result := result ^ buildings ;
29107: LD_ADDR_VAR 0 7
29111: PUSH
29112: LD_VAR 0 7
29116: PUSH
29117: LD_VAR 0 18
29121: ADD
29122: ST_TO_ADDR
// end else
29123: GO 29266
// begin for i = 1 to personel do
29125: LD_ADDR_VAR 0 8
29129: PUSH
29130: DOUBLE
29131: LD_INT 1
29133: DEC
29134: ST_TO_ADDR
29135: LD_VAR 0 6
29139: PUSH
29140: FOR_TO
29141: IFFALSE 29264
// begin if i > 4 then
29143: LD_VAR 0 8
29147: PUSH
29148: LD_INT 4
29150: GREATER
29151: IFFALSE 29155
// break ;
29153: GO 29264
// x := personel [ i ] ;
29155: LD_ADDR_VAR 0 13
29159: PUSH
29160: LD_VAR 0 6
29164: PUSH
29165: LD_VAR 0 8
29169: ARRAY
29170: ST_TO_ADDR
// if x = - 1 then
29171: LD_VAR 0 13
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: EQUAL
29180: IFFALSE 29184
// continue ;
29182: GO 29140
// PrepareHuman ( false , i , skill ) ;
29184: LD_INT 0
29186: PPUSH
29187: LD_VAR 0 8
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 380
// un := CreateHuman ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: CALL_OW 44
29210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29211: LD_VAR 0 14
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 250
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 251
29235: PPUSH
29236: LD_INT 10
29238: PPUSH
29239: LD_INT 0
29241: PPUSH
29242: CALL_OW 50
// result := result ^ un ;
29246: LD_ADDR_VAR 0 7
29250: PUSH
29251: LD_VAR 0 7
29255: PUSH
29256: LD_VAR 0 14
29260: ADD
29261: ST_TO_ADDR
// end ;
29262: GO 29140
29264: POP
29265: POP
// end ; end ;
29266: LD_VAR 0 7
29270: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// result := false ;
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_INT 0
29296: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29297: LD_VAR 0 1
29301: NOT
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 266
29312: PUSH
29313: LD_INT 32
29315: PUSH
29316: LD_INT 33
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: IN
29323: NOT
29324: OR
29325: IFFALSE 29329
// exit ;
29327: GO 30465
// nat := GetNation ( tower ) ;
29329: LD_ADDR_VAR 0 12
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 248
29343: ST_TO_ADDR
// side := GetSide ( tower ) ;
29344: LD_ADDR_VAR 0 16
29348: PUSH
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL_OW 255
29358: ST_TO_ADDR
// x := GetX ( tower ) ;
29359: LD_ADDR_VAR 0 10
29363: PUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: CALL_OW 250
29373: ST_TO_ADDR
// y := GetY ( tower ) ;
29374: LD_ADDR_VAR 0 11
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 251
29388: ST_TO_ADDR
// if not x or not y then
29389: LD_VAR 0 10
29393: NOT
29394: PUSH
29395: LD_VAR 0 11
29399: NOT
29400: OR
29401: IFFALSE 29405
// exit ;
29403: GO 30465
// weapon := 0 ;
29405: LD_ADDR_VAR 0 18
29409: PUSH
29410: LD_INT 0
29412: ST_TO_ADDR
// fac_list := [ ] ;
29413: LD_ADDR_VAR 0 17
29417: PUSH
29418: EMPTY
29419: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29420: LD_ADDR_VAR 0 6
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 274
29434: PPUSH
29435: LD_VAR 0 2
29439: PPUSH
29440: CALL 27043 0 2
29444: PPUSH
29445: LD_INT 30
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 72
29459: ST_TO_ADDR
// if not factories then
29460: LD_VAR 0 6
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 30465
// for i in factories do
29469: LD_ADDR_VAR 0 8
29473: PUSH
29474: LD_VAR 0 6
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29482: LD_ADDR_VAR 0 17
29486: PUSH
29487: LD_VAR 0 17
29491: PUSH
29492: LD_VAR 0 8
29496: PPUSH
29497: CALL_OW 478
29501: UNION
29502: ST_TO_ADDR
29503: GO 29479
29505: POP
29506: POP
// if not fac_list then
29507: LD_VAR 0 17
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 30465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29516: LD_ADDR_VAR 0 5
29520: PUSH
29521: LD_INT 4
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: LD_INT 9
29529: PUSH
29530: LD_INT 10
29532: PUSH
29533: LD_INT 6
29535: PUSH
29536: LD_INT 7
29538: PUSH
29539: LD_INT 11
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 27
29553: PUSH
29554: LD_INT 28
29556: PUSH
29557: LD_INT 26
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 43
29571: PUSH
29572: LD_INT 44
29574: PUSH
29575: LD_INT 46
29577: PUSH
29578: LD_INT 45
29580: PUSH
29581: LD_INT 47
29583: PUSH
29584: LD_INT 49
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: LD_VAR 0 12
29604: ARRAY
29605: ST_TO_ADDR
// for i in list do
29606: LD_ADDR_VAR 0 8
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29650
// if not i in fac_list then
29619: LD_VAR 0 8
29623: PUSH
29624: LD_VAR 0 17
29628: IN
29629: NOT
29630: IFFALSE 29648
// list := list diff i ;
29632: LD_ADDR_VAR 0 5
29636: PUSH
29637: LD_VAR 0 5
29641: PUSH
29642: LD_VAR 0 8
29646: DIFF
29647: ST_TO_ADDR
29648: GO 29616
29650: POP
29651: POP
// if not list then
29652: LD_VAR 0 5
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 30465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29661: LD_VAR 0 12
29665: PUSH
29666: LD_INT 3
29668: EQUAL
29669: PUSH
29670: LD_INT 49
29672: PUSH
29673: LD_VAR 0 5
29677: IN
29678: AND
29679: PUSH
29680: LD_INT 31
29682: PPUSH
29683: LD_VAR 0 16
29687: PPUSH
29688: CALL_OW 321
29692: PUSH
29693: LD_INT 2
29695: EQUAL
29696: AND
29697: IFFALSE 29757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29699: LD_INT 22
29701: PUSH
29702: LD_VAR 0 16
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 35
29713: PUSH
29714: LD_INT 49
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 91
29723: PUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 10
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 69
29746: NOT
29747: IFFALSE 29757
// weapon := ru_time_lapser ;
29749: LD_ADDR_VAR 0 18
29753: PUSH
29754: LD_INT 49
29756: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29757: LD_VAR 0 12
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: IN
29772: PUSH
29773: LD_INT 11
29775: PUSH
29776: LD_VAR 0 5
29780: IN
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_VAR 0 5
29789: IN
29790: OR
29791: AND
29792: PUSH
29793: LD_INT 6
29795: PPUSH
29796: LD_VAR 0 16
29800: PPUSH
29801: CALL_OW 321
29805: PUSH
29806: LD_INT 2
29808: EQUAL
29809: AND
29810: IFFALSE 29975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29812: LD_INT 22
29814: PUSH
29815: LD_VAR 0 16
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 35
29829: PUSH
29830: LD_INT 11
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 35
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 91
29854: PUSH
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 18
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: PPUSH
29873: CALL_OW 69
29877: NOT
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_VAR 0 16
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: LD_INT 32
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: LD_INT 33
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 91
29921: PUSH
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 12
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: PUSH
29948: LD_INT 2
29950: GREATER
29951: AND
29952: IFFALSE 29975
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29954: LD_ADDR_VAR 0 18
29958: PUSH
29959: LD_INT 11
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_VAR 0 12
29973: ARRAY
29974: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29975: LD_VAR 0 18
29979: NOT
29980: PUSH
29981: LD_INT 40
29983: PPUSH
29984: LD_VAR 0 16
29988: PPUSH
29989: CALL_OW 321
29993: PUSH
29994: LD_INT 2
29996: EQUAL
29997: AND
29998: PUSH
29999: LD_INT 7
30001: PUSH
30002: LD_VAR 0 5
30006: IN
30007: PUSH
30008: LD_INT 28
30010: PUSH
30011: LD_VAR 0 5
30015: IN
30016: OR
30017: PUSH
30018: LD_INT 45
30020: PUSH
30021: LD_VAR 0 5
30025: IN
30026: OR
30027: AND
30028: IFFALSE 30282
// begin hex := GetHexInfo ( x , y ) ;
30030: LD_ADDR_VAR 0 4
30034: PUSH
30035: LD_VAR 0 10
30039: PPUSH
30040: LD_VAR 0 11
30044: PPUSH
30045: CALL_OW 546
30049: ST_TO_ADDR
// if hex [ 1 ] then
30050: LD_VAR 0 4
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: IFFALSE 30062
// exit ;
30060: GO 30465
// height := hex [ 2 ] ;
30062: LD_ADDR_VAR 0 15
30066: PUSH
30067: LD_VAR 0 4
30071: PUSH
30072: LD_INT 2
30074: ARRAY
30075: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30076: LD_ADDR_VAR 0 14
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// for i in tmp do
30099: LD_ADDR_VAR 0 8
30103: PUSH
30104: LD_VAR 0 14
30108: PUSH
30109: FOR_IN
30110: IFFALSE 30280
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30112: LD_ADDR_VAR 0 9
30116: PUSH
30117: LD_VAR 0 10
30121: PPUSH
30122: LD_VAR 0 8
30126: PPUSH
30127: LD_INT 5
30129: PPUSH
30130: CALL_OW 272
30134: PUSH
30135: LD_VAR 0 11
30139: PPUSH
30140: LD_VAR 0 8
30144: PPUSH
30145: LD_INT 5
30147: PPUSH
30148: CALL_OW 273
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30157: LD_VAR 0 9
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 9
30170: PUSH
30171: LD_INT 2
30173: ARRAY
30174: PPUSH
30175: CALL_OW 488
30179: IFFALSE 30278
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30181: LD_ADDR_VAR 0 4
30185: PUSH
30186: LD_VAR 0 9
30190: PUSH
30191: LD_INT 1
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 9
30199: PUSH
30200: LD_INT 2
30202: ARRAY
30203: PPUSH
30204: CALL_OW 546
30208: ST_TO_ADDR
// if hex [ 1 ] then
30209: LD_VAR 0 4
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: IFFALSE 30221
// continue ;
30219: GO 30109
// h := hex [ 2 ] ;
30221: LD_ADDR_VAR 0 13
30225: PUSH
30226: LD_VAR 0 4
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: ST_TO_ADDR
// if h + 7 < height then
30235: LD_VAR 0 13
30239: PUSH
30240: LD_INT 7
30242: PLUS
30243: PUSH
30244: LD_VAR 0 15
30248: LESS
30249: IFFALSE 30278
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30251: LD_ADDR_VAR 0 18
30255: PUSH
30256: LD_INT 7
30258: PUSH
30259: LD_INT 28
30261: PUSH
30262: LD_INT 45
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: LD_VAR 0 12
30274: ARRAY
30275: ST_TO_ADDR
// break ;
30276: GO 30280
// end ; end ; end ;
30278: GO 30109
30280: POP
30281: POP
// end ; if not weapon then
30282: LD_VAR 0 18
30286: NOT
30287: IFFALSE 30347
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_VAR 0 5
30298: PUSH
30299: LD_INT 11
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 49
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: DIFF
30313: ST_TO_ADDR
// if not list then
30314: LD_VAR 0 5
30318: NOT
30319: IFFALSE 30323
// exit ;
30321: GO 30465
// weapon := list [ rand ( 1 , list ) ] ;
30323: LD_ADDR_VAR 0 18
30327: PUSH
30328: LD_VAR 0 5
30332: PUSH
30333: LD_INT 1
30335: PPUSH
30336: LD_VAR 0 5
30340: PPUSH
30341: CALL_OW 12
30345: ARRAY
30346: ST_TO_ADDR
// end ; if weapon then
30347: LD_VAR 0 18
30351: IFFALSE 30465
// begin tmp := CostOfWeapon ( weapon ) ;
30353: LD_ADDR_VAR 0 14
30357: PUSH
30358: LD_VAR 0 18
30362: PPUSH
30363: CALL_OW 451
30367: ST_TO_ADDR
// j := GetBase ( tower ) ;
30368: LD_ADDR_VAR 0 9
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 274
30382: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30383: LD_VAR 0 9
30387: PPUSH
30388: LD_INT 1
30390: PPUSH
30391: CALL_OW 275
30395: PUSH
30396: LD_VAR 0 14
30400: PUSH
30401: LD_INT 1
30403: ARRAY
30404: GREATEREQUAL
30405: PUSH
30406: LD_VAR 0 9
30410: PPUSH
30411: LD_INT 2
30413: PPUSH
30414: CALL_OW 275
30418: PUSH
30419: LD_VAR 0 14
30423: PUSH
30424: LD_INT 2
30426: ARRAY
30427: GREATEREQUAL
30428: AND
30429: PUSH
30430: LD_VAR 0 9
30434: PPUSH
30435: LD_INT 3
30437: PPUSH
30438: CALL_OW 275
30442: PUSH
30443: LD_VAR 0 14
30447: PUSH
30448: LD_INT 3
30450: ARRAY
30451: GREATEREQUAL
30452: AND
30453: IFFALSE 30465
// result := weapon ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_VAR 0 18
30464: ST_TO_ADDR
// end ; end ;
30465: LD_VAR 0 3
30469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30470: LD_INT 0
30472: PPUSH
30473: PPUSH
// result := true ;
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
// if array1 = array2 then
30482: LD_VAR 0 1
30486: PUSH
30487: LD_VAR 0 2
30491: EQUAL
30492: IFFALSE 30552
// begin for i = 1 to array1 do
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: DOUBLE
30500: LD_INT 1
30502: DEC
30503: ST_TO_ADDR
30504: LD_VAR 0 1
30508: PUSH
30509: FOR_TO
30510: IFFALSE 30548
// if array1 [ i ] <> array2 [ i ] then
30512: LD_VAR 0 1
30516: PUSH
30517: LD_VAR 0 4
30521: ARRAY
30522: PUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_VAR 0 4
30532: ARRAY
30533: NONEQUAL
30534: IFFALSE 30546
// begin result := false ;
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 0
30543: ST_TO_ADDR
// break ;
30544: GO 30548
// end ;
30546: GO 30509
30548: POP
30549: POP
// end else
30550: GO 30560
// result := false ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 0
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 3
30564: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
// pom := GetBase ( fac ) ;
30570: LD_ADDR_VAR 0 5
30574: PUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 274
30584: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30585: LD_ADDR_VAR 0 4
30589: PUSH
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: LD_VAR 0 2
30612: PUSH
30613: LD_INT 3
30615: ARRAY
30616: PPUSH
30617: LD_VAR 0 2
30621: PUSH
30622: LD_INT 4
30624: ARRAY
30625: PPUSH
30626: CALL_OW 449
30630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_VAR 0 5
30640: PPUSH
30641: LD_INT 1
30643: PPUSH
30644: CALL_OW 275
30648: PUSH
30649: LD_VAR 0 4
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: GREATEREQUAL
30658: PUSH
30659: LD_VAR 0 5
30663: PPUSH
30664: LD_INT 2
30666: PPUSH
30667: CALL_OW 275
30671: PUSH
30672: LD_VAR 0 4
30676: PUSH
30677: LD_INT 2
30679: ARRAY
30680: GREATEREQUAL
30681: AND
30682: PUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: LD_INT 3
30690: PPUSH
30691: CALL_OW 275
30695: PUSH
30696: LD_VAR 0 4
30700: PUSH
30701: LD_INT 3
30703: ARRAY
30704: GREATEREQUAL
30705: AND
30706: ST_TO_ADDR
// end ;
30707: LD_VAR 0 3
30711: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
// pom := GetBase ( building ) ;
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 274
30732: ST_TO_ADDR
// if not pom then
30733: LD_VAR 0 3
30737: NOT
30738: IFFALSE 30742
// exit ;
30740: GO 30912
// btype := GetBType ( building ) ;
30742: LD_ADDR_VAR 0 5
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 266
30756: ST_TO_ADDR
// if btype = b_armoury then
30757: LD_VAR 0 5
30761: PUSH
30762: LD_INT 4
30764: EQUAL
30765: IFFALSE 30775
// btype := b_barracks ;
30767: LD_ADDR_VAR 0 5
30771: PUSH
30772: LD_INT 5
30774: ST_TO_ADDR
// if btype = b_depot then
30775: LD_VAR 0 5
30779: PUSH
30780: LD_INT 0
30782: EQUAL
30783: IFFALSE 30793
// btype := b_warehouse ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_INT 1
30792: ST_TO_ADDR
// if btype = b_workshop then
30793: LD_VAR 0 5
30797: PUSH
30798: LD_INT 2
30800: EQUAL
30801: IFFALSE 30811
// btype := b_factory ;
30803: LD_ADDR_VAR 0 5
30807: PUSH
30808: LD_INT 3
30810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30811: LD_ADDR_VAR 0 4
30815: PUSH
30816: LD_VAR 0 5
30820: PPUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 248
30830: PPUSH
30831: CALL_OW 450
30835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30836: LD_ADDR_VAR 0 2
30840: PUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 275
30853: PUSH
30854: LD_VAR 0 4
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: GREATEREQUAL
30863: PUSH
30864: LD_VAR 0 3
30868: PPUSH
30869: LD_INT 2
30871: PPUSH
30872: CALL_OW 275
30876: PUSH
30877: LD_VAR 0 4
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: GREATEREQUAL
30886: AND
30887: PUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_INT 3
30895: PPUSH
30896: CALL_OW 275
30900: PUSH
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 3
30908: ARRAY
30909: GREATEREQUAL
30910: AND
30911: ST_TO_ADDR
// end ;
30912: LD_VAR 0 2
30916: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
30921: PPUSH
// pom := GetBase ( building ) ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 274
30936: ST_TO_ADDR
// if not pom then
30937: LD_VAR 0 4
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 248
30965: PPUSH
30966: CALL_OW 450
30970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 275
30988: PUSH
30989: LD_VAR 0 5
30993: PUSH
30994: LD_INT 1
30996: ARRAY
30997: GREATEREQUAL
30998: PUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_INT 2
31006: PPUSH
31007: CALL_OW 275
31011: PUSH
31012: LD_VAR 0 5
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: GREATEREQUAL
31021: AND
31022: PUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: LD_INT 3
31030: PPUSH
31031: CALL_OW 275
31035: PUSH
31036: LD_VAR 0 5
31040: PUSH
31041: LD_INT 3
31043: ARRAY
31044: GREATEREQUAL
31045: AND
31046: ST_TO_ADDR
// end ;
31047: LD_VAR 0 3
31051: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
// result := false ;
31064: LD_ADDR_VAR 0 6
31068: PUSH
31069: LD_INT 0
31071: ST_TO_ADDR
// if not base or not btype or not x or not y then
31072: LD_VAR 0 1
31076: NOT
31077: PUSH
31078: LD_VAR 0 2
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 3
31089: NOT
31090: OR
31091: PUSH
31092: LD_VAR 0 4
31096: NOT
31097: OR
31098: IFFALSE 31102
// exit ;
31100: GO 31711
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31102: LD_ADDR_VAR 0 12
31106: PUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_VAR 0 3
31116: PPUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_VAR 0 5
31126: PPUSH
31127: LD_VAR 0 1
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 248
31140: PPUSH
31141: LD_INT 0
31143: PPUSH
31144: CALL 32548 0 6
31148: ST_TO_ADDR
// if not hexes then
31149: LD_VAR 0 12
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31711
// for i = 1 to hexes do
31158: LD_ADDR_VAR 0 7
31162: PUSH
31163: DOUBLE
31164: LD_INT 1
31166: DEC
31167: ST_TO_ADDR
31168: LD_VAR 0 12
31172: PUSH
31173: FOR_TO
31174: IFFALSE 31709
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31176: LD_ADDR_VAR 0 11
31180: PUSH
31181: LD_VAR 0 12
31185: PUSH
31186: LD_VAR 0 7
31190: ARRAY
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: LD_VAR 0 12
31200: PUSH
31201: LD_VAR 0 7
31205: ARRAY
31206: PUSH
31207: LD_INT 2
31209: ARRAY
31210: PPUSH
31211: CALL_OW 428
31215: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31216: LD_VAR 0 12
31220: PUSH
31221: LD_VAR 0 7
31225: ARRAY
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: LD_VAR 0 12
31235: PUSH
31236: LD_VAR 0 7
31240: ARRAY
31241: PUSH
31242: LD_INT 2
31244: ARRAY
31245: PPUSH
31246: CALL_OW 351
31250: PUSH
31251: LD_VAR 0 12
31255: PUSH
31256: LD_VAR 0 7
31260: ARRAY
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: PPUSH
31266: LD_VAR 0 12
31270: PUSH
31271: LD_VAR 0 7
31275: ARRAY
31276: PUSH
31277: LD_INT 2
31279: ARRAY
31280: PPUSH
31281: CALL_OW 488
31285: NOT
31286: OR
31287: PUSH
31288: LD_VAR 0 11
31292: PPUSH
31293: CALL_OW 247
31297: PUSH
31298: LD_INT 3
31300: EQUAL
31301: OR
31302: IFFALSE 31308
// exit ;
31304: POP
31305: POP
31306: GO 31711
// if not tmp or not tmp in base then
31308: LD_VAR 0 11
31312: NOT
31313: PUSH
31314: LD_VAR 0 11
31318: PUSH
31319: LD_VAR 0 1
31323: IN
31324: NOT
31325: OR
31326: IFFALSE 31330
// continue ;
31328: GO 31173
// result := true ;
31330: LD_ADDR_VAR 0 6
31334: PUSH
31335: LD_INT 1
31337: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31338: LD_ADDR_VAR 0 15
31342: PUSH
31343: LD_VAR 0 1
31347: PPUSH
31348: LD_INT 22
31350: PUSH
31351: LD_VAR 0 11
31355: PPUSH
31356: CALL_OW 255
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 30
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 72
31401: ST_TO_ADDR
// if dep then
31402: LD_VAR 0 15
31406: IFFALSE 31542
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31408: LD_ADDR_VAR 0 14
31412: PUSH
31413: LD_VAR 0 15
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: CALL_OW 250
31426: PPUSH
31427: LD_VAR 0 15
31431: PUSH
31432: LD_INT 1
31434: ARRAY
31435: PPUSH
31436: CALL_OW 254
31440: PPUSH
31441: LD_INT 5
31443: PPUSH
31444: CALL_OW 272
31448: PUSH
31449: LD_VAR 0 15
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: PPUSH
31458: CALL_OW 251
31462: PPUSH
31463: LD_VAR 0 15
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: CALL_OW 254
31476: PPUSH
31477: LD_INT 5
31479: PPUSH
31480: CALL_OW 273
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31489: LD_VAR 0 14
31493: PUSH
31494: LD_INT 1
31496: ARRAY
31497: PPUSH
31498: LD_VAR 0 14
31502: PUSH
31503: LD_INT 2
31505: ARRAY
31506: PPUSH
31507: CALL_OW 488
31511: IFFALSE 31542
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31513: LD_VAR 0 11
31517: PPUSH
31518: LD_VAR 0 14
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 14
31531: PUSH
31532: LD_INT 2
31534: ARRAY
31535: PPUSH
31536: CALL_OW 111
// continue ;
31540: GO 31173
// end ; end ; r := GetDir ( tmp ) ;
31542: LD_ADDR_VAR 0 13
31546: PUSH
31547: LD_VAR 0 11
31551: PPUSH
31552: CALL_OW 254
31556: ST_TO_ADDR
// if r = 5 then
31557: LD_VAR 0 13
31561: PUSH
31562: LD_INT 5
31564: EQUAL
31565: IFFALSE 31575
// r := 0 ;
31567: LD_ADDR_VAR 0 13
31571: PUSH
31572: LD_INT 0
31574: ST_TO_ADDR
// for j = r to 5 do
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: DOUBLE
31581: LD_VAR 0 13
31585: DEC
31586: ST_TO_ADDR
31587: LD_INT 5
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31705
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31593: LD_ADDR_VAR 0 9
31597: PUSH
31598: LD_VAR 0 11
31602: PPUSH
31603: CALL_OW 250
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_INT 2
31615: PPUSH
31616: CALL_OW 272
31620: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31621: LD_ADDR_VAR 0 10
31625: PUSH
31626: LD_VAR 0 11
31630: PPUSH
31631: CALL_OW 251
31635: PPUSH
31636: LD_VAR 0 8
31640: PPUSH
31641: LD_INT 2
31643: PPUSH
31644: CALL_OW 273
31648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31649: LD_VAR 0 9
31653: PPUSH
31654: LD_VAR 0 10
31658: PPUSH
31659: CALL_OW 488
31663: PUSH
31664: LD_VAR 0 9
31668: PPUSH
31669: LD_VAR 0 10
31673: PPUSH
31674: CALL_OW 428
31678: NOT
31679: AND
31680: IFFALSE 31703
// begin ComMoveXY ( tmp , _x , _y ) ;
31682: LD_VAR 0 11
31686: PPUSH
31687: LD_VAR 0 9
31691: PPUSH
31692: LD_VAR 0 10
31696: PPUSH
31697: CALL_OW 111
// break ;
31701: GO 31705
// end ; end ;
31703: GO 31590
31705: POP
31706: POP
// end ;
31707: GO 31173
31709: POP
31710: POP
// end ;
31711: LD_VAR 0 6
31715: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// result := false ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31736: LD_VAR 0 1
31740: NOT
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 266
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: IN
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 2
31769: NOT
31770: OR
31771: PUSH
31772: LD_VAR 0 5
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: IN
31803: NOT
31804: OR
31805: PUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 488
31820: NOT
31821: OR
31822: IFFALSE 31826
// exit ;
31824: GO 32543
// pom := GetBase ( depot ) ;
31826: LD_ADDR_VAR 0 10
31830: PUSH
31831: LD_VAR 0 1
31835: PPUSH
31836: CALL_OW 274
31840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31841: LD_ADDR_VAR 0 11
31845: PUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 248
31860: PPUSH
31861: CALL_OW 450
31865: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31866: LD_VAR 0 10
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 275
31878: PUSH
31879: LD_VAR 0 11
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: GREATEREQUAL
31888: PUSH
31889: LD_VAR 0 10
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 275
31901: PUSH
31902: LD_VAR 0 11
31906: PUSH
31907: LD_INT 2
31909: ARRAY
31910: GREATEREQUAL
31911: AND
31912: PUSH
31913: LD_VAR 0 10
31917: PPUSH
31918: LD_INT 3
31920: PPUSH
31921: CALL_OW 275
31925: PUSH
31926: LD_VAR 0 11
31930: PUSH
31931: LD_INT 3
31933: ARRAY
31934: GREATEREQUAL
31935: AND
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 32543
// if GetBType ( depot ) = b_depot then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 266
31950: PUSH
31951: LD_INT 0
31953: EQUAL
31954: IFFALSE 31966
// dist := 28 else
31956: LD_ADDR_VAR 0 14
31960: PUSH
31961: LD_INT 28
31963: ST_TO_ADDR
31964: GO 31974
// dist := 36 ;
31966: LD_ADDR_VAR 0 14
31970: PUSH
31971: LD_INT 36
31973: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: LD_VAR 0 4
31988: PPUSH
31989: CALL_OW 297
31993: PUSH
31994: LD_VAR 0 14
31998: GREATER
31999: IFFALSE 32003
// exit ;
32001: GO 32543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32003: LD_ADDR_VAR 0 12
32007: PUSH
32008: LD_VAR 0 2
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 248
32037: PPUSH
32038: LD_INT 0
32040: PPUSH
32041: CALL 32548 0 6
32045: ST_TO_ADDR
// if not hexes then
32046: LD_VAR 0 12
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32543
// hex := GetHexInfo ( x , y ) ;
32055: LD_ADDR_VAR 0 15
32059: PUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: LD_VAR 0 4
32069: PPUSH
32070: CALL_OW 546
32074: ST_TO_ADDR
// if hex [ 1 ] then
32075: LD_VAR 0 15
32079: PUSH
32080: LD_INT 1
32082: ARRAY
32083: IFFALSE 32087
// exit ;
32085: GO 32543
// height := hex [ 2 ] ;
32087: LD_ADDR_VAR 0 13
32091: PUSH
32092: LD_VAR 0 15
32096: PUSH
32097: LD_INT 2
32099: ARRAY
32100: ST_TO_ADDR
// for i = 1 to hexes do
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_VAR 0 12
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32447
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32119: LD_VAR 0 12
32123: PUSH
32124: LD_VAR 0 7
32128: ARRAY
32129: PUSH
32130: LD_INT 1
32132: ARRAY
32133: PPUSH
32134: LD_VAR 0 12
32138: PUSH
32139: LD_VAR 0 7
32143: ARRAY
32144: PUSH
32145: LD_INT 2
32147: ARRAY
32148: PPUSH
32149: CALL_OW 488
32153: NOT
32154: PUSH
32155: LD_VAR 0 12
32159: PUSH
32160: LD_VAR 0 7
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 12
32174: PUSH
32175: LD_VAR 0 7
32179: ARRAY
32180: PUSH
32181: LD_INT 2
32183: ARRAY
32184: PPUSH
32185: CALL_OW 428
32189: PUSH
32190: LD_INT 0
32192: GREATER
32193: OR
32194: PUSH
32195: LD_VAR 0 12
32199: PUSH
32200: LD_VAR 0 7
32204: ARRAY
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 12
32214: PUSH
32215: LD_VAR 0 7
32219: ARRAY
32220: PUSH
32221: LD_INT 2
32223: ARRAY
32224: PPUSH
32225: CALL_OW 351
32229: OR
32230: IFFALSE 32236
// exit ;
32232: POP
32233: POP
32234: GO 32543
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32236: LD_ADDR_VAR 0 8
32240: PUSH
32241: LD_VAR 0 12
32245: PUSH
32246: LD_VAR 0 7
32250: ARRAY
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: PPUSH
32256: LD_VAR 0 12
32260: PUSH
32261: LD_VAR 0 7
32265: ARRAY
32266: PUSH
32267: LD_INT 2
32269: ARRAY
32270: PPUSH
32271: CALL_OW 546
32275: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PUSH
32285: LD_VAR 0 8
32289: PUSH
32290: LD_INT 2
32292: ARRAY
32293: PUSH
32294: LD_VAR 0 13
32298: PUSH
32299: LD_INT 2
32301: PLUS
32302: GREATER
32303: OR
32304: PUSH
32305: LD_VAR 0 8
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PUSH
32314: LD_VAR 0 13
32318: PUSH
32319: LD_INT 2
32321: MINUS
32322: LESS
32323: OR
32324: PUSH
32325: LD_VAR 0 8
32329: PUSH
32330: LD_INT 3
32332: ARRAY
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 8
32339: PUSH
32340: LD_INT 9
32342: PUSH
32343: LD_INT 10
32345: PUSH
32346: LD_INT 11
32348: PUSH
32349: LD_INT 12
32351: PUSH
32352: LD_INT 13
32354: PUSH
32355: LD_INT 16
32357: PUSH
32358: LD_INT 17
32360: PUSH
32361: LD_INT 18
32363: PUSH
32364: LD_INT 19
32366: PUSH
32367: LD_INT 20
32369: PUSH
32370: LD_INT 21
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: IN
32388: NOT
32389: OR
32390: PUSH
32391: LD_VAR 0 8
32395: PUSH
32396: LD_INT 5
32398: ARRAY
32399: NOT
32400: OR
32401: PUSH
32402: LD_VAR 0 8
32406: PUSH
32407: LD_INT 6
32409: ARRAY
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 7
32419: PUSH
32420: LD_INT 9
32422: PUSH
32423: LD_INT 10
32425: PUSH
32426: LD_INT 11
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: IN
32437: NOT
32438: OR
32439: IFFALSE 32445
// exit ;
32441: POP
32442: POP
32443: GO 32543
// end ;
32445: GO 32116
32447: POP
32448: POP
// side := GetSide ( depot ) ;
32449: LD_ADDR_VAR 0 9
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 255
32463: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32464: LD_VAR 0 9
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: LD_VAR 0 4
32478: PPUSH
32479: LD_INT 20
32481: PPUSH
32482: CALL 25197 0 4
32486: PUSH
32487: LD_INT 4
32489: ARRAY
32490: IFFALSE 32494
// exit ;
32492: GO 32543
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32494: LD_VAR 0 2
32498: PUSH
32499: LD_INT 29
32501: PUSH
32502: LD_INT 30
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: IN
32509: PUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_VAR 0 9
32524: PPUSH
32525: CALL_OW 440
32529: NOT
32530: AND
32531: IFFALSE 32535
// exit ;
32533: GO 32543
// result := true ;
32535: LD_ADDR_VAR 0 6
32539: PUSH
32540: LD_INT 1
32542: ST_TO_ADDR
// end ;
32543: LD_VAR 0 6
32547: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32548: LD_INT 0
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
// result = [ ] ;
32608: LD_ADDR_VAR 0 7
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// temp_list = [ ] ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: EMPTY
32621: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: IN
32653: NOT
32654: PUSH
32655: LD_VAR 0 1
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: IN
32670: PUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: IN
32690: NOT
32691: AND
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 51088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32697: LD_VAR 0 1
32701: PUSH
32702: LD_INT 6
32704: PUSH
32705: LD_INT 7
32707: PUSH
32708: LD_INT 8
32710: PUSH
32711: LD_INT 13
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 15
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: LD_INT 10
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: IN
32740: IFFALSE 32750
// btype = b_lab ;
32742: LD_ADDR_VAR 0 1
32746: PUSH
32747: LD_INT 6
32749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32750: LD_VAR 0 6
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: IN
32769: NOT
32770: PUSH
32771: LD_VAR 0 1
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: LD_INT 6
32790: PUSH
32791: LD_INT 36
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: LD_INT 31
32802: PUSH
32803: LD_INT 32
32805: PUSH
32806: LD_INT 33
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: IN
32822: NOT
32823: PUSH
32824: LD_VAR 0 6
32828: PUSH
32829: LD_INT 1
32831: EQUAL
32832: AND
32833: OR
32834: PUSH
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: IN
32850: NOT
32851: PUSH
32852: LD_VAR 0 6
32856: PUSH
32857: LD_INT 2
32859: EQUAL
32860: AND
32861: OR
32862: IFFALSE 32872
// mode = 0 ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
// case mode of 0 :
32872: LD_VAR 0 6
32876: PUSH
32877: LD_INT 0
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 44338
32885: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32886: LD_ADDR_VAR 0 11
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33079: LD_ADDR_VAR 0 12
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33275: LD_ADDR_VAR 0 13
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 3
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33474: LD_ADDR_VAR 0 14
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 3
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33670: LD_ADDR_VAR 0 15
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33863: LD_ADDR_VAR 0 16
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34056: LD_ADDR_VAR 0 17
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34286: LD_ADDR_VAR 0 18
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 2
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34516: LD_ADDR_VAR 0 19
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34746: LD_ADDR_VAR 0 20
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34976: LD_ADDR_VAR 0 21
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35206: LD_ADDR_VAR 0 22
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35436: LD_ADDR_VAR 0 23
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35716: LD_ADDR_VAR 0 24
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35992: LD_ADDR_VAR 0 25
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36266: LD_ADDR_VAR 0 26
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36542: LD_ADDR_VAR 0 27
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36822: LD_ADDR_VAR 0 28
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 3
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37104: LD_ADDR_VAR 0 29
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37383: LD_ADDR_VAR 0 30
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37661: LD_ADDR_VAR 0 31
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37939: LD_ADDR_VAR 0 32
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 3
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38217: LD_ADDR_VAR 0 33
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38496: LD_ADDR_VAR 0 34
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38776: LD_ADDR_VAR 0 35
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38888: LD_ADDR_VAR 0 36
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39000: LD_ADDR_VAR 0 37
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39112: LD_ADDR_VAR 0 38
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39224: LD_ADDR_VAR 0 39
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39336: LD_ADDR_VAR 0 40
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39448: LD_ADDR_VAR 0 41
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: LD_INT 3
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39798: LD_ADDR_VAR 0 42
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: LD_INT 3
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40148: LD_ADDR_VAR 0 43
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 3
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40496: LD_ADDR_VAR 0 44
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 3
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: LD_INT 3
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40846: LD_ADDR_VAR 0 45
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 3
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: NEG
41156: PUSH
41157: LD_INT 3
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41196: LD_ADDR_VAR 0 46
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 3
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41544: LD_ADDR_VAR 0 47
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41695: LD_ADDR_VAR 0 48
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41842: LD_ADDR_VAR 0 49
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41986: LD_ADDR_VAR 0 50
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42130: LD_ADDR_VAR 0 51
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42277: LD_ADDR_VAR 0 52
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42428: LD_ADDR_VAR 0 53
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42658: LD_ADDR_VAR 0 54
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42888: LD_ADDR_VAR 0 55
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43118: LD_ADDR_VAR 0 56
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43348: LD_ADDR_VAR 0 57
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43578: LD_ADDR_VAR 0 58
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43808: LD_ADDR_VAR 0 59
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43896: LD_ADDR_VAR 0 60
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43984: LD_ADDR_VAR 0 61
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44072: LD_ADDR_VAR 0 62
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44160: LD_ADDR_VAR 0 63
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44248: LD_ADDR_VAR 0 64
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// end ; 1 :
44336: GO 50233
44338: LD_INT 1
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44346
44344: GO 46969
44346: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44347: LD_ADDR_VAR 0 11
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44391: LD_ADDR_VAR 0 12
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44432: LD_ADDR_VAR 0 13
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44472: LD_ADDR_VAR 0 14
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44513: LD_ADDR_VAR 0 15
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44557: LD_ADDR_VAR 0 16
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44603: LD_ADDR_VAR 0 17
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44647: LD_ADDR_VAR 0 18
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44688: LD_ADDR_VAR 0 19
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44728: LD_ADDR_VAR 0 20
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44769: LD_ADDR_VAR 0 21
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44813: LD_ADDR_VAR 0 22
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: NEG
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44859: LD_ADDR_VAR 0 23
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 4
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44903: LD_ADDR_VAR 0 24
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44944: LD_ADDR_VAR 0 25
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44984: LD_ADDR_VAR 0 26
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45025: LD_ADDR_VAR 0 27
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 4
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45069: LD_ADDR_VAR 0 28
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 4
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45115: LD_ADDR_VAR 0 29
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 5
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 5
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 6
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 6
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 5
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45270: LD_ADDR_VAR 0 30
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 4
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 5
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 6
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 6
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45413: LD_ADDR_VAR 0 31
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 4
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 4
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: LD_INT 4
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 5
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: LD_INT 5
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 6
45510: PUSH
45511: LD_INT 5
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 6
45520: PUSH
45521: LD_INT 6
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 5
45530: PUSH
45531: LD_INT 6
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45552: LD_ADDR_VAR 0 32
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 4
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 4
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 5
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 5
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 4
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 6
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 6
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45695: LD_ADDR_VAR 0 33
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 4
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 4
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 4
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 5
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 5
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 5
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 6
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 6
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45850: LD_ADDR_VAR 0 34
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 4
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 4
45917: NEG
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: NEG
45930: PUSH
45931: LD_INT 5
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 5
45941: NEG
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 5
45953: NEG
45954: PUSH
45955: LD_INT 5
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 5
45965: NEG
45966: PUSH
45967: LD_INT 6
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 6
45977: NEG
45978: PUSH
45979: LD_INT 5
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 6
45989: NEG
45990: PUSH
45991: LD_INT 6
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46013: LD_ADDR_VAR 0 41
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46057: LD_ADDR_VAR 0 42
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46098: LD_ADDR_VAR 0 43
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46138: LD_ADDR_VAR 0 44
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46179: LD_ADDR_VAR 0 45
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46223: LD_ADDR_VAR 0 46
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46269: LD_ADDR_VAR 0 47
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46302: LD_ADDR_VAR 0 48
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46333: LD_ADDR_VAR 0 49
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46362: LD_ADDR_VAR 0 50
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 3
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46391: LD_ADDR_VAR 0 51
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46422: LD_ADDR_VAR 0 52
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46455: LD_ADDR_VAR 0 53
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46499: LD_ADDR_VAR 0 54
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46540: LD_ADDR_VAR 0 55
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46580: LD_ADDR_VAR 0 56
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 57
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46665: LD_ADDR_VAR 0 58
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46711: LD_ADDR_VAR 0 59
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46755: LD_ADDR_VAR 0 60
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46796: LD_ADDR_VAR 0 61
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46836: LD_ADDR_VAR 0 62
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46877: LD_ADDR_VAR 0 63
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 64
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// end ; 2 :
46967: GO 50233
46969: LD_INT 2
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 50232
46977: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46978: LD_ADDR_VAR 0 29
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 5
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 5
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 4
47108: PUSH
47109: LD_INT 4
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 4
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 4
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 4
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 5
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 5
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: LD_INT 4
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 4
47375: NEG
47376: PUSH
47377: LD_INT 5
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 4
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 5
47423: NEG
47424: PUSH
47425: LD_INT 4
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 5
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: LD_INT 5
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: NEG
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47516: LD_ADDR_VAR 0 30
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: LD_INT 4
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 5
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 4
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 5
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: LD_INT 5
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 4
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 4
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 5
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 5
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 5
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: LD_INT 4
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: NEG
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: LD_INT 4
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 4
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 4
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 5
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 5
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 5
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48063: LD_ADDR_VAR 0 31
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 4
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 5
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 5
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 4
48242: NEG
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 4
48265: NEG
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 4
48277: NEG
48278: PUSH
48279: LD_INT 5
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 4
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: NEG
48326: PUSH
48327: LD_INT 4
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: NEG
48338: PUSH
48339: LD_INT 5
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 5
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 5
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 5
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48613: LD_ADDR_VAR 0 32
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 4
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 5
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 5
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 5
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 4
48794: NEG
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 4
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 5
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 3
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 4
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 5
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 5
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: LD_INT 4
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: LD_INT 5
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: LD_INT 5
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 4
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 5
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 5
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49160: LD_ADDR_VAR 0 33
49164: PUSH
49165: LD_INT 4
49167: NEG
49168: PUSH
49169: LD_INT 4
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: NEG
49180: PUSH
49181: LD_INT 5
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 5
49239: NEG
49240: PUSH
49241: LD_INT 5
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 5
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 5
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 4
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 4
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 5
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 5
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 4
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 4
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 4
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 4
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 4
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 5
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 5
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49698: LD_ADDR_VAR 0 34
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 4
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 5
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 4
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 5
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 4
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 5
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 4
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 5
50139: NEG
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 5
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 5
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// end ; end ;
50230: GO 50233
50232: POP
// case btype of b_depot , b_warehouse :
50233: LD_VAR 0 1
50237: PUSH
50238: LD_INT 0
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50252
50244: LD_INT 1
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50453
50252: POP
// case nation of nation_american :
50253: LD_VAR 0 5
50257: PUSH
50258: LD_INT 1
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 50322
50266: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50267: LD_ADDR_VAR 0 9
50271: PUSH
50272: LD_VAR 0 11
50276: PUSH
50277: LD_VAR 0 12
50281: PUSH
50282: LD_VAR 0 13
50286: PUSH
50287: LD_VAR 0 14
50291: PUSH
50292: LD_VAR 0 15
50296: PUSH
50297: LD_VAR 0 16
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: PUSH
50310: LD_VAR 0 4
50314: PUSH
50315: LD_INT 1
50317: PLUS
50318: ARRAY
50319: ST_TO_ADDR
50320: GO 50451
50322: LD_INT 2
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50386
50330: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50331: LD_ADDR_VAR 0 9
50335: PUSH
50336: LD_VAR 0 17
50340: PUSH
50341: LD_VAR 0 18
50345: PUSH
50346: LD_VAR 0 19
50350: PUSH
50351: LD_VAR 0 20
50355: PUSH
50356: LD_VAR 0 21
50360: PUSH
50361: LD_VAR 0 22
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: PUSH
50374: LD_VAR 0 4
50378: PUSH
50379: LD_INT 1
50381: PLUS
50382: ARRAY
50383: ST_TO_ADDR
50384: GO 50451
50386: LD_INT 3
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50450
50394: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50395: LD_ADDR_VAR 0 9
50399: PUSH
50400: LD_VAR 0 23
50404: PUSH
50405: LD_VAR 0 24
50409: PUSH
50410: LD_VAR 0 25
50414: PUSH
50415: LD_VAR 0 26
50419: PUSH
50420: LD_VAR 0 27
50424: PUSH
50425: LD_VAR 0 28
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: LD_VAR 0 4
50442: PUSH
50443: LD_INT 1
50445: PLUS
50446: ARRAY
50447: ST_TO_ADDR
50448: GO 50451
50450: POP
50451: GO 51006
50453: LD_INT 2
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50467
50459: LD_INT 3
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50467
50465: GO 50523
50467: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50468: LD_ADDR_VAR 0 9
50472: PUSH
50473: LD_VAR 0 29
50477: PUSH
50478: LD_VAR 0 30
50482: PUSH
50483: LD_VAR 0 31
50487: PUSH
50488: LD_VAR 0 32
50492: PUSH
50493: LD_VAR 0 33
50497: PUSH
50498: LD_VAR 0 34
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: PUSH
50511: LD_VAR 0 4
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: ARRAY
50520: ST_TO_ADDR
50521: GO 51006
50523: LD_INT 16
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50585
50529: LD_INT 17
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50585
50535: LD_INT 18
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50585
50541: LD_INT 19
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50585
50547: LD_INT 22
50549: DOUBLE
50550: EQUAL
50551: IFTRUE 50585
50553: LD_INT 20
50555: DOUBLE
50556: EQUAL
50557: IFTRUE 50585
50559: LD_INT 21
50561: DOUBLE
50562: EQUAL
50563: IFTRUE 50585
50565: LD_INT 23
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50585
50571: LD_INT 24
50573: DOUBLE
50574: EQUAL
50575: IFTRUE 50585
50577: LD_INT 25
50579: DOUBLE
50580: EQUAL
50581: IFTRUE 50585
50583: GO 50641
50585: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50586: LD_ADDR_VAR 0 9
50590: PUSH
50591: LD_VAR 0 35
50595: PUSH
50596: LD_VAR 0 36
50600: PUSH
50601: LD_VAR 0 37
50605: PUSH
50606: LD_VAR 0 38
50610: PUSH
50611: LD_VAR 0 39
50615: PUSH
50616: LD_VAR 0 40
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: PUSH
50629: LD_VAR 0 4
50633: PUSH
50634: LD_INT 1
50636: PLUS
50637: ARRAY
50638: ST_TO_ADDR
50639: GO 51006
50641: LD_INT 6
50643: DOUBLE
50644: EQUAL
50645: IFTRUE 50697
50647: LD_INT 7
50649: DOUBLE
50650: EQUAL
50651: IFTRUE 50697
50653: LD_INT 8
50655: DOUBLE
50656: EQUAL
50657: IFTRUE 50697
50659: LD_INT 13
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50697
50665: LD_INT 12
50667: DOUBLE
50668: EQUAL
50669: IFTRUE 50697
50671: LD_INT 15
50673: DOUBLE
50674: EQUAL
50675: IFTRUE 50697
50677: LD_INT 11
50679: DOUBLE
50680: EQUAL
50681: IFTRUE 50697
50683: LD_INT 14
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50697
50689: LD_INT 10
50691: DOUBLE
50692: EQUAL
50693: IFTRUE 50697
50695: GO 50753
50697: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_VAR 0 41
50707: PUSH
50708: LD_VAR 0 42
50712: PUSH
50713: LD_VAR 0 43
50717: PUSH
50718: LD_VAR 0 44
50722: PUSH
50723: LD_VAR 0 45
50727: PUSH
50728: LD_VAR 0 46
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: LD_VAR 0 4
50745: PUSH
50746: LD_INT 1
50748: PLUS
50749: ARRAY
50750: ST_TO_ADDR
50751: GO 51006
50753: LD_INT 36
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50817
50761: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50762: LD_ADDR_VAR 0 9
50766: PUSH
50767: LD_VAR 0 47
50771: PUSH
50772: LD_VAR 0 48
50776: PUSH
50777: LD_VAR 0 49
50781: PUSH
50782: LD_VAR 0 50
50786: PUSH
50787: LD_VAR 0 51
50791: PUSH
50792: LD_VAR 0 52
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: LD_VAR 0 4
50809: PUSH
50810: LD_INT 1
50812: PLUS
50813: ARRAY
50814: ST_TO_ADDR
50815: GO 51006
50817: LD_INT 4
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50843
50823: LD_INT 5
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50843
50829: LD_INT 34
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50843
50835: LD_INT 37
50837: DOUBLE
50838: EQUAL
50839: IFTRUE 50843
50841: GO 50899
50843: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_VAR 0 53
50853: PUSH
50854: LD_VAR 0 54
50858: PUSH
50859: LD_VAR 0 55
50863: PUSH
50864: LD_VAR 0 56
50868: PUSH
50869: LD_VAR 0 57
50873: PUSH
50874: LD_VAR 0 58
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_VAR 0 4
50891: PUSH
50892: LD_INT 1
50894: PLUS
50895: ARRAY
50896: ST_TO_ADDR
50897: GO 51006
50899: LD_INT 31
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50949
50905: LD_INT 32
50907: DOUBLE
50908: EQUAL
50909: IFTRUE 50949
50911: LD_INT 33
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50949
50917: LD_INT 27
50919: DOUBLE
50920: EQUAL
50921: IFTRUE 50949
50923: LD_INT 26
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50949
50929: LD_INT 28
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50949
50935: LD_INT 29
50937: DOUBLE
50938: EQUAL
50939: IFTRUE 50949
50941: LD_INT 30
50943: DOUBLE
50944: EQUAL
50945: IFTRUE 50949
50947: GO 51005
50949: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50950: LD_ADDR_VAR 0 9
50954: PUSH
50955: LD_VAR 0 59
50959: PUSH
50960: LD_VAR 0 60
50964: PUSH
50965: LD_VAR 0 61
50969: PUSH
50970: LD_VAR 0 62
50974: PUSH
50975: LD_VAR 0 63
50979: PUSH
50980: LD_VAR 0 64
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: LD_VAR 0 4
50997: PUSH
50998: LD_INT 1
51000: PLUS
51001: ARRAY
51002: ST_TO_ADDR
51003: GO 51006
51005: POP
// temp_list2 = [ ] ;
51006: LD_ADDR_VAR 0 10
51010: PUSH
51011: EMPTY
51012: ST_TO_ADDR
// for i in temp_list do
51013: LD_ADDR_VAR 0 8
51017: PUSH
51018: LD_VAR 0 9
51022: PUSH
51023: FOR_IN
51024: IFFALSE 51076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51026: LD_ADDR_VAR 0 10
51030: PUSH
51031: LD_VAR 0 10
51035: PUSH
51036: LD_VAR 0 8
51040: PUSH
51041: LD_INT 1
51043: ARRAY
51044: PUSH
51045: LD_VAR 0 2
51049: PLUS
51050: PUSH
51051: LD_VAR 0 8
51055: PUSH
51056: LD_INT 2
51058: ARRAY
51059: PUSH
51060: LD_VAR 0 3
51064: PLUS
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: ADD
51073: ST_TO_ADDR
51074: GO 51023
51076: POP
51077: POP
// result = temp_list2 ;
51078: LD_ADDR_VAR 0 7
51082: PUSH
51083: LD_VAR 0 10
51087: ST_TO_ADDR
// end ;
51088: LD_VAR 0 7
51092: RET
// export function EnemyInRange ( unit , dist ) ; begin
51093: LD_INT 0
51095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 255
51110: PPUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 250
51120: PPUSH
51121: LD_VAR 0 1
51125: PPUSH
51126: CALL_OW 251
51130: PPUSH
51131: LD_VAR 0 2
51135: PPUSH
51136: CALL 25197 0 4
51140: PUSH
51141: LD_INT 4
51143: ARRAY
51144: ST_TO_ADDR
// end ;
51145: LD_VAR 0 3
51149: RET
// export function PlayerSeeMe ( unit ) ; begin
51150: LD_INT 0
51152: PPUSH
// result := See ( your_side , unit ) ;
51153: LD_ADDR_VAR 0 2
51157: PUSH
51158: LD_OWVAR 2
51162: PPUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 292
51172: ST_TO_ADDR
// end ;
51173: LD_VAR 0 2
51177: RET
// export function ReverseDir ( unit ) ; begin
51178: LD_INT 0
51180: PPUSH
// if not unit then
51181: LD_VAR 0 1
51185: NOT
51186: IFFALSE 51190
// exit ;
51188: GO 51213
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51190: LD_ADDR_VAR 0 2
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 254
51204: PUSH
51205: LD_INT 3
51207: PLUS
51208: PUSH
51209: LD_INT 6
51211: MOD
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 2
51217: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
51223: PPUSH
51224: PPUSH
// if not hexes then
51225: LD_VAR 0 2
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51382
// dist := 9999 ;
51234: LD_ADDR_VAR 0 5
51238: PUSH
51239: LD_INT 9999
51241: ST_TO_ADDR
// for i = 1 to hexes do
51242: LD_ADDR_VAR 0 4
51246: PUSH
51247: DOUBLE
51248: LD_INT 1
51250: DEC
51251: ST_TO_ADDR
51252: LD_VAR 0 2
51256: PUSH
51257: FOR_TO
51258: IFFALSE 51370
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51260: LD_VAR 0 1
51264: PPUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_VAR 0 4
51274: ARRAY
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_VAR 0 4
51289: ARRAY
51290: PUSH
51291: LD_INT 2
51293: ARRAY
51294: PPUSH
51295: CALL_OW 297
51299: PUSH
51300: LD_VAR 0 5
51304: LESS
51305: IFFALSE 51368
// begin hex := hexes [ i ] ;
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_VAR 0 4
51321: ARRAY
51322: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_VAR 0 4
51342: ARRAY
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_VAR 0 4
51357: ARRAY
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 297
51367: ST_TO_ADDR
// end ; end ;
51368: GO 51257
51370: POP
51371: POP
// result := hex ;
51372: LD_ADDR_VAR 0 3
51376: PUSH
51377: LD_VAR 0 7
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51387: LD_INT 0
51389: PPUSH
51390: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51391: LD_VAR 0 1
51395: NOT
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 21
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 23
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PPUSH
51426: CALL_OW 69
51430: IN
51431: NOT
51432: OR
51433: IFFALSE 51437
// exit ;
51435: GO 51484
// for i = 1 to 3 do
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_INT 3
51449: PUSH
51450: FOR_TO
51451: IFFALSE 51482
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 250
51462: PPUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 251
51472: PPUSH
51473: LD_INT 1
51475: PPUSH
51476: CALL_OW 453
51480: GO 51450
51482: POP
51483: POP
// end ;
51484: LD_VAR 0 2
51488: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51497: LD_VAR 0 1
51501: NOT
51502: PUSH
51503: LD_VAR 0 2
51507: NOT
51508: OR
51509: PUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 314
51519: OR
51520: IFFALSE 51524
// exit ;
51522: GO 51965
// x := GetX ( enemy_unit ) ;
51524: LD_ADDR_VAR 0 7
51528: PUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: CALL_OW 250
51538: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51539: LD_ADDR_VAR 0 8
51543: PUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: CALL_OW 251
51553: ST_TO_ADDR
// if not x or not y then
51554: LD_VAR 0 7
51558: NOT
51559: PUSH
51560: LD_VAR 0 8
51564: NOT
51565: OR
51566: IFFALSE 51570
// exit ;
51568: GO 51965
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51570: LD_ADDR_VAR 0 6
51574: PUSH
51575: LD_VAR 0 7
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: LD_INT 4
51585: PPUSH
51586: CALL_OW 272
51590: PUSH
51591: LD_VAR 0 8
51595: PPUSH
51596: LD_INT 0
51598: PPUSH
51599: LD_INT 4
51601: PPUSH
51602: CALL_OW 273
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 7
51615: PPUSH
51616: LD_INT 1
51618: PPUSH
51619: LD_INT 4
51621: PPUSH
51622: CALL_OW 272
51626: PUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 1
51634: PPUSH
51635: LD_INT 4
51637: PPUSH
51638: CALL_OW 273
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 7
51651: PPUSH
51652: LD_INT 2
51654: PPUSH
51655: LD_INT 4
51657: PPUSH
51658: CALL_OW 272
51662: PUSH
51663: LD_VAR 0 8
51667: PPUSH
51668: LD_INT 2
51670: PPUSH
51671: LD_INT 4
51673: PPUSH
51674: CALL_OW 273
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 7
51687: PPUSH
51688: LD_INT 3
51690: PPUSH
51691: LD_INT 4
51693: PPUSH
51694: CALL_OW 272
51698: PUSH
51699: LD_VAR 0 8
51703: PPUSH
51704: LD_INT 3
51706: PPUSH
51707: LD_INT 4
51709: PPUSH
51710: CALL_OW 273
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 7
51723: PPUSH
51724: LD_INT 4
51726: PPUSH
51727: LD_INT 4
51729: PPUSH
51730: CALL_OW 272
51734: PUSH
51735: LD_VAR 0 8
51739: PPUSH
51740: LD_INT 4
51742: PPUSH
51743: LD_INT 4
51745: PPUSH
51746: CALL_OW 273
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_VAR 0 7
51759: PPUSH
51760: LD_INT 5
51762: PPUSH
51763: LD_INT 4
51765: PPUSH
51766: CALL_OW 272
51770: PUSH
51771: LD_VAR 0 8
51775: PPUSH
51776: LD_INT 5
51778: PPUSH
51779: LD_INT 4
51781: PPUSH
51782: CALL_OW 273
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// for i = tmp downto 1 do
51799: LD_ADDR_VAR 0 4
51803: PUSH
51804: DOUBLE
51805: LD_VAR 0 6
51809: INC
51810: ST_TO_ADDR
51811: LD_INT 1
51813: PUSH
51814: FOR_DOWNTO
51815: IFFALSE 51916
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51817: LD_VAR 0 6
51821: PUSH
51822: LD_VAR 0 4
51826: ARRAY
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: PPUSH
51832: LD_VAR 0 6
51836: PUSH
51837: LD_VAR 0 4
51841: ARRAY
51842: PUSH
51843: LD_INT 2
51845: ARRAY
51846: PPUSH
51847: CALL_OW 488
51851: NOT
51852: PUSH
51853: LD_VAR 0 6
51857: PUSH
51858: LD_VAR 0 4
51862: ARRAY
51863: PUSH
51864: LD_INT 1
51866: ARRAY
51867: PPUSH
51868: LD_VAR 0 6
51872: PUSH
51873: LD_VAR 0 4
51877: ARRAY
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: PPUSH
51883: CALL_OW 428
51887: PUSH
51888: LD_INT 0
51890: NONEQUAL
51891: OR
51892: IFFALSE 51914
// tmp := Delete ( tmp , i ) ;
51894: LD_ADDR_VAR 0 6
51898: PUSH
51899: LD_VAR 0 6
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL_OW 3
51913: ST_TO_ADDR
51914: GO 51814
51916: POP
51917: POP
// j := GetClosestHex ( unit , tmp ) ;
51918: LD_ADDR_VAR 0 5
51922: PUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: LD_VAR 0 6
51932: PPUSH
51933: CALL 51218 0 2
51937: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51938: LD_VAR 0 1
51942: PPUSH
51943: LD_VAR 0 5
51947: PUSH
51948: LD_INT 1
51950: ARRAY
51951: PPUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 2
51959: ARRAY
51960: PPUSH
51961: CALL_OW 111
// end ;
51965: LD_VAR 0 3
51969: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51970: LD_INT 0
51972: PPUSH
51973: PPUSH
51974: PPUSH
// uc_side = 0 ;
51975: LD_ADDR_OWVAR 20
51979: PUSH
51980: LD_INT 0
51982: ST_TO_ADDR
// uc_nation = 0 ;
51983: LD_ADDR_OWVAR 21
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
// InitHc ;
51991: CALL_OW 19
// InitVc ;
51995: CALL_OW 20
// if mastodonts then
51999: LD_VAR 0 6
52003: IFFALSE 52070
// for i = 1 to mastodonts do
52005: LD_ADDR_VAR 0 11
52009: PUSH
52010: DOUBLE
52011: LD_INT 1
52013: DEC
52014: ST_TO_ADDR
52015: LD_VAR 0 6
52019: PUSH
52020: FOR_TO
52021: IFFALSE 52068
// begin vc_chassis := 31 ;
52023: LD_ADDR_OWVAR 37
52027: PUSH
52028: LD_INT 31
52030: ST_TO_ADDR
// vc_control := control_rider ;
52031: LD_ADDR_OWVAR 38
52035: PUSH
52036: LD_INT 4
52038: ST_TO_ADDR
// animal := CreateVehicle ;
52039: LD_ADDR_VAR 0 12
52043: PUSH
52044: CALL_OW 45
52048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52049: LD_VAR 0 12
52053: PPUSH
52054: LD_VAR 0 8
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL 54139 0 3
// end ;
52066: GO 52020
52068: POP
52069: POP
// if horses then
52070: LD_VAR 0 5
52074: IFFALSE 52141
// for i = 1 to horses do
52076: LD_ADDR_VAR 0 11
52080: PUSH
52081: DOUBLE
52082: LD_INT 1
52084: DEC
52085: ST_TO_ADDR
52086: LD_VAR 0 5
52090: PUSH
52091: FOR_TO
52092: IFFALSE 52139
// begin hc_class := 21 ;
52094: LD_ADDR_OWVAR 28
52098: PUSH
52099: LD_INT 21
52101: ST_TO_ADDR
// hc_gallery :=  ;
52102: LD_ADDR_OWVAR 33
52106: PUSH
52107: LD_STRING 
52109: ST_TO_ADDR
// animal := CreateHuman ;
52110: LD_ADDR_VAR 0 12
52114: PUSH
52115: CALL_OW 44
52119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52120: LD_VAR 0 12
52124: PPUSH
52125: LD_VAR 0 8
52129: PPUSH
52130: LD_INT 0
52132: PPUSH
52133: CALL 54139 0 3
// end ;
52137: GO 52091
52139: POP
52140: POP
// if birds then
52141: LD_VAR 0 1
52145: IFFALSE 52212
// for i = 1 to birds do
52147: LD_ADDR_VAR 0 11
52151: PUSH
52152: DOUBLE
52153: LD_INT 1
52155: DEC
52156: ST_TO_ADDR
52157: LD_VAR 0 1
52161: PUSH
52162: FOR_TO
52163: IFFALSE 52210
// begin hc_class = 18 ;
52165: LD_ADDR_OWVAR 28
52169: PUSH
52170: LD_INT 18
52172: ST_TO_ADDR
// hc_gallery =  ;
52173: LD_ADDR_OWVAR 33
52177: PUSH
52178: LD_STRING 
52180: ST_TO_ADDR
// animal := CreateHuman ;
52181: LD_ADDR_VAR 0 12
52185: PUSH
52186: CALL_OW 44
52190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52191: LD_VAR 0 12
52195: PPUSH
52196: LD_VAR 0 8
52200: PPUSH
52201: LD_INT 0
52203: PPUSH
52204: CALL 54139 0 3
// end ;
52208: GO 52162
52210: POP
52211: POP
// if tigers then
52212: LD_VAR 0 2
52216: IFFALSE 52300
// for i = 1 to tigers do
52218: LD_ADDR_VAR 0 11
52222: PUSH
52223: DOUBLE
52224: LD_INT 1
52226: DEC
52227: ST_TO_ADDR
52228: LD_VAR 0 2
52232: PUSH
52233: FOR_TO
52234: IFFALSE 52298
// begin hc_class = class_tiger ;
52236: LD_ADDR_OWVAR 28
52240: PUSH
52241: LD_INT 14
52243: ST_TO_ADDR
// hc_gallery =  ;
52244: LD_ADDR_OWVAR 33
52248: PUSH
52249: LD_STRING 
52251: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52252: LD_ADDR_OWVAR 35
52256: PUSH
52257: LD_INT 7
52259: NEG
52260: PPUSH
52261: LD_INT 7
52263: PPUSH
52264: CALL_OW 12
52268: ST_TO_ADDR
// animal := CreateHuman ;
52269: LD_ADDR_VAR 0 12
52273: PUSH
52274: CALL_OW 44
52278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52279: LD_VAR 0 12
52283: PPUSH
52284: LD_VAR 0 8
52288: PPUSH
52289: LD_INT 0
52291: PPUSH
52292: CALL 54139 0 3
// end ;
52296: GO 52233
52298: POP
52299: POP
// if apemans then
52300: LD_VAR 0 3
52304: IFFALSE 52427
// for i = 1 to apemans do
52306: LD_ADDR_VAR 0 11
52310: PUSH
52311: DOUBLE
52312: LD_INT 1
52314: DEC
52315: ST_TO_ADDR
52316: LD_VAR 0 3
52320: PUSH
52321: FOR_TO
52322: IFFALSE 52425
// begin hc_class = class_apeman ;
52324: LD_ADDR_OWVAR 28
52328: PUSH
52329: LD_INT 12
52331: ST_TO_ADDR
// hc_gallery =  ;
52332: LD_ADDR_OWVAR 33
52336: PUSH
52337: LD_STRING 
52339: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52340: LD_ADDR_OWVAR 35
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PPUSH
52349: LD_INT 5
52351: PPUSH
52352: CALL_OW 12
52356: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52357: LD_ADDR_OWVAR 31
52361: PUSH
52362: LD_INT 1
52364: PPUSH
52365: LD_INT 3
52367: PPUSH
52368: CALL_OW 12
52372: PUSH
52373: LD_INT 1
52375: PPUSH
52376: LD_INT 3
52378: PPUSH
52379: CALL_OW 12
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// animal := CreateHuman ;
52396: LD_ADDR_VAR 0 12
52400: PUSH
52401: CALL_OW 44
52405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52406: LD_VAR 0 12
52410: PPUSH
52411: LD_VAR 0 8
52415: PPUSH
52416: LD_INT 0
52418: PPUSH
52419: CALL 54139 0 3
// end ;
52423: GO 52321
52425: POP
52426: POP
// if enchidnas then
52427: LD_VAR 0 4
52431: IFFALSE 52498
// for i = 1 to enchidnas do
52433: LD_ADDR_VAR 0 11
52437: PUSH
52438: DOUBLE
52439: LD_INT 1
52441: DEC
52442: ST_TO_ADDR
52443: LD_VAR 0 4
52447: PUSH
52448: FOR_TO
52449: IFFALSE 52496
// begin hc_class = 13 ;
52451: LD_ADDR_OWVAR 28
52455: PUSH
52456: LD_INT 13
52458: ST_TO_ADDR
// hc_gallery =  ;
52459: LD_ADDR_OWVAR 33
52463: PUSH
52464: LD_STRING 
52466: ST_TO_ADDR
// animal := CreateHuman ;
52467: LD_ADDR_VAR 0 12
52471: PUSH
52472: CALL_OW 44
52476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52477: LD_VAR 0 12
52481: PPUSH
52482: LD_VAR 0 8
52486: PPUSH
52487: LD_INT 0
52489: PPUSH
52490: CALL 54139 0 3
// end ;
52494: GO 52448
52496: POP
52497: POP
// if fishes then
52498: LD_VAR 0 7
52502: IFFALSE 52569
// for i = 1 to fishes do
52504: LD_ADDR_VAR 0 11
52508: PUSH
52509: DOUBLE
52510: LD_INT 1
52512: DEC
52513: ST_TO_ADDR
52514: LD_VAR 0 7
52518: PUSH
52519: FOR_TO
52520: IFFALSE 52567
// begin hc_class = 20 ;
52522: LD_ADDR_OWVAR 28
52526: PUSH
52527: LD_INT 20
52529: ST_TO_ADDR
// hc_gallery =  ;
52530: LD_ADDR_OWVAR 33
52534: PUSH
52535: LD_STRING 
52537: ST_TO_ADDR
// animal := CreateHuman ;
52538: LD_ADDR_VAR 0 12
52542: PUSH
52543: CALL_OW 44
52547: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52548: LD_VAR 0 12
52552: PPUSH
52553: LD_VAR 0 9
52557: PPUSH
52558: LD_INT 0
52560: PPUSH
52561: CALL 54139 0 3
// end ;
52565: GO 52519
52567: POP
52568: POP
// end ;
52569: LD_VAR 0 10
52573: RET
// export function WantHeal ( sci , unit ) ; begin
52574: LD_INT 0
52576: PPUSH
// if GetTaskList ( sci ) > 0 then
52577: LD_VAR 0 1
52581: PPUSH
52582: CALL_OW 437
52586: PUSH
52587: LD_INT 0
52589: GREATER
52590: IFFALSE 52660
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL_OW 437
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: PUSH
52610: LD_STRING l
52612: EQUAL
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 437
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 4
52630: ARRAY
52631: PUSH
52632: LD_VAR 0 2
52636: EQUAL
52637: AND
52638: IFFALSE 52650
// result := true else
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_INT 1
52647: ST_TO_ADDR
52648: GO 52658
// result := false ;
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// end else
52658: GO 52668
// result := false ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 0
52667: ST_TO_ADDR
// end ;
52668: LD_VAR 0 3
52672: RET
// export function HealTarget ( sci ) ; begin
52673: LD_INT 0
52675: PPUSH
// if not sci then
52676: LD_VAR 0 1
52680: NOT
52681: IFFALSE 52685
// exit ;
52683: GO 52750
// result := 0 ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 0
52692: ST_TO_ADDR
// if GetTaskList ( sci ) then
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 437
52702: IFFALSE 52750
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 437
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PUSH
52722: LD_STRING l
52724: EQUAL
52725: IFFALSE 52750
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52727: LD_ADDR_VAR 0 2
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 437
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PUSH
52746: LD_INT 4
52748: ARRAY
52749: ST_TO_ADDR
// end ;
52750: LD_VAR 0 2
52754: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52755: LD_INT 0
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
// if not base_units then
52761: LD_VAR 0 1
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 52857
// result := false ;
52770: LD_ADDR_VAR 0 2
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52778: LD_ADDR_VAR 0 5
52782: PUSH
52783: LD_VAR 0 1
52787: PPUSH
52788: LD_INT 21
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PPUSH
52798: CALL_OW 72
52802: ST_TO_ADDR
// if not tmp then
52803: LD_VAR 0 5
52807: NOT
52808: IFFALSE 52812
// exit ;
52810: GO 52857
// for i in tmp do
52812: LD_ADDR_VAR 0 3
52816: PUSH
52817: LD_VAR 0 5
52821: PUSH
52822: FOR_IN
52823: IFFALSE 52855
// begin result := EnemyInRange ( i , 22 ) ;
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_VAR 0 3
52834: PPUSH
52835: LD_INT 22
52837: PPUSH
52838: CALL 51093 0 2
52842: ST_TO_ADDR
// if result then
52843: LD_VAR 0 2
52847: IFFALSE 52853
// exit ;
52849: POP
52850: POP
52851: GO 52857
// end ;
52853: GO 52822
52855: POP
52856: POP
// end ;
52857: LD_VAR 0 2
52861: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52862: LD_INT 0
52864: PPUSH
52865: PPUSH
// if not units then
52866: LD_VAR 0 1
52870: NOT
52871: IFFALSE 52875
// exit ;
52873: GO 52945
// result := [ ] ;
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: EMPTY
52881: ST_TO_ADDR
// for i in units do
52882: LD_ADDR_VAR 0 4
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: FOR_IN
52893: IFFALSE 52943
// if GetTag ( i ) = tag then
52895: LD_VAR 0 4
52899: PPUSH
52900: CALL_OW 110
52904: PUSH
52905: LD_VAR 0 2
52909: EQUAL
52910: IFFALSE 52941
// result := Insert ( result , result + 1 , i ) ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_VAR 0 3
52921: PPUSH
52922: LD_VAR 0 3
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: PPUSH
52931: LD_VAR 0 4
52935: PPUSH
52936: CALL_OW 2
52940: ST_TO_ADDR
52941: GO 52892
52943: POP
52944: POP
// end ;
52945: LD_VAR 0 3
52949: RET
// export function IsDriver ( un ) ; begin
52950: LD_INT 0
52952: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52953: LD_ADDR_VAR 0 2
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 55
52965: PUSH
52966: EMPTY
52967: LIST
52968: PPUSH
52969: CALL_OW 69
52973: IN
52974: ST_TO_ADDR
// end ;
52975: LD_VAR 0 2
52979: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52980: LD_INT 0
52982: PPUSH
52983: PPUSH
// list := [ ] ;
52984: LD_ADDR_VAR 0 5
52988: PUSH
52989: EMPTY
52990: ST_TO_ADDR
// case d of 0 :
52991: LD_VAR 0 3
52995: PUSH
52996: LD_INT 0
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53004
53002: GO 53137
53004: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53005: LD_ADDR_VAR 0 5
53009: PUSH
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 4
53017: MINUS
53018: PUSH
53019: LD_VAR 0 2
53023: PUSH
53024: LD_INT 4
53026: MINUS
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: PUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_INT 3
53043: MINUS
53044: PUSH
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: PUSH
53058: LD_VAR 0 1
53062: PUSH
53063: LD_INT 4
53065: PLUS
53066: PUSH
53067: LD_VAR 0 2
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: PUSH
53080: LD_VAR 0 1
53084: PUSH
53085: LD_INT 3
53087: PLUS
53088: PUSH
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 3
53096: PLUS
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: PUSH
53106: LD_VAR 0 1
53110: PUSH
53111: LD_VAR 0 2
53115: PUSH
53116: LD_INT 4
53118: PLUS
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// end ; 1 :
53135: GO 53835
53137: LD_INT 1
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53278
53145: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53146: LD_ADDR_VAR 0 5
53150: PUSH
53151: LD_VAR 0 1
53155: PUSH
53156: LD_VAR 0 2
53160: PUSH
53161: LD_INT 4
53163: MINUS
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: PUSH
53173: LD_VAR 0 1
53177: PUSH
53178: LD_INT 3
53180: MINUS
53181: PUSH
53182: LD_VAR 0 2
53186: PUSH
53187: LD_INT 3
53189: MINUS
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_VAR 0 1
53203: PUSH
53204: LD_INT 4
53206: MINUS
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: PUSH
53221: LD_VAR 0 1
53225: PUSH
53226: LD_VAR 0 2
53230: PUSH
53231: LD_INT 3
53233: PLUS
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_INT 4
53250: PLUS
53251: PUSH
53252: LD_VAR 0 2
53256: PUSH
53257: LD_INT 4
53259: PLUS
53260: PUSH
53261: LD_INT 5
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// end ; 2 :
53276: GO 53835
53278: LD_INT 2
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53415
53286: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53287: LD_ADDR_VAR 0 5
53291: PUSH
53292: LD_VAR 0 1
53296: PUSH
53297: LD_VAR 0 2
53301: PUSH
53302: LD_INT 3
53304: MINUS
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: PUSH
53314: LD_VAR 0 1
53318: PUSH
53319: LD_INT 4
53321: PLUS
53322: PUSH
53323: LD_VAR 0 2
53327: PUSH
53328: LD_INT 4
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: PUSH
53336: LD_VAR 0 1
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 4
53348: PLUS
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 1
53362: PUSH
53363: LD_INT 3
53365: MINUS
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_VAR 0 1
53384: PUSH
53385: LD_INT 4
53387: MINUS
53388: PUSH
53389: LD_VAR 0 2
53393: PUSH
53394: LD_INT 4
53396: MINUS
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// end ; 3 :
53413: GO 53835
53415: LD_INT 3
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53423
53421: GO 53556
53423: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53424: LD_ADDR_VAR 0 5
53428: PUSH
53429: LD_VAR 0 1
53433: PUSH
53434: LD_INT 3
53436: PLUS
53437: PUSH
53438: LD_VAR 0 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_INT 4
53458: PLUS
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 4
53467: PLUS
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: LD_INT 4
53484: MINUS
53485: PUSH
53486: LD_VAR 0 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: LD_VAR 0 1
53503: PUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_INT 4
53511: MINUS
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 3
53528: MINUS
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 3
53537: MINUS
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// end ; 4 :
53554: GO 53835
53556: LD_INT 4
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53564
53562: GO 53697
53564: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53565: LD_ADDR_VAR 0 5
53569: PUSH
53570: LD_VAR 0 1
53574: PUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 4
53582: PLUS
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_INT 3
53599: PLUS
53600: PUSH
53601: LD_VAR 0 2
53605: PUSH
53606: LD_INT 3
53608: PLUS
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: PUSH
53618: LD_VAR 0 1
53622: PUSH
53623: LD_INT 4
53625: PLUS
53626: PUSH
53627: LD_VAR 0 2
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 3
53652: MINUS
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_INT 4
53669: MINUS
53670: PUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_INT 4
53678: MINUS
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// end ; 5 :
53695: GO 53835
53697: LD_INT 5
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53705
53703: GO 53834
53705: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53706: LD_ADDR_VAR 0 5
53710: PUSH
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 4
53718: MINUS
53719: PUSH
53720: LD_VAR 0 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 1
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: LD_INT 4
53745: MINUS
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: LD_INT 4
53762: PLUS
53763: PUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_INT 4
53771: PLUS
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 3
53788: PLUS
53789: PUSH
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: LD_VAR 0 1
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 3
53815: PLUS
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// end ; end ;
53832: GO 53835
53834: POP
// result := list ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_VAR 0 5
53844: ST_TO_ADDR
// end ;
53845: LD_VAR 0 4
53849: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53850: LD_INT 0
53852: PPUSH
53853: PPUSH
53854: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53855: LD_VAR 0 1
53859: NOT
53860: PUSH
53861: LD_VAR 0 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: IN
53884: NOT
53885: OR
53886: IFFALSE 53890
// exit ;
53888: GO 53982
// tmp := [ ] ;
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: EMPTY
53896: ST_TO_ADDR
// for i in units do
53897: LD_ADDR_VAR 0 4
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: FOR_IN
53908: IFFALSE 53951
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_VAR 0 5
53919: PPUSH
53920: LD_VAR 0 5
53924: PUSH
53925: LD_INT 1
53927: PLUS
53928: PPUSH
53929: LD_VAR 0 4
53933: PPUSH
53934: LD_VAR 0 2
53938: PPUSH
53939: CALL_OW 259
53943: PPUSH
53944: CALL_OW 2
53948: ST_TO_ADDR
53949: GO 53907
53951: POP
53952: POP
// if not tmp then
53953: LD_VAR 0 5
53957: NOT
53958: IFFALSE 53962
// exit ;
53960: GO 53982
// result := SortListByListDesc ( units , tmp ) ;
53962: LD_ADDR_VAR 0 3
53966: PUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: LD_VAR 0 5
53976: PPUSH
53977: CALL_OW 77
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 3
53986: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53987: LD_INT 0
53989: PPUSH
53990: PPUSH
53991: PPUSH
// x := GetX ( building ) ;
53992: LD_ADDR_VAR 0 4
53996: PUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: CALL_OW 250
54006: ST_TO_ADDR
// y := GetY ( building ) ;
54007: LD_ADDR_VAR 0 5
54011: PUSH
54012: LD_VAR 0 2
54016: PPUSH
54017: CALL_OW 251
54021: ST_TO_ADDR
// if GetTaskList ( unit ) then
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 437
54031: IFFALSE 54126
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54033: LD_STRING e
54035: PUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 437
54045: PUSH
54046: LD_INT 1
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: EQUAL
54054: PUSH
54055: LD_VAR 0 4
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 437
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PUSH
54074: LD_INT 2
54076: ARRAY
54077: EQUAL
54078: AND
54079: PUSH
54080: LD_VAR 0 5
54084: PUSH
54085: LD_VAR 0 1
54089: PPUSH
54090: CALL_OW 437
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_INT 3
54101: ARRAY
54102: EQUAL
54103: AND
54104: IFFALSE 54116
// result := true else
54106: LD_ADDR_VAR 0 3
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
54114: GO 54124
// result := false ;
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: LD_INT 0
54123: ST_TO_ADDR
// end else
54124: GO 54134
// result := false ;
54126: LD_ADDR_VAR 0 3
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// end ;
54134: LD_VAR 0 3
54138: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
// if not unit or not area then
54145: LD_VAR 0 1
54149: NOT
54150: PUSH
54151: LD_VAR 0 2
54155: NOT
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54325
// tmp := AreaToList ( area , i ) ;
54161: LD_ADDR_VAR 0 6
54165: PUSH
54166: LD_VAR 0 2
54170: PPUSH
54171: LD_VAR 0 5
54175: PPUSH
54176: CALL_OW 517
54180: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54181: LD_ADDR_VAR 0 5
54185: PUSH
54186: DOUBLE
54187: LD_INT 1
54189: DEC
54190: ST_TO_ADDR
54191: LD_VAR 0 6
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: PUSH
54200: FOR_TO
54201: IFFALSE 54323
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54203: LD_ADDR_VAR 0 7
54207: PUSH
54208: LD_VAR 0 6
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PUSH
54217: LD_VAR 0 5
54221: ARRAY
54222: PUSH
54223: LD_VAR 0 6
54227: PUSH
54228: LD_INT 2
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 5
54236: ARRAY
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54242: LD_VAR 0 7
54246: PUSH
54247: LD_INT 1
54249: ARRAY
54250: PPUSH
54251: LD_VAR 0 7
54255: PUSH
54256: LD_INT 2
54258: ARRAY
54259: PPUSH
54260: CALL_OW 428
54264: PUSH
54265: LD_INT 0
54267: EQUAL
54268: IFFALSE 54321
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_VAR 0 7
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: PPUSH
54284: LD_VAR 0 7
54288: PUSH
54289: LD_INT 2
54291: ARRAY
54292: PPUSH
54293: LD_VAR 0 3
54297: PPUSH
54298: CALL_OW 48
// result := IsPlaced ( unit ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 305
54316: ST_TO_ADDR
// exit ;
54317: POP
54318: POP
54319: GO 54325
// end ; end ;
54321: GO 54200
54323: POP
54324: POP
// end ;
54325: LD_VAR 0 4
54329: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
54334: PPUSH
// if not side or side > 8 then
54335: LD_VAR 0 1
54339: NOT
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 8
54348: GREATER
54349: OR
54350: IFFALSE 54354
// exit ;
54352: GO 54541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54354: LD_ADDR_VAR 0 4
54358: PUSH
54359: LD_INT 22
54361: PUSH
54362: LD_VAR 0 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 21
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 69
54389: ST_TO_ADDR
// if not tmp then
54390: LD_VAR 0 4
54394: NOT
54395: IFFALSE 54399
// exit ;
54397: GO 54541
// enable_addtolog := true ;
54399: LD_ADDR_OWVAR 81
54403: PUSH
54404: LD_INT 1
54406: ST_TO_ADDR
// AddToLog ( [ ) ;
54407: LD_STRING [
54409: PPUSH
54410: CALL_OW 561
// for i in tmp do
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: LD_VAR 0 4
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54532
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54427: LD_STRING [
54429: PUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: CALL_OW 266
54439: STR
54440: PUSH
54441: LD_STRING , 
54443: STR
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: CALL_OW 250
54454: STR
54455: PUSH
54456: LD_STRING , 
54458: STR
54459: PUSH
54460: LD_VAR 0 3
54464: PPUSH
54465: CALL_OW 251
54469: STR
54470: PUSH
54471: LD_STRING , 
54473: STR
54474: PUSH
54475: LD_VAR 0 3
54479: PPUSH
54480: CALL_OW 254
54484: STR
54485: PUSH
54486: LD_STRING , 
54488: STR
54489: PUSH
54490: LD_VAR 0 3
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: CALL_OW 268
54502: STR
54503: PUSH
54504: LD_STRING , 
54506: STR
54507: PUSH
54508: LD_VAR 0 3
54512: PPUSH
54513: LD_INT 2
54515: PPUSH
54516: CALL_OW 268
54520: STR
54521: PUSH
54522: LD_STRING ],
54524: STR
54525: PPUSH
54526: CALL_OW 561
// end ;
54530: GO 54424
54532: POP
54533: POP
// AddToLog ( ]; ) ;
54534: LD_STRING ];
54536: PPUSH
54537: CALL_OW 561
// end ;
54541: LD_VAR 0 2
54545: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
// if not area or not rate or not max then
54553: LD_VAR 0 1
54557: NOT
54558: PUSH
54559: LD_VAR 0 2
54563: NOT
54564: OR
54565: PUSH
54566: LD_VAR 0 4
54570: NOT
54571: OR
54572: IFFALSE 54576
// exit ;
54574: GO 54768
// while 1 do
54576: LD_INT 1
54578: IFFALSE 54768
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: CALL_OW 287
54597: PUSH
54598: LD_INT 10
54600: MUL
54601: ST_TO_ADDR
// r := rate / 10 ;
54602: LD_ADDR_VAR 0 7
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 10
54614: DIVREAL
54615: ST_TO_ADDR
// time := 1 1$00 ;
54616: LD_ADDR_VAR 0 8
54620: PUSH
54621: LD_INT 2100
54623: ST_TO_ADDR
// if amount < min then
54624: LD_VAR 0 9
54628: PUSH
54629: LD_VAR 0 3
54633: LESS
54634: IFFALSE 54652
// r := r * 2 else
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 2
54648: MUL
54649: ST_TO_ADDR
54650: GO 54678
// if amount > max then
54652: LD_VAR 0 9
54656: PUSH
54657: LD_VAR 0 4
54661: GREATER
54662: IFFALSE 54678
// r := r / 2 ;
54664: LD_ADDR_VAR 0 7
54668: PUSH
54669: LD_VAR 0 7
54673: PUSH
54674: LD_INT 2
54676: DIVREAL
54677: ST_TO_ADDR
// time := time / r ;
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_VAR 0 8
54687: PUSH
54688: LD_VAR 0 7
54692: DIVREAL
54693: ST_TO_ADDR
// if time < 0 then
54694: LD_VAR 0 8
54698: PUSH
54699: LD_INT 0
54701: LESS
54702: IFFALSE 54719
// time := time * - 1 ;
54704: LD_ADDR_VAR 0 8
54708: PUSH
54709: LD_VAR 0 8
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: MUL
54718: ST_TO_ADDR
// wait ( time ) ;
54719: LD_VAR 0 8
54723: PPUSH
54724: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54728: LD_INT 35
54730: PPUSH
54731: LD_INT 875
54733: PPUSH
54734: CALL_OW 12
54738: PPUSH
54739: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54743: LD_INT 1
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: CALL_OW 12
54753: PPUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: LD_INT 1
54761: PPUSH
54762: CALL_OW 55
// end ;
54766: GO 54576
// end ;
54768: LD_VAR 0 5
54772: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
// if not turrets or not factories then
54783: LD_VAR 0 1
54787: NOT
54788: PUSH
54789: LD_VAR 0 2
54793: NOT
54794: OR
54795: IFFALSE 54799
// exit ;
54797: GO 55106
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54799: LD_ADDR_VAR 0 10
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: LD_INT 6
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 24
54841: PUSH
54842: LD_INT 25
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 23
54851: PUSH
54852: LD_INT 27
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 42
54865: PUSH
54866: LD_INT 43
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 44
54875: PUSH
54876: LD_INT 46
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 45
54885: PUSH
54886: LD_INT 47
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// result := [ ] ;
54903: LD_ADDR_VAR 0 3
54907: PUSH
54908: EMPTY
54909: ST_TO_ADDR
// for i in turrets do
54910: LD_ADDR_VAR 0 4
54914: PUSH
54915: LD_VAR 0 1
54919: PUSH
54920: FOR_IN
54921: IFFALSE 55104
// begin nat := GetNation ( i ) ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 4
54932: PPUSH
54933: CALL_OW 248
54937: ST_TO_ADDR
// weapon := 0 ;
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// if not nat then
54946: LD_VAR 0 7
54950: NOT
54951: IFFALSE 54955
// continue ;
54953: GO 54920
// for j in list [ nat ] do
54955: LD_ADDR_VAR 0 5
54959: PUSH
54960: LD_VAR 0 10
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PUSH
54971: FOR_IN
54972: IFFALSE 55013
// if GetBWeapon ( i ) = j [ 1 ] then
54974: LD_VAR 0 4
54978: PPUSH
54979: CALL_OW 269
54983: PUSH
54984: LD_VAR 0 5
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: EQUAL
54993: IFFALSE 55011
// begin weapon := j [ 2 ] ;
54995: LD_ADDR_VAR 0 8
54999: PUSH
55000: LD_VAR 0 5
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: ST_TO_ADDR
// break ;
55009: GO 55013
// end ;
55011: GO 54971
55013: POP
55014: POP
// if not weapon then
55015: LD_VAR 0 8
55019: NOT
55020: IFFALSE 55024
// continue ;
55022: GO 54920
// for k in factories do
55024: LD_ADDR_VAR 0 6
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: FOR_IN
55035: IFFALSE 55100
// begin weapons := AvailableWeaponList ( k ) ;
55037: LD_ADDR_VAR 0 9
55041: PUSH
55042: LD_VAR 0 6
55046: PPUSH
55047: CALL_OW 478
55051: ST_TO_ADDR
// if not weapons then
55052: LD_VAR 0 9
55056: NOT
55057: IFFALSE 55061
// continue ;
55059: GO 55034
// if weapon in weapons then
55061: LD_VAR 0 8
55065: PUSH
55066: LD_VAR 0 9
55070: IN
55071: IFFALSE 55098
// begin result := [ i , weapon ] ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_VAR 0 4
55082: PUSH
55083: LD_VAR 0 8
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// exit ;
55092: POP
55093: POP
55094: POP
55095: POP
55096: GO 55106
// end ; end ;
55098: GO 55034
55100: POP
55101: POP
// end ;
55102: GO 54920
55104: POP
55105: POP
// end ;
55106: LD_VAR 0 3
55110: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55111: LD_INT 0
55113: PPUSH
// if not side or side > 8 then
55114: LD_VAR 0 3
55118: NOT
55119: PUSH
55120: LD_VAR 0 3
55124: PUSH
55125: LD_INT 8
55127: GREATER
55128: OR
55129: IFFALSE 55133
// exit ;
55131: GO 55192
// if not range then
55133: LD_VAR 0 4
55137: NOT
55138: IFFALSE 55149
// range := - 12 ;
55140: LD_ADDR_VAR 0 4
55144: PUSH
55145: LD_INT 12
55147: NEG
55148: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_VAR 0 2
55182: PPUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 331
// end ;
55192: LD_VAR 0 5
55196: RET
// export function Video ( mode ) ; begin
55197: LD_INT 0
55199: PPUSH
// ingame_video = mode ;
55200: LD_ADDR_OWVAR 52
55204: PUSH
55205: LD_VAR 0 1
55209: ST_TO_ADDR
// interface_hidden = mode ;
55210: LD_ADDR_OWVAR 54
55214: PUSH
55215: LD_VAR 0 1
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 2
55224: RET
// export function Join ( array , element ) ; begin
55225: LD_INT 0
55227: PPUSH
// result := array ^ element ;
55228: LD_ADDR_VAR 0 3
55232: PUSH
55233: LD_VAR 0 1
55237: PUSH
55238: LD_VAR 0 2
55242: ADD
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 3
55248: RET
// export function JoinUnion ( array , element ) ; begin
55249: LD_INT 0
55251: PPUSH
// result := array union element ;
55252: LD_ADDR_VAR 0 3
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_VAR 0 2
55266: UNION
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 3
55272: RET
// export function GetBehemoths ( side ) ; begin
55273: LD_INT 0
55275: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55276: LD_ADDR_VAR 0 2
55280: PUSH
55281: LD_INT 22
55283: PUSH
55284: LD_VAR 0 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 31
55295: PUSH
55296: LD_INT 25
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PPUSH
55307: CALL_OW 69
55311: ST_TO_ADDR
// end ;
55312: LD_VAR 0 2
55316: RET
// export function Shuffle ( array ) ; var i , index ; begin
55317: LD_INT 0
55319: PPUSH
55320: PPUSH
55321: PPUSH
// result := [ ] ;
55322: LD_ADDR_VAR 0 2
55326: PUSH
55327: EMPTY
55328: ST_TO_ADDR
// if not array then
55329: LD_VAR 0 1
55333: NOT
55334: IFFALSE 55338
// exit ;
55336: GO 55437
// Randomize ;
55338: CALL_OW 10
// for i = array downto 1 do
55342: LD_ADDR_VAR 0 3
55346: PUSH
55347: DOUBLE
55348: LD_VAR 0 1
55352: INC
55353: ST_TO_ADDR
55354: LD_INT 1
55356: PUSH
55357: FOR_DOWNTO
55358: IFFALSE 55435
// begin index := rand ( 1 , array ) ;
55360: LD_ADDR_VAR 0 4
55364: PUSH
55365: LD_INT 1
55367: PPUSH
55368: LD_VAR 0 1
55372: PPUSH
55373: CALL_OW 12
55377: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55378: LD_ADDR_VAR 0 2
55382: PUSH
55383: LD_VAR 0 2
55387: PPUSH
55388: LD_VAR 0 2
55392: PUSH
55393: LD_INT 1
55395: PLUS
55396: PPUSH
55397: LD_VAR 0 1
55401: PUSH
55402: LD_VAR 0 4
55406: ARRAY
55407: PPUSH
55408: CALL_OW 2
55412: ST_TO_ADDR
// array := Delete ( array , index ) ;
55413: LD_ADDR_VAR 0 1
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 3
55432: ST_TO_ADDR
// end ;
55433: GO 55357
55435: POP
55436: POP
// end ;
55437: LD_VAR 0 2
55441: RET
// export function GetBaseMaterials ( base ) ; begin
55442: LD_INT 0
55444: PPUSH
// result := [ 0 , 0 , 0 ] ;
55445: LD_ADDR_VAR 0 2
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// if not base then
55464: LD_VAR 0 1
55468: NOT
55469: IFFALSE 55473
// exit ;
55471: GO 55522
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55473: LD_ADDR_VAR 0 2
55477: PUSH
55478: LD_VAR 0 1
55482: PPUSH
55483: LD_INT 1
55485: PPUSH
55486: CALL_OW 275
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_INT 2
55498: PPUSH
55499: CALL_OW 275
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 3
55511: PPUSH
55512: CALL_OW 275
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// end ;
55522: LD_VAR 0 2
55526: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55527: LD_INT 0
55529: PPUSH
55530: PPUSH
// result := array ;
55531: LD_ADDR_VAR 0 3
55535: PUSH
55536: LD_VAR 0 1
55540: ST_TO_ADDR
// if size > 0 then
55541: LD_VAR 0 2
55545: PUSH
55546: LD_INT 0
55548: GREATER
55549: IFFALSE 55595
// for i := array downto size do
55551: LD_ADDR_VAR 0 4
55555: PUSH
55556: DOUBLE
55557: LD_VAR 0 1
55561: INC
55562: ST_TO_ADDR
55563: LD_VAR 0 2
55567: PUSH
55568: FOR_DOWNTO
55569: IFFALSE 55593
// result := Delete ( result , result ) ;
55571: LD_ADDR_VAR 0 3
55575: PUSH
55576: LD_VAR 0 3
55580: PPUSH
55581: LD_VAR 0 3
55585: PPUSH
55586: CALL_OW 3
55590: ST_TO_ADDR
55591: GO 55568
55593: POP
55594: POP
// end ; end_of_file
55595: LD_VAR 0 3
55599: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
55600: GO 55602
55602: DISABLE
// begin ru_radar := 98 ;
55603: LD_ADDR_EXP 29
55607: PUSH
55608: LD_INT 98
55610: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55611: LD_ADDR_EXP 30
55615: PUSH
55616: LD_INT 89
55618: ST_TO_ADDR
// us_hack := 99 ;
55619: LD_ADDR_EXP 31
55623: PUSH
55624: LD_INT 99
55626: ST_TO_ADDR
// us_artillery := 97 ;
55627: LD_ADDR_EXP 32
55631: PUSH
55632: LD_INT 97
55634: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55635: LD_ADDR_EXP 33
55639: PUSH
55640: LD_INT 91
55642: ST_TO_ADDR
// tech_Artillery := 80 ;
55643: LD_ADDR_EXP 34
55647: PUSH
55648: LD_INT 80
55650: ST_TO_ADDR
// tech_RadMat := 81 ;
55651: LD_ADDR_EXP 35
55655: PUSH
55656: LD_INT 81
55658: ST_TO_ADDR
// tech_BasicTools := 82 ;
55659: LD_ADDR_EXP 36
55663: PUSH
55664: LD_INT 82
55666: ST_TO_ADDR
// tech_Cargo := 83 ;
55667: LD_ADDR_EXP 37
55671: PUSH
55672: LD_INT 83
55674: ST_TO_ADDR
// tech_Track := 84 ;
55675: LD_ADDR_EXP 38
55679: PUSH
55680: LD_INT 84
55682: ST_TO_ADDR
// tech_Crane := 85 ;
55683: LD_ADDR_EXP 39
55687: PUSH
55688: LD_INT 85
55690: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55691: LD_ADDR_EXP 40
55695: PUSH
55696: LD_INT 86
55698: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55699: LD_ADDR_EXP 41
55703: PUSH
55704: LD_INT 87
55706: ST_TO_ADDR
// end ; end_of_file
55707: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55708: LD_INT 0
55710: PPUSH
55711: PPUSH
// skirmish := false ;
55712: LD_ADDR_EXP 42
55716: PUSH
55717: LD_INT 0
55719: ST_TO_ADDR
// debug_mc := false ;
55720: LD_ADDR_EXP 43
55724: PUSH
55725: LD_INT 0
55727: ST_TO_ADDR
// mc_bases := [ ] ;
55728: LD_ADDR_EXP 44
55732: PUSH
55733: EMPTY
55734: ST_TO_ADDR
// mc_sides := [ ] ;
55735: LD_ADDR_EXP 70
55739: PUSH
55740: EMPTY
55741: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55742: LD_ADDR_EXP 45
55746: PUSH
55747: EMPTY
55748: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55749: LD_ADDR_EXP 46
55753: PUSH
55754: EMPTY
55755: ST_TO_ADDR
// mc_need_heal := [ ] ;
55756: LD_ADDR_EXP 47
55760: PUSH
55761: EMPTY
55762: ST_TO_ADDR
// mc_healers := [ ] ;
55763: LD_ADDR_EXP 48
55767: PUSH
55768: EMPTY
55769: ST_TO_ADDR
// mc_build_list := [ ] ;
55770: LD_ADDR_EXP 49
55774: PUSH
55775: EMPTY
55776: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55777: LD_ADDR_EXP 76
55781: PUSH
55782: EMPTY
55783: ST_TO_ADDR
// mc_builders := [ ] ;
55784: LD_ADDR_EXP 50
55788: PUSH
55789: EMPTY
55790: ST_TO_ADDR
// mc_construct_list := [ ] ;
55791: LD_ADDR_EXP 51
55795: PUSH
55796: EMPTY
55797: ST_TO_ADDR
// mc_turret_list := [ ] ;
55798: LD_ADDR_EXP 52
55802: PUSH
55803: EMPTY
55804: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55805: LD_ADDR_EXP 53
55809: PUSH
55810: EMPTY
55811: ST_TO_ADDR
// mc_miners := [ ] ;
55812: LD_ADDR_EXP 58
55816: PUSH
55817: EMPTY
55818: ST_TO_ADDR
// mc_mines := [ ] ;
55819: LD_ADDR_EXP 57
55823: PUSH
55824: EMPTY
55825: ST_TO_ADDR
// mc_minefields := [ ] ;
55826: LD_ADDR_EXP 59
55830: PUSH
55831: EMPTY
55832: ST_TO_ADDR
// mc_crates := [ ] ;
55833: LD_ADDR_EXP 60
55837: PUSH
55838: EMPTY
55839: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55840: LD_ADDR_EXP 61
55844: PUSH
55845: EMPTY
55846: ST_TO_ADDR
// mc_crates_area := [ ] ;
55847: LD_ADDR_EXP 62
55851: PUSH
55852: EMPTY
55853: ST_TO_ADDR
// mc_vehicles := [ ] ;
55854: LD_ADDR_EXP 63
55858: PUSH
55859: EMPTY
55860: ST_TO_ADDR
// mc_attack := [ ] ;
55861: LD_ADDR_EXP 64
55865: PUSH
55866: EMPTY
55867: ST_TO_ADDR
// mc_produce := [ ] ;
55868: LD_ADDR_EXP 65
55872: PUSH
55873: EMPTY
55874: ST_TO_ADDR
// mc_defender := [ ] ;
55875: LD_ADDR_EXP 66
55879: PUSH
55880: EMPTY
55881: ST_TO_ADDR
// mc_parking := [ ] ;
55882: LD_ADDR_EXP 68
55886: PUSH
55887: EMPTY
55888: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
55889: LD_ADDR_EXP 54
55893: PUSH
55894: EMPTY
55895: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
55896: LD_ADDR_EXP 56
55900: PUSH
55901: EMPTY
55902: ST_TO_ADDR
// mc_scan := [ ] ;
55903: LD_ADDR_EXP 67
55907: PUSH
55908: EMPTY
55909: ST_TO_ADDR
// mc_scan_area := [ ] ;
55910: LD_ADDR_EXP 69
55914: PUSH
55915: EMPTY
55916: ST_TO_ADDR
// mc_tech := [ ] ;
55917: LD_ADDR_EXP 71
55921: PUSH
55922: EMPTY
55923: ST_TO_ADDR
// mc_class := [ ] ;
55924: LD_ADDR_EXP 85
55928: PUSH
55929: EMPTY
55930: ST_TO_ADDR
// mc_class_case_use := [ ] ;
55931: LD_ADDR_EXP 86
55935: PUSH
55936: EMPTY
55937: ST_TO_ADDR
// end ;
55938: LD_VAR 0 1
55942: RET
// export function MC_Kill ( base ) ; begin
55943: LD_INT 0
55945: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
55946: LD_ADDR_EXP 44
55950: PUSH
55951: LD_EXP 44
55955: PPUSH
55956: LD_VAR 0 1
55960: PPUSH
55961: EMPTY
55962: PPUSH
55963: CALL_OW 1
55967: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55968: LD_ADDR_EXP 45
55972: PUSH
55973: LD_EXP 45
55977: PPUSH
55978: LD_VAR 0 1
55982: PPUSH
55983: EMPTY
55984: PPUSH
55985: CALL_OW 1
55989: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55990: LD_ADDR_EXP 46
55994: PUSH
55995: LD_EXP 46
55999: PPUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: EMPTY
56006: PPUSH
56007: CALL_OW 1
56011: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56012: LD_ADDR_EXP 47
56016: PUSH
56017: LD_EXP 47
56021: PPUSH
56022: LD_VAR 0 1
56026: PPUSH
56027: EMPTY
56028: PPUSH
56029: CALL_OW 1
56033: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56034: LD_ADDR_EXP 48
56038: PUSH
56039: LD_EXP 48
56043: PPUSH
56044: LD_VAR 0 1
56048: PPUSH
56049: EMPTY
56050: PPUSH
56051: CALL_OW 1
56055: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56056: LD_ADDR_EXP 49
56060: PUSH
56061: LD_EXP 49
56065: PPUSH
56066: LD_VAR 0 1
56070: PPUSH
56071: EMPTY
56072: PPUSH
56073: CALL_OW 1
56077: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56078: LD_ADDR_EXP 50
56082: PUSH
56083: LD_EXP 50
56087: PPUSH
56088: LD_VAR 0 1
56092: PPUSH
56093: EMPTY
56094: PPUSH
56095: CALL_OW 1
56099: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56100: LD_ADDR_EXP 51
56104: PUSH
56105: LD_EXP 51
56109: PPUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: EMPTY
56116: PPUSH
56117: CALL_OW 1
56121: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56122: LD_ADDR_EXP 52
56126: PUSH
56127: LD_EXP 52
56131: PPUSH
56132: LD_VAR 0 1
56136: PPUSH
56137: EMPTY
56138: PPUSH
56139: CALL_OW 1
56143: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56144: LD_ADDR_EXP 53
56148: PUSH
56149: LD_EXP 53
56153: PPUSH
56154: LD_VAR 0 1
56158: PPUSH
56159: EMPTY
56160: PPUSH
56161: CALL_OW 1
56165: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56166: LD_ADDR_EXP 54
56170: PUSH
56171: LD_EXP 54
56175: PPUSH
56176: LD_VAR 0 1
56180: PPUSH
56181: EMPTY
56182: PPUSH
56183: CALL_OW 1
56187: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56188: LD_ADDR_EXP 55
56192: PUSH
56193: LD_EXP 55
56197: PPUSH
56198: LD_VAR 0 1
56202: PPUSH
56203: LD_INT 0
56205: PPUSH
56206: CALL_OW 1
56210: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56211: LD_ADDR_EXP 56
56215: PUSH
56216: LD_EXP 56
56220: PPUSH
56221: LD_VAR 0 1
56225: PPUSH
56226: EMPTY
56227: PPUSH
56228: CALL_OW 1
56232: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56233: LD_ADDR_EXP 57
56237: PUSH
56238: LD_EXP 57
56242: PPUSH
56243: LD_VAR 0 1
56247: PPUSH
56248: EMPTY
56249: PPUSH
56250: CALL_OW 1
56254: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56255: LD_ADDR_EXP 58
56259: PUSH
56260: LD_EXP 58
56264: PPUSH
56265: LD_VAR 0 1
56269: PPUSH
56270: EMPTY
56271: PPUSH
56272: CALL_OW 1
56276: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56277: LD_ADDR_EXP 59
56281: PUSH
56282: LD_EXP 59
56286: PPUSH
56287: LD_VAR 0 1
56291: PPUSH
56292: EMPTY
56293: PPUSH
56294: CALL_OW 1
56298: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56299: LD_ADDR_EXP 60
56303: PUSH
56304: LD_EXP 60
56308: PPUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: EMPTY
56315: PPUSH
56316: CALL_OW 1
56320: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56321: LD_ADDR_EXP 61
56325: PUSH
56326: LD_EXP 61
56330: PPUSH
56331: LD_VAR 0 1
56335: PPUSH
56336: EMPTY
56337: PPUSH
56338: CALL_OW 1
56342: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56343: LD_ADDR_EXP 62
56347: PUSH
56348: LD_EXP 62
56352: PPUSH
56353: LD_VAR 0 1
56357: PPUSH
56358: EMPTY
56359: PPUSH
56360: CALL_OW 1
56364: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56365: LD_ADDR_EXP 63
56369: PUSH
56370: LD_EXP 63
56374: PPUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: EMPTY
56381: PPUSH
56382: CALL_OW 1
56386: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56387: LD_ADDR_EXP 64
56391: PUSH
56392: LD_EXP 64
56396: PPUSH
56397: LD_VAR 0 1
56401: PPUSH
56402: EMPTY
56403: PPUSH
56404: CALL_OW 1
56408: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56409: LD_ADDR_EXP 65
56413: PUSH
56414: LD_EXP 65
56418: PPUSH
56419: LD_VAR 0 1
56423: PPUSH
56424: EMPTY
56425: PPUSH
56426: CALL_OW 1
56430: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56431: LD_ADDR_EXP 66
56435: PUSH
56436: LD_EXP 66
56440: PPUSH
56441: LD_VAR 0 1
56445: PPUSH
56446: EMPTY
56447: PPUSH
56448: CALL_OW 1
56452: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56453: LD_ADDR_EXP 67
56457: PUSH
56458: LD_EXP 67
56462: PPUSH
56463: LD_VAR 0 1
56467: PPUSH
56468: EMPTY
56469: PPUSH
56470: CALL_OW 1
56474: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56475: LD_ADDR_EXP 68
56479: PUSH
56480: LD_EXP 68
56484: PPUSH
56485: LD_VAR 0 1
56489: PPUSH
56490: EMPTY
56491: PPUSH
56492: CALL_OW 1
56496: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56497: LD_ADDR_EXP 69
56501: PUSH
56502: LD_EXP 69
56506: PPUSH
56507: LD_VAR 0 1
56511: PPUSH
56512: EMPTY
56513: PPUSH
56514: CALL_OW 1
56518: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56519: LD_ADDR_EXP 71
56523: PUSH
56524: LD_EXP 71
56528: PPUSH
56529: LD_VAR 0 1
56533: PPUSH
56534: EMPTY
56535: PPUSH
56536: CALL_OW 1
56540: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56541: LD_ADDR_EXP 73
56545: PUSH
56546: LD_EXP 73
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: EMPTY
56557: PPUSH
56558: CALL_OW 1
56562: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56563: LD_ADDR_EXP 74
56567: PUSH
56568: LD_EXP 74
56572: PPUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: EMPTY
56579: PPUSH
56580: CALL_OW 1
56584: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56585: LD_ADDR_EXP 75
56589: PUSH
56590: LD_EXP 75
56594: PPUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: EMPTY
56601: PPUSH
56602: CALL_OW 1
56606: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56607: LD_ADDR_EXP 76
56611: PUSH
56612: LD_EXP 76
56616: PPUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: EMPTY
56623: PPUSH
56624: CALL_OW 1
56628: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56629: LD_ADDR_EXP 77
56633: PUSH
56634: LD_EXP 77
56638: PPUSH
56639: LD_VAR 0 1
56643: PPUSH
56644: EMPTY
56645: PPUSH
56646: CALL_OW 1
56650: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56651: LD_ADDR_EXP 78
56655: PUSH
56656: LD_EXP 78
56660: PPUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: EMPTY
56667: PPUSH
56668: CALL_OW 1
56672: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56673: LD_ADDR_EXP 79
56677: PUSH
56678: LD_EXP 79
56682: PPUSH
56683: LD_VAR 0 1
56687: PPUSH
56688: EMPTY
56689: PPUSH
56690: CALL_OW 1
56694: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56695: LD_ADDR_EXP 80
56699: PUSH
56700: LD_EXP 80
56704: PPUSH
56705: LD_VAR 0 1
56709: PPUSH
56710: EMPTY
56711: PPUSH
56712: CALL_OW 1
56716: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56717: LD_ADDR_EXP 81
56721: PUSH
56722: LD_EXP 81
56726: PPUSH
56727: LD_VAR 0 1
56731: PPUSH
56732: EMPTY
56733: PPUSH
56734: CALL_OW 1
56738: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56739: LD_ADDR_EXP 82
56743: PUSH
56744: LD_EXP 82
56748: PPUSH
56749: LD_VAR 0 1
56753: PPUSH
56754: EMPTY
56755: PPUSH
56756: CALL_OW 1
56760: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56761: LD_ADDR_EXP 83
56765: PUSH
56766: LD_EXP 83
56770: PPUSH
56771: LD_VAR 0 1
56775: PPUSH
56776: EMPTY
56777: PPUSH
56778: CALL_OW 1
56782: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56783: LD_ADDR_EXP 84
56787: PUSH
56788: LD_EXP 84
56792: PPUSH
56793: LD_VAR 0 1
56797: PPUSH
56798: EMPTY
56799: PPUSH
56800: CALL_OW 1
56804: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56805: LD_ADDR_EXP 85
56809: PUSH
56810: LD_EXP 85
56814: PPUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: EMPTY
56821: PPUSH
56822: CALL_OW 1
56826: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56827: LD_ADDR_EXP 86
56831: PUSH
56832: LD_EXP 86
56836: PPUSH
56837: LD_VAR 0 1
56841: PPUSH
56842: LD_INT 0
56844: PPUSH
56845: CALL_OW 1
56849: ST_TO_ADDR
// end ;
56850: LD_VAR 0 2
56854: RET
// export function MC_Add ( side , units ) ; var base ; begin
56855: LD_INT 0
56857: PPUSH
56858: PPUSH
// base := mc_bases + 1 ;
56859: LD_ADDR_VAR 0 4
56863: PUSH
56864: LD_EXP 44
56868: PUSH
56869: LD_INT 1
56871: PLUS
56872: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
56873: LD_ADDR_EXP 70
56877: PUSH
56878: LD_EXP 70
56882: PPUSH
56883: LD_VAR 0 4
56887: PPUSH
56888: LD_VAR 0 1
56892: PPUSH
56893: CALL_OW 1
56897: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
56898: LD_ADDR_EXP 44
56902: PUSH
56903: LD_EXP 44
56907: PPUSH
56908: LD_VAR 0 4
56912: PPUSH
56913: LD_VAR 0 2
56917: PPUSH
56918: CALL_OW 1
56922: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56923: LD_ADDR_EXP 45
56927: PUSH
56928: LD_EXP 45
56932: PPUSH
56933: LD_VAR 0 4
56937: PPUSH
56938: EMPTY
56939: PPUSH
56940: CALL_OW 1
56944: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56945: LD_ADDR_EXP 46
56949: PUSH
56950: LD_EXP 46
56954: PPUSH
56955: LD_VAR 0 4
56959: PPUSH
56960: EMPTY
56961: PPUSH
56962: CALL_OW 1
56966: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56967: LD_ADDR_EXP 47
56971: PUSH
56972: LD_EXP 47
56976: PPUSH
56977: LD_VAR 0 4
56981: PPUSH
56982: EMPTY
56983: PPUSH
56984: CALL_OW 1
56988: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56989: LD_ADDR_EXP 48
56993: PUSH
56994: LD_EXP 48
56998: PPUSH
56999: LD_VAR 0 4
57003: PPUSH
57004: EMPTY
57005: PPUSH
57006: CALL_OW 1
57010: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57011: LD_ADDR_EXP 49
57015: PUSH
57016: LD_EXP 49
57020: PPUSH
57021: LD_VAR 0 4
57025: PPUSH
57026: EMPTY
57027: PPUSH
57028: CALL_OW 1
57032: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57033: LD_ADDR_EXP 50
57037: PUSH
57038: LD_EXP 50
57042: PPUSH
57043: LD_VAR 0 4
57047: PPUSH
57048: EMPTY
57049: PPUSH
57050: CALL_OW 1
57054: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57055: LD_ADDR_EXP 51
57059: PUSH
57060: LD_EXP 51
57064: PPUSH
57065: LD_VAR 0 4
57069: PPUSH
57070: EMPTY
57071: PPUSH
57072: CALL_OW 1
57076: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57077: LD_ADDR_EXP 52
57081: PUSH
57082: LD_EXP 52
57086: PPUSH
57087: LD_VAR 0 4
57091: PPUSH
57092: EMPTY
57093: PPUSH
57094: CALL_OW 1
57098: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57099: LD_ADDR_EXP 53
57103: PUSH
57104: LD_EXP 53
57108: PPUSH
57109: LD_VAR 0 4
57113: PPUSH
57114: EMPTY
57115: PPUSH
57116: CALL_OW 1
57120: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57121: LD_ADDR_EXP 54
57125: PUSH
57126: LD_EXP 54
57130: PPUSH
57131: LD_VAR 0 4
57135: PPUSH
57136: EMPTY
57137: PPUSH
57138: CALL_OW 1
57142: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57143: LD_ADDR_EXP 55
57147: PUSH
57148: LD_EXP 55
57152: PPUSH
57153: LD_VAR 0 4
57157: PPUSH
57158: LD_INT 0
57160: PPUSH
57161: CALL_OW 1
57165: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57166: LD_ADDR_EXP 56
57170: PUSH
57171: LD_EXP 56
57175: PPUSH
57176: LD_VAR 0 4
57180: PPUSH
57181: EMPTY
57182: PPUSH
57183: CALL_OW 1
57187: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57188: LD_ADDR_EXP 57
57192: PUSH
57193: LD_EXP 57
57197: PPUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: EMPTY
57204: PPUSH
57205: CALL_OW 1
57209: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57210: LD_ADDR_EXP 58
57214: PUSH
57215: LD_EXP 58
57219: PPUSH
57220: LD_VAR 0 4
57224: PPUSH
57225: EMPTY
57226: PPUSH
57227: CALL_OW 1
57231: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57232: LD_ADDR_EXP 59
57236: PUSH
57237: LD_EXP 59
57241: PPUSH
57242: LD_VAR 0 4
57246: PPUSH
57247: EMPTY
57248: PPUSH
57249: CALL_OW 1
57253: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57254: LD_ADDR_EXP 60
57258: PUSH
57259: LD_EXP 60
57263: PPUSH
57264: LD_VAR 0 4
57268: PPUSH
57269: EMPTY
57270: PPUSH
57271: CALL_OW 1
57275: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57276: LD_ADDR_EXP 61
57280: PUSH
57281: LD_EXP 61
57285: PPUSH
57286: LD_VAR 0 4
57290: PPUSH
57291: EMPTY
57292: PPUSH
57293: CALL_OW 1
57297: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57298: LD_ADDR_EXP 62
57302: PUSH
57303: LD_EXP 62
57307: PPUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: EMPTY
57314: PPUSH
57315: CALL_OW 1
57319: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57320: LD_ADDR_EXP 63
57324: PUSH
57325: LD_EXP 63
57329: PPUSH
57330: LD_VAR 0 4
57334: PPUSH
57335: EMPTY
57336: PPUSH
57337: CALL_OW 1
57341: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57342: LD_ADDR_EXP 64
57346: PUSH
57347: LD_EXP 64
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: EMPTY
57358: PPUSH
57359: CALL_OW 1
57363: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57364: LD_ADDR_EXP 65
57368: PUSH
57369: LD_EXP 65
57373: PPUSH
57374: LD_VAR 0 4
57378: PPUSH
57379: EMPTY
57380: PPUSH
57381: CALL_OW 1
57385: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57386: LD_ADDR_EXP 66
57390: PUSH
57391: LD_EXP 66
57395: PPUSH
57396: LD_VAR 0 4
57400: PPUSH
57401: EMPTY
57402: PPUSH
57403: CALL_OW 1
57407: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57408: LD_ADDR_EXP 67
57412: PUSH
57413: LD_EXP 67
57417: PPUSH
57418: LD_VAR 0 4
57422: PPUSH
57423: EMPTY
57424: PPUSH
57425: CALL_OW 1
57429: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57430: LD_ADDR_EXP 68
57434: PUSH
57435: LD_EXP 68
57439: PPUSH
57440: LD_VAR 0 4
57444: PPUSH
57445: EMPTY
57446: PPUSH
57447: CALL_OW 1
57451: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57452: LD_ADDR_EXP 69
57456: PUSH
57457: LD_EXP 69
57461: PPUSH
57462: LD_VAR 0 4
57466: PPUSH
57467: EMPTY
57468: PPUSH
57469: CALL_OW 1
57473: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57474: LD_ADDR_EXP 71
57478: PUSH
57479: LD_EXP 71
57483: PPUSH
57484: LD_VAR 0 4
57488: PPUSH
57489: EMPTY
57490: PPUSH
57491: CALL_OW 1
57495: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57496: LD_ADDR_EXP 73
57500: PUSH
57501: LD_EXP 73
57505: PPUSH
57506: LD_VAR 0 4
57510: PPUSH
57511: EMPTY
57512: PPUSH
57513: CALL_OW 1
57517: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57518: LD_ADDR_EXP 74
57522: PUSH
57523: LD_EXP 74
57527: PPUSH
57528: LD_VAR 0 4
57532: PPUSH
57533: EMPTY
57534: PPUSH
57535: CALL_OW 1
57539: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57540: LD_ADDR_EXP 75
57544: PUSH
57545: LD_EXP 75
57549: PPUSH
57550: LD_VAR 0 4
57554: PPUSH
57555: EMPTY
57556: PPUSH
57557: CALL_OW 1
57561: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57562: LD_ADDR_EXP 76
57566: PUSH
57567: LD_EXP 76
57571: PPUSH
57572: LD_VAR 0 4
57576: PPUSH
57577: EMPTY
57578: PPUSH
57579: CALL_OW 1
57583: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57584: LD_ADDR_EXP 77
57588: PUSH
57589: LD_EXP 77
57593: PPUSH
57594: LD_VAR 0 4
57598: PPUSH
57599: EMPTY
57600: PPUSH
57601: CALL_OW 1
57605: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57606: LD_ADDR_EXP 78
57610: PUSH
57611: LD_EXP 78
57615: PPUSH
57616: LD_VAR 0 4
57620: PPUSH
57621: EMPTY
57622: PPUSH
57623: CALL_OW 1
57627: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57628: LD_ADDR_EXP 79
57632: PUSH
57633: LD_EXP 79
57637: PPUSH
57638: LD_VAR 0 4
57642: PPUSH
57643: EMPTY
57644: PPUSH
57645: CALL_OW 1
57649: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57650: LD_ADDR_EXP 80
57654: PUSH
57655: LD_EXP 80
57659: PPUSH
57660: LD_VAR 0 4
57664: PPUSH
57665: EMPTY
57666: PPUSH
57667: CALL_OW 1
57671: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57672: LD_ADDR_EXP 81
57676: PUSH
57677: LD_EXP 81
57681: PPUSH
57682: LD_VAR 0 4
57686: PPUSH
57687: EMPTY
57688: PPUSH
57689: CALL_OW 1
57693: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57694: LD_ADDR_EXP 82
57698: PUSH
57699: LD_EXP 82
57703: PPUSH
57704: LD_VAR 0 4
57708: PPUSH
57709: EMPTY
57710: PPUSH
57711: CALL_OW 1
57715: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57716: LD_ADDR_EXP 83
57720: PUSH
57721: LD_EXP 83
57725: PPUSH
57726: LD_VAR 0 4
57730: PPUSH
57731: EMPTY
57732: PPUSH
57733: CALL_OW 1
57737: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57738: LD_ADDR_EXP 84
57742: PUSH
57743: LD_EXP 84
57747: PPUSH
57748: LD_VAR 0 4
57752: PPUSH
57753: EMPTY
57754: PPUSH
57755: CALL_OW 1
57759: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57760: LD_ADDR_EXP 85
57764: PUSH
57765: LD_EXP 85
57769: PPUSH
57770: LD_VAR 0 4
57774: PPUSH
57775: EMPTY
57776: PPUSH
57777: CALL_OW 1
57781: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57782: LD_ADDR_EXP 86
57786: PUSH
57787: LD_EXP 86
57791: PPUSH
57792: LD_VAR 0 4
57796: PPUSH
57797: LD_INT 0
57799: PPUSH
57800: CALL_OW 1
57804: ST_TO_ADDR
// result := base ;
57805: LD_ADDR_VAR 0 3
57809: PUSH
57810: LD_VAR 0 4
57814: ST_TO_ADDR
// end ;
57815: LD_VAR 0 3
57819: RET
// export function MC_Start ( ) ; var i ; begin
57820: LD_INT 0
57822: PPUSH
57823: PPUSH
// for i = 1 to mc_bases do
57824: LD_ADDR_VAR 0 2
57828: PUSH
57829: DOUBLE
57830: LD_INT 1
57832: DEC
57833: ST_TO_ADDR
57834: LD_EXP 44
57838: PUSH
57839: FOR_TO
57840: IFFALSE 58917
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57842: LD_ADDR_EXP 44
57846: PUSH
57847: LD_EXP 44
57851: PPUSH
57852: LD_VAR 0 2
57856: PPUSH
57857: LD_EXP 44
57861: PUSH
57862: LD_VAR 0 2
57866: ARRAY
57867: PUSH
57868: LD_INT 0
57870: DIFF
57871: PPUSH
57872: CALL_OW 1
57876: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
57877: LD_ADDR_EXP 45
57881: PUSH
57882: LD_EXP 45
57886: PPUSH
57887: LD_VAR 0 2
57891: PPUSH
57892: EMPTY
57893: PPUSH
57894: CALL_OW 1
57898: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
57899: LD_ADDR_EXP 46
57903: PUSH
57904: LD_EXP 46
57908: PPUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: EMPTY
57915: PPUSH
57916: CALL_OW 1
57920: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
57921: LD_ADDR_EXP 47
57925: PUSH
57926: LD_EXP 47
57930: PPUSH
57931: LD_VAR 0 2
57935: PPUSH
57936: EMPTY
57937: PPUSH
57938: CALL_OW 1
57942: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
57943: LD_ADDR_EXP 48
57947: PUSH
57948: LD_EXP 48
57952: PPUSH
57953: LD_VAR 0 2
57957: PPUSH
57958: EMPTY
57959: PUSH
57960: EMPTY
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PPUSH
57966: CALL_OW 1
57970: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
57971: LD_ADDR_EXP 49
57975: PUSH
57976: LD_EXP 49
57980: PPUSH
57981: LD_VAR 0 2
57985: PPUSH
57986: EMPTY
57987: PPUSH
57988: CALL_OW 1
57992: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
57993: LD_ADDR_EXP 76
57997: PUSH
57998: LD_EXP 76
58002: PPUSH
58003: LD_VAR 0 2
58007: PPUSH
58008: EMPTY
58009: PPUSH
58010: CALL_OW 1
58014: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58015: LD_ADDR_EXP 50
58019: PUSH
58020: LD_EXP 50
58024: PPUSH
58025: LD_VAR 0 2
58029: PPUSH
58030: EMPTY
58031: PPUSH
58032: CALL_OW 1
58036: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58037: LD_ADDR_EXP 51
58041: PUSH
58042: LD_EXP 51
58046: PPUSH
58047: LD_VAR 0 2
58051: PPUSH
58052: EMPTY
58053: PPUSH
58054: CALL_OW 1
58058: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58059: LD_ADDR_EXP 52
58063: PUSH
58064: LD_EXP 52
58068: PPUSH
58069: LD_VAR 0 2
58073: PPUSH
58074: LD_EXP 44
58078: PUSH
58079: LD_VAR 0 2
58083: ARRAY
58084: PPUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 30
58090: PUSH
58091: LD_INT 32
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 30
58100: PUSH
58101: LD_INT 33
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: PPUSH
58113: CALL_OW 72
58117: PPUSH
58118: CALL_OW 1
58122: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58123: LD_ADDR_EXP 53
58127: PUSH
58128: LD_EXP 53
58132: PPUSH
58133: LD_VAR 0 2
58137: PPUSH
58138: LD_EXP 44
58142: PUSH
58143: LD_VAR 0 2
58147: ARRAY
58148: PPUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 30
58154: PUSH
58155: LD_INT 32
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 30
58164: PUSH
58165: LD_INT 31
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 58
58179: PUSH
58180: EMPTY
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PPUSH
58187: CALL_OW 72
58191: PPUSH
58192: CALL_OW 1
58196: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58197: LD_ADDR_EXP 54
58201: PUSH
58202: LD_EXP 54
58206: PPUSH
58207: LD_VAR 0 2
58211: PPUSH
58212: EMPTY
58213: PPUSH
58214: CALL_OW 1
58218: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58219: LD_ADDR_EXP 58
58223: PUSH
58224: LD_EXP 58
58228: PPUSH
58229: LD_VAR 0 2
58233: PPUSH
58234: EMPTY
58235: PPUSH
58236: CALL_OW 1
58240: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58241: LD_ADDR_EXP 57
58245: PUSH
58246: LD_EXP 57
58250: PPUSH
58251: LD_VAR 0 2
58255: PPUSH
58256: EMPTY
58257: PPUSH
58258: CALL_OW 1
58262: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58263: LD_ADDR_EXP 59
58267: PUSH
58268: LD_EXP 59
58272: PPUSH
58273: LD_VAR 0 2
58277: PPUSH
58278: EMPTY
58279: PPUSH
58280: CALL_OW 1
58284: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58285: LD_ADDR_EXP 60
58289: PUSH
58290: LD_EXP 60
58294: PPUSH
58295: LD_VAR 0 2
58299: PPUSH
58300: EMPTY
58301: PPUSH
58302: CALL_OW 1
58306: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58307: LD_ADDR_EXP 61
58311: PUSH
58312: LD_EXP 61
58316: PPUSH
58317: LD_VAR 0 2
58321: PPUSH
58322: EMPTY
58323: PPUSH
58324: CALL_OW 1
58328: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58329: LD_ADDR_EXP 62
58333: PUSH
58334: LD_EXP 62
58338: PPUSH
58339: LD_VAR 0 2
58343: PPUSH
58344: EMPTY
58345: PPUSH
58346: CALL_OW 1
58350: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58351: LD_ADDR_EXP 63
58355: PUSH
58356: LD_EXP 63
58360: PPUSH
58361: LD_VAR 0 2
58365: PPUSH
58366: EMPTY
58367: PPUSH
58368: CALL_OW 1
58372: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58373: LD_ADDR_EXP 64
58377: PUSH
58378: LD_EXP 64
58382: PPUSH
58383: LD_VAR 0 2
58387: PPUSH
58388: EMPTY
58389: PPUSH
58390: CALL_OW 1
58394: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58395: LD_ADDR_EXP 65
58399: PUSH
58400: LD_EXP 65
58404: PPUSH
58405: LD_VAR 0 2
58409: PPUSH
58410: EMPTY
58411: PPUSH
58412: CALL_OW 1
58416: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58417: LD_ADDR_EXP 66
58421: PUSH
58422: LD_EXP 66
58426: PPUSH
58427: LD_VAR 0 2
58431: PPUSH
58432: EMPTY
58433: PPUSH
58434: CALL_OW 1
58438: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58439: LD_ADDR_EXP 55
58443: PUSH
58444: LD_EXP 55
58448: PPUSH
58449: LD_VAR 0 2
58453: PPUSH
58454: LD_INT 0
58456: PPUSH
58457: CALL_OW 1
58461: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58462: LD_ADDR_EXP 68
58466: PUSH
58467: LD_EXP 68
58471: PPUSH
58472: LD_VAR 0 2
58476: PPUSH
58477: LD_INT 0
58479: PPUSH
58480: CALL_OW 1
58484: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58485: LD_ADDR_EXP 56
58489: PUSH
58490: LD_EXP 56
58494: PPUSH
58495: LD_VAR 0 2
58499: PPUSH
58500: EMPTY
58501: PPUSH
58502: CALL_OW 1
58506: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58507: LD_ADDR_EXP 67
58511: PUSH
58512: LD_EXP 67
58516: PPUSH
58517: LD_VAR 0 2
58521: PPUSH
58522: LD_INT 0
58524: PPUSH
58525: CALL_OW 1
58529: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58530: LD_ADDR_EXP 69
58534: PUSH
58535: LD_EXP 69
58539: PPUSH
58540: LD_VAR 0 2
58544: PPUSH
58545: EMPTY
58546: PPUSH
58547: CALL_OW 1
58551: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58552: LD_ADDR_EXP 72
58556: PUSH
58557: LD_EXP 72
58561: PPUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: LD_INT 0
58569: PPUSH
58570: CALL_OW 1
58574: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58575: LD_ADDR_EXP 73
58579: PUSH
58580: LD_EXP 73
58584: PPUSH
58585: LD_VAR 0 2
58589: PPUSH
58590: EMPTY
58591: PPUSH
58592: CALL_OW 1
58596: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58597: LD_ADDR_EXP 74
58601: PUSH
58602: LD_EXP 74
58606: PPUSH
58607: LD_VAR 0 2
58611: PPUSH
58612: EMPTY
58613: PPUSH
58614: CALL_OW 1
58618: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58619: LD_ADDR_EXP 75
58623: PUSH
58624: LD_EXP 75
58628: PPUSH
58629: LD_VAR 0 2
58633: PPUSH
58634: EMPTY
58635: PPUSH
58636: CALL_OW 1
58640: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58641: LD_ADDR_EXP 77
58645: PUSH
58646: LD_EXP 77
58650: PPUSH
58651: LD_VAR 0 2
58655: PPUSH
58656: LD_EXP 44
58660: PUSH
58661: LD_VAR 0 2
58665: ARRAY
58666: PPUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 30
58672: PUSH
58673: LD_INT 6
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 30
58682: PUSH
58683: LD_INT 7
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 30
58692: PUSH
58693: LD_INT 8
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: PPUSH
58706: CALL_OW 72
58710: PPUSH
58711: CALL_OW 1
58715: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58716: LD_ADDR_EXP 78
58720: PUSH
58721: LD_EXP 78
58725: PPUSH
58726: LD_VAR 0 2
58730: PPUSH
58731: EMPTY
58732: PPUSH
58733: CALL_OW 1
58737: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58738: LD_ADDR_EXP 79
58742: PUSH
58743: LD_EXP 79
58747: PPUSH
58748: LD_VAR 0 2
58752: PPUSH
58753: EMPTY
58754: PPUSH
58755: CALL_OW 1
58759: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58760: LD_ADDR_EXP 80
58764: PUSH
58765: LD_EXP 80
58769: PPUSH
58770: LD_VAR 0 2
58774: PPUSH
58775: EMPTY
58776: PPUSH
58777: CALL_OW 1
58781: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58782: LD_ADDR_EXP 81
58786: PUSH
58787: LD_EXP 81
58791: PPUSH
58792: LD_VAR 0 2
58796: PPUSH
58797: EMPTY
58798: PPUSH
58799: CALL_OW 1
58803: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58804: LD_ADDR_EXP 82
58808: PUSH
58809: LD_EXP 82
58813: PPUSH
58814: LD_VAR 0 2
58818: PPUSH
58819: EMPTY
58820: PPUSH
58821: CALL_OW 1
58825: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58826: LD_ADDR_EXP 83
58830: PUSH
58831: LD_EXP 83
58835: PPUSH
58836: LD_VAR 0 2
58840: PPUSH
58841: EMPTY
58842: PPUSH
58843: CALL_OW 1
58847: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58848: LD_ADDR_EXP 84
58852: PUSH
58853: LD_EXP 84
58857: PPUSH
58858: LD_VAR 0 2
58862: PPUSH
58863: EMPTY
58864: PPUSH
58865: CALL_OW 1
58869: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
58870: LD_ADDR_EXP 85
58874: PUSH
58875: LD_EXP 85
58879: PPUSH
58880: LD_VAR 0 2
58884: PPUSH
58885: EMPTY
58886: PPUSH
58887: CALL_OW 1
58891: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
58892: LD_ADDR_EXP 86
58896: PUSH
58897: LD_EXP 86
58901: PPUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_INT 0
58909: PPUSH
58910: CALL_OW 1
58914: ST_TO_ADDR
// end ;
58915: GO 57839
58917: POP
58918: POP
// MC_InitSides ( ) ;
58919: CALL 59205 0 0
// MC_InitResearch ( ) ;
58923: CALL 58944 0 0
// CustomInitMacro ( ) ;
58927: CALL 1407 0 0
// skirmish := true ;
58931: LD_ADDR_EXP 42
58935: PUSH
58936: LD_INT 1
58938: ST_TO_ADDR
// end ;
58939: LD_VAR 0 1
58943: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
58944: LD_INT 0
58946: PPUSH
58947: PPUSH
58948: PPUSH
58949: PPUSH
58950: PPUSH
58951: PPUSH
// if not mc_bases then
58952: LD_EXP 44
58956: NOT
58957: IFFALSE 58961
// exit ;
58959: GO 59200
// for i = 1 to 8 do
58961: LD_ADDR_VAR 0 2
58965: PUSH
58966: DOUBLE
58967: LD_INT 1
58969: DEC
58970: ST_TO_ADDR
58971: LD_INT 8
58973: PUSH
58974: FOR_TO
58975: IFFALSE 59001
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
58977: LD_ADDR_EXP 71
58981: PUSH
58982: LD_EXP 71
58986: PPUSH
58987: LD_VAR 0 2
58991: PPUSH
58992: EMPTY
58993: PPUSH
58994: CALL_OW 1
58998: ST_TO_ADDR
58999: GO 58974
59001: POP
59002: POP
// tmp := [ ] ;
59003: LD_ADDR_VAR 0 5
59007: PUSH
59008: EMPTY
59009: ST_TO_ADDR
// for i = 1 to mc_sides do
59010: LD_ADDR_VAR 0 2
59014: PUSH
59015: DOUBLE
59016: LD_INT 1
59018: DEC
59019: ST_TO_ADDR
59020: LD_EXP 70
59024: PUSH
59025: FOR_TO
59026: IFFALSE 59084
// if not mc_sides [ i ] in tmp then
59028: LD_EXP 70
59032: PUSH
59033: LD_VAR 0 2
59037: ARRAY
59038: PUSH
59039: LD_VAR 0 5
59043: IN
59044: NOT
59045: IFFALSE 59082
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59047: LD_ADDR_VAR 0 5
59051: PUSH
59052: LD_VAR 0 5
59056: PPUSH
59057: LD_VAR 0 5
59061: PUSH
59062: LD_INT 1
59064: PLUS
59065: PPUSH
59066: LD_EXP 70
59070: PUSH
59071: LD_VAR 0 2
59075: ARRAY
59076: PPUSH
59077: CALL_OW 2
59081: ST_TO_ADDR
59082: GO 59025
59084: POP
59085: POP
// if not tmp then
59086: LD_VAR 0 5
59090: NOT
59091: IFFALSE 59095
// exit ;
59093: GO 59200
// for j in tmp do
59095: LD_ADDR_VAR 0 3
59099: PUSH
59100: LD_VAR 0 5
59104: PUSH
59105: FOR_IN
59106: IFFALSE 59198
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59108: LD_ADDR_VAR 0 6
59112: PUSH
59113: LD_INT 22
59115: PUSH
59116: LD_VAR 0 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PPUSH
59125: CALL_OW 69
59129: ST_TO_ADDR
// if not un then
59130: LD_VAR 0 6
59134: NOT
59135: IFFALSE 59139
// continue ;
59137: GO 59105
// nation := GetNation ( un [ 1 ] ) ;
59139: LD_ADDR_VAR 0 4
59143: PUSH
59144: LD_VAR 0 6
59148: PUSH
59149: LD_INT 1
59151: ARRAY
59152: PPUSH
59153: CALL_OW 248
59157: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59158: LD_ADDR_EXP 71
59162: PUSH
59163: LD_EXP 71
59167: PPUSH
59168: LD_VAR 0 3
59172: PPUSH
59173: LD_VAR 0 3
59177: PPUSH
59178: LD_VAR 0 4
59182: PPUSH
59183: LD_INT 1
59185: PPUSH
59186: CALL 19418 0 3
59190: PPUSH
59191: CALL_OW 1
59195: ST_TO_ADDR
// end ;
59196: GO 59105
59198: POP
59199: POP
// end ;
59200: LD_VAR 0 1
59204: RET
// export function MC_InitSides ( ) ; var i ; begin
59205: LD_INT 0
59207: PPUSH
59208: PPUSH
// if not mc_bases then
59209: LD_EXP 44
59213: NOT
59214: IFFALSE 59218
// exit ;
59216: GO 59292
// for i = 1 to mc_bases do
59218: LD_ADDR_VAR 0 2
59222: PUSH
59223: DOUBLE
59224: LD_INT 1
59226: DEC
59227: ST_TO_ADDR
59228: LD_EXP 44
59232: PUSH
59233: FOR_TO
59234: IFFALSE 59290
// if mc_bases [ i ] then
59236: LD_EXP 44
59240: PUSH
59241: LD_VAR 0 2
59245: ARRAY
59246: IFFALSE 59288
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59248: LD_ADDR_EXP 70
59252: PUSH
59253: LD_EXP 70
59257: PPUSH
59258: LD_VAR 0 2
59262: PPUSH
59263: LD_EXP 44
59267: PUSH
59268: LD_VAR 0 2
59272: ARRAY
59273: PUSH
59274: LD_INT 1
59276: ARRAY
59277: PPUSH
59278: CALL_OW 255
59282: PPUSH
59283: CALL_OW 1
59287: ST_TO_ADDR
59288: GO 59233
59290: POP
59291: POP
// end ;
59292: LD_VAR 0 1
59296: RET
// every 0 0$01 trigger skirmish do
59297: LD_EXP 42
59301: IFFALSE 59455
59303: GO 59305
59305: DISABLE
// begin enable ;
59306: ENABLE
// MC_CheckBuildings ( ) ;
59307: CALL 63953 0 0
// MC_CheckPeopleLife ( ) ;
59311: CALL 64078 0 0
// RaiseSailEvent ( 100 ) ;
59315: LD_INT 100
59317: PPUSH
59318: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59322: LD_INT 103
59324: PPUSH
59325: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59329: LD_INT 104
59331: PPUSH
59332: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59336: LD_INT 105
59338: PPUSH
59339: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59343: LD_INT 106
59345: PPUSH
59346: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59350: LD_INT 107
59352: PPUSH
59353: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59357: LD_INT 108
59359: PPUSH
59360: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59364: LD_INT 109
59366: PPUSH
59367: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59371: LD_INT 110
59373: PPUSH
59374: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59378: LD_INT 111
59380: PPUSH
59381: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59385: LD_INT 112
59387: PPUSH
59388: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59392: LD_INT 113
59394: PPUSH
59395: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59399: LD_INT 120
59401: PPUSH
59402: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59406: LD_INT 121
59408: PPUSH
59409: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59413: LD_INT 122
59415: PPUSH
59416: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59420: LD_INT 123
59422: PPUSH
59423: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59427: LD_INT 124
59429: PPUSH
59430: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59434: LD_INT 125
59436: PPUSH
59437: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59441: LD_INT 126
59443: PPUSH
59444: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59448: LD_INT 200
59450: PPUSH
59451: CALL_OW 427
// end ;
59455: END
// on SailEvent ( event ) do begin if event < 100 then
59456: LD_VAR 0 1
59460: PUSH
59461: LD_INT 100
59463: LESS
59464: IFFALSE 59475
// CustomEvent ( event ) ;
59466: LD_VAR 0 1
59470: PPUSH
59471: CALL 18596 0 1
// if event = 100 then
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 100
59482: EQUAL
59483: IFFALSE 59489
// MC_ClassManager ( ) ;
59485: CALL 59881 0 0
// if event = 101 then
59489: LD_VAR 0 1
59493: PUSH
59494: LD_INT 101
59496: EQUAL
59497: IFFALSE 59503
// MC_RepairBuildings ( ) ;
59499: CALL 64663 0 0
// if event = 102 then
59503: LD_VAR 0 1
59507: PUSH
59508: LD_INT 102
59510: EQUAL
59511: IFFALSE 59517
// MC_Heal ( ) ;
59513: CALL 65522 0 0
// if event = 103 then
59517: LD_VAR 0 1
59521: PUSH
59522: LD_INT 103
59524: EQUAL
59525: IFFALSE 59531
// MC_Build ( ) ;
59527: CALL 65944 0 0
// if event = 104 then
59531: LD_VAR 0 1
59535: PUSH
59536: LD_INT 104
59538: EQUAL
59539: IFFALSE 59545
// MC_TurretWeapon ( ) ;
59541: CALL 67557 0 0
// if event = 105 then
59545: LD_VAR 0 1
59549: PUSH
59550: LD_INT 105
59552: EQUAL
59553: IFFALSE 59559
// MC_BuildUpgrade ( ) ;
59555: CALL 67108 0 0
// if event = 106 then
59559: LD_VAR 0 1
59563: PUSH
59564: LD_INT 106
59566: EQUAL
59567: IFFALSE 59573
// MC_PlantMines ( ) ;
59569: CALL 67987 0 0
// if event = 107 then
59573: LD_VAR 0 1
59577: PUSH
59578: LD_INT 107
59580: EQUAL
59581: IFFALSE 59587
// MC_CollectCrates ( ) ;
59583: CALL 68785 0 0
// if event = 108 then
59587: LD_VAR 0 1
59591: PUSH
59592: LD_INT 108
59594: EQUAL
59595: IFFALSE 59601
// MC_LinkRemoteControl ( ) ;
59597: CALL 70561 0 0
// if event = 109 then
59601: LD_VAR 0 1
59605: PUSH
59606: LD_INT 109
59608: EQUAL
59609: IFFALSE 59615
// MC_ProduceVehicle ( ) ;
59611: CALL 70742 0 0
// if event = 110 then
59615: LD_VAR 0 1
59619: PUSH
59620: LD_INT 110
59622: EQUAL
59623: IFFALSE 59629
// MC_SendAttack ( ) ;
59625: CALL 71208 0 0
// if event = 111 then
59629: LD_VAR 0 1
59633: PUSH
59634: LD_INT 111
59636: EQUAL
59637: IFFALSE 59643
// MC_Defend ( ) ;
59639: CALL 71316 0 0
// if event = 112 then
59643: LD_VAR 0 1
59647: PUSH
59648: LD_INT 112
59650: EQUAL
59651: IFFALSE 59657
// MC_Research ( ) ;
59653: CALL 71921 0 0
// if event = 113 then
59657: LD_VAR 0 1
59661: PUSH
59662: LD_INT 113
59664: EQUAL
59665: IFFALSE 59671
// MC_MinesTrigger ( ) ;
59667: CALL 73035 0 0
// if event = 120 then
59671: LD_VAR 0 1
59675: PUSH
59676: LD_INT 120
59678: EQUAL
59679: IFFALSE 59685
// MC_RepairVehicle ( ) ;
59681: CALL 73134 0 0
// if event = 121 then
59685: LD_VAR 0 1
59689: PUSH
59690: LD_INT 121
59692: EQUAL
59693: IFFALSE 59699
// MC_TameApe ( ) ;
59695: CALL 73864 0 0
// if event = 122 then
59699: LD_VAR 0 1
59703: PUSH
59704: LD_INT 122
59706: EQUAL
59707: IFFALSE 59713
// MC_ChangeApeClass ( ) ;
59709: CALL 74693 0 0
// if event = 123 then
59713: LD_VAR 0 1
59717: PUSH
59718: LD_INT 123
59720: EQUAL
59721: IFFALSE 59727
// MC_Bazooka ( ) ;
59723: CALL 75343 0 0
// if event = 124 then
59727: LD_VAR 0 1
59731: PUSH
59732: LD_INT 124
59734: EQUAL
59735: IFFALSE 59741
// MC_TeleportExit ( ) ;
59737: CALL 75541 0 0
// if event = 125 then
59741: LD_VAR 0 1
59745: PUSH
59746: LD_INT 125
59748: EQUAL
59749: IFFALSE 59755
// MC_Deposits ( ) ;
59751: CALL 76188 0 0
// if event = 126 then
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 126
59762: EQUAL
59763: IFFALSE 59769
// MC_RemoteDriver ( ) ;
59765: CALL 76813 0 0
// if event = 200 then
59769: LD_VAR 0 1
59773: PUSH
59774: LD_INT 200
59776: EQUAL
59777: IFFALSE 59783
// MC_Idle ( ) ;
59779: CALL 78762 0 0
// end ;
59783: PPOPN 1
59785: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59786: LD_INT 0
59788: PPUSH
59789: PPUSH
// if not mc_bases [ base ] or not tag then
59790: LD_EXP 44
59794: PUSH
59795: LD_VAR 0 1
59799: ARRAY
59800: NOT
59801: PUSH
59802: LD_VAR 0 2
59806: NOT
59807: OR
59808: IFFALSE 59812
// exit ;
59810: GO 59876
// for i in mc_bases [ base ] union mc_ape [ base ] do
59812: LD_ADDR_VAR 0 4
59816: PUSH
59817: LD_EXP 44
59821: PUSH
59822: LD_VAR 0 1
59826: ARRAY
59827: PUSH
59828: LD_EXP 73
59832: PUSH
59833: LD_VAR 0 1
59837: ARRAY
59838: UNION
59839: PUSH
59840: FOR_IN
59841: IFFALSE 59874
// if GetTag ( i ) = tag then
59843: LD_VAR 0 4
59847: PPUSH
59848: CALL_OW 110
59852: PUSH
59853: LD_VAR 0 2
59857: EQUAL
59858: IFFALSE 59872
// SetTag ( i , 0 ) ;
59860: LD_VAR 0 4
59864: PPUSH
59865: LD_INT 0
59867: PPUSH
59868: CALL_OW 109
59872: GO 59840
59874: POP
59875: POP
// end ;
59876: LD_VAR 0 3
59880: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
59881: LD_INT 0
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
59888: PPUSH
59889: PPUSH
59890: PPUSH
// if not mc_bases then
59891: LD_EXP 44
59895: NOT
59896: IFFALSE 59900
// exit ;
59898: GO 60358
// for i = 1 to mc_bases do
59900: LD_ADDR_VAR 0 2
59904: PUSH
59905: DOUBLE
59906: LD_INT 1
59908: DEC
59909: ST_TO_ADDR
59910: LD_EXP 44
59914: PUSH
59915: FOR_TO
59916: IFFALSE 60356
// begin tmp := MC_ClassCheckReq ( i ) ;
59918: LD_ADDR_VAR 0 4
59922: PUSH
59923: LD_VAR 0 2
59927: PPUSH
59928: CALL 60363 0 1
59932: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
59933: LD_ADDR_EXP 85
59937: PUSH
59938: LD_EXP 85
59942: PPUSH
59943: LD_VAR 0 2
59947: PPUSH
59948: LD_VAR 0 4
59952: PPUSH
59953: CALL_OW 1
59957: ST_TO_ADDR
// if not tmp then
59958: LD_VAR 0 4
59962: NOT
59963: IFFALSE 59967
// continue ;
59965: GO 59915
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
59967: LD_ADDR_VAR 0 6
59971: PUSH
59972: LD_EXP 44
59976: PUSH
59977: LD_VAR 0 2
59981: ARRAY
59982: PPUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 30
59988: PUSH
59989: LD_INT 4
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 30
59998: PUSH
59999: LD_INT 5
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: PPUSH
60011: CALL_OW 72
60015: PUSH
60016: LD_EXP 44
60020: PUSH
60021: LD_VAR 0 2
60025: ARRAY
60026: PPUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 30
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 30
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: PPUSH
60055: CALL_OW 72
60059: PUSH
60060: LD_EXP 44
60064: PUSH
60065: LD_VAR 0 2
60069: ARRAY
60070: PPUSH
60071: LD_INT 30
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PPUSH
60081: CALL_OW 72
60085: PUSH
60086: LD_EXP 44
60090: PUSH
60091: LD_VAR 0 2
60095: ARRAY
60096: PPUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 30
60102: PUSH
60103: LD_INT 6
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 30
60112: PUSH
60113: LD_INT 7
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 30
60122: PUSH
60123: LD_INT 8
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: PPUSH
60136: CALL_OW 72
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// for j = 1 to 4 do
60147: LD_ADDR_VAR 0 3
60151: PUSH
60152: DOUBLE
60153: LD_INT 1
60155: DEC
60156: ST_TO_ADDR
60157: LD_INT 4
60159: PUSH
60160: FOR_TO
60161: IFFALSE 60352
// begin if not tmp [ j ] then
60163: LD_VAR 0 4
60167: PUSH
60168: LD_VAR 0 3
60172: ARRAY
60173: NOT
60174: IFFALSE 60178
// continue ;
60176: GO 60160
// for p in tmp [ j ] do
60178: LD_ADDR_VAR 0 5
60182: PUSH
60183: LD_VAR 0 4
60187: PUSH
60188: LD_VAR 0 3
60192: ARRAY
60193: PUSH
60194: FOR_IN
60195: IFFALSE 60348
// begin if not b [ j ] then
60197: LD_VAR 0 6
60201: PUSH
60202: LD_VAR 0 3
60206: ARRAY
60207: NOT
60208: IFFALSE 60212
// break ;
60210: GO 60348
// e := 0 ;
60212: LD_ADDR_VAR 0 7
60216: PUSH
60217: LD_INT 0
60219: ST_TO_ADDR
// for k in b [ j ] do
60220: LD_ADDR_VAR 0 8
60224: PUSH
60225: LD_VAR 0 6
60229: PUSH
60230: LD_VAR 0 3
60234: ARRAY
60235: PUSH
60236: FOR_IN
60237: IFFALSE 60264
// if IsNotFull ( k ) then
60239: LD_VAR 0 8
60243: PPUSH
60244: CALL 21567 0 1
60248: IFFALSE 60262
// begin e := k ;
60250: LD_ADDR_VAR 0 7
60254: PUSH
60255: LD_VAR 0 8
60259: ST_TO_ADDR
// break ;
60260: GO 60264
// end ;
60262: GO 60236
60264: POP
60265: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60266: LD_VAR 0 7
60270: PUSH
60271: LD_VAR 0 5
60275: PPUSH
60276: LD_VAR 0 7
60280: PPUSH
60281: CALL 53987 0 2
60285: NOT
60286: AND
60287: IFFALSE 60346
// begin if IsInUnit ( p ) then
60289: LD_VAR 0 5
60293: PPUSH
60294: CALL_OW 310
60298: IFFALSE 60309
// ComExitBuilding ( p ) ;
60300: LD_VAR 0 5
60304: PPUSH
60305: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60309: LD_VAR 0 5
60313: PPUSH
60314: LD_VAR 0 7
60318: PPUSH
60319: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60323: LD_VAR 0 5
60327: PPUSH
60328: LD_VAR 0 3
60332: PPUSH
60333: CALL_OW 183
// AddComExitBuilding ( p ) ;
60337: LD_VAR 0 5
60341: PPUSH
60342: CALL_OW 182
// end ; end ;
60346: GO 60194
60348: POP
60349: POP
// end ;
60350: GO 60160
60352: POP
60353: POP
// end ;
60354: GO 59915
60356: POP
60357: POP
// end ;
60358: LD_VAR 0 1
60362: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60363: LD_INT 0
60365: PPUSH
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
60376: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60377: LD_VAR 0 1
60381: NOT
60382: PUSH
60383: LD_EXP 44
60387: PUSH
60388: LD_VAR 0 1
60392: ARRAY
60393: NOT
60394: OR
60395: PUSH
60396: LD_EXP 44
60400: PUSH
60401: LD_VAR 0 1
60405: ARRAY
60406: PPUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 30
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 30
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: PPUSH
60435: CALL_OW 72
60439: NOT
60440: OR
60441: IFFALSE 60445
// exit ;
60443: GO 63948
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60445: LD_ADDR_VAR 0 4
60449: PUSH
60450: LD_EXP 44
60454: PUSH
60455: LD_VAR 0 1
60459: ARRAY
60460: PPUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 25
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 25
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 25
60486: PUSH
60487: LD_INT 3
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 25
60496: PUSH
60497: LD_INT 4
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 25
60506: PUSH
60507: LD_INT 5
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 25
60516: PUSH
60517: LD_INT 8
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 25
60526: PUSH
60527: LD_INT 9
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: PPUSH
60544: CALL_OW 72
60548: ST_TO_ADDR
// if not tmp then
60549: LD_VAR 0 4
60553: NOT
60554: IFFALSE 60558
// exit ;
60556: GO 63948
// for i in tmp do
60558: LD_ADDR_VAR 0 3
60562: PUSH
60563: LD_VAR 0 4
60567: PUSH
60568: FOR_IN
60569: IFFALSE 60600
// if GetTag ( i ) then
60571: LD_VAR 0 3
60575: PPUSH
60576: CALL_OW 110
60580: IFFALSE 60598
// tmp := tmp diff i ;
60582: LD_ADDR_VAR 0 4
60586: PUSH
60587: LD_VAR 0 4
60591: PUSH
60592: LD_VAR 0 3
60596: DIFF
60597: ST_TO_ADDR
60598: GO 60568
60600: POP
60601: POP
// if not tmp then
60602: LD_VAR 0 4
60606: NOT
60607: IFFALSE 60611
// exit ;
60609: GO 63948
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60611: LD_ADDR_VAR 0 5
60615: PUSH
60616: LD_EXP 44
60620: PUSH
60621: LD_VAR 0 1
60625: ARRAY
60626: PPUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 25
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 25
60642: PUSH
60643: LD_INT 5
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 25
60652: PUSH
60653: LD_INT 8
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 25
60662: PUSH
60663: LD_INT 9
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: PPUSH
60677: CALL_OW 72
60681: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60682: LD_ADDR_VAR 0 6
60686: PUSH
60687: LD_EXP 44
60691: PUSH
60692: LD_VAR 0 1
60696: ARRAY
60697: PPUSH
60698: LD_INT 25
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PPUSH
60708: CALL_OW 72
60712: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60713: LD_ADDR_VAR 0 7
60717: PUSH
60718: LD_EXP 44
60722: PUSH
60723: LD_VAR 0 1
60727: ARRAY
60728: PPUSH
60729: LD_INT 25
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PPUSH
60739: CALL_OW 72
60743: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60744: LD_ADDR_VAR 0 8
60748: PUSH
60749: LD_EXP 44
60753: PUSH
60754: LD_VAR 0 1
60758: ARRAY
60759: PPUSH
60760: LD_INT 25
60762: PUSH
60763: LD_INT 4
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 24
60772: PUSH
60773: LD_INT 251
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PPUSH
60784: CALL_OW 72
60788: ST_TO_ADDR
// if mc_scan [ base ] then
60789: LD_EXP 67
60793: PUSH
60794: LD_VAR 0 1
60798: ARRAY
60799: IFFALSE 61260
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60801: LD_ADDR_EXP 86
60805: PUSH
60806: LD_EXP 86
60810: PPUSH
60811: LD_VAR 0 1
60815: PPUSH
60816: LD_INT 4
60818: PPUSH
60819: CALL_OW 1
60823: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60824: LD_ADDR_VAR 0 12
60828: PUSH
60829: LD_EXP 44
60833: PUSH
60834: LD_VAR 0 1
60838: ARRAY
60839: PPUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 30
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 30
60855: PUSH
60856: LD_INT 5
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: PPUSH
60868: CALL_OW 72
60872: ST_TO_ADDR
// if not b then
60873: LD_VAR 0 12
60877: NOT
60878: IFFALSE 60882
// exit ;
60880: GO 63948
// p := [ ] ;
60882: LD_ADDR_VAR 0 11
60886: PUSH
60887: EMPTY
60888: ST_TO_ADDR
// if sci >= 2 then
60889: LD_VAR 0 8
60893: PUSH
60894: LD_INT 2
60896: GREATEREQUAL
60897: IFFALSE 60928
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
60899: LD_ADDR_VAR 0 8
60903: PUSH
60904: LD_VAR 0 8
60908: PUSH
60909: LD_INT 1
60911: ARRAY
60912: PUSH
60913: LD_VAR 0 8
60917: PUSH
60918: LD_INT 2
60920: ARRAY
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: ST_TO_ADDR
60926: GO 60989
// if sci = 1 then
60928: LD_VAR 0 8
60932: PUSH
60933: LD_INT 1
60935: EQUAL
60936: IFFALSE 60957
// sci := [ sci [ 1 ] ] else
60938: LD_ADDR_VAR 0 8
60942: PUSH
60943: LD_VAR 0 8
60947: PUSH
60948: LD_INT 1
60950: ARRAY
60951: PUSH
60952: EMPTY
60953: LIST
60954: ST_TO_ADDR
60955: GO 60989
// if sci = 0 then
60957: LD_VAR 0 8
60961: PUSH
60962: LD_INT 0
60964: EQUAL
60965: IFFALSE 60989
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
60967: LD_ADDR_VAR 0 11
60971: PUSH
60972: LD_VAR 0 4
60976: PPUSH
60977: LD_INT 4
60979: PPUSH
60980: CALL 53850 0 2
60984: PUSH
60985: LD_INT 1
60987: ARRAY
60988: ST_TO_ADDR
// if eng > 4 then
60989: LD_VAR 0 6
60993: PUSH
60994: LD_INT 4
60996: GREATER
60997: IFFALSE 61043
// for i = eng downto 4 do
60999: LD_ADDR_VAR 0 3
61003: PUSH
61004: DOUBLE
61005: LD_VAR 0 6
61009: INC
61010: ST_TO_ADDR
61011: LD_INT 4
61013: PUSH
61014: FOR_DOWNTO
61015: IFFALSE 61041
// eng := eng diff eng [ i ] ;
61017: LD_ADDR_VAR 0 6
61021: PUSH
61022: LD_VAR 0 6
61026: PUSH
61027: LD_VAR 0 6
61031: PUSH
61032: LD_VAR 0 3
61036: ARRAY
61037: DIFF
61038: ST_TO_ADDR
61039: GO 61014
61041: POP
61042: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61043: LD_ADDR_VAR 0 4
61047: PUSH
61048: LD_VAR 0 4
61052: PUSH
61053: LD_VAR 0 5
61057: PUSH
61058: LD_VAR 0 6
61062: UNION
61063: PUSH
61064: LD_VAR 0 7
61068: UNION
61069: PUSH
61070: LD_VAR 0 8
61074: UNION
61075: DIFF
61076: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61077: LD_ADDR_VAR 0 13
61081: PUSH
61082: LD_EXP 44
61086: PUSH
61087: LD_VAR 0 1
61091: ARRAY
61092: PPUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 30
61098: PUSH
61099: LD_INT 32
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 30
61108: PUSH
61109: LD_INT 31
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: PPUSH
61121: CALL_OW 72
61125: PUSH
61126: LD_EXP 44
61130: PUSH
61131: LD_VAR 0 1
61135: ARRAY
61136: PPUSH
61137: LD_INT 2
61139: PUSH
61140: LD_INT 30
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 30
61152: PUSH
61153: LD_INT 5
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: PPUSH
61165: CALL_OW 72
61169: PUSH
61170: LD_INT 6
61172: MUL
61173: PLUS
61174: ST_TO_ADDR
// if bcount < tmp then
61175: LD_VAR 0 13
61179: PUSH
61180: LD_VAR 0 4
61184: LESS
61185: IFFALSE 61231
// for i = tmp downto bcount do
61187: LD_ADDR_VAR 0 3
61191: PUSH
61192: DOUBLE
61193: LD_VAR 0 4
61197: INC
61198: ST_TO_ADDR
61199: LD_VAR 0 13
61203: PUSH
61204: FOR_DOWNTO
61205: IFFALSE 61229
// tmp := Delete ( tmp , tmp ) ;
61207: LD_ADDR_VAR 0 4
61211: PUSH
61212: LD_VAR 0 4
61216: PPUSH
61217: LD_VAR 0 4
61221: PPUSH
61222: CALL_OW 3
61226: ST_TO_ADDR
61227: GO 61204
61229: POP
61230: POP
// result := [ tmp , 0 , 0 , p ] ;
61231: LD_ADDR_VAR 0 2
61235: PUSH
61236: LD_VAR 0 4
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_VAR 0 11
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// exit ;
61258: GO 63948
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61260: LD_EXP 44
61264: PUSH
61265: LD_VAR 0 1
61269: ARRAY
61270: PPUSH
61271: LD_INT 2
61273: PUSH
61274: LD_INT 30
61276: PUSH
61277: LD_INT 6
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 30
61286: PUSH
61287: LD_INT 7
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 30
61296: PUSH
61297: LD_INT 8
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: PPUSH
61310: CALL_OW 72
61314: NOT
61315: PUSH
61316: LD_EXP 44
61320: PUSH
61321: LD_VAR 0 1
61325: ARRAY
61326: PPUSH
61327: LD_INT 30
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PPUSH
61337: CALL_OW 72
61341: NOT
61342: AND
61343: IFFALSE 61415
// begin if eng = tmp then
61345: LD_VAR 0 6
61349: PUSH
61350: LD_VAR 0 4
61354: EQUAL
61355: IFFALSE 61359
// exit ;
61357: GO 63948
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61359: LD_ADDR_EXP 86
61363: PUSH
61364: LD_EXP 86
61368: PPUSH
61369: LD_VAR 0 1
61373: PPUSH
61374: LD_INT 1
61376: PPUSH
61377: CALL_OW 1
61381: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61382: LD_ADDR_VAR 0 2
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_VAR 0 4
61394: PUSH
61395: LD_VAR 0 6
61399: DIFF
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// exit ;
61413: GO 63948
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61415: LD_EXP 71
61419: PUSH
61420: LD_EXP 70
61424: PUSH
61425: LD_VAR 0 1
61429: ARRAY
61430: ARRAY
61431: PUSH
61432: LD_EXP 44
61436: PUSH
61437: LD_VAR 0 1
61441: ARRAY
61442: PPUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 30
61448: PUSH
61449: LD_INT 6
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 30
61458: PUSH
61459: LD_INT 7
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 30
61468: PUSH
61469: LD_INT 8
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: PPUSH
61482: CALL_OW 72
61486: AND
61487: PUSH
61488: LD_EXP 44
61492: PUSH
61493: LD_VAR 0 1
61497: ARRAY
61498: PPUSH
61499: LD_INT 30
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PPUSH
61509: CALL_OW 72
61513: NOT
61514: AND
61515: IFFALSE 61729
// begin if sci >= 6 then
61517: LD_VAR 0 8
61521: PUSH
61522: LD_INT 6
61524: GREATEREQUAL
61525: IFFALSE 61529
// exit ;
61527: GO 63948
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61529: LD_ADDR_EXP 86
61533: PUSH
61534: LD_EXP 86
61538: PPUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: LD_INT 2
61546: PPUSH
61547: CALL_OW 1
61551: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61552: LD_ADDR_VAR 0 9
61556: PUSH
61557: LD_VAR 0 4
61561: PUSH
61562: LD_VAR 0 8
61566: DIFF
61567: PPUSH
61568: LD_INT 4
61570: PPUSH
61571: CALL 53850 0 2
61575: ST_TO_ADDR
// p := [ ] ;
61576: LD_ADDR_VAR 0 11
61580: PUSH
61581: EMPTY
61582: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61583: LD_VAR 0 8
61587: PUSH
61588: LD_INT 6
61590: LESS
61591: PUSH
61592: LD_VAR 0 9
61596: PUSH
61597: LD_INT 6
61599: GREATER
61600: AND
61601: IFFALSE 61682
// begin for i = 1 to 6 - sci do
61603: LD_ADDR_VAR 0 3
61607: PUSH
61608: DOUBLE
61609: LD_INT 1
61611: DEC
61612: ST_TO_ADDR
61613: LD_INT 6
61615: PUSH
61616: LD_VAR 0 8
61620: MINUS
61621: PUSH
61622: FOR_TO
61623: IFFALSE 61678
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61625: LD_ADDR_VAR 0 11
61629: PUSH
61630: LD_VAR 0 11
61634: PPUSH
61635: LD_VAR 0 11
61639: PUSH
61640: LD_INT 1
61642: PLUS
61643: PPUSH
61644: LD_VAR 0 9
61648: PUSH
61649: LD_INT 1
61651: ARRAY
61652: PPUSH
61653: CALL_OW 2
61657: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61658: LD_ADDR_VAR 0 9
61662: PUSH
61663: LD_VAR 0 9
61667: PPUSH
61668: LD_INT 1
61670: PPUSH
61671: CALL_OW 3
61675: ST_TO_ADDR
// end ;
61676: GO 61622
61678: POP
61679: POP
// end else
61680: GO 61702
// if sort then
61682: LD_VAR 0 9
61686: IFFALSE 61702
// p := sort [ 1 ] ;
61688: LD_ADDR_VAR 0 11
61692: PUSH
61693: LD_VAR 0 9
61697: PUSH
61698: LD_INT 1
61700: ARRAY
61701: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61702: LD_ADDR_VAR 0 2
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_VAR 0 11
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// exit ;
61727: GO 63948
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61729: LD_EXP 71
61733: PUSH
61734: LD_EXP 70
61738: PUSH
61739: LD_VAR 0 1
61743: ARRAY
61744: ARRAY
61745: PUSH
61746: LD_EXP 44
61750: PUSH
61751: LD_VAR 0 1
61755: ARRAY
61756: PPUSH
61757: LD_INT 2
61759: PUSH
61760: LD_INT 30
61762: PUSH
61763: LD_INT 6
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 30
61772: PUSH
61773: LD_INT 7
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 30
61782: PUSH
61783: LD_INT 8
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: PPUSH
61796: CALL_OW 72
61800: AND
61801: PUSH
61802: LD_EXP 44
61806: PUSH
61807: LD_VAR 0 1
61811: ARRAY
61812: PPUSH
61813: LD_INT 30
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PPUSH
61823: CALL_OW 72
61827: AND
61828: IFFALSE 62562
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61830: LD_ADDR_EXP 86
61834: PUSH
61835: LD_EXP 86
61839: PPUSH
61840: LD_VAR 0 1
61844: PPUSH
61845: LD_INT 3
61847: PPUSH
61848: CALL_OW 1
61852: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61853: LD_ADDR_VAR 0 2
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: ST_TO_ADDR
// if not eng then
61876: LD_VAR 0 6
61880: NOT
61881: IFFALSE 61944
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
61883: LD_ADDR_VAR 0 11
61887: PUSH
61888: LD_VAR 0 4
61892: PPUSH
61893: LD_INT 2
61895: PPUSH
61896: CALL 53850 0 2
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
61905: LD_ADDR_VAR 0 2
61909: PUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_INT 2
61917: PPUSH
61918: LD_VAR 0 11
61922: PPUSH
61923: CALL_OW 1
61927: ST_TO_ADDR
// tmp := tmp diff p ;
61928: LD_ADDR_VAR 0 4
61932: PUSH
61933: LD_VAR 0 4
61937: PUSH
61938: LD_VAR 0 11
61942: DIFF
61943: ST_TO_ADDR
// end ; if tmp and sci < 6 then
61944: LD_VAR 0 4
61948: PUSH
61949: LD_VAR 0 8
61953: PUSH
61954: LD_INT 6
61956: LESS
61957: AND
61958: IFFALSE 62146
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
61960: LD_ADDR_VAR 0 9
61964: PUSH
61965: LD_VAR 0 4
61969: PUSH
61970: LD_VAR 0 8
61974: PUSH
61975: LD_VAR 0 7
61979: UNION
61980: DIFF
61981: PPUSH
61982: LD_INT 4
61984: PPUSH
61985: CALL 53850 0 2
61989: ST_TO_ADDR
// p := [ ] ;
61990: LD_ADDR_VAR 0 11
61994: PUSH
61995: EMPTY
61996: ST_TO_ADDR
// if sort then
61997: LD_VAR 0 9
62001: IFFALSE 62117
// for i = 1 to 6 - sci do
62003: LD_ADDR_VAR 0 3
62007: PUSH
62008: DOUBLE
62009: LD_INT 1
62011: DEC
62012: ST_TO_ADDR
62013: LD_INT 6
62015: PUSH
62016: LD_VAR 0 8
62020: MINUS
62021: PUSH
62022: FOR_TO
62023: IFFALSE 62115
// begin if i = sort then
62025: LD_VAR 0 3
62029: PUSH
62030: LD_VAR 0 9
62034: EQUAL
62035: IFFALSE 62039
// break ;
62037: GO 62115
// if GetClass ( i ) = 4 then
62039: LD_VAR 0 3
62043: PPUSH
62044: CALL_OW 257
62048: PUSH
62049: LD_INT 4
62051: EQUAL
62052: IFFALSE 62056
// continue ;
62054: GO 62022
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62056: LD_ADDR_VAR 0 11
62060: PUSH
62061: LD_VAR 0 11
62065: PPUSH
62066: LD_VAR 0 11
62070: PUSH
62071: LD_INT 1
62073: PLUS
62074: PPUSH
62075: LD_VAR 0 9
62079: PUSH
62080: LD_VAR 0 3
62084: ARRAY
62085: PPUSH
62086: CALL_OW 2
62090: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62091: LD_ADDR_VAR 0 4
62095: PUSH
62096: LD_VAR 0 4
62100: PUSH
62101: LD_VAR 0 9
62105: PUSH
62106: LD_VAR 0 3
62110: ARRAY
62111: DIFF
62112: ST_TO_ADDR
// end ;
62113: GO 62022
62115: POP
62116: POP
// if p then
62117: LD_VAR 0 11
62121: IFFALSE 62146
// result := Replace ( result , 4 , p ) ;
62123: LD_ADDR_VAR 0 2
62127: PUSH
62128: LD_VAR 0 2
62132: PPUSH
62133: LD_INT 4
62135: PPUSH
62136: LD_VAR 0 11
62140: PPUSH
62141: CALL_OW 1
62145: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62146: LD_VAR 0 4
62150: PUSH
62151: LD_VAR 0 7
62155: PUSH
62156: LD_INT 6
62158: LESS
62159: AND
62160: IFFALSE 62348
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62162: LD_ADDR_VAR 0 9
62166: PUSH
62167: LD_VAR 0 4
62171: PUSH
62172: LD_VAR 0 8
62176: PUSH
62177: LD_VAR 0 7
62181: UNION
62182: DIFF
62183: PPUSH
62184: LD_INT 3
62186: PPUSH
62187: CALL 53850 0 2
62191: ST_TO_ADDR
// p := [ ] ;
62192: LD_ADDR_VAR 0 11
62196: PUSH
62197: EMPTY
62198: ST_TO_ADDR
// if sort then
62199: LD_VAR 0 9
62203: IFFALSE 62319
// for i = 1 to 6 - mech do
62205: LD_ADDR_VAR 0 3
62209: PUSH
62210: DOUBLE
62211: LD_INT 1
62213: DEC
62214: ST_TO_ADDR
62215: LD_INT 6
62217: PUSH
62218: LD_VAR 0 7
62222: MINUS
62223: PUSH
62224: FOR_TO
62225: IFFALSE 62317
// begin if i = sort then
62227: LD_VAR 0 3
62231: PUSH
62232: LD_VAR 0 9
62236: EQUAL
62237: IFFALSE 62241
// break ;
62239: GO 62317
// if GetClass ( i ) = 3 then
62241: LD_VAR 0 3
62245: PPUSH
62246: CALL_OW 257
62250: PUSH
62251: LD_INT 3
62253: EQUAL
62254: IFFALSE 62258
// continue ;
62256: GO 62224
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62258: LD_ADDR_VAR 0 11
62262: PUSH
62263: LD_VAR 0 11
62267: PPUSH
62268: LD_VAR 0 11
62272: PUSH
62273: LD_INT 1
62275: PLUS
62276: PPUSH
62277: LD_VAR 0 9
62281: PUSH
62282: LD_VAR 0 3
62286: ARRAY
62287: PPUSH
62288: CALL_OW 2
62292: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62293: LD_ADDR_VAR 0 4
62297: PUSH
62298: LD_VAR 0 4
62302: PUSH
62303: LD_VAR 0 9
62307: PUSH
62308: LD_VAR 0 3
62312: ARRAY
62313: DIFF
62314: ST_TO_ADDR
// end ;
62315: GO 62224
62317: POP
62318: POP
// if p then
62319: LD_VAR 0 11
62323: IFFALSE 62348
// result := Replace ( result , 3 , p ) ;
62325: LD_ADDR_VAR 0 2
62329: PUSH
62330: LD_VAR 0 2
62334: PPUSH
62335: LD_INT 3
62337: PPUSH
62338: LD_VAR 0 11
62342: PPUSH
62343: CALL_OW 1
62347: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62348: LD_VAR 0 4
62352: PUSH
62353: LD_INT 6
62355: GREATER
62356: PUSH
62357: LD_VAR 0 6
62361: PUSH
62362: LD_INT 6
62364: LESS
62365: AND
62366: IFFALSE 62560
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62368: LD_ADDR_VAR 0 9
62372: PUSH
62373: LD_VAR 0 4
62377: PUSH
62378: LD_VAR 0 8
62382: PUSH
62383: LD_VAR 0 7
62387: UNION
62388: PUSH
62389: LD_VAR 0 6
62393: UNION
62394: DIFF
62395: PPUSH
62396: LD_INT 2
62398: PPUSH
62399: CALL 53850 0 2
62403: ST_TO_ADDR
// p := [ ] ;
62404: LD_ADDR_VAR 0 11
62408: PUSH
62409: EMPTY
62410: ST_TO_ADDR
// if sort then
62411: LD_VAR 0 9
62415: IFFALSE 62531
// for i = 1 to 6 - eng do
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: DOUBLE
62423: LD_INT 1
62425: DEC
62426: ST_TO_ADDR
62427: LD_INT 6
62429: PUSH
62430: LD_VAR 0 6
62434: MINUS
62435: PUSH
62436: FOR_TO
62437: IFFALSE 62529
// begin if i = sort then
62439: LD_VAR 0 3
62443: PUSH
62444: LD_VAR 0 9
62448: EQUAL
62449: IFFALSE 62453
// break ;
62451: GO 62529
// if GetClass ( i ) = 2 then
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL_OW 257
62462: PUSH
62463: LD_INT 2
62465: EQUAL
62466: IFFALSE 62470
// continue ;
62468: GO 62436
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62470: LD_ADDR_VAR 0 11
62474: PUSH
62475: LD_VAR 0 11
62479: PPUSH
62480: LD_VAR 0 11
62484: PUSH
62485: LD_INT 1
62487: PLUS
62488: PPUSH
62489: LD_VAR 0 9
62493: PUSH
62494: LD_VAR 0 3
62498: ARRAY
62499: PPUSH
62500: CALL_OW 2
62504: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62505: LD_ADDR_VAR 0 4
62509: PUSH
62510: LD_VAR 0 4
62514: PUSH
62515: LD_VAR 0 9
62519: PUSH
62520: LD_VAR 0 3
62524: ARRAY
62525: DIFF
62526: ST_TO_ADDR
// end ;
62527: GO 62436
62529: POP
62530: POP
// if p then
62531: LD_VAR 0 11
62535: IFFALSE 62560
// result := Replace ( result , 2 , p ) ;
62537: LD_ADDR_VAR 0 2
62541: PUSH
62542: LD_VAR 0 2
62546: PPUSH
62547: LD_INT 2
62549: PPUSH
62550: LD_VAR 0 11
62554: PPUSH
62555: CALL_OW 1
62559: ST_TO_ADDR
// end ; exit ;
62560: GO 63948
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62562: LD_EXP 71
62566: PUSH
62567: LD_EXP 70
62571: PUSH
62572: LD_VAR 0 1
62576: ARRAY
62577: ARRAY
62578: NOT
62579: PUSH
62580: LD_EXP 44
62584: PUSH
62585: LD_VAR 0 1
62589: ARRAY
62590: PPUSH
62591: LD_INT 30
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PPUSH
62601: CALL_OW 72
62605: AND
62606: PUSH
62607: LD_EXP 49
62611: PUSH
62612: LD_VAR 0 1
62616: ARRAY
62617: AND
62618: IFFALSE 63226
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62620: LD_ADDR_EXP 86
62624: PUSH
62625: LD_EXP 86
62629: PPUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_INT 5
62637: PPUSH
62638: CALL_OW 1
62642: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// if sci > 1 then
62666: LD_VAR 0 8
62670: PUSH
62671: LD_INT 1
62673: GREATER
62674: IFFALSE 62702
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62676: LD_ADDR_VAR 0 4
62680: PUSH
62681: LD_VAR 0 4
62685: PUSH
62686: LD_VAR 0 8
62690: PUSH
62691: LD_VAR 0 8
62695: PUSH
62696: LD_INT 1
62698: ARRAY
62699: DIFF
62700: DIFF
62701: ST_TO_ADDR
// if tmp and not sci then
62702: LD_VAR 0 4
62706: PUSH
62707: LD_VAR 0 8
62711: NOT
62712: AND
62713: IFFALSE 62782
// begin sort := SortBySkill ( tmp , 4 ) ;
62715: LD_ADDR_VAR 0 9
62719: PUSH
62720: LD_VAR 0 4
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: CALL 53850 0 2
62732: ST_TO_ADDR
// if sort then
62733: LD_VAR 0 9
62737: IFFALSE 62753
// p := sort [ 1 ] ;
62739: LD_ADDR_VAR 0 11
62743: PUSH
62744: LD_VAR 0 9
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: ST_TO_ADDR
// if p then
62753: LD_VAR 0 11
62757: IFFALSE 62782
// result := Replace ( result , 4 , p ) ;
62759: LD_ADDR_VAR 0 2
62763: PUSH
62764: LD_VAR 0 2
62768: PPUSH
62769: LD_INT 4
62771: PPUSH
62772: LD_VAR 0 11
62776: PPUSH
62777: CALL_OW 1
62781: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62782: LD_ADDR_VAR 0 4
62786: PUSH
62787: LD_VAR 0 4
62791: PUSH
62792: LD_VAR 0 7
62796: DIFF
62797: ST_TO_ADDR
// if tmp and mech < 6 then
62798: LD_VAR 0 4
62802: PUSH
62803: LD_VAR 0 7
62807: PUSH
62808: LD_INT 6
62810: LESS
62811: AND
62812: IFFALSE 63000
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62814: LD_ADDR_VAR 0 9
62818: PUSH
62819: LD_VAR 0 4
62823: PUSH
62824: LD_VAR 0 8
62828: PUSH
62829: LD_VAR 0 7
62833: UNION
62834: DIFF
62835: PPUSH
62836: LD_INT 3
62838: PPUSH
62839: CALL 53850 0 2
62843: ST_TO_ADDR
// p := [ ] ;
62844: LD_ADDR_VAR 0 11
62848: PUSH
62849: EMPTY
62850: ST_TO_ADDR
// if sort then
62851: LD_VAR 0 9
62855: IFFALSE 62971
// for i = 1 to 6 - mech do
62857: LD_ADDR_VAR 0 3
62861: PUSH
62862: DOUBLE
62863: LD_INT 1
62865: DEC
62866: ST_TO_ADDR
62867: LD_INT 6
62869: PUSH
62870: LD_VAR 0 7
62874: MINUS
62875: PUSH
62876: FOR_TO
62877: IFFALSE 62969
// begin if i = sort then
62879: LD_VAR 0 3
62883: PUSH
62884: LD_VAR 0 9
62888: EQUAL
62889: IFFALSE 62893
// break ;
62891: GO 62969
// if GetClass ( i ) = 3 then
62893: LD_VAR 0 3
62897: PPUSH
62898: CALL_OW 257
62902: PUSH
62903: LD_INT 3
62905: EQUAL
62906: IFFALSE 62910
// continue ;
62908: GO 62876
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62910: LD_ADDR_VAR 0 11
62914: PUSH
62915: LD_VAR 0 11
62919: PPUSH
62920: LD_VAR 0 11
62924: PUSH
62925: LD_INT 1
62927: PLUS
62928: PPUSH
62929: LD_VAR 0 9
62933: PUSH
62934: LD_VAR 0 3
62938: ARRAY
62939: PPUSH
62940: CALL_OW 2
62944: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62945: LD_ADDR_VAR 0 4
62949: PUSH
62950: LD_VAR 0 4
62954: PUSH
62955: LD_VAR 0 9
62959: PUSH
62960: LD_VAR 0 3
62964: ARRAY
62965: DIFF
62966: ST_TO_ADDR
// end ;
62967: GO 62876
62969: POP
62970: POP
// if p then
62971: LD_VAR 0 11
62975: IFFALSE 63000
// result := Replace ( result , 3 , p ) ;
62977: LD_ADDR_VAR 0 2
62981: PUSH
62982: LD_VAR 0 2
62986: PPUSH
62987: LD_INT 3
62989: PPUSH
62990: LD_VAR 0 11
62994: PPUSH
62995: CALL_OW 1
62999: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63000: LD_ADDR_VAR 0 4
63004: PUSH
63005: LD_VAR 0 4
63009: PUSH
63010: LD_VAR 0 6
63014: DIFF
63015: ST_TO_ADDR
// if tmp and eng < 6 then
63016: LD_VAR 0 4
63020: PUSH
63021: LD_VAR 0 6
63025: PUSH
63026: LD_INT 6
63028: LESS
63029: AND
63030: IFFALSE 63224
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63032: LD_ADDR_VAR 0 9
63036: PUSH
63037: LD_VAR 0 4
63041: PUSH
63042: LD_VAR 0 8
63046: PUSH
63047: LD_VAR 0 7
63051: UNION
63052: PUSH
63053: LD_VAR 0 6
63057: UNION
63058: DIFF
63059: PPUSH
63060: LD_INT 2
63062: PPUSH
63063: CALL 53850 0 2
63067: ST_TO_ADDR
// p := [ ] ;
63068: LD_ADDR_VAR 0 11
63072: PUSH
63073: EMPTY
63074: ST_TO_ADDR
// if sort then
63075: LD_VAR 0 9
63079: IFFALSE 63195
// for i = 1 to 6 - eng do
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: DOUBLE
63087: LD_INT 1
63089: DEC
63090: ST_TO_ADDR
63091: LD_INT 6
63093: PUSH
63094: LD_VAR 0 6
63098: MINUS
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63193
// begin if i = sort then
63103: LD_VAR 0 3
63107: PUSH
63108: LD_VAR 0 9
63112: EQUAL
63113: IFFALSE 63117
// break ;
63115: GO 63193
// if GetClass ( i ) = 2 then
63117: LD_VAR 0 3
63121: PPUSH
63122: CALL_OW 257
63126: PUSH
63127: LD_INT 2
63129: EQUAL
63130: IFFALSE 63134
// continue ;
63132: GO 63100
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63134: LD_ADDR_VAR 0 11
63138: PUSH
63139: LD_VAR 0 11
63143: PPUSH
63144: LD_VAR 0 11
63148: PUSH
63149: LD_INT 1
63151: PLUS
63152: PPUSH
63153: LD_VAR 0 9
63157: PUSH
63158: LD_VAR 0 3
63162: ARRAY
63163: PPUSH
63164: CALL_OW 2
63168: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63169: LD_ADDR_VAR 0 4
63173: PUSH
63174: LD_VAR 0 4
63178: PUSH
63179: LD_VAR 0 9
63183: PUSH
63184: LD_VAR 0 3
63188: ARRAY
63189: DIFF
63190: ST_TO_ADDR
// end ;
63191: GO 63100
63193: POP
63194: POP
// if p then
63195: LD_VAR 0 11
63199: IFFALSE 63224
// result := Replace ( result , 2 , p ) ;
63201: LD_ADDR_VAR 0 2
63205: PUSH
63206: LD_VAR 0 2
63210: PPUSH
63211: LD_INT 2
63213: PPUSH
63214: LD_VAR 0 11
63218: PPUSH
63219: CALL_OW 1
63223: ST_TO_ADDR
// end ; exit ;
63224: GO 63948
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63226: LD_EXP 71
63230: PUSH
63231: LD_EXP 70
63235: PUSH
63236: LD_VAR 0 1
63240: ARRAY
63241: ARRAY
63242: NOT
63243: PUSH
63244: LD_EXP 44
63248: PUSH
63249: LD_VAR 0 1
63253: ARRAY
63254: PPUSH
63255: LD_INT 30
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PPUSH
63265: CALL_OW 72
63269: AND
63270: PUSH
63271: LD_EXP 49
63275: PUSH
63276: LD_VAR 0 1
63280: ARRAY
63281: NOT
63282: AND
63283: IFFALSE 63948
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63285: LD_ADDR_EXP 86
63289: PUSH
63290: LD_EXP 86
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: LD_INT 6
63302: PPUSH
63303: CALL_OW 1
63307: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63308: LD_ADDR_VAR 0 2
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// if sci >= 1 then
63331: LD_VAR 0 8
63335: PUSH
63336: LD_INT 1
63338: GREATEREQUAL
63339: IFFALSE 63361
// tmp := tmp diff sci [ 1 ] ;
63341: LD_ADDR_VAR 0 4
63345: PUSH
63346: LD_VAR 0 4
63350: PUSH
63351: LD_VAR 0 8
63355: PUSH
63356: LD_INT 1
63358: ARRAY
63359: DIFF
63360: ST_TO_ADDR
// if tmp and not sci then
63361: LD_VAR 0 4
63365: PUSH
63366: LD_VAR 0 8
63370: NOT
63371: AND
63372: IFFALSE 63441
// begin sort := SortBySkill ( tmp , 4 ) ;
63374: LD_ADDR_VAR 0 9
63378: PUSH
63379: LD_VAR 0 4
63383: PPUSH
63384: LD_INT 4
63386: PPUSH
63387: CALL 53850 0 2
63391: ST_TO_ADDR
// if sort then
63392: LD_VAR 0 9
63396: IFFALSE 63412
// p := sort [ 1 ] ;
63398: LD_ADDR_VAR 0 11
63402: PUSH
63403: LD_VAR 0 9
63407: PUSH
63408: LD_INT 1
63410: ARRAY
63411: ST_TO_ADDR
// if p then
63412: LD_VAR 0 11
63416: IFFALSE 63441
// result := Replace ( result , 4 , p ) ;
63418: LD_ADDR_VAR 0 2
63422: PUSH
63423: LD_VAR 0 2
63427: PPUSH
63428: LD_INT 4
63430: PPUSH
63431: LD_VAR 0 11
63435: PPUSH
63436: CALL_OW 1
63440: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63441: LD_ADDR_VAR 0 4
63445: PUSH
63446: LD_VAR 0 4
63450: PUSH
63451: LD_VAR 0 7
63455: DIFF
63456: ST_TO_ADDR
// if tmp and mech < 6 then
63457: LD_VAR 0 4
63461: PUSH
63462: LD_VAR 0 7
63466: PUSH
63467: LD_INT 6
63469: LESS
63470: AND
63471: IFFALSE 63653
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63473: LD_ADDR_VAR 0 9
63477: PUSH
63478: LD_VAR 0 4
63482: PUSH
63483: LD_VAR 0 7
63487: DIFF
63488: PPUSH
63489: LD_INT 3
63491: PPUSH
63492: CALL 53850 0 2
63496: ST_TO_ADDR
// p := [ ] ;
63497: LD_ADDR_VAR 0 11
63501: PUSH
63502: EMPTY
63503: ST_TO_ADDR
// if sort then
63504: LD_VAR 0 9
63508: IFFALSE 63624
// for i = 1 to 6 - mech do
63510: LD_ADDR_VAR 0 3
63514: PUSH
63515: DOUBLE
63516: LD_INT 1
63518: DEC
63519: ST_TO_ADDR
63520: LD_INT 6
63522: PUSH
63523: LD_VAR 0 7
63527: MINUS
63528: PUSH
63529: FOR_TO
63530: IFFALSE 63622
// begin if i = sort then
63532: LD_VAR 0 3
63536: PUSH
63537: LD_VAR 0 9
63541: EQUAL
63542: IFFALSE 63546
// break ;
63544: GO 63622
// if GetClass ( i ) = 3 then
63546: LD_VAR 0 3
63550: PPUSH
63551: CALL_OW 257
63555: PUSH
63556: LD_INT 3
63558: EQUAL
63559: IFFALSE 63563
// continue ;
63561: GO 63529
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63563: LD_ADDR_VAR 0 11
63567: PUSH
63568: LD_VAR 0 11
63572: PPUSH
63573: LD_VAR 0 11
63577: PUSH
63578: LD_INT 1
63580: PLUS
63581: PPUSH
63582: LD_VAR 0 9
63586: PUSH
63587: LD_VAR 0 3
63591: ARRAY
63592: PPUSH
63593: CALL_OW 2
63597: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63598: LD_ADDR_VAR 0 4
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_VAR 0 9
63612: PUSH
63613: LD_VAR 0 3
63617: ARRAY
63618: DIFF
63619: ST_TO_ADDR
// end ;
63620: GO 63529
63622: POP
63623: POP
// if p then
63624: LD_VAR 0 11
63628: IFFALSE 63653
// result := Replace ( result , 3 , p ) ;
63630: LD_ADDR_VAR 0 2
63634: PUSH
63635: LD_VAR 0 2
63639: PPUSH
63640: LD_INT 3
63642: PPUSH
63643: LD_VAR 0 11
63647: PPUSH
63648: CALL_OW 1
63652: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63653: LD_ADDR_VAR 0 4
63657: PUSH
63658: LD_VAR 0 4
63662: PUSH
63663: LD_VAR 0 6
63667: DIFF
63668: ST_TO_ADDR
// if tmp and eng < 4 then
63669: LD_VAR 0 4
63673: PUSH
63674: LD_VAR 0 6
63678: PUSH
63679: LD_INT 4
63681: LESS
63682: AND
63683: IFFALSE 63873
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63685: LD_ADDR_VAR 0 9
63689: PUSH
63690: LD_VAR 0 4
63694: PUSH
63695: LD_VAR 0 7
63699: PUSH
63700: LD_VAR 0 6
63704: UNION
63705: DIFF
63706: PPUSH
63707: LD_INT 2
63709: PPUSH
63710: CALL 53850 0 2
63714: ST_TO_ADDR
// p := [ ] ;
63715: LD_ADDR_VAR 0 11
63719: PUSH
63720: EMPTY
63721: ST_TO_ADDR
// if sort then
63722: LD_VAR 0 9
63726: IFFALSE 63842
// for i = 1 to 4 - eng do
63728: LD_ADDR_VAR 0 3
63732: PUSH
63733: DOUBLE
63734: LD_INT 1
63736: DEC
63737: ST_TO_ADDR
63738: LD_INT 4
63740: PUSH
63741: LD_VAR 0 6
63745: MINUS
63746: PUSH
63747: FOR_TO
63748: IFFALSE 63840
// begin if i = sort then
63750: LD_VAR 0 3
63754: PUSH
63755: LD_VAR 0 9
63759: EQUAL
63760: IFFALSE 63764
// break ;
63762: GO 63840
// if GetClass ( i ) = 2 then
63764: LD_VAR 0 3
63768: PPUSH
63769: CALL_OW 257
63773: PUSH
63774: LD_INT 2
63776: EQUAL
63777: IFFALSE 63781
// continue ;
63779: GO 63747
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63781: LD_ADDR_VAR 0 11
63785: PUSH
63786: LD_VAR 0 11
63790: PPUSH
63791: LD_VAR 0 11
63795: PUSH
63796: LD_INT 1
63798: PLUS
63799: PPUSH
63800: LD_VAR 0 9
63804: PUSH
63805: LD_VAR 0 3
63809: ARRAY
63810: PPUSH
63811: CALL_OW 2
63815: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63816: LD_ADDR_VAR 0 4
63820: PUSH
63821: LD_VAR 0 4
63825: PUSH
63826: LD_VAR 0 9
63830: PUSH
63831: LD_VAR 0 3
63835: ARRAY
63836: DIFF
63837: ST_TO_ADDR
// end ;
63838: GO 63747
63840: POP
63841: POP
// if p then
63842: LD_VAR 0 11
63846: IFFALSE 63871
// result := Replace ( result , 2 , p ) ;
63848: LD_ADDR_VAR 0 2
63852: PUSH
63853: LD_VAR 0 2
63857: PPUSH
63858: LD_INT 2
63860: PPUSH
63861: LD_VAR 0 11
63865: PPUSH
63866: CALL_OW 1
63870: ST_TO_ADDR
// end else
63871: GO 63917
// for i = eng downto 5 do
63873: LD_ADDR_VAR 0 3
63877: PUSH
63878: DOUBLE
63879: LD_VAR 0 6
63883: INC
63884: ST_TO_ADDR
63885: LD_INT 5
63887: PUSH
63888: FOR_DOWNTO
63889: IFFALSE 63915
// tmp := tmp union eng [ i ] ;
63891: LD_ADDR_VAR 0 4
63895: PUSH
63896: LD_VAR 0 4
63900: PUSH
63901: LD_VAR 0 6
63905: PUSH
63906: LD_VAR 0 3
63910: ARRAY
63911: UNION
63912: ST_TO_ADDR
63913: GO 63888
63915: POP
63916: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
63917: LD_ADDR_VAR 0 2
63921: PUSH
63922: LD_VAR 0 2
63926: PPUSH
63927: LD_INT 1
63929: PPUSH
63930: LD_VAR 0 4
63934: PUSH
63935: LD_VAR 0 5
63939: DIFF
63940: PPUSH
63941: CALL_OW 1
63945: ST_TO_ADDR
// exit ;
63946: GO 63948
// end ; end ;
63948: LD_VAR 0 2
63952: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
63953: LD_INT 0
63955: PPUSH
63956: PPUSH
63957: PPUSH
// if not mc_bases then
63958: LD_EXP 44
63962: NOT
63963: IFFALSE 63967
// exit ;
63965: GO 64073
// for i = 1 to mc_bases do
63967: LD_ADDR_VAR 0 2
63971: PUSH
63972: DOUBLE
63973: LD_INT 1
63975: DEC
63976: ST_TO_ADDR
63977: LD_EXP 44
63981: PUSH
63982: FOR_TO
63983: IFFALSE 64064
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63985: LD_ADDR_VAR 0 3
63989: PUSH
63990: LD_EXP 44
63994: PUSH
63995: LD_VAR 0 2
63999: ARRAY
64000: PPUSH
64001: LD_INT 21
64003: PUSH
64004: LD_INT 3
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: PUSH
64014: LD_INT 24
64016: PUSH
64017: LD_INT 1000
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PPUSH
64032: CALL_OW 72
64036: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64037: LD_ADDR_EXP 45
64041: PUSH
64042: LD_EXP 45
64046: PPUSH
64047: LD_VAR 0 2
64051: PPUSH
64052: LD_VAR 0 3
64056: PPUSH
64057: CALL_OW 1
64061: ST_TO_ADDR
// end ;
64062: GO 63982
64064: POP
64065: POP
// RaiseSailEvent ( 101 ) ;
64066: LD_INT 101
64068: PPUSH
64069: CALL_OW 427
// end ;
64073: LD_VAR 0 1
64077: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64078: LD_INT 0
64080: PPUSH
64081: PPUSH
64082: PPUSH
64083: PPUSH
64084: PPUSH
64085: PPUSH
64086: PPUSH
// if not mc_bases then
64087: LD_EXP 44
64091: NOT
64092: IFFALSE 64096
// exit ;
64094: GO 64658
// for i = 1 to mc_bases do
64096: LD_ADDR_VAR 0 2
64100: PUSH
64101: DOUBLE
64102: LD_INT 1
64104: DEC
64105: ST_TO_ADDR
64106: LD_EXP 44
64110: PUSH
64111: FOR_TO
64112: IFFALSE 64649
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64114: LD_ADDR_VAR 0 5
64118: PUSH
64119: LD_EXP 44
64123: PUSH
64124: LD_VAR 0 2
64128: ARRAY
64129: PUSH
64130: LD_EXP 73
64134: PUSH
64135: LD_VAR 0 2
64139: ARRAY
64140: UNION
64141: PPUSH
64142: LD_INT 21
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: LD_INT 54
64160: PUSH
64161: EMPTY
64162: LIST
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 3
64170: PUSH
64171: LD_INT 24
64173: PUSH
64174: LD_INT 800
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PPUSH
64194: CALL_OW 72
64198: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64199: LD_ADDR_VAR 0 6
64203: PUSH
64204: LD_EXP 44
64208: PUSH
64209: LD_VAR 0 2
64213: ARRAY
64214: PPUSH
64215: LD_INT 21
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: LD_INT 3
64230: PUSH
64231: LD_INT 54
64233: PUSH
64234: EMPTY
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: LD_INT 24
64246: PUSH
64247: LD_INT 250
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PPUSH
64267: CALL_OW 72
64271: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64272: LD_ADDR_VAR 0 7
64276: PUSH
64277: LD_VAR 0 5
64281: PUSH
64282: LD_VAR 0 6
64286: DIFF
64287: ST_TO_ADDR
// if not need_heal_1 then
64288: LD_VAR 0 6
64292: NOT
64293: IFFALSE 64326
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64295: LD_ADDR_EXP 47
64299: PUSH
64300: LD_EXP 47
64304: PPUSH
64305: LD_VAR 0 2
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PPUSH
64317: EMPTY
64318: PPUSH
64319: CALL 24301 0 3
64323: ST_TO_ADDR
64324: GO 64396
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64326: LD_ADDR_EXP 47
64330: PUSH
64331: LD_EXP 47
64335: PPUSH
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PPUSH
64348: LD_EXP 47
64352: PUSH
64353: LD_VAR 0 2
64357: ARRAY
64358: PUSH
64359: LD_INT 1
64361: ARRAY
64362: PPUSH
64363: LD_INT 3
64365: PUSH
64366: LD_INT 24
64368: PUSH
64369: LD_INT 1000
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PPUSH
64380: CALL_OW 72
64384: PUSH
64385: LD_VAR 0 6
64389: UNION
64390: PPUSH
64391: CALL 24301 0 3
64395: ST_TO_ADDR
// if not need_heal_2 then
64396: LD_VAR 0 7
64400: NOT
64401: IFFALSE 64434
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64403: LD_ADDR_EXP 47
64407: PUSH
64408: LD_EXP 47
64412: PPUSH
64413: LD_VAR 0 2
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PPUSH
64425: EMPTY
64426: PPUSH
64427: CALL 24301 0 3
64431: ST_TO_ADDR
64432: GO 64466
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64434: LD_ADDR_EXP 47
64438: PUSH
64439: LD_EXP 47
64443: PPUSH
64444: LD_VAR 0 2
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PPUSH
64456: LD_VAR 0 7
64460: PPUSH
64461: CALL 24301 0 3
64465: ST_TO_ADDR
// if need_heal_2 then
64466: LD_VAR 0 7
64470: IFFALSE 64631
// for j in need_heal_2 do
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: LD_VAR 0 7
64481: PUSH
64482: FOR_IN
64483: IFFALSE 64629
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64485: LD_ADDR_VAR 0 5
64489: PUSH
64490: LD_EXP 44
64494: PUSH
64495: LD_VAR 0 2
64499: ARRAY
64500: PPUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 30
64506: PUSH
64507: LD_INT 6
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 30
64516: PUSH
64517: LD_INT 7
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 30
64526: PUSH
64527: LD_INT 8
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 30
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 30
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: PPUSH
64562: CALL_OW 72
64566: ST_TO_ADDR
// if tmp then
64567: LD_VAR 0 5
64571: IFFALSE 64627
// begin k := NearestUnitToUnit ( tmp , j ) ;
64573: LD_ADDR_VAR 0 4
64577: PUSH
64578: LD_VAR 0 5
64582: PPUSH
64583: LD_VAR 0 3
64587: PPUSH
64588: CALL_OW 74
64592: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
64593: LD_VAR 0 3
64597: PPUSH
64598: LD_VAR 0 4
64602: PPUSH
64603: CALL_OW 296
64607: PUSH
64608: LD_INT 5
64610: GREATER
64611: IFFALSE 64627
// ComMoveUnit ( j , k ) ;
64613: LD_VAR 0 3
64617: PPUSH
64618: LD_VAR 0 4
64622: PPUSH
64623: CALL_OW 112
// end ; end ;
64627: GO 64482
64629: POP
64630: POP
// if not need_heal_1 and not need_heal_2 then
64631: LD_VAR 0 6
64635: NOT
64636: PUSH
64637: LD_VAR 0 7
64641: NOT
64642: AND
64643: IFFALSE 64647
// continue ;
64645: GO 64111
// end ;
64647: GO 64111
64649: POP
64650: POP
// RaiseSailEvent ( 102 ) ;
64651: LD_INT 102
64653: PPUSH
64654: CALL_OW 427
// end ;
64658: LD_VAR 0 1
64662: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64663: LD_INT 0
64665: PPUSH
64666: PPUSH
64667: PPUSH
64668: PPUSH
64669: PPUSH
64670: PPUSH
64671: PPUSH
64672: PPUSH
// if not mc_bases then
64673: LD_EXP 44
64677: NOT
64678: IFFALSE 64682
// exit ;
64680: GO 65517
// for i = 1 to mc_bases do
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_EXP 44
64696: PUSH
64697: FOR_TO
64698: IFFALSE 65515
// begin if not mc_building_need_repair [ i ] then
64700: LD_EXP 45
64704: PUSH
64705: LD_VAR 0 2
64709: ARRAY
64710: NOT
64711: IFFALSE 64885
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64713: LD_ADDR_VAR 0 6
64717: PUSH
64718: LD_EXP 63
64722: PUSH
64723: LD_VAR 0 2
64727: ARRAY
64728: PPUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 24
64734: PUSH
64735: LD_INT 1000
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: LD_INT 34
64751: PUSH
64752: LD_INT 13
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 34
64761: PUSH
64762: LD_INT 52
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PPUSH
64778: CALL_OW 72
64782: ST_TO_ADDR
// if cranes then
64783: LD_VAR 0 6
64787: IFFALSE 64849
// for j in cranes do
64789: LD_ADDR_VAR 0 3
64793: PUSH
64794: LD_VAR 0 6
64798: PUSH
64799: FOR_IN
64800: IFFALSE 64847
// if not IsInArea ( j , mc_parking [ i ] ) then
64802: LD_VAR 0 3
64806: PPUSH
64807: LD_EXP 68
64811: PUSH
64812: LD_VAR 0 2
64816: ARRAY
64817: PPUSH
64818: CALL_OW 308
64822: NOT
64823: IFFALSE 64845
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64825: LD_VAR 0 3
64829: PPUSH
64830: LD_EXP 68
64834: PUSH
64835: LD_VAR 0 2
64839: ARRAY
64840: PPUSH
64841: CALL_OW 113
64845: GO 64799
64847: POP
64848: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64849: LD_ADDR_EXP 46
64853: PUSH
64854: LD_EXP 46
64858: PPUSH
64859: LD_VAR 0 2
64863: PPUSH
64864: EMPTY
64865: PPUSH
64866: CALL_OW 1
64870: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64871: LD_VAR 0 2
64875: PPUSH
64876: LD_INT 101
64878: PPUSH
64879: CALL 59786 0 2
// continue ;
64883: GO 64697
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
64885: LD_ADDR_EXP 50
64889: PUSH
64890: LD_EXP 50
64894: PPUSH
64895: LD_VAR 0 2
64899: PPUSH
64900: EMPTY
64901: PPUSH
64902: CALL_OW 1
64906: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64907: LD_VAR 0 2
64911: PPUSH
64912: LD_INT 103
64914: PPUSH
64915: CALL 59786 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
64919: LD_ADDR_VAR 0 5
64923: PUSH
64924: LD_EXP 44
64928: PUSH
64929: LD_VAR 0 2
64933: ARRAY
64934: PUSH
64935: LD_EXP 73
64939: PUSH
64940: LD_VAR 0 2
64944: ARRAY
64945: UNION
64946: PPUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 25
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 25
64962: PUSH
64963: LD_INT 16
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: PPUSH
64978: CALL_OW 72
64982: PUSH
64983: LD_EXP 47
64987: PUSH
64988: LD_VAR 0 2
64992: ARRAY
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PUSH
64998: LD_EXP 47
65002: PUSH
65003: LD_VAR 0 2
65007: ARRAY
65008: PUSH
65009: LD_INT 2
65011: ARRAY
65012: UNION
65013: DIFF
65014: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
65015: LD_ADDR_VAR 0 6
65019: PUSH
65020: LD_EXP 63
65024: PUSH
65025: LD_VAR 0 2
65029: ARRAY
65030: PPUSH
65031: LD_INT 2
65033: PUSH
65034: LD_INT 34
65036: PUSH
65037: LD_INT 13
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 34
65046: PUSH
65047: LD_INT 52
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: PPUSH
65059: CALL_OW 72
65063: ST_TO_ADDR
// if cranes then
65064: LD_VAR 0 6
65068: IFFALSE 65204
// begin for j in cranes do
65070: LD_ADDR_VAR 0 3
65074: PUSH
65075: LD_VAR 0 6
65079: PUSH
65080: FOR_IN
65081: IFFALSE 65202
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
65083: LD_VAR 0 3
65087: PPUSH
65088: CALL_OW 256
65092: PUSH
65093: LD_INT 500
65095: GREATEREQUAL
65096: PUSH
65097: LD_VAR 0 3
65101: PPUSH
65102: CALL_OW 314
65106: NOT
65107: AND
65108: IFFALSE 65142
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65110: LD_VAR 0 3
65114: PPUSH
65115: LD_EXP 45
65119: PUSH
65120: LD_VAR 0 2
65124: ARRAY
65125: PPUSH
65126: LD_VAR 0 3
65130: PPUSH
65131: CALL_OW 74
65135: PPUSH
65136: CALL_OW 130
65140: GO 65200
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65142: LD_VAR 0 3
65146: PPUSH
65147: CALL_OW 256
65151: PUSH
65152: LD_INT 500
65154: LESS
65155: PUSH
65156: LD_VAR 0 3
65160: PPUSH
65161: LD_EXP 68
65165: PUSH
65166: LD_VAR 0 2
65170: ARRAY
65171: PPUSH
65172: CALL_OW 308
65176: NOT
65177: AND
65178: IFFALSE 65200
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65180: LD_VAR 0 3
65184: PPUSH
65185: LD_EXP 68
65189: PUSH
65190: LD_VAR 0 2
65194: ARRAY
65195: PPUSH
65196: CALL_OW 113
65200: GO 65080
65202: POP
65203: POP
// end ; if tmp > 3 then
65204: LD_VAR 0 5
65208: PUSH
65209: LD_INT 3
65211: GREATER
65212: IFFALSE 65232
// tmp := ShrinkArray ( tmp , 4 ) ;
65214: LD_ADDR_VAR 0 5
65218: PUSH
65219: LD_VAR 0 5
65223: PPUSH
65224: LD_INT 4
65226: PPUSH
65227: CALL 55527 0 2
65231: ST_TO_ADDR
// if not tmp then
65232: LD_VAR 0 5
65236: NOT
65237: IFFALSE 65241
// continue ;
65239: GO 64697
// for j in tmp do
65241: LD_ADDR_VAR 0 3
65245: PUSH
65246: LD_VAR 0 5
65250: PUSH
65251: FOR_IN
65252: IFFALSE 65511
// begin if IsInUnit ( j ) then
65254: LD_VAR 0 3
65258: PPUSH
65259: CALL_OW 310
65263: IFFALSE 65274
// ComExitBuilding ( j ) ;
65265: LD_VAR 0 3
65269: PPUSH
65270: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65274: LD_VAR 0 3
65278: PUSH
65279: LD_EXP 46
65283: PUSH
65284: LD_VAR 0 2
65288: ARRAY
65289: IN
65290: NOT
65291: IFFALSE 65349
// begin SetTag ( j , 101 ) ;
65293: LD_VAR 0 3
65297: PPUSH
65298: LD_INT 101
65300: PPUSH
65301: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65305: LD_ADDR_EXP 46
65309: PUSH
65310: LD_EXP 46
65314: PPUSH
65315: LD_VAR 0 2
65319: PUSH
65320: LD_EXP 46
65324: PUSH
65325: LD_VAR 0 2
65329: ARRAY
65330: PUSH
65331: LD_INT 1
65333: PLUS
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PPUSH
65339: LD_VAR 0 3
65343: PPUSH
65344: CALL 24301 0 3
65348: ST_TO_ADDR
// end ; wait ( 1 ) ;
65349: LD_INT 1
65351: PPUSH
65352: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65356: LD_ADDR_VAR 0 7
65360: PUSH
65361: LD_EXP 45
65365: PUSH
65366: LD_VAR 0 2
65370: ARRAY
65371: ST_TO_ADDR
// if mc_scan [ i ] then
65372: LD_EXP 67
65376: PUSH
65377: LD_VAR 0 2
65381: ARRAY
65382: IFFALSE 65444
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
65384: LD_ADDR_VAR 0 7
65388: PUSH
65389: LD_EXP 45
65393: PUSH
65394: LD_VAR 0 2
65398: ARRAY
65399: PPUSH
65400: LD_INT 3
65402: PUSH
65403: LD_INT 30
65405: PUSH
65406: LD_INT 32
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 30
65415: PUSH
65416: LD_INT 33
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 30
65425: PUSH
65426: LD_INT 31
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: PPUSH
65439: CALL_OW 72
65443: ST_TO_ADDR
// if not to_repair_tmp then
65444: LD_VAR 0 7
65448: NOT
65449: IFFALSE 65453
// continue ;
65451: GO 65251
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65453: LD_ADDR_VAR 0 8
65457: PUSH
65458: LD_VAR 0 7
65462: PPUSH
65463: LD_VAR 0 3
65467: PPUSH
65468: CALL_OW 74
65472: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
65473: LD_VAR 0 8
65477: PPUSH
65478: LD_INT 16
65480: PPUSH
65481: CALL 26894 0 2
65485: PUSH
65486: LD_INT 4
65488: ARRAY
65489: PUSH
65490: LD_INT 5
65492: LESS
65493: IFFALSE 65509
// ComRepairBuilding ( j , to_repair ) ;
65495: LD_VAR 0 3
65499: PPUSH
65500: LD_VAR 0 8
65504: PPUSH
65505: CALL_OW 130
// end ;
65509: GO 65251
65511: POP
65512: POP
// end ;
65513: GO 64697
65515: POP
65516: POP
// end ;
65517: LD_VAR 0 1
65521: RET
// export function MC_Heal ; var i , j , tmp ; begin
65522: LD_INT 0
65524: PPUSH
65525: PPUSH
65526: PPUSH
65527: PPUSH
// if not mc_bases then
65528: LD_EXP 44
65532: NOT
65533: IFFALSE 65537
// exit ;
65535: GO 65939
// for i = 1 to mc_bases do
65537: LD_ADDR_VAR 0 2
65541: PUSH
65542: DOUBLE
65543: LD_INT 1
65545: DEC
65546: ST_TO_ADDR
65547: LD_EXP 44
65551: PUSH
65552: FOR_TO
65553: IFFALSE 65937
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65555: LD_EXP 47
65559: PUSH
65560: LD_VAR 0 2
65564: ARRAY
65565: PUSH
65566: LD_INT 1
65568: ARRAY
65569: NOT
65570: PUSH
65571: LD_EXP 47
65575: PUSH
65576: LD_VAR 0 2
65580: ARRAY
65581: PUSH
65582: LD_INT 2
65584: ARRAY
65585: NOT
65586: AND
65587: IFFALSE 65625
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65589: LD_ADDR_EXP 48
65593: PUSH
65594: LD_EXP 48
65598: PPUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: EMPTY
65605: PPUSH
65606: CALL_OW 1
65610: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65611: LD_VAR 0 2
65615: PPUSH
65616: LD_INT 102
65618: PPUSH
65619: CALL 59786 0 2
// continue ;
65623: GO 65552
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65625: LD_ADDR_VAR 0 4
65629: PUSH
65630: LD_EXP 44
65634: PUSH
65635: LD_VAR 0 2
65639: ARRAY
65640: PPUSH
65641: LD_INT 25
65643: PUSH
65644: LD_INT 4
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PPUSH
65651: CALL_OW 72
65655: ST_TO_ADDR
// if not tmp then
65656: LD_VAR 0 4
65660: NOT
65661: IFFALSE 65665
// continue ;
65663: GO 65552
// if mc_taming [ i ] then
65665: LD_EXP 75
65669: PUSH
65670: LD_VAR 0 2
65674: ARRAY
65675: IFFALSE 65699
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65677: LD_ADDR_EXP 75
65681: PUSH
65682: LD_EXP 75
65686: PPUSH
65687: LD_VAR 0 2
65691: PPUSH
65692: EMPTY
65693: PPUSH
65694: CALL_OW 1
65698: ST_TO_ADDR
// for j in tmp do
65699: LD_ADDR_VAR 0 3
65703: PUSH
65704: LD_VAR 0 4
65708: PUSH
65709: FOR_IN
65710: IFFALSE 65933
// begin if IsInUnit ( j ) then
65712: LD_VAR 0 3
65716: PPUSH
65717: CALL_OW 310
65721: IFFALSE 65732
// ComExitBuilding ( j ) ;
65723: LD_VAR 0 3
65727: PPUSH
65728: CALL_OW 122
// if not j in mc_healers [ i ] then
65732: LD_VAR 0 3
65736: PUSH
65737: LD_EXP 48
65741: PUSH
65742: LD_VAR 0 2
65746: ARRAY
65747: IN
65748: NOT
65749: IFFALSE 65795
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65751: LD_ADDR_EXP 48
65755: PUSH
65756: LD_EXP 48
65760: PPUSH
65761: LD_VAR 0 2
65765: PUSH
65766: LD_EXP 48
65770: PUSH
65771: LD_VAR 0 2
65775: ARRAY
65776: PUSH
65777: LD_INT 1
65779: PLUS
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PPUSH
65785: LD_VAR 0 3
65789: PPUSH
65790: CALL 24301 0 3
65794: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65795: LD_VAR 0 3
65799: PPUSH
65800: CALL_OW 110
65804: PUSH
65805: LD_INT 102
65807: NONEQUAL
65808: IFFALSE 65822
// SetTag ( j , 102 ) ;
65810: LD_VAR 0 3
65814: PPUSH
65815: LD_INT 102
65817: PPUSH
65818: CALL_OW 109
// Wait ( 3 ) ;
65822: LD_INT 3
65824: PPUSH
65825: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65829: LD_EXP 47
65833: PUSH
65834: LD_VAR 0 2
65838: ARRAY
65839: PUSH
65840: LD_INT 1
65842: ARRAY
65843: IFFALSE 65875
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65845: LD_VAR 0 3
65849: PPUSH
65850: LD_EXP 47
65854: PUSH
65855: LD_VAR 0 2
65859: ARRAY
65860: PUSH
65861: LD_INT 1
65863: ARRAY
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PPUSH
65869: CALL_OW 128
65873: GO 65931
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
65875: LD_VAR 0 3
65879: PPUSH
65880: CALL_OW 314
65884: NOT
65885: PUSH
65886: LD_EXP 47
65890: PUSH
65891: LD_VAR 0 2
65895: ARRAY
65896: PUSH
65897: LD_INT 2
65899: ARRAY
65900: AND
65901: IFFALSE 65931
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
65903: LD_VAR 0 3
65907: PPUSH
65908: LD_EXP 47
65912: PUSH
65913: LD_VAR 0 2
65917: ARRAY
65918: PUSH
65919: LD_INT 2
65921: ARRAY
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PPUSH
65927: CALL_OW 128
// end ;
65931: GO 65709
65933: POP
65934: POP
// end ;
65935: GO 65552
65937: POP
65938: POP
// end ;
65939: LD_VAR 0 1
65943: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
65944: LD_INT 0
65946: PPUSH
65947: PPUSH
65948: PPUSH
65949: PPUSH
65950: PPUSH
// if not mc_bases then
65951: LD_EXP 44
65955: NOT
65956: IFFALSE 65960
// exit ;
65958: GO 67103
// for i = 1 to mc_bases do
65960: LD_ADDR_VAR 0 2
65964: PUSH
65965: DOUBLE
65966: LD_INT 1
65968: DEC
65969: ST_TO_ADDR
65970: LD_EXP 44
65974: PUSH
65975: FOR_TO
65976: IFFALSE 67101
// begin if mc_scan [ i ] then
65978: LD_EXP 67
65982: PUSH
65983: LD_VAR 0 2
65987: ARRAY
65988: IFFALSE 65992
// continue ;
65990: GO 65975
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
65992: LD_EXP 49
65996: PUSH
65997: LD_VAR 0 2
66001: ARRAY
66002: NOT
66003: PUSH
66004: LD_EXP 51
66008: PUSH
66009: LD_VAR 0 2
66013: ARRAY
66014: NOT
66015: AND
66016: PUSH
66017: LD_EXP 50
66021: PUSH
66022: LD_VAR 0 2
66026: ARRAY
66027: AND
66028: IFFALSE 66066
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66030: LD_ADDR_EXP 50
66034: PUSH
66035: LD_EXP 50
66039: PPUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: EMPTY
66046: PPUSH
66047: CALL_OW 1
66051: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66052: LD_VAR 0 2
66056: PPUSH
66057: LD_INT 103
66059: PPUSH
66060: CALL 59786 0 2
// continue ;
66064: GO 65975
// end ; if mc_construct_list [ i ] then
66066: LD_EXP 51
66070: PUSH
66071: LD_VAR 0 2
66075: ARRAY
66076: IFFALSE 66296
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66078: LD_ADDR_VAR 0 4
66082: PUSH
66083: LD_EXP 44
66087: PUSH
66088: LD_VAR 0 2
66092: ARRAY
66093: PPUSH
66094: LD_INT 25
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PPUSH
66104: CALL_OW 72
66108: PUSH
66109: LD_EXP 46
66113: PUSH
66114: LD_VAR 0 2
66118: ARRAY
66119: DIFF
66120: ST_TO_ADDR
// if not tmp then
66121: LD_VAR 0 4
66125: NOT
66126: IFFALSE 66130
// continue ;
66128: GO 65975
// for j in tmp do
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_VAR 0 4
66139: PUSH
66140: FOR_IN
66141: IFFALSE 66292
// begin if not mc_builders [ i ] then
66143: LD_EXP 50
66147: PUSH
66148: LD_VAR 0 2
66152: ARRAY
66153: NOT
66154: IFFALSE 66212
// begin SetTag ( j , 103 ) ;
66156: LD_VAR 0 3
66160: PPUSH
66161: LD_INT 103
66163: PPUSH
66164: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66168: LD_ADDR_EXP 50
66172: PUSH
66173: LD_EXP 50
66177: PPUSH
66178: LD_VAR 0 2
66182: PUSH
66183: LD_EXP 50
66187: PUSH
66188: LD_VAR 0 2
66192: ARRAY
66193: PUSH
66194: LD_INT 1
66196: PLUS
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PPUSH
66202: LD_VAR 0 3
66206: PPUSH
66207: CALL 24301 0 3
66211: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66212: LD_VAR 0 3
66216: PPUSH
66217: CALL_OW 310
66221: IFFALSE 66232
// ComExitBuilding ( j ) ;
66223: LD_VAR 0 3
66227: PPUSH
66228: CALL_OW 122
// wait ( 3 ) ;
66232: LD_INT 3
66234: PPUSH
66235: CALL_OW 67
// if not mc_construct_list [ i ] then
66239: LD_EXP 51
66243: PUSH
66244: LD_VAR 0 2
66248: ARRAY
66249: NOT
66250: IFFALSE 66254
// break ;
66252: GO 66292
// if not HasTask ( j ) then
66254: LD_VAR 0 3
66258: PPUSH
66259: CALL_OW 314
66263: NOT
66264: IFFALSE 66290
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66266: LD_VAR 0 3
66270: PPUSH
66271: LD_EXP 51
66275: PUSH
66276: LD_VAR 0 2
66280: ARRAY
66281: PUSH
66282: LD_INT 1
66284: ARRAY
66285: PPUSH
66286: CALL 27152 0 2
// end ;
66290: GO 66140
66292: POP
66293: POP
// end else
66294: GO 67099
// if mc_build_list [ i ] then
66296: LD_EXP 49
66300: PUSH
66301: LD_VAR 0 2
66305: ARRAY
66306: IFFALSE 67099
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66308: LD_ADDR_VAR 0 5
66312: PUSH
66313: LD_EXP 44
66317: PUSH
66318: LD_VAR 0 2
66322: ARRAY
66323: PPUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 30
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 30
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PPUSH
66352: CALL_OW 72
66356: ST_TO_ADDR
// if depot then
66357: LD_VAR 0 5
66361: IFFALSE 66379
// depot := depot [ 1 ] else
66363: LD_ADDR_VAR 0 5
66367: PUSH
66368: LD_VAR 0 5
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: ST_TO_ADDR
66377: GO 66387
// depot := 0 ;
66379: LD_ADDR_VAR 0 5
66383: PUSH
66384: LD_INT 0
66386: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66387: LD_EXP 49
66391: PUSH
66392: LD_VAR 0 2
66396: ARRAY
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PUSH
66402: LD_INT 1
66404: ARRAY
66405: PPUSH
66406: CALL 26982 0 1
66410: PUSH
66411: LD_EXP 44
66415: PUSH
66416: LD_VAR 0 2
66420: ARRAY
66421: PPUSH
66422: LD_INT 2
66424: PUSH
66425: LD_INT 30
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 30
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: LIST
66449: PPUSH
66450: CALL_OW 72
66454: NOT
66455: AND
66456: IFFALSE 66561
// begin for j = 1 to mc_build_list [ i ] do
66458: LD_ADDR_VAR 0 3
66462: PUSH
66463: DOUBLE
66464: LD_INT 1
66466: DEC
66467: ST_TO_ADDR
66468: LD_EXP 49
66472: PUSH
66473: LD_VAR 0 2
66477: ARRAY
66478: PUSH
66479: FOR_TO
66480: IFFALSE 66559
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66482: LD_EXP 49
66486: PUSH
66487: LD_VAR 0 2
66491: ARRAY
66492: PUSH
66493: LD_VAR 0 3
66497: ARRAY
66498: PUSH
66499: LD_INT 1
66501: ARRAY
66502: PUSH
66503: LD_INT 2
66505: EQUAL
66506: IFFALSE 66557
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66508: LD_ADDR_EXP 49
66512: PUSH
66513: LD_EXP 49
66517: PPUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: LD_EXP 49
66527: PUSH
66528: LD_VAR 0 2
66532: ARRAY
66533: PPUSH
66534: LD_VAR 0 3
66538: PPUSH
66539: LD_INT 1
66541: PPUSH
66542: LD_INT 0
66544: PPUSH
66545: CALL 23719 0 4
66549: PPUSH
66550: CALL_OW 1
66554: ST_TO_ADDR
// break ;
66555: GO 66559
// end ;
66557: GO 66479
66559: POP
66560: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66561: LD_EXP 49
66565: PUSH
66566: LD_VAR 0 2
66570: ARRAY
66571: PUSH
66572: LD_INT 1
66574: ARRAY
66575: PUSH
66576: LD_INT 1
66578: ARRAY
66579: PUSH
66580: LD_INT 0
66582: EQUAL
66583: PUSH
66584: LD_VAR 0 5
66588: PUSH
66589: LD_VAR 0 5
66593: PPUSH
66594: LD_EXP 49
66598: PUSH
66599: LD_VAR 0 2
66603: ARRAY
66604: PUSH
66605: LD_INT 1
66607: ARRAY
66608: PUSH
66609: LD_INT 1
66611: ARRAY
66612: PPUSH
66613: LD_EXP 49
66617: PUSH
66618: LD_VAR 0 2
66622: ARRAY
66623: PUSH
66624: LD_INT 1
66626: ARRAY
66627: PUSH
66628: LD_INT 2
66630: ARRAY
66631: PPUSH
66632: LD_EXP 49
66636: PUSH
66637: LD_VAR 0 2
66641: ARRAY
66642: PUSH
66643: LD_INT 1
66645: ARRAY
66646: PUSH
66647: LD_INT 3
66649: ARRAY
66650: PPUSH
66651: LD_EXP 49
66655: PUSH
66656: LD_VAR 0 2
66660: ARRAY
66661: PUSH
66662: LD_INT 1
66664: ARRAY
66665: PUSH
66666: LD_INT 4
66668: ARRAY
66669: PPUSH
66670: CALL 31716 0 5
66674: AND
66675: OR
66676: IFFALSE 66957
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66678: LD_ADDR_VAR 0 4
66682: PUSH
66683: LD_EXP 44
66687: PUSH
66688: LD_VAR 0 2
66692: ARRAY
66693: PPUSH
66694: LD_INT 25
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PPUSH
66704: CALL_OW 72
66708: PUSH
66709: LD_EXP 46
66713: PUSH
66714: LD_VAR 0 2
66718: ARRAY
66719: DIFF
66720: ST_TO_ADDR
// if not tmp then
66721: LD_VAR 0 4
66725: NOT
66726: IFFALSE 66730
// continue ;
66728: GO 65975
// for j in tmp do
66730: LD_ADDR_VAR 0 3
66734: PUSH
66735: LD_VAR 0 4
66739: PUSH
66740: FOR_IN
66741: IFFALSE 66953
// begin if not mc_builders [ i ] then
66743: LD_EXP 50
66747: PUSH
66748: LD_VAR 0 2
66752: ARRAY
66753: NOT
66754: IFFALSE 66812
// begin SetTag ( j , 103 ) ;
66756: LD_VAR 0 3
66760: PPUSH
66761: LD_INT 103
66763: PPUSH
66764: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66768: LD_ADDR_EXP 50
66772: PUSH
66773: LD_EXP 50
66777: PPUSH
66778: LD_VAR 0 2
66782: PUSH
66783: LD_EXP 50
66787: PUSH
66788: LD_VAR 0 2
66792: ARRAY
66793: PUSH
66794: LD_INT 1
66796: PLUS
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PPUSH
66802: LD_VAR 0 3
66806: PPUSH
66807: CALL 24301 0 3
66811: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66812: LD_VAR 0 3
66816: PPUSH
66817: CALL_OW 310
66821: IFFALSE 66832
// ComExitBuilding ( j ) ;
66823: LD_VAR 0 3
66827: PPUSH
66828: CALL_OW 122
// wait ( 3 ) ;
66832: LD_INT 3
66834: PPUSH
66835: CALL_OW 67
// if not mc_build_list [ i ] then
66839: LD_EXP 49
66843: PUSH
66844: LD_VAR 0 2
66848: ARRAY
66849: NOT
66850: IFFALSE 66854
// break ;
66852: GO 66953
// if not HasTask ( j ) then
66854: LD_VAR 0 3
66858: PPUSH
66859: CALL_OW 314
66863: NOT
66864: IFFALSE 66951
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66866: LD_VAR 0 3
66870: PPUSH
66871: LD_EXP 49
66875: PUSH
66876: LD_VAR 0 2
66880: ARRAY
66881: PUSH
66882: LD_INT 1
66884: ARRAY
66885: PUSH
66886: LD_INT 1
66888: ARRAY
66889: PPUSH
66890: LD_EXP 49
66894: PUSH
66895: LD_VAR 0 2
66899: ARRAY
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PUSH
66905: LD_INT 2
66907: ARRAY
66908: PPUSH
66909: LD_EXP 49
66913: PUSH
66914: LD_VAR 0 2
66918: ARRAY
66919: PUSH
66920: LD_INT 1
66922: ARRAY
66923: PUSH
66924: LD_INT 3
66926: ARRAY
66927: PPUSH
66928: LD_EXP 49
66932: PUSH
66933: LD_VAR 0 2
66937: ARRAY
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: PUSH
66943: LD_INT 4
66945: ARRAY
66946: PPUSH
66947: CALL_OW 145
// end ;
66951: GO 66740
66953: POP
66954: POP
// end else
66955: GO 67099
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
66957: LD_EXP 44
66961: PUSH
66962: LD_VAR 0 2
66966: ARRAY
66967: PPUSH
66968: LD_EXP 49
66972: PUSH
66973: LD_VAR 0 2
66977: ARRAY
66978: PUSH
66979: LD_INT 1
66981: ARRAY
66982: PUSH
66983: LD_INT 1
66985: ARRAY
66986: PPUSH
66987: LD_EXP 49
66991: PUSH
66992: LD_VAR 0 2
66996: ARRAY
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PUSH
67002: LD_INT 2
67004: ARRAY
67005: PPUSH
67006: LD_EXP 49
67010: PUSH
67011: LD_VAR 0 2
67015: ARRAY
67016: PUSH
67017: LD_INT 1
67019: ARRAY
67020: PUSH
67021: LD_INT 3
67023: ARRAY
67024: PPUSH
67025: LD_EXP 49
67029: PUSH
67030: LD_VAR 0 2
67034: ARRAY
67035: PUSH
67036: LD_INT 1
67038: ARRAY
67039: PUSH
67040: LD_INT 4
67042: ARRAY
67043: PPUSH
67044: CALL 31052 0 5
67048: NOT
67049: IFFALSE 67099
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67051: LD_ADDR_EXP 49
67055: PUSH
67056: LD_EXP 49
67060: PPUSH
67061: LD_VAR 0 2
67065: PPUSH
67066: LD_EXP 49
67070: PUSH
67071: LD_VAR 0 2
67075: ARRAY
67076: PPUSH
67077: LD_INT 1
67079: PPUSH
67080: LD_INT 1
67082: NEG
67083: PPUSH
67084: LD_INT 0
67086: PPUSH
67087: CALL 23719 0 4
67091: PPUSH
67092: CALL_OW 1
67096: ST_TO_ADDR
// continue ;
67097: GO 65975
// end ; end ; end ;
67099: GO 65975
67101: POP
67102: POP
// end ;
67103: LD_VAR 0 1
67107: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67108: LD_INT 0
67110: PPUSH
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
// if not mc_bases then
67116: LD_EXP 44
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67552
// for i = 1 to mc_bases do
67125: LD_ADDR_VAR 0 2
67129: PUSH
67130: DOUBLE
67131: LD_INT 1
67133: DEC
67134: ST_TO_ADDR
67135: LD_EXP 44
67139: PUSH
67140: FOR_TO
67141: IFFALSE 67550
// begin tmp := mc_build_upgrade [ i ] ;
67143: LD_ADDR_VAR 0 4
67147: PUSH
67148: LD_EXP 76
67152: PUSH
67153: LD_VAR 0 2
67157: ARRAY
67158: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67159: LD_ADDR_VAR 0 6
67163: PUSH
67164: LD_EXP 77
67168: PUSH
67169: LD_VAR 0 2
67173: ARRAY
67174: PPUSH
67175: LD_INT 2
67177: PUSH
67178: LD_INT 30
67180: PUSH
67181: LD_INT 6
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 30
67190: PUSH
67191: LD_INT 7
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: PPUSH
67203: CALL_OW 72
67207: ST_TO_ADDR
// if not tmp and not lab then
67208: LD_VAR 0 4
67212: NOT
67213: PUSH
67214: LD_VAR 0 6
67218: NOT
67219: AND
67220: IFFALSE 67224
// continue ;
67222: GO 67140
// if tmp then
67224: LD_VAR 0 4
67228: IFFALSE 67348
// for j in tmp do
67230: LD_ADDR_VAR 0 3
67234: PUSH
67235: LD_VAR 0 4
67239: PUSH
67240: FOR_IN
67241: IFFALSE 67346
// begin if UpgradeCost ( j ) then
67243: LD_VAR 0 3
67247: PPUSH
67248: CALL 30712 0 1
67252: IFFALSE 67344
// begin ComUpgrade ( j ) ;
67254: LD_VAR 0 3
67258: PPUSH
67259: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67263: LD_ADDR_EXP 76
67267: PUSH
67268: LD_EXP 76
67272: PPUSH
67273: LD_VAR 0 2
67277: PPUSH
67278: LD_EXP 76
67282: PUSH
67283: LD_VAR 0 2
67287: ARRAY
67288: PUSH
67289: LD_VAR 0 3
67293: DIFF
67294: PPUSH
67295: CALL_OW 1
67299: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67300: LD_ADDR_EXP 51
67304: PUSH
67305: LD_EXP 51
67309: PPUSH
67310: LD_VAR 0 2
67314: PUSH
67315: LD_EXP 51
67319: PUSH
67320: LD_VAR 0 2
67324: ARRAY
67325: PUSH
67326: LD_INT 1
67328: PLUS
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PPUSH
67334: LD_VAR 0 3
67338: PPUSH
67339: CALL 24301 0 3
67343: ST_TO_ADDR
// end ; end ;
67344: GO 67240
67346: POP
67347: POP
// if not lab or not mc_lab_upgrade [ i ] then
67348: LD_VAR 0 6
67352: NOT
67353: PUSH
67354: LD_EXP 78
67358: PUSH
67359: LD_VAR 0 2
67363: ARRAY
67364: NOT
67365: OR
67366: IFFALSE 67370
// continue ;
67368: GO 67140
// for j in lab do
67370: LD_ADDR_VAR 0 3
67374: PUSH
67375: LD_VAR 0 6
67379: PUSH
67380: FOR_IN
67381: IFFALSE 67546
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67383: LD_VAR 0 3
67387: PPUSH
67388: CALL_OW 266
67392: PUSH
67393: LD_INT 6
67395: PUSH
67396: LD_INT 7
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: IN
67403: PUSH
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 461
67413: PUSH
67414: LD_INT 1
67416: NONEQUAL
67417: AND
67418: IFFALSE 67544
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67420: LD_VAR 0 3
67424: PPUSH
67425: LD_EXP 78
67429: PUSH
67430: LD_VAR 0 2
67434: ARRAY
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: PPUSH
67440: CALL 30917 0 2
67444: IFFALSE 67544
// begin ComCancel ( j ) ;
67446: LD_VAR 0 3
67450: PPUSH
67451: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67455: LD_VAR 0 3
67459: PPUSH
67460: LD_EXP 78
67464: PUSH
67465: LD_VAR 0 2
67469: ARRAY
67470: PUSH
67471: LD_INT 1
67473: ARRAY
67474: PPUSH
67475: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67479: LD_VAR 0 3
67483: PUSH
67484: LD_EXP 51
67488: PUSH
67489: LD_VAR 0 2
67493: ARRAY
67494: IN
67495: NOT
67496: IFFALSE 67542
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67498: LD_ADDR_EXP 51
67502: PUSH
67503: LD_EXP 51
67507: PPUSH
67508: LD_VAR 0 2
67512: PUSH
67513: LD_EXP 51
67517: PUSH
67518: LD_VAR 0 2
67522: ARRAY
67523: PUSH
67524: LD_INT 1
67526: PLUS
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PPUSH
67532: LD_VAR 0 3
67536: PPUSH
67537: CALL 24301 0 3
67541: ST_TO_ADDR
// break ;
67542: GO 67546
// end ; end ; end ;
67544: GO 67380
67546: POP
67547: POP
// end ;
67548: GO 67140
67550: POP
67551: POP
// end ;
67552: LD_VAR 0 1
67556: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67557: LD_INT 0
67559: PPUSH
67560: PPUSH
67561: PPUSH
67562: PPUSH
67563: PPUSH
67564: PPUSH
67565: PPUSH
67566: PPUSH
67567: PPUSH
// if not mc_bases then
67568: LD_EXP 44
67572: NOT
67573: IFFALSE 67577
// exit ;
67575: GO 67982
// for i = 1 to mc_bases do
67577: LD_ADDR_VAR 0 2
67581: PUSH
67582: DOUBLE
67583: LD_INT 1
67585: DEC
67586: ST_TO_ADDR
67587: LD_EXP 44
67591: PUSH
67592: FOR_TO
67593: IFFALSE 67980
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67595: LD_EXP 52
67599: PUSH
67600: LD_VAR 0 2
67604: ARRAY
67605: NOT
67606: PUSH
67607: LD_EXP 44
67611: PUSH
67612: LD_VAR 0 2
67616: ARRAY
67617: PPUSH
67618: LD_INT 30
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PPUSH
67628: CALL_OW 72
67632: NOT
67633: OR
67634: IFFALSE 67638
// continue ;
67636: GO 67592
// busy := false ;
67638: LD_ADDR_VAR 0 8
67642: PUSH
67643: LD_INT 0
67645: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: LD_EXP 44
67655: PUSH
67656: LD_VAR 0 2
67660: ARRAY
67661: PPUSH
67662: LD_INT 30
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 72
67676: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67677: LD_ADDR_VAR 0 6
67681: PUSH
67682: LD_EXP 52
67686: PUSH
67687: LD_VAR 0 2
67691: ARRAY
67692: PPUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 30
67698: PUSH
67699: LD_INT 32
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 30
67708: PUSH
67709: LD_INT 33
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: LIST
67720: PPUSH
67721: CALL_OW 72
67725: ST_TO_ADDR
// if not t then
67726: LD_VAR 0 6
67730: NOT
67731: IFFALSE 67735
// continue ;
67733: GO 67592
// for j in tmp do
67735: LD_ADDR_VAR 0 3
67739: PUSH
67740: LD_VAR 0 4
67744: PUSH
67745: FOR_IN
67746: IFFALSE 67776
// if not BuildingStatus ( j ) = bs_idle then
67748: LD_VAR 0 3
67752: PPUSH
67753: CALL_OW 461
67757: PUSH
67758: LD_INT 2
67760: EQUAL
67761: NOT
67762: IFFALSE 67774
// begin busy := true ;
67764: LD_ADDR_VAR 0 8
67768: PUSH
67769: LD_INT 1
67771: ST_TO_ADDR
// break ;
67772: GO 67776
// end ;
67774: GO 67745
67776: POP
67777: POP
// if busy then
67778: LD_VAR 0 8
67782: IFFALSE 67786
// continue ;
67784: GO 67592
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67786: LD_ADDR_VAR 0 7
67790: PUSH
67791: LD_VAR 0 6
67795: PPUSH
67796: LD_INT 35
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PPUSH
67806: CALL_OW 72
67810: ST_TO_ADDR
// if tw then
67811: LD_VAR 0 7
67815: IFFALSE 67892
// begin tw := tw [ 1 ] ;
67817: LD_ADDR_VAR 0 7
67821: PUSH
67822: LD_VAR 0 7
67826: PUSH
67827: LD_INT 1
67829: ARRAY
67830: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67831: LD_ADDR_VAR 0 9
67835: PUSH
67836: LD_VAR 0 7
67840: PPUSH
67841: LD_EXP 69
67845: PUSH
67846: LD_VAR 0 2
67850: ARRAY
67851: PPUSH
67852: CALL 29271 0 2
67856: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67857: LD_EXP 83
67861: PUSH
67862: LD_VAR 0 2
67866: ARRAY
67867: IFFALSE 67890
// if not weapon in mc_allowed_tower_weapons [ i ] then
67869: LD_VAR 0 9
67873: PUSH
67874: LD_EXP 83
67878: PUSH
67879: LD_VAR 0 2
67883: ARRAY
67884: IN
67885: NOT
67886: IFFALSE 67890
// continue ;
67888: GO 67592
// end else
67890: GO 67955
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
67892: LD_ADDR_VAR 0 5
67896: PUSH
67897: LD_EXP 52
67901: PUSH
67902: LD_VAR 0 2
67906: ARRAY
67907: PPUSH
67908: LD_VAR 0 4
67912: PPUSH
67913: CALL 54773 0 2
67917: ST_TO_ADDR
// if not tmp2 then
67918: LD_VAR 0 5
67922: NOT
67923: IFFALSE 67927
// continue ;
67925: GO 67592
// tw := tmp2 [ 1 ] ;
67927: LD_ADDR_VAR 0 7
67931: PUSH
67932: LD_VAR 0 5
67936: PUSH
67937: LD_INT 1
67939: ARRAY
67940: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
67941: LD_ADDR_VAR 0 9
67945: PUSH
67946: LD_VAR 0 5
67950: PUSH
67951: LD_INT 2
67953: ARRAY
67954: ST_TO_ADDR
// end ; if not weapon then
67955: LD_VAR 0 9
67959: NOT
67960: IFFALSE 67964
// continue ;
67962: GO 67592
// ComPlaceWeapon ( tw , weapon ) ;
67964: LD_VAR 0 7
67968: PPUSH
67969: LD_VAR 0 9
67973: PPUSH
67974: CALL_OW 148
// end ;
67978: GO 67592
67980: POP
67981: POP
// end ;
67982: LD_VAR 0 1
67986: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
67987: LD_INT 0
67989: PPUSH
67990: PPUSH
67991: PPUSH
67992: PPUSH
67993: PPUSH
67994: PPUSH
// if not mc_bases then
67995: LD_EXP 44
67999: NOT
68000: IFFALSE 68004
// exit ;
68002: GO 68780
// for i = 1 to mc_bases do
68004: LD_ADDR_VAR 0 2
68008: PUSH
68009: DOUBLE
68010: LD_INT 1
68012: DEC
68013: ST_TO_ADDR
68014: LD_EXP 44
68018: PUSH
68019: FOR_TO
68020: IFFALSE 68778
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68022: LD_EXP 57
68026: PUSH
68027: LD_VAR 0 2
68031: ARRAY
68032: NOT
68033: PUSH
68034: LD_EXP 57
68038: PUSH
68039: LD_VAR 0 2
68043: ARRAY
68044: PUSH
68045: LD_EXP 58
68049: PUSH
68050: LD_VAR 0 2
68054: ARRAY
68055: EQUAL
68056: OR
68057: PUSH
68058: LD_EXP 67
68062: PUSH
68063: LD_VAR 0 2
68067: ARRAY
68068: OR
68069: IFFALSE 68073
// continue ;
68071: GO 68019
// if mc_miners [ i ] then
68073: LD_EXP 58
68077: PUSH
68078: LD_VAR 0 2
68082: ARRAY
68083: IFFALSE 68465
// begin for j = mc_miners [ i ] downto 1 do
68085: LD_ADDR_VAR 0 3
68089: PUSH
68090: DOUBLE
68091: LD_EXP 58
68095: PUSH
68096: LD_VAR 0 2
68100: ARRAY
68101: INC
68102: ST_TO_ADDR
68103: LD_INT 1
68105: PUSH
68106: FOR_DOWNTO
68107: IFFALSE 68463
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68109: LD_EXP 58
68113: PUSH
68114: LD_VAR 0 2
68118: ARRAY
68119: PUSH
68120: LD_VAR 0 3
68124: ARRAY
68125: PPUSH
68126: CALL_OW 301
68130: PUSH
68131: LD_EXP 58
68135: PUSH
68136: LD_VAR 0 2
68140: ARRAY
68141: PUSH
68142: LD_VAR 0 3
68146: ARRAY
68147: PPUSH
68148: CALL_OW 257
68152: PUSH
68153: LD_INT 1
68155: NONEQUAL
68156: OR
68157: IFFALSE 68220
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68159: LD_ADDR_VAR 0 5
68163: PUSH
68164: LD_EXP 58
68168: PUSH
68169: LD_VAR 0 2
68173: ARRAY
68174: PUSH
68175: LD_EXP 58
68179: PUSH
68180: LD_VAR 0 2
68184: ARRAY
68185: PUSH
68186: LD_VAR 0 3
68190: ARRAY
68191: DIFF
68192: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68193: LD_ADDR_EXP 58
68197: PUSH
68198: LD_EXP 58
68202: PPUSH
68203: LD_VAR 0 2
68207: PPUSH
68208: LD_VAR 0 5
68212: PPUSH
68213: CALL_OW 1
68217: ST_TO_ADDR
// continue ;
68218: GO 68106
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68220: LD_EXP 58
68224: PUSH
68225: LD_VAR 0 2
68229: ARRAY
68230: PUSH
68231: LD_VAR 0 3
68235: ARRAY
68236: PPUSH
68237: CALL_OW 257
68241: PUSH
68242: LD_INT 1
68244: EQUAL
68245: PUSH
68246: LD_EXP 58
68250: PUSH
68251: LD_VAR 0 2
68255: ARRAY
68256: PUSH
68257: LD_VAR 0 3
68261: ARRAY
68262: PPUSH
68263: CALL_OW 459
68267: NOT
68268: AND
68269: PUSH
68270: LD_EXP 58
68274: PUSH
68275: LD_VAR 0 2
68279: ARRAY
68280: PUSH
68281: LD_VAR 0 3
68285: ARRAY
68286: PPUSH
68287: CALL_OW 314
68291: NOT
68292: AND
68293: IFFALSE 68461
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68295: LD_EXP 58
68299: PUSH
68300: LD_VAR 0 2
68304: ARRAY
68305: PUSH
68306: LD_VAR 0 3
68310: ARRAY
68311: PPUSH
68312: CALL_OW 310
68316: IFFALSE 68339
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68318: LD_EXP 58
68322: PUSH
68323: LD_VAR 0 2
68327: ARRAY
68328: PUSH
68329: LD_VAR 0 3
68333: ARRAY
68334: PPUSH
68335: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68339: LD_EXP 58
68343: PUSH
68344: LD_VAR 0 2
68348: ARRAY
68349: PUSH
68350: LD_VAR 0 3
68354: ARRAY
68355: PPUSH
68356: CALL_OW 314
68360: NOT
68361: IFFALSE 68461
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68363: LD_EXP 58
68367: PUSH
68368: LD_VAR 0 2
68372: ARRAY
68373: PUSH
68374: LD_VAR 0 3
68378: ARRAY
68379: PPUSH
68380: LD_EXP 57
68384: PUSH
68385: LD_VAR 0 2
68389: ARRAY
68390: PUSH
68391: LD_VAR 0 3
68395: PUSH
68396: LD_EXP 57
68400: PUSH
68401: LD_VAR 0 2
68405: ARRAY
68406: MOD
68407: PUSH
68408: LD_INT 1
68410: PLUS
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_EXP 57
68421: PUSH
68422: LD_VAR 0 2
68426: ARRAY
68427: PUSH
68428: LD_VAR 0 3
68432: PUSH
68433: LD_EXP 57
68437: PUSH
68438: LD_VAR 0 2
68442: ARRAY
68443: MOD
68444: PUSH
68445: LD_INT 1
68447: PLUS
68448: ARRAY
68449: PUSH
68450: LD_INT 2
68452: ARRAY
68453: PPUSH
68454: LD_INT 0
68456: PPUSH
68457: CALL_OW 193
// end ; end ;
68461: GO 68106
68463: POP
68464: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68465: LD_ADDR_VAR 0 5
68469: PUSH
68470: LD_EXP 44
68474: PUSH
68475: LD_VAR 0 2
68479: ARRAY
68480: PPUSH
68481: LD_INT 2
68483: PUSH
68484: LD_INT 30
68486: PUSH
68487: LD_INT 4
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 30
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 30
68506: PUSH
68507: LD_INT 32
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: PPUSH
68520: CALL_OW 72
68524: ST_TO_ADDR
// if not tmp then
68525: LD_VAR 0 5
68529: NOT
68530: IFFALSE 68534
// continue ;
68532: GO 68019
// list := [ ] ;
68534: LD_ADDR_VAR 0 6
68538: PUSH
68539: EMPTY
68540: ST_TO_ADDR
// for j in tmp do
68541: LD_ADDR_VAR 0 3
68545: PUSH
68546: LD_VAR 0 5
68550: PUSH
68551: FOR_IN
68552: IFFALSE 68621
// begin for k in UnitsInside ( j ) do
68554: LD_ADDR_VAR 0 4
68558: PUSH
68559: LD_VAR 0 3
68563: PPUSH
68564: CALL_OW 313
68568: PUSH
68569: FOR_IN
68570: IFFALSE 68617
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68572: LD_VAR 0 4
68576: PPUSH
68577: CALL_OW 257
68581: PUSH
68582: LD_INT 1
68584: EQUAL
68585: PUSH
68586: LD_VAR 0 4
68590: PPUSH
68591: CALL_OW 459
68595: NOT
68596: AND
68597: IFFALSE 68615
// list := list ^ k ;
68599: LD_ADDR_VAR 0 6
68603: PUSH
68604: LD_VAR 0 6
68608: PUSH
68609: LD_VAR 0 4
68613: ADD
68614: ST_TO_ADDR
68615: GO 68569
68617: POP
68618: POP
// end ;
68619: GO 68551
68621: POP
68622: POP
// list := list diff mc_miners [ i ] ;
68623: LD_ADDR_VAR 0 6
68627: PUSH
68628: LD_VAR 0 6
68632: PUSH
68633: LD_EXP 58
68637: PUSH
68638: LD_VAR 0 2
68642: ARRAY
68643: DIFF
68644: ST_TO_ADDR
// if not list then
68645: LD_VAR 0 6
68649: NOT
68650: IFFALSE 68654
// continue ;
68652: GO 68019
// k := mc_mines [ i ] - mc_miners [ i ] ;
68654: LD_ADDR_VAR 0 4
68658: PUSH
68659: LD_EXP 57
68663: PUSH
68664: LD_VAR 0 2
68668: ARRAY
68669: PUSH
68670: LD_EXP 58
68674: PUSH
68675: LD_VAR 0 2
68679: ARRAY
68680: MINUS
68681: ST_TO_ADDR
// if k > list then
68682: LD_VAR 0 4
68686: PUSH
68687: LD_VAR 0 6
68691: GREATER
68692: IFFALSE 68704
// k := list ;
68694: LD_ADDR_VAR 0 4
68698: PUSH
68699: LD_VAR 0 6
68703: ST_TO_ADDR
// for j = 1 to k do
68704: LD_ADDR_VAR 0 3
68708: PUSH
68709: DOUBLE
68710: LD_INT 1
68712: DEC
68713: ST_TO_ADDR
68714: LD_VAR 0 4
68718: PUSH
68719: FOR_TO
68720: IFFALSE 68774
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68722: LD_ADDR_EXP 58
68726: PUSH
68727: LD_EXP 58
68731: PPUSH
68732: LD_VAR 0 2
68736: PUSH
68737: LD_EXP 58
68741: PUSH
68742: LD_VAR 0 2
68746: ARRAY
68747: PUSH
68748: LD_INT 1
68750: PLUS
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PPUSH
68756: LD_VAR 0 6
68760: PUSH
68761: LD_VAR 0 3
68765: ARRAY
68766: PPUSH
68767: CALL 24301 0 3
68771: ST_TO_ADDR
68772: GO 68719
68774: POP
68775: POP
// end ;
68776: GO 68019
68778: POP
68779: POP
// end ;
68780: LD_VAR 0 1
68784: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68785: LD_INT 0
68787: PPUSH
68788: PPUSH
68789: PPUSH
68790: PPUSH
68791: PPUSH
68792: PPUSH
68793: PPUSH
68794: PPUSH
68795: PPUSH
68796: PPUSH
// if not mc_bases then
68797: LD_EXP 44
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 70556
// for i = 1 to mc_bases do
68806: LD_ADDR_VAR 0 2
68810: PUSH
68811: DOUBLE
68812: LD_INT 1
68814: DEC
68815: ST_TO_ADDR
68816: LD_EXP 44
68820: PUSH
68821: FOR_TO
68822: IFFALSE 70554
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68824: LD_EXP 44
68828: PUSH
68829: LD_VAR 0 2
68833: ARRAY
68834: NOT
68835: PUSH
68836: LD_EXP 51
68840: PUSH
68841: LD_VAR 0 2
68845: ARRAY
68846: OR
68847: IFFALSE 68851
// continue ;
68849: GO 68821
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68851: LD_EXP 60
68855: PUSH
68856: LD_VAR 0 2
68860: ARRAY
68861: NOT
68862: PUSH
68863: LD_EXP 61
68867: PUSH
68868: LD_VAR 0 2
68872: ARRAY
68873: AND
68874: IFFALSE 68912
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
68876: LD_ADDR_EXP 61
68880: PUSH
68881: LD_EXP 61
68885: PPUSH
68886: LD_VAR 0 2
68890: PPUSH
68891: EMPTY
68892: PPUSH
68893: CALL_OW 1
68897: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
68898: LD_VAR 0 2
68902: PPUSH
68903: LD_INT 107
68905: PPUSH
68906: CALL 59786 0 2
// continue ;
68910: GO 68821
// end ; target := [ ] ;
68912: LD_ADDR_VAR 0 6
68916: PUSH
68917: EMPTY
68918: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
68919: LD_ADDR_VAR 0 3
68923: PUSH
68924: DOUBLE
68925: LD_EXP 60
68929: PUSH
68930: LD_VAR 0 2
68934: ARRAY
68935: INC
68936: ST_TO_ADDR
68937: LD_INT 1
68939: PUSH
68940: FOR_DOWNTO
68941: IFFALSE 69201
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
68943: LD_EXP 60
68947: PUSH
68948: LD_VAR 0 2
68952: ARRAY
68953: PUSH
68954: LD_VAR 0 3
68958: ARRAY
68959: PUSH
68960: LD_INT 2
68962: ARRAY
68963: PPUSH
68964: LD_EXP 60
68968: PUSH
68969: LD_VAR 0 2
68973: ARRAY
68974: PUSH
68975: LD_VAR 0 3
68979: ARRAY
68980: PUSH
68981: LD_INT 3
68983: ARRAY
68984: PPUSH
68985: CALL_OW 488
68989: PUSH
68990: LD_EXP 60
68994: PUSH
68995: LD_VAR 0 2
68999: ARRAY
69000: PUSH
69001: LD_VAR 0 3
69005: ARRAY
69006: PUSH
69007: LD_INT 2
69009: ARRAY
69010: PPUSH
69011: LD_EXP 60
69015: PUSH
69016: LD_VAR 0 2
69020: ARRAY
69021: PUSH
69022: LD_VAR 0 3
69026: ARRAY
69027: PUSH
69028: LD_INT 3
69030: ARRAY
69031: PPUSH
69032: CALL_OW 284
69036: PUSH
69037: LD_INT 0
69039: EQUAL
69040: AND
69041: IFFALSE 69096
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69043: LD_ADDR_VAR 0 5
69047: PUSH
69048: LD_EXP 60
69052: PUSH
69053: LD_VAR 0 2
69057: ARRAY
69058: PPUSH
69059: LD_VAR 0 3
69063: PPUSH
69064: CALL_OW 3
69068: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69069: LD_ADDR_EXP 60
69073: PUSH
69074: LD_EXP 60
69078: PPUSH
69079: LD_VAR 0 2
69083: PPUSH
69084: LD_VAR 0 5
69088: PPUSH
69089: CALL_OW 1
69093: ST_TO_ADDR
// continue ;
69094: GO 68940
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69096: LD_EXP 44
69100: PUSH
69101: LD_VAR 0 2
69105: ARRAY
69106: PUSH
69107: LD_INT 1
69109: ARRAY
69110: PPUSH
69111: CALL_OW 255
69115: PPUSH
69116: LD_EXP 60
69120: PUSH
69121: LD_VAR 0 2
69125: ARRAY
69126: PUSH
69127: LD_VAR 0 3
69131: ARRAY
69132: PUSH
69133: LD_INT 2
69135: ARRAY
69136: PPUSH
69137: LD_EXP 60
69141: PUSH
69142: LD_VAR 0 2
69146: ARRAY
69147: PUSH
69148: LD_VAR 0 3
69152: ARRAY
69153: PUSH
69154: LD_INT 3
69156: ARRAY
69157: PPUSH
69158: LD_INT 30
69160: PPUSH
69161: CALL 25197 0 4
69165: PUSH
69166: LD_INT 4
69168: ARRAY
69169: PUSH
69170: LD_INT 0
69172: EQUAL
69173: IFFALSE 69199
// begin target := mc_crates [ i ] [ j ] ;
69175: LD_ADDR_VAR 0 6
69179: PUSH
69180: LD_EXP 60
69184: PUSH
69185: LD_VAR 0 2
69189: ARRAY
69190: PUSH
69191: LD_VAR 0 3
69195: ARRAY
69196: ST_TO_ADDR
// break ;
69197: GO 69201
// end ; end ;
69199: GO 68940
69201: POP
69202: POP
// if not target then
69203: LD_VAR 0 6
69207: NOT
69208: IFFALSE 69212
// continue ;
69210: GO 68821
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69212: LD_ADDR_VAR 0 7
69216: PUSH
69217: LD_EXP 63
69221: PUSH
69222: LD_VAR 0 2
69226: ARRAY
69227: PPUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: LD_INT 58
69236: PUSH
69237: EMPTY
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 61
69246: PUSH
69247: EMPTY
69248: LIST
69249: PUSH
69250: LD_INT 33
69252: PUSH
69253: LD_INT 5
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 33
69262: PUSH
69263: LD_INT 3
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: PUSH
69280: LD_INT 34
69282: PUSH
69283: LD_INT 32
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 34
69292: PUSH
69293: LD_INT 51
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 34
69302: PUSH
69303: LD_INT 12
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PPUSH
69320: CALL_OW 72
69324: ST_TO_ADDR
// if not cargo then
69325: LD_VAR 0 7
69329: NOT
69330: IFFALSE 69973
// begin if mc_crates_collector [ i ] < 5 then
69332: LD_EXP 61
69336: PUSH
69337: LD_VAR 0 2
69341: ARRAY
69342: PUSH
69343: LD_INT 5
69345: LESS
69346: IFFALSE 69712
// begin if mc_ape [ i ] then
69348: LD_EXP 73
69352: PUSH
69353: LD_VAR 0 2
69357: ARRAY
69358: IFFALSE 69405
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69360: LD_ADDR_VAR 0 5
69364: PUSH
69365: LD_EXP 73
69369: PUSH
69370: LD_VAR 0 2
69374: ARRAY
69375: PPUSH
69376: LD_INT 25
69378: PUSH
69379: LD_INT 16
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 24
69388: PUSH
69389: LD_INT 750
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PPUSH
69400: CALL_OW 72
69404: ST_TO_ADDR
// if not tmp then
69405: LD_VAR 0 5
69409: NOT
69410: IFFALSE 69457
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69412: LD_ADDR_VAR 0 5
69416: PUSH
69417: LD_EXP 44
69421: PUSH
69422: LD_VAR 0 2
69426: ARRAY
69427: PPUSH
69428: LD_INT 25
69430: PUSH
69431: LD_INT 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 24
69440: PUSH
69441: LD_INT 750
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PPUSH
69452: CALL_OW 72
69456: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69457: LD_EXP 73
69461: PUSH
69462: LD_VAR 0 2
69466: ARRAY
69467: PUSH
69468: LD_EXP 44
69472: PUSH
69473: LD_VAR 0 2
69477: ARRAY
69478: PPUSH
69479: LD_INT 25
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 24
69491: PUSH
69492: LD_INT 750
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PPUSH
69503: CALL_OW 72
69507: AND
69508: PUSH
69509: LD_VAR 0 5
69513: PUSH
69514: LD_INT 5
69516: LESS
69517: AND
69518: IFFALSE 69600
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69520: LD_ADDR_VAR 0 3
69524: PUSH
69525: LD_EXP 44
69529: PUSH
69530: LD_VAR 0 2
69534: ARRAY
69535: PPUSH
69536: LD_INT 25
69538: PUSH
69539: LD_INT 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 24
69548: PUSH
69549: LD_INT 750
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PPUSH
69560: CALL_OW 72
69564: PUSH
69565: FOR_IN
69566: IFFALSE 69598
// begin tmp := tmp union j ;
69568: LD_ADDR_VAR 0 5
69572: PUSH
69573: LD_VAR 0 5
69577: PUSH
69578: LD_VAR 0 3
69582: UNION
69583: ST_TO_ADDR
// if tmp >= 5 then
69584: LD_VAR 0 5
69588: PUSH
69589: LD_INT 5
69591: GREATEREQUAL
69592: IFFALSE 69596
// break ;
69594: GO 69598
// end ;
69596: GO 69565
69598: POP
69599: POP
// end ; if not tmp then
69600: LD_VAR 0 5
69604: NOT
69605: IFFALSE 69609
// continue ;
69607: GO 68821
// for j in tmp do
69609: LD_ADDR_VAR 0 3
69613: PUSH
69614: LD_VAR 0 5
69618: PUSH
69619: FOR_IN
69620: IFFALSE 69710
// if not GetTag ( j ) then
69622: LD_VAR 0 3
69626: PPUSH
69627: CALL_OW 110
69631: NOT
69632: IFFALSE 69708
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69634: LD_ADDR_EXP 61
69638: PUSH
69639: LD_EXP 61
69643: PPUSH
69644: LD_VAR 0 2
69648: PUSH
69649: LD_EXP 61
69653: PUSH
69654: LD_VAR 0 2
69658: ARRAY
69659: PUSH
69660: LD_INT 1
69662: PLUS
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PPUSH
69668: LD_VAR 0 3
69672: PPUSH
69673: CALL 24301 0 3
69677: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69678: LD_VAR 0 3
69682: PPUSH
69683: LD_INT 107
69685: PPUSH
69686: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69690: LD_EXP 61
69694: PUSH
69695: LD_VAR 0 2
69699: ARRAY
69700: PUSH
69701: LD_INT 5
69703: GREATEREQUAL
69704: IFFALSE 69708
// break ;
69706: GO 69710
// end ;
69708: GO 69619
69710: POP
69711: POP
// end ; if mc_crates_collector [ i ] and target then
69712: LD_EXP 61
69716: PUSH
69717: LD_VAR 0 2
69721: ARRAY
69722: PUSH
69723: LD_VAR 0 6
69727: AND
69728: IFFALSE 69971
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69730: LD_EXP 61
69734: PUSH
69735: LD_VAR 0 2
69739: ARRAY
69740: PUSH
69741: LD_VAR 0 6
69745: PUSH
69746: LD_INT 1
69748: ARRAY
69749: LESS
69750: IFFALSE 69770
// tmp := mc_crates_collector [ i ] else
69752: LD_ADDR_VAR 0 5
69756: PUSH
69757: LD_EXP 61
69761: PUSH
69762: LD_VAR 0 2
69766: ARRAY
69767: ST_TO_ADDR
69768: GO 69784
// tmp := target [ 1 ] ;
69770: LD_ADDR_VAR 0 5
69774: PUSH
69775: LD_VAR 0 6
69779: PUSH
69780: LD_INT 1
69782: ARRAY
69783: ST_TO_ADDR
// k := 0 ;
69784: LD_ADDR_VAR 0 4
69788: PUSH
69789: LD_INT 0
69791: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69792: LD_ADDR_VAR 0 3
69796: PUSH
69797: LD_EXP 61
69801: PUSH
69802: LD_VAR 0 2
69806: ARRAY
69807: PUSH
69808: FOR_IN
69809: IFFALSE 69969
// begin k := k + 1 ;
69811: LD_ADDR_VAR 0 4
69815: PUSH
69816: LD_VAR 0 4
69820: PUSH
69821: LD_INT 1
69823: PLUS
69824: ST_TO_ADDR
// if k > tmp then
69825: LD_VAR 0 4
69829: PUSH
69830: LD_VAR 0 5
69834: GREATER
69835: IFFALSE 69839
// break ;
69837: GO 69969
// if not GetClass ( j ) in [ 2 , 16 ] then
69839: LD_VAR 0 3
69843: PPUSH
69844: CALL_OW 257
69848: PUSH
69849: LD_INT 2
69851: PUSH
69852: LD_INT 16
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: IN
69859: NOT
69860: IFFALSE 69913
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69862: LD_ADDR_EXP 61
69866: PUSH
69867: LD_EXP 61
69871: PPUSH
69872: LD_VAR 0 2
69876: PPUSH
69877: LD_EXP 61
69881: PUSH
69882: LD_VAR 0 2
69886: ARRAY
69887: PUSH
69888: LD_VAR 0 3
69892: DIFF
69893: PPUSH
69894: CALL_OW 1
69898: ST_TO_ADDR
// SetTag ( j , 0 ) ;
69899: LD_VAR 0 3
69903: PPUSH
69904: LD_INT 0
69906: PPUSH
69907: CALL_OW 109
// continue ;
69911: GO 69808
// end ; if IsInUnit ( j ) then
69913: LD_VAR 0 3
69917: PPUSH
69918: CALL_OW 310
69922: IFFALSE 69933
// ComExitBuilding ( j ) ;
69924: LD_VAR 0 3
69928: PPUSH
69929: CALL_OW 122
// wait ( 3 ) ;
69933: LD_INT 3
69935: PPUSH
69936: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69940: LD_VAR 0 3
69944: PPUSH
69945: LD_VAR 0 6
69949: PUSH
69950: LD_INT 2
69952: ARRAY
69953: PPUSH
69954: LD_VAR 0 6
69958: PUSH
69959: LD_INT 3
69961: ARRAY
69962: PPUSH
69963: CALL_OW 117
// end ;
69967: GO 69808
69969: POP
69970: POP
// end ; end else
69971: GO 70552
// begin for j in cargo do
69973: LD_ADDR_VAR 0 3
69977: PUSH
69978: LD_VAR 0 7
69982: PUSH
69983: FOR_IN
69984: IFFALSE 70550
// begin if GetTag ( j ) <> 0 then
69986: LD_VAR 0 3
69990: PPUSH
69991: CALL_OW 110
69995: PUSH
69996: LD_INT 0
69998: NONEQUAL
69999: IFFALSE 70003
// continue ;
70001: GO 69983
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70003: LD_VAR 0 3
70007: PPUSH
70008: CALL_OW 256
70012: PUSH
70013: LD_INT 1000
70015: LESS
70016: PUSH
70017: LD_VAR 0 3
70021: PPUSH
70022: LD_EXP 68
70026: PUSH
70027: LD_VAR 0 2
70031: ARRAY
70032: PPUSH
70033: CALL_OW 308
70037: NOT
70038: AND
70039: IFFALSE 70061
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70041: LD_VAR 0 3
70045: PPUSH
70046: LD_EXP 68
70050: PUSH
70051: LD_VAR 0 2
70055: ARRAY
70056: PPUSH
70057: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70061: LD_VAR 0 3
70065: PPUSH
70066: CALL_OW 256
70070: PUSH
70071: LD_INT 1000
70073: LESS
70074: PUSH
70075: LD_VAR 0 3
70079: PPUSH
70080: LD_EXP 68
70084: PUSH
70085: LD_VAR 0 2
70089: ARRAY
70090: PPUSH
70091: CALL_OW 308
70095: AND
70096: IFFALSE 70100
// continue ;
70098: GO 69983
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70100: LD_VAR 0 3
70104: PPUSH
70105: CALL_OW 262
70109: PUSH
70110: LD_INT 2
70112: EQUAL
70113: PUSH
70114: LD_VAR 0 3
70118: PPUSH
70119: CALL_OW 261
70123: PUSH
70124: LD_INT 15
70126: LESS
70127: AND
70128: IFFALSE 70132
// continue ;
70130: GO 69983
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70132: LD_VAR 0 3
70136: PPUSH
70137: CALL_OW 262
70141: PUSH
70142: LD_INT 1
70144: EQUAL
70145: PUSH
70146: LD_VAR 0 3
70150: PPUSH
70151: CALL_OW 261
70155: PUSH
70156: LD_INT 10
70158: LESS
70159: AND
70160: IFFALSE 70489
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70162: LD_ADDR_VAR 0 8
70166: PUSH
70167: LD_EXP 44
70171: PUSH
70172: LD_VAR 0 2
70176: ARRAY
70177: PPUSH
70178: LD_INT 2
70180: PUSH
70181: LD_INT 30
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 30
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: PPUSH
70206: CALL_OW 72
70210: ST_TO_ADDR
// if not depot then
70211: LD_VAR 0 8
70215: NOT
70216: IFFALSE 70220
// continue ;
70218: GO 69983
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70220: LD_VAR 0 3
70224: PPUSH
70225: LD_VAR 0 8
70229: PPUSH
70230: LD_VAR 0 3
70234: PPUSH
70235: CALL_OW 74
70239: PPUSH
70240: CALL_OW 296
70244: PUSH
70245: LD_INT 6
70247: LESS
70248: IFFALSE 70264
// SetFuel ( j , 100 ) else
70250: LD_VAR 0 3
70254: PPUSH
70255: LD_INT 100
70257: PPUSH
70258: CALL_OW 240
70262: GO 70489
// if GetFuel ( j ) = 0 then
70264: LD_VAR 0 3
70268: PPUSH
70269: CALL_OW 261
70273: PUSH
70274: LD_INT 0
70276: EQUAL
70277: IFFALSE 70489
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70279: LD_ADDR_EXP 63
70283: PUSH
70284: LD_EXP 63
70288: PPUSH
70289: LD_VAR 0 2
70293: PPUSH
70294: LD_EXP 63
70298: PUSH
70299: LD_VAR 0 2
70303: ARRAY
70304: PUSH
70305: LD_VAR 0 3
70309: DIFF
70310: PPUSH
70311: CALL_OW 1
70315: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70316: LD_VAR 0 3
70320: PPUSH
70321: CALL_OW 263
70325: PUSH
70326: LD_INT 1
70328: EQUAL
70329: IFFALSE 70345
// ComExitVehicle ( IsInUnit ( j ) ) ;
70331: LD_VAR 0 3
70335: PPUSH
70336: CALL_OW 310
70340: PPUSH
70341: CALL_OW 121
// if GetControl ( j ) = control_remote then
70345: LD_VAR 0 3
70349: PPUSH
70350: CALL_OW 263
70354: PUSH
70355: LD_INT 2
70357: EQUAL
70358: IFFALSE 70369
// ComUnlink ( j ) ;
70360: LD_VAR 0 3
70364: PPUSH
70365: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70369: LD_ADDR_VAR 0 9
70373: PUSH
70374: LD_VAR 0 2
70378: PPUSH
70379: LD_INT 3
70381: PPUSH
70382: CALL 79842 0 2
70386: ST_TO_ADDR
// if fac then
70387: LD_VAR 0 9
70391: IFFALSE 70487
// begin for k in fac do
70393: LD_ADDR_VAR 0 4
70397: PUSH
70398: LD_VAR 0 9
70402: PUSH
70403: FOR_IN
70404: IFFALSE 70485
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70406: LD_ADDR_VAR 0 10
70410: PUSH
70411: LD_VAR 0 9
70415: PPUSH
70416: LD_VAR 0 3
70420: PPUSH
70421: CALL_OW 265
70425: PPUSH
70426: LD_VAR 0 3
70430: PPUSH
70431: CALL_OW 262
70435: PPUSH
70436: LD_VAR 0 3
70440: PPUSH
70441: CALL_OW 263
70445: PPUSH
70446: LD_VAR 0 3
70450: PPUSH
70451: CALL_OW 264
70455: PPUSH
70456: CALL 21833 0 5
70460: ST_TO_ADDR
// if components then
70461: LD_VAR 0 10
70465: IFFALSE 70483
// begin MC_InsertProduceList ( i , components ) ;
70467: LD_VAR 0 2
70471: PPUSH
70472: LD_VAR 0 10
70476: PPUSH
70477: CALL 79387 0 2
// break ;
70481: GO 70485
// end ; end ;
70483: GO 70403
70485: POP
70486: POP
// end ; continue ;
70487: GO 69983
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70489: LD_VAR 0 3
70493: PPUSH
70494: LD_INT 1
70496: PPUSH
70497: CALL_OW 289
70501: PUSH
70502: LD_INT 100
70504: LESS
70505: PUSH
70506: LD_VAR 0 3
70510: PPUSH
70511: CALL_OW 314
70515: NOT
70516: AND
70517: IFFALSE 70546
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70519: LD_VAR 0 3
70523: PPUSH
70524: LD_VAR 0 6
70528: PUSH
70529: LD_INT 2
70531: ARRAY
70532: PPUSH
70533: LD_VAR 0 6
70537: PUSH
70538: LD_INT 3
70540: ARRAY
70541: PPUSH
70542: CALL_OW 117
// break ;
70546: GO 70550
// end ;
70548: GO 69983
70550: POP
70551: POP
// end ; end ;
70552: GO 68821
70554: POP
70555: POP
// end ;
70556: LD_VAR 0 1
70560: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70561: LD_INT 0
70563: PPUSH
70564: PPUSH
70565: PPUSH
70566: PPUSH
// if not mc_bases then
70567: LD_EXP 44
70571: NOT
70572: IFFALSE 70576
// exit ;
70574: GO 70737
// for i = 1 to mc_bases do
70576: LD_ADDR_VAR 0 2
70580: PUSH
70581: DOUBLE
70582: LD_INT 1
70584: DEC
70585: ST_TO_ADDR
70586: LD_EXP 44
70590: PUSH
70591: FOR_TO
70592: IFFALSE 70735
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70594: LD_ADDR_VAR 0 4
70598: PUSH
70599: LD_EXP 63
70603: PUSH
70604: LD_VAR 0 2
70608: ARRAY
70609: PUSH
70610: LD_EXP 66
70614: PUSH
70615: LD_VAR 0 2
70619: ARRAY
70620: UNION
70621: PPUSH
70622: LD_INT 33
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PPUSH
70632: CALL_OW 72
70636: ST_TO_ADDR
// if tmp then
70637: LD_VAR 0 4
70641: IFFALSE 70733
// for j in tmp do
70643: LD_ADDR_VAR 0 3
70647: PUSH
70648: LD_VAR 0 4
70652: PUSH
70653: FOR_IN
70654: IFFALSE 70731
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70656: LD_VAR 0 3
70660: PPUSH
70661: CALL_OW 312
70665: NOT
70666: PUSH
70667: LD_VAR 0 3
70671: PPUSH
70672: CALL_OW 256
70676: PUSH
70677: LD_INT 250
70679: GREATEREQUAL
70680: AND
70681: IFFALSE 70694
// Connect ( j ) else
70683: LD_VAR 0 3
70687: PPUSH
70688: CALL 27234 0 1
70692: GO 70729
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70694: LD_VAR 0 3
70698: PPUSH
70699: CALL_OW 256
70703: PUSH
70704: LD_INT 250
70706: LESS
70707: PUSH
70708: LD_VAR 0 3
70712: PPUSH
70713: CALL_OW 312
70717: AND
70718: IFFALSE 70729
// ComUnlink ( j ) ;
70720: LD_VAR 0 3
70724: PPUSH
70725: CALL_OW 136
70729: GO 70653
70731: POP
70732: POP
// end ;
70733: GO 70591
70735: POP
70736: POP
// end ;
70737: LD_VAR 0 1
70741: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70742: LD_INT 0
70744: PPUSH
70745: PPUSH
70746: PPUSH
70747: PPUSH
70748: PPUSH
// if not mc_bases then
70749: LD_EXP 44
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 71203
// for i = 1 to mc_bases do
70758: LD_ADDR_VAR 0 2
70762: PUSH
70763: DOUBLE
70764: LD_INT 1
70766: DEC
70767: ST_TO_ADDR
70768: LD_EXP 44
70772: PUSH
70773: FOR_TO
70774: IFFALSE 71201
// begin if not mc_produce [ i ] then
70776: LD_EXP 65
70780: PUSH
70781: LD_VAR 0 2
70785: ARRAY
70786: NOT
70787: IFFALSE 70791
// continue ;
70789: GO 70773
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70791: LD_ADDR_VAR 0 5
70795: PUSH
70796: LD_EXP 44
70800: PUSH
70801: LD_VAR 0 2
70805: ARRAY
70806: PPUSH
70807: LD_INT 30
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PPUSH
70817: CALL_OW 72
70821: ST_TO_ADDR
// if not fac then
70822: LD_VAR 0 5
70826: NOT
70827: IFFALSE 70831
// continue ;
70829: GO 70773
// for j in fac do
70831: LD_ADDR_VAR 0 3
70835: PUSH
70836: LD_VAR 0 5
70840: PUSH
70841: FOR_IN
70842: IFFALSE 71197
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70844: LD_VAR 0 3
70848: PPUSH
70849: CALL_OW 461
70853: PUSH
70854: LD_INT 2
70856: NONEQUAL
70857: PUSH
70858: LD_VAR 0 3
70862: PPUSH
70863: LD_INT 15
70865: PPUSH
70866: CALL 26894 0 2
70870: PUSH
70871: LD_INT 4
70873: ARRAY
70874: OR
70875: IFFALSE 70879
// continue ;
70877: GO 70841
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
70879: LD_VAR 0 3
70883: PPUSH
70884: LD_EXP 65
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PUSH
70899: LD_INT 1
70901: ARRAY
70902: PPUSH
70903: LD_EXP 65
70907: PUSH
70908: LD_VAR 0 2
70912: ARRAY
70913: PUSH
70914: LD_INT 1
70916: ARRAY
70917: PUSH
70918: LD_INT 2
70920: ARRAY
70921: PPUSH
70922: LD_EXP 65
70926: PUSH
70927: LD_VAR 0 2
70931: ARRAY
70932: PUSH
70933: LD_INT 1
70935: ARRAY
70936: PUSH
70937: LD_INT 3
70939: ARRAY
70940: PPUSH
70941: LD_EXP 65
70945: PUSH
70946: LD_VAR 0 2
70950: ARRAY
70951: PUSH
70952: LD_INT 1
70954: ARRAY
70955: PUSH
70956: LD_INT 4
70958: ARRAY
70959: PPUSH
70960: CALL_OW 448
70964: PUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: LD_EXP 65
70974: PUSH
70975: LD_VAR 0 2
70979: ARRAY
70980: PUSH
70981: LD_INT 1
70983: ARRAY
70984: PUSH
70985: LD_INT 1
70987: ARRAY
70988: PUSH
70989: LD_EXP 65
70993: PUSH
70994: LD_VAR 0 2
70998: ARRAY
70999: PUSH
71000: LD_INT 1
71002: ARRAY
71003: PUSH
71004: LD_INT 2
71006: ARRAY
71007: PUSH
71008: LD_EXP 65
71012: PUSH
71013: LD_VAR 0 2
71017: ARRAY
71018: PUSH
71019: LD_INT 1
71021: ARRAY
71022: PUSH
71023: LD_INT 3
71025: ARRAY
71026: PUSH
71027: LD_EXP 65
71031: PUSH
71032: LD_VAR 0 2
71036: ARRAY
71037: PUSH
71038: LD_INT 1
71040: ARRAY
71041: PUSH
71042: LD_INT 4
71044: ARRAY
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: PPUSH
71052: CALL 30565 0 2
71056: AND
71057: IFFALSE 71195
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_EXP 65
71068: PUSH
71069: LD_VAR 0 2
71073: ARRAY
71074: PUSH
71075: LD_INT 1
71077: ARRAY
71078: PUSH
71079: LD_INT 1
71081: ARRAY
71082: PPUSH
71083: LD_EXP 65
71087: PUSH
71088: LD_VAR 0 2
71092: ARRAY
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PUSH
71098: LD_INT 2
71100: ARRAY
71101: PPUSH
71102: LD_EXP 65
71106: PUSH
71107: LD_VAR 0 2
71111: ARRAY
71112: PUSH
71113: LD_INT 1
71115: ARRAY
71116: PUSH
71117: LD_INT 3
71119: ARRAY
71120: PPUSH
71121: LD_EXP 65
71125: PUSH
71126: LD_VAR 0 2
71130: ARRAY
71131: PUSH
71132: LD_INT 1
71134: ARRAY
71135: PUSH
71136: LD_INT 4
71138: ARRAY
71139: PPUSH
71140: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71144: LD_ADDR_VAR 0 4
71148: PUSH
71149: LD_EXP 65
71153: PUSH
71154: LD_VAR 0 2
71158: ARRAY
71159: PPUSH
71160: LD_INT 1
71162: PPUSH
71163: CALL_OW 3
71167: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71168: LD_ADDR_EXP 65
71172: PUSH
71173: LD_EXP 65
71177: PPUSH
71178: LD_VAR 0 2
71182: PPUSH
71183: LD_VAR 0 4
71187: PPUSH
71188: CALL_OW 1
71192: ST_TO_ADDR
// break ;
71193: GO 71197
// end ; end ;
71195: GO 70841
71197: POP
71198: POP
// end ;
71199: GO 70773
71201: POP
71202: POP
// end ;
71203: LD_VAR 0 1
71207: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71208: LD_INT 0
71210: PPUSH
71211: PPUSH
71212: PPUSH
// if not mc_bases then
71213: LD_EXP 44
71217: NOT
71218: IFFALSE 71222
// exit ;
71220: GO 71311
// for i = 1 to mc_bases do
71222: LD_ADDR_VAR 0 2
71226: PUSH
71227: DOUBLE
71228: LD_INT 1
71230: DEC
71231: ST_TO_ADDR
71232: LD_EXP 44
71236: PUSH
71237: FOR_TO
71238: IFFALSE 71309
// begin if mc_attack [ i ] then
71240: LD_EXP 64
71244: PUSH
71245: LD_VAR 0 2
71249: ARRAY
71250: IFFALSE 71307
// begin tmp := mc_attack [ i ] [ 1 ] ;
71252: LD_ADDR_VAR 0 3
71256: PUSH
71257: LD_EXP 64
71261: PUSH
71262: LD_VAR 0 2
71266: ARRAY
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71272: LD_ADDR_EXP 64
71276: PUSH
71277: LD_EXP 64
71281: PPUSH
71282: LD_VAR 0 2
71286: PPUSH
71287: EMPTY
71288: PPUSH
71289: CALL_OW 1
71293: ST_TO_ADDR
// Attack ( tmp ) ;
71294: LD_VAR 0 3
71298: PPUSH
71299: CALL 97328 0 1
// exit ;
71303: POP
71304: POP
71305: GO 71311
// end ; end ;
71307: GO 71237
71309: POP
71310: POP
// end ;
71311: LD_VAR 0 1
71315: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71316: LD_INT 0
71318: PPUSH
71319: PPUSH
71320: PPUSH
71321: PPUSH
71322: PPUSH
71323: PPUSH
71324: PPUSH
// if not mc_bases then
71325: LD_EXP 44
71329: NOT
71330: IFFALSE 71334
// exit ;
71332: GO 71916
// for i = 1 to mc_bases do
71334: LD_ADDR_VAR 0 2
71338: PUSH
71339: DOUBLE
71340: LD_INT 1
71342: DEC
71343: ST_TO_ADDR
71344: LD_EXP 44
71348: PUSH
71349: FOR_TO
71350: IFFALSE 71914
// begin if not mc_bases [ i ] then
71352: LD_EXP 44
71356: PUSH
71357: LD_VAR 0 2
71361: ARRAY
71362: NOT
71363: IFFALSE 71367
// continue ;
71365: GO 71349
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71367: LD_ADDR_VAR 0 7
71371: PUSH
71372: LD_EXP 44
71376: PUSH
71377: LD_VAR 0 2
71381: ARRAY
71382: PUSH
71383: LD_INT 1
71385: ARRAY
71386: PPUSH
71387: CALL 21137 0 1
71391: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71392: LD_ADDR_EXP 67
71396: PUSH
71397: LD_EXP 67
71401: PPUSH
71402: LD_VAR 0 2
71406: PPUSH
71407: LD_EXP 44
71411: PUSH
71412: LD_VAR 0 2
71416: ARRAY
71417: PUSH
71418: LD_INT 1
71420: ARRAY
71421: PPUSH
71422: CALL_OW 255
71426: PPUSH
71427: LD_EXP 69
71431: PUSH
71432: LD_VAR 0 2
71436: ARRAY
71437: PPUSH
71438: CALL 21102 0 2
71442: PPUSH
71443: CALL_OW 1
71447: ST_TO_ADDR
// if not mc_scan [ i ] then
71448: LD_EXP 67
71452: PUSH
71453: LD_VAR 0 2
71457: ARRAY
71458: NOT
71459: IFFALSE 71614
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71461: LD_ADDR_VAR 0 4
71465: PUSH
71466: LD_EXP 44
71470: PUSH
71471: LD_VAR 0 2
71475: ARRAY
71476: PPUSH
71477: LD_INT 2
71479: PUSH
71480: LD_INT 25
71482: PUSH
71483: LD_INT 5
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 25
71492: PUSH
71493: LD_INT 8
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 25
71502: PUSH
71503: LD_INT 9
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PPUSH
71516: CALL_OW 72
71520: ST_TO_ADDR
// if not tmp then
71521: LD_VAR 0 4
71525: NOT
71526: IFFALSE 71530
// continue ;
71528: GO 71349
// for j in tmp do
71530: LD_ADDR_VAR 0 3
71534: PUSH
71535: LD_VAR 0 4
71539: PUSH
71540: FOR_IN
71541: IFFALSE 71612
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71543: LD_VAR 0 3
71547: PPUSH
71548: CALL_OW 310
71552: PPUSH
71553: CALL_OW 266
71557: PUSH
71558: LD_INT 5
71560: EQUAL
71561: PUSH
71562: LD_VAR 0 3
71566: PPUSH
71567: CALL_OW 257
71571: PUSH
71572: LD_INT 1
71574: EQUAL
71575: AND
71576: PUSH
71577: LD_VAR 0 3
71581: PPUSH
71582: CALL_OW 459
71586: NOT
71587: AND
71588: PUSH
71589: LD_VAR 0 7
71593: AND
71594: IFFALSE 71610
// ComChangeProfession ( j , class ) ;
71596: LD_VAR 0 3
71600: PPUSH
71601: LD_VAR 0 7
71605: PPUSH
71606: CALL_OW 123
71610: GO 71540
71612: POP
71613: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71614: LD_EXP 67
71618: PUSH
71619: LD_VAR 0 2
71623: ARRAY
71624: PUSH
71625: LD_EXP 66
71629: PUSH
71630: LD_VAR 0 2
71634: ARRAY
71635: NOT
71636: AND
71637: PUSH
71638: LD_EXP 44
71642: PUSH
71643: LD_VAR 0 2
71647: ARRAY
71648: PPUSH
71649: LD_INT 30
71651: PUSH
71652: LD_INT 32
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PPUSH
71659: CALL_OW 72
71663: NOT
71664: AND
71665: PUSH
71666: LD_EXP 44
71670: PUSH
71671: LD_VAR 0 2
71675: ARRAY
71676: PPUSH
71677: LD_INT 2
71679: PUSH
71680: LD_INT 30
71682: PUSH
71683: LD_INT 4
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 30
71692: PUSH
71693: LD_INT 5
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: PPUSH
71705: CALL_OW 72
71709: NOT
71710: AND
71711: IFFALSE 71843
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71713: LD_ADDR_VAR 0 4
71717: PUSH
71718: LD_EXP 44
71722: PUSH
71723: LD_VAR 0 2
71727: ARRAY
71728: PPUSH
71729: LD_INT 2
71731: PUSH
71732: LD_INT 25
71734: PUSH
71735: LD_INT 1
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 25
71744: PUSH
71745: LD_INT 5
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 25
71754: PUSH
71755: LD_INT 8
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 25
71764: PUSH
71765: LD_INT 9
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: PPUSH
71779: CALL_OW 72
71783: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71784: LD_ADDR_VAR 0 4
71788: PUSH
71789: LD_VAR 0 4
71793: PUSH
71794: LD_VAR 0 4
71798: PPUSH
71799: LD_INT 18
71801: PPUSH
71802: CALL 52862 0 2
71806: DIFF
71807: ST_TO_ADDR
// if tmp then
71808: LD_VAR 0 4
71812: IFFALSE 71843
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71814: LD_VAR 0 2
71818: PPUSH
71819: LD_VAR 0 4
71823: PPUSH
71824: LD_EXP 69
71828: PUSH
71829: LD_VAR 0 2
71833: ARRAY
71834: PPUSH
71835: CALL 102037 0 3
// exit ;
71839: POP
71840: POP
71841: GO 71916
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71843: LD_EXP 67
71847: PUSH
71848: LD_VAR 0 2
71852: ARRAY
71853: PUSH
71854: LD_EXP 66
71858: PUSH
71859: LD_VAR 0 2
71863: ARRAY
71864: AND
71865: IFFALSE 71912
// begin tmp := mc_defender [ i ] ;
71867: LD_ADDR_VAR 0 4
71871: PUSH
71872: LD_EXP 66
71876: PUSH
71877: LD_VAR 0 2
71881: ARRAY
71882: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
71883: LD_VAR 0 2
71887: PPUSH
71888: LD_VAR 0 4
71892: PPUSH
71893: LD_EXP 67
71897: PUSH
71898: LD_VAR 0 2
71902: ARRAY
71903: PPUSH
71904: CALL 102598 0 3
// exit ;
71908: POP
71909: POP
71910: GO 71916
// end ; end ;
71912: GO 71349
71914: POP
71915: POP
// end ;
71916: LD_VAR 0 1
71920: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
71921: LD_INT 0
71923: PPUSH
71924: PPUSH
71925: PPUSH
71926: PPUSH
71927: PPUSH
71928: PPUSH
71929: PPUSH
71930: PPUSH
71931: PPUSH
71932: PPUSH
71933: PPUSH
// if not mc_bases then
71934: LD_EXP 44
71938: NOT
71939: IFFALSE 71943
// exit ;
71941: GO 73030
// for i = 1 to mc_bases do
71943: LD_ADDR_VAR 0 2
71947: PUSH
71948: DOUBLE
71949: LD_INT 1
71951: DEC
71952: ST_TO_ADDR
71953: LD_EXP 44
71957: PUSH
71958: FOR_TO
71959: IFFALSE 73028
// begin tmp := mc_lab [ i ] ;
71961: LD_ADDR_VAR 0 6
71965: PUSH
71966: LD_EXP 77
71970: PUSH
71971: LD_VAR 0 2
71975: ARRAY
71976: ST_TO_ADDR
// if not tmp then
71977: LD_VAR 0 6
71981: NOT
71982: IFFALSE 71986
// continue ;
71984: GO 71958
// idle_lab := 0 ;
71986: LD_ADDR_VAR 0 11
71990: PUSH
71991: LD_INT 0
71993: ST_TO_ADDR
// for j in tmp do
71994: LD_ADDR_VAR 0 3
71998: PUSH
71999: LD_VAR 0 6
72003: PUSH
72004: FOR_IN
72005: IFFALSE 73024
// begin researching := false ;
72007: LD_ADDR_VAR 0 10
72011: PUSH
72012: LD_INT 0
72014: ST_TO_ADDR
// side := GetSide ( j ) ;
72015: LD_ADDR_VAR 0 4
72019: PUSH
72020: LD_VAR 0 3
72024: PPUSH
72025: CALL_OW 255
72029: ST_TO_ADDR
// if not mc_tech [ side ] then
72030: LD_EXP 71
72034: PUSH
72035: LD_VAR 0 4
72039: ARRAY
72040: NOT
72041: IFFALSE 72045
// continue ;
72043: GO 72004
// if BuildingStatus ( j ) = bs_idle then
72045: LD_VAR 0 3
72049: PPUSH
72050: CALL_OW 461
72054: PUSH
72055: LD_INT 2
72057: EQUAL
72058: IFFALSE 72246
// begin if idle_lab and UnitsInside ( j ) < 6 then
72060: LD_VAR 0 11
72064: PUSH
72065: LD_VAR 0 3
72069: PPUSH
72070: CALL_OW 313
72074: PUSH
72075: LD_INT 6
72077: LESS
72078: AND
72079: IFFALSE 72150
// begin tmp2 := UnitsInside ( idle_lab ) ;
72081: LD_ADDR_VAR 0 9
72085: PUSH
72086: LD_VAR 0 11
72090: PPUSH
72091: CALL_OW 313
72095: ST_TO_ADDR
// if tmp2 then
72096: LD_VAR 0 9
72100: IFFALSE 72142
// for x in tmp2 do
72102: LD_ADDR_VAR 0 7
72106: PUSH
72107: LD_VAR 0 9
72111: PUSH
72112: FOR_IN
72113: IFFALSE 72140
// begin ComExitBuilding ( x ) ;
72115: LD_VAR 0 7
72119: PPUSH
72120: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72124: LD_VAR 0 7
72128: PPUSH
72129: LD_VAR 0 3
72133: PPUSH
72134: CALL_OW 180
// end ;
72138: GO 72112
72140: POP
72141: POP
// idle_lab := 0 ;
72142: LD_ADDR_VAR 0 11
72146: PUSH
72147: LD_INT 0
72149: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72150: LD_ADDR_VAR 0 5
72154: PUSH
72155: LD_EXP 71
72159: PUSH
72160: LD_VAR 0 4
72164: ARRAY
72165: PUSH
72166: FOR_IN
72167: IFFALSE 72227
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72169: LD_VAR 0 3
72173: PPUSH
72174: LD_VAR 0 5
72178: PPUSH
72179: CALL_OW 430
72183: PUSH
72184: LD_VAR 0 4
72188: PPUSH
72189: LD_VAR 0 5
72193: PPUSH
72194: CALL 20207 0 2
72198: AND
72199: IFFALSE 72225
// begin researching := true ;
72201: LD_ADDR_VAR 0 10
72205: PUSH
72206: LD_INT 1
72208: ST_TO_ADDR
// ComResearch ( j , t ) ;
72209: LD_VAR 0 3
72213: PPUSH
72214: LD_VAR 0 5
72218: PPUSH
72219: CALL_OW 124
// break ;
72223: GO 72227
// end ;
72225: GO 72166
72227: POP
72228: POP
// if not researching then
72229: LD_VAR 0 10
72233: NOT
72234: IFFALSE 72246
// idle_lab := j ;
72236: LD_ADDR_VAR 0 11
72240: PUSH
72241: LD_VAR 0 3
72245: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72246: LD_VAR 0 3
72250: PPUSH
72251: CALL_OW 461
72255: PUSH
72256: LD_INT 10
72258: EQUAL
72259: IFFALSE 72847
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72261: LD_EXP 73
72265: PUSH
72266: LD_VAR 0 2
72270: ARRAY
72271: NOT
72272: PUSH
72273: LD_EXP 74
72277: PUSH
72278: LD_VAR 0 2
72282: ARRAY
72283: NOT
72284: AND
72285: PUSH
72286: LD_EXP 71
72290: PUSH
72291: LD_VAR 0 4
72295: ARRAY
72296: PUSH
72297: LD_INT 1
72299: GREATER
72300: AND
72301: IFFALSE 72432
// begin ComCancel ( j ) ;
72303: LD_VAR 0 3
72307: PPUSH
72308: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72312: LD_ADDR_EXP 71
72316: PUSH
72317: LD_EXP 71
72321: PPUSH
72322: LD_VAR 0 4
72326: PPUSH
72327: LD_EXP 71
72331: PUSH
72332: LD_VAR 0 4
72336: ARRAY
72337: PPUSH
72338: LD_EXP 71
72342: PUSH
72343: LD_VAR 0 4
72347: ARRAY
72348: PUSH
72349: LD_INT 1
72351: MINUS
72352: PPUSH
72353: LD_EXP 71
72357: PUSH
72358: LD_VAR 0 4
72362: ARRAY
72363: PPUSH
72364: LD_INT 0
72366: PPUSH
72367: CALL 23719 0 4
72371: PPUSH
72372: CALL_OW 1
72376: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72377: LD_ADDR_EXP 71
72381: PUSH
72382: LD_EXP 71
72386: PPUSH
72387: LD_VAR 0 4
72391: PPUSH
72392: LD_EXP 71
72396: PUSH
72397: LD_VAR 0 4
72401: ARRAY
72402: PPUSH
72403: LD_EXP 71
72407: PUSH
72408: LD_VAR 0 4
72412: ARRAY
72413: PPUSH
72414: LD_INT 1
72416: PPUSH
72417: LD_INT 0
72419: PPUSH
72420: CALL 23719 0 4
72424: PPUSH
72425: CALL_OW 1
72429: ST_TO_ADDR
// continue ;
72430: GO 72004
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72432: LD_EXP 73
72436: PUSH
72437: LD_VAR 0 2
72441: ARRAY
72442: PUSH
72443: LD_EXP 74
72447: PUSH
72448: LD_VAR 0 2
72452: ARRAY
72453: NOT
72454: AND
72455: IFFALSE 72582
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72457: LD_ADDR_EXP 74
72461: PUSH
72462: LD_EXP 74
72466: PPUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_EXP 74
72476: PUSH
72477: LD_VAR 0 2
72481: ARRAY
72482: PUSH
72483: LD_INT 1
72485: PLUS
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PPUSH
72491: LD_EXP 73
72495: PUSH
72496: LD_VAR 0 2
72500: ARRAY
72501: PUSH
72502: LD_INT 1
72504: ARRAY
72505: PPUSH
72506: CALL 24301 0 3
72510: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72511: LD_EXP 73
72515: PUSH
72516: LD_VAR 0 2
72520: ARRAY
72521: PUSH
72522: LD_INT 1
72524: ARRAY
72525: PPUSH
72526: LD_INT 112
72528: PPUSH
72529: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72533: LD_ADDR_VAR 0 9
72537: PUSH
72538: LD_EXP 73
72542: PUSH
72543: LD_VAR 0 2
72547: ARRAY
72548: PPUSH
72549: LD_INT 1
72551: PPUSH
72552: CALL_OW 3
72556: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72557: LD_ADDR_EXP 73
72561: PUSH
72562: LD_EXP 73
72566: PPUSH
72567: LD_VAR 0 2
72571: PPUSH
72572: LD_VAR 0 9
72576: PPUSH
72577: CALL_OW 1
72581: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72582: LD_EXP 73
72586: PUSH
72587: LD_VAR 0 2
72591: ARRAY
72592: PUSH
72593: LD_EXP 74
72597: PUSH
72598: LD_VAR 0 2
72602: ARRAY
72603: AND
72604: PUSH
72605: LD_EXP 74
72609: PUSH
72610: LD_VAR 0 2
72614: ARRAY
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PPUSH
72620: CALL_OW 310
72624: NOT
72625: AND
72626: PUSH
72627: LD_VAR 0 3
72631: PPUSH
72632: CALL_OW 313
72636: PUSH
72637: LD_INT 6
72639: EQUAL
72640: AND
72641: IFFALSE 72697
// begin tmp2 := UnitsInside ( j ) ;
72643: LD_ADDR_VAR 0 9
72647: PUSH
72648: LD_VAR 0 3
72652: PPUSH
72653: CALL_OW 313
72657: ST_TO_ADDR
// if tmp2 = 6 then
72658: LD_VAR 0 9
72662: PUSH
72663: LD_INT 6
72665: EQUAL
72666: IFFALSE 72697
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72668: LD_VAR 0 9
72672: PUSH
72673: LD_INT 1
72675: ARRAY
72676: PPUSH
72677: LD_INT 112
72679: PPUSH
72680: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72684: LD_VAR 0 9
72688: PUSH
72689: LD_INT 1
72691: ARRAY
72692: PPUSH
72693: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72697: LD_EXP 74
72701: PUSH
72702: LD_VAR 0 2
72706: ARRAY
72707: PUSH
72708: LD_EXP 74
72712: PUSH
72713: LD_VAR 0 2
72717: ARRAY
72718: PUSH
72719: LD_INT 1
72721: ARRAY
72722: PPUSH
72723: CALL_OW 314
72727: NOT
72728: AND
72729: PUSH
72730: LD_EXP 74
72734: PUSH
72735: LD_VAR 0 2
72739: ARRAY
72740: PUSH
72741: LD_INT 1
72743: ARRAY
72744: PPUSH
72745: CALL_OW 310
72749: NOT
72750: AND
72751: IFFALSE 72777
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72753: LD_EXP 74
72757: PUSH
72758: LD_VAR 0 2
72762: ARRAY
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PPUSH
72768: LD_VAR 0 3
72772: PPUSH
72773: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72777: LD_EXP 74
72781: PUSH
72782: LD_VAR 0 2
72786: ARRAY
72787: PUSH
72788: LD_INT 1
72790: ARRAY
72791: PPUSH
72792: CALL_OW 310
72796: PUSH
72797: LD_EXP 74
72801: PUSH
72802: LD_VAR 0 2
72806: ARRAY
72807: PUSH
72808: LD_INT 1
72810: ARRAY
72811: PPUSH
72812: CALL_OW 310
72816: PPUSH
72817: CALL_OW 461
72821: PUSH
72822: LD_INT 3
72824: NONEQUAL
72825: AND
72826: IFFALSE 72847
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72828: LD_EXP 74
72832: PUSH
72833: LD_VAR 0 2
72837: ARRAY
72838: PUSH
72839: LD_INT 1
72841: ARRAY
72842: PPUSH
72843: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72847: LD_VAR 0 3
72851: PPUSH
72852: CALL_OW 461
72856: PUSH
72857: LD_INT 6
72859: EQUAL
72860: PUSH
72861: LD_VAR 0 6
72865: PUSH
72866: LD_INT 1
72868: GREATER
72869: AND
72870: IFFALSE 73022
// begin sci := [ ] ;
72872: LD_ADDR_VAR 0 8
72876: PUSH
72877: EMPTY
72878: ST_TO_ADDR
// for x in ( tmp diff j ) do
72879: LD_ADDR_VAR 0 7
72883: PUSH
72884: LD_VAR 0 6
72888: PUSH
72889: LD_VAR 0 3
72893: DIFF
72894: PUSH
72895: FOR_IN
72896: IFFALSE 72948
// begin if sci = 6 then
72898: LD_VAR 0 8
72902: PUSH
72903: LD_INT 6
72905: EQUAL
72906: IFFALSE 72910
// break ;
72908: GO 72948
// if BuildingStatus ( x ) = bs_idle then
72910: LD_VAR 0 7
72914: PPUSH
72915: CALL_OW 461
72919: PUSH
72920: LD_INT 2
72922: EQUAL
72923: IFFALSE 72946
// sci := sci ^ UnitsInside ( x ) ;
72925: LD_ADDR_VAR 0 8
72929: PUSH
72930: LD_VAR 0 8
72934: PUSH
72935: LD_VAR 0 7
72939: PPUSH
72940: CALL_OW 313
72944: ADD
72945: ST_TO_ADDR
// end ;
72946: GO 72895
72948: POP
72949: POP
// if not sci then
72950: LD_VAR 0 8
72954: NOT
72955: IFFALSE 72959
// continue ;
72957: GO 72004
// for x in sci do
72959: LD_ADDR_VAR 0 7
72963: PUSH
72964: LD_VAR 0 8
72968: PUSH
72969: FOR_IN
72970: IFFALSE 73020
// if IsInUnit ( x ) and not HasTask ( x ) then
72972: LD_VAR 0 7
72976: PPUSH
72977: CALL_OW 310
72981: PUSH
72982: LD_VAR 0 7
72986: PPUSH
72987: CALL_OW 314
72991: NOT
72992: AND
72993: IFFALSE 73018
// begin ComExitBuilding ( x ) ;
72995: LD_VAR 0 7
72999: PPUSH
73000: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73004: LD_VAR 0 7
73008: PPUSH
73009: LD_VAR 0 3
73013: PPUSH
73014: CALL_OW 180
// end ;
73018: GO 72969
73020: POP
73021: POP
// end ; end ;
73022: GO 72004
73024: POP
73025: POP
// end ;
73026: GO 71958
73028: POP
73029: POP
// end ;
73030: LD_VAR 0 1
73034: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73035: LD_INT 0
73037: PPUSH
73038: PPUSH
// if not mc_bases then
73039: LD_EXP 44
73043: NOT
73044: IFFALSE 73048
// exit ;
73046: GO 73129
// for i = 1 to mc_bases do
73048: LD_ADDR_VAR 0 2
73052: PUSH
73053: DOUBLE
73054: LD_INT 1
73056: DEC
73057: ST_TO_ADDR
73058: LD_EXP 44
73062: PUSH
73063: FOR_TO
73064: IFFALSE 73127
// if mc_mines [ i ] and mc_miners [ i ] then
73066: LD_EXP 57
73070: PUSH
73071: LD_VAR 0 2
73075: ARRAY
73076: PUSH
73077: LD_EXP 58
73081: PUSH
73082: LD_VAR 0 2
73086: ARRAY
73087: AND
73088: IFFALSE 73125
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73090: LD_EXP 58
73094: PUSH
73095: LD_VAR 0 2
73099: ARRAY
73100: PUSH
73101: LD_INT 1
73103: ARRAY
73104: PPUSH
73105: CALL_OW 255
73109: PPUSH
73110: LD_EXP 57
73114: PUSH
73115: LD_VAR 0 2
73119: ARRAY
73120: PPUSH
73121: CALL 21290 0 2
73125: GO 73063
73127: POP
73128: POP
// end ;
73129: LD_VAR 0 1
73133: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73134: LD_INT 0
73136: PPUSH
73137: PPUSH
73138: PPUSH
73139: PPUSH
73140: PPUSH
73141: PPUSH
73142: PPUSH
73143: PPUSH
// if not mc_bases or not mc_parking then
73144: LD_EXP 44
73148: NOT
73149: PUSH
73150: LD_EXP 68
73154: NOT
73155: OR
73156: IFFALSE 73160
// exit ;
73158: GO 73859
// for i = 1 to mc_bases do
73160: LD_ADDR_VAR 0 2
73164: PUSH
73165: DOUBLE
73166: LD_INT 1
73168: DEC
73169: ST_TO_ADDR
73170: LD_EXP 44
73174: PUSH
73175: FOR_TO
73176: IFFALSE 73857
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73178: LD_EXP 44
73182: PUSH
73183: LD_VAR 0 2
73187: ARRAY
73188: NOT
73189: PUSH
73190: LD_EXP 68
73194: PUSH
73195: LD_VAR 0 2
73199: ARRAY
73200: NOT
73201: OR
73202: IFFALSE 73206
// continue ;
73204: GO 73175
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73206: LD_ADDR_VAR 0 5
73210: PUSH
73211: LD_EXP 44
73215: PUSH
73216: LD_VAR 0 2
73220: ARRAY
73221: PUSH
73222: LD_INT 1
73224: ARRAY
73225: PPUSH
73226: CALL_OW 255
73230: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73231: LD_ADDR_VAR 0 6
73235: PUSH
73236: LD_EXP 44
73240: PUSH
73241: LD_VAR 0 2
73245: ARRAY
73246: PPUSH
73247: LD_INT 30
73249: PUSH
73250: LD_INT 3
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PPUSH
73257: CALL_OW 72
73261: ST_TO_ADDR
// if not fac then
73262: LD_VAR 0 6
73266: NOT
73267: IFFALSE 73318
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73269: LD_ADDR_VAR 0 6
73273: PUSH
73274: LD_EXP 44
73278: PUSH
73279: LD_VAR 0 2
73283: ARRAY
73284: PPUSH
73285: LD_INT 2
73287: PUSH
73288: LD_INT 30
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 30
73300: PUSH
73301: LD_INT 1
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: LIST
73312: PPUSH
73313: CALL_OW 72
73317: ST_TO_ADDR
// if not fac then
73318: LD_VAR 0 6
73322: NOT
73323: IFFALSE 73327
// continue ;
73325: GO 73175
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73327: LD_ADDR_VAR 0 7
73331: PUSH
73332: LD_EXP 68
73336: PUSH
73337: LD_VAR 0 2
73341: ARRAY
73342: PPUSH
73343: LD_INT 22
73345: PUSH
73346: LD_VAR 0 5
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 21
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 3
73367: PUSH
73368: LD_INT 24
73370: PUSH
73371: LD_INT 1000
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: PPUSH
73387: CALL_OW 70
73391: ST_TO_ADDR
// for j in fac do
73392: LD_ADDR_VAR 0 3
73396: PUSH
73397: LD_VAR 0 6
73401: PUSH
73402: FOR_IN
73403: IFFALSE 73484
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73405: LD_ADDR_VAR 0 7
73409: PUSH
73410: LD_VAR 0 7
73414: PUSH
73415: LD_INT 22
73417: PUSH
73418: LD_VAR 0 5
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 91
73429: PUSH
73430: LD_VAR 0 3
73434: PUSH
73435: LD_INT 15
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 21
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 3
73455: PUSH
73456: LD_INT 24
73458: PUSH
73459: LD_INT 1000
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 69
73480: UNION
73481: ST_TO_ADDR
73482: GO 73402
73484: POP
73485: POP
// if not vehs then
73486: LD_VAR 0 7
73490: NOT
73491: IFFALSE 73517
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73493: LD_ADDR_EXP 56
73497: PUSH
73498: LD_EXP 56
73502: PPUSH
73503: LD_VAR 0 2
73507: PPUSH
73508: EMPTY
73509: PPUSH
73510: CALL_OW 1
73514: ST_TO_ADDR
// continue ;
73515: GO 73175
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73517: LD_ADDR_VAR 0 8
73521: PUSH
73522: LD_EXP 44
73526: PUSH
73527: LD_VAR 0 2
73531: ARRAY
73532: PPUSH
73533: LD_INT 30
73535: PUSH
73536: LD_INT 3
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PPUSH
73543: CALL_OW 72
73547: ST_TO_ADDR
// if tmp then
73548: LD_VAR 0 8
73552: IFFALSE 73655
// begin for j in tmp do
73554: LD_ADDR_VAR 0 3
73558: PUSH
73559: LD_VAR 0 8
73563: PUSH
73564: FOR_IN
73565: IFFALSE 73653
// for k in UnitsInside ( j ) do
73567: LD_ADDR_VAR 0 4
73571: PUSH
73572: LD_VAR 0 3
73576: PPUSH
73577: CALL_OW 313
73581: PUSH
73582: FOR_IN
73583: IFFALSE 73649
// if k then
73585: LD_VAR 0 4
73589: IFFALSE 73647
// if not k in mc_repair_vehicle [ i ] then
73591: LD_VAR 0 4
73595: PUSH
73596: LD_EXP 56
73600: PUSH
73601: LD_VAR 0 2
73605: ARRAY
73606: IN
73607: NOT
73608: IFFALSE 73647
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73610: LD_ADDR_EXP 56
73614: PUSH
73615: LD_EXP 56
73619: PPUSH
73620: LD_VAR 0 2
73624: PPUSH
73625: LD_EXP 56
73629: PUSH
73630: LD_VAR 0 2
73634: ARRAY
73635: PUSH
73636: LD_VAR 0 4
73640: UNION
73641: PPUSH
73642: CALL_OW 1
73646: ST_TO_ADDR
73647: GO 73582
73649: POP
73650: POP
73651: GO 73564
73653: POP
73654: POP
// end ; if not mc_repair_vehicle [ i ] then
73655: LD_EXP 56
73659: PUSH
73660: LD_VAR 0 2
73664: ARRAY
73665: NOT
73666: IFFALSE 73670
// continue ;
73668: GO 73175
// for j in mc_repair_vehicle [ i ] do
73670: LD_ADDR_VAR 0 3
73674: PUSH
73675: LD_EXP 56
73679: PUSH
73680: LD_VAR 0 2
73684: ARRAY
73685: PUSH
73686: FOR_IN
73687: IFFALSE 73853
// begin if GetClass ( j ) <> 3 then
73689: LD_VAR 0 3
73693: PPUSH
73694: CALL_OW 257
73698: PUSH
73699: LD_INT 3
73701: NONEQUAL
73702: IFFALSE 73743
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73704: LD_ADDR_EXP 56
73708: PUSH
73709: LD_EXP 56
73713: PPUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: LD_EXP 56
73723: PUSH
73724: LD_VAR 0 2
73728: ARRAY
73729: PUSH
73730: LD_VAR 0 3
73734: DIFF
73735: PPUSH
73736: CALL_OW 1
73740: ST_TO_ADDR
// continue ;
73741: GO 73686
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73743: LD_VAR 0 3
73747: PPUSH
73748: CALL_OW 311
73752: NOT
73753: PUSH
73754: LD_VAR 0 3
73758: PUSH
73759: LD_EXP 47
73763: PUSH
73764: LD_VAR 0 2
73768: ARRAY
73769: PUSH
73770: LD_INT 1
73772: ARRAY
73773: IN
73774: NOT
73775: AND
73776: PUSH
73777: LD_VAR 0 3
73781: PUSH
73782: LD_EXP 47
73786: PUSH
73787: LD_VAR 0 2
73791: ARRAY
73792: PUSH
73793: LD_INT 2
73795: ARRAY
73796: IN
73797: NOT
73798: AND
73799: IFFALSE 73851
// begin if IsInUnit ( j ) then
73801: LD_VAR 0 3
73805: PPUSH
73806: CALL_OW 310
73810: IFFALSE 73821
// ComExitBuilding ( j ) ;
73812: LD_VAR 0 3
73816: PPUSH
73817: CALL_OW 122
// if not HasTask ( j ) then
73821: LD_VAR 0 3
73825: PPUSH
73826: CALL_OW 314
73830: NOT
73831: IFFALSE 73851
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73833: LD_VAR 0 3
73837: PPUSH
73838: LD_VAR 0 7
73842: PUSH
73843: LD_INT 1
73845: ARRAY
73846: PPUSH
73847: CALL_OW 189
// end ; end ;
73851: GO 73686
73853: POP
73854: POP
// end ;
73855: GO 73175
73857: POP
73858: POP
// end ;
73859: LD_VAR 0 1
73863: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73864: LD_INT 0
73866: PPUSH
73867: PPUSH
73868: PPUSH
73869: PPUSH
73870: PPUSH
73871: PPUSH
73872: PPUSH
73873: PPUSH
73874: PPUSH
73875: PPUSH
73876: PPUSH
// if not mc_bases then
73877: LD_EXP 44
73881: NOT
73882: IFFALSE 73886
// exit ;
73884: GO 74688
// for i = 1 to mc_bases do
73886: LD_ADDR_VAR 0 2
73890: PUSH
73891: DOUBLE
73892: LD_INT 1
73894: DEC
73895: ST_TO_ADDR
73896: LD_EXP 44
73900: PUSH
73901: FOR_TO
73902: IFFALSE 74686
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
73904: LD_EXP 72
73908: PUSH
73909: LD_VAR 0 2
73913: ARRAY
73914: NOT
73915: PUSH
73916: LD_EXP 47
73920: PUSH
73921: LD_VAR 0 2
73925: ARRAY
73926: PUSH
73927: LD_INT 1
73929: ARRAY
73930: OR
73931: PUSH
73932: LD_EXP 47
73936: PUSH
73937: LD_VAR 0 2
73941: ARRAY
73942: PUSH
73943: LD_INT 2
73945: ARRAY
73946: OR
73947: PUSH
73948: LD_EXP 70
73952: PUSH
73953: LD_VAR 0 2
73957: ARRAY
73958: PPUSH
73959: LD_INT 1
73961: PPUSH
73962: CALL_OW 325
73966: NOT
73967: OR
73968: PUSH
73969: LD_EXP 67
73973: PUSH
73974: LD_VAR 0 2
73978: ARRAY
73979: OR
73980: IFFALSE 73984
// continue ;
73982: GO 73901
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
73984: LD_ADDR_VAR 0 8
73988: PUSH
73989: LD_EXP 44
73993: PUSH
73994: LD_VAR 0 2
73998: ARRAY
73999: PPUSH
74000: LD_INT 25
74002: PUSH
74003: LD_INT 4
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 50
74012: PUSH
74013: EMPTY
74014: LIST
74015: PUSH
74016: LD_INT 3
74018: PUSH
74019: LD_INT 60
74021: PUSH
74022: EMPTY
74023: LIST
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: LIST
74033: PPUSH
74034: CALL_OW 72
74038: PUSH
74039: LD_EXP 48
74043: PUSH
74044: LD_VAR 0 2
74048: ARRAY
74049: DIFF
74050: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74051: LD_ADDR_VAR 0 9
74055: PUSH
74056: LD_EXP 44
74060: PUSH
74061: LD_VAR 0 2
74065: ARRAY
74066: PPUSH
74067: LD_INT 2
74069: PUSH
74070: LD_INT 30
74072: PUSH
74073: LD_INT 0
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 30
74082: PUSH
74083: LD_INT 1
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: PPUSH
74095: CALL_OW 72
74099: ST_TO_ADDR
// if not tmp or not dep then
74100: LD_VAR 0 8
74104: NOT
74105: PUSH
74106: LD_VAR 0 9
74110: NOT
74111: OR
74112: IFFALSE 74116
// continue ;
74114: GO 73901
// side := GetSide ( tmp [ 1 ] ) ;
74116: LD_ADDR_VAR 0 11
74120: PUSH
74121: LD_VAR 0 8
74125: PUSH
74126: LD_INT 1
74128: ARRAY
74129: PPUSH
74130: CALL_OW 255
74134: ST_TO_ADDR
// dep := dep [ 1 ] ;
74135: LD_ADDR_VAR 0 9
74139: PUSH
74140: LD_VAR 0 9
74144: PUSH
74145: LD_INT 1
74147: ARRAY
74148: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74149: LD_ADDR_VAR 0 7
74153: PUSH
74154: LD_EXP 72
74158: PUSH
74159: LD_VAR 0 2
74163: ARRAY
74164: PPUSH
74165: LD_INT 22
74167: PUSH
74168: LD_INT 0
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 25
74177: PUSH
74178: LD_INT 12
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PPUSH
74189: CALL_OW 70
74193: PUSH
74194: LD_INT 22
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 25
74206: PUSH
74207: LD_INT 12
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 91
74216: PUSH
74217: LD_VAR 0 9
74221: PUSH
74222: LD_INT 20
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: LIST
74234: PPUSH
74235: CALL_OW 69
74239: UNION
74240: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74241: LD_ADDR_VAR 0 10
74245: PUSH
74246: LD_EXP 72
74250: PUSH
74251: LD_VAR 0 2
74255: ARRAY
74256: PPUSH
74257: LD_INT 81
74259: PUSH
74260: LD_VAR 0 11
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PPUSH
74269: CALL_OW 70
74273: ST_TO_ADDR
// if not apes or danger_at_area then
74274: LD_VAR 0 7
74278: NOT
74279: PUSH
74280: LD_VAR 0 10
74284: OR
74285: IFFALSE 74335
// begin if mc_taming [ i ] then
74287: LD_EXP 75
74291: PUSH
74292: LD_VAR 0 2
74296: ARRAY
74297: IFFALSE 74333
// begin MC_Reset ( i , 121 ) ;
74299: LD_VAR 0 2
74303: PPUSH
74304: LD_INT 121
74306: PPUSH
74307: CALL 59786 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74311: LD_ADDR_EXP 75
74315: PUSH
74316: LD_EXP 75
74320: PPUSH
74321: LD_VAR 0 2
74325: PPUSH
74326: EMPTY
74327: PPUSH
74328: CALL_OW 1
74332: ST_TO_ADDR
// end ; continue ;
74333: GO 73901
// end ; for j in tmp do
74335: LD_ADDR_VAR 0 3
74339: PUSH
74340: LD_VAR 0 8
74344: PUSH
74345: FOR_IN
74346: IFFALSE 74682
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74348: LD_VAR 0 3
74352: PUSH
74353: LD_EXP 75
74357: PUSH
74358: LD_VAR 0 2
74362: ARRAY
74363: IN
74364: NOT
74365: PUSH
74366: LD_EXP 75
74370: PUSH
74371: LD_VAR 0 2
74375: ARRAY
74376: PUSH
74377: LD_INT 3
74379: LESS
74380: AND
74381: IFFALSE 74439
// begin SetTag ( j , 121 ) ;
74383: LD_VAR 0 3
74387: PPUSH
74388: LD_INT 121
74390: PPUSH
74391: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74395: LD_ADDR_EXP 75
74399: PUSH
74400: LD_EXP 75
74404: PPUSH
74405: LD_VAR 0 2
74409: PUSH
74410: LD_EXP 75
74414: PUSH
74415: LD_VAR 0 2
74419: ARRAY
74420: PUSH
74421: LD_INT 1
74423: PLUS
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PPUSH
74429: LD_VAR 0 3
74433: PPUSH
74434: CALL 24301 0 3
74438: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74439: LD_VAR 0 3
74443: PUSH
74444: LD_EXP 75
74448: PUSH
74449: LD_VAR 0 2
74453: ARRAY
74454: IN
74455: IFFALSE 74680
// begin if GetClass ( j ) <> 4 then
74457: LD_VAR 0 3
74461: PPUSH
74462: CALL_OW 257
74466: PUSH
74467: LD_INT 4
74469: NONEQUAL
74470: IFFALSE 74523
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74472: LD_ADDR_EXP 75
74476: PUSH
74477: LD_EXP 75
74481: PPUSH
74482: LD_VAR 0 2
74486: PPUSH
74487: LD_EXP 75
74491: PUSH
74492: LD_VAR 0 2
74496: ARRAY
74497: PUSH
74498: LD_VAR 0 3
74502: DIFF
74503: PPUSH
74504: CALL_OW 1
74508: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74509: LD_VAR 0 3
74513: PPUSH
74514: LD_INT 0
74516: PPUSH
74517: CALL_OW 109
// continue ;
74521: GO 74345
// end ; if IsInUnit ( j ) then
74523: LD_VAR 0 3
74527: PPUSH
74528: CALL_OW 310
74532: IFFALSE 74543
// ComExitBuilding ( j ) ;
74534: LD_VAR 0 3
74538: PPUSH
74539: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74543: LD_ADDR_VAR 0 6
74547: PUSH
74548: LD_VAR 0 7
74552: PPUSH
74553: LD_VAR 0 3
74557: PPUSH
74558: CALL_OW 74
74562: ST_TO_ADDR
// if not ape then
74563: LD_VAR 0 6
74567: NOT
74568: IFFALSE 74572
// break ;
74570: GO 74682
// x := GetX ( ape ) ;
74572: LD_ADDR_VAR 0 4
74576: PUSH
74577: LD_VAR 0 6
74581: PPUSH
74582: CALL_OW 250
74586: ST_TO_ADDR
// y := GetY ( ape ) ;
74587: LD_ADDR_VAR 0 5
74591: PUSH
74592: LD_VAR 0 6
74596: PPUSH
74597: CALL_OW 251
74601: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74602: LD_VAR 0 4
74606: PPUSH
74607: LD_VAR 0 5
74611: PPUSH
74612: CALL_OW 488
74616: NOT
74617: PUSH
74618: LD_VAR 0 11
74622: PPUSH
74623: LD_VAR 0 4
74627: PPUSH
74628: LD_VAR 0 5
74632: PPUSH
74633: LD_INT 20
74635: PPUSH
74636: CALL 25197 0 4
74640: PUSH
74641: LD_INT 4
74643: ARRAY
74644: OR
74645: IFFALSE 74649
// break ;
74647: GO 74682
// if not HasTask ( j ) then
74649: LD_VAR 0 3
74653: PPUSH
74654: CALL_OW 314
74658: NOT
74659: IFFALSE 74680
// ComTameXY ( j , x , y ) ;
74661: LD_VAR 0 3
74665: PPUSH
74666: LD_VAR 0 4
74670: PPUSH
74671: LD_VAR 0 5
74675: PPUSH
74676: CALL_OW 131
// end ; end ;
74680: GO 74345
74682: POP
74683: POP
// end ;
74684: GO 73901
74686: POP
74687: POP
// end ;
74688: LD_VAR 0 1
74692: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74693: LD_INT 0
74695: PPUSH
74696: PPUSH
74697: PPUSH
74698: PPUSH
74699: PPUSH
74700: PPUSH
74701: PPUSH
74702: PPUSH
// if not mc_bases then
74703: LD_EXP 44
74707: NOT
74708: IFFALSE 74712
// exit ;
74710: GO 75338
// for i = 1 to mc_bases do
74712: LD_ADDR_VAR 0 2
74716: PUSH
74717: DOUBLE
74718: LD_INT 1
74720: DEC
74721: ST_TO_ADDR
74722: LD_EXP 44
74726: PUSH
74727: FOR_TO
74728: IFFALSE 75336
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74730: LD_EXP 73
74734: PUSH
74735: LD_VAR 0 2
74739: ARRAY
74740: NOT
74741: PUSH
74742: LD_EXP 73
74746: PUSH
74747: LD_VAR 0 2
74751: ARRAY
74752: PPUSH
74753: LD_INT 25
74755: PUSH
74756: LD_INT 12
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PPUSH
74763: CALL_OW 72
74767: NOT
74768: OR
74769: IFFALSE 74773
// continue ;
74771: GO 74727
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74773: LD_ADDR_VAR 0 5
74777: PUSH
74778: LD_EXP 73
74782: PUSH
74783: LD_VAR 0 2
74787: ARRAY
74788: PUSH
74789: LD_INT 1
74791: ARRAY
74792: PPUSH
74793: CALL_OW 255
74797: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74798: LD_VAR 0 5
74802: PPUSH
74803: LD_INT 2
74805: PPUSH
74806: CALL_OW 325
74810: IFFALSE 75063
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74812: LD_ADDR_VAR 0 4
74816: PUSH
74817: LD_EXP 73
74821: PUSH
74822: LD_VAR 0 2
74826: ARRAY
74827: PPUSH
74828: LD_INT 25
74830: PUSH
74831: LD_INT 16
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PPUSH
74838: CALL_OW 72
74842: ST_TO_ADDR
// if tmp < 6 then
74843: LD_VAR 0 4
74847: PUSH
74848: LD_INT 6
74850: LESS
74851: IFFALSE 75063
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74853: LD_ADDR_VAR 0 6
74857: PUSH
74858: LD_EXP 44
74862: PUSH
74863: LD_VAR 0 2
74867: ARRAY
74868: PPUSH
74869: LD_INT 2
74871: PUSH
74872: LD_INT 30
74874: PUSH
74875: LD_INT 0
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 30
74884: PUSH
74885: LD_INT 1
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: LIST
74896: PPUSH
74897: CALL_OW 72
74901: ST_TO_ADDR
// if depot then
74902: LD_VAR 0 6
74906: IFFALSE 75063
// begin selected := 0 ;
74908: LD_ADDR_VAR 0 7
74912: PUSH
74913: LD_INT 0
74915: ST_TO_ADDR
// for j in depot do
74916: LD_ADDR_VAR 0 3
74920: PUSH
74921: LD_VAR 0 6
74925: PUSH
74926: FOR_IN
74927: IFFALSE 74958
// begin if UnitsInside ( j ) < 6 then
74929: LD_VAR 0 3
74933: PPUSH
74934: CALL_OW 313
74938: PUSH
74939: LD_INT 6
74941: LESS
74942: IFFALSE 74956
// begin selected := j ;
74944: LD_ADDR_VAR 0 7
74948: PUSH
74949: LD_VAR 0 3
74953: ST_TO_ADDR
// break ;
74954: GO 74958
// end ; end ;
74956: GO 74926
74958: POP
74959: POP
// if selected then
74960: LD_VAR 0 7
74964: IFFALSE 75063
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
74966: LD_ADDR_VAR 0 3
74970: PUSH
74971: LD_EXP 73
74975: PUSH
74976: LD_VAR 0 2
74980: ARRAY
74981: PPUSH
74982: LD_INT 25
74984: PUSH
74985: LD_INT 12
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PPUSH
74992: CALL_OW 72
74996: PUSH
74997: FOR_IN
74998: IFFALSE 75061
// if not HasTask ( j ) then
75000: LD_VAR 0 3
75004: PPUSH
75005: CALL_OW 314
75009: NOT
75010: IFFALSE 75059
// begin if not IsInUnit ( j ) then
75012: LD_VAR 0 3
75016: PPUSH
75017: CALL_OW 310
75021: NOT
75022: IFFALSE 75038
// ComEnterUnit ( j , selected ) ;
75024: LD_VAR 0 3
75028: PPUSH
75029: LD_VAR 0 7
75033: PPUSH
75034: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75038: LD_VAR 0 3
75042: PPUSH
75043: LD_INT 16
75045: PPUSH
75046: CALL_OW 183
// AddComExitBuilding ( j ) ;
75050: LD_VAR 0 3
75054: PPUSH
75055: CALL_OW 182
// end ;
75059: GO 74997
75061: POP
75062: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75063: LD_VAR 0 5
75067: PPUSH
75068: LD_INT 11
75070: PPUSH
75071: CALL_OW 325
75075: IFFALSE 75334
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75077: LD_ADDR_VAR 0 4
75081: PUSH
75082: LD_EXP 73
75086: PUSH
75087: LD_VAR 0 2
75091: ARRAY
75092: PPUSH
75093: LD_INT 25
75095: PUSH
75096: LD_INT 16
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PPUSH
75103: CALL_OW 72
75107: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75108: LD_VAR 0 4
75112: PUSH
75113: LD_INT 6
75115: GREATEREQUAL
75116: PUSH
75117: LD_VAR 0 5
75121: PPUSH
75122: LD_INT 2
75124: PPUSH
75125: CALL_OW 325
75129: NOT
75130: OR
75131: IFFALSE 75334
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75133: LD_ADDR_VAR 0 8
75137: PUSH
75138: LD_EXP 44
75142: PUSH
75143: LD_VAR 0 2
75147: ARRAY
75148: PPUSH
75149: LD_INT 2
75151: PUSH
75152: LD_INT 30
75154: PUSH
75155: LD_INT 4
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 30
75164: PUSH
75165: LD_INT 5
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: LIST
75176: PPUSH
75177: CALL_OW 72
75181: ST_TO_ADDR
// if barracks then
75182: LD_VAR 0 8
75186: IFFALSE 75334
// begin selected := 0 ;
75188: LD_ADDR_VAR 0 7
75192: PUSH
75193: LD_INT 0
75195: ST_TO_ADDR
// for j in barracks do
75196: LD_ADDR_VAR 0 3
75200: PUSH
75201: LD_VAR 0 8
75205: PUSH
75206: FOR_IN
75207: IFFALSE 75238
// begin if UnitsInside ( j ) < 6 then
75209: LD_VAR 0 3
75213: PPUSH
75214: CALL_OW 313
75218: PUSH
75219: LD_INT 6
75221: LESS
75222: IFFALSE 75236
// begin selected := j ;
75224: LD_ADDR_VAR 0 7
75228: PUSH
75229: LD_VAR 0 3
75233: ST_TO_ADDR
// break ;
75234: GO 75238
// end ; end ;
75236: GO 75206
75238: POP
75239: POP
// if selected then
75240: LD_VAR 0 7
75244: IFFALSE 75334
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75246: LD_ADDR_VAR 0 3
75250: PUSH
75251: LD_EXP 73
75255: PUSH
75256: LD_VAR 0 2
75260: ARRAY
75261: PPUSH
75262: LD_INT 25
75264: PUSH
75265: LD_INT 12
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PPUSH
75272: CALL_OW 72
75276: PUSH
75277: FOR_IN
75278: IFFALSE 75332
// if not IsInUnit ( j ) and not HasTask ( j ) then
75280: LD_VAR 0 3
75284: PPUSH
75285: CALL_OW 310
75289: NOT
75290: PUSH
75291: LD_VAR 0 3
75295: PPUSH
75296: CALL_OW 314
75300: NOT
75301: AND
75302: IFFALSE 75330
// begin ComEnterUnit ( j , selected ) ;
75304: LD_VAR 0 3
75308: PPUSH
75309: LD_VAR 0 7
75313: PPUSH
75314: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75318: LD_VAR 0 3
75322: PPUSH
75323: LD_INT 15
75325: PPUSH
75326: CALL_OW 183
// end ;
75330: GO 75277
75332: POP
75333: POP
// end ; end ; end ; end ; end ;
75334: GO 74727
75336: POP
75337: POP
// end ;
75338: LD_VAR 0 1
75342: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75343: LD_INT 0
75345: PPUSH
75346: PPUSH
75347: PPUSH
75348: PPUSH
// if not mc_bases then
75349: LD_EXP 44
75353: NOT
75354: IFFALSE 75358
// exit ;
75356: GO 75536
// for i = 1 to mc_bases do
75358: LD_ADDR_VAR 0 2
75362: PUSH
75363: DOUBLE
75364: LD_INT 1
75366: DEC
75367: ST_TO_ADDR
75368: LD_EXP 44
75372: PUSH
75373: FOR_TO
75374: IFFALSE 75534
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75376: LD_ADDR_VAR 0 4
75380: PUSH
75381: LD_EXP 44
75385: PUSH
75386: LD_VAR 0 2
75390: ARRAY
75391: PPUSH
75392: LD_INT 25
75394: PUSH
75395: LD_INT 9
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PPUSH
75402: CALL_OW 72
75406: ST_TO_ADDR
// if not tmp then
75407: LD_VAR 0 4
75411: NOT
75412: IFFALSE 75416
// continue ;
75414: GO 75373
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75416: LD_EXP 70
75420: PUSH
75421: LD_VAR 0 2
75425: ARRAY
75426: PPUSH
75427: LD_INT 29
75429: PPUSH
75430: CALL_OW 325
75434: NOT
75435: PUSH
75436: LD_EXP 70
75440: PUSH
75441: LD_VAR 0 2
75445: ARRAY
75446: PPUSH
75447: LD_INT 28
75449: PPUSH
75450: CALL_OW 325
75454: NOT
75455: AND
75456: IFFALSE 75460
// continue ;
75458: GO 75373
// for j in tmp do
75460: LD_ADDR_VAR 0 3
75464: PUSH
75465: LD_VAR 0 4
75469: PUSH
75470: FOR_IN
75471: IFFALSE 75530
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75473: LD_VAR 0 3
75477: PUSH
75478: LD_EXP 47
75482: PUSH
75483: LD_VAR 0 2
75487: ARRAY
75488: PUSH
75489: LD_INT 1
75491: ARRAY
75492: IN
75493: NOT
75494: PUSH
75495: LD_VAR 0 3
75499: PUSH
75500: LD_EXP 47
75504: PUSH
75505: LD_VAR 0 2
75509: ARRAY
75510: PUSH
75511: LD_INT 2
75513: ARRAY
75514: IN
75515: NOT
75516: AND
75517: IFFALSE 75528
// ComSpaceTimeShoot ( j ) ;
75519: LD_VAR 0 3
75523: PPUSH
75524: CALL 20298 0 1
75528: GO 75470
75530: POP
75531: POP
// end ;
75532: GO 75373
75534: POP
75535: POP
// end ;
75536: LD_VAR 0 1
75540: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75541: LD_INT 0
75543: PPUSH
75544: PPUSH
75545: PPUSH
75546: PPUSH
75547: PPUSH
75548: PPUSH
75549: PPUSH
75550: PPUSH
75551: PPUSH
// if not mc_bases then
75552: LD_EXP 44
75556: NOT
75557: IFFALSE 75561
// exit ;
75559: GO 76183
// for i = 1 to mc_bases do
75561: LD_ADDR_VAR 0 2
75565: PUSH
75566: DOUBLE
75567: LD_INT 1
75569: DEC
75570: ST_TO_ADDR
75571: LD_EXP 44
75575: PUSH
75576: FOR_TO
75577: IFFALSE 76181
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75579: LD_EXP 79
75583: PUSH
75584: LD_VAR 0 2
75588: ARRAY
75589: NOT
75590: PUSH
75591: LD_INT 38
75593: PPUSH
75594: LD_EXP 70
75598: PUSH
75599: LD_VAR 0 2
75603: ARRAY
75604: PPUSH
75605: CALL_OW 321
75609: PUSH
75610: LD_INT 2
75612: NONEQUAL
75613: OR
75614: IFFALSE 75618
// continue ;
75616: GO 75576
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75618: LD_ADDR_VAR 0 8
75622: PUSH
75623: LD_EXP 44
75627: PUSH
75628: LD_VAR 0 2
75632: ARRAY
75633: PPUSH
75634: LD_INT 30
75636: PUSH
75637: LD_INT 34
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PPUSH
75644: CALL_OW 72
75648: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75649: LD_ADDR_VAR 0 9
75653: PUSH
75654: LD_EXP 44
75658: PUSH
75659: LD_VAR 0 2
75663: ARRAY
75664: PPUSH
75665: LD_INT 25
75667: PUSH
75668: LD_INT 4
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PPUSH
75675: CALL_OW 72
75679: PPUSH
75680: LD_INT 0
75682: PPUSH
75683: CALL 52862 0 2
75687: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75688: LD_VAR 0 9
75692: NOT
75693: PUSH
75694: LD_VAR 0 8
75698: NOT
75699: OR
75700: PUSH
75701: LD_EXP 44
75705: PUSH
75706: LD_VAR 0 2
75710: ARRAY
75711: PPUSH
75712: LD_INT 124
75714: PPUSH
75715: CALL 52862 0 2
75719: OR
75720: IFFALSE 75724
// continue ;
75722: GO 75576
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75724: LD_EXP 80
75728: PUSH
75729: LD_VAR 0 2
75733: ARRAY
75734: PUSH
75735: LD_EXP 79
75739: PUSH
75740: LD_VAR 0 2
75744: ARRAY
75745: LESS
75746: PUSH
75747: LD_EXP 80
75751: PUSH
75752: LD_VAR 0 2
75756: ARRAY
75757: PUSH
75758: LD_VAR 0 8
75762: LESS
75763: AND
75764: IFFALSE 76179
// begin tmp := sci [ 1 ] ;
75766: LD_ADDR_VAR 0 7
75770: PUSH
75771: LD_VAR 0 9
75775: PUSH
75776: LD_INT 1
75778: ARRAY
75779: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75780: LD_VAR 0 7
75784: PPUSH
75785: LD_INT 124
75787: PPUSH
75788: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: DOUBLE
75798: LD_EXP 79
75802: PUSH
75803: LD_VAR 0 2
75807: ARRAY
75808: INC
75809: ST_TO_ADDR
75810: LD_EXP 79
75814: PUSH
75815: LD_VAR 0 2
75819: ARRAY
75820: PUSH
75821: FOR_DOWNTO
75822: IFFALSE 76165
// begin if IsInUnit ( tmp ) then
75824: LD_VAR 0 7
75828: PPUSH
75829: CALL_OW 310
75833: IFFALSE 75844
// ComExitBuilding ( tmp ) ;
75835: LD_VAR 0 7
75839: PPUSH
75840: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75844: LD_INT 35
75846: PPUSH
75847: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75851: LD_VAR 0 7
75855: PPUSH
75856: CALL_OW 310
75860: NOT
75861: PUSH
75862: LD_VAR 0 7
75866: PPUSH
75867: CALL_OW 314
75871: NOT
75872: AND
75873: IFFALSE 75844
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
75875: LD_ADDR_VAR 0 6
75879: PUSH
75880: LD_VAR 0 7
75884: PPUSH
75885: CALL_OW 250
75889: PUSH
75890: LD_VAR 0 7
75894: PPUSH
75895: CALL_OW 251
75899: PUSH
75900: EMPTY
75901: LIST
75902: LIST
75903: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75904: LD_INT 35
75906: PPUSH
75907: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
75911: LD_ADDR_VAR 0 4
75915: PUSH
75916: LD_EXP 79
75920: PUSH
75921: LD_VAR 0 2
75925: ARRAY
75926: PUSH
75927: LD_VAR 0 3
75931: ARRAY
75932: PUSH
75933: LD_INT 1
75935: ARRAY
75936: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
75937: LD_ADDR_VAR 0 5
75941: PUSH
75942: LD_EXP 79
75946: PUSH
75947: LD_VAR 0 2
75951: ARRAY
75952: PUSH
75953: LD_VAR 0 3
75957: ARRAY
75958: PUSH
75959: LD_INT 2
75961: ARRAY
75962: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
75963: LD_VAR 0 7
75967: PPUSH
75968: LD_INT 10
75970: PPUSH
75971: CALL 26894 0 2
75975: PUSH
75976: LD_INT 4
75978: ARRAY
75979: IFFALSE 76017
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
75981: LD_VAR 0 7
75985: PPUSH
75986: LD_VAR 0 6
75990: PUSH
75991: LD_INT 1
75993: ARRAY
75994: PPUSH
75995: LD_VAR 0 6
75999: PUSH
76000: LD_INT 2
76002: ARRAY
76003: PPUSH
76004: CALL_OW 111
// wait ( 0 0$10 ) ;
76008: LD_INT 350
76010: PPUSH
76011: CALL_OW 67
// end else
76015: GO 76043
// begin ComMoveXY ( tmp , x , y ) ;
76017: LD_VAR 0 7
76021: PPUSH
76022: LD_VAR 0 4
76026: PPUSH
76027: LD_VAR 0 5
76031: PPUSH
76032: CALL_OW 111
// wait ( 0 0$3 ) ;
76036: LD_INT 105
76038: PPUSH
76039: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76043: LD_VAR 0 7
76047: PPUSH
76048: LD_VAR 0 4
76052: PPUSH
76053: LD_VAR 0 5
76057: PPUSH
76058: CALL_OW 307
76062: IFFALSE 75904
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76064: LD_VAR 0 7
76068: PPUSH
76069: LD_VAR 0 4
76073: PPUSH
76074: LD_VAR 0 5
76078: PPUSH
76079: LD_VAR 0 8
76083: PUSH
76084: LD_VAR 0 3
76088: ARRAY
76089: PPUSH
76090: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76094: LD_INT 35
76096: PPUSH
76097: CALL_OW 67
// until not HasTask ( tmp ) ;
76101: LD_VAR 0 7
76105: PPUSH
76106: CALL_OW 314
76110: NOT
76111: IFFALSE 76094
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76113: LD_ADDR_EXP 80
76117: PUSH
76118: LD_EXP 80
76122: PPUSH
76123: LD_VAR 0 2
76127: PUSH
76128: LD_EXP 80
76132: PUSH
76133: LD_VAR 0 2
76137: ARRAY
76138: PUSH
76139: LD_INT 1
76141: PLUS
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PPUSH
76147: LD_VAR 0 8
76151: PUSH
76152: LD_VAR 0 3
76156: ARRAY
76157: PPUSH
76158: CALL 24301 0 3
76162: ST_TO_ADDR
// end ;
76163: GO 75821
76165: POP
76166: POP
// MC_Reset ( i , 124 ) ;
76167: LD_VAR 0 2
76171: PPUSH
76172: LD_INT 124
76174: PPUSH
76175: CALL 59786 0 2
// end ; end ;
76179: GO 75576
76181: POP
76182: POP
// end ;
76183: LD_VAR 0 1
76187: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76188: LD_INT 0
76190: PPUSH
76191: PPUSH
76192: PPUSH
// if not mc_bases then
76193: LD_EXP 44
76197: NOT
76198: IFFALSE 76202
// exit ;
76200: GO 76808
// for i = 1 to mc_bases do
76202: LD_ADDR_VAR 0 2
76206: PUSH
76207: DOUBLE
76208: LD_INT 1
76210: DEC
76211: ST_TO_ADDR
76212: LD_EXP 44
76216: PUSH
76217: FOR_TO
76218: IFFALSE 76806
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76220: LD_ADDR_VAR 0 3
76224: PUSH
76225: LD_EXP 44
76229: PUSH
76230: LD_VAR 0 2
76234: ARRAY
76235: PPUSH
76236: LD_INT 25
76238: PUSH
76239: LD_INT 4
76241: PUSH
76242: EMPTY
76243: LIST
76244: LIST
76245: PPUSH
76246: CALL_OW 72
76250: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76251: LD_VAR 0 3
76255: NOT
76256: PUSH
76257: LD_EXP 81
76261: PUSH
76262: LD_VAR 0 2
76266: ARRAY
76267: NOT
76268: OR
76269: PUSH
76270: LD_EXP 44
76274: PUSH
76275: LD_VAR 0 2
76279: ARRAY
76280: PPUSH
76281: LD_INT 2
76283: PUSH
76284: LD_INT 30
76286: PUSH
76287: LD_INT 0
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 30
76296: PUSH
76297: LD_INT 1
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: LIST
76308: PPUSH
76309: CALL_OW 72
76313: NOT
76314: OR
76315: IFFALSE 76365
// begin if mc_deposits_finder [ i ] then
76317: LD_EXP 82
76321: PUSH
76322: LD_VAR 0 2
76326: ARRAY
76327: IFFALSE 76363
// begin MC_Reset ( i , 125 ) ;
76329: LD_VAR 0 2
76333: PPUSH
76334: LD_INT 125
76336: PPUSH
76337: CALL 59786 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76341: LD_ADDR_EXP 82
76345: PUSH
76346: LD_EXP 82
76350: PPUSH
76351: LD_VAR 0 2
76355: PPUSH
76356: EMPTY
76357: PPUSH
76358: CALL_OW 1
76362: ST_TO_ADDR
// end ; continue ;
76363: GO 76217
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76365: LD_EXP 81
76369: PUSH
76370: LD_VAR 0 2
76374: ARRAY
76375: PUSH
76376: LD_INT 1
76378: ARRAY
76379: PUSH
76380: LD_INT 3
76382: ARRAY
76383: PUSH
76384: LD_INT 1
76386: EQUAL
76387: PUSH
76388: LD_INT 20
76390: PPUSH
76391: LD_EXP 70
76395: PUSH
76396: LD_VAR 0 2
76400: ARRAY
76401: PPUSH
76402: CALL_OW 321
76406: PUSH
76407: LD_INT 2
76409: NONEQUAL
76410: AND
76411: IFFALSE 76461
// begin if mc_deposits_finder [ i ] then
76413: LD_EXP 82
76417: PUSH
76418: LD_VAR 0 2
76422: ARRAY
76423: IFFALSE 76459
// begin MC_Reset ( i , 125 ) ;
76425: LD_VAR 0 2
76429: PPUSH
76430: LD_INT 125
76432: PPUSH
76433: CALL 59786 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76437: LD_ADDR_EXP 82
76441: PUSH
76442: LD_EXP 82
76446: PPUSH
76447: LD_VAR 0 2
76451: PPUSH
76452: EMPTY
76453: PPUSH
76454: CALL_OW 1
76458: ST_TO_ADDR
// end ; continue ;
76459: GO 76217
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76461: LD_EXP 81
76465: PUSH
76466: LD_VAR 0 2
76470: ARRAY
76471: PUSH
76472: LD_INT 1
76474: ARRAY
76475: PUSH
76476: LD_INT 1
76478: ARRAY
76479: PPUSH
76480: LD_EXP 81
76484: PUSH
76485: LD_VAR 0 2
76489: ARRAY
76490: PUSH
76491: LD_INT 1
76493: ARRAY
76494: PUSH
76495: LD_INT 2
76497: ARRAY
76498: PPUSH
76499: LD_EXP 70
76503: PUSH
76504: LD_VAR 0 2
76508: ARRAY
76509: PPUSH
76510: CALL_OW 440
76514: IFFALSE 76557
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76516: LD_ADDR_EXP 81
76520: PUSH
76521: LD_EXP 81
76525: PPUSH
76526: LD_VAR 0 2
76530: PPUSH
76531: LD_EXP 81
76535: PUSH
76536: LD_VAR 0 2
76540: ARRAY
76541: PPUSH
76542: LD_INT 1
76544: PPUSH
76545: CALL_OW 3
76549: PPUSH
76550: CALL_OW 1
76554: ST_TO_ADDR
76555: GO 76804
// begin if not mc_deposits_finder [ i ] then
76557: LD_EXP 82
76561: PUSH
76562: LD_VAR 0 2
76566: ARRAY
76567: NOT
76568: IFFALSE 76620
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76570: LD_ADDR_EXP 82
76574: PUSH
76575: LD_EXP 82
76579: PPUSH
76580: LD_VAR 0 2
76584: PPUSH
76585: LD_VAR 0 3
76589: PUSH
76590: LD_INT 1
76592: ARRAY
76593: PUSH
76594: EMPTY
76595: LIST
76596: PPUSH
76597: CALL_OW 1
76601: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76602: LD_VAR 0 3
76606: PUSH
76607: LD_INT 1
76609: ARRAY
76610: PPUSH
76611: LD_INT 125
76613: PPUSH
76614: CALL_OW 109
// end else
76618: GO 76804
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76620: LD_EXP 82
76624: PUSH
76625: LD_VAR 0 2
76629: ARRAY
76630: PUSH
76631: LD_INT 1
76633: ARRAY
76634: PPUSH
76635: CALL_OW 310
76639: IFFALSE 76662
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76641: LD_EXP 82
76645: PUSH
76646: LD_VAR 0 2
76650: ARRAY
76651: PUSH
76652: LD_INT 1
76654: ARRAY
76655: PPUSH
76656: CALL_OW 122
76660: GO 76804
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76662: LD_EXP 82
76666: PUSH
76667: LD_VAR 0 2
76671: ARRAY
76672: PUSH
76673: LD_INT 1
76675: ARRAY
76676: PPUSH
76677: CALL_OW 314
76681: NOT
76682: PUSH
76683: LD_EXP 82
76687: PUSH
76688: LD_VAR 0 2
76692: ARRAY
76693: PUSH
76694: LD_INT 1
76696: ARRAY
76697: PPUSH
76698: LD_EXP 81
76702: PUSH
76703: LD_VAR 0 2
76707: ARRAY
76708: PUSH
76709: LD_INT 1
76711: ARRAY
76712: PUSH
76713: LD_INT 1
76715: ARRAY
76716: PPUSH
76717: LD_EXP 81
76721: PUSH
76722: LD_VAR 0 2
76726: ARRAY
76727: PUSH
76728: LD_INT 1
76730: ARRAY
76731: PUSH
76732: LD_INT 2
76734: ARRAY
76735: PPUSH
76736: CALL_OW 297
76740: PUSH
76741: LD_INT 6
76743: GREATER
76744: AND
76745: IFFALSE 76804
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76747: LD_EXP 82
76751: PUSH
76752: LD_VAR 0 2
76756: ARRAY
76757: PUSH
76758: LD_INT 1
76760: ARRAY
76761: PPUSH
76762: LD_EXP 81
76766: PUSH
76767: LD_VAR 0 2
76771: ARRAY
76772: PUSH
76773: LD_INT 1
76775: ARRAY
76776: PUSH
76777: LD_INT 1
76779: ARRAY
76780: PPUSH
76781: LD_EXP 81
76785: PUSH
76786: LD_VAR 0 2
76790: ARRAY
76791: PUSH
76792: LD_INT 1
76794: ARRAY
76795: PUSH
76796: LD_INT 2
76798: ARRAY
76799: PPUSH
76800: CALL_OW 111
// end ; end ; end ;
76804: GO 76217
76806: POP
76807: POP
// end ;
76808: LD_VAR 0 1
76812: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76813: LD_INT 0
76815: PPUSH
76816: PPUSH
76817: PPUSH
76818: PPUSH
76819: PPUSH
76820: PPUSH
76821: PPUSH
76822: PPUSH
76823: PPUSH
76824: PPUSH
76825: PPUSH
// if not mc_bases then
76826: LD_EXP 44
76830: NOT
76831: IFFALSE 76835
// exit ;
76833: GO 77775
// for i = 1 to mc_bases do
76835: LD_ADDR_VAR 0 2
76839: PUSH
76840: DOUBLE
76841: LD_INT 1
76843: DEC
76844: ST_TO_ADDR
76845: LD_EXP 44
76849: PUSH
76850: FOR_TO
76851: IFFALSE 77773
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76853: LD_EXP 44
76857: PUSH
76858: LD_VAR 0 2
76862: ARRAY
76863: NOT
76864: PUSH
76865: LD_EXP 67
76869: PUSH
76870: LD_VAR 0 2
76874: ARRAY
76875: OR
76876: IFFALSE 76880
// continue ;
76878: GO 76850
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
76880: LD_ADDR_VAR 0 7
76884: PUSH
76885: LD_EXP 44
76889: PUSH
76890: LD_VAR 0 2
76894: ARRAY
76895: PUSH
76896: LD_INT 1
76898: ARRAY
76899: PPUSH
76900: CALL_OW 248
76904: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
76905: LD_VAR 0 7
76909: PUSH
76910: LD_INT 3
76912: EQUAL
76913: PUSH
76914: LD_EXP 63
76918: PUSH
76919: LD_VAR 0 2
76923: ARRAY
76924: PUSH
76925: LD_EXP 66
76929: PUSH
76930: LD_VAR 0 2
76934: ARRAY
76935: UNION
76936: PPUSH
76937: LD_INT 33
76939: PUSH
76940: LD_INT 2
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PPUSH
76947: CALL_OW 72
76951: NOT
76952: OR
76953: IFFALSE 76957
// continue ;
76955: GO 76850
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
76957: LD_ADDR_VAR 0 9
76961: PUSH
76962: LD_EXP 44
76966: PUSH
76967: LD_VAR 0 2
76971: ARRAY
76972: PPUSH
76973: LD_INT 30
76975: PUSH
76976: LD_INT 36
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: PPUSH
76983: CALL_OW 72
76987: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
76988: LD_ADDR_VAR 0 10
76992: PUSH
76993: LD_EXP 63
76997: PUSH
76998: LD_VAR 0 2
77002: ARRAY
77003: PPUSH
77004: LD_INT 34
77006: PUSH
77007: LD_INT 31
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PPUSH
77014: CALL_OW 72
77018: ST_TO_ADDR
// if not cts and not mcts then
77019: LD_VAR 0 9
77023: NOT
77024: PUSH
77025: LD_VAR 0 10
77029: NOT
77030: AND
77031: IFFALSE 77035
// continue ;
77033: GO 76850
// x := cts ;
77035: LD_ADDR_VAR 0 11
77039: PUSH
77040: LD_VAR 0 9
77044: ST_TO_ADDR
// if not x then
77045: LD_VAR 0 11
77049: NOT
77050: IFFALSE 77062
// x := mcts ;
77052: LD_ADDR_VAR 0 11
77056: PUSH
77057: LD_VAR 0 10
77061: ST_TO_ADDR
// if not x then
77062: LD_VAR 0 11
77066: NOT
77067: IFFALSE 77071
// continue ;
77069: GO 76850
// if mc_remote_driver [ i ] then
77071: LD_EXP 84
77075: PUSH
77076: LD_VAR 0 2
77080: ARRAY
77081: IFFALSE 77468
// for j in mc_remote_driver [ i ] do
77083: LD_ADDR_VAR 0 3
77087: PUSH
77088: LD_EXP 84
77092: PUSH
77093: LD_VAR 0 2
77097: ARRAY
77098: PUSH
77099: FOR_IN
77100: IFFALSE 77466
// begin if GetClass ( j ) <> 3 then
77102: LD_VAR 0 3
77106: PPUSH
77107: CALL_OW 257
77111: PUSH
77112: LD_INT 3
77114: NONEQUAL
77115: IFFALSE 77168
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77117: LD_ADDR_EXP 84
77121: PUSH
77122: LD_EXP 84
77126: PPUSH
77127: LD_VAR 0 2
77131: PPUSH
77132: LD_EXP 84
77136: PUSH
77137: LD_VAR 0 2
77141: ARRAY
77142: PUSH
77143: LD_VAR 0 3
77147: DIFF
77148: PPUSH
77149: CALL_OW 1
77153: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77154: LD_VAR 0 3
77158: PPUSH
77159: LD_INT 0
77161: PPUSH
77162: CALL_OW 109
// continue ;
77166: GO 77099
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77168: LD_EXP 63
77172: PUSH
77173: LD_VAR 0 2
77177: ARRAY
77178: PPUSH
77179: LD_INT 34
77181: PUSH
77182: LD_INT 31
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: LD_INT 58
77191: PUSH
77192: EMPTY
77193: LIST
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PPUSH
77199: CALL_OW 72
77203: PUSH
77204: LD_VAR 0 3
77208: PPUSH
77209: CALL 52950 0 1
77213: NOT
77214: AND
77215: IFFALSE 77286
// begin if IsInUnit ( j ) then
77217: LD_VAR 0 3
77221: PPUSH
77222: CALL_OW 310
77226: IFFALSE 77237
// ComExitBuilding ( j ) ;
77228: LD_VAR 0 3
77232: PPUSH
77233: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77237: LD_VAR 0 3
77241: PPUSH
77242: LD_EXP 63
77246: PUSH
77247: LD_VAR 0 2
77251: ARRAY
77252: PPUSH
77253: LD_INT 34
77255: PUSH
77256: LD_INT 31
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 58
77265: PUSH
77266: EMPTY
77267: LIST
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PPUSH
77273: CALL_OW 72
77277: PUSH
77278: LD_INT 1
77280: ARRAY
77281: PPUSH
77282: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77286: LD_VAR 0 3
77290: PPUSH
77291: CALL_OW 310
77295: NOT
77296: PUSH
77297: LD_VAR 0 3
77301: PPUSH
77302: CALL_OW 310
77306: PPUSH
77307: CALL_OW 266
77311: PUSH
77312: LD_INT 36
77314: NONEQUAL
77315: PUSH
77316: LD_VAR 0 3
77320: PPUSH
77321: CALL 52950 0 1
77325: NOT
77326: AND
77327: OR
77328: IFFALSE 77464
// begin if IsInUnit ( j ) then
77330: LD_VAR 0 3
77334: PPUSH
77335: CALL_OW 310
77339: IFFALSE 77350
// ComExitBuilding ( j ) ;
77341: LD_VAR 0 3
77345: PPUSH
77346: CALL_OW 122
// ct := 0 ;
77350: LD_ADDR_VAR 0 8
77354: PUSH
77355: LD_INT 0
77357: ST_TO_ADDR
// for k in x do
77358: LD_ADDR_VAR 0 4
77362: PUSH
77363: LD_VAR 0 11
77367: PUSH
77368: FOR_IN
77369: IFFALSE 77442
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77371: LD_VAR 0 4
77375: PPUSH
77376: CALL_OW 264
77380: PUSH
77381: LD_INT 31
77383: EQUAL
77384: PUSH
77385: LD_VAR 0 4
77389: PPUSH
77390: CALL_OW 311
77394: NOT
77395: AND
77396: PUSH
77397: LD_VAR 0 4
77401: PPUSH
77402: CALL_OW 266
77406: PUSH
77407: LD_INT 36
77409: EQUAL
77410: PUSH
77411: LD_VAR 0 4
77415: PPUSH
77416: CALL_OW 313
77420: PUSH
77421: LD_INT 3
77423: LESS
77424: AND
77425: OR
77426: IFFALSE 77440
// begin ct := k ;
77428: LD_ADDR_VAR 0 8
77432: PUSH
77433: LD_VAR 0 4
77437: ST_TO_ADDR
// break ;
77438: GO 77442
// end ;
77440: GO 77368
77442: POP
77443: POP
// if ct then
77444: LD_VAR 0 8
77448: IFFALSE 77464
// ComEnterUnit ( j , ct ) ;
77450: LD_VAR 0 3
77454: PPUSH
77455: LD_VAR 0 8
77459: PPUSH
77460: CALL_OW 120
// end ; end ;
77464: GO 77099
77466: POP
77467: POP
// places := 0 ;
77468: LD_ADDR_VAR 0 5
77472: PUSH
77473: LD_INT 0
77475: ST_TO_ADDR
// for j = 1 to x do
77476: LD_ADDR_VAR 0 3
77480: PUSH
77481: DOUBLE
77482: LD_INT 1
77484: DEC
77485: ST_TO_ADDR
77486: LD_VAR 0 11
77490: PUSH
77491: FOR_TO
77492: IFFALSE 77568
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77494: LD_VAR 0 11
77498: PUSH
77499: LD_VAR 0 3
77503: ARRAY
77504: PPUSH
77505: CALL_OW 264
77509: PUSH
77510: LD_INT 31
77512: EQUAL
77513: IFFALSE 77531
// places := places + 1 else
77515: LD_ADDR_VAR 0 5
77519: PUSH
77520: LD_VAR 0 5
77524: PUSH
77525: LD_INT 1
77527: PLUS
77528: ST_TO_ADDR
77529: GO 77566
// if GetBType ( x [ j ] ) = b_control_tower then
77531: LD_VAR 0 11
77535: PUSH
77536: LD_VAR 0 3
77540: ARRAY
77541: PPUSH
77542: CALL_OW 266
77546: PUSH
77547: LD_INT 36
77549: EQUAL
77550: IFFALSE 77566
// places := places + 3 ;
77552: LD_ADDR_VAR 0 5
77556: PUSH
77557: LD_VAR 0 5
77561: PUSH
77562: LD_INT 3
77564: PLUS
77565: ST_TO_ADDR
77566: GO 77491
77568: POP
77569: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77570: LD_VAR 0 5
77574: PUSH
77575: LD_INT 0
77577: EQUAL
77578: PUSH
77579: LD_VAR 0 5
77583: PUSH
77584: LD_EXP 84
77588: PUSH
77589: LD_VAR 0 2
77593: ARRAY
77594: LESSEQUAL
77595: OR
77596: IFFALSE 77600
// continue ;
77598: GO 76850
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77600: LD_ADDR_VAR 0 6
77604: PUSH
77605: LD_EXP 44
77609: PUSH
77610: LD_VAR 0 2
77614: ARRAY
77615: PPUSH
77616: LD_INT 25
77618: PUSH
77619: LD_INT 3
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PPUSH
77626: CALL_OW 72
77630: PUSH
77631: LD_EXP 84
77635: PUSH
77636: LD_VAR 0 2
77640: ARRAY
77641: DIFF
77642: PPUSH
77643: LD_INT 3
77645: PPUSH
77646: CALL 53850 0 2
77650: ST_TO_ADDR
// for j in tmp do
77651: LD_ADDR_VAR 0 3
77655: PUSH
77656: LD_VAR 0 6
77660: PUSH
77661: FOR_IN
77662: IFFALSE 77697
// if GetTag ( j ) > 0 then
77664: LD_VAR 0 3
77668: PPUSH
77669: CALL_OW 110
77673: PUSH
77674: LD_INT 0
77676: GREATER
77677: IFFALSE 77695
// tmp := tmp diff j ;
77679: LD_ADDR_VAR 0 6
77683: PUSH
77684: LD_VAR 0 6
77688: PUSH
77689: LD_VAR 0 3
77693: DIFF
77694: ST_TO_ADDR
77695: GO 77661
77697: POP
77698: POP
// if not tmp then
77699: LD_VAR 0 6
77703: NOT
77704: IFFALSE 77708
// continue ;
77706: GO 76850
// if places then
77708: LD_VAR 0 5
77712: IFFALSE 77771
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77714: LD_ADDR_EXP 84
77718: PUSH
77719: LD_EXP 84
77723: PPUSH
77724: LD_VAR 0 2
77728: PPUSH
77729: LD_EXP 84
77733: PUSH
77734: LD_VAR 0 2
77738: ARRAY
77739: PUSH
77740: LD_VAR 0 6
77744: PUSH
77745: LD_INT 1
77747: ARRAY
77748: UNION
77749: PPUSH
77750: CALL_OW 1
77754: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77755: LD_VAR 0 6
77759: PUSH
77760: LD_INT 1
77762: ARRAY
77763: PPUSH
77764: LD_INT 126
77766: PPUSH
77767: CALL_OW 109
// end ; end ;
77771: GO 76850
77773: POP
77774: POP
// end ;
77775: LD_VAR 0 1
77779: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77780: LD_INT 0
77782: PPUSH
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
77787: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77788: LD_VAR 0 1
77792: NOT
77793: PUSH
77794: LD_VAR 0 2
77798: NOT
77799: OR
77800: PUSH
77801: LD_VAR 0 3
77805: NOT
77806: OR
77807: PUSH
77808: LD_VAR 0 4
77812: PUSH
77813: LD_INT 1
77815: PUSH
77816: LD_INT 2
77818: PUSH
77819: LD_INT 3
77821: PUSH
77822: LD_INT 4
77824: PUSH
77825: LD_INT 5
77827: PUSH
77828: LD_INT 8
77830: PUSH
77831: LD_INT 9
77833: PUSH
77834: LD_INT 15
77836: PUSH
77837: LD_INT 16
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: IN
77851: NOT
77852: OR
77853: IFFALSE 77857
// exit ;
77855: GO 78757
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: LD_VAR 0 2
77866: PPUSH
77867: LD_INT 21
77869: PUSH
77870: LD_INT 3
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 24
77879: PUSH
77880: LD_INT 250
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: PPUSH
77891: CALL_OW 72
77895: ST_TO_ADDR
// case class of 1 , 15 :
77896: LD_VAR 0 4
77900: PUSH
77901: LD_INT 1
77903: DOUBLE
77904: EQUAL
77905: IFTRUE 77915
77907: LD_INT 15
77909: DOUBLE
77910: EQUAL
77911: IFTRUE 77915
77913: GO 78000
77915: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
77916: LD_ADDR_VAR 0 8
77920: PUSH
77921: LD_VAR 0 2
77925: PPUSH
77926: LD_INT 2
77928: PUSH
77929: LD_INT 30
77931: PUSH
77932: LD_INT 32
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: PUSH
77939: LD_INT 30
77941: PUSH
77942: LD_INT 31
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: LIST
77953: PPUSH
77954: CALL_OW 72
77958: PUSH
77959: LD_VAR 0 2
77963: PPUSH
77964: LD_INT 2
77966: PUSH
77967: LD_INT 30
77969: PUSH
77970: LD_INT 4
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 30
77979: PUSH
77980: LD_INT 5
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: LIST
77991: PPUSH
77992: CALL_OW 72
77996: ADD
77997: ST_TO_ADDR
77998: GO 78246
78000: LD_INT 2
78002: DOUBLE
78003: EQUAL
78004: IFTRUE 78014
78006: LD_INT 16
78008: DOUBLE
78009: EQUAL
78010: IFTRUE 78014
78012: GO 78060
78014: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78015: LD_ADDR_VAR 0 8
78019: PUSH
78020: LD_VAR 0 2
78024: PPUSH
78025: LD_INT 2
78027: PUSH
78028: LD_INT 30
78030: PUSH
78031: LD_INT 0
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: LD_INT 30
78040: PUSH
78041: LD_INT 1
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: PPUSH
78053: CALL_OW 72
78057: ST_TO_ADDR
78058: GO 78246
78060: LD_INT 3
78062: DOUBLE
78063: EQUAL
78064: IFTRUE 78068
78066: GO 78114
78068: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78069: LD_ADDR_VAR 0 8
78073: PUSH
78074: LD_VAR 0 2
78078: PPUSH
78079: LD_INT 2
78081: PUSH
78082: LD_INT 30
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: LD_INT 30
78094: PUSH
78095: LD_INT 3
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: LIST
78106: PPUSH
78107: CALL_OW 72
78111: ST_TO_ADDR
78112: GO 78246
78114: LD_INT 4
78116: DOUBLE
78117: EQUAL
78118: IFTRUE 78122
78120: GO 78179
78122: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78123: LD_ADDR_VAR 0 8
78127: PUSH
78128: LD_VAR 0 2
78132: PPUSH
78133: LD_INT 2
78135: PUSH
78136: LD_INT 30
78138: PUSH
78139: LD_INT 6
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 30
78148: PUSH
78149: LD_INT 7
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PUSH
78156: LD_INT 30
78158: PUSH
78159: LD_INT 8
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: PPUSH
78172: CALL_OW 72
78176: ST_TO_ADDR
78177: GO 78246
78179: LD_INT 5
78181: DOUBLE
78182: EQUAL
78183: IFTRUE 78199
78185: LD_INT 8
78187: DOUBLE
78188: EQUAL
78189: IFTRUE 78199
78191: LD_INT 9
78193: DOUBLE
78194: EQUAL
78195: IFTRUE 78199
78197: GO 78245
78199: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78200: LD_ADDR_VAR 0 8
78204: PUSH
78205: LD_VAR 0 2
78209: PPUSH
78210: LD_INT 2
78212: PUSH
78213: LD_INT 30
78215: PUSH
78216: LD_INT 4
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 30
78225: PUSH
78226: LD_INT 5
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: LIST
78237: PPUSH
78238: CALL_OW 72
78242: ST_TO_ADDR
78243: GO 78246
78245: POP
// if not tmp then
78246: LD_VAR 0 8
78250: NOT
78251: IFFALSE 78255
// exit ;
78253: GO 78757
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78255: LD_VAR 0 4
78259: PUSH
78260: LD_INT 1
78262: PUSH
78263: LD_INT 15
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: IN
78270: PUSH
78271: LD_EXP 53
78275: PUSH
78276: LD_VAR 0 1
78280: ARRAY
78281: AND
78282: IFFALSE 78438
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78284: LD_ADDR_VAR 0 9
78288: PUSH
78289: LD_EXP 53
78293: PUSH
78294: LD_VAR 0 1
78298: ARRAY
78299: PUSH
78300: LD_INT 1
78302: ARRAY
78303: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78304: LD_VAR 0 9
78308: PUSH
78309: LD_EXP 54
78313: PUSH
78314: LD_VAR 0 1
78318: ARRAY
78319: IN
78320: NOT
78321: IFFALSE 78436
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78323: LD_ADDR_EXP 54
78327: PUSH
78328: LD_EXP 54
78332: PPUSH
78333: LD_VAR 0 1
78337: PUSH
78338: LD_EXP 54
78342: PUSH
78343: LD_VAR 0 1
78347: ARRAY
78348: PUSH
78349: LD_INT 1
78351: PLUS
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PPUSH
78357: LD_VAR 0 9
78361: PPUSH
78362: CALL 24301 0 3
78366: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78367: LD_ADDR_EXP 53
78371: PUSH
78372: LD_EXP 53
78376: PPUSH
78377: LD_VAR 0 1
78381: PPUSH
78382: LD_EXP 53
78386: PUSH
78387: LD_VAR 0 1
78391: ARRAY
78392: PUSH
78393: LD_VAR 0 9
78397: DIFF
78398: PPUSH
78399: CALL_OW 1
78403: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78404: LD_VAR 0 3
78408: PPUSH
78409: LD_EXP 54
78413: PUSH
78414: LD_VAR 0 1
78418: ARRAY
78419: PUSH
78420: LD_EXP 54
78424: PUSH
78425: LD_VAR 0 1
78429: ARRAY
78430: ARRAY
78431: PPUSH
78432: CALL_OW 120
// end ; exit ;
78436: GO 78757
// end ; if tmp > 1 then
78438: LD_VAR 0 8
78442: PUSH
78443: LD_INT 1
78445: GREATER
78446: IFFALSE 78550
// for i = 2 to tmp do
78448: LD_ADDR_VAR 0 6
78452: PUSH
78453: DOUBLE
78454: LD_INT 2
78456: DEC
78457: ST_TO_ADDR
78458: LD_VAR 0 8
78462: PUSH
78463: FOR_TO
78464: IFFALSE 78548
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78466: LD_VAR 0 8
78470: PUSH
78471: LD_VAR 0 6
78475: ARRAY
78476: PPUSH
78477: CALL_OW 461
78481: PUSH
78482: LD_INT 6
78484: EQUAL
78485: IFFALSE 78546
// begin x := tmp [ i ] ;
78487: LD_ADDR_VAR 0 9
78491: PUSH
78492: LD_VAR 0 8
78496: PUSH
78497: LD_VAR 0 6
78501: ARRAY
78502: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78503: LD_ADDR_VAR 0 8
78507: PUSH
78508: LD_VAR 0 8
78512: PPUSH
78513: LD_VAR 0 6
78517: PPUSH
78518: CALL_OW 3
78522: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78523: LD_ADDR_VAR 0 8
78527: PUSH
78528: LD_VAR 0 8
78532: PPUSH
78533: LD_INT 1
78535: PPUSH
78536: LD_VAR 0 9
78540: PPUSH
78541: CALL_OW 2
78545: ST_TO_ADDR
// end ;
78546: GO 78463
78548: POP
78549: POP
// for i in tmp do
78550: LD_ADDR_VAR 0 6
78554: PUSH
78555: LD_VAR 0 8
78559: PUSH
78560: FOR_IN
78561: IFFALSE 78630
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78563: LD_VAR 0 6
78567: PPUSH
78568: CALL_OW 313
78572: PUSH
78573: LD_INT 6
78575: LESS
78576: PUSH
78577: LD_VAR 0 6
78581: PPUSH
78582: CALL_OW 266
78586: PUSH
78587: LD_INT 31
78589: PUSH
78590: LD_INT 32
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: IN
78597: NOT
78598: AND
78599: PUSH
78600: LD_VAR 0 6
78604: PPUSH
78605: CALL_OW 313
78609: PUSH
78610: LD_INT 0
78612: EQUAL
78613: OR
78614: IFFALSE 78628
// begin j := i ;
78616: LD_ADDR_VAR 0 7
78620: PUSH
78621: LD_VAR 0 6
78625: ST_TO_ADDR
// break ;
78626: GO 78630
// end ; end ;
78628: GO 78560
78630: POP
78631: POP
// if j then
78632: LD_VAR 0 7
78636: IFFALSE 78654
// ComEnterUnit ( unit , j ) else
78638: LD_VAR 0 3
78642: PPUSH
78643: LD_VAR 0 7
78647: PPUSH
78648: CALL_OW 120
78652: GO 78757
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78654: LD_ADDR_VAR 0 10
78658: PUSH
78659: LD_VAR 0 2
78663: PPUSH
78664: LD_INT 2
78666: PUSH
78667: LD_INT 30
78669: PUSH
78670: LD_INT 0
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: LD_INT 30
78679: PUSH
78680: LD_INT 1
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: LIST
78691: PPUSH
78692: CALL_OW 72
78696: ST_TO_ADDR
// if depot then
78697: LD_VAR 0 10
78701: IFFALSE 78757
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78703: LD_ADDR_VAR 0 10
78707: PUSH
78708: LD_VAR 0 10
78712: PPUSH
78713: LD_VAR 0 3
78717: PPUSH
78718: CALL_OW 74
78722: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78723: LD_VAR 0 3
78727: PPUSH
78728: LD_VAR 0 10
78732: PPUSH
78733: CALL_OW 296
78737: PUSH
78738: LD_INT 10
78740: GREATER
78741: IFFALSE 78757
// ComStandNearbyBuilding ( unit , depot ) ;
78743: LD_VAR 0 3
78747: PPUSH
78748: LD_VAR 0 10
78752: PPUSH
78753: CALL 20915 0 2
// end ; end ; end ;
78757: LD_VAR 0 5
78761: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78762: LD_INT 0
78764: PPUSH
78765: PPUSH
78766: PPUSH
78767: PPUSH
// if not mc_bases then
78768: LD_EXP 44
78772: NOT
78773: IFFALSE 78777
// exit ;
78775: GO 79016
// for i = 1 to mc_bases do
78777: LD_ADDR_VAR 0 2
78781: PUSH
78782: DOUBLE
78783: LD_INT 1
78785: DEC
78786: ST_TO_ADDR
78787: LD_EXP 44
78791: PUSH
78792: FOR_TO
78793: IFFALSE 79014
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78795: LD_ADDR_VAR 0 4
78799: PUSH
78800: LD_EXP 44
78804: PUSH
78805: LD_VAR 0 2
78809: ARRAY
78810: PPUSH
78811: LD_INT 21
78813: PUSH
78814: LD_INT 1
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PPUSH
78821: CALL_OW 72
78825: PUSH
78826: LD_EXP 73
78830: PUSH
78831: LD_VAR 0 2
78835: ARRAY
78836: UNION
78837: ST_TO_ADDR
// if not tmp then
78838: LD_VAR 0 4
78842: NOT
78843: IFFALSE 78847
// continue ;
78845: GO 78792
// for j in tmp do
78847: LD_ADDR_VAR 0 3
78851: PUSH
78852: LD_VAR 0 4
78856: PUSH
78857: FOR_IN
78858: IFFALSE 79010
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78860: LD_VAR 0 3
78864: PPUSH
78865: CALL_OW 110
78869: NOT
78870: PUSH
78871: LD_VAR 0 3
78875: PPUSH
78876: CALL_OW 314
78880: NOT
78881: AND
78882: PUSH
78883: LD_VAR 0 3
78887: PPUSH
78888: CALL_OW 311
78892: NOT
78893: AND
78894: PUSH
78895: LD_VAR 0 3
78899: PPUSH
78900: CALL_OW 310
78904: NOT
78905: AND
78906: PUSH
78907: LD_VAR 0 3
78911: PUSH
78912: LD_EXP 47
78916: PUSH
78917: LD_VAR 0 2
78921: ARRAY
78922: PUSH
78923: LD_INT 1
78925: ARRAY
78926: IN
78927: NOT
78928: AND
78929: PUSH
78930: LD_VAR 0 3
78934: PUSH
78935: LD_EXP 47
78939: PUSH
78940: LD_VAR 0 2
78944: ARRAY
78945: PUSH
78946: LD_INT 2
78948: ARRAY
78949: IN
78950: NOT
78951: AND
78952: PUSH
78953: LD_VAR 0 3
78957: PUSH
78958: LD_EXP 56
78962: PUSH
78963: LD_VAR 0 2
78967: ARRAY
78968: IN
78969: NOT
78970: AND
78971: IFFALSE 79008
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
78973: LD_VAR 0 2
78977: PPUSH
78978: LD_EXP 44
78982: PUSH
78983: LD_VAR 0 2
78987: ARRAY
78988: PPUSH
78989: LD_VAR 0 3
78993: PPUSH
78994: LD_VAR 0 3
78998: PPUSH
78999: CALL_OW 257
79003: PPUSH
79004: CALL 77780 0 4
// end ;
79008: GO 78857
79010: POP
79011: POP
// end ;
79012: GO 78792
79014: POP
79015: POP
// end ;
79016: LD_VAR 0 1
79020: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79021: LD_INT 0
79023: PPUSH
79024: PPUSH
79025: PPUSH
79026: PPUSH
79027: PPUSH
79028: PPUSH
// if not mc_bases [ base ] then
79029: LD_EXP 44
79033: PUSH
79034: LD_VAR 0 1
79038: ARRAY
79039: NOT
79040: IFFALSE 79044
// exit ;
79042: GO 79226
// tmp := [ ] ;
79044: LD_ADDR_VAR 0 6
79048: PUSH
79049: EMPTY
79050: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79051: LD_ADDR_VAR 0 7
79055: PUSH
79056: LD_VAR 0 3
79060: PPUSH
79061: LD_INT 0
79063: PPUSH
79064: CALL_OW 517
79068: ST_TO_ADDR
// if not list then
79069: LD_VAR 0 7
79073: NOT
79074: IFFALSE 79078
// exit ;
79076: GO 79226
// for i = 1 to amount do
79078: LD_ADDR_VAR 0 5
79082: PUSH
79083: DOUBLE
79084: LD_INT 1
79086: DEC
79087: ST_TO_ADDR
79088: LD_VAR 0 2
79092: PUSH
79093: FOR_TO
79094: IFFALSE 79174
// begin x := rand ( 1 , list [ 1 ] ) ;
79096: LD_ADDR_VAR 0 8
79100: PUSH
79101: LD_INT 1
79103: PPUSH
79104: LD_VAR 0 7
79108: PUSH
79109: LD_INT 1
79111: ARRAY
79112: PPUSH
79113: CALL_OW 12
79117: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79118: LD_ADDR_VAR 0 6
79122: PUSH
79123: LD_VAR 0 6
79127: PPUSH
79128: LD_VAR 0 5
79132: PPUSH
79133: LD_VAR 0 7
79137: PUSH
79138: LD_INT 1
79140: ARRAY
79141: PUSH
79142: LD_VAR 0 8
79146: ARRAY
79147: PUSH
79148: LD_VAR 0 7
79152: PUSH
79153: LD_INT 2
79155: ARRAY
79156: PUSH
79157: LD_VAR 0 8
79161: ARRAY
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PPUSH
79167: CALL_OW 1
79171: ST_TO_ADDR
// end ;
79172: GO 79093
79174: POP
79175: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79176: LD_ADDR_EXP 57
79180: PUSH
79181: LD_EXP 57
79185: PPUSH
79186: LD_VAR 0 1
79190: PPUSH
79191: LD_VAR 0 6
79195: PPUSH
79196: CALL_OW 1
79200: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79201: LD_ADDR_EXP 59
79205: PUSH
79206: LD_EXP 59
79210: PPUSH
79211: LD_VAR 0 1
79215: PPUSH
79216: LD_VAR 0 3
79220: PPUSH
79221: CALL_OW 1
79225: ST_TO_ADDR
// end ;
79226: LD_VAR 0 4
79230: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79231: LD_INT 0
79233: PPUSH
// if not mc_bases [ base ] then
79234: LD_EXP 44
79238: PUSH
79239: LD_VAR 0 1
79243: ARRAY
79244: NOT
79245: IFFALSE 79249
// exit ;
79247: GO 79274
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79249: LD_ADDR_EXP 49
79253: PUSH
79254: LD_EXP 49
79258: PPUSH
79259: LD_VAR 0 1
79263: PPUSH
79264: LD_VAR 0 2
79268: PPUSH
79269: CALL_OW 1
79273: ST_TO_ADDR
// end ;
79274: LD_VAR 0 3
79278: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79279: LD_INT 0
79281: PPUSH
// if not mc_bases [ base ] then
79282: LD_EXP 44
79286: PUSH
79287: LD_VAR 0 1
79291: ARRAY
79292: NOT
79293: IFFALSE 79297
// exit ;
79295: GO 79334
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79297: LD_ADDR_EXP 49
79301: PUSH
79302: LD_EXP 49
79306: PPUSH
79307: LD_VAR 0 1
79311: PPUSH
79312: LD_EXP 49
79316: PUSH
79317: LD_VAR 0 1
79321: ARRAY
79322: PUSH
79323: LD_VAR 0 2
79327: UNION
79328: PPUSH
79329: CALL_OW 1
79333: ST_TO_ADDR
// end ;
79334: LD_VAR 0 3
79338: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79339: LD_INT 0
79341: PPUSH
// if not mc_bases [ base ] then
79342: LD_EXP 44
79346: PUSH
79347: LD_VAR 0 1
79351: ARRAY
79352: NOT
79353: IFFALSE 79357
// exit ;
79355: GO 79382
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79357: LD_ADDR_EXP 65
79361: PUSH
79362: LD_EXP 65
79366: PPUSH
79367: LD_VAR 0 1
79371: PPUSH
79372: LD_VAR 0 2
79376: PPUSH
79377: CALL_OW 1
79381: ST_TO_ADDR
// end ;
79382: LD_VAR 0 3
79386: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79387: LD_INT 0
79389: PPUSH
// if not mc_bases [ base ] then
79390: LD_EXP 44
79394: PUSH
79395: LD_VAR 0 1
79399: ARRAY
79400: NOT
79401: IFFALSE 79405
// exit ;
79403: GO 79442
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79405: LD_ADDR_EXP 65
79409: PUSH
79410: LD_EXP 65
79414: PPUSH
79415: LD_VAR 0 1
79419: PPUSH
79420: LD_EXP 65
79424: PUSH
79425: LD_VAR 0 1
79429: ARRAY
79430: PUSH
79431: LD_VAR 0 2
79435: ADD
79436: PPUSH
79437: CALL_OW 1
79441: ST_TO_ADDR
// end ;
79442: LD_VAR 0 3
79446: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79447: LD_INT 0
79449: PPUSH
// if not mc_bases [ base ] then
79450: LD_EXP 44
79454: PUSH
79455: LD_VAR 0 1
79459: ARRAY
79460: NOT
79461: IFFALSE 79465
// exit ;
79463: GO 79519
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79465: LD_ADDR_EXP 66
79469: PUSH
79470: LD_EXP 66
79474: PPUSH
79475: LD_VAR 0 1
79479: PPUSH
79480: LD_VAR 0 2
79484: PPUSH
79485: CALL_OW 1
79489: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79490: LD_ADDR_EXP 55
79494: PUSH
79495: LD_EXP 55
79499: PPUSH
79500: LD_VAR 0 1
79504: PPUSH
79505: LD_VAR 0 2
79509: PUSH
79510: LD_INT 0
79512: PLUS
79513: PPUSH
79514: CALL_OW 1
79518: ST_TO_ADDR
// end ;
79519: LD_VAR 0 3
79523: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79524: LD_INT 0
79526: PPUSH
// if not mc_bases [ base ] then
79527: LD_EXP 44
79531: PUSH
79532: LD_VAR 0 1
79536: ARRAY
79537: NOT
79538: IFFALSE 79542
// exit ;
79540: GO 79567
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79542: LD_ADDR_EXP 55
79546: PUSH
79547: LD_EXP 55
79551: PPUSH
79552: LD_VAR 0 1
79556: PPUSH
79557: LD_VAR 0 2
79561: PPUSH
79562: CALL_OW 1
79566: ST_TO_ADDR
// end ;
79567: LD_VAR 0 3
79571: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79572: LD_INT 0
79574: PPUSH
79575: PPUSH
79576: PPUSH
79577: PPUSH
// if not mc_bases [ base ] then
79578: LD_EXP 44
79582: PUSH
79583: LD_VAR 0 1
79587: ARRAY
79588: NOT
79589: IFFALSE 79593
// exit ;
79591: GO 79658
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79593: LD_ADDR_EXP 64
79597: PUSH
79598: LD_EXP 64
79602: PPUSH
79603: LD_VAR 0 1
79607: PUSH
79608: LD_EXP 64
79612: PUSH
79613: LD_VAR 0 1
79617: ARRAY
79618: PUSH
79619: LD_INT 1
79621: PLUS
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PPUSH
79627: LD_VAR 0 1
79631: PUSH
79632: LD_VAR 0 2
79636: PUSH
79637: LD_VAR 0 3
79641: PUSH
79642: LD_VAR 0 4
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: PPUSH
79653: CALL 24301 0 3
79657: ST_TO_ADDR
// end ;
79658: LD_VAR 0 5
79662: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79663: LD_INT 0
79665: PPUSH
// if not mc_bases [ base ] then
79666: LD_EXP 44
79670: PUSH
79671: LD_VAR 0 1
79675: ARRAY
79676: NOT
79677: IFFALSE 79681
// exit ;
79679: GO 79706
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79681: LD_ADDR_EXP 81
79685: PUSH
79686: LD_EXP 81
79690: PPUSH
79691: LD_VAR 0 1
79695: PPUSH
79696: LD_VAR 0 2
79700: PPUSH
79701: CALL_OW 1
79705: ST_TO_ADDR
// end ;
79706: LD_VAR 0 3
79710: RET
// export function MC_GetMinesField ( base ) ; begin
79711: LD_INT 0
79713: PPUSH
// result := mc_mines [ base ] ;
79714: LD_ADDR_VAR 0 2
79718: PUSH
79719: LD_EXP 57
79723: PUSH
79724: LD_VAR 0 1
79728: ARRAY
79729: ST_TO_ADDR
// end ;
79730: LD_VAR 0 2
79734: RET
// export function MC_GetProduceList ( base ) ; begin
79735: LD_INT 0
79737: PPUSH
// result := mc_produce [ base ] ;
79738: LD_ADDR_VAR 0 2
79742: PUSH
79743: LD_EXP 65
79747: PUSH
79748: LD_VAR 0 1
79752: ARRAY
79753: ST_TO_ADDR
// end ;
79754: LD_VAR 0 2
79758: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79759: LD_INT 0
79761: PPUSH
79762: PPUSH
// if not mc_bases then
79763: LD_EXP 44
79767: NOT
79768: IFFALSE 79772
// exit ;
79770: GO 79837
// if mc_bases [ base ] then
79772: LD_EXP 44
79776: PUSH
79777: LD_VAR 0 1
79781: ARRAY
79782: IFFALSE 79837
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79784: LD_ADDR_VAR 0 3
79788: PUSH
79789: LD_EXP 44
79793: PUSH
79794: LD_VAR 0 1
79798: ARRAY
79799: PPUSH
79800: LD_INT 30
79802: PUSH
79803: LD_VAR 0 2
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PPUSH
79812: CALL_OW 72
79816: ST_TO_ADDR
// if result then
79817: LD_VAR 0 3
79821: IFFALSE 79837
// result := result [ 1 ] ;
79823: LD_ADDR_VAR 0 3
79827: PUSH
79828: LD_VAR 0 3
79832: PUSH
79833: LD_INT 1
79835: ARRAY
79836: ST_TO_ADDR
// end ; end ;
79837: LD_VAR 0 3
79841: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79842: LD_INT 0
79844: PPUSH
79845: PPUSH
// if not mc_bases then
79846: LD_EXP 44
79850: NOT
79851: IFFALSE 79855
// exit ;
79853: GO 79900
// if mc_bases [ base ] then
79855: LD_EXP 44
79859: PUSH
79860: LD_VAR 0 1
79864: ARRAY
79865: IFFALSE 79900
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79867: LD_ADDR_VAR 0 3
79871: PUSH
79872: LD_EXP 44
79876: PUSH
79877: LD_VAR 0 1
79881: ARRAY
79882: PPUSH
79883: LD_INT 30
79885: PUSH
79886: LD_VAR 0 2
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PPUSH
79895: CALL_OW 72
79899: ST_TO_ADDR
// end ;
79900: LD_VAR 0 3
79904: RET
// export function MC_SetTame ( base , area ) ; begin
79905: LD_INT 0
79907: PPUSH
// if not mc_bases or not base then
79908: LD_EXP 44
79912: NOT
79913: PUSH
79914: LD_VAR 0 1
79918: NOT
79919: OR
79920: IFFALSE 79924
// exit ;
79922: GO 79949
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
79924: LD_ADDR_EXP 72
79928: PUSH
79929: LD_EXP 72
79933: PPUSH
79934: LD_VAR 0 1
79938: PPUSH
79939: LD_VAR 0 2
79943: PPUSH
79944: CALL_OW 1
79948: ST_TO_ADDR
// end ;
79949: LD_VAR 0 3
79953: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
79954: LD_INT 0
79956: PPUSH
79957: PPUSH
// if not mc_bases or not base then
79958: LD_EXP 44
79962: NOT
79963: PUSH
79964: LD_VAR 0 1
79968: NOT
79969: OR
79970: IFFALSE 79974
// exit ;
79972: GO 80076
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79974: LD_ADDR_VAR 0 4
79978: PUSH
79979: LD_EXP 44
79983: PUSH
79984: LD_VAR 0 1
79988: ARRAY
79989: PPUSH
79990: LD_INT 30
79992: PUSH
79993: LD_VAR 0 2
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: PPUSH
80002: CALL_OW 72
80006: ST_TO_ADDR
// if not tmp then
80007: LD_VAR 0 4
80011: NOT
80012: IFFALSE 80016
// exit ;
80014: GO 80076
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80016: LD_ADDR_EXP 76
80020: PUSH
80021: LD_EXP 76
80025: PPUSH
80026: LD_VAR 0 1
80030: PPUSH
80031: LD_EXP 76
80035: PUSH
80036: LD_VAR 0 1
80040: ARRAY
80041: PPUSH
80042: LD_EXP 76
80046: PUSH
80047: LD_VAR 0 1
80051: ARRAY
80052: PUSH
80053: LD_INT 1
80055: PLUS
80056: PPUSH
80057: LD_VAR 0 4
80061: PUSH
80062: LD_INT 1
80064: ARRAY
80065: PPUSH
80066: CALL_OW 2
80070: PPUSH
80071: CALL_OW 1
80075: ST_TO_ADDR
// end ;
80076: LD_VAR 0 3
80080: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80081: LD_INT 0
80083: PPUSH
80084: PPUSH
// if not mc_bases or not base or not kinds then
80085: LD_EXP 44
80089: NOT
80090: PUSH
80091: LD_VAR 0 1
80095: NOT
80096: OR
80097: PUSH
80098: LD_VAR 0 2
80102: NOT
80103: OR
80104: IFFALSE 80108
// exit ;
80106: GO 80169
// for i in kinds do
80108: LD_ADDR_VAR 0 4
80112: PUSH
80113: LD_VAR 0 2
80117: PUSH
80118: FOR_IN
80119: IFFALSE 80167
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80121: LD_ADDR_EXP 78
80125: PUSH
80126: LD_EXP 78
80130: PPUSH
80131: LD_VAR 0 1
80135: PUSH
80136: LD_EXP 78
80140: PUSH
80141: LD_VAR 0 1
80145: ARRAY
80146: PUSH
80147: LD_INT 1
80149: PLUS
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PPUSH
80155: LD_VAR 0 4
80159: PPUSH
80160: CALL 24301 0 3
80164: ST_TO_ADDR
80165: GO 80118
80167: POP
80168: POP
// end ;
80169: LD_VAR 0 3
80173: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80174: LD_INT 0
80176: PPUSH
// if not mc_bases or not base or not areas then
80177: LD_EXP 44
80181: NOT
80182: PUSH
80183: LD_VAR 0 1
80187: NOT
80188: OR
80189: PUSH
80190: LD_VAR 0 2
80194: NOT
80195: OR
80196: IFFALSE 80200
// exit ;
80198: GO 80225
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80200: LD_ADDR_EXP 62
80204: PUSH
80205: LD_EXP 62
80209: PPUSH
80210: LD_VAR 0 1
80214: PPUSH
80215: LD_VAR 0 2
80219: PPUSH
80220: CALL_OW 1
80224: ST_TO_ADDR
// end ;
80225: LD_VAR 0 3
80229: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80230: LD_INT 0
80232: PPUSH
// if not mc_bases or not base or not teleports_exit then
80233: LD_EXP 44
80237: NOT
80238: PUSH
80239: LD_VAR 0 1
80243: NOT
80244: OR
80245: PUSH
80246: LD_VAR 0 2
80250: NOT
80251: OR
80252: IFFALSE 80256
// exit ;
80254: GO 80281
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80256: LD_ADDR_EXP 79
80260: PUSH
80261: LD_EXP 79
80265: PPUSH
80266: LD_VAR 0 1
80270: PPUSH
80271: LD_VAR 0 2
80275: PPUSH
80276: CALL_OW 1
80280: ST_TO_ADDR
// end ;
80281: LD_VAR 0 3
80285: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80286: LD_INT 0
80288: PPUSH
80289: PPUSH
80290: PPUSH
// if not mc_bases or not base or not ext_list then
80291: LD_EXP 44
80295: NOT
80296: PUSH
80297: LD_VAR 0 1
80301: NOT
80302: OR
80303: PUSH
80304: LD_VAR 0 5
80308: NOT
80309: OR
80310: IFFALSE 80314
// exit ;
80312: GO 80487
// tmp := GetFacExtXYD ( x , y , d ) ;
80314: LD_ADDR_VAR 0 8
80318: PUSH
80319: LD_VAR 0 2
80323: PPUSH
80324: LD_VAR 0 3
80328: PPUSH
80329: LD_VAR 0 4
80333: PPUSH
80334: CALL 52980 0 3
80338: ST_TO_ADDR
// if not tmp then
80339: LD_VAR 0 8
80343: NOT
80344: IFFALSE 80348
// exit ;
80346: GO 80487
// for i in tmp do
80348: LD_ADDR_VAR 0 7
80352: PUSH
80353: LD_VAR 0 8
80357: PUSH
80358: FOR_IN
80359: IFFALSE 80485
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80361: LD_ADDR_EXP 49
80365: PUSH
80366: LD_EXP 49
80370: PPUSH
80371: LD_VAR 0 1
80375: PPUSH
80376: LD_EXP 49
80380: PUSH
80381: LD_VAR 0 1
80385: ARRAY
80386: PPUSH
80387: LD_EXP 49
80391: PUSH
80392: LD_VAR 0 1
80396: ARRAY
80397: PUSH
80398: LD_INT 1
80400: PLUS
80401: PPUSH
80402: LD_VAR 0 5
80406: PUSH
80407: LD_INT 1
80409: ARRAY
80410: PUSH
80411: LD_VAR 0 7
80415: PUSH
80416: LD_INT 1
80418: ARRAY
80419: PUSH
80420: LD_VAR 0 7
80424: PUSH
80425: LD_INT 2
80427: ARRAY
80428: PUSH
80429: LD_VAR 0 7
80433: PUSH
80434: LD_INT 3
80436: ARRAY
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: PPUSH
80444: CALL_OW 2
80448: PPUSH
80449: CALL_OW 1
80453: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80454: LD_ADDR_VAR 0 5
80458: PUSH
80459: LD_VAR 0 5
80463: PPUSH
80464: LD_INT 1
80466: PPUSH
80467: CALL_OW 3
80471: ST_TO_ADDR
// if not ext_list then
80472: LD_VAR 0 5
80476: NOT
80477: IFFALSE 80483
// exit ;
80479: POP
80480: POP
80481: GO 80487
// end ;
80483: GO 80358
80485: POP
80486: POP
// end ;
80487: LD_VAR 0 6
80491: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80492: LD_INT 0
80494: PPUSH
// if not mc_bases or not base or not weapon_list then
80495: LD_EXP 44
80499: NOT
80500: PUSH
80501: LD_VAR 0 1
80505: NOT
80506: OR
80507: PUSH
80508: LD_VAR 0 2
80512: NOT
80513: OR
80514: IFFALSE 80518
// exit ;
80516: GO 80543
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80518: LD_ADDR_EXP 83
80522: PUSH
80523: LD_EXP 83
80527: PPUSH
80528: LD_VAR 0 1
80532: PPUSH
80533: LD_VAR 0 2
80537: PPUSH
80538: CALL_OW 1
80542: ST_TO_ADDR
// end ;
80543: LD_VAR 0 3
80547: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80548: LD_INT 0
80550: PPUSH
// if not mc_bases or not base or not tech_list then
80551: LD_EXP 44
80555: NOT
80556: PUSH
80557: LD_VAR 0 1
80561: NOT
80562: OR
80563: PUSH
80564: LD_VAR 0 2
80568: NOT
80569: OR
80570: IFFALSE 80574
// exit ;
80572: GO 80599
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80574: LD_ADDR_EXP 71
80578: PUSH
80579: LD_EXP 71
80583: PPUSH
80584: LD_VAR 0 1
80588: PPUSH
80589: LD_VAR 0 2
80593: PPUSH
80594: CALL_OW 1
80598: ST_TO_ADDR
// end ;
80599: LD_VAR 0 3
80603: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80604: LD_INT 0
80606: PPUSH
// if not mc_bases or not parking_area or not base then
80607: LD_EXP 44
80611: NOT
80612: PUSH
80613: LD_VAR 0 2
80617: NOT
80618: OR
80619: PUSH
80620: LD_VAR 0 1
80624: NOT
80625: OR
80626: IFFALSE 80630
// exit ;
80628: GO 80655
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80630: LD_ADDR_EXP 68
80634: PUSH
80635: LD_EXP 68
80639: PPUSH
80640: LD_VAR 0 1
80644: PPUSH
80645: LD_VAR 0 2
80649: PPUSH
80650: CALL_OW 1
80654: ST_TO_ADDR
// end ;
80655: LD_VAR 0 3
80659: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80660: LD_INT 0
80662: PPUSH
// if not mc_bases or not base or not scan_area then
80663: LD_EXP 44
80667: NOT
80668: PUSH
80669: LD_VAR 0 1
80673: NOT
80674: OR
80675: PUSH
80676: LD_VAR 0 2
80680: NOT
80681: OR
80682: IFFALSE 80686
// exit ;
80684: GO 80711
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80686: LD_ADDR_EXP 69
80690: PUSH
80691: LD_EXP 69
80695: PPUSH
80696: LD_VAR 0 1
80700: PPUSH
80701: LD_VAR 0 2
80705: PPUSH
80706: CALL_OW 1
80710: ST_TO_ADDR
// end ;
80711: LD_VAR 0 3
80715: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80716: LD_INT 0
80718: PPUSH
80719: PPUSH
// if not mc_bases or not base then
80720: LD_EXP 44
80724: NOT
80725: PUSH
80726: LD_VAR 0 1
80730: NOT
80731: OR
80732: IFFALSE 80736
// exit ;
80734: GO 80800
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80736: LD_ADDR_VAR 0 3
80740: PUSH
80741: LD_INT 1
80743: PUSH
80744: LD_INT 2
80746: PUSH
80747: LD_INT 3
80749: PUSH
80750: LD_INT 4
80752: PUSH
80753: LD_INT 11
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80763: LD_ADDR_EXP 71
80767: PUSH
80768: LD_EXP 71
80772: PPUSH
80773: LD_VAR 0 1
80777: PPUSH
80778: LD_EXP 71
80782: PUSH
80783: LD_VAR 0 1
80787: ARRAY
80788: PUSH
80789: LD_VAR 0 3
80793: DIFF
80794: PPUSH
80795: CALL_OW 1
80799: ST_TO_ADDR
// end ;
80800: LD_VAR 0 2
80804: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80805: LD_INT 0
80807: PPUSH
// result := mc_vehicles [ base ] ;
80808: LD_ADDR_VAR 0 3
80812: PUSH
80813: LD_EXP 63
80817: PUSH
80818: LD_VAR 0 1
80822: ARRAY
80823: ST_TO_ADDR
// if onlyCombat then
80824: LD_VAR 0 2
80828: IFFALSE 80993
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80830: LD_ADDR_VAR 0 3
80834: PUSH
80835: LD_VAR 0 3
80839: PUSH
80840: LD_VAR 0 3
80844: PPUSH
80845: LD_INT 2
80847: PUSH
80848: LD_INT 34
80850: PUSH
80851: LD_INT 12
80853: PUSH
80854: EMPTY
80855: LIST
80856: LIST
80857: PUSH
80858: LD_INT 34
80860: PUSH
80861: LD_INT 51
80863: PUSH
80864: EMPTY
80865: LIST
80866: LIST
80867: PUSH
80868: LD_INT 34
80870: PUSH
80871: LD_EXP 30
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PUSH
80880: LD_INT 34
80882: PUSH
80883: LD_INT 32
80885: PUSH
80886: EMPTY
80887: LIST
80888: LIST
80889: PUSH
80890: LD_INT 34
80892: PUSH
80893: LD_INT 13
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: PUSH
80900: LD_INT 34
80902: PUSH
80903: LD_INT 52
80905: PUSH
80906: EMPTY
80907: LIST
80908: LIST
80909: PUSH
80910: LD_INT 34
80912: PUSH
80913: LD_INT 14
80915: PUSH
80916: EMPTY
80917: LIST
80918: LIST
80919: PUSH
80920: LD_INT 34
80922: PUSH
80923: LD_INT 53
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: LD_INT 34
80932: PUSH
80933: LD_EXP 29
80937: PUSH
80938: EMPTY
80939: LIST
80940: LIST
80941: PUSH
80942: LD_INT 34
80944: PUSH
80945: LD_INT 31
80947: PUSH
80948: EMPTY
80949: LIST
80950: LIST
80951: PUSH
80952: LD_INT 34
80954: PUSH
80955: LD_INT 48
80957: PUSH
80958: EMPTY
80959: LIST
80960: LIST
80961: PUSH
80962: LD_INT 34
80964: PUSH
80965: LD_INT 8
80967: PUSH
80968: EMPTY
80969: LIST
80970: LIST
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: LIST
80986: PPUSH
80987: CALL_OW 72
80991: DIFF
80992: ST_TO_ADDR
// end ; end_of_file
80993: LD_VAR 0 3
80997: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
80998: LD_INT 0
81000: PPUSH
81001: PPUSH
81002: PPUSH
// if not mc_bases or not skirmish then
81003: LD_EXP 44
81007: NOT
81008: PUSH
81009: LD_EXP 42
81013: NOT
81014: OR
81015: IFFALSE 81019
// exit ;
81017: GO 81184
// for i = 1 to mc_bases do
81019: LD_ADDR_VAR 0 4
81023: PUSH
81024: DOUBLE
81025: LD_INT 1
81027: DEC
81028: ST_TO_ADDR
81029: LD_EXP 44
81033: PUSH
81034: FOR_TO
81035: IFFALSE 81182
// begin if sci in mc_bases [ i ] then
81037: LD_VAR 0 2
81041: PUSH
81042: LD_EXP 44
81046: PUSH
81047: LD_VAR 0 4
81051: ARRAY
81052: IN
81053: IFFALSE 81180
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81055: LD_ADDR_EXP 73
81059: PUSH
81060: LD_EXP 73
81064: PPUSH
81065: LD_VAR 0 4
81069: PUSH
81070: LD_EXP 73
81074: PUSH
81075: LD_VAR 0 4
81079: ARRAY
81080: PUSH
81081: LD_INT 1
81083: PLUS
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: PPUSH
81089: LD_VAR 0 1
81093: PPUSH
81094: CALL 24301 0 3
81098: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81099: LD_ADDR_VAR 0 5
81103: PUSH
81104: LD_EXP 44
81108: PUSH
81109: LD_VAR 0 4
81113: ARRAY
81114: PPUSH
81115: LD_INT 2
81117: PUSH
81118: LD_INT 30
81120: PUSH
81121: LD_INT 0
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PUSH
81128: LD_INT 30
81130: PUSH
81131: LD_INT 1
81133: PUSH
81134: EMPTY
81135: LIST
81136: LIST
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: LIST
81142: PPUSH
81143: CALL_OW 72
81147: PPUSH
81148: LD_VAR 0 1
81152: PPUSH
81153: CALL_OW 74
81157: ST_TO_ADDR
// if tmp then
81158: LD_VAR 0 5
81162: IFFALSE 81178
// ComStandNearbyBuilding ( ape , tmp ) ;
81164: LD_VAR 0 1
81168: PPUSH
81169: LD_VAR 0 5
81173: PPUSH
81174: CALL 20915 0 2
// break ;
81178: GO 81182
// end ; end ;
81180: GO 81034
81182: POP
81183: POP
// end ;
81184: LD_VAR 0 3
81188: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81189: LD_INT 0
81191: PPUSH
81192: PPUSH
81193: PPUSH
// if not mc_bases or not skirmish then
81194: LD_EXP 44
81198: NOT
81199: PUSH
81200: LD_EXP 42
81204: NOT
81205: OR
81206: IFFALSE 81210
// exit ;
81208: GO 81299
// for i = 1 to mc_bases do
81210: LD_ADDR_VAR 0 4
81214: PUSH
81215: DOUBLE
81216: LD_INT 1
81218: DEC
81219: ST_TO_ADDR
81220: LD_EXP 44
81224: PUSH
81225: FOR_TO
81226: IFFALSE 81297
// begin if building in mc_busy_turret_list [ i ] then
81228: LD_VAR 0 1
81232: PUSH
81233: LD_EXP 54
81237: PUSH
81238: LD_VAR 0 4
81242: ARRAY
81243: IN
81244: IFFALSE 81295
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81246: LD_ADDR_VAR 0 5
81250: PUSH
81251: LD_EXP 54
81255: PUSH
81256: LD_VAR 0 4
81260: ARRAY
81261: PUSH
81262: LD_VAR 0 1
81266: DIFF
81267: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81268: LD_ADDR_EXP 54
81272: PUSH
81273: LD_EXP 54
81277: PPUSH
81278: LD_VAR 0 4
81282: PPUSH
81283: LD_VAR 0 5
81287: PPUSH
81288: CALL_OW 1
81292: ST_TO_ADDR
// break ;
81293: GO 81297
// end ; end ;
81295: GO 81225
81297: POP
81298: POP
// end ;
81299: LD_VAR 0 3
81303: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81304: LD_INT 0
81306: PPUSH
81307: PPUSH
81308: PPUSH
// if not mc_bases or not skirmish then
81309: LD_EXP 44
81313: NOT
81314: PUSH
81315: LD_EXP 42
81319: NOT
81320: OR
81321: IFFALSE 81325
// exit ;
81323: GO 81524
// for i = 1 to mc_bases do
81325: LD_ADDR_VAR 0 5
81329: PUSH
81330: DOUBLE
81331: LD_INT 1
81333: DEC
81334: ST_TO_ADDR
81335: LD_EXP 44
81339: PUSH
81340: FOR_TO
81341: IFFALSE 81522
// if building in mc_bases [ i ] then
81343: LD_VAR 0 1
81347: PUSH
81348: LD_EXP 44
81352: PUSH
81353: LD_VAR 0 5
81357: ARRAY
81358: IN
81359: IFFALSE 81520
// begin tmp := mc_bases [ i ] diff building ;
81361: LD_ADDR_VAR 0 6
81365: PUSH
81366: LD_EXP 44
81370: PUSH
81371: LD_VAR 0 5
81375: ARRAY
81376: PUSH
81377: LD_VAR 0 1
81381: DIFF
81382: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81383: LD_ADDR_EXP 44
81387: PUSH
81388: LD_EXP 44
81392: PPUSH
81393: LD_VAR 0 5
81397: PPUSH
81398: LD_VAR 0 6
81402: PPUSH
81403: CALL_OW 1
81407: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81408: LD_VAR 0 1
81412: PUSH
81413: LD_EXP 52
81417: PUSH
81418: LD_VAR 0 5
81422: ARRAY
81423: IN
81424: IFFALSE 81463
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81426: LD_ADDR_EXP 52
81430: PUSH
81431: LD_EXP 52
81435: PPUSH
81436: LD_VAR 0 5
81440: PPUSH
81441: LD_EXP 52
81445: PUSH
81446: LD_VAR 0 5
81450: ARRAY
81451: PUSH
81452: LD_VAR 0 1
81456: DIFF
81457: PPUSH
81458: CALL_OW 1
81462: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81463: LD_VAR 0 1
81467: PUSH
81468: LD_EXP 53
81472: PUSH
81473: LD_VAR 0 5
81477: ARRAY
81478: IN
81479: IFFALSE 81518
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81481: LD_ADDR_EXP 53
81485: PUSH
81486: LD_EXP 53
81490: PPUSH
81491: LD_VAR 0 5
81495: PPUSH
81496: LD_EXP 53
81500: PUSH
81501: LD_VAR 0 5
81505: ARRAY
81506: PUSH
81507: LD_VAR 0 1
81511: DIFF
81512: PPUSH
81513: CALL_OW 1
81517: ST_TO_ADDR
// break ;
81518: GO 81522
// end ;
81520: GO 81340
81522: POP
81523: POP
// end ;
81524: LD_VAR 0 4
81528: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81529: LD_INT 0
81531: PPUSH
81532: PPUSH
81533: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81534: LD_EXP 44
81538: NOT
81539: PUSH
81540: LD_EXP 42
81544: NOT
81545: OR
81546: PUSH
81547: LD_VAR 0 3
81551: PUSH
81552: LD_EXP 70
81556: IN
81557: NOT
81558: OR
81559: IFFALSE 81563
// exit ;
81561: GO 81686
// for i = 1 to mc_vehicles do
81563: LD_ADDR_VAR 0 6
81567: PUSH
81568: DOUBLE
81569: LD_INT 1
81571: DEC
81572: ST_TO_ADDR
81573: LD_EXP 63
81577: PUSH
81578: FOR_TO
81579: IFFALSE 81684
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81581: LD_VAR 0 2
81585: PUSH
81586: LD_EXP 63
81590: PUSH
81591: LD_VAR 0 6
81595: ARRAY
81596: IN
81597: PUSH
81598: LD_VAR 0 1
81602: PUSH
81603: LD_EXP 63
81607: PUSH
81608: LD_VAR 0 6
81612: ARRAY
81613: IN
81614: OR
81615: IFFALSE 81682
// begin tmp := mc_vehicles [ i ] diff old ;
81617: LD_ADDR_VAR 0 7
81621: PUSH
81622: LD_EXP 63
81626: PUSH
81627: LD_VAR 0 6
81631: ARRAY
81632: PUSH
81633: LD_VAR 0 2
81637: DIFF
81638: ST_TO_ADDR
// tmp := tmp diff new ;
81639: LD_ADDR_VAR 0 7
81643: PUSH
81644: LD_VAR 0 7
81648: PUSH
81649: LD_VAR 0 1
81653: DIFF
81654: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81655: LD_ADDR_EXP 63
81659: PUSH
81660: LD_EXP 63
81664: PPUSH
81665: LD_VAR 0 6
81669: PPUSH
81670: LD_VAR 0 7
81674: PPUSH
81675: CALL_OW 1
81679: ST_TO_ADDR
// break ;
81680: GO 81684
// end ;
81682: GO 81578
81684: POP
81685: POP
// end ;
81686: LD_VAR 0 5
81690: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81691: LD_INT 0
81693: PPUSH
81694: PPUSH
81695: PPUSH
81696: PPUSH
// if not mc_bases or not skirmish then
81697: LD_EXP 44
81701: NOT
81702: PUSH
81703: LD_EXP 42
81707: NOT
81708: OR
81709: IFFALSE 81713
// exit ;
81711: GO 82090
// side := GetSide ( vehicle ) ;
81713: LD_ADDR_VAR 0 5
81717: PUSH
81718: LD_VAR 0 1
81722: PPUSH
81723: CALL_OW 255
81727: ST_TO_ADDR
// for i = 1 to mc_bases do
81728: LD_ADDR_VAR 0 4
81732: PUSH
81733: DOUBLE
81734: LD_INT 1
81736: DEC
81737: ST_TO_ADDR
81738: LD_EXP 44
81742: PUSH
81743: FOR_TO
81744: IFFALSE 82088
// begin if factory in mc_bases [ i ] then
81746: LD_VAR 0 2
81750: PUSH
81751: LD_EXP 44
81755: PUSH
81756: LD_VAR 0 4
81760: ARRAY
81761: IN
81762: IFFALSE 82086
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81764: LD_EXP 66
81768: PUSH
81769: LD_VAR 0 4
81773: ARRAY
81774: PUSH
81775: LD_EXP 55
81779: PUSH
81780: LD_VAR 0 4
81784: ARRAY
81785: LESS
81786: PUSH
81787: LD_VAR 0 1
81791: PPUSH
81792: CALL_OW 264
81796: PUSH
81797: LD_INT 31
81799: PUSH
81800: LD_INT 32
81802: PUSH
81803: LD_INT 51
81805: PUSH
81806: LD_EXP 30
81810: PUSH
81811: LD_INT 12
81813: PUSH
81814: LD_INT 30
81816: PUSH
81817: LD_EXP 29
81821: PUSH
81822: LD_INT 11
81824: PUSH
81825: LD_INT 53
81827: PUSH
81828: LD_INT 14
81830: PUSH
81831: LD_EXP 33
81835: PUSH
81836: LD_INT 29
81838: PUSH
81839: LD_EXP 31
81843: PUSH
81844: LD_INT 13
81846: PUSH
81847: LD_INT 52
81849: PUSH
81850: LD_INT 48
81852: PUSH
81853: LD_INT 8
81855: PUSH
81856: EMPTY
81857: LIST
81858: LIST
81859: LIST
81860: LIST
81861: LIST
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: IN
81875: NOT
81876: AND
81877: IFFALSE 81925
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
81879: LD_ADDR_EXP 66
81883: PUSH
81884: LD_EXP 66
81888: PPUSH
81889: LD_VAR 0 4
81893: PUSH
81894: LD_EXP 66
81898: PUSH
81899: LD_VAR 0 4
81903: ARRAY
81904: PUSH
81905: LD_INT 1
81907: PLUS
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: PPUSH
81913: LD_VAR 0 1
81917: PPUSH
81918: CALL 24301 0 3
81922: ST_TO_ADDR
81923: GO 81969
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
81925: LD_ADDR_EXP 63
81929: PUSH
81930: LD_EXP 63
81934: PPUSH
81935: LD_VAR 0 4
81939: PUSH
81940: LD_EXP 63
81944: PUSH
81945: LD_VAR 0 4
81949: ARRAY
81950: PUSH
81951: LD_INT 1
81953: PLUS
81954: PUSH
81955: EMPTY
81956: LIST
81957: LIST
81958: PPUSH
81959: LD_VAR 0 1
81963: PPUSH
81964: CALL 24301 0 3
81968: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
81969: LD_VAR 0 1
81973: PPUSH
81974: CALL_OW 263
81978: PUSH
81979: LD_INT 2
81981: EQUAL
81982: IFFALSE 82002
// begin repeat wait ( 0 0$1 ) ;
81984: LD_INT 35
81986: PPUSH
81987: CALL_OW 67
// until IsControledBy ( vehicle ) ;
81991: LD_VAR 0 1
81995: PPUSH
81996: CALL_OW 312
82000: IFFALSE 81984
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82002: LD_VAR 0 1
82006: PPUSH
82007: LD_EXP 68
82011: PUSH
82012: LD_VAR 0 4
82016: ARRAY
82017: PPUSH
82018: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82022: LD_VAR 0 1
82026: PPUSH
82027: CALL_OW 263
82031: PUSH
82032: LD_INT 1
82034: NONEQUAL
82035: IFFALSE 82039
// break ;
82037: GO 82088
// repeat wait ( 0 0$1 ) ;
82039: LD_INT 35
82041: PPUSH
82042: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82046: LD_VAR 0 1
82050: PPUSH
82051: LD_EXP 68
82055: PUSH
82056: LD_VAR 0 4
82060: ARRAY
82061: PPUSH
82062: CALL_OW 308
82066: IFFALSE 82039
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82068: LD_VAR 0 1
82072: PPUSH
82073: CALL_OW 311
82077: PPUSH
82078: CALL_OW 121
// exit ;
82082: POP
82083: POP
82084: GO 82090
// end ; end ;
82086: GO 81743
82088: POP
82089: POP
// end ;
82090: LD_VAR 0 3
82094: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82095: LD_INT 0
82097: PPUSH
82098: PPUSH
82099: PPUSH
82100: PPUSH
// if not mc_bases or not skirmish then
82101: LD_EXP 44
82105: NOT
82106: PUSH
82107: LD_EXP 42
82111: NOT
82112: OR
82113: IFFALSE 82117
// exit ;
82115: GO 82470
// repeat wait ( 0 0$1 ) ;
82117: LD_INT 35
82119: PPUSH
82120: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82124: LD_VAR 0 2
82128: PPUSH
82129: LD_VAR 0 3
82133: PPUSH
82134: CALL_OW 284
82138: IFFALSE 82117
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82140: LD_VAR 0 2
82144: PPUSH
82145: LD_VAR 0 3
82149: PPUSH
82150: CALL_OW 283
82154: PUSH
82155: LD_INT 4
82157: EQUAL
82158: IFFALSE 82162
// exit ;
82160: GO 82470
// for i = 1 to mc_bases do
82162: LD_ADDR_VAR 0 7
82166: PUSH
82167: DOUBLE
82168: LD_INT 1
82170: DEC
82171: ST_TO_ADDR
82172: LD_EXP 44
82176: PUSH
82177: FOR_TO
82178: IFFALSE 82468
// begin if mc_crates_area [ i ] then
82180: LD_EXP 62
82184: PUSH
82185: LD_VAR 0 7
82189: ARRAY
82190: IFFALSE 82301
// for j in mc_crates_area [ i ] do
82192: LD_ADDR_VAR 0 8
82196: PUSH
82197: LD_EXP 62
82201: PUSH
82202: LD_VAR 0 7
82206: ARRAY
82207: PUSH
82208: FOR_IN
82209: IFFALSE 82299
// if InArea ( x , y , j ) then
82211: LD_VAR 0 2
82215: PPUSH
82216: LD_VAR 0 3
82220: PPUSH
82221: LD_VAR 0 8
82225: PPUSH
82226: CALL_OW 309
82230: IFFALSE 82297
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82232: LD_ADDR_EXP 60
82236: PUSH
82237: LD_EXP 60
82241: PPUSH
82242: LD_VAR 0 7
82246: PUSH
82247: LD_EXP 60
82251: PUSH
82252: LD_VAR 0 7
82256: ARRAY
82257: PUSH
82258: LD_INT 1
82260: PLUS
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PPUSH
82266: LD_VAR 0 4
82270: PUSH
82271: LD_VAR 0 2
82275: PUSH
82276: LD_VAR 0 3
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: LIST
82285: PPUSH
82286: CALL 24301 0 3
82290: ST_TO_ADDR
// exit ;
82291: POP
82292: POP
82293: POP
82294: POP
82295: GO 82470
// end ;
82297: GO 82208
82299: POP
82300: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82301: LD_ADDR_VAR 0 9
82305: PUSH
82306: LD_EXP 44
82310: PUSH
82311: LD_VAR 0 7
82315: ARRAY
82316: PPUSH
82317: LD_INT 2
82319: PUSH
82320: LD_INT 30
82322: PUSH
82323: LD_INT 0
82325: PUSH
82326: EMPTY
82327: LIST
82328: LIST
82329: PUSH
82330: LD_INT 30
82332: PUSH
82333: LD_INT 1
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: LIST
82344: PPUSH
82345: CALL_OW 72
82349: ST_TO_ADDR
// if not depot then
82350: LD_VAR 0 9
82354: NOT
82355: IFFALSE 82359
// continue ;
82357: GO 82177
// for j in depot do
82359: LD_ADDR_VAR 0 8
82363: PUSH
82364: LD_VAR 0 9
82368: PUSH
82369: FOR_IN
82370: IFFALSE 82464
// if GetDistUnitXY ( j , x , y ) < 30 then
82372: LD_VAR 0 8
82376: PPUSH
82377: LD_VAR 0 2
82381: PPUSH
82382: LD_VAR 0 3
82386: PPUSH
82387: CALL_OW 297
82391: PUSH
82392: LD_INT 30
82394: LESS
82395: IFFALSE 82462
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82397: LD_ADDR_EXP 60
82401: PUSH
82402: LD_EXP 60
82406: PPUSH
82407: LD_VAR 0 7
82411: PUSH
82412: LD_EXP 60
82416: PUSH
82417: LD_VAR 0 7
82421: ARRAY
82422: PUSH
82423: LD_INT 1
82425: PLUS
82426: PUSH
82427: EMPTY
82428: LIST
82429: LIST
82430: PPUSH
82431: LD_VAR 0 4
82435: PUSH
82436: LD_VAR 0 2
82440: PUSH
82441: LD_VAR 0 3
82445: PUSH
82446: EMPTY
82447: LIST
82448: LIST
82449: LIST
82450: PPUSH
82451: CALL 24301 0 3
82455: ST_TO_ADDR
// exit ;
82456: POP
82457: POP
82458: POP
82459: POP
82460: GO 82470
// end ;
82462: GO 82369
82464: POP
82465: POP
// end ;
82466: GO 82177
82468: POP
82469: POP
// end ;
82470: LD_VAR 0 6
82474: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82475: LD_INT 0
82477: PPUSH
82478: PPUSH
82479: PPUSH
82480: PPUSH
// if not mc_bases or not skirmish then
82481: LD_EXP 44
82485: NOT
82486: PUSH
82487: LD_EXP 42
82491: NOT
82492: OR
82493: IFFALSE 82497
// exit ;
82495: GO 82774
// side := GetSide ( lab ) ;
82497: LD_ADDR_VAR 0 4
82501: PUSH
82502: LD_VAR 0 2
82506: PPUSH
82507: CALL_OW 255
82511: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82512: LD_VAR 0 4
82516: PUSH
82517: LD_EXP 70
82521: IN
82522: NOT
82523: PUSH
82524: LD_EXP 71
82528: NOT
82529: OR
82530: PUSH
82531: LD_EXP 44
82535: NOT
82536: OR
82537: IFFALSE 82541
// exit ;
82539: GO 82774
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82541: LD_ADDR_EXP 71
82545: PUSH
82546: LD_EXP 71
82550: PPUSH
82551: LD_VAR 0 4
82555: PPUSH
82556: LD_EXP 71
82560: PUSH
82561: LD_VAR 0 4
82565: ARRAY
82566: PUSH
82567: LD_VAR 0 1
82571: DIFF
82572: PPUSH
82573: CALL_OW 1
82577: ST_TO_ADDR
// for i = 1 to mc_bases do
82578: LD_ADDR_VAR 0 5
82582: PUSH
82583: DOUBLE
82584: LD_INT 1
82586: DEC
82587: ST_TO_ADDR
82588: LD_EXP 44
82592: PUSH
82593: FOR_TO
82594: IFFALSE 82772
// begin if lab in mc_bases [ i ] then
82596: LD_VAR 0 2
82600: PUSH
82601: LD_EXP 44
82605: PUSH
82606: LD_VAR 0 5
82610: ARRAY
82611: IN
82612: IFFALSE 82770
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82614: LD_VAR 0 1
82618: PUSH
82619: LD_INT 11
82621: PUSH
82622: LD_INT 4
82624: PUSH
82625: LD_INT 3
82627: PUSH
82628: LD_INT 2
82630: PUSH
82631: EMPTY
82632: LIST
82633: LIST
82634: LIST
82635: LIST
82636: IN
82637: PUSH
82638: LD_EXP 74
82642: PUSH
82643: LD_VAR 0 5
82647: ARRAY
82648: AND
82649: IFFALSE 82770
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82651: LD_ADDR_VAR 0 6
82655: PUSH
82656: LD_EXP 74
82660: PUSH
82661: LD_VAR 0 5
82665: ARRAY
82666: PUSH
82667: LD_INT 1
82669: ARRAY
82670: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82671: LD_ADDR_EXP 74
82675: PUSH
82676: LD_EXP 74
82680: PPUSH
82681: LD_VAR 0 5
82685: PPUSH
82686: EMPTY
82687: PPUSH
82688: CALL_OW 1
82692: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82693: LD_VAR 0 6
82697: PPUSH
82698: LD_INT 0
82700: PPUSH
82701: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82705: LD_VAR 0 6
82709: PPUSH
82710: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82714: LD_ADDR_EXP 73
82718: PUSH
82719: LD_EXP 73
82723: PPUSH
82724: LD_VAR 0 5
82728: PPUSH
82729: LD_EXP 73
82733: PUSH
82734: LD_VAR 0 5
82738: ARRAY
82739: PPUSH
82740: LD_INT 1
82742: PPUSH
82743: LD_VAR 0 6
82747: PPUSH
82748: CALL_OW 2
82752: PPUSH
82753: CALL_OW 1
82757: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82758: LD_VAR 0 5
82762: PPUSH
82763: LD_INT 112
82765: PPUSH
82766: CALL 59786 0 2
// end ; end ; end ;
82770: GO 82593
82772: POP
82773: POP
// end ;
82774: LD_VAR 0 3
82778: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82779: LD_INT 0
82781: PPUSH
82782: PPUSH
82783: PPUSH
82784: PPUSH
82785: PPUSH
82786: PPUSH
82787: PPUSH
82788: PPUSH
// if not mc_bases or not skirmish then
82789: LD_EXP 44
82793: NOT
82794: PUSH
82795: LD_EXP 42
82799: NOT
82800: OR
82801: IFFALSE 82805
// exit ;
82803: GO 84176
// for i = 1 to mc_bases do
82805: LD_ADDR_VAR 0 3
82809: PUSH
82810: DOUBLE
82811: LD_INT 1
82813: DEC
82814: ST_TO_ADDR
82815: LD_EXP 44
82819: PUSH
82820: FOR_TO
82821: IFFALSE 84174
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82823: LD_VAR 0 1
82827: PUSH
82828: LD_EXP 44
82832: PUSH
82833: LD_VAR 0 3
82837: ARRAY
82838: IN
82839: PUSH
82840: LD_VAR 0 1
82844: PUSH
82845: LD_EXP 51
82849: PUSH
82850: LD_VAR 0 3
82854: ARRAY
82855: IN
82856: OR
82857: PUSH
82858: LD_VAR 0 1
82862: PUSH
82863: LD_EXP 66
82867: PUSH
82868: LD_VAR 0 3
82872: ARRAY
82873: IN
82874: OR
82875: PUSH
82876: LD_VAR 0 1
82880: PUSH
82881: LD_EXP 63
82885: PUSH
82886: LD_VAR 0 3
82890: ARRAY
82891: IN
82892: OR
82893: PUSH
82894: LD_VAR 0 1
82898: PUSH
82899: LD_EXP 73
82903: PUSH
82904: LD_VAR 0 3
82908: ARRAY
82909: IN
82910: OR
82911: PUSH
82912: LD_VAR 0 1
82916: PUSH
82917: LD_EXP 74
82921: PUSH
82922: LD_VAR 0 3
82926: ARRAY
82927: IN
82928: OR
82929: IFFALSE 84172
// begin if un in mc_ape [ i ] then
82931: LD_VAR 0 1
82935: PUSH
82936: LD_EXP 73
82940: PUSH
82941: LD_VAR 0 3
82945: ARRAY
82946: IN
82947: IFFALSE 82986
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
82949: LD_ADDR_EXP 73
82953: PUSH
82954: LD_EXP 73
82958: PPUSH
82959: LD_VAR 0 3
82963: PPUSH
82964: LD_EXP 73
82968: PUSH
82969: LD_VAR 0 3
82973: ARRAY
82974: PUSH
82975: LD_VAR 0 1
82979: DIFF
82980: PPUSH
82981: CALL_OW 1
82985: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
82986: LD_VAR 0 1
82990: PUSH
82991: LD_EXP 74
82995: PUSH
82996: LD_VAR 0 3
83000: ARRAY
83001: IN
83002: IFFALSE 83026
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83004: LD_ADDR_EXP 74
83008: PUSH
83009: LD_EXP 74
83013: PPUSH
83014: LD_VAR 0 3
83018: PPUSH
83019: EMPTY
83020: PPUSH
83021: CALL_OW 1
83025: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83026: LD_VAR 0 1
83030: PPUSH
83031: CALL_OW 247
83035: PUSH
83036: LD_INT 2
83038: EQUAL
83039: PUSH
83040: LD_VAR 0 1
83044: PPUSH
83045: CALL_OW 110
83049: PUSH
83050: LD_INT 20
83052: EQUAL
83053: PUSH
83054: LD_VAR 0 1
83058: PUSH
83059: LD_EXP 66
83063: PUSH
83064: LD_VAR 0 3
83068: ARRAY
83069: IN
83070: OR
83071: PUSH
83072: LD_VAR 0 1
83076: PPUSH
83077: CALL_OW 264
83081: PUSH
83082: LD_INT 12
83084: PUSH
83085: LD_INT 51
83087: PUSH
83088: LD_EXP 30
83092: PUSH
83093: LD_INT 32
83095: PUSH
83096: LD_INT 13
83098: PUSH
83099: LD_INT 52
83101: PUSH
83102: LD_INT 31
83104: PUSH
83105: EMPTY
83106: LIST
83107: LIST
83108: LIST
83109: LIST
83110: LIST
83111: LIST
83112: LIST
83113: IN
83114: OR
83115: AND
83116: IFFALSE 83424
// begin if un in mc_defender [ i ] then
83118: LD_VAR 0 1
83122: PUSH
83123: LD_EXP 66
83127: PUSH
83128: LD_VAR 0 3
83132: ARRAY
83133: IN
83134: IFFALSE 83173
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83136: LD_ADDR_EXP 66
83140: PUSH
83141: LD_EXP 66
83145: PPUSH
83146: LD_VAR 0 3
83150: PPUSH
83151: LD_EXP 66
83155: PUSH
83156: LD_VAR 0 3
83160: ARRAY
83161: PUSH
83162: LD_VAR 0 1
83166: DIFF
83167: PPUSH
83168: CALL_OW 1
83172: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83173: LD_ADDR_VAR 0 8
83177: PUSH
83178: LD_VAR 0 3
83182: PPUSH
83183: LD_INT 3
83185: PPUSH
83186: CALL 79842 0 2
83190: ST_TO_ADDR
// if fac then
83191: LD_VAR 0 8
83195: IFFALSE 83424
// begin for j in fac do
83197: LD_ADDR_VAR 0 4
83201: PUSH
83202: LD_VAR 0 8
83206: PUSH
83207: FOR_IN
83208: IFFALSE 83422
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83210: LD_ADDR_VAR 0 9
83214: PUSH
83215: LD_VAR 0 8
83219: PPUSH
83220: LD_VAR 0 1
83224: PPUSH
83225: CALL_OW 265
83229: PPUSH
83230: LD_VAR 0 1
83234: PPUSH
83235: CALL_OW 262
83239: PPUSH
83240: LD_VAR 0 1
83244: PPUSH
83245: CALL_OW 263
83249: PPUSH
83250: LD_VAR 0 1
83254: PPUSH
83255: CALL_OW 264
83259: PPUSH
83260: CALL 21833 0 5
83264: ST_TO_ADDR
// if components then
83265: LD_VAR 0 9
83269: IFFALSE 83420
// begin if GetWeapon ( un ) = ar_control_tower then
83271: LD_VAR 0 1
83275: PPUSH
83276: CALL_OW 264
83280: PUSH
83281: LD_INT 31
83283: EQUAL
83284: IFFALSE 83401
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83286: LD_VAR 0 1
83290: PPUSH
83291: CALL_OW 311
83295: PPUSH
83296: LD_INT 0
83298: PPUSH
83299: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83303: LD_ADDR_EXP 84
83307: PUSH
83308: LD_EXP 84
83312: PPUSH
83313: LD_VAR 0 3
83317: PPUSH
83318: LD_EXP 84
83322: PUSH
83323: LD_VAR 0 3
83327: ARRAY
83328: PUSH
83329: LD_VAR 0 1
83333: PPUSH
83334: CALL_OW 311
83338: DIFF
83339: PPUSH
83340: CALL_OW 1
83344: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83345: LD_ADDR_VAR 0 7
83349: PUSH
83350: LD_EXP 65
83354: PUSH
83355: LD_VAR 0 3
83359: ARRAY
83360: PPUSH
83361: LD_INT 1
83363: PPUSH
83364: LD_VAR 0 9
83368: PPUSH
83369: CALL_OW 2
83373: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83374: LD_ADDR_EXP 65
83378: PUSH
83379: LD_EXP 65
83383: PPUSH
83384: LD_VAR 0 3
83388: PPUSH
83389: LD_VAR 0 7
83393: PPUSH
83394: CALL_OW 1
83398: ST_TO_ADDR
// end else
83399: GO 83418
// MC_InsertProduceList ( i , [ components ] ) ;
83401: LD_VAR 0 3
83405: PPUSH
83406: LD_VAR 0 9
83410: PUSH
83411: EMPTY
83412: LIST
83413: PPUSH
83414: CALL 79387 0 2
// break ;
83418: GO 83422
// end ; end ;
83420: GO 83207
83422: POP
83423: POP
// end ; end ; if GetType ( un ) = unit_building then
83424: LD_VAR 0 1
83428: PPUSH
83429: CALL_OW 247
83433: PUSH
83434: LD_INT 3
83436: EQUAL
83437: IFFALSE 83840
// begin btype := GetBType ( un ) ;
83439: LD_ADDR_VAR 0 5
83443: PUSH
83444: LD_VAR 0 1
83448: PPUSH
83449: CALL_OW 266
83453: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83454: LD_VAR 0 5
83458: PUSH
83459: LD_INT 29
83461: PUSH
83462: LD_INT 30
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: IN
83469: IFFALSE 83542
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83471: LD_VAR 0 1
83475: PPUSH
83476: CALL_OW 250
83480: PPUSH
83481: LD_VAR 0 1
83485: PPUSH
83486: CALL_OW 251
83490: PPUSH
83491: LD_VAR 0 1
83495: PPUSH
83496: CALL_OW 255
83500: PPUSH
83501: CALL_OW 440
83505: NOT
83506: IFFALSE 83542
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83508: LD_VAR 0 1
83512: PPUSH
83513: CALL_OW 250
83517: PPUSH
83518: LD_VAR 0 1
83522: PPUSH
83523: CALL_OW 251
83527: PPUSH
83528: LD_VAR 0 1
83532: PPUSH
83533: CALL_OW 255
83537: PPUSH
83538: CALL_OW 441
// end ; if btype = b_warehouse then
83542: LD_VAR 0 5
83546: PUSH
83547: LD_INT 1
83549: EQUAL
83550: IFFALSE 83568
// begin btype := b_depot ;
83552: LD_ADDR_VAR 0 5
83556: PUSH
83557: LD_INT 0
83559: ST_TO_ADDR
// pos := 1 ;
83560: LD_ADDR_VAR 0 6
83564: PUSH
83565: LD_INT 1
83567: ST_TO_ADDR
// end ; if btype = b_factory then
83568: LD_VAR 0 5
83572: PUSH
83573: LD_INT 3
83575: EQUAL
83576: IFFALSE 83594
// begin btype := b_workshop ;
83578: LD_ADDR_VAR 0 5
83582: PUSH
83583: LD_INT 2
83585: ST_TO_ADDR
// pos := 1 ;
83586: LD_ADDR_VAR 0 6
83590: PUSH
83591: LD_INT 1
83593: ST_TO_ADDR
// end ; if btype = b_barracks then
83594: LD_VAR 0 5
83598: PUSH
83599: LD_INT 5
83601: EQUAL
83602: IFFALSE 83612
// btype := b_armoury ;
83604: LD_ADDR_VAR 0 5
83608: PUSH
83609: LD_INT 4
83611: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83612: LD_VAR 0 5
83616: PUSH
83617: LD_INT 7
83619: PUSH
83620: LD_INT 8
83622: PUSH
83623: EMPTY
83624: LIST
83625: LIST
83626: IN
83627: IFFALSE 83637
// btype := b_lab ;
83629: LD_ADDR_VAR 0 5
83633: PUSH
83634: LD_INT 6
83636: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83637: LD_ADDR_EXP 49
83641: PUSH
83642: LD_EXP 49
83646: PPUSH
83647: LD_VAR 0 3
83651: PUSH
83652: LD_EXP 49
83656: PUSH
83657: LD_VAR 0 3
83661: ARRAY
83662: PUSH
83663: LD_INT 1
83665: PLUS
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PPUSH
83671: LD_VAR 0 5
83675: PUSH
83676: LD_VAR 0 1
83680: PPUSH
83681: CALL_OW 250
83685: PUSH
83686: LD_VAR 0 1
83690: PPUSH
83691: CALL_OW 251
83695: PUSH
83696: LD_VAR 0 1
83700: PPUSH
83701: CALL_OW 254
83705: PUSH
83706: EMPTY
83707: LIST
83708: LIST
83709: LIST
83710: LIST
83711: PPUSH
83712: CALL 24301 0 3
83716: ST_TO_ADDR
// if pos = 1 then
83717: LD_VAR 0 6
83721: PUSH
83722: LD_INT 1
83724: EQUAL
83725: IFFALSE 83840
// begin tmp := mc_build_list [ i ] ;
83727: LD_ADDR_VAR 0 7
83731: PUSH
83732: LD_EXP 49
83736: PUSH
83737: LD_VAR 0 3
83741: ARRAY
83742: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83743: LD_VAR 0 7
83747: PPUSH
83748: LD_INT 2
83750: PUSH
83751: LD_INT 30
83753: PUSH
83754: LD_INT 0
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PUSH
83761: LD_INT 30
83763: PUSH
83764: LD_INT 1
83766: PUSH
83767: EMPTY
83768: LIST
83769: LIST
83770: PUSH
83771: EMPTY
83772: LIST
83773: LIST
83774: LIST
83775: PPUSH
83776: CALL_OW 72
83780: IFFALSE 83790
// pos := 2 ;
83782: LD_ADDR_VAR 0 6
83786: PUSH
83787: LD_INT 2
83789: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83790: LD_ADDR_VAR 0 7
83794: PUSH
83795: LD_VAR 0 7
83799: PPUSH
83800: LD_VAR 0 6
83804: PPUSH
83805: LD_VAR 0 7
83809: PPUSH
83810: CALL 24627 0 3
83814: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83815: LD_ADDR_EXP 49
83819: PUSH
83820: LD_EXP 49
83824: PPUSH
83825: LD_VAR 0 3
83829: PPUSH
83830: LD_VAR 0 7
83834: PPUSH
83835: CALL_OW 1
83839: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83840: LD_VAR 0 1
83844: PUSH
83845: LD_EXP 44
83849: PUSH
83850: LD_VAR 0 3
83854: ARRAY
83855: IN
83856: IFFALSE 83895
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83858: LD_ADDR_EXP 44
83862: PUSH
83863: LD_EXP 44
83867: PPUSH
83868: LD_VAR 0 3
83872: PPUSH
83873: LD_EXP 44
83877: PUSH
83878: LD_VAR 0 3
83882: ARRAY
83883: PUSH
83884: LD_VAR 0 1
83888: DIFF
83889: PPUSH
83890: CALL_OW 1
83894: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
83895: LD_VAR 0 1
83899: PUSH
83900: LD_EXP 51
83904: PUSH
83905: LD_VAR 0 3
83909: ARRAY
83910: IN
83911: IFFALSE 83950
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
83913: LD_ADDR_EXP 51
83917: PUSH
83918: LD_EXP 51
83922: PPUSH
83923: LD_VAR 0 3
83927: PPUSH
83928: LD_EXP 51
83932: PUSH
83933: LD_VAR 0 3
83937: ARRAY
83938: PUSH
83939: LD_VAR 0 1
83943: DIFF
83944: PPUSH
83945: CALL_OW 1
83949: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
83950: LD_VAR 0 1
83954: PUSH
83955: LD_EXP 63
83959: PUSH
83960: LD_VAR 0 3
83964: ARRAY
83965: IN
83966: IFFALSE 84005
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
83968: LD_ADDR_EXP 63
83972: PUSH
83973: LD_EXP 63
83977: PPUSH
83978: LD_VAR 0 3
83982: PPUSH
83983: LD_EXP 63
83987: PUSH
83988: LD_VAR 0 3
83992: ARRAY
83993: PUSH
83994: LD_VAR 0 1
83998: DIFF
83999: PPUSH
84000: CALL_OW 1
84004: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84005: LD_VAR 0 1
84009: PUSH
84010: LD_EXP 66
84014: PUSH
84015: LD_VAR 0 3
84019: ARRAY
84020: IN
84021: IFFALSE 84060
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84023: LD_ADDR_EXP 66
84027: PUSH
84028: LD_EXP 66
84032: PPUSH
84033: LD_VAR 0 3
84037: PPUSH
84038: LD_EXP 66
84042: PUSH
84043: LD_VAR 0 3
84047: ARRAY
84048: PUSH
84049: LD_VAR 0 1
84053: DIFF
84054: PPUSH
84055: CALL_OW 1
84059: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84060: LD_VAR 0 1
84064: PUSH
84065: LD_EXP 53
84069: PUSH
84070: LD_VAR 0 3
84074: ARRAY
84075: IN
84076: IFFALSE 84115
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84078: LD_ADDR_EXP 53
84082: PUSH
84083: LD_EXP 53
84087: PPUSH
84088: LD_VAR 0 3
84092: PPUSH
84093: LD_EXP 53
84097: PUSH
84098: LD_VAR 0 3
84102: ARRAY
84103: PUSH
84104: LD_VAR 0 1
84108: DIFF
84109: PPUSH
84110: CALL_OW 1
84114: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84115: LD_VAR 0 1
84119: PUSH
84120: LD_EXP 52
84124: PUSH
84125: LD_VAR 0 3
84129: ARRAY
84130: IN
84131: IFFALSE 84170
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84133: LD_ADDR_EXP 52
84137: PUSH
84138: LD_EXP 52
84142: PPUSH
84143: LD_VAR 0 3
84147: PPUSH
84148: LD_EXP 52
84152: PUSH
84153: LD_VAR 0 3
84157: ARRAY
84158: PUSH
84159: LD_VAR 0 1
84163: DIFF
84164: PPUSH
84165: CALL_OW 1
84169: ST_TO_ADDR
// end ; break ;
84170: GO 84174
// end ;
84172: GO 82820
84174: POP
84175: POP
// end ;
84176: LD_VAR 0 2
84180: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84181: LD_INT 0
84183: PPUSH
84184: PPUSH
84185: PPUSH
// if not mc_bases or not skirmish then
84186: LD_EXP 44
84190: NOT
84191: PUSH
84192: LD_EXP 42
84196: NOT
84197: OR
84198: IFFALSE 84202
// exit ;
84200: GO 84417
// for i = 1 to mc_bases do
84202: LD_ADDR_VAR 0 3
84206: PUSH
84207: DOUBLE
84208: LD_INT 1
84210: DEC
84211: ST_TO_ADDR
84212: LD_EXP 44
84216: PUSH
84217: FOR_TO
84218: IFFALSE 84415
// begin if building in mc_construct_list [ i ] then
84220: LD_VAR 0 1
84224: PUSH
84225: LD_EXP 51
84229: PUSH
84230: LD_VAR 0 3
84234: ARRAY
84235: IN
84236: IFFALSE 84413
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84238: LD_ADDR_EXP 51
84242: PUSH
84243: LD_EXP 51
84247: PPUSH
84248: LD_VAR 0 3
84252: PPUSH
84253: LD_EXP 51
84257: PUSH
84258: LD_VAR 0 3
84262: ARRAY
84263: PUSH
84264: LD_VAR 0 1
84268: DIFF
84269: PPUSH
84270: CALL_OW 1
84274: ST_TO_ADDR
// if building in mc_lab [ i ] then
84275: LD_VAR 0 1
84279: PUSH
84280: LD_EXP 77
84284: PUSH
84285: LD_VAR 0 3
84289: ARRAY
84290: IN
84291: IFFALSE 84346
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84293: LD_ADDR_EXP 78
84297: PUSH
84298: LD_EXP 78
84302: PPUSH
84303: LD_VAR 0 3
84307: PPUSH
84308: LD_EXP 78
84312: PUSH
84313: LD_VAR 0 3
84317: ARRAY
84318: PPUSH
84319: LD_INT 1
84321: PPUSH
84322: LD_EXP 78
84326: PUSH
84327: LD_VAR 0 3
84331: ARRAY
84332: PPUSH
84333: LD_INT 0
84335: PPUSH
84336: CALL 23719 0 4
84340: PPUSH
84341: CALL_OW 1
84345: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84346: LD_VAR 0 1
84350: PUSH
84351: LD_EXP 44
84355: PUSH
84356: LD_VAR 0 3
84360: ARRAY
84361: IN
84362: NOT
84363: IFFALSE 84409
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84365: LD_ADDR_EXP 44
84369: PUSH
84370: LD_EXP 44
84374: PPUSH
84375: LD_VAR 0 3
84379: PUSH
84380: LD_EXP 44
84384: PUSH
84385: LD_VAR 0 3
84389: ARRAY
84390: PUSH
84391: LD_INT 1
84393: PLUS
84394: PUSH
84395: EMPTY
84396: LIST
84397: LIST
84398: PPUSH
84399: LD_VAR 0 1
84403: PPUSH
84404: CALL 24301 0 3
84408: ST_TO_ADDR
// exit ;
84409: POP
84410: POP
84411: GO 84417
// end ; end ;
84413: GO 84217
84415: POP
84416: POP
// end ;
84417: LD_VAR 0 2
84421: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84422: LD_INT 0
84424: PPUSH
84425: PPUSH
84426: PPUSH
84427: PPUSH
84428: PPUSH
84429: PPUSH
84430: PPUSH
// if not mc_bases or not skirmish then
84431: LD_EXP 44
84435: NOT
84436: PUSH
84437: LD_EXP 42
84441: NOT
84442: OR
84443: IFFALSE 84447
// exit ;
84445: GO 85108
// for i = 1 to mc_bases do
84447: LD_ADDR_VAR 0 3
84451: PUSH
84452: DOUBLE
84453: LD_INT 1
84455: DEC
84456: ST_TO_ADDR
84457: LD_EXP 44
84461: PUSH
84462: FOR_TO
84463: IFFALSE 85106
// begin if building in mc_construct_list [ i ] then
84465: LD_VAR 0 1
84469: PUSH
84470: LD_EXP 51
84474: PUSH
84475: LD_VAR 0 3
84479: ARRAY
84480: IN
84481: IFFALSE 85104
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84483: LD_ADDR_EXP 51
84487: PUSH
84488: LD_EXP 51
84492: PPUSH
84493: LD_VAR 0 3
84497: PPUSH
84498: LD_EXP 51
84502: PUSH
84503: LD_VAR 0 3
84507: ARRAY
84508: PUSH
84509: LD_VAR 0 1
84513: DIFF
84514: PPUSH
84515: CALL_OW 1
84519: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84520: LD_ADDR_EXP 44
84524: PUSH
84525: LD_EXP 44
84529: PPUSH
84530: LD_VAR 0 3
84534: PUSH
84535: LD_EXP 44
84539: PUSH
84540: LD_VAR 0 3
84544: ARRAY
84545: PUSH
84546: LD_INT 1
84548: PLUS
84549: PUSH
84550: EMPTY
84551: LIST
84552: LIST
84553: PPUSH
84554: LD_VAR 0 1
84558: PPUSH
84559: CALL 24301 0 3
84563: ST_TO_ADDR
// btype := GetBType ( building ) ;
84564: LD_ADDR_VAR 0 5
84568: PUSH
84569: LD_VAR 0 1
84573: PPUSH
84574: CALL_OW 266
84578: ST_TO_ADDR
// side := GetSide ( building ) ;
84579: LD_ADDR_VAR 0 8
84583: PUSH
84584: LD_VAR 0 1
84588: PPUSH
84589: CALL_OW 255
84593: ST_TO_ADDR
// if btype = b_lab then
84594: LD_VAR 0 5
84598: PUSH
84599: LD_INT 6
84601: EQUAL
84602: IFFALSE 84652
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84604: LD_ADDR_EXP 77
84608: PUSH
84609: LD_EXP 77
84613: PPUSH
84614: LD_VAR 0 3
84618: PUSH
84619: LD_EXP 77
84623: PUSH
84624: LD_VAR 0 3
84628: ARRAY
84629: PUSH
84630: LD_INT 1
84632: PLUS
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PPUSH
84638: LD_VAR 0 1
84642: PPUSH
84643: CALL 24301 0 3
84647: ST_TO_ADDR
// exit ;
84648: POP
84649: POP
84650: GO 85108
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84652: LD_VAR 0 5
84656: PUSH
84657: LD_INT 0
84659: PUSH
84660: LD_INT 2
84662: PUSH
84663: LD_INT 4
84665: PUSH
84666: EMPTY
84667: LIST
84668: LIST
84669: LIST
84670: IN
84671: IFFALSE 84795
// begin if btype = b_armoury then
84673: LD_VAR 0 5
84677: PUSH
84678: LD_INT 4
84680: EQUAL
84681: IFFALSE 84691
// btype := b_barracks ;
84683: LD_ADDR_VAR 0 5
84687: PUSH
84688: LD_INT 5
84690: ST_TO_ADDR
// if btype = b_depot then
84691: LD_VAR 0 5
84695: PUSH
84696: LD_INT 0
84698: EQUAL
84699: IFFALSE 84709
// btype := b_warehouse ;
84701: LD_ADDR_VAR 0 5
84705: PUSH
84706: LD_INT 1
84708: ST_TO_ADDR
// if btype = b_workshop then
84709: LD_VAR 0 5
84713: PUSH
84714: LD_INT 2
84716: EQUAL
84717: IFFALSE 84727
// btype := b_factory ;
84719: LD_ADDR_VAR 0 5
84723: PUSH
84724: LD_INT 3
84726: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84727: LD_VAR 0 5
84731: PPUSH
84732: LD_VAR 0 8
84736: PPUSH
84737: CALL_OW 323
84741: PUSH
84742: LD_INT 1
84744: EQUAL
84745: IFFALSE 84791
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84747: LD_ADDR_EXP 76
84751: PUSH
84752: LD_EXP 76
84756: PPUSH
84757: LD_VAR 0 3
84761: PUSH
84762: LD_EXP 76
84766: PUSH
84767: LD_VAR 0 3
84771: ARRAY
84772: PUSH
84773: LD_INT 1
84775: PLUS
84776: PUSH
84777: EMPTY
84778: LIST
84779: LIST
84780: PPUSH
84781: LD_VAR 0 1
84785: PPUSH
84786: CALL 24301 0 3
84790: ST_TO_ADDR
// exit ;
84791: POP
84792: POP
84793: GO 85108
// end ; if btype in [ b_bunker , b_turret ] then
84795: LD_VAR 0 5
84799: PUSH
84800: LD_INT 32
84802: PUSH
84803: LD_INT 33
84805: PUSH
84806: EMPTY
84807: LIST
84808: LIST
84809: IN
84810: IFFALSE 85100
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84812: LD_ADDR_EXP 52
84816: PUSH
84817: LD_EXP 52
84821: PPUSH
84822: LD_VAR 0 3
84826: PUSH
84827: LD_EXP 52
84831: PUSH
84832: LD_VAR 0 3
84836: ARRAY
84837: PUSH
84838: LD_INT 1
84840: PLUS
84841: PUSH
84842: EMPTY
84843: LIST
84844: LIST
84845: PPUSH
84846: LD_VAR 0 1
84850: PPUSH
84851: CALL 24301 0 3
84855: ST_TO_ADDR
// if btype = b_bunker then
84856: LD_VAR 0 5
84860: PUSH
84861: LD_INT 32
84863: EQUAL
84864: IFFALSE 85100
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84866: LD_ADDR_EXP 53
84870: PUSH
84871: LD_EXP 53
84875: PPUSH
84876: LD_VAR 0 3
84880: PUSH
84881: LD_EXP 53
84885: PUSH
84886: LD_VAR 0 3
84890: ARRAY
84891: PUSH
84892: LD_INT 1
84894: PLUS
84895: PUSH
84896: EMPTY
84897: LIST
84898: LIST
84899: PPUSH
84900: LD_VAR 0 1
84904: PPUSH
84905: CALL 24301 0 3
84909: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
84910: LD_ADDR_VAR 0 6
84914: PUSH
84915: LD_EXP 44
84919: PUSH
84920: LD_VAR 0 3
84924: ARRAY
84925: PPUSH
84926: LD_INT 25
84928: PUSH
84929: LD_INT 1
84931: PUSH
84932: EMPTY
84933: LIST
84934: LIST
84935: PUSH
84936: LD_INT 3
84938: PUSH
84939: LD_INT 54
84941: PUSH
84942: EMPTY
84943: LIST
84944: PUSH
84945: EMPTY
84946: LIST
84947: LIST
84948: PUSH
84949: EMPTY
84950: LIST
84951: LIST
84952: PPUSH
84953: CALL_OW 72
84957: ST_TO_ADDR
// if tmp then
84958: LD_VAR 0 6
84962: IFFALSE 84968
// exit ;
84964: POP
84965: POP
84966: GO 85108
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
84968: LD_ADDR_VAR 0 6
84972: PUSH
84973: LD_EXP 44
84977: PUSH
84978: LD_VAR 0 3
84982: ARRAY
84983: PPUSH
84984: LD_INT 2
84986: PUSH
84987: LD_INT 30
84989: PUSH
84990: LD_INT 4
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: PUSH
84997: LD_INT 30
84999: PUSH
85000: LD_INT 5
85002: PUSH
85003: EMPTY
85004: LIST
85005: LIST
85006: PUSH
85007: EMPTY
85008: LIST
85009: LIST
85010: LIST
85011: PPUSH
85012: CALL_OW 72
85016: ST_TO_ADDR
// if not tmp then
85017: LD_VAR 0 6
85021: NOT
85022: IFFALSE 85028
// exit ;
85024: POP
85025: POP
85026: GO 85108
// for j in tmp do
85028: LD_ADDR_VAR 0 4
85032: PUSH
85033: LD_VAR 0 6
85037: PUSH
85038: FOR_IN
85039: IFFALSE 85098
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85041: LD_ADDR_VAR 0 7
85045: PUSH
85046: LD_VAR 0 4
85050: PPUSH
85051: CALL_OW 313
85055: PPUSH
85056: LD_INT 25
85058: PUSH
85059: LD_INT 1
85061: PUSH
85062: EMPTY
85063: LIST
85064: LIST
85065: PPUSH
85066: CALL_OW 72
85070: ST_TO_ADDR
// if units then
85071: LD_VAR 0 7
85075: IFFALSE 85096
// begin ComExitBuilding ( units [ 1 ] ) ;
85077: LD_VAR 0 7
85081: PUSH
85082: LD_INT 1
85084: ARRAY
85085: PPUSH
85086: CALL_OW 122
// exit ;
85090: POP
85091: POP
85092: POP
85093: POP
85094: GO 85108
// end ; end ;
85096: GO 85038
85098: POP
85099: POP
// end ; end ; exit ;
85100: POP
85101: POP
85102: GO 85108
// end ; end ;
85104: GO 84462
85106: POP
85107: POP
// end ;
85108: LD_VAR 0 2
85112: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85113: LD_INT 0
85115: PPUSH
85116: PPUSH
85117: PPUSH
85118: PPUSH
85119: PPUSH
85120: PPUSH
85121: PPUSH
// if not mc_bases or not skirmish then
85122: LD_EXP 44
85126: NOT
85127: PUSH
85128: LD_EXP 42
85132: NOT
85133: OR
85134: IFFALSE 85138
// exit ;
85136: GO 85369
// btype := GetBType ( building ) ;
85138: LD_ADDR_VAR 0 6
85142: PUSH
85143: LD_VAR 0 1
85147: PPUSH
85148: CALL_OW 266
85152: ST_TO_ADDR
// x := GetX ( building ) ;
85153: LD_ADDR_VAR 0 7
85157: PUSH
85158: LD_VAR 0 1
85162: PPUSH
85163: CALL_OW 250
85167: ST_TO_ADDR
// y := GetY ( building ) ;
85168: LD_ADDR_VAR 0 8
85172: PUSH
85173: LD_VAR 0 1
85177: PPUSH
85178: CALL_OW 251
85182: ST_TO_ADDR
// d := GetDir ( building ) ;
85183: LD_ADDR_VAR 0 9
85187: PUSH
85188: LD_VAR 0 1
85192: PPUSH
85193: CALL_OW 254
85197: ST_TO_ADDR
// for i = 1 to mc_bases do
85198: LD_ADDR_VAR 0 4
85202: PUSH
85203: DOUBLE
85204: LD_INT 1
85206: DEC
85207: ST_TO_ADDR
85208: LD_EXP 44
85212: PUSH
85213: FOR_TO
85214: IFFALSE 85367
// begin if not mc_build_list [ i ] then
85216: LD_EXP 49
85220: PUSH
85221: LD_VAR 0 4
85225: ARRAY
85226: NOT
85227: IFFALSE 85231
// continue ;
85229: GO 85213
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85231: LD_VAR 0 6
85235: PUSH
85236: LD_VAR 0 7
85240: PUSH
85241: LD_VAR 0 8
85245: PUSH
85246: LD_VAR 0 9
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: LIST
85255: LIST
85256: PPUSH
85257: LD_EXP 49
85261: PUSH
85262: LD_VAR 0 4
85266: ARRAY
85267: PUSH
85268: LD_INT 1
85270: ARRAY
85271: PPUSH
85272: CALL 30470 0 2
85276: IFFALSE 85365
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85278: LD_ADDR_EXP 49
85282: PUSH
85283: LD_EXP 49
85287: PPUSH
85288: LD_VAR 0 4
85292: PPUSH
85293: LD_EXP 49
85297: PUSH
85298: LD_VAR 0 4
85302: ARRAY
85303: PPUSH
85304: LD_INT 1
85306: PPUSH
85307: CALL_OW 3
85311: PPUSH
85312: CALL_OW 1
85316: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85317: LD_ADDR_EXP 51
85321: PUSH
85322: LD_EXP 51
85326: PPUSH
85327: LD_VAR 0 4
85331: PUSH
85332: LD_EXP 51
85336: PUSH
85337: LD_VAR 0 4
85341: ARRAY
85342: PUSH
85343: LD_INT 1
85345: PLUS
85346: PUSH
85347: EMPTY
85348: LIST
85349: LIST
85350: PPUSH
85351: LD_VAR 0 1
85355: PPUSH
85356: CALL 24301 0 3
85360: ST_TO_ADDR
// exit ;
85361: POP
85362: POP
85363: GO 85369
// end ; end ;
85365: GO 85213
85367: POP
85368: POP
// end ;
85369: LD_VAR 0 3
85373: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85374: LD_INT 0
85376: PPUSH
85377: PPUSH
85378: PPUSH
// if not mc_bases or not skirmish then
85379: LD_EXP 44
85383: NOT
85384: PUSH
85385: LD_EXP 42
85389: NOT
85390: OR
85391: IFFALSE 85395
// exit ;
85393: GO 85585
// for i = 1 to mc_bases do
85395: LD_ADDR_VAR 0 4
85399: PUSH
85400: DOUBLE
85401: LD_INT 1
85403: DEC
85404: ST_TO_ADDR
85405: LD_EXP 44
85409: PUSH
85410: FOR_TO
85411: IFFALSE 85498
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85413: LD_VAR 0 1
85417: PUSH
85418: LD_EXP 52
85422: PUSH
85423: LD_VAR 0 4
85427: ARRAY
85428: IN
85429: PUSH
85430: LD_VAR 0 1
85434: PUSH
85435: LD_EXP 53
85439: PUSH
85440: LD_VAR 0 4
85444: ARRAY
85445: IN
85446: NOT
85447: AND
85448: IFFALSE 85496
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85450: LD_ADDR_EXP 53
85454: PUSH
85455: LD_EXP 53
85459: PPUSH
85460: LD_VAR 0 4
85464: PUSH
85465: LD_EXP 53
85469: PUSH
85470: LD_VAR 0 4
85474: ARRAY
85475: PUSH
85476: LD_INT 1
85478: PLUS
85479: PUSH
85480: EMPTY
85481: LIST
85482: LIST
85483: PPUSH
85484: LD_VAR 0 1
85488: PPUSH
85489: CALL 24301 0 3
85493: ST_TO_ADDR
// break ;
85494: GO 85498
// end ; end ;
85496: GO 85410
85498: POP
85499: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85500: LD_VAR 0 1
85504: PPUSH
85505: CALL_OW 257
85509: PUSH
85510: LD_EXP 70
85514: IN
85515: PUSH
85516: LD_VAR 0 1
85520: PPUSH
85521: CALL_OW 266
85525: PUSH
85526: LD_INT 5
85528: EQUAL
85529: AND
85530: PUSH
85531: LD_VAR 0 2
85535: PPUSH
85536: CALL_OW 110
85540: PUSH
85541: LD_INT 18
85543: NONEQUAL
85544: AND
85545: IFFALSE 85585
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85547: LD_VAR 0 2
85551: PPUSH
85552: CALL_OW 257
85556: PUSH
85557: LD_INT 5
85559: PUSH
85560: LD_INT 8
85562: PUSH
85563: LD_INT 9
85565: PUSH
85566: EMPTY
85567: LIST
85568: LIST
85569: LIST
85570: IN
85571: IFFALSE 85585
// SetClass ( unit , 1 ) ;
85573: LD_VAR 0 2
85577: PPUSH
85578: LD_INT 1
85580: PPUSH
85581: CALL_OW 336
// end ;
85585: LD_VAR 0 3
85589: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85590: LD_INT 0
85592: PPUSH
85593: PPUSH
// if not mc_bases or not skirmish then
85594: LD_EXP 44
85598: NOT
85599: PUSH
85600: LD_EXP 42
85604: NOT
85605: OR
85606: IFFALSE 85610
// exit ;
85608: GO 85726
// if GetLives ( abandoned_vehicle ) > 250 then
85610: LD_VAR 0 2
85614: PPUSH
85615: CALL_OW 256
85619: PUSH
85620: LD_INT 250
85622: GREATER
85623: IFFALSE 85627
// exit ;
85625: GO 85726
// for i = 1 to mc_bases do
85627: LD_ADDR_VAR 0 6
85631: PUSH
85632: DOUBLE
85633: LD_INT 1
85635: DEC
85636: ST_TO_ADDR
85637: LD_EXP 44
85641: PUSH
85642: FOR_TO
85643: IFFALSE 85724
// begin if driver in mc_bases [ i ] then
85645: LD_VAR 0 1
85649: PUSH
85650: LD_EXP 44
85654: PUSH
85655: LD_VAR 0 6
85659: ARRAY
85660: IN
85661: IFFALSE 85722
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85663: LD_VAR 0 1
85667: PPUSH
85668: LD_EXP 44
85672: PUSH
85673: LD_VAR 0 6
85677: ARRAY
85678: PPUSH
85679: LD_INT 2
85681: PUSH
85682: LD_INT 30
85684: PUSH
85685: LD_INT 0
85687: PUSH
85688: EMPTY
85689: LIST
85690: LIST
85691: PUSH
85692: LD_INT 30
85694: PUSH
85695: LD_INT 1
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: PUSH
85702: EMPTY
85703: LIST
85704: LIST
85705: LIST
85706: PPUSH
85707: CALL_OW 72
85711: PUSH
85712: LD_INT 1
85714: ARRAY
85715: PPUSH
85716: CALL_OW 112
// break ;
85720: GO 85724
// end ; end ;
85722: GO 85642
85724: POP
85725: POP
// end ; end_of_file end_of_file
85726: LD_VAR 0 5
85730: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
85731: GO 85733
85733: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
85734: LD_STRING initStreamRollete();
85736: PPUSH
85737: CALL_OW 559
// InitStreamMode ;
85741: CALL 85750 0 0
// DefineStreamItems ( ) ;
85745: CALL 86190 0 0
// end ;
85749: END
// function InitStreamMode ; begin
85750: LD_INT 0
85752: PPUSH
// streamModeActive := false ;
85753: LD_ADDR_EXP 87
85757: PUSH
85758: LD_INT 0
85760: ST_TO_ADDR
// normalCounter := 36 ;
85761: LD_ADDR_EXP 88
85765: PUSH
85766: LD_INT 36
85768: ST_TO_ADDR
// hardcoreCounter := 16 ;
85769: LD_ADDR_EXP 89
85773: PUSH
85774: LD_INT 16
85776: ST_TO_ADDR
// sRocket := false ;
85777: LD_ADDR_EXP 92
85781: PUSH
85782: LD_INT 0
85784: ST_TO_ADDR
// sSpeed := false ;
85785: LD_ADDR_EXP 91
85789: PUSH
85790: LD_INT 0
85792: ST_TO_ADDR
// sEngine := false ;
85793: LD_ADDR_EXP 93
85797: PUSH
85798: LD_INT 0
85800: ST_TO_ADDR
// sSpec := false ;
85801: LD_ADDR_EXP 90
85805: PUSH
85806: LD_INT 0
85808: ST_TO_ADDR
// sLevel := false ;
85809: LD_ADDR_EXP 94
85813: PUSH
85814: LD_INT 0
85816: ST_TO_ADDR
// sArmoury := false ;
85817: LD_ADDR_EXP 95
85821: PUSH
85822: LD_INT 0
85824: ST_TO_ADDR
// sRadar := false ;
85825: LD_ADDR_EXP 96
85829: PUSH
85830: LD_INT 0
85832: ST_TO_ADDR
// sBunker := false ;
85833: LD_ADDR_EXP 97
85837: PUSH
85838: LD_INT 0
85840: ST_TO_ADDR
// sHack := false ;
85841: LD_ADDR_EXP 98
85845: PUSH
85846: LD_INT 0
85848: ST_TO_ADDR
// sFire := false ;
85849: LD_ADDR_EXP 99
85853: PUSH
85854: LD_INT 0
85856: ST_TO_ADDR
// sRefresh := false ;
85857: LD_ADDR_EXP 100
85861: PUSH
85862: LD_INT 0
85864: ST_TO_ADDR
// sExp := false ;
85865: LD_ADDR_EXP 101
85869: PUSH
85870: LD_INT 0
85872: ST_TO_ADDR
// sDepot := false ;
85873: LD_ADDR_EXP 102
85877: PUSH
85878: LD_INT 0
85880: ST_TO_ADDR
// sFlag := false ;
85881: LD_ADDR_EXP 103
85885: PUSH
85886: LD_INT 0
85888: ST_TO_ADDR
// sKamikadze := false ;
85889: LD_ADDR_EXP 111
85893: PUSH
85894: LD_INT 0
85896: ST_TO_ADDR
// sTroll := false ;
85897: LD_ADDR_EXP 112
85901: PUSH
85902: LD_INT 0
85904: ST_TO_ADDR
// sSlow := false ;
85905: LD_ADDR_EXP 113
85909: PUSH
85910: LD_INT 0
85912: ST_TO_ADDR
// sLack := false ;
85913: LD_ADDR_EXP 114
85917: PUSH
85918: LD_INT 0
85920: ST_TO_ADDR
// sTank := false ;
85921: LD_ADDR_EXP 116
85925: PUSH
85926: LD_INT 0
85928: ST_TO_ADDR
// sRemote := false ;
85929: LD_ADDR_EXP 117
85933: PUSH
85934: LD_INT 0
85936: ST_TO_ADDR
// sPowell := false ;
85937: LD_ADDR_EXP 118
85941: PUSH
85942: LD_INT 0
85944: ST_TO_ADDR
// sTeleport := false ;
85945: LD_ADDR_EXP 121
85949: PUSH
85950: LD_INT 0
85952: ST_TO_ADDR
// sOilTower := false ;
85953: LD_ADDR_EXP 123
85957: PUSH
85958: LD_INT 0
85960: ST_TO_ADDR
// sShovel := false ;
85961: LD_ADDR_EXP 124
85965: PUSH
85966: LD_INT 0
85968: ST_TO_ADDR
// sSheik := false ;
85969: LD_ADDR_EXP 125
85973: PUSH
85974: LD_INT 0
85976: ST_TO_ADDR
// sEarthquake := false ;
85977: LD_ADDR_EXP 127
85981: PUSH
85982: LD_INT 0
85984: ST_TO_ADDR
// sAI := false ;
85985: LD_ADDR_EXP 128
85989: PUSH
85990: LD_INT 0
85992: ST_TO_ADDR
// sCargo := false ;
85993: LD_ADDR_EXP 131
85997: PUSH
85998: LD_INT 0
86000: ST_TO_ADDR
// sDLaser := false ;
86001: LD_ADDR_EXP 132
86005: PUSH
86006: LD_INT 0
86008: ST_TO_ADDR
// sExchange := false ;
86009: LD_ADDR_EXP 133
86013: PUSH
86014: LD_INT 0
86016: ST_TO_ADDR
// sFac := false ;
86017: LD_ADDR_EXP 134
86021: PUSH
86022: LD_INT 0
86024: ST_TO_ADDR
// sPower := false ;
86025: LD_ADDR_EXP 135
86029: PUSH
86030: LD_INT 0
86032: ST_TO_ADDR
// sRandom := false ;
86033: LD_ADDR_EXP 136
86037: PUSH
86038: LD_INT 0
86040: ST_TO_ADDR
// sShield := false ;
86041: LD_ADDR_EXP 137
86045: PUSH
86046: LD_INT 0
86048: ST_TO_ADDR
// sTime := false ;
86049: LD_ADDR_EXP 138
86053: PUSH
86054: LD_INT 0
86056: ST_TO_ADDR
// sTools := false ;
86057: LD_ADDR_EXP 139
86061: PUSH
86062: LD_INT 0
86064: ST_TO_ADDR
// sSold := false ;
86065: LD_ADDR_EXP 104
86069: PUSH
86070: LD_INT 0
86072: ST_TO_ADDR
// sDiff := false ;
86073: LD_ADDR_EXP 105
86077: PUSH
86078: LD_INT 0
86080: ST_TO_ADDR
// sFog := false ;
86081: LD_ADDR_EXP 108
86085: PUSH
86086: LD_INT 0
86088: ST_TO_ADDR
// sReset := false ;
86089: LD_ADDR_EXP 109
86093: PUSH
86094: LD_INT 0
86096: ST_TO_ADDR
// sSun := false ;
86097: LD_ADDR_EXP 110
86101: PUSH
86102: LD_INT 0
86104: ST_TO_ADDR
// sTiger := false ;
86105: LD_ADDR_EXP 106
86109: PUSH
86110: LD_INT 0
86112: ST_TO_ADDR
// sBomb := false ;
86113: LD_ADDR_EXP 107
86117: PUSH
86118: LD_INT 0
86120: ST_TO_ADDR
// sWound := false ;
86121: LD_ADDR_EXP 115
86125: PUSH
86126: LD_INT 0
86128: ST_TO_ADDR
// sBetray := false ;
86129: LD_ADDR_EXP 119
86133: PUSH
86134: LD_INT 0
86136: ST_TO_ADDR
// sContamin := false ;
86137: LD_ADDR_EXP 120
86141: PUSH
86142: LD_INT 0
86144: ST_TO_ADDR
// sOil := false ;
86145: LD_ADDR_EXP 122
86149: PUSH
86150: LD_INT 0
86152: ST_TO_ADDR
// sStu := false ;
86153: LD_ADDR_EXP 126
86157: PUSH
86158: LD_INT 0
86160: ST_TO_ADDR
// sBazooka := false ;
86161: LD_ADDR_EXP 129
86165: PUSH
86166: LD_INT 0
86168: ST_TO_ADDR
// sMortar := false ;
86169: LD_ADDR_EXP 130
86173: PUSH
86174: LD_INT 0
86176: ST_TO_ADDR
// sRanger := false ;
86177: LD_ADDR_EXP 140
86181: PUSH
86182: LD_INT 0
86184: ST_TO_ADDR
// end ;
86185: LD_VAR 0 1
86189: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
86190: LD_INT 0
86192: PPUSH
86193: PPUSH
86194: PPUSH
86195: PPUSH
86196: PPUSH
// result := [ ] ;
86197: LD_ADDR_VAR 0 1
86201: PUSH
86202: EMPTY
86203: ST_TO_ADDR
// if campaign_id = 1 then
86204: LD_OWVAR 69
86208: PUSH
86209: LD_INT 1
86211: EQUAL
86212: IFFALSE 89150
// begin case mission_number of 1 :
86214: LD_OWVAR 70
86218: PUSH
86219: LD_INT 1
86221: DOUBLE
86222: EQUAL
86223: IFTRUE 86227
86225: GO 86291
86227: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
86228: LD_ADDR_VAR 0 1
86232: PUSH
86233: LD_INT 2
86235: PUSH
86236: LD_INT 4
86238: PUSH
86239: LD_INT 11
86241: PUSH
86242: LD_INT 12
86244: PUSH
86245: LD_INT 15
86247: PUSH
86248: LD_INT 16
86250: PUSH
86251: LD_INT 22
86253: PUSH
86254: LD_INT 23
86256: PUSH
86257: LD_INT 26
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: LIST
86264: LIST
86265: LIST
86266: LIST
86267: LIST
86268: LIST
86269: LIST
86270: PUSH
86271: LD_INT 101
86273: PUSH
86274: LD_INT 102
86276: PUSH
86277: LD_INT 106
86279: PUSH
86280: EMPTY
86281: LIST
86282: LIST
86283: LIST
86284: PUSH
86285: EMPTY
86286: LIST
86287: LIST
86288: ST_TO_ADDR
86289: GO 89148
86291: LD_INT 2
86293: DOUBLE
86294: EQUAL
86295: IFTRUE 86299
86297: GO 86371
86299: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
86300: LD_ADDR_VAR 0 1
86304: PUSH
86305: LD_INT 2
86307: PUSH
86308: LD_INT 4
86310: PUSH
86311: LD_INT 11
86313: PUSH
86314: LD_INT 12
86316: PUSH
86317: LD_INT 15
86319: PUSH
86320: LD_INT 16
86322: PUSH
86323: LD_INT 22
86325: PUSH
86326: LD_INT 23
86328: PUSH
86329: LD_INT 26
86331: PUSH
86332: EMPTY
86333: LIST
86334: LIST
86335: LIST
86336: LIST
86337: LIST
86338: LIST
86339: LIST
86340: LIST
86341: LIST
86342: PUSH
86343: LD_INT 101
86345: PUSH
86346: LD_INT 102
86348: PUSH
86349: LD_INT 105
86351: PUSH
86352: LD_INT 106
86354: PUSH
86355: LD_INT 108
86357: PUSH
86358: EMPTY
86359: LIST
86360: LIST
86361: LIST
86362: LIST
86363: LIST
86364: PUSH
86365: EMPTY
86366: LIST
86367: LIST
86368: ST_TO_ADDR
86369: GO 89148
86371: LD_INT 3
86373: DOUBLE
86374: EQUAL
86375: IFTRUE 86379
86377: GO 86455
86379: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
86380: LD_ADDR_VAR 0 1
86384: PUSH
86385: LD_INT 2
86387: PUSH
86388: LD_INT 4
86390: PUSH
86391: LD_INT 5
86393: PUSH
86394: LD_INT 11
86396: PUSH
86397: LD_INT 12
86399: PUSH
86400: LD_INT 15
86402: PUSH
86403: LD_INT 16
86405: PUSH
86406: LD_INT 22
86408: PUSH
86409: LD_INT 26
86411: PUSH
86412: LD_INT 36
86414: PUSH
86415: EMPTY
86416: LIST
86417: LIST
86418: LIST
86419: LIST
86420: LIST
86421: LIST
86422: LIST
86423: LIST
86424: LIST
86425: LIST
86426: PUSH
86427: LD_INT 101
86429: PUSH
86430: LD_INT 102
86432: PUSH
86433: LD_INT 105
86435: PUSH
86436: LD_INT 106
86438: PUSH
86439: LD_INT 108
86441: PUSH
86442: EMPTY
86443: LIST
86444: LIST
86445: LIST
86446: LIST
86447: LIST
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: ST_TO_ADDR
86453: GO 89148
86455: LD_INT 4
86457: DOUBLE
86458: EQUAL
86459: IFTRUE 86463
86461: GO 86547
86463: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
86464: LD_ADDR_VAR 0 1
86468: PUSH
86469: LD_INT 2
86471: PUSH
86472: LD_INT 4
86474: PUSH
86475: LD_INT 5
86477: PUSH
86478: LD_INT 8
86480: PUSH
86481: LD_INT 11
86483: PUSH
86484: LD_INT 12
86486: PUSH
86487: LD_INT 15
86489: PUSH
86490: LD_INT 16
86492: PUSH
86493: LD_INT 22
86495: PUSH
86496: LD_INT 23
86498: PUSH
86499: LD_INT 26
86501: PUSH
86502: LD_INT 36
86504: PUSH
86505: EMPTY
86506: LIST
86507: LIST
86508: LIST
86509: LIST
86510: LIST
86511: LIST
86512: LIST
86513: LIST
86514: LIST
86515: LIST
86516: LIST
86517: LIST
86518: PUSH
86519: LD_INT 101
86521: PUSH
86522: LD_INT 102
86524: PUSH
86525: LD_INT 105
86527: PUSH
86528: LD_INT 106
86530: PUSH
86531: LD_INT 108
86533: PUSH
86534: EMPTY
86535: LIST
86536: LIST
86537: LIST
86538: LIST
86539: LIST
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: ST_TO_ADDR
86545: GO 89148
86547: LD_INT 5
86549: DOUBLE
86550: EQUAL
86551: IFTRUE 86555
86553: GO 86655
86555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
86556: LD_ADDR_VAR 0 1
86560: PUSH
86561: LD_INT 2
86563: PUSH
86564: LD_INT 4
86566: PUSH
86567: LD_INT 5
86569: PUSH
86570: LD_INT 6
86572: PUSH
86573: LD_INT 8
86575: PUSH
86576: LD_INT 11
86578: PUSH
86579: LD_INT 12
86581: PUSH
86582: LD_INT 15
86584: PUSH
86585: LD_INT 16
86587: PUSH
86588: LD_INT 22
86590: PUSH
86591: LD_INT 23
86593: PUSH
86594: LD_INT 25
86596: PUSH
86597: LD_INT 26
86599: PUSH
86600: LD_INT 36
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: LIST
86607: LIST
86608: LIST
86609: LIST
86610: LIST
86611: LIST
86612: LIST
86613: LIST
86614: LIST
86615: LIST
86616: LIST
86617: LIST
86618: PUSH
86619: LD_INT 101
86621: PUSH
86622: LD_INT 102
86624: PUSH
86625: LD_INT 105
86627: PUSH
86628: LD_INT 106
86630: PUSH
86631: LD_INT 108
86633: PUSH
86634: LD_INT 109
86636: PUSH
86637: LD_INT 112
86639: PUSH
86640: EMPTY
86641: LIST
86642: LIST
86643: LIST
86644: LIST
86645: LIST
86646: LIST
86647: LIST
86648: PUSH
86649: EMPTY
86650: LIST
86651: LIST
86652: ST_TO_ADDR
86653: GO 89148
86655: LD_INT 6
86657: DOUBLE
86658: EQUAL
86659: IFTRUE 86663
86661: GO 86783
86663: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
86664: LD_ADDR_VAR 0 1
86668: PUSH
86669: LD_INT 2
86671: PUSH
86672: LD_INT 4
86674: PUSH
86675: LD_INT 5
86677: PUSH
86678: LD_INT 6
86680: PUSH
86681: LD_INT 8
86683: PUSH
86684: LD_INT 11
86686: PUSH
86687: LD_INT 12
86689: PUSH
86690: LD_INT 15
86692: PUSH
86693: LD_INT 16
86695: PUSH
86696: LD_INT 20
86698: PUSH
86699: LD_INT 21
86701: PUSH
86702: LD_INT 22
86704: PUSH
86705: LD_INT 23
86707: PUSH
86708: LD_INT 25
86710: PUSH
86711: LD_INT 26
86713: PUSH
86714: LD_INT 30
86716: PUSH
86717: LD_INT 31
86719: PUSH
86720: LD_INT 32
86722: PUSH
86723: LD_INT 36
86725: PUSH
86726: EMPTY
86727: LIST
86728: LIST
86729: LIST
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: PUSH
86747: LD_INT 101
86749: PUSH
86750: LD_INT 102
86752: PUSH
86753: LD_INT 105
86755: PUSH
86756: LD_INT 106
86758: PUSH
86759: LD_INT 108
86761: PUSH
86762: LD_INT 109
86764: PUSH
86765: LD_INT 112
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: PUSH
86777: EMPTY
86778: LIST
86779: LIST
86780: ST_TO_ADDR
86781: GO 89148
86783: LD_INT 7
86785: DOUBLE
86786: EQUAL
86787: IFTRUE 86791
86789: GO 86891
86791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
86792: LD_ADDR_VAR 0 1
86796: PUSH
86797: LD_INT 2
86799: PUSH
86800: LD_INT 4
86802: PUSH
86803: LD_INT 5
86805: PUSH
86806: LD_INT 7
86808: PUSH
86809: LD_INT 11
86811: PUSH
86812: LD_INT 12
86814: PUSH
86815: LD_INT 15
86817: PUSH
86818: LD_INT 16
86820: PUSH
86821: LD_INT 20
86823: PUSH
86824: LD_INT 21
86826: PUSH
86827: LD_INT 22
86829: PUSH
86830: LD_INT 23
86832: PUSH
86833: LD_INT 25
86835: PUSH
86836: LD_INT 26
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: PUSH
86855: LD_INT 101
86857: PUSH
86858: LD_INT 102
86860: PUSH
86861: LD_INT 103
86863: PUSH
86864: LD_INT 105
86866: PUSH
86867: LD_INT 106
86869: PUSH
86870: LD_INT 108
86872: PUSH
86873: LD_INT 112
86875: PUSH
86876: EMPTY
86877: LIST
86878: LIST
86879: LIST
86880: LIST
86881: LIST
86882: LIST
86883: LIST
86884: PUSH
86885: EMPTY
86886: LIST
86887: LIST
86888: ST_TO_ADDR
86889: GO 89148
86891: LD_INT 8
86893: DOUBLE
86894: EQUAL
86895: IFTRUE 86899
86897: GO 87027
86899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
86900: LD_ADDR_VAR 0 1
86904: PUSH
86905: LD_INT 2
86907: PUSH
86908: LD_INT 4
86910: PUSH
86911: LD_INT 5
86913: PUSH
86914: LD_INT 6
86916: PUSH
86917: LD_INT 7
86919: PUSH
86920: LD_INT 8
86922: PUSH
86923: LD_INT 11
86925: PUSH
86926: LD_INT 12
86928: PUSH
86929: LD_INT 15
86931: PUSH
86932: LD_INT 16
86934: PUSH
86935: LD_INT 20
86937: PUSH
86938: LD_INT 21
86940: PUSH
86941: LD_INT 22
86943: PUSH
86944: LD_INT 23
86946: PUSH
86947: LD_INT 25
86949: PUSH
86950: LD_INT 26
86952: PUSH
86953: LD_INT 30
86955: PUSH
86956: LD_INT 31
86958: PUSH
86959: LD_INT 32
86961: PUSH
86962: LD_INT 36
86964: PUSH
86965: EMPTY
86966: LIST
86967: LIST
86968: LIST
86969: LIST
86970: LIST
86971: LIST
86972: LIST
86973: LIST
86974: LIST
86975: LIST
86976: LIST
86977: LIST
86978: LIST
86979: LIST
86980: LIST
86981: LIST
86982: LIST
86983: LIST
86984: LIST
86985: LIST
86986: PUSH
86987: LD_INT 101
86989: PUSH
86990: LD_INT 102
86992: PUSH
86993: LD_INT 103
86995: PUSH
86996: LD_INT 105
86998: PUSH
86999: LD_INT 106
87001: PUSH
87002: LD_INT 108
87004: PUSH
87005: LD_INT 109
87007: PUSH
87008: LD_INT 112
87010: PUSH
87011: EMPTY
87012: LIST
87013: LIST
87014: LIST
87015: LIST
87016: LIST
87017: LIST
87018: LIST
87019: LIST
87020: PUSH
87021: EMPTY
87022: LIST
87023: LIST
87024: ST_TO_ADDR
87025: GO 89148
87027: LD_INT 9
87029: DOUBLE
87030: EQUAL
87031: IFTRUE 87035
87033: GO 87171
87035: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
87036: LD_ADDR_VAR 0 1
87040: PUSH
87041: LD_INT 2
87043: PUSH
87044: LD_INT 4
87046: PUSH
87047: LD_INT 5
87049: PUSH
87050: LD_INT 6
87052: PUSH
87053: LD_INT 7
87055: PUSH
87056: LD_INT 8
87058: PUSH
87059: LD_INT 11
87061: PUSH
87062: LD_INT 12
87064: PUSH
87065: LD_INT 15
87067: PUSH
87068: LD_INT 16
87070: PUSH
87071: LD_INT 20
87073: PUSH
87074: LD_INT 21
87076: PUSH
87077: LD_INT 22
87079: PUSH
87080: LD_INT 23
87082: PUSH
87083: LD_INT 25
87085: PUSH
87086: LD_INT 26
87088: PUSH
87089: LD_INT 28
87091: PUSH
87092: LD_INT 30
87094: PUSH
87095: LD_INT 31
87097: PUSH
87098: LD_INT 32
87100: PUSH
87101: LD_INT 36
87103: PUSH
87104: EMPTY
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: LIST
87120: LIST
87121: LIST
87122: LIST
87123: LIST
87124: LIST
87125: LIST
87126: PUSH
87127: LD_INT 101
87129: PUSH
87130: LD_INT 102
87132: PUSH
87133: LD_INT 103
87135: PUSH
87136: LD_INT 105
87138: PUSH
87139: LD_INT 106
87141: PUSH
87142: LD_INT 108
87144: PUSH
87145: LD_INT 109
87147: PUSH
87148: LD_INT 112
87150: PUSH
87151: LD_INT 114
87153: PUSH
87154: EMPTY
87155: LIST
87156: LIST
87157: LIST
87158: LIST
87159: LIST
87160: LIST
87161: LIST
87162: LIST
87163: LIST
87164: PUSH
87165: EMPTY
87166: LIST
87167: LIST
87168: ST_TO_ADDR
87169: GO 89148
87171: LD_INT 10
87173: DOUBLE
87174: EQUAL
87175: IFTRUE 87179
87177: GO 87363
87179: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
87180: LD_ADDR_VAR 0 1
87184: PUSH
87185: LD_INT 2
87187: PUSH
87188: LD_INT 4
87190: PUSH
87191: LD_INT 5
87193: PUSH
87194: LD_INT 6
87196: PUSH
87197: LD_INT 7
87199: PUSH
87200: LD_INT 8
87202: PUSH
87203: LD_INT 9
87205: PUSH
87206: LD_INT 10
87208: PUSH
87209: LD_INT 11
87211: PUSH
87212: LD_INT 12
87214: PUSH
87215: LD_INT 13
87217: PUSH
87218: LD_INT 14
87220: PUSH
87221: LD_INT 15
87223: PUSH
87224: LD_INT 16
87226: PUSH
87227: LD_INT 17
87229: PUSH
87230: LD_INT 18
87232: PUSH
87233: LD_INT 19
87235: PUSH
87236: LD_INT 20
87238: PUSH
87239: LD_INT 21
87241: PUSH
87242: LD_INT 22
87244: PUSH
87245: LD_INT 23
87247: PUSH
87248: LD_INT 24
87250: PUSH
87251: LD_INT 25
87253: PUSH
87254: LD_INT 26
87256: PUSH
87257: LD_INT 28
87259: PUSH
87260: LD_INT 30
87262: PUSH
87263: LD_INT 31
87265: PUSH
87266: LD_INT 32
87268: PUSH
87269: LD_INT 36
87271: PUSH
87272: EMPTY
87273: LIST
87274: LIST
87275: LIST
87276: LIST
87277: LIST
87278: LIST
87279: LIST
87280: LIST
87281: LIST
87282: LIST
87283: LIST
87284: LIST
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: LIST
87292: LIST
87293: LIST
87294: LIST
87295: LIST
87296: LIST
87297: LIST
87298: LIST
87299: LIST
87300: LIST
87301: LIST
87302: PUSH
87303: LD_INT 101
87305: PUSH
87306: LD_INT 102
87308: PUSH
87309: LD_INT 103
87311: PUSH
87312: LD_INT 104
87314: PUSH
87315: LD_INT 105
87317: PUSH
87318: LD_INT 106
87320: PUSH
87321: LD_INT 107
87323: PUSH
87324: LD_INT 108
87326: PUSH
87327: LD_INT 109
87329: PUSH
87330: LD_INT 110
87332: PUSH
87333: LD_INT 111
87335: PUSH
87336: LD_INT 112
87338: PUSH
87339: LD_INT 114
87341: PUSH
87342: EMPTY
87343: LIST
87344: LIST
87345: LIST
87346: LIST
87347: LIST
87348: LIST
87349: LIST
87350: LIST
87351: LIST
87352: LIST
87353: LIST
87354: LIST
87355: LIST
87356: PUSH
87357: EMPTY
87358: LIST
87359: LIST
87360: ST_TO_ADDR
87361: GO 89148
87363: LD_INT 11
87365: DOUBLE
87366: EQUAL
87367: IFTRUE 87371
87369: GO 87563
87371: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
87372: LD_ADDR_VAR 0 1
87376: PUSH
87377: LD_INT 2
87379: PUSH
87380: LD_INT 3
87382: PUSH
87383: LD_INT 4
87385: PUSH
87386: LD_INT 5
87388: PUSH
87389: LD_INT 6
87391: PUSH
87392: LD_INT 7
87394: PUSH
87395: LD_INT 8
87397: PUSH
87398: LD_INT 9
87400: PUSH
87401: LD_INT 10
87403: PUSH
87404: LD_INT 11
87406: PUSH
87407: LD_INT 12
87409: PUSH
87410: LD_INT 13
87412: PUSH
87413: LD_INT 14
87415: PUSH
87416: LD_INT 15
87418: PUSH
87419: LD_INT 16
87421: PUSH
87422: LD_INT 17
87424: PUSH
87425: LD_INT 18
87427: PUSH
87428: LD_INT 19
87430: PUSH
87431: LD_INT 20
87433: PUSH
87434: LD_INT 21
87436: PUSH
87437: LD_INT 22
87439: PUSH
87440: LD_INT 23
87442: PUSH
87443: LD_INT 24
87445: PUSH
87446: LD_INT 25
87448: PUSH
87449: LD_INT 26
87451: PUSH
87452: LD_INT 28
87454: PUSH
87455: LD_INT 30
87457: PUSH
87458: LD_INT 31
87460: PUSH
87461: LD_INT 32
87463: PUSH
87464: LD_INT 34
87466: PUSH
87467: LD_INT 36
87469: PUSH
87470: EMPTY
87471: LIST
87472: LIST
87473: LIST
87474: LIST
87475: LIST
87476: LIST
87477: LIST
87478: LIST
87479: LIST
87480: LIST
87481: LIST
87482: LIST
87483: LIST
87484: LIST
87485: LIST
87486: LIST
87487: LIST
87488: LIST
87489: LIST
87490: LIST
87491: LIST
87492: LIST
87493: LIST
87494: LIST
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: LIST
87500: LIST
87501: LIST
87502: PUSH
87503: LD_INT 101
87505: PUSH
87506: LD_INT 102
87508: PUSH
87509: LD_INT 103
87511: PUSH
87512: LD_INT 104
87514: PUSH
87515: LD_INT 105
87517: PUSH
87518: LD_INT 106
87520: PUSH
87521: LD_INT 107
87523: PUSH
87524: LD_INT 108
87526: PUSH
87527: LD_INT 109
87529: PUSH
87530: LD_INT 110
87532: PUSH
87533: LD_INT 111
87535: PUSH
87536: LD_INT 112
87538: PUSH
87539: LD_INT 114
87541: PUSH
87542: EMPTY
87543: LIST
87544: LIST
87545: LIST
87546: LIST
87547: LIST
87548: LIST
87549: LIST
87550: LIST
87551: LIST
87552: LIST
87553: LIST
87554: LIST
87555: LIST
87556: PUSH
87557: EMPTY
87558: LIST
87559: LIST
87560: ST_TO_ADDR
87561: GO 89148
87563: LD_INT 12
87565: DOUBLE
87566: EQUAL
87567: IFTRUE 87571
87569: GO 87779
87571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
87572: LD_ADDR_VAR 0 1
87576: PUSH
87577: LD_INT 1
87579: PUSH
87580: LD_INT 2
87582: PUSH
87583: LD_INT 3
87585: PUSH
87586: LD_INT 4
87588: PUSH
87589: LD_INT 5
87591: PUSH
87592: LD_INT 6
87594: PUSH
87595: LD_INT 7
87597: PUSH
87598: LD_INT 8
87600: PUSH
87601: LD_INT 9
87603: PUSH
87604: LD_INT 10
87606: PUSH
87607: LD_INT 11
87609: PUSH
87610: LD_INT 12
87612: PUSH
87613: LD_INT 13
87615: PUSH
87616: LD_INT 14
87618: PUSH
87619: LD_INT 15
87621: PUSH
87622: LD_INT 16
87624: PUSH
87625: LD_INT 17
87627: PUSH
87628: LD_INT 18
87630: PUSH
87631: LD_INT 19
87633: PUSH
87634: LD_INT 20
87636: PUSH
87637: LD_INT 21
87639: PUSH
87640: LD_INT 22
87642: PUSH
87643: LD_INT 23
87645: PUSH
87646: LD_INT 24
87648: PUSH
87649: LD_INT 25
87651: PUSH
87652: LD_INT 26
87654: PUSH
87655: LD_INT 27
87657: PUSH
87658: LD_INT 28
87660: PUSH
87661: LD_INT 30
87663: PUSH
87664: LD_INT 31
87666: PUSH
87667: LD_INT 32
87669: PUSH
87670: LD_INT 33
87672: PUSH
87673: LD_INT 34
87675: PUSH
87676: LD_INT 36
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: LIST
87683: LIST
87684: LIST
87685: LIST
87686: LIST
87687: LIST
87688: LIST
87689: LIST
87690: LIST
87691: LIST
87692: LIST
87693: LIST
87694: LIST
87695: LIST
87696: LIST
87697: LIST
87698: LIST
87699: LIST
87700: LIST
87701: LIST
87702: LIST
87703: LIST
87704: LIST
87705: LIST
87706: LIST
87707: LIST
87708: LIST
87709: LIST
87710: LIST
87711: LIST
87712: LIST
87713: LIST
87714: PUSH
87715: LD_INT 101
87717: PUSH
87718: LD_INT 102
87720: PUSH
87721: LD_INT 103
87723: PUSH
87724: LD_INT 104
87726: PUSH
87727: LD_INT 105
87729: PUSH
87730: LD_INT 106
87732: PUSH
87733: LD_INT 107
87735: PUSH
87736: LD_INT 108
87738: PUSH
87739: LD_INT 109
87741: PUSH
87742: LD_INT 110
87744: PUSH
87745: LD_INT 111
87747: PUSH
87748: LD_INT 112
87750: PUSH
87751: LD_INT 113
87753: PUSH
87754: LD_INT 114
87756: PUSH
87757: EMPTY
87758: LIST
87759: LIST
87760: LIST
87761: LIST
87762: LIST
87763: LIST
87764: LIST
87765: LIST
87766: LIST
87767: LIST
87768: LIST
87769: LIST
87770: LIST
87771: LIST
87772: PUSH
87773: EMPTY
87774: LIST
87775: LIST
87776: ST_TO_ADDR
87777: GO 89148
87779: LD_INT 13
87781: DOUBLE
87782: EQUAL
87783: IFTRUE 87787
87785: GO 87983
87787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
87788: LD_ADDR_VAR 0 1
87792: PUSH
87793: LD_INT 1
87795: PUSH
87796: LD_INT 2
87798: PUSH
87799: LD_INT 3
87801: PUSH
87802: LD_INT 4
87804: PUSH
87805: LD_INT 5
87807: PUSH
87808: LD_INT 8
87810: PUSH
87811: LD_INT 9
87813: PUSH
87814: LD_INT 10
87816: PUSH
87817: LD_INT 11
87819: PUSH
87820: LD_INT 12
87822: PUSH
87823: LD_INT 14
87825: PUSH
87826: LD_INT 15
87828: PUSH
87829: LD_INT 16
87831: PUSH
87832: LD_INT 17
87834: PUSH
87835: LD_INT 18
87837: PUSH
87838: LD_INT 19
87840: PUSH
87841: LD_INT 20
87843: PUSH
87844: LD_INT 21
87846: PUSH
87847: LD_INT 22
87849: PUSH
87850: LD_INT 23
87852: PUSH
87853: LD_INT 24
87855: PUSH
87856: LD_INT 25
87858: PUSH
87859: LD_INT 26
87861: PUSH
87862: LD_INT 27
87864: PUSH
87865: LD_INT 28
87867: PUSH
87868: LD_INT 30
87870: PUSH
87871: LD_INT 31
87873: PUSH
87874: LD_INT 32
87876: PUSH
87877: LD_INT 33
87879: PUSH
87880: LD_INT 34
87882: PUSH
87883: LD_INT 36
87885: PUSH
87886: EMPTY
87887: LIST
87888: LIST
87889: LIST
87890: LIST
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: LIST
87905: LIST
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: LIST
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: PUSH
87919: LD_INT 101
87921: PUSH
87922: LD_INT 102
87924: PUSH
87925: LD_INT 103
87927: PUSH
87928: LD_INT 104
87930: PUSH
87931: LD_INT 105
87933: PUSH
87934: LD_INT 106
87936: PUSH
87937: LD_INT 107
87939: PUSH
87940: LD_INT 108
87942: PUSH
87943: LD_INT 109
87945: PUSH
87946: LD_INT 110
87948: PUSH
87949: LD_INT 111
87951: PUSH
87952: LD_INT 112
87954: PUSH
87955: LD_INT 113
87957: PUSH
87958: LD_INT 114
87960: PUSH
87961: EMPTY
87962: LIST
87963: LIST
87964: LIST
87965: LIST
87966: LIST
87967: LIST
87968: LIST
87969: LIST
87970: LIST
87971: LIST
87972: LIST
87973: LIST
87974: LIST
87975: LIST
87976: PUSH
87977: EMPTY
87978: LIST
87979: LIST
87980: ST_TO_ADDR
87981: GO 89148
87983: LD_INT 14
87985: DOUBLE
87986: EQUAL
87987: IFTRUE 87991
87989: GO 88203
87991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
87992: LD_ADDR_VAR 0 1
87996: PUSH
87997: LD_INT 1
87999: PUSH
88000: LD_INT 2
88002: PUSH
88003: LD_INT 3
88005: PUSH
88006: LD_INT 4
88008: PUSH
88009: LD_INT 5
88011: PUSH
88012: LD_INT 6
88014: PUSH
88015: LD_INT 7
88017: PUSH
88018: LD_INT 8
88020: PUSH
88021: LD_INT 9
88023: PUSH
88024: LD_INT 10
88026: PUSH
88027: LD_INT 11
88029: PUSH
88030: LD_INT 12
88032: PUSH
88033: LD_INT 13
88035: PUSH
88036: LD_INT 14
88038: PUSH
88039: LD_INT 15
88041: PUSH
88042: LD_INT 16
88044: PUSH
88045: LD_INT 17
88047: PUSH
88048: LD_INT 18
88050: PUSH
88051: LD_INT 19
88053: PUSH
88054: LD_INT 20
88056: PUSH
88057: LD_INT 21
88059: PUSH
88060: LD_INT 22
88062: PUSH
88063: LD_INT 23
88065: PUSH
88066: LD_INT 24
88068: PUSH
88069: LD_INT 25
88071: PUSH
88072: LD_INT 26
88074: PUSH
88075: LD_INT 27
88077: PUSH
88078: LD_INT 28
88080: PUSH
88081: LD_INT 29
88083: PUSH
88084: LD_INT 30
88086: PUSH
88087: LD_INT 31
88089: PUSH
88090: LD_INT 32
88092: PUSH
88093: LD_INT 33
88095: PUSH
88096: LD_INT 34
88098: PUSH
88099: LD_INT 36
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: LIST
88106: LIST
88107: LIST
88108: LIST
88109: LIST
88110: LIST
88111: LIST
88112: LIST
88113: LIST
88114: LIST
88115: LIST
88116: LIST
88117: LIST
88118: LIST
88119: LIST
88120: LIST
88121: LIST
88122: LIST
88123: LIST
88124: LIST
88125: LIST
88126: LIST
88127: LIST
88128: LIST
88129: LIST
88130: LIST
88131: LIST
88132: LIST
88133: LIST
88134: LIST
88135: LIST
88136: LIST
88137: LIST
88138: PUSH
88139: LD_INT 101
88141: PUSH
88142: LD_INT 102
88144: PUSH
88145: LD_INT 103
88147: PUSH
88148: LD_INT 104
88150: PUSH
88151: LD_INT 105
88153: PUSH
88154: LD_INT 106
88156: PUSH
88157: LD_INT 107
88159: PUSH
88160: LD_INT 108
88162: PUSH
88163: LD_INT 109
88165: PUSH
88166: LD_INT 110
88168: PUSH
88169: LD_INT 111
88171: PUSH
88172: LD_INT 112
88174: PUSH
88175: LD_INT 113
88177: PUSH
88178: LD_INT 114
88180: PUSH
88181: EMPTY
88182: LIST
88183: LIST
88184: LIST
88185: LIST
88186: LIST
88187: LIST
88188: LIST
88189: LIST
88190: LIST
88191: LIST
88192: LIST
88193: LIST
88194: LIST
88195: LIST
88196: PUSH
88197: EMPTY
88198: LIST
88199: LIST
88200: ST_TO_ADDR
88201: GO 89148
88203: LD_INT 15
88205: DOUBLE
88206: EQUAL
88207: IFTRUE 88211
88209: GO 88423
88211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
88212: LD_ADDR_VAR 0 1
88216: PUSH
88217: LD_INT 1
88219: PUSH
88220: LD_INT 2
88222: PUSH
88223: LD_INT 3
88225: PUSH
88226: LD_INT 4
88228: PUSH
88229: LD_INT 5
88231: PUSH
88232: LD_INT 6
88234: PUSH
88235: LD_INT 7
88237: PUSH
88238: LD_INT 8
88240: PUSH
88241: LD_INT 9
88243: PUSH
88244: LD_INT 10
88246: PUSH
88247: LD_INT 11
88249: PUSH
88250: LD_INT 12
88252: PUSH
88253: LD_INT 13
88255: PUSH
88256: LD_INT 14
88258: PUSH
88259: LD_INT 15
88261: PUSH
88262: LD_INT 16
88264: PUSH
88265: LD_INT 17
88267: PUSH
88268: LD_INT 18
88270: PUSH
88271: LD_INT 19
88273: PUSH
88274: LD_INT 20
88276: PUSH
88277: LD_INT 21
88279: PUSH
88280: LD_INT 22
88282: PUSH
88283: LD_INT 23
88285: PUSH
88286: LD_INT 24
88288: PUSH
88289: LD_INT 25
88291: PUSH
88292: LD_INT 26
88294: PUSH
88295: LD_INT 27
88297: PUSH
88298: LD_INT 28
88300: PUSH
88301: LD_INT 29
88303: PUSH
88304: LD_INT 30
88306: PUSH
88307: LD_INT 31
88309: PUSH
88310: LD_INT 32
88312: PUSH
88313: LD_INT 33
88315: PUSH
88316: LD_INT 34
88318: PUSH
88319: LD_INT 36
88321: PUSH
88322: EMPTY
88323: LIST
88324: LIST
88325: LIST
88326: LIST
88327: LIST
88328: LIST
88329: LIST
88330: LIST
88331: LIST
88332: LIST
88333: LIST
88334: LIST
88335: LIST
88336: LIST
88337: LIST
88338: LIST
88339: LIST
88340: LIST
88341: LIST
88342: LIST
88343: LIST
88344: LIST
88345: LIST
88346: LIST
88347: LIST
88348: LIST
88349: LIST
88350: LIST
88351: LIST
88352: LIST
88353: LIST
88354: LIST
88355: LIST
88356: LIST
88357: LIST
88358: PUSH
88359: LD_INT 101
88361: PUSH
88362: LD_INT 102
88364: PUSH
88365: LD_INT 103
88367: PUSH
88368: LD_INT 104
88370: PUSH
88371: LD_INT 105
88373: PUSH
88374: LD_INT 106
88376: PUSH
88377: LD_INT 107
88379: PUSH
88380: LD_INT 108
88382: PUSH
88383: LD_INT 109
88385: PUSH
88386: LD_INT 110
88388: PUSH
88389: LD_INT 111
88391: PUSH
88392: LD_INT 112
88394: PUSH
88395: LD_INT 113
88397: PUSH
88398: LD_INT 114
88400: PUSH
88401: EMPTY
88402: LIST
88403: LIST
88404: LIST
88405: LIST
88406: LIST
88407: LIST
88408: LIST
88409: LIST
88410: LIST
88411: LIST
88412: LIST
88413: LIST
88414: LIST
88415: LIST
88416: PUSH
88417: EMPTY
88418: LIST
88419: LIST
88420: ST_TO_ADDR
88421: GO 89148
88423: LD_INT 16
88425: DOUBLE
88426: EQUAL
88427: IFTRUE 88431
88429: GO 88555
88431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
88432: LD_ADDR_VAR 0 1
88436: PUSH
88437: LD_INT 2
88439: PUSH
88440: LD_INT 4
88442: PUSH
88443: LD_INT 5
88445: PUSH
88446: LD_INT 7
88448: PUSH
88449: LD_INT 11
88451: PUSH
88452: LD_INT 12
88454: PUSH
88455: LD_INT 15
88457: PUSH
88458: LD_INT 16
88460: PUSH
88461: LD_INT 20
88463: PUSH
88464: LD_INT 21
88466: PUSH
88467: LD_INT 22
88469: PUSH
88470: LD_INT 23
88472: PUSH
88473: LD_INT 25
88475: PUSH
88476: LD_INT 26
88478: PUSH
88479: LD_INT 30
88481: PUSH
88482: LD_INT 31
88484: PUSH
88485: LD_INT 32
88487: PUSH
88488: LD_INT 33
88490: PUSH
88491: LD_INT 34
88493: PUSH
88494: EMPTY
88495: LIST
88496: LIST
88497: LIST
88498: LIST
88499: LIST
88500: LIST
88501: LIST
88502: LIST
88503: LIST
88504: LIST
88505: LIST
88506: LIST
88507: LIST
88508: LIST
88509: LIST
88510: LIST
88511: LIST
88512: LIST
88513: LIST
88514: PUSH
88515: LD_INT 101
88517: PUSH
88518: LD_INT 102
88520: PUSH
88521: LD_INT 103
88523: PUSH
88524: LD_INT 106
88526: PUSH
88527: LD_INT 108
88529: PUSH
88530: LD_INT 112
88532: PUSH
88533: LD_INT 113
88535: PUSH
88536: LD_INT 114
88538: PUSH
88539: EMPTY
88540: LIST
88541: LIST
88542: LIST
88543: LIST
88544: LIST
88545: LIST
88546: LIST
88547: LIST
88548: PUSH
88549: EMPTY
88550: LIST
88551: LIST
88552: ST_TO_ADDR
88553: GO 89148
88555: LD_INT 17
88557: DOUBLE
88558: EQUAL
88559: IFTRUE 88563
88561: GO 88775
88563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
88564: LD_ADDR_VAR 0 1
88568: PUSH
88569: LD_INT 1
88571: PUSH
88572: LD_INT 2
88574: PUSH
88575: LD_INT 3
88577: PUSH
88578: LD_INT 4
88580: PUSH
88581: LD_INT 5
88583: PUSH
88584: LD_INT 6
88586: PUSH
88587: LD_INT 7
88589: PUSH
88590: LD_INT 8
88592: PUSH
88593: LD_INT 9
88595: PUSH
88596: LD_INT 10
88598: PUSH
88599: LD_INT 11
88601: PUSH
88602: LD_INT 12
88604: PUSH
88605: LD_INT 13
88607: PUSH
88608: LD_INT 14
88610: PUSH
88611: LD_INT 15
88613: PUSH
88614: LD_INT 16
88616: PUSH
88617: LD_INT 17
88619: PUSH
88620: LD_INT 18
88622: PUSH
88623: LD_INT 19
88625: PUSH
88626: LD_INT 20
88628: PUSH
88629: LD_INT 21
88631: PUSH
88632: LD_INT 22
88634: PUSH
88635: LD_INT 23
88637: PUSH
88638: LD_INT 24
88640: PUSH
88641: LD_INT 25
88643: PUSH
88644: LD_INT 26
88646: PUSH
88647: LD_INT 27
88649: PUSH
88650: LD_INT 28
88652: PUSH
88653: LD_INT 29
88655: PUSH
88656: LD_INT 30
88658: PUSH
88659: LD_INT 31
88661: PUSH
88662: LD_INT 32
88664: PUSH
88665: LD_INT 33
88667: PUSH
88668: LD_INT 34
88670: PUSH
88671: LD_INT 36
88673: PUSH
88674: EMPTY
88675: LIST
88676: LIST
88677: LIST
88678: LIST
88679: LIST
88680: LIST
88681: LIST
88682: LIST
88683: LIST
88684: LIST
88685: LIST
88686: LIST
88687: LIST
88688: LIST
88689: LIST
88690: LIST
88691: LIST
88692: LIST
88693: LIST
88694: LIST
88695: LIST
88696: LIST
88697: LIST
88698: LIST
88699: LIST
88700: LIST
88701: LIST
88702: LIST
88703: LIST
88704: LIST
88705: LIST
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: PUSH
88711: LD_INT 101
88713: PUSH
88714: LD_INT 102
88716: PUSH
88717: LD_INT 103
88719: PUSH
88720: LD_INT 104
88722: PUSH
88723: LD_INT 105
88725: PUSH
88726: LD_INT 106
88728: PUSH
88729: LD_INT 107
88731: PUSH
88732: LD_INT 108
88734: PUSH
88735: LD_INT 109
88737: PUSH
88738: LD_INT 110
88740: PUSH
88741: LD_INT 111
88743: PUSH
88744: LD_INT 112
88746: PUSH
88747: LD_INT 113
88749: PUSH
88750: LD_INT 114
88752: PUSH
88753: EMPTY
88754: LIST
88755: LIST
88756: LIST
88757: LIST
88758: LIST
88759: LIST
88760: LIST
88761: LIST
88762: LIST
88763: LIST
88764: LIST
88765: LIST
88766: LIST
88767: LIST
88768: PUSH
88769: EMPTY
88770: LIST
88771: LIST
88772: ST_TO_ADDR
88773: GO 89148
88775: LD_INT 18
88777: DOUBLE
88778: EQUAL
88779: IFTRUE 88783
88781: GO 88919
88783: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
88784: LD_ADDR_VAR 0 1
88788: PUSH
88789: LD_INT 2
88791: PUSH
88792: LD_INT 4
88794: PUSH
88795: LD_INT 5
88797: PUSH
88798: LD_INT 7
88800: PUSH
88801: LD_INT 11
88803: PUSH
88804: LD_INT 12
88806: PUSH
88807: LD_INT 15
88809: PUSH
88810: LD_INT 16
88812: PUSH
88813: LD_INT 20
88815: PUSH
88816: LD_INT 21
88818: PUSH
88819: LD_INT 22
88821: PUSH
88822: LD_INT 23
88824: PUSH
88825: LD_INT 25
88827: PUSH
88828: LD_INT 26
88830: PUSH
88831: LD_INT 30
88833: PUSH
88834: LD_INT 31
88836: PUSH
88837: LD_INT 32
88839: PUSH
88840: LD_INT 33
88842: PUSH
88843: LD_INT 34
88845: PUSH
88846: LD_INT 35
88848: PUSH
88849: LD_INT 36
88851: PUSH
88852: EMPTY
88853: LIST
88854: LIST
88855: LIST
88856: LIST
88857: LIST
88858: LIST
88859: LIST
88860: LIST
88861: LIST
88862: LIST
88863: LIST
88864: LIST
88865: LIST
88866: LIST
88867: LIST
88868: LIST
88869: LIST
88870: LIST
88871: LIST
88872: LIST
88873: LIST
88874: PUSH
88875: LD_INT 101
88877: PUSH
88878: LD_INT 102
88880: PUSH
88881: LD_INT 103
88883: PUSH
88884: LD_INT 106
88886: PUSH
88887: LD_INT 108
88889: PUSH
88890: LD_INT 112
88892: PUSH
88893: LD_INT 113
88895: PUSH
88896: LD_INT 114
88898: PUSH
88899: LD_INT 115
88901: PUSH
88902: EMPTY
88903: LIST
88904: LIST
88905: LIST
88906: LIST
88907: LIST
88908: LIST
88909: LIST
88910: LIST
88911: LIST
88912: PUSH
88913: EMPTY
88914: LIST
88915: LIST
88916: ST_TO_ADDR
88917: GO 89148
88919: LD_INT 19
88921: DOUBLE
88922: EQUAL
88923: IFTRUE 88927
88925: GO 89147
88927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
88928: LD_ADDR_VAR 0 1
88932: PUSH
88933: LD_INT 1
88935: PUSH
88936: LD_INT 2
88938: PUSH
88939: LD_INT 3
88941: PUSH
88942: LD_INT 4
88944: PUSH
88945: LD_INT 5
88947: PUSH
88948: LD_INT 6
88950: PUSH
88951: LD_INT 7
88953: PUSH
88954: LD_INT 8
88956: PUSH
88957: LD_INT 9
88959: PUSH
88960: LD_INT 10
88962: PUSH
88963: LD_INT 11
88965: PUSH
88966: LD_INT 12
88968: PUSH
88969: LD_INT 13
88971: PUSH
88972: LD_INT 14
88974: PUSH
88975: LD_INT 15
88977: PUSH
88978: LD_INT 16
88980: PUSH
88981: LD_INT 17
88983: PUSH
88984: LD_INT 18
88986: PUSH
88987: LD_INT 19
88989: PUSH
88990: LD_INT 20
88992: PUSH
88993: LD_INT 21
88995: PUSH
88996: LD_INT 22
88998: PUSH
88999: LD_INT 23
89001: PUSH
89002: LD_INT 24
89004: PUSH
89005: LD_INT 25
89007: PUSH
89008: LD_INT 26
89010: PUSH
89011: LD_INT 27
89013: PUSH
89014: LD_INT 28
89016: PUSH
89017: LD_INT 29
89019: PUSH
89020: LD_INT 30
89022: PUSH
89023: LD_INT 31
89025: PUSH
89026: LD_INT 32
89028: PUSH
89029: LD_INT 33
89031: PUSH
89032: LD_INT 34
89034: PUSH
89035: LD_INT 35
89037: PUSH
89038: LD_INT 36
89040: PUSH
89041: EMPTY
89042: LIST
89043: LIST
89044: LIST
89045: LIST
89046: LIST
89047: LIST
89048: LIST
89049: LIST
89050: LIST
89051: LIST
89052: LIST
89053: LIST
89054: LIST
89055: LIST
89056: LIST
89057: LIST
89058: LIST
89059: LIST
89060: LIST
89061: LIST
89062: LIST
89063: LIST
89064: LIST
89065: LIST
89066: LIST
89067: LIST
89068: LIST
89069: LIST
89070: LIST
89071: LIST
89072: LIST
89073: LIST
89074: LIST
89075: LIST
89076: LIST
89077: LIST
89078: PUSH
89079: LD_INT 101
89081: PUSH
89082: LD_INT 102
89084: PUSH
89085: LD_INT 103
89087: PUSH
89088: LD_INT 104
89090: PUSH
89091: LD_INT 105
89093: PUSH
89094: LD_INT 106
89096: PUSH
89097: LD_INT 107
89099: PUSH
89100: LD_INT 108
89102: PUSH
89103: LD_INT 109
89105: PUSH
89106: LD_INT 110
89108: PUSH
89109: LD_INT 111
89111: PUSH
89112: LD_INT 112
89114: PUSH
89115: LD_INT 113
89117: PUSH
89118: LD_INT 114
89120: PUSH
89121: LD_INT 115
89123: PUSH
89124: EMPTY
89125: LIST
89126: LIST
89127: LIST
89128: LIST
89129: LIST
89130: LIST
89131: LIST
89132: LIST
89133: LIST
89134: LIST
89135: LIST
89136: LIST
89137: LIST
89138: LIST
89139: LIST
89140: PUSH
89141: EMPTY
89142: LIST
89143: LIST
89144: ST_TO_ADDR
89145: GO 89148
89147: POP
// end else
89148: GO 89367
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
89150: LD_ADDR_VAR 0 1
89154: PUSH
89155: LD_INT 1
89157: PUSH
89158: LD_INT 2
89160: PUSH
89161: LD_INT 3
89163: PUSH
89164: LD_INT 4
89166: PUSH
89167: LD_INT 5
89169: PUSH
89170: LD_INT 6
89172: PUSH
89173: LD_INT 7
89175: PUSH
89176: LD_INT 8
89178: PUSH
89179: LD_INT 9
89181: PUSH
89182: LD_INT 10
89184: PUSH
89185: LD_INT 11
89187: PUSH
89188: LD_INT 12
89190: PUSH
89191: LD_INT 13
89193: PUSH
89194: LD_INT 14
89196: PUSH
89197: LD_INT 15
89199: PUSH
89200: LD_INT 16
89202: PUSH
89203: LD_INT 17
89205: PUSH
89206: LD_INT 18
89208: PUSH
89209: LD_INT 19
89211: PUSH
89212: LD_INT 20
89214: PUSH
89215: LD_INT 21
89217: PUSH
89218: LD_INT 22
89220: PUSH
89221: LD_INT 23
89223: PUSH
89224: LD_INT 24
89226: PUSH
89227: LD_INT 25
89229: PUSH
89230: LD_INT 26
89232: PUSH
89233: LD_INT 27
89235: PUSH
89236: LD_INT 28
89238: PUSH
89239: LD_INT 29
89241: PUSH
89242: LD_INT 30
89244: PUSH
89245: LD_INT 31
89247: PUSH
89248: LD_INT 32
89250: PUSH
89251: LD_INT 33
89253: PUSH
89254: LD_INT 34
89256: PUSH
89257: LD_INT 35
89259: PUSH
89260: LD_INT 36
89262: PUSH
89263: EMPTY
89264: LIST
89265: LIST
89266: LIST
89267: LIST
89268: LIST
89269: LIST
89270: LIST
89271: LIST
89272: LIST
89273: LIST
89274: LIST
89275: LIST
89276: LIST
89277: LIST
89278: LIST
89279: LIST
89280: LIST
89281: LIST
89282: LIST
89283: LIST
89284: LIST
89285: LIST
89286: LIST
89287: LIST
89288: LIST
89289: LIST
89290: LIST
89291: LIST
89292: LIST
89293: LIST
89294: LIST
89295: LIST
89296: LIST
89297: LIST
89298: LIST
89299: LIST
89300: PUSH
89301: LD_INT 101
89303: PUSH
89304: LD_INT 102
89306: PUSH
89307: LD_INT 103
89309: PUSH
89310: LD_INT 104
89312: PUSH
89313: LD_INT 105
89315: PUSH
89316: LD_INT 106
89318: PUSH
89319: LD_INT 107
89321: PUSH
89322: LD_INT 108
89324: PUSH
89325: LD_INT 109
89327: PUSH
89328: LD_INT 110
89330: PUSH
89331: LD_INT 111
89333: PUSH
89334: LD_INT 112
89336: PUSH
89337: LD_INT 113
89339: PUSH
89340: LD_INT 114
89342: PUSH
89343: LD_INT 115
89345: PUSH
89346: EMPTY
89347: LIST
89348: LIST
89349: LIST
89350: LIST
89351: LIST
89352: LIST
89353: LIST
89354: LIST
89355: LIST
89356: LIST
89357: LIST
89358: LIST
89359: LIST
89360: LIST
89361: LIST
89362: PUSH
89363: EMPTY
89364: LIST
89365: LIST
89366: ST_TO_ADDR
// if result then
89367: LD_VAR 0 1
89371: IFFALSE 89660
// begin normal :=  ;
89373: LD_ADDR_VAR 0 3
89377: PUSH
89378: LD_STRING 
89380: ST_TO_ADDR
// hardcore :=  ;
89381: LD_ADDR_VAR 0 4
89385: PUSH
89386: LD_STRING 
89388: ST_TO_ADDR
// for i = 1 to normalCounter do
89389: LD_ADDR_VAR 0 5
89393: PUSH
89394: DOUBLE
89395: LD_INT 1
89397: DEC
89398: ST_TO_ADDR
89399: LD_EXP 88
89403: PUSH
89404: FOR_TO
89405: IFFALSE 89506
// begin tmp := 0 ;
89407: LD_ADDR_VAR 0 2
89411: PUSH
89412: LD_STRING 0
89414: ST_TO_ADDR
// if result [ 1 ] then
89415: LD_VAR 0 1
89419: PUSH
89420: LD_INT 1
89422: ARRAY
89423: IFFALSE 89488
// if result [ 1 ] [ 1 ] = i then
89425: LD_VAR 0 1
89429: PUSH
89430: LD_INT 1
89432: ARRAY
89433: PUSH
89434: LD_INT 1
89436: ARRAY
89437: PUSH
89438: LD_VAR 0 5
89442: EQUAL
89443: IFFALSE 89488
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
89445: LD_ADDR_VAR 0 1
89449: PUSH
89450: LD_VAR 0 1
89454: PPUSH
89455: LD_INT 1
89457: PPUSH
89458: LD_VAR 0 1
89462: PUSH
89463: LD_INT 1
89465: ARRAY
89466: PPUSH
89467: LD_INT 1
89469: PPUSH
89470: CALL_OW 3
89474: PPUSH
89475: CALL_OW 1
89479: ST_TO_ADDR
// tmp := 1 ;
89480: LD_ADDR_VAR 0 2
89484: PUSH
89485: LD_STRING 1
89487: ST_TO_ADDR
// end ; normal := normal & tmp ;
89488: LD_ADDR_VAR 0 3
89492: PUSH
89493: LD_VAR 0 3
89497: PUSH
89498: LD_VAR 0 2
89502: STR
89503: ST_TO_ADDR
// end ;
89504: GO 89404
89506: POP
89507: POP
// for i = 1 to hardcoreCounter do
89508: LD_ADDR_VAR 0 5
89512: PUSH
89513: DOUBLE
89514: LD_INT 1
89516: DEC
89517: ST_TO_ADDR
89518: LD_EXP 89
89522: PUSH
89523: FOR_TO
89524: IFFALSE 89629
// begin tmp := 0 ;
89526: LD_ADDR_VAR 0 2
89530: PUSH
89531: LD_STRING 0
89533: ST_TO_ADDR
// if result [ 2 ] then
89534: LD_VAR 0 1
89538: PUSH
89539: LD_INT 2
89541: ARRAY
89542: IFFALSE 89611
// if result [ 2 ] [ 1 ] = 100 + i then
89544: LD_VAR 0 1
89548: PUSH
89549: LD_INT 2
89551: ARRAY
89552: PUSH
89553: LD_INT 1
89555: ARRAY
89556: PUSH
89557: LD_INT 100
89559: PUSH
89560: LD_VAR 0 5
89564: PLUS
89565: EQUAL
89566: IFFALSE 89611
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
89568: LD_ADDR_VAR 0 1
89572: PUSH
89573: LD_VAR 0 1
89577: PPUSH
89578: LD_INT 2
89580: PPUSH
89581: LD_VAR 0 1
89585: PUSH
89586: LD_INT 2
89588: ARRAY
89589: PPUSH
89590: LD_INT 1
89592: PPUSH
89593: CALL_OW 3
89597: PPUSH
89598: CALL_OW 1
89602: ST_TO_ADDR
// tmp := 1 ;
89603: LD_ADDR_VAR 0 2
89607: PUSH
89608: LD_STRING 1
89610: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
89611: LD_ADDR_VAR 0 4
89615: PUSH
89616: LD_VAR 0 4
89620: PUSH
89621: LD_VAR 0 2
89625: STR
89626: ST_TO_ADDR
// end ;
89627: GO 89523
89629: POP
89630: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
89631: LD_STRING getStreamItemsFromMission("
89633: PUSH
89634: LD_VAR 0 3
89638: STR
89639: PUSH
89640: LD_STRING ","
89642: STR
89643: PUSH
89644: LD_VAR 0 4
89648: STR
89649: PUSH
89650: LD_STRING ")
89652: STR
89653: PPUSH
89654: CALL_OW 559
// end else
89658: GO 89667
// ToLua ( getStreamItemsFromMission("","") ) ;
89660: LD_STRING getStreamItemsFromMission("","")
89662: PPUSH
89663: CALL_OW 559
// end ;
89667: LD_VAR 0 1
89671: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
89672: LD_VAR 0 2
89676: PUSH
89677: LD_INT 100
89679: EQUAL
89680: IFFALSE 90629
// begin if not StreamModeActive then
89682: LD_EXP 87
89686: NOT
89687: IFFALSE 89697
// StreamModeActive := true ;
89689: LD_ADDR_EXP 87
89693: PUSH
89694: LD_INT 1
89696: ST_TO_ADDR
// if p3 = 0 then
89697: LD_VAR 0 3
89701: PUSH
89702: LD_INT 0
89704: EQUAL
89705: IFFALSE 89711
// InitStreamMode ;
89707: CALL 85750 0 0
// if p3 = 1 then
89711: LD_VAR 0 3
89715: PUSH
89716: LD_INT 1
89718: EQUAL
89719: IFFALSE 89729
// sRocket := true ;
89721: LD_ADDR_EXP 92
89725: PUSH
89726: LD_INT 1
89728: ST_TO_ADDR
// if p3 = 2 then
89729: LD_VAR 0 3
89733: PUSH
89734: LD_INT 2
89736: EQUAL
89737: IFFALSE 89747
// sSpeed := true ;
89739: LD_ADDR_EXP 91
89743: PUSH
89744: LD_INT 1
89746: ST_TO_ADDR
// if p3 = 3 then
89747: LD_VAR 0 3
89751: PUSH
89752: LD_INT 3
89754: EQUAL
89755: IFFALSE 89765
// sEngine := true ;
89757: LD_ADDR_EXP 93
89761: PUSH
89762: LD_INT 1
89764: ST_TO_ADDR
// if p3 = 4 then
89765: LD_VAR 0 3
89769: PUSH
89770: LD_INT 4
89772: EQUAL
89773: IFFALSE 89783
// sSpec := true ;
89775: LD_ADDR_EXP 90
89779: PUSH
89780: LD_INT 1
89782: ST_TO_ADDR
// if p3 = 5 then
89783: LD_VAR 0 3
89787: PUSH
89788: LD_INT 5
89790: EQUAL
89791: IFFALSE 89801
// sLevel := true ;
89793: LD_ADDR_EXP 94
89797: PUSH
89798: LD_INT 1
89800: ST_TO_ADDR
// if p3 = 6 then
89801: LD_VAR 0 3
89805: PUSH
89806: LD_INT 6
89808: EQUAL
89809: IFFALSE 89819
// sArmoury := true ;
89811: LD_ADDR_EXP 95
89815: PUSH
89816: LD_INT 1
89818: ST_TO_ADDR
// if p3 = 7 then
89819: LD_VAR 0 3
89823: PUSH
89824: LD_INT 7
89826: EQUAL
89827: IFFALSE 89837
// sRadar := true ;
89829: LD_ADDR_EXP 96
89833: PUSH
89834: LD_INT 1
89836: ST_TO_ADDR
// if p3 = 8 then
89837: LD_VAR 0 3
89841: PUSH
89842: LD_INT 8
89844: EQUAL
89845: IFFALSE 89855
// sBunker := true ;
89847: LD_ADDR_EXP 97
89851: PUSH
89852: LD_INT 1
89854: ST_TO_ADDR
// if p3 = 9 then
89855: LD_VAR 0 3
89859: PUSH
89860: LD_INT 9
89862: EQUAL
89863: IFFALSE 89873
// sHack := true ;
89865: LD_ADDR_EXP 98
89869: PUSH
89870: LD_INT 1
89872: ST_TO_ADDR
// if p3 = 10 then
89873: LD_VAR 0 3
89877: PUSH
89878: LD_INT 10
89880: EQUAL
89881: IFFALSE 89891
// sFire := true ;
89883: LD_ADDR_EXP 99
89887: PUSH
89888: LD_INT 1
89890: ST_TO_ADDR
// if p3 = 11 then
89891: LD_VAR 0 3
89895: PUSH
89896: LD_INT 11
89898: EQUAL
89899: IFFALSE 89909
// sRefresh := true ;
89901: LD_ADDR_EXP 100
89905: PUSH
89906: LD_INT 1
89908: ST_TO_ADDR
// if p3 = 12 then
89909: LD_VAR 0 3
89913: PUSH
89914: LD_INT 12
89916: EQUAL
89917: IFFALSE 89927
// sExp := true ;
89919: LD_ADDR_EXP 101
89923: PUSH
89924: LD_INT 1
89926: ST_TO_ADDR
// if p3 = 13 then
89927: LD_VAR 0 3
89931: PUSH
89932: LD_INT 13
89934: EQUAL
89935: IFFALSE 89945
// sDepot := true ;
89937: LD_ADDR_EXP 102
89941: PUSH
89942: LD_INT 1
89944: ST_TO_ADDR
// if p3 = 14 then
89945: LD_VAR 0 3
89949: PUSH
89950: LD_INT 14
89952: EQUAL
89953: IFFALSE 89963
// sFlag := true ;
89955: LD_ADDR_EXP 103
89959: PUSH
89960: LD_INT 1
89962: ST_TO_ADDR
// if p3 = 15 then
89963: LD_VAR 0 3
89967: PUSH
89968: LD_INT 15
89970: EQUAL
89971: IFFALSE 89981
// sKamikadze := true ;
89973: LD_ADDR_EXP 111
89977: PUSH
89978: LD_INT 1
89980: ST_TO_ADDR
// if p3 = 16 then
89981: LD_VAR 0 3
89985: PUSH
89986: LD_INT 16
89988: EQUAL
89989: IFFALSE 89999
// sTroll := true ;
89991: LD_ADDR_EXP 112
89995: PUSH
89996: LD_INT 1
89998: ST_TO_ADDR
// if p3 = 17 then
89999: LD_VAR 0 3
90003: PUSH
90004: LD_INT 17
90006: EQUAL
90007: IFFALSE 90017
// sSlow := true ;
90009: LD_ADDR_EXP 113
90013: PUSH
90014: LD_INT 1
90016: ST_TO_ADDR
// if p3 = 18 then
90017: LD_VAR 0 3
90021: PUSH
90022: LD_INT 18
90024: EQUAL
90025: IFFALSE 90035
// sLack := true ;
90027: LD_ADDR_EXP 114
90031: PUSH
90032: LD_INT 1
90034: ST_TO_ADDR
// if p3 = 19 then
90035: LD_VAR 0 3
90039: PUSH
90040: LD_INT 19
90042: EQUAL
90043: IFFALSE 90053
// sTank := true ;
90045: LD_ADDR_EXP 116
90049: PUSH
90050: LD_INT 1
90052: ST_TO_ADDR
// if p3 = 20 then
90053: LD_VAR 0 3
90057: PUSH
90058: LD_INT 20
90060: EQUAL
90061: IFFALSE 90071
// sRemote := true ;
90063: LD_ADDR_EXP 117
90067: PUSH
90068: LD_INT 1
90070: ST_TO_ADDR
// if p3 = 21 then
90071: LD_VAR 0 3
90075: PUSH
90076: LD_INT 21
90078: EQUAL
90079: IFFALSE 90089
// sPowell := true ;
90081: LD_ADDR_EXP 118
90085: PUSH
90086: LD_INT 1
90088: ST_TO_ADDR
// if p3 = 22 then
90089: LD_VAR 0 3
90093: PUSH
90094: LD_INT 22
90096: EQUAL
90097: IFFALSE 90107
// sTeleport := true ;
90099: LD_ADDR_EXP 121
90103: PUSH
90104: LD_INT 1
90106: ST_TO_ADDR
// if p3 = 23 then
90107: LD_VAR 0 3
90111: PUSH
90112: LD_INT 23
90114: EQUAL
90115: IFFALSE 90125
// sOilTower := true ;
90117: LD_ADDR_EXP 123
90121: PUSH
90122: LD_INT 1
90124: ST_TO_ADDR
// if p3 = 24 then
90125: LD_VAR 0 3
90129: PUSH
90130: LD_INT 24
90132: EQUAL
90133: IFFALSE 90143
// sShovel := true ;
90135: LD_ADDR_EXP 124
90139: PUSH
90140: LD_INT 1
90142: ST_TO_ADDR
// if p3 = 25 then
90143: LD_VAR 0 3
90147: PUSH
90148: LD_INT 25
90150: EQUAL
90151: IFFALSE 90161
// sSheik := true ;
90153: LD_ADDR_EXP 125
90157: PUSH
90158: LD_INT 1
90160: ST_TO_ADDR
// if p3 = 26 then
90161: LD_VAR 0 3
90165: PUSH
90166: LD_INT 26
90168: EQUAL
90169: IFFALSE 90179
// sEarthquake := true ;
90171: LD_ADDR_EXP 127
90175: PUSH
90176: LD_INT 1
90178: ST_TO_ADDR
// if p3 = 27 then
90179: LD_VAR 0 3
90183: PUSH
90184: LD_INT 27
90186: EQUAL
90187: IFFALSE 90197
// sAI := true ;
90189: LD_ADDR_EXP 128
90193: PUSH
90194: LD_INT 1
90196: ST_TO_ADDR
// if p3 = 28 then
90197: LD_VAR 0 3
90201: PUSH
90202: LD_INT 28
90204: EQUAL
90205: IFFALSE 90215
// sCargo := true ;
90207: LD_ADDR_EXP 131
90211: PUSH
90212: LD_INT 1
90214: ST_TO_ADDR
// if p3 = 29 then
90215: LD_VAR 0 3
90219: PUSH
90220: LD_INT 29
90222: EQUAL
90223: IFFALSE 90233
// sDLaser := true ;
90225: LD_ADDR_EXP 132
90229: PUSH
90230: LD_INT 1
90232: ST_TO_ADDR
// if p3 = 30 then
90233: LD_VAR 0 3
90237: PUSH
90238: LD_INT 30
90240: EQUAL
90241: IFFALSE 90251
// sExchange := true ;
90243: LD_ADDR_EXP 133
90247: PUSH
90248: LD_INT 1
90250: ST_TO_ADDR
// if p3 = 31 then
90251: LD_VAR 0 3
90255: PUSH
90256: LD_INT 31
90258: EQUAL
90259: IFFALSE 90269
// sFac := true ;
90261: LD_ADDR_EXP 134
90265: PUSH
90266: LD_INT 1
90268: ST_TO_ADDR
// if p3 = 32 then
90269: LD_VAR 0 3
90273: PUSH
90274: LD_INT 32
90276: EQUAL
90277: IFFALSE 90287
// sPower := true ;
90279: LD_ADDR_EXP 135
90283: PUSH
90284: LD_INT 1
90286: ST_TO_ADDR
// if p3 = 33 then
90287: LD_VAR 0 3
90291: PUSH
90292: LD_INT 33
90294: EQUAL
90295: IFFALSE 90305
// sRandom := true ;
90297: LD_ADDR_EXP 136
90301: PUSH
90302: LD_INT 1
90304: ST_TO_ADDR
// if p3 = 34 then
90305: LD_VAR 0 3
90309: PUSH
90310: LD_INT 34
90312: EQUAL
90313: IFFALSE 90323
// sShield := true ;
90315: LD_ADDR_EXP 137
90319: PUSH
90320: LD_INT 1
90322: ST_TO_ADDR
// if p3 = 35 then
90323: LD_VAR 0 3
90327: PUSH
90328: LD_INT 35
90330: EQUAL
90331: IFFALSE 90341
// sTime := true ;
90333: LD_ADDR_EXP 138
90337: PUSH
90338: LD_INT 1
90340: ST_TO_ADDR
// if p3 = 36 then
90341: LD_VAR 0 3
90345: PUSH
90346: LD_INT 36
90348: EQUAL
90349: IFFALSE 90359
// sTools := true ;
90351: LD_ADDR_EXP 139
90355: PUSH
90356: LD_INT 1
90358: ST_TO_ADDR
// if p3 = 101 then
90359: LD_VAR 0 3
90363: PUSH
90364: LD_INT 101
90366: EQUAL
90367: IFFALSE 90377
// sSold := true ;
90369: LD_ADDR_EXP 104
90373: PUSH
90374: LD_INT 1
90376: ST_TO_ADDR
// if p3 = 102 then
90377: LD_VAR 0 3
90381: PUSH
90382: LD_INT 102
90384: EQUAL
90385: IFFALSE 90395
// sDiff := true ;
90387: LD_ADDR_EXP 105
90391: PUSH
90392: LD_INT 1
90394: ST_TO_ADDR
// if p3 = 103 then
90395: LD_VAR 0 3
90399: PUSH
90400: LD_INT 103
90402: EQUAL
90403: IFFALSE 90413
// sFog := true ;
90405: LD_ADDR_EXP 108
90409: PUSH
90410: LD_INT 1
90412: ST_TO_ADDR
// if p3 = 104 then
90413: LD_VAR 0 3
90417: PUSH
90418: LD_INT 104
90420: EQUAL
90421: IFFALSE 90431
// sReset := true ;
90423: LD_ADDR_EXP 109
90427: PUSH
90428: LD_INT 1
90430: ST_TO_ADDR
// if p3 = 105 then
90431: LD_VAR 0 3
90435: PUSH
90436: LD_INT 105
90438: EQUAL
90439: IFFALSE 90449
// sSun := true ;
90441: LD_ADDR_EXP 110
90445: PUSH
90446: LD_INT 1
90448: ST_TO_ADDR
// if p3 = 106 then
90449: LD_VAR 0 3
90453: PUSH
90454: LD_INT 106
90456: EQUAL
90457: IFFALSE 90467
// sTiger := true ;
90459: LD_ADDR_EXP 106
90463: PUSH
90464: LD_INT 1
90466: ST_TO_ADDR
// if p3 = 107 then
90467: LD_VAR 0 3
90471: PUSH
90472: LD_INT 107
90474: EQUAL
90475: IFFALSE 90485
// sBomb := true ;
90477: LD_ADDR_EXP 107
90481: PUSH
90482: LD_INT 1
90484: ST_TO_ADDR
// if p3 = 108 then
90485: LD_VAR 0 3
90489: PUSH
90490: LD_INT 108
90492: EQUAL
90493: IFFALSE 90503
// sWound := true ;
90495: LD_ADDR_EXP 115
90499: PUSH
90500: LD_INT 1
90502: ST_TO_ADDR
// if p3 = 109 then
90503: LD_VAR 0 3
90507: PUSH
90508: LD_INT 109
90510: EQUAL
90511: IFFALSE 90521
// sBetray := true ;
90513: LD_ADDR_EXP 119
90517: PUSH
90518: LD_INT 1
90520: ST_TO_ADDR
// if p3 = 110 then
90521: LD_VAR 0 3
90525: PUSH
90526: LD_INT 110
90528: EQUAL
90529: IFFALSE 90539
// sContamin := true ;
90531: LD_ADDR_EXP 120
90535: PUSH
90536: LD_INT 1
90538: ST_TO_ADDR
// if p3 = 111 then
90539: LD_VAR 0 3
90543: PUSH
90544: LD_INT 111
90546: EQUAL
90547: IFFALSE 90557
// sOil := true ;
90549: LD_ADDR_EXP 122
90553: PUSH
90554: LD_INT 1
90556: ST_TO_ADDR
// if p3 = 112 then
90557: LD_VAR 0 3
90561: PUSH
90562: LD_INT 112
90564: EQUAL
90565: IFFALSE 90575
// sStu := true ;
90567: LD_ADDR_EXP 126
90571: PUSH
90572: LD_INT 1
90574: ST_TO_ADDR
// if p3 = 113 then
90575: LD_VAR 0 3
90579: PUSH
90580: LD_INT 113
90582: EQUAL
90583: IFFALSE 90593
// sBazooka := true ;
90585: LD_ADDR_EXP 129
90589: PUSH
90590: LD_INT 1
90592: ST_TO_ADDR
// if p3 = 114 then
90593: LD_VAR 0 3
90597: PUSH
90598: LD_INT 114
90600: EQUAL
90601: IFFALSE 90611
// sMortar := true ;
90603: LD_ADDR_EXP 130
90607: PUSH
90608: LD_INT 1
90610: ST_TO_ADDR
// if p3 = 115 then
90611: LD_VAR 0 3
90615: PUSH
90616: LD_INT 115
90618: EQUAL
90619: IFFALSE 90629
// sRanger := true ;
90621: LD_ADDR_EXP 140
90625: PUSH
90626: LD_INT 1
90628: ST_TO_ADDR
// end ; end ;
90629: PPOPN 6
90631: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90632: LD_EXP 87
90636: PUSH
90637: LD_EXP 92
90641: AND
90642: IFFALSE 90766
90644: GO 90646
90646: DISABLE
90647: LD_INT 0
90649: PPUSH
90650: PPUSH
// begin enable ;
90651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
90652: LD_ADDR_VAR 0 2
90656: PUSH
90657: LD_INT 22
90659: PUSH
90660: LD_OWVAR 2
90664: PUSH
90665: EMPTY
90666: LIST
90667: LIST
90668: PUSH
90669: LD_INT 2
90671: PUSH
90672: LD_INT 34
90674: PUSH
90675: LD_INT 7
90677: PUSH
90678: EMPTY
90679: LIST
90680: LIST
90681: PUSH
90682: LD_INT 34
90684: PUSH
90685: LD_INT 45
90687: PUSH
90688: EMPTY
90689: LIST
90690: LIST
90691: PUSH
90692: LD_INT 34
90694: PUSH
90695: LD_INT 28
90697: PUSH
90698: EMPTY
90699: LIST
90700: LIST
90701: PUSH
90702: LD_INT 34
90704: PUSH
90705: LD_INT 47
90707: PUSH
90708: EMPTY
90709: LIST
90710: LIST
90711: PUSH
90712: EMPTY
90713: LIST
90714: LIST
90715: LIST
90716: LIST
90717: LIST
90718: PUSH
90719: EMPTY
90720: LIST
90721: LIST
90722: PPUSH
90723: CALL_OW 69
90727: ST_TO_ADDR
// if not tmp then
90728: LD_VAR 0 2
90732: NOT
90733: IFFALSE 90737
// exit ;
90735: GO 90766
// for i in tmp do
90737: LD_ADDR_VAR 0 1
90741: PUSH
90742: LD_VAR 0 2
90746: PUSH
90747: FOR_IN
90748: IFFALSE 90764
// begin SetLives ( i , 0 ) ;
90750: LD_VAR 0 1
90754: PPUSH
90755: LD_INT 0
90757: PPUSH
90758: CALL_OW 234
// end ;
90762: GO 90747
90764: POP
90765: POP
// end ;
90766: PPOPN 2
90768: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
90769: LD_EXP 87
90773: PUSH
90774: LD_EXP 93
90778: AND
90779: IFFALSE 90863
90781: GO 90783
90783: DISABLE
90784: LD_INT 0
90786: PPUSH
90787: PPUSH
// begin enable ;
90788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
90789: LD_ADDR_VAR 0 2
90793: PUSH
90794: LD_INT 22
90796: PUSH
90797: LD_OWVAR 2
90801: PUSH
90802: EMPTY
90803: LIST
90804: LIST
90805: PUSH
90806: LD_INT 32
90808: PUSH
90809: LD_INT 3
90811: PUSH
90812: EMPTY
90813: LIST
90814: LIST
90815: PUSH
90816: EMPTY
90817: LIST
90818: LIST
90819: PPUSH
90820: CALL_OW 69
90824: ST_TO_ADDR
// if not tmp then
90825: LD_VAR 0 2
90829: NOT
90830: IFFALSE 90834
// exit ;
90832: GO 90863
// for i in tmp do
90834: LD_ADDR_VAR 0 1
90838: PUSH
90839: LD_VAR 0 2
90843: PUSH
90844: FOR_IN
90845: IFFALSE 90861
// begin SetLives ( i , 0 ) ;
90847: LD_VAR 0 1
90851: PPUSH
90852: LD_INT 0
90854: PPUSH
90855: CALL_OW 234
// end ;
90859: GO 90844
90861: POP
90862: POP
// end ;
90863: PPOPN 2
90865: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
90866: LD_EXP 87
90870: PUSH
90871: LD_EXP 90
90875: AND
90876: IFFALSE 90969
90878: GO 90880
90880: DISABLE
90881: LD_INT 0
90883: PPUSH
// begin enable ;
90884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
90885: LD_ADDR_VAR 0 1
90889: PUSH
90890: LD_INT 22
90892: PUSH
90893: LD_OWVAR 2
90897: PUSH
90898: EMPTY
90899: LIST
90900: LIST
90901: PUSH
90902: LD_INT 2
90904: PUSH
90905: LD_INT 25
90907: PUSH
90908: LD_INT 5
90910: PUSH
90911: EMPTY
90912: LIST
90913: LIST
90914: PUSH
90915: LD_INT 25
90917: PUSH
90918: LD_INT 9
90920: PUSH
90921: EMPTY
90922: LIST
90923: LIST
90924: PUSH
90925: LD_INT 25
90927: PUSH
90928: LD_INT 8
90930: PUSH
90931: EMPTY
90932: LIST
90933: LIST
90934: PUSH
90935: EMPTY
90936: LIST
90937: LIST
90938: LIST
90939: LIST
90940: PUSH
90941: EMPTY
90942: LIST
90943: LIST
90944: PPUSH
90945: CALL_OW 69
90949: PUSH
90950: FOR_IN
90951: IFFALSE 90967
// begin SetClass ( i , 1 ) ;
90953: LD_VAR 0 1
90957: PPUSH
90958: LD_INT 1
90960: PPUSH
90961: CALL_OW 336
// end ;
90965: GO 90950
90967: POP
90968: POP
// end ;
90969: PPOPN 1
90971: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
90972: LD_EXP 87
90976: PUSH
90977: LD_EXP 91
90981: AND
90982: PUSH
90983: LD_OWVAR 65
90987: PUSH
90988: LD_INT 7
90990: LESS
90991: AND
90992: IFFALSE 91006
90994: GO 90996
90996: DISABLE
// begin enable ;
90997: ENABLE
// game_speed := 7 ;
90998: LD_ADDR_OWVAR 65
91002: PUSH
91003: LD_INT 7
91005: ST_TO_ADDR
// end ;
91006: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
91007: LD_EXP 87
91011: PUSH
91012: LD_EXP 94
91016: AND
91017: IFFALSE 91219
91019: GO 91021
91021: DISABLE
91022: LD_INT 0
91024: PPUSH
91025: PPUSH
91026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
91027: LD_ADDR_VAR 0 3
91031: PUSH
91032: LD_INT 81
91034: PUSH
91035: LD_OWVAR 2
91039: PUSH
91040: EMPTY
91041: LIST
91042: LIST
91043: PUSH
91044: LD_INT 21
91046: PUSH
91047: LD_INT 1
91049: PUSH
91050: EMPTY
91051: LIST
91052: LIST
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: PPUSH
91058: CALL_OW 69
91062: ST_TO_ADDR
// if not tmp then
91063: LD_VAR 0 3
91067: NOT
91068: IFFALSE 91072
// exit ;
91070: GO 91219
// if tmp > 5 then
91072: LD_VAR 0 3
91076: PUSH
91077: LD_INT 5
91079: GREATER
91080: IFFALSE 91092
// k := 5 else
91082: LD_ADDR_VAR 0 2
91086: PUSH
91087: LD_INT 5
91089: ST_TO_ADDR
91090: GO 91102
// k := tmp ;
91092: LD_ADDR_VAR 0 2
91096: PUSH
91097: LD_VAR 0 3
91101: ST_TO_ADDR
// for i := 1 to k do
91102: LD_ADDR_VAR 0 1
91106: PUSH
91107: DOUBLE
91108: LD_INT 1
91110: DEC
91111: ST_TO_ADDR
91112: LD_VAR 0 2
91116: PUSH
91117: FOR_TO
91118: IFFALSE 91217
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91120: LD_VAR 0 3
91124: PUSH
91125: LD_VAR 0 1
91129: ARRAY
91130: PPUSH
91131: LD_VAR 0 1
91135: PUSH
91136: LD_INT 4
91138: MOD
91139: PUSH
91140: LD_INT 1
91142: PLUS
91143: PPUSH
91144: CALL_OW 259
91148: PUSH
91149: LD_INT 10
91151: LESS
91152: IFFALSE 91215
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91154: LD_VAR 0 3
91158: PUSH
91159: LD_VAR 0 1
91163: ARRAY
91164: PPUSH
91165: LD_VAR 0 1
91169: PUSH
91170: LD_INT 4
91172: MOD
91173: PUSH
91174: LD_INT 1
91176: PLUS
91177: PPUSH
91178: LD_VAR 0 3
91182: PUSH
91183: LD_VAR 0 1
91187: ARRAY
91188: PPUSH
91189: LD_VAR 0 1
91193: PUSH
91194: LD_INT 4
91196: MOD
91197: PUSH
91198: LD_INT 1
91200: PLUS
91201: PPUSH
91202: CALL_OW 259
91206: PUSH
91207: LD_INT 1
91209: PLUS
91210: PPUSH
91211: CALL_OW 237
91215: GO 91117
91217: POP
91218: POP
// end ;
91219: PPOPN 3
91221: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91222: LD_EXP 87
91226: PUSH
91227: LD_EXP 95
91231: AND
91232: IFFALSE 91252
91234: GO 91236
91236: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91237: LD_INT 4
91239: PPUSH
91240: LD_OWVAR 2
91244: PPUSH
91245: LD_INT 0
91247: PPUSH
91248: CALL_OW 324
91252: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91253: LD_EXP 87
91257: PUSH
91258: LD_EXP 124
91262: AND
91263: IFFALSE 91283
91265: GO 91267
91267: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91268: LD_INT 19
91270: PPUSH
91271: LD_OWVAR 2
91275: PPUSH
91276: LD_INT 0
91278: PPUSH
91279: CALL_OW 324
91283: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91284: LD_EXP 87
91288: PUSH
91289: LD_EXP 96
91293: AND
91294: IFFALSE 91396
91296: GO 91298
91298: DISABLE
91299: LD_INT 0
91301: PPUSH
91302: PPUSH
// begin enable ;
91303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91304: LD_ADDR_VAR 0 2
91308: PUSH
91309: LD_INT 22
91311: PUSH
91312: LD_OWVAR 2
91316: PUSH
91317: EMPTY
91318: LIST
91319: LIST
91320: PUSH
91321: LD_INT 2
91323: PUSH
91324: LD_INT 34
91326: PUSH
91327: LD_INT 11
91329: PUSH
91330: EMPTY
91331: LIST
91332: LIST
91333: PUSH
91334: LD_INT 34
91336: PUSH
91337: LD_INT 30
91339: PUSH
91340: EMPTY
91341: LIST
91342: LIST
91343: PUSH
91344: EMPTY
91345: LIST
91346: LIST
91347: LIST
91348: PUSH
91349: EMPTY
91350: LIST
91351: LIST
91352: PPUSH
91353: CALL_OW 69
91357: ST_TO_ADDR
// if not tmp then
91358: LD_VAR 0 2
91362: NOT
91363: IFFALSE 91367
// exit ;
91365: GO 91396
// for i in tmp do
91367: LD_ADDR_VAR 0 1
91371: PUSH
91372: LD_VAR 0 2
91376: PUSH
91377: FOR_IN
91378: IFFALSE 91394
// begin SetLives ( i , 0 ) ;
91380: LD_VAR 0 1
91384: PPUSH
91385: LD_INT 0
91387: PPUSH
91388: CALL_OW 234
// end ;
91392: GO 91377
91394: POP
91395: POP
// end ;
91396: PPOPN 2
91398: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91399: LD_EXP 87
91403: PUSH
91404: LD_EXP 97
91408: AND
91409: IFFALSE 91429
91411: GO 91413
91413: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91414: LD_INT 32
91416: PPUSH
91417: LD_OWVAR 2
91421: PPUSH
91422: LD_INT 0
91424: PPUSH
91425: CALL_OW 324
91429: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91430: LD_EXP 87
91434: PUSH
91435: LD_EXP 98
91439: AND
91440: IFFALSE 91621
91442: GO 91444
91444: DISABLE
91445: LD_INT 0
91447: PPUSH
91448: PPUSH
91449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91450: LD_ADDR_VAR 0 2
91454: PUSH
91455: LD_INT 22
91457: PUSH
91458: LD_OWVAR 2
91462: PUSH
91463: EMPTY
91464: LIST
91465: LIST
91466: PUSH
91467: LD_INT 33
91469: PUSH
91470: LD_INT 3
91472: PUSH
91473: EMPTY
91474: LIST
91475: LIST
91476: PUSH
91477: EMPTY
91478: LIST
91479: LIST
91480: PPUSH
91481: CALL_OW 69
91485: ST_TO_ADDR
// if not tmp then
91486: LD_VAR 0 2
91490: NOT
91491: IFFALSE 91495
// exit ;
91493: GO 91621
// side := 0 ;
91495: LD_ADDR_VAR 0 3
91499: PUSH
91500: LD_INT 0
91502: ST_TO_ADDR
// for i := 1 to 8 do
91503: LD_ADDR_VAR 0 1
91507: PUSH
91508: DOUBLE
91509: LD_INT 1
91511: DEC
91512: ST_TO_ADDR
91513: LD_INT 8
91515: PUSH
91516: FOR_TO
91517: IFFALSE 91565
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91519: LD_OWVAR 2
91523: PUSH
91524: LD_VAR 0 1
91528: NONEQUAL
91529: PUSH
91530: LD_OWVAR 2
91534: PPUSH
91535: LD_VAR 0 1
91539: PPUSH
91540: CALL_OW 81
91544: PUSH
91545: LD_INT 2
91547: EQUAL
91548: AND
91549: IFFALSE 91563
// begin side := i ;
91551: LD_ADDR_VAR 0 3
91555: PUSH
91556: LD_VAR 0 1
91560: ST_TO_ADDR
// break ;
91561: GO 91565
// end ;
91563: GO 91516
91565: POP
91566: POP
// if not side then
91567: LD_VAR 0 3
91571: NOT
91572: IFFALSE 91576
// exit ;
91574: GO 91621
// for i := 1 to tmp do
91576: LD_ADDR_VAR 0 1
91580: PUSH
91581: DOUBLE
91582: LD_INT 1
91584: DEC
91585: ST_TO_ADDR
91586: LD_VAR 0 2
91590: PUSH
91591: FOR_TO
91592: IFFALSE 91619
// if Prob ( 60 ) then
91594: LD_INT 60
91596: PPUSH
91597: CALL_OW 13
91601: IFFALSE 91617
// SetSide ( i , side ) ;
91603: LD_VAR 0 1
91607: PPUSH
91608: LD_VAR 0 3
91612: PPUSH
91613: CALL_OW 235
91617: GO 91591
91619: POP
91620: POP
// end ;
91621: PPOPN 3
91623: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91624: LD_EXP 87
91628: PUSH
91629: LD_EXP 100
91633: AND
91634: IFFALSE 91753
91636: GO 91638
91638: DISABLE
91639: LD_INT 0
91641: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91642: LD_ADDR_VAR 0 1
91646: PUSH
91647: LD_INT 22
91649: PUSH
91650: LD_OWVAR 2
91654: PUSH
91655: EMPTY
91656: LIST
91657: LIST
91658: PUSH
91659: LD_INT 21
91661: PUSH
91662: LD_INT 1
91664: PUSH
91665: EMPTY
91666: LIST
91667: LIST
91668: PUSH
91669: LD_INT 3
91671: PUSH
91672: LD_INT 23
91674: PUSH
91675: LD_INT 0
91677: PUSH
91678: EMPTY
91679: LIST
91680: LIST
91681: PUSH
91682: EMPTY
91683: LIST
91684: LIST
91685: PUSH
91686: EMPTY
91687: LIST
91688: LIST
91689: LIST
91690: PPUSH
91691: CALL_OW 69
91695: PUSH
91696: FOR_IN
91697: IFFALSE 91751
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
91699: LD_VAR 0 1
91703: PPUSH
91704: CALL_OW 257
91708: PUSH
91709: LD_INT 1
91711: PUSH
91712: LD_INT 2
91714: PUSH
91715: LD_INT 3
91717: PUSH
91718: LD_INT 4
91720: PUSH
91721: EMPTY
91722: LIST
91723: LIST
91724: LIST
91725: LIST
91726: IN
91727: IFFALSE 91749
// SetClass ( un , rand ( 1 , 4 ) ) ;
91729: LD_VAR 0 1
91733: PPUSH
91734: LD_INT 1
91736: PPUSH
91737: LD_INT 4
91739: PPUSH
91740: CALL_OW 12
91744: PPUSH
91745: CALL_OW 336
91749: GO 91696
91751: POP
91752: POP
// end ;
91753: PPOPN 1
91755: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
91756: LD_EXP 87
91760: PUSH
91761: LD_EXP 99
91765: AND
91766: IFFALSE 91845
91768: GO 91770
91770: DISABLE
91771: LD_INT 0
91773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91774: LD_ADDR_VAR 0 1
91778: PUSH
91779: LD_INT 22
91781: PUSH
91782: LD_OWVAR 2
91786: PUSH
91787: EMPTY
91788: LIST
91789: LIST
91790: PUSH
91791: LD_INT 21
91793: PUSH
91794: LD_INT 3
91796: PUSH
91797: EMPTY
91798: LIST
91799: LIST
91800: PUSH
91801: EMPTY
91802: LIST
91803: LIST
91804: PPUSH
91805: CALL_OW 69
91809: ST_TO_ADDR
// if not tmp then
91810: LD_VAR 0 1
91814: NOT
91815: IFFALSE 91819
// exit ;
91817: GO 91845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
91819: LD_VAR 0 1
91823: PUSH
91824: LD_INT 1
91826: PPUSH
91827: LD_VAR 0 1
91831: PPUSH
91832: CALL_OW 12
91836: ARRAY
91837: PPUSH
91838: LD_INT 100
91840: PPUSH
91841: CALL_OW 234
// end ;
91845: PPOPN 1
91847: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
91848: LD_EXP 87
91852: PUSH
91853: LD_EXP 101
91857: AND
91858: IFFALSE 91956
91860: GO 91862
91862: DISABLE
91863: LD_INT 0
91865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91866: LD_ADDR_VAR 0 1
91870: PUSH
91871: LD_INT 22
91873: PUSH
91874: LD_OWVAR 2
91878: PUSH
91879: EMPTY
91880: LIST
91881: LIST
91882: PUSH
91883: LD_INT 21
91885: PUSH
91886: LD_INT 1
91888: PUSH
91889: EMPTY
91890: LIST
91891: LIST
91892: PUSH
91893: EMPTY
91894: LIST
91895: LIST
91896: PPUSH
91897: CALL_OW 69
91901: ST_TO_ADDR
// if not tmp then
91902: LD_VAR 0 1
91906: NOT
91907: IFFALSE 91911
// exit ;
91909: GO 91956
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
91911: LD_VAR 0 1
91915: PUSH
91916: LD_INT 1
91918: PPUSH
91919: LD_VAR 0 1
91923: PPUSH
91924: CALL_OW 12
91928: ARRAY
91929: PPUSH
91930: LD_INT 1
91932: PPUSH
91933: LD_INT 4
91935: PPUSH
91936: CALL_OW 12
91940: PPUSH
91941: LD_INT 3000
91943: PPUSH
91944: LD_INT 9000
91946: PPUSH
91947: CALL_OW 12
91951: PPUSH
91952: CALL_OW 492
// end ;
91956: PPOPN 1
91958: END
// every 0 0$1 trigger StreamModeActive and sDepot do
91959: LD_EXP 87
91963: PUSH
91964: LD_EXP 102
91968: AND
91969: IFFALSE 91989
91971: GO 91973
91973: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
91974: LD_INT 1
91976: PPUSH
91977: LD_OWVAR 2
91981: PPUSH
91982: LD_INT 0
91984: PPUSH
91985: CALL_OW 324
91989: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
91990: LD_EXP 87
91994: PUSH
91995: LD_EXP 103
91999: AND
92000: IFFALSE 92083
92002: GO 92004
92004: DISABLE
92005: LD_INT 0
92007: PPUSH
92008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92009: LD_ADDR_VAR 0 2
92013: PUSH
92014: LD_INT 22
92016: PUSH
92017: LD_OWVAR 2
92021: PUSH
92022: EMPTY
92023: LIST
92024: LIST
92025: PUSH
92026: LD_INT 21
92028: PUSH
92029: LD_INT 3
92031: PUSH
92032: EMPTY
92033: LIST
92034: LIST
92035: PUSH
92036: EMPTY
92037: LIST
92038: LIST
92039: PPUSH
92040: CALL_OW 69
92044: ST_TO_ADDR
// if not tmp then
92045: LD_VAR 0 2
92049: NOT
92050: IFFALSE 92054
// exit ;
92052: GO 92083
// for i in tmp do
92054: LD_ADDR_VAR 0 1
92058: PUSH
92059: LD_VAR 0 2
92063: PUSH
92064: FOR_IN
92065: IFFALSE 92081
// SetBLevel ( i , 10 ) ;
92067: LD_VAR 0 1
92071: PPUSH
92072: LD_INT 10
92074: PPUSH
92075: CALL_OW 241
92079: GO 92064
92081: POP
92082: POP
// end ;
92083: PPOPN 2
92085: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92086: LD_EXP 87
92090: PUSH
92091: LD_EXP 104
92095: AND
92096: IFFALSE 92207
92098: GO 92100
92100: DISABLE
92101: LD_INT 0
92103: PPUSH
92104: PPUSH
92105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92106: LD_ADDR_VAR 0 3
92110: PUSH
92111: LD_INT 22
92113: PUSH
92114: LD_OWVAR 2
92118: PUSH
92119: EMPTY
92120: LIST
92121: LIST
92122: PUSH
92123: LD_INT 25
92125: PUSH
92126: LD_INT 1
92128: PUSH
92129: EMPTY
92130: LIST
92131: LIST
92132: PUSH
92133: EMPTY
92134: LIST
92135: LIST
92136: PPUSH
92137: CALL_OW 69
92141: ST_TO_ADDR
// if not tmp then
92142: LD_VAR 0 3
92146: NOT
92147: IFFALSE 92151
// exit ;
92149: GO 92207
// un := tmp [ rand ( 1 , tmp ) ] ;
92151: LD_ADDR_VAR 0 2
92155: PUSH
92156: LD_VAR 0 3
92160: PUSH
92161: LD_INT 1
92163: PPUSH
92164: LD_VAR 0 3
92168: PPUSH
92169: CALL_OW 12
92173: ARRAY
92174: ST_TO_ADDR
// if Crawls ( un ) then
92175: LD_VAR 0 2
92179: PPUSH
92180: CALL_OW 318
92184: IFFALSE 92195
// ComWalk ( un ) ;
92186: LD_VAR 0 2
92190: PPUSH
92191: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92195: LD_VAR 0 2
92199: PPUSH
92200: LD_INT 5
92202: PPUSH
92203: CALL_OW 336
// end ;
92207: PPOPN 3
92209: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92210: LD_EXP 87
92214: PUSH
92215: LD_EXP 105
92219: AND
92220: PUSH
92221: LD_OWVAR 67
92225: PUSH
92226: LD_INT 3
92228: LESS
92229: AND
92230: IFFALSE 92249
92232: GO 92234
92234: DISABLE
// Difficulty := Difficulty + 1 ;
92235: LD_ADDR_OWVAR 67
92239: PUSH
92240: LD_OWVAR 67
92244: PUSH
92245: LD_INT 1
92247: PLUS
92248: ST_TO_ADDR
92249: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92250: LD_EXP 87
92254: PUSH
92255: LD_EXP 106
92259: AND
92260: IFFALSE 92363
92262: GO 92264
92264: DISABLE
92265: LD_INT 0
92267: PPUSH
// begin for i := 1 to 5 do
92268: LD_ADDR_VAR 0 1
92272: PUSH
92273: DOUBLE
92274: LD_INT 1
92276: DEC
92277: ST_TO_ADDR
92278: LD_INT 5
92280: PUSH
92281: FOR_TO
92282: IFFALSE 92361
// begin uc_nation := nation_nature ;
92284: LD_ADDR_OWVAR 21
92288: PUSH
92289: LD_INT 0
92291: ST_TO_ADDR
// uc_side := 0 ;
92292: LD_ADDR_OWVAR 20
92296: PUSH
92297: LD_INT 0
92299: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92300: LD_ADDR_OWVAR 29
92304: PUSH
92305: LD_INT 12
92307: PUSH
92308: LD_INT 12
92310: PUSH
92311: EMPTY
92312: LIST
92313: LIST
92314: ST_TO_ADDR
// hc_agressivity := 20 ;
92315: LD_ADDR_OWVAR 35
92319: PUSH
92320: LD_INT 20
92322: ST_TO_ADDR
// hc_class := class_tiger ;
92323: LD_ADDR_OWVAR 28
92327: PUSH
92328: LD_INT 14
92330: ST_TO_ADDR
// hc_gallery :=  ;
92331: LD_ADDR_OWVAR 33
92335: PUSH
92336: LD_STRING 
92338: ST_TO_ADDR
// hc_name :=  ;
92339: LD_ADDR_OWVAR 26
92343: PUSH
92344: LD_STRING 
92346: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92347: CALL_OW 44
92351: PPUSH
92352: LD_INT 0
92354: PPUSH
92355: CALL_OW 51
// end ;
92359: GO 92281
92361: POP
92362: POP
// end ;
92363: PPOPN 1
92365: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92366: LD_EXP 87
92370: PUSH
92371: LD_EXP 107
92375: AND
92376: IFFALSE 92385
92378: GO 92380
92380: DISABLE
// StreamSibBomb ;
92381: CALL 92386 0 0
92385: END
// export function StreamSibBomb ; var i , x , y ; begin
92386: LD_INT 0
92388: PPUSH
92389: PPUSH
92390: PPUSH
92391: PPUSH
// result := false ;
92392: LD_ADDR_VAR 0 1
92396: PUSH
92397: LD_INT 0
92399: ST_TO_ADDR
// for i := 1 to 16 do
92400: LD_ADDR_VAR 0 2
92404: PUSH
92405: DOUBLE
92406: LD_INT 1
92408: DEC
92409: ST_TO_ADDR
92410: LD_INT 16
92412: PUSH
92413: FOR_TO
92414: IFFALSE 92613
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92416: LD_ADDR_VAR 0 3
92420: PUSH
92421: LD_INT 10
92423: PUSH
92424: LD_INT 20
92426: PUSH
92427: LD_INT 30
92429: PUSH
92430: LD_INT 40
92432: PUSH
92433: LD_INT 50
92435: PUSH
92436: LD_INT 60
92438: PUSH
92439: LD_INT 70
92441: PUSH
92442: LD_INT 80
92444: PUSH
92445: LD_INT 90
92447: PUSH
92448: LD_INT 100
92450: PUSH
92451: LD_INT 110
92453: PUSH
92454: LD_INT 120
92456: PUSH
92457: LD_INT 130
92459: PUSH
92460: LD_INT 140
92462: PUSH
92463: LD_INT 150
92465: PUSH
92466: EMPTY
92467: LIST
92468: LIST
92469: LIST
92470: LIST
92471: LIST
92472: LIST
92473: LIST
92474: LIST
92475: LIST
92476: LIST
92477: LIST
92478: LIST
92479: LIST
92480: LIST
92481: LIST
92482: PUSH
92483: LD_INT 1
92485: PPUSH
92486: LD_INT 15
92488: PPUSH
92489: CALL_OW 12
92493: ARRAY
92494: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92495: LD_ADDR_VAR 0 4
92499: PUSH
92500: LD_INT 10
92502: PUSH
92503: LD_INT 20
92505: PUSH
92506: LD_INT 30
92508: PUSH
92509: LD_INT 40
92511: PUSH
92512: LD_INT 50
92514: PUSH
92515: LD_INT 60
92517: PUSH
92518: LD_INT 70
92520: PUSH
92521: LD_INT 80
92523: PUSH
92524: LD_INT 90
92526: PUSH
92527: LD_INT 100
92529: PUSH
92530: LD_INT 110
92532: PUSH
92533: LD_INT 120
92535: PUSH
92536: LD_INT 130
92538: PUSH
92539: LD_INT 140
92541: PUSH
92542: LD_INT 150
92544: PUSH
92545: EMPTY
92546: LIST
92547: LIST
92548: LIST
92549: LIST
92550: LIST
92551: LIST
92552: LIST
92553: LIST
92554: LIST
92555: LIST
92556: LIST
92557: LIST
92558: LIST
92559: LIST
92560: LIST
92561: PUSH
92562: LD_INT 1
92564: PPUSH
92565: LD_INT 15
92567: PPUSH
92568: CALL_OW 12
92572: ARRAY
92573: ST_TO_ADDR
// if ValidHex ( x , y ) then
92574: LD_VAR 0 3
92578: PPUSH
92579: LD_VAR 0 4
92583: PPUSH
92584: CALL_OW 488
92588: IFFALSE 92611
// begin result := [ x , y ] ;
92590: LD_ADDR_VAR 0 1
92594: PUSH
92595: LD_VAR 0 3
92599: PUSH
92600: LD_VAR 0 4
92604: PUSH
92605: EMPTY
92606: LIST
92607: LIST
92608: ST_TO_ADDR
// break ;
92609: GO 92613
// end ; end ;
92611: GO 92413
92613: POP
92614: POP
// if result then
92615: LD_VAR 0 1
92619: IFFALSE 92679
// begin ToLua ( playSibBomb() ) ;
92621: LD_STRING playSibBomb()
92623: PPUSH
92624: CALL_OW 559
// wait ( 0 0$14 ) ;
92628: LD_INT 490
92630: PPUSH
92631: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92635: LD_VAR 0 1
92639: PUSH
92640: LD_INT 1
92642: ARRAY
92643: PPUSH
92644: LD_VAR 0 1
92648: PUSH
92649: LD_INT 2
92651: ARRAY
92652: PPUSH
92653: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
92657: LD_VAR 0 1
92661: PUSH
92662: LD_INT 1
92664: ARRAY
92665: PPUSH
92666: LD_VAR 0 1
92670: PUSH
92671: LD_INT 2
92673: ARRAY
92674: PPUSH
92675: CALL_OW 429
// end ; end ;
92679: LD_VAR 0 1
92683: RET
// every 0 0$1 trigger StreamModeActive and sReset do
92684: LD_EXP 87
92688: PUSH
92689: LD_EXP 109
92693: AND
92694: IFFALSE 92706
92696: GO 92698
92698: DISABLE
// YouLost (  ) ;
92699: LD_STRING 
92701: PPUSH
92702: CALL_OW 104
92706: END
// every 0 0$1 trigger StreamModeActive and sFog do
92707: LD_EXP 87
92711: PUSH
92712: LD_EXP 108
92716: AND
92717: IFFALSE 92731
92719: GO 92721
92721: DISABLE
// FogOff ( your_side ) ;
92722: LD_OWVAR 2
92726: PPUSH
92727: CALL_OW 344
92731: END
// every 0 0$1 trigger StreamModeActive and sSun do
92732: LD_EXP 87
92736: PUSH
92737: LD_EXP 110
92741: AND
92742: IFFALSE 92770
92744: GO 92746
92746: DISABLE
// begin solar_recharge_percent := 0 ;
92747: LD_ADDR_OWVAR 79
92751: PUSH
92752: LD_INT 0
92754: ST_TO_ADDR
// wait ( 5 5$00 ) ;
92755: LD_INT 10500
92757: PPUSH
92758: CALL_OW 67
// solar_recharge_percent := 100 ;
92762: LD_ADDR_OWVAR 79
92766: PUSH
92767: LD_INT 100
92769: ST_TO_ADDR
// end ;
92770: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
92771: LD_EXP 87
92775: PUSH
92776: LD_EXP 111
92780: AND
92781: IFFALSE 93020
92783: GO 92785
92785: DISABLE
92786: LD_INT 0
92788: PPUSH
92789: PPUSH
92790: PPUSH
// begin tmp := [ ] ;
92791: LD_ADDR_VAR 0 3
92795: PUSH
92796: EMPTY
92797: ST_TO_ADDR
// for i := 1 to 6 do
92798: LD_ADDR_VAR 0 1
92802: PUSH
92803: DOUBLE
92804: LD_INT 1
92806: DEC
92807: ST_TO_ADDR
92808: LD_INT 6
92810: PUSH
92811: FOR_TO
92812: IFFALSE 92917
// begin uc_nation := nation_nature ;
92814: LD_ADDR_OWVAR 21
92818: PUSH
92819: LD_INT 0
92821: ST_TO_ADDR
// uc_side := 0 ;
92822: LD_ADDR_OWVAR 20
92826: PUSH
92827: LD_INT 0
92829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92830: LD_ADDR_OWVAR 29
92834: PUSH
92835: LD_INT 12
92837: PUSH
92838: LD_INT 12
92840: PUSH
92841: EMPTY
92842: LIST
92843: LIST
92844: ST_TO_ADDR
// hc_agressivity := 20 ;
92845: LD_ADDR_OWVAR 35
92849: PUSH
92850: LD_INT 20
92852: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
92853: LD_ADDR_OWVAR 28
92857: PUSH
92858: LD_INT 17
92860: ST_TO_ADDR
// hc_gallery :=  ;
92861: LD_ADDR_OWVAR 33
92865: PUSH
92866: LD_STRING 
92868: ST_TO_ADDR
// hc_name :=  ;
92869: LD_ADDR_OWVAR 26
92873: PUSH
92874: LD_STRING 
92876: ST_TO_ADDR
// un := CreateHuman ;
92877: LD_ADDR_VAR 0 2
92881: PUSH
92882: CALL_OW 44
92886: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
92887: LD_VAR 0 2
92891: PPUSH
92892: LD_INT 1
92894: PPUSH
92895: CALL_OW 51
// tmp := tmp ^ un ;
92899: LD_ADDR_VAR 0 3
92903: PUSH
92904: LD_VAR 0 3
92908: PUSH
92909: LD_VAR 0 2
92913: ADD
92914: ST_TO_ADDR
// end ;
92915: GO 92811
92917: POP
92918: POP
// repeat wait ( 0 0$1 ) ;
92919: LD_INT 35
92921: PPUSH
92922: CALL_OW 67
// for un in tmp do
92926: LD_ADDR_VAR 0 2
92930: PUSH
92931: LD_VAR 0 3
92935: PUSH
92936: FOR_IN
92937: IFFALSE 93011
// begin if IsDead ( un ) then
92939: LD_VAR 0 2
92943: PPUSH
92944: CALL_OW 301
92948: IFFALSE 92968
// begin tmp := tmp diff un ;
92950: LD_ADDR_VAR 0 3
92954: PUSH
92955: LD_VAR 0 3
92959: PUSH
92960: LD_VAR 0 2
92964: DIFF
92965: ST_TO_ADDR
// continue ;
92966: GO 92936
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
92968: LD_VAR 0 2
92972: PPUSH
92973: LD_INT 3
92975: PUSH
92976: LD_INT 22
92978: PUSH
92979: LD_INT 0
92981: PUSH
92982: EMPTY
92983: LIST
92984: LIST
92985: PUSH
92986: EMPTY
92987: LIST
92988: LIST
92989: PPUSH
92990: CALL_OW 69
92994: PPUSH
92995: LD_VAR 0 2
92999: PPUSH
93000: CALL_OW 74
93004: PPUSH
93005: CALL_OW 115
// end ;
93009: GO 92936
93011: POP
93012: POP
// until not tmp ;
93013: LD_VAR 0 3
93017: NOT
93018: IFFALSE 92919
// end ;
93020: PPOPN 3
93022: END
// every 0 0$1 trigger StreamModeActive and sTroll do
93023: LD_EXP 87
93027: PUSH
93028: LD_EXP 112
93032: AND
93033: IFFALSE 93087
93035: GO 93037
93037: DISABLE
// begin ToLua ( displayTroll(); ) ;
93038: LD_STRING displayTroll();
93040: PPUSH
93041: CALL_OW 559
// wait ( 3 3$00 ) ;
93045: LD_INT 6300
93047: PPUSH
93048: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93052: LD_STRING hideTroll();
93054: PPUSH
93055: CALL_OW 559
// wait ( 1 1$00 ) ;
93059: LD_INT 2100
93061: PPUSH
93062: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93066: LD_STRING displayTroll();
93068: PPUSH
93069: CALL_OW 559
// wait ( 1 1$00 ) ;
93073: LD_INT 2100
93075: PPUSH
93076: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93080: LD_STRING hideTroll();
93082: PPUSH
93083: CALL_OW 559
// end ;
93087: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93088: LD_EXP 87
93092: PUSH
93093: LD_EXP 113
93097: AND
93098: IFFALSE 93161
93100: GO 93102
93102: DISABLE
93103: LD_INT 0
93105: PPUSH
// begin p := 0 ;
93106: LD_ADDR_VAR 0 1
93110: PUSH
93111: LD_INT 0
93113: ST_TO_ADDR
// repeat game_speed := 1 ;
93114: LD_ADDR_OWVAR 65
93118: PUSH
93119: LD_INT 1
93121: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93122: LD_INT 35
93124: PPUSH
93125: CALL_OW 67
// p := p + 1 ;
93129: LD_ADDR_VAR 0 1
93133: PUSH
93134: LD_VAR 0 1
93138: PUSH
93139: LD_INT 1
93141: PLUS
93142: ST_TO_ADDR
// until p >= 60 ;
93143: LD_VAR 0 1
93147: PUSH
93148: LD_INT 60
93150: GREATEREQUAL
93151: IFFALSE 93114
// game_speed := 4 ;
93153: LD_ADDR_OWVAR 65
93157: PUSH
93158: LD_INT 4
93160: ST_TO_ADDR
// end ;
93161: PPOPN 1
93163: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93164: LD_EXP 87
93168: PUSH
93169: LD_EXP 114
93173: AND
93174: IFFALSE 93320
93176: GO 93178
93178: DISABLE
93179: LD_INT 0
93181: PPUSH
93182: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93183: LD_ADDR_VAR 0 1
93187: PUSH
93188: LD_INT 22
93190: PUSH
93191: LD_OWVAR 2
93195: PUSH
93196: EMPTY
93197: LIST
93198: LIST
93199: PUSH
93200: LD_INT 2
93202: PUSH
93203: LD_INT 30
93205: PUSH
93206: LD_INT 0
93208: PUSH
93209: EMPTY
93210: LIST
93211: LIST
93212: PUSH
93213: LD_INT 30
93215: PUSH
93216: LD_INT 1
93218: PUSH
93219: EMPTY
93220: LIST
93221: LIST
93222: PUSH
93223: EMPTY
93224: LIST
93225: LIST
93226: LIST
93227: PUSH
93228: EMPTY
93229: LIST
93230: LIST
93231: PPUSH
93232: CALL_OW 69
93236: ST_TO_ADDR
// if not depot then
93237: LD_VAR 0 1
93241: NOT
93242: IFFALSE 93246
// exit ;
93244: GO 93320
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93246: LD_ADDR_VAR 0 2
93250: PUSH
93251: LD_VAR 0 1
93255: PUSH
93256: LD_INT 1
93258: PPUSH
93259: LD_VAR 0 1
93263: PPUSH
93264: CALL_OW 12
93268: ARRAY
93269: PPUSH
93270: CALL_OW 274
93274: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93275: LD_VAR 0 2
93279: PPUSH
93280: LD_INT 1
93282: PPUSH
93283: LD_INT 0
93285: PPUSH
93286: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93290: LD_VAR 0 2
93294: PPUSH
93295: LD_INT 2
93297: PPUSH
93298: LD_INT 0
93300: PPUSH
93301: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93305: LD_VAR 0 2
93309: PPUSH
93310: LD_INT 3
93312: PPUSH
93313: LD_INT 0
93315: PPUSH
93316: CALL_OW 277
// end ;
93320: PPOPN 2
93322: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93323: LD_EXP 87
93327: PUSH
93328: LD_EXP 115
93332: AND
93333: IFFALSE 93430
93335: GO 93337
93337: DISABLE
93338: LD_INT 0
93340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93341: LD_ADDR_VAR 0 1
93345: PUSH
93346: LD_INT 22
93348: PUSH
93349: LD_OWVAR 2
93353: PUSH
93354: EMPTY
93355: LIST
93356: LIST
93357: PUSH
93358: LD_INT 21
93360: PUSH
93361: LD_INT 1
93363: PUSH
93364: EMPTY
93365: LIST
93366: LIST
93367: PUSH
93368: LD_INT 3
93370: PUSH
93371: LD_INT 23
93373: PUSH
93374: LD_INT 0
93376: PUSH
93377: EMPTY
93378: LIST
93379: LIST
93380: PUSH
93381: EMPTY
93382: LIST
93383: LIST
93384: PUSH
93385: EMPTY
93386: LIST
93387: LIST
93388: LIST
93389: PPUSH
93390: CALL_OW 69
93394: ST_TO_ADDR
// if not tmp then
93395: LD_VAR 0 1
93399: NOT
93400: IFFALSE 93404
// exit ;
93402: GO 93430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93404: LD_VAR 0 1
93408: PUSH
93409: LD_INT 1
93411: PPUSH
93412: LD_VAR 0 1
93416: PPUSH
93417: CALL_OW 12
93421: ARRAY
93422: PPUSH
93423: LD_INT 200
93425: PPUSH
93426: CALL_OW 234
// end ;
93430: PPOPN 1
93432: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93433: LD_EXP 87
93437: PUSH
93438: LD_EXP 116
93442: AND
93443: IFFALSE 93522
93445: GO 93447
93447: DISABLE
93448: LD_INT 0
93450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93451: LD_ADDR_VAR 0 1
93455: PUSH
93456: LD_INT 22
93458: PUSH
93459: LD_OWVAR 2
93463: PUSH
93464: EMPTY
93465: LIST
93466: LIST
93467: PUSH
93468: LD_INT 21
93470: PUSH
93471: LD_INT 2
93473: PUSH
93474: EMPTY
93475: LIST
93476: LIST
93477: PUSH
93478: EMPTY
93479: LIST
93480: LIST
93481: PPUSH
93482: CALL_OW 69
93486: ST_TO_ADDR
// if not tmp then
93487: LD_VAR 0 1
93491: NOT
93492: IFFALSE 93496
// exit ;
93494: GO 93522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93496: LD_VAR 0 1
93500: PUSH
93501: LD_INT 1
93503: PPUSH
93504: LD_VAR 0 1
93508: PPUSH
93509: CALL_OW 12
93513: ARRAY
93514: PPUSH
93515: LD_INT 60
93517: PPUSH
93518: CALL_OW 234
// end ;
93522: PPOPN 1
93524: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93525: LD_EXP 87
93529: PUSH
93530: LD_EXP 117
93534: AND
93535: IFFALSE 93634
93537: GO 93539
93539: DISABLE
93540: LD_INT 0
93542: PPUSH
93543: PPUSH
// begin enable ;
93544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93545: LD_ADDR_VAR 0 1
93549: PUSH
93550: LD_INT 22
93552: PUSH
93553: LD_OWVAR 2
93557: PUSH
93558: EMPTY
93559: LIST
93560: LIST
93561: PUSH
93562: LD_INT 61
93564: PUSH
93565: EMPTY
93566: LIST
93567: PUSH
93568: LD_INT 33
93570: PUSH
93571: LD_INT 2
93573: PUSH
93574: EMPTY
93575: LIST
93576: LIST
93577: PUSH
93578: EMPTY
93579: LIST
93580: LIST
93581: LIST
93582: PPUSH
93583: CALL_OW 69
93587: ST_TO_ADDR
// if not tmp then
93588: LD_VAR 0 1
93592: NOT
93593: IFFALSE 93597
// exit ;
93595: GO 93634
// for i in tmp do
93597: LD_ADDR_VAR 0 2
93601: PUSH
93602: LD_VAR 0 1
93606: PUSH
93607: FOR_IN
93608: IFFALSE 93632
// if IsControledBy ( i ) then
93610: LD_VAR 0 2
93614: PPUSH
93615: CALL_OW 312
93619: IFFALSE 93630
// ComUnlink ( i ) ;
93621: LD_VAR 0 2
93625: PPUSH
93626: CALL_OW 136
93630: GO 93607
93632: POP
93633: POP
// end ;
93634: PPOPN 2
93636: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93637: LD_EXP 87
93641: PUSH
93642: LD_EXP 118
93646: AND
93647: IFFALSE 93787
93649: GO 93651
93651: DISABLE
93652: LD_INT 0
93654: PPUSH
93655: PPUSH
// begin ToLua ( displayPowell(); ) ;
93656: LD_STRING displayPowell();
93658: PPUSH
93659: CALL_OW 559
// uc_side := 0 ;
93663: LD_ADDR_OWVAR 20
93667: PUSH
93668: LD_INT 0
93670: ST_TO_ADDR
// uc_nation := 2 ;
93671: LD_ADDR_OWVAR 21
93675: PUSH
93676: LD_INT 2
93678: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
93679: LD_ADDR_OWVAR 37
93683: PUSH
93684: LD_INT 14
93686: ST_TO_ADDR
// vc_engine := engine_siberite ;
93687: LD_ADDR_OWVAR 39
93691: PUSH
93692: LD_INT 3
93694: ST_TO_ADDR
// vc_control := control_apeman ;
93695: LD_ADDR_OWVAR 38
93699: PUSH
93700: LD_INT 5
93702: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
93703: LD_ADDR_OWVAR 40
93707: PUSH
93708: LD_INT 29
93710: ST_TO_ADDR
// un := CreateVehicle ;
93711: LD_ADDR_VAR 0 2
93715: PUSH
93716: CALL_OW 45
93720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93721: LD_VAR 0 2
93725: PPUSH
93726: LD_INT 1
93728: PPUSH
93729: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93733: LD_INT 35
93735: PPUSH
93736: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93740: LD_VAR 0 2
93744: PPUSH
93745: LD_INT 22
93747: PUSH
93748: LD_OWVAR 2
93752: PUSH
93753: EMPTY
93754: LIST
93755: LIST
93756: PPUSH
93757: CALL_OW 69
93761: PPUSH
93762: LD_VAR 0 2
93766: PPUSH
93767: CALL_OW 74
93771: PPUSH
93772: CALL_OW 115
// until IsDead ( un ) ;
93776: LD_VAR 0 2
93780: PPUSH
93781: CALL_OW 301
93785: IFFALSE 93733
// end ;
93787: PPOPN 2
93789: END
// every 0 0$1 trigger StreamModeActive and sStu do
93790: LD_EXP 87
93794: PUSH
93795: LD_EXP 126
93799: AND
93800: IFFALSE 93816
93802: GO 93804
93804: DISABLE
// begin ToLua ( displayStucuk(); ) ;
93805: LD_STRING displayStucuk();
93807: PPUSH
93808: CALL_OW 559
// ResetFog ;
93812: CALL_OW 335
// end ;
93816: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
93817: LD_EXP 87
93821: PUSH
93822: LD_EXP 119
93826: AND
93827: IFFALSE 93968
93829: GO 93831
93831: DISABLE
93832: LD_INT 0
93834: PPUSH
93835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93836: LD_ADDR_VAR 0 2
93840: PUSH
93841: LD_INT 22
93843: PUSH
93844: LD_OWVAR 2
93848: PUSH
93849: EMPTY
93850: LIST
93851: LIST
93852: PUSH
93853: LD_INT 21
93855: PUSH
93856: LD_INT 1
93858: PUSH
93859: EMPTY
93860: LIST
93861: LIST
93862: PUSH
93863: EMPTY
93864: LIST
93865: LIST
93866: PPUSH
93867: CALL_OW 69
93871: ST_TO_ADDR
// if not tmp then
93872: LD_VAR 0 2
93876: NOT
93877: IFFALSE 93881
// exit ;
93879: GO 93968
// un := tmp [ rand ( 1 , tmp ) ] ;
93881: LD_ADDR_VAR 0 1
93885: PUSH
93886: LD_VAR 0 2
93890: PUSH
93891: LD_INT 1
93893: PPUSH
93894: LD_VAR 0 2
93898: PPUSH
93899: CALL_OW 12
93903: ARRAY
93904: ST_TO_ADDR
// SetSide ( un , 0 ) ;
93905: LD_VAR 0 1
93909: PPUSH
93910: LD_INT 0
93912: PPUSH
93913: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
93917: LD_VAR 0 1
93921: PPUSH
93922: LD_OWVAR 3
93926: PUSH
93927: LD_VAR 0 1
93931: DIFF
93932: PPUSH
93933: LD_VAR 0 1
93937: PPUSH
93938: CALL_OW 74
93942: PPUSH
93943: CALL_OW 115
// wait ( 0 0$20 ) ;
93947: LD_INT 700
93949: PPUSH
93950: CALL_OW 67
// SetSide ( un , your_side ) ;
93954: LD_VAR 0 1
93958: PPUSH
93959: LD_OWVAR 2
93963: PPUSH
93964: CALL_OW 235
// end ;
93968: PPOPN 2
93970: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
93971: LD_EXP 87
93975: PUSH
93976: LD_EXP 120
93980: AND
93981: IFFALSE 94087
93983: GO 93985
93985: DISABLE
93986: LD_INT 0
93988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93989: LD_ADDR_VAR 0 1
93993: PUSH
93994: LD_INT 22
93996: PUSH
93997: LD_OWVAR 2
94001: PUSH
94002: EMPTY
94003: LIST
94004: LIST
94005: PUSH
94006: LD_INT 2
94008: PUSH
94009: LD_INT 30
94011: PUSH
94012: LD_INT 0
94014: PUSH
94015: EMPTY
94016: LIST
94017: LIST
94018: PUSH
94019: LD_INT 30
94021: PUSH
94022: LD_INT 1
94024: PUSH
94025: EMPTY
94026: LIST
94027: LIST
94028: PUSH
94029: EMPTY
94030: LIST
94031: LIST
94032: LIST
94033: PUSH
94034: EMPTY
94035: LIST
94036: LIST
94037: PPUSH
94038: CALL_OW 69
94042: ST_TO_ADDR
// if not depot then
94043: LD_VAR 0 1
94047: NOT
94048: IFFALSE 94052
// exit ;
94050: GO 94087
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
94052: LD_VAR 0 1
94056: PUSH
94057: LD_INT 1
94059: ARRAY
94060: PPUSH
94061: CALL_OW 250
94065: PPUSH
94066: LD_VAR 0 1
94070: PUSH
94071: LD_INT 1
94073: ARRAY
94074: PPUSH
94075: CALL_OW 251
94079: PPUSH
94080: LD_INT 70
94082: PPUSH
94083: CALL_OW 495
// end ;
94087: PPOPN 1
94089: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94090: LD_EXP 87
94094: PUSH
94095: LD_EXP 121
94099: AND
94100: IFFALSE 94311
94102: GO 94104
94104: DISABLE
94105: LD_INT 0
94107: PPUSH
94108: PPUSH
94109: PPUSH
94110: PPUSH
94111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94112: LD_ADDR_VAR 0 5
94116: PUSH
94117: LD_INT 22
94119: PUSH
94120: LD_OWVAR 2
94124: PUSH
94125: EMPTY
94126: LIST
94127: LIST
94128: PUSH
94129: LD_INT 21
94131: PUSH
94132: LD_INT 1
94134: PUSH
94135: EMPTY
94136: LIST
94137: LIST
94138: PUSH
94139: EMPTY
94140: LIST
94141: LIST
94142: PPUSH
94143: CALL_OW 69
94147: ST_TO_ADDR
// if not tmp then
94148: LD_VAR 0 5
94152: NOT
94153: IFFALSE 94157
// exit ;
94155: GO 94311
// for i in tmp do
94157: LD_ADDR_VAR 0 1
94161: PUSH
94162: LD_VAR 0 5
94166: PUSH
94167: FOR_IN
94168: IFFALSE 94309
// begin d := rand ( 0 , 5 ) ;
94170: LD_ADDR_VAR 0 4
94174: PUSH
94175: LD_INT 0
94177: PPUSH
94178: LD_INT 5
94180: PPUSH
94181: CALL_OW 12
94185: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94186: LD_ADDR_VAR 0 2
94190: PUSH
94191: LD_VAR 0 1
94195: PPUSH
94196: CALL_OW 250
94200: PPUSH
94201: LD_VAR 0 4
94205: PPUSH
94206: LD_INT 3
94208: PPUSH
94209: LD_INT 12
94211: PPUSH
94212: CALL_OW 12
94216: PPUSH
94217: CALL_OW 272
94221: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94222: LD_ADDR_VAR 0 3
94226: PUSH
94227: LD_VAR 0 1
94231: PPUSH
94232: CALL_OW 251
94236: PPUSH
94237: LD_VAR 0 4
94241: PPUSH
94242: LD_INT 3
94244: PPUSH
94245: LD_INT 12
94247: PPUSH
94248: CALL_OW 12
94252: PPUSH
94253: CALL_OW 273
94257: ST_TO_ADDR
// if ValidHex ( x , y ) then
94258: LD_VAR 0 2
94262: PPUSH
94263: LD_VAR 0 3
94267: PPUSH
94268: CALL_OW 488
94272: IFFALSE 94307
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94274: LD_VAR 0 1
94278: PPUSH
94279: LD_VAR 0 2
94283: PPUSH
94284: LD_VAR 0 3
94288: PPUSH
94289: LD_INT 3
94291: PPUSH
94292: LD_INT 6
94294: PPUSH
94295: CALL_OW 12
94299: PPUSH
94300: LD_INT 1
94302: PPUSH
94303: CALL_OW 483
// end ;
94307: GO 94167
94309: POP
94310: POP
// end ;
94311: PPOPN 5
94313: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94314: LD_EXP 87
94318: PUSH
94319: LD_EXP 122
94323: AND
94324: IFFALSE 94418
94326: GO 94328
94328: DISABLE
94329: LD_INT 0
94331: PPUSH
94332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94333: LD_ADDR_VAR 0 2
94337: PUSH
94338: LD_INT 22
94340: PUSH
94341: LD_OWVAR 2
94345: PUSH
94346: EMPTY
94347: LIST
94348: LIST
94349: PUSH
94350: LD_INT 32
94352: PUSH
94353: LD_INT 1
94355: PUSH
94356: EMPTY
94357: LIST
94358: LIST
94359: PUSH
94360: LD_INT 21
94362: PUSH
94363: LD_INT 2
94365: PUSH
94366: EMPTY
94367: LIST
94368: LIST
94369: PUSH
94370: EMPTY
94371: LIST
94372: LIST
94373: LIST
94374: PPUSH
94375: CALL_OW 69
94379: ST_TO_ADDR
// if not tmp then
94380: LD_VAR 0 2
94384: NOT
94385: IFFALSE 94389
// exit ;
94387: GO 94418
// for i in tmp do
94389: LD_ADDR_VAR 0 1
94393: PUSH
94394: LD_VAR 0 2
94398: PUSH
94399: FOR_IN
94400: IFFALSE 94416
// SetFuel ( i , 0 ) ;
94402: LD_VAR 0 1
94406: PPUSH
94407: LD_INT 0
94409: PPUSH
94410: CALL_OW 240
94414: GO 94399
94416: POP
94417: POP
// end ;
94418: PPOPN 2
94420: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94421: LD_EXP 87
94425: PUSH
94426: LD_EXP 123
94430: AND
94431: IFFALSE 94497
94433: GO 94435
94435: DISABLE
94436: LD_INT 0
94438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94439: LD_ADDR_VAR 0 1
94443: PUSH
94444: LD_INT 22
94446: PUSH
94447: LD_OWVAR 2
94451: PUSH
94452: EMPTY
94453: LIST
94454: LIST
94455: PUSH
94456: LD_INT 30
94458: PUSH
94459: LD_INT 29
94461: PUSH
94462: EMPTY
94463: LIST
94464: LIST
94465: PUSH
94466: EMPTY
94467: LIST
94468: LIST
94469: PPUSH
94470: CALL_OW 69
94474: ST_TO_ADDR
// if not tmp then
94475: LD_VAR 0 1
94479: NOT
94480: IFFALSE 94484
// exit ;
94482: GO 94497
// DestroyUnit ( tmp [ 1 ] ) ;
94484: LD_VAR 0 1
94488: PUSH
94489: LD_INT 1
94491: ARRAY
94492: PPUSH
94493: CALL_OW 65
// end ;
94497: PPOPN 1
94499: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94500: LD_EXP 87
94504: PUSH
94505: LD_EXP 125
94509: AND
94510: IFFALSE 94639
94512: GO 94514
94514: DISABLE
94515: LD_INT 0
94517: PPUSH
// begin uc_side := 0 ;
94518: LD_ADDR_OWVAR 20
94522: PUSH
94523: LD_INT 0
94525: ST_TO_ADDR
// uc_nation := nation_arabian ;
94526: LD_ADDR_OWVAR 21
94530: PUSH
94531: LD_INT 2
94533: ST_TO_ADDR
// hc_gallery :=  ;
94534: LD_ADDR_OWVAR 33
94538: PUSH
94539: LD_STRING 
94541: ST_TO_ADDR
// hc_name :=  ;
94542: LD_ADDR_OWVAR 26
94546: PUSH
94547: LD_STRING 
94549: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94550: LD_INT 1
94552: PPUSH
94553: LD_INT 11
94555: PPUSH
94556: LD_INT 10
94558: PPUSH
94559: CALL_OW 380
// un := CreateHuman ;
94563: LD_ADDR_VAR 0 1
94567: PUSH
94568: CALL_OW 44
94572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94573: LD_VAR 0 1
94577: PPUSH
94578: LD_INT 1
94580: PPUSH
94581: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94585: LD_INT 35
94587: PPUSH
94588: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94592: LD_VAR 0 1
94596: PPUSH
94597: LD_INT 22
94599: PUSH
94600: LD_OWVAR 2
94604: PUSH
94605: EMPTY
94606: LIST
94607: LIST
94608: PPUSH
94609: CALL_OW 69
94613: PPUSH
94614: LD_VAR 0 1
94618: PPUSH
94619: CALL_OW 74
94623: PPUSH
94624: CALL_OW 115
// until IsDead ( un ) ;
94628: LD_VAR 0 1
94632: PPUSH
94633: CALL_OW 301
94637: IFFALSE 94585
// end ;
94639: PPOPN 1
94641: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94642: LD_EXP 87
94646: PUSH
94647: LD_EXP 127
94651: AND
94652: IFFALSE 94664
94654: GO 94656
94656: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
94657: LD_STRING earthquake(getX(game), 0, 32)
94659: PPUSH
94660: CALL_OW 559
94664: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
94665: LD_EXP 87
94669: PUSH
94670: LD_EXP 128
94674: AND
94675: IFFALSE 94766
94677: GO 94679
94679: DISABLE
94680: LD_INT 0
94682: PPUSH
// begin enable ;
94683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
94684: LD_ADDR_VAR 0 1
94688: PUSH
94689: LD_INT 22
94691: PUSH
94692: LD_OWVAR 2
94696: PUSH
94697: EMPTY
94698: LIST
94699: LIST
94700: PUSH
94701: LD_INT 21
94703: PUSH
94704: LD_INT 2
94706: PUSH
94707: EMPTY
94708: LIST
94709: LIST
94710: PUSH
94711: LD_INT 33
94713: PUSH
94714: LD_INT 3
94716: PUSH
94717: EMPTY
94718: LIST
94719: LIST
94720: PUSH
94721: EMPTY
94722: LIST
94723: LIST
94724: LIST
94725: PPUSH
94726: CALL_OW 69
94730: ST_TO_ADDR
// if not tmp then
94731: LD_VAR 0 1
94735: NOT
94736: IFFALSE 94740
// exit ;
94738: GO 94766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94740: LD_VAR 0 1
94744: PUSH
94745: LD_INT 1
94747: PPUSH
94748: LD_VAR 0 1
94752: PPUSH
94753: CALL_OW 12
94757: ARRAY
94758: PPUSH
94759: LD_INT 1
94761: PPUSH
94762: CALL_OW 234
// end ;
94766: PPOPN 1
94768: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
94769: LD_EXP 87
94773: PUSH
94774: LD_EXP 129
94778: AND
94779: IFFALSE 94920
94781: GO 94783
94783: DISABLE
94784: LD_INT 0
94786: PPUSH
94787: PPUSH
94788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94789: LD_ADDR_VAR 0 3
94793: PUSH
94794: LD_INT 22
94796: PUSH
94797: LD_OWVAR 2
94801: PUSH
94802: EMPTY
94803: LIST
94804: LIST
94805: PUSH
94806: LD_INT 25
94808: PUSH
94809: LD_INT 1
94811: PUSH
94812: EMPTY
94813: LIST
94814: LIST
94815: PUSH
94816: EMPTY
94817: LIST
94818: LIST
94819: PPUSH
94820: CALL_OW 69
94824: ST_TO_ADDR
// if not tmp then
94825: LD_VAR 0 3
94829: NOT
94830: IFFALSE 94834
// exit ;
94832: GO 94920
// un := tmp [ rand ( 1 , tmp ) ] ;
94834: LD_ADDR_VAR 0 2
94838: PUSH
94839: LD_VAR 0 3
94843: PUSH
94844: LD_INT 1
94846: PPUSH
94847: LD_VAR 0 3
94851: PPUSH
94852: CALL_OW 12
94856: ARRAY
94857: ST_TO_ADDR
// if Crawls ( un ) then
94858: LD_VAR 0 2
94862: PPUSH
94863: CALL_OW 318
94867: IFFALSE 94878
// ComWalk ( un ) ;
94869: LD_VAR 0 2
94873: PPUSH
94874: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
94878: LD_VAR 0 2
94882: PPUSH
94883: LD_INT 9
94885: PPUSH
94886: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
94890: LD_INT 28
94892: PPUSH
94893: LD_OWVAR 2
94897: PPUSH
94898: LD_INT 2
94900: PPUSH
94901: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
94905: LD_INT 29
94907: PPUSH
94908: LD_OWVAR 2
94912: PPUSH
94913: LD_INT 2
94915: PPUSH
94916: CALL_OW 322
// end ;
94920: PPOPN 3
94922: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
94923: LD_EXP 87
94927: PUSH
94928: LD_EXP 130
94932: AND
94933: IFFALSE 95044
94935: GO 94937
94937: DISABLE
94938: LD_INT 0
94940: PPUSH
94941: PPUSH
94942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94943: LD_ADDR_VAR 0 3
94947: PUSH
94948: LD_INT 22
94950: PUSH
94951: LD_OWVAR 2
94955: PUSH
94956: EMPTY
94957: LIST
94958: LIST
94959: PUSH
94960: LD_INT 25
94962: PUSH
94963: LD_INT 1
94965: PUSH
94966: EMPTY
94967: LIST
94968: LIST
94969: PUSH
94970: EMPTY
94971: LIST
94972: LIST
94973: PPUSH
94974: CALL_OW 69
94978: ST_TO_ADDR
// if not tmp then
94979: LD_VAR 0 3
94983: NOT
94984: IFFALSE 94988
// exit ;
94986: GO 95044
// un := tmp [ rand ( 1 , tmp ) ] ;
94988: LD_ADDR_VAR 0 2
94992: PUSH
94993: LD_VAR 0 3
94997: PUSH
94998: LD_INT 1
95000: PPUSH
95001: LD_VAR 0 3
95005: PPUSH
95006: CALL_OW 12
95010: ARRAY
95011: ST_TO_ADDR
// if Crawls ( un ) then
95012: LD_VAR 0 2
95016: PPUSH
95017: CALL_OW 318
95021: IFFALSE 95032
// ComWalk ( un ) ;
95023: LD_VAR 0 2
95027: PPUSH
95028: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95032: LD_VAR 0 2
95036: PPUSH
95037: LD_INT 8
95039: PPUSH
95040: CALL_OW 336
// end ;
95044: PPOPN 3
95046: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
95047: LD_EXP 87
95051: PUSH
95052: LD_EXP 131
95056: AND
95057: IFFALSE 95201
95059: GO 95061
95061: DISABLE
95062: LD_INT 0
95064: PPUSH
95065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95066: LD_ADDR_VAR 0 2
95070: PUSH
95071: LD_INT 22
95073: PUSH
95074: LD_OWVAR 2
95078: PUSH
95079: EMPTY
95080: LIST
95081: LIST
95082: PUSH
95083: LD_INT 21
95085: PUSH
95086: LD_INT 2
95088: PUSH
95089: EMPTY
95090: LIST
95091: LIST
95092: PUSH
95093: LD_INT 2
95095: PUSH
95096: LD_INT 34
95098: PUSH
95099: LD_INT 12
95101: PUSH
95102: EMPTY
95103: LIST
95104: LIST
95105: PUSH
95106: LD_INT 34
95108: PUSH
95109: LD_INT 51
95111: PUSH
95112: EMPTY
95113: LIST
95114: LIST
95115: PUSH
95116: LD_INT 34
95118: PUSH
95119: LD_INT 32
95121: PUSH
95122: EMPTY
95123: LIST
95124: LIST
95125: PUSH
95126: EMPTY
95127: LIST
95128: LIST
95129: LIST
95130: LIST
95131: PUSH
95132: EMPTY
95133: LIST
95134: LIST
95135: LIST
95136: PPUSH
95137: CALL_OW 69
95141: ST_TO_ADDR
// if not tmp then
95142: LD_VAR 0 2
95146: NOT
95147: IFFALSE 95151
// exit ;
95149: GO 95201
// for i in tmp do
95151: LD_ADDR_VAR 0 1
95155: PUSH
95156: LD_VAR 0 2
95160: PUSH
95161: FOR_IN
95162: IFFALSE 95199
// if GetCargo ( i , mat_artifact ) = 0 then
95164: LD_VAR 0 1
95168: PPUSH
95169: LD_INT 4
95171: PPUSH
95172: CALL_OW 289
95176: PUSH
95177: LD_INT 0
95179: EQUAL
95180: IFFALSE 95197
// SetCargo ( i , mat_siberit , 100 ) ;
95182: LD_VAR 0 1
95186: PPUSH
95187: LD_INT 3
95189: PPUSH
95190: LD_INT 100
95192: PPUSH
95193: CALL_OW 290
95197: GO 95161
95199: POP
95200: POP
// end ;
95201: PPOPN 2
95203: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95204: LD_EXP 87
95208: PUSH
95209: LD_EXP 132
95213: AND
95214: IFFALSE 95367
95216: GO 95218
95218: DISABLE
95219: LD_INT 0
95221: PPUSH
95222: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95223: LD_ADDR_VAR 0 2
95227: PUSH
95228: LD_INT 22
95230: PUSH
95231: LD_OWVAR 2
95235: PUSH
95236: EMPTY
95237: LIST
95238: LIST
95239: PPUSH
95240: CALL_OW 69
95244: ST_TO_ADDR
// if not tmp then
95245: LD_VAR 0 2
95249: NOT
95250: IFFALSE 95254
// exit ;
95252: GO 95367
// for i := 1 to 2 do
95254: LD_ADDR_VAR 0 1
95258: PUSH
95259: DOUBLE
95260: LD_INT 1
95262: DEC
95263: ST_TO_ADDR
95264: LD_INT 2
95266: PUSH
95267: FOR_TO
95268: IFFALSE 95365
// begin uc_side := your_side ;
95270: LD_ADDR_OWVAR 20
95274: PUSH
95275: LD_OWVAR 2
95279: ST_TO_ADDR
// uc_nation := nation_american ;
95280: LD_ADDR_OWVAR 21
95284: PUSH
95285: LD_INT 1
95287: ST_TO_ADDR
// vc_chassis := us_morphling ;
95288: LD_ADDR_OWVAR 37
95292: PUSH
95293: LD_INT 5
95295: ST_TO_ADDR
// vc_engine := engine_siberite ;
95296: LD_ADDR_OWVAR 39
95300: PUSH
95301: LD_INT 3
95303: ST_TO_ADDR
// vc_control := control_computer ;
95304: LD_ADDR_OWVAR 38
95308: PUSH
95309: LD_INT 3
95311: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95312: LD_ADDR_OWVAR 40
95316: PUSH
95317: LD_INT 10
95319: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
95320: CALL_OW 45
95324: PPUSH
95325: LD_VAR 0 2
95329: PUSH
95330: LD_INT 1
95332: ARRAY
95333: PPUSH
95334: CALL_OW 250
95338: PPUSH
95339: LD_VAR 0 2
95343: PUSH
95344: LD_INT 1
95346: ARRAY
95347: PPUSH
95348: CALL_OW 251
95352: PPUSH
95353: LD_INT 12
95355: PPUSH
95356: LD_INT 1
95358: PPUSH
95359: CALL_OW 50
// end ;
95363: GO 95267
95365: POP
95366: POP
// end ;
95367: PPOPN 2
95369: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95370: LD_EXP 87
95374: PUSH
95375: LD_EXP 133
95379: AND
95380: IFFALSE 95602
95382: GO 95384
95384: DISABLE
95385: LD_INT 0
95387: PPUSH
95388: PPUSH
95389: PPUSH
95390: PPUSH
95391: PPUSH
95392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95393: LD_ADDR_VAR 0 6
95397: PUSH
95398: LD_INT 22
95400: PUSH
95401: LD_OWVAR 2
95405: PUSH
95406: EMPTY
95407: LIST
95408: LIST
95409: PUSH
95410: LD_INT 21
95412: PUSH
95413: LD_INT 1
95415: PUSH
95416: EMPTY
95417: LIST
95418: LIST
95419: PUSH
95420: LD_INT 3
95422: PUSH
95423: LD_INT 23
95425: PUSH
95426: LD_INT 0
95428: PUSH
95429: EMPTY
95430: LIST
95431: LIST
95432: PUSH
95433: EMPTY
95434: LIST
95435: LIST
95436: PUSH
95437: EMPTY
95438: LIST
95439: LIST
95440: LIST
95441: PPUSH
95442: CALL_OW 69
95446: ST_TO_ADDR
// if not tmp then
95447: LD_VAR 0 6
95451: NOT
95452: IFFALSE 95456
// exit ;
95454: GO 95602
// s1 := rand ( 1 , 4 ) ;
95456: LD_ADDR_VAR 0 2
95460: PUSH
95461: LD_INT 1
95463: PPUSH
95464: LD_INT 4
95466: PPUSH
95467: CALL_OW 12
95471: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95472: LD_ADDR_VAR 0 4
95476: PUSH
95477: LD_VAR 0 6
95481: PUSH
95482: LD_INT 1
95484: ARRAY
95485: PPUSH
95486: LD_VAR 0 2
95490: PPUSH
95491: CALL_OW 259
95495: ST_TO_ADDR
// if s1 = 1 then
95496: LD_VAR 0 2
95500: PUSH
95501: LD_INT 1
95503: EQUAL
95504: IFFALSE 95524
// s2 := rand ( 2 , 4 ) else
95506: LD_ADDR_VAR 0 3
95510: PUSH
95511: LD_INT 2
95513: PPUSH
95514: LD_INT 4
95516: PPUSH
95517: CALL_OW 12
95521: ST_TO_ADDR
95522: GO 95532
// s2 := 1 ;
95524: LD_ADDR_VAR 0 3
95528: PUSH
95529: LD_INT 1
95531: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95532: LD_ADDR_VAR 0 5
95536: PUSH
95537: LD_VAR 0 6
95541: PUSH
95542: LD_INT 1
95544: ARRAY
95545: PPUSH
95546: LD_VAR 0 3
95550: PPUSH
95551: CALL_OW 259
95555: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95556: LD_VAR 0 6
95560: PUSH
95561: LD_INT 1
95563: ARRAY
95564: PPUSH
95565: LD_VAR 0 2
95569: PPUSH
95570: LD_VAR 0 5
95574: PPUSH
95575: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95579: LD_VAR 0 6
95583: PUSH
95584: LD_INT 1
95586: ARRAY
95587: PPUSH
95588: LD_VAR 0 3
95592: PPUSH
95593: LD_VAR 0 4
95597: PPUSH
95598: CALL_OW 237
// end ;
95602: PPOPN 6
95604: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95605: LD_EXP 87
95609: PUSH
95610: LD_EXP 134
95614: AND
95615: IFFALSE 95694
95617: GO 95619
95619: DISABLE
95620: LD_INT 0
95622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
95623: LD_ADDR_VAR 0 1
95627: PUSH
95628: LD_INT 22
95630: PUSH
95631: LD_OWVAR 2
95635: PUSH
95636: EMPTY
95637: LIST
95638: LIST
95639: PUSH
95640: LD_INT 30
95642: PUSH
95643: LD_INT 3
95645: PUSH
95646: EMPTY
95647: LIST
95648: LIST
95649: PUSH
95650: EMPTY
95651: LIST
95652: LIST
95653: PPUSH
95654: CALL_OW 69
95658: ST_TO_ADDR
// if not tmp then
95659: LD_VAR 0 1
95663: NOT
95664: IFFALSE 95668
// exit ;
95666: GO 95694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95668: LD_VAR 0 1
95672: PUSH
95673: LD_INT 1
95675: PPUSH
95676: LD_VAR 0 1
95680: PPUSH
95681: CALL_OW 12
95685: ARRAY
95686: PPUSH
95687: LD_INT 1
95689: PPUSH
95690: CALL_OW 234
// end ;
95694: PPOPN 1
95696: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
95697: LD_EXP 87
95701: PUSH
95702: LD_EXP 135
95706: AND
95707: IFFALSE 95819
95709: GO 95711
95711: DISABLE
95712: LD_INT 0
95714: PPUSH
95715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
95716: LD_ADDR_VAR 0 2
95720: PUSH
95721: LD_INT 22
95723: PUSH
95724: LD_OWVAR 2
95728: PUSH
95729: EMPTY
95730: LIST
95731: LIST
95732: PUSH
95733: LD_INT 2
95735: PUSH
95736: LD_INT 30
95738: PUSH
95739: LD_INT 27
95741: PUSH
95742: EMPTY
95743: LIST
95744: LIST
95745: PUSH
95746: LD_INT 30
95748: PUSH
95749: LD_INT 26
95751: PUSH
95752: EMPTY
95753: LIST
95754: LIST
95755: PUSH
95756: LD_INT 30
95758: PUSH
95759: LD_INT 28
95761: PUSH
95762: EMPTY
95763: LIST
95764: LIST
95765: PUSH
95766: EMPTY
95767: LIST
95768: LIST
95769: LIST
95770: LIST
95771: PUSH
95772: EMPTY
95773: LIST
95774: LIST
95775: PPUSH
95776: CALL_OW 69
95780: ST_TO_ADDR
// if not tmp then
95781: LD_VAR 0 2
95785: NOT
95786: IFFALSE 95790
// exit ;
95788: GO 95819
// for i in tmp do
95790: LD_ADDR_VAR 0 1
95794: PUSH
95795: LD_VAR 0 2
95799: PUSH
95800: FOR_IN
95801: IFFALSE 95817
// SetLives ( i , 1 ) ;
95803: LD_VAR 0 1
95807: PPUSH
95808: LD_INT 1
95810: PPUSH
95811: CALL_OW 234
95815: GO 95800
95817: POP
95818: POP
// end ;
95819: PPOPN 2
95821: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
95822: LD_EXP 87
95826: PUSH
95827: LD_EXP 136
95831: AND
95832: IFFALSE 96106
95834: GO 95836
95836: DISABLE
95837: LD_INT 0
95839: PPUSH
95840: PPUSH
95841: PPUSH
// begin i := rand ( 1 , 7 ) ;
95842: LD_ADDR_VAR 0 1
95846: PUSH
95847: LD_INT 1
95849: PPUSH
95850: LD_INT 7
95852: PPUSH
95853: CALL_OW 12
95857: ST_TO_ADDR
// case i of 1 :
95858: LD_VAR 0 1
95862: PUSH
95863: LD_INT 1
95865: DOUBLE
95866: EQUAL
95867: IFTRUE 95871
95869: GO 95881
95871: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
95872: LD_STRING earthquake(getX(game), 0, 32)
95874: PPUSH
95875: CALL_OW 559
95879: GO 96106
95881: LD_INT 2
95883: DOUBLE
95884: EQUAL
95885: IFTRUE 95889
95887: GO 95903
95889: POP
// begin ToLua ( displayStucuk(); ) ;
95890: LD_STRING displayStucuk();
95892: PPUSH
95893: CALL_OW 559
// ResetFog ;
95897: CALL_OW 335
// end ; 3 :
95901: GO 96106
95903: LD_INT 3
95905: DOUBLE
95906: EQUAL
95907: IFTRUE 95911
95909: GO 96015
95911: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95912: LD_ADDR_VAR 0 2
95916: PUSH
95917: LD_INT 22
95919: PUSH
95920: LD_OWVAR 2
95924: PUSH
95925: EMPTY
95926: LIST
95927: LIST
95928: PUSH
95929: LD_INT 25
95931: PUSH
95932: LD_INT 1
95934: PUSH
95935: EMPTY
95936: LIST
95937: LIST
95938: PUSH
95939: EMPTY
95940: LIST
95941: LIST
95942: PPUSH
95943: CALL_OW 69
95947: ST_TO_ADDR
// if not tmp then
95948: LD_VAR 0 2
95952: NOT
95953: IFFALSE 95957
// exit ;
95955: GO 96106
// un := tmp [ rand ( 1 , tmp ) ] ;
95957: LD_ADDR_VAR 0 3
95961: PUSH
95962: LD_VAR 0 2
95966: PUSH
95967: LD_INT 1
95969: PPUSH
95970: LD_VAR 0 2
95974: PPUSH
95975: CALL_OW 12
95979: ARRAY
95980: ST_TO_ADDR
// if Crawls ( un ) then
95981: LD_VAR 0 3
95985: PPUSH
95986: CALL_OW 318
95990: IFFALSE 96001
// ComWalk ( un ) ;
95992: LD_VAR 0 3
95996: PPUSH
95997: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96001: LD_VAR 0 3
96005: PPUSH
96006: LD_INT 8
96008: PPUSH
96009: CALL_OW 336
// end ; 4 :
96013: GO 96106
96015: LD_INT 4
96017: DOUBLE
96018: EQUAL
96019: IFTRUE 96023
96021: GO 96084
96023: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96024: LD_ADDR_VAR 0 2
96028: PUSH
96029: LD_INT 22
96031: PUSH
96032: LD_OWVAR 2
96036: PUSH
96037: EMPTY
96038: LIST
96039: LIST
96040: PUSH
96041: LD_INT 30
96043: PUSH
96044: LD_INT 29
96046: PUSH
96047: EMPTY
96048: LIST
96049: LIST
96050: PUSH
96051: EMPTY
96052: LIST
96053: LIST
96054: PPUSH
96055: CALL_OW 69
96059: ST_TO_ADDR
// if not tmp then
96060: LD_VAR 0 2
96064: NOT
96065: IFFALSE 96069
// exit ;
96067: GO 96106
// DestroyUnit ( tmp [ 1 ] ) ;
96069: LD_VAR 0 2
96073: PUSH
96074: LD_INT 1
96076: ARRAY
96077: PPUSH
96078: CALL_OW 65
// end ; 5 .. 7 :
96082: GO 96106
96084: LD_INT 5
96086: DOUBLE
96087: GREATEREQUAL
96088: IFFALSE 96096
96090: LD_INT 7
96092: DOUBLE
96093: LESSEQUAL
96094: IFTRUE 96098
96096: GO 96105
96098: POP
// StreamSibBomb ; end ;
96099: CALL 92386 0 0
96103: GO 96106
96105: POP
// end ;
96106: PPOPN 3
96108: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96109: LD_EXP 87
96113: PUSH
96114: LD_EXP 137
96118: AND
96119: IFFALSE 96275
96121: GO 96123
96123: DISABLE
96124: LD_INT 0
96126: PPUSH
96127: PPUSH
96128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96129: LD_ADDR_VAR 0 2
96133: PUSH
96134: LD_INT 81
96136: PUSH
96137: LD_OWVAR 2
96141: PUSH
96142: EMPTY
96143: LIST
96144: LIST
96145: PUSH
96146: LD_INT 2
96148: PUSH
96149: LD_INT 21
96151: PUSH
96152: LD_INT 1
96154: PUSH
96155: EMPTY
96156: LIST
96157: LIST
96158: PUSH
96159: LD_INT 21
96161: PUSH
96162: LD_INT 2
96164: PUSH
96165: EMPTY
96166: LIST
96167: LIST
96168: PUSH
96169: EMPTY
96170: LIST
96171: LIST
96172: LIST
96173: PUSH
96174: EMPTY
96175: LIST
96176: LIST
96177: PPUSH
96178: CALL_OW 69
96182: ST_TO_ADDR
// if not tmp then
96183: LD_VAR 0 2
96187: NOT
96188: IFFALSE 96192
// exit ;
96190: GO 96275
// p := 0 ;
96192: LD_ADDR_VAR 0 3
96196: PUSH
96197: LD_INT 0
96199: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96200: LD_INT 35
96202: PPUSH
96203: CALL_OW 67
// p := p + 1 ;
96207: LD_ADDR_VAR 0 3
96211: PUSH
96212: LD_VAR 0 3
96216: PUSH
96217: LD_INT 1
96219: PLUS
96220: ST_TO_ADDR
// for i in tmp do
96221: LD_ADDR_VAR 0 1
96225: PUSH
96226: LD_VAR 0 2
96230: PUSH
96231: FOR_IN
96232: IFFALSE 96263
// if GetLives ( i ) < 1000 then
96234: LD_VAR 0 1
96238: PPUSH
96239: CALL_OW 256
96243: PUSH
96244: LD_INT 1000
96246: LESS
96247: IFFALSE 96261
// SetLives ( i , 1000 ) ;
96249: LD_VAR 0 1
96253: PPUSH
96254: LD_INT 1000
96256: PPUSH
96257: CALL_OW 234
96261: GO 96231
96263: POP
96264: POP
// until p > 20 ;
96265: LD_VAR 0 3
96269: PUSH
96270: LD_INT 20
96272: GREATER
96273: IFFALSE 96200
// end ;
96275: PPOPN 3
96277: END
// every 0 0$1 trigger StreamModeActive and sTime do
96278: LD_EXP 87
96282: PUSH
96283: LD_EXP 138
96287: AND
96288: IFFALSE 96323
96290: GO 96292
96292: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96293: LD_INT 28
96295: PPUSH
96296: LD_OWVAR 2
96300: PPUSH
96301: LD_INT 2
96303: PPUSH
96304: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96308: LD_INT 30
96310: PPUSH
96311: LD_OWVAR 2
96315: PPUSH
96316: LD_INT 2
96318: PPUSH
96319: CALL_OW 322
// end ;
96323: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96324: LD_EXP 87
96328: PUSH
96329: LD_EXP 139
96333: AND
96334: IFFALSE 96455
96336: GO 96338
96338: DISABLE
96339: LD_INT 0
96341: PPUSH
96342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96343: LD_ADDR_VAR 0 2
96347: PUSH
96348: LD_INT 22
96350: PUSH
96351: LD_OWVAR 2
96355: PUSH
96356: EMPTY
96357: LIST
96358: LIST
96359: PUSH
96360: LD_INT 21
96362: PUSH
96363: LD_INT 1
96365: PUSH
96366: EMPTY
96367: LIST
96368: LIST
96369: PUSH
96370: LD_INT 3
96372: PUSH
96373: LD_INT 23
96375: PUSH
96376: LD_INT 0
96378: PUSH
96379: EMPTY
96380: LIST
96381: LIST
96382: PUSH
96383: EMPTY
96384: LIST
96385: LIST
96386: PUSH
96387: EMPTY
96388: LIST
96389: LIST
96390: LIST
96391: PPUSH
96392: CALL_OW 69
96396: ST_TO_ADDR
// if not tmp then
96397: LD_VAR 0 2
96401: NOT
96402: IFFALSE 96406
// exit ;
96404: GO 96455
// for i in tmp do
96406: LD_ADDR_VAR 0 1
96410: PUSH
96411: LD_VAR 0 2
96415: PUSH
96416: FOR_IN
96417: IFFALSE 96453
// begin if Crawls ( i ) then
96419: LD_VAR 0 1
96423: PPUSH
96424: CALL_OW 318
96428: IFFALSE 96439
// ComWalk ( i ) ;
96430: LD_VAR 0 1
96434: PPUSH
96435: CALL_OW 138
// SetClass ( i , 2 ) ;
96439: LD_VAR 0 1
96443: PPUSH
96444: LD_INT 2
96446: PPUSH
96447: CALL_OW 336
// end ;
96451: GO 96416
96453: POP
96454: POP
// end ;
96455: PPOPN 2
96457: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96458: LD_EXP 87
96462: PUSH
96463: LD_EXP 140
96467: AND
96468: IFFALSE 96749
96470: GO 96472
96472: DISABLE
96473: LD_INT 0
96475: PPUSH
96476: PPUSH
96477: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96478: LD_OWVAR 2
96482: PPUSH
96483: LD_INT 9
96485: PPUSH
96486: LD_INT 1
96488: PPUSH
96489: LD_INT 1
96491: PPUSH
96492: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96496: LD_INT 9
96498: PPUSH
96499: LD_OWVAR 2
96503: PPUSH
96504: CALL_OW 343
// uc_side := 9 ;
96508: LD_ADDR_OWVAR 20
96512: PUSH
96513: LD_INT 9
96515: ST_TO_ADDR
// uc_nation := 2 ;
96516: LD_ADDR_OWVAR 21
96520: PUSH
96521: LD_INT 2
96523: ST_TO_ADDR
// hc_name := Dark Warrior ;
96524: LD_ADDR_OWVAR 26
96528: PUSH
96529: LD_STRING Dark Warrior
96531: ST_TO_ADDR
// hc_gallery :=  ;
96532: LD_ADDR_OWVAR 33
96536: PUSH
96537: LD_STRING 
96539: ST_TO_ADDR
// hc_noskilllimit := true ;
96540: LD_ADDR_OWVAR 76
96544: PUSH
96545: LD_INT 1
96547: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96548: LD_ADDR_OWVAR 31
96552: PUSH
96553: LD_INT 30
96555: PUSH
96556: LD_INT 30
96558: PUSH
96559: LD_INT 30
96561: PUSH
96562: LD_INT 30
96564: PUSH
96565: EMPTY
96566: LIST
96567: LIST
96568: LIST
96569: LIST
96570: ST_TO_ADDR
// un := CreateHuman ;
96571: LD_ADDR_VAR 0 3
96575: PUSH
96576: CALL_OW 44
96580: ST_TO_ADDR
// hc_noskilllimit := false ;
96581: LD_ADDR_OWVAR 76
96585: PUSH
96586: LD_INT 0
96588: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96589: LD_VAR 0 3
96593: PPUSH
96594: LD_INT 1
96596: PPUSH
96597: CALL_OW 51
// p := 0 ;
96601: LD_ADDR_VAR 0 2
96605: PUSH
96606: LD_INT 0
96608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96609: LD_INT 35
96611: PPUSH
96612: CALL_OW 67
// p := p + 1 ;
96616: LD_ADDR_VAR 0 2
96620: PUSH
96621: LD_VAR 0 2
96625: PUSH
96626: LD_INT 1
96628: PLUS
96629: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
96630: LD_VAR 0 3
96634: PPUSH
96635: CALL_OW 256
96639: PUSH
96640: LD_INT 1000
96642: LESS
96643: IFFALSE 96657
// SetLives ( un , 1000 ) ;
96645: LD_VAR 0 3
96649: PPUSH
96650: LD_INT 1000
96652: PPUSH
96653: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
96657: LD_VAR 0 3
96661: PPUSH
96662: LD_INT 81
96664: PUSH
96665: LD_OWVAR 2
96669: PUSH
96670: EMPTY
96671: LIST
96672: LIST
96673: PUSH
96674: LD_INT 91
96676: PUSH
96677: LD_VAR 0 3
96681: PUSH
96682: LD_INT 30
96684: PUSH
96685: EMPTY
96686: LIST
96687: LIST
96688: LIST
96689: PUSH
96690: EMPTY
96691: LIST
96692: LIST
96693: PPUSH
96694: CALL_OW 69
96698: PPUSH
96699: LD_VAR 0 3
96703: PPUSH
96704: CALL_OW 74
96708: PPUSH
96709: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
96713: LD_VAR 0 2
96717: PUSH
96718: LD_INT 60
96720: GREATER
96721: PUSH
96722: LD_VAR 0 3
96726: PPUSH
96727: CALL_OW 301
96731: OR
96732: IFFALSE 96609
// if un then
96734: LD_VAR 0 3
96738: IFFALSE 96749
// RemoveUnit ( un ) ;
96740: LD_VAR 0 3
96744: PPUSH
96745: CALL_OW 64
// end ; end_of_file
96749: PPOPN 3
96751: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
96752: LD_INT 0
96754: PPUSH
96755: PPUSH
96756: PPUSH
96757: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
96758: LD_VAR 0 1
96762: PPUSH
96763: CALL_OW 264
96767: PUSH
96768: LD_EXP 33
96772: EQUAL
96773: IFFALSE 96845
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
96775: LD_INT 68
96777: PPUSH
96778: LD_VAR 0 1
96782: PPUSH
96783: CALL_OW 255
96787: PPUSH
96788: CALL_OW 321
96792: PUSH
96793: LD_INT 2
96795: EQUAL
96796: IFFALSE 96808
// eff := 70 else
96798: LD_ADDR_VAR 0 4
96802: PUSH
96803: LD_INT 70
96805: ST_TO_ADDR
96806: GO 96816
// eff := 30 ;
96808: LD_ADDR_VAR 0 4
96812: PUSH
96813: LD_INT 30
96815: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
96816: LD_VAR 0 1
96820: PPUSH
96821: CALL_OW 250
96825: PPUSH
96826: LD_VAR 0 1
96830: PPUSH
96831: CALL_OW 251
96835: PPUSH
96836: LD_VAR 0 4
96840: PPUSH
96841: CALL_OW 495
// end ; end ;
96845: LD_VAR 0 2
96849: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
96850: LD_INT 0
96852: PPUSH
// end ;
96853: LD_VAR 0 4
96857: RET
// export function SOS_Command ( cmd ) ; begin
96858: LD_INT 0
96860: PPUSH
// end ;
96861: LD_VAR 0 2
96865: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
96866: LD_VAR 0 1
96870: PUSH
96871: LD_INT 255
96873: EQUAL
96874: PUSH
96875: LD_VAR 0 2
96879: PPUSH
96880: CALL_OW 264
96884: PUSH
96885: LD_INT 14
96887: PUSH
96888: LD_INT 53
96890: PUSH
96891: EMPTY
96892: LIST
96893: LIST
96894: IN
96895: AND
96896: PUSH
96897: LD_VAR 0 4
96901: PPUSH
96902: LD_VAR 0 5
96906: PPUSH
96907: CALL_OW 488
96911: AND
96912: IFFALSE 96936
// CutTreeXYR ( unit , x , y , 12 ) ;
96914: LD_VAR 0 2
96918: PPUSH
96919: LD_VAR 0 4
96923: PPUSH
96924: LD_VAR 0 5
96928: PPUSH
96929: LD_INT 12
96931: PPUSH
96932: CALL 96939 0 4
// end ;
96936: PPOPN 5
96938: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
96939: LD_INT 0
96941: PPUSH
96942: PPUSH
96943: PPUSH
96944: PPUSH
96945: PPUSH
96946: PPUSH
96947: PPUSH
96948: PPUSH
96949: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
96950: LD_VAR 0 1
96954: NOT
96955: PUSH
96956: LD_VAR 0 2
96960: PPUSH
96961: LD_VAR 0 3
96965: PPUSH
96966: CALL_OW 488
96970: NOT
96971: OR
96972: PUSH
96973: LD_VAR 0 4
96977: NOT
96978: OR
96979: IFFALSE 96983
// exit ;
96981: GO 97323
// list := [ ] ;
96983: LD_ADDR_VAR 0 13
96987: PUSH
96988: EMPTY
96989: ST_TO_ADDR
// if x - r < 0 then
96990: LD_VAR 0 2
96994: PUSH
96995: LD_VAR 0 4
96999: MINUS
97000: PUSH
97001: LD_INT 0
97003: LESS
97004: IFFALSE 97016
// min_x := 0 else
97006: LD_ADDR_VAR 0 7
97010: PUSH
97011: LD_INT 0
97013: ST_TO_ADDR
97014: GO 97032
// min_x := x - r ;
97016: LD_ADDR_VAR 0 7
97020: PUSH
97021: LD_VAR 0 2
97025: PUSH
97026: LD_VAR 0 4
97030: MINUS
97031: ST_TO_ADDR
// if y - r < 0 then
97032: LD_VAR 0 3
97036: PUSH
97037: LD_VAR 0 4
97041: MINUS
97042: PUSH
97043: LD_INT 0
97045: LESS
97046: IFFALSE 97058
// min_y := 0 else
97048: LD_ADDR_VAR 0 8
97052: PUSH
97053: LD_INT 0
97055: ST_TO_ADDR
97056: GO 97074
// min_y := y - r ;
97058: LD_ADDR_VAR 0 8
97062: PUSH
97063: LD_VAR 0 3
97067: PUSH
97068: LD_VAR 0 4
97072: MINUS
97073: ST_TO_ADDR
// max_x := x + r ;
97074: LD_ADDR_VAR 0 9
97078: PUSH
97079: LD_VAR 0 2
97083: PUSH
97084: LD_VAR 0 4
97088: PLUS
97089: ST_TO_ADDR
// max_y := y + r ;
97090: LD_ADDR_VAR 0 10
97094: PUSH
97095: LD_VAR 0 3
97099: PUSH
97100: LD_VAR 0 4
97104: PLUS
97105: ST_TO_ADDR
// for _x = min_x to max_x do
97106: LD_ADDR_VAR 0 11
97110: PUSH
97111: DOUBLE
97112: LD_VAR 0 7
97116: DEC
97117: ST_TO_ADDR
97118: LD_VAR 0 9
97122: PUSH
97123: FOR_TO
97124: IFFALSE 97241
// for _y = min_y to max_y do
97126: LD_ADDR_VAR 0 12
97130: PUSH
97131: DOUBLE
97132: LD_VAR 0 8
97136: DEC
97137: ST_TO_ADDR
97138: LD_VAR 0 10
97142: PUSH
97143: FOR_TO
97144: IFFALSE 97237
// begin if not ValidHex ( _x , _y ) then
97146: LD_VAR 0 11
97150: PPUSH
97151: LD_VAR 0 12
97155: PPUSH
97156: CALL_OW 488
97160: NOT
97161: IFFALSE 97165
// continue ;
97163: GO 97143
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
97165: LD_VAR 0 11
97169: PPUSH
97170: LD_VAR 0 12
97174: PPUSH
97175: CALL_OW 351
97179: PUSH
97180: LD_VAR 0 11
97184: PPUSH
97185: LD_VAR 0 12
97189: PPUSH
97190: CALL_OW 554
97194: AND
97195: IFFALSE 97235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
97197: LD_ADDR_VAR 0 13
97201: PUSH
97202: LD_VAR 0 13
97206: PPUSH
97207: LD_VAR 0 13
97211: PUSH
97212: LD_INT 1
97214: PLUS
97215: PPUSH
97216: LD_VAR 0 11
97220: PUSH
97221: LD_VAR 0 12
97225: PUSH
97226: EMPTY
97227: LIST
97228: LIST
97229: PPUSH
97230: CALL_OW 2
97234: ST_TO_ADDR
// end ;
97235: GO 97143
97237: POP
97238: POP
97239: GO 97123
97241: POP
97242: POP
// if not list then
97243: LD_VAR 0 13
97247: NOT
97248: IFFALSE 97252
// exit ;
97250: GO 97323
// for i in list do
97252: LD_ADDR_VAR 0 6
97256: PUSH
97257: LD_VAR 0 13
97261: PUSH
97262: FOR_IN
97263: IFFALSE 97321
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
97265: LD_VAR 0 1
97269: PPUSH
97270: LD_STRING M
97272: PUSH
97273: LD_VAR 0 6
97277: PUSH
97278: LD_INT 1
97280: ARRAY
97281: PUSH
97282: LD_VAR 0 6
97286: PUSH
97287: LD_INT 2
97289: ARRAY
97290: PUSH
97291: LD_INT 0
97293: PUSH
97294: LD_INT 0
97296: PUSH
97297: LD_INT 0
97299: PUSH
97300: LD_INT 0
97302: PUSH
97303: EMPTY
97304: LIST
97305: LIST
97306: LIST
97307: LIST
97308: LIST
97309: LIST
97310: LIST
97311: PUSH
97312: EMPTY
97313: LIST
97314: PPUSH
97315: CALL_OW 447
97319: GO 97262
97321: POP
97322: POP
// end ; end_of_file
97323: LD_VAR 0 5
97327: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
97328: LD_INT 0
97330: PPUSH
97331: PPUSH
97332: PPUSH
97333: PPUSH
97334: PPUSH
97335: PPUSH
97336: PPUSH
97337: PPUSH
97338: PPUSH
97339: PPUSH
97340: PPUSH
97341: PPUSH
97342: PPUSH
97343: PPUSH
97344: PPUSH
97345: PPUSH
97346: PPUSH
97347: PPUSH
97348: PPUSH
97349: PPUSH
97350: PPUSH
97351: PPUSH
97352: PPUSH
97353: PPUSH
97354: PPUSH
97355: PPUSH
97356: PPUSH
97357: PPUSH
97358: PPUSH
97359: PPUSH
97360: PPUSH
97361: PPUSH
97362: PPUSH
97363: PPUSH
// if not list then
97364: LD_VAR 0 1
97368: NOT
97369: IFFALSE 97373
// exit ;
97371: GO 102032
// base := list [ 1 ] ;
97373: LD_ADDR_VAR 0 3
97377: PUSH
97378: LD_VAR 0 1
97382: PUSH
97383: LD_INT 1
97385: ARRAY
97386: ST_TO_ADDR
// group := list [ 2 ] ;
97387: LD_ADDR_VAR 0 4
97391: PUSH
97392: LD_VAR 0 1
97396: PUSH
97397: LD_INT 2
97399: ARRAY
97400: ST_TO_ADDR
// path := list [ 3 ] ;
97401: LD_ADDR_VAR 0 5
97405: PUSH
97406: LD_VAR 0 1
97410: PUSH
97411: LD_INT 3
97413: ARRAY
97414: ST_TO_ADDR
// flags := list [ 4 ] ;
97415: LD_ADDR_VAR 0 6
97419: PUSH
97420: LD_VAR 0 1
97424: PUSH
97425: LD_INT 4
97427: ARRAY
97428: ST_TO_ADDR
// mined := [ ] ;
97429: LD_ADDR_VAR 0 27
97433: PUSH
97434: EMPTY
97435: ST_TO_ADDR
// bombed := [ ] ;
97436: LD_ADDR_VAR 0 28
97440: PUSH
97441: EMPTY
97442: ST_TO_ADDR
// healers := [ ] ;
97443: LD_ADDR_VAR 0 31
97447: PUSH
97448: EMPTY
97449: ST_TO_ADDR
// to_heal := [ ] ;
97450: LD_ADDR_VAR 0 30
97454: PUSH
97455: EMPTY
97456: ST_TO_ADDR
// repairs := [ ] ;
97457: LD_ADDR_VAR 0 33
97461: PUSH
97462: EMPTY
97463: ST_TO_ADDR
// to_repair := [ ] ;
97464: LD_ADDR_VAR 0 32
97468: PUSH
97469: EMPTY
97470: ST_TO_ADDR
// if not group or not path then
97471: LD_VAR 0 4
97475: NOT
97476: PUSH
97477: LD_VAR 0 5
97481: NOT
97482: OR
97483: IFFALSE 97487
// exit ;
97485: GO 102032
// side := GetSide ( group [ 1 ] ) ;
97487: LD_ADDR_VAR 0 35
97491: PUSH
97492: LD_VAR 0 4
97496: PUSH
97497: LD_INT 1
97499: ARRAY
97500: PPUSH
97501: CALL_OW 255
97505: ST_TO_ADDR
// if flags then
97506: LD_VAR 0 6
97510: IFFALSE 97654
// begin f_ignore_area := flags [ 1 ] ;
97512: LD_ADDR_VAR 0 17
97516: PUSH
97517: LD_VAR 0 6
97521: PUSH
97522: LD_INT 1
97524: ARRAY
97525: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
97526: LD_ADDR_VAR 0 18
97530: PUSH
97531: LD_VAR 0 6
97535: PUSH
97536: LD_INT 2
97538: ARRAY
97539: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
97540: LD_ADDR_VAR 0 19
97544: PUSH
97545: LD_VAR 0 6
97549: PUSH
97550: LD_INT 3
97552: ARRAY
97553: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
97554: LD_ADDR_VAR 0 20
97558: PUSH
97559: LD_VAR 0 6
97563: PUSH
97564: LD_INT 4
97566: ARRAY
97567: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
97568: LD_ADDR_VAR 0 21
97572: PUSH
97573: LD_VAR 0 6
97577: PUSH
97578: LD_INT 5
97580: ARRAY
97581: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
97582: LD_ADDR_VAR 0 22
97586: PUSH
97587: LD_VAR 0 6
97591: PUSH
97592: LD_INT 6
97594: ARRAY
97595: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
97596: LD_ADDR_VAR 0 23
97600: PUSH
97601: LD_VAR 0 6
97605: PUSH
97606: LD_INT 7
97608: ARRAY
97609: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
97610: LD_ADDR_VAR 0 24
97614: PUSH
97615: LD_VAR 0 6
97619: PUSH
97620: LD_INT 8
97622: ARRAY
97623: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
97624: LD_ADDR_VAR 0 25
97628: PUSH
97629: LD_VAR 0 6
97633: PUSH
97634: LD_INT 9
97636: ARRAY
97637: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
97638: LD_ADDR_VAR 0 26
97642: PUSH
97643: LD_VAR 0 6
97647: PUSH
97648: LD_INT 10
97650: ARRAY
97651: ST_TO_ADDR
// end else
97652: GO 97734
// begin f_ignore_area := false ;
97654: LD_ADDR_VAR 0 17
97658: PUSH
97659: LD_INT 0
97661: ST_TO_ADDR
// f_capture := false ;
97662: LD_ADDR_VAR 0 18
97666: PUSH
97667: LD_INT 0
97669: ST_TO_ADDR
// f_ignore_civ := false ;
97670: LD_ADDR_VAR 0 19
97674: PUSH
97675: LD_INT 0
97677: ST_TO_ADDR
// f_murder := false ;
97678: LD_ADDR_VAR 0 20
97682: PUSH
97683: LD_INT 0
97685: ST_TO_ADDR
// f_mines := false ;
97686: LD_ADDR_VAR 0 21
97690: PUSH
97691: LD_INT 0
97693: ST_TO_ADDR
// f_repair := false ;
97694: LD_ADDR_VAR 0 22
97698: PUSH
97699: LD_INT 0
97701: ST_TO_ADDR
// f_heal := false ;
97702: LD_ADDR_VAR 0 23
97706: PUSH
97707: LD_INT 0
97709: ST_TO_ADDR
// f_spacetime := false ;
97710: LD_ADDR_VAR 0 24
97714: PUSH
97715: LD_INT 0
97717: ST_TO_ADDR
// f_attack_depot := false ;
97718: LD_ADDR_VAR 0 25
97722: PUSH
97723: LD_INT 0
97725: ST_TO_ADDR
// f_crawl := false ;
97726: LD_ADDR_VAR 0 26
97730: PUSH
97731: LD_INT 0
97733: ST_TO_ADDR
// end ; if f_heal then
97734: LD_VAR 0 23
97738: IFFALSE 97765
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
97740: LD_ADDR_VAR 0 31
97744: PUSH
97745: LD_VAR 0 4
97749: PPUSH
97750: LD_INT 25
97752: PUSH
97753: LD_INT 4
97755: PUSH
97756: EMPTY
97757: LIST
97758: LIST
97759: PPUSH
97760: CALL_OW 72
97764: ST_TO_ADDR
// if f_repair then
97765: LD_VAR 0 22
97769: IFFALSE 97796
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
97771: LD_ADDR_VAR 0 33
97775: PUSH
97776: LD_VAR 0 4
97780: PPUSH
97781: LD_INT 25
97783: PUSH
97784: LD_INT 3
97786: PUSH
97787: EMPTY
97788: LIST
97789: LIST
97790: PPUSH
97791: CALL_OW 72
97795: ST_TO_ADDR
// units_path := [ ] ;
97796: LD_ADDR_VAR 0 16
97800: PUSH
97801: EMPTY
97802: ST_TO_ADDR
// for i = 1 to group do
97803: LD_ADDR_VAR 0 7
97807: PUSH
97808: DOUBLE
97809: LD_INT 1
97811: DEC
97812: ST_TO_ADDR
97813: LD_VAR 0 4
97817: PUSH
97818: FOR_TO
97819: IFFALSE 97848
// units_path := Replace ( units_path , i , path ) ;
97821: LD_ADDR_VAR 0 16
97825: PUSH
97826: LD_VAR 0 16
97830: PPUSH
97831: LD_VAR 0 7
97835: PPUSH
97836: LD_VAR 0 5
97840: PPUSH
97841: CALL_OW 1
97845: ST_TO_ADDR
97846: GO 97818
97848: POP
97849: POP
// repeat for i = group downto 1 do
97850: LD_ADDR_VAR 0 7
97854: PUSH
97855: DOUBLE
97856: LD_VAR 0 4
97860: INC
97861: ST_TO_ADDR
97862: LD_INT 1
97864: PUSH
97865: FOR_DOWNTO
97866: IFFALSE 101988
// begin wait ( 5 ) ;
97868: LD_INT 5
97870: PPUSH
97871: CALL_OW 67
// tmp := [ ] ;
97875: LD_ADDR_VAR 0 14
97879: PUSH
97880: EMPTY
97881: ST_TO_ADDR
// attacking := false ;
97882: LD_ADDR_VAR 0 29
97886: PUSH
97887: LD_INT 0
97889: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
97890: LD_VAR 0 4
97894: PUSH
97895: LD_VAR 0 7
97899: ARRAY
97900: PPUSH
97901: CALL_OW 301
97905: PUSH
97906: LD_VAR 0 4
97910: PUSH
97911: LD_VAR 0 7
97915: ARRAY
97916: NOT
97917: OR
97918: IFFALSE 98027
// begin if GetType ( group [ i ] ) = unit_human then
97920: LD_VAR 0 4
97924: PUSH
97925: LD_VAR 0 7
97929: ARRAY
97930: PPUSH
97931: CALL_OW 247
97935: PUSH
97936: LD_INT 1
97938: EQUAL
97939: IFFALSE 97985
// begin to_heal := to_heal diff group [ i ] ;
97941: LD_ADDR_VAR 0 30
97945: PUSH
97946: LD_VAR 0 30
97950: PUSH
97951: LD_VAR 0 4
97955: PUSH
97956: LD_VAR 0 7
97960: ARRAY
97961: DIFF
97962: ST_TO_ADDR
// healers := healers diff group [ i ] ;
97963: LD_ADDR_VAR 0 31
97967: PUSH
97968: LD_VAR 0 31
97972: PUSH
97973: LD_VAR 0 4
97977: PUSH
97978: LD_VAR 0 7
97982: ARRAY
97983: DIFF
97984: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
97985: LD_ADDR_VAR 0 4
97989: PUSH
97990: LD_VAR 0 4
97994: PPUSH
97995: LD_VAR 0 7
97999: PPUSH
98000: CALL_OW 3
98004: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
98005: LD_ADDR_VAR 0 16
98009: PUSH
98010: LD_VAR 0 16
98014: PPUSH
98015: LD_VAR 0 7
98019: PPUSH
98020: CALL_OW 3
98024: ST_TO_ADDR
// continue ;
98025: GO 97865
// end ; if f_repair then
98027: LD_VAR 0 22
98031: IFFALSE 98520
// begin if GetType ( group [ i ] ) = unit_vehicle then
98033: LD_VAR 0 4
98037: PUSH
98038: LD_VAR 0 7
98042: ARRAY
98043: PPUSH
98044: CALL_OW 247
98048: PUSH
98049: LD_INT 2
98051: EQUAL
98052: IFFALSE 98242
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
98054: LD_VAR 0 4
98058: PUSH
98059: LD_VAR 0 7
98063: ARRAY
98064: PPUSH
98065: CALL_OW 256
98069: PUSH
98070: LD_INT 700
98072: LESS
98073: PUSH
98074: LD_VAR 0 4
98078: PUSH
98079: LD_VAR 0 7
98083: ARRAY
98084: PUSH
98085: LD_VAR 0 32
98089: IN
98090: NOT
98091: AND
98092: IFFALSE 98116
// to_repair := to_repair union group [ i ] ;
98094: LD_ADDR_VAR 0 32
98098: PUSH
98099: LD_VAR 0 32
98103: PUSH
98104: LD_VAR 0 4
98108: PUSH
98109: LD_VAR 0 7
98113: ARRAY
98114: UNION
98115: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
98116: LD_VAR 0 4
98120: PUSH
98121: LD_VAR 0 7
98125: ARRAY
98126: PPUSH
98127: CALL_OW 256
98131: PUSH
98132: LD_INT 1000
98134: EQUAL
98135: PUSH
98136: LD_VAR 0 4
98140: PUSH
98141: LD_VAR 0 7
98145: ARRAY
98146: PUSH
98147: LD_VAR 0 32
98151: IN
98152: AND
98153: IFFALSE 98177
// to_repair := to_repair diff group [ i ] ;
98155: LD_ADDR_VAR 0 32
98159: PUSH
98160: LD_VAR 0 32
98164: PUSH
98165: LD_VAR 0 4
98169: PUSH
98170: LD_VAR 0 7
98174: ARRAY
98175: DIFF
98176: ST_TO_ADDR
// if group [ i ] in to_repair then
98177: LD_VAR 0 4
98181: PUSH
98182: LD_VAR 0 7
98186: ARRAY
98187: PUSH
98188: LD_VAR 0 32
98192: IN
98193: IFFALSE 98240
// begin if not IsInArea ( group [ i ] , f_repair ) then
98195: LD_VAR 0 4
98199: PUSH
98200: LD_VAR 0 7
98204: ARRAY
98205: PPUSH
98206: LD_VAR 0 22
98210: PPUSH
98211: CALL_OW 308
98215: NOT
98216: IFFALSE 98238
// ComMoveToArea ( group [ i ] , f_repair ) ;
98218: LD_VAR 0 4
98222: PUSH
98223: LD_VAR 0 7
98227: ARRAY
98228: PPUSH
98229: LD_VAR 0 22
98233: PPUSH
98234: CALL_OW 113
// continue ;
98238: GO 97865
// end ; end else
98240: GO 98520
// if group [ i ] in repairs then
98242: LD_VAR 0 4
98246: PUSH
98247: LD_VAR 0 7
98251: ARRAY
98252: PUSH
98253: LD_VAR 0 33
98257: IN
98258: IFFALSE 98520
// begin if IsInUnit ( group [ i ] ) then
98260: LD_VAR 0 4
98264: PUSH
98265: LD_VAR 0 7
98269: ARRAY
98270: PPUSH
98271: CALL_OW 310
98275: IFFALSE 98343
// begin z := IsInUnit ( group [ i ] ) ;
98277: LD_ADDR_VAR 0 13
98281: PUSH
98282: LD_VAR 0 4
98286: PUSH
98287: LD_VAR 0 7
98291: ARRAY
98292: PPUSH
98293: CALL_OW 310
98297: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
98298: LD_VAR 0 13
98302: PUSH
98303: LD_VAR 0 32
98307: IN
98308: PUSH
98309: LD_VAR 0 13
98313: PPUSH
98314: LD_VAR 0 22
98318: PPUSH
98319: CALL_OW 308
98323: AND
98324: IFFALSE 98341
// ComExitVehicle ( group [ i ] ) ;
98326: LD_VAR 0 4
98330: PUSH
98331: LD_VAR 0 7
98335: ARRAY
98336: PPUSH
98337: CALL_OW 121
// end else
98341: GO 98520
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
98343: LD_ADDR_VAR 0 13
98347: PUSH
98348: LD_VAR 0 4
98352: PPUSH
98353: LD_INT 95
98355: PUSH
98356: LD_VAR 0 22
98360: PUSH
98361: EMPTY
98362: LIST
98363: LIST
98364: PUSH
98365: LD_INT 58
98367: PUSH
98368: EMPTY
98369: LIST
98370: PUSH
98371: EMPTY
98372: LIST
98373: LIST
98374: PPUSH
98375: CALL_OW 72
98379: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
98380: LD_VAR 0 4
98384: PUSH
98385: LD_VAR 0 7
98389: ARRAY
98390: PPUSH
98391: CALL_OW 314
98395: NOT
98396: IFFALSE 98518
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
98398: LD_ADDR_VAR 0 10
98402: PUSH
98403: LD_VAR 0 13
98407: PPUSH
98408: LD_VAR 0 4
98412: PUSH
98413: LD_VAR 0 7
98417: ARRAY
98418: PPUSH
98419: CALL_OW 74
98423: ST_TO_ADDR
// if not x then
98424: LD_VAR 0 10
98428: NOT
98429: IFFALSE 98433
// continue ;
98431: GO 97865
// if GetLives ( x ) < 1000 then
98433: LD_VAR 0 10
98437: PPUSH
98438: CALL_OW 256
98442: PUSH
98443: LD_INT 1000
98445: LESS
98446: IFFALSE 98470
// ComRepairVehicle ( group [ i ] , x ) else
98448: LD_VAR 0 4
98452: PUSH
98453: LD_VAR 0 7
98457: ARRAY
98458: PPUSH
98459: LD_VAR 0 10
98463: PPUSH
98464: CALL_OW 129
98468: GO 98518
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
98470: LD_VAR 0 23
98474: PUSH
98475: LD_VAR 0 4
98479: PUSH
98480: LD_VAR 0 7
98484: ARRAY
98485: PPUSH
98486: CALL_OW 256
98490: PUSH
98491: LD_INT 1000
98493: LESS
98494: AND
98495: NOT
98496: IFFALSE 98518
// ComEnterUnit ( group [ i ] , x ) ;
98498: LD_VAR 0 4
98502: PUSH
98503: LD_VAR 0 7
98507: ARRAY
98508: PPUSH
98509: LD_VAR 0 10
98513: PPUSH
98514: CALL_OW 120
// end ; continue ;
98518: GO 97865
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
98520: LD_VAR 0 23
98524: PUSH
98525: LD_VAR 0 4
98529: PUSH
98530: LD_VAR 0 7
98534: ARRAY
98535: PPUSH
98536: CALL_OW 247
98540: PUSH
98541: LD_INT 1
98543: EQUAL
98544: AND
98545: IFFALSE 99023
// begin if group [ i ] in healers then
98547: LD_VAR 0 4
98551: PUSH
98552: LD_VAR 0 7
98556: ARRAY
98557: PUSH
98558: LD_VAR 0 31
98562: IN
98563: IFFALSE 98836
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
98565: LD_VAR 0 4
98569: PUSH
98570: LD_VAR 0 7
98574: ARRAY
98575: PPUSH
98576: LD_VAR 0 23
98580: PPUSH
98581: CALL_OW 308
98585: NOT
98586: PUSH
98587: LD_VAR 0 4
98591: PUSH
98592: LD_VAR 0 7
98596: ARRAY
98597: PPUSH
98598: CALL_OW 314
98602: NOT
98603: AND
98604: IFFALSE 98628
// ComMoveToArea ( group [ i ] , f_heal ) else
98606: LD_VAR 0 4
98610: PUSH
98611: LD_VAR 0 7
98615: ARRAY
98616: PPUSH
98617: LD_VAR 0 23
98621: PPUSH
98622: CALL_OW 113
98626: GO 98834
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
98628: LD_VAR 0 4
98632: PUSH
98633: LD_VAR 0 7
98637: ARRAY
98638: PPUSH
98639: CALL 52673 0 1
98643: PPUSH
98644: CALL_OW 256
98648: PUSH
98649: LD_INT 1000
98651: EQUAL
98652: IFFALSE 98671
// ComStop ( group [ i ] ) else
98654: LD_VAR 0 4
98658: PUSH
98659: LD_VAR 0 7
98663: ARRAY
98664: PPUSH
98665: CALL_OW 141
98669: GO 98834
// if not HasTask ( group [ i ] ) and to_heal then
98671: LD_VAR 0 4
98675: PUSH
98676: LD_VAR 0 7
98680: ARRAY
98681: PPUSH
98682: CALL_OW 314
98686: NOT
98687: PUSH
98688: LD_VAR 0 30
98692: AND
98693: IFFALSE 98834
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
98695: LD_ADDR_VAR 0 13
98699: PUSH
98700: LD_VAR 0 30
98704: PPUSH
98705: LD_INT 3
98707: PUSH
98708: LD_INT 54
98710: PUSH
98711: EMPTY
98712: LIST
98713: PUSH
98714: EMPTY
98715: LIST
98716: LIST
98717: PPUSH
98718: CALL_OW 72
98722: PPUSH
98723: LD_VAR 0 4
98727: PUSH
98728: LD_VAR 0 7
98732: ARRAY
98733: PPUSH
98734: CALL_OW 74
98738: ST_TO_ADDR
// if z then
98739: LD_VAR 0 13
98743: IFFALSE 98834
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
98745: LD_INT 91
98747: PUSH
98748: LD_VAR 0 13
98752: PUSH
98753: LD_INT 10
98755: PUSH
98756: EMPTY
98757: LIST
98758: LIST
98759: LIST
98760: PUSH
98761: LD_INT 81
98763: PUSH
98764: LD_VAR 0 13
98768: PPUSH
98769: CALL_OW 255
98773: PUSH
98774: EMPTY
98775: LIST
98776: LIST
98777: PUSH
98778: EMPTY
98779: LIST
98780: LIST
98781: PPUSH
98782: CALL_OW 69
98786: PUSH
98787: LD_INT 0
98789: EQUAL
98790: IFFALSE 98814
// ComHeal ( group [ i ] , z ) else
98792: LD_VAR 0 4
98796: PUSH
98797: LD_VAR 0 7
98801: ARRAY
98802: PPUSH
98803: LD_VAR 0 13
98807: PPUSH
98808: CALL_OW 128
98812: GO 98834
// ComMoveToArea ( group [ i ] , f_heal ) ;
98814: LD_VAR 0 4
98818: PUSH
98819: LD_VAR 0 7
98823: ARRAY
98824: PPUSH
98825: LD_VAR 0 23
98829: PPUSH
98830: CALL_OW 113
// end ; continue ;
98834: GO 97865
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
98836: LD_VAR 0 4
98840: PUSH
98841: LD_VAR 0 7
98845: ARRAY
98846: PPUSH
98847: CALL_OW 256
98851: PUSH
98852: LD_INT 700
98854: LESS
98855: PUSH
98856: LD_VAR 0 4
98860: PUSH
98861: LD_VAR 0 7
98865: ARRAY
98866: PUSH
98867: LD_VAR 0 30
98871: IN
98872: NOT
98873: AND
98874: IFFALSE 98898
// to_heal := to_heal union group [ i ] ;
98876: LD_ADDR_VAR 0 30
98880: PUSH
98881: LD_VAR 0 30
98885: PUSH
98886: LD_VAR 0 4
98890: PUSH
98891: LD_VAR 0 7
98895: ARRAY
98896: UNION
98897: ST_TO_ADDR
// if group [ i ] in to_heal then
98898: LD_VAR 0 4
98902: PUSH
98903: LD_VAR 0 7
98907: ARRAY
98908: PUSH
98909: LD_VAR 0 30
98913: IN
98914: IFFALSE 99023
// begin if GetLives ( group [ i ] ) = 1000 then
98916: LD_VAR 0 4
98920: PUSH
98921: LD_VAR 0 7
98925: ARRAY
98926: PPUSH
98927: CALL_OW 256
98931: PUSH
98932: LD_INT 1000
98934: EQUAL
98935: IFFALSE 98961
// to_heal := to_heal diff group [ i ] else
98937: LD_ADDR_VAR 0 30
98941: PUSH
98942: LD_VAR 0 30
98946: PUSH
98947: LD_VAR 0 4
98951: PUSH
98952: LD_VAR 0 7
98956: ARRAY
98957: DIFF
98958: ST_TO_ADDR
98959: GO 99023
// begin if not IsInArea ( group [ i ] , to_heal ) then
98961: LD_VAR 0 4
98965: PUSH
98966: LD_VAR 0 7
98970: ARRAY
98971: PPUSH
98972: LD_VAR 0 30
98976: PPUSH
98977: CALL_OW 308
98981: NOT
98982: IFFALSE 99006
// ComMoveToArea ( group [ i ] , f_heal ) else
98984: LD_VAR 0 4
98988: PUSH
98989: LD_VAR 0 7
98993: ARRAY
98994: PPUSH
98995: LD_VAR 0 23
98999: PPUSH
99000: CALL_OW 113
99004: GO 99021
// ComHold ( group [ i ] ) ;
99006: LD_VAR 0 4
99010: PUSH
99011: LD_VAR 0 7
99015: ARRAY
99016: PPUSH
99017: CALL_OW 140
// continue ;
99021: GO 97865
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
99023: LD_VAR 0 4
99027: PUSH
99028: LD_VAR 0 7
99032: ARRAY
99033: PPUSH
99034: LD_INT 10
99036: PPUSH
99037: CALL 51093 0 2
99041: NOT
99042: PUSH
99043: LD_VAR 0 16
99047: PUSH
99048: LD_VAR 0 7
99052: ARRAY
99053: PUSH
99054: EMPTY
99055: EQUAL
99056: NOT
99057: AND
99058: IFFALSE 99324
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
99060: LD_VAR 0 4
99064: PUSH
99065: LD_VAR 0 7
99069: ARRAY
99070: PPUSH
99071: CALL_OW 262
99075: PUSH
99076: LD_INT 1
99078: PUSH
99079: LD_INT 2
99081: PUSH
99082: EMPTY
99083: LIST
99084: LIST
99085: IN
99086: IFFALSE 99127
// if GetFuel ( group [ i ] ) < 10 then
99088: LD_VAR 0 4
99092: PUSH
99093: LD_VAR 0 7
99097: ARRAY
99098: PPUSH
99099: CALL_OW 261
99103: PUSH
99104: LD_INT 10
99106: LESS
99107: IFFALSE 99127
// SetFuel ( group [ i ] , 12 ) ;
99109: LD_VAR 0 4
99113: PUSH
99114: LD_VAR 0 7
99118: ARRAY
99119: PPUSH
99120: LD_INT 12
99122: PPUSH
99123: CALL_OW 240
// if units_path [ i ] then
99127: LD_VAR 0 16
99131: PUSH
99132: LD_VAR 0 7
99136: ARRAY
99137: IFFALSE 99322
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
99139: LD_VAR 0 4
99143: PUSH
99144: LD_VAR 0 7
99148: ARRAY
99149: PPUSH
99150: LD_VAR 0 16
99154: PUSH
99155: LD_VAR 0 7
99159: ARRAY
99160: PUSH
99161: LD_INT 1
99163: ARRAY
99164: PUSH
99165: LD_INT 1
99167: ARRAY
99168: PPUSH
99169: LD_VAR 0 16
99173: PUSH
99174: LD_VAR 0 7
99178: ARRAY
99179: PUSH
99180: LD_INT 1
99182: ARRAY
99183: PUSH
99184: LD_INT 2
99186: ARRAY
99187: PPUSH
99188: CALL_OW 297
99192: PUSH
99193: LD_INT 6
99195: GREATER
99196: IFFALSE 99271
// begin if not HasTask ( group [ i ] ) then
99198: LD_VAR 0 4
99202: PUSH
99203: LD_VAR 0 7
99207: ARRAY
99208: PPUSH
99209: CALL_OW 314
99213: NOT
99214: IFFALSE 99269
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
99216: LD_VAR 0 4
99220: PUSH
99221: LD_VAR 0 7
99225: ARRAY
99226: PPUSH
99227: LD_VAR 0 16
99231: PUSH
99232: LD_VAR 0 7
99236: ARRAY
99237: PUSH
99238: LD_INT 1
99240: ARRAY
99241: PUSH
99242: LD_INT 1
99244: ARRAY
99245: PPUSH
99246: LD_VAR 0 16
99250: PUSH
99251: LD_VAR 0 7
99255: ARRAY
99256: PUSH
99257: LD_INT 1
99259: ARRAY
99260: PUSH
99261: LD_INT 2
99263: ARRAY
99264: PPUSH
99265: CALL_OW 114
// end else
99269: GO 99322
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
99271: LD_ADDR_VAR 0 15
99275: PUSH
99276: LD_VAR 0 16
99280: PUSH
99281: LD_VAR 0 7
99285: ARRAY
99286: PPUSH
99287: LD_INT 1
99289: PPUSH
99290: CALL_OW 3
99294: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
99295: LD_ADDR_VAR 0 16
99299: PUSH
99300: LD_VAR 0 16
99304: PPUSH
99305: LD_VAR 0 7
99309: PPUSH
99310: LD_VAR 0 15
99314: PPUSH
99315: CALL_OW 1
99319: ST_TO_ADDR
// continue ;
99320: GO 97865
// end ; end ; end else
99322: GO 101986
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
99324: LD_ADDR_VAR 0 14
99328: PUSH
99329: LD_INT 81
99331: PUSH
99332: LD_VAR 0 4
99336: PUSH
99337: LD_VAR 0 7
99341: ARRAY
99342: PPUSH
99343: CALL_OW 255
99347: PUSH
99348: EMPTY
99349: LIST
99350: LIST
99351: PPUSH
99352: CALL_OW 69
99356: ST_TO_ADDR
// if not tmp then
99357: LD_VAR 0 14
99361: NOT
99362: IFFALSE 99366
// continue ;
99364: GO 97865
// if f_ignore_area then
99366: LD_VAR 0 17
99370: IFFALSE 99458
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
99372: LD_ADDR_VAR 0 15
99376: PUSH
99377: LD_VAR 0 14
99381: PPUSH
99382: LD_INT 3
99384: PUSH
99385: LD_INT 92
99387: PUSH
99388: LD_VAR 0 17
99392: PUSH
99393: LD_INT 1
99395: ARRAY
99396: PUSH
99397: LD_VAR 0 17
99401: PUSH
99402: LD_INT 2
99404: ARRAY
99405: PUSH
99406: LD_VAR 0 17
99410: PUSH
99411: LD_INT 3
99413: ARRAY
99414: PUSH
99415: EMPTY
99416: LIST
99417: LIST
99418: LIST
99419: LIST
99420: PUSH
99421: EMPTY
99422: LIST
99423: LIST
99424: PPUSH
99425: CALL_OW 72
99429: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99430: LD_VAR 0 14
99434: PUSH
99435: LD_VAR 0 15
99439: DIFF
99440: IFFALSE 99458
// tmp := tmp diff tmp2 ;
99442: LD_ADDR_VAR 0 14
99446: PUSH
99447: LD_VAR 0 14
99451: PUSH
99452: LD_VAR 0 15
99456: DIFF
99457: ST_TO_ADDR
// end ; if not f_murder then
99458: LD_VAR 0 20
99462: NOT
99463: IFFALSE 99521
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
99465: LD_ADDR_VAR 0 15
99469: PUSH
99470: LD_VAR 0 14
99474: PPUSH
99475: LD_INT 3
99477: PUSH
99478: LD_INT 50
99480: PUSH
99481: EMPTY
99482: LIST
99483: PUSH
99484: EMPTY
99485: LIST
99486: LIST
99487: PPUSH
99488: CALL_OW 72
99492: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99493: LD_VAR 0 14
99497: PUSH
99498: LD_VAR 0 15
99502: DIFF
99503: IFFALSE 99521
// tmp := tmp diff tmp2 ;
99505: LD_ADDR_VAR 0 14
99509: PUSH
99510: LD_VAR 0 14
99514: PUSH
99515: LD_VAR 0 15
99519: DIFF
99520: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
99521: LD_ADDR_VAR 0 14
99525: PUSH
99526: LD_VAR 0 4
99530: PUSH
99531: LD_VAR 0 7
99535: ARRAY
99536: PPUSH
99537: LD_VAR 0 14
99541: PPUSH
99542: LD_INT 1
99544: PPUSH
99545: LD_INT 1
99547: PPUSH
99548: CALL 24736 0 4
99552: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
99553: LD_VAR 0 4
99557: PUSH
99558: LD_VAR 0 7
99562: ARRAY
99563: PPUSH
99564: CALL_OW 257
99568: PUSH
99569: LD_INT 1
99571: EQUAL
99572: IFFALSE 100020
// begin if WantPlant ( group [ i ] ) then
99574: LD_VAR 0 4
99578: PUSH
99579: LD_VAR 0 7
99583: ARRAY
99584: PPUSH
99585: CALL 24237 0 1
99589: IFFALSE 99593
// continue ;
99591: GO 97865
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
99593: LD_VAR 0 18
99597: PUSH
99598: LD_VAR 0 4
99602: PUSH
99603: LD_VAR 0 7
99607: ARRAY
99608: PPUSH
99609: CALL_OW 310
99613: NOT
99614: AND
99615: PUSH
99616: LD_VAR 0 14
99620: PUSH
99621: LD_INT 1
99623: ARRAY
99624: PUSH
99625: LD_VAR 0 14
99629: PPUSH
99630: LD_INT 21
99632: PUSH
99633: LD_INT 2
99635: PUSH
99636: EMPTY
99637: LIST
99638: LIST
99639: PUSH
99640: LD_INT 58
99642: PUSH
99643: EMPTY
99644: LIST
99645: PUSH
99646: EMPTY
99647: LIST
99648: LIST
99649: PPUSH
99650: CALL_OW 72
99654: IN
99655: AND
99656: IFFALSE 99692
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
99658: LD_VAR 0 4
99662: PUSH
99663: LD_VAR 0 7
99667: ARRAY
99668: PPUSH
99669: LD_VAR 0 14
99673: PUSH
99674: LD_INT 1
99676: ARRAY
99677: PPUSH
99678: CALL_OW 120
// attacking := true ;
99682: LD_ADDR_VAR 0 29
99686: PUSH
99687: LD_INT 1
99689: ST_TO_ADDR
// continue ;
99690: GO 97865
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
99692: LD_VAR 0 26
99696: PUSH
99697: LD_VAR 0 4
99701: PUSH
99702: LD_VAR 0 7
99706: ARRAY
99707: PPUSH
99708: CALL_OW 257
99712: PUSH
99713: LD_INT 1
99715: EQUAL
99716: AND
99717: PUSH
99718: LD_VAR 0 4
99722: PUSH
99723: LD_VAR 0 7
99727: ARRAY
99728: PPUSH
99729: CALL_OW 256
99733: PUSH
99734: LD_INT 800
99736: LESS
99737: AND
99738: PUSH
99739: LD_VAR 0 4
99743: PUSH
99744: LD_VAR 0 7
99748: ARRAY
99749: PPUSH
99750: CALL_OW 318
99754: NOT
99755: AND
99756: IFFALSE 99773
// ComCrawl ( group [ i ] ) ;
99758: LD_VAR 0 4
99762: PUSH
99763: LD_VAR 0 7
99767: ARRAY
99768: PPUSH
99769: CALL_OW 137
// if f_mines then
99773: LD_VAR 0 21
99777: IFFALSE 100020
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
99779: LD_VAR 0 14
99783: PUSH
99784: LD_INT 1
99786: ARRAY
99787: PPUSH
99788: CALL_OW 247
99792: PUSH
99793: LD_INT 3
99795: EQUAL
99796: PUSH
99797: LD_VAR 0 14
99801: PUSH
99802: LD_INT 1
99804: ARRAY
99805: PUSH
99806: LD_VAR 0 27
99810: IN
99811: NOT
99812: AND
99813: IFFALSE 100020
// begin x := GetX ( tmp [ 1 ] ) ;
99815: LD_ADDR_VAR 0 10
99819: PUSH
99820: LD_VAR 0 14
99824: PUSH
99825: LD_INT 1
99827: ARRAY
99828: PPUSH
99829: CALL_OW 250
99833: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
99834: LD_ADDR_VAR 0 11
99838: PUSH
99839: LD_VAR 0 14
99843: PUSH
99844: LD_INT 1
99846: ARRAY
99847: PPUSH
99848: CALL_OW 251
99852: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
99853: LD_ADDR_VAR 0 12
99857: PUSH
99858: LD_VAR 0 4
99862: PUSH
99863: LD_VAR 0 7
99867: ARRAY
99868: PPUSH
99869: CALL 51178 0 1
99873: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
99874: LD_VAR 0 4
99878: PUSH
99879: LD_VAR 0 7
99883: ARRAY
99884: PPUSH
99885: LD_VAR 0 10
99889: PPUSH
99890: LD_VAR 0 11
99894: PPUSH
99895: LD_VAR 0 14
99899: PUSH
99900: LD_INT 1
99902: ARRAY
99903: PPUSH
99904: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
99908: LD_VAR 0 4
99912: PUSH
99913: LD_VAR 0 7
99917: ARRAY
99918: PPUSH
99919: LD_VAR 0 10
99923: PPUSH
99924: LD_VAR 0 12
99928: PPUSH
99929: LD_INT 7
99931: PPUSH
99932: CALL_OW 272
99936: PPUSH
99937: LD_VAR 0 11
99941: PPUSH
99942: LD_VAR 0 12
99946: PPUSH
99947: LD_INT 7
99949: PPUSH
99950: CALL_OW 273
99954: PPUSH
99955: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
99959: LD_VAR 0 4
99963: PUSH
99964: LD_VAR 0 7
99968: ARRAY
99969: PPUSH
99970: LD_INT 71
99972: PPUSH
99973: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
99977: LD_ADDR_VAR 0 27
99981: PUSH
99982: LD_VAR 0 27
99986: PPUSH
99987: LD_VAR 0 27
99991: PUSH
99992: LD_INT 1
99994: PLUS
99995: PPUSH
99996: LD_VAR 0 14
100000: PUSH
100001: LD_INT 1
100003: ARRAY
100004: PPUSH
100005: CALL_OW 1
100009: ST_TO_ADDR
// attacking := true ;
100010: LD_ADDR_VAR 0 29
100014: PUSH
100015: LD_INT 1
100017: ST_TO_ADDR
// continue ;
100018: GO 97865
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
100020: LD_VAR 0 4
100024: PUSH
100025: LD_VAR 0 7
100029: ARRAY
100030: PPUSH
100031: CALL_OW 257
100035: PUSH
100036: LD_INT 17
100038: EQUAL
100039: PUSH
100040: LD_VAR 0 4
100044: PUSH
100045: LD_VAR 0 7
100049: ARRAY
100050: PPUSH
100051: CALL_OW 110
100055: PUSH
100056: LD_INT 71
100058: EQUAL
100059: NOT
100060: AND
100061: IFFALSE 100207
// begin attacking := false ;
100063: LD_ADDR_VAR 0 29
100067: PUSH
100068: LD_INT 0
100070: ST_TO_ADDR
// k := 5 ;
100071: LD_ADDR_VAR 0 9
100075: PUSH
100076: LD_INT 5
100078: ST_TO_ADDR
// if tmp < k then
100079: LD_VAR 0 14
100083: PUSH
100084: LD_VAR 0 9
100088: LESS
100089: IFFALSE 100101
// k := tmp ;
100091: LD_ADDR_VAR 0 9
100095: PUSH
100096: LD_VAR 0 14
100100: ST_TO_ADDR
// for j = 1 to k do
100101: LD_ADDR_VAR 0 8
100105: PUSH
100106: DOUBLE
100107: LD_INT 1
100109: DEC
100110: ST_TO_ADDR
100111: LD_VAR 0 9
100115: PUSH
100116: FOR_TO
100117: IFFALSE 100205
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
100119: LD_VAR 0 14
100123: PUSH
100124: LD_VAR 0 8
100128: ARRAY
100129: PUSH
100130: LD_VAR 0 14
100134: PPUSH
100135: LD_INT 58
100137: PUSH
100138: EMPTY
100139: LIST
100140: PPUSH
100141: CALL_OW 72
100145: IN
100146: NOT
100147: IFFALSE 100203
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
100149: LD_VAR 0 4
100153: PUSH
100154: LD_VAR 0 7
100158: ARRAY
100159: PPUSH
100160: LD_VAR 0 14
100164: PUSH
100165: LD_VAR 0 8
100169: ARRAY
100170: PPUSH
100171: CALL_OW 115
// attacking := true ;
100175: LD_ADDR_VAR 0 29
100179: PUSH
100180: LD_INT 1
100182: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
100183: LD_VAR 0 4
100187: PUSH
100188: LD_VAR 0 7
100192: ARRAY
100193: PPUSH
100194: LD_INT 71
100196: PPUSH
100197: CALL_OW 109
// continue ;
100201: GO 100116
// end ; end ;
100203: GO 100116
100205: POP
100206: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
100207: LD_VAR 0 4
100211: PUSH
100212: LD_VAR 0 7
100216: ARRAY
100217: PPUSH
100218: CALL_OW 257
100222: PUSH
100223: LD_INT 8
100225: EQUAL
100226: PUSH
100227: LD_VAR 0 4
100231: PUSH
100232: LD_VAR 0 7
100236: ARRAY
100237: PPUSH
100238: CALL_OW 264
100242: PUSH
100243: LD_INT 28
100245: PUSH
100246: LD_INT 45
100248: PUSH
100249: LD_INT 7
100251: PUSH
100252: LD_INT 47
100254: PUSH
100255: EMPTY
100256: LIST
100257: LIST
100258: LIST
100259: LIST
100260: IN
100261: OR
100262: IFFALSE 100518
// begin attacking := false ;
100264: LD_ADDR_VAR 0 29
100268: PUSH
100269: LD_INT 0
100271: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
100272: LD_VAR 0 14
100276: PUSH
100277: LD_INT 1
100279: ARRAY
100280: PPUSH
100281: CALL_OW 266
100285: PUSH
100286: LD_INT 32
100288: PUSH
100289: LD_INT 31
100291: PUSH
100292: LD_INT 33
100294: PUSH
100295: LD_INT 4
100297: PUSH
100298: LD_INT 5
100300: PUSH
100301: EMPTY
100302: LIST
100303: LIST
100304: LIST
100305: LIST
100306: LIST
100307: IN
100308: IFFALSE 100494
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
100310: LD_ADDR_VAR 0 9
100314: PUSH
100315: LD_VAR 0 14
100319: PUSH
100320: LD_INT 1
100322: ARRAY
100323: PPUSH
100324: CALL_OW 266
100328: PPUSH
100329: LD_VAR 0 14
100333: PUSH
100334: LD_INT 1
100336: ARRAY
100337: PPUSH
100338: CALL_OW 250
100342: PPUSH
100343: LD_VAR 0 14
100347: PUSH
100348: LD_INT 1
100350: ARRAY
100351: PPUSH
100352: CALL_OW 251
100356: PPUSH
100357: LD_VAR 0 14
100361: PUSH
100362: LD_INT 1
100364: ARRAY
100365: PPUSH
100366: CALL_OW 254
100370: PPUSH
100371: LD_VAR 0 14
100375: PUSH
100376: LD_INT 1
100378: ARRAY
100379: PPUSH
100380: CALL_OW 248
100384: PPUSH
100385: LD_INT 0
100387: PPUSH
100388: CALL 32548 0 6
100392: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
100393: LD_ADDR_VAR 0 8
100397: PUSH
100398: LD_VAR 0 4
100402: PUSH
100403: LD_VAR 0 7
100407: ARRAY
100408: PPUSH
100409: LD_VAR 0 9
100413: PPUSH
100414: CALL 51218 0 2
100418: ST_TO_ADDR
// if j then
100419: LD_VAR 0 8
100423: IFFALSE 100492
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
100425: LD_VAR 0 8
100429: PUSH
100430: LD_INT 1
100432: ARRAY
100433: PPUSH
100434: LD_VAR 0 8
100438: PUSH
100439: LD_INT 2
100441: ARRAY
100442: PPUSH
100443: CALL_OW 488
100447: IFFALSE 100492
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
100449: LD_VAR 0 4
100453: PUSH
100454: LD_VAR 0 7
100458: ARRAY
100459: PPUSH
100460: LD_VAR 0 8
100464: PUSH
100465: LD_INT 1
100467: ARRAY
100468: PPUSH
100469: LD_VAR 0 8
100473: PUSH
100474: LD_INT 2
100476: ARRAY
100477: PPUSH
100478: CALL_OW 116
// attacking := true ;
100482: LD_ADDR_VAR 0 29
100486: PUSH
100487: LD_INT 1
100489: ST_TO_ADDR
// continue ;
100490: GO 97865
// end ; end else
100492: GO 100518
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100494: LD_VAR 0 4
100498: PUSH
100499: LD_VAR 0 7
100503: ARRAY
100504: PPUSH
100505: LD_VAR 0 14
100509: PUSH
100510: LD_INT 1
100512: ARRAY
100513: PPUSH
100514: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
100518: LD_VAR 0 4
100522: PUSH
100523: LD_VAR 0 7
100527: ARRAY
100528: PPUSH
100529: CALL_OW 265
100533: PUSH
100534: LD_INT 11
100536: EQUAL
100537: IFFALSE 100815
// begin k := 10 ;
100539: LD_ADDR_VAR 0 9
100543: PUSH
100544: LD_INT 10
100546: ST_TO_ADDR
// x := 0 ;
100547: LD_ADDR_VAR 0 10
100551: PUSH
100552: LD_INT 0
100554: ST_TO_ADDR
// if tmp < k then
100555: LD_VAR 0 14
100559: PUSH
100560: LD_VAR 0 9
100564: LESS
100565: IFFALSE 100577
// k := tmp ;
100567: LD_ADDR_VAR 0 9
100571: PUSH
100572: LD_VAR 0 14
100576: ST_TO_ADDR
// for j = k downto 1 do
100577: LD_ADDR_VAR 0 8
100581: PUSH
100582: DOUBLE
100583: LD_VAR 0 9
100587: INC
100588: ST_TO_ADDR
100589: LD_INT 1
100591: PUSH
100592: FOR_DOWNTO
100593: IFFALSE 100668
// begin if GetType ( tmp [ j ] ) = unit_human then
100595: LD_VAR 0 14
100599: PUSH
100600: LD_VAR 0 8
100604: ARRAY
100605: PPUSH
100606: CALL_OW 247
100610: PUSH
100611: LD_INT 1
100613: EQUAL
100614: IFFALSE 100666
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
100616: LD_VAR 0 4
100620: PUSH
100621: LD_VAR 0 7
100625: ARRAY
100626: PPUSH
100627: LD_VAR 0 14
100631: PUSH
100632: LD_VAR 0 8
100636: ARRAY
100637: PPUSH
100638: CALL 51489 0 2
// x := tmp [ j ] ;
100642: LD_ADDR_VAR 0 10
100646: PUSH
100647: LD_VAR 0 14
100651: PUSH
100652: LD_VAR 0 8
100656: ARRAY
100657: ST_TO_ADDR
// attacking := true ;
100658: LD_ADDR_VAR 0 29
100662: PUSH
100663: LD_INT 1
100665: ST_TO_ADDR
// end ; end ;
100666: GO 100592
100668: POP
100669: POP
// if not x then
100670: LD_VAR 0 10
100674: NOT
100675: IFFALSE 100815
// begin attacking := true ;
100677: LD_ADDR_VAR 0 29
100681: PUSH
100682: LD_INT 1
100684: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
100685: LD_VAR 0 4
100689: PUSH
100690: LD_VAR 0 7
100694: ARRAY
100695: PPUSH
100696: CALL_OW 250
100700: PPUSH
100701: LD_VAR 0 4
100705: PUSH
100706: LD_VAR 0 7
100710: ARRAY
100711: PPUSH
100712: CALL_OW 251
100716: PPUSH
100717: CALL_OW 546
100721: PUSH
100722: LD_INT 2
100724: ARRAY
100725: PUSH
100726: LD_VAR 0 14
100730: PUSH
100731: LD_INT 1
100733: ARRAY
100734: PPUSH
100735: CALL_OW 250
100739: PPUSH
100740: LD_VAR 0 14
100744: PUSH
100745: LD_INT 1
100747: ARRAY
100748: PPUSH
100749: CALL_OW 251
100753: PPUSH
100754: CALL_OW 546
100758: PUSH
100759: LD_INT 2
100761: ARRAY
100762: EQUAL
100763: IFFALSE 100791
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
100765: LD_VAR 0 4
100769: PUSH
100770: LD_VAR 0 7
100774: ARRAY
100775: PPUSH
100776: LD_VAR 0 14
100780: PUSH
100781: LD_INT 1
100783: ARRAY
100784: PPUSH
100785: CALL 51489 0 2
100789: GO 100815
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100791: LD_VAR 0 4
100795: PUSH
100796: LD_VAR 0 7
100800: ARRAY
100801: PPUSH
100802: LD_VAR 0 14
100806: PUSH
100807: LD_INT 1
100809: ARRAY
100810: PPUSH
100811: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
100815: LD_VAR 0 4
100819: PUSH
100820: LD_VAR 0 7
100824: ARRAY
100825: PPUSH
100826: CALL_OW 264
100830: PUSH
100831: LD_INT 29
100833: EQUAL
100834: IFFALSE 101200
// begin if WantsToAttack ( group [ i ] ) in bombed then
100836: LD_VAR 0 4
100840: PUSH
100841: LD_VAR 0 7
100845: ARRAY
100846: PPUSH
100847: CALL_OW 319
100851: PUSH
100852: LD_VAR 0 28
100856: IN
100857: IFFALSE 100861
// continue ;
100859: GO 97865
// k := 8 ;
100861: LD_ADDR_VAR 0 9
100865: PUSH
100866: LD_INT 8
100868: ST_TO_ADDR
// x := 0 ;
100869: LD_ADDR_VAR 0 10
100873: PUSH
100874: LD_INT 0
100876: ST_TO_ADDR
// if tmp < k then
100877: LD_VAR 0 14
100881: PUSH
100882: LD_VAR 0 9
100886: LESS
100887: IFFALSE 100899
// k := tmp ;
100889: LD_ADDR_VAR 0 9
100893: PUSH
100894: LD_VAR 0 14
100898: ST_TO_ADDR
// for j = 1 to k do
100899: LD_ADDR_VAR 0 8
100903: PUSH
100904: DOUBLE
100905: LD_INT 1
100907: DEC
100908: ST_TO_ADDR
100909: LD_VAR 0 9
100913: PUSH
100914: FOR_TO
100915: IFFALSE 101047
// begin if GetType ( tmp [ j ] ) = unit_building then
100917: LD_VAR 0 14
100921: PUSH
100922: LD_VAR 0 8
100926: ARRAY
100927: PPUSH
100928: CALL_OW 247
100932: PUSH
100933: LD_INT 3
100935: EQUAL
100936: IFFALSE 101045
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
100938: LD_VAR 0 14
100942: PUSH
100943: LD_VAR 0 8
100947: ARRAY
100948: PUSH
100949: LD_VAR 0 28
100953: IN
100954: NOT
100955: PUSH
100956: LD_VAR 0 14
100960: PUSH
100961: LD_VAR 0 8
100965: ARRAY
100966: PPUSH
100967: CALL_OW 313
100971: AND
100972: IFFALSE 101045
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
100974: LD_VAR 0 4
100978: PUSH
100979: LD_VAR 0 7
100983: ARRAY
100984: PPUSH
100985: LD_VAR 0 14
100989: PUSH
100990: LD_VAR 0 8
100994: ARRAY
100995: PPUSH
100996: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
101000: LD_ADDR_VAR 0 28
101004: PUSH
101005: LD_VAR 0 28
101009: PPUSH
101010: LD_VAR 0 28
101014: PUSH
101015: LD_INT 1
101017: PLUS
101018: PPUSH
101019: LD_VAR 0 14
101023: PUSH
101024: LD_VAR 0 8
101028: ARRAY
101029: PPUSH
101030: CALL_OW 1
101034: ST_TO_ADDR
// attacking := true ;
101035: LD_ADDR_VAR 0 29
101039: PUSH
101040: LD_INT 1
101042: ST_TO_ADDR
// break ;
101043: GO 101047
// end ; end ;
101045: GO 100914
101047: POP
101048: POP
// if not attacking and f_attack_depot then
101049: LD_VAR 0 29
101053: NOT
101054: PUSH
101055: LD_VAR 0 25
101059: AND
101060: IFFALSE 101155
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
101062: LD_ADDR_VAR 0 13
101066: PUSH
101067: LD_VAR 0 14
101071: PPUSH
101072: LD_INT 2
101074: PUSH
101075: LD_INT 30
101077: PUSH
101078: LD_INT 0
101080: PUSH
101081: EMPTY
101082: LIST
101083: LIST
101084: PUSH
101085: LD_INT 30
101087: PUSH
101088: LD_INT 1
101090: PUSH
101091: EMPTY
101092: LIST
101093: LIST
101094: PUSH
101095: EMPTY
101096: LIST
101097: LIST
101098: LIST
101099: PPUSH
101100: CALL_OW 72
101104: ST_TO_ADDR
// if z then
101105: LD_VAR 0 13
101109: IFFALSE 101155
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
101111: LD_VAR 0 4
101115: PUSH
101116: LD_VAR 0 7
101120: ARRAY
101121: PPUSH
101122: LD_VAR 0 13
101126: PPUSH
101127: LD_VAR 0 4
101131: PUSH
101132: LD_VAR 0 7
101136: ARRAY
101137: PPUSH
101138: CALL_OW 74
101142: PPUSH
101143: CALL_OW 115
// attacking := true ;
101147: LD_ADDR_VAR 0 29
101151: PUSH
101152: LD_INT 1
101154: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
101155: LD_VAR 0 4
101159: PUSH
101160: LD_VAR 0 7
101164: ARRAY
101165: PPUSH
101166: CALL_OW 256
101170: PUSH
101171: LD_INT 500
101173: LESS
101174: IFFALSE 101200
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101176: LD_VAR 0 4
101180: PUSH
101181: LD_VAR 0 7
101185: ARRAY
101186: PPUSH
101187: LD_VAR 0 14
101191: PUSH
101192: LD_INT 1
101194: ARRAY
101195: PPUSH
101196: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
101200: LD_VAR 0 4
101204: PUSH
101205: LD_VAR 0 7
101209: ARRAY
101210: PPUSH
101211: CALL_OW 264
101215: PUSH
101216: LD_INT 49
101218: EQUAL
101219: IFFALSE 101340
// begin if not HasTask ( group [ i ] ) then
101221: LD_VAR 0 4
101225: PUSH
101226: LD_VAR 0 7
101230: ARRAY
101231: PPUSH
101232: CALL_OW 314
101236: NOT
101237: IFFALSE 101340
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
101239: LD_ADDR_VAR 0 9
101243: PUSH
101244: LD_INT 81
101246: PUSH
101247: LD_VAR 0 4
101251: PUSH
101252: LD_VAR 0 7
101256: ARRAY
101257: PPUSH
101258: CALL_OW 255
101262: PUSH
101263: EMPTY
101264: LIST
101265: LIST
101266: PPUSH
101267: CALL_OW 69
101271: PPUSH
101272: LD_VAR 0 4
101276: PUSH
101277: LD_VAR 0 7
101281: ARRAY
101282: PPUSH
101283: CALL_OW 74
101287: ST_TO_ADDR
// if k then
101288: LD_VAR 0 9
101292: IFFALSE 101340
// if GetDistUnits ( group [ i ] , k ) > 10 then
101294: LD_VAR 0 4
101298: PUSH
101299: LD_VAR 0 7
101303: ARRAY
101304: PPUSH
101305: LD_VAR 0 9
101309: PPUSH
101310: CALL_OW 296
101314: PUSH
101315: LD_INT 10
101317: GREATER
101318: IFFALSE 101340
// ComMoveUnit ( group [ i ] , k ) ;
101320: LD_VAR 0 4
101324: PUSH
101325: LD_VAR 0 7
101329: ARRAY
101330: PPUSH
101331: LD_VAR 0 9
101335: PPUSH
101336: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
101340: LD_VAR 0 4
101344: PUSH
101345: LD_VAR 0 7
101349: ARRAY
101350: PPUSH
101351: CALL_OW 256
101355: PUSH
101356: LD_INT 250
101358: LESS
101359: PUSH
101360: LD_VAR 0 4
101364: PUSH
101365: LD_VAR 0 7
101369: ARRAY
101370: PUSH
101371: LD_INT 21
101373: PUSH
101374: LD_INT 2
101376: PUSH
101377: EMPTY
101378: LIST
101379: LIST
101380: PUSH
101381: LD_INT 23
101383: PUSH
101384: LD_INT 2
101386: PUSH
101387: EMPTY
101388: LIST
101389: LIST
101390: PUSH
101391: EMPTY
101392: LIST
101393: LIST
101394: PPUSH
101395: CALL_OW 69
101399: IN
101400: AND
101401: IFFALSE 101526
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
101403: LD_ADDR_VAR 0 9
101407: PUSH
101408: LD_OWVAR 3
101412: PUSH
101413: LD_VAR 0 4
101417: PUSH
101418: LD_VAR 0 7
101422: ARRAY
101423: DIFF
101424: PPUSH
101425: LD_VAR 0 4
101429: PUSH
101430: LD_VAR 0 7
101434: ARRAY
101435: PPUSH
101436: CALL_OW 74
101440: ST_TO_ADDR
// if not k then
101441: LD_VAR 0 9
101445: NOT
101446: IFFALSE 101450
// continue ;
101448: GO 97865
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
101450: LD_VAR 0 9
101454: PUSH
101455: LD_INT 81
101457: PUSH
101458: LD_VAR 0 4
101462: PUSH
101463: LD_VAR 0 7
101467: ARRAY
101468: PPUSH
101469: CALL_OW 255
101473: PUSH
101474: EMPTY
101475: LIST
101476: LIST
101477: PPUSH
101478: CALL_OW 69
101482: IN
101483: PUSH
101484: LD_VAR 0 9
101488: PPUSH
101489: LD_VAR 0 4
101493: PUSH
101494: LD_VAR 0 7
101498: ARRAY
101499: PPUSH
101500: CALL_OW 296
101504: PUSH
101505: LD_INT 5
101507: LESS
101508: AND
101509: IFFALSE 101526
// ComAutodestruct ( group [ i ] ) ;
101511: LD_VAR 0 4
101515: PUSH
101516: LD_VAR 0 7
101520: ARRAY
101521: PPUSH
101522: CALL 51387 0 1
// end ; if f_attack_depot then
101526: LD_VAR 0 25
101530: IFFALSE 101642
// begin k := 6 ;
101532: LD_ADDR_VAR 0 9
101536: PUSH
101537: LD_INT 6
101539: ST_TO_ADDR
// if tmp < k then
101540: LD_VAR 0 14
101544: PUSH
101545: LD_VAR 0 9
101549: LESS
101550: IFFALSE 101562
// k := tmp ;
101552: LD_ADDR_VAR 0 9
101556: PUSH
101557: LD_VAR 0 14
101561: ST_TO_ADDR
// for j = 1 to k do
101562: LD_ADDR_VAR 0 8
101566: PUSH
101567: DOUBLE
101568: LD_INT 1
101570: DEC
101571: ST_TO_ADDR
101572: LD_VAR 0 9
101576: PUSH
101577: FOR_TO
101578: IFFALSE 101640
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
101580: LD_VAR 0 8
101584: PPUSH
101585: CALL_OW 266
101589: PUSH
101590: LD_INT 0
101592: PUSH
101593: LD_INT 1
101595: PUSH
101596: EMPTY
101597: LIST
101598: LIST
101599: IN
101600: IFFALSE 101638
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101602: LD_VAR 0 4
101606: PUSH
101607: LD_VAR 0 7
101611: ARRAY
101612: PPUSH
101613: LD_VAR 0 14
101617: PUSH
101618: LD_VAR 0 8
101622: ARRAY
101623: PPUSH
101624: CALL_OW 115
// attacking := true ;
101628: LD_ADDR_VAR 0 29
101632: PUSH
101633: LD_INT 1
101635: ST_TO_ADDR
// break ;
101636: GO 101640
// end ;
101638: GO 101577
101640: POP
101641: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
101642: LD_VAR 0 4
101646: PUSH
101647: LD_VAR 0 7
101651: ARRAY
101652: PPUSH
101653: CALL_OW 302
101657: PUSH
101658: LD_VAR 0 29
101662: NOT
101663: AND
101664: IFFALSE 101986
// begin if GetTag ( group [ i ] ) = 71 then
101666: LD_VAR 0 4
101670: PUSH
101671: LD_VAR 0 7
101675: ARRAY
101676: PPUSH
101677: CALL_OW 110
101681: PUSH
101682: LD_INT 71
101684: EQUAL
101685: IFFALSE 101726
// begin if HasTask ( group [ i ] ) then
101687: LD_VAR 0 4
101691: PUSH
101692: LD_VAR 0 7
101696: ARRAY
101697: PPUSH
101698: CALL_OW 314
101702: IFFALSE 101708
// continue else
101704: GO 97865
101706: GO 101726
// SetTag ( group [ i ] , 0 ) ;
101708: LD_VAR 0 4
101712: PUSH
101713: LD_VAR 0 7
101717: ARRAY
101718: PPUSH
101719: LD_INT 0
101721: PPUSH
101722: CALL_OW 109
// end ; k := 8 ;
101726: LD_ADDR_VAR 0 9
101730: PUSH
101731: LD_INT 8
101733: ST_TO_ADDR
// x := 0 ;
101734: LD_ADDR_VAR 0 10
101738: PUSH
101739: LD_INT 0
101741: ST_TO_ADDR
// if tmp < k then
101742: LD_VAR 0 14
101746: PUSH
101747: LD_VAR 0 9
101751: LESS
101752: IFFALSE 101764
// k := tmp ;
101754: LD_ADDR_VAR 0 9
101758: PUSH
101759: LD_VAR 0 14
101763: ST_TO_ADDR
// for j = 1 to k do
101764: LD_ADDR_VAR 0 8
101768: PUSH
101769: DOUBLE
101770: LD_INT 1
101772: DEC
101773: ST_TO_ADDR
101774: LD_VAR 0 9
101778: PUSH
101779: FOR_TO
101780: IFFALSE 101878
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
101782: LD_VAR 0 14
101786: PUSH
101787: LD_VAR 0 8
101791: ARRAY
101792: PPUSH
101793: CALL_OW 247
101797: PUSH
101798: LD_INT 1
101800: EQUAL
101801: PUSH
101802: LD_VAR 0 14
101806: PUSH
101807: LD_VAR 0 8
101811: ARRAY
101812: PPUSH
101813: CALL_OW 256
101817: PUSH
101818: LD_INT 250
101820: LESS
101821: PUSH
101822: LD_VAR 0 20
101826: AND
101827: PUSH
101828: LD_VAR 0 20
101832: NOT
101833: PUSH
101834: LD_VAR 0 14
101838: PUSH
101839: LD_VAR 0 8
101843: ARRAY
101844: PPUSH
101845: CALL_OW 256
101849: PUSH
101850: LD_INT 250
101852: GREATEREQUAL
101853: AND
101854: OR
101855: AND
101856: IFFALSE 101876
// begin x := tmp [ j ] ;
101858: LD_ADDR_VAR 0 10
101862: PUSH
101863: LD_VAR 0 14
101867: PUSH
101868: LD_VAR 0 8
101872: ARRAY
101873: ST_TO_ADDR
// break ;
101874: GO 101878
// end ;
101876: GO 101779
101878: POP
101879: POP
// if x then
101880: LD_VAR 0 10
101884: IFFALSE 101908
// ComAttackUnit ( group [ i ] , x ) else
101886: LD_VAR 0 4
101890: PUSH
101891: LD_VAR 0 7
101895: ARRAY
101896: PPUSH
101897: LD_VAR 0 10
101901: PPUSH
101902: CALL_OW 115
101906: GO 101932
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101908: LD_VAR 0 4
101912: PUSH
101913: LD_VAR 0 7
101917: ARRAY
101918: PPUSH
101919: LD_VAR 0 14
101923: PUSH
101924: LD_INT 1
101926: ARRAY
101927: PPUSH
101928: CALL_OW 115
// if not HasTask ( group [ i ] ) then
101932: LD_VAR 0 4
101936: PUSH
101937: LD_VAR 0 7
101941: ARRAY
101942: PPUSH
101943: CALL_OW 314
101947: NOT
101948: IFFALSE 101986
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
101950: LD_VAR 0 4
101954: PUSH
101955: LD_VAR 0 7
101959: ARRAY
101960: PPUSH
101961: LD_VAR 0 14
101965: PPUSH
101966: LD_VAR 0 4
101970: PUSH
101971: LD_VAR 0 7
101975: ARRAY
101976: PPUSH
101977: CALL_OW 74
101981: PPUSH
101982: CALL_OW 115
// end ; end ; end ;
101986: GO 97865
101988: POP
101989: POP
// wait ( 0 0$2 ) ;
101990: LD_INT 70
101992: PPUSH
101993: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
101997: LD_VAR 0 4
102001: NOT
102002: PUSH
102003: LD_VAR 0 4
102007: PUSH
102008: EMPTY
102009: EQUAL
102010: OR
102011: PUSH
102012: LD_INT 81
102014: PUSH
102015: LD_VAR 0 35
102019: PUSH
102020: EMPTY
102021: LIST
102022: LIST
102023: PPUSH
102024: CALL_OW 69
102028: NOT
102029: OR
102030: IFFALSE 97850
// end ;
102032: LD_VAR 0 2
102036: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
102037: LD_INT 0
102039: PPUSH
102040: PPUSH
102041: PPUSH
102042: PPUSH
102043: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
102044: LD_VAR 0 1
102048: NOT
102049: PUSH
102050: LD_EXP 44
102054: PUSH
102055: LD_VAR 0 1
102059: ARRAY
102060: NOT
102061: OR
102062: PUSH
102063: LD_VAR 0 2
102067: NOT
102068: OR
102069: PUSH
102070: LD_VAR 0 3
102074: NOT
102075: OR
102076: IFFALSE 102080
// exit ;
102078: GO 102593
// side := mc_sides [ base ] ;
102080: LD_ADDR_VAR 0 6
102084: PUSH
102085: LD_EXP 70
102089: PUSH
102090: LD_VAR 0 1
102094: ARRAY
102095: ST_TO_ADDR
// if not side then
102096: LD_VAR 0 6
102100: NOT
102101: IFFALSE 102105
// exit ;
102103: GO 102593
// for i in solds do
102105: LD_ADDR_VAR 0 7
102109: PUSH
102110: LD_VAR 0 2
102114: PUSH
102115: FOR_IN
102116: IFFALSE 102177
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
102118: LD_VAR 0 7
102122: PPUSH
102123: CALL_OW 310
102127: PPUSH
102128: CALL_OW 266
102132: PUSH
102133: LD_INT 32
102135: PUSH
102136: LD_INT 31
102138: PUSH
102139: EMPTY
102140: LIST
102141: LIST
102142: IN
102143: IFFALSE 102163
// solds := solds diff i else
102145: LD_ADDR_VAR 0 2
102149: PUSH
102150: LD_VAR 0 2
102154: PUSH
102155: LD_VAR 0 7
102159: DIFF
102160: ST_TO_ADDR
102161: GO 102175
// SetTag ( i , 18 ) ;
102163: LD_VAR 0 7
102167: PPUSH
102168: LD_INT 18
102170: PPUSH
102171: CALL_OW 109
102175: GO 102115
102177: POP
102178: POP
// if not solds then
102179: LD_VAR 0 2
102183: NOT
102184: IFFALSE 102188
// exit ;
102186: GO 102593
// repeat wait ( 0 0$1 ) ;
102188: LD_INT 35
102190: PPUSH
102191: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
102195: LD_ADDR_VAR 0 5
102199: PUSH
102200: LD_VAR 0 6
102204: PPUSH
102205: LD_VAR 0 3
102209: PPUSH
102210: CALL 21102 0 2
102214: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
102215: LD_EXP 44
102219: PUSH
102220: LD_VAR 0 1
102224: ARRAY
102225: NOT
102226: PUSH
102227: LD_EXP 44
102231: PUSH
102232: LD_VAR 0 1
102236: ARRAY
102237: PUSH
102238: EMPTY
102239: EQUAL
102240: OR
102241: IFFALSE 102278
// begin for i in solds do
102243: LD_ADDR_VAR 0 7
102247: PUSH
102248: LD_VAR 0 2
102252: PUSH
102253: FOR_IN
102254: IFFALSE 102267
// ComStop ( i ) ;
102256: LD_VAR 0 7
102260: PPUSH
102261: CALL_OW 141
102265: GO 102253
102267: POP
102268: POP
// solds := [ ] ;
102269: LD_ADDR_VAR 0 2
102273: PUSH
102274: EMPTY
102275: ST_TO_ADDR
// exit ;
102276: GO 102593
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
102278: LD_VAR 0 5
102282: NOT
102283: PUSH
102284: LD_VAR 0 5
102288: PUSH
102289: LD_INT 3
102291: GREATER
102292: OR
102293: PUSH
102294: LD_EXP 66
102298: PUSH
102299: LD_VAR 0 1
102303: ARRAY
102304: OR
102305: IFFALSE 102346
// begin for i in solds do
102307: LD_ADDR_VAR 0 7
102311: PUSH
102312: LD_VAR 0 2
102316: PUSH
102317: FOR_IN
102318: IFFALSE 102342
// if HasTask ( i ) then
102320: LD_VAR 0 7
102324: PPUSH
102325: CALL_OW 314
102329: IFFALSE 102340
// ComStop ( i ) ;
102331: LD_VAR 0 7
102335: PPUSH
102336: CALL_OW 141
102340: GO 102317
102342: POP
102343: POP
// break ;
102344: GO 102581
// end ; for i in solds do
102346: LD_ADDR_VAR 0 7
102350: PUSH
102351: LD_VAR 0 2
102355: PUSH
102356: FOR_IN
102357: IFFALSE 102573
// begin if IsInUnit ( i ) then
102359: LD_VAR 0 7
102363: PPUSH
102364: CALL_OW 310
102368: IFFALSE 102379
// ComExitBuilding ( i ) ;
102370: LD_VAR 0 7
102374: PPUSH
102375: CALL_OW 122
// if GetLives ( i ) > 333 then
102379: LD_VAR 0 7
102383: PPUSH
102384: CALL_OW 256
102388: PUSH
102389: LD_INT 333
102391: GREATER
102392: IFFALSE 102420
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
102394: LD_VAR 0 7
102398: PPUSH
102399: LD_VAR 0 5
102403: PPUSH
102404: LD_VAR 0 7
102408: PPUSH
102409: CALL_OW 74
102413: PPUSH
102414: CALL_OW 115
102418: GO 102571
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
102420: LD_ADDR_VAR 0 8
102424: PUSH
102425: LD_EXP 44
102429: PUSH
102430: LD_VAR 0 1
102434: ARRAY
102435: PPUSH
102436: LD_INT 2
102438: PUSH
102439: LD_INT 30
102441: PUSH
102442: LD_INT 0
102444: PUSH
102445: EMPTY
102446: LIST
102447: LIST
102448: PUSH
102449: LD_INT 30
102451: PUSH
102452: LD_INT 1
102454: PUSH
102455: EMPTY
102456: LIST
102457: LIST
102458: PUSH
102459: LD_INT 30
102461: PUSH
102462: LD_INT 6
102464: PUSH
102465: EMPTY
102466: LIST
102467: LIST
102468: PUSH
102469: EMPTY
102470: LIST
102471: LIST
102472: LIST
102473: LIST
102474: PPUSH
102475: CALL_OW 72
102479: PPUSH
102480: LD_VAR 0 7
102484: PPUSH
102485: CALL_OW 74
102489: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
102490: LD_VAR 0 7
102494: PPUSH
102495: LD_VAR 0 8
102499: PPUSH
102500: CALL_OW 250
102504: PPUSH
102505: LD_INT 3
102507: PPUSH
102508: LD_INT 5
102510: PPUSH
102511: CALL_OW 272
102515: PPUSH
102516: LD_VAR 0 8
102520: PPUSH
102521: CALL_OW 251
102525: PPUSH
102526: LD_INT 3
102528: PPUSH
102529: LD_INT 5
102531: PPUSH
102532: CALL_OW 273
102536: PPUSH
102537: CALL_OW 111
// SetTag ( i , 0 ) ;
102541: LD_VAR 0 7
102545: PPUSH
102546: LD_INT 0
102548: PPUSH
102549: CALL_OW 109
// solds := solds diff i ;
102553: LD_ADDR_VAR 0 2
102557: PUSH
102558: LD_VAR 0 2
102562: PUSH
102563: LD_VAR 0 7
102567: DIFF
102568: ST_TO_ADDR
// continue ;
102569: GO 102356
// end ; end ;
102571: GO 102356
102573: POP
102574: POP
// until solds ;
102575: LD_VAR 0 2
102579: IFFALSE 102188
// MC_Reset ( base , 18 ) ;
102581: LD_VAR 0 1
102585: PPUSH
102586: LD_INT 18
102588: PPUSH
102589: CALL 59786 0 2
// end ;
102593: LD_VAR 0 4
102597: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
102598: LD_INT 0
102600: PPUSH
102601: PPUSH
102602: PPUSH
102603: PPUSH
102604: PPUSH
102605: PPUSH
102606: PPUSH
102607: PPUSH
102608: PPUSH
102609: PPUSH
102610: PPUSH
102611: PPUSH
102612: PPUSH
102613: PPUSH
102614: PPUSH
102615: PPUSH
102616: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
102617: LD_ADDR_VAR 0 13
102621: PUSH
102622: LD_EXP 44
102626: PUSH
102627: LD_VAR 0 1
102631: ARRAY
102632: PPUSH
102633: LD_INT 25
102635: PUSH
102636: LD_INT 3
102638: PUSH
102639: EMPTY
102640: LIST
102641: LIST
102642: PPUSH
102643: CALL_OW 72
102647: ST_TO_ADDR
// if mc_remote_driver [ base ] then
102648: LD_EXP 84
102652: PUSH
102653: LD_VAR 0 1
102657: ARRAY
102658: IFFALSE 102682
// mechs := mechs diff mc_remote_driver [ base ] ;
102660: LD_ADDR_VAR 0 13
102664: PUSH
102665: LD_VAR 0 13
102669: PUSH
102670: LD_EXP 84
102674: PUSH
102675: LD_VAR 0 1
102679: ARRAY
102680: DIFF
102681: ST_TO_ADDR
// for i in mechs do
102682: LD_ADDR_VAR 0 5
102686: PUSH
102687: LD_VAR 0 13
102691: PUSH
102692: FOR_IN
102693: IFFALSE 102728
// if GetTag ( i ) > 0 then
102695: LD_VAR 0 5
102699: PPUSH
102700: CALL_OW 110
102704: PUSH
102705: LD_INT 0
102707: GREATER
102708: IFFALSE 102726
// mechs := mechs diff i ;
102710: LD_ADDR_VAR 0 13
102714: PUSH
102715: LD_VAR 0 13
102719: PUSH
102720: LD_VAR 0 5
102724: DIFF
102725: ST_TO_ADDR
102726: GO 102692
102728: POP
102729: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
102730: LD_ADDR_VAR 0 9
102734: PUSH
102735: LD_EXP 44
102739: PUSH
102740: LD_VAR 0 1
102744: ARRAY
102745: PPUSH
102746: LD_INT 2
102748: PUSH
102749: LD_INT 25
102751: PUSH
102752: LD_INT 1
102754: PUSH
102755: EMPTY
102756: LIST
102757: LIST
102758: PUSH
102759: LD_INT 25
102761: PUSH
102762: LD_INT 5
102764: PUSH
102765: EMPTY
102766: LIST
102767: LIST
102768: PUSH
102769: LD_INT 25
102771: PUSH
102772: LD_INT 8
102774: PUSH
102775: EMPTY
102776: LIST
102777: LIST
102778: PUSH
102779: LD_INT 25
102781: PUSH
102782: LD_INT 9
102784: PUSH
102785: EMPTY
102786: LIST
102787: LIST
102788: PUSH
102789: EMPTY
102790: LIST
102791: LIST
102792: LIST
102793: LIST
102794: LIST
102795: PPUSH
102796: CALL_OW 72
102800: ST_TO_ADDR
// if not defenders and not solds then
102801: LD_VAR 0 2
102805: NOT
102806: PUSH
102807: LD_VAR 0 9
102811: NOT
102812: AND
102813: IFFALSE 102817
// exit ;
102815: GO 104443
// depot_under_attack := false ;
102817: LD_ADDR_VAR 0 17
102821: PUSH
102822: LD_INT 0
102824: ST_TO_ADDR
// sold_defenders := [ ] ;
102825: LD_ADDR_VAR 0 18
102829: PUSH
102830: EMPTY
102831: ST_TO_ADDR
// if mechs then
102832: LD_VAR 0 13
102836: IFFALSE 102965
// for i in defenders do
102838: LD_ADDR_VAR 0 5
102842: PUSH
102843: LD_VAR 0 2
102847: PUSH
102848: FOR_IN
102849: IFFALSE 102963
// begin SetTag ( i , 20 ) ;
102851: LD_VAR 0 5
102855: PPUSH
102856: LD_INT 20
102858: PPUSH
102859: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
102863: LD_VAR 0 5
102867: PPUSH
102868: CALL_OW 263
102872: PUSH
102873: LD_INT 1
102875: EQUAL
102876: PUSH
102877: LD_VAR 0 5
102881: PPUSH
102882: CALL_OW 311
102886: NOT
102887: AND
102888: PUSH
102889: LD_VAR 0 13
102893: AND
102894: IFFALSE 102961
// begin un := mechs [ 1 ] ;
102896: LD_ADDR_VAR 0 11
102900: PUSH
102901: LD_VAR 0 13
102905: PUSH
102906: LD_INT 1
102908: ARRAY
102909: ST_TO_ADDR
// ComExitBuilding ( un ) ;
102910: LD_VAR 0 11
102914: PPUSH
102915: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
102919: LD_VAR 0 11
102923: PPUSH
102924: LD_VAR 0 5
102928: PPUSH
102929: CALL_OW 180
// SetTag ( un , 19 ) ;
102933: LD_VAR 0 11
102937: PPUSH
102938: LD_INT 19
102940: PPUSH
102941: CALL_OW 109
// mechs := mechs diff un ;
102945: LD_ADDR_VAR 0 13
102949: PUSH
102950: LD_VAR 0 13
102954: PUSH
102955: LD_VAR 0 11
102959: DIFF
102960: ST_TO_ADDR
// end ; end ;
102961: GO 102848
102963: POP
102964: POP
// if solds then
102965: LD_VAR 0 9
102969: IFFALSE 103028
// for i in solds do
102971: LD_ADDR_VAR 0 5
102975: PUSH
102976: LD_VAR 0 9
102980: PUSH
102981: FOR_IN
102982: IFFALSE 103026
// if not GetTag ( i ) then
102984: LD_VAR 0 5
102988: PPUSH
102989: CALL_OW 110
102993: NOT
102994: IFFALSE 103024
// begin defenders := defenders union i ;
102996: LD_ADDR_VAR 0 2
103000: PUSH
103001: LD_VAR 0 2
103005: PUSH
103006: LD_VAR 0 5
103010: UNION
103011: ST_TO_ADDR
// SetTag ( i , 18 ) ;
103012: LD_VAR 0 5
103016: PPUSH
103017: LD_INT 18
103019: PPUSH
103020: CALL_OW 109
// end ;
103024: GO 102981
103026: POP
103027: POP
// repeat wait ( 0 0$1 ) ;
103028: LD_INT 35
103030: PPUSH
103031: CALL_OW 67
// enemy := mc_scan [ base ] ;
103035: LD_ADDR_VAR 0 3
103039: PUSH
103040: LD_EXP 67
103044: PUSH
103045: LD_VAR 0 1
103049: ARRAY
103050: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103051: LD_EXP 44
103055: PUSH
103056: LD_VAR 0 1
103060: ARRAY
103061: NOT
103062: PUSH
103063: LD_EXP 44
103067: PUSH
103068: LD_VAR 0 1
103072: ARRAY
103073: PUSH
103074: EMPTY
103075: EQUAL
103076: OR
103077: IFFALSE 103114
// begin for i in defenders do
103079: LD_ADDR_VAR 0 5
103083: PUSH
103084: LD_VAR 0 2
103088: PUSH
103089: FOR_IN
103090: IFFALSE 103103
// ComStop ( i ) ;
103092: LD_VAR 0 5
103096: PPUSH
103097: CALL_OW 141
103101: GO 103089
103103: POP
103104: POP
// defenders := [ ] ;
103105: LD_ADDR_VAR 0 2
103109: PUSH
103110: EMPTY
103111: ST_TO_ADDR
// exit ;
103112: GO 104443
// end ; for i in defenders do
103114: LD_ADDR_VAR 0 5
103118: PUSH
103119: LD_VAR 0 2
103123: PUSH
103124: FOR_IN
103125: IFFALSE 103943
// begin e := NearestUnitToUnit ( enemy , i ) ;
103127: LD_ADDR_VAR 0 14
103131: PUSH
103132: LD_VAR 0 3
103136: PPUSH
103137: LD_VAR 0 5
103141: PPUSH
103142: CALL_OW 74
103146: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
103147: LD_ADDR_VAR 0 8
103151: PUSH
103152: LD_EXP 44
103156: PUSH
103157: LD_VAR 0 1
103161: ARRAY
103162: PPUSH
103163: LD_INT 2
103165: PUSH
103166: LD_INT 30
103168: PUSH
103169: LD_INT 0
103171: PUSH
103172: EMPTY
103173: LIST
103174: LIST
103175: PUSH
103176: LD_INT 30
103178: PUSH
103179: LD_INT 1
103181: PUSH
103182: EMPTY
103183: LIST
103184: LIST
103185: PUSH
103186: EMPTY
103187: LIST
103188: LIST
103189: LIST
103190: PPUSH
103191: CALL_OW 72
103195: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
103196: LD_ADDR_VAR 0 17
103200: PUSH
103201: LD_VAR 0 8
103205: NOT
103206: PUSH
103207: LD_VAR 0 8
103211: PPUSH
103212: LD_INT 3
103214: PUSH
103215: LD_INT 24
103217: PUSH
103218: LD_INT 600
103220: PUSH
103221: EMPTY
103222: LIST
103223: LIST
103224: PUSH
103225: EMPTY
103226: LIST
103227: LIST
103228: PPUSH
103229: CALL_OW 72
103233: OR
103234: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
103235: LD_VAR 0 5
103239: PPUSH
103240: CALL_OW 247
103244: PUSH
103245: LD_INT 2
103247: DOUBLE
103248: EQUAL
103249: IFTRUE 103253
103251: GO 103649
103253: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
103254: LD_VAR 0 5
103258: PPUSH
103259: CALL_OW 256
103263: PUSH
103264: LD_INT 650
103266: GREATER
103267: PUSH
103268: LD_VAR 0 5
103272: PPUSH
103273: LD_VAR 0 14
103277: PPUSH
103278: CALL_OW 296
103282: PUSH
103283: LD_INT 40
103285: LESS
103286: PUSH
103287: LD_VAR 0 14
103291: PPUSH
103292: LD_EXP 69
103296: PUSH
103297: LD_VAR 0 1
103301: ARRAY
103302: PPUSH
103303: CALL_OW 308
103307: OR
103308: AND
103309: IFFALSE 103431
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
103311: LD_VAR 0 5
103315: PPUSH
103316: CALL_OW 262
103320: PUSH
103321: LD_INT 1
103323: EQUAL
103324: PUSH
103325: LD_VAR 0 5
103329: PPUSH
103330: CALL_OW 261
103334: PUSH
103335: LD_INT 30
103337: LESS
103338: AND
103339: PUSH
103340: LD_VAR 0 8
103344: AND
103345: IFFALSE 103415
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
103347: LD_VAR 0 5
103351: PPUSH
103352: LD_VAR 0 8
103356: PPUSH
103357: LD_VAR 0 5
103361: PPUSH
103362: CALL_OW 74
103366: PPUSH
103367: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
103371: LD_VAR 0 5
103375: PPUSH
103376: LD_VAR 0 8
103380: PPUSH
103381: LD_VAR 0 5
103385: PPUSH
103386: CALL_OW 74
103390: PPUSH
103391: CALL_OW 296
103395: PUSH
103396: LD_INT 6
103398: LESS
103399: IFFALSE 103413
// SetFuel ( i , 100 ) ;
103401: LD_VAR 0 5
103405: PPUSH
103406: LD_INT 100
103408: PPUSH
103409: CALL_OW 240
// end else
103413: GO 103429
// ComAttackUnit ( i , e ) ;
103415: LD_VAR 0 5
103419: PPUSH
103420: LD_VAR 0 14
103424: PPUSH
103425: CALL_OW 115
// end else
103429: GO 103532
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
103431: LD_VAR 0 14
103435: PPUSH
103436: LD_EXP 69
103440: PUSH
103441: LD_VAR 0 1
103445: ARRAY
103446: PPUSH
103447: CALL_OW 308
103451: NOT
103452: PUSH
103453: LD_VAR 0 5
103457: PPUSH
103458: LD_VAR 0 14
103462: PPUSH
103463: CALL_OW 296
103467: PUSH
103468: LD_INT 40
103470: GREATEREQUAL
103471: AND
103472: PUSH
103473: LD_VAR 0 5
103477: PPUSH
103478: CALL_OW 256
103482: PUSH
103483: LD_INT 650
103485: LESSEQUAL
103486: OR
103487: PUSH
103488: LD_VAR 0 5
103492: PPUSH
103493: LD_EXP 68
103497: PUSH
103498: LD_VAR 0 1
103502: ARRAY
103503: PPUSH
103504: CALL_OW 308
103508: NOT
103509: AND
103510: IFFALSE 103532
// ComMoveToArea ( i , mc_parking [ base ] ) ;
103512: LD_VAR 0 5
103516: PPUSH
103517: LD_EXP 68
103521: PUSH
103522: LD_VAR 0 1
103526: ARRAY
103527: PPUSH
103528: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
103532: LD_VAR 0 5
103536: PPUSH
103537: CALL_OW 256
103541: PUSH
103542: LD_INT 998
103544: LESS
103545: PUSH
103546: LD_VAR 0 5
103550: PPUSH
103551: CALL_OW 263
103555: PUSH
103556: LD_INT 1
103558: EQUAL
103559: AND
103560: PUSH
103561: LD_VAR 0 5
103565: PPUSH
103566: CALL_OW 311
103570: AND
103571: PUSH
103572: LD_VAR 0 5
103576: PPUSH
103577: LD_EXP 68
103581: PUSH
103582: LD_VAR 0 1
103586: ARRAY
103587: PPUSH
103588: CALL_OW 308
103592: AND
103593: IFFALSE 103647
// begin mech := IsDrivenBy ( i ) ;
103595: LD_ADDR_VAR 0 10
103599: PUSH
103600: LD_VAR 0 5
103604: PPUSH
103605: CALL_OW 311
103609: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
103610: LD_VAR 0 10
103614: PPUSH
103615: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
103619: LD_VAR 0 10
103623: PPUSH
103624: LD_VAR 0 5
103628: PPUSH
103629: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
103633: LD_VAR 0 10
103637: PPUSH
103638: LD_VAR 0 5
103642: PPUSH
103643: CALL_OW 180
// end ; end ; unit_human :
103647: GO 103914
103649: LD_INT 1
103651: DOUBLE
103652: EQUAL
103653: IFTRUE 103657
103655: GO 103913
103657: POP
// begin b := IsInUnit ( i ) ;
103658: LD_ADDR_VAR 0 19
103662: PUSH
103663: LD_VAR 0 5
103667: PPUSH
103668: CALL_OW 310
103672: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
103673: LD_ADDR_VAR 0 20
103677: PUSH
103678: LD_VAR 0 19
103682: NOT
103683: PUSH
103684: LD_VAR 0 19
103688: PPUSH
103689: CALL_OW 266
103693: PUSH
103694: LD_INT 32
103696: PUSH
103697: LD_INT 31
103699: PUSH
103700: EMPTY
103701: LIST
103702: LIST
103703: IN
103704: OR
103705: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
103706: LD_VAR 0 17
103710: PUSH
103711: LD_VAR 0 2
103715: PPUSH
103716: LD_INT 21
103718: PUSH
103719: LD_INT 2
103721: PUSH
103722: EMPTY
103723: LIST
103724: LIST
103725: PPUSH
103726: CALL_OW 72
103730: PUSH
103731: LD_INT 1
103733: LESSEQUAL
103734: OR
103735: PUSH
103736: LD_VAR 0 20
103740: AND
103741: PUSH
103742: LD_VAR 0 5
103746: PUSH
103747: LD_VAR 0 18
103751: IN
103752: NOT
103753: AND
103754: IFFALSE 103847
// begin if b then
103756: LD_VAR 0 19
103760: IFFALSE 103809
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
103762: LD_VAR 0 19
103766: PPUSH
103767: LD_VAR 0 3
103771: PPUSH
103772: LD_VAR 0 19
103776: PPUSH
103777: CALL_OW 74
103781: PPUSH
103782: CALL_OW 296
103786: PUSH
103787: LD_INT 10
103789: LESS
103790: PUSH
103791: LD_VAR 0 19
103795: PPUSH
103796: CALL_OW 461
103800: PUSH
103801: LD_INT 7
103803: NONEQUAL
103804: AND
103805: IFFALSE 103809
// continue ;
103807: GO 103124
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
103809: LD_ADDR_VAR 0 18
103813: PUSH
103814: LD_VAR 0 18
103818: PPUSH
103819: LD_VAR 0 18
103823: PUSH
103824: LD_INT 1
103826: PLUS
103827: PPUSH
103828: LD_VAR 0 5
103832: PPUSH
103833: CALL_OW 1
103837: ST_TO_ADDR
// ComExitBuilding ( i ) ;
103838: LD_VAR 0 5
103842: PPUSH
103843: CALL_OW 122
// end ; if sold_defenders then
103847: LD_VAR 0 18
103851: IFFALSE 103911
// if i in sold_defenders then
103853: LD_VAR 0 5
103857: PUSH
103858: LD_VAR 0 18
103862: IN
103863: IFFALSE 103911
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
103865: LD_VAR 0 5
103869: PPUSH
103870: CALL_OW 314
103874: NOT
103875: PUSH
103876: LD_VAR 0 5
103880: PPUSH
103881: LD_VAR 0 14
103885: PPUSH
103886: CALL_OW 296
103890: PUSH
103891: LD_INT 30
103893: LESS
103894: AND
103895: IFFALSE 103911
// ComAttackUnit ( i , e ) ;
103897: LD_VAR 0 5
103901: PPUSH
103902: LD_VAR 0 14
103906: PPUSH
103907: CALL_OW 115
// end ; end ; end ;
103911: GO 103914
103913: POP
// if IsDead ( i ) then
103914: LD_VAR 0 5
103918: PPUSH
103919: CALL_OW 301
103923: IFFALSE 103941
// defenders := defenders diff i ;
103925: LD_ADDR_VAR 0 2
103929: PUSH
103930: LD_VAR 0 2
103934: PUSH
103935: LD_VAR 0 5
103939: DIFF
103940: ST_TO_ADDR
// end ;
103941: GO 103124
103943: POP
103944: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
103945: LD_VAR 0 3
103949: NOT
103950: PUSH
103951: LD_VAR 0 2
103955: NOT
103956: OR
103957: PUSH
103958: LD_EXP 44
103962: PUSH
103963: LD_VAR 0 1
103967: ARRAY
103968: NOT
103969: OR
103970: IFFALSE 103028
// MC_Reset ( base , 18 ) ;
103972: LD_VAR 0 1
103976: PPUSH
103977: LD_INT 18
103979: PPUSH
103980: CALL 59786 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103984: LD_ADDR_VAR 0 2
103988: PUSH
103989: LD_VAR 0 2
103993: PUSH
103994: LD_VAR 0 2
103998: PPUSH
103999: LD_INT 2
104001: PUSH
104002: LD_INT 25
104004: PUSH
104005: LD_INT 1
104007: PUSH
104008: EMPTY
104009: LIST
104010: LIST
104011: PUSH
104012: LD_INT 25
104014: PUSH
104015: LD_INT 5
104017: PUSH
104018: EMPTY
104019: LIST
104020: LIST
104021: PUSH
104022: LD_INT 25
104024: PUSH
104025: LD_INT 8
104027: PUSH
104028: EMPTY
104029: LIST
104030: LIST
104031: PUSH
104032: LD_INT 25
104034: PUSH
104035: LD_INT 9
104037: PUSH
104038: EMPTY
104039: LIST
104040: LIST
104041: PUSH
104042: EMPTY
104043: LIST
104044: LIST
104045: LIST
104046: LIST
104047: LIST
104048: PPUSH
104049: CALL_OW 72
104053: DIFF
104054: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
104055: LD_VAR 0 3
104059: NOT
104060: PUSH
104061: LD_VAR 0 2
104065: PPUSH
104066: LD_INT 21
104068: PUSH
104069: LD_INT 2
104071: PUSH
104072: EMPTY
104073: LIST
104074: LIST
104075: PPUSH
104076: CALL_OW 72
104080: AND
104081: IFFALSE 104419
// begin tmp := FilterByTag ( defenders , 19 ) ;
104083: LD_ADDR_VAR 0 12
104087: PUSH
104088: LD_VAR 0 2
104092: PPUSH
104093: LD_INT 19
104095: PPUSH
104096: CALL 52862 0 2
104100: ST_TO_ADDR
// if tmp then
104101: LD_VAR 0 12
104105: IFFALSE 104175
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
104107: LD_ADDR_VAR 0 12
104111: PUSH
104112: LD_VAR 0 12
104116: PPUSH
104117: LD_INT 25
104119: PUSH
104120: LD_INT 3
104122: PUSH
104123: EMPTY
104124: LIST
104125: LIST
104126: PPUSH
104127: CALL_OW 72
104131: ST_TO_ADDR
// if tmp then
104132: LD_VAR 0 12
104136: IFFALSE 104175
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
104138: LD_ADDR_EXP 56
104142: PUSH
104143: LD_EXP 56
104147: PPUSH
104148: LD_VAR 0 1
104152: PPUSH
104153: LD_EXP 56
104157: PUSH
104158: LD_VAR 0 1
104162: ARRAY
104163: PUSH
104164: LD_VAR 0 12
104168: UNION
104169: PPUSH
104170: CALL_OW 1
104174: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
104175: LD_VAR 0 1
104179: PPUSH
104180: LD_INT 19
104182: PPUSH
104183: CALL 59786 0 2
// repeat wait ( 0 0$1 ) ;
104187: LD_INT 35
104189: PPUSH
104190: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104194: LD_EXP 44
104198: PUSH
104199: LD_VAR 0 1
104203: ARRAY
104204: NOT
104205: PUSH
104206: LD_EXP 44
104210: PUSH
104211: LD_VAR 0 1
104215: ARRAY
104216: PUSH
104217: EMPTY
104218: EQUAL
104219: OR
104220: IFFALSE 104257
// begin for i in defenders do
104222: LD_ADDR_VAR 0 5
104226: PUSH
104227: LD_VAR 0 2
104231: PUSH
104232: FOR_IN
104233: IFFALSE 104246
// ComStop ( i ) ;
104235: LD_VAR 0 5
104239: PPUSH
104240: CALL_OW 141
104244: GO 104232
104246: POP
104247: POP
// defenders := [ ] ;
104248: LD_ADDR_VAR 0 2
104252: PUSH
104253: EMPTY
104254: ST_TO_ADDR
// exit ;
104255: GO 104443
// end ; for i in defenders do
104257: LD_ADDR_VAR 0 5
104261: PUSH
104262: LD_VAR 0 2
104266: PUSH
104267: FOR_IN
104268: IFFALSE 104357
// begin if not IsInArea ( i , mc_parking [ base ] ) then
104270: LD_VAR 0 5
104274: PPUSH
104275: LD_EXP 68
104279: PUSH
104280: LD_VAR 0 1
104284: ARRAY
104285: PPUSH
104286: CALL_OW 308
104290: NOT
104291: IFFALSE 104315
// ComMoveToArea ( i , mc_parking [ base ] ) else
104293: LD_VAR 0 5
104297: PPUSH
104298: LD_EXP 68
104302: PUSH
104303: LD_VAR 0 1
104307: ARRAY
104308: PPUSH
104309: CALL_OW 113
104313: GO 104355
// if GetControl ( i ) = control_manual then
104315: LD_VAR 0 5
104319: PPUSH
104320: CALL_OW 263
104324: PUSH
104325: LD_INT 1
104327: EQUAL
104328: IFFALSE 104355
// if IsDrivenBy ( i ) then
104330: LD_VAR 0 5
104334: PPUSH
104335: CALL_OW 311
104339: IFFALSE 104355
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
104341: LD_VAR 0 5
104345: PPUSH
104346: CALL_OW 311
104350: PPUSH
104351: CALL_OW 121
// end ;
104355: GO 104267
104357: POP
104358: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
104359: LD_VAR 0 2
104363: PPUSH
104364: LD_INT 95
104366: PUSH
104367: LD_EXP 68
104371: PUSH
104372: LD_VAR 0 1
104376: ARRAY
104377: PUSH
104378: EMPTY
104379: LIST
104380: LIST
104381: PPUSH
104382: CALL_OW 72
104386: PUSH
104387: LD_VAR 0 2
104391: EQUAL
104392: PUSH
104393: LD_EXP 67
104397: PUSH
104398: LD_VAR 0 1
104402: ARRAY
104403: OR
104404: PUSH
104405: LD_EXP 44
104409: PUSH
104410: LD_VAR 0 1
104414: ARRAY
104415: NOT
104416: OR
104417: IFFALSE 104187
// end ; MC_Reset ( base , 19 ) ;
104419: LD_VAR 0 1
104423: PPUSH
104424: LD_INT 19
104426: PPUSH
104427: CALL 59786 0 2
// MC_Reset ( base , 20 ) ;
104431: LD_VAR 0 1
104435: PPUSH
104436: LD_INT 20
104438: PPUSH
104439: CALL 59786 0 2
// end ;
104443: LD_VAR 0 4
104447: RET
