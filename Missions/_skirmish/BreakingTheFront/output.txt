// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 643 0 0
// SetDiplomacy ;
  35: CALL 855 0 0
// PrepareGame ;
  39: CALL 937 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) + 1 ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: PUSH
  76: LD_INT 1
  78: PLUS
  79: ST_TO_ADDR
// if not Difficulty or debug then
  80: LD_OWVAR 67
  84: NOT
  85: PUSH
  86: LD_EXP 1
  90: OR
  91: IFFALSE 101
// Difficulty := 2 ;
  93: LD_ADDR_OWVAR 67
  97: PUSH
  98: LD_INT 2
 100: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
 101: LD_ADDR_EXP 23
 105: PUSH
 106: LD_INT 1
 108: PPUSH
 109: CALL_OW 426
 113: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 114: LD_ADDR_EXP 24
 118: PUSH
 119: LD_INT 2
 121: PPUSH
 122: CALL_OW 426
 126: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) + 1 ;
 127: LD_ADDR_EXP 26
 131: PUSH
 132: LD_INT 3
 134: PPUSH
 135: CALL_OW 426
 139: PUSH
 140: LD_INT 1
 142: PLUS
 143: ST_TO_ADDR
// if not cratesSpawn then
 144: LD_EXP 26
 148: NOT
 149: IFFALSE 159
// cratesSpawn := 2 ;
 151: LD_ADDR_EXP 26
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) + 1 ;
 159: LD_ADDR_EXP 25
 163: PUSH
 164: LD_INT 4
 166: PPUSH
 167: CALL_OW 426
 171: PUSH
 172: LD_INT 1
 174: PLUS
 175: ST_TO_ADDR
// if not commander then
 176: LD_EXP 25
 180: NOT
 181: IFFALSE 191
// commander := 1 ;
 183: LD_ADDR_EXP 25
 187: PUSH
 188: LD_INT 1
 190: ST_TO_ADDR
// if not debug then
 191: LD_EXP 1
 195: NOT
 196: IFFALSE 200
// exit ;
 198: GO 257
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 200: LD_ADDR_OWVAR 47
 204: PUSH
 205: LD_STRING Difficulty: 
 207: PUSH
 208: LD_OWVAR 67
 212: STR
 213: PUSH
 214: LD_STRING sibBomb: 
 216: PUSH
 217: LD_EXP 23
 221: STR
 222: PUSH
 223: LD_STRING reinforceAllowed: 
 225: PUSH
 226: LD_EXP 24
 230: STR
 231: PUSH
 232: LD_STRING cratesSpawn: 
 234: PUSH
 235: LD_EXP 26
 239: STR
 240: PUSH
 241: LD_STRING commander: 
 243: PUSH
 244: LD_EXP 25
 248: STR
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: ST_TO_ADDR
// end ;
 257: LD_VAR 0 1
 261: RET
// export function CustomEvent ( event ) ; begin
 262: LD_INT 0
 264: PPUSH
// end ;
 265: LD_VAR 0 2
 269: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 270: LD_EXP 3
 274: PUSH
 275: LD_EXP 2
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: AND
 284: PUSH
 285: LD_EXP 4
 289: NOT
 290: AND
 291: IFFALSE 314
 293: GO 295
 295: DISABLE
// begin enable ;
 296: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 297: LD_ADDR_OWVAR 47
 301: PUSH
 302: LD_STRING #SkrTime
 304: PUSH
 305: LD_OWVAR 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: ST_TO_ADDR
// end ;
 314: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 315: LD_EXP 19
 319: PUSH
 320: LD_EXP 3
 324: AND
 325: PUSH
 326: LD_EXP 2
 330: PUSH
 331: LD_INT 1
 333: EQUAL
 334: AND
 335: IFFALSE 396
 337: GO 339
 339: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 340: LD_EXP 19
 344: PUSH
 345: LD_INT 1
 347: ARRAY
 348: PUSH
 349: LD_INT 1
 351: ARRAY
 352: PPUSH
 353: LD_EXP 19
 357: PUSH
 358: LD_INT 1
 360: ARRAY
 361: PUSH
 362: LD_INT 2
 364: ARRAY
 365: PPUSH
 366: LD_EXP 19
 370: PUSH
 371: LD_INT 1
 373: ARRAY
 374: PUSH
 375: LD_INT 3
 377: ARRAY
 378: PPUSH
 379: LD_EXP 19
 383: PUSH
 384: LD_INT 1
 386: ARRAY
 387: PUSH
 388: LD_INT 4
 390: ARRAY
 391: PPUSH
 392: CALL 60445 0 4
 396: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 397: LD_EXP 19
 401: PUSH
 402: LD_EXP 3
 406: AND
 407: PUSH
 408: LD_EXP 2
 412: PUSH
 413: LD_INT 1
 415: EQUAL
 416: AND
 417: IFFALSE 478
 419: GO 421
 421: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 422: LD_EXP 19
 426: PUSH
 427: LD_INT 2
 429: ARRAY
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: LD_EXP 19
 439: PUSH
 440: LD_INT 2
 442: ARRAY
 443: PUSH
 444: LD_INT 2
 446: ARRAY
 447: PPUSH
 448: LD_EXP 19
 452: PUSH
 453: LD_INT 2
 455: ARRAY
 456: PUSH
 457: LD_INT 3
 459: ARRAY
 460: PPUSH
 461: LD_EXP 19
 465: PUSH
 466: LD_INT 2
 468: ARRAY
 469: PUSH
 470: LD_INT 4
 472: ARRAY
 473: PPUSH
 474: CALL 60445 0 4
 478: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 479: LD_EXP 19
 483: PUSH
 484: LD_EXP 3
 488: AND
 489: PUSH
 490: LD_EXP 2
 494: PUSH
 495: LD_INT 1
 497: EQUAL
 498: AND
 499: IFFALSE 560
 501: GO 503
 503: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 504: LD_EXP 19
 508: PUSH
 509: LD_INT 3
 511: ARRAY
 512: PUSH
 513: LD_INT 1
 515: ARRAY
 516: PPUSH
 517: LD_EXP 19
 521: PUSH
 522: LD_INT 3
 524: ARRAY
 525: PUSH
 526: LD_INT 2
 528: ARRAY
 529: PPUSH
 530: LD_EXP 19
 534: PUSH
 535: LD_INT 3
 537: ARRAY
 538: PUSH
 539: LD_INT 3
 541: ARRAY
 542: PPUSH
 543: LD_EXP 19
 547: PUSH
 548: LD_INT 3
 550: ARRAY
 551: PUSH
 552: LD_INT 4
 554: ARRAY
 555: PPUSH
 556: CALL 60445 0 4
 560: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 561: LD_EXP 19
 565: PUSH
 566: LD_EXP 3
 570: AND
 571: PUSH
 572: LD_EXP 2
 576: PUSH
 577: LD_INT 1
 579: EQUAL
 580: AND
 581: IFFALSE 642
 583: GO 585
 585: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 586: LD_EXP 19
 590: PUSH
 591: LD_INT 4
 593: ARRAY
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_EXP 19
 603: PUSH
 604: LD_INT 4
 606: ARRAY
 607: PUSH
 608: LD_INT 2
 610: ARRAY
 611: PPUSH
 612: LD_EXP 19
 616: PUSH
 617: LD_INT 4
 619: ARRAY
 620: PUSH
 621: LD_INT 3
 623: ARRAY
 624: PPUSH
 625: LD_EXP 19
 629: PUSH
 630: LD_INT 4
 632: ARRAY
 633: PUSH
 634: LD_INT 4
 636: ARRAY
 637: PPUSH
 638: CALL 60445 0 4
 642: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 643: LD_INT 0
 645: PPUSH
 646: PPUSH
 647: PPUSH
 648: PPUSH
 649: PPUSH
// if GameType = 1 then
 650: LD_EXP 2
 654: PUSH
 655: LD_INT 1
 657: EQUAL
 658: IFFALSE 727
// begin ban_techs := [ ] ;
 660: LD_ADDR_VAR 0 4
 664: PUSH
 665: EMPTY
 666: ST_TO_ADDR
// if sibBombAllowed < 2 then
 667: LD_EXP 23
 671: PUSH
 672: LD_INT 2
 674: LESS
 675: IFFALSE 688
// ban_techs := [ tech_sibFiss ] ;
 677: LD_ADDR_VAR 0 4
 681: PUSH
 682: LD_INT 25
 684: PUSH
 685: EMPTY
 686: LIST
 687: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 688: LD_ADDR_VAR 0 5
 692: PUSH
 693: LD_INT 46
 695: PUSH
 696: LD_INT 47
 698: PUSH
 699: LD_INT 48
 701: PUSH
 702: LD_INT 49
 704: PUSH
 705: LD_INT 50
 707: PUSH
 708: LD_INT 39
 710: PUSH
 711: LD_INT 69
 713: PUSH
 714: LD_INT 40
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: ST_TO_ADDR
// end ; for i = 1 to 8 do
 727: LD_ADDR_VAR 0 2
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 8
 739: PUSH
 740: FOR_TO
 741: IFFALSE 825
// begin if res_techs then
 743: LD_VAR 0 5
 747: IFFALSE 783
// for j in res_techs do
 749: LD_ADDR_VAR 0 3
 753: PUSH
 754: LD_VAR 0 5
 758: PUSH
 759: FOR_IN
 760: IFFALSE 781
// SetTech ( j , i , state_researched ) ;
 762: LD_VAR 0 3
 766: PPUSH
 767: LD_VAR 0 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: CALL_OW 322
 779: GO 759
 781: POP
 782: POP
// if ban_techs then
 783: LD_VAR 0 4
 787: IFFALSE 823
// for j in ban_techs do
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 4
 798: PUSH
 799: FOR_IN
 800: IFFALSE 821
// SetTech ( j , i , state_disabled ) ;
 802: LD_VAR 0 3
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: CALL_OW 322
 819: GO 799
 821: POP
 822: POP
// end ;
 823: GO 740
 825: POP
 826: POP
// if sibBombAllowed = 1 then
 827: LD_EXP 23
 831: PUSH
 832: LD_INT 1
 834: EQUAL
 835: IFFALSE 850
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 837: LD_INT 25
 839: PPUSH
 840: LD_INT 3
 842: PPUSH
 843: LD_INT 1
 845: PPUSH
 846: CALL_OW 322
// end ;
 850: LD_VAR 0 1
 854: RET
// export function SetDiplomacy ; begin
 855: LD_INT 0
 857: PPUSH
// if GameType = 1 then
 858: LD_EXP 2
 862: PUSH
 863: LD_INT 1
 865: EQUAL
 866: IFFALSE 932
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 884: LD_INT 3
 886: PPUSH
 887: LD_INT 6
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 900: LD_INT 3
 902: PPUSH
 903: LD_INT 8
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 1
 911: PPUSH
 912: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 916: LD_INT 6
 918: PPUSH
 919: LD_INT 8
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: CALL_OW 80
// end ; end ;
 932: LD_VAR 0 1
 936: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
// if GameType = 1 then
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: EQUAL
 951: IFFALSE 1413
// begin game := false ;
 953: LD_ADDR_EXP 3
 957: PUSH
 958: LD_INT 0
 960: ST_TO_ADDR
// your_side := 1 ;
 961: LD_ADDR_OWVAR 2
 965: PUSH
 966: LD_INT 1
 968: ST_TO_ADDR
// mc_amer := 1 ;
 969: LD_ADDR_EXP 5
 973: PUSH
 974: LD_INT 1
 976: ST_TO_ADDR
// mc_leg := 2 ;
 977: LD_ADDR_EXP 6
 981: PUSH
 982: LD_INT 2
 984: ST_TO_ADDR
// mc_rus_1 := 3 ;
 985: LD_ADDR_EXP 7
 989: PUSH
 990: LD_INT 3
 992: ST_TO_ADDR
// mc_rus_2 := 4 ;
 993: LD_ADDR_EXP 8
 997: PUSH
 998: LD_INT 4
1000: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
1001: LD_ADDR_EXP 19
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 1
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: LD_INT 200
1017: PUSH
1018: LD_INT 250
1020: PUSH
1021: LD_INT 300
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_EXP 26
1033: ARRAY
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 13
1043: PUSH
1044: LD_INT 8
1046: PUSH
1047: LD_INT 50
1049: PUSH
1050: LD_INT 500
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 17
1061: PUSH
1062: LD_INT 5
1064: PUSH
1065: LD_INT 50
1067: PUSH
1068: LD_INT 300
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 18
1079: PUSH
1080: LD_INT 4
1082: PUSH
1083: LD_INT 5
1085: PUSH
1086: LD_INT 6
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_EXP 26
1098: ARRAY
1099: PUSH
1100: LD_INT 30
1102: PUSH
1103: LD_INT 300
1105: PUSH
1106: LD_INT 450
1108: PUSH
1109: LD_INT 500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 26
1121: ARRAY
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1135: LD_ADDR_VAR 0 4
1139: PUSH
1140: LD_INT 190
1142: PUSH
1143: LD_INT 193
1145: PUSH
1146: LD_INT 3
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 182
1156: PUSH
1157: LD_INT 117
1159: PUSH
1160: LD_INT 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 114
1170: PUSH
1171: LD_INT 152
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 85
1184: PUSH
1185: LD_INT 38
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// for i in sources do
1202: LD_ADDR_VAR 0 2
1206: PUSH
1207: LD_VAR 0 4
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1248
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 2
1231: ARRAY
1232: PPUSH
1233: LD_VAR 0 2
1237: PUSH
1238: LD_INT 3
1240: ARRAY
1241: PPUSH
1242: CALL_OW 62
1246: GO 1212
1248: POP
1249: POP
// disableGlobalTimer := false ;
1250: LD_ADDR_EXP 4
1254: PUSH
1255: LD_INT 0
1257: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1258: LD_ADDR_EXP 15
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 6
1271: PUSH
1272: LD_INT 7
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: PUSH
1280: LD_OWVAR 67
1284: ARRAY
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// ruOutpost := [ ] ;
1290: LD_ADDR_EXP 14
1294: PUSH
1295: EMPTY
1296: ST_TO_ADDR
// staticMines := [ ] ;
1297: LD_ADDR_EXP 16
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// baseCaptured := false ;
1304: LD_ADDR_EXP 17
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// legDestCounter := 0 ;
1312: LD_ADDR_EXP 18
1316: PUSH
1317: LD_INT 0
1319: ST_TO_ADDR
// legOfferAccepted := false ;
1320: LD_ADDR_EXP 20
1324: PUSH
1325: LD_INT 0
1327: ST_TO_ADDR
// legChangeSide := false ;
1328: LD_ADDR_EXP 21
1332: PUSH
1333: LD_INT 0
1335: ST_TO_ADDR
// allyDestCounter := 0 ;
1336: LD_ADDR_EXP 22
1340: PUSH
1341: LD_INT 0
1343: ST_TO_ADDR
// outpostEscape := false ;
1344: LD_ADDR_EXP 27
1348: PUSH
1349: LD_INT 0
1351: ST_TO_ADDR
// PrepareAmericans ;
1352: CALL 6987 0 0
// PrepareLegion ;
1356: CALL 5408 0 0
// PrepareRussians ;
1360: CALL 2441 0 0
// playerForces := PreparePlayer ;
1364: LD_ADDR_EXP 10
1368: PUSH
1369: CALL 8257 0 0
1373: ST_TO_ADDR
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1374: LD_INT 4
1376: PPUSH
1377: LD_INT 3
1379: PPUSH
1380: LD_INT 8
1382: PPUSH
1383: LD_INT 5
1385: PPUSH
1386: LD_INT 3
1388: PPUSH
1389: LD_INT 1
1391: PPUSH
1392: LD_INT 8
1394: PPUSH
1395: LD_INT 2
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL 53193 0 9
// MC_Start ;
1405: CALL 63497 0 0
// Action ;
1409: CALL 10261 0 0
// end ; end ;
1413: LD_VAR 0 1
1417: RET
// export function CustomInitMacro ; begin
1418: LD_INT 0
1420: PPUSH
// if GameType <> 1 then
1421: LD_EXP 2
1425: PUSH
1426: LD_INT 1
1428: NONEQUAL
1429: IFFALSE 1433
// exit ;
1431: GO 2436
// MC_SetScanArea ( mc_amer , amerBase ) ;
1433: LD_EXP 5
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL 85874 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1445: LD_EXP 5
1449: PPUSH
1450: LD_INT 4
1452: PPUSH
1453: CALL 85818 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1457: LD_EXP 5
1461: PPUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 6
1467: PUSH
1468: LD_INT 7
1470: PUSH
1471: LD_INT 9
1473: PUSH
1474: LD_INT 10
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: PPUSH
1484: CALL 85706 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1488: LD_EXP 5
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL 85388 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1500: LD_EXP 5
1504: PPUSH
1505: LD_INT 3
1507: PPUSH
1508: CALL 85119 0 2
// MC_SetDefenderLimit ( mc_amer , 3 ) ;
1512: LD_EXP 5
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: CALL 84801 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ) ;
1524: LD_EXP 5
1528: PPUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 1
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 5
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 6
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 7
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 1
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 12
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL 84616 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1630: LD_EXP 5
1634: PPUSH
1635: LD_INT 33
1637: PUSH
1638: LD_INT 114
1640: PUSH
1641: LD_INT 16
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 32
1655: PUSH
1656: LD_INT 110
1658: PUSH
1659: LD_INT 12
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PPUSH
1675: CALL 84508 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 10
1686: PUSH
1687: LD_INT 15
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: LD_INT 11
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL 85295 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1706: LD_EXP 6
1710: PPUSH
1711: LD_INT 6
1713: PPUSH
1714: CALL 85874 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1718: LD_EXP 6
1722: PPUSH
1723: LD_INT 7
1725: PPUSH
1726: CALL 85818 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1730: LD_EXP 6
1734: PPUSH
1735: LD_INT 30
1737: PUSH
1738: LD_INT 27
1740: PUSH
1741: LD_INT 28
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: PPUSH
1753: CALL 85706 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1757: LD_EXP 6
1761: PPUSH
1762: LD_INT 17
1764: PPUSH
1765: CALL 85388 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1769: LD_EXP 6
1773: PPUSH
1774: LD_INT 6
1776: PPUSH
1777: CALL 85119 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1781: LD_EXP 6
1785: PPUSH
1786: LD_INT 5
1788: PPUSH
1789: CALL 84801 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1793: LD_EXP 6
1797: PPUSH
1798: LD_INT 10
1800: PPUSH
1801: LD_INT 9
1803: PPUSH
1804: CALL 84298 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 155 , 133 , 0 ] ] ) ;
1808: LD_EXP 6
1812: PPUSH
1813: LD_INT 4
1815: PUSH
1816: LD_INT 155
1818: PUSH
1819: LD_INT 133
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: PPUSH
1834: CALL 84508 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1838: LD_EXP 6
1842: PPUSH
1843: LD_INT 13
1845: PUSH
1846: LD_INT 2
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 31
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 13
1863: PUSH
1864: LD_INT 2
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 31
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 13
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: LD_INT 27
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 13
1899: PUSH
1900: LD_INT 1
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: LD_INT 27
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 13
1917: PUSH
1918: LD_INT 1
1920: PUSH
1921: LD_INT 2
1923: PUSH
1924: LD_INT 27
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 13
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 28
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 13
1953: PUSH
1954: LD_INT 1
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: LD_INT 28
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 13
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: LD_INT 2
1977: PUSH
1978: LD_INT 32
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PPUSH
1997: CALL 84616 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2001: LD_EXP 7
2005: PPUSH
2006: LD_INT 11
2008: PPUSH
2009: CALL 85874 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2013: LD_EXP 7
2017: PPUSH
2018: LD_INT 12
2020: PPUSH
2021: CALL 85818 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2025: LD_EXP 7
2029: PPUSH
2030: LD_INT 43
2032: PUSH
2033: LD_INT 47
2035: PUSH
2036: LD_INT 45
2038: PUSH
2039: LD_INT 49
2041: PUSH
2042: LD_INT 46
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PPUSH
2052: CALL 85706 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2056: LD_EXP 7
2060: PPUSH
2061: LD_INT 13
2063: PPUSH
2064: CALL 85388 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2068: LD_EXP 7
2072: PPUSH
2073: LD_INT 11
2075: PPUSH
2076: CALL 85119 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2080: LD_EXP 7
2084: PPUSH
2085: LD_INT 5
2087: PPUSH
2088: CALL 84801 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2092: LD_EXP 7
2096: PPUSH
2097: LD_INT 24
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: LD_INT 46
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 24
2117: PUSH
2118: LD_INT 1
2120: PUSH
2121: LD_INT 3
2123: PUSH
2124: LD_INT 46
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 24
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: LD_INT 3
2141: PUSH
2142: LD_INT 46
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 24
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 3
2159: PUSH
2160: LD_INT 46
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 24
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: LD_INT 3
2177: PUSH
2178: LD_INT 46
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 22
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 51
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PPUSH
2213: CALL 84616 0 2
// MC_SetTeleportExit ( mc_rus_1 , [ [ 115 , 201 ] ] ) ;
2217: LD_EXP 7
2221: PPUSH
2222: LD_INT 115
2224: PUSH
2225: LD_INT 201
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: PPUSH
2235: CALL 85444 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2239: LD_EXP 8
2243: PPUSH
2244: LD_INT 15
2246: PPUSH
2247: CALL 85874 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2251: LD_EXP 8
2255: PPUSH
2256: LD_INT 16
2258: PPUSH
2259: CALL 85818 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2263: LD_EXP 8
2267: PPUSH
2268: LD_INT 43
2270: PUSH
2271: LD_INT 47
2273: PUSH
2274: LD_INT 45
2276: PUSH
2277: LD_INT 49
2279: PUSH
2280: LD_INT 46
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL 85706 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2294: LD_EXP 8
2298: PPUSH
2299: LD_INT 13
2301: PPUSH
2302: CALL 85388 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2306: LD_EXP 8
2310: PPUSH
2311: LD_INT 15
2313: PPUSH
2314: CALL 85119 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2318: LD_EXP 8
2322: PPUSH
2323: LD_INT 4
2325: PPUSH
2326: CALL 84801 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2330: LD_EXP 8
2334: PPUSH
2335: LD_INT 23
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 3
2343: PUSH
2344: LD_INT 46
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 23
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: LD_INT 1
2361: PUSH
2362: LD_INT 46
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 23
2373: PUSH
2374: LD_INT 1
2376: PUSH
2377: LD_INT 3
2379: PUSH
2380: LD_INT 45
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: LD_INT 23
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 1
2397: PUSH
2398: LD_INT 47
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 51
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL 84616 0 2
// end ;
2436: LD_VAR 0 1
2440: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2441: LD_INT 0
2443: PPUSH
2444: PPUSH
2445: PPUSH
2446: PPUSH
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2451: LD_INT 0
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: LD_INT 0
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: LD_INT 0
2471: PPUSH
2472: LD_INT 14
2474: PPUSH
2475: LD_INT 0
2477: PPUSH
2478: CALL 53193 0 9
// side := 3 ;
2482: LD_ADDR_VAR 0 5
2486: PUSH
2487: LD_INT 3
2489: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2490: LD_INT 38
2492: PPUSH
2493: LD_VAR 0 5
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2505: LD_INT 39
2507: PPUSH
2508: LD_VAR 0 5
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2520: LD_INT 34
2522: PPUSH
2523: LD_VAR 0 5
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 71 , 136 , 2 , 0 , 0 ] , [ 28 , 73 , 141 , 2 , 0 , 0 ] , [ 30 , 75 , 145 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 82 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 19 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 53 , 20 , 4 , 0 , 0 ] , [ 32 , 55 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] ] ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 0
2542: PUSH
2543: LD_INT 208
2545: PUSH
2546: LD_INT 163
2548: PUSH
2549: LD_INT 4
2551: PUSH
2552: LD_INT 0
2554: PUSH
2555: LD_INT 0
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 3
2568: PUSH
2569: LD_INT 194
2571: PUSH
2572: LD_INT 161
2574: PUSH
2575: LD_INT 1
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 17
2594: PUSH
2595: LD_INT 190
2597: PUSH
2598: LD_INT 161
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: LD_INT 0
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 200
2623: PUSH
2624: LD_INT 145
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: LD_INT 0
2632: PUSH
2633: LD_INT 0
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_INT 32
2646: PUSH
2647: LD_INT 192
2649: PUSH
2650: LD_INT 144
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: LD_INT 0
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 26
2672: PUSH
2673: LD_INT 216
2675: PUSH
2676: LD_INT 172
2678: PUSH
2679: LD_INT 3
2681: PUSH
2682: LD_INT 0
2684: PUSH
2685: LD_INT 0
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 26
2698: PUSH
2699: LD_INT 218
2701: PUSH
2702: LD_INT 176
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 0
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 29
2724: PUSH
2725: LD_INT 182
2727: PUSH
2728: LD_INT 149
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 0
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 8
2750: PUSH
2751: LD_INT 201
2753: PUSH
2754: LD_INT 171
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 10
2762: PUSH
2763: LD_INT 11
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 32
2776: PUSH
2777: LD_INT 188
2779: PUSH
2780: LD_INT 167
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: LD_INT 0
2788: PUSH
2789: LD_INT 0
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 32
2802: PUSH
2803: LD_INT 202
2805: PUSH
2806: LD_INT 179
2808: PUSH
2809: LD_INT 0
2811: PUSH
2812: LD_INT 0
2814: PUSH
2815: LD_INT 0
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 32
2828: PUSH
2829: LD_INT 209
2831: PUSH
2832: LD_INT 182
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 32
2854: PUSH
2855: LD_INT 220
2857: PUSH
2858: LD_INT 183
2860: PUSH
2861: LD_INT 5
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 32
2880: PUSH
2881: LD_INT 225
2883: PUSH
2884: LD_INT 181
2886: PUSH
2887: LD_INT 5
2889: PUSH
2890: LD_INT 0
2892: PUSH
2893: LD_INT 0
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 26
2906: PUSH
2907: LD_INT 220
2909: PUSH
2910: LD_INT 174
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 0
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 84
2935: PUSH
2936: LD_INT 128
2938: PUSH
2939: LD_INT 4
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 68
2961: PUSH
2962: LD_INT 121
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: LD_INT 0
2970: PUSH
2971: LD_INT 0
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 19
2984: PUSH
2985: LD_INT 72
2987: PUSH
2988: LD_INT 125
2990: PUSH
2991: LD_INT 5
2993: PUSH
2994: LD_INT 0
2996: PUSH
2997: LD_INT 0
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 18
3010: PUSH
3011: LD_INT 68
3013: PUSH
3014: LD_INT 124
3016: PUSH
3017: LD_INT 0
3019: PUSH
3020: LD_INT 0
3022: PUSH
3023: LD_INT 0
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 24
3036: PUSH
3037: LD_INT 64
3039: PUSH
3040: LD_INT 121
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: LD_INT 0
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 17
3062: PUSH
3063: LD_INT 65
3065: PUSH
3066: LD_INT 118
3068: PUSH
3069: LD_INT 2
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: LD_INT 0
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 68
3091: PUSH
3092: LD_INT 117
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 0
3100: PUSH
3101: LD_INT 0
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 8
3114: PUSH
3115: LD_INT 68
3117: PUSH
3118: LD_INT 130
3120: PUSH
3121: LD_INT 1
3123: PUSH
3124: LD_INT 14
3126: PUSH
3127: LD_INT 10
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PUSH
3138: LD_INT 8
3140: PUSH
3141: LD_INT 67
3143: PUSH
3144: LD_INT 110
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 11
3152: PUSH
3153: LD_INT 12
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: PUSH
3164: LD_INT 28
3166: PUSH
3167: LD_INT 71
3169: PUSH
3170: LD_INT 136
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: LD_INT 0
3178: PUSH
3179: LD_INT 0
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 28
3192: PUSH
3193: LD_INT 73
3195: PUSH
3196: LD_INT 141
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: LD_INT 0
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 30
3218: PUSH
3219: LD_INT 75
3221: PUSH
3222: LD_INT 145
3224: PUSH
3225: LD_INT 2
3227: PUSH
3228: LD_INT 0
3230: PUSH
3231: LD_INT 0
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 5
3244: PUSH
3245: LD_INT 111
3247: PUSH
3248: LD_INT 138
3250: PUSH
3251: LD_INT 4
3253: PUSH
3254: LD_INT 0
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 33
3270: PUSH
3271: LD_INT 104
3273: PUSH
3274: LD_INT 130
3276: PUSH
3277: LD_INT 3
3279: PUSH
3280: LD_INT 0
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 33
3296: PUSH
3297: LD_INT 110
3299: PUSH
3300: LD_INT 142
3302: PUSH
3303: LD_INT 5
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: LD_INT 0
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 33
3322: PUSH
3323: LD_INT 91
3325: PUSH
3326: LD_INT 131
3328: PUSH
3329: LD_INT 5
3331: PUSH
3332: LD_INT 0
3334: PUSH
3335: LD_INT 0
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 33
3348: PUSH
3349: LD_INT 107
3351: PUSH
3352: LD_INT 157
3354: PUSH
3355: LD_INT 5
3357: PUSH
3358: LD_INT 0
3360: PUSH
3361: LD_INT 0
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 33
3374: PUSH
3375: LD_INT 104
3377: PUSH
3378: LD_INT 160
3380: PUSH
3381: LD_INT 5
3383: PUSH
3384: LD_INT 0
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 33
3400: PUSH
3401: LD_INT 101
3403: PUSH
3404: LD_INT 162
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_INT 32
3426: PUSH
3427: LD_INT 87
3429: PUSH
3430: LD_INT 157
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 0
3438: PUSH
3439: LD_INT 0
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: PUSH
3450: LD_INT 32
3452: PUSH
3453: LD_INT 82
3455: PUSH
3456: LD_INT 158
3458: PUSH
3459: LD_INT 5
3461: PUSH
3462: LD_INT 0
3464: PUSH
3465: LD_INT 0
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 33
3478: PUSH
3479: LD_INT 91
3481: PUSH
3482: LD_INT 118
3484: PUSH
3485: LD_INT 4
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: LD_INT 0
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_INT 33
3504: PUSH
3505: LD_INT 89
3507: PUSH
3508: LD_INT 107
3510: PUSH
3511: LD_INT 4
3513: PUSH
3514: LD_INT 0
3516: PUSH
3517: LD_INT 0
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: LD_INT 86
3533: PUSH
3534: LD_INT 96
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 0
3542: PUSH
3543: LD_INT 0
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 33
3556: PUSH
3557: LD_INT 91
3559: PUSH
3560: LD_INT 102
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: LD_INT 0
3568: PUSH
3569: LD_INT 0
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 32
3582: PUSH
3583: LD_INT 80
3585: PUSH
3586: LD_INT 95
3588: PUSH
3589: LD_INT 3
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: LD_INT 0
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 28
3608: PUSH
3609: LD_INT 77
3611: PUSH
3612: LD_INT 105
3614: PUSH
3615: LD_INT 3
3617: PUSH
3618: LD_INT 0
3620: PUSH
3621: LD_INT 0
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: LD_INT 28
3634: PUSH
3635: LD_INT 85
3637: PUSH
3638: LD_INT 113
3640: PUSH
3641: LD_INT 3
3643: PUSH
3644: LD_INT 0
3646: PUSH
3647: LD_INT 0
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 28
3660: PUSH
3661: LD_INT 55
3663: PUSH
3664: LD_INT 97
3666: PUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 0
3672: PUSH
3673: LD_INT 0
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: PUSH
3684: LD_INT 28
3686: PUSH
3687: LD_INT 88
3689: PUSH
3690: LD_INT 128
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 0
3698: PUSH
3699: LD_INT 0
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 32
3712: PUSH
3713: LD_INT 69
3715: PUSH
3716: LD_INT 101
3718: PUSH
3719: LD_INT 2
3721: PUSH
3722: LD_INT 0
3724: PUSH
3725: LD_INT 0
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 1
3738: PUSH
3739: LD_INT 34
3741: PUSH
3742: LD_INT 23
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: LD_INT 0
3750: PUSH
3751: LD_INT 0
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 8
3764: PUSH
3765: LD_INT 25
3767: PUSH
3768: LD_INT 4
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 10
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 8
3790: PUSH
3791: LD_INT 15
3793: PUSH
3794: LD_INT 4
3796: PUSH
3797: LD_INT 2
3799: PUSH
3800: LD_INT 14
3802: PUSH
3803: LD_INT 12
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 29
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: LD_INT 35
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: LD_INT 0
3828: PUSH
3829: LD_INT 0
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 29
3842: PUSH
3843: LD_INT 24
3845: PUSH
3846: LD_INT 44
3848: PUSH
3849: LD_INT 2
3851: PUSH
3852: LD_INT 0
3854: PUSH
3855: LD_INT 0
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 34
3868: PUSH
3869: LD_INT 34
3871: PUSH
3872: LD_INT 32
3874: PUSH
3875: LD_INT 4
3877: PUSH
3878: LD_INT 0
3880: PUSH
3881: LD_INT 0
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 3
3894: PUSH
3895: LD_INT 14
3897: PUSH
3898: LD_INT 16
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: LD_INT 0
3906: PUSH
3907: LD_INT 0
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_INT 24
3920: PUSH
3921: LD_INT 10
3923: PUSH
3924: LD_INT 16
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: LD_INT 0
3932: PUSH
3933: LD_INT 0
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 19
3946: PUSH
3947: LD_INT 11
3949: PUSH
3950: LD_INT 13
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: LD_INT 0
3958: PUSH
3959: LD_INT 0
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: PUSH
3970: LD_INT 18
3972: PUSH
3973: LD_INT 14
3975: PUSH
3976: LD_INT 12
3978: PUSH
3979: LD_INT 3
3981: PUSH
3982: LD_INT 0
3984: PUSH
3985: LD_INT 0
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 16
3998: PUSH
3999: LD_INT 14
4001: PUSH
4002: LD_INT 19
4004: PUSH
4005: LD_INT 0
4007: PUSH
4008: LD_INT 0
4010: PUSH
4011: LD_INT 0
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 17
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 20
4030: PUSH
4031: LD_INT 5
4033: PUSH
4034: LD_INT 0
4036: PUSH
4037: LD_INT 0
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 28
4050: PUSH
4051: LD_INT 10
4053: PUSH
4054: LD_INT 5
4056: PUSH
4057: LD_INT 1
4059: PUSH
4060: LD_INT 0
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 28
4076: PUSH
4077: LD_INT 8
4079: PUSH
4080: LD_INT 8
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: LD_INT 0
4088: PUSH
4089: LD_INT 0
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 26
4102: PUSH
4103: LD_INT 19
4105: PUSH
4106: LD_INT 2
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: LD_INT 0
4114: PUSH
4115: LD_INT 0
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 26
4128: PUSH
4129: LD_INT 30
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: LD_INT 1
4137: PUSH
4138: LD_INT 0
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 53
4157: PUSH
4158: LD_INT 20
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 0
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 32
4180: PUSH
4181: LD_INT 55
4183: PUSH
4184: LD_INT 24
4186: PUSH
4187: LD_INT 4
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: LD_INT 0
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 32
4206: PUSH
4207: LD_INT 61
4209: PUSH
4210: LD_INT 45
4212: PUSH
4213: LD_INT 5
4215: PUSH
4216: LD_INT 0
4218: PUSH
4219: LD_INT 0
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 32
4232: PUSH
4233: LD_INT 52
4235: PUSH
4236: LD_INT 51
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: LD_INT 0
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 33
4258: PUSH
4259: LD_INT 56
4261: PUSH
4262: LD_INT 51
4264: PUSH
4265: LD_INT 5
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 33
4284: PUSH
4285: LD_INT 62
4287: PUSH
4288: LD_INT 49
4290: PUSH
4291: LD_INT 5
4293: PUSH
4294: LD_INT 0
4296: PUSH
4297: LD_INT 0
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 33
4310: PUSH
4311: LD_INT 41
4313: PUSH
4314: LD_INT 47
4316: PUSH
4317: LD_INT 5
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 33
4336: PUSH
4337: LD_INT 33
4339: PUSH
4340: LD_INT 52
4342: PUSH
4343: LD_INT 5
4345: PUSH
4346: LD_INT 0
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 5
4362: PUSH
4363: LD_INT 31
4365: PUSH
4366: LD_INT 40
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: LD_INT 0
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 33
4388: PUSH
4389: LD_INT 65
4391: PUSH
4392: LD_INT 37
4394: PUSH
4395: LD_INT 5
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 33
4414: PUSH
4415: LD_INT 63
4417: PUSH
4418: LD_INT 29
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: LD_INT 0
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 33
4440: PUSH
4441: LD_INT 54
4443: PUSH
4444: LD_INT 11
4446: PUSH
4447: LD_INT 4
4449: PUSH
4450: LD_INT 0
4452: PUSH
4453: LD_INT 0
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 33
4466: PUSH
4467: LD_INT 51
4469: PUSH
4470: LD_INT 6
4472: PUSH
4473: LD_INT 4
4475: PUSH
4476: LD_INT 0
4478: PUSH
4479: LD_INT 0
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 26
4492: PUSH
4493: LD_INT 39
4495: PUSH
4496: LD_INT 25
4498: PUSH
4499: LD_INT 0
4501: PUSH
4502: LD_INT 0
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 26
4518: PUSH
4519: LD_INT 37
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 0
4527: PUSH
4528: LD_INT 0
4530: PUSH
4531: LD_INT 0
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 32
4544: PUSH
4545: LD_INT 35
4547: PUSH
4548: LD_INT 17
4550: PUSH
4551: LD_INT 4
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 33
4570: PUSH
4571: LD_INT 35
4573: PUSH
4574: LD_INT 28
4576: PUSH
4577: LD_INT 4
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 0
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 33
4596: PUSH
4597: LD_INT 28
4599: PUSH
4600: LD_INT 46
4602: PUSH
4603: LD_INT 5
4605: PUSH
4606: LD_INT 0
4608: PUSH
4609: LD_INT 0
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 33
4622: PUSH
4623: LD_INT 31
4625: PUSH
4626: LD_INT 6
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 0
4634: PUSH
4635: LD_INT 0
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 26
4648: PUSH
4649: LD_INT 54
4651: PUSH
4652: LD_INT 38
4654: PUSH
4655: LD_INT 4
4657: PUSH
4658: LD_INT 0
4660: PUSH
4661: LD_INT 0
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 207
4677: PUSH
4678: LD_INT 167
4680: PUSH
4681: LD_INT 3
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 0
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// for i in tmp do
4783: LD_ADDR_VAR 0 2
4787: PUSH
4788: LD_VAR 0 4
4792: PUSH
4793: FOR_IN
4794: IFFALSE 5025
// begin uc_side := side ;
4796: LD_ADDR_OWVAR 20
4800: PUSH
4801: LD_VAR 0 5
4805: ST_TO_ADDR
// uc_nation := nation_russian ;
4806: LD_ADDR_OWVAR 21
4810: PUSH
4811: LD_INT 3
4813: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4814: LD_ADDR_OWVAR 42
4818: PUSH
4819: LD_VAR 0 2
4823: PUSH
4824: LD_INT 1
4826: ARRAY
4827: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4828: LD_ADDR_OWVAR 43
4832: PUSH
4833: LD_INT 5
4835: PPUSH
4836: LD_INT 6
4838: PPUSH
4839: CALL_OW 12
4843: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4844: LD_ADDR_OWVAR 44
4848: PUSH
4849: LD_VAR 0 2
4853: PUSH
4854: LD_INT 5
4856: ARRAY
4857: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4858: LD_ADDR_OWVAR 45
4862: PUSH
4863: LD_VAR 0 2
4867: PUSH
4868: LD_INT 6
4870: ARRAY
4871: ST_TO_ADDR
// sr := 0 ;
4872: LD_ADDR_VAR 0 6
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4880: LD_VAR 0 2
4884: PUSH
4885: LD_INT 1
4887: ARRAY
4888: PUSH
4889: LD_INT 29
4891: EQUAL
4892: IFFALSE 4904
// sr := mat_oil else
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 2
4901: ST_TO_ADDR
4902: GO 4926
// if i [ 1 ] = b_siberite_mine then
4904: LD_VAR 0 2
4908: PUSH
4909: LD_INT 1
4911: ARRAY
4912: PUSH
4913: LD_INT 30
4915: EQUAL
4916: IFFALSE 4926
// sr := mat_siberit ;
4918: LD_ADDR_VAR 0 6
4922: PUSH
4923: LD_INT 3
4925: ST_TO_ADDR
// if sr then
4926: LD_VAR 0 6
4930: IFFALSE 4986
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4932: LD_VAR 0 2
4936: PUSH
4937: LD_INT 2
4939: ARRAY
4940: PPUSH
4941: LD_VAR 0 2
4945: PUSH
4946: LD_INT 3
4948: ARRAY
4949: PPUSH
4950: LD_VAR 0 6
4954: PPUSH
4955: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 2
4966: ARRAY
4967: PPUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 3
4975: ARRAY
4976: PPUSH
4977: LD_VAR 0 5
4981: PPUSH
4982: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: PUSH
4996: LD_INT 2
4998: ARRAY
4999: PPUSH
5000: LD_VAR 0 2
5004: PUSH
5005: LD_INT 3
5007: ARRAY
5008: PPUSH
5009: LD_VAR 0 2
5013: PUSH
5014: LD_INT 4
5016: ARRAY
5017: PPUSH
5018: CALL_OW 47
5022: ST_TO_ADDR
// end ;
5023: GO 4793
5025: POP
5026: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5027: LD_ADDR_VAR 0 7
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_VAR 0 5
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 30
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: ST_TO_ADDR
// if not depot then
5063: LD_VAR 0 7
5067: NOT
5068: IFFALSE 5072
// exit ;
5070: GO 5403
// base := PrepareBase ( depot [ 2 ] , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5072: LD_ADDR_VAR 0 8
5076: PUSH
5077: NOP4
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: LD_INT 0
5088: PPUSH
5089: LD_INT 6
5091: PUSH
5092: LD_INT 7
5094: PUSH
5095: LD_INT 8
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: PUSH
5103: NOP4
5107: ARRAY
5108: PPUSH
5109: LD_INT 3000
5111: PUSH
5112: LD_INT 300
5114: PUSH
5115: LD_INT 100
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: PPUSH
5123: LD_INT 12
5125: PUSH
5126: LD_INT 6
5128: PUSH
5129: LD_INT 6
5131: PUSH
5132: LD_INT 4
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: PPUSH
5141: NOP4
5145: ST_TO_ADDR
// if not base then
5146: NOP4
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5403
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5155: NOP4
5159: PUSH
5160: NOP4
5164: PPUSH
5165: NOP4
5169: PPUSH
5170: NOP4
5174: PPUSH
5175: NOP4
5179: ST_TO_ADDR
// base := PrepareBase ( depot [ 1 ] , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5180: NOP4
5184: PUSH
5185: NOP4
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PPUSH
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 7
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: PUSH
5211: NOP4
5215: ARRAY
5216: PPUSH
5217: LD_INT 3000
5219: PUSH
5220: LD_INT 300
5222: PUSH
5223: LD_INT 100
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: LD_INT 12
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: LD_INT 6
5239: PUSH
5240: LD_INT 4
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PPUSH
5249: NOP4
5253: ST_TO_ADDR
// if not base then
5254: NOP4
5258: NOT
5259: IFFALSE 5263
// exit ;
5261: GO 5403
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5263: NOP4
5267: PUSH
5268: NOP4
5272: PPUSH
5273: NOP4
5277: PPUSH
5278: NOP4
5282: PPUSH
5283: NOP4
5287: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5288: NOP4
5292: PUSH
5293: LD_INT 22
5295: PUSH
5296: LD_INT 3
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 30
5305: PUSH
5306: LD_INT 0
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PPUSH
5317: NOP4
5321: PUSH
5322: LD_INT 1
5324: ARRAY
5325: PPUSH
5326: LD_INT 0
5328: PPUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: NOP4
5347: ARRAY
5348: PPUSH
5349: LD_INT 500
5351: PUSH
5352: LD_INT 100
5354: PUSH
5355: LD_INT 10
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PPUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 7
5368: PUSH
5369: LD_INT 8
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: NOP4
5381: ARRAY
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 0
5388: PUSH
5389: LD_INT 1
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PPUSH
5398: NOP4
5402: ST_TO_ADDR
// end ;
5403: LD_VAR 0 1
5407: RET
// export function PrepareLegion ; var i , b , veh , tmp , cameras , side , sr , depot , base ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
5417: PPUSH
5418: PPUSH
5419: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5420: LD_INT 0
5422: PPUSH
5423: LD_INT 0
5425: PPUSH
5426: LD_INT 6
5428: PPUSH
5429: LD_INT 0
5431: PPUSH
5432: LD_INT 0
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 8
5443: PPUSH
5444: LD_INT 0
5446: PPUSH
5447: NOP4
// side := 8 ;
5451: NOP4
5455: PUSH
5456: LD_INT 8
5458: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5459: NOP4
5463: PUSH
5464: LD_INT 20
5466: PPUSH
5467: LD_INT 0
5469: PPUSH
5470: NOP4
5474: ST_TO_ADDR
// if tmp then
5475: NOP4
5479: IFFALSE 5607
// begin for i = 1 to tmp [ 1 ] do
5481: NOP4
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: NOP4
5495: PUSH
5496: LD_INT 1
5498: ARRAY
5499: PUSH
5500: FOR_TO
5501: IFFALSE 5605
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5503: NOP4
5507: PUSH
5508: LD_INT 1
5510: ARRAY
5511: PUSH
5512: NOP4
5516: ARRAY
5517: PPUSH
5518: NOP4
5522: PUSH
5523: LD_INT 2
5525: ARRAY
5526: PUSH
5527: NOP4
5531: ARRAY
5532: PPUSH
5533: NOP4
5537: PPUSH
5538: LD_INT 0
5540: PPUSH
5541: NOP4
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5545: NOP4
5549: PUSH
5550: NOP4
5554: PPUSH
5555: NOP4
5559: PUSH
5560: LD_INT 1
5562: PLUS
5563: PPUSH
5564: NOP4
5568: PUSH
5569: LD_INT 1
5571: ARRAY
5572: PUSH
5573: NOP4
5577: ARRAY
5578: PUSH
5579: NOP4
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: NOP4
5592: ARRAY
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PPUSH
5598: NOP4
5602: ST_TO_ADDR
// end ;
5603: GO 5500
5605: POP
5606: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5607: NOP4
5611: PUSH
5612: LD_INT 165
5614: PUSH
5615: LD_INT 156
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 143
5624: PUSH
5625: LD_INT 145
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 152
5634: PUSH
5635: LD_INT 165
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 123
5644: PUSH
5645: LD_INT 153
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 161
5654: PUSH
5655: LD_INT 215
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 172
5664: PUSH
5665: LD_INT 100
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 148
5674: PUSH
5675: LD_INT 83
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 122
5684: PUSH
5685: LD_INT 68
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 105
5694: PUSH
5695: LD_INT 74
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 113
5704: PUSH
5705: LD_INT 97
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: ST_TO_ADDR
// for i in cameras do
5724: NOP4
5728: PUSH
5729: NOP4
5733: PUSH
5734: FOR_IN
5735: IFFALSE 5766
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5737: NOP4
5741: PUSH
5742: LD_INT 1
5744: ARRAY
5745: PPUSH
5746: NOP4
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PPUSH
5755: NOP4
5759: PPUSH
5760: NOP4
5764: GO 5734
5766: POP
5767: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 162 , 134 , 0 , 0 , 0 ] , [ 32 , 149 , 132 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5768: NOP4
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: LD_INT 144
5778: PUSH
5779: LD_INT 110
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: LD_INT 0
5787: PUSH
5788: LD_INT 0
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 151
5804: PUSH
5805: LD_INT 118
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 0
5813: PUSH
5814: LD_INT 0
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: PUSH
5825: LD_INT 8
5827: PUSH
5828: LD_INT 158
5830: PUSH
5831: LD_INT 110
5833: PUSH
5834: LD_INT 4
5836: PUSH
5837: LD_INT 10
5839: PUSH
5840: LD_INT 15
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 23
5853: PUSH
5854: LD_INT 154
5856: PUSH
5857: LD_INT 121
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: LD_INT 0
5865: PUSH
5866: LD_INT 0
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 20
5879: PUSH
5880: LD_INT 155
5882: PUSH
5883: LD_INT 118
5885: PUSH
5886: LD_INT 4
5888: PUSH
5889: LD_INT 0
5891: PUSH
5892: LD_INT 0
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: PUSH
5903: LD_INT 21
5905: PUSH
5906: LD_INT 151
5908: PUSH
5909: LD_INT 122
5911: PUSH
5912: LD_INT 0
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: PUSH
5929: LD_INT 18
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 118
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: LD_INT 0
5943: PUSH
5944: LD_INT 0
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 17
5957: PUSH
5958: LD_INT 147
5960: PUSH
5961: LD_INT 114
5963: PUSH
5964: LD_INT 2
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 29
5983: PUSH
5984: LD_INT 163
5986: PUSH
5987: LD_INT 120
5989: PUSH
5990: LD_INT 5
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 27
6009: PUSH
6010: LD_INT 137
6012: PUSH
6013: LD_INT 116
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 27
6035: PUSH
6036: LD_INT 133
6038: PUSH
6039: LD_INT 111
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 27
6061: PUSH
6062: LD_INT 132
6064: PUSH
6065: LD_INT 106
6067: PUSH
6068: LD_INT 4
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 26
6087: PUSH
6088: LD_INT 137
6090: PUSH
6091: LD_INT 111
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 8
6113: PUSH
6114: LD_INT 141
6116: PUSH
6117: LD_INT 117
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: LD_INT 13
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 140
6142: PUSH
6143: LD_INT 128
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: LD_INT 146
6168: PUSH
6169: LD_INT 96
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 32
6191: PUSH
6192: LD_INT 150
6194: PUSH
6195: LD_INT 98
6197: PUSH
6198: LD_INT 3
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 32
6217: PUSH
6218: LD_INT 142
6220: PUSH
6221: LD_INT 95
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 32
6243: PUSH
6244: LD_INT 159
6246: PUSH
6247: LD_INT 104
6249: PUSH
6250: LD_INT 3
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 32
6269: PUSH
6270: LD_INT 133
6272: PUSH
6273: LD_INT 95
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: LD_INT 131
6298: PUSH
6299: LD_INT 102
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 32
6321: PUSH
6322: LD_INT 162
6324: PUSH
6325: LD_INT 134
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 32
6347: PUSH
6348: LD_INT 149
6350: PUSH
6351: LD_INT 132
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 26
6373: PUSH
6374: LD_INT 143
6376: PUSH
6377: LD_INT 122
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: LD_INT 0
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 26
6399: PUSH
6400: LD_INT 164
6402: PUSH
6403: LD_INT 116
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// for i in tmp do
6450: NOP4
6454: PUSH
6455: NOP4
6459: PUSH
6460: FOR_IN
6461: IFFALSE 6692
// begin uc_side := side ;
6463: LD_ADDR_OWVAR 20
6467: PUSH
6468: NOP4
6472: ST_TO_ADDR
// uc_nation := nation_arabian ;
6473: LD_ADDR_OWVAR 21
6477: PUSH
6478: LD_INT 2
6480: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6481: LD_ADDR_OWVAR 42
6485: PUSH
6486: NOP4
6490: PUSH
6491: LD_INT 1
6493: ARRAY
6494: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6495: LD_ADDR_OWVAR 43
6499: PUSH
6500: LD_INT 5
6502: PPUSH
6503: LD_INT 6
6505: PPUSH
6506: NOP4
6510: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6511: LD_ADDR_OWVAR 44
6515: PUSH
6516: NOP4
6520: PUSH
6521: LD_INT 5
6523: ARRAY
6524: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6525: LD_ADDR_OWVAR 45
6529: PUSH
6530: NOP4
6534: PUSH
6535: LD_INT 6
6537: ARRAY
6538: ST_TO_ADDR
// sr := 0 ;
6539: NOP4
6543: PUSH
6544: LD_INT 0
6546: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6547: NOP4
6551: PUSH
6552: LD_INT 1
6554: ARRAY
6555: PUSH
6556: LD_INT 29
6558: EQUAL
6559: IFFALSE 6571
// sr := mat_oil else
6561: NOP4
6565: PUSH
6566: LD_INT 2
6568: ST_TO_ADDR
6569: GO 6593
// if i [ 1 ] = b_siberite_mine then
6571: NOP4
6575: PUSH
6576: LD_INT 1
6578: ARRAY
6579: PUSH
6580: LD_INT 30
6582: EQUAL
6583: IFFALSE 6593
// sr := mat_siberit ;
6585: NOP4
6589: PUSH
6590: LD_INT 3
6592: ST_TO_ADDR
// if sr then
6593: NOP4
6597: IFFALSE 6653
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6599: NOP4
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: NOP4
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: NOP4
6621: PPUSH
6622: NOP4
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6626: NOP4
6630: PUSH
6631: LD_INT 2
6633: ARRAY
6634: PPUSH
6635: NOP4
6639: PUSH
6640: LD_INT 3
6642: ARRAY
6643: PPUSH
6644: NOP4
6648: PPUSH
6649: NOP4
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6653: NOP4
6657: PUSH
6658: NOP4
6662: PUSH
6663: LD_INT 2
6665: ARRAY
6666: PPUSH
6667: NOP4
6671: PUSH
6672: LD_INT 3
6674: ARRAY
6675: PPUSH
6676: NOP4
6680: PUSH
6681: LD_INT 4
6683: ARRAY
6684: PPUSH
6685: NOP4
6689: ST_TO_ADDR
// end ;
6690: GO 6460
6692: POP
6693: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6694: NOP4
6698: PUSH
6699: LD_INT 22
6701: PUSH
6702: NOP4
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 30
6713: PUSH
6714: LD_INT 1
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: NOP4
6729: ST_TO_ADDR
// if not depot then
6730: NOP4
6734: NOT
6735: IFFALSE 6739
// exit ;
6737: GO 6982
// base := PrepareBase ( depot [ 1 ] , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 5 ] ) ;
6739: NOP4
6743: PUSH
6744: NOP4
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PPUSH
6753: LD_INT 0
6755: PPUSH
6756: LD_INT 6
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: LD_INT 8
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: NOP4
6774: ARRAY
6775: PPUSH
6776: LD_INT 3000
6778: PUSH
6779: LD_INT 300
6781: PUSH
6782: LD_INT 100
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: LD_INT 12
6792: PUSH
6793: LD_INT 6
6795: PUSH
6796: LD_INT 6
6798: PUSH
6799: LD_INT 5
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: PPUSH
6808: NOP4
6812: ST_TO_ADDR
// if not base then
6813: NOP4
6817: NOT
6818: IFFALSE 6822
// exit ;
6820: GO 6982
// if Difficulty > 1 then
6822: NOP4
6826: PUSH
6827: LD_INT 1
6829: GREATER
6830: IFFALSE 6903
// begin InitHc ;
6832: NOP4
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
6836: LD_INT 1
6838: PPUSH
6839: LD_INT 5
6841: PPUSH
6842: LD_INT 5
6844: PUSH
6845: LD_INT 8
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: NOP4
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: ARRAY
6861: PPUSH
6862: NOP4
// for i = 1 to Difficulty do
6866: NOP4
6870: PUSH
6871: DOUBLE
6872: LD_INT 1
6874: DEC
6875: ST_TO_ADDR
6876: NOP4
6880: PUSH
6881: FOR_TO
6882: IFFALSE 6901
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
6884: NOP4
6888: PPUSH
6889: LD_INT 24
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: NOP4
6899: GO 6881
6901: POP
6902: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
6903: NOP4
6907: PUSH
6908: NOP4
6912: PPUSH
6913: NOP4
6917: PPUSH
6918: NOP4
6922: PPUSH
6923: NOP4
6927: ST_TO_ADDR
// hc_gallery := ru ;
6928: LD_ADDR_OWVAR 33
6932: PUSH
6933: LD_STRING ru
6935: ST_TO_ADDR
// hc_face_number := 44 ;
6936: LD_ADDR_OWVAR 34
6940: PUSH
6941: LD_INT 44
6943: ST_TO_ADDR
// hc_name := Robert Farmer ;
6944: LD_ADDR_OWVAR 26
6948: PUSH
6949: LD_STRING Robert Farmer
6951: ST_TO_ADDR
// hc_sex := sex_male ;
6952: LD_ADDR_OWVAR 27
6956: PUSH
6957: LD_INT 1
6959: ST_TO_ADDR
// hc_class := 1 ;
6960: LD_ADDR_OWVAR 28
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// Farmer := CreateHuman ;
6968: NOP4
6972: PUSH
6973: NOP4
6977: ST_TO_ADDR
// InitHc ;
6978: NOP4
// end ;
6982: LD_VAR 0 1
6986: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
6987: LD_INT 0
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: LD_INT 4
7005: PPUSH
7006: LD_INT 0
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: LD_INT 0
7014: PPUSH
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 10
7020: PPUSH
7021: LD_INT 0
7023: PPUSH
7024: NOP4
// side := 4 ;
7028: NOP4
7032: PUSH
7033: LD_INT 4
7035: ST_TO_ADDR
// SetTech ( tech_gun , side , state_researched ) ;
7036: LD_INT 39
7038: PPUSH
7039: NOP4
7043: PPUSH
7044: LD_INT 2
7046: PPUSH
7047: NOP4
// SetTech ( tech_advMet , side , state_researched ) ;
7051: LD_INT 34
7053: PPUSH
7054: NOP4
7058: PPUSH
7059: LD_INT 2
7061: PPUSH
7062: NOP4
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 19 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7066: NOP4
7070: PUSH
7071: LD_INT 1
7073: PUSH
7074: LD_INT 144
7076: PUSH
7077: LD_INT 18
7079: PUSH
7080: LD_INT 4
7082: PUSH
7083: LD_INT 0
7085: PUSH
7086: LD_INT 0
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 3
7099: PUSH
7100: LD_INT 137
7102: PUSH
7103: LD_INT 8
7105: PUSH
7106: LD_INT 4
7108: PUSH
7109: LD_INT 0
7111: PUSH
7112: LD_INT 0
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 20
7125: PUSH
7126: LD_INT 141
7128: PUSH
7129: LD_INT 8
7131: PUSH
7132: LD_INT 4
7134: PUSH
7135: LD_INT 0
7137: PUSH
7138: LD_INT 0
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 19
7151: PUSH
7152: LD_INT 137
7154: PUSH
7155: LD_INT 5
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 0
7163: PUSH
7164: LD_INT 0
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 18
7177: PUSH
7178: LD_INT 137
7180: PUSH
7181: LD_INT 12
7183: PUSH
7184: LD_INT 0
7186: PUSH
7187: LD_INT 0
7189: PUSH
7190: LD_INT 0
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 17
7203: PUSH
7204: LD_INT 133
7206: PUSH
7207: LD_INT 4
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 0
7215: PUSH
7216: LD_INT 0
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 16
7229: PUSH
7230: LD_INT 140
7232: PUSH
7233: LD_INT 11
7235: PUSH
7236: LD_INT 5
7238: PUSH
7239: LD_INT 0
7241: PUSH
7242: LD_INT 0
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 8
7255: PUSH
7256: LD_INT 149
7258: PUSH
7259: LD_INT 26
7261: PUSH
7262: LD_INT 4
7264: PUSH
7265: LD_INT 10
7267: PUSH
7268: LD_INT 15
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 8
7281: PUSH
7282: LD_INT 142
7284: PUSH
7285: LD_INT 26
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: LD_INT 11
7293: PUSH
7294: LD_INT 12
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 27
7307: PUSH
7308: LD_INT 153
7310: PUSH
7311: LD_INT 32
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 0
7319: PUSH
7320: LD_INT 0
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 27
7333: PUSH
7334: LD_INT 145
7336: PUSH
7337: LD_INT 32
7339: PUSH
7340: LD_INT 3
7342: PUSH
7343: LD_INT 0
7345: PUSH
7346: LD_INT 0
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 27
7359: PUSH
7360: LD_INT 138
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: LD_INT 4
7368: PUSH
7369: LD_INT 0
7371: PUSH
7372: LD_INT 0
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 27
7385: PUSH
7386: LD_INT 144
7388: PUSH
7389: LD_INT 13
7391: PUSH
7392: LD_INT 0
7394: PUSH
7395: LD_INT 0
7397: PUSH
7398: LD_INT 0
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 26
7411: PUSH
7412: LD_INT 124
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 4
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: LD_INT 0
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 26
7437: PUSH
7438: LD_INT 121
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 2
7446: PUSH
7447: LD_INT 0
7449: PUSH
7450: LD_INT 0
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 26
7463: PUSH
7464: LD_INT 118
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: PUSH
7487: LD_INT 29
7489: PUSH
7490: LD_INT 159
7492: PUSH
7493: LD_INT 47
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 0
7501: PUSH
7502: LD_INT 0
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 32
7515: PUSH
7516: LD_INT 146
7518: PUSH
7519: LD_INT 41
7521: PUSH
7522: LD_INT 0
7524: PUSH
7525: LD_INT 0
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 33
7541: PUSH
7542: LD_INT 136
7544: PUSH
7545: LD_INT 37
7547: PUSH
7548: LD_INT 0
7550: PUSH
7551: LD_INT 0
7553: PUSH
7554: LD_INT 0
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 33
7567: PUSH
7568: LD_INT 132
7570: PUSH
7571: LD_INT 34
7573: PUSH
7574: LD_INT 0
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 36
7593: PUSH
7594: LD_INT 124
7596: PUSH
7597: LD_INT 7
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: LD_INT 0
7605: PUSH
7606: LD_INT 0
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 5
7619: PUSH
7620: LD_INT 124
7622: PUSH
7623: LD_INT 19
7625: PUSH
7626: LD_INT 0
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 32
7645: PUSH
7646: LD_INT 127
7648: PUSH
7649: LD_INT 23
7651: PUSH
7652: LD_INT 0
7654: PUSH
7655: LD_INT 0
7657: PUSH
7658: LD_INT 0
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// for i in tmp do
7694: NOP4
7698: PUSH
7699: NOP4
7703: PUSH
7704: FOR_IN
7705: IFFALSE 7936
// begin uc_side := side ;
7707: LD_ADDR_OWVAR 20
7711: PUSH
7712: NOP4
7716: ST_TO_ADDR
// uc_nation := nation_american ;
7717: LD_ADDR_OWVAR 21
7721: PUSH
7722: LD_INT 1
7724: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7725: LD_ADDR_OWVAR 42
7729: PUSH
7730: NOP4
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7739: LD_ADDR_OWVAR 43
7743: PUSH
7744: LD_INT 5
7746: PPUSH
7747: LD_INT 6
7749: PPUSH
7750: NOP4
7754: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7755: LD_ADDR_OWVAR 44
7759: PUSH
7760: NOP4
7764: PUSH
7765: LD_INT 5
7767: ARRAY
7768: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7769: LD_ADDR_OWVAR 45
7773: PUSH
7774: NOP4
7778: PUSH
7779: LD_INT 6
7781: ARRAY
7782: ST_TO_ADDR
// sr := 0 ;
7783: NOP4
7787: PUSH
7788: LD_INT 0
7790: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7791: NOP4
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: PUSH
7800: LD_INT 29
7802: EQUAL
7803: IFFALSE 7815
// sr := mat_oil else
7805: NOP4
7809: PUSH
7810: LD_INT 2
7812: ST_TO_ADDR
7813: GO 7837
// if i [ 1 ] = b_siberite_mine then
7815: NOP4
7819: PUSH
7820: LD_INT 1
7822: ARRAY
7823: PUSH
7824: LD_INT 30
7826: EQUAL
7827: IFFALSE 7837
// sr := mat_siberit ;
7829: NOP4
7833: PUSH
7834: LD_INT 3
7836: ST_TO_ADDR
// if sr then
7837: NOP4
7841: IFFALSE 7897
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
7843: NOP4
7847: PUSH
7848: LD_INT 2
7850: ARRAY
7851: PPUSH
7852: NOP4
7856: PUSH
7857: LD_INT 3
7859: ARRAY
7860: PPUSH
7861: NOP4
7865: PPUSH
7866: NOP4
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
7870: NOP4
7874: PUSH
7875: LD_INT 2
7877: ARRAY
7878: PPUSH
7879: NOP4
7883: PUSH
7884: LD_INT 3
7886: ARRAY
7887: PPUSH
7888: NOP4
7892: PPUSH
7893: NOP4
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7897: NOP4
7901: PUSH
7902: NOP4
7906: PUSH
7907: LD_INT 2
7909: ARRAY
7910: PPUSH
7911: NOP4
7915: PUSH
7916: LD_INT 3
7918: ARRAY
7919: PPUSH
7920: NOP4
7924: PUSH
7925: LD_INT 4
7927: ARRAY
7928: PPUSH
7929: NOP4
7933: ST_TO_ADDR
// end ;
7934: GO 7704
7936: POP
7937: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
7938: NOP4
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: NOP4
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PPUSH
7969: NOP4
7973: ST_TO_ADDR
// if not depot then
7974: NOP4
7978: NOT
7979: IFFALSE 7983
// exit ;
7981: GO 8252
// base := PrepareBase ( depot [ 1 ] , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 50 , 50 , 40 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
7983: NOP4
7987: PUSH
7988: NOP4
7992: PUSH
7993: LD_INT 1
7995: ARRAY
7996: PPUSH
7997: LD_STRING theta3
7999: PPUSH
8000: LD_INT 8
8002: PUSH
8003: LD_INT 7
8005: PUSH
8006: LD_INT 6
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: NOP4
8018: ARRAY
8019: PPUSH
8020: LD_INT 2500
8022: PUSH
8023: LD_INT 2000
8025: PUSH
8026: LD_INT 1750
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: NOP4
8038: ARRAY
8039: PUSH
8040: LD_INT 300
8042: PUSH
8043: LD_INT 250
8045: PUSH
8046: LD_INT 200
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: NOP4
8058: ARRAY
8059: PUSH
8060: LD_INT 50
8062: PUSH
8063: LD_INT 50
8065: PUSH
8066: LD_INT 40
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: PUSH
8074: NOP4
8078: ARRAY
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: PPUSH
8085: LD_INT 7
8087: PUSH
8088: LD_INT 6
8090: PUSH
8091: LD_INT 5
8093: PUSH
8094: LD_INT 5
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: PPUSH
8103: NOP4
8107: ST_TO_ADDR
// if not base then
8108: NOP4
8112: NOT
8113: IFFALSE 8117
// exit ;
8115: GO 8252
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8117: NOP4
8121: PUSH
8122: NOP4
8126: PPUSH
8127: NOP4
8131: PPUSH
8132: NOP4
8136: PPUSH
8137: NOP4
8141: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8142: LD_INT 1
8144: PPUSH
8145: LD_INT 1
8147: PPUSH
8148: LD_INT 7
8150: PPUSH
8151: NOP4
// allyCommander := CreateHuman ;
8155: NOP4
8159: PUSH
8160: NOP4
8164: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8165: NOP4
8169: PPUSH
8170: LD_INT 139
8172: PPUSH
8173: LD_INT 15
8175: PPUSH
8176: LD_INT 0
8178: PPUSH
8179: NOP4
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8183: NOP4
8187: PPUSH
8188: LD_INT 137
8190: PPUSH
8191: LD_INT 15
8193: PPUSH
8194: NOP4
// hc_gallery := us ;
8198: LD_ADDR_OWVAR 33
8202: PUSH
8203: LD_STRING us
8205: ST_TO_ADDR
// hc_face_number := 7 ;
8206: LD_ADDR_OWVAR 34
8210: PUSH
8211: LD_INT 7
8213: ST_TO_ADDR
// hc_name := Arthur Powell ;
8214: LD_ADDR_OWVAR 26
8218: PUSH
8219: LD_STRING Arthur Powell
8221: ST_TO_ADDR
// hc_sex := sex_male ;
8222: LD_ADDR_OWVAR 27
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// hc_class := 1 ;
8230: LD_ADDR_OWVAR 28
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// Powell := CreateHuman ;
8238: NOP4
8242: PUSH
8243: NOP4
8247: ST_TO_ADDR
// InitHc ;
8248: NOP4
// end ;
8252: LD_VAR 0 1
8256: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8257: LD_INT 0
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
// side := 1 ;
8268: NOP4
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8276: NOP4
8280: PUSH
8281: EMPTY
8282: PUSH
8283: EMPTY
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: ST_TO_ADDR
// uc_side := side ;
8289: LD_ADDR_OWVAR 20
8293: PUSH
8294: NOP4
8298: ST_TO_ADDR
// uc_nation := nation_american ;
8299: LD_ADDR_OWVAR 21
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// InitHc ;
8307: NOP4
// InitVc ;
8311: NOP4
// hc_importance := 0 ;
8315: LD_ADDR_OWVAR 32
8319: PUSH
8320: LD_INT 0
8322: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8323: NOP4
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: ST_TO_ADDR
// if commander = 2 then
8342: NOP4
8346: PUSH
8347: LD_INT 2
8349: EQUAL
8350: IFFALSE 8371
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8352: NOP4
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 4
8362: PUSH
8363: LD_INT 4
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: ST_TO_ADDR
// if commander = 3 then
8371: NOP4
8375: PUSH
8376: LD_INT 3
8378: EQUAL
8379: IFFALSE 8400
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8381: NOP4
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 5
8391: PUSH
8392: LD_INT 5
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8400: NOP4
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// if commander = 2 then
8419: NOP4
8423: PUSH
8424: LD_INT 2
8426: EQUAL
8427: IFFALSE 8448
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8429: NOP4
8433: PUSH
8434: LD_INT 1
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// if commander = 3 then
8448: NOP4
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: IFFALSE 8477
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8458: NOP4
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 3
8468: PUSH
8469: LD_INT 1
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: LIST
8476: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8477: NOP4
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: LD_INT 4
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: ST_TO_ADDR
// if commander = 2 then
8496: NOP4
8500: PUSH
8501: LD_INT 2
8503: EQUAL
8504: IFFALSE 8525
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8506: NOP4
8510: PUSH
8511: LD_INT 7
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: LD_INT 6
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// if commander = 3 then
8525: NOP4
8529: PUSH
8530: LD_INT 3
8532: EQUAL
8533: IFFALSE 8554
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8535: NOP4
8539: PUSH
8540: LD_INT 9
8542: PUSH
8543: LD_INT 10
8545: PUSH
8546: LD_INT 7
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8554: NOP4
8558: PUSH
8559: LD_INT 5
8561: PUSH
8562: LD_INT 5
8564: PUSH
8565: LD_INT 4
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: PUSH
8573: NOP4
8577: ARRAY
8578: ST_TO_ADDR
// if commander = 2 then
8579: NOP4
8583: PUSH
8584: LD_INT 2
8586: EQUAL
8587: IFFALSE 8603
// tanks := tanks + 3 ;
8589: NOP4
8593: PUSH
8594: NOP4
8598: PUSH
8599: LD_INT 3
8601: PLUS
8602: ST_TO_ADDR
// for i = 1 to tanks do
8603: NOP4
8607: PUSH
8608: DOUBLE
8609: LD_INT 1
8611: DEC
8612: ST_TO_ADDR
8613: NOP4
8617: PUSH
8618: FOR_TO
8619: IFFALSE 8729
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8621: NOP4
8625: PUSH
8626: NOP4
8630: PUSH
8631: LD_INT 3
8633: MOD
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: ARRAY
8639: PPUSH
8640: NOP4
8644: PUSH
8645: LD_INT 1
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: NOP4
8655: ARRAY
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: NOP4
8664: PUSH
8665: NOP4
8669: PUSH
8670: LD_INT 3
8672: MOD
8673: PUSH
8674: LD_INT 1
8676: PLUS
8677: ARRAY
8678: PPUSH
8679: LD_INT 60
8681: PPUSH
8682: LD_INT 70
8684: PPUSH
8685: NOP4
8689: PPUSH
8690: NOP4
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8694: NOP4
8698: PUSH
8699: NOP4
8703: PPUSH
8704: LD_INT 1
8706: PPUSH
8707: NOP4
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PUSH
8716: NOP4
8720: ADD
8721: PPUSH
8722: NOP4
8726: ST_TO_ADDR
// end ;
8727: GO 8618
8729: POP
8730: POP
// cl := 1 ;
8731: NOP4
8735: PUSH
8736: LD_INT 1
8738: ST_TO_ADDR
// for i = 1 to 10 do
8739: NOP4
8743: PUSH
8744: DOUBLE
8745: LD_INT 1
8747: DEC
8748: ST_TO_ADDR
8749: LD_INT 10
8751: PUSH
8752: FOR_TO
8753: IFFALSE 8868
// begin if i mod 4 = 0 then
8755: NOP4
8759: PUSH
8760: LD_INT 4
8762: MOD
8763: PUSH
8764: LD_INT 0
8766: EQUAL
8767: IFFALSE 8783
// cl := cl + 1 ;
8769: NOP4
8773: PUSH
8774: NOP4
8778: PUSH
8779: LD_INT 1
8781: PLUS
8782: ST_TO_ADDR
// if cl = 2 then
8783: NOP4
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8801
// cl := 3 ;
8793: NOP4
8797: PUSH
8798: LD_INT 3
8800: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8801: LD_INT 0
8803: PPUSH
8804: NOP4
8808: PPUSH
8809: LD_INT 6
8811: PUSH
8812: LD_INT 6
8814: PUSH
8815: LD_INT 5
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: PUSH
8823: NOP4
8827: ARRAY
8828: PPUSH
8829: NOP4
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8833: NOP4
8837: PUSH
8838: NOP4
8842: PPUSH
8843: LD_INT 2
8845: PPUSH
8846: NOP4
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PUSH
8855: NOP4
8859: ADD
8860: PPUSH
8861: NOP4
8865: ST_TO_ADDR
// end ;
8866: GO 8752
8868: POP
8869: POP
// if commander = 1 then
8870: NOP4
8874: PUSH
8875: LD_INT 1
8877: EQUAL
8878: IFFALSE 8946
// for i = 1 to 4 do
8880: NOP4
8884: PUSH
8885: DOUBLE
8886: LD_INT 1
8888: DEC
8889: ST_TO_ADDR
8890: LD_INT 4
8892: PUSH
8893: FOR_TO
8894: IFFALSE 8944
// begin PrepareHuman ( false , class_soldier , 8 ) ;
8896: LD_INT 0
8898: PPUSH
8899: LD_INT 1
8901: PPUSH
8902: LD_INT 8
8904: PPUSH
8905: NOP4
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8909: NOP4
8913: PUSH
8914: NOP4
8918: PPUSH
8919: LD_INT 2
8921: PPUSH
8922: NOP4
8926: PUSH
8927: LD_INT 2
8929: ARRAY
8930: PUSH
8931: NOP4
8935: ADD
8936: PPUSH
8937: NOP4
8941: ST_TO_ADDR
// end ;
8942: GO 8893
8944: POP
8945: POP
// techs := [ ] ;
8946: NOP4
8950: PUSH
8951: EMPTY
8952: ST_TO_ADDR
// if commander = 1 then
8953: NOP4
8957: PUSH
8958: LD_INT 1
8960: EQUAL
8961: IFFALSE 8986
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
8963: NOP4
8967: PUSH
8968: LD_INT 51
8970: PUSH
8971: LD_INT 52
8973: PUSH
8974: LD_INT 53
8976: PUSH
8977: LD_INT 12
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: ST_TO_ADDR
// if commander = 2 then
8986: NOP4
8990: PUSH
8991: LD_INT 2
8993: EQUAL
8994: IFFALSE 9031
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
8996: NOP4
9000: PUSH
9001: LD_INT 48
9003: PUSH
9004: LD_INT 47
9006: PUSH
9007: LD_INT 46
9009: PUSH
9010: LD_INT 45
9012: PUSH
9013: LD_INT 35
9015: PUSH
9016: LD_INT 60
9018: PUSH
9019: LD_INT 6
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: ST_TO_ADDR
// if commander = 3 then
9031: NOP4
9035: PUSH
9036: LD_INT 3
9038: EQUAL
9039: IFFALSE 9088
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9041: NOP4
9045: PUSH
9046: LD_INT 27
9048: PUSH
9049: LD_INT 36
9051: PUSH
9052: LD_INT 32
9054: PUSH
9055: LD_INT 57
9057: PUSH
9058: LD_INT 58
9060: PUSH
9061: LD_INT 47
9063: PUSH
9064: LD_INT 46
9066: PUSH
9067: LD_INT 51
9069: PUSH
9070: LD_INT 69
9072: PUSH
9073: LD_INT 39
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if techs then
9088: NOP4
9092: IFFALSE 9126
// for i in techs do
9094: NOP4
9098: PUSH
9099: NOP4
9103: PUSH
9104: FOR_IN
9105: IFFALSE 9124
// SetTech ( i , 1 , state_researched ) ;
9107: NOP4
9111: PPUSH
9112: LD_INT 1
9114: PPUSH
9115: LD_INT 2
9117: PPUSH
9118: NOP4
9122: GO 9104
9124: POP
9125: POP
// hc_gallery := skirmish ;
9126: LD_ADDR_OWVAR 33
9130: PUSH
9131: LD_STRING skirmish
9133: ST_TO_ADDR
// hc_face_number := commander ;
9134: LD_ADDR_OWVAR 34
9138: PUSH
9139: NOP4
9143: ST_TO_ADDR
// hc_importance := 100 ;
9144: LD_ADDR_OWVAR 32
9148: PUSH
9149: LD_INT 100
9151: ST_TO_ADDR
// case commander of 1 :
9152: NOP4
9156: PUSH
9157: LD_INT 1
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9189
9165: POP
// begin hc_name := Jeff Ironside ;
9166: LD_ADDR_OWVAR 26
9170: PUSH
9171: LD_STRING Jeff Ironside
9173: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9174: LD_INT 1
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: LD_INT 7
9182: PPUSH
9183: NOP4
// end ; 2 :
9187: GO 9254
9189: LD_INT 2
9191: DOUBLE
9192: EQUAL
9193: IFTRUE 9197
9195: GO 9221
9197: POP
// begin hc_name := Paul Johnson ;
9198: LD_ADDR_OWVAR 26
9202: PUSH
9203: LD_STRING Paul Johnson
9205: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9206: LD_INT 1
9208: PPUSH
9209: LD_INT 3
9211: PPUSH
9212: LD_INT 7
9214: PPUSH
9215: NOP4
// end ; 3 :
9219: GO 9254
9221: LD_INT 3
9223: DOUBLE
9224: EQUAL
9225: IFTRUE 9229
9227: GO 9253
9229: POP
// begin hc_name := Lisa Stuart ;
9230: LD_ADDR_OWVAR 26
9234: PUSH
9235: LD_STRING Lisa Stuart
9237: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9238: LD_INT 2
9240: PPUSH
9241: LD_INT 4
9243: PPUSH
9244: LD_INT 7
9246: PPUSH
9247: NOP4
// end ; end ;
9251: GO 9254
9253: POP
// playerCommander := CreateHuman ;
9254: NOP4
9258: PUSH
9259: NOP4
9263: ST_TO_ADDR
// hc_importance := 0 ;
9264: LD_ADDR_OWVAR 32
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// hc_gallery :=  ;
9272: LD_ADDR_OWVAR 33
9276: PUSH
9277: LD_STRING 
9279: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9280: NOP4
9284: PUSH
9285: NOP4
9289: PPUSH
9290: LD_INT 2
9292: PPUSH
9293: NOP4
9297: PUSH
9298: LD_INT 2
9300: ARRAY
9301: PUSH
9302: NOP4
9306: ADD
9307: PPUSH
9308: NOP4
9312: ST_TO_ADDR
// end ;
9313: LD_VAR 0 1
9317: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , veh ; begin
9318: LD_INT 0
9320: PPUSH
9321: PPUSH
9322: PPUSH
9323: PPUSH
9324: PPUSH
// uc_side := 1 ;
9325: LD_ADDR_OWVAR 20
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// uc_nation := 1 ;
9333: LD_ADDR_OWVAR 21
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// InitHc ;
9341: NOP4
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9345: NOP4
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 3
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: NOP4
9368: ARRAY
9369: ST_TO_ADDR
// for i = 1 to peopleAmount do
9370: NOP4
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: NOP4
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9435
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9388: LD_INT 0
9390: PPUSH
9391: LD_INT 2
9393: PPUSH
9394: LD_INT 7
9396: PUSH
9397: LD_INT 6
9399: PUSH
9400: LD_INT 5
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: NOP4
9412: ARRAY
9413: PPUSH
9414: NOP4
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9418: NOP4
9422: PPUSH
9423: LD_INT 19
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: NOP4
// end ;
9433: GO 9385
9435: POP
9436: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9437: LD_INT 2
9439: PPUSH
9440: LD_INT 1
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_INT 13
9448: PPUSH
9449: LD_INT 58
9451: PPUSH
9452: NOP4
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9456: NOP4
9460: PPUSH
9461: LD_INT 19
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: NOP4
// if commander = 1 then
9471: NOP4
9475: PUSH
9476: LD_INT 1
9478: EQUAL
9479: IFFALSE 9490
// wait ( 6 6$00 ) else
9481: LD_INT 12600
9483: PPUSH
9484: NOP4
9488: GO 9497
// wait ( 8 8$00 ) ;
9490: LD_INT 16800
9492: PPUSH
9493: NOP4
// uc_side := 1 ;
9497: LD_ADDR_OWVAR 20
9501: PUSH
9502: LD_INT 1
9504: ST_TO_ADDR
// uc_nation := 1 ;
9505: LD_ADDR_OWVAR 21
9509: PUSH
9510: LD_INT 1
9512: ST_TO_ADDR
// InitVc ;
9513: NOP4
// InitHc ;
9517: NOP4
// for i = 1 to 5 do
9521: NOP4
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_INT 5
9533: PUSH
9534: FOR_TO
9535: IFFALSE 9753
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9537: LD_INT 4
9539: PUSH
9540: LD_INT 3
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: NOP4
9555: PUSH
9556: LD_INT 3
9558: MOD
9559: PUSH
9560: LD_INT 1
9562: PLUS
9563: ARRAY
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: LD_INT 1
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: NOP4
9586: PUSH
9587: LD_INT 3
9589: MOD
9590: PUSH
9591: LD_INT 1
9593: PLUS
9594: ARRAY
9595: PPUSH
9596: LD_INT 6
9598: PUSH
9599: LD_INT 12
9601: PUSH
9602: LD_INT 11
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: NOP4
9614: PUSH
9615: LD_INT 3
9617: MOD
9618: PUSH
9619: LD_INT 1
9621: PLUS
9622: ARRAY
9623: PPUSH
9624: LD_INT 40
9626: PPUSH
9627: LD_INT 55
9629: PPUSH
9630: NOP4
9634: PPUSH
9635: NOP4
// veh := CreateVehicle ;
9639: NOP4
9643: PUSH
9644: NOP4
9648: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9649: NOP4
9653: PPUSH
9654: LD_INT 19
9656: PPUSH
9657: LD_INT 0
9659: PPUSH
9660: NOP4
// if GetWeapon ( veh ) = us_cargo_bay then
9664: NOP4
9668: PPUSH
9669: NOP4
9673: PUSH
9674: LD_INT 12
9676: EQUAL
9677: IFFALSE 9709
// begin AddCargo ( veh , mat_cans , 70 ) ;
9679: NOP4
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 70
9689: PPUSH
9690: NOP4
// AddCargo ( veh , mat_siberit , 30 ) ;
9694: NOP4
9698: PPUSH
9699: LD_INT 3
9701: PPUSH
9702: LD_INT 30
9704: PPUSH
9705: NOP4
// end ; if GetControl ( veh ) = control_manual then
9709: NOP4
9713: PPUSH
9714: NOP4
9718: PUSH
9719: LD_INT 1
9721: EQUAL
9722: IFFALSE 9751
// begin PrepareHuman ( false , 3 , 6 ) ;
9724: LD_INT 0
9726: PPUSH
9727: LD_INT 3
9729: PPUSH
9730: LD_INT 6
9732: PPUSH
9733: NOP4
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9737: NOP4
9741: PPUSH
9742: NOP4
9746: PPUSH
9747: NOP4
// end ; end ;
9751: GO 9534
9753: POP
9754: POP
// if not reinforceAllowed then
9755: NOP4
9759: NOT
9760: IFFALSE 9764
// exit ;
9762: GO 9918
// wait ( 25 25$00 ) ;
9764: LD_INT 52500
9766: PPUSH
9767: NOP4
// uc_side := 1 ;
9771: LD_ADDR_OWVAR 20
9775: PUSH
9776: LD_INT 1
9778: ST_TO_ADDR
// uc_nation := 1 ;
9779: LD_ADDR_OWVAR 21
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// InitVc ;
9787: NOP4
// InitHc ;
9791: NOP4
// for i = 1 to 4 do
9795: NOP4
9799: PUSH
9800: DOUBLE
9801: LD_INT 1
9803: DEC
9804: ST_TO_ADDR
9805: LD_INT 4
9807: PUSH
9808: FOR_TO
9809: IFFALSE 9916
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
9811: LD_INT 5
9813: PPUSH
9814: LD_INT 3
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_INT 6
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: NOP4
// veh := CreateVehicle ;
9830: NOP4
9834: PUSH
9835: NOP4
9839: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9840: NOP4
9844: PPUSH
9845: LD_INT 19
9847: PPUSH
9848: LD_INT 0
9850: PPUSH
9851: NOP4
// if GetControl ( veh ) = control_manual then
9855: NOP4
9859: PPUSH
9860: NOP4
9864: PUSH
9865: LD_INT 1
9867: EQUAL
9868: IFFALSE 9914
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9870: LD_INT 0
9872: PPUSH
9873: LD_INT 3
9875: PPUSH
9876: LD_INT 7
9878: PUSH
9879: LD_INT 6
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: NOP4
9894: ARRAY
9895: PPUSH
9896: NOP4
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9900: NOP4
9904: PPUSH
9905: NOP4
9909: PPUSH
9910: NOP4
// end ; end ;
9914: GO 9808
9916: POP
9917: POP
// end ;
9918: LD_VAR 0 1
9922: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
9923: LD_INT 0
9925: PPUSH
9926: PPUSH
9927: PPUSH
9928: PPUSH
9929: PPUSH
// uc_side := 8 ;
9930: LD_ADDR_OWVAR 20
9934: PUSH
9935: LD_INT 8
9937: ST_TO_ADDR
// uc_nation := nation_arabian ;
9938: LD_ADDR_OWVAR 21
9942: PUSH
9943: LD_INT 2
9945: ST_TO_ADDR
// for i = 1 to 2 do
9946: NOP4
9950: PUSH
9951: DOUBLE
9952: LD_INT 1
9954: DEC
9955: ST_TO_ADDR
9956: LD_INT 2
9958: PUSH
9959: FOR_TO
9960: IFFALSE 10040
// for j = 1 to 4 do
9962: NOP4
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 4
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10036
// begin PrepareHuman ( false , j , 8 ) ;
9978: LD_INT 0
9980: PPUSH
9981: NOP4
9985: PPUSH
9986: LD_INT 8
9988: PPUSH
9989: NOP4
// un := CreateHuman ;
9993: NOP4
9997: PUSH
9998: NOP4
10002: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10003: NOP4
10007: PPUSH
10008: LD_INT 23
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: NOP4
// tmp := tmp union un ;
10018: NOP4
10022: PUSH
10023: NOP4
10027: PUSH
10028: NOP4
10032: UNION
10033: ST_TO_ADDR
// end ;
10034: GO 9975
10036: POP
10037: POP
10038: GO 9959
10040: POP
10041: POP
// for i in tmp do
10042: NOP4
10046: PUSH
10047: NOP4
10051: PUSH
10052: FOR_IN
10053: IFFALSE 10072
// ComMoveXY ( i , 150 , 136 ) ;
10055: NOP4
10059: PPUSH
10060: LD_INT 150
10062: PPUSH
10063: LD_INT 136
10065: PPUSH
10066: NOP4
10070: GO 10052
10072: POP
10073: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10074: NOP4
10078: PUSH
10079: NOP4
10083: PPUSH
10084: NOP4
10088: PPUSH
10089: NOP4
10093: PUSH
10094: NOP4
10098: ARRAY
10099: PUSH
10100: NOP4
10104: UNION
10105: PPUSH
10106: NOP4
10110: ST_TO_ADDR
// end ;
10111: LD_VAR 0 1
10115: RET
// every 0 0$10 trigger GetTech ( tech_lapser , 3 ) = state_researched do
10116: LD_INT 31
10118: PPUSH
10119: LD_INT 3
10121: PPUSH
10122: NOP4
10126: PUSH
10127: LD_INT 2
10129: EQUAL
10130: IFFALSE 10260
10132: GO 10134
10134: DISABLE
// begin MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 78 , 151 , 5 ] , [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10135: NOP4
10139: PPUSH
10140: LD_INT 33
10142: PUSH
10143: LD_INT 78
10145: PUSH
10146: LD_INT 151
10148: PUSH
10149: LD_INT 5
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 33
10160: PUSH
10161: LD_INT 101
10163: PUSH
10164: LD_INT 159
10166: PUSH
10167: LD_INT 5
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 33
10178: PUSH
10179: LD_INT 105
10181: PUSH
10182: LD_INT 158
10184: PUSH
10185: LD_INT 5
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 33
10196: PUSH
10197: LD_INT 96
10199: PUSH
10200: LD_INT 136
10202: PUSH
10203: LD_INT 5
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 33
10214: PUSH
10215: LD_INT 94
10217: PUSH
10218: LD_INT 133
10220: PUSH
10221: LD_INT 4
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 33
10232: PUSH
10233: LD_INT 84
10235: PUSH
10236: LD_INT 102
10238: PUSH
10239: LD_INT 4
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: PPUSH
10256: NOP4
// end ; end_of_file
10260: END
// export function Action ; var i , tmp ; begin
10261: LD_INT 0
10263: PPUSH
10264: PPUSH
10265: PPUSH
// InGameOn ;
10266: NOP4
// CenterNowOnXY ( 225 , 217 ) ;
10270: LD_INT 225
10272: PPUSH
10273: LD_INT 217
10275: PPUSH
10276: NOP4
// for i in playerForces [ 2 ] do
10280: NOP4
10284: PUSH
10285: NOP4
10289: PUSH
10290: LD_INT 2
10292: ARRAY
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10428
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10297: NOP4
10301: PUSH
10302: LD_INT 1
10304: ARRAY
10305: PUSH
10306: NOP4
10310: PPUSH
10311: NOP4
10315: PUSH
10316: LD_INT 3
10318: PUSH
10319: LD_INT 4
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: IN
10326: AND
10327: IFFALSE 10411
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10329: NOP4
10333: PUSH
10334: LD_INT 1
10336: ARRAY
10337: PUSH
10338: LD_INT 1
10340: ARRAY
10341: PPUSH
10342: LD_INT 19
10344: PPUSH
10345: LD_INT 0
10347: PPUSH
10348: NOP4
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10352: NOP4
10356: PPUSH
10357: NOP4
10361: PUSH
10362: LD_INT 1
10364: ARRAY
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: NOP4
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10374: NOP4
10378: PUSH
10379: NOP4
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: NOP4
10391: PUSH
10392: LD_INT 1
10394: ARRAY
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: NOP4
10403: PPUSH
10404: NOP4
10408: ST_TO_ADDR
// end else
10409: GO 10426
// PlaceUnitInArea ( i , startArea , false ) ;
10411: NOP4
10415: PPUSH
10416: LD_INT 19
10418: PPUSH
10419: LD_INT 0
10421: PPUSH
10422: NOP4
// end ;
10426: GO 10294
10428: POP
10429: POP
// wait ( 0 0$2 ) ;
10430: LD_INT 70
10432: PPUSH
10433: NOP4
// Say ( playerCommander , DI-1 ) ;
10437: NOP4
10441: PPUSH
10442: LD_STRING DI-1
10444: PPUSH
10445: NOP4
// SayRadio ( Powell , DP-1 ) ;
10449: NOP4
10453: PPUSH
10454: LD_STRING DP-1
10456: PPUSH
10457: NOP4
// SayRadio ( Powell , DP-2 ) ;
10461: NOP4
10465: PPUSH
10466: LD_STRING DP-2
10468: PPUSH
10469: NOP4
// Say ( playerCommander , DI-2 ) ;
10473: NOP4
10477: PPUSH
10478: LD_STRING DI-2
10480: PPUSH
10481: NOP4
// InGameOff ;
10485: NOP4
// ChangeMissionObjectives ( O1 ) ;
10489: LD_STRING O1
10491: PPUSH
10492: NOP4
// game := true ;
10496: NOP4
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10504: LD_INT 35
10506: PPUSH
10507: NOP4
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
10511: NOP4
10515: PUSH
10516: LD_INT 1
10518: ARRAY
10519: PUSH
10520: NOP4
10524: PUSH
10525: LD_INT 2
10527: ARRAY
10528: GREATEREQUAL
10529: IFFALSE 10504
// outpostEscape := true ;
10531: NOP4
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
10539: NOP4
10543: PUSH
10544: NOP4
10548: PPUSH
10549: LD_INT 26
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: NOP4
10563: ST_TO_ADDR
// if tmp then
10564: NOP4
10568: IFFALSE 10586
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
10570: NOP4
10574: PUSH
10575: LD_INT 1
10577: ARRAY
10578: PPUSH
10579: LD_STRING DR-1-Escape
10581: PPUSH
10582: NOP4
// wait ( 0 0$1 ) ;
10586: LD_INT 35
10588: PPUSH
10589: NOP4
// for i in ruOutpost do
10593: NOP4
10597: PUSH
10598: NOP4
10602: PUSH
10603: FOR_IN
10604: IFFALSE 10658
// begin if IsInUnit ( i ) then
10606: NOP4
10610: PPUSH
10611: NOP4
10615: IFFALSE 10626
// ComExitBuilding ( i ) ;
10617: NOP4
10621: PPUSH
10622: NOP4
// AddComMoveXY ( i , 179 , 102 ) ;
10626: NOP4
10630: PPUSH
10631: LD_INT 179
10633: PPUSH
10634: LD_INT 102
10636: PPUSH
10637: NOP4
// AddComMoveXY ( i , 28 , 20 ) ;
10641: NOP4
10645: PPUSH
10646: LD_INT 28
10648: PPUSH
10649: LD_INT 20
10651: PPUSH
10652: NOP4
// end ;
10656: GO 10603
10658: POP
10659: POP
// tmp := [ ] ;
10660: NOP4
10664: PUSH
10665: EMPTY
10666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10667: LD_INT 35
10669: PPUSH
10670: NOP4
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus1Base ] ) ;
10674: NOP4
10678: PUSH
10679: NOP4
10683: PPUSH
10684: LD_INT 95
10686: PUSH
10687: LD_INT 11
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: NOP4
10698: ST_TO_ADDR
// if tmp then
10699: NOP4
10703: IFFALSE 10775
// for i in tmp do
10705: NOP4
10709: PUSH
10710: NOP4
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10773
// begin ruOutpost := ruOutpost diff i ;
10718: NOP4
10722: PUSH
10723: NOP4
10727: PUSH
10728: NOP4
10732: DIFF
10733: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , mc_rus_1 , mc_bases [ mc_rus_1 ] union i ) ;
10734: NOP4
10738: PUSH
10739: NOP4
10743: PPUSH
10744: NOP4
10748: PPUSH
10749: NOP4
10753: PUSH
10754: NOP4
10758: ARRAY
10759: PUSH
10760: NOP4
10764: UNION
10765: PPUSH
10766: NOP4
10770: ST_TO_ADDR
// end ;
10771: GO 10715
10773: POP
10774: POP
// until not ruOutpost ;
10775: NOP4
10779: NOT
10780: IFFALSE 10667
// end ;
10782: LD_VAR 0 1
10786: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
10787: NOP4
10791: IFFALSE 10980
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
10800: LD_INT 875
10802: PPUSH
10803: LD_INT 1225
10805: PPUSH
10806: NOP4
10810: PPUSH
10811: NOP4
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
10815: NOP4
10819: PUSH
10820: LD_INT 208
10822: PUSH
10823: LD_INT 166
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 218
10832: PUSH
10833: LD_INT 174
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 201
10842: PUSH
10843: LD_INT 173
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 189
10852: PUSH
10853: LD_INT 167
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 191
10862: PUSH
10863: LD_INT 160
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 209
10872: PUSH
10873: LD_INT 181
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 192
10882: PUSH
10883: LD_INT 162
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 197
10892: PUSH
10893: LD_INT 166
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
10910: NOP4
10914: PUSH
10915: DOUBLE
10916: LD_INT 1
10918: DEC
10919: ST_TO_ADDR
10920: LD_INT 5
10922: PUSH
10923: NOP4
10927: PLUS
10928: PUSH
10929: FOR_TO
10930: IFFALSE 10978
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
10932: NOP4
10936: PUSH
10937: NOP4
10941: ARRAY
10942: PUSH
10943: LD_INT 1
10945: ARRAY
10946: PPUSH
10947: NOP4
10951: PUSH
10952: NOP4
10956: ARRAY
10957: PUSH
10958: LD_INT 2
10960: ARRAY
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: NOP4
// wait ( 0 0$0.8 ) ;
10969: LD_INT 28
10971: PPUSH
10972: NOP4
// end ;
10976: GO 10929
10978: POP
10979: POP
// end ;
10980: PPOPN 2
10982: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
10983: NOP4
10987: NOT
10988: IFFALSE 11603
10990: GO 10992
10992: DISABLE
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
// begin enable ;
11002: ENABLE
// tmp := UnitFilter ( ruOutpost , [ f_class , 1 ] ) ;
11003: NOP4
11007: PUSH
11008: NOP4
11012: PPUSH
11013: LD_INT 25
11015: PUSH
11016: LD_INT 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: NOP4
11027: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ f_class , 2 ] ) ;
11028: NOP4
11032: PUSH
11033: NOP4
11037: PPUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: NOP4
11052: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11053: NOP4
11057: PUSH
11058: NOP4
11062: PPUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: LD_INT 24
11078: PUSH
11079: LD_INT 1000
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PPUSH
11094: NOP4
11098: ST_TO_ADDR
// if engs and buildings then
11099: NOP4
11103: PUSH
11104: NOP4
11108: AND
11109: IFFALSE 11182
// begin for i in engs do
11111: NOP4
11115: PUSH
11116: NOP4
11120: PUSH
11121: FOR_IN
11122: IFFALSE 11178
// if IsInUnit ( i ) then
11124: NOP4
11128: PPUSH
11129: NOP4
11133: IFFALSE 11146
// ComExitBuilding ( i ) else
11135: NOP4
11139: PPUSH
11140: NOP4
11144: GO 11176
// if not HasTask ( i ) then
11146: NOP4
11150: PPUSH
11151: NOP4
11155: NOT
11156: IFFALSE 11176
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11158: NOP4
11162: PPUSH
11163: NOP4
11167: PUSH
11168: LD_INT 1
11170: ARRAY
11171: PPUSH
11172: NOP4
11176: GO 11121
11178: POP
11179: POP
// end else
11180: GO 11285
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11182: NOP4
11186: NOT
11187: PUSH
11188: NOP4
11192: PPUSH
11193: LD_INT 30
11195: PUSH
11196: LD_INT 0
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: NOP4
11207: AND
11208: PUSH
11209: NOP4
11213: PPUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 54
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: NOP4
11231: AND
11232: IFFALSE 11285
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11234: NOP4
11238: PPUSH
11239: LD_INT 3
11241: PUSH
11242: LD_INT 54
11244: PUSH
11245: EMPTY
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: NOP4
11256: PPUSH
11257: NOP4
11261: PPUSH
11262: LD_INT 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: NOP4
11276: PUSH
11277: LD_INT 1
11279: ARRAY
11280: PPUSH
11281: NOP4
// if not tmp then
11285: NOP4
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11603
// if FilterUnitsInArea ( ruOutpostArea , [ f_enemy , 3 ] ) > 1 then
11294: LD_INT 25
11296: PPUSH
11297: LD_INT 81
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: NOP4
11311: PUSH
11312: LD_INT 1
11314: GREATER
11315: IFFALSE 11371
// begin for i in tmp do
11317: NOP4
11321: PUSH
11322: NOP4
11326: PUSH
11327: FOR_IN
11328: IFFALSE 11367
// begin if IsInUnit ( i ) then
11330: NOP4
11334: PPUSH
11335: NOP4
11339: IFFALSE 11350
// ComExitBuilding ( i ) ;
11341: NOP4
11345: PPUSH
11346: NOP4
// AddComAgressiveMove ( i , 204 , 164 ) ;
11350: NOP4
11354: PPUSH
11355: LD_INT 204
11357: PPUSH
11358: LD_INT 164
11360: PPUSH
11361: NOP4
// end ;
11365: GO 11327
11367: POP
11368: POP
// end else
11369: GO 11603
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11371: NOP4
11375: PPUSH
11376: LD_INT 3
11378: PUSH
11379: LD_INT 54
11381: PUSH
11382: EMPTY
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: NOP4
11393: IFFALSE 11603
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11395: NOP4
11399: PUSH
11400: NOP4
11404: PPUSH
11405: LD_INT 30
11407: PUSH
11408: LD_INT 32
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 58
11417: PUSH
11418: EMPTY
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PPUSH
11425: NOP4
11429: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
11430: NOP4
11434: NOT
11435: PUSH
11436: NOP4
11440: PPUSH
11441: LD_INT 30
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PPUSH
11451: NOP4
11455: AND
11456: IFFALSE 11493
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
11458: NOP4
11462: PPUSH
11463: NOP4
11467: PPUSH
11468: LD_INT 30
11470: PUSH
11471: LD_INT 5
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: NOP4
11482: PUSH
11483: LD_INT 1
11485: ARRAY
11486: PPUSH
11487: NOP4
// exit ;
11491: GO 11603
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
11493: NOP4
11497: PUSH
11498: NOP4
11502: PPUSH
11503: LD_INT 3
11505: PUSH
11506: LD_INT 54
11508: PUSH
11509: EMPTY
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PPUSH
11516: NOP4
11520: ST_TO_ADDR
// if j < empty then
11521: NOP4
11525: PUSH
11526: NOP4
11530: LESS
11531: IFFALSE 11545
// k := j else
11533: NOP4
11537: PUSH
11538: NOP4
11542: ST_TO_ADDR
11543: GO 11555
// k := empty ;
11545: NOP4
11549: PUSH
11550: NOP4
11554: ST_TO_ADDR
// for i = 1 to k do
11555: NOP4
11559: PUSH
11560: DOUBLE
11561: LD_INT 1
11563: DEC
11564: ST_TO_ADDR
11565: NOP4
11569: PUSH
11570: FOR_TO
11571: IFFALSE 11601
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
11573: NOP4
11577: PUSH
11578: NOP4
11582: ARRAY
11583: PPUSH
11584: NOP4
11588: PUSH
11589: NOP4
11593: ARRAY
11594: PPUSH
11595: NOP4
11599: GO 11570
11601: POP
11602: POP
// end ; end ;
11603: PPOPN 7
11605: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
11606: NOP4
11610: PUSH
11611: LD_INT 1
11613: EQUAL
11614: PUSH
11615: NOP4
11619: AND
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_INT 1
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 92
11633: PUSH
11634: LD_INT 208
11636: PUSH
11637: LD_INT 163
11639: PUSH
11640: LD_INT 8
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: NOP4
11657: AND
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 3
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 21
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 92
11681: PUSH
11682: LD_INT 208
11684: PUSH
11685: LD_INT 163
11687: PUSH
11688: LD_INT 14
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: PPUSH
11702: NOP4
11706: NOT
11707: AND
11708: IFFALSE 11878
11710: GO 11712
11712: DISABLE
11713: LD_INT 0
11715: PPUSH
// begin InGameOn ;
11716: NOP4
// CenterNowOnUnits ( playerCommander ) ;
11720: NOP4
11724: PPUSH
11725: NOP4
// wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: NOP4
// DialogueOn ;
11736: NOP4
// Say ( playerCommander , DI-1-BaseCaptured ) ;
11740: NOP4
11744: PPUSH
11745: LD_STRING DI-1-BaseCaptured
11747: PPUSH
11748: NOP4
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
11752: NOP4
11756: PPUSH
11757: LD_STRING DP-1-BaseCaptured
11759: PPUSH
11760: NOP4
// Say ( playerCommander , DI-2-BaseCaptured ) ;
11764: NOP4
11768: PPUSH
11769: LD_STRING DI-2-BaseCaptured
11771: PPUSH
11772: NOP4
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
11776: NOP4
11780: PPUSH
11781: LD_STRING DP-2-BaseCaptured
11783: PPUSH
11784: NOP4
// Say ( playerCommander , DI-3-BaseCaptured ) ;
11788: NOP4
11792: PPUSH
11793: LD_STRING DI-3-BaseCaptured
11795: PPUSH
11796: NOP4
// DialogueOff ;
11800: NOP4
// InGameOff ;
11804: NOP4
// ChangeMissionObjectives ( O2 ) ;
11808: LD_STRING O2
11810: PPUSH
11811: NOP4
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
11815: NOP4
11819: PUSH
11820: NOP4
11824: PPUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 3
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: NOP4
11839: PUSH
11840: FOR_IN
11841: IFFALSE 11857
// SetSide ( i , 1 ) ;
11843: NOP4
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: NOP4
11855: GO 11840
11857: POP
11858: POP
// baseCaptured := true ;
11859: NOP4
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// wait ( 0 0$35 ) ;
11867: LD_INT 1225
11869: PPUSH
11870: NOP4
// PrepareReinforcements ;
11874: NOP4
// end ;
11878: PPOPN 1
11880: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
11881: NOP4
11885: PUSH
11886: LD_INT 1
11888: EQUAL
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 101
11902: PUSH
11903: LD_INT 4
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PPUSH
11914: NOP4
11918: AND
11919: IFFALSE 12066
11921: GO 11923
11923: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
11924: LD_INT 4
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: NOP4
// DialogueOn ;
11934: NOP4
// CenterNowOnUnits ( allyCommander ) ;
11938: NOP4
11942: PPUSH
11943: NOP4
// SayRadio ( allyCommander , DM-1-Contact ) ;
11947: NOP4
11951: PPUSH
11952: LD_STRING DM-1-Contact
11954: PPUSH
11955: NOP4
// Say ( playerCommander , DI-1-Contact ) ;
11959: NOP4
11963: PPUSH
11964: LD_STRING DI-1-Contact
11966: PPUSH
11967: NOP4
// SayRadio ( allyCommander , DM-2-Contact ) ;
11971: NOP4
11975: PPUSH
11976: LD_STRING DM-2-Contact
11978: PPUSH
11979: NOP4
// Say ( playerCommander , DI-2-Contact ) ;
11983: NOP4
11987: PPUSH
11988: LD_STRING DI-2-Contact
11990: PPUSH
11991: NOP4
// SayRadio ( allyCommander , DM-3-Contact ) ;
11995: NOP4
11999: PPUSH
12000: LD_STRING DM-3-Contact
12002: PPUSH
12003: NOP4
// Say ( playerCommander , DI-3-Contact ) ;
12007: NOP4
12011: PPUSH
12012: LD_STRING DI-3-Contact
12014: PPUSH
12015: NOP4
// SayRadio ( allyCommander , DM-4-Contact ) ;
12019: NOP4
12023: PPUSH
12024: LD_STRING DM-4-Contact
12026: PPUSH
12027: NOP4
// Say ( playerCommander , DI-4-Contact ) ;
12031: NOP4
12035: PPUSH
12036: LD_STRING DI-4-Contact
12038: PPUSH
12039: NOP4
// SayRadio ( allyCommander , DM-5-Contact ) ;
12043: NOP4
12047: PPUSH
12048: LD_STRING DM-5-Contact
12050: PPUSH
12051: NOP4
// DialogueOff ;
12055: NOP4
// ChangeMissionObjectives ( O3 ) ;
12059: LD_STRING O3
12061: PPUSH
12062: NOP4
// end ;
12066: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
12067: NOP4
12071: PUSH
12072: LD_INT 1
12074: EQUAL
12075: PUSH
12076: NOP4
12080: PUSH
12081: LD_INT 15
12083: PUSH
12084: LD_INT 20
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: PUSH
12095: NOP4
12099: ARRAY
12100: GREATEREQUAL
12101: AND
12102: PUSH
12103: LD_INT 22
12105: PUSH
12106: LD_INT 8
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 30
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: NOP4
12131: AND
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 8
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 3
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: NOP4
12161: PUSH
12162: LD_INT 5
12164: GREATEREQUAL
12165: AND
12166: IFFALSE 12606
12168: GO 12170
12170: DISABLE
12171: LD_INT 0
12173: PPUSH
12174: PPUSH
12175: PPUSH
12176: PPUSH
// begin DialogueOn ;
12177: NOP4
// SayRadio ( Farmer , DF-1-Leg ) ;
12181: NOP4
12185: PPUSH
12186: LD_STRING DF-1-Leg
12188: PPUSH
12189: NOP4
// Say ( playerCommander , DI-1-Leg ) ;
12193: NOP4
12197: PPUSH
12198: LD_STRING DI-1-Leg
12200: PPUSH
12201: NOP4
// SayRadio ( Farmer , DF-2-Leg ) ;
12205: NOP4
12209: PPUSH
12210: LD_STRING DF-2-Leg
12212: PPUSH
12213: NOP4
// DialogueOff ;
12217: NOP4
// case Query ( QLegionOffer ) of 1 :
12221: LD_STRING QLegionOffer
12223: PPUSH
12224: NOP4
12228: PUSH
12229: LD_INT 1
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12240
12237: POP
// ; 2 :
12238: GO 12254
12240: LD_INT 2
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12253
12248: POP
// exit ; end ;
12249: GO 12606
12251: GO 12254
12253: POP
// SayRadio ( Farmer , DF-3-Leg ) ;
12254: NOP4
12258: PPUSH
12259: LD_STRING DF-3-Leg
12261: PPUSH
12262: NOP4
// legOfferAccepted := true ;
12266: NOP4
12270: PUSH
12271: LD_INT 1
12273: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
12274: LD_INT 21
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: NOP4
// CenterOnXY ( 190 , 227 ) ;
12284: LD_INT 190
12286: PPUSH
12287: LD_INT 227
12289: PPUSH
12290: NOP4
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
12294: NOP4
12298: PUSH
12299: LD_INT 16800
12301: PUSH
12302: LD_INT 14700
12304: PUSH
12305: LD_INT 12600
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: NOP4
12317: ARRAY
12318: ST_TO_ADDR
// sib := 100 ;
12319: NOP4
12323: PUSH
12324: LD_INT 100
12326: ST_TO_ADDR
// disableGlobalTimer := true ;
12327: NOP4
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12335: LD_INT 35
12337: PPUSH
12338: NOP4
// time := time - 0 0$1 ;
12342: NOP4
12346: PUSH
12347: NOP4
12351: PUSH
12352: LD_INT 35
12354: MINUS
12355: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
12356: NOP4
12360: PUSH
12361: LD_INT 21
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: NOP4
12371: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
12372: LD_ADDR_OWVAR 47
12376: PUSH
12377: LD_STRING #SkrTime
12379: PUSH
12380: NOP4
12384: PUSH
12385: LD_STRING #Skr-LegOffer
12387: PUSH
12388: NOP4
12392: PUSH
12393: NOP4
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: ST_TO_ADDR
// if sources then
12405: NOP4
12409: IFFALSE 12441
// begin sib := sib - sources * 10 ;
12411: NOP4
12415: PUSH
12416: NOP4
12420: PUSH
12421: NOP4
12425: PUSH
12426: LD_INT 10
12428: MUL
12429: MINUS
12430: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
12431: LD_INT 21
12433: PPUSH
12434: LD_INT 3
12436: PPUSH
12437: NOP4
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
12441: NOP4
12445: PUSH
12446: LD_INT 0
12448: EQUAL
12449: PUSH
12450: NOP4
12454: PUSH
12455: LD_INT 0
12457: LESSEQUAL
12458: OR
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 8
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: NOP4
12474: NOT
12475: OR
12476: IFFALSE 12335
// SetAreaMapShow ( legOfferArea , 0 ) ;
12478: LD_INT 21
12480: PPUSH
12481: LD_INT 0
12483: PPUSH
12484: NOP4
// disableGlobalTimer := false ;
12488: NOP4
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// if sib <= 0 then
12496: NOP4
12500: PUSH
12501: LD_INT 0
12503: LESSEQUAL
12504: IFFALSE 12606
// begin legChangeSide := true ;
12506: NOP4
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
// ChangeMissionObjectives ( O3a ) ;
12514: LD_STRING O3a
12516: PPUSH
12517: NOP4
// ChangeSideFog ( 8 , 1 ) ;
12521: LD_INT 8
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: NOP4
// SetAttitude ( 8 , 1 , att_friend , true ) ;
12531: LD_INT 8
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: NOP4
// SetAttitude ( 8 , 4 , att_friend , true ) ;
12547: LD_INT 8
12549: PPUSH
12550: LD_INT 4
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: NOP4
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
12563: LD_INT 8
12565: PPUSH
12566: LD_INT 6
12568: PPUSH
12569: LD_INT 2
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: NOP4
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
12579: LD_INT 8
12581: PPUSH
12582: LD_INT 3
12584: PPUSH
12585: LD_INT 2
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: NOP4
// wait ( 0 0$30 ) ;
12595: LD_INT 1050
12597: PPUSH
12598: NOP4
// PrepareLegionReinforcements ;
12602: NOP4
// end ; end ;
12606: PPOPN 4
12608: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
12609: NOP4
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: PUSH
12618: NOP4
12622: AND
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 21
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: NOP4
12652: PUSH
12653: LD_INT 0
12655: EQUAL
12656: AND
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: NOP4
12686: PUSH
12687: LD_INT 0
12689: EQUAL
12690: AND
12691: IFFALSE 12910
12693: GO 12695
12695: DISABLE
// begin Say ( playerCommander , DI-1-Win ) ;
12696: NOP4
12700: PPUSH
12701: LD_STRING DI-1-Win
12703: PPUSH
12704: NOP4
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
12708: NOP4
12712: PUSH
12713: LD_INT 315000
12715: PUSH
12716: LD_INT 273000
12718: PUSH
12719: LD_INT 231000
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: NOP4
12731: ARRAY
12732: GREATEREQUAL
12733: IFFALSE 12748
// AddMedal ( med1 , - 1 ) else
12735: LD_STRING med1
12737: PPUSH
12738: LD_INT 1
12740: NEG
12741: PPUSH
12742: NOP4
12746: GO 12758
// AddMedal ( med1 , 1 ) ;
12748: LD_STRING med1
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: NOP4
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
12758: NOP4
12762: PUSH
12763: LD_INT 20
12765: PUSH
12766: LD_INT 15
12768: PUSH
12769: LD_INT 10
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: PUSH
12777: NOP4
12781: ARRAY
12782: GREATEREQUAL
12783: IFFALSE 12798
// AddMedal ( med2 , - 1 ) else
12785: LD_STRING med2
12787: PPUSH
12788: LD_INT 1
12790: NEG
12791: PPUSH
12792: NOP4
12796: GO 12808
// AddMedal ( med2 , 1 ) ;
12798: LD_STRING med2
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: NOP4
// if legChangeSide and GetAttitude ( 8 , 1 ) = att_friend then
12808: NOP4
12812: PUSH
12813: LD_INT 8
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: NOP4
12823: PUSH
12824: LD_INT 1
12826: EQUAL
12827: AND
12828: IFFALSE 12842
// AddMedal ( med3 , 2 ) else
12830: LD_STRING med3
12832: PPUSH
12833: LD_INT 2
12835: PPUSH
12836: NOP4
12840: GO 12899
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
12842: LD_INT 22
12844: PUSH
12845: LD_INT 8
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 21
12854: PUSH
12855: LD_INT 1
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: NOP4
12870: PUSH
12871: LD_INT 0
12873: EQUAL
12874: IFFALSE 12888
// AddMedal ( med3 , 1 ) else
12876: LD_STRING med3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: NOP4
12886: GO 12899
// AddMedal ( med3 , - 1 ) ;
12888: LD_STRING med3
12890: PPUSH
12891: LD_INT 1
12893: NEG
12894: PPUSH
12895: NOP4
// GiveMedals ( MAIN ) ;
12899: LD_STRING MAIN
12901: PPUSH
12902: NOP4
// YouWin ;
12906: NOP4
// end ;
12910: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
12911: NOP4
12915: PUSH
12916: LD_INT 1
12918: EQUAL
12919: PUSH
12920: NOP4
12924: AND
12925: PUSH
12926: LD_INT 20
12928: PPUSH
12929: LD_INT 81
12931: PUSH
12932: LD_INT 8
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: NOP4
12943: AND
12944: IFFALSE 13157
12946: GO 12948
12948: DISABLE
12949: LD_INT 0
12951: PPUSH
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
// begin enable ;
12956: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
12957: NOP4
12961: PUSH
12962: LD_INT 20
12964: PPUSH
12965: LD_INT 81
12967: PUSH
12968: LD_INT 8
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: NOP4
12979: ST_TO_ADDR
// if not tmp then
12980: NOP4
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13157
// for i in tmp do
12989: NOP4
12993: PUSH
12994: NOP4
12998: PUSH
12999: FOR_IN
13000: IFFALSE 13155
// begin x := GetX ( i ) ;
13002: NOP4
13006: PUSH
13007: NOP4
13011: PPUSH
13012: NOP4
13016: ST_TO_ADDR
// y := GetY ( i ) ;
13017: NOP4
13021: PUSH
13022: NOP4
13026: PPUSH
13027: NOP4
13031: ST_TO_ADDR
// if MineAtPos ( x , y ) then
13032: NOP4
13036: PPUSH
13037: NOP4
13041: PPUSH
13042: NOP4
13046: IFFALSE 13153
// begin LaunchMineAtPos ( x , y , 8 ) ;
13048: NOP4
13052: PPUSH
13053: NOP4
13057: PPUSH
13058: LD_INT 8
13060: PPUSH
13061: NOP4
// for j = 1 to staticMines do
13065: NOP4
13069: PUSH
13070: DOUBLE
13071: LD_INT 1
13073: DEC
13074: ST_TO_ADDR
13075: NOP4
13079: PUSH
13080: FOR_TO
13081: IFFALSE 13151
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
13083: NOP4
13087: PUSH
13088: NOP4
13092: ARRAY
13093: PUSH
13094: LD_INT 1
13096: ARRAY
13097: PUSH
13098: NOP4
13102: EQUAL
13103: PUSH
13104: NOP4
13108: PUSH
13109: NOP4
13113: ARRAY
13114: PUSH
13115: LD_INT 2
13117: ARRAY
13118: PUSH
13119: NOP4
13123: EQUAL
13124: AND
13125: IFFALSE 13149
// begin staticMines := Delete ( staticMines , j ) ;
13127: NOP4
13131: PUSH
13132: NOP4
13136: PPUSH
13137: NOP4
13141: PPUSH
13142: NOP4
13146: ST_TO_ADDR
// break ;
13147: GO 13151
// end ;
13149: GO 13080
13151: POP
13152: POP
// end ; end ;
13153: GO 12999
13155: POP
13156: POP
// end ;
13157: PPOPN 5
13159: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , _targetAlt , attackers , e ;
13160: NOP4
13164: PUSH
13165: LD_INT 1
13167: EQUAL
13168: PUSH
13169: NOP4
13173: AND
13174: PUSH
13175: NOP4
13179: PUSH
13180: NOP4
13184: ARRAY
13185: PPUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 3
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: NOP4
13200: AND
13201: IFFALSE 13905
13203: GO 13205
13205: DISABLE
13206: LD_INT 0
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
// begin repeat wait ( 9 9$00 ) ;
13215: LD_INT 18900
13217: PPUSH
13218: NOP4
// base := mc_rus_1 ;
13222: NOP4
13226: PUSH
13227: NOP4
13231: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
13232: NOP4
13236: PUSH
13237: NOP4
13241: ARRAY
13242: PPUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 3
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: NOP4
13257: NOT
13258: IFFALSE 13262
// continue ;
13260: GO 13215
// tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ;
13262: NOP4
13266: PUSH
13267: LD_INT 24
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: LD_INT 47
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 24
13287: PUSH
13288: LD_INT 1
13290: PUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 47
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 24
13305: PUSH
13306: LD_INT 1
13308: PUSH
13309: LD_INT 3
13311: PUSH
13312: LD_INT 47
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 24
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: LD_INT 3
13329: PUSH
13330: LD_INT 46
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
13345: NOP4
13349: PPUSH
13350: NOP4
13354: PPUSH
13355: NOP4
// repeat wait ( 0 0$1 ) ;
13359: LD_INT 35
13361: PPUSH
13362: NOP4
// until MC_GetProduceList ( base ) < 2 ;
13366: NOP4
13370: PPUSH
13371: NOP4
13375: PUSH
13376: LD_INT 2
13378: LESS
13379: IFFALSE 13359
// wait ( 0 0$30 ) ;
13381: LD_INT 1050
13383: PPUSH
13384: NOP4
// if legChangeSide and FilterAllUnits ( [ f_side , 8 ] ) then
13388: NOP4
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 8
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: NOP4
13407: AND
13408: IFFALSE 13439
// _targetAlt := [ [ 107 , 58 ] , [ 128 , 79 ] ] ;
13410: NOP4
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 58
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 128
13427: PUSH
13428: LD_INT 79
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: ST_TO_ADDR
// _target := [ [ 99 , 35 ] , [ 111 , 29 ] , [ 122 , 22 ] ] ;
13439: NOP4
13443: PUSH
13444: LD_INT 99
13446: PUSH
13447: LD_INT 35
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 111
13456: PUSH
13457: LD_INT 29
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 122
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// if _targetAlt then
13479: NOP4
13483: IFFALSE 13516
// _target := [ _target , _targetAlt ] [ rand ( 1 , 2 ) ] ;
13485: NOP4
13489: PUSH
13490: NOP4
13494: PUSH
13495: NOP4
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 1
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: NOP4
13514: ARRAY
13515: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
13516: NOP4
13520: PUSH
13521: NOP4
13525: PUSH
13526: NOP4
13530: ARRAY
13531: PUSH
13532: NOP4
13536: PUSH
13537: NOP4
13541: ARRAY
13542: PUSH
13543: NOP4
13547: PUSH
13548: NOP4
13552: ARRAY
13553: PPUSH
13554: LD_INT 2
13556: PUSH
13557: LD_INT 34
13559: PUSH
13560: LD_INT 51
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 34
13569: PUSH
13570: LD_INT 52
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 34
13579: PUSH
13580: LD_INT 53
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 34
13589: PUSH
13590: LD_INT 48
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: PPUSH
13604: NOP4
13608: UNION
13609: DIFF
13610: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
13611: NOP4
13615: PUSH
13616: NOP4
13620: PPUSH
13621: NOP4
13625: PPUSH
13626: NOP4
13630: PUSH
13631: NOP4
13635: ARRAY
13636: PUSH
13637: NOP4
13641: DIFF
13642: PPUSH
13643: NOP4
13647: ST_TO_ADDR
// if not attackers then
13648: NOP4
13652: NOT
13653: IFFALSE 13657
// continue ;
13655: GO 13215
// ComAgressiveMove ( attackers , 84 , 36 ) ;
13657: NOP4
13661: PPUSH
13662: LD_INT 84
13664: PPUSH
13665: LD_INT 36
13667: PPUSH
13668: NOP4
// for i = 1 to _target do
13672: NOP4
13676: PUSH
13677: DOUBLE
13678: LD_INT 1
13680: DEC
13681: ST_TO_ADDR
13682: NOP4
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13731
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
13690: NOP4
13694: PPUSH
13695: NOP4
13699: PUSH
13700: NOP4
13704: ARRAY
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: NOP4
13714: PUSH
13715: NOP4
13719: ARRAY
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: PPUSH
13725: NOP4
13729: GO 13687
13731: POP
13732: POP
// repeat wait ( 0 0$1 ) ;
13733: LD_INT 35
13735: PPUSH
13736: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
13740: NOP4
13744: PPUSH
13745: LD_INT 60
13747: PUSH
13748: EMPTY
13749: LIST
13750: PPUSH
13751: NOP4
13755: NOT
13756: IFFALSE 13733
// repeat wait ( 0 0$1 ) ;
13758: LD_INT 35
13760: PPUSH
13761: NOP4
// for i in attackers do
13765: NOP4
13769: PUSH
13770: NOP4
13774: PUSH
13775: FOR_IN
13776: IFFALSE 13872
// begin if IsDead ( i ) then
13778: NOP4
13782: PPUSH
13783: NOP4
13787: IFFALSE 13807
// begin attackers := attackers diff i ;
13789: NOP4
13793: PUSH
13794: NOP4
13798: PUSH
13799: NOP4
13803: DIFF
13804: ST_TO_ADDR
// continue ;
13805: GO 13775
// end ; if HasTask ( i ) then
13807: NOP4
13811: PPUSH
13812: NOP4
13816: IFFALSE 13820
// continue ;
13818: GO 13775
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
13820: NOP4
13824: PUSH
13825: LD_INT 81
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PPUSH
13835: NOP4
13839: PPUSH
13840: NOP4
13844: PPUSH
13845: NOP4
13849: ST_TO_ADDR
// if e then
13850: NOP4
13854: IFFALSE 13870
// ComAttackUnit ( i , e ) ;
13856: NOP4
13860: PPUSH
13861: NOP4
13865: PPUSH
13866: NOP4
// end ;
13870: GO 13775
13872: POP
13873: POP
// until not attackers ;
13874: NOP4
13878: NOT
13879: IFFALSE 13758
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
13881: NOP4
13885: PUSH
13886: NOP4
13890: ARRAY
13891: PPUSH
13892: LD_INT 50
13894: PUSH
13895: EMPTY
13896: LIST
13897: PPUSH
13898: NOP4
13902: NOT
13903: IFFALSE 13215
// end ;
13905: PPOPN 7
13907: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , teleport , e ;
13908: NOP4
13912: PUSH
13913: LD_INT 1
13915: EQUAL
13916: PUSH
13917: NOP4
13921: AND
13922: PUSH
13923: NOP4
13927: PUSH
13928: NOP4
13932: ARRAY
13933: PPUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: NOP4
13948: AND
13949: IFFALSE 14690
13951: GO 13953
13953: DISABLE
13954: LD_INT 0
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
13961: PPUSH
13962: PPUSH
// begin repeat wait ( 9 9$00 ) ;
13963: LD_INT 18900
13965: PPUSH
13966: NOP4
// base := mc_rus_2 ;
13970: NOP4
13974: PUSH
13975: NOP4
13979: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
13980: NOP4
13984: PUSH
13985: NOP4
13989: ARRAY
13990: PPUSH
13991: LD_INT 30
13993: PUSH
13994: LD_INT 3
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: NOP4
14005: NOT
14006: IFFALSE 14010
// continue ;
14008: GO 13963
// tmp := [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_time_lapser ] ] ;
14010: NOP4
14014: PUSH
14015: LD_INT 23
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 3
14023: PUSH
14024: LD_INT 47
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 23
14035: PUSH
14036: LD_INT 3
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 47
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 23
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: LD_INT 46
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 23
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: LD_INT 46
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 21
14089: PUSH
14090: LD_INT 1
14092: PUSH
14093: LD_INT 3
14095: PUSH
14096: LD_INT 49
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14112: NOP4
14116: PPUSH
14117: NOP4
14121: PPUSH
14122: NOP4
// repeat wait ( 0 0$1 ) ;
14126: LD_INT 35
14128: PPUSH
14129: NOP4
// until MC_GetProduceList ( base ) = 0 ;
14133: NOP4
14137: PPUSH
14138: NOP4
14142: PUSH
14143: LD_INT 0
14145: EQUAL
14146: IFFALSE 14126
// wait ( 0 0$30 ) ;
14148: LD_INT 1050
14150: PPUSH
14151: NOP4
// _target := [ [ 164 , 198 ] , [ 176 , 180 ] ] ;
14155: NOP4
14159: PUSH
14160: LD_INT 164
14162: PUSH
14163: LD_INT 198
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 176
14172: PUSH
14173: LD_INT 180
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
14184: NOP4
14188: PUSH
14189: NOP4
14193: PUSH
14194: NOP4
14198: ARRAY
14199: PUSH
14200: NOP4
14204: PUSH
14205: NOP4
14209: ARRAY
14210: PUSH
14211: NOP4
14215: PUSH
14216: NOP4
14220: ARRAY
14221: PPUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 34
14227: PUSH
14228: LD_INT 51
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 34
14237: PUSH
14238: LD_INT 52
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 34
14247: PUSH
14248: LD_INT 53
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 34
14257: PUSH
14258: LD_INT 48
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PPUSH
14272: NOP4
14276: UNION
14277: DIFF
14278: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
14279: NOP4
14283: PUSH
14284: NOP4
14288: PPUSH
14289: NOP4
14293: PPUSH
14294: NOP4
14298: PUSH
14299: NOP4
14303: ARRAY
14304: PUSH
14305: NOP4
14309: DIFF
14310: PPUSH
14311: NOP4
14315: ST_TO_ADDR
// if not attackers then
14316: NOP4
14320: NOT
14321: IFFALSE 14325
// continue ;
14323: GO 13963
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
14325: NOP4
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 30
14342: PUSH
14343: LD_INT 34
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: NOP4
14358: ST_TO_ADDR
// for i in attackers do
14359: NOP4
14363: PUSH
14364: NOP4
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14430
// begin if teleport then
14372: NOP4
14376: IFFALSE 14413
// begin ComEnterUnit ( i , teleport [ 1 ] ) ;
14378: NOP4
14382: PPUSH
14383: NOP4
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: NOP4
// AddComAgressiveMove ( i , 129 , 215 ) ;
14396: NOP4
14400: PPUSH
14401: LD_INT 129
14403: PPUSH
14404: LD_INT 215
14406: PPUSH
14407: NOP4
// end else
14411: GO 14428
// AddComAgressiveMove ( i , 125 , 157 ) ;
14413: NOP4
14417: PPUSH
14418: LD_INT 125
14420: PPUSH
14421: LD_INT 157
14423: PPUSH
14424: NOP4
// end ;
14428: GO 14369
14430: POP
14431: POP
// repeat wait ( 0 0$1 ) ;
14432: LD_INT 35
14434: PPUSH
14435: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
14439: NOP4
14443: PPUSH
14444: LD_INT 60
14446: PUSH
14447: EMPTY
14448: LIST
14449: PPUSH
14450: NOP4
14454: NOT
14455: IFFALSE 14432
// for i = 1 to _target do
14457: NOP4
14461: PUSH
14462: DOUBLE
14463: LD_INT 1
14465: DEC
14466: ST_TO_ADDR
14467: NOP4
14471: PUSH
14472: FOR_TO
14473: IFFALSE 14516
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
14475: NOP4
14479: PPUSH
14480: NOP4
14484: PUSH
14485: NOP4
14489: ARRAY
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PPUSH
14495: NOP4
14499: PUSH
14500: NOP4
14504: ARRAY
14505: PUSH
14506: LD_INT 2
14508: ARRAY
14509: PPUSH
14510: NOP4
14514: GO 14472
14516: POP
14517: POP
// repeat wait ( 0 0$1 ) ;
14518: LD_INT 35
14520: PPUSH
14521: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
14525: NOP4
14529: PPUSH
14530: LD_INT 60
14532: PUSH
14533: EMPTY
14534: LIST
14535: PPUSH
14536: NOP4
14540: NOT
14541: IFFALSE 14518
// repeat wait ( 0 0$1 ) ;
14543: LD_INT 35
14545: PPUSH
14546: NOP4
// for i in attackers do
14550: NOP4
14554: PUSH
14555: NOP4
14559: PUSH
14560: FOR_IN
14561: IFFALSE 14657
// begin if IsDead ( i ) then
14563: NOP4
14567: PPUSH
14568: NOP4
14572: IFFALSE 14592
// begin attackers := attackers diff i ;
14574: NOP4
14578: PUSH
14579: NOP4
14583: PUSH
14584: NOP4
14588: DIFF
14589: ST_TO_ADDR
// continue ;
14590: GO 14560
// end ; if HasTask ( i ) then
14592: NOP4
14596: PPUSH
14597: NOP4
14601: IFFALSE 14605
// continue ;
14603: GO 14560
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
14605: NOP4
14609: PUSH
14610: LD_INT 81
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: NOP4
14624: PPUSH
14625: NOP4
14629: PPUSH
14630: NOP4
14634: ST_TO_ADDR
// if e then
14635: NOP4
14639: IFFALSE 14655
// ComAttackUnit ( i , e ) ;
14641: NOP4
14645: PPUSH
14646: NOP4
14650: PPUSH
14651: NOP4
// end ;
14655: GO 14560
14657: POP
14658: POP
// until not attackers ;
14659: NOP4
14663: NOT
14664: IFFALSE 14543
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
14666: NOP4
14670: PUSH
14671: NOP4
14675: ARRAY
14676: PPUSH
14677: LD_INT 50
14679: PUSH
14680: EMPTY
14681: LIST
14682: PPUSH
14683: NOP4
14687: NOT
14688: IFFALSE 13963
// end ;
14690: PPOPN 7
14692: END
// every 1 1$00 trigger GameType = 1 and game and not legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , flags , _target , attackers ;
14693: NOP4
14697: PUSH
14698: LD_INT 1
14700: EQUAL
14701: PUSH
14702: NOP4
14706: AND
14707: PUSH
14708: NOP4
14712: NOT
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 8
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 34
14727: PUSH
14728: LD_INT 31
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: NOP4
14743: AND
14744: PUSH
14745: NOP4
14749: PUSH
14750: NOP4
14754: ARRAY
14755: PPUSH
14756: LD_INT 30
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: NOP4
14770: AND
14771: IFFALSE 15269
14773: GO 14775
14775: DISABLE
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
// begin repeat wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
14784: LD_INT 21000
14786: PUSH
14787: LD_INT 19950
14789: PUSH
14790: LD_INT 18900
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: PUSH
14798: NOP4
14802: ARRAY
14803: PPUSH
14804: NOP4
// base := mc_leg ;
14808: NOP4
14812: PUSH
14813: NOP4
14817: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14818: NOP4
14822: PUSH
14823: NOP4
14827: ARRAY
14828: PPUSH
14829: LD_INT 30
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: NOP4
14843: NOT
14844: IFFALSE 14848
// continue ;
14846: GO 14784
// if legChangeSide then
14848: NOP4
14852: IFFALSE 14856
// exit ;
14854: GO 15269
// tmp := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
14856: NOP4
14860: PUSH
14861: LD_INT 11
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: LD_INT 2
14869: PUSH
14870: LD_INT 24
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 11
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: LD_INT 24
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 11
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 24
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 11
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: LD_INT 24
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 11
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14958: NOP4
14962: PPUSH
14963: NOP4
14967: PPUSH
14968: NOP4
// repeat wait ( 0 0$1 ) ;
14972: LD_INT 35
14974: PPUSH
14975: NOP4
// until MC_GetProduceList ( base ) = 0 ;
14979: NOP4
14983: PPUSH
14984: NOP4
14988: PUSH
14989: LD_INT 0
14991: EQUAL
14992: IFFALSE 14972
// wait ( 0 0$30 ) ;
14994: LD_INT 1050
14996: PPUSH
14997: NOP4
// _target := [ [ 113 , 63 ] , [ 119 , 15 ] ] ;
15001: NOP4
15005: PUSH
15006: LD_INT 113
15008: PUSH
15009: LD_INT 63
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 119
15018: PUSH
15019: LD_INT 15
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
15030: NOP4
15034: PUSH
15035: LD_INT 0
15037: PUSH
15038: LD_INT 0
15040: PUSH
15041: LD_INT 0
15043: PUSH
15044: LD_INT 0
15046: PUSH
15047: LD_INT 0
15049: PUSH
15050: LD_INT 0
15052: PUSH
15053: LD_INT 0
15055: PUSH
15056: LD_INT 0
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: LD_INT 0
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
15077: NOP4
15081: PUSH
15082: NOP4
15086: PUSH
15087: NOP4
15091: ARRAY
15092: PUSH
15093: NOP4
15097: PUSH
15098: NOP4
15102: ARRAY
15103: PUSH
15104: NOP4
15108: PUSH
15109: NOP4
15113: ARRAY
15114: PPUSH
15115: LD_INT 2
15117: PUSH
15118: LD_INT 34
15120: PUSH
15121: LD_INT 32
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 34
15130: PUSH
15131: LD_INT 31
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: PPUSH
15143: NOP4
15147: UNION
15148: DIFF
15149: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15150: NOP4
15154: PUSH
15155: NOP4
15159: PPUSH
15160: NOP4
15164: PPUSH
15165: NOP4
15169: PUSH
15170: NOP4
15174: ARRAY
15175: PUSH
15176: NOP4
15180: DIFF
15181: PPUSH
15182: NOP4
15186: ST_TO_ADDR
// if not attackers then
15187: NOP4
15191: NOT
15192: IFFALSE 15196
// continue ;
15194: GO 14784
// repeat wait ( 0 0$1 ) ;
15196: LD_INT 35
15198: PPUSH
15199: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15203: NOP4
15207: PPUSH
15208: LD_INT 60
15210: PUSH
15211: EMPTY
15212: LIST
15213: PPUSH
15214: NOP4
15218: NOT
15219: IFFALSE 15196
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
15221: NOP4
15225: PPUSH
15226: NOP4
15230: PPUSH
15231: NOP4
15235: PPUSH
15236: NOP4
15240: PPUSH
15241: NOP4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
15245: NOP4
15249: PUSH
15250: NOP4
15254: ARRAY
15255: PPUSH
15256: LD_INT 50
15258: PUSH
15259: EMPTY
15260: LIST
15261: PPUSH
15262: NOP4
15266: NOT
15267: IFFALSE 14784
// end ;
15269: PPOPN 6
15271: END
// every 1 1$00 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , flags , tmp , _target , attackers ;
15272: NOP4
15276: PUSH
15277: LD_INT 1
15279: EQUAL
15280: PUSH
15281: NOP4
15285: AND
15286: PUSH
15287: LD_INT 22
15289: PUSH
15290: LD_INT 8
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 34
15299: PUSH
15300: LD_INT 31
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: NOP4
15315: AND
15316: PUSH
15317: NOP4
15321: PUSH
15322: NOP4
15326: ARRAY
15327: PPUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 3
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PPUSH
15338: NOP4
15342: AND
15343: IFFALSE 15874
15345: GO 15347
15347: DISABLE
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
// begin repeat wait ( 9 9$00 ) ;
15356: LD_INT 18900
15358: PPUSH
15359: NOP4
// base := mc_leg ;
15363: NOP4
15367: PUSH
15368: NOP4
15372: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
15373: LD_INT 22
15375: PUSH
15376: LD_INT 8
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 34
15385: PUSH
15386: LD_INT 31
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PPUSH
15397: NOP4
15401: NOT
15402: PUSH
15403: NOP4
15407: PUSH
15408: NOP4
15412: ARRAY
15413: PPUSH
15414: LD_INT 30
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: NOP4
15428: NOT
15429: OR
15430: IFFALSE 15434
// continue ;
15432: GO 15356
// if legChangeSide then
15434: NOP4
15438: IFFALSE 15442
// exit ;
15440: GO 15874
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
15442: NOP4
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: LD_INT 2
15455: PUSH
15456: LD_INT 28
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 13
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 28
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 13
15485: PUSH
15486: LD_INT 1
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 13
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: LD_INT 2
15509: PUSH
15510: LD_INT 27
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 13
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 27
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 13
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 29
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
15563: NOP4
15567: PPUSH
15568: NOP4
15572: PPUSH
15573: NOP4
// repeat wait ( 0 0$1 ) ;
15577: LD_INT 35
15579: PPUSH
15580: NOP4
// until MC_GetProduceList ( base ) = 0 ;
15584: NOP4
15588: PPUSH
15589: NOP4
15593: PUSH
15594: LD_INT 0
15596: EQUAL
15597: IFFALSE 15577
// wait ( 0 0$30 ) ;
15599: LD_INT 1050
15601: PPUSH
15602: NOP4
// _target := [ [ 165 , 89 ] , [ 190 , 123 ] ] ;
15606: NOP4
15610: PUSH
15611: LD_INT 165
15613: PUSH
15614: LD_INT 89
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 190
15623: PUSH
15624: LD_INT 123
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
15635: NOP4
15639: PUSH
15640: LD_INT 0
15642: PUSH
15643: LD_INT 0
15645: PUSH
15646: LD_INT 0
15648: PUSH
15649: LD_INT 0
15651: PUSH
15652: LD_INT 0
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 0
15660: PUSH
15661: LD_INT 0
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: LD_INT 0
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
15682: NOP4
15686: PUSH
15687: NOP4
15691: PUSH
15692: NOP4
15696: ARRAY
15697: PUSH
15698: NOP4
15702: PUSH
15703: NOP4
15707: ARRAY
15708: PUSH
15709: NOP4
15713: PUSH
15714: NOP4
15718: ARRAY
15719: PPUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 34
15725: PUSH
15726: LD_INT 32
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 34
15735: PUSH
15736: LD_INT 31
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PPUSH
15748: NOP4
15752: UNION
15753: DIFF
15754: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15755: NOP4
15759: PUSH
15760: NOP4
15764: PPUSH
15765: NOP4
15769: PPUSH
15770: NOP4
15774: PUSH
15775: NOP4
15779: ARRAY
15780: PUSH
15781: NOP4
15785: DIFF
15786: PPUSH
15787: NOP4
15791: ST_TO_ADDR
// if not attackers then
15792: NOP4
15796: NOT
15797: IFFALSE 15801
// continue ;
15799: GO 15356
// repeat wait ( 0 0$1 ) ;
15801: LD_INT 35
15803: PPUSH
15804: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15808: NOP4
15812: PPUSH
15813: LD_INT 60
15815: PUSH
15816: EMPTY
15817: LIST
15818: PPUSH
15819: NOP4
15823: NOT
15824: IFFALSE 15801
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
15826: NOP4
15830: PPUSH
15831: NOP4
15835: PPUSH
15836: NOP4
15840: PPUSH
15841: NOP4
15845: PPUSH
15846: NOP4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
15850: NOP4
15854: PUSH
15855: NOP4
15859: ARRAY
15860: PPUSH
15861: LD_INT 50
15863: PUSH
15864: EMPTY
15865: LIST
15866: PPUSH
15867: NOP4
15871: NOT
15872: IFFALSE 15356
// end ;
15874: PPOPN 6
15876: END
// every 1 1$00 trigger GameType = 1 and game and legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , flags ;
15877: NOP4
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: PUSH
15886: NOP4
15890: AND
15891: PUSH
15892: NOP4
15896: AND
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_INT 8
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 34
15910: PUSH
15911: LD_INT 31
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: NOP4
15926: AND
15927: PUSH
15928: NOP4
15932: PUSH
15933: NOP4
15937: ARRAY
15938: PPUSH
15939: LD_INT 30
15941: PUSH
15942: LD_INT 3
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PPUSH
15949: NOP4
15953: AND
15954: IFFALSE 16496
15956: GO 15958
15958: DISABLE
15959: LD_INT 0
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// begin repeat wait ( 12 12$00 ) ;
15967: LD_INT 25200
15969: PPUSH
15970: NOP4
// base := mc_leg ;
15974: NOP4
15978: PUSH
15979: NOP4
15983: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
15984: LD_INT 22
15986: PUSH
15987: LD_INT 8
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 34
15996: PUSH
15997: LD_INT 31
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PPUSH
16008: NOP4
16012: NOT
16013: PUSH
16014: NOP4
16018: PUSH
16019: NOP4
16023: ARRAY
16024: PPUSH
16025: LD_INT 30
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: NOP4
16039: NOT
16040: OR
16041: IFFALSE 16045
// continue ;
16043: GO 15967
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16045: NOP4
16049: PUSH
16050: LD_INT 13
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: LD_INT 2
16058: PUSH
16059: LD_INT 28
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 13
16070: PUSH
16071: LD_INT 1
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 28
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 13
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 28
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 13
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: LD_INT 27
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 13
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 27
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 13
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: LD_INT 29
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 13
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: LD_INT 29
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16185: NOP4
16189: PPUSH
16190: NOP4
16194: PPUSH
16195: NOP4
// repeat wait ( 0 0$1 ) ;
16199: LD_INT 35
16201: PPUSH
16202: NOP4
// until MC_GetProduceList ( base ) = 0 ;
16206: NOP4
16210: PPUSH
16211: NOP4
16215: PUSH
16216: LD_INT 0
16218: EQUAL
16219: IFFALSE 16199
// wait ( 0 0$30 ) ;
16221: LD_INT 1050
16223: PPUSH
16224: NOP4
// _target := [ [ 110 , 63 ] , [ 92 , 72 ] ] ;
16228: NOP4
16232: PUSH
16233: LD_INT 110
16235: PUSH
16236: LD_INT 63
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 92
16245: PUSH
16246: LD_INT 72
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
16257: NOP4
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: LD_INT 0
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
16304: NOP4
16308: PUSH
16309: NOP4
16313: PUSH
16314: NOP4
16318: ARRAY
16319: PUSH
16320: NOP4
16324: PUSH
16325: NOP4
16329: ARRAY
16330: PUSH
16331: NOP4
16335: PUSH
16336: NOP4
16340: ARRAY
16341: PPUSH
16342: LD_INT 2
16344: PUSH
16345: LD_INT 34
16347: PUSH
16348: LD_INT 32
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 34
16357: PUSH
16358: LD_INT 31
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PPUSH
16370: NOP4
16374: UNION
16375: DIFF
16376: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16377: NOP4
16381: PUSH
16382: NOP4
16386: PPUSH
16387: NOP4
16391: PPUSH
16392: NOP4
16396: PUSH
16397: NOP4
16401: ARRAY
16402: PUSH
16403: NOP4
16407: DIFF
16408: PPUSH
16409: NOP4
16413: ST_TO_ADDR
// if not attackers then
16414: NOP4
16418: NOT
16419: IFFALSE 16423
// continue ;
16421: GO 15967
// repeat wait ( 0 0$1 ) ;
16423: LD_INT 35
16425: PPUSH
16426: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16430: NOP4
16434: PPUSH
16435: LD_INT 60
16437: PUSH
16438: EMPTY
16439: LIST
16440: PPUSH
16441: NOP4
16445: NOT
16446: IFFALSE 16423
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16448: NOP4
16452: PPUSH
16453: NOP4
16457: PPUSH
16458: NOP4
16462: PPUSH
16463: NOP4
16467: PPUSH
16468: NOP4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16472: NOP4
16476: PUSH
16477: NOP4
16481: ARRAY
16482: PPUSH
16483: LD_INT 50
16485: PUSH
16486: EMPTY
16487: LIST
16488: PPUSH
16489: NOP4
16493: NOT
16494: IFFALSE 15967
// end ;
16496: PPOPN 6
16498: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_amer ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , e ;
16499: NOP4
16503: PUSH
16504: LD_INT 1
16506: EQUAL
16507: PUSH
16508: NOP4
16512: AND
16513: PUSH
16514: NOP4
16518: PUSH
16519: NOP4
16523: ARRAY
16524: PPUSH
16525: LD_INT 30
16527: PUSH
16528: LD_INT 3
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PPUSH
16535: NOP4
16539: AND
16540: IFFALSE 17122
16542: GO 16544
16544: DISABLE
16545: LD_INT 0
16547: PPUSH
16548: PPUSH
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
// begin repeat wait ( 12 12$00 ) ;
16553: LD_INT 25200
16555: PPUSH
16556: NOP4
// base := mc_amer ;
16560: NOP4
16564: PUSH
16565: NOP4
16569: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16570: NOP4
16574: PUSH
16575: NOP4
16579: ARRAY
16580: PPUSH
16581: LD_INT 30
16583: PUSH
16584: LD_INT 3
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PPUSH
16591: NOP4
16595: NOT
16596: IFFALSE 16600
// continue ;
16598: GO 16553
// tmp := [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
16600: NOP4
16604: PUSH
16605: LD_INT 4
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 6
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 4
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 6
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 2
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 7
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: LD_INT 7
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 7
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16702: NOP4
16706: PPUSH
16707: NOP4
16711: PPUSH
16712: NOP4
// repeat wait ( 0 0$1 ) ;
16716: LD_INT 35
16718: PPUSH
16719: NOP4
// until MC_GetProduceList ( base ) = 0 ;
16723: NOP4
16727: PPUSH
16728: NOP4
16732: PUSH
16733: LD_INT 0
16735: EQUAL
16736: IFFALSE 16716
// wait ( 0 0$30 ) ;
16738: LD_INT 1050
16740: PPUSH
16741: NOP4
// _target := [ [ 92 , 34 ] ] ;
16745: NOP4
16749: PUSH
16750: LD_INT 92
16752: PUSH
16753: LD_INT 34
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , us_cargo_bay ] ) ) ;
16763: NOP4
16767: PUSH
16768: NOP4
16772: PUSH
16773: NOP4
16777: ARRAY
16778: PUSH
16779: NOP4
16783: PUSH
16784: NOP4
16788: ARRAY
16789: PUSH
16790: NOP4
16794: PUSH
16795: NOP4
16799: ARRAY
16800: PPUSH
16801: LD_INT 34
16803: PUSH
16804: LD_INT 12
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PPUSH
16811: NOP4
16815: UNION
16816: DIFF
16817: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16818: NOP4
16822: PUSH
16823: NOP4
16827: PPUSH
16828: NOP4
16832: PPUSH
16833: NOP4
16837: PUSH
16838: NOP4
16842: ARRAY
16843: PUSH
16844: NOP4
16848: DIFF
16849: PPUSH
16850: NOP4
16854: ST_TO_ADDR
// if not attackers then
16855: NOP4
16859: NOT
16860: IFFALSE 16864
// continue ;
16862: GO 16553
// repeat wait ( 0 0$1 ) ;
16864: LD_INT 35
16866: PPUSH
16867: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16871: NOP4
16875: PPUSH
16876: LD_INT 60
16878: PUSH
16879: EMPTY
16880: LIST
16881: PPUSH
16882: NOP4
16886: NOT
16887: IFFALSE 16864
// for i = 1 to _target do
16889: NOP4
16893: PUSH
16894: DOUBLE
16895: LD_INT 1
16897: DEC
16898: ST_TO_ADDR
16899: NOP4
16903: PUSH
16904: FOR_TO
16905: IFFALSE 16948
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
16907: NOP4
16911: PPUSH
16912: NOP4
16916: PUSH
16917: NOP4
16921: ARRAY
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: NOP4
16931: PUSH
16932: NOP4
16936: ARRAY
16937: PUSH
16938: LD_INT 2
16940: ARRAY
16941: PPUSH
16942: NOP4
16946: GO 16904
16948: POP
16949: POP
// repeat wait ( 0 0$1 ) ;
16950: LD_INT 35
16952: PPUSH
16953: NOP4
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16957: NOP4
16961: PPUSH
16962: LD_INT 60
16964: PUSH
16965: EMPTY
16966: LIST
16967: PPUSH
16968: NOP4
16972: NOT
16973: IFFALSE 16950
// repeat wait ( 0 0$1 ) ;
16975: LD_INT 35
16977: PPUSH
16978: NOP4
// for i in attackers do
16982: NOP4
16986: PUSH
16987: NOP4
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17089
// begin if IsDead ( i ) then
16995: NOP4
16999: PPUSH
17000: NOP4
17004: IFFALSE 17024
// begin attackers := attackers diff i ;
17006: NOP4
17010: PUSH
17011: NOP4
17015: PUSH
17016: NOP4
17020: DIFF
17021: ST_TO_ADDR
// continue ;
17022: GO 16992
// end ; if HasTask ( i ) then
17024: NOP4
17028: PPUSH
17029: NOP4
17033: IFFALSE 17037
// continue ;
17035: GO 16992
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ;
17037: NOP4
17041: PUSH
17042: LD_INT 81
17044: PUSH
17045: LD_INT 4
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PPUSH
17052: NOP4
17056: PPUSH
17057: NOP4
17061: PPUSH
17062: NOP4
17066: ST_TO_ADDR
// if e then
17067: NOP4
17071: IFFALSE 17087
// ComAttackUnit ( i , e ) ;
17073: NOP4
17077: PPUSH
17078: NOP4
17082: PPUSH
17083: NOP4
// end ;
17087: GO 16992
17089: POP
17090: POP
// until not attackers ;
17091: NOP4
17095: NOT
17096: IFFALSE 16975
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17098: NOP4
17102: PUSH
17103: NOP4
17107: ARRAY
17108: PPUSH
17109: LD_INT 50
17111: PUSH
17112: EMPTY
17113: LIST
17114: PPUSH
17115: NOP4
17119: NOT
17120: IFFALSE 16553
// end ;
17122: PPOPN 6
17124: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed > 0 and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var bomb , e ;
17125: NOP4
17129: PUSH
17130: LD_INT 1
17132: EQUAL
17133: PUSH
17134: NOP4
17138: AND
17139: PUSH
17140: NOP4
17144: PUSH
17145: LD_INT 0
17147: GREATER
17148: AND
17149: PUSH
17150: NOP4
17154: PUSH
17155: NOP4
17159: ARRAY
17160: PPUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 3
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PPUSH
17171: NOP4
17175: AND
17176: IFFALSE 17380
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
// begin enable ;
17185: ENABLE
// MC_InsertProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
17186: NOP4
17190: PPUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 48
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: PPUSH
17212: NOP4
// repeat wait ( 0 0$1 ) ;
17216: LD_INT 35
17218: PPUSH
17219: NOP4
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 34
17235: PUSH
17236: LD_INT 48
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: NOP4
17251: IFFALSE 17216
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
17253: NOP4
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 34
17270: PUSH
17271: LD_INT 48
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: NOP4
17286: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
17287: NOP4
17291: PUSH
17292: LD_INT 81
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 3
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PPUSH
17316: NOP4
17320: ST_TO_ADDR
// if e then
17321: NOP4
17325: IFFALSE 17351
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
17327: NOP4
17331: PUSH
17332: NOP4
17336: PPUSH
17337: NOP4
17341: PUSH
17342: LD_INT 1
17344: ARRAY
17345: PPUSH
17346: NOP4
17350: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
17351: NOP4
17355: PPUSH
17356: NOP4
17360: PPUSH
17361: NOP4
17365: PPUSH
17366: NOP4
17370: PPUSH
17371: NOP4
17375: PPUSH
17376: NOP4
// end ;
17380: PPOPN 2
17382: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
17383: NOP4
17387: PUSH
17388: LD_INT 1
17390: EQUAL
17391: PUSH
17392: LD_INT 84
17394: PPUSH
17395: LD_INT 128
17397: PPUSH
17398: NOP4
17402: PPUSH
17403: NOP4
17407: PUSH
17408: LD_INT 1
17410: EQUAL
17411: AND
17412: IFFALSE 17585
17414: GO 17416
17416: DISABLE
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
// begin enable ;
17421: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
17422: NOP4
17426: PUSH
17427: LD_INT 84
17429: PPUSH
17430: LD_INT 128
17432: PPUSH
17433: NOP4
17437: ST_TO_ADDR
// uc_side := 3 ;
17438: LD_ADDR_OWVAR 20
17442: PUSH
17443: LD_INT 3
17445: ST_TO_ADDR
// uc_nation := 3 ;
17446: LD_ADDR_OWVAR 21
17450: PUSH
17451: LD_INT 3
17453: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
17454: LD_INT 21
17456: PPUSH
17457: LD_INT 3
17459: PPUSH
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 51
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: NOP4
// veh := CreateVehicle ;
17473: NOP4
17477: PUSH
17478: NOP4
17482: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
17483: NOP4
17487: PPUSH
17488: LD_INT 126
17490: PPUSH
17491: LD_INT 227
17493: PPUSH
17494: LD_INT 0
17496: PPUSH
17497: NOP4
// SetCargo ( veh , mat_oil , 100 ) ;
17501: NOP4
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: LD_INT 100
17511: PPUSH
17512: NOP4
// ComGive ( veh , depot ) ;
17516: NOP4
17520: PPUSH
17521: NOP4
17525: PPUSH
17526: NOP4
// AddComMoveXY ( veh , 126 , 227 ) ;
17530: NOP4
17534: PPUSH
17535: LD_INT 126
17537: PPUSH
17538: LD_INT 227
17540: PPUSH
17541: NOP4
// wait ( 0 0$10 ) ;
17545: LD_INT 350
17547: PPUSH
17548: NOP4
// repeat wait ( 0 0$1 ) ;
17552: LD_INT 35
17554: PPUSH
17555: NOP4
// until IsAt ( veh , 126 , 227 ) ;
17559: NOP4
17563: PPUSH
17564: LD_INT 126
17566: PPUSH
17567: LD_INT 227
17569: PPUSH
17570: NOP4
17574: IFFALSE 17552
// RemoveUnit ( veh ) ;
17576: NOP4
17580: PPUSH
17581: NOP4
// end ;
17585: PPOPN 2
17587: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
17588: NOP4
17592: PUSH
17593: LD_INT 1
17595: EQUAL
17596: PUSH
17597: NOP4
17601: AND
17602: PUSH
17603: NOP4
17607: PUSH
17608: LD_INT 2
17610: EQUAL
17611: AND
17612: IFFALSE 17804
17614: GO 17616
17616: DISABLE
17617: LD_INT 0
17619: PPUSH
17620: PPUSH
// begin enable ;
17621: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
17622: NOP4
17626: PUSH
17627: LD_INT 105000
17629: PUSH
17630: LD_INT 84000
17632: PUSH
17633: LD_INT 63000
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PUSH
17641: NOP4
17645: ARRAY
17646: GREATEREQUAL
17647: IFFALSE 17650
// disable ;
17649: DISABLE
// uc_side := 4 ;
17650: LD_ADDR_OWVAR 20
17654: PUSH
17655: LD_INT 4
17657: ST_TO_ADDR
// uc_nation := 1 ;
17658: LD_ADDR_OWVAR 21
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
17666: LD_INT 2
17668: PPUSH
17669: LD_INT 3
17671: PPUSH
17672: LD_INT 3
17674: PPUSH
17675: LD_INT 12
17677: PPUSH
17678: LD_INT 0
17680: PPUSH
17681: NOP4
// veh := CreateVehicle ;
17685: NOP4
17689: PUSH
17690: NOP4
17694: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
17695: NOP4
17699: PPUSH
17700: LD_INT 229
17702: PPUSH
17703: LD_INT 226
17705: PPUSH
17706: LD_INT 0
17708: PPUSH
17709: NOP4
// SetCargo ( veh , mat_cans , 100 ) ;
17713: NOP4
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 100
17723: PPUSH
17724: NOP4
// AddComMoveToArea ( veh , ruOutpostArea ) ;
17728: NOP4
17732: PPUSH
17733: LD_INT 25
17735: PPUSH
17736: NOP4
// AddComUnload ( veh ) ;
17740: NOP4
17744: PPUSH
17745: NOP4
// AddComMoveXY ( veh , 229 , 226 ) ;
17749: NOP4
17753: PPUSH
17754: LD_INT 229
17756: PPUSH
17757: LD_INT 226
17759: PPUSH
17760: NOP4
// wait ( 0 0$10 ) ;
17764: LD_INT 350
17766: PPUSH
17767: NOP4
// repeat wait ( 0 0$1 ) ;
17771: LD_INT 35
17773: PPUSH
17774: NOP4
// until IsAt ( veh , 229 , 226 ) ;
17778: NOP4
17782: PPUSH
17783: LD_INT 229
17785: PPUSH
17786: LD_INT 226
17788: PPUSH
17789: NOP4
17793: IFFALSE 17771
// RemoveUnit ( veh ) ;
17795: NOP4
17799: PPUSH
17800: NOP4
// end ;
17804: PPOPN 2
17806: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
17807: NOP4
17811: PUSH
17812: LD_INT 1
17814: EQUAL
17815: PUSH
17816: NOP4
17820: AND
17821: PUSH
17822: NOP4
17826: AND
17827: IFFALSE 18160
17829: GO 17831
17831: DISABLE
17832: LD_INT 0
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
// begin enable ;
17839: ENABLE
// tmp := [ ] ;
17840: NOP4
17844: PUSH
17845: EMPTY
17846: ST_TO_ADDR
// if commander = 1 then
17847: NOP4
17851: PUSH
17852: LD_INT 1
17854: EQUAL
17855: IFFALSE 17867
// amount := 3 else
17857: NOP4
17861: PUSH
17862: LD_INT 3
17864: ST_TO_ADDR
17865: GO 17875
// amount := 2 ;
17867: NOP4
17871: PUSH
17872: LD_INT 2
17874: ST_TO_ADDR
// for i = 1 to amount do
17875: NOP4
17879: PUSH
17880: DOUBLE
17881: LD_INT 1
17883: DEC
17884: ST_TO_ADDR
17885: NOP4
17889: PUSH
17890: FOR_TO
17891: IFFALSE 18055
// begin wait ( 0 0$5 ) ;
17893: LD_INT 175
17895: PPUSH
17896: NOP4
// for j = 1 to 3 do
17900: NOP4
17904: PUSH
17905: DOUBLE
17906: LD_INT 1
17908: DEC
17909: ST_TO_ADDR
17910: LD_INT 3
17912: PUSH
17913: FOR_TO
17914: IFFALSE 18051
// begin uc_side := 4 ;
17916: LD_ADDR_OWVAR 20
17920: PUSH
17921: LD_INT 4
17923: ST_TO_ADDR
// uc_nation := 1 ;
17924: LD_ADDR_OWVAR 21
17928: PUSH
17929: LD_INT 1
17931: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
17932: LD_INT 3
17934: PUSH
17935: LD_INT 5
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_INT 2
17947: PPUSH
17948: NOP4
17952: ARRAY
17953: PPUSH
17954: LD_INT 3
17956: PPUSH
17957: LD_INT 3
17959: PPUSH
17960: LD_INT 9
17962: PUSH
17963: LD_INT 5
17965: PUSH
17966: LD_INT 7
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PPUSH
17977: LD_INT 3
17979: PPUSH
17980: NOP4
17984: ARRAY
17985: PPUSH
17986: LD_INT 100
17988: PPUSH
17989: NOP4
// veh := CreateVehicle ;
17993: NOP4
17997: PUSH
17998: NOP4
18002: ST_TO_ADDR
// tmp := tmp ^ veh ;
18003: NOP4
18007: PUSH
18008: NOP4
18012: PUSH
18013: NOP4
18017: ADD
18018: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
18019: NOP4
18023: PPUSH
18024: LD_INT 22
18026: PPUSH
18027: LD_INT 0
18029: PPUSH
18030: NOP4
// ComMoveXY ( veh , 119 , 215 ) ;
18034: NOP4
18038: PPUSH
18039: LD_INT 119
18041: PPUSH
18042: LD_INT 215
18044: PPUSH
18045: NOP4
// end ;
18049: GO 17913
18051: POP
18052: POP
// end ;
18053: GO 17890
18055: POP
18056: POP
// wait ( 0 0$3 ) ;
18057: LD_INT 105
18059: PPUSH
18060: NOP4
// repeat wait ( 0 0$1 ) ;
18064: LD_INT 35
18066: PPUSH
18067: NOP4
// for i in tmp do
18071: NOP4
18075: PUSH
18076: NOP4
18080: PUSH
18081: FOR_IN
18082: IFFALSE 18149
// if IsDead ( i ) then
18084: NOP4
18088: PPUSH
18089: NOP4
18093: IFFALSE 18113
// tmp := tmp diff i else
18095: NOP4
18099: PUSH
18100: NOP4
18104: PUSH
18105: NOP4
18109: DIFF
18110: ST_TO_ADDR
18111: GO 18147
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
18113: NOP4
18117: PPUSH
18118: LD_INT 81
18120: PUSH
18121: LD_INT 4
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: NOP4
18132: PPUSH
18133: NOP4
18137: PPUSH
18138: NOP4
18142: PPUSH
18143: NOP4
18147: GO 18081
18149: POP
18150: POP
// until tmp = [ ] ;
18151: NOP4
18155: PUSH
18156: EMPTY
18157: EQUAL
18158: IFFALSE 18064
// end ;
18160: PPOPN 5
18162: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
18163: NOP4
18167: PUSH
18168: LD_INT 1
18170: EQUAL
18171: PUSH
18172: NOP4
18176: AND
18177: IFFALSE 18278
18179: GO 18181
18181: DISABLE
18182: LD_INT 0
18184: PPUSH
18185: PPUSH
// begin enable ;
18186: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
18187: NOP4
18191: PUSH
18192: LD_INT 3
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 32
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: NOP4
18227: ST_TO_ADDR
// if tmp then
18228: NOP4
18232: IFFALSE 18278
// for i in tmp do
18234: NOP4
18238: PUSH
18239: NOP4
18243: PUSH
18244: FOR_IN
18245: IFFALSE 18276
// if GetFuel ( i ) < 3 then
18247: NOP4
18251: PPUSH
18252: NOP4
18256: PUSH
18257: LD_INT 3
18259: LESS
18260: IFFALSE 18274
// SetFuel ( i , 3 ) ;
18262: NOP4
18266: PPUSH
18267: LD_INT 3
18269: PPUSH
18270: NOP4
18274: GO 18244
18276: POP
18277: POP
// end ; end_of_file
18278: PPOPN 2
18280: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18281: NOP4
18285: PUSH
18286: LD_INT 1
18288: EQUAL
18289: IFFALSE 18524
// begin if un = playerCommander then
18291: NOP4
18295: PUSH
18296: NOP4
18300: EQUAL
18301: IFFALSE 18310
// YouLost ( commanderDied ) ;
18303: LD_STRING commanderDied
18305: PPUSH
18306: NOP4
// if un = allyCommander then
18310: NOP4
18314: PUSH
18315: NOP4
18319: EQUAL
18320: IFFALSE 18329
// YouLost ( Theta ) ;
18322: LD_STRING Theta
18324: PPUSH
18325: NOP4
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18329: NOP4
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_INT 8
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 21
18359: PUSH
18360: LD_INT 3
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PPUSH
18376: NOP4
18380: IN
18381: IFFALSE 18397
// legDestCounter := legDestCounter + 1 ;
18383: NOP4
18387: PUSH
18388: NOP4
18392: PUSH
18393: LD_INT 1
18395: PLUS
18396: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18397: NOP4
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_INT 4
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 21
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PPUSH
18444: NOP4
18448: IN
18449: IFFALSE 18465
// allyDestCounter := allyDestCounter + 1 ;
18451: NOP4
18455: PUSH
18456: NOP4
18460: PUSH
18461: LD_INT 1
18463: PLUS
18464: ST_TO_ADDR
// if un in ruOutpost then
18465: NOP4
18469: PUSH
18470: NOP4
18474: IN
18475: IFFALSE 18524
// begin ruOutpost := ruOutpost diff un ;
18477: NOP4
18481: PUSH
18482: NOP4
18486: PUSH
18487: NOP4
18491: DIFF
18492: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18493: NOP4
18497: PUSH
18498: NOP4
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: NOP4
18510: PUSH
18511: LD_INT 1
18513: ARRAY
18514: PUSH
18515: LD_INT 1
18517: PLUS
18518: PPUSH
18519: NOP4
18523: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18524: NOP4
18528: PPUSH
18529: NOP4
// end ;
18533: PPOPN 1
18535: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18536: NOP4
18540: PPUSH
18541: NOP4
18545: PPUSH
18546: NOP4
// end ;
18550: PPOPN 2
18552: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18553: NOP4
18557: PPUSH
18558: NOP4
// end ;
18562: PPOPN 1
18564: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18565: NOP4
18569: PPUSH
18570: NOP4
// end ;
18574: PPOPN 1
18576: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
18577: NOP4
18581: PPUSH
18582: NOP4
18586: PPUSH
18587: NOP4
// end ;
18591: PPOPN 2
18593: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
18594: NOP4
18598: PPUSH
18599: NOP4
18603: PPUSH
18604: NOP4
18608: PPUSH
18609: NOP4
18613: PPUSH
18614: NOP4
18618: PPUSH
18619: NOP4
// end ;
18623: PPOPN 5
18625: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
18626: NOP4
18630: PPUSH
18631: NOP4
18635: PPUSH
18636: NOP4
// end ;
18640: PPOPN 2
18642: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
18643: NOP4
18647: PPUSH
18648: NOP4
18652: PPUSH
18653: NOP4
18657: PPUSH
18658: NOP4
18662: PPUSH
18663: NOP4
// end ;
18667: PPOPN 4
18669: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
18670: NOP4
18674: PPUSH
18675: NOP4
18679: PPUSH
18680: NOP4
18684: PPUSH
18685: NOP4
// end ;
18689: PPOPN 3
18691: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
18692: NOP4
18696: PPUSH
18697: NOP4
18701: PPUSH
18702: NOP4
// end ;
18706: PPOPN 2
18708: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
18709: NOP4
18713: PPUSH
18714: NOP4
18718: PPUSH
18719: NOP4
// end ;
18723: PPOPN 2
18725: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
18726: NOP4
18730: PPUSH
18731: NOP4
18735: PPUSH
18736: NOP4
18740: PPUSH
18741: NOP4
18745: PPUSH
18746: NOP4
// end ;
18750: PPOPN 4
18752: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
18753: NOP4
18757: PPUSH
18758: NOP4
18762: PPUSH
18763: NOP4
// end ; end_of_file
18767: PPOPN 2
18769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
// if exist_mode then
18774: NOP4
18778: IFFALSE 18803
// unit := CreateCharacter ( prefix & ident ) else
18780: NOP4
18784: PUSH
18785: NOP4
18789: PUSH
18790: NOP4
18794: STR
18795: PPUSH
18796: NOP4
18800: ST_TO_ADDR
18801: GO 18818
// unit := NewCharacter ( ident ) ;
18803: NOP4
18807: PUSH
18808: NOP4
18812: PPUSH
18813: NOP4
18817: ST_TO_ADDR
// result := unit ;
18818: NOP4
18822: PUSH
18823: NOP4
18827: ST_TO_ADDR
// end ;
18828: LD_VAR 0 4
18832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18833: LD_INT 0
18835: PPUSH
18836: PPUSH
// if not side or not nation then
18837: NOP4
18841: NOT
18842: PUSH
18843: NOP4
18847: NOT
18848: OR
18849: IFFALSE 18853
// exit ;
18851: GO 19489
// case nation of nation_american :
18853: NOP4
18857: PUSH
18858: LD_INT 1
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 19036
18866: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
18867: NOP4
18871: PUSH
18872: LD_INT 35
18874: PUSH
18875: LD_INT 45
18877: PUSH
18878: LD_INT 46
18880: PUSH
18881: LD_INT 47
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 6
18892: PUSH
18893: LD_INT 15
18895: PUSH
18896: LD_INT 16
18898: PUSH
18899: LD_INT 7
18901: PUSH
18902: LD_INT 12
18904: PUSH
18905: LD_INT 13
18907: PUSH
18908: LD_INT 10
18910: PUSH
18911: LD_INT 14
18913: PUSH
18914: LD_INT 20
18916: PUSH
18917: LD_INT 21
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_INT 25
18925: PUSH
18926: LD_INT 32
18928: PUSH
18929: LD_INT 27
18931: PUSH
18932: LD_INT 36
18934: PUSH
18935: LD_INT 69
18937: PUSH
18938: LD_INT 39
18940: PUSH
18941: LD_INT 34
18943: PUSH
18944: LD_INT 40
18946: PUSH
18947: LD_INT 48
18949: PUSH
18950: LD_INT 49
18952: PUSH
18953: LD_INT 50
18955: PUSH
18956: LD_INT 51
18958: PUSH
18959: LD_INT 52
18961: PUSH
18962: LD_INT 53
18964: PUSH
18965: LD_INT 54
18967: PUSH
18968: LD_INT 55
18970: PUSH
18971: LD_INT 56
18973: PUSH
18974: LD_INT 57
18976: PUSH
18977: LD_INT 58
18979: PUSH
18980: LD_INT 59
18982: PUSH
18983: LD_INT 60
18985: PUSH
18986: LD_INT 61
18988: PUSH
18989: LD_INT 62
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: ST_TO_ADDR
19034: GO 19413
19036: LD_INT 2
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19222
19044: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19045: NOP4
19049: PUSH
19050: LD_INT 35
19052: PUSH
19053: LD_INT 45
19055: PUSH
19056: LD_INT 46
19058: PUSH
19059: LD_INT 47
19061: PUSH
19062: LD_INT 70
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 11
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 6
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 18
19088: PUSH
19089: LD_INT 7
19091: PUSH
19092: LD_INT 17
19094: PUSH
19095: LD_INT 8
19097: PUSH
19098: LD_INT 20
19100: PUSH
19101: LD_INT 21
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_INT 72
19109: PUSH
19110: LD_INT 26
19112: PUSH
19113: LD_INT 69
19115: PUSH
19116: LD_INT 39
19118: PUSH
19119: LD_INT 40
19121: PUSH
19122: LD_INT 41
19124: PUSH
19125: LD_INT 42
19127: PUSH
19128: LD_INT 43
19130: PUSH
19131: LD_INT 48
19133: PUSH
19134: LD_INT 49
19136: PUSH
19137: LD_INT 50
19139: PUSH
19140: LD_INT 51
19142: PUSH
19143: LD_INT 52
19145: PUSH
19146: LD_INT 53
19148: PUSH
19149: LD_INT 54
19151: PUSH
19152: LD_INT 55
19154: PUSH
19155: LD_INT 56
19157: PUSH
19158: LD_INT 60
19160: PUSH
19161: LD_INT 61
19163: PUSH
19164: LD_INT 62
19166: PUSH
19167: LD_INT 66
19169: PUSH
19170: LD_INT 67
19172: PUSH
19173: LD_INT 68
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: ST_TO_ADDR
19220: GO 19413
19222: LD_INT 3
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19412
19230: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19231: NOP4
19235: PUSH
19236: LD_INT 46
19238: PUSH
19239: LD_INT 47
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: LD_INT 11
19250: PUSH
19251: LD_INT 9
19253: PUSH
19254: LD_INT 20
19256: PUSH
19257: LD_INT 19
19259: PUSH
19260: LD_INT 21
19262: PUSH
19263: LD_INT 24
19265: PUSH
19266: LD_INT 22
19268: PUSH
19269: LD_INT 25
19271: PUSH
19272: LD_INT 28
19274: PUSH
19275: LD_INT 29
19277: PUSH
19278: LD_INT 30
19280: PUSH
19281: LD_INT 31
19283: PUSH
19284: LD_INT 37
19286: PUSH
19287: LD_INT 38
19289: PUSH
19290: LD_INT 32
19292: PUSH
19293: LD_INT 27
19295: PUSH
19296: LD_INT 33
19298: PUSH
19299: LD_INT 69
19301: PUSH
19302: LD_INT 39
19304: PUSH
19305: LD_INT 34
19307: PUSH
19308: LD_INT 40
19310: PUSH
19311: LD_INT 71
19313: PUSH
19314: LD_INT 23
19316: PUSH
19317: LD_INT 44
19319: PUSH
19320: LD_INT 48
19322: PUSH
19323: LD_INT 49
19325: PUSH
19326: LD_INT 50
19328: PUSH
19329: LD_INT 51
19331: PUSH
19332: LD_INT 52
19334: PUSH
19335: LD_INT 53
19337: PUSH
19338: LD_INT 54
19340: PUSH
19341: LD_INT 55
19343: PUSH
19344: LD_INT 56
19346: PUSH
19347: LD_INT 57
19349: PUSH
19350: LD_INT 58
19352: PUSH
19353: LD_INT 59
19355: PUSH
19356: LD_INT 63
19358: PUSH
19359: LD_INT 64
19361: PUSH
19362: LD_INT 65
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: ST_TO_ADDR
19410: GO 19413
19412: POP
// if state > - 1 and state < 3 then
19413: NOP4
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: GREATER
19422: PUSH
19423: NOP4
19427: PUSH
19428: LD_INT 3
19430: LESS
19431: AND
19432: IFFALSE 19489
// for i in result do
19434: NOP4
19438: PUSH
19439: NOP4
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19487
// if GetTech ( i , side ) <> state then
19447: NOP4
19451: PPUSH
19452: NOP4
19456: PPUSH
19457: NOP4
19461: PUSH
19462: NOP4
19466: NONEQUAL
19467: IFFALSE 19485
// result := result diff i ;
19469: NOP4
19473: PUSH
19474: NOP4
19478: PUSH
19479: NOP4
19483: DIFF
19484: ST_TO_ADDR
19485: GO 19444
19487: POP
19488: POP
// end ;
19489: LD_VAR 0 4
19493: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
19498: PPUSH
// result := true ;
19499: NOP4
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19507: NOP4
19511: PUSH
19512: NOP4
19516: PPUSH
19517: NOP4
19521: ST_TO_ADDR
// if not tmp then
19522: NOP4
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19580
// for i in tmp do
19531: NOP4
19535: PUSH
19536: NOP4
19540: PUSH
19541: FOR_IN
19542: IFFALSE 19578
// if GetTech ( i , side ) <> state_researched then
19544: NOP4
19548: PPUSH
19549: NOP4
19553: PPUSH
19554: NOP4
19558: PUSH
19559: LD_INT 2
19561: NONEQUAL
19562: IFFALSE 19576
// begin result := false ;
19564: NOP4
19568: PUSH
19569: LD_INT 0
19571: ST_TO_ADDR
// exit ;
19572: POP
19573: POP
19574: GO 19580
// end ;
19576: GO 19541
19578: POP
19579: POP
// end ;
19580: LD_VAR 0 3
19584: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19585: LD_INT 0
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
19595: PPUSH
19596: PPUSH
19597: PPUSH
19598: PPUSH
19599: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19600: NOP4
19604: NOT
19605: PUSH
19606: NOP4
19610: PPUSH
19611: NOP4
19615: PUSH
19616: LD_INT 9
19618: NONEQUAL
19619: OR
19620: IFFALSE 19624
// exit ;
19622: GO 20197
// side := GetSide ( unit ) ;
19624: NOP4
19628: PUSH
19629: NOP4
19633: PPUSH
19634: NOP4
19638: ST_TO_ADDR
// tech_space := tech_spacanom ;
19639: NOP4
19643: PUSH
19644: LD_INT 29
19646: ST_TO_ADDR
// tech_time := tech_taurad ;
19647: NOP4
19651: PUSH
19652: LD_INT 28
19654: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19655: NOP4
19659: PUSH
19660: NOP4
19664: PPUSH
19665: NOP4
19669: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19670: NOP4
19674: PPUSH
19675: NOP4
19679: PUSH
19680: LD_INT 2
19682: EQUAL
19683: IFFALSE 19687
// exit ;
19685: GO 20197
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19687: NOP4
19691: PUSH
19692: LD_INT 81
19694: PUSH
19695: NOP4
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PPUSH
19725: NOP4
19729: ST_TO_ADDR
// if not tmp then
19730: NOP4
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 20197
// if in_unit then
19739: NOP4
19743: IFFALSE 19767
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19745: NOP4
19749: PUSH
19750: NOP4
19754: PPUSH
19755: NOP4
19759: PPUSH
19760: NOP4
19764: ST_TO_ADDR
19765: GO 19787
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19767: NOP4
19771: PUSH
19772: NOP4
19776: PPUSH
19777: NOP4
19781: PPUSH
19782: NOP4
19786: ST_TO_ADDR
// if not enemy then
19787: NOP4
19791: NOT
19792: IFFALSE 19796
// exit ;
19794: GO 20197
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19796: NOP4
19800: PUSH
19801: NOP4
19805: PPUSH
19806: NOP4
19810: PPUSH
19811: NOP4
19815: PUSH
19816: LD_INT 13
19818: GREATER
19819: AND
19820: PUSH
19821: NOP4
19825: PPUSH
19826: NOP4
19830: PPUSH
19831: NOP4
19835: PUSH
19836: LD_INT 12
19838: GREATER
19839: OR
19840: IFFALSE 19844
// exit ;
19842: GO 20197
// missile := [ 1 ] ;
19844: NOP4
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19855: NOP4
19859: PPUSH
19860: NOP4
19864: PPUSH
19865: NOP4
19869: IFFALSE 19898
// missile := Insert ( missile , missile + 1 , 2 ) ;
19871: NOP4
19875: PUSH
19876: NOP4
19880: PPUSH
19881: NOP4
19885: PUSH
19886: LD_INT 1
19888: PLUS
19889: PPUSH
19890: LD_INT 2
19892: PPUSH
19893: NOP4
19897: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19898: NOP4
19902: PPUSH
19903: NOP4
19907: PPUSH
19908: NOP4
19912: PUSH
19913: NOP4
19917: PPUSH
19918: NOP4
19922: PPUSH
19923: NOP4
19927: PPUSH
19928: NOP4
19932: NOT
19933: AND
19934: IFFALSE 19963
// missile := Insert ( missile , missile + 1 , 3 ) ;
19936: NOP4
19940: PUSH
19941: NOP4
19945: PPUSH
19946: NOP4
19950: PUSH
19951: LD_INT 1
19953: PLUS
19954: PPUSH
19955: LD_INT 3
19957: PPUSH
19958: NOP4
19962: ST_TO_ADDR
// if missile < 2 then
19963: NOP4
19967: PUSH
19968: LD_INT 2
19970: LESS
19971: IFFALSE 19975
// exit ;
19973: GO 20197
// x := GetX ( enemy ) ;
19975: NOP4
19979: PUSH
19980: NOP4
19984: PPUSH
19985: NOP4
19989: ST_TO_ADDR
// y := GetY ( enemy ) ;
19990: NOP4
19994: PUSH
19995: NOP4
19999: PPUSH
20000: NOP4
20004: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20005: NOP4
20009: PUSH
20010: NOP4
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PPUSH
20019: LD_INT 1
20021: PPUSH
20022: NOP4
20026: PLUS
20027: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20028: NOP4
20032: PUSH
20033: NOP4
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: NOP4
20049: PLUS
20050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20051: NOP4
20055: PPUSH
20056: NOP4
20060: PPUSH
20061: NOP4
20065: NOT
20066: IFFALSE 20088
// begin _x := x ;
20068: NOP4
20072: PUSH
20073: NOP4
20077: ST_TO_ADDR
// _y := y ;
20078: NOP4
20082: PUSH
20083: NOP4
20087: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20088: NOP4
20092: PUSH
20093: LD_INT 1
20095: PPUSH
20096: NOP4
20100: PPUSH
20101: NOP4
20105: ST_TO_ADDR
// case i of 1 :
20106: NOP4
20110: PUSH
20111: LD_INT 1
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20136
20119: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20120: NOP4
20124: PPUSH
20125: NOP4
20129: PPUSH
20130: NOP4
20134: GO 20197
20136: LD_INT 2
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20166
20144: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20145: NOP4
20149: PPUSH
20150: NOP4
20154: PPUSH
20155: NOP4
20159: PPUSH
20160: NOP4
20164: GO 20197
20166: LD_INT 3
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20196
20174: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20175: NOP4
20179: PPUSH
20180: NOP4
20184: PPUSH
20185: NOP4
20189: PPUSH
20190: NOP4
20194: GO 20197
20196: POP
// end ;
20197: LD_VAR 0 2
20201: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20202: LD_INT 0
20204: PPUSH
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
// if not unit or not building then
20210: NOP4
20214: NOT
20215: PUSH
20216: NOP4
20220: NOT
20221: OR
20222: IFFALSE 20226
// exit ;
20224: GO 20384
// x := GetX ( building ) ;
20226: NOP4
20230: PUSH
20231: NOP4
20235: PPUSH
20236: NOP4
20240: ST_TO_ADDR
// y := GetY ( building ) ;
20241: NOP4
20245: PUSH
20246: NOP4
20250: PPUSH
20251: NOP4
20255: ST_TO_ADDR
// for i = 0 to 5 do
20256: NOP4
20260: PUSH
20261: DOUBLE
20262: LD_INT 0
20264: DEC
20265: ST_TO_ADDR
20266: LD_INT 5
20268: PUSH
20269: FOR_TO
20270: IFFALSE 20382
// begin _x := ShiftX ( x , i , 3 ) ;
20272: NOP4
20276: PUSH
20277: NOP4
20281: PPUSH
20282: NOP4
20286: PPUSH
20287: LD_INT 3
20289: PPUSH
20290: NOP4
20294: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20295: NOP4
20299: PUSH
20300: NOP4
20304: PPUSH
20305: NOP4
20309: PPUSH
20310: LD_INT 3
20312: PPUSH
20313: NOP4
20317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20318: NOP4
20322: PPUSH
20323: NOP4
20327: PPUSH
20328: NOP4
20332: NOT
20333: IFFALSE 20337
// continue ;
20335: GO 20269
// if HexInfo ( _x , _y ) = 0 then
20337: NOP4
20341: PPUSH
20342: NOP4
20346: PPUSH
20347: NOP4
20351: PUSH
20352: LD_INT 0
20354: EQUAL
20355: IFFALSE 20380
// begin ComMoveXY ( unit , _x , _y ) ;
20357: NOP4
20361: PPUSH
20362: NOP4
20366: PPUSH
20367: NOP4
20371: PPUSH
20372: NOP4
// exit ;
20376: POP
20377: POP
20378: GO 20384
// end ; end ;
20380: GO 20269
20382: POP
20383: POP
// end ;
20384: LD_VAR 0 3
20388: RET
// export function ScanBase ( side , base_area ) ; begin
20389: LD_INT 0
20391: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20392: NOP4
20396: PUSH
20397: NOP4
20401: PPUSH
20402: LD_INT 81
20404: PUSH
20405: NOP4
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: NOP4
20418: ST_TO_ADDR
// end ;
20419: LD_VAR 0 3
20423: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20431: NOP4
20435: NOT
20436: PUSH
20437: NOP4
20441: PUSH
20442: NOP4
20446: ARRAY
20447: NOT
20448: OR
20449: PUSH
20450: NOP4
20454: NOT
20455: OR
20456: PUSH
20457: NOP4
20461: NOT
20462: OR
20463: IFFALSE 20467
// exit ;
20465: GO 20917
// side := mc_sides [ base ] ;
20467: NOP4
20471: PUSH
20472: NOP4
20476: PUSH
20477: NOP4
20481: ARRAY
20482: ST_TO_ADDR
// if not side then
20483: NOP4
20487: NOT
20488: IFFALSE 20492
// exit ;
20490: GO 20917
// for i in solds do
20492: NOP4
20496: PUSH
20497: NOP4
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20564
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
20505: NOP4
20509: PPUSH
20510: NOP4
20514: PPUSH
20515: NOP4
20519: PUSH
20520: LD_INT 32
20522: PUSH
20523: LD_INT 31
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: IN
20530: IFFALSE 20550
// solds := solds diff i else
20532: NOP4
20536: PUSH
20537: NOP4
20541: PUSH
20542: NOP4
20546: DIFF
20547: ST_TO_ADDR
20548: GO 20562
// SetTag ( i , 18 ) ;
20550: NOP4
20554: PPUSH
20555: LD_INT 18
20557: PPUSH
20558: NOP4
20562: GO 20502
20564: POP
20565: POP
// if not solds then
20566: NOP4
20570: NOT
20571: IFFALSE 20575
// exit ;
20573: GO 20917
// repeat wait ( 0 0$1 ) ;
20575: LD_INT 35
20577: PPUSH
20578: NOP4
// enemy := ScanBase ( side , area ) ;
20582: NOP4
20586: PUSH
20587: NOP4
20591: PPUSH
20592: NOP4
20596: PPUSH
20597: NOP4
20601: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
20602: NOP4
20606: NOT
20607: PUSH
20608: NOP4
20612: PUSH
20613: LD_INT 3
20615: GREATER
20616: OR
20617: PUSH
20618: NOP4
20622: PUSH
20623: NOP4
20627: ARRAY
20628: OR
20629: IFFALSE 20670
// begin for i in solds do
20631: NOP4
20635: PUSH
20636: NOP4
20640: PUSH
20641: FOR_IN
20642: IFFALSE 20666
// if HasTask ( i ) then
20644: NOP4
20648: PPUSH
20649: NOP4
20653: IFFALSE 20664
// ComStop ( i ) ;
20655: NOP4
20659: PPUSH
20660: NOP4
20664: GO 20641
20666: POP
20667: POP
// break ;
20668: GO 20905
// end ; for i in solds do
20670: NOP4
20674: PUSH
20675: NOP4
20679: PUSH
20680: FOR_IN
20681: IFFALSE 20897
// begin if IsInUnit ( i ) then
20683: NOP4
20687: PPUSH
20688: NOP4
20692: IFFALSE 20703
// ComExitBuilding ( i ) ;
20694: NOP4
20698: PPUSH
20699: NOP4
// if GetLives ( i ) > 333 then
20703: NOP4
20707: PPUSH
20708: NOP4
20712: PUSH
20713: LD_INT 333
20715: GREATER
20716: IFFALSE 20744
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20718: NOP4
20722: PPUSH
20723: NOP4
20727: PPUSH
20728: NOP4
20732: PPUSH
20733: NOP4
20737: PPUSH
20738: NOP4
20742: GO 20895
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
20744: NOP4
20748: PUSH
20749: NOP4
20753: PUSH
20754: NOP4
20758: ARRAY
20759: PPUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 30
20785: PUSH
20786: LD_INT 6
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: PPUSH
20799: NOP4
20803: PPUSH
20804: NOP4
20808: PPUSH
20809: NOP4
20813: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
20814: NOP4
20818: PPUSH
20819: NOP4
20823: PPUSH
20824: NOP4
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: LD_INT 5
20834: PPUSH
20835: NOP4
20839: PPUSH
20840: NOP4
20844: PPUSH
20845: NOP4
20849: PPUSH
20850: LD_INT 3
20852: PPUSH
20853: LD_INT 5
20855: PPUSH
20856: NOP4
20860: PPUSH
20861: NOP4
// SetTag ( i , 0 ) ;
20865: NOP4
20869: PPUSH
20870: LD_INT 0
20872: PPUSH
20873: NOP4
// solds := solds diff i ;
20877: NOP4
20881: PUSH
20882: NOP4
20886: PUSH
20887: NOP4
20891: DIFF
20892: ST_TO_ADDR
// continue ;
20893: GO 20680
// end ; end ;
20895: GO 20680
20897: POP
20898: POP
// until solds ;
20899: NOP4
20903: IFFALSE 20575
// MC_Reset ( base , 18 ) ;
20905: NOP4
20909: PPUSH
20910: LD_INT 18
20912: PPUSH
20913: NOP4
// end ;
20917: LD_VAR 0 4
20921: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
20922: LD_INT 0
20924: PPUSH
20925: PPUSH
20926: PPUSH
20927: PPUSH
20928: PPUSH
20929: PPUSH
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20940: NOP4
20944: PUSH
20945: NOP4
20949: PUSH
20950: NOP4
20954: ARRAY
20955: PPUSH
20956: LD_INT 25
20958: PUSH
20959: LD_INT 3
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PPUSH
20966: NOP4
20970: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20971: NOP4
20975: PUSH
20976: NOP4
20980: PUSH
20981: NOP4
20985: ARRAY
20986: PPUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 25
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 25
21002: PUSH
21003: LD_INT 5
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 25
21012: PUSH
21013: LD_INT 8
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 25
21022: PUSH
21023: LD_INT 9
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PPUSH
21037: NOP4
21041: ST_TO_ADDR
// if not defenders and not solds then
21042: NOP4
21046: NOT
21047: PUSH
21048: NOP4
21052: NOT
21053: AND
21054: IFFALSE 21058
// exit ;
21056: GO 22424
// depot_under_attack := false ;
21058: NOP4
21062: PUSH
21063: LD_INT 0
21065: ST_TO_ADDR
// sold_defenders := [ ] ;
21066: NOP4
21070: PUSH
21071: EMPTY
21072: ST_TO_ADDR
// if mechs then
21073: NOP4
21077: IFFALSE 21206
// for i in defenders do
21079: NOP4
21083: PUSH
21084: NOP4
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21204
// begin SetTag ( i , 20 ) ;
21092: NOP4
21096: PPUSH
21097: LD_INT 20
21099: PPUSH
21100: NOP4
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21104: NOP4
21108: PPUSH
21109: NOP4
21113: PUSH
21114: LD_INT 1
21116: EQUAL
21117: PUSH
21118: NOP4
21122: PPUSH
21123: NOP4
21127: NOT
21128: AND
21129: PUSH
21130: NOP4
21134: AND
21135: IFFALSE 21202
// begin un := mechs [ 1 ] ;
21137: NOP4
21141: PUSH
21142: NOP4
21146: PUSH
21147: LD_INT 1
21149: ARRAY
21150: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21151: NOP4
21155: PPUSH
21156: NOP4
// AddComEnterUnit ( un , i ) ;
21160: NOP4
21164: PPUSH
21165: NOP4
21169: PPUSH
21170: NOP4
// SetTag ( un , 19 ) ;
21174: NOP4
21178: PPUSH
21179: LD_INT 19
21181: PPUSH
21182: NOP4
// mechs := mechs diff un ;
21186: NOP4
21190: PUSH
21191: NOP4
21195: PUSH
21196: NOP4
21200: DIFF
21201: ST_TO_ADDR
// end ; end ;
21202: GO 21089
21204: POP
21205: POP
// if solds then
21206: NOP4
21210: IFFALSE 21269
// for i in solds do
21212: NOP4
21216: PUSH
21217: NOP4
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21267
// if not GetTag ( i ) then
21225: NOP4
21229: PPUSH
21230: NOP4
21234: NOT
21235: IFFALSE 21265
// begin defenders := defenders union i ;
21237: NOP4
21241: PUSH
21242: NOP4
21246: PUSH
21247: NOP4
21251: UNION
21252: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21253: NOP4
21257: PPUSH
21258: LD_INT 18
21260: PPUSH
21261: NOP4
// end ;
21265: GO 21222
21267: POP
21268: POP
// repeat wait ( 0 0$1 ) ;
21269: LD_INT 35
21271: PPUSH
21272: NOP4
// enemy := mc_scan [ base ] ;
21276: NOP4
21280: PUSH
21281: NOP4
21285: PUSH
21286: NOP4
21290: ARRAY
21291: ST_TO_ADDR
// for i in defenders do
21292: NOP4
21296: PUSH
21297: NOP4
21301: PUSH
21302: FOR_IN
21303: IFFALSE 21988
// begin e := NearestUnitToUnit ( enemy , i ) ;
21305: NOP4
21309: PUSH
21310: NOP4
21314: PPUSH
21315: NOP4
21319: PPUSH
21320: NOP4
21324: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21325: NOP4
21329: PUSH
21330: NOP4
21334: PUSH
21335: NOP4
21339: ARRAY
21340: PPUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 30
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 30
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: PPUSH
21369: NOP4
21373: NOT
21374: PUSH
21375: NOP4
21379: PUSH
21380: NOP4
21384: ARRAY
21385: PPUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 30
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 30
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: PPUSH
21414: NOP4
21418: PPUSH
21419: NOP4
21423: PUSH
21424: LD_INT 600
21426: LESS
21427: OR
21428: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21429: NOP4
21433: PPUSH
21434: NOP4
21438: PUSH
21439: LD_INT 2
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21694
21447: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
21448: NOP4
21452: PPUSH
21453: NOP4
21457: PUSH
21458: LD_INT 650
21460: GREATER
21461: PUSH
21462: NOP4
21466: PPUSH
21467: NOP4
21471: PPUSH
21472: NOP4
21476: PUSH
21477: LD_INT 40
21479: LESS
21480: AND
21481: IFFALSE 21499
// ComAttackUnit ( i , e ) else
21483: NOP4
21487: PPUSH
21488: NOP4
21492: PPUSH
21493: NOP4
21497: GO 21577
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
21499: NOP4
21503: PPUSH
21504: NOP4
21508: PPUSH
21509: NOP4
21513: PUSH
21514: LD_INT 30
21516: GREATEREQUAL
21517: PUSH
21518: NOP4
21522: PPUSH
21523: NOP4
21527: PUSH
21528: LD_INT 650
21530: LESSEQUAL
21531: OR
21532: PUSH
21533: NOP4
21537: PPUSH
21538: NOP4
21542: PUSH
21543: NOP4
21547: ARRAY
21548: PPUSH
21549: NOP4
21553: NOT
21554: AND
21555: IFFALSE 21577
// ComMoveToArea ( i , mc_parking [ base ] ) ;
21557: NOP4
21561: PPUSH
21562: NOP4
21566: PUSH
21567: NOP4
21571: ARRAY
21572: PPUSH
21573: NOP4
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
21577: NOP4
21581: PPUSH
21582: NOP4
21586: PUSH
21587: LD_INT 998
21589: LESS
21590: PUSH
21591: NOP4
21595: PPUSH
21596: NOP4
21600: PUSH
21601: LD_INT 1
21603: EQUAL
21604: AND
21605: PUSH
21606: NOP4
21610: PPUSH
21611: NOP4
21615: AND
21616: PUSH
21617: NOP4
21621: PPUSH
21622: NOP4
21626: PUSH
21627: NOP4
21631: ARRAY
21632: PPUSH
21633: NOP4
21637: AND
21638: IFFALSE 21692
// begin mech := IsDrivenBy ( i ) ;
21640: NOP4
21644: PUSH
21645: NOP4
21649: PPUSH
21650: NOP4
21654: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21655: NOP4
21659: PPUSH
21660: NOP4
// AddComRepairVehicle ( mech , i ) ;
21664: NOP4
21668: PPUSH
21669: NOP4
21673: PPUSH
21674: NOP4
// AddComEnterUnit ( mech , i ) ;
21678: NOP4
21682: PPUSH
21683: NOP4
21687: PPUSH
21688: NOP4
// end ; end ; unit_human :
21692: GO 21959
21694: LD_INT 1
21696: DOUBLE
21697: EQUAL
21698: IFTRUE 21702
21700: GO 21958
21702: POP
// begin b := IsInUnit ( i ) ;
21703: NOP4
21707: PUSH
21708: NOP4
21712: PPUSH
21713: NOP4
21717: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
21718: NOP4
21722: PUSH
21723: NOP4
21727: NOT
21728: PUSH
21729: NOP4
21733: PPUSH
21734: NOP4
21738: PUSH
21739: LD_INT 32
21741: PUSH
21742: LD_INT 31
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: IN
21749: OR
21750: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
21751: NOP4
21755: PUSH
21756: NOP4
21760: PPUSH
21761: LD_INT 21
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PPUSH
21771: NOP4
21775: PUSH
21776: LD_INT 1
21778: LESSEQUAL
21779: OR
21780: PUSH
21781: NOP4
21785: AND
21786: PUSH
21787: NOP4
21791: PUSH
21792: NOP4
21796: IN
21797: NOT
21798: AND
21799: IFFALSE 21892
// begin if b then
21801: NOP4
21805: IFFALSE 21854
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
21807: NOP4
21811: PPUSH
21812: NOP4
21816: PPUSH
21817: NOP4
21821: PPUSH
21822: NOP4
21826: PPUSH
21827: NOP4
21831: PUSH
21832: LD_INT 10
21834: LESS
21835: PUSH
21836: NOP4
21840: PPUSH
21841: NOP4
21845: PUSH
21846: LD_INT 7
21848: NONEQUAL
21849: AND
21850: IFFALSE 21854
// continue ;
21852: GO 21302
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
21854: NOP4
21858: PUSH
21859: NOP4
21863: PPUSH
21864: NOP4
21868: PUSH
21869: LD_INT 1
21871: PLUS
21872: PPUSH
21873: NOP4
21877: PPUSH
21878: NOP4
21882: ST_TO_ADDR
// ComExitBuilding ( i ) ;
21883: NOP4
21887: PPUSH
21888: NOP4
// end ; if sold_defenders then
21892: NOP4
21896: IFFALSE 21956
// if i in sold_defenders then
21898: NOP4
21902: PUSH
21903: NOP4
21907: IN
21908: IFFALSE 21956
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
21910: NOP4
21914: PPUSH
21915: NOP4
21919: NOT
21920: PUSH
21921: NOP4
21925: PPUSH
21926: NOP4
21930: PPUSH
21931: NOP4
21935: PUSH
21936: LD_INT 30
21938: LESS
21939: AND
21940: IFFALSE 21956
// ComAttackUnit ( i , e ) ;
21942: NOP4
21946: PPUSH
21947: NOP4
21951: PPUSH
21952: NOP4
// end ; end ; end ;
21956: GO 21959
21958: POP
// if IsDead ( i ) then
21959: NOP4
21963: PPUSH
21964: NOP4
21968: IFFALSE 21986
// defenders := defenders diff i ;
21970: NOP4
21974: PUSH
21975: NOP4
21979: PUSH
21980: NOP4
21984: DIFF
21985: ST_TO_ADDR
// end ;
21986: GO 21302
21988: POP
21989: POP
// until not enemy or not defenders ;
21990: NOP4
21994: NOT
21995: PUSH
21996: NOP4
22000: NOT
22001: OR
22002: IFFALSE 21269
// MC_Reset ( base , 18 ) ;
22004: NOP4
22008: PPUSH
22009: LD_INT 18
22011: PPUSH
22012: NOP4
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22016: NOP4
22020: PUSH
22021: NOP4
22025: PUSH
22026: NOP4
22030: PPUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 25
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 25
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 8
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 9
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PPUSH
22081: NOP4
22085: DIFF
22086: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22087: NOP4
22091: NOT
22092: PUSH
22093: NOP4
22097: PPUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PPUSH
22108: NOP4
22112: AND
22113: IFFALSE 22375
// begin tmp := FilterByTag ( defenders , 19 ) ;
22115: NOP4
22119: PUSH
22120: NOP4
22124: PPUSH
22125: LD_INT 19
22127: PPUSH
22128: NOP4
22132: ST_TO_ADDR
// if tmp then
22133: NOP4
22137: IFFALSE 22207
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22139: NOP4
22143: PUSH
22144: NOP4
22148: PPUSH
22149: LD_INT 25
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PPUSH
22159: NOP4
22163: ST_TO_ADDR
// if tmp then
22164: NOP4
22168: IFFALSE 22207
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22170: NOP4
22174: PUSH
22175: NOP4
22179: PPUSH
22180: NOP4
22184: PPUSH
22185: NOP4
22189: PUSH
22190: NOP4
22194: ARRAY
22195: PUSH
22196: NOP4
22200: UNION
22201: PPUSH
22202: NOP4
22206: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22207: NOP4
22211: PPUSH
22212: LD_INT 19
22214: PPUSH
22215: NOP4
// repeat wait ( 0 0$1 ) ;
22219: LD_INT 35
22221: PPUSH
22222: NOP4
// for i in defenders do
22226: NOP4
22230: PUSH
22231: NOP4
22235: PUSH
22236: FOR_IN
22237: IFFALSE 22326
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22239: NOP4
22243: PPUSH
22244: NOP4
22248: PUSH
22249: NOP4
22253: ARRAY
22254: PPUSH
22255: NOP4
22259: NOT
22260: IFFALSE 22284
// ComMoveToArea ( i , mc_parking [ base ] ) else
22262: NOP4
22266: PPUSH
22267: NOP4
22271: PUSH
22272: NOP4
22276: ARRAY
22277: PPUSH
22278: NOP4
22282: GO 22324
// if GetControl ( i ) = control_manual then
22284: NOP4
22288: PPUSH
22289: NOP4
22293: PUSH
22294: LD_INT 1
22296: EQUAL
22297: IFFALSE 22324
// if IsDrivenBy ( i ) then
22299: NOP4
22303: PPUSH
22304: NOP4
22308: IFFALSE 22324
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22310: NOP4
22314: PPUSH
22315: NOP4
22319: PPUSH
22320: NOP4
// end ;
22324: GO 22236
22326: POP
22327: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22328: NOP4
22332: PPUSH
22333: LD_INT 95
22335: PUSH
22336: NOP4
22340: PUSH
22341: NOP4
22345: ARRAY
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PPUSH
22351: NOP4
22355: PUSH
22356: NOP4
22360: EQUAL
22361: PUSH
22362: NOP4
22366: PUSH
22367: NOP4
22371: ARRAY
22372: OR
22373: IFFALSE 22219
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
22375: NOP4
22379: PUSH
22380: NOP4
22384: PPUSH
22385: NOP4
22389: PPUSH
22390: NOP4
22394: PUSH
22395: NOP4
22399: ARRAY
22400: PUSH
22401: NOP4
22405: UNION
22406: PPUSH
22407: NOP4
22411: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
22412: NOP4
22416: PPUSH
22417: LD_INT 20
22419: PPUSH
22420: NOP4
// end ;
22424: LD_VAR 0 4
22428: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
// result := false ;
22435: NOP4
22439: PUSH
22440: LD_INT 0
22442: ST_TO_ADDR
// side := GetSide ( unit ) ;
22443: NOP4
22447: PUSH
22448: NOP4
22452: PPUSH
22453: NOP4
22457: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22458: NOP4
22462: PUSH
22463: NOP4
22467: PPUSH
22468: NOP4
22472: ST_TO_ADDR
// case nat of 1 :
22473: NOP4
22477: PUSH
22478: LD_INT 1
22480: DOUBLE
22481: EQUAL
22482: IFTRUE 22486
22484: GO 22497
22486: POP
// tech := tech_lassight ; 2 :
22487: NOP4
22491: PUSH
22492: LD_INT 12
22494: ST_TO_ADDR
22495: GO 22536
22497: LD_INT 2
22499: DOUBLE
22500: EQUAL
22501: IFTRUE 22505
22503: GO 22516
22505: POP
// tech := tech_mortar ; 3 :
22506: NOP4
22510: PUSH
22511: LD_INT 41
22513: ST_TO_ADDR
22514: GO 22536
22516: LD_INT 3
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22535
22524: POP
// tech := tech_bazooka ; end ;
22525: NOP4
22529: PUSH
22530: LD_INT 44
22532: ST_TO_ADDR
22533: GO 22536
22535: POP
// if Researched ( side , tech ) then
22536: NOP4
22540: PPUSH
22541: NOP4
22545: PPUSH
22546: NOP4
22550: IFFALSE 22577
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22552: NOP4
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 8
22562: PUSH
22563: LD_INT 9
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: PUSH
22571: NOP4
22575: ARRAY
22576: ST_TO_ADDR
// end ;
22577: LD_VAR 0 2
22581: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22582: LD_INT 0
22584: PPUSH
22585: PPUSH
22586: PPUSH
// if not mines then
22587: NOP4
22591: NOT
22592: IFFALSE 22596
// exit ;
22594: GO 22740
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22596: NOP4
22600: PUSH
22601: LD_INT 81
22603: PUSH
22604: NOP4
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: LD_INT 21
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PPUSH
22634: NOP4
22638: ST_TO_ADDR
// for i in mines do
22639: NOP4
22643: PUSH
22644: NOP4
22648: PUSH
22649: FOR_IN
22650: IFFALSE 22738
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22652: NOP4
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PPUSH
22661: NOP4
22665: PUSH
22666: LD_INT 2
22668: ARRAY
22669: PPUSH
22670: NOP4
22674: NOT
22675: IFFALSE 22679
// continue ;
22677: GO 22649
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22679: NOP4
22683: PUSH
22684: LD_INT 1
22686: ARRAY
22687: PPUSH
22688: NOP4
22692: PUSH
22693: LD_INT 2
22695: ARRAY
22696: PPUSH
22697: NOP4
22701: PUSH
22702: NOP4
22706: IN
22707: IFFALSE 22736
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22709: NOP4
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PPUSH
22718: NOP4
22722: PUSH
22723: LD_INT 2
22725: ARRAY
22726: PPUSH
22727: NOP4
22731: PPUSH
22732: NOP4
// end ;
22736: GO 22649
22738: POP
22739: POP
// end ;
22740: LD_VAR 0 3
22744: RET
// export function Count ( array ) ; var i ; begin
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
// result := 0 ;
22749: NOP4
22753: PUSH
22754: LD_INT 0
22756: ST_TO_ADDR
// for i in array do
22757: NOP4
22761: PUSH
22762: NOP4
22766: PUSH
22767: FOR_IN
22768: IFFALSE 22792
// if i then
22770: NOP4
22774: IFFALSE 22790
// result := result + 1 ;
22776: NOP4
22780: PUSH
22781: NOP4
22785: PUSH
22786: LD_INT 1
22788: PLUS
22789: ST_TO_ADDR
22790: GO 22767
22792: POP
22793: POP
// end ;
22794: LD_VAR 0 2
22798: RET
// export function IsEmpty ( building ) ; begin
22799: LD_INT 0
22801: PPUSH
// if not building then
22802: NOP4
22806: NOT
22807: IFFALSE 22811
// exit ;
22809: GO 22854
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22811: NOP4
22815: PUSH
22816: NOP4
22820: PUSH
22821: LD_INT 22
22823: PUSH
22824: NOP4
22828: PPUSH
22829: NOP4
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 58
22840: PUSH
22841: EMPTY
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PPUSH
22848: NOP4
22852: IN
22853: ST_TO_ADDR
// end ;
22854: LD_VAR 0 2
22858: RET
// export function IsNotFull ( building ) ; begin
22859: LD_INT 0
22861: PPUSH
// if not building then
22862: NOP4
22866: NOT
22867: IFFALSE 22871
// exit ;
22869: GO 22890
// result := UnitsInside ( building ) < 6 ;
22871: NOP4
22875: PUSH
22876: NOP4
22880: PPUSH
22881: NOP4
22885: PUSH
22886: LD_INT 6
22888: LESS
22889: ST_TO_ADDR
// end ;
22890: LD_VAR 0 2
22894: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
// tmp := [ ] ;
22901: NOP4
22905: PUSH
22906: EMPTY
22907: ST_TO_ADDR
// list := [ ] ;
22908: NOP4
22912: PUSH
22913: EMPTY
22914: ST_TO_ADDR
// for i = 16 to 25 do
22915: NOP4
22919: PUSH
22920: DOUBLE
22921: LD_INT 16
22923: DEC
22924: ST_TO_ADDR
22925: LD_INT 25
22927: PUSH
22928: FOR_TO
22929: IFFALSE 23002
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22931: NOP4
22935: PUSH
22936: NOP4
22940: PUSH
22941: LD_INT 22
22943: PUSH
22944: NOP4
22948: PPUSH
22949: NOP4
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 91
22960: PUSH
22961: NOP4
22965: PUSH
22966: LD_INT 6
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 30
22976: PUSH
22977: NOP4
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: PPUSH
22994: NOP4
22998: ADD
22999: ST_TO_ADDR
23000: GO 22928
23002: POP
23003: POP
// for i = 1 to tmp do
23004: NOP4
23008: PUSH
23009: DOUBLE
23010: LD_INT 1
23012: DEC
23013: ST_TO_ADDR
23014: NOP4
23018: PUSH
23019: FOR_TO
23020: IFFALSE 23108
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23022: NOP4
23026: PUSH
23027: NOP4
23031: PUSH
23032: NOP4
23036: PUSH
23037: NOP4
23041: ARRAY
23042: PPUSH
23043: NOP4
23047: PUSH
23048: NOP4
23052: PUSH
23053: NOP4
23057: ARRAY
23058: PPUSH
23059: NOP4
23063: PUSH
23064: NOP4
23068: PUSH
23069: NOP4
23073: ARRAY
23074: PPUSH
23075: NOP4
23079: PUSH
23080: NOP4
23084: PUSH
23085: NOP4
23089: ARRAY
23090: PPUSH
23091: NOP4
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: ADD
23105: ST_TO_ADDR
23106: GO 23019
23108: POP
23109: POP
// result := list ;
23110: NOP4
23114: PUSH
23115: NOP4
23119: ST_TO_ADDR
// end ;
23120: LD_VAR 0 2
23124: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23125: LD_INT 0
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
// if not factory then
23134: NOP4
23138: NOT
23139: IFFALSE 23143
// exit ;
23141: GO 23668
// if control = control_apeman then
23143: NOP4
23147: PUSH
23148: LD_INT 5
23150: EQUAL
23151: IFFALSE 23260
// begin tmp := UnitsInside ( factory ) ;
23153: NOP4
23157: PUSH
23158: NOP4
23162: PPUSH
23163: NOP4
23167: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23168: NOP4
23172: PPUSH
23173: LD_INT 25
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: NOP4
23187: NOT
23188: IFFALSE 23198
// control := control_manual ;
23190: NOP4
23194: PUSH
23195: LD_INT 1
23197: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23198: NOP4
23202: PUSH
23203: NOP4
23207: PPUSH
23208: NOP4
23212: ST_TO_ADDR
// if tmp then
23213: NOP4
23217: IFFALSE 23260
// begin for i in tmp do
23219: NOP4
23223: PUSH
23224: NOP4
23228: PUSH
23229: FOR_IN
23230: IFFALSE 23258
// if i [ 1 ] = b_ext_radar then
23232: NOP4
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PUSH
23241: LD_INT 20
23243: EQUAL
23244: IFFALSE 23256
// begin control := control_remote ;
23246: NOP4
23250: PUSH
23251: LD_INT 2
23253: ST_TO_ADDR
// break ;
23254: GO 23258
// end ;
23256: GO 23229
23258: POP
23259: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23260: NOP4
23264: PPUSH
23265: NOP4
23269: PPUSH
23270: NOP4
23274: PPUSH
23275: NOP4
23279: PPUSH
23280: NOP4
23284: PPUSH
23285: NOP4
23289: IFFALSE 23324
// begin result := [ chassis , engine , control , weapon ] ;
23291: NOP4
23295: PUSH
23296: NOP4
23300: PUSH
23301: NOP4
23305: PUSH
23306: NOP4
23310: PUSH
23311: NOP4
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: ST_TO_ADDR
// exit ;
23322: GO 23668
// end ; _chassis := AvailableChassisList ( factory ) ;
23324: NOP4
23328: PUSH
23329: NOP4
23333: PPUSH
23334: NOP4
23338: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23339: NOP4
23343: PUSH
23344: NOP4
23348: PPUSH
23349: NOP4
23353: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23354: NOP4
23358: PUSH
23359: NOP4
23363: PPUSH
23364: NOP4
23368: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23369: NOP4
23373: PUSH
23374: NOP4
23378: PPUSH
23379: NOP4
23383: ST_TO_ADDR
// if not chassis in _chassis then
23384: NOP4
23388: PUSH
23389: NOP4
23393: IN
23394: NOT
23395: IFFALSE 23421
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23397: NOP4
23401: PUSH
23402: NOP4
23406: PUSH
23407: LD_INT 1
23409: PPUSH
23410: NOP4
23414: PPUSH
23415: NOP4
23419: ARRAY
23420: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23421: NOP4
23425: PPUSH
23426: NOP4
23430: PPUSH
23431: NOP4
23435: NOT
23436: IFFALSE 23495
// repeat engine := _engine [ 1 ] ;
23438: NOP4
23442: PUSH
23443: NOP4
23447: PUSH
23448: LD_INT 1
23450: ARRAY
23451: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23452: NOP4
23456: PUSH
23457: NOP4
23461: PPUSH
23462: LD_INT 1
23464: PPUSH
23465: NOP4
23469: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23470: NOP4
23474: PPUSH
23475: NOP4
23479: PPUSH
23480: NOP4
23484: PUSH
23485: NOP4
23489: PUSH
23490: EMPTY
23491: EQUAL
23492: OR
23493: IFFALSE 23438
// if not control in _control then
23495: NOP4
23499: PUSH
23500: NOP4
23504: IN
23505: NOT
23506: IFFALSE 23532
// control := _control [ rand ( 1 , _control ) ] ;
23508: NOP4
23512: PUSH
23513: NOP4
23517: PUSH
23518: LD_INT 1
23520: PPUSH
23521: NOP4
23525: PPUSH
23526: NOP4
23530: ARRAY
23531: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23532: NOP4
23536: PPUSH
23537: NOP4
23541: PPUSH
23542: NOP4
23546: NOT
23547: IFFALSE 23606
// repeat weapon := _weapon [ 1 ] ;
23549: NOP4
23553: PUSH
23554: NOP4
23558: PUSH
23559: LD_INT 1
23561: ARRAY
23562: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23563: NOP4
23567: PUSH
23568: NOP4
23572: PPUSH
23573: LD_INT 1
23575: PPUSH
23576: NOP4
23580: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23581: NOP4
23585: PPUSH
23586: NOP4
23590: PPUSH
23591: NOP4
23595: PUSH
23596: NOP4
23600: PUSH
23601: EMPTY
23602: EQUAL
23603: OR
23604: IFFALSE 23549
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23606: NOP4
23610: PPUSH
23611: NOP4
23615: PPUSH
23616: NOP4
23620: PPUSH
23621: NOP4
23625: PPUSH
23626: NOP4
23630: PPUSH
23631: NOP4
23635: IFFALSE 23668
// result := [ chassis , engine , control , weapon ] ;
23637: NOP4
23641: PUSH
23642: NOP4
23646: PUSH
23647: NOP4
23651: PUSH
23652: NOP4
23656: PUSH
23657: NOP4
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: ST_TO_ADDR
// end ;
23668: LD_VAR 0 6
23672: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23673: LD_INT 0
23675: PPUSH
// if not chassis or not engine then
23676: NOP4
23680: NOT
23681: PUSH
23682: NOP4
23686: NOT
23687: OR
23688: IFFALSE 23692
// exit ;
23690: GO 23888
// case engine of engine_solar :
23692: NOP4
23696: PUSH
23697: LD_INT 2
23699: DOUBLE
23700: EQUAL
23701: IFTRUE 23705
23703: GO 23743
23705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23706: NOP4
23710: PUSH
23711: LD_INT 11
23713: PUSH
23714: LD_INT 12
23716: PUSH
23717: LD_INT 13
23719: PUSH
23720: LD_INT 14
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: ST_TO_ADDR
23741: GO 23872
23743: LD_INT 1
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23813
23751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23752: NOP4
23756: PUSH
23757: LD_INT 11
23759: PUSH
23760: LD_INT 12
23762: PUSH
23763: LD_INT 13
23765: PUSH
23766: LD_INT 14
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 4
23780: PUSH
23781: LD_INT 5
23783: PUSH
23784: LD_INT 21
23786: PUSH
23787: LD_INT 23
23789: PUSH
23790: LD_INT 22
23792: PUSH
23793: LD_INT 24
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
23811: GO 23872
23813: LD_INT 3
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23871
23821: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23822: NOP4
23826: PUSH
23827: LD_INT 13
23829: PUSH
23830: LD_INT 14
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 3
23838: PUSH
23839: LD_INT 4
23841: PUSH
23842: LD_INT 5
23844: PUSH
23845: LD_INT 21
23847: PUSH
23848: LD_INT 22
23850: PUSH
23851: LD_INT 23
23853: PUSH
23854: LD_INT 24
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: ST_TO_ADDR
23869: GO 23872
23871: POP
// result := ( chassis in result ) ;
23872: NOP4
23876: PUSH
23877: NOP4
23881: PUSH
23882: NOP4
23886: IN
23887: ST_TO_ADDR
// end ;
23888: LD_VAR 0 3
23892: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23893: LD_INT 0
23895: PPUSH
// if not chassis or not weapon then
23896: NOP4
23900: NOT
23901: PUSH
23902: NOP4
23906: NOT
23907: OR
23908: IFFALSE 23912
// exit ;
23910: GO 24938
// case weapon of us_machine_gun :
23912: NOP4
23916: PUSH
23917: LD_INT 2
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 23955
23925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23926: NOP4
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: LD_INT 4
23942: PUSH
23943: LD_INT 5
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: ST_TO_ADDR
23953: GO 24922
23955: LD_INT 3
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 23993
23963: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23964: NOP4
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: LD_INT 4
23980: PUSH
23981: LD_INT 5
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: ST_TO_ADDR
23991: GO 24922
23993: LD_INT 11
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24001
23999: GO 24031
24001: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24002: NOP4
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: LD_INT 4
24018: PUSH
24019: LD_INT 5
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
24029: GO 24922
24031: LD_INT 4
24033: DOUBLE
24034: EQUAL
24035: IFTRUE 24039
24037: GO 24065
24039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24040: NOP4
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: LD_INT 3
24050: PUSH
24051: LD_INT 4
24053: PUSH
24054: LD_INT 5
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
24063: GO 24922
24065: LD_INT 5
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24099
24073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24074: NOP4
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 4
24087: PUSH
24088: LD_INT 5
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 24922
24099: LD_INT 9
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24133
24107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24108: NOP4
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 4
24121: PUSH
24122: LD_INT 5
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: ST_TO_ADDR
24131: GO 24922
24133: LD_INT 7
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24167
24141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24142: NOP4
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 4
24155: PUSH
24156: LD_INT 5
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: ST_TO_ADDR
24165: GO 24922
24167: LD_INT 12
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24201
24175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24176: NOP4
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: LD_INT 4
24189: PUSH
24190: LD_INT 5
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
24199: GO 24922
24201: LD_INT 13
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24235
24209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24210: NOP4
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: LD_INT 4
24223: PUSH
24224: LD_INT 5
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: ST_TO_ADDR
24233: GO 24922
24235: LD_INT 14
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24261
24243: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24244: NOP4
24248: PUSH
24249: LD_INT 4
24251: PUSH
24252: LD_INT 5
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: ST_TO_ADDR
24259: GO 24922
24261: LD_INT 6
24263: DOUBLE
24264: EQUAL
24265: IFTRUE 24269
24267: GO 24287
24269: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24270: NOP4
24274: PUSH
24275: LD_INT 4
24277: PUSH
24278: LD_INT 5
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 24922
24287: LD_INT 10
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24313
24295: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24296: NOP4
24300: PUSH
24301: LD_INT 4
24303: PUSH
24304: LD_INT 5
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: ST_TO_ADDR
24311: GO 24922
24313: LD_INT 22
24315: DOUBLE
24316: EQUAL
24317: IFTRUE 24321
24319: GO 24347
24321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24322: NOP4
24326: PUSH
24327: LD_INT 11
24329: PUSH
24330: LD_INT 12
24332: PUSH
24333: LD_INT 13
24335: PUSH
24336: LD_INT 14
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
24345: GO 24922
24347: LD_INT 23
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24381
24355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24356: NOP4
24360: PUSH
24361: LD_INT 11
24363: PUSH
24364: LD_INT 12
24366: PUSH
24367: LD_INT 13
24369: PUSH
24370: LD_INT 14
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: ST_TO_ADDR
24379: GO 24922
24381: LD_INT 24
24383: DOUBLE
24384: EQUAL
24385: IFTRUE 24389
24387: GO 24415
24389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24390: NOP4
24394: PUSH
24395: LD_INT 11
24397: PUSH
24398: LD_INT 12
24400: PUSH
24401: LD_INT 13
24403: PUSH
24404: LD_INT 14
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
24413: GO 24922
24415: LD_INT 30
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24449
24423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24424: NOP4
24428: PUSH
24429: LD_INT 11
24431: PUSH
24432: LD_INT 12
24434: PUSH
24435: LD_INT 13
24437: PUSH
24438: LD_INT 14
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
24447: GO 24922
24449: LD_INT 25
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24475
24457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24458: NOP4
24462: PUSH
24463: LD_INT 13
24465: PUSH
24466: LD_INT 14
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 24922
24475: LD_INT 27
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24501
24483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24484: NOP4
24488: PUSH
24489: LD_INT 13
24491: PUSH
24492: LD_INT 14
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: ST_TO_ADDR
24499: GO 24922
24501: LD_INT 28
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24527
24509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24510: NOP4
24514: PUSH
24515: LD_INT 13
24517: PUSH
24518: LD_INT 14
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: ST_TO_ADDR
24525: GO 24922
24527: LD_INT 29
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24553
24535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24536: NOP4
24540: PUSH
24541: LD_INT 13
24543: PUSH
24544: LD_INT 14
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: ST_TO_ADDR
24551: GO 24922
24553: LD_INT 31
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24579
24561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24562: NOP4
24566: PUSH
24567: LD_INT 13
24569: PUSH
24570: LD_INT 14
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 24922
24579: LD_INT 26
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24605
24587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24588: NOP4
24592: PUSH
24593: LD_INT 13
24595: PUSH
24596: LD_INT 14
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: ST_TO_ADDR
24603: GO 24922
24605: LD_INT 42
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24639
24613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24614: NOP4
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 22
24624: PUSH
24625: LD_INT 23
24627: PUSH
24628: LD_INT 24
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 24922
24639: LD_INT 43
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24673
24647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24648: NOP4
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 24
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: ST_TO_ADDR
24671: GO 24922
24673: LD_INT 44
24675: DOUBLE
24676: EQUAL
24677: IFTRUE 24681
24679: GO 24707
24681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24682: NOP4
24686: PUSH
24687: LD_INT 21
24689: PUSH
24690: LD_INT 22
24692: PUSH
24693: LD_INT 23
24695: PUSH
24696: LD_INT 24
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: ST_TO_ADDR
24705: GO 24922
24707: LD_INT 45
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24715
24713: GO 24741
24715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24716: NOP4
24720: PUSH
24721: LD_INT 21
24723: PUSH
24724: LD_INT 22
24726: PUSH
24727: LD_INT 23
24729: PUSH
24730: LD_INT 24
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 24922
24741: LD_INT 49
24743: DOUBLE
24744: EQUAL
24745: IFTRUE 24749
24747: GO 24775
24749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24750: NOP4
24754: PUSH
24755: LD_INT 21
24757: PUSH
24758: LD_INT 22
24760: PUSH
24761: LD_INT 23
24763: PUSH
24764: LD_INT 24
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: ST_TO_ADDR
24773: GO 24922
24775: LD_INT 51
24777: DOUBLE
24778: EQUAL
24779: IFTRUE 24783
24781: GO 24809
24783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24784: NOP4
24788: PUSH
24789: LD_INT 21
24791: PUSH
24792: LD_INT 22
24794: PUSH
24795: LD_INT 23
24797: PUSH
24798: LD_INT 24
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: ST_TO_ADDR
24807: GO 24922
24809: LD_INT 52
24811: DOUBLE
24812: EQUAL
24813: IFTRUE 24817
24815: GO 24843
24817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24818: NOP4
24822: PUSH
24823: LD_INT 21
24825: PUSH
24826: LD_INT 22
24828: PUSH
24829: LD_INT 23
24831: PUSH
24832: LD_INT 24
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: ST_TO_ADDR
24841: GO 24922
24843: LD_INT 53
24845: DOUBLE
24846: EQUAL
24847: IFTRUE 24851
24849: GO 24869
24851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24852: NOP4
24856: PUSH
24857: LD_INT 23
24859: PUSH
24860: LD_INT 24
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: ST_TO_ADDR
24867: GO 24922
24869: LD_INT 46
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24895
24877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24878: NOP4
24882: PUSH
24883: LD_INT 23
24885: PUSH
24886: LD_INT 24
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: ST_TO_ADDR
24893: GO 24922
24895: LD_INT 47
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24921
24903: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24904: NOP4
24908: PUSH
24909: LD_INT 23
24911: PUSH
24912: LD_INT 24
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: ST_TO_ADDR
24919: GO 24922
24921: POP
// result := ( chassis in result ) ;
24922: NOP4
24926: PUSH
24927: NOP4
24931: PUSH
24932: NOP4
24936: IN
24937: ST_TO_ADDR
// end ;
24938: LD_VAR 0 3
24942: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
// result := array ;
24952: NOP4
24956: PUSH
24957: NOP4
24961: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24962: NOP4
24966: NOT
24967: PUSH
24968: NOP4
24972: NOT
24973: OR
24974: PUSH
24975: NOP4
24979: NOT
24980: OR
24981: PUSH
24982: NOP4
24986: PUSH
24987: NOP4
24991: GREATER
24992: OR
24993: PUSH
24994: NOP4
24998: PUSH
24999: NOP4
25003: GREATER
25004: OR
25005: IFFALSE 25009
// exit ;
25007: GO 25305
// if direction then
25009: NOP4
25013: IFFALSE 25077
// begin d := 1 ;
25015: NOP4
25019: PUSH
25020: LD_INT 1
25022: ST_TO_ADDR
// if i_from > i_to then
25023: NOP4
25027: PUSH
25028: NOP4
25032: GREATER
25033: IFFALSE 25059
// length := ( array - i_from ) + i_to else
25035: NOP4
25039: PUSH
25040: NOP4
25044: PUSH
25045: NOP4
25049: MINUS
25050: PUSH
25051: NOP4
25055: PLUS
25056: ST_TO_ADDR
25057: GO 25075
// length := i_to - i_from ;
25059: NOP4
25063: PUSH
25064: NOP4
25068: PUSH
25069: NOP4
25073: MINUS
25074: ST_TO_ADDR
// end else
25075: GO 25138
// begin d := - 1 ;
25077: NOP4
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: ST_TO_ADDR
// if i_from > i_to then
25086: NOP4
25090: PUSH
25091: NOP4
25095: GREATER
25096: IFFALSE 25116
// length := i_from - i_to else
25098: NOP4
25102: PUSH
25103: NOP4
25107: PUSH
25108: NOP4
25112: MINUS
25113: ST_TO_ADDR
25114: GO 25138
// length := ( array - i_to ) + i_from ;
25116: NOP4
25120: PUSH
25121: NOP4
25125: PUSH
25126: NOP4
25130: MINUS
25131: PUSH
25132: NOP4
25136: PLUS
25137: ST_TO_ADDR
// end ; if not length then
25138: NOP4
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25305
// tmp := array ;
25147: NOP4
25151: PUSH
25152: NOP4
25156: ST_TO_ADDR
// for i = 1 to length do
25157: NOP4
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: NOP4
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25293
// begin for j = 1 to array do
25175: NOP4
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: NOP4
25189: PUSH
25190: FOR_TO
25191: IFFALSE 25279
// begin k := j + d ;
25193: NOP4
25197: PUSH
25198: NOP4
25202: PUSH
25203: NOP4
25207: PLUS
25208: ST_TO_ADDR
// if k > array then
25209: NOP4
25213: PUSH
25214: NOP4
25218: GREATER
25219: IFFALSE 25229
// k := 1 ;
25221: NOP4
25225: PUSH
25226: LD_INT 1
25228: ST_TO_ADDR
// if not k then
25229: NOP4
25233: NOT
25234: IFFALSE 25246
// k := array ;
25236: NOP4
25240: PUSH
25241: NOP4
25245: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25246: NOP4
25250: PUSH
25251: NOP4
25255: PPUSH
25256: NOP4
25260: PPUSH
25261: NOP4
25265: PUSH
25266: NOP4
25270: ARRAY
25271: PPUSH
25272: NOP4
25276: ST_TO_ADDR
// end ;
25277: GO 25190
25279: POP
25280: POP
// array := tmp ;
25281: NOP4
25285: PUSH
25286: NOP4
25290: ST_TO_ADDR
// end ;
25291: GO 25172
25293: POP
25294: POP
// result := array ;
25295: NOP4
25299: PUSH
25300: NOP4
25304: ST_TO_ADDR
// end ;
25305: LD_VAR 0 5
25309: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25310: LD_INT 0
25312: PPUSH
25313: PPUSH
// result := 0 ;
25314: NOP4
25318: PUSH
25319: LD_INT 0
25321: ST_TO_ADDR
// if not array or not value in array then
25322: NOP4
25326: NOT
25327: PUSH
25328: NOP4
25332: PUSH
25333: NOP4
25337: IN
25338: NOT
25339: OR
25340: IFFALSE 25344
// exit ;
25342: GO 25398
// for i = 1 to array do
25344: NOP4
25348: PUSH
25349: DOUBLE
25350: LD_INT 1
25352: DEC
25353: ST_TO_ADDR
25354: NOP4
25358: PUSH
25359: FOR_TO
25360: IFFALSE 25396
// if value = array [ i ] then
25362: NOP4
25366: PUSH
25367: NOP4
25371: PUSH
25372: NOP4
25376: ARRAY
25377: EQUAL
25378: IFFALSE 25394
// begin result := i ;
25380: NOP4
25384: PUSH
25385: NOP4
25389: ST_TO_ADDR
// exit ;
25390: POP
25391: POP
25392: GO 25398
// end ;
25394: GO 25359
25396: POP
25397: POP
// end ;
25398: LD_VAR 0 3
25402: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25403: LD_INT 0
25405: PPUSH
// vc_chassis := chassis ;
25406: LD_ADDR_OWVAR 37
25410: PUSH
25411: NOP4
25415: ST_TO_ADDR
// vc_engine := engine ;
25416: LD_ADDR_OWVAR 39
25420: PUSH
25421: NOP4
25425: ST_TO_ADDR
// vc_control := control ;
25426: LD_ADDR_OWVAR 38
25430: PUSH
25431: NOP4
25435: ST_TO_ADDR
// vc_weapon := weapon ;
25436: LD_ADDR_OWVAR 40
25440: PUSH
25441: NOP4
25445: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25446: LD_ADDR_OWVAR 41
25450: PUSH
25451: NOP4
25455: ST_TO_ADDR
// end ;
25456: LD_VAR 0 6
25460: RET
// export function WantPlant ( unit ) ; var task ; begin
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
// result := false ;
25465: NOP4
25469: PUSH
25470: LD_INT 0
25472: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25473: NOP4
25477: PUSH
25478: NOP4
25482: PPUSH
25483: NOP4
25487: ST_TO_ADDR
// if task then
25488: NOP4
25492: IFFALSE 25520
// if task [ 1 ] [ 1 ] = p then
25494: NOP4
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: PUSH
25507: LD_STRING p
25509: EQUAL
25510: IFFALSE 25520
// result := true ;
25512: NOP4
25516: PUSH
25517: LD_INT 1
25519: ST_TO_ADDR
// end ;
25520: LD_VAR 0 2
25524: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25525: LD_INT 0
25527: PPUSH
25528: PPUSH
25529: PPUSH
25530: PPUSH
// if pos < 1 then
25531: NOP4
25535: PUSH
25536: LD_INT 1
25538: LESS
25539: IFFALSE 25543
// exit ;
25541: GO 25846
// if pos = 1 then
25543: NOP4
25547: PUSH
25548: LD_INT 1
25550: EQUAL
25551: IFFALSE 25584
// result := Replace ( arr , pos [ 1 ] , value ) else
25553: NOP4
25557: PUSH
25558: NOP4
25562: PPUSH
25563: NOP4
25567: PUSH
25568: LD_INT 1
25570: ARRAY
25571: PPUSH
25572: NOP4
25576: PPUSH
25577: NOP4
25581: ST_TO_ADDR
25582: GO 25846
// begin tmp := arr ;
25584: NOP4
25588: PUSH
25589: NOP4
25593: ST_TO_ADDR
// s_arr := [ tmp ] ;
25594: NOP4
25598: PUSH
25599: NOP4
25603: PUSH
25604: EMPTY
25605: LIST
25606: ST_TO_ADDR
// for i = 1 to pos - 1 do
25607: NOP4
25611: PUSH
25612: DOUBLE
25613: LD_INT 1
25615: DEC
25616: ST_TO_ADDR
25617: NOP4
25621: PUSH
25622: LD_INT 1
25624: MINUS
25625: PUSH
25626: FOR_TO
25627: IFFALSE 25672
// begin tmp := tmp [ pos [ i ] ] ;
25629: NOP4
25633: PUSH
25634: NOP4
25638: PUSH
25639: NOP4
25643: PUSH
25644: NOP4
25648: ARRAY
25649: ARRAY
25650: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25651: NOP4
25655: PUSH
25656: NOP4
25660: PUSH
25661: NOP4
25665: PUSH
25666: EMPTY
25667: LIST
25668: ADD
25669: ST_TO_ADDR
// end ;
25670: GO 25626
25672: POP
25673: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25674: NOP4
25678: PUSH
25679: NOP4
25683: PPUSH
25684: NOP4
25688: PUSH
25689: NOP4
25693: ARRAY
25694: PPUSH
25695: NOP4
25699: PPUSH
25700: NOP4
25704: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25705: NOP4
25709: PUSH
25710: NOP4
25714: PPUSH
25715: NOP4
25719: PPUSH
25720: NOP4
25724: PPUSH
25725: NOP4
25729: ST_TO_ADDR
// for i = s_arr downto 2 do
25730: NOP4
25734: PUSH
25735: DOUBLE
25736: NOP4
25740: INC
25741: ST_TO_ADDR
25742: LD_INT 2
25744: PUSH
25745: FOR_DOWNTO
25746: IFFALSE 25830
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25748: NOP4
25752: PUSH
25753: NOP4
25757: PUSH
25758: NOP4
25762: PUSH
25763: LD_INT 1
25765: MINUS
25766: ARRAY
25767: PPUSH
25768: NOP4
25772: PUSH
25773: NOP4
25777: PUSH
25778: LD_INT 1
25780: MINUS
25781: ARRAY
25782: PPUSH
25783: NOP4
25787: PUSH
25788: NOP4
25792: ARRAY
25793: PPUSH
25794: NOP4
25798: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25799: NOP4
25803: PUSH
25804: NOP4
25808: PPUSH
25809: NOP4
25813: PUSH
25814: LD_INT 1
25816: MINUS
25817: PPUSH
25818: NOP4
25822: PPUSH
25823: NOP4
25827: ST_TO_ADDR
// end ;
25828: GO 25745
25830: POP
25831: POP
// result := s_arr [ 1 ] ;
25832: NOP4
25836: PUSH
25837: NOP4
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: ST_TO_ADDR
// end ; end ;
25846: LD_VAR 0 4
25850: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25851: LD_INT 0
25853: PPUSH
25854: PPUSH
// if not list then
25855: NOP4
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 25955
// i := list [ pos1 ] ;
25864: NOP4
25868: PUSH
25869: NOP4
25873: PUSH
25874: NOP4
25878: ARRAY
25879: ST_TO_ADDR
// if not i then
25880: NOP4
25884: NOT
25885: IFFALSE 25889
// exit ;
25887: GO 25955
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25889: NOP4
25893: PUSH
25894: NOP4
25898: PPUSH
25899: NOP4
25903: PPUSH
25904: NOP4
25908: PUSH
25909: NOP4
25913: ARRAY
25914: PPUSH
25915: NOP4
25919: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25920: NOP4
25924: PUSH
25925: NOP4
25929: PPUSH
25930: NOP4
25934: PPUSH
25935: NOP4
25939: PPUSH
25940: NOP4
25944: ST_TO_ADDR
// result := list ;
25945: NOP4
25949: PUSH
25950: NOP4
25954: ST_TO_ADDR
// end ;
25955: LD_VAR 0 4
25959: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25960: LD_INT 0
25962: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25963: NOP4
25967: PUSH
25968: NOP4
25972: PPUSH
25973: NOP4
25977: PPUSH
25978: NOP4
25982: PPUSH
25983: NOP4
25987: PPUSH
25988: NOP4
25992: PPUSH
25993: NOP4
25997: PPUSH
25998: NOP4
26002: PPUSH
26003: NOP4
26007: ST_TO_ADDR
// end ;
26008: LD_VAR 0 5
26012: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
// if not list then
26019: NOP4
26023: NOT
26024: IFFALSE 26028
// exit ;
26026: GO 26416
// result := [ ] ;
26028: NOP4
26032: PUSH
26033: EMPTY
26034: ST_TO_ADDR
// for i in list do
26035: NOP4
26039: PUSH
26040: NOP4
26044: PUSH
26045: FOR_IN
26046: IFFALSE 26248
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26048: NOP4
26052: PUSH
26053: NOP4
26057: PPUSH
26058: NOP4
26062: PPUSH
26063: NOP4
26067: PPUSH
26068: NOP4
26072: ST_TO_ADDR
// if not result then
26073: NOP4
26077: NOT
26078: IFFALSE 26104
// result := [ [ i , tmp ] ] else
26080: NOP4
26084: PUSH
26085: NOP4
26089: PUSH
26090: NOP4
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: ST_TO_ADDR
26102: GO 26246
// begin if result [ result ] [ 2 ] < tmp then
26104: NOP4
26108: PUSH
26109: NOP4
26113: ARRAY
26114: PUSH
26115: LD_INT 2
26117: ARRAY
26118: PUSH
26119: NOP4
26123: LESS
26124: IFFALSE 26166
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26126: NOP4
26130: PUSH
26131: NOP4
26135: PPUSH
26136: NOP4
26140: PUSH
26141: LD_INT 1
26143: PLUS
26144: PPUSH
26145: NOP4
26149: PUSH
26150: NOP4
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PPUSH
26159: NOP4
26163: ST_TO_ADDR
26164: GO 26246
// for j = 1 to result do
26166: NOP4
26170: PUSH
26171: DOUBLE
26172: LD_INT 1
26174: DEC
26175: ST_TO_ADDR
26176: NOP4
26180: PUSH
26181: FOR_TO
26182: IFFALSE 26244
// begin if tmp < result [ j ] [ 2 ] then
26184: NOP4
26188: PUSH
26189: NOP4
26193: PUSH
26194: NOP4
26198: ARRAY
26199: PUSH
26200: LD_INT 2
26202: ARRAY
26203: LESS
26204: IFFALSE 26242
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26206: NOP4
26210: PUSH
26211: NOP4
26215: PPUSH
26216: NOP4
26220: PPUSH
26221: NOP4
26225: PUSH
26226: NOP4
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: NOP4
26239: ST_TO_ADDR
// break ;
26240: GO 26244
// end ; end ;
26242: GO 26181
26244: POP
26245: POP
// end ; end ;
26246: GO 26045
26248: POP
26249: POP
// if result and not asc then
26250: NOP4
26254: PUSH
26255: NOP4
26259: NOT
26260: AND
26261: IFFALSE 26336
// begin tmp := result ;
26263: NOP4
26267: PUSH
26268: NOP4
26272: ST_TO_ADDR
// for i = tmp downto 1 do
26273: NOP4
26277: PUSH
26278: DOUBLE
26279: NOP4
26283: INC
26284: ST_TO_ADDR
26285: LD_INT 1
26287: PUSH
26288: FOR_DOWNTO
26289: IFFALSE 26334
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26291: NOP4
26295: PUSH
26296: NOP4
26300: PPUSH
26301: NOP4
26305: PUSH
26306: NOP4
26310: MINUS
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: NOP4
26320: PUSH
26321: NOP4
26325: ARRAY
26326: PPUSH
26327: NOP4
26331: ST_TO_ADDR
26332: GO 26288
26334: POP
26335: POP
// end ; tmp := [ ] ;
26336: NOP4
26340: PUSH
26341: EMPTY
26342: ST_TO_ADDR
// if mode then
26343: NOP4
26347: IFFALSE 26416
// begin for i = 1 to result do
26349: NOP4
26353: PUSH
26354: DOUBLE
26355: LD_INT 1
26357: DEC
26358: ST_TO_ADDR
26359: NOP4
26363: PUSH
26364: FOR_TO
26365: IFFALSE 26404
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26367: NOP4
26371: PUSH
26372: NOP4
26376: PPUSH
26377: NOP4
26381: PPUSH
26382: NOP4
26386: PUSH
26387: NOP4
26391: ARRAY
26392: PUSH
26393: LD_INT 1
26395: ARRAY
26396: PPUSH
26397: NOP4
26401: ST_TO_ADDR
26402: GO 26364
26404: POP
26405: POP
// result := tmp ;
26406: NOP4
26410: PUSH
26411: NOP4
26415: ST_TO_ADDR
// end ; end ;
26416: LD_VAR 0 6
26420: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26421: LD_INT 0
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26429: NOP4
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: ST_TO_ADDR
// if not x or not y then
26451: NOP4
26455: NOT
26456: PUSH
26457: NOP4
26461: NOT
26462: OR
26463: IFFALSE 26467
// exit ;
26465: GO 28113
// if not range then
26467: NOP4
26471: NOT
26472: IFFALSE 26482
// range := 10 ;
26474: NOP4
26478: PUSH
26479: LD_INT 10
26481: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26482: NOP4
26486: PUSH
26487: LD_INT 81
26489: PUSH
26490: NOP4
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 92
26501: PUSH
26502: NOP4
26506: PUSH
26507: NOP4
26511: PUSH
26512: NOP4
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 21
26528: PUSH
26529: LD_INT 3
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: PPUSH
26545: NOP4
26549: ST_TO_ADDR
// if not tmp then
26550: NOP4
26554: NOT
26555: IFFALSE 26559
// exit ;
26557: GO 28113
// for i in tmp do
26559: NOP4
26563: PUSH
26564: NOP4
26568: PUSH
26569: FOR_IN
26570: IFFALSE 28088
// begin points := [ 0 , 0 , 0 ] ;
26572: NOP4
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
// bpoints := 1 ;
26591: NOP4
26595: PUSH
26596: LD_INT 1
26598: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26599: NOP4
26603: PPUSH
26604: NOP4
26608: PUSH
26609: LD_INT 1
26611: DOUBLE
26612: EQUAL
26613: IFTRUE 26617
26615: GO 27195
26617: POP
// begin if GetClass ( i ) = 1 then
26618: NOP4
26622: PPUSH
26623: NOP4
26627: PUSH
26628: LD_INT 1
26630: EQUAL
26631: IFFALSE 26652
// points := [ 10 , 5 , 3 ] ;
26633: NOP4
26637: PUSH
26638: LD_INT 10
26640: PUSH
26641: LD_INT 5
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26652: NOP4
26656: PPUSH
26657: NOP4
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 4
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: IN
26676: IFFALSE 26697
// points := [ 3 , 2 , 1 ] ;
26678: NOP4
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: LIST
26696: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26697: NOP4
26701: PPUSH
26702: NOP4
26706: PUSH
26707: LD_INT 5
26709: EQUAL
26710: IFFALSE 26731
// points := [ 130 , 5 , 2 ] ;
26712: NOP4
26716: PUSH
26717: LD_INT 130
26719: PUSH
26720: LD_INT 5
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26731: NOP4
26735: PPUSH
26736: NOP4
26740: PUSH
26741: LD_INT 8
26743: EQUAL
26744: IFFALSE 26765
// points := [ 35 , 35 , 30 ] ;
26746: NOP4
26750: PUSH
26751: LD_INT 35
26753: PUSH
26754: LD_INT 35
26756: PUSH
26757: LD_INT 30
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26765: NOP4
26769: PPUSH
26770: NOP4
26774: PUSH
26775: LD_INT 9
26777: EQUAL
26778: IFFALSE 26799
// points := [ 20 , 55 , 40 ] ;
26780: NOP4
26784: PUSH
26785: LD_INT 20
26787: PUSH
26788: LD_INT 55
26790: PUSH
26791: LD_INT 40
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26799: NOP4
26803: PPUSH
26804: NOP4
26808: PUSH
26809: LD_INT 12
26811: PUSH
26812: LD_INT 16
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: IN
26819: IFFALSE 26840
// points := [ 5 , 3 , 2 ] ;
26821: NOP4
26825: PUSH
26826: LD_INT 5
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26840: NOP4
26844: PPUSH
26845: NOP4
26849: PUSH
26850: LD_INT 17
26852: EQUAL
26853: IFFALSE 26874
// points := [ 100 , 50 , 75 ] ;
26855: NOP4
26859: PUSH
26860: LD_INT 100
26862: PUSH
26863: LD_INT 50
26865: PUSH
26866: LD_INT 75
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26874: NOP4
26878: PPUSH
26879: NOP4
26883: PUSH
26884: LD_INT 15
26886: EQUAL
26887: IFFALSE 26908
// points := [ 10 , 5 , 3 ] ;
26889: NOP4
26893: PUSH
26894: LD_INT 10
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26908: NOP4
26912: PPUSH
26913: NOP4
26917: PUSH
26918: LD_INT 14
26920: EQUAL
26921: IFFALSE 26942
// points := [ 10 , 0 , 0 ] ;
26923: NOP4
26927: PUSH
26928: LD_INT 10
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26942: NOP4
26946: PPUSH
26947: NOP4
26951: PUSH
26952: LD_INT 11
26954: EQUAL
26955: IFFALSE 26976
// points := [ 30 , 10 , 5 ] ;
26957: NOP4
26961: PUSH
26962: LD_INT 30
26964: PUSH
26965: LD_INT 10
26967: PUSH
26968: LD_INT 5
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26976: NOP4
26980: PPUSH
26981: LD_INT 5
26983: PPUSH
26984: NOP4
26988: PUSH
26989: LD_INT 2
26991: EQUAL
26992: IFFALSE 27009
// bpoints := bpoints * 1.8 ;
26994: NOP4
26998: PUSH
26999: NOP4
27003: PUSH
27004: LD_REAL  1.80000000000000E+0000
27007: MUL
27008: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27009: NOP4
27013: PPUSH
27014: NOP4
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: IN
27037: PUSH
27038: NOP4
27042: PPUSH
27043: LD_INT 51
27045: PPUSH
27046: NOP4
27050: PUSH
27051: LD_INT 2
27053: EQUAL
27054: AND
27055: IFFALSE 27072
// bpoints := bpoints * 1.2 ;
27057: NOP4
27061: PUSH
27062: NOP4
27066: PUSH
27067: LD_REAL  1.20000000000000E+0000
27070: MUL
27071: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27072: NOP4
27076: PPUSH
27077: NOP4
27081: PUSH
27082: LD_INT 5
27084: PUSH
27085: LD_INT 7
27087: PUSH
27088: LD_INT 9
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: IN
27096: PUSH
27097: NOP4
27101: PPUSH
27102: LD_INT 52
27104: PPUSH
27105: NOP4
27109: PUSH
27110: LD_INT 2
27112: EQUAL
27113: AND
27114: IFFALSE 27131
// bpoints := bpoints * 1.5 ;
27116: NOP4
27120: PUSH
27121: NOP4
27125: PUSH
27126: LD_REAL  1.50000000000000E+0000
27129: MUL
27130: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27131: NOP4
27135: PPUSH
27136: LD_INT 66
27138: PPUSH
27139: NOP4
27143: PUSH
27144: LD_INT 2
27146: EQUAL
27147: IFFALSE 27164
// bpoints := bpoints * 1.1 ;
27149: NOP4
27153: PUSH
27154: NOP4
27158: PUSH
27159: LD_REAL  1.10000000000000E+0000
27162: MUL
27163: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27164: NOP4
27168: PUSH
27169: NOP4
27173: PUSH
27174: NOP4
27178: PPUSH
27179: LD_INT 1
27181: PPUSH
27182: NOP4
27186: PUSH
27187: LD_REAL  1.15000000000000E+0000
27190: MUL
27191: MUL
27192: ST_TO_ADDR
// end ; unit_vehicle :
27193: GO 28017
27195: LD_INT 2
27197: DOUBLE
27198: EQUAL
27199: IFTRUE 27203
27201: GO 28005
27203: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27204: NOP4
27208: PPUSH
27209: NOP4
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 42
27219: PUSH
27220: LD_INT 24
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: LIST
27227: IN
27228: IFFALSE 27249
// points := [ 25 , 5 , 3 ] ;
27230: NOP4
27234: PUSH
27235: LD_INT 25
27237: PUSH
27238: LD_INT 5
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27249: NOP4
27253: PPUSH
27254: NOP4
27258: PUSH
27259: LD_INT 4
27261: PUSH
27262: LD_INT 43
27264: PUSH
27265: LD_INT 25
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: IN
27273: IFFALSE 27294
// points := [ 40 , 15 , 5 ] ;
27275: NOP4
27279: PUSH
27280: LD_INT 40
27282: PUSH
27283: LD_INT 15
27285: PUSH
27286: LD_INT 5
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27294: NOP4
27298: PPUSH
27299: NOP4
27303: PUSH
27304: LD_INT 3
27306: PUSH
27307: LD_INT 23
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: IN
27314: IFFALSE 27335
// points := [ 7 , 25 , 8 ] ;
27316: NOP4
27320: PUSH
27321: LD_INT 7
27323: PUSH
27324: LD_INT 25
27326: PUSH
27327: LD_INT 8
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27335: NOP4
27339: PPUSH
27340: NOP4
27344: PUSH
27345: LD_INT 5
27347: PUSH
27348: LD_INT 27
27350: PUSH
27351: LD_INT 44
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: IN
27359: IFFALSE 27380
// points := [ 14 , 50 , 16 ] ;
27361: NOP4
27365: PUSH
27366: LD_INT 14
27368: PUSH
27369: LD_INT 50
27371: PUSH
27372: LD_INT 16
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27380: NOP4
27384: PPUSH
27385: NOP4
27389: PUSH
27390: LD_INT 6
27392: PUSH
27393: LD_INT 46
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: IN
27400: IFFALSE 27421
// points := [ 32 , 120 , 70 ] ;
27402: NOP4
27406: PUSH
27407: LD_INT 32
27409: PUSH
27410: LD_INT 120
27412: PUSH
27413: LD_INT 70
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27421: NOP4
27425: PPUSH
27426: NOP4
27430: PUSH
27431: LD_INT 7
27433: PUSH
27434: LD_INT 28
27436: PUSH
27437: LD_INT 45
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: IN
27445: IFFALSE 27466
// points := [ 35 , 20 , 45 ] ;
27447: NOP4
27451: PUSH
27452: LD_INT 35
27454: PUSH
27455: LD_INT 20
27457: PUSH
27458: LD_INT 45
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: LIST
27465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27466: NOP4
27470: PPUSH
27471: NOP4
27475: PUSH
27476: LD_INT 47
27478: PUSH
27479: EMPTY
27480: LIST
27481: IN
27482: IFFALSE 27503
// points := [ 67 , 45 , 75 ] ;
27484: NOP4
27488: PUSH
27489: LD_INT 67
27491: PUSH
27492: LD_INT 45
27494: PUSH
27495: LD_INT 75
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27503: NOP4
27507: PPUSH
27508: NOP4
27512: PUSH
27513: LD_INT 26
27515: PUSH
27516: EMPTY
27517: LIST
27518: IN
27519: IFFALSE 27540
// points := [ 120 , 30 , 80 ] ;
27521: NOP4
27525: PUSH
27526: LD_INT 120
27528: PUSH
27529: LD_INT 30
27531: PUSH
27532: LD_INT 80
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27540: NOP4
27544: PPUSH
27545: NOP4
27549: PUSH
27550: LD_INT 22
27552: PUSH
27553: EMPTY
27554: LIST
27555: IN
27556: IFFALSE 27577
// points := [ 40 , 1 , 1 ] ;
27558: NOP4
27562: PUSH
27563: LD_INT 40
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27577: NOP4
27581: PPUSH
27582: NOP4
27586: PUSH
27587: LD_INT 29
27589: PUSH
27590: EMPTY
27591: LIST
27592: IN
27593: IFFALSE 27614
// points := [ 70 , 200 , 400 ] ;
27595: NOP4
27599: PUSH
27600: LD_INT 70
27602: PUSH
27603: LD_INT 200
27605: PUSH
27606: LD_INT 400
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27614: NOP4
27618: PPUSH
27619: NOP4
27623: PUSH
27624: LD_INT 14
27626: PUSH
27627: LD_INT 53
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: IN
27634: IFFALSE 27655
// points := [ 40 , 10 , 20 ] ;
27636: NOP4
27640: PUSH
27641: LD_INT 40
27643: PUSH
27644: LD_INT 10
27646: PUSH
27647: LD_INT 20
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27655: NOP4
27659: PPUSH
27660: NOP4
27664: PUSH
27665: LD_INT 9
27667: PUSH
27668: EMPTY
27669: LIST
27670: IN
27671: IFFALSE 27692
// points := [ 5 , 70 , 20 ] ;
27673: NOP4
27677: PUSH
27678: LD_INT 5
27680: PUSH
27681: LD_INT 70
27683: PUSH
27684: LD_INT 20
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27692: NOP4
27696: PPUSH
27697: NOP4
27701: PUSH
27702: LD_INT 10
27704: PUSH
27705: EMPTY
27706: LIST
27707: IN
27708: IFFALSE 27729
// points := [ 35 , 110 , 70 ] ;
27710: NOP4
27714: PUSH
27715: LD_INT 35
27717: PUSH
27718: LD_INT 110
27720: PUSH
27721: LD_INT 70
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27729: NOP4
27733: PPUSH
27734: NOP4
27738: PUSH
27739: LD_INT 25
27741: EQUAL
27742: IFFALSE 27763
// points := [ 80 , 65 , 100 ] ;
27744: NOP4
27748: PUSH
27749: LD_INT 80
27751: PUSH
27752: LD_INT 65
27754: PUSH
27755: LD_INT 100
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27763: NOP4
27767: PPUSH
27768: NOP4
27772: PUSH
27773: LD_INT 1
27775: EQUAL
27776: IFFALSE 27811
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27778: NOP4
27782: PUSH
27783: NOP4
27787: PUSH
27788: NOP4
27792: PPUSH
27793: NOP4
27797: PPUSH
27798: LD_INT 3
27800: PPUSH
27801: NOP4
27805: PUSH
27806: LD_INT 4
27808: MUL
27809: MUL
27810: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27811: NOP4
27815: PPUSH
27816: NOP4
27820: PUSH
27821: LD_INT 2
27823: EQUAL
27824: IFFALSE 27875
// begin j := IsControledBy ( i ) ;
27826: NOP4
27830: PUSH
27831: NOP4
27835: PPUSH
27836: NOP4
27840: ST_TO_ADDR
// if j then
27841: NOP4
27845: IFFALSE 27875
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27847: NOP4
27851: PUSH
27852: NOP4
27856: PUSH
27857: NOP4
27861: PPUSH
27862: LD_INT 3
27864: PPUSH
27865: NOP4
27869: PUSH
27870: LD_INT 3
27872: MUL
27873: MUL
27874: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27875: NOP4
27879: PPUSH
27880: NOP4
27884: PUSH
27885: LD_INT 5
27887: PUSH
27888: LD_INT 6
27890: PUSH
27891: LD_INT 46
27893: PUSH
27894: LD_INT 44
27896: PUSH
27897: LD_INT 47
27899: PUSH
27900: LD_INT 45
27902: PUSH
27903: LD_INT 28
27905: PUSH
27906: LD_INT 7
27908: PUSH
27909: LD_INT 27
27911: PUSH
27912: LD_INT 29
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: IN
27927: PUSH
27928: NOP4
27932: PPUSH
27933: LD_INT 52
27935: PPUSH
27936: NOP4
27940: PUSH
27941: LD_INT 2
27943: EQUAL
27944: AND
27945: IFFALSE 27962
// bpoints := bpoints * 1.2 ;
27947: NOP4
27951: PUSH
27952: NOP4
27956: PUSH
27957: LD_REAL  1.20000000000000E+0000
27960: MUL
27961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27962: NOP4
27966: PPUSH
27967: NOP4
27971: PUSH
27972: LD_INT 6
27974: PUSH
27975: LD_INT 46
27977: PUSH
27978: LD_INT 47
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: IN
27986: IFFALSE 28003
// bpoints := bpoints * 1.2 ;
27988: NOP4
27992: PUSH
27993: NOP4
27997: PUSH
27998: LD_REAL  1.20000000000000E+0000
28001: MUL
28002: ST_TO_ADDR
// end ; unit_building :
28003: GO 28017
28005: LD_INT 3
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28016
28013: POP
// ; end ;
28014: GO 28017
28016: POP
// for j = 1 to 3 do
28017: NOP4
28021: PUSH
28022: DOUBLE
28023: LD_INT 1
28025: DEC
28026: ST_TO_ADDR
28027: LD_INT 3
28029: PUSH
28030: FOR_TO
28031: IFFALSE 28084
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28033: NOP4
28037: PUSH
28038: NOP4
28042: PPUSH
28043: NOP4
28047: PPUSH
28048: NOP4
28052: PUSH
28053: NOP4
28057: ARRAY
28058: PUSH
28059: NOP4
28063: PUSH
28064: NOP4
28068: ARRAY
28069: PUSH
28070: NOP4
28074: MUL
28075: PLUS
28076: PPUSH
28077: NOP4
28081: ST_TO_ADDR
28082: GO 28030
28084: POP
28085: POP
// end ;
28086: GO 26569
28088: POP
28089: POP
// result := Replace ( result , 4 , tmp ) ;
28090: NOP4
28094: PUSH
28095: NOP4
28099: PPUSH
28100: LD_INT 4
28102: PPUSH
28103: NOP4
28107: PPUSH
28108: NOP4
28112: ST_TO_ADDR
// end ;
28113: LD_VAR 0 5
28117: RET
// export function DangerAtRange ( unit , range ) ; begin
28118: LD_INT 0
28120: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28121: NOP4
28125: PUSH
28126: NOP4
28130: PPUSH
28131: NOP4
28135: PPUSH
28136: NOP4
28140: PPUSH
28141: NOP4
28145: PPUSH
28146: NOP4
28150: PPUSH
28151: NOP4
28155: PPUSH
28156: NOP4
28160: PPUSH
28161: NOP4
28165: ST_TO_ADDR
// end ;
28166: LD_VAR 0 3
28170: RET
// export function DangerInArea ( side , area ) ; begin
28171: LD_INT 0
28173: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28174: NOP4
28178: PUSH
28179: NOP4
28183: PPUSH
28184: LD_INT 81
28186: PUSH
28187: NOP4
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PPUSH
28196: NOP4
28200: ST_TO_ADDR
// end ;
28201: LD_VAR 0 3
28205: RET
// export function IsExtension ( b ) ; begin
28206: LD_INT 0
28208: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28209: NOP4
28213: PUSH
28214: NOP4
28218: PUSH
28219: LD_INT 23
28221: PUSH
28222: LD_INT 20
28224: PUSH
28225: LD_INT 22
28227: PUSH
28228: LD_INT 17
28230: PUSH
28231: LD_INT 24
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 19
28239: PUSH
28240: LD_INT 16
28242: PUSH
28243: LD_INT 25
28245: PUSH
28246: LD_INT 18
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: IN
28261: ST_TO_ADDR
// end ;
28262: LD_VAR 0 2
28266: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
28271: PPUSH
// result := [ ] ;
28272: NOP4
28276: PUSH
28277: EMPTY
28278: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28279: NOP4
28283: PUSH
28284: NOP4
28288: PPUSH
28289: LD_INT 21
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PPUSH
28299: NOP4
28303: ST_TO_ADDR
// if not tmp then
28304: NOP4
28308: NOT
28309: IFFALSE 28313
// exit ;
28311: GO 28371
// for i in tmp do
28313: NOP4
28317: PUSH
28318: NOP4
28322: PUSH
28323: FOR_IN
28324: IFFALSE 28359
// if GetBase ( i ) <> base then
28326: NOP4
28330: PPUSH
28331: NOP4
28335: PUSH
28336: NOP4
28340: NONEQUAL
28341: IFFALSE 28357
// ComLinkToBase ( base , i ) ;
28343: NOP4
28347: PPUSH
28348: NOP4
28352: PPUSH
28353: NOP4
28357: GO 28323
28359: POP
28360: POP
// result := tmp ;
28361: NOP4
28365: PUSH
28366: NOP4
28370: ST_TO_ADDR
// end ;
28371: LD_VAR 0 3
28375: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28376: LD_INT 0
28378: PPUSH
28379: PPUSH
// if BuildingStatus ( b ) = bs_build then
28380: NOP4
28384: PPUSH
28385: NOP4
28389: PUSH
28390: LD_INT 1
28392: EQUAL
28393: IFFALSE 28453
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28395: NOP4
28399: PPUSH
28400: LD_STRING h
28402: PUSH
28403: NOP4
28407: PPUSH
28408: NOP4
28412: PUSH
28413: NOP4
28417: PPUSH
28418: NOP4
28422: PUSH
28423: NOP4
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: PUSH
28446: EMPTY
28447: LIST
28448: PPUSH
28449: NOP4
// end ;
28453: LD_VAR 0 3
28457: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28466: NOP4
28470: NOT
28471: PUSH
28472: NOP4
28476: PPUSH
28477: NOP4
28481: PUSH
28482: LD_INT 2
28484: EQUAL
28485: NOT
28486: OR
28487: IFFALSE 28491
// exit ;
28489: GO 28807
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28491: NOP4
28495: PUSH
28496: LD_INT 22
28498: PUSH
28499: NOP4
28503: PPUSH
28504: NOP4
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 30
28518: PUSH
28519: LD_INT 36
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 34
28528: PUSH
28529: LD_INT 31
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PPUSH
28545: NOP4
28549: ST_TO_ADDR
// if not tmp then
28550: NOP4
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28807
// result := [ ] ;
28559: NOP4
28563: PUSH
28564: EMPTY
28565: ST_TO_ADDR
// for i in tmp do
28566: NOP4
28570: PUSH
28571: NOP4
28575: PUSH
28576: FOR_IN
28577: IFFALSE 28648
// begin t := UnitsInside ( i ) ;
28579: NOP4
28583: PUSH
28584: NOP4
28588: PPUSH
28589: NOP4
28593: ST_TO_ADDR
// if t then
28594: NOP4
28598: IFFALSE 28646
// for j in t do
28600: NOP4
28604: PUSH
28605: NOP4
28609: PUSH
28610: FOR_IN
28611: IFFALSE 28644
// result := Insert ( result , result + 1 , j ) ;
28613: NOP4
28617: PUSH
28618: NOP4
28622: PPUSH
28623: NOP4
28627: PUSH
28628: LD_INT 1
28630: PLUS
28631: PPUSH
28632: NOP4
28636: PPUSH
28637: NOP4
28641: ST_TO_ADDR
28642: GO 28610
28644: POP
28645: POP
// end ;
28646: GO 28576
28648: POP
28649: POP
// if not result then
28650: NOP4
28654: NOT
28655: IFFALSE 28659
// exit ;
28657: GO 28807
// mech := result [ 1 ] ;
28659: NOP4
28663: PUSH
28664: NOP4
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: ST_TO_ADDR
// if result > 1 then
28673: NOP4
28677: PUSH
28678: LD_INT 1
28680: GREATER
28681: IFFALSE 28793
// for i = 2 to result do
28683: NOP4
28687: PUSH
28688: DOUBLE
28689: LD_INT 2
28691: DEC
28692: ST_TO_ADDR
28693: NOP4
28697: PUSH
28698: FOR_TO
28699: IFFALSE 28791
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28701: NOP4
28705: PUSH
28706: NOP4
28710: PUSH
28711: NOP4
28715: ARRAY
28716: PPUSH
28717: LD_INT 3
28719: PPUSH
28720: NOP4
28724: PUSH
28725: NOP4
28729: PUSH
28730: NOP4
28734: ARRAY
28735: PPUSH
28736: NOP4
28740: MINUS
28741: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28742: NOP4
28746: PUSH
28747: NOP4
28751: PPUSH
28752: LD_INT 3
28754: PPUSH
28755: NOP4
28759: PUSH
28760: NOP4
28764: PPUSH
28765: NOP4
28769: MINUS
28770: GREATEREQUAL
28771: IFFALSE 28789
// mech := result [ i ] ;
28773: NOP4
28777: PUSH
28778: NOP4
28782: PUSH
28783: NOP4
28787: ARRAY
28788: ST_TO_ADDR
// end ;
28789: GO 28698
28791: POP
28792: POP
// ComLinkTo ( vehicle , mech ) ;
28793: NOP4
28797: PPUSH
28798: NOP4
28802: PPUSH
28803: NOP4
// end ;
28807: LD_VAR 0 2
28811: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
28816: PPUSH
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
// result := [ ] ;
28827: NOP4
28831: PUSH
28832: EMPTY
28833: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28834: NOP4
28838: PPUSH
28839: NOP4
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: IN
28854: NOT
28855: IFFALSE 28859
// exit ;
28857: GO 30490
// if name then
28859: NOP4
28863: IFFALSE 28879
// SetBName ( base_dep , name ) ;
28865: NOP4
28869: PPUSH
28870: NOP4
28874: PPUSH
28875: NOP4
// base := GetBase ( base_dep ) ;
28879: NOP4
28883: PUSH
28884: NOP4
28888: PPUSH
28889: NOP4
28893: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28894: NOP4
28898: PUSH
28899: NOP4
28903: PPUSH
28904: NOP4
28908: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28909: NOP4
28913: PUSH
28914: NOP4
28918: PPUSH
28919: NOP4
28923: ST_TO_ADDR
// if sources then
28924: NOP4
28928: IFFALSE 28975
// for i = 1 to 3 do
28930: NOP4
28934: PUSH
28935: DOUBLE
28936: LD_INT 1
28938: DEC
28939: ST_TO_ADDR
28940: LD_INT 3
28942: PUSH
28943: FOR_TO
28944: IFFALSE 28973
// AddResourceType ( base , i , sources [ i ] ) ;
28946: NOP4
28950: PPUSH
28951: NOP4
28955: PPUSH
28956: NOP4
28960: PUSH
28961: NOP4
28965: ARRAY
28966: PPUSH
28967: NOP4
28971: GO 28943
28973: POP
28974: POP
// buildings := GetBaseBuildings ( base , area ) ;
28975: NOP4
28979: PUSH
28980: NOP4
28984: PPUSH
28985: NOP4
28989: PPUSH
28990: NOP4
28994: ST_TO_ADDR
// InitHc ;
28995: NOP4
// InitUc ;
28999: NOP4
// uc_side := side ;
29003: LD_ADDR_OWVAR 20
29007: PUSH
29008: NOP4
29012: ST_TO_ADDR
// uc_nation := nation ;
29013: LD_ADDR_OWVAR 21
29017: PUSH
29018: NOP4
29022: ST_TO_ADDR
// if buildings then
29023: NOP4
29027: IFFALSE 30349
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29029: NOP4
29033: PUSH
29034: NOP4
29038: PPUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 30
29044: PUSH
29045: LD_INT 29
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 30
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: PPUSH
29067: NOP4
29071: ST_TO_ADDR
// if tmp then
29072: NOP4
29076: IFFALSE 29124
// for i in tmp do
29078: NOP4
29082: PUSH
29083: NOP4
29087: PUSH
29088: FOR_IN
29089: IFFALSE 29122
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29091: NOP4
29095: PPUSH
29096: NOP4
29100: PPUSH
29101: NOP4
29105: PPUSH
29106: NOP4
29110: PPUSH
29111: NOP4
29115: PPUSH
29116: NOP4
29120: GO 29088
29122: POP
29123: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29124: NOP4
29128: PPUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 30
29134: PUSH
29135: LD_INT 32
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 30
29144: PUSH
29145: LD_INT 33
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: PPUSH
29157: NOP4
29161: IFFALSE 29249
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29163: NOP4
29167: PUSH
29168: NOP4
29172: PPUSH
29173: LD_INT 2
29175: PUSH
29176: LD_INT 30
29178: PUSH
29179: LD_INT 32
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 30
29188: PUSH
29189: LD_INT 33
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: PPUSH
29201: NOP4
29205: PUSH
29206: FOR_IN
29207: IFFALSE 29247
// begin if not GetBWeapon ( i ) then
29209: NOP4
29213: PPUSH
29214: NOP4
29218: NOT
29219: IFFALSE 29245
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29221: NOP4
29225: PPUSH
29226: NOP4
29230: PPUSH
29231: NOP4
29235: PPUSH
29236: NOP4
29240: PPUSH
29241: NOP4
// end ;
29245: GO 29206
29247: POP
29248: POP
// end ; for i = 1 to personel do
29249: NOP4
29253: PUSH
29254: DOUBLE
29255: LD_INT 1
29257: DEC
29258: ST_TO_ADDR
29259: NOP4
29263: PUSH
29264: FOR_TO
29265: IFFALSE 30329
// begin if i > 4 then
29267: NOP4
29271: PUSH
29272: LD_INT 4
29274: GREATER
29275: IFFALSE 29279
// break ;
29277: GO 30329
// case i of 1 :
29279: NOP4
29283: PUSH
29284: LD_INT 1
29286: DOUBLE
29287: EQUAL
29288: IFTRUE 29292
29290: GO 29372
29292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29293: NOP4
29297: PUSH
29298: NOP4
29302: PPUSH
29303: LD_INT 22
29305: PUSH
29306: NOP4
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 58
29317: PUSH
29318: EMPTY
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 30
29326: PUSH
29327: LD_INT 32
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 30
29336: PUSH
29337: LD_INT 4
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 30
29346: PUSH
29347: LD_INT 5
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: LIST
29364: PPUSH
29365: NOP4
29369: ST_TO_ADDR
29370: GO 29594
29372: LD_INT 2
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29442
29380: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29381: NOP4
29385: PUSH
29386: NOP4
29390: PPUSH
29391: LD_INT 22
29393: PUSH
29394: NOP4
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 30
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: NOP4
29439: ST_TO_ADDR
29440: GO 29594
29442: LD_INT 3
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29512
29450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29451: NOP4
29455: PUSH
29456: NOP4
29460: PPUSH
29461: LD_INT 22
29463: PUSH
29464: NOP4
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 30
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 30
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PPUSH
29505: NOP4
29509: ST_TO_ADDR
29510: GO 29594
29512: LD_INT 4
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29593
29520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29521: NOP4
29525: PUSH
29526: NOP4
29530: PPUSH
29531: LD_INT 22
29533: PUSH
29534: NOP4
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: LD_INT 30
29548: PUSH
29549: LD_INT 6
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 30
29558: PUSH
29559: LD_INT 7
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 30
29568: PUSH
29569: LD_INT 8
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PPUSH
29586: NOP4
29590: ST_TO_ADDR
29591: GO 29594
29593: POP
// if i = 1 then
29594: NOP4
29598: PUSH
29599: LD_INT 1
29601: EQUAL
29602: IFFALSE 29713
// begin tmp := [ ] ;
29604: NOP4
29608: PUSH
29609: EMPTY
29610: ST_TO_ADDR
// for j in f do
29611: NOP4
29615: PUSH
29616: NOP4
29620: PUSH
29621: FOR_IN
29622: IFFALSE 29695
// if GetBType ( j ) = b_bunker then
29624: NOP4
29628: PPUSH
29629: NOP4
29633: PUSH
29634: LD_INT 32
29636: EQUAL
29637: IFFALSE 29664
// tmp := Insert ( tmp , 1 , j ) else
29639: NOP4
29643: PUSH
29644: NOP4
29648: PPUSH
29649: LD_INT 1
29651: PPUSH
29652: NOP4
29656: PPUSH
29657: NOP4
29661: ST_TO_ADDR
29662: GO 29693
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29664: NOP4
29668: PUSH
29669: NOP4
29673: PPUSH
29674: NOP4
29678: PUSH
29679: LD_INT 1
29681: PLUS
29682: PPUSH
29683: NOP4
29687: PPUSH
29688: NOP4
29692: ST_TO_ADDR
29693: GO 29621
29695: POP
29696: POP
// if tmp then
29697: NOP4
29701: IFFALSE 29713
// f := tmp ;
29703: NOP4
29707: PUSH
29708: NOP4
29712: ST_TO_ADDR
// end ; x := personel [ i ] ;
29713: NOP4
29717: PUSH
29718: NOP4
29722: PUSH
29723: NOP4
29727: ARRAY
29728: ST_TO_ADDR
// if x = - 1 then
29729: NOP4
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: EQUAL
29738: IFFALSE 29947
// begin for j in f do
29740: NOP4
29744: PUSH
29745: NOP4
29749: PUSH
29750: FOR_IN
29751: IFFALSE 29943
// repeat InitHc ;
29753: NOP4
// if GetBType ( j ) = b_barracks then
29757: NOP4
29761: PPUSH
29762: NOP4
29766: PUSH
29767: LD_INT 5
29769: EQUAL
29770: IFFALSE 29840
// begin if UnitsInside ( j ) < 3 then
29772: NOP4
29776: PPUSH
29777: NOP4
29781: PUSH
29782: LD_INT 3
29784: LESS
29785: IFFALSE 29821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29787: LD_INT 0
29789: PPUSH
29790: LD_INT 5
29792: PUSH
29793: LD_INT 8
29795: PUSH
29796: LD_INT 9
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: PUSH
29804: NOP4
29808: ARRAY
29809: PPUSH
29810: NOP4
29814: PPUSH
29815: NOP4
29819: GO 29838
// PrepareHuman ( false , i , skill ) ;
29821: LD_INT 0
29823: PPUSH
29824: NOP4
29828: PPUSH
29829: NOP4
29833: PPUSH
29834: NOP4
// end else
29838: GO 29857
// PrepareHuman ( false , i , skill ) ;
29840: LD_INT 0
29842: PPUSH
29843: NOP4
29847: PPUSH
29848: NOP4
29852: PPUSH
29853: NOP4
// un := CreateHuman ;
29857: NOP4
29861: PUSH
29862: NOP4
29866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29867: NOP4
29871: PUSH
29872: NOP4
29876: PPUSH
29877: LD_INT 1
29879: PPUSH
29880: NOP4
29884: PPUSH
29885: NOP4
29889: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29890: NOP4
29894: PPUSH
29895: NOP4
29899: PPUSH
29900: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29904: NOP4
29908: PPUSH
29909: NOP4
29913: PUSH
29914: LD_INT 6
29916: EQUAL
29917: PUSH
29918: NOP4
29922: PPUSH
29923: NOP4
29927: PUSH
29928: LD_INT 32
29930: PUSH
29931: LD_INT 31
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: IN
29938: OR
29939: IFFALSE 29753
29941: GO 29750
29943: POP
29944: POP
// end else
29945: GO 30327
// for j = 1 to x do
29947: NOP4
29951: PUSH
29952: DOUBLE
29953: LD_INT 1
29955: DEC
29956: ST_TO_ADDR
29957: NOP4
29961: PUSH
29962: FOR_TO
29963: IFFALSE 30325
// begin InitHc ;
29965: NOP4
// if not f then
29969: NOP4
29973: NOT
29974: IFFALSE 30063
// begin PrepareHuman ( false , i , skill ) ;
29976: LD_INT 0
29978: PPUSH
29979: NOP4
29983: PPUSH
29984: NOP4
29988: PPUSH
29989: NOP4
// un := CreateHuman ;
29993: NOP4
29997: PUSH
29998: NOP4
30002: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30003: NOP4
30007: PUSH
30008: NOP4
30012: PPUSH
30013: LD_INT 1
30015: PPUSH
30016: NOP4
30020: PPUSH
30021: NOP4
30025: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30026: NOP4
30030: PPUSH
30031: NOP4
30035: PPUSH
30036: NOP4
30040: PPUSH
30041: NOP4
30045: PPUSH
30046: NOP4
30050: PPUSH
30051: LD_INT 10
30053: PPUSH
30054: LD_INT 0
30056: PPUSH
30057: NOP4
// continue ;
30061: GO 29962
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30063: NOP4
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: NOP4
30076: PUSH
30077: NOP4
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PPUSH
30086: NOP4
30090: PUSH
30091: LD_INT 32
30093: PUSH
30094: LD_INT 31
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: IN
30101: AND
30102: PUSH
30103: NOP4
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: NOP4
30116: PUSH
30117: LD_INT 6
30119: EQUAL
30120: OR
30121: IFFALSE 30141
// f := Delete ( f , 1 ) ;
30123: NOP4
30127: PUSH
30128: NOP4
30132: PPUSH
30133: LD_INT 1
30135: PPUSH
30136: NOP4
30140: ST_TO_ADDR
// if not f then
30141: NOP4
30145: NOT
30146: IFFALSE 30164
// begin x := x + 2 ;
30148: NOP4
30152: PUSH
30153: NOP4
30157: PUSH
30158: LD_INT 2
30160: PLUS
30161: ST_TO_ADDR
// continue ;
30162: GO 29962
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30164: NOP4
30168: PUSH
30169: LD_INT 1
30171: ARRAY
30172: PPUSH
30173: NOP4
30177: PUSH
30178: LD_INT 5
30180: EQUAL
30181: IFFALSE 30255
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30183: NOP4
30187: PUSH
30188: LD_INT 1
30190: ARRAY
30191: PPUSH
30192: NOP4
30196: PUSH
30197: LD_INT 3
30199: LESS
30200: IFFALSE 30236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30202: LD_INT 0
30204: PPUSH
30205: LD_INT 5
30207: PUSH
30208: LD_INT 8
30210: PUSH
30211: LD_INT 9
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: PUSH
30219: NOP4
30223: ARRAY
30224: PPUSH
30225: NOP4
30229: PPUSH
30230: NOP4
30234: GO 30253
// PrepareHuman ( false , i , skill ) ;
30236: LD_INT 0
30238: PPUSH
30239: NOP4
30243: PPUSH
30244: NOP4
30248: PPUSH
30249: NOP4
// end else
30253: GO 30272
// PrepareHuman ( false , i , skill ) ;
30255: LD_INT 0
30257: PPUSH
30258: NOP4
30262: PPUSH
30263: NOP4
30267: PPUSH
30268: NOP4
// un := CreateHuman ;
30272: NOP4
30276: PUSH
30277: NOP4
30281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30282: NOP4
30286: PUSH
30287: NOP4
30291: PPUSH
30292: LD_INT 1
30294: PPUSH
30295: NOP4
30299: PPUSH
30300: NOP4
30304: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30305: NOP4
30309: PPUSH
30310: NOP4
30314: PUSH
30315: LD_INT 1
30317: ARRAY
30318: PPUSH
30319: NOP4
// end ;
30323: GO 29962
30325: POP
30326: POP
// end ;
30327: GO 29264
30329: POP
30330: POP
// result := result ^ buildings ;
30331: NOP4
30335: PUSH
30336: NOP4
30340: PUSH
30341: NOP4
30345: ADD
30346: ST_TO_ADDR
// end else
30347: GO 30490
// begin for i = 1 to personel do
30349: NOP4
30353: PUSH
30354: DOUBLE
30355: LD_INT 1
30357: DEC
30358: ST_TO_ADDR
30359: NOP4
30363: PUSH
30364: FOR_TO
30365: IFFALSE 30488
// begin if i > 4 then
30367: NOP4
30371: PUSH
30372: LD_INT 4
30374: GREATER
30375: IFFALSE 30379
// break ;
30377: GO 30488
// x := personel [ i ] ;
30379: NOP4
30383: PUSH
30384: NOP4
30388: PUSH
30389: NOP4
30393: ARRAY
30394: ST_TO_ADDR
// if x = - 1 then
30395: NOP4
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: EQUAL
30404: IFFALSE 30408
// continue ;
30406: GO 30364
// PrepareHuman ( false , i , skill ) ;
30408: LD_INT 0
30410: PPUSH
30411: NOP4
30415: PPUSH
30416: NOP4
30420: PPUSH
30421: NOP4
// un := CreateHuman ;
30425: NOP4
30429: PUSH
30430: NOP4
30434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30435: NOP4
30439: PPUSH
30440: NOP4
30444: PPUSH
30445: NOP4
30449: PPUSH
30450: NOP4
30454: PPUSH
30455: NOP4
30459: PPUSH
30460: LD_INT 10
30462: PPUSH
30463: LD_INT 0
30465: PPUSH
30466: NOP4
// result := result ^ un ;
30470: NOP4
30474: PUSH
30475: NOP4
30479: PUSH
30480: NOP4
30484: ADD
30485: ST_TO_ADDR
// end ;
30486: GO 30364
30488: POP
30489: POP
// end ; end ;
30490: LD_VAR 0 7
30494: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30495: LD_INT 0
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
// result := false ;
30513: NOP4
30517: PUSH
30518: LD_INT 0
30520: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30521: NOP4
30525: NOT
30526: PUSH
30527: NOP4
30531: PPUSH
30532: NOP4
30536: PUSH
30537: LD_INT 32
30539: PUSH
30540: LD_INT 33
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: IN
30547: NOT
30548: OR
30549: IFFALSE 30553
// exit ;
30551: GO 31689
// nat := GetNation ( tower ) ;
30553: NOP4
30557: PUSH
30558: NOP4
30562: PPUSH
30563: NOP4
30567: ST_TO_ADDR
// side := GetSide ( tower ) ;
30568: NOP4
30572: PUSH
30573: NOP4
30577: PPUSH
30578: NOP4
30582: ST_TO_ADDR
// x := GetX ( tower ) ;
30583: NOP4
30587: PUSH
30588: NOP4
30592: PPUSH
30593: NOP4
30597: ST_TO_ADDR
// y := GetY ( tower ) ;
30598: NOP4
30602: PUSH
30603: NOP4
30607: PPUSH
30608: NOP4
30612: ST_TO_ADDR
// if not x or not y then
30613: NOP4
30617: NOT
30618: PUSH
30619: NOP4
30623: NOT
30624: OR
30625: IFFALSE 30629
// exit ;
30627: GO 31689
// weapon := 0 ;
30629: NOP4
30633: PUSH
30634: LD_INT 0
30636: ST_TO_ADDR
// fac_list := [ ] ;
30637: NOP4
30641: PUSH
30642: EMPTY
30643: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30644: NOP4
30648: PUSH
30649: NOP4
30653: PPUSH
30654: NOP4
30658: PPUSH
30659: NOP4
30663: PPUSH
30664: NOP4
30668: PPUSH
30669: LD_INT 30
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PPUSH
30679: NOP4
30683: ST_TO_ADDR
// if not factories then
30684: NOP4
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 31689
// for i in factories do
30693: NOP4
30697: PUSH
30698: NOP4
30702: PUSH
30703: FOR_IN
30704: IFFALSE 30729
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30706: NOP4
30710: PUSH
30711: NOP4
30715: PUSH
30716: NOP4
30720: PPUSH
30721: NOP4
30725: UNION
30726: ST_TO_ADDR
30727: GO 30703
30729: POP
30730: POP
// if not fac_list then
30731: NOP4
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 31689
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30740: NOP4
30744: PUSH
30745: LD_INT 4
30747: PUSH
30748: LD_INT 5
30750: PUSH
30751: LD_INT 9
30753: PUSH
30754: LD_INT 10
30756: PUSH
30757: LD_INT 6
30759: PUSH
30760: LD_INT 7
30762: PUSH
30763: LD_INT 11
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 27
30777: PUSH
30778: LD_INT 28
30780: PUSH
30781: LD_INT 26
30783: PUSH
30784: LD_INT 30
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 43
30795: PUSH
30796: LD_INT 44
30798: PUSH
30799: LD_INT 46
30801: PUSH
30802: LD_INT 45
30804: PUSH
30805: LD_INT 47
30807: PUSH
30808: LD_INT 49
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: PUSH
30824: NOP4
30828: ARRAY
30829: ST_TO_ADDR
// for i in list do
30830: NOP4
30834: PUSH
30835: NOP4
30839: PUSH
30840: FOR_IN
30841: IFFALSE 30874
// if not i in fac_list then
30843: NOP4
30847: PUSH
30848: NOP4
30852: IN
30853: NOT
30854: IFFALSE 30872
// list := list diff i ;
30856: NOP4
30860: PUSH
30861: NOP4
30865: PUSH
30866: NOP4
30870: DIFF
30871: ST_TO_ADDR
30872: GO 30840
30874: POP
30875: POP
// if not list then
30876: NOP4
30880: NOT
30881: IFFALSE 30885
// exit ;
30883: GO 31689
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30885: NOP4
30889: PUSH
30890: LD_INT 3
30892: EQUAL
30893: PUSH
30894: LD_INT 49
30896: PUSH
30897: NOP4
30901: IN
30902: AND
30903: PUSH
30904: LD_INT 31
30906: PPUSH
30907: NOP4
30911: PPUSH
30912: NOP4
30916: PUSH
30917: LD_INT 2
30919: EQUAL
30920: AND
30921: IFFALSE 30981
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30923: LD_INT 22
30925: PUSH
30926: NOP4
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 35
30937: PUSH
30938: LD_INT 49
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 91
30947: PUSH
30948: NOP4
30952: PUSH
30953: LD_INT 10
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: PPUSH
30966: NOP4
30970: NOT
30971: IFFALSE 30981
// weapon := ru_time_lapser ;
30973: NOP4
30977: PUSH
30978: LD_INT 49
30980: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30981: NOP4
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: IN
30996: PUSH
30997: LD_INT 11
30999: PUSH
31000: NOP4
31004: IN
31005: PUSH
31006: LD_INT 30
31008: PUSH
31009: NOP4
31013: IN
31014: OR
31015: AND
31016: PUSH
31017: LD_INT 6
31019: PPUSH
31020: NOP4
31024: PPUSH
31025: NOP4
31029: PUSH
31030: LD_INT 2
31032: EQUAL
31033: AND
31034: IFFALSE 31199
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31036: LD_INT 22
31038: PUSH
31039: NOP4
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: LD_INT 35
31053: PUSH
31054: LD_INT 11
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 35
31063: PUSH
31064: LD_INT 30
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 91
31078: PUSH
31079: NOP4
31083: PUSH
31084: LD_INT 18
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: PPUSH
31097: NOP4
31101: NOT
31102: PUSH
31103: LD_INT 22
31105: PUSH
31106: NOP4
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 32
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 33
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 91
31145: PUSH
31146: NOP4
31150: PUSH
31151: LD_INT 12
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: PPUSH
31167: NOP4
31171: PUSH
31172: LD_INT 2
31174: GREATER
31175: AND
31176: IFFALSE 31199
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31178: NOP4
31182: PUSH
31183: LD_INT 11
31185: PUSH
31186: LD_INT 30
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: NOP4
31197: ARRAY
31198: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31199: NOP4
31203: NOT
31204: PUSH
31205: LD_INT 40
31207: PPUSH
31208: NOP4
31212: PPUSH
31213: NOP4
31217: PUSH
31218: LD_INT 2
31220: EQUAL
31221: AND
31222: PUSH
31223: LD_INT 7
31225: PUSH
31226: NOP4
31230: IN
31231: PUSH
31232: LD_INT 28
31234: PUSH
31235: NOP4
31239: IN
31240: OR
31241: PUSH
31242: LD_INT 45
31244: PUSH
31245: NOP4
31249: IN
31250: OR
31251: AND
31252: IFFALSE 31506
// begin hex := GetHexInfo ( x , y ) ;
31254: NOP4
31258: PUSH
31259: NOP4
31263: PPUSH
31264: NOP4
31268: PPUSH
31269: NOP4
31273: ST_TO_ADDR
// if hex [ 1 ] then
31274: NOP4
31278: PUSH
31279: LD_INT 1
31281: ARRAY
31282: IFFALSE 31286
// exit ;
31284: GO 31689
// height := hex [ 2 ] ;
31286: NOP4
31290: PUSH
31291: NOP4
31295: PUSH
31296: LD_INT 2
31298: ARRAY
31299: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31300: NOP4
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: LD_INT 5
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// for i in tmp do
31323: NOP4
31327: PUSH
31328: NOP4
31332: PUSH
31333: FOR_IN
31334: IFFALSE 31504
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31336: NOP4
31340: PUSH
31341: NOP4
31345: PPUSH
31346: NOP4
31350: PPUSH
31351: LD_INT 5
31353: PPUSH
31354: NOP4
31358: PUSH
31359: NOP4
31363: PPUSH
31364: NOP4
31368: PPUSH
31369: LD_INT 5
31371: PPUSH
31372: NOP4
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31381: NOP4
31385: PUSH
31386: LD_INT 1
31388: ARRAY
31389: PPUSH
31390: NOP4
31394: PUSH
31395: LD_INT 2
31397: ARRAY
31398: PPUSH
31399: NOP4
31403: IFFALSE 31502
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31405: NOP4
31409: PUSH
31410: NOP4
31414: PUSH
31415: LD_INT 1
31417: ARRAY
31418: PPUSH
31419: NOP4
31423: PUSH
31424: LD_INT 2
31426: ARRAY
31427: PPUSH
31428: NOP4
31432: ST_TO_ADDR
// if hex [ 1 ] then
31433: NOP4
31437: PUSH
31438: LD_INT 1
31440: ARRAY
31441: IFFALSE 31445
// continue ;
31443: GO 31333
// h := hex [ 2 ] ;
31445: NOP4
31449: PUSH
31450: NOP4
31454: PUSH
31455: LD_INT 2
31457: ARRAY
31458: ST_TO_ADDR
// if h + 7 < height then
31459: NOP4
31463: PUSH
31464: LD_INT 7
31466: PLUS
31467: PUSH
31468: NOP4
31472: LESS
31473: IFFALSE 31502
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31475: NOP4
31479: PUSH
31480: LD_INT 7
31482: PUSH
31483: LD_INT 28
31485: PUSH
31486: LD_INT 45
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: PUSH
31494: NOP4
31498: ARRAY
31499: ST_TO_ADDR
// break ;
31500: GO 31504
// end ; end ; end ;
31502: GO 31333
31504: POP
31505: POP
// end ; if not weapon then
31506: NOP4
31510: NOT
31511: IFFALSE 31571
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31513: NOP4
31517: PUSH
31518: NOP4
31522: PUSH
31523: LD_INT 11
31525: PUSH
31526: LD_INT 30
31528: PUSH
31529: LD_INT 49
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: DIFF
31537: ST_TO_ADDR
// if not list then
31538: NOP4
31542: NOT
31543: IFFALSE 31547
// exit ;
31545: GO 31689
// weapon := list [ rand ( 1 , list ) ] ;
31547: NOP4
31551: PUSH
31552: NOP4
31556: PUSH
31557: LD_INT 1
31559: PPUSH
31560: NOP4
31564: PPUSH
31565: NOP4
31569: ARRAY
31570: ST_TO_ADDR
// end ; if weapon then
31571: NOP4
31575: IFFALSE 31689
// begin tmp := CostOfWeapon ( weapon ) ;
31577: NOP4
31581: PUSH
31582: NOP4
31586: PPUSH
31587: NOP4
31591: ST_TO_ADDR
// j := GetBase ( tower ) ;
31592: NOP4
31596: PUSH
31597: NOP4
31601: PPUSH
31602: NOP4
31606: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31607: NOP4
31611: PPUSH
31612: LD_INT 1
31614: PPUSH
31615: NOP4
31619: PUSH
31620: NOP4
31624: PUSH
31625: LD_INT 1
31627: ARRAY
31628: GREATEREQUAL
31629: PUSH
31630: NOP4
31634: PPUSH
31635: LD_INT 2
31637: PPUSH
31638: NOP4
31642: PUSH
31643: NOP4
31647: PUSH
31648: LD_INT 2
31650: ARRAY
31651: GREATEREQUAL
31652: AND
31653: PUSH
31654: NOP4
31658: PPUSH
31659: LD_INT 3
31661: PPUSH
31662: NOP4
31666: PUSH
31667: NOP4
31671: PUSH
31672: LD_INT 3
31674: ARRAY
31675: GREATEREQUAL
31676: AND
31677: IFFALSE 31689
// result := weapon ;
31679: NOP4
31683: PUSH
31684: NOP4
31688: ST_TO_ADDR
// end ; end ;
31689: LD_VAR 0 3
31693: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31694: LD_INT 0
31696: PPUSH
31697: PPUSH
// result := true ;
31698: NOP4
31702: PUSH
31703: LD_INT 1
31705: ST_TO_ADDR
// if array1 = array2 then
31706: NOP4
31710: PUSH
31711: NOP4
31715: EQUAL
31716: IFFALSE 31776
// begin for i = 1 to array1 do
31718: NOP4
31722: PUSH
31723: DOUBLE
31724: LD_INT 1
31726: DEC
31727: ST_TO_ADDR
31728: NOP4
31732: PUSH
31733: FOR_TO
31734: IFFALSE 31772
// if array1 [ i ] <> array2 [ i ] then
31736: NOP4
31740: PUSH
31741: NOP4
31745: ARRAY
31746: PUSH
31747: NOP4
31751: PUSH
31752: NOP4
31756: ARRAY
31757: NONEQUAL
31758: IFFALSE 31770
// begin result := false ;
31760: NOP4
31764: PUSH
31765: LD_INT 0
31767: ST_TO_ADDR
// break ;
31768: GO 31772
// end ;
31770: GO 31733
31772: POP
31773: POP
// end else
31774: GO 31784
// result := false ;
31776: NOP4
31780: PUSH
31781: LD_INT 0
31783: ST_TO_ADDR
// end ;
31784: LD_VAR 0 3
31788: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
31793: PPUSH
// pom := GetBase ( fac ) ;
31794: NOP4
31798: PUSH
31799: NOP4
31803: PPUSH
31804: NOP4
31808: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31809: NOP4
31813: PUSH
31814: NOP4
31818: PUSH
31819: LD_INT 1
31821: ARRAY
31822: PPUSH
31823: NOP4
31827: PUSH
31828: LD_INT 2
31830: ARRAY
31831: PPUSH
31832: NOP4
31836: PUSH
31837: LD_INT 3
31839: ARRAY
31840: PPUSH
31841: NOP4
31845: PUSH
31846: LD_INT 4
31848: ARRAY
31849: PPUSH
31850: NOP4
31854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31855: NOP4
31859: PUSH
31860: NOP4
31864: PPUSH
31865: LD_INT 1
31867: PPUSH
31868: NOP4
31872: PUSH
31873: NOP4
31877: PUSH
31878: LD_INT 1
31880: ARRAY
31881: GREATEREQUAL
31882: PUSH
31883: NOP4
31887: PPUSH
31888: LD_INT 2
31890: PPUSH
31891: NOP4
31895: PUSH
31896: NOP4
31900: PUSH
31901: LD_INT 2
31903: ARRAY
31904: GREATEREQUAL
31905: AND
31906: PUSH
31907: NOP4
31911: PPUSH
31912: LD_INT 3
31914: PPUSH
31915: NOP4
31919: PUSH
31920: NOP4
31924: PUSH
31925: LD_INT 3
31927: ARRAY
31928: GREATEREQUAL
31929: AND
31930: ST_TO_ADDR
// end ;
31931: LD_VAR 0 3
31935: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
// pom := GetBase ( building ) ;
31942: NOP4
31946: PUSH
31947: NOP4
31951: PPUSH
31952: NOP4
31956: ST_TO_ADDR
// if not pom then
31957: NOP4
31961: NOT
31962: IFFALSE 31966
// exit ;
31964: GO 32136
// btype := GetBType ( building ) ;
31966: NOP4
31970: PUSH
31971: NOP4
31975: PPUSH
31976: NOP4
31980: ST_TO_ADDR
// if btype = b_armoury then
31981: NOP4
31985: PUSH
31986: LD_INT 4
31988: EQUAL
31989: IFFALSE 31999
// btype := b_barracks ;
31991: NOP4
31995: PUSH
31996: LD_INT 5
31998: ST_TO_ADDR
// if btype = b_depot then
31999: NOP4
32003: PUSH
32004: LD_INT 0
32006: EQUAL
32007: IFFALSE 32017
// btype := b_warehouse ;
32009: NOP4
32013: PUSH
32014: LD_INT 1
32016: ST_TO_ADDR
// if btype = b_workshop then
32017: NOP4
32021: PUSH
32022: LD_INT 2
32024: EQUAL
32025: IFFALSE 32035
// btype := b_factory ;
32027: NOP4
32031: PUSH
32032: LD_INT 3
32034: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32035: NOP4
32039: PUSH
32040: NOP4
32044: PPUSH
32045: NOP4
32049: PPUSH
32050: NOP4
32054: PPUSH
32055: NOP4
32059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32060: NOP4
32064: PUSH
32065: NOP4
32069: PPUSH
32070: LD_INT 1
32072: PPUSH
32073: NOP4
32077: PUSH
32078: NOP4
32082: PUSH
32083: LD_INT 1
32085: ARRAY
32086: GREATEREQUAL
32087: PUSH
32088: NOP4
32092: PPUSH
32093: LD_INT 2
32095: PPUSH
32096: NOP4
32100: PUSH
32101: NOP4
32105: PUSH
32106: LD_INT 2
32108: ARRAY
32109: GREATEREQUAL
32110: AND
32111: PUSH
32112: NOP4
32116: PPUSH
32117: LD_INT 3
32119: PPUSH
32120: NOP4
32124: PUSH
32125: NOP4
32129: PUSH
32130: LD_INT 3
32132: ARRAY
32133: GREATEREQUAL
32134: AND
32135: ST_TO_ADDR
// end ;
32136: LD_VAR 0 2
32140: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
32145: PPUSH
// pom := GetBase ( building ) ;
32146: NOP4
32150: PUSH
32151: NOP4
32155: PPUSH
32156: NOP4
32160: ST_TO_ADDR
// if not pom then
32161: NOP4
32165: NOT
32166: IFFALSE 32170
// exit ;
32168: GO 32271
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32170: NOP4
32174: PUSH
32175: NOP4
32179: PPUSH
32180: NOP4
32184: PPUSH
32185: NOP4
32189: PPUSH
32190: NOP4
32194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32195: NOP4
32199: PUSH
32200: NOP4
32204: PPUSH
32205: LD_INT 1
32207: PPUSH
32208: NOP4
32212: PUSH
32213: NOP4
32217: PUSH
32218: LD_INT 1
32220: ARRAY
32221: GREATEREQUAL
32222: PUSH
32223: NOP4
32227: PPUSH
32228: LD_INT 2
32230: PPUSH
32231: NOP4
32235: PUSH
32236: NOP4
32240: PUSH
32241: LD_INT 2
32243: ARRAY
32244: GREATEREQUAL
32245: AND
32246: PUSH
32247: NOP4
32251: PPUSH
32252: LD_INT 3
32254: PPUSH
32255: NOP4
32259: PUSH
32260: NOP4
32264: PUSH
32265: LD_INT 3
32267: ARRAY
32268: GREATEREQUAL
32269: AND
32270: ST_TO_ADDR
// end ;
32271: LD_VAR 0 3
32275: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32276: LD_INT 0
32278: PPUSH
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
// result := false ;
32288: NOP4
32292: PUSH
32293: LD_INT 0
32295: ST_TO_ADDR
// if not base or not btype or not x or not y then
32296: NOP4
32300: NOT
32301: PUSH
32302: NOP4
32306: NOT
32307: OR
32308: PUSH
32309: NOP4
32313: NOT
32314: OR
32315: PUSH
32316: NOP4
32320: NOT
32321: OR
32322: IFFALSE 32326
// exit ;
32324: GO 32917
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32326: NOP4
32330: PUSH
32331: NOP4
32335: PPUSH
32336: NOP4
32340: PPUSH
32341: NOP4
32345: PPUSH
32346: NOP4
32350: PPUSH
32351: NOP4
32355: PUSH
32356: LD_INT 1
32358: ARRAY
32359: PPUSH
32360: NOP4
32364: PPUSH
32365: LD_INT 0
32367: PPUSH
32368: NOP4
32372: ST_TO_ADDR
// if not hexes then
32373: NOP4
32377: NOT
32378: IFFALSE 32382
// exit ;
32380: GO 32917
// for i = 1 to hexes do
32382: NOP4
32386: PUSH
32387: DOUBLE
32388: LD_INT 1
32390: DEC
32391: ST_TO_ADDR
32392: NOP4
32396: PUSH
32397: FOR_TO
32398: IFFALSE 32915
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32400: NOP4
32404: PUSH
32405: NOP4
32409: PUSH
32410: NOP4
32414: ARRAY
32415: PUSH
32416: LD_INT 1
32418: ARRAY
32419: PPUSH
32420: NOP4
32424: PUSH
32425: NOP4
32429: ARRAY
32430: PUSH
32431: LD_INT 2
32433: ARRAY
32434: PPUSH
32435: NOP4
32439: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32440: NOP4
32444: PUSH
32445: NOP4
32449: ARRAY
32450: PUSH
32451: LD_INT 1
32453: ARRAY
32454: PPUSH
32455: NOP4
32459: PUSH
32460: NOP4
32464: ARRAY
32465: PUSH
32466: LD_INT 2
32468: ARRAY
32469: PPUSH
32470: NOP4
32474: PUSH
32475: NOP4
32479: PUSH
32480: NOP4
32484: ARRAY
32485: PUSH
32486: LD_INT 1
32488: ARRAY
32489: PPUSH
32490: NOP4
32494: PUSH
32495: NOP4
32499: ARRAY
32500: PUSH
32501: LD_INT 2
32503: ARRAY
32504: PPUSH
32505: NOP4
32509: NOT
32510: OR
32511: PUSH
32512: NOP4
32516: PPUSH
32517: NOP4
32521: PUSH
32522: LD_INT 3
32524: EQUAL
32525: OR
32526: IFFALSE 32532
// exit ;
32528: POP
32529: POP
32530: GO 32917
// if not tmp then
32532: NOP4
32536: NOT
32537: IFFALSE 32541
// continue ;
32539: GO 32397
// result := true ;
32541: NOP4
32545: PUSH
32546: LD_INT 1
32548: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32549: NOP4
32553: PUSH
32554: LD_INT 22
32556: PUSH
32557: NOP4
32561: PPUSH
32562: NOP4
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 30
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PPUSH
32603: NOP4
32607: ST_TO_ADDR
// if dep then
32608: NOP4
32612: IFFALSE 32748
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32614: NOP4
32618: PUSH
32619: NOP4
32623: PUSH
32624: LD_INT 1
32626: ARRAY
32627: PPUSH
32628: NOP4
32632: PPUSH
32633: NOP4
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: PPUSH
32642: NOP4
32646: PPUSH
32647: LD_INT 5
32649: PPUSH
32650: NOP4
32654: PUSH
32655: NOP4
32659: PUSH
32660: LD_INT 1
32662: ARRAY
32663: PPUSH
32664: NOP4
32668: PPUSH
32669: NOP4
32673: PUSH
32674: LD_INT 1
32676: ARRAY
32677: PPUSH
32678: NOP4
32682: PPUSH
32683: LD_INT 5
32685: PPUSH
32686: NOP4
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32695: NOP4
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: PPUSH
32704: NOP4
32708: PUSH
32709: LD_INT 2
32711: ARRAY
32712: PPUSH
32713: NOP4
32717: IFFALSE 32748
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32719: NOP4
32723: PPUSH
32724: NOP4
32728: PUSH
32729: LD_INT 1
32731: ARRAY
32732: PPUSH
32733: NOP4
32737: PUSH
32738: LD_INT 2
32740: ARRAY
32741: PPUSH
32742: NOP4
// continue ;
32746: GO 32397
// end ; end ; r := GetDir ( tmp ) ;
32748: NOP4
32752: PUSH
32753: NOP4
32757: PPUSH
32758: NOP4
32762: ST_TO_ADDR
// if r = 5 then
32763: NOP4
32767: PUSH
32768: LD_INT 5
32770: EQUAL
32771: IFFALSE 32781
// r := 0 ;
32773: NOP4
32777: PUSH
32778: LD_INT 0
32780: ST_TO_ADDR
// for j = r to 5 do
32781: NOP4
32785: PUSH
32786: DOUBLE
32787: NOP4
32791: DEC
32792: ST_TO_ADDR
32793: LD_INT 5
32795: PUSH
32796: FOR_TO
32797: IFFALSE 32911
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32799: NOP4
32803: PUSH
32804: NOP4
32808: PPUSH
32809: NOP4
32813: PPUSH
32814: NOP4
32818: PPUSH
32819: LD_INT 2
32821: PPUSH
32822: NOP4
32826: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32827: NOP4
32831: PUSH
32832: NOP4
32836: PPUSH
32837: NOP4
32841: PPUSH
32842: NOP4
32846: PPUSH
32847: LD_INT 2
32849: PPUSH
32850: NOP4
32854: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32855: NOP4
32859: PPUSH
32860: NOP4
32864: PPUSH
32865: NOP4
32869: PUSH
32870: NOP4
32874: PPUSH
32875: NOP4
32879: PPUSH
32880: NOP4
32884: NOT
32885: AND
32886: IFFALSE 32909
// begin ComMoveXY ( tmp , _x , _y ) ;
32888: NOP4
32892: PPUSH
32893: NOP4
32897: PPUSH
32898: NOP4
32902: PPUSH
32903: NOP4
// break ;
32907: GO 32911
// end ; end ;
32909: GO 32796
32911: POP
32912: POP
// end ;
32913: GO 32397
32915: POP
32916: POP
// end ;
32917: LD_VAR 0 6
32921: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32922: LD_INT 0
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
32933: PPUSH
// result := false ;
32934: NOP4
32938: PUSH
32939: LD_INT 0
32941: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32942: NOP4
32946: NOT
32947: PUSH
32948: NOP4
32952: PPUSH
32953: NOP4
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: IN
32968: NOT
32969: OR
32970: PUSH
32971: NOP4
32975: NOT
32976: OR
32977: PUSH
32978: NOP4
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: LD_INT 4
32997: PUSH
32998: LD_INT 5
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: IN
33009: NOT
33010: OR
33011: PUSH
33012: NOP4
33016: PPUSH
33017: NOP4
33021: PPUSH
33022: NOP4
33026: NOT
33027: OR
33028: IFFALSE 33032
// exit ;
33030: GO 33749
// pom := GetBase ( depot ) ;
33032: NOP4
33036: PUSH
33037: NOP4
33041: PPUSH
33042: NOP4
33046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33047: NOP4
33051: PUSH
33052: NOP4
33056: PPUSH
33057: NOP4
33061: PPUSH
33062: NOP4
33066: PPUSH
33067: NOP4
33071: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33072: NOP4
33076: PPUSH
33077: LD_INT 1
33079: PPUSH
33080: NOP4
33084: PUSH
33085: NOP4
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: GREATEREQUAL
33094: PUSH
33095: NOP4
33099: PPUSH
33100: LD_INT 2
33102: PPUSH
33103: NOP4
33107: PUSH
33108: NOP4
33112: PUSH
33113: LD_INT 2
33115: ARRAY
33116: GREATEREQUAL
33117: AND
33118: PUSH
33119: NOP4
33123: PPUSH
33124: LD_INT 3
33126: PPUSH
33127: NOP4
33131: PUSH
33132: NOP4
33136: PUSH
33137: LD_INT 3
33139: ARRAY
33140: GREATEREQUAL
33141: AND
33142: NOT
33143: IFFALSE 33147
// exit ;
33145: GO 33749
// if GetBType ( depot ) = b_depot then
33147: NOP4
33151: PPUSH
33152: NOP4
33156: PUSH
33157: LD_INT 0
33159: EQUAL
33160: IFFALSE 33172
// dist := 28 else
33162: NOP4
33166: PUSH
33167: LD_INT 28
33169: ST_TO_ADDR
33170: GO 33180
// dist := 36 ;
33172: NOP4
33176: PUSH
33177: LD_INT 36
33179: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33180: NOP4
33184: PPUSH
33185: NOP4
33189: PPUSH
33190: NOP4
33194: PPUSH
33195: NOP4
33199: PUSH
33200: NOP4
33204: GREATER
33205: IFFALSE 33209
// exit ;
33207: GO 33749
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33209: NOP4
33213: PUSH
33214: NOP4
33218: PPUSH
33219: NOP4
33223: PPUSH
33224: NOP4
33228: PPUSH
33229: NOP4
33233: PPUSH
33234: NOP4
33238: PPUSH
33239: NOP4
33243: PPUSH
33244: LD_INT 0
33246: PPUSH
33247: NOP4
33251: ST_TO_ADDR
// if not hexes then
33252: NOP4
33256: NOT
33257: IFFALSE 33261
// exit ;
33259: GO 33749
// hex := GetHexInfo ( x , y ) ;
33261: NOP4
33265: PUSH
33266: NOP4
33270: PPUSH
33271: NOP4
33275: PPUSH
33276: NOP4
33280: ST_TO_ADDR
// if hex [ 1 ] then
33281: NOP4
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: IFFALSE 33293
// exit ;
33291: GO 33749
// height := hex [ 2 ] ;
33293: NOP4
33297: PUSH
33298: NOP4
33302: PUSH
33303: LD_INT 2
33305: ARRAY
33306: ST_TO_ADDR
// for i = 1 to hexes do
33307: NOP4
33311: PUSH
33312: DOUBLE
33313: LD_INT 1
33315: DEC
33316: ST_TO_ADDR
33317: NOP4
33321: PUSH
33322: FOR_TO
33323: IFFALSE 33653
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33325: NOP4
33329: PUSH
33330: NOP4
33334: ARRAY
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PPUSH
33340: NOP4
33344: PUSH
33345: NOP4
33349: ARRAY
33350: PUSH
33351: LD_INT 2
33353: ARRAY
33354: PPUSH
33355: NOP4
33359: NOT
33360: PUSH
33361: NOP4
33365: PUSH
33366: NOP4
33370: ARRAY
33371: PUSH
33372: LD_INT 1
33374: ARRAY
33375: PPUSH
33376: NOP4
33380: PUSH
33381: NOP4
33385: ARRAY
33386: PUSH
33387: LD_INT 2
33389: ARRAY
33390: PPUSH
33391: NOP4
33395: PUSH
33396: LD_INT 0
33398: GREATER
33399: OR
33400: PUSH
33401: NOP4
33405: PUSH
33406: NOP4
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: ARRAY
33415: PPUSH
33416: NOP4
33420: PUSH
33421: NOP4
33425: ARRAY
33426: PUSH
33427: LD_INT 2
33429: ARRAY
33430: PPUSH
33431: NOP4
33435: OR
33436: IFFALSE 33442
// exit ;
33438: POP
33439: POP
33440: GO 33749
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33442: NOP4
33446: PUSH
33447: NOP4
33451: PUSH
33452: NOP4
33456: ARRAY
33457: PUSH
33458: LD_INT 1
33460: ARRAY
33461: PPUSH
33462: NOP4
33466: PUSH
33467: NOP4
33471: ARRAY
33472: PUSH
33473: LD_INT 2
33475: ARRAY
33476: PPUSH
33477: NOP4
33481: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33482: NOP4
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PUSH
33491: NOP4
33495: PUSH
33496: LD_INT 2
33498: ARRAY
33499: PUSH
33500: NOP4
33504: PUSH
33505: LD_INT 2
33507: PLUS
33508: GREATER
33509: OR
33510: PUSH
33511: NOP4
33515: PUSH
33516: LD_INT 2
33518: ARRAY
33519: PUSH
33520: NOP4
33524: PUSH
33525: LD_INT 2
33527: MINUS
33528: LESS
33529: OR
33530: PUSH
33531: NOP4
33535: PUSH
33536: LD_INT 3
33538: ARRAY
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 8
33545: PUSH
33546: LD_INT 9
33548: PUSH
33549: LD_INT 10
33551: PUSH
33552: LD_INT 11
33554: PUSH
33555: LD_INT 12
33557: PUSH
33558: LD_INT 13
33560: PUSH
33561: LD_INT 16
33563: PUSH
33564: LD_INT 17
33566: PUSH
33567: LD_INT 18
33569: PUSH
33570: LD_INT 19
33572: PUSH
33573: LD_INT 20
33575: PUSH
33576: LD_INT 21
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: IN
33594: NOT
33595: OR
33596: PUSH
33597: NOP4
33601: PUSH
33602: LD_INT 5
33604: ARRAY
33605: NOT
33606: OR
33607: PUSH
33608: NOP4
33612: PUSH
33613: LD_INT 6
33615: ARRAY
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 7
33625: PUSH
33626: LD_INT 9
33628: PUSH
33629: LD_INT 10
33631: PUSH
33632: LD_INT 11
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: IN
33643: NOT
33644: OR
33645: IFFALSE 33651
// exit ;
33647: POP
33648: POP
33649: GO 33749
// end ;
33651: GO 33322
33653: POP
33654: POP
// side := GetSide ( depot ) ;
33655: NOP4
33659: PUSH
33660: NOP4
33664: PPUSH
33665: NOP4
33669: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33670: NOP4
33674: PPUSH
33675: NOP4
33679: PPUSH
33680: NOP4
33684: PPUSH
33685: LD_INT 20
33687: PPUSH
33688: NOP4
33692: PUSH
33693: LD_INT 4
33695: ARRAY
33696: IFFALSE 33700
// exit ;
33698: GO 33749
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33700: NOP4
33704: PUSH
33705: LD_INT 29
33707: PUSH
33708: LD_INT 30
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: IN
33715: PUSH
33716: NOP4
33720: PPUSH
33721: NOP4
33725: PPUSH
33726: NOP4
33730: PPUSH
33731: NOP4
33735: NOT
33736: AND
33737: IFFALSE 33741
// exit ;
33739: GO 33749
// result := true ;
33741: NOP4
33745: PUSH
33746: LD_INT 1
33748: ST_TO_ADDR
// end ;
33749: LD_VAR 0 6
33753: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33754: LD_INT 0
33756: PPUSH
33757: PPUSH
33758: PPUSH
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
// result = [ ] ;
33814: NOP4
33818: PUSH
33819: EMPTY
33820: ST_TO_ADDR
// temp_list = [ ] ;
33821: NOP4
33825: PUSH
33826: EMPTY
33827: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33828: NOP4
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: LD_INT 4
33847: PUSH
33848: LD_INT 5
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: IN
33859: NOT
33860: PUSH
33861: NOP4
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: IN
33876: PUSH
33877: NOP4
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 3
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: IN
33896: NOT
33897: AND
33898: OR
33899: IFFALSE 33903
// exit ;
33901: GO 52288
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33903: NOP4
33907: PUSH
33908: LD_INT 6
33910: PUSH
33911: LD_INT 7
33913: PUSH
33914: LD_INT 8
33916: PUSH
33917: LD_INT 13
33919: PUSH
33920: LD_INT 12
33922: PUSH
33923: LD_INT 15
33925: PUSH
33926: LD_INT 11
33928: PUSH
33929: LD_INT 14
33931: PUSH
33932: LD_INT 10
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: IN
33946: IFFALSE 33956
// btype = b_lab ;
33948: NOP4
33952: PUSH
33953: LD_INT 6
33955: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33956: NOP4
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: IN
33975: NOT
33976: PUSH
33977: NOP4
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: LD_INT 6
33996: PUSH
33997: LD_INT 36
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: LD_INT 5
34005: PUSH
34006: LD_INT 31
34008: PUSH
34009: LD_INT 32
34011: PUSH
34012: LD_INT 33
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: IN
34028: NOT
34029: PUSH
34030: NOP4
34034: PUSH
34035: LD_INT 1
34037: EQUAL
34038: AND
34039: OR
34040: PUSH
34041: NOP4
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: IN
34056: NOT
34057: PUSH
34058: NOP4
34062: PUSH
34063: LD_INT 2
34065: EQUAL
34066: AND
34067: OR
34068: IFFALSE 34078
// mode = 0 ;
34070: NOP4
34074: PUSH
34075: LD_INT 0
34077: ST_TO_ADDR
// case mode of 0 :
34078: NOP4
34082: PUSH
34083: LD_INT 0
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 45544
34091: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34092: NOP4
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34285: NOP4
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: NEG
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 3
34453: NEG
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34481: NOP4
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: NEG
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 3
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34680: NOP4
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 3
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34876: NOP4
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: NEG
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35069: NOP4
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: LD_INT 3
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35262: NOP4
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: NEG
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: LD_INT 2
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35492: NOP4
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: LD_INT 2
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 2
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: LD_INT 2
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35722: NOP4
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35952: NOP4
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36182: NOP4
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36412: NOP4
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36642: NOP4
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: LD_INT 3
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: LD_INT 3
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36922: NOP4
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37198: NOP4
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 3
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37472: NOP4
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37748: NOP4
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38028: NOP4
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38310: NOP4
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 3
38554: NEG
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38589: NOP4
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 3
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 3
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38867: NOP4
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: LD_INT 3
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 3
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: NEG
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39145: NOP4
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 3
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 3
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 3
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39423: NOP4
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: LD_INT 3
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 3
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39702: NOP4
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39982: NOP4
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40094: NOP4
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40206: NOP4
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40318: NOP4
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40430: NOP4
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40542: NOP4
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40654: NOP4
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: LD_INT 3
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: LD_INT 3
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41004: NOP4
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: LD_INT 3
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 3
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: LD_INT 3
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41354: NOP4
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 3
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41702: NOP4
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: LD_INT 3
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: NEG
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 3
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 3
41999: NEG
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42052: NOP4
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 3
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 3
42361: NEG
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42402: NOP4
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42750: NOP4
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42901: NOP4
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43048: NOP4
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43192: NOP4
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43336: NOP4
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43483: NOP4
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43634: NOP4
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43864: NOP4
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44094: NOP4
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44324: NOP4
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44554: NOP4
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44784: NOP4
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45014: NOP4
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45102: NOP4
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45190: NOP4
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45278: NOP4
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45366: NOP4
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45454: NOP4
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// end ; 1 :
45542: GO 51439
45544: LD_INT 1
45546: DOUBLE
45547: EQUAL
45548: IFTRUE 45552
45550: GO 48175
45552: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45553: NOP4
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45597: NOP4
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: LIST
45637: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45638: NOP4
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45678: NOP4
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45719: NOP4
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45763: NOP4
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 3
45794: NEG
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45809: NOP4
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45853: NOP4
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45894: NOP4
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45934: NOP4
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45975: NOP4
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46019: NOP4
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46065: NOP4
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46109: NOP4
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 4
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46150: NOP4
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 4
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: LD_INT 4
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46190: NOP4
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46231: NOP4
46235: PUSH
46236: LD_INT 3
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 4
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46275: NOP4
46279: PUSH
46280: LD_INT 3
46282: NEG
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: LD_INT 4
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 4
46306: NEG
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46321: NOP4
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 4
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 4
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 5
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 5
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 4
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 6
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 6
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 5
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46476: NOP4
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 4
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 4
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 5
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 5
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 5
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 6
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 6
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46619: NOP4
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 4
46666: PUSH
46667: LD_INT 4
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 4
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 5
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 5
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: PUSH
46707: LD_INT 5
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 6
46716: PUSH
46717: LD_INT 5
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 6
46726: PUSH
46727: LD_INT 6
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 5
46736: PUSH
46737: LD_INT 6
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46758: NOP4
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 3
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 4
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 4
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 5
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 4
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 6
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 6
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 5
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46901: NOP4
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: NEG
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 5
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 5
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 5
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 6
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 6
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47056: NOP4
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 3
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 3
47075: NEG
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 4
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 4
47111: NEG
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 4
47123: NEG
47124: PUSH
47125: LD_INT 4
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: NEG
47136: PUSH
47137: LD_INT 5
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 5
47147: NEG
47148: PUSH
47149: LD_INT 4
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 5
47159: NEG
47160: PUSH
47161: LD_INT 5
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 5
47171: NEG
47172: PUSH
47173: LD_INT 6
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 6
47183: NEG
47184: PUSH
47185: LD_INT 5
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 6
47195: NEG
47196: PUSH
47197: LD_INT 6
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47219: NOP4
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47263: NOP4
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47304: NOP4
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47344: NOP4
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47385: NOP4
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47429: NOP4
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47475: NOP4
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47508: NOP4
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47539: NOP4
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47568: NOP4
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47597: NOP4
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47628: NOP4
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47661: NOP4
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47705: NOP4
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47746: NOP4
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47786: NOP4
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47827: NOP4
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47871: NOP4
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47917: NOP4
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47961: NOP4
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48002: NOP4
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48042: NOP4
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48083: NOP4
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48127: NOP4
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// end ; 2 :
48173: GO 51439
48175: LD_INT 2
48177: DOUBLE
48178: EQUAL
48179: IFTRUE 48183
48181: GO 51438
48183: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48184: NOP4
48188: PUSH
48189: LD_INT 4
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 4
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 5
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 5
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 4
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 5
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 4
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 4
48314: PUSH
48315: LD_INT 4
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: LD_INT 4
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 4
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 5
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 4
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 5
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 4
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 4
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 4
48569: NEG
48570: PUSH
48571: LD_INT 4
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: LD_INT 5
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: NEG
48594: PUSH
48595: LD_INT 4
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 4
48617: NEG
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 5
48629: NEG
48630: PUSH
48631: LD_INT 4
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 5
48641: NEG
48642: PUSH
48643: LD_INT 5
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 5
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 5
48665: NEG
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48722: NOP4
48726: PUSH
48727: LD_INT 4
48729: PUSH
48730: LD_INT 4
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 5
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 5
48759: PUSH
48760: LD_INT 5
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 4
48769: PUSH
48770: LD_INT 5
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: LD_INT 4
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 5
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 5
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 4
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 4
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 4
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 4
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 5
48968: NEG
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 5
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 5
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: LD_INT 4
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 4
49074: NEG
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 4
49086: NEG
49087: PUSH
49088: LD_INT 4
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 4
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 4
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 4
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 5
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 4
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 5
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 5
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49269: NOP4
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 4
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 4
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 5
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 5
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 4
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 5
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 4
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 4
49471: NEG
49472: PUSH
49473: LD_INT 4
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: NEG
49484: PUSH
49485: LD_INT 5
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 4
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: NEG
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 5
49531: NEG
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 5
49543: NEG
49544: PUSH
49545: LD_INT 5
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: LD_INT 5
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 5
49567: NEG
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 4
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 3
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 4
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 4
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 4
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 4
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 5
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 5
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 4
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 5
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49819: NOP4
49823: PUSH
49824: LD_INT 4
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 4
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 5
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 5
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 5
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 4
49988: NEG
49989: PUSH
49990: LD_INT 3
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 4
50000: NEG
50001: PUSH
50002: LD_INT 4
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 4
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 4
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 4
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 5
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 4
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 4
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 5
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 4
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 4
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 4
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 4
50231: PUSH
50232: LD_INT 4
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 4
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 5
50251: PUSH
50252: LD_INT 4
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: LD_INT 5
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 4
50271: PUSH
50272: LD_INT 5
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: LD_INT 4
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 5
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: LD_INT 5
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50366: NOP4
50370: PUSH
50371: LD_INT 4
50373: NEG
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: NEG
50386: PUSH
50387: LD_INT 5
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 4
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 5
50433: NEG
50434: PUSH
50435: LD_INT 4
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 5
50445: NEG
50446: PUSH
50447: LD_INT 5
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 5
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: NEG
50470: PUSH
50471: LD_INT 3
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 4
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 4
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 4
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 5
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 5
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: LD_INT 4
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: LD_INT 4
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 4
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 4
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 4
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 5
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 5
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 4
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 5
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50904: NOP4
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 4
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 5
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 4
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 4
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 5
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 5
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 4
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 4
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: LD_INT 5
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 4
51146: PUSH
51147: LD_INT 5
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 4
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 5
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 4
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 5
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 5
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 5
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// end ; end ;
51436: GO 51439
51438: POP
// case btype of b_depot , b_warehouse :
51439: NOP4
51443: PUSH
51444: LD_INT 0
51446: DOUBLE
51447: EQUAL
51448: IFTRUE 51458
51450: LD_INT 1
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51458
51456: GO 51659
51458: POP
// case nation of nation_american :
51459: NOP4
51463: PUSH
51464: LD_INT 1
51466: DOUBLE
51467: EQUAL
51468: IFTRUE 51472
51470: GO 51528
51472: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51473: NOP4
51477: PUSH
51478: NOP4
51482: PUSH
51483: NOP4
51487: PUSH
51488: NOP4
51492: PUSH
51493: NOP4
51497: PUSH
51498: NOP4
51502: PUSH
51503: NOP4
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: PUSH
51516: NOP4
51520: PUSH
51521: LD_INT 1
51523: PLUS
51524: ARRAY
51525: ST_TO_ADDR
51526: GO 51657
51528: LD_INT 2
51530: DOUBLE
51531: EQUAL
51532: IFTRUE 51536
51534: GO 51592
51536: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51537: NOP4
51541: PUSH
51542: NOP4
51546: PUSH
51547: NOP4
51551: PUSH
51552: NOP4
51556: PUSH
51557: NOP4
51561: PUSH
51562: NOP4
51566: PUSH
51567: NOP4
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: PUSH
51580: NOP4
51584: PUSH
51585: LD_INT 1
51587: PLUS
51588: ARRAY
51589: ST_TO_ADDR
51590: GO 51657
51592: LD_INT 3
51594: DOUBLE
51595: EQUAL
51596: IFTRUE 51600
51598: GO 51656
51600: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51601: NOP4
51605: PUSH
51606: NOP4
51610: PUSH
51611: NOP4
51615: PUSH
51616: NOP4
51620: PUSH
51621: NOP4
51625: PUSH
51626: NOP4
51630: PUSH
51631: NOP4
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: PUSH
51644: NOP4
51648: PUSH
51649: LD_INT 1
51651: PLUS
51652: ARRAY
51653: ST_TO_ADDR
51654: GO 51657
51656: POP
51657: GO 52206
51659: LD_INT 2
51661: DOUBLE
51662: EQUAL
51663: IFTRUE 51673
51665: LD_INT 3
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51729
51673: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51674: NOP4
51678: PUSH
51679: NOP4
51683: PUSH
51684: NOP4
51688: PUSH
51689: NOP4
51693: PUSH
51694: NOP4
51698: PUSH
51699: NOP4
51703: PUSH
51704: NOP4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: PUSH
51717: NOP4
51721: PUSH
51722: LD_INT 1
51724: PLUS
51725: ARRAY
51726: ST_TO_ADDR
51727: GO 52206
51729: LD_INT 16
51731: DOUBLE
51732: EQUAL
51733: IFTRUE 51785
51735: LD_INT 17
51737: DOUBLE
51738: EQUAL
51739: IFTRUE 51785
51741: LD_INT 18
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51785
51747: LD_INT 19
51749: DOUBLE
51750: EQUAL
51751: IFTRUE 51785
51753: LD_INT 20
51755: DOUBLE
51756: EQUAL
51757: IFTRUE 51785
51759: LD_INT 21
51761: DOUBLE
51762: EQUAL
51763: IFTRUE 51785
51765: LD_INT 23
51767: DOUBLE
51768: EQUAL
51769: IFTRUE 51785
51771: LD_INT 24
51773: DOUBLE
51774: EQUAL
51775: IFTRUE 51785
51777: LD_INT 25
51779: DOUBLE
51780: EQUAL
51781: IFTRUE 51785
51783: GO 51841
51785: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51786: NOP4
51790: PUSH
51791: NOP4
51795: PUSH
51796: NOP4
51800: PUSH
51801: NOP4
51805: PUSH
51806: NOP4
51810: PUSH
51811: NOP4
51815: PUSH
51816: NOP4
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: PUSH
51829: NOP4
51833: PUSH
51834: LD_INT 1
51836: PLUS
51837: ARRAY
51838: ST_TO_ADDR
51839: GO 52206
51841: LD_INT 6
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51897
51847: LD_INT 7
51849: DOUBLE
51850: EQUAL
51851: IFTRUE 51897
51853: LD_INT 8
51855: DOUBLE
51856: EQUAL
51857: IFTRUE 51897
51859: LD_INT 13
51861: DOUBLE
51862: EQUAL
51863: IFTRUE 51897
51865: LD_INT 12
51867: DOUBLE
51868: EQUAL
51869: IFTRUE 51897
51871: LD_INT 15
51873: DOUBLE
51874: EQUAL
51875: IFTRUE 51897
51877: LD_INT 11
51879: DOUBLE
51880: EQUAL
51881: IFTRUE 51897
51883: LD_INT 14
51885: DOUBLE
51886: EQUAL
51887: IFTRUE 51897
51889: LD_INT 10
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51953
51897: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51898: NOP4
51902: PUSH
51903: NOP4
51907: PUSH
51908: NOP4
51912: PUSH
51913: NOP4
51917: PUSH
51918: NOP4
51922: PUSH
51923: NOP4
51927: PUSH
51928: NOP4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: PUSH
51941: NOP4
51945: PUSH
51946: LD_INT 1
51948: PLUS
51949: ARRAY
51950: ST_TO_ADDR
51951: GO 52206
51953: LD_INT 36
51955: DOUBLE
51956: EQUAL
51957: IFTRUE 51961
51959: GO 52017
51961: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51962: NOP4
51966: PUSH
51967: NOP4
51971: PUSH
51972: NOP4
51976: PUSH
51977: NOP4
51981: PUSH
51982: NOP4
51986: PUSH
51987: NOP4
51991: PUSH
51992: NOP4
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: NOP4
52009: PUSH
52010: LD_INT 1
52012: PLUS
52013: ARRAY
52014: ST_TO_ADDR
52015: GO 52206
52017: LD_INT 4
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52043
52023: LD_INT 5
52025: DOUBLE
52026: EQUAL
52027: IFTRUE 52043
52029: LD_INT 34
52031: DOUBLE
52032: EQUAL
52033: IFTRUE 52043
52035: LD_INT 37
52037: DOUBLE
52038: EQUAL
52039: IFTRUE 52043
52041: GO 52099
52043: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52044: NOP4
52048: PUSH
52049: NOP4
52053: PUSH
52054: NOP4
52058: PUSH
52059: NOP4
52063: PUSH
52064: NOP4
52068: PUSH
52069: NOP4
52073: PUSH
52074: NOP4
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: PUSH
52087: NOP4
52091: PUSH
52092: LD_INT 1
52094: PLUS
52095: ARRAY
52096: ST_TO_ADDR
52097: GO 52206
52099: LD_INT 31
52101: DOUBLE
52102: EQUAL
52103: IFTRUE 52149
52105: LD_INT 32
52107: DOUBLE
52108: EQUAL
52109: IFTRUE 52149
52111: LD_INT 33
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52149
52117: LD_INT 27
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52149
52123: LD_INT 26
52125: DOUBLE
52126: EQUAL
52127: IFTRUE 52149
52129: LD_INT 28
52131: DOUBLE
52132: EQUAL
52133: IFTRUE 52149
52135: LD_INT 29
52137: DOUBLE
52138: EQUAL
52139: IFTRUE 52149
52141: LD_INT 30
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52149
52147: GO 52205
52149: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52150: NOP4
52154: PUSH
52155: NOP4
52159: PUSH
52160: NOP4
52164: PUSH
52165: NOP4
52169: PUSH
52170: NOP4
52174: PUSH
52175: NOP4
52179: PUSH
52180: NOP4
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: NOP4
52197: PUSH
52198: LD_INT 1
52200: PLUS
52201: ARRAY
52202: ST_TO_ADDR
52203: GO 52206
52205: POP
// temp_list2 = [ ] ;
52206: NOP4
52210: PUSH
52211: EMPTY
52212: ST_TO_ADDR
// for i in temp_list do
52213: NOP4
52217: PUSH
52218: NOP4
52222: PUSH
52223: FOR_IN
52224: IFFALSE 52276
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52226: NOP4
52230: PUSH
52231: NOP4
52235: PUSH
52236: NOP4
52240: PUSH
52241: LD_INT 1
52243: ARRAY
52244: PUSH
52245: NOP4
52249: PLUS
52250: PUSH
52251: NOP4
52255: PUSH
52256: LD_INT 2
52258: ARRAY
52259: PUSH
52260: NOP4
52264: PLUS
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: ADD
52273: ST_TO_ADDR
52274: GO 52223
52276: POP
52277: POP
// result = temp_list2 ;
52278: NOP4
52282: PUSH
52283: NOP4
52287: ST_TO_ADDR
// end ;
52288: LD_VAR 0 7
52292: RET
// export function EnemyInRange ( unit , dist ) ; begin
52293: LD_INT 0
52295: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52296: NOP4
52300: PUSH
52301: NOP4
52305: PPUSH
52306: NOP4
52310: PPUSH
52311: NOP4
52315: PPUSH
52316: NOP4
52320: PPUSH
52321: NOP4
52325: PPUSH
52326: NOP4
52330: PPUSH
52331: NOP4
52335: PPUSH
52336: NOP4
52340: PUSH
52341: LD_INT 4
52343: ARRAY
52344: ST_TO_ADDR
// end ;
52345: LD_VAR 0 3
52349: RET
// export function PlayerSeeMe ( unit ) ; begin
52350: LD_INT 0
52352: PPUSH
// result := See ( your_side , unit ) ;
52353: NOP4
52357: PUSH
52358: NOP4
52362: PPUSH
52363: NOP4
52367: PPUSH
52368: NOP4
52372: ST_TO_ADDR
// end ;
52373: LD_VAR 0 2
52377: RET
// export function ReverseDir ( unit ) ; begin
52378: LD_INT 0
52380: PPUSH
// if not unit then
52381: NOP4
52385: NOT
52386: IFFALSE 52390
// exit ;
52388: GO 52436
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52390: NOP4
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: LD_INT 5
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: PUSH
52421: NOP4
52425: PPUSH
52426: NOP4
52430: PUSH
52431: LD_INT 1
52433: PLUS
52434: ARRAY
52435: ST_TO_ADDR
// end ;
52436: LD_VAR 0 2
52440: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52441: LD_INT 0
52443: PPUSH
52444: PPUSH
52445: PPUSH
52446: PPUSH
52447: PPUSH
// if not hexes then
52448: NOP4
52452: NOT
52453: IFFALSE 52457
// exit ;
52455: GO 52605
// dist := 9999 ;
52457: NOP4
52461: PUSH
52462: LD_INT 9999
52464: ST_TO_ADDR
// for i = 1 to hexes do
52465: NOP4
52469: PUSH
52470: DOUBLE
52471: LD_INT 1
52473: DEC
52474: ST_TO_ADDR
52475: NOP4
52479: PUSH
52480: FOR_TO
52481: IFFALSE 52593
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52483: NOP4
52487: PPUSH
52488: NOP4
52492: PUSH
52493: NOP4
52497: ARRAY
52498: PUSH
52499: LD_INT 1
52501: ARRAY
52502: PPUSH
52503: NOP4
52507: PUSH
52508: NOP4
52512: ARRAY
52513: PUSH
52514: LD_INT 2
52516: ARRAY
52517: PPUSH
52518: NOP4
52522: PUSH
52523: NOP4
52527: LESS
52528: IFFALSE 52591
// begin hex := hexes [ i ] ;
52530: NOP4
52534: PUSH
52535: NOP4
52539: PUSH
52540: NOP4
52544: ARRAY
52545: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52546: NOP4
52550: PUSH
52551: NOP4
52555: PPUSH
52556: NOP4
52560: PUSH
52561: NOP4
52565: ARRAY
52566: PUSH
52567: LD_INT 1
52569: ARRAY
52570: PPUSH
52571: NOP4
52575: PUSH
52576: NOP4
52580: ARRAY
52581: PUSH
52582: LD_INT 2
52584: ARRAY
52585: PPUSH
52586: NOP4
52590: ST_TO_ADDR
// end ; end ;
52591: GO 52480
52593: POP
52594: POP
// result := hex ;
52595: NOP4
52599: PUSH
52600: NOP4
52604: ST_TO_ADDR
// end ;
52605: LD_VAR 0 3
52609: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52610: LD_INT 0
52612: PPUSH
52613: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52614: NOP4
52618: NOT
52619: PUSH
52620: NOP4
52624: PUSH
52625: LD_INT 21
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 23
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PPUSH
52649: NOP4
52653: IN
52654: NOT
52655: OR
52656: IFFALSE 52660
// exit ;
52658: GO 52707
// for i = 1 to 3 do
52660: NOP4
52664: PUSH
52665: DOUBLE
52666: LD_INT 1
52668: DEC
52669: ST_TO_ADDR
52670: LD_INT 3
52672: PUSH
52673: FOR_TO
52674: IFFALSE 52705
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52676: NOP4
52680: PPUSH
52681: NOP4
52685: PPUSH
52686: NOP4
52690: PPUSH
52691: NOP4
52695: PPUSH
52696: LD_INT 1
52698: PPUSH
52699: NOP4
52703: GO 52673
52705: POP
52706: POP
// end ;
52707: LD_VAR 0 2
52711: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52712: LD_INT 0
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52720: NOP4
52724: NOT
52725: PUSH
52726: NOP4
52730: NOT
52731: OR
52732: PUSH
52733: NOP4
52737: PPUSH
52738: NOP4
52742: OR
52743: IFFALSE 52747
// exit ;
52745: GO 53188
// x := GetX ( enemy_unit ) ;
52747: NOP4
52751: PUSH
52752: NOP4
52756: PPUSH
52757: NOP4
52761: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52762: NOP4
52766: PUSH
52767: NOP4
52771: PPUSH
52772: NOP4
52776: ST_TO_ADDR
// if not x or not y then
52777: NOP4
52781: NOT
52782: PUSH
52783: NOP4
52787: NOT
52788: OR
52789: IFFALSE 52793
// exit ;
52791: GO 53188
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52793: NOP4
52797: PUSH
52798: NOP4
52802: PPUSH
52803: LD_INT 0
52805: PPUSH
52806: LD_INT 4
52808: PPUSH
52809: NOP4
52813: PUSH
52814: NOP4
52818: PPUSH
52819: LD_INT 0
52821: PPUSH
52822: LD_INT 4
52824: PPUSH
52825: NOP4
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: NOP4
52838: PPUSH
52839: LD_INT 1
52841: PPUSH
52842: LD_INT 4
52844: PPUSH
52845: NOP4
52849: PUSH
52850: NOP4
52854: PPUSH
52855: LD_INT 1
52857: PPUSH
52858: LD_INT 4
52860: PPUSH
52861: NOP4
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: NOP4
52874: PPUSH
52875: LD_INT 2
52877: PPUSH
52878: LD_INT 4
52880: PPUSH
52881: NOP4
52885: PUSH
52886: NOP4
52890: PPUSH
52891: LD_INT 2
52893: PPUSH
52894: LD_INT 4
52896: PPUSH
52897: NOP4
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: NOP4
52910: PPUSH
52911: LD_INT 3
52913: PPUSH
52914: LD_INT 4
52916: PPUSH
52917: NOP4
52921: PUSH
52922: NOP4
52926: PPUSH
52927: LD_INT 3
52929: PPUSH
52930: LD_INT 4
52932: PPUSH
52933: NOP4
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: NOP4
52946: PPUSH
52947: LD_INT 4
52949: PPUSH
52950: LD_INT 4
52952: PPUSH
52953: NOP4
52957: PUSH
52958: NOP4
52962: PPUSH
52963: LD_INT 4
52965: PPUSH
52966: LD_INT 4
52968: PPUSH
52969: NOP4
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: NOP4
52982: PPUSH
52983: LD_INT 5
52985: PPUSH
52986: LD_INT 4
52988: PPUSH
52989: NOP4
52993: PUSH
52994: NOP4
52998: PPUSH
52999: LD_INT 5
53001: PPUSH
53002: LD_INT 4
53004: PPUSH
53005: NOP4
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// for i = tmp downto 1 do
53022: NOP4
53026: PUSH
53027: DOUBLE
53028: NOP4
53032: INC
53033: ST_TO_ADDR
53034: LD_INT 1
53036: PUSH
53037: FOR_DOWNTO
53038: IFFALSE 53139
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53040: NOP4
53044: PUSH
53045: NOP4
53049: ARRAY
53050: PUSH
53051: LD_INT 1
53053: ARRAY
53054: PPUSH
53055: NOP4
53059: PUSH
53060: NOP4
53064: ARRAY
53065: PUSH
53066: LD_INT 2
53068: ARRAY
53069: PPUSH
53070: NOP4
53074: NOT
53075: PUSH
53076: NOP4
53080: PUSH
53081: NOP4
53085: ARRAY
53086: PUSH
53087: LD_INT 1
53089: ARRAY
53090: PPUSH
53091: NOP4
53095: PUSH
53096: NOP4
53100: ARRAY
53101: PUSH
53102: LD_INT 2
53104: ARRAY
53105: PPUSH
53106: NOP4
53110: PUSH
53111: LD_INT 0
53113: NONEQUAL
53114: OR
53115: IFFALSE 53137
// tmp := Delete ( tmp , i ) ;
53117: NOP4
53121: PUSH
53122: NOP4
53126: PPUSH
53127: NOP4
53131: PPUSH
53132: NOP4
53136: ST_TO_ADDR
53137: GO 53037
53139: POP
53140: POP
// j := GetClosestHex ( unit , tmp ) ;
53141: NOP4
53145: PUSH
53146: NOP4
53150: PPUSH
53151: NOP4
53155: PPUSH
53156: NOP4
53160: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53161: NOP4
53165: PPUSH
53166: NOP4
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PPUSH
53175: NOP4
53179: PUSH
53180: LD_INT 2
53182: ARRAY
53183: PPUSH
53184: NOP4
// end ;
53188: LD_VAR 0 3
53192: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53193: LD_INT 0
53195: PPUSH
53196: PPUSH
53197: PPUSH
// uc_side = 0 ;
53198: LD_ADDR_OWVAR 20
53202: PUSH
53203: LD_INT 0
53205: ST_TO_ADDR
// uc_nation = 0 ;
53206: LD_ADDR_OWVAR 21
53210: PUSH
53211: LD_INT 0
53213: ST_TO_ADDR
// InitHc ;
53214: NOP4
// InitVc ;
53218: NOP4
// if mastodonts then
53222: NOP4
53226: IFFALSE 53293
// for i = 1 to mastodonts do
53228: NOP4
53232: PUSH
53233: DOUBLE
53234: LD_INT 1
53236: DEC
53237: ST_TO_ADDR
53238: NOP4
53242: PUSH
53243: FOR_TO
53244: IFFALSE 53291
// begin vc_chassis := 31 ;
53246: LD_ADDR_OWVAR 37
53250: PUSH
53251: LD_INT 31
53253: ST_TO_ADDR
// vc_control := control_rider ;
53254: LD_ADDR_OWVAR 38
53258: PUSH
53259: LD_INT 4
53261: ST_TO_ADDR
// animal := CreateVehicle ;
53262: NOP4
53266: PUSH
53267: NOP4
53271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53272: NOP4
53276: PPUSH
53277: NOP4
53281: PPUSH
53282: LD_INT 0
53284: PPUSH
53285: NOP4
// end ;
53289: GO 53243
53291: POP
53292: POP
// if horses then
53293: NOP4
53297: IFFALSE 53364
// for i = 1 to horses do
53299: NOP4
53303: PUSH
53304: DOUBLE
53305: LD_INT 1
53307: DEC
53308: ST_TO_ADDR
53309: NOP4
53313: PUSH
53314: FOR_TO
53315: IFFALSE 53362
// begin hc_class := 21 ;
53317: LD_ADDR_OWVAR 28
53321: PUSH
53322: LD_INT 21
53324: ST_TO_ADDR
// hc_gallery :=  ;
53325: LD_ADDR_OWVAR 33
53329: PUSH
53330: LD_STRING 
53332: ST_TO_ADDR
// animal := CreateHuman ;
53333: NOP4
53337: PUSH
53338: NOP4
53342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53343: NOP4
53347: PPUSH
53348: NOP4
53352: PPUSH
53353: LD_INT 0
53355: PPUSH
53356: NOP4
// end ;
53360: GO 53314
53362: POP
53363: POP
// if birds then
53364: NOP4
53368: IFFALSE 53435
// for i = 1 to birds do
53370: NOP4
53374: PUSH
53375: DOUBLE
53376: LD_INT 1
53378: DEC
53379: ST_TO_ADDR
53380: NOP4
53384: PUSH
53385: FOR_TO
53386: IFFALSE 53433
// begin hc_class = 18 ;
53388: LD_ADDR_OWVAR 28
53392: PUSH
53393: LD_INT 18
53395: ST_TO_ADDR
// hc_gallery =  ;
53396: LD_ADDR_OWVAR 33
53400: PUSH
53401: LD_STRING 
53403: ST_TO_ADDR
// animal := CreateHuman ;
53404: NOP4
53408: PUSH
53409: NOP4
53413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53414: NOP4
53418: PPUSH
53419: NOP4
53423: PPUSH
53424: LD_INT 0
53426: PPUSH
53427: NOP4
// end ;
53431: GO 53385
53433: POP
53434: POP
// if tigers then
53435: NOP4
53439: IFFALSE 53523
// for i = 1 to tigers do
53441: NOP4
53445: PUSH
53446: DOUBLE
53447: LD_INT 1
53449: DEC
53450: ST_TO_ADDR
53451: NOP4
53455: PUSH
53456: FOR_TO
53457: IFFALSE 53521
// begin hc_class = class_tiger ;
53459: LD_ADDR_OWVAR 28
53463: PUSH
53464: LD_INT 14
53466: ST_TO_ADDR
// hc_gallery =  ;
53467: LD_ADDR_OWVAR 33
53471: PUSH
53472: LD_STRING 
53474: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53475: LD_ADDR_OWVAR 35
53479: PUSH
53480: LD_INT 7
53482: NEG
53483: PPUSH
53484: LD_INT 7
53486: PPUSH
53487: NOP4
53491: ST_TO_ADDR
// animal := CreateHuman ;
53492: NOP4
53496: PUSH
53497: NOP4
53501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53502: NOP4
53506: PPUSH
53507: NOP4
53511: PPUSH
53512: LD_INT 0
53514: PPUSH
53515: NOP4
// end ;
53519: GO 53456
53521: POP
53522: POP
// if apemans then
53523: NOP4
53527: IFFALSE 53650
// for i = 1 to apemans do
53529: NOP4
53533: PUSH
53534: DOUBLE
53535: LD_INT 1
53537: DEC
53538: ST_TO_ADDR
53539: NOP4
53543: PUSH
53544: FOR_TO
53545: IFFALSE 53648
// begin hc_class = class_apeman ;
53547: LD_ADDR_OWVAR 28
53551: PUSH
53552: LD_INT 12
53554: ST_TO_ADDR
// hc_gallery =  ;
53555: LD_ADDR_OWVAR 33
53559: PUSH
53560: LD_STRING 
53562: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53563: LD_ADDR_OWVAR 35
53567: PUSH
53568: LD_INT 5
53570: NEG
53571: PPUSH
53572: LD_INT 5
53574: PPUSH
53575: NOP4
53579: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53580: LD_ADDR_OWVAR 31
53584: PUSH
53585: LD_INT 1
53587: PPUSH
53588: LD_INT 3
53590: PPUSH
53591: NOP4
53595: PUSH
53596: LD_INT 1
53598: PPUSH
53599: LD_INT 3
53601: PPUSH
53602: NOP4
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// animal := CreateHuman ;
53619: NOP4
53623: PUSH
53624: NOP4
53628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53629: NOP4
53633: PPUSH
53634: NOP4
53638: PPUSH
53639: LD_INT 0
53641: PPUSH
53642: NOP4
// end ;
53646: GO 53544
53648: POP
53649: POP
// if enchidnas then
53650: NOP4
53654: IFFALSE 53721
// for i = 1 to enchidnas do
53656: NOP4
53660: PUSH
53661: DOUBLE
53662: LD_INT 1
53664: DEC
53665: ST_TO_ADDR
53666: NOP4
53670: PUSH
53671: FOR_TO
53672: IFFALSE 53719
// begin hc_class = 13 ;
53674: LD_ADDR_OWVAR 28
53678: PUSH
53679: LD_INT 13
53681: ST_TO_ADDR
// hc_gallery =  ;
53682: LD_ADDR_OWVAR 33
53686: PUSH
53687: LD_STRING 
53689: ST_TO_ADDR
// animal := CreateHuman ;
53690: NOP4
53694: PUSH
53695: NOP4
53699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53700: NOP4
53704: PPUSH
53705: NOP4
53709: PPUSH
53710: LD_INT 0
53712: PPUSH
53713: NOP4
// end ;
53717: GO 53671
53719: POP
53720: POP
// if fishes then
53721: NOP4
53725: IFFALSE 53792
// for i = 1 to fishes do
53727: NOP4
53731: PUSH
53732: DOUBLE
53733: LD_INT 1
53735: DEC
53736: ST_TO_ADDR
53737: NOP4
53741: PUSH
53742: FOR_TO
53743: IFFALSE 53790
// begin hc_class = 20 ;
53745: LD_ADDR_OWVAR 28
53749: PUSH
53750: LD_INT 20
53752: ST_TO_ADDR
// hc_gallery =  ;
53753: LD_ADDR_OWVAR 33
53757: PUSH
53758: LD_STRING 
53760: ST_TO_ADDR
// animal := CreateHuman ;
53761: NOP4
53765: PUSH
53766: NOP4
53770: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53771: NOP4
53775: PPUSH
53776: NOP4
53780: PPUSH
53781: LD_INT 0
53783: PPUSH
53784: NOP4
// end ;
53788: GO 53742
53790: POP
53791: POP
// end ;
53792: LD_VAR 0 10
53796: RET
// export function WantHeal ( sci , unit ) ; begin
53797: LD_INT 0
53799: PPUSH
// if GetTaskList ( sci ) > 0 then
53800: NOP4
53804: PPUSH
53805: NOP4
53809: PUSH
53810: LD_INT 0
53812: GREATER
53813: IFFALSE 53883
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53815: NOP4
53819: PPUSH
53820: NOP4
53824: PUSH
53825: LD_INT 1
53827: ARRAY
53828: PUSH
53829: LD_INT 1
53831: ARRAY
53832: PUSH
53833: LD_STRING l
53835: EQUAL
53836: PUSH
53837: NOP4
53841: PPUSH
53842: NOP4
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PUSH
53851: LD_INT 4
53853: ARRAY
53854: PUSH
53855: NOP4
53859: EQUAL
53860: AND
53861: IFFALSE 53873
// result := true else
53863: NOP4
53867: PUSH
53868: LD_INT 1
53870: ST_TO_ADDR
53871: GO 53881
// result := false ;
53873: NOP4
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// end else
53881: GO 53891
// result := false ;
53883: NOP4
53887: PUSH
53888: LD_INT 0
53890: ST_TO_ADDR
// end ;
53891: LD_VAR 0 3
53895: RET
// export function HealTarget ( sci ) ; begin
53896: LD_INT 0
53898: PPUSH
// if not sci then
53899: NOP4
53903: NOT
53904: IFFALSE 53908
// exit ;
53906: GO 53973
// result := 0 ;
53908: NOP4
53912: PUSH
53913: LD_INT 0
53915: ST_TO_ADDR
// if GetTaskList ( sci ) then
53916: NOP4
53920: PPUSH
53921: NOP4
53925: IFFALSE 53973
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53927: NOP4
53931: PPUSH
53932: NOP4
53936: PUSH
53937: LD_INT 1
53939: ARRAY
53940: PUSH
53941: LD_INT 1
53943: ARRAY
53944: PUSH
53945: LD_STRING l
53947: EQUAL
53948: IFFALSE 53973
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53950: NOP4
53954: PUSH
53955: NOP4
53959: PPUSH
53960: NOP4
53964: PUSH
53965: LD_INT 1
53967: ARRAY
53968: PUSH
53969: LD_INT 4
53971: ARRAY
53972: ST_TO_ADDR
// end ;
53973: LD_VAR 0 2
53977: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
53978: LD_INT 0
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
53987: PPUSH
53988: PPUSH
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
53995: PPUSH
53996: PPUSH
53997: PPUSH
53998: PPUSH
53999: PPUSH
54000: PPUSH
54001: PPUSH
54002: PPUSH
54003: PPUSH
54004: PPUSH
54005: PPUSH
54006: PPUSH
54007: PPUSH
54008: PPUSH
54009: PPUSH
54010: PPUSH
54011: PPUSH
54012: PPUSH
54013: PPUSH
// if not list then
54014: NOP4
54018: NOT
54019: IFFALSE 54023
// exit ;
54021: GO 58649
// base := list [ 1 ] ;
54023: NOP4
54027: PUSH
54028: NOP4
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: ST_TO_ADDR
// group := list [ 2 ] ;
54037: NOP4
54041: PUSH
54042: NOP4
54046: PUSH
54047: LD_INT 2
54049: ARRAY
54050: ST_TO_ADDR
// path := list [ 3 ] ;
54051: NOP4
54055: PUSH
54056: NOP4
54060: PUSH
54061: LD_INT 3
54063: ARRAY
54064: ST_TO_ADDR
// flags := list [ 4 ] ;
54065: NOP4
54069: PUSH
54070: NOP4
54074: PUSH
54075: LD_INT 4
54077: ARRAY
54078: ST_TO_ADDR
// mined := [ ] ;
54079: NOP4
54083: PUSH
54084: EMPTY
54085: ST_TO_ADDR
// bombed := [ ] ;
54086: NOP4
54090: PUSH
54091: EMPTY
54092: ST_TO_ADDR
// healers := [ ] ;
54093: NOP4
54097: PUSH
54098: EMPTY
54099: ST_TO_ADDR
// to_heal := [ ] ;
54100: NOP4
54104: PUSH
54105: EMPTY
54106: ST_TO_ADDR
// repairs := [ ] ;
54107: NOP4
54111: PUSH
54112: EMPTY
54113: ST_TO_ADDR
// to_repair := [ ] ;
54114: NOP4
54118: PUSH
54119: EMPTY
54120: ST_TO_ADDR
// if not group or not path then
54121: NOP4
54125: NOT
54126: PUSH
54127: NOP4
54131: NOT
54132: OR
54133: IFFALSE 54137
// exit ;
54135: GO 58649
// side := GetSide ( group [ 1 ] ) ;
54137: NOP4
54141: PUSH
54142: NOP4
54146: PUSH
54147: LD_INT 1
54149: ARRAY
54150: PPUSH
54151: NOP4
54155: ST_TO_ADDR
// if flags then
54156: NOP4
54160: IFFALSE 54304
// begin f_ignore_area := flags [ 1 ] ;
54162: NOP4
54166: PUSH
54167: NOP4
54171: PUSH
54172: LD_INT 1
54174: ARRAY
54175: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54176: NOP4
54180: PUSH
54181: NOP4
54185: PUSH
54186: LD_INT 2
54188: ARRAY
54189: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54190: NOP4
54194: PUSH
54195: NOP4
54199: PUSH
54200: LD_INT 3
54202: ARRAY
54203: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54204: NOP4
54208: PUSH
54209: NOP4
54213: PUSH
54214: LD_INT 4
54216: ARRAY
54217: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54218: NOP4
54222: PUSH
54223: NOP4
54227: PUSH
54228: LD_INT 5
54230: ARRAY
54231: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54232: NOP4
54236: PUSH
54237: NOP4
54241: PUSH
54242: LD_INT 6
54244: ARRAY
54245: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54246: NOP4
54250: PUSH
54251: NOP4
54255: PUSH
54256: LD_INT 7
54258: ARRAY
54259: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54260: NOP4
54264: PUSH
54265: NOP4
54269: PUSH
54270: LD_INT 8
54272: ARRAY
54273: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54274: NOP4
54278: PUSH
54279: NOP4
54283: PUSH
54284: LD_INT 9
54286: ARRAY
54287: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54288: NOP4
54292: PUSH
54293: NOP4
54297: PUSH
54298: LD_INT 10
54300: ARRAY
54301: ST_TO_ADDR
// end else
54302: GO 54384
// begin f_ignore_area := false ;
54304: NOP4
54308: PUSH
54309: LD_INT 0
54311: ST_TO_ADDR
// f_capture := false ;
54312: NOP4
54316: PUSH
54317: LD_INT 0
54319: ST_TO_ADDR
// f_ignore_civ := false ;
54320: NOP4
54324: PUSH
54325: LD_INT 0
54327: ST_TO_ADDR
// f_murder := false ;
54328: NOP4
54332: PUSH
54333: LD_INT 0
54335: ST_TO_ADDR
// f_mines := false ;
54336: NOP4
54340: PUSH
54341: LD_INT 0
54343: ST_TO_ADDR
// f_repair := false ;
54344: NOP4
54348: PUSH
54349: LD_INT 0
54351: ST_TO_ADDR
// f_heal := false ;
54352: NOP4
54356: PUSH
54357: LD_INT 0
54359: ST_TO_ADDR
// f_spacetime := false ;
54360: NOP4
54364: PUSH
54365: LD_INT 0
54367: ST_TO_ADDR
// f_attack_depot := false ;
54368: NOP4
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
// f_crawl := false ;
54376: NOP4
54380: PUSH
54381: LD_INT 0
54383: ST_TO_ADDR
// end ; if f_heal then
54384: NOP4
54388: IFFALSE 54415
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54390: NOP4
54394: PUSH
54395: NOP4
54399: PPUSH
54400: LD_INT 25
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PPUSH
54410: NOP4
54414: ST_TO_ADDR
// if f_repair then
54415: NOP4
54419: IFFALSE 54446
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54421: NOP4
54425: PUSH
54426: NOP4
54430: PPUSH
54431: LD_INT 25
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PPUSH
54441: NOP4
54445: ST_TO_ADDR
// units_path := [ ] ;
54446: NOP4
54450: PUSH
54451: EMPTY
54452: ST_TO_ADDR
// for i = 1 to group do
54453: NOP4
54457: PUSH
54458: DOUBLE
54459: LD_INT 1
54461: DEC
54462: ST_TO_ADDR
54463: NOP4
54467: PUSH
54468: FOR_TO
54469: IFFALSE 54498
// units_path := Replace ( units_path , i , path ) ;
54471: NOP4
54475: PUSH
54476: NOP4
54480: PPUSH
54481: NOP4
54485: PPUSH
54486: NOP4
54490: PPUSH
54491: NOP4
54495: ST_TO_ADDR
54496: GO 54468
54498: POP
54499: POP
// repeat for i = group downto 1 do
54500: NOP4
54504: PUSH
54505: DOUBLE
54506: NOP4
54510: INC
54511: ST_TO_ADDR
54512: LD_INT 1
54514: PUSH
54515: FOR_DOWNTO
54516: IFFALSE 58612
// begin wait ( 5 ) ;
54518: LD_INT 5
54520: PPUSH
54521: NOP4
// tmp := [ ] ;
54525: NOP4
54529: PUSH
54530: EMPTY
54531: ST_TO_ADDR
// attacking := false ;
54532: NOP4
54536: PUSH
54537: LD_INT 0
54539: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
54540: NOP4
54544: PUSH
54545: NOP4
54549: ARRAY
54550: PPUSH
54551: NOP4
54555: PUSH
54556: NOP4
54560: PUSH
54561: NOP4
54565: ARRAY
54566: NOT
54567: OR
54568: IFFALSE 54677
// begin if GetType ( group [ i ] ) = unit_human then
54570: NOP4
54574: PUSH
54575: NOP4
54579: ARRAY
54580: PPUSH
54581: NOP4
54585: PUSH
54586: LD_INT 1
54588: EQUAL
54589: IFFALSE 54635
// begin to_heal := to_heal diff group [ i ] ;
54591: NOP4
54595: PUSH
54596: NOP4
54600: PUSH
54601: NOP4
54605: PUSH
54606: NOP4
54610: ARRAY
54611: DIFF
54612: ST_TO_ADDR
// healers := healers diff group [ i ] ;
54613: NOP4
54617: PUSH
54618: NOP4
54622: PUSH
54623: NOP4
54627: PUSH
54628: NOP4
54632: ARRAY
54633: DIFF
54634: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
54635: NOP4
54639: PUSH
54640: NOP4
54644: PPUSH
54645: NOP4
54649: PPUSH
54650: NOP4
54654: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
54655: NOP4
54659: PUSH
54660: NOP4
54664: PPUSH
54665: NOP4
54669: PPUSH
54670: NOP4
54674: ST_TO_ADDR
// continue ;
54675: GO 54515
// end ; if f_repair then
54677: NOP4
54681: IFFALSE 55170
// begin if GetType ( group [ i ] ) = unit_vehicle then
54683: NOP4
54687: PUSH
54688: NOP4
54692: ARRAY
54693: PPUSH
54694: NOP4
54698: PUSH
54699: LD_INT 2
54701: EQUAL
54702: IFFALSE 54892
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
54704: NOP4
54708: PUSH
54709: NOP4
54713: ARRAY
54714: PPUSH
54715: NOP4
54719: PUSH
54720: LD_INT 700
54722: LESS
54723: PUSH
54724: NOP4
54728: PUSH
54729: NOP4
54733: ARRAY
54734: PUSH
54735: NOP4
54739: IN
54740: NOT
54741: AND
54742: IFFALSE 54766
// to_repair := to_repair union group [ i ] ;
54744: NOP4
54748: PUSH
54749: NOP4
54753: PUSH
54754: NOP4
54758: PUSH
54759: NOP4
54763: ARRAY
54764: UNION
54765: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
54766: NOP4
54770: PUSH
54771: NOP4
54775: ARRAY
54776: PPUSH
54777: NOP4
54781: PUSH
54782: LD_INT 1000
54784: EQUAL
54785: PUSH
54786: NOP4
54790: PUSH
54791: NOP4
54795: ARRAY
54796: PUSH
54797: NOP4
54801: IN
54802: AND
54803: IFFALSE 54827
// to_repair := to_repair diff group [ i ] ;
54805: NOP4
54809: PUSH
54810: NOP4
54814: PUSH
54815: NOP4
54819: PUSH
54820: NOP4
54824: ARRAY
54825: DIFF
54826: ST_TO_ADDR
// if group [ i ] in to_repair then
54827: NOP4
54831: PUSH
54832: NOP4
54836: ARRAY
54837: PUSH
54838: NOP4
54842: IN
54843: IFFALSE 54890
// begin if not IsInArea ( group [ i ] , f_repair ) then
54845: NOP4
54849: PUSH
54850: NOP4
54854: ARRAY
54855: PPUSH
54856: NOP4
54860: PPUSH
54861: NOP4
54865: NOT
54866: IFFALSE 54888
// ComMoveToArea ( group [ i ] , f_repair ) ;
54868: NOP4
54872: PUSH
54873: NOP4
54877: ARRAY
54878: PPUSH
54879: NOP4
54883: PPUSH
54884: NOP4
// continue ;
54888: GO 54515
// end ; end else
54890: GO 55170
// if group [ i ] in repairs then
54892: NOP4
54896: PUSH
54897: NOP4
54901: ARRAY
54902: PUSH
54903: NOP4
54907: IN
54908: IFFALSE 55170
// begin if IsInUnit ( group [ i ] ) then
54910: NOP4
54914: PUSH
54915: NOP4
54919: ARRAY
54920: PPUSH
54921: NOP4
54925: IFFALSE 54993
// begin z := IsInUnit ( group [ i ] ) ;
54927: NOP4
54931: PUSH
54932: NOP4
54936: PUSH
54937: NOP4
54941: ARRAY
54942: PPUSH
54943: NOP4
54947: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
54948: NOP4
54952: PUSH
54953: NOP4
54957: IN
54958: PUSH
54959: NOP4
54963: PPUSH
54964: NOP4
54968: PPUSH
54969: NOP4
54973: AND
54974: IFFALSE 54991
// ComExitVehicle ( group [ i ] ) ;
54976: NOP4
54980: PUSH
54981: NOP4
54985: ARRAY
54986: PPUSH
54987: NOP4
// end else
54991: GO 55170
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
54993: NOP4
54997: PUSH
54998: NOP4
55002: PPUSH
55003: LD_INT 95
55005: PUSH
55006: NOP4
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 58
55017: PUSH
55018: EMPTY
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PPUSH
55025: NOP4
55029: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55030: NOP4
55034: PUSH
55035: NOP4
55039: ARRAY
55040: PPUSH
55041: NOP4
55045: NOT
55046: IFFALSE 55168
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55048: NOP4
55052: PUSH
55053: NOP4
55057: PPUSH
55058: NOP4
55062: PUSH
55063: NOP4
55067: ARRAY
55068: PPUSH
55069: NOP4
55073: ST_TO_ADDR
// if not x then
55074: NOP4
55078: NOT
55079: IFFALSE 55083
// continue ;
55081: GO 54515
// if GetLives ( x ) < 1000 then
55083: NOP4
55087: PPUSH
55088: NOP4
55092: PUSH
55093: LD_INT 1000
55095: LESS
55096: IFFALSE 55120
// ComRepairVehicle ( group [ i ] , x ) else
55098: NOP4
55102: PUSH
55103: NOP4
55107: ARRAY
55108: PPUSH
55109: NOP4
55113: PPUSH
55114: NOP4
55118: GO 55168
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55120: NOP4
55124: PUSH
55125: NOP4
55129: PUSH
55130: NOP4
55134: ARRAY
55135: PPUSH
55136: NOP4
55140: PUSH
55141: LD_INT 1000
55143: LESS
55144: AND
55145: NOT
55146: IFFALSE 55168
// ComEnterUnit ( group [ i ] , x ) ;
55148: NOP4
55152: PUSH
55153: NOP4
55157: ARRAY
55158: PPUSH
55159: NOP4
55163: PPUSH
55164: NOP4
// end ; continue ;
55168: GO 54515
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55170: NOP4
55174: PUSH
55175: NOP4
55179: PUSH
55180: NOP4
55184: ARRAY
55185: PPUSH
55186: NOP4
55190: PUSH
55191: LD_INT 1
55193: EQUAL
55194: AND
55195: IFFALSE 55673
// begin if group [ i ] in healers then
55197: NOP4
55201: PUSH
55202: NOP4
55206: ARRAY
55207: PUSH
55208: NOP4
55212: IN
55213: IFFALSE 55486
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55215: NOP4
55219: PUSH
55220: NOP4
55224: ARRAY
55225: PPUSH
55226: NOP4
55230: PPUSH
55231: NOP4
55235: NOT
55236: PUSH
55237: NOP4
55241: PUSH
55242: NOP4
55246: ARRAY
55247: PPUSH
55248: NOP4
55252: NOT
55253: AND
55254: IFFALSE 55278
// ComMoveToArea ( group [ i ] , f_heal ) else
55256: NOP4
55260: PUSH
55261: NOP4
55265: ARRAY
55266: PPUSH
55267: NOP4
55271: PPUSH
55272: NOP4
55276: GO 55484
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55278: NOP4
55282: PUSH
55283: NOP4
55287: ARRAY
55288: PPUSH
55289: NOP4
55293: PPUSH
55294: NOP4
55298: PUSH
55299: LD_INT 1000
55301: EQUAL
55302: IFFALSE 55321
// ComStop ( group [ i ] ) else
55304: NOP4
55308: PUSH
55309: NOP4
55313: ARRAY
55314: PPUSH
55315: NOP4
55319: GO 55484
// if not HasTask ( group [ i ] ) and to_heal then
55321: NOP4
55325: PUSH
55326: NOP4
55330: ARRAY
55331: PPUSH
55332: NOP4
55336: NOT
55337: PUSH
55338: NOP4
55342: AND
55343: IFFALSE 55484
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55345: NOP4
55349: PUSH
55350: NOP4
55354: PPUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 54
55360: PUSH
55361: EMPTY
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PPUSH
55368: NOP4
55372: PPUSH
55373: NOP4
55377: PUSH
55378: NOP4
55382: ARRAY
55383: PPUSH
55384: NOP4
55388: ST_TO_ADDR
// if z then
55389: NOP4
55393: IFFALSE 55484
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55395: LD_INT 91
55397: PUSH
55398: NOP4
55402: PUSH
55403: LD_INT 10
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 81
55413: PUSH
55414: NOP4
55418: PPUSH
55419: NOP4
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PPUSH
55432: NOP4
55436: PUSH
55437: LD_INT 0
55439: EQUAL
55440: IFFALSE 55464
// ComHeal ( group [ i ] , z ) else
55442: NOP4
55446: PUSH
55447: NOP4
55451: ARRAY
55452: PPUSH
55453: NOP4
55457: PPUSH
55458: NOP4
55462: GO 55484
// ComMoveToArea ( group [ i ] , f_heal ) ;
55464: NOP4
55468: PUSH
55469: NOP4
55473: ARRAY
55474: PPUSH
55475: NOP4
55479: PPUSH
55480: NOP4
// end ; continue ;
55484: GO 54515
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
55486: NOP4
55490: PUSH
55491: NOP4
55495: ARRAY
55496: PPUSH
55497: NOP4
55501: PUSH
55502: LD_INT 700
55504: LESS
55505: PUSH
55506: NOP4
55510: PUSH
55511: NOP4
55515: ARRAY
55516: PUSH
55517: NOP4
55521: IN
55522: NOT
55523: AND
55524: IFFALSE 55548
// to_heal := to_heal union group [ i ] ;
55526: NOP4
55530: PUSH
55531: NOP4
55535: PUSH
55536: NOP4
55540: PUSH
55541: NOP4
55545: ARRAY
55546: UNION
55547: ST_TO_ADDR
// if group [ i ] in to_heal then
55548: NOP4
55552: PUSH
55553: NOP4
55557: ARRAY
55558: PUSH
55559: NOP4
55563: IN
55564: IFFALSE 55673
// begin if GetLives ( group [ i ] ) = 1000 then
55566: NOP4
55570: PUSH
55571: NOP4
55575: ARRAY
55576: PPUSH
55577: NOP4
55581: PUSH
55582: LD_INT 1000
55584: EQUAL
55585: IFFALSE 55611
// to_heal := to_heal diff group [ i ] else
55587: NOP4
55591: PUSH
55592: NOP4
55596: PUSH
55597: NOP4
55601: PUSH
55602: NOP4
55606: ARRAY
55607: DIFF
55608: ST_TO_ADDR
55609: GO 55673
// begin if not IsInArea ( group [ i ] , to_heal ) then
55611: NOP4
55615: PUSH
55616: NOP4
55620: ARRAY
55621: PPUSH
55622: NOP4
55626: PPUSH
55627: NOP4
55631: NOT
55632: IFFALSE 55656
// ComMoveToArea ( group [ i ] , f_heal ) else
55634: NOP4
55638: PUSH
55639: NOP4
55643: ARRAY
55644: PPUSH
55645: NOP4
55649: PPUSH
55650: NOP4
55654: GO 55671
// ComHold ( group [ i ] ) ;
55656: NOP4
55660: PUSH
55661: NOP4
55665: ARRAY
55666: PPUSH
55667: NOP4
// continue ;
55671: GO 54515
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
55673: NOP4
55677: PUSH
55678: NOP4
55682: ARRAY
55683: PPUSH
55684: LD_INT 10
55686: PPUSH
55687: NOP4
55691: NOT
55692: PUSH
55693: NOP4
55697: PUSH
55698: NOP4
55702: ARRAY
55703: PUSH
55704: EMPTY
55705: EQUAL
55706: NOT
55707: AND
55708: IFFALSE 55974
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
55710: NOP4
55714: PUSH
55715: NOP4
55719: ARRAY
55720: PPUSH
55721: NOP4
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: IN
55736: IFFALSE 55777
// if GetFuel ( group [ i ] ) < 10 then
55738: NOP4
55742: PUSH
55743: NOP4
55747: ARRAY
55748: PPUSH
55749: NOP4
55753: PUSH
55754: LD_INT 10
55756: LESS
55757: IFFALSE 55777
// SetFuel ( group [ i ] , 12 ) ;
55759: NOP4
55763: PUSH
55764: NOP4
55768: ARRAY
55769: PPUSH
55770: LD_INT 12
55772: PPUSH
55773: NOP4
// if units_path [ i ] then
55777: NOP4
55781: PUSH
55782: NOP4
55786: ARRAY
55787: IFFALSE 55972
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
55789: NOP4
55793: PUSH
55794: NOP4
55798: ARRAY
55799: PPUSH
55800: NOP4
55804: PUSH
55805: NOP4
55809: ARRAY
55810: PUSH
55811: LD_INT 1
55813: ARRAY
55814: PUSH
55815: LD_INT 1
55817: ARRAY
55818: PPUSH
55819: NOP4
55823: PUSH
55824: NOP4
55828: ARRAY
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: LD_INT 2
55836: ARRAY
55837: PPUSH
55838: NOP4
55842: PUSH
55843: LD_INT 6
55845: GREATER
55846: IFFALSE 55921
// begin if not HasTask ( group [ i ] ) then
55848: NOP4
55852: PUSH
55853: NOP4
55857: ARRAY
55858: PPUSH
55859: NOP4
55863: NOT
55864: IFFALSE 55919
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
55866: NOP4
55870: PUSH
55871: NOP4
55875: ARRAY
55876: PPUSH
55877: NOP4
55881: PUSH
55882: NOP4
55886: ARRAY
55887: PUSH
55888: LD_INT 1
55890: ARRAY
55891: PUSH
55892: LD_INT 1
55894: ARRAY
55895: PPUSH
55896: NOP4
55900: PUSH
55901: NOP4
55905: ARRAY
55906: PUSH
55907: LD_INT 1
55909: ARRAY
55910: PUSH
55911: LD_INT 2
55913: ARRAY
55914: PPUSH
55915: NOP4
// end else
55919: GO 55972
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
55921: NOP4
55925: PUSH
55926: NOP4
55930: PUSH
55931: NOP4
55935: ARRAY
55936: PPUSH
55937: LD_INT 1
55939: PPUSH
55940: NOP4
55944: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
55945: NOP4
55949: PUSH
55950: NOP4
55954: PPUSH
55955: NOP4
55959: PPUSH
55960: NOP4
55964: PPUSH
55965: NOP4
55969: ST_TO_ADDR
// continue ;
55970: GO 54515
// end ; end ; end else
55972: GO 58610
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
55974: NOP4
55978: PUSH
55979: LD_INT 81
55981: PUSH
55982: NOP4
55986: PUSH
55987: NOP4
55991: ARRAY
55992: PPUSH
55993: NOP4
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PPUSH
56002: NOP4
56006: ST_TO_ADDR
// if not tmp then
56007: NOP4
56011: NOT
56012: IFFALSE 56016
// continue ;
56014: GO 54515
// if f_ignore_area then
56016: NOP4
56020: IFFALSE 56108
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56022: NOP4
56026: PUSH
56027: NOP4
56031: PPUSH
56032: LD_INT 3
56034: PUSH
56035: LD_INT 92
56037: PUSH
56038: NOP4
56042: PUSH
56043: LD_INT 1
56045: ARRAY
56046: PUSH
56047: NOP4
56051: PUSH
56052: LD_INT 2
56054: ARRAY
56055: PUSH
56056: NOP4
56060: PUSH
56061: LD_INT 3
56063: ARRAY
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PPUSH
56075: NOP4
56079: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56080: NOP4
56084: PUSH
56085: NOP4
56089: DIFF
56090: IFFALSE 56108
// tmp := tmp diff tmp2 ;
56092: NOP4
56096: PUSH
56097: NOP4
56101: PUSH
56102: NOP4
56106: DIFF
56107: ST_TO_ADDR
// end ; if not f_murder then
56108: NOP4
56112: NOT
56113: IFFALSE 56171
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56115: NOP4
56119: PUSH
56120: NOP4
56124: PPUSH
56125: LD_INT 3
56127: PUSH
56128: LD_INT 50
56130: PUSH
56131: EMPTY
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PPUSH
56138: NOP4
56142: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56143: NOP4
56147: PUSH
56148: NOP4
56152: DIFF
56153: IFFALSE 56171
// tmp := tmp diff tmp2 ;
56155: NOP4
56159: PUSH
56160: NOP4
56164: PUSH
56165: NOP4
56169: DIFF
56170: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56171: NOP4
56175: PUSH
56176: NOP4
56180: PUSH
56181: NOP4
56185: ARRAY
56186: PPUSH
56187: NOP4
56191: PPUSH
56192: LD_INT 1
56194: PPUSH
56195: LD_INT 1
56197: PPUSH
56198: NOP4
56202: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56203: NOP4
56207: PUSH
56208: NOP4
56212: ARRAY
56213: PPUSH
56214: NOP4
56218: PUSH
56219: LD_INT 1
56221: EQUAL
56222: IFFALSE 56670
// begin if WantPlant ( group [ i ] ) then
56224: NOP4
56228: PUSH
56229: NOP4
56233: ARRAY
56234: PPUSH
56235: NOP4
56239: IFFALSE 56243
// continue ;
56241: GO 54515
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56243: NOP4
56247: PUSH
56248: NOP4
56252: PUSH
56253: NOP4
56257: ARRAY
56258: PPUSH
56259: NOP4
56263: NOT
56264: AND
56265: PUSH
56266: NOP4
56270: PUSH
56271: LD_INT 1
56273: ARRAY
56274: PUSH
56275: NOP4
56279: PPUSH
56280: LD_INT 21
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 58
56292: PUSH
56293: EMPTY
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PPUSH
56300: NOP4
56304: IN
56305: AND
56306: IFFALSE 56342
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56308: NOP4
56312: PUSH
56313: NOP4
56317: ARRAY
56318: PPUSH
56319: NOP4
56323: PUSH
56324: LD_INT 1
56326: ARRAY
56327: PPUSH
56328: NOP4
// attacking := true ;
56332: NOP4
56336: PUSH
56337: LD_INT 1
56339: ST_TO_ADDR
// continue ;
56340: GO 54515
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56342: NOP4
56346: PUSH
56347: NOP4
56351: PUSH
56352: NOP4
56356: ARRAY
56357: PPUSH
56358: NOP4
56362: PUSH
56363: LD_INT 1
56365: EQUAL
56366: AND
56367: PUSH
56368: NOP4
56372: PUSH
56373: NOP4
56377: ARRAY
56378: PPUSH
56379: NOP4
56383: PUSH
56384: LD_INT 800
56386: LESS
56387: AND
56388: PUSH
56389: NOP4
56393: PUSH
56394: NOP4
56398: ARRAY
56399: PPUSH
56400: NOP4
56404: NOT
56405: AND
56406: IFFALSE 56423
// ComCrawl ( group [ i ] ) ;
56408: NOP4
56412: PUSH
56413: NOP4
56417: ARRAY
56418: PPUSH
56419: NOP4
// if f_mines then
56423: NOP4
56427: IFFALSE 56670
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56429: NOP4
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PPUSH
56438: NOP4
56442: PUSH
56443: LD_INT 3
56445: EQUAL
56446: PUSH
56447: NOP4
56451: PUSH
56452: LD_INT 1
56454: ARRAY
56455: PUSH
56456: NOP4
56460: IN
56461: NOT
56462: AND
56463: IFFALSE 56670
// begin x := GetX ( tmp [ 1 ] ) ;
56465: NOP4
56469: PUSH
56470: NOP4
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: PPUSH
56479: NOP4
56483: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
56484: NOP4
56488: PUSH
56489: NOP4
56493: PUSH
56494: LD_INT 1
56496: ARRAY
56497: PPUSH
56498: NOP4
56502: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
56503: NOP4
56507: PUSH
56508: NOP4
56512: PUSH
56513: NOP4
56517: ARRAY
56518: PPUSH
56519: NOP4
56523: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
56524: NOP4
56528: PUSH
56529: NOP4
56533: ARRAY
56534: PPUSH
56535: NOP4
56539: PPUSH
56540: NOP4
56544: PPUSH
56545: NOP4
56549: PUSH
56550: LD_INT 1
56552: ARRAY
56553: PPUSH
56554: NOP4
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
56558: NOP4
56562: PUSH
56563: NOP4
56567: ARRAY
56568: PPUSH
56569: NOP4
56573: PPUSH
56574: NOP4
56578: PPUSH
56579: LD_INT 7
56581: PPUSH
56582: NOP4
56586: PPUSH
56587: NOP4
56591: PPUSH
56592: NOP4
56596: PPUSH
56597: LD_INT 7
56599: PPUSH
56600: NOP4
56604: PPUSH
56605: NOP4
// SetTag ( group [ i ] , 71 ) ;
56609: NOP4
56613: PUSH
56614: NOP4
56618: ARRAY
56619: PPUSH
56620: LD_INT 71
56622: PPUSH
56623: NOP4
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
56627: NOP4
56631: PUSH
56632: NOP4
56636: PPUSH
56637: NOP4
56641: PUSH
56642: LD_INT 1
56644: PLUS
56645: PPUSH
56646: NOP4
56650: PUSH
56651: LD_INT 1
56653: ARRAY
56654: PPUSH
56655: NOP4
56659: ST_TO_ADDR
// attacking := true ;
56660: NOP4
56664: PUSH
56665: LD_INT 1
56667: ST_TO_ADDR
// continue ;
56668: GO 54515
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
56670: NOP4
56674: PUSH
56675: NOP4
56679: ARRAY
56680: PPUSH
56681: NOP4
56685: PUSH
56686: LD_INT 17
56688: EQUAL
56689: PUSH
56690: NOP4
56694: PUSH
56695: NOP4
56699: ARRAY
56700: PPUSH
56701: NOP4
56705: PUSH
56706: LD_INT 71
56708: EQUAL
56709: NOT
56710: AND
56711: IFFALSE 56857
// begin attacking := false ;
56713: NOP4
56717: PUSH
56718: LD_INT 0
56720: ST_TO_ADDR
// k := 5 ;
56721: NOP4
56725: PUSH
56726: LD_INT 5
56728: ST_TO_ADDR
// if tmp < k then
56729: NOP4
56733: PUSH
56734: NOP4
56738: LESS
56739: IFFALSE 56751
// k := tmp ;
56741: NOP4
56745: PUSH
56746: NOP4
56750: ST_TO_ADDR
// for j = 1 to k do
56751: NOP4
56755: PUSH
56756: DOUBLE
56757: LD_INT 1
56759: DEC
56760: ST_TO_ADDR
56761: NOP4
56765: PUSH
56766: FOR_TO
56767: IFFALSE 56855
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
56769: NOP4
56773: PUSH
56774: NOP4
56778: ARRAY
56779: PUSH
56780: NOP4
56784: PPUSH
56785: LD_INT 58
56787: PUSH
56788: EMPTY
56789: LIST
56790: PPUSH
56791: NOP4
56795: IN
56796: NOT
56797: IFFALSE 56853
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
56799: NOP4
56803: PUSH
56804: NOP4
56808: ARRAY
56809: PPUSH
56810: NOP4
56814: PUSH
56815: NOP4
56819: ARRAY
56820: PPUSH
56821: NOP4
// attacking := true ;
56825: NOP4
56829: PUSH
56830: LD_INT 1
56832: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
56833: NOP4
56837: PUSH
56838: NOP4
56842: ARRAY
56843: PPUSH
56844: LD_INT 71
56846: PPUSH
56847: NOP4
// continue ;
56851: GO 56766
// end ; end ;
56853: GO 56766
56855: POP
56856: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
56857: NOP4
56861: PUSH
56862: NOP4
56866: ARRAY
56867: PPUSH
56868: NOP4
56872: PUSH
56873: LD_INT 8
56875: EQUAL
56876: PUSH
56877: NOP4
56881: PUSH
56882: NOP4
56886: ARRAY
56887: PPUSH
56888: NOP4
56892: PUSH
56893: LD_INT 28
56895: PUSH
56896: LD_INT 45
56898: PUSH
56899: LD_INT 7
56901: PUSH
56902: LD_INT 47
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: IN
56911: OR
56912: IFFALSE 57142
// begin attacking := false ;
56914: NOP4
56918: PUSH
56919: LD_INT 0
56921: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
56922: NOP4
56926: PUSH
56927: LD_INT 1
56929: ARRAY
56930: PPUSH
56931: NOP4
56935: PUSH
56936: LD_INT 32
56938: PUSH
56939: LD_INT 31
56941: PUSH
56942: LD_INT 33
56944: PUSH
56945: LD_INT 4
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: IN
56958: IFFALSE 57142
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
56960: NOP4
56964: PUSH
56965: NOP4
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PPUSH
56974: NOP4
56978: PPUSH
56979: NOP4
56983: PUSH
56984: LD_INT 1
56986: ARRAY
56987: PPUSH
56988: NOP4
56992: PPUSH
56993: NOP4
56997: PUSH
56998: LD_INT 1
57000: ARRAY
57001: PPUSH
57002: NOP4
57006: PPUSH
57007: NOP4
57011: PUSH
57012: LD_INT 1
57014: ARRAY
57015: PPUSH
57016: NOP4
57020: PPUSH
57021: NOP4
57025: PUSH
57026: LD_INT 1
57028: ARRAY
57029: PPUSH
57030: NOP4
57034: PPUSH
57035: LD_INT 0
57037: PPUSH
57038: NOP4
57042: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57043: NOP4
57047: PUSH
57048: NOP4
57052: PUSH
57053: NOP4
57057: ARRAY
57058: PPUSH
57059: NOP4
57063: PPUSH
57064: NOP4
57068: ST_TO_ADDR
// if j then
57069: NOP4
57073: IFFALSE 57142
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57075: NOP4
57079: PUSH
57080: LD_INT 1
57082: ARRAY
57083: PPUSH
57084: NOP4
57088: PUSH
57089: LD_INT 2
57091: ARRAY
57092: PPUSH
57093: NOP4
57097: IFFALSE 57142
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57099: NOP4
57103: PUSH
57104: NOP4
57108: ARRAY
57109: PPUSH
57110: NOP4
57114: PUSH
57115: LD_INT 1
57117: ARRAY
57118: PPUSH
57119: NOP4
57123: PUSH
57124: LD_INT 2
57126: ARRAY
57127: PPUSH
57128: NOP4
// attacking := true ;
57132: NOP4
57136: PUSH
57137: LD_INT 1
57139: ST_TO_ADDR
// continue ;
57140: GO 54515
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57142: NOP4
57146: PUSH
57147: NOP4
57151: ARRAY
57152: PPUSH
57153: NOP4
57157: PUSH
57158: LD_INT 11
57160: EQUAL
57161: IFFALSE 57439
// begin k := 10 ;
57163: NOP4
57167: PUSH
57168: LD_INT 10
57170: ST_TO_ADDR
// x := 0 ;
57171: NOP4
57175: PUSH
57176: LD_INT 0
57178: ST_TO_ADDR
// if tmp < k then
57179: NOP4
57183: PUSH
57184: NOP4
57188: LESS
57189: IFFALSE 57201
// k := tmp ;
57191: NOP4
57195: PUSH
57196: NOP4
57200: ST_TO_ADDR
// for j = k downto 1 do
57201: NOP4
57205: PUSH
57206: DOUBLE
57207: NOP4
57211: INC
57212: ST_TO_ADDR
57213: LD_INT 1
57215: PUSH
57216: FOR_DOWNTO
57217: IFFALSE 57292
// begin if GetType ( tmp [ j ] ) = unit_human then
57219: NOP4
57223: PUSH
57224: NOP4
57228: ARRAY
57229: PPUSH
57230: NOP4
57234: PUSH
57235: LD_INT 1
57237: EQUAL
57238: IFFALSE 57290
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57240: NOP4
57244: PUSH
57245: NOP4
57249: ARRAY
57250: PPUSH
57251: NOP4
57255: PUSH
57256: NOP4
57260: ARRAY
57261: PPUSH
57262: NOP4
// x := tmp [ j ] ;
57266: NOP4
57270: PUSH
57271: NOP4
57275: PUSH
57276: NOP4
57280: ARRAY
57281: ST_TO_ADDR
// attacking := true ;
57282: NOP4
57286: PUSH
57287: LD_INT 1
57289: ST_TO_ADDR
// end ; end ;
57290: GO 57216
57292: POP
57293: POP
// if not x then
57294: NOP4
57298: NOT
57299: IFFALSE 57439
// begin attacking := true ;
57301: NOP4
57305: PUSH
57306: LD_INT 1
57308: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57309: NOP4
57313: PUSH
57314: NOP4
57318: ARRAY
57319: PPUSH
57320: NOP4
57324: PPUSH
57325: NOP4
57329: PUSH
57330: NOP4
57334: ARRAY
57335: PPUSH
57336: NOP4
57340: PPUSH
57341: NOP4
57345: PUSH
57346: LD_INT 2
57348: ARRAY
57349: PUSH
57350: NOP4
57354: PUSH
57355: LD_INT 1
57357: ARRAY
57358: PPUSH
57359: NOP4
57363: PPUSH
57364: NOP4
57368: PUSH
57369: LD_INT 1
57371: ARRAY
57372: PPUSH
57373: NOP4
57377: PPUSH
57378: NOP4
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: EQUAL
57387: IFFALSE 57415
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57389: NOP4
57393: PUSH
57394: NOP4
57398: ARRAY
57399: PPUSH
57400: NOP4
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: PPUSH
57409: NOP4
57413: GO 57439
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57415: NOP4
57419: PUSH
57420: NOP4
57424: ARRAY
57425: PPUSH
57426: NOP4
57430: PUSH
57431: LD_INT 1
57433: ARRAY
57434: PPUSH
57435: NOP4
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
57439: NOP4
57443: PUSH
57444: NOP4
57448: ARRAY
57449: PPUSH
57450: NOP4
57454: PUSH
57455: LD_INT 29
57457: EQUAL
57458: IFFALSE 57824
// begin if WantsToAttack ( group [ i ] ) in bombed then
57460: NOP4
57464: PUSH
57465: NOP4
57469: ARRAY
57470: PPUSH
57471: NOP4
57475: PUSH
57476: NOP4
57480: IN
57481: IFFALSE 57485
// continue ;
57483: GO 54515
// k := 8 ;
57485: NOP4
57489: PUSH
57490: LD_INT 8
57492: ST_TO_ADDR
// x := 0 ;
57493: NOP4
57497: PUSH
57498: LD_INT 0
57500: ST_TO_ADDR
// if tmp < k then
57501: NOP4
57505: PUSH
57506: NOP4
57510: LESS
57511: IFFALSE 57523
// k := tmp ;
57513: NOP4
57517: PUSH
57518: NOP4
57522: ST_TO_ADDR
// for j = 1 to k do
57523: NOP4
57527: PUSH
57528: DOUBLE
57529: LD_INT 1
57531: DEC
57532: ST_TO_ADDR
57533: NOP4
57537: PUSH
57538: FOR_TO
57539: IFFALSE 57671
// begin if GetType ( tmp [ j ] ) = unit_building then
57541: NOP4
57545: PUSH
57546: NOP4
57550: ARRAY
57551: PPUSH
57552: NOP4
57556: PUSH
57557: LD_INT 3
57559: EQUAL
57560: IFFALSE 57669
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
57562: NOP4
57566: PUSH
57567: NOP4
57571: ARRAY
57572: PUSH
57573: NOP4
57577: IN
57578: NOT
57579: PUSH
57580: NOP4
57584: PUSH
57585: NOP4
57589: ARRAY
57590: PPUSH
57591: NOP4
57595: AND
57596: IFFALSE 57669
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57598: NOP4
57602: PUSH
57603: NOP4
57607: ARRAY
57608: PPUSH
57609: NOP4
57613: PUSH
57614: NOP4
57618: ARRAY
57619: PPUSH
57620: NOP4
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
57624: NOP4
57628: PUSH
57629: NOP4
57633: PPUSH
57634: NOP4
57638: PUSH
57639: LD_INT 1
57641: PLUS
57642: PPUSH
57643: NOP4
57647: PUSH
57648: NOP4
57652: ARRAY
57653: PPUSH
57654: NOP4
57658: ST_TO_ADDR
// attacking := true ;
57659: NOP4
57663: PUSH
57664: LD_INT 1
57666: ST_TO_ADDR
// break ;
57667: GO 57671
// end ; end ;
57669: GO 57538
57671: POP
57672: POP
// if not attacking and f_attack_depot then
57673: NOP4
57677: NOT
57678: PUSH
57679: NOP4
57683: AND
57684: IFFALSE 57779
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57686: NOP4
57690: PUSH
57691: NOP4
57695: PPUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 30
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 30
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: PPUSH
57724: NOP4
57728: ST_TO_ADDR
// if z then
57729: NOP4
57733: IFFALSE 57779
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
57735: NOP4
57739: PUSH
57740: NOP4
57744: ARRAY
57745: PPUSH
57746: NOP4
57750: PPUSH
57751: NOP4
57755: PUSH
57756: NOP4
57760: ARRAY
57761: PPUSH
57762: NOP4
57766: PPUSH
57767: NOP4
// attacking := true ;
57771: NOP4
57775: PUSH
57776: LD_INT 1
57778: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
57779: NOP4
57783: PUSH
57784: NOP4
57788: ARRAY
57789: PPUSH
57790: NOP4
57794: PUSH
57795: LD_INT 500
57797: LESS
57798: IFFALSE 57824
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57800: NOP4
57804: PUSH
57805: NOP4
57809: ARRAY
57810: PPUSH
57811: NOP4
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PPUSH
57820: NOP4
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
57824: NOP4
57828: PUSH
57829: NOP4
57833: ARRAY
57834: PPUSH
57835: NOP4
57839: PUSH
57840: LD_INT 49
57842: EQUAL
57843: IFFALSE 57964
// begin if not HasTask ( group [ i ] ) then
57845: NOP4
57849: PUSH
57850: NOP4
57854: ARRAY
57855: PPUSH
57856: NOP4
57860: NOT
57861: IFFALSE 57964
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
57863: NOP4
57867: PUSH
57868: LD_INT 81
57870: PUSH
57871: NOP4
57875: PUSH
57876: NOP4
57880: ARRAY
57881: PPUSH
57882: NOP4
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PPUSH
57891: NOP4
57895: PPUSH
57896: NOP4
57900: PUSH
57901: NOP4
57905: ARRAY
57906: PPUSH
57907: NOP4
57911: ST_TO_ADDR
// if k then
57912: NOP4
57916: IFFALSE 57964
// if GetDistUnits ( group [ i ] , k ) > 10 then
57918: NOP4
57922: PUSH
57923: NOP4
57927: ARRAY
57928: PPUSH
57929: NOP4
57933: PPUSH
57934: NOP4
57938: PUSH
57939: LD_INT 10
57941: GREATER
57942: IFFALSE 57964
// ComMoveUnit ( group [ i ] , k ) ;
57944: NOP4
57948: PUSH
57949: NOP4
57953: ARRAY
57954: PPUSH
57955: NOP4
57959: PPUSH
57960: NOP4
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57964: NOP4
57968: PUSH
57969: NOP4
57973: ARRAY
57974: PPUSH
57975: NOP4
57979: PUSH
57980: LD_INT 250
57982: LESS
57983: PUSH
57984: NOP4
57988: PUSH
57989: NOP4
57993: ARRAY
57994: PUSH
57995: LD_INT 21
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 23
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PPUSH
58019: NOP4
58023: IN
58024: AND
58025: IFFALSE 58150
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58027: NOP4
58031: PUSH
58032: NOP4
58036: PUSH
58037: NOP4
58041: PUSH
58042: NOP4
58046: ARRAY
58047: DIFF
58048: PPUSH
58049: NOP4
58053: PUSH
58054: NOP4
58058: ARRAY
58059: PPUSH
58060: NOP4
58064: ST_TO_ADDR
// if not k then
58065: NOP4
58069: NOT
58070: IFFALSE 58074
// continue ;
58072: GO 54515
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58074: NOP4
58078: PUSH
58079: LD_INT 81
58081: PUSH
58082: NOP4
58086: PUSH
58087: NOP4
58091: ARRAY
58092: PPUSH
58093: NOP4
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PPUSH
58102: NOP4
58106: IN
58107: PUSH
58108: NOP4
58112: PPUSH
58113: NOP4
58117: PUSH
58118: NOP4
58122: ARRAY
58123: PPUSH
58124: NOP4
58128: PUSH
58129: LD_INT 5
58131: LESS
58132: AND
58133: IFFALSE 58150
// ComAutodestruct ( group [ i ] ) ;
58135: NOP4
58139: PUSH
58140: NOP4
58144: ARRAY
58145: PPUSH
58146: NOP4
// end ; if f_attack_depot then
58150: NOP4
58154: IFFALSE 58266
// begin k := 6 ;
58156: NOP4
58160: PUSH
58161: LD_INT 6
58163: ST_TO_ADDR
// if tmp < k then
58164: NOP4
58168: PUSH
58169: NOP4
58173: LESS
58174: IFFALSE 58186
// k := tmp ;
58176: NOP4
58180: PUSH
58181: NOP4
58185: ST_TO_ADDR
// for j = 1 to k do
58186: NOP4
58190: PUSH
58191: DOUBLE
58192: LD_INT 1
58194: DEC
58195: ST_TO_ADDR
58196: NOP4
58200: PUSH
58201: FOR_TO
58202: IFFALSE 58264
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58204: NOP4
58208: PPUSH
58209: NOP4
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: IN
58224: IFFALSE 58262
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58226: NOP4
58230: PUSH
58231: NOP4
58235: ARRAY
58236: PPUSH
58237: NOP4
58241: PUSH
58242: NOP4
58246: ARRAY
58247: PPUSH
58248: NOP4
// attacking := true ;
58252: NOP4
58256: PUSH
58257: LD_INT 1
58259: ST_TO_ADDR
// break ;
58260: GO 58264
// end ;
58262: GO 58201
58264: POP
58265: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58266: NOP4
58270: PUSH
58271: NOP4
58275: ARRAY
58276: PPUSH
58277: NOP4
58281: PUSH
58282: NOP4
58286: NOT
58287: AND
58288: IFFALSE 58610
// begin if GetTag ( group [ i ] ) = 71 then
58290: NOP4
58294: PUSH
58295: NOP4
58299: ARRAY
58300: PPUSH
58301: NOP4
58305: PUSH
58306: LD_INT 71
58308: EQUAL
58309: IFFALSE 58350
// begin if HasTask ( group [ i ] ) then
58311: NOP4
58315: PUSH
58316: NOP4
58320: ARRAY
58321: PPUSH
58322: NOP4
58326: IFFALSE 58332
// continue else
58328: GO 54515
58330: GO 58350
// SetTag ( group [ i ] , 0 ) ;
58332: NOP4
58336: PUSH
58337: NOP4
58341: ARRAY
58342: PPUSH
58343: LD_INT 0
58345: PPUSH
58346: NOP4
// end ; k := 8 ;
58350: NOP4
58354: PUSH
58355: LD_INT 8
58357: ST_TO_ADDR
// x := 0 ;
58358: NOP4
58362: PUSH
58363: LD_INT 0
58365: ST_TO_ADDR
// if tmp < k then
58366: NOP4
58370: PUSH
58371: NOP4
58375: LESS
58376: IFFALSE 58388
// k := tmp ;
58378: NOP4
58382: PUSH
58383: NOP4
58387: ST_TO_ADDR
// for j = 1 to k do
58388: NOP4
58392: PUSH
58393: DOUBLE
58394: LD_INT 1
58396: DEC
58397: ST_TO_ADDR
58398: NOP4
58402: PUSH
58403: FOR_TO
58404: IFFALSE 58502
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58406: NOP4
58410: PUSH
58411: NOP4
58415: ARRAY
58416: PPUSH
58417: NOP4
58421: PUSH
58422: LD_INT 1
58424: EQUAL
58425: PUSH
58426: NOP4
58430: PUSH
58431: NOP4
58435: ARRAY
58436: PPUSH
58437: NOP4
58441: PUSH
58442: LD_INT 250
58444: LESS
58445: PUSH
58446: NOP4
58450: AND
58451: PUSH
58452: NOP4
58456: NOT
58457: PUSH
58458: NOP4
58462: PUSH
58463: NOP4
58467: ARRAY
58468: PPUSH
58469: NOP4
58473: PUSH
58474: LD_INT 250
58476: GREATEREQUAL
58477: AND
58478: OR
58479: AND
58480: IFFALSE 58500
// begin x := tmp [ j ] ;
58482: NOP4
58486: PUSH
58487: NOP4
58491: PUSH
58492: NOP4
58496: ARRAY
58497: ST_TO_ADDR
// break ;
58498: GO 58502
// end ;
58500: GO 58403
58502: POP
58503: POP
// if x then
58504: NOP4
58508: IFFALSE 58532
// ComAttackUnit ( group [ i ] , x ) else
58510: NOP4
58514: PUSH
58515: NOP4
58519: ARRAY
58520: PPUSH
58521: NOP4
58525: PPUSH
58526: NOP4
58530: GO 58556
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58532: NOP4
58536: PUSH
58537: NOP4
58541: ARRAY
58542: PPUSH
58543: NOP4
58547: PUSH
58548: LD_INT 1
58550: ARRAY
58551: PPUSH
58552: NOP4
// if not HasTask ( group [ i ] ) then
58556: NOP4
58560: PUSH
58561: NOP4
58565: ARRAY
58566: PPUSH
58567: NOP4
58571: NOT
58572: IFFALSE 58610
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
58574: NOP4
58578: PUSH
58579: NOP4
58583: ARRAY
58584: PPUSH
58585: NOP4
58589: PPUSH
58590: NOP4
58594: PUSH
58595: NOP4
58599: ARRAY
58600: PPUSH
58601: NOP4
58605: PPUSH
58606: NOP4
// end ; end ; end ;
58610: GO 54515
58612: POP
58613: POP
// wait ( 0 0$1 ) ;
58614: LD_INT 35
58616: PPUSH
58617: NOP4
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
58621: NOP4
58625: PUSH
58626: EMPTY
58627: EQUAL
58628: PUSH
58629: LD_INT 81
58631: PUSH
58632: NOP4
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PPUSH
58641: NOP4
58645: NOT
58646: OR
58647: IFFALSE 54500
// end ;
58649: LD_VAR 0 2
58653: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58654: LD_INT 0
58656: PPUSH
58657: PPUSH
58658: PPUSH
58659: PPUSH
// if not base_units then
58660: NOP4
58664: NOT
58665: IFFALSE 58669
// exit ;
58667: GO 58756
// result := false ;
58669: NOP4
58673: PUSH
58674: LD_INT 0
58676: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58677: NOP4
58681: PUSH
58682: NOP4
58686: PPUSH
58687: LD_INT 21
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PPUSH
58697: NOP4
58701: ST_TO_ADDR
// if not tmp then
58702: NOP4
58706: NOT
58707: IFFALSE 58711
// exit ;
58709: GO 58756
// for i in tmp do
58711: NOP4
58715: PUSH
58716: NOP4
58720: PUSH
58721: FOR_IN
58722: IFFALSE 58754
// begin result := EnemyInRange ( i , 22 ) ;
58724: NOP4
58728: PUSH
58729: NOP4
58733: PPUSH
58734: LD_INT 22
58736: PPUSH
58737: NOP4
58741: ST_TO_ADDR
// if result then
58742: NOP4
58746: IFFALSE 58752
// exit ;
58748: POP
58749: POP
58750: GO 58756
// end ;
58752: GO 58721
58754: POP
58755: POP
// end ;
58756: LD_VAR 0 2
58760: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58761: LD_INT 0
58763: PPUSH
58764: PPUSH
// if not units then
58765: NOP4
58769: NOT
58770: IFFALSE 58774
// exit ;
58772: GO 58844
// result := [ ] ;
58774: NOP4
58778: PUSH
58779: EMPTY
58780: ST_TO_ADDR
// for i in units do
58781: NOP4
58785: PUSH
58786: NOP4
58790: PUSH
58791: FOR_IN
58792: IFFALSE 58842
// if GetTag ( i ) = tag then
58794: NOP4
58798: PPUSH
58799: NOP4
58803: PUSH
58804: NOP4
58808: EQUAL
58809: IFFALSE 58840
// result := Insert ( result , result + 1 , i ) ;
58811: NOP4
58815: PUSH
58816: NOP4
58820: PPUSH
58821: NOP4
58825: PUSH
58826: LD_INT 1
58828: PLUS
58829: PPUSH
58830: NOP4
58834: PPUSH
58835: NOP4
58839: ST_TO_ADDR
58840: GO 58791
58842: POP
58843: POP
// end ;
58844: LD_VAR 0 3
58848: RET
// export function IsDriver ( un ) ; begin
58849: LD_INT 0
58851: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58852: NOP4
58856: PUSH
58857: NOP4
58861: PUSH
58862: LD_INT 55
58864: PUSH
58865: EMPTY
58866: LIST
58867: PPUSH
58868: NOP4
58872: IN
58873: ST_TO_ADDR
// end ;
58874: LD_VAR 0 2
58878: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58879: LD_INT 0
58881: PPUSH
58882: PPUSH
// list := [ ] ;
58883: NOP4
58887: PUSH
58888: EMPTY
58889: ST_TO_ADDR
// case d of 0 :
58890: NOP4
58894: PUSH
58895: LD_INT 0
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 59036
58903: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58904: NOP4
58908: PUSH
58909: NOP4
58913: PUSH
58914: LD_INT 4
58916: MINUS
58917: PUSH
58918: NOP4
58922: PUSH
58923: LD_INT 4
58925: MINUS
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: PUSH
58935: NOP4
58939: PUSH
58940: LD_INT 3
58942: MINUS
58943: PUSH
58944: NOP4
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: NOP4
58961: PUSH
58962: LD_INT 4
58964: PLUS
58965: PUSH
58966: NOP4
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: NOP4
58983: PUSH
58984: LD_INT 3
58986: PLUS
58987: PUSH
58988: NOP4
58992: PUSH
58993: LD_INT 3
58995: PLUS
58996: PUSH
58997: LD_INT 5
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: PUSH
59005: NOP4
59009: PUSH
59010: NOP4
59014: PUSH
59015: LD_INT 4
59017: PLUS
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// end ; 1 :
59034: GO 59734
59036: LD_INT 1
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59044
59042: GO 59177
59044: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59045: NOP4
59049: PUSH
59050: NOP4
59054: PUSH
59055: NOP4
59059: PUSH
59060: LD_INT 4
59062: MINUS
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: PUSH
59072: NOP4
59076: PUSH
59077: LD_INT 3
59079: MINUS
59080: PUSH
59081: NOP4
59085: PUSH
59086: LD_INT 3
59088: MINUS
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: PUSH
59098: NOP4
59102: PUSH
59103: LD_INT 4
59105: MINUS
59106: PUSH
59107: NOP4
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: PUSH
59120: NOP4
59124: PUSH
59125: NOP4
59129: PUSH
59130: LD_INT 3
59132: PLUS
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: PUSH
59142: NOP4
59146: PUSH
59147: LD_INT 4
59149: PLUS
59150: PUSH
59151: NOP4
59155: PUSH
59156: LD_INT 4
59158: PLUS
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// end ; 2 :
59175: GO 59734
59177: LD_INT 2
59179: DOUBLE
59180: EQUAL
59181: IFTRUE 59185
59183: GO 59314
59185: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59186: NOP4
59190: PUSH
59191: NOP4
59195: PUSH
59196: NOP4
59200: PUSH
59201: LD_INT 3
59203: MINUS
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: PUSH
59213: NOP4
59217: PUSH
59218: LD_INT 4
59220: PLUS
59221: PUSH
59222: NOP4
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: PUSH
59235: NOP4
59239: PUSH
59240: NOP4
59244: PUSH
59245: LD_INT 4
59247: PLUS
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: LIST
59256: PUSH
59257: NOP4
59261: PUSH
59262: LD_INT 3
59264: MINUS
59265: PUSH
59266: NOP4
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: NOP4
59283: PUSH
59284: LD_INT 4
59286: MINUS
59287: PUSH
59288: NOP4
59292: PUSH
59293: LD_INT 4
59295: MINUS
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// end ; 3 :
59312: GO 59734
59314: LD_INT 3
59316: DOUBLE
59317: EQUAL
59318: IFTRUE 59322
59320: GO 59455
59322: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59323: NOP4
59327: PUSH
59328: NOP4
59332: PUSH
59333: LD_INT 3
59335: PLUS
59336: PUSH
59337: NOP4
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: PUSH
59350: NOP4
59354: PUSH
59355: LD_INT 4
59357: PLUS
59358: PUSH
59359: NOP4
59363: PUSH
59364: LD_INT 4
59366: PLUS
59367: PUSH
59368: LD_INT 5
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: PUSH
59376: NOP4
59380: PUSH
59381: LD_INT 4
59383: MINUS
59384: PUSH
59385: NOP4
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: PUSH
59398: NOP4
59402: PUSH
59403: NOP4
59407: PUSH
59408: LD_INT 4
59410: MINUS
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: LIST
59419: PUSH
59420: NOP4
59424: PUSH
59425: LD_INT 3
59427: MINUS
59428: PUSH
59429: NOP4
59433: PUSH
59434: LD_INT 3
59436: MINUS
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// end ; 4 :
59453: GO 59734
59455: LD_INT 4
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59463
59461: GO 59596
59463: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59464: NOP4
59468: PUSH
59469: NOP4
59473: PUSH
59474: NOP4
59478: PUSH
59479: LD_INT 4
59481: PLUS
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: PUSH
59491: NOP4
59495: PUSH
59496: LD_INT 3
59498: PLUS
59499: PUSH
59500: NOP4
59504: PUSH
59505: LD_INT 3
59507: PLUS
59508: PUSH
59509: LD_INT 5
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: PUSH
59517: NOP4
59521: PUSH
59522: LD_INT 4
59524: PLUS
59525: PUSH
59526: NOP4
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: PUSH
59539: NOP4
59543: PUSH
59544: NOP4
59548: PUSH
59549: LD_INT 3
59551: MINUS
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: PUSH
59561: NOP4
59565: PUSH
59566: LD_INT 4
59568: MINUS
59569: PUSH
59570: NOP4
59574: PUSH
59575: LD_INT 4
59577: MINUS
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// end ; 5 :
59594: GO 59734
59596: LD_INT 5
59598: DOUBLE
59599: EQUAL
59600: IFTRUE 59604
59602: GO 59733
59604: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59605: NOP4
59609: PUSH
59610: NOP4
59614: PUSH
59615: LD_INT 4
59617: MINUS
59618: PUSH
59619: NOP4
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: PUSH
59632: NOP4
59636: PUSH
59637: NOP4
59641: PUSH
59642: LD_INT 4
59644: MINUS
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: PUSH
59654: NOP4
59658: PUSH
59659: LD_INT 4
59661: PLUS
59662: PUSH
59663: NOP4
59667: PUSH
59668: LD_INT 4
59670: PLUS
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: PUSH
59680: NOP4
59684: PUSH
59685: LD_INT 3
59687: PLUS
59688: PUSH
59689: NOP4
59693: PUSH
59694: LD_INT 4
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: NOP4
59706: PUSH
59707: NOP4
59711: PUSH
59712: LD_INT 3
59714: PLUS
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// end ; end ;
59731: GO 59734
59733: POP
// result := list ;
59734: NOP4
59738: PUSH
59739: NOP4
59743: ST_TO_ADDR
// end ;
59744: LD_VAR 0 4
59748: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59749: LD_INT 0
59751: PPUSH
59752: PPUSH
59753: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59754: NOP4
59758: NOT
59759: PUSH
59760: NOP4
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: IN
59783: NOT
59784: OR
59785: IFFALSE 59789
// exit ;
59787: GO 59881
// tmp := [ ] ;
59789: NOP4
59793: PUSH
59794: EMPTY
59795: ST_TO_ADDR
// for i in units do
59796: NOP4
59800: PUSH
59801: NOP4
59805: PUSH
59806: FOR_IN
59807: IFFALSE 59850
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59809: NOP4
59813: PUSH
59814: NOP4
59818: PPUSH
59819: NOP4
59823: PUSH
59824: LD_INT 1
59826: PLUS
59827: PPUSH
59828: NOP4
59832: PPUSH
59833: NOP4
59837: PPUSH
59838: NOP4
59842: PPUSH
59843: NOP4
59847: ST_TO_ADDR
59848: GO 59806
59850: POP
59851: POP
// if not tmp then
59852: NOP4
59856: NOT
59857: IFFALSE 59861
// exit ;
59859: GO 59881
// result := SortListByListDesc ( units , tmp ) ;
59861: NOP4
59865: PUSH
59866: NOP4
59870: PPUSH
59871: NOP4
59875: PPUSH
59876: NOP4
59880: ST_TO_ADDR
// end ;
59881: LD_VAR 0 3
59885: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59886: LD_INT 0
59888: PPUSH
59889: PPUSH
59890: PPUSH
// x := GetX ( building ) ;
59891: NOP4
59895: PUSH
59896: NOP4
59900: PPUSH
59901: NOP4
59905: ST_TO_ADDR
// y := GetY ( building ) ;
59906: NOP4
59910: PUSH
59911: NOP4
59915: PPUSH
59916: NOP4
59920: ST_TO_ADDR
// if GetTaskList ( unit ) then
59921: NOP4
59925: PPUSH
59926: NOP4
59930: IFFALSE 60025
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59932: LD_STRING e
59934: PUSH
59935: NOP4
59939: PPUSH
59940: NOP4
59944: PUSH
59945: LD_INT 1
59947: ARRAY
59948: PUSH
59949: LD_INT 1
59951: ARRAY
59952: EQUAL
59953: PUSH
59954: NOP4
59958: PUSH
59959: NOP4
59963: PPUSH
59964: NOP4
59968: PUSH
59969: LD_INT 1
59971: ARRAY
59972: PUSH
59973: LD_INT 2
59975: ARRAY
59976: EQUAL
59977: AND
59978: PUSH
59979: NOP4
59983: PUSH
59984: NOP4
59988: PPUSH
59989: NOP4
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: PUSH
59998: LD_INT 3
60000: ARRAY
60001: EQUAL
60002: AND
60003: IFFALSE 60015
// result := true else
60005: NOP4
60009: PUSH
60010: LD_INT 1
60012: ST_TO_ADDR
60013: GO 60023
// result := false ;
60015: NOP4
60019: PUSH
60020: LD_INT 0
60022: ST_TO_ADDR
// end else
60023: GO 60033
// result := false ;
60025: NOP4
60029: PUSH
60030: LD_INT 0
60032: ST_TO_ADDR
// end ;
60033: LD_VAR 0 3
60037: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60038: LD_INT 0
60040: PPUSH
60041: PPUSH
60042: PPUSH
60043: PPUSH
// if not unit or not area then
60044: NOP4
60048: NOT
60049: PUSH
60050: NOP4
60054: NOT
60055: OR
60056: IFFALSE 60060
// exit ;
60058: GO 60224
// tmp := AreaToList ( area , i ) ;
60060: NOP4
60064: PUSH
60065: NOP4
60069: PPUSH
60070: NOP4
60074: PPUSH
60075: NOP4
60079: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60080: NOP4
60084: PUSH
60085: DOUBLE
60086: LD_INT 1
60088: DEC
60089: ST_TO_ADDR
60090: NOP4
60094: PUSH
60095: LD_INT 1
60097: ARRAY
60098: PUSH
60099: FOR_TO
60100: IFFALSE 60222
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60102: NOP4
60106: PUSH
60107: NOP4
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PUSH
60116: NOP4
60120: ARRAY
60121: PUSH
60122: NOP4
60126: PUSH
60127: LD_INT 2
60129: ARRAY
60130: PUSH
60131: NOP4
60135: ARRAY
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60141: NOP4
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PPUSH
60150: NOP4
60154: PUSH
60155: LD_INT 2
60157: ARRAY
60158: PPUSH
60159: NOP4
60163: PUSH
60164: LD_INT 0
60166: EQUAL
60167: IFFALSE 60220
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60169: NOP4
60173: PPUSH
60174: NOP4
60178: PUSH
60179: LD_INT 1
60181: ARRAY
60182: PPUSH
60183: NOP4
60187: PUSH
60188: LD_INT 2
60190: ARRAY
60191: PPUSH
60192: NOP4
60196: PPUSH
60197: NOP4
// result := IsPlaced ( unit ) ;
60201: NOP4
60205: PUSH
60206: NOP4
60210: PPUSH
60211: NOP4
60215: ST_TO_ADDR
// exit ;
60216: POP
60217: POP
60218: GO 60224
// end ; end ;
60220: GO 60099
60222: POP
60223: POP
// end ;
60224: LD_VAR 0 4
60228: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60229: LD_INT 0
60231: PPUSH
60232: PPUSH
60233: PPUSH
// if not side or side > 8 then
60234: NOP4
60238: NOT
60239: PUSH
60240: NOP4
60244: PUSH
60245: LD_INT 8
60247: GREATER
60248: OR
60249: IFFALSE 60253
// exit ;
60251: GO 60440
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60253: NOP4
60257: PUSH
60258: LD_INT 22
60260: PUSH
60261: NOP4
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 21
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PPUSH
60284: NOP4
60288: ST_TO_ADDR
// if not tmp then
60289: NOP4
60293: NOT
60294: IFFALSE 60298
// exit ;
60296: GO 60440
// enable_addtolog := true ;
60298: LD_ADDR_OWVAR 81
60302: PUSH
60303: LD_INT 1
60305: ST_TO_ADDR
// AddToLog ( [ ) ;
60306: LD_STRING [
60308: PPUSH
60309: NOP4
// for i in tmp do
60313: NOP4
60317: PUSH
60318: NOP4
60322: PUSH
60323: FOR_IN
60324: IFFALSE 60431
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60326: LD_STRING [
60328: PUSH
60329: NOP4
60333: PPUSH
60334: NOP4
60338: STR
60339: PUSH
60340: LD_STRING , 
60342: STR
60343: PUSH
60344: NOP4
60348: PPUSH
60349: NOP4
60353: STR
60354: PUSH
60355: LD_STRING , 
60357: STR
60358: PUSH
60359: NOP4
60363: PPUSH
60364: NOP4
60368: STR
60369: PUSH
60370: LD_STRING , 
60372: STR
60373: PUSH
60374: NOP4
60378: PPUSH
60379: NOP4
60383: STR
60384: PUSH
60385: LD_STRING , 
60387: STR
60388: PUSH
60389: NOP4
60393: PPUSH
60394: LD_INT 1
60396: PPUSH
60397: NOP4
60401: STR
60402: PUSH
60403: LD_STRING , 
60405: STR
60406: PUSH
60407: NOP4
60411: PPUSH
60412: LD_INT 2
60414: PPUSH
60415: NOP4
60419: STR
60420: PUSH
60421: LD_STRING ],
60423: STR
60424: PPUSH
60425: NOP4
// end ;
60429: GO 60323
60431: POP
60432: POP
// AddToLog ( ]; ) ;
60433: LD_STRING ];
60435: PPUSH
60436: NOP4
// end ;
60440: LD_VAR 0 2
60444: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60445: LD_INT 0
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
// if not area or not rate or not max then
60452: NOP4
60456: NOT
60457: PUSH
60458: NOP4
60462: NOT
60463: OR
60464: PUSH
60465: NOP4
60469: NOT
60470: OR
60471: IFFALSE 60475
// exit ;
60473: GO 60667
// while 1 do
60475: LD_INT 1
60477: IFFALSE 60667
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60479: NOP4
60483: PUSH
60484: NOP4
60488: PPUSH
60489: LD_INT 1
60491: PPUSH
60492: NOP4
60496: PUSH
60497: LD_INT 10
60499: MUL
60500: ST_TO_ADDR
// r := rate / 10 ;
60501: NOP4
60505: PUSH
60506: NOP4
60510: PUSH
60511: LD_INT 10
60513: DIVREAL
60514: ST_TO_ADDR
// time := 1 1$00 ;
60515: NOP4
60519: PUSH
60520: LD_INT 2100
60522: ST_TO_ADDR
// if amount < min then
60523: NOP4
60527: PUSH
60528: NOP4
60532: LESS
60533: IFFALSE 60551
// r := r * 2 else
60535: NOP4
60539: PUSH
60540: NOP4
60544: PUSH
60545: LD_INT 2
60547: MUL
60548: ST_TO_ADDR
60549: GO 60577
// if amount > max then
60551: NOP4
60555: PUSH
60556: NOP4
60560: GREATER
60561: IFFALSE 60577
// r := r / 2 ;
60563: NOP4
60567: PUSH
60568: NOP4
60572: PUSH
60573: LD_INT 2
60575: DIVREAL
60576: ST_TO_ADDR
// time := time / r ;
60577: NOP4
60581: PUSH
60582: NOP4
60586: PUSH
60587: NOP4
60591: DIVREAL
60592: ST_TO_ADDR
// if time < 0 then
60593: NOP4
60597: PUSH
60598: LD_INT 0
60600: LESS
60601: IFFALSE 60618
// time := time * - 1 ;
60603: NOP4
60607: PUSH
60608: NOP4
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: MUL
60617: ST_TO_ADDR
// wait ( time ) ;
60618: NOP4
60622: PPUSH
60623: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60627: LD_INT 35
60629: PPUSH
60630: LD_INT 875
60632: PPUSH
60633: NOP4
60637: PPUSH
60638: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60642: LD_INT 1
60644: PPUSH
60645: LD_INT 5
60647: PPUSH
60648: NOP4
60652: PPUSH
60653: NOP4
60657: PPUSH
60658: LD_INT 1
60660: PPUSH
60661: NOP4
// end ;
60665: GO 60475
// end ;
60667: LD_VAR 0 5
60671: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60672: LD_INT 0
60674: PPUSH
60675: PPUSH
60676: PPUSH
60677: PPUSH
60678: PPUSH
60679: PPUSH
60680: PPUSH
60681: PPUSH
// if not turrets or not factories then
60682: NOP4
60686: NOT
60687: PUSH
60688: NOP4
60692: NOT
60693: OR
60694: IFFALSE 60698
// exit ;
60696: GO 61005
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60698: NOP4
60702: PUSH
60703: LD_INT 5
60705: PUSH
60706: LD_INT 6
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 4
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 5
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 24
60740: PUSH
60741: LD_INT 25
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 23
60750: PUSH
60751: LD_INT 27
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 42
60764: PUSH
60765: LD_INT 43
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 44
60774: PUSH
60775: LD_INT 46
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 45
60784: PUSH
60785: LD_INT 47
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// result := [ ] ;
60802: NOP4
60806: PUSH
60807: EMPTY
60808: ST_TO_ADDR
// for i in turrets do
60809: NOP4
60813: PUSH
60814: NOP4
60818: PUSH
60819: FOR_IN
60820: IFFALSE 61003
// begin nat := GetNation ( i ) ;
60822: NOP4
60826: PUSH
60827: NOP4
60831: PPUSH
60832: NOP4
60836: ST_TO_ADDR
// weapon := 0 ;
60837: NOP4
60841: PUSH
60842: LD_INT 0
60844: ST_TO_ADDR
// if not nat then
60845: NOP4
60849: NOT
60850: IFFALSE 60854
// continue ;
60852: GO 60819
// for j in list [ nat ] do
60854: NOP4
60858: PUSH
60859: NOP4
60863: PUSH
60864: NOP4
60868: ARRAY
60869: PUSH
60870: FOR_IN
60871: IFFALSE 60912
// if GetBWeapon ( i ) = j [ 1 ] then
60873: NOP4
60877: PPUSH
60878: NOP4
60882: PUSH
60883: NOP4
60887: PUSH
60888: LD_INT 1
60890: ARRAY
60891: EQUAL
60892: IFFALSE 60910
// begin weapon := j [ 2 ] ;
60894: NOP4
60898: PUSH
60899: NOP4
60903: PUSH
60904: LD_INT 2
60906: ARRAY
60907: ST_TO_ADDR
// break ;
60908: GO 60912
// end ;
60910: GO 60870
60912: POP
60913: POP
// if not weapon then
60914: NOP4
60918: NOT
60919: IFFALSE 60923
// continue ;
60921: GO 60819
// for k in factories do
60923: NOP4
60927: PUSH
60928: NOP4
60932: PUSH
60933: FOR_IN
60934: IFFALSE 60999
// begin weapons := AvailableWeaponList ( k ) ;
60936: NOP4
60940: PUSH
60941: NOP4
60945: PPUSH
60946: NOP4
60950: ST_TO_ADDR
// if not weapons then
60951: NOP4
60955: NOT
60956: IFFALSE 60960
// continue ;
60958: GO 60933
// if weapon in weapons then
60960: NOP4
60964: PUSH
60965: NOP4
60969: IN
60970: IFFALSE 60997
// begin result := [ i , weapon ] ;
60972: NOP4
60976: PUSH
60977: NOP4
60981: PUSH
60982: NOP4
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// exit ;
60991: POP
60992: POP
60993: POP
60994: POP
60995: GO 61005
// end ; end ;
60997: GO 60933
60999: POP
61000: POP
// end ;
61001: GO 60819
61003: POP
61004: POP
// end ;
61005: LD_VAR 0 3
61009: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61010: LD_INT 0
61012: PPUSH
// if not side or side > 8 then
61013: NOP4
61017: NOT
61018: PUSH
61019: NOP4
61023: PUSH
61024: LD_INT 8
61026: GREATER
61027: OR
61028: IFFALSE 61032
// exit ;
61030: GO 61091
// if not range then
61032: NOP4
61036: NOT
61037: IFFALSE 61048
// range := - 12 ;
61039: NOP4
61043: PUSH
61044: LD_INT 12
61046: NEG
61047: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61048: NOP4
61052: PPUSH
61053: NOP4
61057: PPUSH
61058: NOP4
61062: PPUSH
61063: NOP4
61067: PPUSH
61068: NOP4
// RemoveSeeing ( x , y , side ) ;
61072: NOP4
61076: PPUSH
61077: NOP4
61081: PPUSH
61082: NOP4
61086: PPUSH
61087: NOP4
// end ;
61091: LD_VAR 0 5
61095: RET
// export function Video ( mode ) ; begin
61096: LD_INT 0
61098: PPUSH
// ingame_video = mode ;
61099: LD_ADDR_OWVAR 52
61103: PUSH
61104: NOP4
61108: ST_TO_ADDR
// interface_hidden = mode ;
61109: LD_ADDR_OWVAR 54
61113: PUSH
61114: NOP4
61118: ST_TO_ADDR
// end ;
61119: LD_VAR 0 2
61123: RET
// export function Join ( array , element ) ; begin
61124: LD_INT 0
61126: PPUSH
// result := array ^ element ;
61127: NOP4
61131: PUSH
61132: NOP4
61136: PUSH
61137: NOP4
61141: ADD
61142: ST_TO_ADDR
// end ;
61143: LD_VAR 0 3
61147: RET
// export function JoinUnion ( array , element ) ; begin
61148: LD_INT 0
61150: PPUSH
// result := array union element ;
61151: NOP4
61155: PUSH
61156: NOP4
61160: PUSH
61161: NOP4
61165: UNION
61166: ST_TO_ADDR
// end ;
61167: LD_VAR 0 3
61171: RET
// export function GetBehemoths ( side ) ; begin
61172: LD_INT 0
61174: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61175: NOP4
61179: PUSH
61180: LD_INT 22
61182: PUSH
61183: NOP4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 31
61194: PUSH
61195: LD_INT 25
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PPUSH
61206: NOP4
61210: ST_TO_ADDR
// end ;
61211: LD_VAR 0 2
61215: RET
// export function Shuffle ( array ) ; var i , index ; begin
61216: LD_INT 0
61218: PPUSH
61219: PPUSH
61220: PPUSH
// result := [ ] ;
61221: NOP4
61225: PUSH
61226: EMPTY
61227: ST_TO_ADDR
// if not array then
61228: NOP4
61232: NOT
61233: IFFALSE 61237
// exit ;
61235: GO 61336
// Randomize ;
61237: NOP4
// for i = array downto 1 do
61241: NOP4
61245: PUSH
61246: DOUBLE
61247: NOP4
61251: INC
61252: ST_TO_ADDR
61253: LD_INT 1
61255: PUSH
61256: FOR_DOWNTO
61257: IFFALSE 61334
// begin index := rand ( 1 , array ) ;
61259: NOP4
61263: PUSH
61264: LD_INT 1
61266: PPUSH
61267: NOP4
61271: PPUSH
61272: NOP4
61276: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61277: NOP4
61281: PUSH
61282: NOP4
61286: PPUSH
61287: NOP4
61291: PUSH
61292: LD_INT 1
61294: PLUS
61295: PPUSH
61296: NOP4
61300: PUSH
61301: NOP4
61305: ARRAY
61306: PPUSH
61307: NOP4
61311: ST_TO_ADDR
// array := Delete ( array , index ) ;
61312: NOP4
61316: PUSH
61317: NOP4
61321: PPUSH
61322: NOP4
61326: PPUSH
61327: NOP4
61331: ST_TO_ADDR
// end ;
61332: GO 61256
61334: POP
61335: POP
// end ; end_of_file
61336: LD_VAR 0 2
61340: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
61341: GO 61343
61343: DISABLE
// begin ru_radar := 98 ;
61344: NOP4
61348: PUSH
61349: LD_INT 98
61351: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61352: NOP4
61356: PUSH
61357: LD_INT 89
61359: ST_TO_ADDR
// us_hack := 99 ;
61360: NOP4
61364: PUSH
61365: LD_INT 99
61367: ST_TO_ADDR
// us_artillery := 97 ;
61368: NOP4
61372: PUSH
61373: LD_INT 97
61375: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61376: NOP4
61380: PUSH
61381: LD_INT 91
61383: ST_TO_ADDR
// end ; end_of_file
61384: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
61385: LD_INT 0
61387: PPUSH
61388: PPUSH
// skirmish := false ;
61389: NOP4
61393: PUSH
61394: LD_INT 0
61396: ST_TO_ADDR
// debug_mc := false ;
61397: NOP4
61401: PUSH
61402: LD_INT 0
61404: ST_TO_ADDR
// mc_bases := [ ] ;
61405: NOP4
61409: PUSH
61410: EMPTY
61411: ST_TO_ADDR
// mc_sides := [ ] ;
61412: NOP4
61416: PUSH
61417: EMPTY
61418: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61419: NOP4
61423: PUSH
61424: EMPTY
61425: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61426: NOP4
61430: PUSH
61431: EMPTY
61432: ST_TO_ADDR
// mc_need_heal := [ ] ;
61433: NOP4
61437: PUSH
61438: EMPTY
61439: ST_TO_ADDR
// mc_healers := [ ] ;
61440: NOP4
61444: PUSH
61445: EMPTY
61446: ST_TO_ADDR
// mc_build_list := [ ] ;
61447: NOP4
61451: PUSH
61452: EMPTY
61453: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
61454: NOP4
61458: PUSH
61459: EMPTY
61460: ST_TO_ADDR
// mc_builders := [ ] ;
61461: NOP4
61465: PUSH
61466: EMPTY
61467: ST_TO_ADDR
// mc_construct_list := [ ] ;
61468: NOP4
61472: PUSH
61473: EMPTY
61474: ST_TO_ADDR
// mc_turret_list := [ ] ;
61475: NOP4
61479: PUSH
61480: EMPTY
61481: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
61482: NOP4
61486: PUSH
61487: EMPTY
61488: ST_TO_ADDR
// mc_miners := [ ] ;
61489: NOP4
61493: PUSH
61494: EMPTY
61495: ST_TO_ADDR
// mc_mines := [ ] ;
61496: NOP4
61500: PUSH
61501: EMPTY
61502: ST_TO_ADDR
// mc_minefields := [ ] ;
61503: NOP4
61507: PUSH
61508: EMPTY
61509: ST_TO_ADDR
// mc_crates := [ ] ;
61510: NOP4
61514: PUSH
61515: EMPTY
61516: ST_TO_ADDR
// mc_crates_collector := [ ] ;
61517: NOP4
61521: PUSH
61522: EMPTY
61523: ST_TO_ADDR
// mc_crates_area := [ ] ;
61524: NOP4
61528: PUSH
61529: EMPTY
61530: ST_TO_ADDR
// mc_vehicles := [ ] ;
61531: NOP4
61535: PUSH
61536: EMPTY
61537: ST_TO_ADDR
// mc_attack := [ ] ;
61538: NOP4
61542: PUSH
61543: EMPTY
61544: ST_TO_ADDR
// mc_produce := [ ] ;
61545: NOP4
61549: PUSH
61550: EMPTY
61551: ST_TO_ADDR
// mc_defender := [ ] ;
61552: NOP4
61556: PUSH
61557: EMPTY
61558: ST_TO_ADDR
// mc_parking := [ ] ;
61559: NOP4
61563: PUSH
61564: EMPTY
61565: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
61566: NOP4
61570: PUSH
61571: EMPTY
61572: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
61573: NOP4
61577: PUSH
61578: EMPTY
61579: ST_TO_ADDR
// mc_scan := [ ] ;
61580: NOP4
61584: PUSH
61585: EMPTY
61586: ST_TO_ADDR
// mc_scan_area := [ ] ;
61587: NOP4
61591: PUSH
61592: EMPTY
61593: ST_TO_ADDR
// mc_tech := [ ] ;
61594: NOP4
61598: PUSH
61599: EMPTY
61600: ST_TO_ADDR
// mc_class := [ ] ;
61601: NOP4
61605: PUSH
61606: EMPTY
61607: ST_TO_ADDR
// mc_class_case_use := [ ] ;
61608: NOP4
61612: PUSH
61613: EMPTY
61614: ST_TO_ADDR
// end ;
61615: LD_VAR 0 1
61619: RET
// export function MC_Kill ( base ) ; begin
61620: LD_INT 0
61622: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
61623: NOP4
61627: PUSH
61628: NOP4
61632: PPUSH
61633: NOP4
61637: PPUSH
61638: EMPTY
61639: PPUSH
61640: NOP4
61644: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
61645: NOP4
61649: PUSH
61650: NOP4
61654: PPUSH
61655: NOP4
61659: PPUSH
61660: EMPTY
61661: PPUSH
61662: NOP4
61666: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
61667: NOP4
61671: PUSH
61672: NOP4
61676: PPUSH
61677: NOP4
61681: PPUSH
61682: EMPTY
61683: PPUSH
61684: NOP4
61688: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
61689: NOP4
61693: PUSH
61694: NOP4
61698: PPUSH
61699: NOP4
61703: PPUSH
61704: EMPTY
61705: PPUSH
61706: NOP4
61710: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
61711: NOP4
61715: PUSH
61716: NOP4
61720: PPUSH
61721: NOP4
61725: PPUSH
61726: EMPTY
61727: PPUSH
61728: NOP4
61732: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
61733: NOP4
61737: PUSH
61738: NOP4
61742: PPUSH
61743: NOP4
61747: PPUSH
61748: EMPTY
61749: PPUSH
61750: NOP4
61754: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
61755: NOP4
61759: PUSH
61760: NOP4
61764: PPUSH
61765: NOP4
61769: PPUSH
61770: EMPTY
61771: PPUSH
61772: NOP4
61776: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
61777: NOP4
61781: PUSH
61782: NOP4
61786: PPUSH
61787: NOP4
61791: PPUSH
61792: EMPTY
61793: PPUSH
61794: NOP4
61798: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
61799: NOP4
61803: PUSH
61804: NOP4
61808: PPUSH
61809: NOP4
61813: PPUSH
61814: EMPTY
61815: PPUSH
61816: NOP4
61820: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
61821: NOP4
61825: PUSH
61826: NOP4
61830: PPUSH
61831: NOP4
61835: PPUSH
61836: EMPTY
61837: PPUSH
61838: NOP4
61842: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
61843: NOP4
61847: PUSH
61848: NOP4
61852: PPUSH
61853: NOP4
61857: PPUSH
61858: EMPTY
61859: PPUSH
61860: NOP4
61864: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
61865: NOP4
61869: PUSH
61870: NOP4
61874: PPUSH
61875: NOP4
61879: PPUSH
61880: LD_INT 0
61882: PPUSH
61883: NOP4
61887: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
61888: NOP4
61892: PUSH
61893: NOP4
61897: PPUSH
61898: NOP4
61902: PPUSH
61903: EMPTY
61904: PPUSH
61905: NOP4
61909: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
61910: NOP4
61914: PUSH
61915: NOP4
61919: PPUSH
61920: NOP4
61924: PPUSH
61925: EMPTY
61926: PPUSH
61927: NOP4
61931: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
61932: NOP4
61936: PUSH
61937: NOP4
61941: PPUSH
61942: NOP4
61946: PPUSH
61947: EMPTY
61948: PPUSH
61949: NOP4
61953: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
61954: NOP4
61958: PUSH
61959: NOP4
61963: PPUSH
61964: NOP4
61968: PPUSH
61969: EMPTY
61970: PPUSH
61971: NOP4
61975: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
61976: NOP4
61980: PUSH
61981: NOP4
61985: PPUSH
61986: NOP4
61990: PPUSH
61991: EMPTY
61992: PPUSH
61993: NOP4
61997: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
61998: NOP4
62002: PUSH
62003: NOP4
62007: PPUSH
62008: NOP4
62012: PPUSH
62013: EMPTY
62014: PPUSH
62015: NOP4
62019: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62020: NOP4
62024: PUSH
62025: NOP4
62029: PPUSH
62030: NOP4
62034: PPUSH
62035: EMPTY
62036: PPUSH
62037: NOP4
62041: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62042: NOP4
62046: PUSH
62047: NOP4
62051: PPUSH
62052: NOP4
62056: PPUSH
62057: EMPTY
62058: PPUSH
62059: NOP4
62063: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62064: NOP4
62068: PUSH
62069: NOP4
62073: PPUSH
62074: NOP4
62078: PPUSH
62079: EMPTY
62080: PPUSH
62081: NOP4
62085: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62086: NOP4
62090: PUSH
62091: NOP4
62095: PPUSH
62096: NOP4
62100: PPUSH
62101: EMPTY
62102: PPUSH
62103: NOP4
62107: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62108: NOP4
62112: PUSH
62113: NOP4
62117: PPUSH
62118: NOP4
62122: PPUSH
62123: EMPTY
62124: PPUSH
62125: NOP4
62129: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62130: NOP4
62134: PUSH
62135: NOP4
62139: PPUSH
62140: NOP4
62144: PPUSH
62145: EMPTY
62146: PPUSH
62147: NOP4
62151: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62152: NOP4
62156: PUSH
62157: NOP4
62161: PPUSH
62162: NOP4
62166: PPUSH
62167: EMPTY
62168: PPUSH
62169: NOP4
62173: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62174: NOP4
62178: PUSH
62179: NOP4
62183: PPUSH
62184: NOP4
62188: PPUSH
62189: EMPTY
62190: PPUSH
62191: NOP4
62195: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62196: NOP4
62200: PUSH
62201: NOP4
62205: PPUSH
62206: NOP4
62210: PPUSH
62211: EMPTY
62212: PPUSH
62213: NOP4
62217: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62218: NOP4
62222: PUSH
62223: NOP4
62227: PPUSH
62228: NOP4
62232: PPUSH
62233: EMPTY
62234: PPUSH
62235: NOP4
62239: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62240: NOP4
62244: PUSH
62245: NOP4
62249: PPUSH
62250: NOP4
62254: PPUSH
62255: EMPTY
62256: PPUSH
62257: NOP4
62261: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62262: NOP4
62266: PUSH
62267: NOP4
62271: PPUSH
62272: NOP4
62276: PPUSH
62277: EMPTY
62278: PPUSH
62279: NOP4
62283: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62284: NOP4
62288: PUSH
62289: NOP4
62293: PPUSH
62294: NOP4
62298: PPUSH
62299: EMPTY
62300: PPUSH
62301: NOP4
62305: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62306: NOP4
62310: PUSH
62311: NOP4
62315: PPUSH
62316: NOP4
62320: PPUSH
62321: EMPTY
62322: PPUSH
62323: NOP4
62327: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62328: NOP4
62332: PUSH
62333: NOP4
62337: PPUSH
62338: NOP4
62342: PPUSH
62343: EMPTY
62344: PPUSH
62345: NOP4
62349: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62350: NOP4
62354: PUSH
62355: NOP4
62359: PPUSH
62360: NOP4
62364: PPUSH
62365: EMPTY
62366: PPUSH
62367: NOP4
62371: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62372: NOP4
62376: PUSH
62377: NOP4
62381: PPUSH
62382: NOP4
62386: PPUSH
62387: EMPTY
62388: PPUSH
62389: NOP4
62393: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62394: NOP4
62398: PUSH
62399: NOP4
62403: PPUSH
62404: NOP4
62408: PPUSH
62409: EMPTY
62410: PPUSH
62411: NOP4
62415: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62416: NOP4
62420: PUSH
62421: NOP4
62425: PPUSH
62426: NOP4
62430: PPUSH
62431: EMPTY
62432: PPUSH
62433: NOP4
62437: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62438: NOP4
62442: PUSH
62443: NOP4
62447: PPUSH
62448: NOP4
62452: PPUSH
62453: EMPTY
62454: PPUSH
62455: NOP4
62459: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
62460: NOP4
62464: PUSH
62465: NOP4
62469: PPUSH
62470: NOP4
62474: PPUSH
62475: EMPTY
62476: PPUSH
62477: NOP4
62481: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
62482: NOP4
62486: PUSH
62487: NOP4
62491: PPUSH
62492: NOP4
62496: PPUSH
62497: EMPTY
62498: PPUSH
62499: NOP4
62503: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
62504: NOP4
62508: PUSH
62509: NOP4
62513: PPUSH
62514: NOP4
62518: PPUSH
62519: LD_INT 0
62521: PPUSH
62522: NOP4
62526: ST_TO_ADDR
// end ;
62527: LD_VAR 0 2
62531: RET
// export function MC_Add ( side , units ) ; var base ; begin
62532: LD_INT 0
62534: PPUSH
62535: PPUSH
// base := mc_bases + 1 ;
62536: NOP4
62540: PUSH
62541: NOP4
62545: PUSH
62546: LD_INT 1
62548: PLUS
62549: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
62550: NOP4
62554: PUSH
62555: NOP4
62559: PPUSH
62560: NOP4
62564: PPUSH
62565: NOP4
62569: PPUSH
62570: NOP4
62574: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
62575: NOP4
62579: PUSH
62580: NOP4
62584: PPUSH
62585: NOP4
62589: PPUSH
62590: NOP4
62594: PPUSH
62595: NOP4
62599: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62600: NOP4
62604: PUSH
62605: NOP4
62609: PPUSH
62610: NOP4
62614: PPUSH
62615: EMPTY
62616: PPUSH
62617: NOP4
62621: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62622: NOP4
62626: PUSH
62627: NOP4
62631: PPUSH
62632: NOP4
62636: PPUSH
62637: EMPTY
62638: PPUSH
62639: NOP4
62643: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62644: NOP4
62648: PUSH
62649: NOP4
62653: PPUSH
62654: NOP4
62658: PPUSH
62659: EMPTY
62660: PPUSH
62661: NOP4
62665: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62666: NOP4
62670: PUSH
62671: NOP4
62675: PPUSH
62676: NOP4
62680: PPUSH
62681: EMPTY
62682: PPUSH
62683: NOP4
62687: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62688: NOP4
62692: PUSH
62693: NOP4
62697: PPUSH
62698: NOP4
62702: PPUSH
62703: EMPTY
62704: PPUSH
62705: NOP4
62709: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62710: NOP4
62714: PUSH
62715: NOP4
62719: PPUSH
62720: NOP4
62724: PPUSH
62725: EMPTY
62726: PPUSH
62727: NOP4
62731: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62732: NOP4
62736: PUSH
62737: NOP4
62741: PPUSH
62742: NOP4
62746: PPUSH
62747: EMPTY
62748: PPUSH
62749: NOP4
62753: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62754: NOP4
62758: PUSH
62759: NOP4
62763: PPUSH
62764: NOP4
62768: PPUSH
62769: EMPTY
62770: PPUSH
62771: NOP4
62775: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62776: NOP4
62780: PUSH
62781: NOP4
62785: PPUSH
62786: NOP4
62790: PPUSH
62791: EMPTY
62792: PPUSH
62793: NOP4
62797: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62798: NOP4
62802: PUSH
62803: NOP4
62807: PPUSH
62808: NOP4
62812: PPUSH
62813: EMPTY
62814: PPUSH
62815: NOP4
62819: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62820: NOP4
62824: PUSH
62825: NOP4
62829: PPUSH
62830: NOP4
62834: PPUSH
62835: LD_INT 0
62837: PPUSH
62838: NOP4
62842: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62843: NOP4
62847: PUSH
62848: NOP4
62852: PPUSH
62853: NOP4
62857: PPUSH
62858: EMPTY
62859: PPUSH
62860: NOP4
62864: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62865: NOP4
62869: PUSH
62870: NOP4
62874: PPUSH
62875: NOP4
62879: PPUSH
62880: EMPTY
62881: PPUSH
62882: NOP4
62886: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62887: NOP4
62891: PUSH
62892: NOP4
62896: PPUSH
62897: NOP4
62901: PPUSH
62902: EMPTY
62903: PPUSH
62904: NOP4
62908: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62909: NOP4
62913: PUSH
62914: NOP4
62918: PPUSH
62919: NOP4
62923: PPUSH
62924: EMPTY
62925: PPUSH
62926: NOP4
62930: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62931: NOP4
62935: PUSH
62936: NOP4
62940: PPUSH
62941: NOP4
62945: PPUSH
62946: EMPTY
62947: PPUSH
62948: NOP4
62952: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62953: NOP4
62957: PUSH
62958: NOP4
62962: PPUSH
62963: NOP4
62967: PPUSH
62968: EMPTY
62969: PPUSH
62970: NOP4
62974: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62975: NOP4
62979: PUSH
62980: NOP4
62984: PPUSH
62985: NOP4
62989: PPUSH
62990: EMPTY
62991: PPUSH
62992: NOP4
62996: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62997: NOP4
63001: PUSH
63002: NOP4
63006: PPUSH
63007: NOP4
63011: PPUSH
63012: EMPTY
63013: PPUSH
63014: NOP4
63018: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63019: NOP4
63023: PUSH
63024: NOP4
63028: PPUSH
63029: NOP4
63033: PPUSH
63034: EMPTY
63035: PPUSH
63036: NOP4
63040: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63041: NOP4
63045: PUSH
63046: NOP4
63050: PPUSH
63051: NOP4
63055: PPUSH
63056: EMPTY
63057: PPUSH
63058: NOP4
63062: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63063: NOP4
63067: PUSH
63068: NOP4
63072: PPUSH
63073: NOP4
63077: PPUSH
63078: EMPTY
63079: PPUSH
63080: NOP4
63084: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63085: NOP4
63089: PUSH
63090: NOP4
63094: PPUSH
63095: NOP4
63099: PPUSH
63100: EMPTY
63101: PPUSH
63102: NOP4
63106: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63107: NOP4
63111: PUSH
63112: NOP4
63116: PPUSH
63117: NOP4
63121: PPUSH
63122: EMPTY
63123: PPUSH
63124: NOP4
63128: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63129: NOP4
63133: PUSH
63134: NOP4
63138: PPUSH
63139: NOP4
63143: PPUSH
63144: EMPTY
63145: PPUSH
63146: NOP4
63150: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63151: NOP4
63155: PUSH
63156: NOP4
63160: PPUSH
63161: NOP4
63165: PPUSH
63166: EMPTY
63167: PPUSH
63168: NOP4
63172: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63173: NOP4
63177: PUSH
63178: NOP4
63182: PPUSH
63183: NOP4
63187: PPUSH
63188: EMPTY
63189: PPUSH
63190: NOP4
63194: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63195: NOP4
63199: PUSH
63200: NOP4
63204: PPUSH
63205: NOP4
63209: PPUSH
63210: EMPTY
63211: PPUSH
63212: NOP4
63216: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63217: NOP4
63221: PUSH
63222: NOP4
63226: PPUSH
63227: NOP4
63231: PPUSH
63232: EMPTY
63233: PPUSH
63234: NOP4
63238: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63239: NOP4
63243: PUSH
63244: NOP4
63248: PPUSH
63249: NOP4
63253: PPUSH
63254: EMPTY
63255: PPUSH
63256: NOP4
63260: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63261: NOP4
63265: PUSH
63266: NOP4
63270: PPUSH
63271: NOP4
63275: PPUSH
63276: EMPTY
63277: PPUSH
63278: NOP4
63282: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63283: NOP4
63287: PUSH
63288: NOP4
63292: PPUSH
63293: NOP4
63297: PPUSH
63298: EMPTY
63299: PPUSH
63300: NOP4
63304: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63305: NOP4
63309: PUSH
63310: NOP4
63314: PPUSH
63315: NOP4
63319: PPUSH
63320: EMPTY
63321: PPUSH
63322: NOP4
63326: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63327: NOP4
63331: PUSH
63332: NOP4
63336: PPUSH
63337: NOP4
63341: PPUSH
63342: EMPTY
63343: PPUSH
63344: NOP4
63348: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63349: NOP4
63353: PUSH
63354: NOP4
63358: PPUSH
63359: NOP4
63363: PPUSH
63364: EMPTY
63365: PPUSH
63366: NOP4
63370: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63371: NOP4
63375: PUSH
63376: NOP4
63380: PPUSH
63381: NOP4
63385: PPUSH
63386: EMPTY
63387: PPUSH
63388: NOP4
63392: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63393: NOP4
63397: PUSH
63398: NOP4
63402: PPUSH
63403: NOP4
63407: PPUSH
63408: EMPTY
63409: PPUSH
63410: NOP4
63414: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63415: NOP4
63419: PUSH
63420: NOP4
63424: PPUSH
63425: NOP4
63429: PPUSH
63430: EMPTY
63431: PPUSH
63432: NOP4
63436: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63437: NOP4
63441: PUSH
63442: NOP4
63446: PPUSH
63447: NOP4
63451: PPUSH
63452: EMPTY
63453: PPUSH
63454: NOP4
63458: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63459: NOP4
63463: PUSH
63464: NOP4
63468: PPUSH
63469: NOP4
63473: PPUSH
63474: LD_INT 0
63476: PPUSH
63477: NOP4
63481: ST_TO_ADDR
// result := base ;
63482: NOP4
63486: PUSH
63487: NOP4
63491: ST_TO_ADDR
// end ;
63492: LD_VAR 0 3
63496: RET
// export function MC_Start ( ) ; var i ; begin
63497: LD_INT 0
63499: PPUSH
63500: PPUSH
// for i = 1 to mc_bases do
63501: NOP4
63505: PUSH
63506: DOUBLE
63507: LD_INT 1
63509: DEC
63510: ST_TO_ADDR
63511: NOP4
63515: PUSH
63516: FOR_TO
63517: IFFALSE 64594
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
63519: NOP4
63523: PUSH
63524: NOP4
63528: PPUSH
63529: NOP4
63533: PPUSH
63534: NOP4
63538: PUSH
63539: NOP4
63543: ARRAY
63544: PUSH
63545: LD_INT 0
63547: DIFF
63548: PPUSH
63549: NOP4
63553: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
63554: NOP4
63558: PUSH
63559: NOP4
63563: PPUSH
63564: NOP4
63568: PPUSH
63569: EMPTY
63570: PPUSH
63571: NOP4
63575: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63576: NOP4
63580: PUSH
63581: NOP4
63585: PPUSH
63586: NOP4
63590: PPUSH
63591: EMPTY
63592: PPUSH
63593: NOP4
63597: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
63598: NOP4
63602: PUSH
63603: NOP4
63607: PPUSH
63608: NOP4
63612: PPUSH
63613: EMPTY
63614: PPUSH
63615: NOP4
63619: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
63620: NOP4
63624: PUSH
63625: NOP4
63629: PPUSH
63630: NOP4
63634: PPUSH
63635: EMPTY
63636: PUSH
63637: EMPTY
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PPUSH
63643: NOP4
63647: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
63648: NOP4
63652: PUSH
63653: NOP4
63657: PPUSH
63658: NOP4
63662: PPUSH
63663: EMPTY
63664: PPUSH
63665: NOP4
63669: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
63670: NOP4
63674: PUSH
63675: NOP4
63679: PPUSH
63680: NOP4
63684: PPUSH
63685: EMPTY
63686: PPUSH
63687: NOP4
63691: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
63692: NOP4
63696: PUSH
63697: NOP4
63701: PPUSH
63702: NOP4
63706: PPUSH
63707: EMPTY
63708: PPUSH
63709: NOP4
63713: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
63714: NOP4
63718: PUSH
63719: NOP4
63723: PPUSH
63724: NOP4
63728: PPUSH
63729: EMPTY
63730: PPUSH
63731: NOP4
63735: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
63736: NOP4
63740: PUSH
63741: NOP4
63745: PPUSH
63746: NOP4
63750: PPUSH
63751: NOP4
63755: PUSH
63756: NOP4
63760: ARRAY
63761: PPUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 30
63767: PUSH
63768: LD_INT 32
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 30
63777: PUSH
63778: LD_INT 33
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PPUSH
63790: NOP4
63794: PPUSH
63795: NOP4
63799: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
63800: NOP4
63804: PUSH
63805: NOP4
63809: PPUSH
63810: NOP4
63814: PPUSH
63815: NOP4
63819: PUSH
63820: NOP4
63824: ARRAY
63825: PPUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 30
63831: PUSH
63832: LD_INT 32
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 30
63841: PUSH
63842: LD_INT 31
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 58
63856: PUSH
63857: EMPTY
63858: LIST
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PPUSH
63864: NOP4
63868: PPUSH
63869: NOP4
63873: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
63874: NOP4
63878: PUSH
63879: NOP4
63883: PPUSH
63884: NOP4
63888: PPUSH
63889: EMPTY
63890: PPUSH
63891: NOP4
63895: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
63896: NOP4
63900: PUSH
63901: NOP4
63905: PPUSH
63906: NOP4
63910: PPUSH
63911: EMPTY
63912: PPUSH
63913: NOP4
63917: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
63918: NOP4
63922: PUSH
63923: NOP4
63927: PPUSH
63928: NOP4
63932: PPUSH
63933: EMPTY
63934: PPUSH
63935: NOP4
63939: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
63940: NOP4
63944: PUSH
63945: NOP4
63949: PPUSH
63950: NOP4
63954: PPUSH
63955: EMPTY
63956: PPUSH
63957: NOP4
63961: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
63962: NOP4
63966: PUSH
63967: NOP4
63971: PPUSH
63972: NOP4
63976: PPUSH
63977: EMPTY
63978: PPUSH
63979: NOP4
63983: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63984: NOP4
63988: PUSH
63989: NOP4
63993: PPUSH
63994: NOP4
63998: PPUSH
63999: EMPTY
64000: PPUSH
64001: NOP4
64005: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64006: NOP4
64010: PUSH
64011: NOP4
64015: PPUSH
64016: NOP4
64020: PPUSH
64021: EMPTY
64022: PPUSH
64023: NOP4
64027: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64028: NOP4
64032: PUSH
64033: NOP4
64037: PPUSH
64038: NOP4
64042: PPUSH
64043: EMPTY
64044: PPUSH
64045: NOP4
64049: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64050: NOP4
64054: PUSH
64055: NOP4
64059: PPUSH
64060: NOP4
64064: PPUSH
64065: EMPTY
64066: PPUSH
64067: NOP4
64071: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64072: NOP4
64076: PUSH
64077: NOP4
64081: PPUSH
64082: NOP4
64086: PPUSH
64087: EMPTY
64088: PPUSH
64089: NOP4
64093: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64094: NOP4
64098: PUSH
64099: NOP4
64103: PPUSH
64104: NOP4
64108: PPUSH
64109: EMPTY
64110: PPUSH
64111: NOP4
64115: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64116: NOP4
64120: PUSH
64121: NOP4
64125: PPUSH
64126: NOP4
64130: PPUSH
64131: LD_INT 0
64133: PPUSH
64134: NOP4
64138: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64139: NOP4
64143: PUSH
64144: NOP4
64148: PPUSH
64149: NOP4
64153: PPUSH
64154: LD_INT 0
64156: PPUSH
64157: NOP4
64161: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64162: NOP4
64166: PUSH
64167: NOP4
64171: PPUSH
64172: NOP4
64176: PPUSH
64177: EMPTY
64178: PPUSH
64179: NOP4
64183: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64184: NOP4
64188: PUSH
64189: NOP4
64193: PPUSH
64194: NOP4
64198: PPUSH
64199: LD_INT 0
64201: PPUSH
64202: NOP4
64206: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64207: NOP4
64211: PUSH
64212: NOP4
64216: PPUSH
64217: NOP4
64221: PPUSH
64222: EMPTY
64223: PPUSH
64224: NOP4
64228: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64229: NOP4
64233: PUSH
64234: NOP4
64238: PPUSH
64239: NOP4
64243: PPUSH
64244: LD_INT 0
64246: PPUSH
64247: NOP4
64251: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64252: NOP4
64256: PUSH
64257: NOP4
64261: PPUSH
64262: NOP4
64266: PPUSH
64267: EMPTY
64268: PPUSH
64269: NOP4
64273: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64274: NOP4
64278: PUSH
64279: NOP4
64283: PPUSH
64284: NOP4
64288: PPUSH
64289: EMPTY
64290: PPUSH
64291: NOP4
64295: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64296: NOP4
64300: PUSH
64301: NOP4
64305: PPUSH
64306: NOP4
64310: PPUSH
64311: EMPTY
64312: PPUSH
64313: NOP4
64317: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
64318: NOP4
64322: PUSH
64323: NOP4
64327: PPUSH
64328: NOP4
64332: PPUSH
64333: NOP4
64337: PUSH
64338: NOP4
64342: ARRAY
64343: PPUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 30
64349: PUSH
64350: LD_INT 6
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 30
64359: PUSH
64360: LD_INT 7
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 30
64369: PUSH
64370: LD_INT 8
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: PPUSH
64383: NOP4
64387: PPUSH
64388: NOP4
64392: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
64393: NOP4
64397: PUSH
64398: NOP4
64402: PPUSH
64403: NOP4
64407: PPUSH
64408: EMPTY
64409: PPUSH
64410: NOP4
64414: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
64415: NOP4
64419: PUSH
64420: NOP4
64424: PPUSH
64425: NOP4
64429: PPUSH
64430: EMPTY
64431: PPUSH
64432: NOP4
64436: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
64437: NOP4
64441: PUSH
64442: NOP4
64446: PPUSH
64447: NOP4
64451: PPUSH
64452: EMPTY
64453: PPUSH
64454: NOP4
64458: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
64459: NOP4
64463: PUSH
64464: NOP4
64468: PPUSH
64469: NOP4
64473: PPUSH
64474: EMPTY
64475: PPUSH
64476: NOP4
64480: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
64481: NOP4
64485: PUSH
64486: NOP4
64490: PPUSH
64491: NOP4
64495: PPUSH
64496: EMPTY
64497: PPUSH
64498: NOP4
64502: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
64503: NOP4
64507: PUSH
64508: NOP4
64512: PPUSH
64513: NOP4
64517: PPUSH
64518: EMPTY
64519: PPUSH
64520: NOP4
64524: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
64525: NOP4
64529: PUSH
64530: NOP4
64534: PPUSH
64535: NOP4
64539: PPUSH
64540: EMPTY
64541: PPUSH
64542: NOP4
64546: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
64547: NOP4
64551: PUSH
64552: NOP4
64556: PPUSH
64557: NOP4
64561: PPUSH
64562: EMPTY
64563: PPUSH
64564: NOP4
64568: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
64569: NOP4
64573: PUSH
64574: NOP4
64578: PPUSH
64579: NOP4
64583: PPUSH
64584: LD_INT 0
64586: PPUSH
64587: NOP4
64591: ST_TO_ADDR
// end ;
64592: GO 63516
64594: POP
64595: POP
// MC_InitSides ( ) ;
64596: NOP4
// MC_InitResearch ( ) ;
64600: NOP4
// CustomInitMacro ( ) ;
64604: NOP4
// skirmish := true ;
64608: NOP4
64612: PUSH
64613: LD_INT 1
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 1
64620: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
// if not mc_bases then
64629: NOP4
64633: NOT
64634: IFFALSE 64638
// exit ;
64636: GO 64877
// for i = 1 to 8 do
64638: NOP4
64642: PUSH
64643: DOUBLE
64644: LD_INT 1
64646: DEC
64647: ST_TO_ADDR
64648: LD_INT 8
64650: PUSH
64651: FOR_TO
64652: IFFALSE 64678
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
64654: NOP4
64658: PUSH
64659: NOP4
64663: PPUSH
64664: NOP4
64668: PPUSH
64669: EMPTY
64670: PPUSH
64671: NOP4
64675: ST_TO_ADDR
64676: GO 64651
64678: POP
64679: POP
// tmp := [ ] ;
64680: NOP4
64684: PUSH
64685: EMPTY
64686: ST_TO_ADDR
// for i = 1 to mc_sides do
64687: NOP4
64691: PUSH
64692: DOUBLE
64693: LD_INT 1
64695: DEC
64696: ST_TO_ADDR
64697: NOP4
64701: PUSH
64702: FOR_TO
64703: IFFALSE 64761
// if not mc_sides [ i ] in tmp then
64705: NOP4
64709: PUSH
64710: NOP4
64714: ARRAY
64715: PUSH
64716: NOP4
64720: IN
64721: NOT
64722: IFFALSE 64759
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
64724: NOP4
64728: PUSH
64729: NOP4
64733: PPUSH
64734: NOP4
64738: PUSH
64739: LD_INT 1
64741: PLUS
64742: PPUSH
64743: NOP4
64747: PUSH
64748: NOP4
64752: ARRAY
64753: PPUSH
64754: NOP4
64758: ST_TO_ADDR
64759: GO 64702
64761: POP
64762: POP
// if not tmp then
64763: NOP4
64767: NOT
64768: IFFALSE 64772
// exit ;
64770: GO 64877
// for j in tmp do
64772: NOP4
64776: PUSH
64777: NOP4
64781: PUSH
64782: FOR_IN
64783: IFFALSE 64875
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
64785: NOP4
64789: PUSH
64790: LD_INT 22
64792: PUSH
64793: NOP4
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PPUSH
64802: NOP4
64806: ST_TO_ADDR
// if not un then
64807: NOP4
64811: NOT
64812: IFFALSE 64816
// continue ;
64814: GO 64782
// nation := GetNation ( un [ 1 ] ) ;
64816: NOP4
64820: PUSH
64821: NOP4
64825: PUSH
64826: LD_INT 1
64828: ARRAY
64829: PPUSH
64830: NOP4
64834: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
64835: NOP4
64839: PUSH
64840: NOP4
64844: PPUSH
64845: NOP4
64849: PPUSH
64850: NOP4
64854: PPUSH
64855: NOP4
64859: PPUSH
64860: LD_INT 1
64862: PPUSH
64863: NOP4
64867: PPUSH
64868: NOP4
64872: ST_TO_ADDR
// end ;
64873: GO 64782
64875: POP
64876: POP
// end ;
64877: LD_VAR 0 1
64881: RET
// export function MC_InitSides ( ) ; var i ; begin
64882: LD_INT 0
64884: PPUSH
64885: PPUSH
// if not mc_bases then
64886: NOP4
64890: NOT
64891: IFFALSE 64895
// exit ;
64893: GO 64969
// for i = 1 to mc_bases do
64895: NOP4
64899: PUSH
64900: DOUBLE
64901: LD_INT 1
64903: DEC
64904: ST_TO_ADDR
64905: NOP4
64909: PUSH
64910: FOR_TO
64911: IFFALSE 64967
// if mc_bases [ i ] then
64913: NOP4
64917: PUSH
64918: NOP4
64922: ARRAY
64923: IFFALSE 64965
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
64925: NOP4
64929: PUSH
64930: NOP4
64934: PPUSH
64935: NOP4
64939: PPUSH
64940: NOP4
64944: PUSH
64945: NOP4
64949: ARRAY
64950: PUSH
64951: LD_INT 1
64953: ARRAY
64954: PPUSH
64955: NOP4
64959: PPUSH
64960: NOP4
64964: ST_TO_ADDR
64965: GO 64910
64967: POP
64968: POP
// end ;
64969: LD_VAR 0 1
64973: RET
// every 0 0$01 trigger skirmish do
64974: NOP4
64978: IFFALSE 65132
64980: GO 64982
64982: DISABLE
// begin enable ;
64983: ENABLE
// MC_CheckBuildings ( ) ;
64984: NOP4
// MC_CheckPeopleLife ( ) ;
64988: NOP4
// RaiseSailEvent ( 100 ) ;
64992: LD_INT 100
64994: PPUSH
64995: NOP4
// RaiseSailEvent ( 103 ) ;
64999: LD_INT 103
65001: PPUSH
65002: NOP4
// RaiseSailEvent ( 104 ) ;
65006: LD_INT 104
65008: PPUSH
65009: NOP4
// RaiseSailEvent ( 105 ) ;
65013: LD_INT 105
65015: PPUSH
65016: NOP4
// RaiseSailEvent ( 106 ) ;
65020: LD_INT 106
65022: PPUSH
65023: NOP4
// RaiseSailEvent ( 107 ) ;
65027: LD_INT 107
65029: PPUSH
65030: NOP4
// RaiseSailEvent ( 108 ) ;
65034: LD_INT 108
65036: PPUSH
65037: NOP4
// RaiseSailEvent ( 109 ) ;
65041: LD_INT 109
65043: PPUSH
65044: NOP4
// RaiseSailEvent ( 110 ) ;
65048: LD_INT 110
65050: PPUSH
65051: NOP4
// RaiseSailEvent ( 111 ) ;
65055: LD_INT 111
65057: PPUSH
65058: NOP4
// RaiseSailEvent ( 112 ) ;
65062: LD_INT 112
65064: PPUSH
65065: NOP4
// RaiseSailEvent ( 113 ) ;
65069: LD_INT 113
65071: PPUSH
65072: NOP4
// RaiseSailEvent ( 120 ) ;
65076: LD_INT 120
65078: PPUSH
65079: NOP4
// RaiseSailEvent ( 121 ) ;
65083: LD_INT 121
65085: PPUSH
65086: NOP4
// RaiseSailEvent ( 122 ) ;
65090: LD_INT 122
65092: PPUSH
65093: NOP4
// RaiseSailEvent ( 123 ) ;
65097: LD_INT 123
65099: PPUSH
65100: NOP4
// RaiseSailEvent ( 124 ) ;
65104: LD_INT 124
65106: PPUSH
65107: NOP4
// RaiseSailEvent ( 125 ) ;
65111: LD_INT 125
65113: PPUSH
65114: NOP4
// RaiseSailEvent ( 126 ) ;
65118: LD_INT 126
65120: PPUSH
65121: NOP4
// RaiseSailEvent ( 200 ) ;
65125: LD_INT 200
65127: PPUSH
65128: NOP4
// end ;
65132: END
// on SailEvent ( event ) do begin if event < 100 then
65133: NOP4
65137: PUSH
65138: LD_INT 100
65140: LESS
65141: IFFALSE 65152
// CustomEvent ( event ) ;
65143: NOP4
65147: PPUSH
65148: NOP4
// if event = 100 then
65152: NOP4
65156: PUSH
65157: LD_INT 100
65159: EQUAL
65160: IFFALSE 65166
// MC_ClassManager ( ) ;
65162: NOP4
// if event = 101 then
65166: NOP4
65170: PUSH
65171: LD_INT 101
65173: EQUAL
65174: IFFALSE 65180
// MC_RepairBuildings ( ) ;
65176: NOP4
// if event = 102 then
65180: NOP4
65184: PUSH
65185: LD_INT 102
65187: EQUAL
65188: IFFALSE 65194
// MC_Heal ( ) ;
65190: NOP4
// if event = 103 then
65194: NOP4
65198: PUSH
65199: LD_INT 103
65201: EQUAL
65202: IFFALSE 65208
// MC_Build ( ) ;
65204: NOP4
// if event = 104 then
65208: NOP4
65212: PUSH
65213: LD_INT 104
65215: EQUAL
65216: IFFALSE 65222
// MC_TurretWeapon ( ) ;
65218: NOP4
// if event = 105 then
65222: NOP4
65226: PUSH
65227: LD_INT 105
65229: EQUAL
65230: IFFALSE 65236
// MC_BuildUpgrade ( ) ;
65232: NOP4
// if event = 106 then
65236: NOP4
65240: PUSH
65241: LD_INT 106
65243: EQUAL
65244: IFFALSE 65250
// MC_PlantMines ( ) ;
65246: NOP4
// if event = 107 then
65250: NOP4
65254: PUSH
65255: LD_INT 107
65257: EQUAL
65258: IFFALSE 65264
// MC_CollectCrates ( ) ;
65260: NOP4
// if event = 108 then
65264: NOP4
65268: PUSH
65269: LD_INT 108
65271: EQUAL
65272: IFFALSE 65278
// MC_LinkRemoteControl ( ) ;
65274: NOP4
// if event = 109 then
65278: NOP4
65282: PUSH
65283: LD_INT 109
65285: EQUAL
65286: IFFALSE 65292
// MC_ProduceVehicle ( ) ;
65288: NOP4
// if event = 110 then
65292: NOP4
65296: PUSH
65297: LD_INT 110
65299: EQUAL
65300: IFFALSE 65306
// MC_SendAttack ( ) ;
65302: NOP4
// if event = 111 then
65306: NOP4
65310: PUSH
65311: LD_INT 111
65313: EQUAL
65314: IFFALSE 65320
// MC_Defend ( ) ;
65316: NOP4
// if event = 112 then
65320: NOP4
65324: PUSH
65325: LD_INT 112
65327: EQUAL
65328: IFFALSE 65334
// MC_Research ( ) ;
65330: NOP4
// if event = 113 then
65334: NOP4
65338: PUSH
65339: LD_INT 113
65341: EQUAL
65342: IFFALSE 65348
// MC_MinesTrigger ( ) ;
65344: NOP4
// if event = 120 then
65348: NOP4
65352: PUSH
65353: LD_INT 120
65355: EQUAL
65356: IFFALSE 65362
// MC_RepairVehicle ( ) ;
65358: NOP4
// if event = 121 then
65362: NOP4
65366: PUSH
65367: LD_INT 121
65369: EQUAL
65370: IFFALSE 65376
// MC_TameApe ( ) ;
65372: NOP4
// if event = 122 then
65376: NOP4
65380: PUSH
65381: LD_INT 122
65383: EQUAL
65384: IFFALSE 65390
// MC_ChangeApeClass ( ) ;
65386: NOP4
// if event = 123 then
65390: NOP4
65394: PUSH
65395: LD_INT 123
65397: EQUAL
65398: IFFALSE 65404
// MC_Bazooka ( ) ;
65400: NOP4
// if event = 124 then
65404: NOP4
65408: PUSH
65409: LD_INT 124
65411: EQUAL
65412: IFFALSE 65418
// MC_TeleportExit ( ) ;
65414: NOP4
// if event = 125 then
65418: NOP4
65422: PUSH
65423: LD_INT 125
65425: EQUAL
65426: IFFALSE 65432
// MC_Deposits ( ) ;
65428: NOP4
// if event = 126 then
65432: NOP4
65436: PUSH
65437: LD_INT 126
65439: EQUAL
65440: IFFALSE 65446
// MC_RemoteDriver ( ) ;
65442: NOP4
// if event = 200 then
65446: NOP4
65450: PUSH
65451: LD_INT 200
65453: EQUAL
65454: IFFALSE 65460
// MC_Idle ( ) ;
65456: NOP4
// end ;
65460: PPOPN 1
65462: END
// export function MC_Reset ( base , tag ) ; var i ; begin
65463: LD_INT 0
65465: PPUSH
65466: PPUSH
// if not mc_bases [ base ] or not tag then
65467: NOP4
65471: PUSH
65472: NOP4
65476: ARRAY
65477: NOT
65478: PUSH
65479: NOP4
65483: NOT
65484: OR
65485: IFFALSE 65489
// exit ;
65487: GO 65553
// for i in mc_bases [ base ] union mc_ape [ base ] do
65489: NOP4
65493: PUSH
65494: NOP4
65498: PUSH
65499: NOP4
65503: ARRAY
65504: PUSH
65505: NOP4
65509: PUSH
65510: NOP4
65514: ARRAY
65515: UNION
65516: PUSH
65517: FOR_IN
65518: IFFALSE 65551
// if GetTag ( i ) = tag then
65520: NOP4
65524: PPUSH
65525: NOP4
65529: PUSH
65530: NOP4
65534: EQUAL
65535: IFFALSE 65549
// SetTag ( i , 0 ) ;
65537: NOP4
65541: PPUSH
65542: LD_INT 0
65544: PPUSH
65545: NOP4
65549: GO 65517
65551: POP
65552: POP
// end ;
65553: LD_VAR 0 3
65557: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
65558: LD_INT 0
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
65565: PPUSH
65566: PPUSH
65567: PPUSH
// if not mc_bases then
65568: NOP4
65572: NOT
65573: IFFALSE 65577
// exit ;
65575: GO 66035
// for i = 1 to mc_bases do
65577: NOP4
65581: PUSH
65582: DOUBLE
65583: LD_INT 1
65585: DEC
65586: ST_TO_ADDR
65587: NOP4
65591: PUSH
65592: FOR_TO
65593: IFFALSE 66033
// begin tmp := MC_ClassCheckReq ( i ) ;
65595: NOP4
65599: PUSH
65600: NOP4
65604: PPUSH
65605: NOP4
65609: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
65610: NOP4
65614: PUSH
65615: NOP4
65619: PPUSH
65620: NOP4
65624: PPUSH
65625: NOP4
65629: PPUSH
65630: NOP4
65634: ST_TO_ADDR
// if not tmp then
65635: NOP4
65639: NOT
65640: IFFALSE 65644
// continue ;
65642: GO 65592
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
65644: NOP4
65648: PUSH
65649: NOP4
65653: PUSH
65654: NOP4
65658: ARRAY
65659: PPUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 30
65665: PUSH
65666: LD_INT 4
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 30
65675: PUSH
65676: LD_INT 5
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: PPUSH
65688: NOP4
65692: PUSH
65693: NOP4
65697: PUSH
65698: NOP4
65702: ARRAY
65703: PPUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 30
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 30
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: LIST
65731: PPUSH
65732: NOP4
65736: PUSH
65737: NOP4
65741: PUSH
65742: NOP4
65746: ARRAY
65747: PPUSH
65748: LD_INT 30
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PPUSH
65758: NOP4
65762: PUSH
65763: NOP4
65767: PUSH
65768: NOP4
65772: ARRAY
65773: PPUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 30
65779: PUSH
65780: LD_INT 6
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 30
65789: PUSH
65790: LD_INT 7
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 30
65799: PUSH
65800: LD_INT 8
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: PPUSH
65813: NOP4
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: ST_TO_ADDR
// for j = 1 to 4 do
65824: NOP4
65828: PUSH
65829: DOUBLE
65830: LD_INT 1
65832: DEC
65833: ST_TO_ADDR
65834: LD_INT 4
65836: PUSH
65837: FOR_TO
65838: IFFALSE 66029
// begin if not tmp [ j ] then
65840: NOP4
65844: PUSH
65845: NOP4
65849: ARRAY
65850: NOT
65851: IFFALSE 65855
// continue ;
65853: GO 65837
// for p in tmp [ j ] do
65855: NOP4
65859: PUSH
65860: NOP4
65864: PUSH
65865: NOP4
65869: ARRAY
65870: PUSH
65871: FOR_IN
65872: IFFALSE 66025
// begin if not b [ j ] then
65874: NOP4
65878: PUSH
65879: NOP4
65883: ARRAY
65884: NOT
65885: IFFALSE 65889
// break ;
65887: GO 66025
// e := 0 ;
65889: NOP4
65893: PUSH
65894: LD_INT 0
65896: ST_TO_ADDR
// for k in b [ j ] do
65897: NOP4
65901: PUSH
65902: NOP4
65906: PUSH
65907: NOP4
65911: ARRAY
65912: PUSH
65913: FOR_IN
65914: IFFALSE 65941
// if IsNotFull ( k ) then
65916: NOP4
65920: PPUSH
65921: NOP4
65925: IFFALSE 65939
// begin e := k ;
65927: NOP4
65931: PUSH
65932: NOP4
65936: ST_TO_ADDR
// break ;
65937: GO 65941
// end ;
65939: GO 65913
65941: POP
65942: POP
// if e and not UnitGoingToBuilding ( p , e ) then
65943: NOP4
65947: PUSH
65948: NOP4
65952: PPUSH
65953: NOP4
65957: PPUSH
65958: NOP4
65962: NOT
65963: AND
65964: IFFALSE 66023
// begin if IsInUnit ( p ) then
65966: NOP4
65970: PPUSH
65971: NOP4
65975: IFFALSE 65986
// ComExitBuilding ( p ) ;
65977: NOP4
65981: PPUSH
65982: NOP4
// ComEnterUnit ( p , e ) ;
65986: NOP4
65990: PPUSH
65991: NOP4
65995: PPUSH
65996: NOP4
// AddComChangeProfession ( p , j ) ;
66000: NOP4
66004: PPUSH
66005: NOP4
66009: PPUSH
66010: NOP4
// AddComExitBuilding ( p ) ;
66014: NOP4
66018: PPUSH
66019: NOP4
// end ; end ;
66023: GO 65871
66025: POP
66026: POP
// end ;
66027: GO 65837
66029: POP
66030: POP
// end ;
66031: GO 65592
66033: POP
66034: POP
// end ;
66035: LD_VAR 0 1
66039: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66040: LD_INT 0
66042: PPUSH
66043: PPUSH
66044: PPUSH
66045: PPUSH
66046: PPUSH
66047: PPUSH
66048: PPUSH
66049: PPUSH
66050: PPUSH
66051: PPUSH
66052: PPUSH
66053: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66054: NOP4
66058: NOT
66059: PUSH
66060: NOP4
66064: PUSH
66065: NOP4
66069: ARRAY
66070: NOT
66071: OR
66072: PUSH
66073: NOP4
66077: PUSH
66078: NOP4
66082: ARRAY
66083: PPUSH
66084: LD_INT 2
66086: PUSH
66087: LD_INT 30
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 30
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: PPUSH
66112: NOP4
66116: NOT
66117: OR
66118: IFFALSE 66122
// exit ;
66120: GO 69616
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66122: NOP4
66126: PUSH
66127: NOP4
66131: PUSH
66132: NOP4
66136: ARRAY
66137: PPUSH
66138: LD_INT 2
66140: PUSH
66141: LD_INT 25
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 25
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 25
66163: PUSH
66164: LD_INT 3
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 25
66173: PUSH
66174: LD_INT 4
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 25
66183: PUSH
66184: LD_INT 5
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 25
66193: PUSH
66194: LD_INT 8
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 25
66203: PUSH
66204: LD_INT 9
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: PPUSH
66221: NOP4
66225: ST_TO_ADDR
// for i in tmp do
66226: NOP4
66230: PUSH
66231: NOP4
66235: PUSH
66236: FOR_IN
66237: IFFALSE 66268
// if GetTag ( i ) then
66239: NOP4
66243: PPUSH
66244: NOP4
66248: IFFALSE 66266
// tmp := tmp diff i ;
66250: NOP4
66254: PUSH
66255: NOP4
66259: PUSH
66260: NOP4
66264: DIFF
66265: ST_TO_ADDR
66266: GO 66236
66268: POP
66269: POP
// if not tmp then
66270: NOP4
66274: NOT
66275: IFFALSE 66279
// exit ;
66277: GO 69616
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66279: NOP4
66283: PUSH
66284: NOP4
66288: PUSH
66289: NOP4
66293: ARRAY
66294: PPUSH
66295: LD_INT 2
66297: PUSH
66298: LD_INT 25
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 25
66310: PUSH
66311: LD_INT 5
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 25
66320: PUSH
66321: LD_INT 8
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 25
66330: PUSH
66331: LD_INT 9
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: PPUSH
66345: NOP4
66349: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
66350: NOP4
66354: PUSH
66355: NOP4
66359: PUSH
66360: NOP4
66364: ARRAY
66365: PPUSH
66366: LD_INT 25
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PPUSH
66376: NOP4
66380: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
66381: NOP4
66385: PUSH
66386: NOP4
66390: PUSH
66391: NOP4
66395: ARRAY
66396: PPUSH
66397: LD_INT 25
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PPUSH
66407: NOP4
66411: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
66412: NOP4
66416: PUSH
66417: NOP4
66421: PUSH
66422: NOP4
66426: ARRAY
66427: PPUSH
66428: LD_INT 25
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 24
66440: PUSH
66441: LD_INT 251
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PPUSH
66452: NOP4
66456: ST_TO_ADDR
// if mc_scan [ base ] then
66457: NOP4
66461: PUSH
66462: NOP4
66466: ARRAY
66467: IFFALSE 66928
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
66469: NOP4
66473: PUSH
66474: NOP4
66478: PPUSH
66479: NOP4
66483: PPUSH
66484: LD_INT 4
66486: PPUSH
66487: NOP4
66491: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66492: NOP4
66496: PUSH
66497: NOP4
66501: PUSH
66502: NOP4
66506: ARRAY
66507: PPUSH
66508: LD_INT 2
66510: PUSH
66511: LD_INT 30
66513: PUSH
66514: LD_INT 4
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 30
66523: PUSH
66524: LD_INT 5
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PPUSH
66536: NOP4
66540: ST_TO_ADDR
// if not b then
66541: NOP4
66545: NOT
66546: IFFALSE 66550
// exit ;
66548: GO 69616
// p := [ ] ;
66550: NOP4
66554: PUSH
66555: EMPTY
66556: ST_TO_ADDR
// if sci >= 2 then
66557: NOP4
66561: PUSH
66562: LD_INT 2
66564: GREATEREQUAL
66565: IFFALSE 66596
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
66567: NOP4
66571: PUSH
66572: NOP4
66576: PUSH
66577: LD_INT 1
66579: ARRAY
66580: PUSH
66581: NOP4
66585: PUSH
66586: LD_INT 2
66588: ARRAY
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: ST_TO_ADDR
66594: GO 66657
// if sci = 1 then
66596: NOP4
66600: PUSH
66601: LD_INT 1
66603: EQUAL
66604: IFFALSE 66625
// sci := [ sci [ 1 ] ] else
66606: NOP4
66610: PUSH
66611: NOP4
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PUSH
66620: EMPTY
66621: LIST
66622: ST_TO_ADDR
66623: GO 66657
// if sci = 0 then
66625: NOP4
66629: PUSH
66630: LD_INT 0
66632: EQUAL
66633: IFFALSE 66657
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
66635: NOP4
66639: PUSH
66640: NOP4
66644: PPUSH
66645: LD_INT 4
66647: PPUSH
66648: NOP4
66652: PUSH
66653: LD_INT 1
66655: ARRAY
66656: ST_TO_ADDR
// if eng > 4 then
66657: NOP4
66661: PUSH
66662: LD_INT 4
66664: GREATER
66665: IFFALSE 66711
// for i = eng downto 4 do
66667: NOP4
66671: PUSH
66672: DOUBLE
66673: NOP4
66677: INC
66678: ST_TO_ADDR
66679: LD_INT 4
66681: PUSH
66682: FOR_DOWNTO
66683: IFFALSE 66709
// eng := eng diff eng [ i ] ;
66685: NOP4
66689: PUSH
66690: NOP4
66694: PUSH
66695: NOP4
66699: PUSH
66700: NOP4
66704: ARRAY
66705: DIFF
66706: ST_TO_ADDR
66707: GO 66682
66709: POP
66710: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
66711: NOP4
66715: PUSH
66716: NOP4
66720: PUSH
66721: NOP4
66725: PUSH
66726: NOP4
66730: UNION
66731: PUSH
66732: NOP4
66736: UNION
66737: PUSH
66738: NOP4
66742: UNION
66743: DIFF
66744: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
66745: NOP4
66749: PUSH
66750: NOP4
66754: PUSH
66755: NOP4
66759: ARRAY
66760: PPUSH
66761: LD_INT 2
66763: PUSH
66764: LD_INT 30
66766: PUSH
66767: LD_INT 32
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 30
66776: PUSH
66777: LD_INT 31
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: PPUSH
66789: NOP4
66793: PUSH
66794: NOP4
66798: PUSH
66799: NOP4
66803: ARRAY
66804: PPUSH
66805: LD_INT 2
66807: PUSH
66808: LD_INT 30
66810: PUSH
66811: LD_INT 4
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 30
66820: PUSH
66821: LD_INT 5
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: PPUSH
66833: NOP4
66837: PUSH
66838: LD_INT 6
66840: MUL
66841: PLUS
66842: ST_TO_ADDR
// if bcount < tmp then
66843: NOP4
66847: PUSH
66848: NOP4
66852: LESS
66853: IFFALSE 66899
// for i = tmp downto bcount do
66855: NOP4
66859: PUSH
66860: DOUBLE
66861: NOP4
66865: INC
66866: ST_TO_ADDR
66867: NOP4
66871: PUSH
66872: FOR_DOWNTO
66873: IFFALSE 66897
// tmp := Delete ( tmp , tmp ) ;
66875: NOP4
66879: PUSH
66880: NOP4
66884: PPUSH
66885: NOP4
66889: PPUSH
66890: NOP4
66894: ST_TO_ADDR
66895: GO 66872
66897: POP
66898: POP
// result := [ tmp , 0 , 0 , p ] ;
66899: NOP4
66903: PUSH
66904: NOP4
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: NOP4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// exit ;
66926: GO 69616
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
66928: NOP4
66932: PUSH
66933: NOP4
66937: ARRAY
66938: PPUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 30
66944: PUSH
66945: LD_INT 6
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 30
66954: PUSH
66955: LD_INT 7
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 30
66964: PUSH
66965: LD_INT 8
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: PPUSH
66978: NOP4
66982: NOT
66983: PUSH
66984: NOP4
66988: PUSH
66989: NOP4
66993: ARRAY
66994: PPUSH
66995: LD_INT 30
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PPUSH
67005: NOP4
67009: NOT
67010: AND
67011: IFFALSE 67083
// begin if eng = tmp then
67013: NOP4
67017: PUSH
67018: NOP4
67022: EQUAL
67023: IFFALSE 67027
// exit ;
67025: GO 69616
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67027: NOP4
67031: PUSH
67032: NOP4
67036: PPUSH
67037: NOP4
67041: PPUSH
67042: LD_INT 1
67044: PPUSH
67045: NOP4
67049: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67050: NOP4
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: NOP4
67062: PUSH
67063: NOP4
67067: DIFF
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: ST_TO_ADDR
// exit ;
67081: GO 69616
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67083: NOP4
67087: PUSH
67088: NOP4
67092: PUSH
67093: NOP4
67097: ARRAY
67098: ARRAY
67099: PUSH
67100: NOP4
67104: PUSH
67105: NOP4
67109: ARRAY
67110: PPUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 30
67116: PUSH
67117: LD_INT 6
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 30
67126: PUSH
67127: LD_INT 7
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 30
67136: PUSH
67137: LD_INT 8
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: PPUSH
67150: NOP4
67154: AND
67155: PUSH
67156: NOP4
67160: PUSH
67161: NOP4
67165: ARRAY
67166: PPUSH
67167: LD_INT 30
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PPUSH
67177: NOP4
67181: NOT
67182: AND
67183: IFFALSE 67397
// begin if sci >= 6 then
67185: NOP4
67189: PUSH
67190: LD_INT 6
67192: GREATEREQUAL
67193: IFFALSE 67197
// exit ;
67195: GO 69616
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67197: NOP4
67201: PUSH
67202: NOP4
67206: PPUSH
67207: NOP4
67211: PPUSH
67212: LD_INT 2
67214: PPUSH
67215: NOP4
67219: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67220: NOP4
67224: PUSH
67225: NOP4
67229: PUSH
67230: NOP4
67234: DIFF
67235: PPUSH
67236: LD_INT 4
67238: PPUSH
67239: NOP4
67243: ST_TO_ADDR
// p := [ ] ;
67244: NOP4
67248: PUSH
67249: EMPTY
67250: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67251: NOP4
67255: PUSH
67256: LD_INT 6
67258: LESS
67259: PUSH
67260: NOP4
67264: PUSH
67265: LD_INT 6
67267: GREATER
67268: AND
67269: IFFALSE 67350
// begin for i = 1 to 6 - sci do
67271: NOP4
67275: PUSH
67276: DOUBLE
67277: LD_INT 1
67279: DEC
67280: ST_TO_ADDR
67281: LD_INT 6
67283: PUSH
67284: NOP4
67288: MINUS
67289: PUSH
67290: FOR_TO
67291: IFFALSE 67346
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
67293: NOP4
67297: PUSH
67298: NOP4
67302: PPUSH
67303: NOP4
67307: PUSH
67308: LD_INT 1
67310: PLUS
67311: PPUSH
67312: NOP4
67316: PUSH
67317: LD_INT 1
67319: ARRAY
67320: PPUSH
67321: NOP4
67325: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
67326: NOP4
67330: PUSH
67331: NOP4
67335: PPUSH
67336: LD_INT 1
67338: PPUSH
67339: NOP4
67343: ST_TO_ADDR
// end ;
67344: GO 67290
67346: POP
67347: POP
// end else
67348: GO 67370
// if sort then
67350: NOP4
67354: IFFALSE 67370
// p := sort [ 1 ] ;
67356: NOP4
67360: PUSH
67361: NOP4
67365: PUSH
67366: LD_INT 1
67368: ARRAY
67369: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
67370: NOP4
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: NOP4
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: ST_TO_ADDR
// exit ;
67395: GO 69616
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67397: NOP4
67401: PUSH
67402: NOP4
67406: PUSH
67407: NOP4
67411: ARRAY
67412: ARRAY
67413: PUSH
67414: NOP4
67418: PUSH
67419: NOP4
67423: ARRAY
67424: PPUSH
67425: LD_INT 2
67427: PUSH
67428: LD_INT 30
67430: PUSH
67431: LD_INT 6
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 30
67440: PUSH
67441: LD_INT 7
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 30
67450: PUSH
67451: LD_INT 8
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: PPUSH
67464: NOP4
67468: AND
67469: PUSH
67470: NOP4
67474: PUSH
67475: NOP4
67479: ARRAY
67480: PPUSH
67481: LD_INT 30
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PPUSH
67491: NOP4
67495: AND
67496: IFFALSE 68230
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
67498: NOP4
67502: PUSH
67503: NOP4
67507: PPUSH
67508: NOP4
67512: PPUSH
67513: LD_INT 3
67515: PPUSH
67516: NOP4
67520: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
67521: NOP4
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// if not eng then
67544: NOP4
67548: NOT
67549: IFFALSE 67612
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
67551: NOP4
67555: PUSH
67556: NOP4
67560: PPUSH
67561: LD_INT 2
67563: PPUSH
67564: NOP4
67568: PUSH
67569: LD_INT 1
67571: ARRAY
67572: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
67573: NOP4
67577: PUSH
67578: NOP4
67582: PPUSH
67583: LD_INT 2
67585: PPUSH
67586: NOP4
67590: PPUSH
67591: NOP4
67595: ST_TO_ADDR
// tmp := tmp diff p ;
67596: NOP4
67600: PUSH
67601: NOP4
67605: PUSH
67606: NOP4
67610: DIFF
67611: ST_TO_ADDR
// end ; if tmp and sci < 6 then
67612: NOP4
67616: PUSH
67617: NOP4
67621: PUSH
67622: LD_INT 6
67624: LESS
67625: AND
67626: IFFALSE 67814
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
67628: NOP4
67632: PUSH
67633: NOP4
67637: PUSH
67638: NOP4
67642: PUSH
67643: NOP4
67647: UNION
67648: DIFF
67649: PPUSH
67650: LD_INT 4
67652: PPUSH
67653: NOP4
67657: ST_TO_ADDR
// p := [ ] ;
67658: NOP4
67662: PUSH
67663: EMPTY
67664: ST_TO_ADDR
// if sort then
67665: NOP4
67669: IFFALSE 67785
// for i = 1 to 6 - sci do
67671: NOP4
67675: PUSH
67676: DOUBLE
67677: LD_INT 1
67679: DEC
67680: ST_TO_ADDR
67681: LD_INT 6
67683: PUSH
67684: NOP4
67688: MINUS
67689: PUSH
67690: FOR_TO
67691: IFFALSE 67783
// begin if i = sort then
67693: NOP4
67697: PUSH
67698: NOP4
67702: EQUAL
67703: IFFALSE 67707
// break ;
67705: GO 67783
// if GetClass ( i ) = 4 then
67707: NOP4
67711: PPUSH
67712: NOP4
67716: PUSH
67717: LD_INT 4
67719: EQUAL
67720: IFFALSE 67724
// continue ;
67722: GO 67690
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67724: NOP4
67728: PUSH
67729: NOP4
67733: PPUSH
67734: NOP4
67738: PUSH
67739: LD_INT 1
67741: PLUS
67742: PPUSH
67743: NOP4
67747: PUSH
67748: NOP4
67752: ARRAY
67753: PPUSH
67754: NOP4
67758: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67759: NOP4
67763: PUSH
67764: NOP4
67768: PUSH
67769: NOP4
67773: PUSH
67774: NOP4
67778: ARRAY
67779: DIFF
67780: ST_TO_ADDR
// end ;
67781: GO 67690
67783: POP
67784: POP
// if p then
67785: NOP4
67789: IFFALSE 67814
// result := Replace ( result , 4 , p ) ;
67791: NOP4
67795: PUSH
67796: NOP4
67800: PPUSH
67801: LD_INT 4
67803: PPUSH
67804: NOP4
67808: PPUSH
67809: NOP4
67813: ST_TO_ADDR
// end ; if tmp and mech < 6 then
67814: NOP4
67818: PUSH
67819: NOP4
67823: PUSH
67824: LD_INT 6
67826: LESS
67827: AND
67828: IFFALSE 68016
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
67830: NOP4
67834: PUSH
67835: NOP4
67839: PUSH
67840: NOP4
67844: PUSH
67845: NOP4
67849: UNION
67850: DIFF
67851: PPUSH
67852: LD_INT 3
67854: PPUSH
67855: NOP4
67859: ST_TO_ADDR
// p := [ ] ;
67860: NOP4
67864: PUSH
67865: EMPTY
67866: ST_TO_ADDR
// if sort then
67867: NOP4
67871: IFFALSE 67987
// for i = 1 to 6 - mech do
67873: NOP4
67877: PUSH
67878: DOUBLE
67879: LD_INT 1
67881: DEC
67882: ST_TO_ADDR
67883: LD_INT 6
67885: PUSH
67886: NOP4
67890: MINUS
67891: PUSH
67892: FOR_TO
67893: IFFALSE 67985
// begin if i = sort then
67895: NOP4
67899: PUSH
67900: NOP4
67904: EQUAL
67905: IFFALSE 67909
// break ;
67907: GO 67985
// if GetClass ( i ) = 3 then
67909: NOP4
67913: PPUSH
67914: NOP4
67918: PUSH
67919: LD_INT 3
67921: EQUAL
67922: IFFALSE 67926
// continue ;
67924: GO 67892
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67926: NOP4
67930: PUSH
67931: NOP4
67935: PPUSH
67936: NOP4
67940: PUSH
67941: LD_INT 1
67943: PLUS
67944: PPUSH
67945: NOP4
67949: PUSH
67950: NOP4
67954: ARRAY
67955: PPUSH
67956: NOP4
67960: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67961: NOP4
67965: PUSH
67966: NOP4
67970: PUSH
67971: NOP4
67975: PUSH
67976: NOP4
67980: ARRAY
67981: DIFF
67982: ST_TO_ADDR
// end ;
67983: GO 67892
67985: POP
67986: POP
// if p then
67987: NOP4
67991: IFFALSE 68016
// result := Replace ( result , 3 , p ) ;
67993: NOP4
67997: PUSH
67998: NOP4
68002: PPUSH
68003: LD_INT 3
68005: PPUSH
68006: NOP4
68010: PPUSH
68011: NOP4
68015: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68016: NOP4
68020: PUSH
68021: LD_INT 6
68023: GREATER
68024: PUSH
68025: NOP4
68029: PUSH
68030: LD_INT 6
68032: LESS
68033: AND
68034: IFFALSE 68228
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68036: NOP4
68040: PUSH
68041: NOP4
68045: PUSH
68046: NOP4
68050: PUSH
68051: NOP4
68055: UNION
68056: PUSH
68057: NOP4
68061: UNION
68062: DIFF
68063: PPUSH
68064: LD_INT 2
68066: PPUSH
68067: NOP4
68071: ST_TO_ADDR
// p := [ ] ;
68072: NOP4
68076: PUSH
68077: EMPTY
68078: ST_TO_ADDR
// if sort then
68079: NOP4
68083: IFFALSE 68199
// for i = 1 to 6 - eng do
68085: NOP4
68089: PUSH
68090: DOUBLE
68091: LD_INT 1
68093: DEC
68094: ST_TO_ADDR
68095: LD_INT 6
68097: PUSH
68098: NOP4
68102: MINUS
68103: PUSH
68104: FOR_TO
68105: IFFALSE 68197
// begin if i = sort then
68107: NOP4
68111: PUSH
68112: NOP4
68116: EQUAL
68117: IFFALSE 68121
// break ;
68119: GO 68197
// if GetClass ( i ) = 2 then
68121: NOP4
68125: PPUSH
68126: NOP4
68130: PUSH
68131: LD_INT 2
68133: EQUAL
68134: IFFALSE 68138
// continue ;
68136: GO 68104
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68138: NOP4
68142: PUSH
68143: NOP4
68147: PPUSH
68148: NOP4
68152: PUSH
68153: LD_INT 1
68155: PLUS
68156: PPUSH
68157: NOP4
68161: PUSH
68162: NOP4
68166: ARRAY
68167: PPUSH
68168: NOP4
68172: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68173: NOP4
68177: PUSH
68178: NOP4
68182: PUSH
68183: NOP4
68187: PUSH
68188: NOP4
68192: ARRAY
68193: DIFF
68194: ST_TO_ADDR
// end ;
68195: GO 68104
68197: POP
68198: POP
// if p then
68199: NOP4
68203: IFFALSE 68228
// result := Replace ( result , 2 , p ) ;
68205: NOP4
68209: PUSH
68210: NOP4
68214: PPUSH
68215: LD_INT 2
68217: PPUSH
68218: NOP4
68222: PPUSH
68223: NOP4
68227: ST_TO_ADDR
// end ; exit ;
68228: GO 69616
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68230: NOP4
68234: PUSH
68235: NOP4
68239: PUSH
68240: NOP4
68244: ARRAY
68245: ARRAY
68246: NOT
68247: PUSH
68248: NOP4
68252: PUSH
68253: NOP4
68257: ARRAY
68258: PPUSH
68259: LD_INT 30
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PPUSH
68269: NOP4
68273: AND
68274: PUSH
68275: NOP4
68279: PUSH
68280: NOP4
68284: ARRAY
68285: AND
68286: IFFALSE 68894
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
68288: NOP4
68292: PUSH
68293: NOP4
68297: PPUSH
68298: NOP4
68302: PPUSH
68303: LD_INT 5
68305: PPUSH
68306: NOP4
68310: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68311: NOP4
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: ST_TO_ADDR
// if sci > 1 then
68334: NOP4
68338: PUSH
68339: LD_INT 1
68341: GREATER
68342: IFFALSE 68370
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
68344: NOP4
68348: PUSH
68349: NOP4
68353: PUSH
68354: NOP4
68358: PUSH
68359: NOP4
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: DIFF
68368: DIFF
68369: ST_TO_ADDR
// if tmp and not sci then
68370: NOP4
68374: PUSH
68375: NOP4
68379: NOT
68380: AND
68381: IFFALSE 68450
// begin sort := SortBySkill ( tmp , 4 ) ;
68383: NOP4
68387: PUSH
68388: NOP4
68392: PPUSH
68393: LD_INT 4
68395: PPUSH
68396: NOP4
68400: ST_TO_ADDR
// if sort then
68401: NOP4
68405: IFFALSE 68421
// p := sort [ 1 ] ;
68407: NOP4
68411: PUSH
68412: NOP4
68416: PUSH
68417: LD_INT 1
68419: ARRAY
68420: ST_TO_ADDR
// if p then
68421: NOP4
68425: IFFALSE 68450
// result := Replace ( result , 4 , p ) ;
68427: NOP4
68431: PUSH
68432: NOP4
68436: PPUSH
68437: LD_INT 4
68439: PPUSH
68440: NOP4
68444: PPUSH
68445: NOP4
68449: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
68450: NOP4
68454: PUSH
68455: NOP4
68459: PUSH
68460: NOP4
68464: DIFF
68465: ST_TO_ADDR
// if tmp and mech < 6 then
68466: NOP4
68470: PUSH
68471: NOP4
68475: PUSH
68476: LD_INT 6
68478: LESS
68479: AND
68480: IFFALSE 68668
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68482: NOP4
68486: PUSH
68487: NOP4
68491: PUSH
68492: NOP4
68496: PUSH
68497: NOP4
68501: UNION
68502: DIFF
68503: PPUSH
68504: LD_INT 3
68506: PPUSH
68507: NOP4
68511: ST_TO_ADDR
// p := [ ] ;
68512: NOP4
68516: PUSH
68517: EMPTY
68518: ST_TO_ADDR
// if sort then
68519: NOP4
68523: IFFALSE 68639
// for i = 1 to 6 - mech do
68525: NOP4
68529: PUSH
68530: DOUBLE
68531: LD_INT 1
68533: DEC
68534: ST_TO_ADDR
68535: LD_INT 6
68537: PUSH
68538: NOP4
68542: MINUS
68543: PUSH
68544: FOR_TO
68545: IFFALSE 68637
// begin if i = sort then
68547: NOP4
68551: PUSH
68552: NOP4
68556: EQUAL
68557: IFFALSE 68561
// break ;
68559: GO 68637
// if GetClass ( i ) = 3 then
68561: NOP4
68565: PPUSH
68566: NOP4
68570: PUSH
68571: LD_INT 3
68573: EQUAL
68574: IFFALSE 68578
// continue ;
68576: GO 68544
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68578: NOP4
68582: PUSH
68583: NOP4
68587: PPUSH
68588: NOP4
68592: PUSH
68593: LD_INT 1
68595: PLUS
68596: PPUSH
68597: NOP4
68601: PUSH
68602: NOP4
68606: ARRAY
68607: PPUSH
68608: NOP4
68612: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68613: NOP4
68617: PUSH
68618: NOP4
68622: PUSH
68623: NOP4
68627: PUSH
68628: NOP4
68632: ARRAY
68633: DIFF
68634: ST_TO_ADDR
// end ;
68635: GO 68544
68637: POP
68638: POP
// if p then
68639: NOP4
68643: IFFALSE 68668
// result := Replace ( result , 3 , p ) ;
68645: NOP4
68649: PUSH
68650: NOP4
68654: PPUSH
68655: LD_INT 3
68657: PPUSH
68658: NOP4
68662: PPUSH
68663: NOP4
68667: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
68668: NOP4
68672: PUSH
68673: NOP4
68677: PUSH
68678: NOP4
68682: DIFF
68683: ST_TO_ADDR
// if tmp and eng < 6 then
68684: NOP4
68688: PUSH
68689: NOP4
68693: PUSH
68694: LD_INT 6
68696: LESS
68697: AND
68698: IFFALSE 68892
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68700: NOP4
68704: PUSH
68705: NOP4
68709: PUSH
68710: NOP4
68714: PUSH
68715: NOP4
68719: UNION
68720: PUSH
68721: NOP4
68725: UNION
68726: DIFF
68727: PPUSH
68728: LD_INT 2
68730: PPUSH
68731: NOP4
68735: ST_TO_ADDR
// p := [ ] ;
68736: NOP4
68740: PUSH
68741: EMPTY
68742: ST_TO_ADDR
// if sort then
68743: NOP4
68747: IFFALSE 68863
// for i = 1 to 6 - eng do
68749: NOP4
68753: PUSH
68754: DOUBLE
68755: LD_INT 1
68757: DEC
68758: ST_TO_ADDR
68759: LD_INT 6
68761: PUSH
68762: NOP4
68766: MINUS
68767: PUSH
68768: FOR_TO
68769: IFFALSE 68861
// begin if i = sort then
68771: NOP4
68775: PUSH
68776: NOP4
68780: EQUAL
68781: IFFALSE 68785
// break ;
68783: GO 68861
// if GetClass ( i ) = 2 then
68785: NOP4
68789: PPUSH
68790: NOP4
68794: PUSH
68795: LD_INT 2
68797: EQUAL
68798: IFFALSE 68802
// continue ;
68800: GO 68768
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68802: NOP4
68806: PUSH
68807: NOP4
68811: PPUSH
68812: NOP4
68816: PUSH
68817: LD_INT 1
68819: PLUS
68820: PPUSH
68821: NOP4
68825: PUSH
68826: NOP4
68830: ARRAY
68831: PPUSH
68832: NOP4
68836: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68837: NOP4
68841: PUSH
68842: NOP4
68846: PUSH
68847: NOP4
68851: PUSH
68852: NOP4
68856: ARRAY
68857: DIFF
68858: ST_TO_ADDR
// end ;
68859: GO 68768
68861: POP
68862: POP
// if p then
68863: NOP4
68867: IFFALSE 68892
// result := Replace ( result , 2 , p ) ;
68869: NOP4
68873: PUSH
68874: NOP4
68878: PPUSH
68879: LD_INT 2
68881: PPUSH
68882: NOP4
68886: PPUSH
68887: NOP4
68891: ST_TO_ADDR
// end ; exit ;
68892: GO 69616
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
68894: NOP4
68898: PUSH
68899: NOP4
68903: PUSH
68904: NOP4
68908: ARRAY
68909: ARRAY
68910: NOT
68911: PUSH
68912: NOP4
68916: PUSH
68917: NOP4
68921: ARRAY
68922: PPUSH
68923: LD_INT 30
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PPUSH
68933: NOP4
68937: AND
68938: PUSH
68939: NOP4
68943: PUSH
68944: NOP4
68948: ARRAY
68949: NOT
68950: AND
68951: IFFALSE 69616
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
68953: NOP4
68957: PUSH
68958: NOP4
68962: PPUSH
68963: NOP4
68967: PPUSH
68968: LD_INT 6
68970: PPUSH
68971: NOP4
68975: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68976: NOP4
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: ST_TO_ADDR
// if sci >= 1 then
68999: NOP4
69003: PUSH
69004: LD_INT 1
69006: GREATEREQUAL
69007: IFFALSE 69029
// tmp := tmp diff sci [ 1 ] ;
69009: NOP4
69013: PUSH
69014: NOP4
69018: PUSH
69019: NOP4
69023: PUSH
69024: LD_INT 1
69026: ARRAY
69027: DIFF
69028: ST_TO_ADDR
// if tmp and not sci then
69029: NOP4
69033: PUSH
69034: NOP4
69038: NOT
69039: AND
69040: IFFALSE 69109
// begin sort := SortBySkill ( tmp , 4 ) ;
69042: NOP4
69046: PUSH
69047: NOP4
69051: PPUSH
69052: LD_INT 4
69054: PPUSH
69055: NOP4
69059: ST_TO_ADDR
// if sort then
69060: NOP4
69064: IFFALSE 69080
// p := sort [ 1 ] ;
69066: NOP4
69070: PUSH
69071: NOP4
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: ST_TO_ADDR
// if p then
69080: NOP4
69084: IFFALSE 69109
// result := Replace ( result , 4 , p ) ;
69086: NOP4
69090: PUSH
69091: NOP4
69095: PPUSH
69096: LD_INT 4
69098: PPUSH
69099: NOP4
69103: PPUSH
69104: NOP4
69108: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69109: NOP4
69113: PUSH
69114: NOP4
69118: PUSH
69119: NOP4
69123: DIFF
69124: ST_TO_ADDR
// if tmp and mech < 6 then
69125: NOP4
69129: PUSH
69130: NOP4
69134: PUSH
69135: LD_INT 6
69137: LESS
69138: AND
69139: IFFALSE 69321
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69141: NOP4
69145: PUSH
69146: NOP4
69150: PUSH
69151: NOP4
69155: DIFF
69156: PPUSH
69157: LD_INT 3
69159: PPUSH
69160: NOP4
69164: ST_TO_ADDR
// p := [ ] ;
69165: NOP4
69169: PUSH
69170: EMPTY
69171: ST_TO_ADDR
// if sort then
69172: NOP4
69176: IFFALSE 69292
// for i = 1 to 6 - mech do
69178: NOP4
69182: PUSH
69183: DOUBLE
69184: LD_INT 1
69186: DEC
69187: ST_TO_ADDR
69188: LD_INT 6
69190: PUSH
69191: NOP4
69195: MINUS
69196: PUSH
69197: FOR_TO
69198: IFFALSE 69290
// begin if i = sort then
69200: NOP4
69204: PUSH
69205: NOP4
69209: EQUAL
69210: IFFALSE 69214
// break ;
69212: GO 69290
// if GetClass ( i ) = 3 then
69214: NOP4
69218: PPUSH
69219: NOP4
69223: PUSH
69224: LD_INT 3
69226: EQUAL
69227: IFFALSE 69231
// continue ;
69229: GO 69197
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69231: NOP4
69235: PUSH
69236: NOP4
69240: PPUSH
69241: NOP4
69245: PUSH
69246: LD_INT 1
69248: PLUS
69249: PPUSH
69250: NOP4
69254: PUSH
69255: NOP4
69259: ARRAY
69260: PPUSH
69261: NOP4
69265: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69266: NOP4
69270: PUSH
69271: NOP4
69275: PUSH
69276: NOP4
69280: PUSH
69281: NOP4
69285: ARRAY
69286: DIFF
69287: ST_TO_ADDR
// end ;
69288: GO 69197
69290: POP
69291: POP
// if p then
69292: NOP4
69296: IFFALSE 69321
// result := Replace ( result , 3 , p ) ;
69298: NOP4
69302: PUSH
69303: NOP4
69307: PPUSH
69308: LD_INT 3
69310: PPUSH
69311: NOP4
69315: PPUSH
69316: NOP4
69320: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69321: NOP4
69325: PUSH
69326: NOP4
69330: PUSH
69331: NOP4
69335: DIFF
69336: ST_TO_ADDR
// if tmp and eng < 4 then
69337: NOP4
69341: PUSH
69342: NOP4
69346: PUSH
69347: LD_INT 4
69349: LESS
69350: AND
69351: IFFALSE 69541
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
69353: NOP4
69357: PUSH
69358: NOP4
69362: PUSH
69363: NOP4
69367: PUSH
69368: NOP4
69372: UNION
69373: DIFF
69374: PPUSH
69375: LD_INT 2
69377: PPUSH
69378: NOP4
69382: ST_TO_ADDR
// p := [ ] ;
69383: NOP4
69387: PUSH
69388: EMPTY
69389: ST_TO_ADDR
// if sort then
69390: NOP4
69394: IFFALSE 69510
// for i = 1 to 4 - eng do
69396: NOP4
69400: PUSH
69401: DOUBLE
69402: LD_INT 1
69404: DEC
69405: ST_TO_ADDR
69406: LD_INT 4
69408: PUSH
69409: NOP4
69413: MINUS
69414: PUSH
69415: FOR_TO
69416: IFFALSE 69508
// begin if i = sort then
69418: NOP4
69422: PUSH
69423: NOP4
69427: EQUAL
69428: IFFALSE 69432
// break ;
69430: GO 69508
// if GetClass ( i ) = 2 then
69432: NOP4
69436: PPUSH
69437: NOP4
69441: PUSH
69442: LD_INT 2
69444: EQUAL
69445: IFFALSE 69449
// continue ;
69447: GO 69415
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69449: NOP4
69453: PUSH
69454: NOP4
69458: PPUSH
69459: NOP4
69463: PUSH
69464: LD_INT 1
69466: PLUS
69467: PPUSH
69468: NOP4
69472: PUSH
69473: NOP4
69477: ARRAY
69478: PPUSH
69479: NOP4
69483: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69484: NOP4
69488: PUSH
69489: NOP4
69493: PUSH
69494: NOP4
69498: PUSH
69499: NOP4
69503: ARRAY
69504: DIFF
69505: ST_TO_ADDR
// end ;
69506: GO 69415
69508: POP
69509: POP
// if p then
69510: NOP4
69514: IFFALSE 69539
// result := Replace ( result , 2 , p ) ;
69516: NOP4
69520: PUSH
69521: NOP4
69525: PPUSH
69526: LD_INT 2
69528: PPUSH
69529: NOP4
69533: PPUSH
69534: NOP4
69538: ST_TO_ADDR
// end else
69539: GO 69585
// for i = eng downto 5 do
69541: NOP4
69545: PUSH
69546: DOUBLE
69547: NOP4
69551: INC
69552: ST_TO_ADDR
69553: LD_INT 5
69555: PUSH
69556: FOR_DOWNTO
69557: IFFALSE 69583
// tmp := tmp union eng [ i ] ;
69559: NOP4
69563: PUSH
69564: NOP4
69568: PUSH
69569: NOP4
69573: PUSH
69574: NOP4
69578: ARRAY
69579: UNION
69580: ST_TO_ADDR
69581: GO 69556
69583: POP
69584: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
69585: NOP4
69589: PUSH
69590: NOP4
69594: PPUSH
69595: LD_INT 1
69597: PPUSH
69598: NOP4
69602: PUSH
69603: NOP4
69607: DIFF
69608: PPUSH
69609: NOP4
69613: ST_TO_ADDR
// exit ;
69614: GO 69616
// end ; end ;
69616: LD_VAR 0 2
69620: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
69621: LD_INT 0
69623: PPUSH
69624: PPUSH
69625: PPUSH
// if not mc_bases then
69626: NOP4
69630: NOT
69631: IFFALSE 69635
// exit ;
69633: GO 69741
// for i = 1 to mc_bases do
69635: NOP4
69639: PUSH
69640: DOUBLE
69641: LD_INT 1
69643: DEC
69644: ST_TO_ADDR
69645: NOP4
69649: PUSH
69650: FOR_TO
69651: IFFALSE 69732
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
69653: NOP4
69657: PUSH
69658: NOP4
69662: PUSH
69663: NOP4
69667: ARRAY
69668: PPUSH
69669: LD_INT 21
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: LD_INT 24
69684: PUSH
69685: LD_INT 1000
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PPUSH
69700: NOP4
69704: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
69705: NOP4
69709: PUSH
69710: NOP4
69714: PPUSH
69715: NOP4
69719: PPUSH
69720: NOP4
69724: PPUSH
69725: NOP4
69729: ST_TO_ADDR
// end ;
69730: GO 69650
69732: POP
69733: POP
// RaiseSailEvent ( 101 ) ;
69734: LD_INT 101
69736: PPUSH
69737: NOP4
// end ;
69741: LD_VAR 0 1
69745: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
69746: LD_INT 0
69748: PPUSH
69749: PPUSH
69750: PPUSH
69751: PPUSH
69752: PPUSH
69753: PPUSH
69754: PPUSH
// if not mc_bases then
69755: NOP4
69759: NOT
69760: IFFALSE 69764
// exit ;
69762: GO 70337
// for i = 1 to mc_bases do
69764: NOP4
69768: PUSH
69769: DOUBLE
69770: LD_INT 1
69772: DEC
69773: ST_TO_ADDR
69774: NOP4
69778: PUSH
69779: FOR_TO
69780: IFFALSE 70328
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
69782: NOP4
69786: PUSH
69787: NOP4
69791: PUSH
69792: NOP4
69796: ARRAY
69797: PUSH
69798: NOP4
69802: PUSH
69803: NOP4
69807: ARRAY
69808: UNION
69809: PPUSH
69810: LD_INT 21
69812: PUSH
69813: LD_INT 1
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 54
69828: PUSH
69829: EMPTY
69830: LIST
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 3
69838: PUSH
69839: LD_INT 24
69841: PUSH
69842: LD_INT 750
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PPUSH
69862: NOP4
69866: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
69867: NOP4
69871: PUSH
69872: NOP4
69876: PUSH
69877: NOP4
69881: ARRAY
69882: PPUSH
69883: LD_INT 21
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: LD_INT 54
69901: PUSH
69902: EMPTY
69903: LIST
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 3
69911: PUSH
69912: LD_INT 24
69914: PUSH
69915: LD_INT 250
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PPUSH
69935: NOP4
69939: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
69940: NOP4
69944: PUSH
69945: NOP4
69949: PUSH
69950: NOP4
69954: DIFF
69955: ST_TO_ADDR
// if not need_heal_1 then
69956: NOP4
69960: NOT
69961: IFFALSE 69994
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
69963: NOP4
69967: PUSH
69968: NOP4
69972: PPUSH
69973: NOP4
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PPUSH
69985: EMPTY
69986: PPUSH
69987: NOP4
69991: ST_TO_ADDR
69992: GO 70064
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
69994: NOP4
69998: PUSH
69999: NOP4
70003: PPUSH
70004: NOP4
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PPUSH
70016: NOP4
70020: PUSH
70021: NOP4
70025: ARRAY
70026: PUSH
70027: LD_INT 1
70029: ARRAY
70030: PPUSH
70031: LD_INT 3
70033: PUSH
70034: LD_INT 24
70036: PUSH
70037: LD_INT 1000
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PPUSH
70048: NOP4
70052: PUSH
70053: NOP4
70057: UNION
70058: PPUSH
70059: NOP4
70063: ST_TO_ADDR
// if not need_heal_2 then
70064: NOP4
70068: NOT
70069: IFFALSE 70102
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70071: NOP4
70075: PUSH
70076: NOP4
70080: PPUSH
70081: NOP4
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PPUSH
70093: EMPTY
70094: PPUSH
70095: NOP4
70099: ST_TO_ADDR
70100: GO 70134
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70102: NOP4
70106: PUSH
70107: NOP4
70111: PPUSH
70112: NOP4
70116: PUSH
70117: LD_INT 2
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PPUSH
70124: NOP4
70128: PPUSH
70129: NOP4
70133: ST_TO_ADDR
// if need_heal_2 then
70134: NOP4
70138: IFFALSE 70310
// for j in need_heal_2 do
70140: NOP4
70144: PUSH
70145: NOP4
70149: PUSH
70150: FOR_IN
70151: IFFALSE 70308
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70153: NOP4
70157: PUSH
70158: NOP4
70162: PUSH
70163: NOP4
70167: ARRAY
70168: PPUSH
70169: LD_INT 2
70171: PUSH
70172: LD_INT 30
70174: PUSH
70175: LD_INT 6
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 30
70184: PUSH
70185: LD_INT 7
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 30
70194: PUSH
70195: LD_INT 8
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 30
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 30
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 25
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: PPUSH
70241: NOP4
70245: ST_TO_ADDR
// if tmp then
70246: NOP4
70250: IFFALSE 70306
// begin k := NearestUnitToUnit ( tmp , j ) ;
70252: NOP4
70256: PUSH
70257: NOP4
70261: PPUSH
70262: NOP4
70266: PPUSH
70267: NOP4
70271: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70272: NOP4
70276: PPUSH
70277: NOP4
70281: PPUSH
70282: NOP4
70286: PUSH
70287: LD_INT 7
70289: GREATER
70290: IFFALSE 70306
// ComMoveUnit ( j , k ) ;
70292: NOP4
70296: PPUSH
70297: NOP4
70301: PPUSH
70302: NOP4
// end ; end ;
70306: GO 70150
70308: POP
70309: POP
// if not need_heal_1 and not need_heal_2 then
70310: NOP4
70314: NOT
70315: PUSH
70316: NOP4
70320: NOT
70321: AND
70322: IFFALSE 70326
// continue ;
70324: GO 69779
// end ;
70326: GO 69779
70328: POP
70329: POP
// RaiseSailEvent ( 102 ) ;
70330: LD_INT 102
70332: PPUSH
70333: NOP4
// end ;
70337: LD_VAR 0 1
70341: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
70342: LD_INT 0
70344: PPUSH
70345: PPUSH
70346: PPUSH
70347: PPUSH
70348: PPUSH
// if not mc_bases then
70349: NOP4
70353: NOT
70354: IFFALSE 70358
// exit ;
70356: GO 70743
// for i = 1 to mc_bases do
70358: NOP4
70362: PUSH
70363: DOUBLE
70364: LD_INT 1
70366: DEC
70367: ST_TO_ADDR
70368: NOP4
70372: PUSH
70373: FOR_TO
70374: IFFALSE 70741
// begin if not mc_building_need_repair [ i ] then
70376: NOP4
70380: PUSH
70381: NOP4
70385: ARRAY
70386: NOT
70387: IFFALSE 70425
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
70389: NOP4
70393: PUSH
70394: NOP4
70398: PPUSH
70399: NOP4
70403: PPUSH
70404: EMPTY
70405: PPUSH
70406: NOP4
70410: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
70411: NOP4
70415: PPUSH
70416: LD_INT 101
70418: PPUSH
70419: NOP4
// continue ;
70423: GO 70373
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
70425: NOP4
70429: PUSH
70430: NOP4
70434: PPUSH
70435: NOP4
70439: PPUSH
70440: EMPTY
70441: PPUSH
70442: NOP4
70446: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70447: NOP4
70451: PPUSH
70452: LD_INT 103
70454: PPUSH
70455: NOP4
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
70459: NOP4
70463: PUSH
70464: NOP4
70468: PUSH
70469: NOP4
70473: ARRAY
70474: PUSH
70475: NOP4
70479: PUSH
70480: NOP4
70484: ARRAY
70485: UNION
70486: PPUSH
70487: LD_INT 2
70489: PUSH
70490: LD_INT 25
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 25
70502: PUSH
70503: LD_INT 16
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: PUSH
70515: EMPTY
70516: LIST
70517: PPUSH
70518: NOP4
70522: ST_TO_ADDR
// if not tmp then
70523: NOP4
70527: NOT
70528: IFFALSE 70532
// continue ;
70530: GO 70373
// for j in tmp do
70532: NOP4
70536: PUSH
70537: NOP4
70541: PUSH
70542: FOR_IN
70543: IFFALSE 70737
// begin if mc_need_heal [ i ] then
70545: NOP4
70549: PUSH
70550: NOP4
70554: ARRAY
70555: IFFALSE 70603
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
70557: NOP4
70561: PUSH
70562: NOP4
70566: PUSH
70567: NOP4
70571: ARRAY
70572: PUSH
70573: LD_INT 1
70575: ARRAY
70576: IN
70577: PUSH
70578: NOP4
70582: PUSH
70583: NOP4
70587: PUSH
70588: NOP4
70592: ARRAY
70593: PUSH
70594: LD_INT 2
70596: ARRAY
70597: IN
70598: OR
70599: IFFALSE 70603
// continue ;
70601: GO 70542
// if IsInUnit ( j ) then
70603: NOP4
70607: PPUSH
70608: NOP4
70612: IFFALSE 70623
// ComExitBuilding ( j ) ;
70614: NOP4
70618: PPUSH
70619: NOP4
// if not j in mc_building_repairs [ i ] then
70623: NOP4
70627: PUSH
70628: NOP4
70632: PUSH
70633: NOP4
70637: ARRAY
70638: IN
70639: NOT
70640: IFFALSE 70698
// begin SetTag ( j , 101 ) ;
70642: NOP4
70646: PPUSH
70647: LD_INT 101
70649: PPUSH
70650: NOP4
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
70654: NOP4
70658: PUSH
70659: NOP4
70663: PPUSH
70664: NOP4
70668: PUSH
70669: NOP4
70673: PUSH
70674: NOP4
70678: ARRAY
70679: PUSH
70680: LD_INT 1
70682: PLUS
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PPUSH
70688: NOP4
70692: PPUSH
70693: NOP4
70697: ST_TO_ADDR
// end ; wait ( 1 ) ;
70698: LD_INT 1
70700: PPUSH
70701: NOP4
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
70705: NOP4
70709: PPUSH
70710: NOP4
70714: PUSH
70715: NOP4
70719: ARRAY
70720: PPUSH
70721: NOP4
70725: PPUSH
70726: NOP4
70730: PPUSH
70731: NOP4
// end ;
70735: GO 70542
70737: POP
70738: POP
// end ;
70739: GO 70373
70741: POP
70742: POP
// end ;
70743: LD_VAR 0 1
70747: RET
// export function MC_Heal ; var i , j , tmp ; begin
70748: LD_INT 0
70750: PPUSH
70751: PPUSH
70752: PPUSH
70753: PPUSH
// if not mc_bases then
70754: NOP4
70758: NOT
70759: IFFALSE 70763
// exit ;
70761: GO 71165
// for i = 1 to mc_bases do
70763: NOP4
70767: PUSH
70768: DOUBLE
70769: LD_INT 1
70771: DEC
70772: ST_TO_ADDR
70773: NOP4
70777: PUSH
70778: FOR_TO
70779: IFFALSE 71163
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
70781: NOP4
70785: PUSH
70786: NOP4
70790: ARRAY
70791: PUSH
70792: LD_INT 1
70794: ARRAY
70795: NOT
70796: PUSH
70797: NOP4
70801: PUSH
70802: NOP4
70806: ARRAY
70807: PUSH
70808: LD_INT 2
70810: ARRAY
70811: NOT
70812: AND
70813: IFFALSE 70851
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
70815: NOP4
70819: PUSH
70820: NOP4
70824: PPUSH
70825: NOP4
70829: PPUSH
70830: EMPTY
70831: PPUSH
70832: NOP4
70836: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
70837: NOP4
70841: PPUSH
70842: LD_INT 102
70844: PPUSH
70845: NOP4
// continue ;
70849: GO 70778
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70851: NOP4
70855: PUSH
70856: NOP4
70860: PUSH
70861: NOP4
70865: ARRAY
70866: PPUSH
70867: LD_INT 25
70869: PUSH
70870: LD_INT 4
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PPUSH
70877: NOP4
70881: ST_TO_ADDR
// if not tmp then
70882: NOP4
70886: NOT
70887: IFFALSE 70891
// continue ;
70889: GO 70778
// if mc_taming [ i ] then
70891: NOP4
70895: PUSH
70896: NOP4
70900: ARRAY
70901: IFFALSE 70925
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
70903: NOP4
70907: PUSH
70908: NOP4
70912: PPUSH
70913: NOP4
70917: PPUSH
70918: EMPTY
70919: PPUSH
70920: NOP4
70924: ST_TO_ADDR
// for j in tmp do
70925: NOP4
70929: PUSH
70930: NOP4
70934: PUSH
70935: FOR_IN
70936: IFFALSE 71159
// begin if IsInUnit ( j ) then
70938: NOP4
70942: PPUSH
70943: NOP4
70947: IFFALSE 70958
// ComExitBuilding ( j ) ;
70949: NOP4
70953: PPUSH
70954: NOP4
// if not j in mc_healers [ i ] then
70958: NOP4
70962: PUSH
70963: NOP4
70967: PUSH
70968: NOP4
70972: ARRAY
70973: IN
70974: NOT
70975: IFFALSE 71021
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
70977: NOP4
70981: PUSH
70982: NOP4
70986: PPUSH
70987: NOP4
70991: PUSH
70992: NOP4
70996: PUSH
70997: NOP4
71001: ARRAY
71002: PUSH
71003: LD_INT 1
71005: PLUS
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PPUSH
71011: NOP4
71015: PPUSH
71016: NOP4
71020: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
71021: NOP4
71025: PPUSH
71026: NOP4
71030: PUSH
71031: LD_INT 102
71033: NONEQUAL
71034: IFFALSE 71048
// SetTag ( j , 102 ) ;
71036: NOP4
71040: PPUSH
71041: LD_INT 102
71043: PPUSH
71044: NOP4
// Wait ( 3 ) ;
71048: LD_INT 3
71050: PPUSH
71051: NOP4
// if mc_need_heal [ i ] [ 1 ] then
71055: NOP4
71059: PUSH
71060: NOP4
71064: ARRAY
71065: PUSH
71066: LD_INT 1
71068: ARRAY
71069: IFFALSE 71101
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
71071: NOP4
71075: PPUSH
71076: NOP4
71080: PUSH
71081: NOP4
71085: ARRAY
71086: PUSH
71087: LD_INT 1
71089: ARRAY
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PPUSH
71095: NOP4
71099: GO 71157
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
71101: NOP4
71105: PPUSH
71106: NOP4
71110: NOT
71111: PUSH
71112: NOP4
71116: PUSH
71117: NOP4
71121: ARRAY
71122: PUSH
71123: LD_INT 2
71125: ARRAY
71126: AND
71127: IFFALSE 71157
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
71129: NOP4
71133: PPUSH
71134: NOP4
71138: PUSH
71139: NOP4
71143: ARRAY
71144: PUSH
71145: LD_INT 2
71147: ARRAY
71148: PUSH
71149: LD_INT 1
71151: ARRAY
71152: PPUSH
71153: NOP4
// end ;
71157: GO 70935
71159: POP
71160: POP
// end ;
71161: GO 70778
71163: POP
71164: POP
// end ;
71165: LD_VAR 0 1
71169: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
71170: LD_INT 0
71172: PPUSH
71173: PPUSH
71174: PPUSH
71175: PPUSH
71176: PPUSH
// if not mc_bases then
71177: NOP4
71181: NOT
71182: IFFALSE 71186
// exit ;
71184: GO 72329
// for i = 1 to mc_bases do
71186: NOP4
71190: PUSH
71191: DOUBLE
71192: LD_INT 1
71194: DEC
71195: ST_TO_ADDR
71196: NOP4
71200: PUSH
71201: FOR_TO
71202: IFFALSE 72327
// begin if mc_scan [ i ] then
71204: NOP4
71208: PUSH
71209: NOP4
71213: ARRAY
71214: IFFALSE 71218
// continue ;
71216: GO 71201
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
71218: NOP4
71222: PUSH
71223: NOP4
71227: ARRAY
71228: NOT
71229: PUSH
71230: NOP4
71234: PUSH
71235: NOP4
71239: ARRAY
71240: NOT
71241: AND
71242: PUSH
71243: NOP4
71247: PUSH
71248: NOP4
71252: ARRAY
71253: AND
71254: IFFALSE 71292
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
71256: NOP4
71260: PUSH
71261: NOP4
71265: PPUSH
71266: NOP4
71270: PPUSH
71271: EMPTY
71272: PPUSH
71273: NOP4
71277: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71278: NOP4
71282: PPUSH
71283: LD_INT 103
71285: PPUSH
71286: NOP4
// continue ;
71290: GO 71201
// end ; if mc_construct_list [ i ] then
71292: NOP4
71296: PUSH
71297: NOP4
71301: ARRAY
71302: IFFALSE 71522
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71304: NOP4
71308: PUSH
71309: NOP4
71313: PUSH
71314: NOP4
71318: ARRAY
71319: PPUSH
71320: LD_INT 25
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PPUSH
71330: NOP4
71334: PUSH
71335: NOP4
71339: PUSH
71340: NOP4
71344: ARRAY
71345: DIFF
71346: ST_TO_ADDR
// if not tmp then
71347: NOP4
71351: NOT
71352: IFFALSE 71356
// continue ;
71354: GO 71201
// for j in tmp do
71356: NOP4
71360: PUSH
71361: NOP4
71365: PUSH
71366: FOR_IN
71367: IFFALSE 71518
// begin if not mc_builders [ i ] then
71369: NOP4
71373: PUSH
71374: NOP4
71378: ARRAY
71379: NOT
71380: IFFALSE 71438
// begin SetTag ( j , 103 ) ;
71382: NOP4
71386: PPUSH
71387: LD_INT 103
71389: PPUSH
71390: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71394: NOP4
71398: PUSH
71399: NOP4
71403: PPUSH
71404: NOP4
71408: PUSH
71409: NOP4
71413: PUSH
71414: NOP4
71418: ARRAY
71419: PUSH
71420: LD_INT 1
71422: PLUS
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PPUSH
71428: NOP4
71432: PPUSH
71433: NOP4
71437: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71438: NOP4
71442: PPUSH
71443: NOP4
71447: IFFALSE 71458
// ComExitBuilding ( j ) ;
71449: NOP4
71453: PPUSH
71454: NOP4
// wait ( 3 ) ;
71458: LD_INT 3
71460: PPUSH
71461: NOP4
// if not mc_construct_list [ i ] then
71465: NOP4
71469: PUSH
71470: NOP4
71474: ARRAY
71475: NOT
71476: IFFALSE 71480
// break ;
71478: GO 71518
// if not HasTask ( j ) then
71480: NOP4
71484: PPUSH
71485: NOP4
71489: NOT
71490: IFFALSE 71516
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
71492: NOP4
71496: PPUSH
71497: NOP4
71501: PUSH
71502: NOP4
71506: ARRAY
71507: PUSH
71508: LD_INT 1
71510: ARRAY
71511: PPUSH
71512: NOP4
// end ;
71516: GO 71366
71518: POP
71519: POP
// end else
71520: GO 72325
// if mc_build_list [ i ] then
71522: NOP4
71526: PUSH
71527: NOP4
71531: ARRAY
71532: IFFALSE 72325
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71534: NOP4
71538: PUSH
71539: NOP4
71543: PUSH
71544: NOP4
71548: ARRAY
71549: PPUSH
71550: LD_INT 2
71552: PUSH
71553: LD_INT 30
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 30
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: LIST
71577: PPUSH
71578: NOP4
71582: ST_TO_ADDR
// if depot then
71583: NOP4
71587: IFFALSE 71605
// depot := depot [ 1 ] else
71589: NOP4
71593: PUSH
71594: NOP4
71598: PUSH
71599: LD_INT 1
71601: ARRAY
71602: ST_TO_ADDR
71603: GO 71613
// depot := 0 ;
71605: NOP4
71609: PUSH
71610: LD_INT 0
71612: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
71613: NOP4
71617: PUSH
71618: NOP4
71622: ARRAY
71623: PUSH
71624: LD_INT 1
71626: ARRAY
71627: PUSH
71628: LD_INT 1
71630: ARRAY
71631: PPUSH
71632: NOP4
71636: PUSH
71637: NOP4
71641: PUSH
71642: NOP4
71646: ARRAY
71647: PPUSH
71648: LD_INT 2
71650: PUSH
71651: LD_INT 30
71653: PUSH
71654: LD_INT 2
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 30
71663: PUSH
71664: LD_INT 3
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: LIST
71675: PPUSH
71676: NOP4
71680: NOT
71681: AND
71682: IFFALSE 71787
// begin for j = 1 to mc_build_list [ i ] do
71684: NOP4
71688: PUSH
71689: DOUBLE
71690: LD_INT 1
71692: DEC
71693: ST_TO_ADDR
71694: NOP4
71698: PUSH
71699: NOP4
71703: ARRAY
71704: PUSH
71705: FOR_TO
71706: IFFALSE 71785
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
71708: NOP4
71712: PUSH
71713: NOP4
71717: ARRAY
71718: PUSH
71719: NOP4
71723: ARRAY
71724: PUSH
71725: LD_INT 1
71727: ARRAY
71728: PUSH
71729: LD_INT 2
71731: EQUAL
71732: IFFALSE 71783
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
71734: NOP4
71738: PUSH
71739: NOP4
71743: PPUSH
71744: NOP4
71748: PPUSH
71749: NOP4
71753: PUSH
71754: NOP4
71758: ARRAY
71759: PPUSH
71760: NOP4
71764: PPUSH
71765: LD_INT 1
71767: PPUSH
71768: LD_INT 0
71770: PPUSH
71771: NOP4
71775: PPUSH
71776: NOP4
71780: ST_TO_ADDR
// break ;
71781: GO 71785
// end ;
71783: GO 71705
71785: POP
71786: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
71787: NOP4
71791: PUSH
71792: NOP4
71796: ARRAY
71797: PUSH
71798: LD_INT 1
71800: ARRAY
71801: PUSH
71802: LD_INT 1
71804: ARRAY
71805: PUSH
71806: LD_INT 0
71808: EQUAL
71809: PUSH
71810: NOP4
71814: PUSH
71815: NOP4
71819: PPUSH
71820: NOP4
71824: PUSH
71825: NOP4
71829: ARRAY
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PUSH
71835: LD_INT 1
71837: ARRAY
71838: PPUSH
71839: NOP4
71843: PUSH
71844: NOP4
71848: ARRAY
71849: PUSH
71850: LD_INT 1
71852: ARRAY
71853: PUSH
71854: LD_INT 2
71856: ARRAY
71857: PPUSH
71858: NOP4
71862: PUSH
71863: NOP4
71867: ARRAY
71868: PUSH
71869: LD_INT 1
71871: ARRAY
71872: PUSH
71873: LD_INT 3
71875: ARRAY
71876: PPUSH
71877: NOP4
71881: PUSH
71882: NOP4
71886: ARRAY
71887: PUSH
71888: LD_INT 1
71890: ARRAY
71891: PUSH
71892: LD_INT 4
71894: ARRAY
71895: PPUSH
71896: NOP4
71900: AND
71901: OR
71902: IFFALSE 72183
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71904: NOP4
71908: PUSH
71909: NOP4
71913: PUSH
71914: NOP4
71918: ARRAY
71919: PPUSH
71920: LD_INT 25
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PPUSH
71930: NOP4
71934: PUSH
71935: NOP4
71939: PUSH
71940: NOP4
71944: ARRAY
71945: DIFF
71946: ST_TO_ADDR
// if not tmp then
71947: NOP4
71951: NOT
71952: IFFALSE 71956
// continue ;
71954: GO 71201
// for j in tmp do
71956: NOP4
71960: PUSH
71961: NOP4
71965: PUSH
71966: FOR_IN
71967: IFFALSE 72179
// begin if not mc_builders [ i ] then
71969: NOP4
71973: PUSH
71974: NOP4
71978: ARRAY
71979: NOT
71980: IFFALSE 72038
// begin SetTag ( j , 103 ) ;
71982: NOP4
71986: PPUSH
71987: LD_INT 103
71989: PPUSH
71990: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71994: NOP4
71998: PUSH
71999: NOP4
72003: PPUSH
72004: NOP4
72008: PUSH
72009: NOP4
72013: PUSH
72014: NOP4
72018: ARRAY
72019: PUSH
72020: LD_INT 1
72022: PLUS
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PPUSH
72028: NOP4
72032: PPUSH
72033: NOP4
72037: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72038: NOP4
72042: PPUSH
72043: NOP4
72047: IFFALSE 72058
// ComExitBuilding ( j ) ;
72049: NOP4
72053: PPUSH
72054: NOP4
// wait ( 3 ) ;
72058: LD_INT 3
72060: PPUSH
72061: NOP4
// if not mc_build_list [ i ] then
72065: NOP4
72069: PUSH
72070: NOP4
72074: ARRAY
72075: NOT
72076: IFFALSE 72080
// break ;
72078: GO 72179
// if not HasTask ( j ) then
72080: NOP4
72084: PPUSH
72085: NOP4
72089: NOT
72090: IFFALSE 72177
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
72092: NOP4
72096: PPUSH
72097: NOP4
72101: PUSH
72102: NOP4
72106: ARRAY
72107: PUSH
72108: LD_INT 1
72110: ARRAY
72111: PUSH
72112: LD_INT 1
72114: ARRAY
72115: PPUSH
72116: NOP4
72120: PUSH
72121: NOP4
72125: ARRAY
72126: PUSH
72127: LD_INT 1
72129: ARRAY
72130: PUSH
72131: LD_INT 2
72133: ARRAY
72134: PPUSH
72135: NOP4
72139: PUSH
72140: NOP4
72144: ARRAY
72145: PUSH
72146: LD_INT 1
72148: ARRAY
72149: PUSH
72150: LD_INT 3
72152: ARRAY
72153: PPUSH
72154: NOP4
72158: PUSH
72159: NOP4
72163: ARRAY
72164: PUSH
72165: LD_INT 1
72167: ARRAY
72168: PUSH
72169: LD_INT 4
72171: ARRAY
72172: PPUSH
72173: NOP4
// end ;
72177: GO 71966
72179: POP
72180: POP
// end else
72181: GO 72325
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
72183: NOP4
72187: PUSH
72188: NOP4
72192: ARRAY
72193: PPUSH
72194: NOP4
72198: PUSH
72199: NOP4
72203: ARRAY
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_INT 1
72211: ARRAY
72212: PPUSH
72213: NOP4
72217: PUSH
72218: NOP4
72222: ARRAY
72223: PUSH
72224: LD_INT 1
72226: ARRAY
72227: PUSH
72228: LD_INT 2
72230: ARRAY
72231: PPUSH
72232: NOP4
72236: PUSH
72237: NOP4
72241: ARRAY
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PUSH
72247: LD_INT 3
72249: ARRAY
72250: PPUSH
72251: NOP4
72255: PUSH
72256: NOP4
72260: ARRAY
72261: PUSH
72262: LD_INT 1
72264: ARRAY
72265: PUSH
72266: LD_INT 4
72268: ARRAY
72269: PPUSH
72270: NOP4
72274: NOT
72275: IFFALSE 72325
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
72277: NOP4
72281: PUSH
72282: NOP4
72286: PPUSH
72287: NOP4
72291: PPUSH
72292: NOP4
72296: PUSH
72297: NOP4
72301: ARRAY
72302: PPUSH
72303: LD_INT 1
72305: PPUSH
72306: LD_INT 1
72308: NEG
72309: PPUSH
72310: LD_INT 0
72312: PPUSH
72313: NOP4
72317: PPUSH
72318: NOP4
72322: ST_TO_ADDR
// continue ;
72323: GO 71201
// end ; end ; end ;
72325: GO 71201
72327: POP
72328: POP
// end ;
72329: LD_VAR 0 1
72333: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
72334: LD_INT 0
72336: PPUSH
72337: PPUSH
72338: PPUSH
72339: PPUSH
72340: PPUSH
72341: PPUSH
// if not mc_bases then
72342: NOP4
72346: NOT
72347: IFFALSE 72351
// exit ;
72349: GO 72778
// for i = 1 to mc_bases do
72351: NOP4
72355: PUSH
72356: DOUBLE
72357: LD_INT 1
72359: DEC
72360: ST_TO_ADDR
72361: NOP4
72365: PUSH
72366: FOR_TO
72367: IFFALSE 72776
// begin tmp := mc_build_upgrade [ i ] ;
72369: NOP4
72373: PUSH
72374: NOP4
72378: PUSH
72379: NOP4
72383: ARRAY
72384: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
72385: NOP4
72389: PUSH
72390: NOP4
72394: PUSH
72395: NOP4
72399: ARRAY
72400: PPUSH
72401: LD_INT 2
72403: PUSH
72404: LD_INT 30
72406: PUSH
72407: LD_INT 6
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 30
72416: PUSH
72417: LD_INT 7
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: LIST
72428: PPUSH
72429: NOP4
72433: ST_TO_ADDR
// if not tmp and not lab then
72434: NOP4
72438: NOT
72439: PUSH
72440: NOP4
72444: NOT
72445: AND
72446: IFFALSE 72450
// continue ;
72448: GO 72366
// if tmp then
72450: NOP4
72454: IFFALSE 72574
// for j in tmp do
72456: NOP4
72460: PUSH
72461: NOP4
72465: PUSH
72466: FOR_IN
72467: IFFALSE 72572
// begin if UpgradeCost ( j ) then
72469: NOP4
72473: PPUSH
72474: NOP4
72478: IFFALSE 72570
// begin ComUpgrade ( j ) ;
72480: NOP4
72484: PPUSH
72485: NOP4
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
72489: NOP4
72493: PUSH
72494: NOP4
72498: PPUSH
72499: NOP4
72503: PPUSH
72504: NOP4
72508: PUSH
72509: NOP4
72513: ARRAY
72514: PUSH
72515: NOP4
72519: DIFF
72520: PPUSH
72521: NOP4
72525: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
72526: NOP4
72530: PUSH
72531: NOP4
72535: PPUSH
72536: NOP4
72540: PUSH
72541: NOP4
72545: PUSH
72546: NOP4
72550: ARRAY
72551: PUSH
72552: LD_INT 1
72554: PLUS
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PPUSH
72560: NOP4
72564: PPUSH
72565: NOP4
72569: ST_TO_ADDR
// end ; end ;
72570: GO 72466
72572: POP
72573: POP
// if not lab or not mc_lab_upgrade [ i ] then
72574: NOP4
72578: NOT
72579: PUSH
72580: NOP4
72584: PUSH
72585: NOP4
72589: ARRAY
72590: NOT
72591: OR
72592: IFFALSE 72596
// continue ;
72594: GO 72366
// for j in lab do
72596: NOP4
72600: PUSH
72601: NOP4
72605: PUSH
72606: FOR_IN
72607: IFFALSE 72772
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
72609: NOP4
72613: PPUSH
72614: NOP4
72618: PUSH
72619: LD_INT 6
72621: PUSH
72622: LD_INT 7
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: IN
72629: PUSH
72630: NOP4
72634: PPUSH
72635: NOP4
72639: PUSH
72640: LD_INT 1
72642: NONEQUAL
72643: AND
72644: IFFALSE 72770
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
72646: NOP4
72650: PPUSH
72651: NOP4
72655: PUSH
72656: NOP4
72660: ARRAY
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: NOP4
72670: IFFALSE 72770
// begin ComCancel ( j ) ;
72672: NOP4
72676: PPUSH
72677: NOP4
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
72681: NOP4
72685: PPUSH
72686: NOP4
72690: PUSH
72691: NOP4
72695: ARRAY
72696: PUSH
72697: LD_INT 1
72699: ARRAY
72700: PPUSH
72701: NOP4
// if not j in mc_construct_list [ i ] then
72705: NOP4
72709: PUSH
72710: NOP4
72714: PUSH
72715: NOP4
72719: ARRAY
72720: IN
72721: NOT
72722: IFFALSE 72768
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
72724: NOP4
72728: PUSH
72729: NOP4
72733: PPUSH
72734: NOP4
72738: PUSH
72739: NOP4
72743: PUSH
72744: NOP4
72748: ARRAY
72749: PUSH
72750: LD_INT 1
72752: PLUS
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PPUSH
72758: NOP4
72762: PPUSH
72763: NOP4
72767: ST_TO_ADDR
// break ;
72768: GO 72772
// end ; end ; end ;
72770: GO 72606
72772: POP
72773: POP
// end ;
72774: GO 72366
72776: POP
72777: POP
// end ;
72778: LD_VAR 0 1
72782: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
72783: LD_INT 0
72785: PPUSH
72786: PPUSH
72787: PPUSH
72788: PPUSH
72789: PPUSH
72790: PPUSH
72791: PPUSH
72792: PPUSH
72793: PPUSH
// if not mc_bases then
72794: NOP4
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 73208
// for i = 1 to mc_bases do
72803: NOP4
72807: PUSH
72808: DOUBLE
72809: LD_INT 1
72811: DEC
72812: ST_TO_ADDR
72813: NOP4
72817: PUSH
72818: FOR_TO
72819: IFFALSE 73206
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
72821: NOP4
72825: PUSH
72826: NOP4
72830: ARRAY
72831: NOT
72832: PUSH
72833: NOP4
72837: PUSH
72838: NOP4
72842: ARRAY
72843: PPUSH
72844: LD_INT 30
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PPUSH
72854: NOP4
72858: NOT
72859: OR
72860: IFFALSE 72864
// continue ;
72862: GO 72818
// busy := false ;
72864: NOP4
72868: PUSH
72869: LD_INT 0
72871: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72872: NOP4
72876: PUSH
72877: NOP4
72881: PUSH
72882: NOP4
72886: ARRAY
72887: PPUSH
72888: LD_INT 30
72890: PUSH
72891: LD_INT 3
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PPUSH
72898: NOP4
72902: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
72903: NOP4
72907: PUSH
72908: NOP4
72912: PUSH
72913: NOP4
72917: ARRAY
72918: PPUSH
72919: LD_INT 2
72921: PUSH
72922: LD_INT 30
72924: PUSH
72925: LD_INT 32
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 30
72934: PUSH
72935: LD_INT 33
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: PPUSH
72947: NOP4
72951: ST_TO_ADDR
// if not t then
72952: NOP4
72956: NOT
72957: IFFALSE 72961
// continue ;
72959: GO 72818
// for j in tmp do
72961: NOP4
72965: PUSH
72966: NOP4
72970: PUSH
72971: FOR_IN
72972: IFFALSE 73002
// if not BuildingStatus ( j ) = bs_idle then
72974: NOP4
72978: PPUSH
72979: NOP4
72983: PUSH
72984: LD_INT 2
72986: EQUAL
72987: NOT
72988: IFFALSE 73000
// begin busy := true ;
72990: NOP4
72994: PUSH
72995: LD_INT 1
72997: ST_TO_ADDR
// break ;
72998: GO 73002
// end ;
73000: GO 72971
73002: POP
73003: POP
// if busy then
73004: NOP4
73008: IFFALSE 73012
// continue ;
73010: GO 72818
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
73012: NOP4
73016: PUSH
73017: NOP4
73021: PPUSH
73022: LD_INT 35
73024: PUSH
73025: LD_INT 0
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PPUSH
73032: NOP4
73036: ST_TO_ADDR
// if tw then
73037: NOP4
73041: IFFALSE 73118
// begin tw := tw [ 1 ] ;
73043: NOP4
73047: PUSH
73048: NOP4
73052: PUSH
73053: LD_INT 1
73055: ARRAY
73056: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
73057: NOP4
73061: PUSH
73062: NOP4
73066: PPUSH
73067: NOP4
73071: PUSH
73072: NOP4
73076: ARRAY
73077: PPUSH
73078: NOP4
73082: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
73083: NOP4
73087: PUSH
73088: NOP4
73092: ARRAY
73093: IFFALSE 73116
// if not weapon in mc_allowed_tower_weapons [ i ] then
73095: NOP4
73099: PUSH
73100: NOP4
73104: PUSH
73105: NOP4
73109: ARRAY
73110: IN
73111: NOT
73112: IFFALSE 73116
// continue ;
73114: GO 72818
// end else
73116: GO 73181
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
73118: NOP4
73122: PUSH
73123: NOP4
73127: PUSH
73128: NOP4
73132: ARRAY
73133: PPUSH
73134: NOP4
73138: PPUSH
73139: NOP4
73143: ST_TO_ADDR
// if not tmp2 then
73144: NOP4
73148: NOT
73149: IFFALSE 73153
// continue ;
73151: GO 72818
// tw := tmp2 [ 1 ] ;
73153: NOP4
73157: PUSH
73158: NOP4
73162: PUSH
73163: LD_INT 1
73165: ARRAY
73166: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
73167: NOP4
73171: PUSH
73172: NOP4
73176: PUSH
73177: LD_INT 2
73179: ARRAY
73180: ST_TO_ADDR
// end ; if not weapon then
73181: NOP4
73185: NOT
73186: IFFALSE 73190
// continue ;
73188: GO 72818
// ComPlaceWeapon ( tw , weapon ) ;
73190: NOP4
73194: PPUSH
73195: NOP4
73199: PPUSH
73200: NOP4
// end ;
73204: GO 72818
73206: POP
73207: POP
// end ;
73208: LD_VAR 0 1
73212: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
73213: LD_INT 0
73215: PPUSH
73216: PPUSH
73217: PPUSH
73218: PPUSH
73219: PPUSH
73220: PPUSH
// if not mc_bases then
73221: NOP4
73225: NOT
73226: IFFALSE 73230
// exit ;
73228: GO 74242
// for i = 1 to mc_bases do
73230: NOP4
73234: PUSH
73235: DOUBLE
73236: LD_INT 1
73238: DEC
73239: ST_TO_ADDR
73240: NOP4
73244: PUSH
73245: FOR_TO
73246: IFFALSE 74240
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
73248: NOP4
73252: PUSH
73253: NOP4
73257: ARRAY
73258: NOT
73259: PUSH
73260: NOP4
73264: PUSH
73265: NOP4
73269: ARRAY
73270: PUSH
73271: NOP4
73275: PUSH
73276: NOP4
73280: ARRAY
73281: EQUAL
73282: OR
73283: IFFALSE 73287
// continue ;
73285: GO 73245
// if mc_miners [ i ] then
73287: NOP4
73291: PUSH
73292: NOP4
73296: ARRAY
73297: IFFALSE 73927
// begin k := 1 ;
73299: NOP4
73303: PUSH
73304: LD_INT 1
73306: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
73307: NOP4
73311: PUSH
73312: DOUBLE
73313: NOP4
73317: PUSH
73318: NOP4
73322: ARRAY
73323: INC
73324: ST_TO_ADDR
73325: LD_INT 1
73327: PUSH
73328: FOR_DOWNTO
73329: IFFALSE 73925
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
73331: NOP4
73335: PUSH
73336: NOP4
73340: ARRAY
73341: PUSH
73342: NOP4
73346: ARRAY
73347: PPUSH
73348: NOP4
73352: PUSH
73353: NOP4
73357: PUSH
73358: NOP4
73362: ARRAY
73363: PUSH
73364: NOP4
73368: ARRAY
73369: PPUSH
73370: NOP4
73374: PUSH
73375: LD_INT 1
73377: NONEQUAL
73378: OR
73379: IFFALSE 73442
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
73381: NOP4
73385: PUSH
73386: NOP4
73390: PUSH
73391: NOP4
73395: ARRAY
73396: PUSH
73397: NOP4
73401: PUSH
73402: NOP4
73406: ARRAY
73407: PUSH
73408: NOP4
73412: ARRAY
73413: DIFF
73414: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
73415: NOP4
73419: PUSH
73420: NOP4
73424: PPUSH
73425: NOP4
73429: PPUSH
73430: NOP4
73434: PPUSH
73435: NOP4
73439: ST_TO_ADDR
// continue ;
73440: GO 73328
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
73442: NOP4
73446: PUSH
73447: NOP4
73451: ARRAY
73452: PUSH
73453: NOP4
73457: ARRAY
73458: PPUSH
73459: NOP4
73463: PUSH
73464: NOP4
73468: PUSH
73469: NOP4
73473: ARRAY
73474: PUSH
73475: NOP4
73479: ARRAY
73480: PPUSH
73481: NOP4
73485: PPUSH
73486: NOP4
73490: PUSH
73491: NOP4
73495: ARRAY
73496: PUSH
73497: NOP4
73501: ARRAY
73502: PUSH
73503: LD_INT 1
73505: ARRAY
73506: PPUSH
73507: NOP4
73511: PUSH
73512: NOP4
73516: ARRAY
73517: PUSH
73518: NOP4
73522: ARRAY
73523: PUSH
73524: LD_INT 2
73526: ARRAY
73527: PPUSH
73528: LD_INT 15
73530: PPUSH
73531: NOP4
73535: PUSH
73536: LD_INT 4
73538: ARRAY
73539: PUSH
73540: NOP4
73544: PUSH
73545: NOP4
73549: ARRAY
73550: PUSH
73551: NOP4
73555: ARRAY
73556: PPUSH
73557: LD_INT 10
73559: PPUSH
73560: NOP4
73564: PUSH
73565: LD_INT 4
73567: ARRAY
73568: OR
73569: AND
73570: IFFALSE 73593
// ComStop ( mc_miners [ i ] [ j ] ) ;
73572: NOP4
73576: PUSH
73577: NOP4
73581: ARRAY
73582: PUSH
73583: NOP4
73587: ARRAY
73588: PPUSH
73589: NOP4
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
73593: NOP4
73597: PUSH
73598: NOP4
73602: ARRAY
73603: PUSH
73604: NOP4
73608: ARRAY
73609: PPUSH
73610: NOP4
73614: PUSH
73615: LD_INT 1
73617: EQUAL
73618: PUSH
73619: NOP4
73623: PUSH
73624: NOP4
73628: ARRAY
73629: PUSH
73630: NOP4
73634: ARRAY
73635: PPUSH
73636: NOP4
73640: NOT
73641: AND
73642: PUSH
73643: NOP4
73647: PUSH
73648: NOP4
73652: ARRAY
73653: PUSH
73654: NOP4
73658: ARRAY
73659: PPUSH
73660: NOP4
73664: PPUSH
73665: NOP4
73669: PUSH
73670: NOP4
73674: ARRAY
73675: PUSH
73676: NOP4
73680: ARRAY
73681: PUSH
73682: LD_INT 1
73684: ARRAY
73685: PPUSH
73686: NOP4
73690: PUSH
73691: NOP4
73695: ARRAY
73696: PUSH
73697: NOP4
73701: ARRAY
73702: PUSH
73703: LD_INT 2
73705: ARRAY
73706: PPUSH
73707: LD_INT 15
73709: PPUSH
73710: NOP4
73714: PUSH
73715: LD_INT 4
73717: ARRAY
73718: PUSH
73719: LD_INT 0
73721: EQUAL
73722: AND
73723: PUSH
73724: NOP4
73728: PUSH
73729: NOP4
73733: ARRAY
73734: PUSH
73735: NOP4
73739: ARRAY
73740: PPUSH
73741: NOP4
73745: NOT
73746: AND
73747: IFFALSE 73923
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
73749: NOP4
73753: PUSH
73754: NOP4
73758: ARRAY
73759: PUSH
73760: NOP4
73764: ARRAY
73765: PPUSH
73766: NOP4
73770: IFFALSE 73793
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
73772: NOP4
73776: PUSH
73777: NOP4
73781: ARRAY
73782: PUSH
73783: NOP4
73787: ARRAY
73788: PPUSH
73789: NOP4
// if not HasTask ( mc_miners [ i ] [ j ] ) then
73793: NOP4
73797: PUSH
73798: NOP4
73802: ARRAY
73803: PUSH
73804: NOP4
73808: ARRAY
73809: PPUSH
73810: NOP4
73814: NOT
73815: IFFALSE 73883
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
73817: NOP4
73821: PUSH
73822: NOP4
73826: ARRAY
73827: PUSH
73828: NOP4
73832: ARRAY
73833: PPUSH
73834: NOP4
73838: PUSH
73839: NOP4
73843: ARRAY
73844: PUSH
73845: NOP4
73849: ARRAY
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PPUSH
73855: NOP4
73859: PUSH
73860: NOP4
73864: ARRAY
73865: PUSH
73866: NOP4
73870: ARRAY
73871: PUSH
73872: LD_INT 2
73874: ARRAY
73875: PPUSH
73876: LD_INT 0
73878: PPUSH
73879: NOP4
// k := k + 1 ;
73883: NOP4
73887: PUSH
73888: NOP4
73892: PUSH
73893: LD_INT 1
73895: PLUS
73896: ST_TO_ADDR
// if k > mc_mines [ i ] then
73897: NOP4
73901: PUSH
73902: NOP4
73906: PUSH
73907: NOP4
73911: ARRAY
73912: GREATER
73913: IFFALSE 73923
// k := 1 ;
73915: NOP4
73919: PUSH
73920: LD_INT 1
73922: ST_TO_ADDR
// end ; end ;
73923: GO 73328
73925: POP
73926: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
73927: NOP4
73931: PUSH
73932: NOP4
73936: PUSH
73937: NOP4
73941: ARRAY
73942: PPUSH
73943: LD_INT 2
73945: PUSH
73946: LD_INT 30
73948: PUSH
73949: LD_INT 4
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 30
73958: PUSH
73959: LD_INT 5
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 30
73968: PUSH
73969: LD_INT 32
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: PPUSH
73982: NOP4
73986: ST_TO_ADDR
// if not tmp then
73987: NOP4
73991: NOT
73992: IFFALSE 73996
// continue ;
73994: GO 73245
// list := [ ] ;
73996: NOP4
74000: PUSH
74001: EMPTY
74002: ST_TO_ADDR
// for j in tmp do
74003: NOP4
74007: PUSH
74008: NOP4
74012: PUSH
74013: FOR_IN
74014: IFFALSE 74083
// begin for k in UnitsInside ( j ) do
74016: NOP4
74020: PUSH
74021: NOP4
74025: PPUSH
74026: NOP4
74030: PUSH
74031: FOR_IN
74032: IFFALSE 74079
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
74034: NOP4
74038: PPUSH
74039: NOP4
74043: PUSH
74044: LD_INT 1
74046: EQUAL
74047: PUSH
74048: NOP4
74052: PPUSH
74053: NOP4
74057: NOT
74058: AND
74059: IFFALSE 74077
// list := list ^ k ;
74061: NOP4
74065: PUSH
74066: NOP4
74070: PUSH
74071: NOP4
74075: ADD
74076: ST_TO_ADDR
74077: GO 74031
74079: POP
74080: POP
// end ;
74081: GO 74013
74083: POP
74084: POP
// list := list diff mc_miners [ i ] ;
74085: NOP4
74089: PUSH
74090: NOP4
74094: PUSH
74095: NOP4
74099: PUSH
74100: NOP4
74104: ARRAY
74105: DIFF
74106: ST_TO_ADDR
// if not list then
74107: NOP4
74111: NOT
74112: IFFALSE 74116
// continue ;
74114: GO 73245
// k := mc_mines [ i ] - mc_miners [ i ] ;
74116: NOP4
74120: PUSH
74121: NOP4
74125: PUSH
74126: NOP4
74130: ARRAY
74131: PUSH
74132: NOP4
74136: PUSH
74137: NOP4
74141: ARRAY
74142: MINUS
74143: ST_TO_ADDR
// if k > list then
74144: NOP4
74148: PUSH
74149: NOP4
74153: GREATER
74154: IFFALSE 74166
// k := list ;
74156: NOP4
74160: PUSH
74161: NOP4
74165: ST_TO_ADDR
// for j = 1 to k do
74166: NOP4
74170: PUSH
74171: DOUBLE
74172: LD_INT 1
74174: DEC
74175: ST_TO_ADDR
74176: NOP4
74180: PUSH
74181: FOR_TO
74182: IFFALSE 74236
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
74184: NOP4
74188: PUSH
74189: NOP4
74193: PPUSH
74194: NOP4
74198: PUSH
74199: NOP4
74203: PUSH
74204: NOP4
74208: ARRAY
74209: PUSH
74210: LD_INT 1
74212: PLUS
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PPUSH
74218: NOP4
74222: PUSH
74223: NOP4
74227: ARRAY
74228: PPUSH
74229: NOP4
74233: ST_TO_ADDR
74234: GO 74181
74236: POP
74237: POP
// end ;
74238: GO 73245
74240: POP
74241: POP
// end ;
74242: LD_VAR 0 1
74246: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
74247: LD_INT 0
74249: PPUSH
74250: PPUSH
74251: PPUSH
74252: PPUSH
74253: PPUSH
74254: PPUSH
74255: PPUSH
74256: PPUSH
74257: PPUSH
74258: PPUSH
// if not mc_bases then
74259: NOP4
74263: NOT
74264: IFFALSE 74268
// exit ;
74266: GO 75999
// for i = 1 to mc_bases do
74268: NOP4
74272: PUSH
74273: DOUBLE
74274: LD_INT 1
74276: DEC
74277: ST_TO_ADDR
74278: NOP4
74282: PUSH
74283: FOR_TO
74284: IFFALSE 75997
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
74286: NOP4
74290: PUSH
74291: NOP4
74295: ARRAY
74296: NOT
74297: PUSH
74298: NOP4
74302: PUSH
74303: NOP4
74307: ARRAY
74308: OR
74309: IFFALSE 74313
// continue ;
74311: GO 74283
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
74313: NOP4
74317: PUSH
74318: NOP4
74322: ARRAY
74323: NOT
74324: PUSH
74325: NOP4
74329: PUSH
74330: NOP4
74334: ARRAY
74335: AND
74336: IFFALSE 74374
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
74338: NOP4
74342: PUSH
74343: NOP4
74347: PPUSH
74348: NOP4
74352: PPUSH
74353: EMPTY
74354: PPUSH
74355: NOP4
74359: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
74360: NOP4
74364: PPUSH
74365: LD_INT 107
74367: PPUSH
74368: NOP4
// continue ;
74372: GO 74283
// end ; target := [ ] ;
74374: NOP4
74378: PUSH
74379: EMPTY
74380: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
74381: NOP4
74385: PUSH
74386: DOUBLE
74387: NOP4
74391: PUSH
74392: NOP4
74396: ARRAY
74397: INC
74398: ST_TO_ADDR
74399: LD_INT 1
74401: PUSH
74402: FOR_DOWNTO
74403: IFFALSE 74663
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
74405: NOP4
74409: PUSH
74410: NOP4
74414: ARRAY
74415: PUSH
74416: NOP4
74420: ARRAY
74421: PUSH
74422: LD_INT 2
74424: ARRAY
74425: PPUSH
74426: NOP4
74430: PUSH
74431: NOP4
74435: ARRAY
74436: PUSH
74437: NOP4
74441: ARRAY
74442: PUSH
74443: LD_INT 3
74445: ARRAY
74446: PPUSH
74447: NOP4
74451: PUSH
74452: NOP4
74456: PUSH
74457: NOP4
74461: ARRAY
74462: PUSH
74463: NOP4
74467: ARRAY
74468: PUSH
74469: LD_INT 2
74471: ARRAY
74472: PPUSH
74473: NOP4
74477: PUSH
74478: NOP4
74482: ARRAY
74483: PUSH
74484: NOP4
74488: ARRAY
74489: PUSH
74490: LD_INT 3
74492: ARRAY
74493: PPUSH
74494: NOP4
74498: PUSH
74499: LD_INT 0
74501: EQUAL
74502: AND
74503: IFFALSE 74558
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
74505: NOP4
74509: PUSH
74510: NOP4
74514: PUSH
74515: NOP4
74519: ARRAY
74520: PPUSH
74521: NOP4
74525: PPUSH
74526: NOP4
74530: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
74531: NOP4
74535: PUSH
74536: NOP4
74540: PPUSH
74541: NOP4
74545: PPUSH
74546: NOP4
74550: PPUSH
74551: NOP4
74555: ST_TO_ADDR
// continue ;
74556: GO 74402
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
74558: NOP4
74562: PUSH
74563: NOP4
74567: ARRAY
74568: PUSH
74569: LD_INT 1
74571: ARRAY
74572: PPUSH
74573: NOP4
74577: PPUSH
74578: NOP4
74582: PUSH
74583: NOP4
74587: ARRAY
74588: PUSH
74589: NOP4
74593: ARRAY
74594: PUSH
74595: LD_INT 2
74597: ARRAY
74598: PPUSH
74599: NOP4
74603: PUSH
74604: NOP4
74608: ARRAY
74609: PUSH
74610: NOP4
74614: ARRAY
74615: PUSH
74616: LD_INT 3
74618: ARRAY
74619: PPUSH
74620: LD_INT 30
74622: PPUSH
74623: NOP4
74627: PUSH
74628: LD_INT 4
74630: ARRAY
74631: PUSH
74632: LD_INT 0
74634: EQUAL
74635: IFFALSE 74661
// begin target := mc_crates [ i ] [ j ] ;
74637: NOP4
74641: PUSH
74642: NOP4
74646: PUSH
74647: NOP4
74651: ARRAY
74652: PUSH
74653: NOP4
74657: ARRAY
74658: ST_TO_ADDR
// break ;
74659: GO 74663
// end ; end ;
74661: GO 74402
74663: POP
74664: POP
// if not target then
74665: NOP4
74669: NOT
74670: IFFALSE 74674
// continue ;
74672: GO 74283
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
74674: NOP4
74678: PUSH
74679: NOP4
74683: PUSH
74684: NOP4
74688: ARRAY
74689: PPUSH
74690: LD_INT 2
74692: PUSH
74693: LD_INT 3
74695: PUSH
74696: LD_INT 58
74698: PUSH
74699: EMPTY
74700: LIST
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: LD_INT 61
74708: PUSH
74709: EMPTY
74710: LIST
74711: PUSH
74712: LD_INT 33
74714: PUSH
74715: LD_INT 5
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 33
74724: PUSH
74725: LD_INT 3
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 2
74741: PUSH
74742: LD_INT 34
74744: PUSH
74745: LD_INT 32
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 34
74754: PUSH
74755: LD_INT 51
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 34
74764: PUSH
74765: LD_INT 12
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PPUSH
74782: NOP4
74786: ST_TO_ADDR
// if not cargo then
74787: NOP4
74791: NOT
74792: IFFALSE 75435
// begin if mc_crates_collector [ i ] < 5 then
74794: NOP4
74798: PUSH
74799: NOP4
74803: ARRAY
74804: PUSH
74805: LD_INT 5
74807: LESS
74808: IFFALSE 75174
// begin if mc_ape [ i ] then
74810: NOP4
74814: PUSH
74815: NOP4
74819: ARRAY
74820: IFFALSE 74867
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
74822: NOP4
74826: PUSH
74827: NOP4
74831: PUSH
74832: NOP4
74836: ARRAY
74837: PPUSH
74838: LD_INT 25
74840: PUSH
74841: LD_INT 16
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 24
74850: PUSH
74851: LD_INT 750
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PPUSH
74862: NOP4
74866: ST_TO_ADDR
// if not tmp then
74867: NOP4
74871: NOT
74872: IFFALSE 74919
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
74874: NOP4
74878: PUSH
74879: NOP4
74883: PUSH
74884: NOP4
74888: ARRAY
74889: PPUSH
74890: LD_INT 25
74892: PUSH
74893: LD_INT 2
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 24
74902: PUSH
74903: LD_INT 750
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PPUSH
74914: NOP4
74918: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
74919: NOP4
74923: PUSH
74924: NOP4
74928: ARRAY
74929: PUSH
74930: NOP4
74934: PUSH
74935: NOP4
74939: ARRAY
74940: PPUSH
74941: LD_INT 25
74943: PUSH
74944: LD_INT 2
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 24
74953: PUSH
74954: LD_INT 750
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PPUSH
74965: NOP4
74969: AND
74970: PUSH
74971: NOP4
74975: PUSH
74976: LD_INT 5
74978: LESS
74979: AND
74980: IFFALSE 75062
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
74982: NOP4
74986: PUSH
74987: NOP4
74991: PUSH
74992: NOP4
74996: ARRAY
74997: PPUSH
74998: LD_INT 25
75000: PUSH
75001: LD_INT 2
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 24
75010: PUSH
75011: LD_INT 750
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PPUSH
75022: NOP4
75026: PUSH
75027: FOR_IN
75028: IFFALSE 75060
// begin tmp := tmp union j ;
75030: NOP4
75034: PUSH
75035: NOP4
75039: PUSH
75040: NOP4
75044: UNION
75045: ST_TO_ADDR
// if tmp >= 5 then
75046: NOP4
75050: PUSH
75051: LD_INT 5
75053: GREATEREQUAL
75054: IFFALSE 75058
// break ;
75056: GO 75060
// end ;
75058: GO 75027
75060: POP
75061: POP
// end ; if not tmp then
75062: NOP4
75066: NOT
75067: IFFALSE 75071
// continue ;
75069: GO 74283
// for j in tmp do
75071: NOP4
75075: PUSH
75076: NOP4
75080: PUSH
75081: FOR_IN
75082: IFFALSE 75172
// if not GetTag ( j ) then
75084: NOP4
75088: PPUSH
75089: NOP4
75093: NOT
75094: IFFALSE 75170
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
75096: NOP4
75100: PUSH
75101: NOP4
75105: PPUSH
75106: NOP4
75110: PUSH
75111: NOP4
75115: PUSH
75116: NOP4
75120: ARRAY
75121: PUSH
75122: LD_INT 1
75124: PLUS
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PPUSH
75130: NOP4
75134: PPUSH
75135: NOP4
75139: ST_TO_ADDR
// SetTag ( j , 107 ) ;
75140: NOP4
75144: PPUSH
75145: LD_INT 107
75147: PPUSH
75148: NOP4
// if mc_crates_collector [ i ] >= 5 then
75152: NOP4
75156: PUSH
75157: NOP4
75161: ARRAY
75162: PUSH
75163: LD_INT 5
75165: GREATEREQUAL
75166: IFFALSE 75170
// break ;
75168: GO 75172
// end ;
75170: GO 75081
75172: POP
75173: POP
// end ; if mc_crates_collector [ i ] and target then
75174: NOP4
75178: PUSH
75179: NOP4
75183: ARRAY
75184: PUSH
75185: NOP4
75189: AND
75190: IFFALSE 75433
// begin if mc_crates_collector [ i ] < target [ 1 ] then
75192: NOP4
75196: PUSH
75197: NOP4
75201: ARRAY
75202: PUSH
75203: NOP4
75207: PUSH
75208: LD_INT 1
75210: ARRAY
75211: LESS
75212: IFFALSE 75232
// tmp := mc_crates_collector [ i ] else
75214: NOP4
75218: PUSH
75219: NOP4
75223: PUSH
75224: NOP4
75228: ARRAY
75229: ST_TO_ADDR
75230: GO 75246
// tmp := target [ 1 ] ;
75232: NOP4
75236: PUSH
75237: NOP4
75241: PUSH
75242: LD_INT 1
75244: ARRAY
75245: ST_TO_ADDR
// k := 0 ;
75246: NOP4
75250: PUSH
75251: LD_INT 0
75253: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
75254: NOP4
75258: PUSH
75259: NOP4
75263: PUSH
75264: NOP4
75268: ARRAY
75269: PUSH
75270: FOR_IN
75271: IFFALSE 75431
// begin k := k + 1 ;
75273: NOP4
75277: PUSH
75278: NOP4
75282: PUSH
75283: LD_INT 1
75285: PLUS
75286: ST_TO_ADDR
// if k > tmp then
75287: NOP4
75291: PUSH
75292: NOP4
75296: GREATER
75297: IFFALSE 75301
// break ;
75299: GO 75431
// if not GetClass ( j ) in [ 2 , 16 ] then
75301: NOP4
75305: PPUSH
75306: NOP4
75310: PUSH
75311: LD_INT 2
75313: PUSH
75314: LD_INT 16
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: IN
75321: NOT
75322: IFFALSE 75375
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
75324: NOP4
75328: PUSH
75329: NOP4
75333: PPUSH
75334: NOP4
75338: PPUSH
75339: NOP4
75343: PUSH
75344: NOP4
75348: ARRAY
75349: PUSH
75350: NOP4
75354: DIFF
75355: PPUSH
75356: NOP4
75360: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75361: NOP4
75365: PPUSH
75366: LD_INT 0
75368: PPUSH
75369: NOP4
// continue ;
75373: GO 75270
// end ; if IsInUnit ( j ) then
75375: NOP4
75379: PPUSH
75380: NOP4
75384: IFFALSE 75395
// ComExitBuilding ( j ) ;
75386: NOP4
75390: PPUSH
75391: NOP4
// wait ( 3 ) ;
75395: LD_INT 3
75397: PPUSH
75398: NOP4
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75402: NOP4
75406: PPUSH
75407: NOP4
75411: PUSH
75412: LD_INT 2
75414: ARRAY
75415: PPUSH
75416: NOP4
75420: PUSH
75421: LD_INT 3
75423: ARRAY
75424: PPUSH
75425: NOP4
// end ;
75429: GO 75270
75431: POP
75432: POP
// end ; end else
75433: GO 75995
// begin for j in cargo do
75435: NOP4
75439: PUSH
75440: NOP4
75444: PUSH
75445: FOR_IN
75446: IFFALSE 75993
// begin if GetTag ( j ) <> 0 then
75448: NOP4
75452: PPUSH
75453: NOP4
75457: PUSH
75458: LD_INT 0
75460: NONEQUAL
75461: IFFALSE 75465
// continue ;
75463: GO 75445
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
75465: NOP4
75469: PPUSH
75470: NOP4
75474: PUSH
75475: LD_INT 1000
75477: LESS
75478: PUSH
75479: NOP4
75483: PPUSH
75484: NOP4
75488: PUSH
75489: NOP4
75493: ARRAY
75494: PPUSH
75495: NOP4
75499: NOT
75500: AND
75501: IFFALSE 75523
// ComMoveToArea ( j , mc_parking [ i ] ) ;
75503: NOP4
75507: PPUSH
75508: NOP4
75512: PUSH
75513: NOP4
75517: ARRAY
75518: PPUSH
75519: NOP4
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
75523: NOP4
75527: PPUSH
75528: NOP4
75532: PUSH
75533: LD_INT 1000
75535: LESS
75536: PUSH
75537: NOP4
75541: PPUSH
75542: NOP4
75546: PUSH
75547: NOP4
75551: ARRAY
75552: PPUSH
75553: NOP4
75557: AND
75558: IFFALSE 75562
// continue ;
75560: GO 75445
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
75562: NOP4
75566: PPUSH
75567: NOP4
75571: PUSH
75572: LD_INT 2
75574: EQUAL
75575: PUSH
75576: NOP4
75580: PPUSH
75581: NOP4
75585: PUSH
75586: LD_INT 15
75588: LESS
75589: AND
75590: IFFALSE 75594
// continue ;
75592: GO 75445
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
75594: NOP4
75598: PPUSH
75599: NOP4
75603: PUSH
75604: LD_INT 1
75606: EQUAL
75607: PUSH
75608: NOP4
75612: PPUSH
75613: NOP4
75617: PUSH
75618: LD_INT 10
75620: LESS
75621: AND
75622: IFFALSE 75932
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75624: NOP4
75628: PUSH
75629: NOP4
75633: PUSH
75634: NOP4
75638: ARRAY
75639: PPUSH
75640: LD_INT 2
75642: PUSH
75643: LD_INT 30
75645: PUSH
75646: LD_INT 0
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 30
75655: PUSH
75656: LD_INT 1
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: LIST
75667: PPUSH
75668: NOP4
75672: ST_TO_ADDR
// if not depot then
75673: NOP4
75677: NOT
75678: IFFALSE 75682
// continue ;
75680: GO 75445
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
75682: NOP4
75686: PPUSH
75687: NOP4
75691: PPUSH
75692: NOP4
75696: PPUSH
75697: NOP4
75701: PPUSH
75702: NOP4
75706: PUSH
75707: LD_INT 6
75709: LESS
75710: IFFALSE 75726
// SetFuel ( j , 100 ) else
75712: NOP4
75716: PPUSH
75717: LD_INT 100
75719: PPUSH
75720: NOP4
75724: GO 75932
// if GetFuel ( j ) = 0 then
75726: NOP4
75730: PPUSH
75731: NOP4
75735: PUSH
75736: LD_INT 0
75738: EQUAL
75739: IFFALSE 75932
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
75741: NOP4
75745: PUSH
75746: NOP4
75750: PPUSH
75751: NOP4
75755: PPUSH
75756: NOP4
75760: PUSH
75761: NOP4
75765: ARRAY
75766: PUSH
75767: NOP4
75771: DIFF
75772: PPUSH
75773: NOP4
75777: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
75778: NOP4
75782: PPUSH
75783: NOP4
75787: PUSH
75788: LD_INT 1
75790: EQUAL
75791: IFFALSE 75807
// ComExitVehicle ( IsInUnit ( j ) ) ;
75793: NOP4
75797: PPUSH
75798: NOP4
75802: PPUSH
75803: NOP4
// if GetControl ( j ) = control_remote then
75807: NOP4
75811: PPUSH
75812: NOP4
75816: PUSH
75817: LD_INT 2
75819: EQUAL
75820: IFFALSE 75831
// ComUnlink ( j ) ;
75822: NOP4
75826: PPUSH
75827: NOP4
// fac := MC_GetBuilding ( i , b_factory ) ;
75831: NOP4
75835: PUSH
75836: NOP4
75840: PPUSH
75841: LD_INT 3
75843: PPUSH
75844: NOP4
75848: ST_TO_ADDR
// if fac then
75849: NOP4
75853: IFFALSE 75930
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
75855: NOP4
75859: PUSH
75860: NOP4
75864: PPUSH
75865: NOP4
75869: PPUSH
75870: NOP4
75874: PPUSH
75875: NOP4
75879: PPUSH
75880: NOP4
75884: PPUSH
75885: NOP4
75889: PPUSH
75890: NOP4
75894: PPUSH
75895: NOP4
75899: PPUSH
75900: NOP4
75904: PPUSH
75905: NOP4
75909: ST_TO_ADDR
// if components then
75910: NOP4
75914: IFFALSE 75930
// MC_InsertProduceList ( i , components ) ;
75916: NOP4
75920: PPUSH
75921: NOP4
75925: PPUSH
75926: NOP4
// end ; continue ;
75930: GO 75445
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
75932: NOP4
75936: PPUSH
75937: LD_INT 1
75939: PPUSH
75940: NOP4
75944: PUSH
75945: LD_INT 100
75947: LESS
75948: PUSH
75949: NOP4
75953: PPUSH
75954: NOP4
75958: NOT
75959: AND
75960: IFFALSE 75989
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75962: NOP4
75966: PPUSH
75967: NOP4
75971: PUSH
75972: LD_INT 2
75974: ARRAY
75975: PPUSH
75976: NOP4
75980: PUSH
75981: LD_INT 3
75983: ARRAY
75984: PPUSH
75985: NOP4
// break ;
75989: GO 75993
// end ;
75991: GO 75445
75993: POP
75994: POP
// end ; end ;
75995: GO 74283
75997: POP
75998: POP
// end ;
75999: LD_VAR 0 1
76003: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
76004: LD_INT 0
76006: PPUSH
76007: PPUSH
76008: PPUSH
76009: PPUSH
// if not mc_bases then
76010: NOP4
76014: NOT
76015: IFFALSE 76019
// exit ;
76017: GO 76180
// for i = 1 to mc_bases do
76019: NOP4
76023: PUSH
76024: DOUBLE
76025: LD_INT 1
76027: DEC
76028: ST_TO_ADDR
76029: NOP4
76033: PUSH
76034: FOR_TO
76035: IFFALSE 76178
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
76037: NOP4
76041: PUSH
76042: NOP4
76046: PUSH
76047: NOP4
76051: ARRAY
76052: PUSH
76053: NOP4
76057: PUSH
76058: NOP4
76062: ARRAY
76063: UNION
76064: PPUSH
76065: LD_INT 33
76067: PUSH
76068: LD_INT 2
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PPUSH
76075: NOP4
76079: ST_TO_ADDR
// if tmp then
76080: NOP4
76084: IFFALSE 76176
// for j in tmp do
76086: NOP4
76090: PUSH
76091: NOP4
76095: PUSH
76096: FOR_IN
76097: IFFALSE 76174
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
76099: NOP4
76103: PPUSH
76104: NOP4
76108: NOT
76109: PUSH
76110: NOP4
76114: PPUSH
76115: NOP4
76119: PUSH
76120: LD_INT 250
76122: GREATEREQUAL
76123: AND
76124: IFFALSE 76137
// Connect ( j ) else
76126: NOP4
76130: PPUSH
76131: NOP4
76135: GO 76172
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
76137: NOP4
76141: PPUSH
76142: NOP4
76146: PUSH
76147: LD_INT 250
76149: LESS
76150: PUSH
76151: NOP4
76155: PPUSH
76156: NOP4
76160: AND
76161: IFFALSE 76172
// ComUnlink ( j ) ;
76163: NOP4
76167: PPUSH
76168: NOP4
76172: GO 76096
76174: POP
76175: POP
// end ;
76176: GO 76034
76178: POP
76179: POP
// end ;
76180: LD_VAR 0 1
76184: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
76185: LD_INT 0
76187: PPUSH
76188: PPUSH
76189: PPUSH
76190: PPUSH
76191: PPUSH
// if not mc_bases then
76192: NOP4
76196: NOT
76197: IFFALSE 76201
// exit ;
76199: GO 76661
// for i = 1 to mc_bases do
76201: NOP4
76205: PUSH
76206: DOUBLE
76207: LD_INT 1
76209: DEC
76210: ST_TO_ADDR
76211: NOP4
76215: PUSH
76216: FOR_TO
76217: IFFALSE 76659
// begin if not mc_produce [ i ] then
76219: NOP4
76223: PUSH
76224: NOP4
76228: ARRAY
76229: NOT
76230: IFFALSE 76234
// continue ;
76232: GO 76216
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76234: NOP4
76238: PUSH
76239: NOP4
76243: PUSH
76244: NOP4
76248: ARRAY
76249: PPUSH
76250: LD_INT 30
76252: PUSH
76253: LD_INT 3
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PPUSH
76260: NOP4
76264: ST_TO_ADDR
// if not fac then
76265: NOP4
76269: NOT
76270: IFFALSE 76274
// continue ;
76272: GO 76216
// for j in fac do
76274: NOP4
76278: PUSH
76279: NOP4
76283: PUSH
76284: FOR_IN
76285: IFFALSE 76655
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
76287: NOP4
76291: PPUSH
76292: NOP4
76296: PUSH
76297: LD_INT 2
76299: NONEQUAL
76300: PUSH
76301: NOP4
76305: PPUSH
76306: LD_INT 15
76308: PPUSH
76309: NOP4
76313: PUSH
76314: LD_INT 4
76316: ARRAY
76317: OR
76318: PUSH
76319: NOP4
76323: PPUSH
76324: NOP4
76328: PUSH
76329: LD_INT 0
76331: EQUAL
76332: OR
76333: IFFALSE 76337
// continue ;
76335: GO 76284
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
76337: NOP4
76341: PPUSH
76342: NOP4
76346: PUSH
76347: NOP4
76351: ARRAY
76352: PUSH
76353: LD_INT 1
76355: ARRAY
76356: PUSH
76357: LD_INT 1
76359: ARRAY
76360: PPUSH
76361: NOP4
76365: PUSH
76366: NOP4
76370: ARRAY
76371: PUSH
76372: LD_INT 1
76374: ARRAY
76375: PUSH
76376: LD_INT 2
76378: ARRAY
76379: PPUSH
76380: NOP4
76384: PUSH
76385: NOP4
76389: ARRAY
76390: PUSH
76391: LD_INT 1
76393: ARRAY
76394: PUSH
76395: LD_INT 3
76397: ARRAY
76398: PPUSH
76399: NOP4
76403: PUSH
76404: NOP4
76408: ARRAY
76409: PUSH
76410: LD_INT 1
76412: ARRAY
76413: PUSH
76414: LD_INT 4
76416: ARRAY
76417: PPUSH
76418: NOP4
76422: PUSH
76423: NOP4
76427: PPUSH
76428: NOP4
76432: PUSH
76433: NOP4
76437: ARRAY
76438: PUSH
76439: LD_INT 1
76441: ARRAY
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PUSH
76447: NOP4
76451: PUSH
76452: NOP4
76456: ARRAY
76457: PUSH
76458: LD_INT 1
76460: ARRAY
76461: PUSH
76462: LD_INT 2
76464: ARRAY
76465: PUSH
76466: NOP4
76470: PUSH
76471: NOP4
76475: ARRAY
76476: PUSH
76477: LD_INT 1
76479: ARRAY
76480: PUSH
76481: LD_INT 3
76483: ARRAY
76484: PUSH
76485: NOP4
76489: PUSH
76490: NOP4
76494: ARRAY
76495: PUSH
76496: LD_INT 1
76498: ARRAY
76499: PUSH
76500: LD_INT 4
76502: ARRAY
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: PPUSH
76510: NOP4
76514: AND
76515: IFFALSE 76653
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
76517: NOP4
76521: PPUSH
76522: NOP4
76526: PUSH
76527: NOP4
76531: ARRAY
76532: PUSH
76533: LD_INT 1
76535: ARRAY
76536: PUSH
76537: LD_INT 1
76539: ARRAY
76540: PPUSH
76541: NOP4
76545: PUSH
76546: NOP4
76550: ARRAY
76551: PUSH
76552: LD_INT 1
76554: ARRAY
76555: PUSH
76556: LD_INT 2
76558: ARRAY
76559: PPUSH
76560: NOP4
76564: PUSH
76565: NOP4
76569: ARRAY
76570: PUSH
76571: LD_INT 1
76573: ARRAY
76574: PUSH
76575: LD_INT 3
76577: ARRAY
76578: PPUSH
76579: NOP4
76583: PUSH
76584: NOP4
76588: ARRAY
76589: PUSH
76590: LD_INT 1
76592: ARRAY
76593: PUSH
76594: LD_INT 4
76596: ARRAY
76597: PPUSH
76598: NOP4
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
76602: NOP4
76606: PUSH
76607: NOP4
76611: PUSH
76612: NOP4
76616: ARRAY
76617: PPUSH
76618: LD_INT 1
76620: PPUSH
76621: NOP4
76625: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
76626: NOP4
76630: PUSH
76631: NOP4
76635: PPUSH
76636: NOP4
76640: PPUSH
76641: NOP4
76645: PPUSH
76646: NOP4
76650: ST_TO_ADDR
// break ;
76651: GO 76655
// end ; end ;
76653: GO 76284
76655: POP
76656: POP
// end ;
76657: GO 76216
76659: POP
76660: POP
// end ;
76661: LD_VAR 0 1
76665: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
76666: LD_INT 0
76668: PPUSH
76669: PPUSH
76670: PPUSH
// if not mc_bases then
76671: NOP4
76675: NOT
76676: IFFALSE 76680
// exit ;
76678: GO 76769
// for i = 1 to mc_bases do
76680: NOP4
76684: PUSH
76685: DOUBLE
76686: LD_INT 1
76688: DEC
76689: ST_TO_ADDR
76690: NOP4
76694: PUSH
76695: FOR_TO
76696: IFFALSE 76767
// begin if mc_attack [ i ] then
76698: NOP4
76702: PUSH
76703: NOP4
76707: ARRAY
76708: IFFALSE 76765
// begin tmp := mc_attack [ i ] [ 1 ] ;
76710: NOP4
76714: PUSH
76715: NOP4
76719: PUSH
76720: NOP4
76724: ARRAY
76725: PUSH
76726: LD_INT 1
76728: ARRAY
76729: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
76730: NOP4
76734: PUSH
76735: NOP4
76739: PPUSH
76740: NOP4
76744: PPUSH
76745: EMPTY
76746: PPUSH
76747: NOP4
76751: ST_TO_ADDR
// Attack ( tmp ) ;
76752: NOP4
76756: PPUSH
76757: NOP4
// exit ;
76761: POP
76762: POP
76763: GO 76769
// end ; end ;
76765: GO 76695
76767: POP
76768: POP
// end ;
76769: LD_VAR 0 1
76773: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
76774: LD_INT 0
76776: PPUSH
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
76781: PPUSH
76782: PPUSH
// if not mc_bases then
76783: NOP4
76787: NOT
76788: IFFALSE 76792
// exit ;
76790: GO 77396
// for i = 1 to mc_bases do
76792: NOP4
76796: PUSH
76797: DOUBLE
76798: LD_INT 1
76800: DEC
76801: ST_TO_ADDR
76802: NOP4
76806: PUSH
76807: FOR_TO
76808: IFFALSE 77394
// begin if not mc_bases [ i ] then
76810: NOP4
76814: PUSH
76815: NOP4
76819: ARRAY
76820: NOT
76821: IFFALSE 76825
// continue ;
76823: GO 76807
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
76825: NOP4
76829: PUSH
76830: NOP4
76834: PUSH
76835: NOP4
76839: ARRAY
76840: PUSH
76841: LD_INT 1
76843: ARRAY
76844: PPUSH
76845: NOP4
76849: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
76850: NOP4
76854: PUSH
76855: NOP4
76859: PPUSH
76860: NOP4
76864: PPUSH
76865: NOP4
76869: PUSH
76870: NOP4
76874: ARRAY
76875: PUSH
76876: LD_INT 1
76878: ARRAY
76879: PPUSH
76880: NOP4
76884: PPUSH
76885: NOP4
76889: PUSH
76890: NOP4
76894: ARRAY
76895: PPUSH
76896: NOP4
76900: PPUSH
76901: NOP4
76905: ST_TO_ADDR
// if not mc_scan [ i ] then
76906: NOP4
76910: PUSH
76911: NOP4
76915: ARRAY
76916: NOT
76917: IFFALSE 77072
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76919: NOP4
76923: PUSH
76924: NOP4
76928: PUSH
76929: NOP4
76933: ARRAY
76934: PPUSH
76935: LD_INT 2
76937: PUSH
76938: LD_INT 25
76940: PUSH
76941: LD_INT 5
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 25
76950: PUSH
76951: LD_INT 8
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 25
76960: PUSH
76961: LD_INT 9
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: PPUSH
76974: NOP4
76978: ST_TO_ADDR
// if not tmp then
76979: NOP4
76983: NOT
76984: IFFALSE 76988
// continue ;
76986: GO 76807
// for j in tmp do
76988: NOP4
76992: PUSH
76993: NOP4
76997: PUSH
76998: FOR_IN
76999: IFFALSE 77070
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
77001: NOP4
77005: PPUSH
77006: NOP4
77010: PPUSH
77011: NOP4
77015: PUSH
77016: LD_INT 5
77018: EQUAL
77019: PUSH
77020: NOP4
77024: PPUSH
77025: NOP4
77029: PUSH
77030: LD_INT 1
77032: EQUAL
77033: AND
77034: PUSH
77035: NOP4
77039: PPUSH
77040: NOP4
77044: NOT
77045: AND
77046: PUSH
77047: NOP4
77051: AND
77052: IFFALSE 77068
// ComChangeProfession ( j , class ) ;
77054: NOP4
77058: PPUSH
77059: NOP4
77063: PPUSH
77064: NOP4
77068: GO 76998
77070: POP
77071: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
77072: NOP4
77076: PUSH
77077: NOP4
77081: ARRAY
77082: PUSH
77083: NOP4
77087: PUSH
77088: NOP4
77092: ARRAY
77093: NOT
77094: AND
77095: PUSH
77096: NOP4
77100: PUSH
77101: NOP4
77105: ARRAY
77106: PPUSH
77107: LD_INT 30
77109: PUSH
77110: LD_INT 32
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: PPUSH
77117: NOP4
77121: NOT
77122: AND
77123: PUSH
77124: NOP4
77128: PUSH
77129: NOP4
77133: ARRAY
77134: PPUSH
77135: LD_INT 2
77137: PUSH
77138: LD_INT 30
77140: PUSH
77141: LD_INT 4
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PUSH
77148: LD_INT 30
77150: PUSH
77151: LD_INT 5
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: LIST
77162: PPUSH
77163: NOP4
77167: NOT
77168: AND
77169: IFFALSE 77301
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77171: NOP4
77175: PUSH
77176: NOP4
77180: PUSH
77181: NOP4
77185: ARRAY
77186: PPUSH
77187: LD_INT 2
77189: PUSH
77190: LD_INT 25
77192: PUSH
77193: LD_INT 1
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: PUSH
77200: LD_INT 25
77202: PUSH
77203: LD_INT 5
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 25
77212: PUSH
77213: LD_INT 8
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 25
77222: PUSH
77223: LD_INT 9
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: PPUSH
77237: NOP4
77241: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
77242: NOP4
77246: PUSH
77247: NOP4
77251: PUSH
77252: NOP4
77256: PPUSH
77257: LD_INT 18
77259: PPUSH
77260: NOP4
77264: DIFF
77265: ST_TO_ADDR
// if tmp then
77266: NOP4
77270: IFFALSE 77301
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
77272: NOP4
77276: PPUSH
77277: NOP4
77281: PPUSH
77282: NOP4
77286: PUSH
77287: NOP4
77291: ARRAY
77292: PPUSH
77293: NOP4
// exit ;
77297: POP
77298: POP
77299: GO 77396
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
77301: NOP4
77305: PUSH
77306: NOP4
77310: ARRAY
77311: PUSH
77312: NOP4
77316: PUSH
77317: NOP4
77321: ARRAY
77322: AND
77323: IFFALSE 77392
// begin tmp := mc_defender [ i ] ;
77325: NOP4
77329: PUSH
77330: NOP4
77334: PUSH
77335: NOP4
77339: ARRAY
77340: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
77341: NOP4
77345: PUSH
77346: NOP4
77350: PPUSH
77351: NOP4
77355: PPUSH
77356: EMPTY
77357: PPUSH
77358: NOP4
77362: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
77363: NOP4
77367: PPUSH
77368: NOP4
77372: PPUSH
77373: NOP4
77377: PUSH
77378: NOP4
77382: ARRAY
77383: PPUSH
77384: NOP4
// exit ;
77388: POP
77389: POP
77390: GO 77396
// end ; end ;
77392: GO 76807
77394: POP
77395: POP
// end ;
77396: LD_VAR 0 1
77400: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
77401: LD_INT 0
77403: PPUSH
77404: PPUSH
77405: PPUSH
77406: PPUSH
77407: PPUSH
77408: PPUSH
77409: PPUSH
77410: PPUSH
77411: PPUSH
77412: PPUSH
77413: PPUSH
// if not mc_bases then
77414: NOP4
77418: NOT
77419: IFFALSE 77423
// exit ;
77421: GO 78510
// for i = 1 to mc_bases do
77423: NOP4
77427: PUSH
77428: DOUBLE
77429: LD_INT 1
77431: DEC
77432: ST_TO_ADDR
77433: NOP4
77437: PUSH
77438: FOR_TO
77439: IFFALSE 78508
// begin tmp := mc_lab [ i ] ;
77441: NOP4
77445: PUSH
77446: NOP4
77450: PUSH
77451: NOP4
77455: ARRAY
77456: ST_TO_ADDR
// if not tmp then
77457: NOP4
77461: NOT
77462: IFFALSE 77466
// continue ;
77464: GO 77438
// idle_lab := 0 ;
77466: NOP4
77470: PUSH
77471: LD_INT 0
77473: ST_TO_ADDR
// for j in tmp do
77474: NOP4
77478: PUSH
77479: NOP4
77483: PUSH
77484: FOR_IN
77485: IFFALSE 78504
// begin researching := false ;
77487: NOP4
77491: PUSH
77492: LD_INT 0
77494: ST_TO_ADDR
// side := GetSide ( j ) ;
77495: NOP4
77499: PUSH
77500: NOP4
77504: PPUSH
77505: NOP4
77509: ST_TO_ADDR
// if not mc_tech [ side ] then
77510: NOP4
77514: PUSH
77515: NOP4
77519: ARRAY
77520: NOT
77521: IFFALSE 77525
// continue ;
77523: GO 77484
// if BuildingStatus ( j ) = bs_idle then
77525: NOP4
77529: PPUSH
77530: NOP4
77534: PUSH
77535: LD_INT 2
77537: EQUAL
77538: IFFALSE 77726
// begin if idle_lab and UnitsInside ( j ) < 6 then
77540: NOP4
77544: PUSH
77545: NOP4
77549: PPUSH
77550: NOP4
77554: PUSH
77555: LD_INT 6
77557: LESS
77558: AND
77559: IFFALSE 77630
// begin tmp2 := UnitsInside ( idle_lab ) ;
77561: NOP4
77565: PUSH
77566: NOP4
77570: PPUSH
77571: NOP4
77575: ST_TO_ADDR
// if tmp2 then
77576: NOP4
77580: IFFALSE 77622
// for x in tmp2 do
77582: NOP4
77586: PUSH
77587: NOP4
77591: PUSH
77592: FOR_IN
77593: IFFALSE 77620
// begin ComExitBuilding ( x ) ;
77595: NOP4
77599: PPUSH
77600: NOP4
// AddComEnterUnit ( x , j ) ;
77604: NOP4
77608: PPUSH
77609: NOP4
77613: PPUSH
77614: NOP4
// end ;
77618: GO 77592
77620: POP
77621: POP
// idle_lab := 0 ;
77622: NOP4
77626: PUSH
77627: LD_INT 0
77629: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
77630: NOP4
77634: PUSH
77635: NOP4
77639: PUSH
77640: NOP4
77644: ARRAY
77645: PUSH
77646: FOR_IN
77647: IFFALSE 77707
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
77649: NOP4
77653: PPUSH
77654: NOP4
77658: PPUSH
77659: NOP4
77663: PUSH
77664: NOP4
77668: PPUSH
77669: NOP4
77673: PPUSH
77674: NOP4
77678: AND
77679: IFFALSE 77705
// begin researching := true ;
77681: NOP4
77685: PUSH
77686: LD_INT 1
77688: ST_TO_ADDR
// ComResearch ( j , t ) ;
77689: NOP4
77693: PPUSH
77694: NOP4
77698: PPUSH
77699: NOP4
// break ;
77703: GO 77707
// end ;
77705: GO 77646
77707: POP
77708: POP
// if not researching then
77709: NOP4
77713: NOT
77714: IFFALSE 77726
// idle_lab := j ;
77716: NOP4
77720: PUSH
77721: NOP4
77725: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
77726: NOP4
77730: PPUSH
77731: NOP4
77735: PUSH
77736: LD_INT 10
77738: EQUAL
77739: IFFALSE 78327
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
77741: NOP4
77745: PUSH
77746: NOP4
77750: ARRAY
77751: NOT
77752: PUSH
77753: NOP4
77757: PUSH
77758: NOP4
77762: ARRAY
77763: NOT
77764: AND
77765: PUSH
77766: NOP4
77770: PUSH
77771: NOP4
77775: ARRAY
77776: PUSH
77777: LD_INT 1
77779: GREATER
77780: AND
77781: IFFALSE 77912
// begin ComCancel ( j ) ;
77783: NOP4
77787: PPUSH
77788: NOP4
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
77792: NOP4
77796: PUSH
77797: NOP4
77801: PPUSH
77802: NOP4
77806: PPUSH
77807: NOP4
77811: PUSH
77812: NOP4
77816: ARRAY
77817: PPUSH
77818: NOP4
77822: PUSH
77823: NOP4
77827: ARRAY
77828: PUSH
77829: LD_INT 1
77831: MINUS
77832: PPUSH
77833: NOP4
77837: PUSH
77838: NOP4
77842: ARRAY
77843: PPUSH
77844: LD_INT 0
77846: PPUSH
77847: NOP4
77851: PPUSH
77852: NOP4
77856: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
77857: NOP4
77861: PUSH
77862: NOP4
77866: PPUSH
77867: NOP4
77871: PPUSH
77872: NOP4
77876: PUSH
77877: NOP4
77881: ARRAY
77882: PPUSH
77883: NOP4
77887: PUSH
77888: NOP4
77892: ARRAY
77893: PPUSH
77894: LD_INT 1
77896: PPUSH
77897: LD_INT 0
77899: PPUSH
77900: NOP4
77904: PPUSH
77905: NOP4
77909: ST_TO_ADDR
// continue ;
77910: GO 77484
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
77912: NOP4
77916: PUSH
77917: NOP4
77921: ARRAY
77922: PUSH
77923: NOP4
77927: PUSH
77928: NOP4
77932: ARRAY
77933: NOT
77934: AND
77935: IFFALSE 78062
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
77937: NOP4
77941: PUSH
77942: NOP4
77946: PPUSH
77947: NOP4
77951: PUSH
77952: NOP4
77956: PUSH
77957: NOP4
77961: ARRAY
77962: PUSH
77963: LD_INT 1
77965: PLUS
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: PPUSH
77971: NOP4
77975: PUSH
77976: NOP4
77980: ARRAY
77981: PUSH
77982: LD_INT 1
77984: ARRAY
77985: PPUSH
77986: NOP4
77990: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
77991: NOP4
77995: PUSH
77996: NOP4
78000: ARRAY
78001: PUSH
78002: LD_INT 1
78004: ARRAY
78005: PPUSH
78006: LD_INT 112
78008: PPUSH
78009: NOP4
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
78013: NOP4
78017: PUSH
78018: NOP4
78022: PUSH
78023: NOP4
78027: ARRAY
78028: PPUSH
78029: LD_INT 1
78031: PPUSH
78032: NOP4
78036: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
78037: NOP4
78041: PUSH
78042: NOP4
78046: PPUSH
78047: NOP4
78051: PPUSH
78052: NOP4
78056: PPUSH
78057: NOP4
78061: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
78062: NOP4
78066: PUSH
78067: NOP4
78071: ARRAY
78072: PUSH
78073: NOP4
78077: PUSH
78078: NOP4
78082: ARRAY
78083: AND
78084: PUSH
78085: NOP4
78089: PUSH
78090: NOP4
78094: ARRAY
78095: PUSH
78096: LD_INT 1
78098: ARRAY
78099: PPUSH
78100: NOP4
78104: NOT
78105: AND
78106: PUSH
78107: NOP4
78111: PPUSH
78112: NOP4
78116: PUSH
78117: LD_INT 6
78119: EQUAL
78120: AND
78121: IFFALSE 78177
// begin tmp2 := UnitsInside ( j ) ;
78123: NOP4
78127: PUSH
78128: NOP4
78132: PPUSH
78133: NOP4
78137: ST_TO_ADDR
// if tmp2 = 6 then
78138: NOP4
78142: PUSH
78143: LD_INT 6
78145: EQUAL
78146: IFFALSE 78177
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
78148: NOP4
78152: PUSH
78153: LD_INT 1
78155: ARRAY
78156: PPUSH
78157: LD_INT 112
78159: PPUSH
78160: NOP4
// ComExitBuilding ( tmp2 [ 1 ] ) ;
78164: NOP4
78168: PUSH
78169: LD_INT 1
78171: ARRAY
78172: PPUSH
78173: NOP4
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
78177: NOP4
78181: PUSH
78182: NOP4
78186: ARRAY
78187: PUSH
78188: NOP4
78192: PUSH
78193: NOP4
78197: ARRAY
78198: PUSH
78199: LD_INT 1
78201: ARRAY
78202: PPUSH
78203: NOP4
78207: NOT
78208: AND
78209: PUSH
78210: NOP4
78214: PUSH
78215: NOP4
78219: ARRAY
78220: PUSH
78221: LD_INT 1
78223: ARRAY
78224: PPUSH
78225: NOP4
78229: NOT
78230: AND
78231: IFFALSE 78257
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
78233: NOP4
78237: PUSH
78238: NOP4
78242: ARRAY
78243: PUSH
78244: LD_INT 1
78246: ARRAY
78247: PPUSH
78248: NOP4
78252: PPUSH
78253: NOP4
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
78257: NOP4
78261: PUSH
78262: NOP4
78266: ARRAY
78267: PUSH
78268: LD_INT 1
78270: ARRAY
78271: PPUSH
78272: NOP4
78276: PUSH
78277: NOP4
78281: PUSH
78282: NOP4
78286: ARRAY
78287: PUSH
78288: LD_INT 1
78290: ARRAY
78291: PPUSH
78292: NOP4
78296: PPUSH
78297: NOP4
78301: PUSH
78302: LD_INT 3
78304: NONEQUAL
78305: AND
78306: IFFALSE 78327
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
78308: NOP4
78312: PUSH
78313: NOP4
78317: ARRAY
78318: PUSH
78319: LD_INT 1
78321: ARRAY
78322: PPUSH
78323: NOP4
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
78327: NOP4
78331: PPUSH
78332: NOP4
78336: PUSH
78337: LD_INT 6
78339: EQUAL
78340: PUSH
78341: NOP4
78345: PUSH
78346: LD_INT 1
78348: GREATER
78349: AND
78350: IFFALSE 78502
// begin sci := [ ] ;
78352: NOP4
78356: PUSH
78357: EMPTY
78358: ST_TO_ADDR
// for x in ( tmp diff j ) do
78359: NOP4
78363: PUSH
78364: NOP4
78368: PUSH
78369: NOP4
78373: DIFF
78374: PUSH
78375: FOR_IN
78376: IFFALSE 78428
// begin if sci = 6 then
78378: NOP4
78382: PUSH
78383: LD_INT 6
78385: EQUAL
78386: IFFALSE 78390
// break ;
78388: GO 78428
// if BuildingStatus ( x ) = bs_idle then
78390: NOP4
78394: PPUSH
78395: NOP4
78399: PUSH
78400: LD_INT 2
78402: EQUAL
78403: IFFALSE 78426
// sci := sci ^ UnitsInside ( x ) ;
78405: NOP4
78409: PUSH
78410: NOP4
78414: PUSH
78415: NOP4
78419: PPUSH
78420: NOP4
78424: ADD
78425: ST_TO_ADDR
// end ;
78426: GO 78375
78428: POP
78429: POP
// if not sci then
78430: NOP4
78434: NOT
78435: IFFALSE 78439
// continue ;
78437: GO 77484
// for x in sci do
78439: NOP4
78443: PUSH
78444: NOP4
78448: PUSH
78449: FOR_IN
78450: IFFALSE 78500
// if IsInUnit ( x ) and not HasTask ( x ) then
78452: NOP4
78456: PPUSH
78457: NOP4
78461: PUSH
78462: NOP4
78466: PPUSH
78467: NOP4
78471: NOT
78472: AND
78473: IFFALSE 78498
// begin ComExitBuilding ( x ) ;
78475: NOP4
78479: PPUSH
78480: NOP4
// AddComEnterUnit ( x , j ) ;
78484: NOP4
78488: PPUSH
78489: NOP4
78493: PPUSH
78494: NOP4
// end ;
78498: GO 78449
78500: POP
78501: POP
// end ; end ;
78502: GO 77484
78504: POP
78505: POP
// end ;
78506: GO 77438
78508: POP
78509: POP
// end ;
78510: LD_VAR 0 1
78514: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
78515: LD_INT 0
78517: PPUSH
78518: PPUSH
// if not mc_bases then
78519: NOP4
78523: NOT
78524: IFFALSE 78528
// exit ;
78526: GO 78609
// for i = 1 to mc_bases do
78528: NOP4
78532: PUSH
78533: DOUBLE
78534: LD_INT 1
78536: DEC
78537: ST_TO_ADDR
78538: NOP4
78542: PUSH
78543: FOR_TO
78544: IFFALSE 78607
// if mc_mines [ i ] and mc_miners [ i ] then
78546: NOP4
78550: PUSH
78551: NOP4
78555: ARRAY
78556: PUSH
78557: NOP4
78561: PUSH
78562: NOP4
78566: ARRAY
78567: AND
78568: IFFALSE 78605
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
78570: NOP4
78574: PUSH
78575: NOP4
78579: ARRAY
78580: PUSH
78581: LD_INT 1
78583: ARRAY
78584: PPUSH
78585: NOP4
78589: PPUSH
78590: NOP4
78594: PUSH
78595: NOP4
78599: ARRAY
78600: PPUSH
78601: NOP4
78605: GO 78543
78607: POP
78608: POP
// end ;
78609: LD_VAR 0 1
78613: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
78614: LD_INT 0
78616: PPUSH
78617: PPUSH
78618: PPUSH
78619: PPUSH
78620: PPUSH
78621: PPUSH
78622: PPUSH
78623: PPUSH
// if not mc_bases or not mc_parking then
78624: NOP4
78628: NOT
78629: PUSH
78630: NOP4
78634: NOT
78635: OR
78636: IFFALSE 78640
// exit ;
78638: GO 79352
// for i = 1 to mc_bases do
78640: NOP4
78644: PUSH
78645: DOUBLE
78646: LD_INT 1
78648: DEC
78649: ST_TO_ADDR
78650: NOP4
78654: PUSH
78655: FOR_TO
78656: IFFALSE 79350
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
78658: NOP4
78662: PUSH
78663: NOP4
78667: ARRAY
78668: NOT
78669: PUSH
78670: NOP4
78674: PUSH
78675: NOP4
78679: ARRAY
78680: NOT
78681: OR
78682: IFFALSE 78686
// continue ;
78684: GO 78655
// if mc_scan [ i ] then
78686: NOP4
78690: PUSH
78691: NOP4
78695: ARRAY
78696: IFFALSE 78722
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
78698: NOP4
78702: PUSH
78703: NOP4
78707: PPUSH
78708: NOP4
78712: PPUSH
78713: EMPTY
78714: PPUSH
78715: NOP4
78719: ST_TO_ADDR
// continue ;
78720: GO 78655
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
78722: NOP4
78726: PUSH
78727: NOP4
78731: PUSH
78732: NOP4
78736: ARRAY
78737: PUSH
78738: LD_INT 1
78740: ARRAY
78741: PPUSH
78742: NOP4
78746: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
78747: NOP4
78751: PUSH
78752: NOP4
78756: PUSH
78757: NOP4
78761: ARRAY
78762: PPUSH
78763: LD_INT 30
78765: PUSH
78766: LD_INT 3
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PPUSH
78773: NOP4
78777: ST_TO_ADDR
// if not fac then
78778: NOP4
78782: NOT
78783: IFFALSE 78834
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78785: NOP4
78789: PUSH
78790: NOP4
78794: PUSH
78795: NOP4
78799: ARRAY
78800: PPUSH
78801: LD_INT 2
78803: PUSH
78804: LD_INT 30
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PUSH
78814: LD_INT 30
78816: PUSH
78817: LD_INT 1
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: LIST
78828: PPUSH
78829: NOP4
78833: ST_TO_ADDR
// if not fac then
78834: NOP4
78838: NOT
78839: IFFALSE 78843
// continue ;
78841: GO 78655
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
78843: NOP4
78847: PUSH
78848: NOP4
78852: PUSH
78853: NOP4
78857: ARRAY
78858: PPUSH
78859: LD_INT 22
78861: PUSH
78862: NOP4
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PUSH
78871: LD_INT 21
78873: PUSH
78874: LD_INT 2
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 3
78883: PUSH
78884: LD_INT 24
78886: PUSH
78887: LD_INT 1000
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: LIST
78902: PPUSH
78903: NOP4
78907: PUSH
78908: LD_INT 22
78910: PUSH
78911: NOP4
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: LD_INT 91
78922: PUSH
78923: NOP4
78927: PUSH
78928: LD_INT 1
78930: ARRAY
78931: PUSH
78932: LD_INT 25
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: LIST
78939: PUSH
78940: LD_INT 21
78942: PUSH
78943: LD_INT 2
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 3
78952: PUSH
78953: LD_INT 24
78955: PUSH
78956: LD_INT 1000
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: PPUSH
78973: NOP4
78977: UNION
78978: ST_TO_ADDR
// if not vehs then
78979: NOP4
78983: NOT
78984: IFFALSE 79010
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
78986: NOP4
78990: PUSH
78991: NOP4
78995: PPUSH
78996: NOP4
79000: PPUSH
79001: EMPTY
79002: PPUSH
79003: NOP4
79007: ST_TO_ADDR
// continue ;
79008: GO 78655
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79010: NOP4
79014: PUSH
79015: NOP4
79019: PUSH
79020: NOP4
79024: ARRAY
79025: PPUSH
79026: LD_INT 30
79028: PUSH
79029: LD_INT 3
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PPUSH
79036: NOP4
79040: ST_TO_ADDR
// if tmp then
79041: NOP4
79045: IFFALSE 79148
// begin for j in tmp do
79047: NOP4
79051: PUSH
79052: NOP4
79056: PUSH
79057: FOR_IN
79058: IFFALSE 79146
// for k in UnitsInside ( j ) do
79060: NOP4
79064: PUSH
79065: NOP4
79069: PPUSH
79070: NOP4
79074: PUSH
79075: FOR_IN
79076: IFFALSE 79142
// if k then
79078: NOP4
79082: IFFALSE 79140
// if not k in mc_repair_vehicle [ i ] then
79084: NOP4
79088: PUSH
79089: NOP4
79093: PUSH
79094: NOP4
79098: ARRAY
79099: IN
79100: NOT
79101: IFFALSE 79140
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
79103: NOP4
79107: PUSH
79108: NOP4
79112: PPUSH
79113: NOP4
79117: PPUSH
79118: NOP4
79122: PUSH
79123: NOP4
79127: ARRAY
79128: PUSH
79129: NOP4
79133: UNION
79134: PPUSH
79135: NOP4
79139: ST_TO_ADDR
79140: GO 79075
79142: POP
79143: POP
79144: GO 79057
79146: POP
79147: POP
// end ; if not mc_repair_vehicle [ i ] then
79148: NOP4
79152: PUSH
79153: NOP4
79157: ARRAY
79158: NOT
79159: IFFALSE 79163
// continue ;
79161: GO 78655
// for j in mc_repair_vehicle [ i ] do
79163: NOP4
79167: PUSH
79168: NOP4
79172: PUSH
79173: NOP4
79177: ARRAY
79178: PUSH
79179: FOR_IN
79180: IFFALSE 79346
// begin if GetClass ( j ) <> 3 then
79182: NOP4
79186: PPUSH
79187: NOP4
79191: PUSH
79192: LD_INT 3
79194: NONEQUAL
79195: IFFALSE 79236
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
79197: NOP4
79201: PUSH
79202: NOP4
79206: PPUSH
79207: NOP4
79211: PPUSH
79212: NOP4
79216: PUSH
79217: NOP4
79221: ARRAY
79222: PUSH
79223: NOP4
79227: DIFF
79228: PPUSH
79229: NOP4
79233: ST_TO_ADDR
// continue ;
79234: GO 79179
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79236: NOP4
79240: PPUSH
79241: NOP4
79245: NOT
79246: PUSH
79247: NOP4
79251: PUSH
79252: NOP4
79256: PUSH
79257: NOP4
79261: ARRAY
79262: PUSH
79263: LD_INT 1
79265: ARRAY
79266: IN
79267: NOT
79268: AND
79269: PUSH
79270: NOP4
79274: PUSH
79275: NOP4
79279: PUSH
79280: NOP4
79284: ARRAY
79285: PUSH
79286: LD_INT 2
79288: ARRAY
79289: IN
79290: NOT
79291: AND
79292: IFFALSE 79344
// begin if IsInUnit ( j ) then
79294: NOP4
79298: PPUSH
79299: NOP4
79303: IFFALSE 79314
// ComExitBuilding ( j ) ;
79305: NOP4
79309: PPUSH
79310: NOP4
// if not HasTask ( j ) then
79314: NOP4
79318: PPUSH
79319: NOP4
79323: NOT
79324: IFFALSE 79344
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
79326: NOP4
79330: PPUSH
79331: NOP4
79335: PUSH
79336: LD_INT 1
79338: ARRAY
79339: PPUSH
79340: NOP4
// end ; end ;
79344: GO 79179
79346: POP
79347: POP
// end ;
79348: GO 78655
79350: POP
79351: POP
// end ;
79352: LD_VAR 0 1
79356: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
79357: LD_INT 0
79359: PPUSH
79360: PPUSH
79361: PPUSH
79362: PPUSH
79363: PPUSH
79364: PPUSH
79365: PPUSH
79366: PPUSH
79367: PPUSH
79368: PPUSH
79369: PPUSH
// if not mc_bases then
79370: NOP4
79374: NOT
79375: IFFALSE 79379
// exit ;
79377: GO 80181
// for i = 1 to mc_bases do
79379: NOP4
79383: PUSH
79384: DOUBLE
79385: LD_INT 1
79387: DEC
79388: ST_TO_ADDR
79389: NOP4
79393: PUSH
79394: FOR_TO
79395: IFFALSE 80179
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
79397: NOP4
79401: PUSH
79402: NOP4
79406: ARRAY
79407: NOT
79408: PUSH
79409: NOP4
79413: PUSH
79414: NOP4
79418: ARRAY
79419: PUSH
79420: LD_INT 1
79422: ARRAY
79423: OR
79424: PUSH
79425: NOP4
79429: PUSH
79430: NOP4
79434: ARRAY
79435: PUSH
79436: LD_INT 2
79438: ARRAY
79439: OR
79440: PUSH
79441: NOP4
79445: PUSH
79446: NOP4
79450: ARRAY
79451: PPUSH
79452: LD_INT 1
79454: PPUSH
79455: NOP4
79459: NOT
79460: OR
79461: PUSH
79462: NOP4
79466: PUSH
79467: NOP4
79471: ARRAY
79472: OR
79473: IFFALSE 79477
// continue ;
79475: GO 79394
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
79477: NOP4
79481: PUSH
79482: NOP4
79486: PUSH
79487: NOP4
79491: ARRAY
79492: PPUSH
79493: LD_INT 25
79495: PUSH
79496: LD_INT 4
79498: PUSH
79499: EMPTY
79500: LIST
79501: LIST
79502: PUSH
79503: LD_INT 50
79505: PUSH
79506: EMPTY
79507: LIST
79508: PUSH
79509: LD_INT 3
79511: PUSH
79512: LD_INT 60
79514: PUSH
79515: EMPTY
79516: LIST
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: LIST
79526: PPUSH
79527: NOP4
79531: PUSH
79532: NOP4
79536: PUSH
79537: NOP4
79541: ARRAY
79542: DIFF
79543: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79544: NOP4
79548: PUSH
79549: NOP4
79553: PUSH
79554: NOP4
79558: ARRAY
79559: PPUSH
79560: LD_INT 2
79562: PUSH
79563: LD_INT 30
79565: PUSH
79566: LD_INT 0
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PUSH
79573: LD_INT 30
79575: PUSH
79576: LD_INT 1
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: PPUSH
79588: NOP4
79592: ST_TO_ADDR
// if not tmp or not dep then
79593: NOP4
79597: NOT
79598: PUSH
79599: NOP4
79603: NOT
79604: OR
79605: IFFALSE 79609
// continue ;
79607: GO 79394
// side := GetSide ( tmp [ 1 ] ) ;
79609: NOP4
79613: PUSH
79614: NOP4
79618: PUSH
79619: LD_INT 1
79621: ARRAY
79622: PPUSH
79623: NOP4
79627: ST_TO_ADDR
// dep := dep [ 1 ] ;
79628: NOP4
79632: PUSH
79633: NOP4
79637: PUSH
79638: LD_INT 1
79640: ARRAY
79641: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
79642: NOP4
79646: PUSH
79647: NOP4
79651: PUSH
79652: NOP4
79656: ARRAY
79657: PPUSH
79658: LD_INT 22
79660: PUSH
79661: LD_INT 0
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: LD_INT 25
79670: PUSH
79671: LD_INT 12
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: PPUSH
79682: NOP4
79686: PUSH
79687: LD_INT 22
79689: PUSH
79690: LD_INT 0
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: LD_INT 25
79699: PUSH
79700: LD_INT 12
79702: PUSH
79703: EMPTY
79704: LIST
79705: LIST
79706: PUSH
79707: LD_INT 91
79709: PUSH
79710: NOP4
79714: PUSH
79715: LD_INT 20
79717: PUSH
79718: EMPTY
79719: LIST
79720: LIST
79721: LIST
79722: PUSH
79723: EMPTY
79724: LIST
79725: LIST
79726: LIST
79727: PPUSH
79728: NOP4
79732: UNION
79733: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
79734: NOP4
79738: PUSH
79739: NOP4
79743: PUSH
79744: NOP4
79748: ARRAY
79749: PPUSH
79750: LD_INT 81
79752: PUSH
79753: NOP4
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PPUSH
79762: NOP4
79766: ST_TO_ADDR
// if not apes or danger_at_area then
79767: NOP4
79771: NOT
79772: PUSH
79773: NOP4
79777: OR
79778: IFFALSE 79828
// begin if mc_taming [ i ] then
79780: NOP4
79784: PUSH
79785: NOP4
79789: ARRAY
79790: IFFALSE 79826
// begin MC_Reset ( i , 121 ) ;
79792: NOP4
79796: PPUSH
79797: LD_INT 121
79799: PPUSH
79800: NOP4
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
79804: NOP4
79808: PUSH
79809: NOP4
79813: PPUSH
79814: NOP4
79818: PPUSH
79819: EMPTY
79820: PPUSH
79821: NOP4
79825: ST_TO_ADDR
// end ; continue ;
79826: GO 79394
// end ; for j in tmp do
79828: NOP4
79832: PUSH
79833: NOP4
79837: PUSH
79838: FOR_IN
79839: IFFALSE 80175
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
79841: NOP4
79845: PUSH
79846: NOP4
79850: PUSH
79851: NOP4
79855: ARRAY
79856: IN
79857: NOT
79858: PUSH
79859: NOP4
79863: PUSH
79864: NOP4
79868: ARRAY
79869: PUSH
79870: LD_INT 3
79872: LESS
79873: AND
79874: IFFALSE 79932
// begin SetTag ( j , 121 ) ;
79876: NOP4
79880: PPUSH
79881: LD_INT 121
79883: PPUSH
79884: NOP4
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
79888: NOP4
79892: PUSH
79893: NOP4
79897: PPUSH
79898: NOP4
79902: PUSH
79903: NOP4
79907: PUSH
79908: NOP4
79912: ARRAY
79913: PUSH
79914: LD_INT 1
79916: PLUS
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: PPUSH
79922: NOP4
79926: PPUSH
79927: NOP4
79931: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
79932: NOP4
79936: PUSH
79937: NOP4
79941: PUSH
79942: NOP4
79946: ARRAY
79947: IN
79948: IFFALSE 80173
// begin if GetClass ( j ) <> 4 then
79950: NOP4
79954: PPUSH
79955: NOP4
79959: PUSH
79960: LD_INT 4
79962: NONEQUAL
79963: IFFALSE 80016
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
79965: NOP4
79969: PUSH
79970: NOP4
79974: PPUSH
79975: NOP4
79979: PPUSH
79980: NOP4
79984: PUSH
79985: NOP4
79989: ARRAY
79990: PUSH
79991: NOP4
79995: DIFF
79996: PPUSH
79997: NOP4
80001: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80002: NOP4
80006: PPUSH
80007: LD_INT 0
80009: PPUSH
80010: NOP4
// continue ;
80014: GO 79838
// end ; if IsInUnit ( j ) then
80016: NOP4
80020: PPUSH
80021: NOP4
80025: IFFALSE 80036
// ComExitBuilding ( j ) ;
80027: NOP4
80031: PPUSH
80032: NOP4
// ape := NearestUnitToUnit ( apes , j ) ;
80036: NOP4
80040: PUSH
80041: NOP4
80045: PPUSH
80046: NOP4
80050: PPUSH
80051: NOP4
80055: ST_TO_ADDR
// if not ape then
80056: NOP4
80060: NOT
80061: IFFALSE 80065
// break ;
80063: GO 80175
// x := GetX ( ape ) ;
80065: NOP4
80069: PUSH
80070: NOP4
80074: PPUSH
80075: NOP4
80079: ST_TO_ADDR
// y := GetY ( ape ) ;
80080: NOP4
80084: PUSH
80085: NOP4
80089: PPUSH
80090: NOP4
80094: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
80095: NOP4
80099: PPUSH
80100: NOP4
80104: PPUSH
80105: NOP4
80109: NOT
80110: PUSH
80111: NOP4
80115: PPUSH
80116: NOP4
80120: PPUSH
80121: NOP4
80125: PPUSH
80126: LD_INT 20
80128: PPUSH
80129: NOP4
80133: PUSH
80134: LD_INT 4
80136: ARRAY
80137: OR
80138: IFFALSE 80142
// break ;
80140: GO 80175
// if not HasTask ( j ) then
80142: NOP4
80146: PPUSH
80147: NOP4
80151: NOT
80152: IFFALSE 80173
// ComTameXY ( j , x , y ) ;
80154: NOP4
80158: PPUSH
80159: NOP4
80163: PPUSH
80164: NOP4
80168: PPUSH
80169: NOP4
// end ; end ;
80173: GO 79838
80175: POP
80176: POP
// end ;
80177: GO 79394
80179: POP
80180: POP
// end ;
80181: LD_VAR 0 1
80185: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
80186: LD_INT 0
80188: PPUSH
80189: PPUSH
80190: PPUSH
80191: PPUSH
80192: PPUSH
80193: PPUSH
80194: PPUSH
80195: PPUSH
// if not mc_bases then
80196: NOP4
80200: NOT
80201: IFFALSE 80205
// exit ;
80203: GO 80831
// for i = 1 to mc_bases do
80205: NOP4
80209: PUSH
80210: DOUBLE
80211: LD_INT 1
80213: DEC
80214: ST_TO_ADDR
80215: NOP4
80219: PUSH
80220: FOR_TO
80221: IFFALSE 80829
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
80223: NOP4
80227: PUSH
80228: NOP4
80232: ARRAY
80233: NOT
80234: PUSH
80235: NOP4
80239: PUSH
80240: NOP4
80244: ARRAY
80245: PPUSH
80246: LD_INT 25
80248: PUSH
80249: LD_INT 12
80251: PUSH
80252: EMPTY
80253: LIST
80254: LIST
80255: PPUSH
80256: NOP4
80260: NOT
80261: OR
80262: IFFALSE 80266
// continue ;
80264: GO 80220
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
80266: NOP4
80270: PUSH
80271: NOP4
80275: PUSH
80276: NOP4
80280: ARRAY
80281: PUSH
80282: LD_INT 1
80284: ARRAY
80285: PPUSH
80286: NOP4
80290: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
80291: NOP4
80295: PPUSH
80296: LD_INT 2
80298: PPUSH
80299: NOP4
80303: IFFALSE 80556
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80305: NOP4
80309: PUSH
80310: NOP4
80314: PUSH
80315: NOP4
80319: ARRAY
80320: PPUSH
80321: LD_INT 25
80323: PUSH
80324: LD_INT 16
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PPUSH
80331: NOP4
80335: ST_TO_ADDR
// if tmp < 6 then
80336: NOP4
80340: PUSH
80341: LD_INT 6
80343: LESS
80344: IFFALSE 80556
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80346: NOP4
80350: PUSH
80351: NOP4
80355: PUSH
80356: NOP4
80360: ARRAY
80361: PPUSH
80362: LD_INT 2
80364: PUSH
80365: LD_INT 30
80367: PUSH
80368: LD_INT 0
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 30
80377: PUSH
80378: LD_INT 1
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: LIST
80389: PPUSH
80390: NOP4
80394: ST_TO_ADDR
// if depot then
80395: NOP4
80399: IFFALSE 80556
// begin selected := 0 ;
80401: NOP4
80405: PUSH
80406: LD_INT 0
80408: ST_TO_ADDR
// for j in depot do
80409: NOP4
80413: PUSH
80414: NOP4
80418: PUSH
80419: FOR_IN
80420: IFFALSE 80451
// begin if UnitsInside ( j ) < 6 then
80422: NOP4
80426: PPUSH
80427: NOP4
80431: PUSH
80432: LD_INT 6
80434: LESS
80435: IFFALSE 80449
// begin selected := j ;
80437: NOP4
80441: PUSH
80442: NOP4
80446: ST_TO_ADDR
// break ;
80447: GO 80451
// end ; end ;
80449: GO 80419
80451: POP
80452: POP
// if selected then
80453: NOP4
80457: IFFALSE 80556
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80459: NOP4
80463: PUSH
80464: NOP4
80468: PUSH
80469: NOP4
80473: ARRAY
80474: PPUSH
80475: LD_INT 25
80477: PUSH
80478: LD_INT 12
80480: PUSH
80481: EMPTY
80482: LIST
80483: LIST
80484: PPUSH
80485: NOP4
80489: PUSH
80490: FOR_IN
80491: IFFALSE 80554
// if not HasTask ( j ) then
80493: NOP4
80497: PPUSH
80498: NOP4
80502: NOT
80503: IFFALSE 80552
// begin if not IsInUnit ( j ) then
80505: NOP4
80509: PPUSH
80510: NOP4
80514: NOT
80515: IFFALSE 80531
// ComEnterUnit ( j , selected ) ;
80517: NOP4
80521: PPUSH
80522: NOP4
80526: PPUSH
80527: NOP4
// AddComChangeProfession ( j , 16 ) ;
80531: NOP4
80535: PPUSH
80536: LD_INT 16
80538: PPUSH
80539: NOP4
// AddComExitBuilding ( j ) ;
80543: NOP4
80547: PPUSH
80548: NOP4
// end ;
80552: GO 80490
80554: POP
80555: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
80556: NOP4
80560: PPUSH
80561: LD_INT 11
80563: PPUSH
80564: NOP4
80568: IFFALSE 80827
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
80570: NOP4
80574: PUSH
80575: NOP4
80579: PUSH
80580: NOP4
80584: ARRAY
80585: PPUSH
80586: LD_INT 25
80588: PUSH
80589: LD_INT 16
80591: PUSH
80592: EMPTY
80593: LIST
80594: LIST
80595: PPUSH
80596: NOP4
80600: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
80601: NOP4
80605: PUSH
80606: LD_INT 6
80608: GREATEREQUAL
80609: PUSH
80610: NOP4
80614: PPUSH
80615: LD_INT 2
80617: PPUSH
80618: NOP4
80622: NOT
80623: OR
80624: IFFALSE 80827
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
80626: NOP4
80630: PUSH
80631: NOP4
80635: PUSH
80636: NOP4
80640: ARRAY
80641: PPUSH
80642: LD_INT 2
80644: PUSH
80645: LD_INT 30
80647: PUSH
80648: LD_INT 4
80650: PUSH
80651: EMPTY
80652: LIST
80653: LIST
80654: PUSH
80655: LD_INT 30
80657: PUSH
80658: LD_INT 5
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: LIST
80669: PPUSH
80670: NOP4
80674: ST_TO_ADDR
// if barracks then
80675: NOP4
80679: IFFALSE 80827
// begin selected := 0 ;
80681: NOP4
80685: PUSH
80686: LD_INT 0
80688: ST_TO_ADDR
// for j in barracks do
80689: NOP4
80693: PUSH
80694: NOP4
80698: PUSH
80699: FOR_IN
80700: IFFALSE 80731
// begin if UnitsInside ( j ) < 6 then
80702: NOP4
80706: PPUSH
80707: NOP4
80711: PUSH
80712: LD_INT 6
80714: LESS
80715: IFFALSE 80729
// begin selected := j ;
80717: NOP4
80721: PUSH
80722: NOP4
80726: ST_TO_ADDR
// break ;
80727: GO 80731
// end ; end ;
80729: GO 80699
80731: POP
80732: POP
// if selected then
80733: NOP4
80737: IFFALSE 80827
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80739: NOP4
80743: PUSH
80744: NOP4
80748: PUSH
80749: NOP4
80753: ARRAY
80754: PPUSH
80755: LD_INT 25
80757: PUSH
80758: LD_INT 12
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PPUSH
80765: NOP4
80769: PUSH
80770: FOR_IN
80771: IFFALSE 80825
// if not IsInUnit ( j ) and not HasTask ( j ) then
80773: NOP4
80777: PPUSH
80778: NOP4
80782: NOT
80783: PUSH
80784: NOP4
80788: PPUSH
80789: NOP4
80793: NOT
80794: AND
80795: IFFALSE 80823
// begin ComEnterUnit ( j , selected ) ;
80797: NOP4
80801: PPUSH
80802: NOP4
80806: PPUSH
80807: NOP4
// AddComChangeProfession ( j , 15 ) ;
80811: NOP4
80815: PPUSH
80816: LD_INT 15
80818: PPUSH
80819: NOP4
// end ;
80823: GO 80770
80825: POP
80826: POP
// end ; end ; end ; end ; end ;
80827: GO 80220
80829: POP
80830: POP
// end ;
80831: LD_VAR 0 1
80835: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
80836: LD_INT 0
80838: PPUSH
80839: PPUSH
80840: PPUSH
80841: PPUSH
// if not mc_bases then
80842: NOP4
80846: NOT
80847: IFFALSE 80851
// exit ;
80849: GO 81029
// for i = 1 to mc_bases do
80851: NOP4
80855: PUSH
80856: DOUBLE
80857: LD_INT 1
80859: DEC
80860: ST_TO_ADDR
80861: NOP4
80865: PUSH
80866: FOR_TO
80867: IFFALSE 81027
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
80869: NOP4
80873: PUSH
80874: NOP4
80878: PUSH
80879: NOP4
80883: ARRAY
80884: PPUSH
80885: LD_INT 25
80887: PUSH
80888: LD_INT 9
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PPUSH
80895: NOP4
80899: ST_TO_ADDR
// if not tmp then
80900: NOP4
80904: NOT
80905: IFFALSE 80909
// continue ;
80907: GO 80866
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
80909: NOP4
80913: PUSH
80914: NOP4
80918: ARRAY
80919: PPUSH
80920: LD_INT 29
80922: PPUSH
80923: NOP4
80927: NOT
80928: PUSH
80929: NOP4
80933: PUSH
80934: NOP4
80938: ARRAY
80939: PPUSH
80940: LD_INT 28
80942: PPUSH
80943: NOP4
80947: NOT
80948: AND
80949: IFFALSE 80953
// continue ;
80951: GO 80866
// for j in tmp do
80953: NOP4
80957: PUSH
80958: NOP4
80962: PUSH
80963: FOR_IN
80964: IFFALSE 81023
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80966: NOP4
80970: PUSH
80971: NOP4
80975: PUSH
80976: NOP4
80980: ARRAY
80981: PUSH
80982: LD_INT 1
80984: ARRAY
80985: IN
80986: NOT
80987: PUSH
80988: NOP4
80992: PUSH
80993: NOP4
80997: PUSH
80998: NOP4
81002: ARRAY
81003: PUSH
81004: LD_INT 2
81006: ARRAY
81007: IN
81008: NOT
81009: AND
81010: IFFALSE 81021
// ComSpaceTimeShoot ( j ) ;
81012: NOP4
81016: PPUSH
81017: NOP4
81021: GO 80963
81023: POP
81024: POP
// end ;
81025: GO 80866
81027: POP
81028: POP
// end ;
81029: LD_VAR 0 1
81033: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
81034: LD_INT 0
81036: PPUSH
81037: PPUSH
81038: PPUSH
81039: PPUSH
81040: PPUSH
81041: PPUSH
81042: PPUSH
81043: PPUSH
81044: PPUSH
// if not mc_bases then
81045: NOP4
81049: NOT
81050: IFFALSE 81054
// exit ;
81052: GO 81676
// for i = 1 to mc_bases do
81054: NOP4
81058: PUSH
81059: DOUBLE
81060: LD_INT 1
81062: DEC
81063: ST_TO_ADDR
81064: NOP4
81068: PUSH
81069: FOR_TO
81070: IFFALSE 81674
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
81072: NOP4
81076: PUSH
81077: NOP4
81081: ARRAY
81082: NOT
81083: PUSH
81084: LD_INT 38
81086: PPUSH
81087: NOP4
81091: PUSH
81092: NOP4
81096: ARRAY
81097: PPUSH
81098: NOP4
81102: PUSH
81103: LD_INT 2
81105: NONEQUAL
81106: OR
81107: IFFALSE 81111
// continue ;
81109: GO 81069
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
81111: NOP4
81115: PUSH
81116: NOP4
81120: PUSH
81121: NOP4
81125: ARRAY
81126: PPUSH
81127: LD_INT 30
81129: PUSH
81130: LD_INT 34
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: PPUSH
81137: NOP4
81141: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
81142: NOP4
81146: PUSH
81147: NOP4
81151: PUSH
81152: NOP4
81156: ARRAY
81157: PPUSH
81158: LD_INT 25
81160: PUSH
81161: LD_INT 4
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PPUSH
81168: NOP4
81172: PPUSH
81173: LD_INT 0
81175: PPUSH
81176: NOP4
81180: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
81181: NOP4
81185: NOT
81186: PUSH
81187: NOP4
81191: NOT
81192: OR
81193: PUSH
81194: NOP4
81198: PUSH
81199: NOP4
81203: ARRAY
81204: PPUSH
81205: LD_INT 124
81207: PPUSH
81208: NOP4
81212: OR
81213: IFFALSE 81217
// continue ;
81215: GO 81069
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
81217: NOP4
81221: PUSH
81222: NOP4
81226: ARRAY
81227: PUSH
81228: NOP4
81232: PUSH
81233: NOP4
81237: ARRAY
81238: LESS
81239: PUSH
81240: NOP4
81244: PUSH
81245: NOP4
81249: ARRAY
81250: PUSH
81251: NOP4
81255: LESS
81256: AND
81257: IFFALSE 81672
// begin tmp := sci [ 1 ] ;
81259: NOP4
81263: PUSH
81264: NOP4
81268: PUSH
81269: LD_INT 1
81271: ARRAY
81272: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
81273: NOP4
81277: PPUSH
81278: LD_INT 124
81280: PPUSH
81281: NOP4
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
81285: NOP4
81289: PUSH
81290: DOUBLE
81291: NOP4
81295: PUSH
81296: NOP4
81300: ARRAY
81301: INC
81302: ST_TO_ADDR
81303: NOP4
81307: PUSH
81308: NOP4
81312: ARRAY
81313: PUSH
81314: FOR_DOWNTO
81315: IFFALSE 81658
// begin if IsInUnit ( tmp ) then
81317: NOP4
81321: PPUSH
81322: NOP4
81326: IFFALSE 81337
// ComExitBuilding ( tmp ) ;
81328: NOP4
81332: PPUSH
81333: NOP4
// repeat wait ( 0 0$1 ) ;
81337: LD_INT 35
81339: PPUSH
81340: NOP4
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
81344: NOP4
81348: PPUSH
81349: NOP4
81353: NOT
81354: PUSH
81355: NOP4
81359: PPUSH
81360: NOP4
81364: NOT
81365: AND
81366: IFFALSE 81337
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
81368: NOP4
81372: PUSH
81373: NOP4
81377: PPUSH
81378: NOP4
81382: PUSH
81383: NOP4
81387: PPUSH
81388: NOP4
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81397: LD_INT 35
81399: PPUSH
81400: NOP4
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
81404: NOP4
81408: PUSH
81409: NOP4
81413: PUSH
81414: NOP4
81418: ARRAY
81419: PUSH
81420: NOP4
81424: ARRAY
81425: PUSH
81426: LD_INT 1
81428: ARRAY
81429: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
81430: NOP4
81434: PUSH
81435: NOP4
81439: PUSH
81440: NOP4
81444: ARRAY
81445: PUSH
81446: NOP4
81450: ARRAY
81451: PUSH
81452: LD_INT 2
81454: ARRAY
81455: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
81456: NOP4
81460: PPUSH
81461: LD_INT 10
81463: PPUSH
81464: NOP4
81468: PUSH
81469: LD_INT 4
81471: ARRAY
81472: IFFALSE 81510
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
81474: NOP4
81478: PPUSH
81479: NOP4
81483: PUSH
81484: LD_INT 1
81486: ARRAY
81487: PPUSH
81488: NOP4
81492: PUSH
81493: LD_INT 2
81495: ARRAY
81496: PPUSH
81497: NOP4
// wait ( 0 0$10 ) ;
81501: LD_INT 350
81503: PPUSH
81504: NOP4
// end else
81508: GO 81536
// begin ComMoveXY ( tmp , x , y ) ;
81510: NOP4
81514: PPUSH
81515: NOP4
81519: PPUSH
81520: NOP4
81524: PPUSH
81525: NOP4
// wait ( 0 0$3 ) ;
81529: LD_INT 105
81531: PPUSH
81532: NOP4
// end ; until IsAt ( tmp , x , y ) ;
81536: NOP4
81540: PPUSH
81541: NOP4
81545: PPUSH
81546: NOP4
81550: PPUSH
81551: NOP4
81555: IFFALSE 81397
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
81557: NOP4
81561: PPUSH
81562: NOP4
81566: PPUSH
81567: NOP4
81571: PPUSH
81572: NOP4
81576: PUSH
81577: NOP4
81581: ARRAY
81582: PPUSH
81583: NOP4
// repeat wait ( 0 0$1 ) ;
81587: LD_INT 35
81589: PPUSH
81590: NOP4
// until not HasTask ( tmp ) ;
81594: NOP4
81598: PPUSH
81599: NOP4
81603: NOT
81604: IFFALSE 81587
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
81606: NOP4
81610: PUSH
81611: NOP4
81615: PPUSH
81616: NOP4
81620: PUSH
81621: NOP4
81625: PUSH
81626: NOP4
81630: ARRAY
81631: PUSH
81632: LD_INT 1
81634: PLUS
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PPUSH
81640: NOP4
81644: PUSH
81645: NOP4
81649: ARRAY
81650: PPUSH
81651: NOP4
81655: ST_TO_ADDR
// end ;
81656: GO 81314
81658: POP
81659: POP
// MC_Reset ( i , 124 ) ;
81660: NOP4
81664: PPUSH
81665: LD_INT 124
81667: PPUSH
81668: NOP4
// end ; end ;
81672: GO 81069
81674: POP
81675: POP
// end ;
81676: LD_VAR 0 1
81680: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
81681: LD_INT 0
81683: PPUSH
81684: PPUSH
81685: PPUSH
// if not mc_bases then
81686: NOP4
81690: NOT
81691: IFFALSE 81695
// exit ;
81693: GO 82301
// for i = 1 to mc_bases do
81695: NOP4
81699: PUSH
81700: DOUBLE
81701: LD_INT 1
81703: DEC
81704: ST_TO_ADDR
81705: NOP4
81709: PUSH
81710: FOR_TO
81711: IFFALSE 82299
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
81713: NOP4
81717: PUSH
81718: NOP4
81722: PUSH
81723: NOP4
81727: ARRAY
81728: PPUSH
81729: LD_INT 25
81731: PUSH
81732: LD_INT 4
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: PPUSH
81739: NOP4
81743: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81744: NOP4
81748: NOT
81749: PUSH
81750: NOP4
81754: PUSH
81755: NOP4
81759: ARRAY
81760: NOT
81761: OR
81762: PUSH
81763: NOP4
81767: PUSH
81768: NOP4
81772: ARRAY
81773: PPUSH
81774: LD_INT 2
81776: PUSH
81777: LD_INT 30
81779: PUSH
81780: LD_INT 0
81782: PUSH
81783: EMPTY
81784: LIST
81785: LIST
81786: PUSH
81787: LD_INT 30
81789: PUSH
81790: LD_INT 1
81792: PUSH
81793: EMPTY
81794: LIST
81795: LIST
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: LIST
81801: PPUSH
81802: NOP4
81806: NOT
81807: OR
81808: IFFALSE 81858
// begin if mc_deposits_finder [ i ] then
81810: NOP4
81814: PUSH
81815: NOP4
81819: ARRAY
81820: IFFALSE 81856
// begin MC_Reset ( i , 125 ) ;
81822: NOP4
81826: PPUSH
81827: LD_INT 125
81829: PPUSH
81830: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
81834: NOP4
81838: PUSH
81839: NOP4
81843: PPUSH
81844: NOP4
81848: PPUSH
81849: EMPTY
81850: PPUSH
81851: NOP4
81855: ST_TO_ADDR
// end ; continue ;
81856: GO 81710
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
81858: NOP4
81862: PUSH
81863: NOP4
81867: ARRAY
81868: PUSH
81869: LD_INT 1
81871: ARRAY
81872: PUSH
81873: LD_INT 3
81875: ARRAY
81876: PUSH
81877: LD_INT 1
81879: EQUAL
81880: PUSH
81881: LD_INT 20
81883: PPUSH
81884: NOP4
81888: PUSH
81889: NOP4
81893: ARRAY
81894: PPUSH
81895: NOP4
81899: PUSH
81900: LD_INT 2
81902: NONEQUAL
81903: AND
81904: IFFALSE 81954
// begin if mc_deposits_finder [ i ] then
81906: NOP4
81910: PUSH
81911: NOP4
81915: ARRAY
81916: IFFALSE 81952
// begin MC_Reset ( i , 125 ) ;
81918: NOP4
81922: PPUSH
81923: LD_INT 125
81925: PPUSH
81926: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
81930: NOP4
81934: PUSH
81935: NOP4
81939: PPUSH
81940: NOP4
81944: PPUSH
81945: EMPTY
81946: PPUSH
81947: NOP4
81951: ST_TO_ADDR
// end ; continue ;
81952: GO 81710
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
81954: NOP4
81958: PUSH
81959: NOP4
81963: ARRAY
81964: PUSH
81965: LD_INT 1
81967: ARRAY
81968: PUSH
81969: LD_INT 1
81971: ARRAY
81972: PPUSH
81973: NOP4
81977: PUSH
81978: NOP4
81982: ARRAY
81983: PUSH
81984: LD_INT 1
81986: ARRAY
81987: PUSH
81988: LD_INT 2
81990: ARRAY
81991: PPUSH
81992: NOP4
81996: PUSH
81997: NOP4
82001: ARRAY
82002: PPUSH
82003: NOP4
82007: IFFALSE 82050
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
82009: NOP4
82013: PUSH
82014: NOP4
82018: PPUSH
82019: NOP4
82023: PPUSH
82024: NOP4
82028: PUSH
82029: NOP4
82033: ARRAY
82034: PPUSH
82035: LD_INT 1
82037: PPUSH
82038: NOP4
82042: PPUSH
82043: NOP4
82047: ST_TO_ADDR
82048: GO 82297
// begin if not mc_deposits_finder [ i ] then
82050: NOP4
82054: PUSH
82055: NOP4
82059: ARRAY
82060: NOT
82061: IFFALSE 82113
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
82063: NOP4
82067: PUSH
82068: NOP4
82072: PPUSH
82073: NOP4
82077: PPUSH
82078: NOP4
82082: PUSH
82083: LD_INT 1
82085: ARRAY
82086: PUSH
82087: EMPTY
82088: LIST
82089: PPUSH
82090: NOP4
82094: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
82095: NOP4
82099: PUSH
82100: LD_INT 1
82102: ARRAY
82103: PPUSH
82104: LD_INT 125
82106: PPUSH
82107: NOP4
// end else
82111: GO 82297
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
82113: NOP4
82117: PUSH
82118: NOP4
82122: ARRAY
82123: PUSH
82124: LD_INT 1
82126: ARRAY
82127: PPUSH
82128: NOP4
82132: IFFALSE 82155
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
82134: NOP4
82138: PUSH
82139: NOP4
82143: ARRAY
82144: PUSH
82145: LD_INT 1
82147: ARRAY
82148: PPUSH
82149: NOP4
82153: GO 82297
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
82155: NOP4
82159: PUSH
82160: NOP4
82164: ARRAY
82165: PUSH
82166: LD_INT 1
82168: ARRAY
82169: PPUSH
82170: NOP4
82174: NOT
82175: PUSH
82176: NOP4
82180: PUSH
82181: NOP4
82185: ARRAY
82186: PUSH
82187: LD_INT 1
82189: ARRAY
82190: PPUSH
82191: NOP4
82195: PUSH
82196: NOP4
82200: ARRAY
82201: PUSH
82202: LD_INT 1
82204: ARRAY
82205: PUSH
82206: LD_INT 1
82208: ARRAY
82209: PPUSH
82210: NOP4
82214: PUSH
82215: NOP4
82219: ARRAY
82220: PUSH
82221: LD_INT 1
82223: ARRAY
82224: PUSH
82225: LD_INT 2
82227: ARRAY
82228: PPUSH
82229: NOP4
82233: PUSH
82234: LD_INT 6
82236: GREATER
82237: AND
82238: IFFALSE 82297
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
82240: NOP4
82244: PUSH
82245: NOP4
82249: ARRAY
82250: PUSH
82251: LD_INT 1
82253: ARRAY
82254: PPUSH
82255: NOP4
82259: PUSH
82260: NOP4
82264: ARRAY
82265: PUSH
82266: LD_INT 1
82268: ARRAY
82269: PUSH
82270: LD_INT 1
82272: ARRAY
82273: PPUSH
82274: NOP4
82278: PUSH
82279: NOP4
82283: ARRAY
82284: PUSH
82285: LD_INT 1
82287: ARRAY
82288: PUSH
82289: LD_INT 2
82291: ARRAY
82292: PPUSH
82293: NOP4
// end ; end ; end ;
82297: GO 81710
82299: POP
82300: POP
// end ;
82301: LD_VAR 0 1
82305: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
82306: LD_INT 0
82308: PPUSH
82309: PPUSH
82310: PPUSH
82311: PPUSH
82312: PPUSH
82313: PPUSH
82314: PPUSH
82315: PPUSH
82316: PPUSH
82317: PPUSH
82318: PPUSH
// if not mc_bases then
82319: NOP4
82323: NOT
82324: IFFALSE 82328
// exit ;
82326: GO 83052
// for i = 1 to mc_bases do
82328: NOP4
82332: PUSH
82333: DOUBLE
82334: LD_INT 1
82336: DEC
82337: ST_TO_ADDR
82338: NOP4
82342: PUSH
82343: FOR_TO
82344: IFFALSE 83050
// begin if not mc_bases [ i ] then
82346: NOP4
82350: PUSH
82351: NOP4
82355: ARRAY
82356: NOT
82357: IFFALSE 82361
// continue ;
82359: GO 82343
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
82361: NOP4
82365: PUSH
82366: NOP4
82370: PUSH
82371: NOP4
82375: ARRAY
82376: PUSH
82377: LD_INT 1
82379: ARRAY
82380: PPUSH
82381: NOP4
82385: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
82386: NOP4
82390: PUSH
82391: LD_INT 3
82393: EQUAL
82394: PUSH
82395: NOP4
82399: PUSH
82400: NOP4
82404: ARRAY
82405: PUSH
82406: NOP4
82410: PUSH
82411: NOP4
82415: ARRAY
82416: UNION
82417: PPUSH
82418: LD_INT 33
82420: PUSH
82421: LD_INT 2
82423: PUSH
82424: EMPTY
82425: LIST
82426: LIST
82427: PPUSH
82428: NOP4
82432: NOT
82433: OR
82434: IFFALSE 82438
// continue ;
82436: GO 82343
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
82438: NOP4
82442: PUSH
82443: NOP4
82447: PUSH
82448: NOP4
82452: ARRAY
82453: PPUSH
82454: LD_INT 30
82456: PUSH
82457: LD_INT 36
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: PPUSH
82464: NOP4
82468: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
82469: NOP4
82473: PUSH
82474: NOP4
82478: PUSH
82479: NOP4
82483: ARRAY
82484: PPUSH
82485: LD_INT 34
82487: PUSH
82488: LD_INT 31
82490: PUSH
82491: EMPTY
82492: LIST
82493: LIST
82494: PPUSH
82495: NOP4
82499: ST_TO_ADDR
// if not cts and not mcts then
82500: NOP4
82504: NOT
82505: PUSH
82506: NOP4
82510: NOT
82511: AND
82512: IFFALSE 82516
// continue ;
82514: GO 82343
// x := cts ;
82516: NOP4
82520: PUSH
82521: NOP4
82525: ST_TO_ADDR
// if not x then
82526: NOP4
82530: NOT
82531: IFFALSE 82543
// x := mcts ;
82533: NOP4
82537: PUSH
82538: NOP4
82542: ST_TO_ADDR
// if mc_remote_driver [ i ] then
82543: NOP4
82547: PUSH
82548: NOP4
82552: ARRAY
82553: IFFALSE 82822
// for j in mc_remote_driver [ i ] do
82555: NOP4
82559: PUSH
82560: NOP4
82564: PUSH
82565: NOP4
82569: ARRAY
82570: PUSH
82571: FOR_IN
82572: IFFALSE 82820
// begin if GetClass ( j ) <> 3 then
82574: NOP4
82578: PPUSH
82579: NOP4
82583: PUSH
82584: LD_INT 3
82586: NONEQUAL
82587: IFFALSE 82640
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
82589: NOP4
82593: PUSH
82594: NOP4
82598: PPUSH
82599: NOP4
82603: PPUSH
82604: NOP4
82608: PUSH
82609: NOP4
82613: ARRAY
82614: PUSH
82615: NOP4
82619: DIFF
82620: PPUSH
82621: NOP4
82625: ST_TO_ADDR
// SetTag ( j , 0 ) ;
82626: NOP4
82630: PPUSH
82631: LD_INT 0
82633: PPUSH
82634: NOP4
// continue ;
82638: GO 82571
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
82640: NOP4
82644: PPUSH
82645: NOP4
82649: NOT
82650: PUSH
82651: NOP4
82655: PPUSH
82656: NOP4
82660: PPUSH
82661: NOP4
82665: PUSH
82666: LD_INT 36
82668: NONEQUAL
82669: PUSH
82670: NOP4
82674: PPUSH
82675: NOP4
82679: NOT
82680: AND
82681: OR
82682: IFFALSE 82818
// begin if IsInUnit ( j ) then
82684: NOP4
82688: PPUSH
82689: NOP4
82693: IFFALSE 82704
// ComExitBuilding ( j ) ;
82695: NOP4
82699: PPUSH
82700: NOP4
// ct := 0 ;
82704: NOP4
82708: PUSH
82709: LD_INT 0
82711: ST_TO_ADDR
// for k in x do
82712: NOP4
82716: PUSH
82717: NOP4
82721: PUSH
82722: FOR_IN
82723: IFFALSE 82796
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
82725: NOP4
82729: PPUSH
82730: NOP4
82734: PUSH
82735: LD_INT 31
82737: EQUAL
82738: PUSH
82739: NOP4
82743: PPUSH
82744: NOP4
82748: NOT
82749: AND
82750: PUSH
82751: NOP4
82755: PPUSH
82756: NOP4
82760: PUSH
82761: LD_INT 36
82763: EQUAL
82764: PUSH
82765: NOP4
82769: PPUSH
82770: NOP4
82774: PUSH
82775: LD_INT 3
82777: LESS
82778: AND
82779: OR
82780: IFFALSE 82794
// begin ct := k ;
82782: NOP4
82786: PUSH
82787: NOP4
82791: ST_TO_ADDR
// break ;
82792: GO 82796
// end ;
82794: GO 82722
82796: POP
82797: POP
// if ct then
82798: NOP4
82802: IFFALSE 82818
// ComEnterUnit ( j , ct ) ;
82804: NOP4
82808: PPUSH
82809: NOP4
82813: PPUSH
82814: NOP4
// end ; end ;
82818: GO 82571
82820: POP
82821: POP
// places := 0 ;
82822: NOP4
82826: PUSH
82827: LD_INT 0
82829: ST_TO_ADDR
// for j = 1 to x do
82830: NOP4
82834: PUSH
82835: DOUBLE
82836: LD_INT 1
82838: DEC
82839: ST_TO_ADDR
82840: NOP4
82844: PUSH
82845: FOR_TO
82846: IFFALSE 82901
// if GetWeapon ( x [ j ] ) = ar_control_tower then
82848: NOP4
82852: PUSH
82853: NOP4
82857: ARRAY
82858: PPUSH
82859: NOP4
82863: PUSH
82864: LD_INT 31
82866: EQUAL
82867: IFFALSE 82885
// places := places + 1 else
82869: NOP4
82873: PUSH
82874: NOP4
82878: PUSH
82879: LD_INT 1
82881: PLUS
82882: ST_TO_ADDR
82883: GO 82899
// places := places + 3 ;
82885: NOP4
82889: PUSH
82890: NOP4
82894: PUSH
82895: LD_INT 3
82897: PLUS
82898: ST_TO_ADDR
82899: GO 82845
82901: POP
82902: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
82903: NOP4
82907: PUSH
82908: NOP4
82912: PUSH
82913: NOP4
82917: ARRAY
82918: PPUSH
82919: LD_INT 25
82921: PUSH
82922: LD_INT 3
82924: PUSH
82925: EMPTY
82926: LIST
82927: LIST
82928: PPUSH
82929: NOP4
82933: PUSH
82934: NOP4
82938: PUSH
82939: NOP4
82943: ARRAY
82944: DIFF
82945: PPUSH
82946: LD_INT 3
82948: PPUSH
82949: NOP4
82953: ST_TO_ADDR
// if not tmp then
82954: NOP4
82958: NOT
82959: IFFALSE 82963
// continue ;
82961: GO 82343
// places := places - mc_remote_driver [ i ] ;
82963: NOP4
82967: PUSH
82968: NOP4
82972: PUSH
82973: NOP4
82977: PUSH
82978: NOP4
82982: ARRAY
82983: MINUS
82984: ST_TO_ADDR
// if places then
82985: NOP4
82989: IFFALSE 83048
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
82991: NOP4
82995: PUSH
82996: NOP4
83000: PPUSH
83001: NOP4
83005: PPUSH
83006: NOP4
83010: PUSH
83011: NOP4
83015: ARRAY
83016: PUSH
83017: NOP4
83021: PUSH
83022: LD_INT 1
83024: ARRAY
83025: UNION
83026: PPUSH
83027: NOP4
83031: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
83032: NOP4
83036: PUSH
83037: LD_INT 1
83039: ARRAY
83040: PPUSH
83041: LD_INT 126
83043: PPUSH
83044: NOP4
// end ; end ;
83048: GO 82343
83050: POP
83051: POP
// end ;
83052: LD_VAR 0 1
83056: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
83057: LD_INT 0
83059: PPUSH
83060: PPUSH
83061: PPUSH
83062: PPUSH
83063: PPUSH
83064: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
83065: NOP4
83069: NOT
83070: PUSH
83071: NOP4
83075: NOT
83076: OR
83077: PUSH
83078: NOP4
83082: NOT
83083: OR
83084: PUSH
83085: NOP4
83089: PUSH
83090: LD_INT 1
83092: PUSH
83093: LD_INT 2
83095: PUSH
83096: LD_INT 3
83098: PUSH
83099: LD_INT 4
83101: PUSH
83102: LD_INT 5
83104: PUSH
83105: LD_INT 8
83107: PUSH
83108: LD_INT 9
83110: PUSH
83111: LD_INT 15
83113: PUSH
83114: LD_INT 16
83116: PUSH
83117: EMPTY
83118: LIST
83119: LIST
83120: LIST
83121: LIST
83122: LIST
83123: LIST
83124: LIST
83125: LIST
83126: LIST
83127: IN
83128: NOT
83129: OR
83130: IFFALSE 83134
// exit ;
83132: GO 84034
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
83134: NOP4
83138: PUSH
83139: NOP4
83143: PPUSH
83144: LD_INT 21
83146: PUSH
83147: LD_INT 3
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: PUSH
83154: LD_INT 24
83156: PUSH
83157: LD_INT 250
83159: PUSH
83160: EMPTY
83161: LIST
83162: LIST
83163: PUSH
83164: EMPTY
83165: LIST
83166: LIST
83167: PPUSH
83168: NOP4
83172: ST_TO_ADDR
// case class of 1 , 15 :
83173: NOP4
83177: PUSH
83178: LD_INT 1
83180: DOUBLE
83181: EQUAL
83182: IFTRUE 83192
83184: LD_INT 15
83186: DOUBLE
83187: EQUAL
83188: IFTRUE 83192
83190: GO 83277
83192: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
83193: NOP4
83197: PUSH
83198: NOP4
83202: PPUSH
83203: LD_INT 2
83205: PUSH
83206: LD_INT 30
83208: PUSH
83209: LD_INT 32
83211: PUSH
83212: EMPTY
83213: LIST
83214: LIST
83215: PUSH
83216: LD_INT 30
83218: PUSH
83219: LD_INT 31
83221: PUSH
83222: EMPTY
83223: LIST
83224: LIST
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: LIST
83230: PPUSH
83231: NOP4
83235: PUSH
83236: NOP4
83240: PPUSH
83241: LD_INT 2
83243: PUSH
83244: LD_INT 30
83246: PUSH
83247: LD_INT 4
83249: PUSH
83250: EMPTY
83251: LIST
83252: LIST
83253: PUSH
83254: LD_INT 30
83256: PUSH
83257: LD_INT 5
83259: PUSH
83260: EMPTY
83261: LIST
83262: LIST
83263: PUSH
83264: EMPTY
83265: LIST
83266: LIST
83267: LIST
83268: PPUSH
83269: NOP4
83273: ADD
83274: ST_TO_ADDR
83275: GO 83523
83277: LD_INT 2
83279: DOUBLE
83280: EQUAL
83281: IFTRUE 83291
83283: LD_INT 16
83285: DOUBLE
83286: EQUAL
83287: IFTRUE 83291
83289: GO 83337
83291: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
83292: NOP4
83296: PUSH
83297: NOP4
83301: PPUSH
83302: LD_INT 2
83304: PUSH
83305: LD_INT 30
83307: PUSH
83308: LD_INT 0
83310: PUSH
83311: EMPTY
83312: LIST
83313: LIST
83314: PUSH
83315: LD_INT 30
83317: PUSH
83318: LD_INT 1
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: PUSH
83325: EMPTY
83326: LIST
83327: LIST
83328: LIST
83329: PPUSH
83330: NOP4
83334: ST_TO_ADDR
83335: GO 83523
83337: LD_INT 3
83339: DOUBLE
83340: EQUAL
83341: IFTRUE 83345
83343: GO 83391
83345: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
83346: NOP4
83350: PUSH
83351: NOP4
83355: PPUSH
83356: LD_INT 2
83358: PUSH
83359: LD_INT 30
83361: PUSH
83362: LD_INT 2
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PUSH
83369: LD_INT 30
83371: PUSH
83372: LD_INT 3
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: PUSH
83379: EMPTY
83380: LIST
83381: LIST
83382: LIST
83383: PPUSH
83384: NOP4
83388: ST_TO_ADDR
83389: GO 83523
83391: LD_INT 4
83393: DOUBLE
83394: EQUAL
83395: IFTRUE 83399
83397: GO 83456
83399: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83400: NOP4
83404: PUSH
83405: NOP4
83409: PPUSH
83410: LD_INT 2
83412: PUSH
83413: LD_INT 30
83415: PUSH
83416: LD_INT 6
83418: PUSH
83419: EMPTY
83420: LIST
83421: LIST
83422: PUSH
83423: LD_INT 30
83425: PUSH
83426: LD_INT 7
83428: PUSH
83429: EMPTY
83430: LIST
83431: LIST
83432: PUSH
83433: LD_INT 30
83435: PUSH
83436: LD_INT 8
83438: PUSH
83439: EMPTY
83440: LIST
83441: LIST
83442: PUSH
83443: EMPTY
83444: LIST
83445: LIST
83446: LIST
83447: LIST
83448: PPUSH
83449: NOP4
83453: ST_TO_ADDR
83454: GO 83523
83456: LD_INT 5
83458: DOUBLE
83459: EQUAL
83460: IFTRUE 83476
83462: LD_INT 8
83464: DOUBLE
83465: EQUAL
83466: IFTRUE 83476
83468: LD_INT 9
83470: DOUBLE
83471: EQUAL
83472: IFTRUE 83476
83474: GO 83522
83476: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83477: NOP4
83481: PUSH
83482: NOP4
83486: PPUSH
83487: LD_INT 2
83489: PUSH
83490: LD_INT 30
83492: PUSH
83493: LD_INT 4
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 30
83502: PUSH
83503: LD_INT 5
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: LIST
83514: PPUSH
83515: NOP4
83519: ST_TO_ADDR
83520: GO 83523
83522: POP
// if not tmp then
83523: NOP4
83527: NOT
83528: IFFALSE 83532
// exit ;
83530: GO 84034
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
83532: NOP4
83536: PUSH
83537: LD_INT 1
83539: PUSH
83540: LD_INT 15
83542: PUSH
83543: EMPTY
83544: LIST
83545: LIST
83546: IN
83547: PUSH
83548: NOP4
83552: PUSH
83553: NOP4
83557: ARRAY
83558: AND
83559: IFFALSE 83715
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
83561: NOP4
83565: PUSH
83566: NOP4
83570: PUSH
83571: NOP4
83575: ARRAY
83576: PUSH
83577: LD_INT 1
83579: ARRAY
83580: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
83581: NOP4
83585: PUSH
83586: NOP4
83590: PUSH
83591: NOP4
83595: ARRAY
83596: IN
83597: NOT
83598: IFFALSE 83713
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
83600: NOP4
83604: PUSH
83605: NOP4
83609: PPUSH
83610: NOP4
83614: PUSH
83615: NOP4
83619: PUSH
83620: NOP4
83624: ARRAY
83625: PUSH
83626: LD_INT 1
83628: PLUS
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PPUSH
83634: NOP4
83638: PPUSH
83639: NOP4
83643: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
83644: NOP4
83648: PUSH
83649: NOP4
83653: PPUSH
83654: NOP4
83658: PPUSH
83659: NOP4
83663: PUSH
83664: NOP4
83668: ARRAY
83669: PUSH
83670: NOP4
83674: DIFF
83675: PPUSH
83676: NOP4
83680: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
83681: NOP4
83685: PPUSH
83686: NOP4
83690: PUSH
83691: NOP4
83695: ARRAY
83696: PUSH
83697: NOP4
83701: PUSH
83702: NOP4
83706: ARRAY
83707: ARRAY
83708: PPUSH
83709: NOP4
// end ; exit ;
83713: GO 84034
// end ; if tmp > 1 then
83715: NOP4
83719: PUSH
83720: LD_INT 1
83722: GREATER
83723: IFFALSE 83827
// for i = 2 to tmp do
83725: NOP4
83729: PUSH
83730: DOUBLE
83731: LD_INT 2
83733: DEC
83734: ST_TO_ADDR
83735: NOP4
83739: PUSH
83740: FOR_TO
83741: IFFALSE 83825
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
83743: NOP4
83747: PUSH
83748: NOP4
83752: ARRAY
83753: PPUSH
83754: NOP4
83758: PUSH
83759: LD_INT 6
83761: EQUAL
83762: IFFALSE 83823
// begin x := tmp [ i ] ;
83764: NOP4
83768: PUSH
83769: NOP4
83773: PUSH
83774: NOP4
83778: ARRAY
83779: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
83780: NOP4
83784: PUSH
83785: NOP4
83789: PPUSH
83790: NOP4
83794: PPUSH
83795: NOP4
83799: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
83800: NOP4
83804: PUSH
83805: NOP4
83809: PPUSH
83810: LD_INT 1
83812: PPUSH
83813: NOP4
83817: PPUSH
83818: NOP4
83822: ST_TO_ADDR
// end ;
83823: GO 83740
83825: POP
83826: POP
// for i in tmp do
83827: NOP4
83831: PUSH
83832: NOP4
83836: PUSH
83837: FOR_IN
83838: IFFALSE 83907
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
83840: NOP4
83844: PPUSH
83845: NOP4
83849: PUSH
83850: LD_INT 6
83852: LESS
83853: PUSH
83854: NOP4
83858: PPUSH
83859: NOP4
83863: PUSH
83864: LD_INT 31
83866: PUSH
83867: LD_INT 32
83869: PUSH
83870: EMPTY
83871: LIST
83872: LIST
83873: IN
83874: NOT
83875: AND
83876: PUSH
83877: NOP4
83881: PPUSH
83882: NOP4
83886: PUSH
83887: LD_INT 0
83889: EQUAL
83890: OR
83891: IFFALSE 83905
// begin j := i ;
83893: NOP4
83897: PUSH
83898: NOP4
83902: ST_TO_ADDR
// break ;
83903: GO 83907
// end ; end ;
83905: GO 83837
83907: POP
83908: POP
// if j then
83909: NOP4
83913: IFFALSE 83931
// ComEnterUnit ( unit , j ) else
83915: NOP4
83919: PPUSH
83920: NOP4
83924: PPUSH
83925: NOP4
83929: GO 84034
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83931: NOP4
83935: PUSH
83936: NOP4
83940: PPUSH
83941: LD_INT 2
83943: PUSH
83944: LD_INT 30
83946: PUSH
83947: LD_INT 0
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: PUSH
83954: LD_INT 30
83956: PUSH
83957: LD_INT 1
83959: PUSH
83960: EMPTY
83961: LIST
83962: LIST
83963: PUSH
83964: EMPTY
83965: LIST
83966: LIST
83967: LIST
83968: PPUSH
83969: NOP4
83973: ST_TO_ADDR
// if depot then
83974: NOP4
83978: IFFALSE 84034
// begin depot := NearestUnitToUnit ( depot , unit ) ;
83980: NOP4
83984: PUSH
83985: NOP4
83989: PPUSH
83990: NOP4
83994: PPUSH
83995: NOP4
83999: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
84000: NOP4
84004: PPUSH
84005: NOP4
84009: PPUSH
84010: NOP4
84014: PUSH
84015: LD_INT 10
84017: GREATER
84018: IFFALSE 84034
// ComStandNearbyBuilding ( unit , depot ) ;
84020: NOP4
84024: PPUSH
84025: NOP4
84029: PPUSH
84030: NOP4
// end ; end ; end ;
84034: LD_VAR 0 5
84038: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
84039: LD_INT 0
84041: PPUSH
84042: PPUSH
84043: PPUSH
84044: PPUSH
// if not mc_bases then
84045: NOP4
84049: NOT
84050: IFFALSE 84054
// exit ;
84052: GO 84293
// for i = 1 to mc_bases do
84054: NOP4
84058: PUSH
84059: DOUBLE
84060: LD_INT 1
84062: DEC
84063: ST_TO_ADDR
84064: NOP4
84068: PUSH
84069: FOR_TO
84070: IFFALSE 84291
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
84072: NOP4
84076: PUSH
84077: NOP4
84081: PUSH
84082: NOP4
84086: ARRAY
84087: PPUSH
84088: LD_INT 21
84090: PUSH
84091: LD_INT 1
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PPUSH
84098: NOP4
84102: PUSH
84103: NOP4
84107: PUSH
84108: NOP4
84112: ARRAY
84113: UNION
84114: ST_TO_ADDR
// if not tmp then
84115: NOP4
84119: NOT
84120: IFFALSE 84124
// continue ;
84122: GO 84069
// for j in tmp do
84124: NOP4
84128: PUSH
84129: NOP4
84133: PUSH
84134: FOR_IN
84135: IFFALSE 84287
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
84137: NOP4
84141: PPUSH
84142: NOP4
84146: NOT
84147: PUSH
84148: NOP4
84152: PPUSH
84153: NOP4
84157: NOT
84158: AND
84159: PUSH
84160: NOP4
84164: PPUSH
84165: NOP4
84169: NOT
84170: AND
84171: PUSH
84172: NOP4
84176: PPUSH
84177: NOP4
84181: NOT
84182: AND
84183: PUSH
84184: NOP4
84188: PUSH
84189: NOP4
84193: PUSH
84194: NOP4
84198: ARRAY
84199: PUSH
84200: LD_INT 1
84202: ARRAY
84203: IN
84204: NOT
84205: AND
84206: PUSH
84207: NOP4
84211: PUSH
84212: NOP4
84216: PUSH
84217: NOP4
84221: ARRAY
84222: PUSH
84223: LD_INT 2
84225: ARRAY
84226: IN
84227: NOT
84228: AND
84229: PUSH
84230: NOP4
84234: PUSH
84235: NOP4
84239: PUSH
84240: NOP4
84244: ARRAY
84245: IN
84246: NOT
84247: AND
84248: IFFALSE 84285
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
84250: NOP4
84254: PPUSH
84255: NOP4
84259: PUSH
84260: NOP4
84264: ARRAY
84265: PPUSH
84266: NOP4
84270: PPUSH
84271: NOP4
84275: PPUSH
84276: NOP4
84280: PPUSH
84281: NOP4
// end ;
84285: GO 84134
84287: POP
84288: POP
// end ;
84289: GO 84069
84291: POP
84292: POP
// end ;
84293: LD_VAR 0 1
84297: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
84298: LD_INT 0
84300: PPUSH
84301: PPUSH
84302: PPUSH
84303: PPUSH
84304: PPUSH
84305: PPUSH
// if not mc_bases [ base ] then
84306: NOP4
84310: PUSH
84311: NOP4
84315: ARRAY
84316: NOT
84317: IFFALSE 84321
// exit ;
84319: GO 84503
// tmp := [ ] ;
84321: NOP4
84325: PUSH
84326: EMPTY
84327: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
84328: NOP4
84332: PUSH
84333: NOP4
84337: PPUSH
84338: LD_INT 0
84340: PPUSH
84341: NOP4
84345: ST_TO_ADDR
// if not list then
84346: NOP4
84350: NOT
84351: IFFALSE 84355
// exit ;
84353: GO 84503
// for i = 1 to amount do
84355: NOP4
84359: PUSH
84360: DOUBLE
84361: LD_INT 1
84363: DEC
84364: ST_TO_ADDR
84365: NOP4
84369: PUSH
84370: FOR_TO
84371: IFFALSE 84451
// begin x := rand ( 1 , list [ 1 ] ) ;
84373: NOP4
84377: PUSH
84378: LD_INT 1
84380: PPUSH
84381: NOP4
84385: PUSH
84386: LD_INT 1
84388: ARRAY
84389: PPUSH
84390: NOP4
84394: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84395: NOP4
84399: PUSH
84400: NOP4
84404: PPUSH
84405: NOP4
84409: PPUSH
84410: NOP4
84414: PUSH
84415: LD_INT 1
84417: ARRAY
84418: PUSH
84419: NOP4
84423: ARRAY
84424: PUSH
84425: NOP4
84429: PUSH
84430: LD_INT 2
84432: ARRAY
84433: PUSH
84434: NOP4
84438: ARRAY
84439: PUSH
84440: EMPTY
84441: LIST
84442: LIST
84443: PPUSH
84444: NOP4
84448: ST_TO_ADDR
// end ;
84449: GO 84370
84451: POP
84452: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84453: NOP4
84457: PUSH
84458: NOP4
84462: PPUSH
84463: NOP4
84467: PPUSH
84468: NOP4
84472: PPUSH
84473: NOP4
84477: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84478: NOP4
84482: PUSH
84483: NOP4
84487: PPUSH
84488: NOP4
84492: PPUSH
84493: NOP4
84497: PPUSH
84498: NOP4
84502: ST_TO_ADDR
// end ;
84503: LD_VAR 0 4
84507: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
84508: LD_INT 0
84510: PPUSH
// if not mc_bases [ base ] then
84511: NOP4
84515: PUSH
84516: NOP4
84520: ARRAY
84521: NOT
84522: IFFALSE 84526
// exit ;
84524: GO 84551
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
84526: NOP4
84530: PUSH
84531: NOP4
84535: PPUSH
84536: NOP4
84540: PPUSH
84541: NOP4
84545: PPUSH
84546: NOP4
84550: ST_TO_ADDR
// end ;
84551: LD_VAR 0 3
84555: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
84556: LD_INT 0
84558: PPUSH
// if not mc_bases [ base ] then
84559: NOP4
84563: PUSH
84564: NOP4
84568: ARRAY
84569: NOT
84570: IFFALSE 84574
// exit ;
84572: GO 84611
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
84574: NOP4
84578: PUSH
84579: NOP4
84583: PPUSH
84584: NOP4
84588: PPUSH
84589: NOP4
84593: PUSH
84594: NOP4
84598: ARRAY
84599: PUSH
84600: NOP4
84604: UNION
84605: PPUSH
84606: NOP4
84610: ST_TO_ADDR
// end ;
84611: LD_VAR 0 3
84615: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
84616: LD_INT 0
84618: PPUSH
// if not mc_bases [ base ] then
84619: NOP4
84623: PUSH
84624: NOP4
84628: ARRAY
84629: NOT
84630: IFFALSE 84634
// exit ;
84632: GO 84659
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
84634: NOP4
84638: PUSH
84639: NOP4
84643: PPUSH
84644: NOP4
84648: PPUSH
84649: NOP4
84653: PPUSH
84654: NOP4
84658: ST_TO_ADDR
// end ;
84659: LD_VAR 0 3
84663: RET
// export function MC_InsertProduceList ( base , components ) ; begin
84664: LD_INT 0
84666: PPUSH
// if not mc_bases [ base ] then
84667: NOP4
84671: PUSH
84672: NOP4
84676: ARRAY
84677: NOT
84678: IFFALSE 84682
// exit ;
84680: GO 84719
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
84682: NOP4
84686: PUSH
84687: NOP4
84691: PPUSH
84692: NOP4
84696: PPUSH
84697: NOP4
84701: PUSH
84702: NOP4
84706: ARRAY
84707: PUSH
84708: NOP4
84712: ADD
84713: PPUSH
84714: NOP4
84718: ST_TO_ADDR
// end ;
84719: LD_VAR 0 3
84723: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
84724: LD_INT 0
84726: PPUSH
// if not mc_bases [ base ] then
84727: NOP4
84731: PUSH
84732: NOP4
84736: ARRAY
84737: NOT
84738: IFFALSE 84742
// exit ;
84740: GO 84796
// mc_defender := Replace ( mc_defender , base , deflist ) ;
84742: NOP4
84746: PUSH
84747: NOP4
84751: PPUSH
84752: NOP4
84756: PPUSH
84757: NOP4
84761: PPUSH
84762: NOP4
84766: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
84767: NOP4
84771: PUSH
84772: NOP4
84776: PPUSH
84777: NOP4
84781: PPUSH
84782: NOP4
84786: PUSH
84787: LD_INT 0
84789: PLUS
84790: PPUSH
84791: NOP4
84795: ST_TO_ADDR
// end ;
84796: LD_VAR 0 3
84800: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
84801: LD_INT 0
84803: PPUSH
// if not mc_bases [ base ] then
84804: NOP4
84808: PUSH
84809: NOP4
84813: ARRAY
84814: NOT
84815: IFFALSE 84819
// exit ;
84817: GO 84844
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
84819: NOP4
84823: PUSH
84824: NOP4
84828: PPUSH
84829: NOP4
84833: PPUSH
84834: NOP4
84838: PPUSH
84839: NOP4
84843: ST_TO_ADDR
// end ;
84844: LD_VAR 0 3
84848: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
84849: LD_INT 0
84851: PPUSH
84852: PPUSH
84853: PPUSH
84854: PPUSH
// if not mc_bases [ base ] then
84855: NOP4
84859: PUSH
84860: NOP4
84864: ARRAY
84865: NOT
84866: IFFALSE 84870
// exit ;
84868: GO 84935
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
84870: NOP4
84874: PUSH
84875: NOP4
84879: PPUSH
84880: NOP4
84884: PUSH
84885: NOP4
84889: PUSH
84890: NOP4
84894: ARRAY
84895: PUSH
84896: LD_INT 1
84898: PLUS
84899: PUSH
84900: EMPTY
84901: LIST
84902: LIST
84903: PPUSH
84904: NOP4
84908: PUSH
84909: NOP4
84913: PUSH
84914: NOP4
84918: PUSH
84919: NOP4
84923: PUSH
84924: EMPTY
84925: LIST
84926: LIST
84927: LIST
84928: LIST
84929: PPUSH
84930: NOP4
84934: ST_TO_ADDR
// end ;
84935: LD_VAR 0 5
84939: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
84940: LD_INT 0
84942: PPUSH
// if not mc_bases [ base ] then
84943: NOP4
84947: PUSH
84948: NOP4
84952: ARRAY
84953: NOT
84954: IFFALSE 84958
// exit ;
84956: GO 84983
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
84958: NOP4
84962: PUSH
84963: NOP4
84967: PPUSH
84968: NOP4
84972: PPUSH
84973: NOP4
84977: PPUSH
84978: NOP4
84982: ST_TO_ADDR
// end ;
84983: LD_VAR 0 3
84987: RET
// export function MC_GetMinesField ( base ) ; begin
84988: LD_INT 0
84990: PPUSH
// result := mc_mines [ base ] ;
84991: NOP4
84995: PUSH
84996: NOP4
85000: PUSH
85001: NOP4
85005: ARRAY
85006: ST_TO_ADDR
// end ;
85007: LD_VAR 0 2
85011: RET
// export function MC_GetProduceList ( base ) ; begin
85012: LD_INT 0
85014: PPUSH
// result := mc_produce [ base ] ;
85015: NOP4
85019: PUSH
85020: NOP4
85024: PUSH
85025: NOP4
85029: ARRAY
85030: ST_TO_ADDR
// end ;
85031: LD_VAR 0 2
85035: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
85036: LD_INT 0
85038: PPUSH
85039: PPUSH
// if not mc_bases then
85040: NOP4
85044: NOT
85045: IFFALSE 85049
// exit ;
85047: GO 85114
// if mc_bases [ base ] then
85049: NOP4
85053: PUSH
85054: NOP4
85058: ARRAY
85059: IFFALSE 85114
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85061: NOP4
85065: PUSH
85066: NOP4
85070: PUSH
85071: NOP4
85075: ARRAY
85076: PPUSH
85077: LD_INT 30
85079: PUSH
85080: NOP4
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: PPUSH
85089: NOP4
85093: ST_TO_ADDR
// if result then
85094: NOP4
85098: IFFALSE 85114
// result := result [ 1 ] ;
85100: NOP4
85104: PUSH
85105: NOP4
85109: PUSH
85110: LD_INT 1
85112: ARRAY
85113: ST_TO_ADDR
// end ; end ;
85114: LD_VAR 0 3
85118: RET
// export function MC_SetTame ( base , area ) ; begin
85119: LD_INT 0
85121: PPUSH
// if not mc_bases or not base then
85122: NOP4
85126: NOT
85127: PUSH
85128: NOP4
85132: NOT
85133: OR
85134: IFFALSE 85138
// exit ;
85136: GO 85163
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
85138: NOP4
85142: PUSH
85143: NOP4
85147: PPUSH
85148: NOP4
85152: PPUSH
85153: NOP4
85157: PPUSH
85158: NOP4
85162: ST_TO_ADDR
// end ;
85163: LD_VAR 0 3
85167: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
85168: LD_INT 0
85170: PPUSH
85171: PPUSH
// if not mc_bases or not base then
85172: NOP4
85176: NOT
85177: PUSH
85178: NOP4
85182: NOT
85183: OR
85184: IFFALSE 85188
// exit ;
85186: GO 85290
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
85188: NOP4
85192: PUSH
85193: NOP4
85197: PUSH
85198: NOP4
85202: ARRAY
85203: PPUSH
85204: LD_INT 30
85206: PUSH
85207: NOP4
85211: PUSH
85212: EMPTY
85213: LIST
85214: LIST
85215: PPUSH
85216: NOP4
85220: ST_TO_ADDR
// if not tmp then
85221: NOP4
85225: NOT
85226: IFFALSE 85230
// exit ;
85228: GO 85290
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
85230: NOP4
85234: PUSH
85235: NOP4
85239: PPUSH
85240: NOP4
85244: PPUSH
85245: NOP4
85249: PUSH
85250: NOP4
85254: ARRAY
85255: PPUSH
85256: NOP4
85260: PUSH
85261: NOP4
85265: ARRAY
85266: PUSH
85267: LD_INT 1
85269: PLUS
85270: PPUSH
85271: NOP4
85275: PUSH
85276: LD_INT 1
85278: ARRAY
85279: PPUSH
85280: NOP4
85284: PPUSH
85285: NOP4
85289: ST_TO_ADDR
// end ;
85290: LD_VAR 0 3
85294: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85295: LD_INT 0
85297: PPUSH
85298: PPUSH
// if not mc_bases or not base or not kinds then
85299: NOP4
85303: NOT
85304: PUSH
85305: NOP4
85309: NOT
85310: OR
85311: PUSH
85312: NOP4
85316: NOT
85317: OR
85318: IFFALSE 85322
// exit ;
85320: GO 85383
// for i in kinds do
85322: NOP4
85326: PUSH
85327: NOP4
85331: PUSH
85332: FOR_IN
85333: IFFALSE 85381
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85335: NOP4
85339: PUSH
85340: NOP4
85344: PPUSH
85345: NOP4
85349: PUSH
85350: NOP4
85354: PUSH
85355: NOP4
85359: ARRAY
85360: PUSH
85361: LD_INT 1
85363: PLUS
85364: PUSH
85365: EMPTY
85366: LIST
85367: LIST
85368: PPUSH
85369: NOP4
85373: PPUSH
85374: NOP4
85378: ST_TO_ADDR
85379: GO 85332
85381: POP
85382: POP
// end ;
85383: LD_VAR 0 3
85387: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85388: LD_INT 0
85390: PPUSH
// if not mc_bases or not base or not areas then
85391: NOP4
85395: NOT
85396: PUSH
85397: NOP4
85401: NOT
85402: OR
85403: PUSH
85404: NOP4
85408: NOT
85409: OR
85410: IFFALSE 85414
// exit ;
85412: GO 85439
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85414: NOP4
85418: PUSH
85419: NOP4
85423: PPUSH
85424: NOP4
85428: PPUSH
85429: NOP4
85433: PPUSH
85434: NOP4
85438: ST_TO_ADDR
// end ;
85439: LD_VAR 0 3
85443: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85444: LD_INT 0
85446: PPUSH
// if not mc_bases or not base or not teleports_exit then
85447: NOP4
85451: NOT
85452: PUSH
85453: NOP4
85457: NOT
85458: OR
85459: PUSH
85460: NOP4
85464: NOT
85465: OR
85466: IFFALSE 85470
// exit ;
85468: GO 85495
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85470: NOP4
85474: PUSH
85475: NOP4
85479: PPUSH
85480: NOP4
85484: PPUSH
85485: NOP4
85489: PPUSH
85490: NOP4
85494: ST_TO_ADDR
// end ;
85495: LD_VAR 0 3
85499: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
85500: LD_INT 0
85502: PPUSH
85503: PPUSH
85504: PPUSH
// if not mc_bases or not base or not ext_list then
85505: NOP4
85509: NOT
85510: PUSH
85511: NOP4
85515: NOT
85516: OR
85517: PUSH
85518: NOP4
85522: NOT
85523: OR
85524: IFFALSE 85528
// exit ;
85526: GO 85701
// tmp := GetFacExtXYD ( x , y , d ) ;
85528: NOP4
85532: PUSH
85533: NOP4
85537: PPUSH
85538: NOP4
85542: PPUSH
85543: NOP4
85547: PPUSH
85548: NOP4
85552: ST_TO_ADDR
// if not tmp then
85553: NOP4
85557: NOT
85558: IFFALSE 85562
// exit ;
85560: GO 85701
// for i in tmp do
85562: NOP4
85566: PUSH
85567: NOP4
85571: PUSH
85572: FOR_IN
85573: IFFALSE 85699
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
85575: NOP4
85579: PUSH
85580: NOP4
85584: PPUSH
85585: NOP4
85589: PPUSH
85590: NOP4
85594: PUSH
85595: NOP4
85599: ARRAY
85600: PPUSH
85601: NOP4
85605: PUSH
85606: NOP4
85610: ARRAY
85611: PUSH
85612: LD_INT 1
85614: PLUS
85615: PPUSH
85616: NOP4
85620: PUSH
85621: LD_INT 1
85623: ARRAY
85624: PUSH
85625: NOP4
85629: PUSH
85630: LD_INT 1
85632: ARRAY
85633: PUSH
85634: NOP4
85638: PUSH
85639: LD_INT 2
85641: ARRAY
85642: PUSH
85643: NOP4
85647: PUSH
85648: LD_INT 3
85650: ARRAY
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: LIST
85656: LIST
85657: PPUSH
85658: NOP4
85662: PPUSH
85663: NOP4
85667: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
85668: NOP4
85672: PUSH
85673: NOP4
85677: PPUSH
85678: LD_INT 1
85680: PPUSH
85681: NOP4
85685: ST_TO_ADDR
// if not ext_list then
85686: NOP4
85690: NOT
85691: IFFALSE 85697
// exit ;
85693: POP
85694: POP
85695: GO 85701
// end ;
85697: GO 85572
85699: POP
85700: POP
// end ;
85701: LD_VAR 0 6
85705: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
85706: LD_INT 0
85708: PPUSH
// if not mc_bases or not base or not weapon_list then
85709: NOP4
85713: NOT
85714: PUSH
85715: NOP4
85719: NOT
85720: OR
85721: PUSH
85722: NOP4
85726: NOT
85727: OR
85728: IFFALSE 85732
// exit ;
85730: GO 85757
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
85732: NOP4
85736: PUSH
85737: NOP4
85741: PPUSH
85742: NOP4
85746: PPUSH
85747: NOP4
85751: PPUSH
85752: NOP4
85756: ST_TO_ADDR
// end ;
85757: LD_VAR 0 3
85761: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
85762: LD_INT 0
85764: PPUSH
// if not mc_bases or not base or not tech_list then
85765: NOP4
85769: NOT
85770: PUSH
85771: NOP4
85775: NOT
85776: OR
85777: PUSH
85778: NOP4
85782: NOT
85783: OR
85784: IFFALSE 85788
// exit ;
85786: GO 85813
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
85788: NOP4
85792: PUSH
85793: NOP4
85797: PPUSH
85798: NOP4
85802: PPUSH
85803: NOP4
85807: PPUSH
85808: NOP4
85812: ST_TO_ADDR
// end ;
85813: LD_VAR 0 3
85817: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
85818: LD_INT 0
85820: PPUSH
// if not mc_bases or not parking_area or not base then
85821: NOP4
85825: NOT
85826: PUSH
85827: NOP4
85831: NOT
85832: OR
85833: PUSH
85834: NOP4
85838: NOT
85839: OR
85840: IFFALSE 85844
// exit ;
85842: GO 85869
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
85844: NOP4
85848: PUSH
85849: NOP4
85853: PPUSH
85854: NOP4
85858: PPUSH
85859: NOP4
85863: PPUSH
85864: NOP4
85868: ST_TO_ADDR
// end ;
85869: LD_VAR 0 3
85873: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
85874: LD_INT 0
85876: PPUSH
// if not mc_bases or not base or not scan_area then
85877: NOP4
85881: NOT
85882: PUSH
85883: NOP4
85887: NOT
85888: OR
85889: PUSH
85890: NOP4
85894: NOT
85895: OR
85896: IFFALSE 85900
// exit ;
85898: GO 85925
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
85900: NOP4
85904: PUSH
85905: NOP4
85909: PPUSH
85910: NOP4
85914: PPUSH
85915: NOP4
85919: PPUSH
85920: NOP4
85924: ST_TO_ADDR
// end ;
85925: LD_VAR 0 3
85929: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
85930: LD_INT 0
85932: PPUSH
85933: PPUSH
// if not mc_bases or not base then
85934: NOP4
85938: NOT
85939: PUSH
85940: NOP4
85944: NOT
85945: OR
85946: IFFALSE 85950
// exit ;
85948: GO 86014
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
85950: NOP4
85954: PUSH
85955: LD_INT 1
85957: PUSH
85958: LD_INT 2
85960: PUSH
85961: LD_INT 3
85963: PUSH
85964: LD_INT 4
85966: PUSH
85967: LD_INT 11
85969: PUSH
85970: EMPTY
85971: LIST
85972: LIST
85973: LIST
85974: LIST
85975: LIST
85976: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
85977: NOP4
85981: PUSH
85982: NOP4
85986: PPUSH
85987: NOP4
85991: PPUSH
85992: NOP4
85996: PUSH
85997: NOP4
86001: ARRAY
86002: PUSH
86003: NOP4
86007: DIFF
86008: PPUSH
86009: NOP4
86013: ST_TO_ADDR
// end ;
86014: LD_VAR 0 2
86018: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
86019: LD_INT 0
86021: PPUSH
// result := mc_vehicles [ base ] ;
86022: NOP4
86026: PUSH
86027: NOP4
86031: PUSH
86032: NOP4
86036: ARRAY
86037: ST_TO_ADDR
// if onlyCombat then
86038: NOP4
86042: IFFALSE 86207
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
86044: NOP4
86048: PUSH
86049: NOP4
86053: PUSH
86054: NOP4
86058: PPUSH
86059: LD_INT 2
86061: PUSH
86062: LD_INT 34
86064: PUSH
86065: LD_INT 12
86067: PUSH
86068: EMPTY
86069: LIST
86070: LIST
86071: PUSH
86072: LD_INT 34
86074: PUSH
86075: LD_INT 51
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: PUSH
86082: LD_INT 34
86084: PUSH
86085: NOP4
86089: PUSH
86090: EMPTY
86091: LIST
86092: LIST
86093: PUSH
86094: LD_INT 34
86096: PUSH
86097: LD_INT 32
86099: PUSH
86100: EMPTY
86101: LIST
86102: LIST
86103: PUSH
86104: LD_INT 34
86106: PUSH
86107: LD_INT 13
86109: PUSH
86110: EMPTY
86111: LIST
86112: LIST
86113: PUSH
86114: LD_INT 34
86116: PUSH
86117: LD_INT 52
86119: PUSH
86120: EMPTY
86121: LIST
86122: LIST
86123: PUSH
86124: LD_INT 34
86126: PUSH
86127: LD_INT 14
86129: PUSH
86130: EMPTY
86131: LIST
86132: LIST
86133: PUSH
86134: LD_INT 34
86136: PUSH
86137: LD_INT 53
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: PUSH
86144: LD_INT 34
86146: PUSH
86147: NOP4
86151: PUSH
86152: EMPTY
86153: LIST
86154: LIST
86155: PUSH
86156: LD_INT 34
86158: PUSH
86159: LD_INT 31
86161: PUSH
86162: EMPTY
86163: LIST
86164: LIST
86165: PUSH
86166: LD_INT 34
86168: PUSH
86169: LD_INT 48
86171: PUSH
86172: EMPTY
86173: LIST
86174: LIST
86175: PUSH
86176: LD_INT 34
86178: PUSH
86179: LD_INT 8
86181: PUSH
86182: EMPTY
86183: LIST
86184: LIST
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: LIST
86190: LIST
86191: LIST
86192: LIST
86193: LIST
86194: LIST
86195: LIST
86196: LIST
86197: LIST
86198: LIST
86199: LIST
86200: PPUSH
86201: NOP4
86205: DIFF
86206: ST_TO_ADDR
// end ; end_of_file
86207: LD_VAR 0 3
86211: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
86212: LD_INT 0
86214: PPUSH
86215: PPUSH
86216: PPUSH
// if not mc_bases or not skirmish then
86217: NOP4
86221: NOT
86222: PUSH
86223: NOP4
86227: NOT
86228: OR
86229: IFFALSE 86233
// exit ;
86231: GO 86398
// for i = 1 to mc_bases do
86233: NOP4
86237: PUSH
86238: DOUBLE
86239: LD_INT 1
86241: DEC
86242: ST_TO_ADDR
86243: NOP4
86247: PUSH
86248: FOR_TO
86249: IFFALSE 86396
// begin if sci in mc_bases [ i ] then
86251: NOP4
86255: PUSH
86256: NOP4
86260: PUSH
86261: NOP4
86265: ARRAY
86266: IN
86267: IFFALSE 86394
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
86269: NOP4
86273: PUSH
86274: NOP4
86278: PPUSH
86279: NOP4
86283: PUSH
86284: NOP4
86288: PUSH
86289: NOP4
86293: ARRAY
86294: PUSH
86295: LD_INT 1
86297: PLUS
86298: PUSH
86299: EMPTY
86300: LIST
86301: LIST
86302: PPUSH
86303: NOP4
86307: PPUSH
86308: NOP4
86312: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86313: NOP4
86317: PUSH
86318: NOP4
86322: PUSH
86323: NOP4
86327: ARRAY
86328: PPUSH
86329: LD_INT 2
86331: PUSH
86332: LD_INT 30
86334: PUSH
86335: LD_INT 0
86337: PUSH
86338: EMPTY
86339: LIST
86340: LIST
86341: PUSH
86342: LD_INT 30
86344: PUSH
86345: LD_INT 1
86347: PUSH
86348: EMPTY
86349: LIST
86350: LIST
86351: PUSH
86352: EMPTY
86353: LIST
86354: LIST
86355: LIST
86356: PPUSH
86357: NOP4
86361: PPUSH
86362: NOP4
86366: PPUSH
86367: NOP4
86371: ST_TO_ADDR
// if tmp then
86372: NOP4
86376: IFFALSE 86392
// ComStandNearbyBuilding ( ape , tmp ) ;
86378: NOP4
86382: PPUSH
86383: NOP4
86387: PPUSH
86388: NOP4
// break ;
86392: GO 86396
// end ; end ;
86394: GO 86248
86396: POP
86397: POP
// end ;
86398: LD_VAR 0 3
86402: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86403: LD_INT 0
86405: PPUSH
86406: PPUSH
86407: PPUSH
// if not mc_bases or not skirmish then
86408: NOP4
86412: NOT
86413: PUSH
86414: NOP4
86418: NOT
86419: OR
86420: IFFALSE 86424
// exit ;
86422: GO 86513
// for i = 1 to mc_bases do
86424: NOP4
86428: PUSH
86429: DOUBLE
86430: LD_INT 1
86432: DEC
86433: ST_TO_ADDR
86434: NOP4
86438: PUSH
86439: FOR_TO
86440: IFFALSE 86511
// begin if building in mc_busy_turret_list [ i ] then
86442: NOP4
86446: PUSH
86447: NOP4
86451: PUSH
86452: NOP4
86456: ARRAY
86457: IN
86458: IFFALSE 86509
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86460: NOP4
86464: PUSH
86465: NOP4
86469: PUSH
86470: NOP4
86474: ARRAY
86475: PUSH
86476: NOP4
86480: DIFF
86481: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86482: NOP4
86486: PUSH
86487: NOP4
86491: PPUSH
86492: NOP4
86496: PPUSH
86497: NOP4
86501: PPUSH
86502: NOP4
86506: ST_TO_ADDR
// break ;
86507: GO 86511
// end ; end ;
86509: GO 86439
86511: POP
86512: POP
// end ;
86513: LD_VAR 0 3
86517: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
86518: LD_INT 0
86520: PPUSH
86521: PPUSH
86522: PPUSH
// if not mc_bases or not skirmish then
86523: NOP4
86527: NOT
86528: PUSH
86529: NOP4
86533: NOT
86534: OR
86535: IFFALSE 86539
// exit ;
86537: GO 86738
// for i = 1 to mc_bases do
86539: NOP4
86543: PUSH
86544: DOUBLE
86545: LD_INT 1
86547: DEC
86548: ST_TO_ADDR
86549: NOP4
86553: PUSH
86554: FOR_TO
86555: IFFALSE 86736
// if building in mc_bases [ i ] then
86557: NOP4
86561: PUSH
86562: NOP4
86566: PUSH
86567: NOP4
86571: ARRAY
86572: IN
86573: IFFALSE 86734
// begin tmp := mc_bases [ i ] diff building ;
86575: NOP4
86579: PUSH
86580: NOP4
86584: PUSH
86585: NOP4
86589: ARRAY
86590: PUSH
86591: NOP4
86595: DIFF
86596: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
86597: NOP4
86601: PUSH
86602: NOP4
86606: PPUSH
86607: NOP4
86611: PPUSH
86612: NOP4
86616: PPUSH
86617: NOP4
86621: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
86622: NOP4
86626: PUSH
86627: NOP4
86631: PUSH
86632: NOP4
86636: ARRAY
86637: IN
86638: IFFALSE 86677
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
86640: NOP4
86644: PUSH
86645: NOP4
86649: PPUSH
86650: NOP4
86654: PPUSH
86655: NOP4
86659: PUSH
86660: NOP4
86664: ARRAY
86665: PUSH
86666: NOP4
86670: DIFF
86671: PPUSH
86672: NOP4
86676: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
86677: NOP4
86681: PUSH
86682: NOP4
86686: PUSH
86687: NOP4
86691: ARRAY
86692: IN
86693: IFFALSE 86732
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
86695: NOP4
86699: PUSH
86700: NOP4
86704: PPUSH
86705: NOP4
86709: PPUSH
86710: NOP4
86714: PUSH
86715: NOP4
86719: ARRAY
86720: PUSH
86721: NOP4
86725: DIFF
86726: PPUSH
86727: NOP4
86731: ST_TO_ADDR
// break ;
86732: GO 86736
// end ;
86734: GO 86554
86736: POP
86737: POP
// end ;
86738: LD_VAR 0 4
86742: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
86743: LD_INT 0
86745: PPUSH
86746: PPUSH
86747: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
86748: NOP4
86752: NOT
86753: PUSH
86754: NOP4
86758: NOT
86759: OR
86760: PUSH
86761: NOP4
86765: PUSH
86766: NOP4
86770: IN
86771: NOT
86772: OR
86773: IFFALSE 86777
// exit ;
86775: GO 86900
// for i = 1 to mc_vehicles do
86777: NOP4
86781: PUSH
86782: DOUBLE
86783: LD_INT 1
86785: DEC
86786: ST_TO_ADDR
86787: NOP4
86791: PUSH
86792: FOR_TO
86793: IFFALSE 86898
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
86795: NOP4
86799: PUSH
86800: NOP4
86804: PUSH
86805: NOP4
86809: ARRAY
86810: IN
86811: PUSH
86812: NOP4
86816: PUSH
86817: NOP4
86821: PUSH
86822: NOP4
86826: ARRAY
86827: IN
86828: OR
86829: IFFALSE 86896
// begin tmp := mc_vehicles [ i ] diff old ;
86831: NOP4
86835: PUSH
86836: NOP4
86840: PUSH
86841: NOP4
86845: ARRAY
86846: PUSH
86847: NOP4
86851: DIFF
86852: ST_TO_ADDR
// tmp := tmp diff new ;
86853: NOP4
86857: PUSH
86858: NOP4
86862: PUSH
86863: NOP4
86867: DIFF
86868: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
86869: NOP4
86873: PUSH
86874: NOP4
86878: PPUSH
86879: NOP4
86883: PPUSH
86884: NOP4
86888: PPUSH
86889: NOP4
86893: ST_TO_ADDR
// break ;
86894: GO 86898
// end ;
86896: GO 86792
86898: POP
86899: POP
// end ;
86900: LD_VAR 0 5
86904: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
86905: LD_INT 0
86907: PPUSH
86908: PPUSH
86909: PPUSH
86910: PPUSH
// if not mc_bases or not skirmish then
86911: NOP4
86915: NOT
86916: PUSH
86917: NOP4
86921: NOT
86922: OR
86923: IFFALSE 86927
// exit ;
86925: GO 87310
// side := GetSide ( vehicle ) ;
86927: NOP4
86931: PUSH
86932: NOP4
86936: PPUSH
86937: NOP4
86941: ST_TO_ADDR
// for i = 1 to mc_bases do
86942: NOP4
86946: PUSH
86947: DOUBLE
86948: LD_INT 1
86950: DEC
86951: ST_TO_ADDR
86952: NOP4
86956: PUSH
86957: FOR_TO
86958: IFFALSE 87308
// begin if factory in mc_bases [ i ] then
86960: NOP4
86964: PUSH
86965: NOP4
86969: PUSH
86970: NOP4
86974: ARRAY
86975: IN
86976: IFFALSE 87306
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
86978: NOP4
86982: PUSH
86983: NOP4
86987: ARRAY
86988: PUSH
86989: NOP4
86993: PUSH
86994: NOP4
86998: ARRAY
86999: LESS
87000: PUSH
87001: NOP4
87005: PPUSH
87006: NOP4
87010: PUSH
87011: LD_INT 31
87013: PUSH
87014: LD_INT 32
87016: PUSH
87017: LD_INT 51
87019: PUSH
87020: NOP4
87024: PUSH
87025: LD_INT 12
87027: PUSH
87028: LD_INT 30
87030: PUSH
87031: NOP4
87035: PUSH
87036: LD_INT 11
87038: PUSH
87039: LD_INT 53
87041: PUSH
87042: LD_INT 14
87044: PUSH
87045: NOP4
87049: PUSH
87050: LD_INT 29
87052: PUSH
87053: NOP4
87057: PUSH
87058: LD_INT 13
87060: PUSH
87061: LD_INT 52
87063: PUSH
87064: LD_INT 48
87066: PUSH
87067: LD_INT 8
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: LIST
87074: LIST
87075: LIST
87076: LIST
87077: LIST
87078: LIST
87079: LIST
87080: LIST
87081: LIST
87082: LIST
87083: LIST
87084: LIST
87085: LIST
87086: LIST
87087: LIST
87088: IN
87089: NOT
87090: AND
87091: IFFALSE 87132
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
87093: NOP4
87097: PUSH
87098: NOP4
87102: PPUSH
87103: NOP4
87107: PPUSH
87108: NOP4
87112: PUSH
87113: NOP4
87117: ARRAY
87118: PUSH
87119: NOP4
87123: ADD
87124: PPUSH
87125: NOP4
87129: ST_TO_ADDR
87130: GO 87176
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
87132: NOP4
87136: PUSH
87137: NOP4
87141: PPUSH
87142: NOP4
87146: PUSH
87147: NOP4
87151: PUSH
87152: NOP4
87156: ARRAY
87157: PUSH
87158: LD_INT 1
87160: PLUS
87161: PUSH
87162: EMPTY
87163: LIST
87164: LIST
87165: PPUSH
87166: NOP4
87170: PPUSH
87171: NOP4
87175: ST_TO_ADDR
// if not mc_scan [ i ] then
87176: NOP4
87180: PUSH
87181: NOP4
87185: ARRAY
87186: NOT
87187: IFFALSE 87306
// begin if GetControl ( vehicle ) = control_remote then
87189: NOP4
87193: PPUSH
87194: NOP4
87198: PUSH
87199: LD_INT 2
87201: EQUAL
87202: IFFALSE 87222
// repeat wait ( 0 0$1 ) ;
87204: LD_INT 35
87206: PPUSH
87207: NOP4
// until IsControledBy ( vehicle ) ;
87211: NOP4
87215: PPUSH
87216: NOP4
87220: IFFALSE 87204
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
87222: NOP4
87226: PPUSH
87227: NOP4
87231: PUSH
87232: NOP4
87236: ARRAY
87237: PPUSH
87238: NOP4
// if GetControl ( vehicle ) <> control_manual then
87242: NOP4
87246: PPUSH
87247: NOP4
87251: PUSH
87252: LD_INT 1
87254: NONEQUAL
87255: IFFALSE 87259
// break ;
87257: GO 87308
// repeat wait ( 0 0$1 ) ;
87259: LD_INT 35
87261: PPUSH
87262: NOP4
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
87266: NOP4
87270: PPUSH
87271: NOP4
87275: PUSH
87276: NOP4
87280: ARRAY
87281: PPUSH
87282: NOP4
87286: IFFALSE 87259
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87288: NOP4
87292: PPUSH
87293: NOP4
87297: PPUSH
87298: NOP4
// exit ;
87302: POP
87303: POP
87304: GO 87310
// end ; end ; end ;
87306: GO 86957
87308: POP
87309: POP
// end ;
87310: LD_VAR 0 3
87314: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87315: LD_INT 0
87317: PPUSH
87318: PPUSH
87319: PPUSH
87320: PPUSH
// if not mc_bases or not skirmish then
87321: NOP4
87325: NOT
87326: PUSH
87327: NOP4
87331: NOT
87332: OR
87333: IFFALSE 87337
// exit ;
87335: GO 87690
// repeat wait ( 0 0$1 ) ;
87337: LD_INT 35
87339: PPUSH
87340: NOP4
// until GetResourceAmountXY ( x , y ) ;
87344: NOP4
87348: PPUSH
87349: NOP4
87353: PPUSH
87354: NOP4
87358: IFFALSE 87337
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87360: NOP4
87364: PPUSH
87365: NOP4
87369: PPUSH
87370: NOP4
87374: PUSH
87375: LD_INT 4
87377: EQUAL
87378: IFFALSE 87382
// exit ;
87380: GO 87690
// for i = 1 to mc_bases do
87382: NOP4
87386: PUSH
87387: DOUBLE
87388: LD_INT 1
87390: DEC
87391: ST_TO_ADDR
87392: NOP4
87396: PUSH
87397: FOR_TO
87398: IFFALSE 87688
// begin if mc_crates_area [ i ] then
87400: NOP4
87404: PUSH
87405: NOP4
87409: ARRAY
87410: IFFALSE 87521
// for j in mc_crates_area [ i ] do
87412: NOP4
87416: PUSH
87417: NOP4
87421: PUSH
87422: NOP4
87426: ARRAY
87427: PUSH
87428: FOR_IN
87429: IFFALSE 87519
// if InArea ( x , y , j ) then
87431: NOP4
87435: PPUSH
87436: NOP4
87440: PPUSH
87441: NOP4
87445: PPUSH
87446: NOP4
87450: IFFALSE 87517
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87452: NOP4
87456: PUSH
87457: NOP4
87461: PPUSH
87462: NOP4
87466: PUSH
87467: NOP4
87471: PUSH
87472: NOP4
87476: ARRAY
87477: PUSH
87478: LD_INT 1
87480: PLUS
87481: PUSH
87482: EMPTY
87483: LIST
87484: LIST
87485: PPUSH
87486: NOP4
87490: PUSH
87491: NOP4
87495: PUSH
87496: NOP4
87500: PUSH
87501: EMPTY
87502: LIST
87503: LIST
87504: LIST
87505: PPUSH
87506: NOP4
87510: ST_TO_ADDR
// exit ;
87511: POP
87512: POP
87513: POP
87514: POP
87515: GO 87690
// end ;
87517: GO 87428
87519: POP
87520: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
87521: NOP4
87525: PUSH
87526: NOP4
87530: PUSH
87531: NOP4
87535: ARRAY
87536: PPUSH
87537: LD_INT 2
87539: PUSH
87540: LD_INT 30
87542: PUSH
87543: LD_INT 0
87545: PUSH
87546: EMPTY
87547: LIST
87548: LIST
87549: PUSH
87550: LD_INT 30
87552: PUSH
87553: LD_INT 1
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: PUSH
87560: EMPTY
87561: LIST
87562: LIST
87563: LIST
87564: PPUSH
87565: NOP4
87569: ST_TO_ADDR
// if not depot then
87570: NOP4
87574: NOT
87575: IFFALSE 87579
// continue ;
87577: GO 87397
// for j in depot do
87579: NOP4
87583: PUSH
87584: NOP4
87588: PUSH
87589: FOR_IN
87590: IFFALSE 87684
// if GetDistUnitXY ( j , x , y ) < 30 then
87592: NOP4
87596: PPUSH
87597: NOP4
87601: PPUSH
87602: NOP4
87606: PPUSH
87607: NOP4
87611: PUSH
87612: LD_INT 30
87614: LESS
87615: IFFALSE 87682
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87617: NOP4
87621: PUSH
87622: NOP4
87626: PPUSH
87627: NOP4
87631: PUSH
87632: NOP4
87636: PUSH
87637: NOP4
87641: ARRAY
87642: PUSH
87643: LD_INT 1
87645: PLUS
87646: PUSH
87647: EMPTY
87648: LIST
87649: LIST
87650: PPUSH
87651: NOP4
87655: PUSH
87656: NOP4
87660: PUSH
87661: NOP4
87665: PUSH
87666: EMPTY
87667: LIST
87668: LIST
87669: LIST
87670: PPUSH
87671: NOP4
87675: ST_TO_ADDR
// exit ;
87676: POP
87677: POP
87678: POP
87679: POP
87680: GO 87690
// end ;
87682: GO 87589
87684: POP
87685: POP
// end ;
87686: GO 87397
87688: POP
87689: POP
// end ;
87690: LD_VAR 0 6
87694: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
87695: LD_INT 0
87697: PPUSH
87698: PPUSH
87699: PPUSH
87700: PPUSH
// if not mc_bases or not skirmish then
87701: NOP4
87705: NOT
87706: PUSH
87707: NOP4
87711: NOT
87712: OR
87713: IFFALSE 87717
// exit ;
87715: GO 87994
// side := GetSide ( lab ) ;
87717: NOP4
87721: PUSH
87722: NOP4
87726: PPUSH
87727: NOP4
87731: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
87732: NOP4
87736: PUSH
87737: NOP4
87741: IN
87742: NOT
87743: PUSH
87744: NOP4
87748: NOT
87749: OR
87750: PUSH
87751: NOP4
87755: NOT
87756: OR
87757: IFFALSE 87761
// exit ;
87759: GO 87994
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
87761: NOP4
87765: PUSH
87766: NOP4
87770: PPUSH
87771: NOP4
87775: PPUSH
87776: NOP4
87780: PUSH
87781: NOP4
87785: ARRAY
87786: PUSH
87787: NOP4
87791: DIFF
87792: PPUSH
87793: NOP4
87797: ST_TO_ADDR
// for i = 1 to mc_bases do
87798: NOP4
87802: PUSH
87803: DOUBLE
87804: LD_INT 1
87806: DEC
87807: ST_TO_ADDR
87808: NOP4
87812: PUSH
87813: FOR_TO
87814: IFFALSE 87992
// begin if lab in mc_bases [ i ] then
87816: NOP4
87820: PUSH
87821: NOP4
87825: PUSH
87826: NOP4
87830: ARRAY
87831: IN
87832: IFFALSE 87990
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
87834: NOP4
87838: PUSH
87839: LD_INT 11
87841: PUSH
87842: LD_INT 4
87844: PUSH
87845: LD_INT 3
87847: PUSH
87848: LD_INT 2
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: LIST
87855: LIST
87856: IN
87857: PUSH
87858: NOP4
87862: PUSH
87863: NOP4
87867: ARRAY
87868: AND
87869: IFFALSE 87990
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
87871: NOP4
87875: PUSH
87876: NOP4
87880: PUSH
87881: NOP4
87885: ARRAY
87886: PUSH
87887: LD_INT 1
87889: ARRAY
87890: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
87891: NOP4
87895: PUSH
87896: NOP4
87900: PPUSH
87901: NOP4
87905: PPUSH
87906: EMPTY
87907: PPUSH
87908: NOP4
87912: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
87913: NOP4
87917: PPUSH
87918: LD_INT 0
87920: PPUSH
87921: NOP4
// ComExitBuilding ( tmp ) ;
87925: NOP4
87929: PPUSH
87930: NOP4
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
87934: NOP4
87938: PUSH
87939: NOP4
87943: PPUSH
87944: NOP4
87948: PPUSH
87949: NOP4
87953: PUSH
87954: NOP4
87958: ARRAY
87959: PPUSH
87960: LD_INT 1
87962: PPUSH
87963: NOP4
87967: PPUSH
87968: NOP4
87972: PPUSH
87973: NOP4
87977: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
87978: NOP4
87982: PPUSH
87983: LD_INT 112
87985: PPUSH
87986: NOP4
// end ; end ; end ;
87990: GO 87813
87992: POP
87993: POP
// end ;
87994: LD_VAR 0 3
87998: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
87999: LD_INT 0
88001: PPUSH
88002: PPUSH
88003: PPUSH
88004: PPUSH
88005: PPUSH
88006: PPUSH
88007: PPUSH
88008: PPUSH
// if not mc_bases or not skirmish then
88009: NOP4
88013: NOT
88014: PUSH
88015: NOP4
88019: NOT
88020: OR
88021: IFFALSE 88025
// exit ;
88023: GO 89041
// for i = 1 to mc_bases do
88025: NOP4
88029: PUSH
88030: DOUBLE
88031: LD_INT 1
88033: DEC
88034: ST_TO_ADDR
88035: NOP4
88039: PUSH
88040: FOR_TO
88041: IFFALSE 89039
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
88043: NOP4
88047: PUSH
88048: NOP4
88052: PUSH
88053: NOP4
88057: ARRAY
88058: IN
88059: PUSH
88060: NOP4
88064: PUSH
88065: NOP4
88069: PUSH
88070: NOP4
88074: ARRAY
88075: IN
88076: OR
88077: PUSH
88078: NOP4
88082: PUSH
88083: NOP4
88087: PUSH
88088: NOP4
88092: ARRAY
88093: IN
88094: OR
88095: PUSH
88096: NOP4
88100: PUSH
88101: NOP4
88105: PUSH
88106: NOP4
88110: ARRAY
88111: IN
88112: OR
88113: PUSH
88114: NOP4
88118: PUSH
88119: NOP4
88123: PUSH
88124: NOP4
88128: ARRAY
88129: IN
88130: OR
88131: IFFALSE 89037
// begin if un in mc_ape [ i ] then
88133: NOP4
88137: PUSH
88138: NOP4
88142: PUSH
88143: NOP4
88147: ARRAY
88148: IN
88149: IFFALSE 88188
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
88151: NOP4
88155: PUSH
88156: NOP4
88160: PPUSH
88161: NOP4
88165: PPUSH
88166: NOP4
88170: PUSH
88171: NOP4
88175: ARRAY
88176: PUSH
88177: NOP4
88181: DIFF
88182: PPUSH
88183: NOP4
88187: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
88188: NOP4
88192: PUSH
88193: NOP4
88197: PUSH
88198: NOP4
88202: ARRAY
88203: IN
88204: IFFALSE 88228
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88206: NOP4
88210: PUSH
88211: NOP4
88215: PPUSH
88216: NOP4
88220: PPUSH
88221: EMPTY
88222: PPUSH
88223: NOP4
88227: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
88228: NOP4
88232: PPUSH
88233: NOP4
88237: PUSH
88238: LD_INT 2
88240: EQUAL
88241: PUSH
88242: NOP4
88246: PPUSH
88247: NOP4
88251: PUSH
88252: LD_INT 20
88254: EQUAL
88255: PUSH
88256: NOP4
88260: PUSH
88261: NOP4
88265: PUSH
88266: NOP4
88270: ARRAY
88271: IN
88272: OR
88273: AND
88274: IFFALSE 88377
// begin fac := MC_GetBuilding ( i , b_factory ) ;
88276: NOP4
88280: PUSH
88281: NOP4
88285: PPUSH
88286: LD_INT 3
88288: PPUSH
88289: NOP4
88293: ST_TO_ADDR
// if fac then
88294: NOP4
88298: IFFALSE 88377
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88300: NOP4
88304: PUSH
88305: NOP4
88309: PPUSH
88310: NOP4
88314: PPUSH
88315: NOP4
88319: PPUSH
88320: NOP4
88324: PPUSH
88325: NOP4
88329: PPUSH
88330: NOP4
88334: PPUSH
88335: NOP4
88339: PPUSH
88340: NOP4
88344: PPUSH
88345: NOP4
88349: PPUSH
88350: NOP4
88354: ST_TO_ADDR
// if components then
88355: NOP4
88359: IFFALSE 88375
// MC_InsertProduceList ( i , components ) ;
88361: NOP4
88365: PPUSH
88366: NOP4
88370: PPUSH
88371: NOP4
// break ;
88375: GO 89039
// end ; end ; if GetType ( un ) = unit_building then
88377: NOP4
88381: PPUSH
88382: NOP4
88386: PUSH
88387: LD_INT 3
88389: EQUAL
88390: IFFALSE 88705
// begin btype := GetBType ( un ) ;
88392: NOP4
88396: PUSH
88397: NOP4
88401: PPUSH
88402: NOP4
88406: ST_TO_ADDR
// if btype = b_warehouse then
88407: NOP4
88411: PUSH
88412: LD_INT 1
88414: EQUAL
88415: IFFALSE 88433
// begin btype := b_depot ;
88417: NOP4
88421: PUSH
88422: LD_INT 0
88424: ST_TO_ADDR
// pos := 1 ;
88425: NOP4
88429: PUSH
88430: LD_INT 1
88432: ST_TO_ADDR
// end ; if btype = b_factory then
88433: NOP4
88437: PUSH
88438: LD_INT 3
88440: EQUAL
88441: IFFALSE 88459
// begin btype := b_workshop ;
88443: NOP4
88447: PUSH
88448: LD_INT 2
88450: ST_TO_ADDR
// pos := 1 ;
88451: NOP4
88455: PUSH
88456: LD_INT 1
88458: ST_TO_ADDR
// end ; if btype = b_barracks then
88459: NOP4
88463: PUSH
88464: LD_INT 5
88466: EQUAL
88467: IFFALSE 88477
// btype := b_armoury ;
88469: NOP4
88473: PUSH
88474: LD_INT 4
88476: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
88477: NOP4
88481: PUSH
88482: LD_INT 7
88484: PUSH
88485: LD_INT 8
88487: PUSH
88488: EMPTY
88489: LIST
88490: LIST
88491: IN
88492: IFFALSE 88502
// btype := b_lab ;
88494: NOP4
88498: PUSH
88499: LD_INT 6
88501: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
88502: NOP4
88506: PUSH
88507: NOP4
88511: PPUSH
88512: NOP4
88516: PUSH
88517: NOP4
88521: PUSH
88522: NOP4
88526: ARRAY
88527: PUSH
88528: LD_INT 1
88530: PLUS
88531: PUSH
88532: EMPTY
88533: LIST
88534: LIST
88535: PPUSH
88536: NOP4
88540: PUSH
88541: NOP4
88545: PPUSH
88546: NOP4
88550: PUSH
88551: NOP4
88555: PPUSH
88556: NOP4
88560: PUSH
88561: NOP4
88565: PPUSH
88566: NOP4
88570: PUSH
88571: EMPTY
88572: LIST
88573: LIST
88574: LIST
88575: LIST
88576: PPUSH
88577: NOP4
88581: ST_TO_ADDR
// if pos = 1 then
88582: NOP4
88586: PUSH
88587: LD_INT 1
88589: EQUAL
88590: IFFALSE 88705
// begin tmp := mc_build_list [ i ] ;
88592: NOP4
88596: PUSH
88597: NOP4
88601: PUSH
88602: NOP4
88606: ARRAY
88607: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
88608: NOP4
88612: PPUSH
88613: LD_INT 2
88615: PUSH
88616: LD_INT 30
88618: PUSH
88619: LD_INT 0
88621: PUSH
88622: EMPTY
88623: LIST
88624: LIST
88625: PUSH
88626: LD_INT 30
88628: PUSH
88629: LD_INT 1
88631: PUSH
88632: EMPTY
88633: LIST
88634: LIST
88635: PUSH
88636: EMPTY
88637: LIST
88638: LIST
88639: LIST
88640: PPUSH
88641: NOP4
88645: IFFALSE 88655
// pos := 2 ;
88647: NOP4
88651: PUSH
88652: LD_INT 2
88654: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
88655: NOP4
88659: PUSH
88660: NOP4
88664: PPUSH
88665: NOP4
88669: PPUSH
88670: NOP4
88674: PPUSH
88675: NOP4
88679: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
88680: NOP4
88684: PUSH
88685: NOP4
88689: PPUSH
88690: NOP4
88694: PPUSH
88695: NOP4
88699: PPUSH
88700: NOP4
88704: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
88705: NOP4
88709: PUSH
88710: NOP4
88714: PUSH
88715: NOP4
88719: ARRAY
88720: IN
88721: IFFALSE 88760
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
88723: NOP4
88727: PUSH
88728: NOP4
88732: PPUSH
88733: NOP4
88737: PPUSH
88738: NOP4
88742: PUSH
88743: NOP4
88747: ARRAY
88748: PUSH
88749: NOP4
88753: DIFF
88754: PPUSH
88755: NOP4
88759: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
88760: NOP4
88764: PUSH
88765: NOP4
88769: PUSH
88770: NOP4
88774: ARRAY
88775: IN
88776: IFFALSE 88815
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
88778: NOP4
88782: PUSH
88783: NOP4
88787: PPUSH
88788: NOP4
88792: PPUSH
88793: NOP4
88797: PUSH
88798: NOP4
88802: ARRAY
88803: PUSH
88804: NOP4
88808: DIFF
88809: PPUSH
88810: NOP4
88814: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
88815: NOP4
88819: PUSH
88820: NOP4
88824: PUSH
88825: NOP4
88829: ARRAY
88830: IN
88831: IFFALSE 88870
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
88833: NOP4
88837: PUSH
88838: NOP4
88842: PPUSH
88843: NOP4
88847: PPUSH
88848: NOP4
88852: PUSH
88853: NOP4
88857: ARRAY
88858: PUSH
88859: NOP4
88863: DIFF
88864: PPUSH
88865: NOP4
88869: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
88870: NOP4
88874: PUSH
88875: NOP4
88879: PUSH
88880: NOP4
88884: ARRAY
88885: IN
88886: IFFALSE 88925
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88888: NOP4
88892: PUSH
88893: NOP4
88897: PPUSH
88898: NOP4
88902: PPUSH
88903: NOP4
88907: PUSH
88908: NOP4
88912: ARRAY
88913: PUSH
88914: NOP4
88918: DIFF
88919: PPUSH
88920: NOP4
88924: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
88925: NOP4
88929: PUSH
88930: NOP4
88934: PUSH
88935: NOP4
88939: ARRAY
88940: IN
88941: IFFALSE 88980
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
88943: NOP4
88947: PUSH
88948: NOP4
88952: PPUSH
88953: NOP4
88957: PPUSH
88958: NOP4
88962: PUSH
88963: NOP4
88967: ARRAY
88968: PUSH
88969: NOP4
88973: DIFF
88974: PPUSH
88975: NOP4
88979: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
88980: NOP4
88984: PUSH
88985: NOP4
88989: PUSH
88990: NOP4
88994: ARRAY
88995: IN
88996: IFFALSE 89035
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
88998: NOP4
89002: PUSH
89003: NOP4
89007: PPUSH
89008: NOP4
89012: PPUSH
89013: NOP4
89017: PUSH
89018: NOP4
89022: ARRAY
89023: PUSH
89024: NOP4
89028: DIFF
89029: PPUSH
89030: NOP4
89034: ST_TO_ADDR
// end ; break ;
89035: GO 89039
// end ;
89037: GO 88040
89039: POP
89040: POP
// end ;
89041: LD_VAR 0 2
89045: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89046: LD_INT 0
89048: PPUSH
89049: PPUSH
89050: PPUSH
// if not mc_bases or not skirmish then
89051: NOP4
89055: NOT
89056: PUSH
89057: NOP4
89061: NOT
89062: OR
89063: IFFALSE 89067
// exit ;
89065: GO 89282
// for i = 1 to mc_bases do
89067: NOP4
89071: PUSH
89072: DOUBLE
89073: LD_INT 1
89075: DEC
89076: ST_TO_ADDR
89077: NOP4
89081: PUSH
89082: FOR_TO
89083: IFFALSE 89280
// begin if building in mc_construct_list [ i ] then
89085: NOP4
89089: PUSH
89090: NOP4
89094: PUSH
89095: NOP4
89099: ARRAY
89100: IN
89101: IFFALSE 89278
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89103: NOP4
89107: PUSH
89108: NOP4
89112: PPUSH
89113: NOP4
89117: PPUSH
89118: NOP4
89122: PUSH
89123: NOP4
89127: ARRAY
89128: PUSH
89129: NOP4
89133: DIFF
89134: PPUSH
89135: NOP4
89139: ST_TO_ADDR
// if building in mc_lab [ i ] then
89140: NOP4
89144: PUSH
89145: NOP4
89149: PUSH
89150: NOP4
89154: ARRAY
89155: IN
89156: IFFALSE 89211
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89158: NOP4
89162: PUSH
89163: NOP4
89167: PPUSH
89168: NOP4
89172: PPUSH
89173: NOP4
89177: PUSH
89178: NOP4
89182: ARRAY
89183: PPUSH
89184: LD_INT 1
89186: PPUSH
89187: NOP4
89191: PUSH
89192: NOP4
89196: ARRAY
89197: PPUSH
89198: LD_INT 0
89200: PPUSH
89201: NOP4
89205: PPUSH
89206: NOP4
89210: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89211: NOP4
89215: PUSH
89216: NOP4
89220: PUSH
89221: NOP4
89225: ARRAY
89226: IN
89227: NOT
89228: IFFALSE 89274
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89230: NOP4
89234: PUSH
89235: NOP4
89239: PPUSH
89240: NOP4
89244: PUSH
89245: NOP4
89249: PUSH
89250: NOP4
89254: ARRAY
89255: PUSH
89256: LD_INT 1
89258: PLUS
89259: PUSH
89260: EMPTY
89261: LIST
89262: LIST
89263: PPUSH
89264: NOP4
89268: PPUSH
89269: NOP4
89273: ST_TO_ADDR
// exit ;
89274: POP
89275: POP
89276: GO 89282
// end ; end ;
89278: GO 89082
89280: POP
89281: POP
// end ;
89282: LD_VAR 0 2
89286: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89287: LD_INT 0
89289: PPUSH
89290: PPUSH
89291: PPUSH
89292: PPUSH
89293: PPUSH
89294: PPUSH
89295: PPUSH
// if not mc_bases or not skirmish then
89296: NOP4
89300: NOT
89301: PUSH
89302: NOP4
89306: NOT
89307: OR
89308: IFFALSE 89312
// exit ;
89310: GO 89973
// for i = 1 to mc_bases do
89312: NOP4
89316: PUSH
89317: DOUBLE
89318: LD_INT 1
89320: DEC
89321: ST_TO_ADDR
89322: NOP4
89326: PUSH
89327: FOR_TO
89328: IFFALSE 89971
// begin if building in mc_construct_list [ i ] then
89330: NOP4
89334: PUSH
89335: NOP4
89339: PUSH
89340: NOP4
89344: ARRAY
89345: IN
89346: IFFALSE 89969
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89348: NOP4
89352: PUSH
89353: NOP4
89357: PPUSH
89358: NOP4
89362: PPUSH
89363: NOP4
89367: PUSH
89368: NOP4
89372: ARRAY
89373: PUSH
89374: NOP4
89378: DIFF
89379: PPUSH
89380: NOP4
89384: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89385: NOP4
89389: PUSH
89390: NOP4
89394: PPUSH
89395: NOP4
89399: PUSH
89400: NOP4
89404: PUSH
89405: NOP4
89409: ARRAY
89410: PUSH
89411: LD_INT 1
89413: PLUS
89414: PUSH
89415: EMPTY
89416: LIST
89417: LIST
89418: PPUSH
89419: NOP4
89423: PPUSH
89424: NOP4
89428: ST_TO_ADDR
// btype := GetBType ( building ) ;
89429: NOP4
89433: PUSH
89434: NOP4
89438: PPUSH
89439: NOP4
89443: ST_TO_ADDR
// side := GetSide ( building ) ;
89444: NOP4
89448: PUSH
89449: NOP4
89453: PPUSH
89454: NOP4
89458: ST_TO_ADDR
// if btype = b_lab then
89459: NOP4
89463: PUSH
89464: LD_INT 6
89466: EQUAL
89467: IFFALSE 89517
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
89469: NOP4
89473: PUSH
89474: NOP4
89478: PPUSH
89479: NOP4
89483: PUSH
89484: NOP4
89488: PUSH
89489: NOP4
89493: ARRAY
89494: PUSH
89495: LD_INT 1
89497: PLUS
89498: PUSH
89499: EMPTY
89500: LIST
89501: LIST
89502: PPUSH
89503: NOP4
89507: PPUSH
89508: NOP4
89512: ST_TO_ADDR
// exit ;
89513: POP
89514: POP
89515: GO 89973
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
89517: NOP4
89521: PUSH
89522: LD_INT 0
89524: PUSH
89525: LD_INT 2
89527: PUSH
89528: LD_INT 4
89530: PUSH
89531: EMPTY
89532: LIST
89533: LIST
89534: LIST
89535: IN
89536: IFFALSE 89660
// begin if btype = b_armoury then
89538: NOP4
89542: PUSH
89543: LD_INT 4
89545: EQUAL
89546: IFFALSE 89556
// btype := b_barracks ;
89548: NOP4
89552: PUSH
89553: LD_INT 5
89555: ST_TO_ADDR
// if btype = b_depot then
89556: NOP4
89560: PUSH
89561: LD_INT 0
89563: EQUAL
89564: IFFALSE 89574
// btype := b_warehouse ;
89566: NOP4
89570: PUSH
89571: LD_INT 1
89573: ST_TO_ADDR
// if btype = b_workshop then
89574: NOP4
89578: PUSH
89579: LD_INT 2
89581: EQUAL
89582: IFFALSE 89592
// btype := b_factory ;
89584: NOP4
89588: PUSH
89589: LD_INT 3
89591: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
89592: NOP4
89596: PPUSH
89597: NOP4
89601: PPUSH
89602: NOP4
89606: PUSH
89607: LD_INT 1
89609: EQUAL
89610: IFFALSE 89656
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
89612: NOP4
89616: PUSH
89617: NOP4
89621: PPUSH
89622: NOP4
89626: PUSH
89627: NOP4
89631: PUSH
89632: NOP4
89636: ARRAY
89637: PUSH
89638: LD_INT 1
89640: PLUS
89641: PUSH
89642: EMPTY
89643: LIST
89644: LIST
89645: PPUSH
89646: NOP4
89650: PPUSH
89651: NOP4
89655: ST_TO_ADDR
// exit ;
89656: POP
89657: POP
89658: GO 89973
// end ; if btype in [ b_bunker , b_turret ] then
89660: NOP4
89664: PUSH
89665: LD_INT 32
89667: PUSH
89668: LD_INT 33
89670: PUSH
89671: EMPTY
89672: LIST
89673: LIST
89674: IN
89675: IFFALSE 89965
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
89677: NOP4
89681: PUSH
89682: NOP4
89686: PPUSH
89687: NOP4
89691: PUSH
89692: NOP4
89696: PUSH
89697: NOP4
89701: ARRAY
89702: PUSH
89703: LD_INT 1
89705: PLUS
89706: PUSH
89707: EMPTY
89708: LIST
89709: LIST
89710: PPUSH
89711: NOP4
89715: PPUSH
89716: NOP4
89720: ST_TO_ADDR
// if btype = b_bunker then
89721: NOP4
89725: PUSH
89726: LD_INT 32
89728: EQUAL
89729: IFFALSE 89965
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
89731: NOP4
89735: PUSH
89736: NOP4
89740: PPUSH
89741: NOP4
89745: PUSH
89746: NOP4
89750: PUSH
89751: NOP4
89755: ARRAY
89756: PUSH
89757: LD_INT 1
89759: PLUS
89760: PUSH
89761: EMPTY
89762: LIST
89763: LIST
89764: PPUSH
89765: NOP4
89769: PPUSH
89770: NOP4
89774: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
89775: NOP4
89779: PUSH
89780: NOP4
89784: PUSH
89785: NOP4
89789: ARRAY
89790: PPUSH
89791: LD_INT 25
89793: PUSH
89794: LD_INT 1
89796: PUSH
89797: EMPTY
89798: LIST
89799: LIST
89800: PUSH
89801: LD_INT 3
89803: PUSH
89804: LD_INT 54
89806: PUSH
89807: EMPTY
89808: LIST
89809: PUSH
89810: EMPTY
89811: LIST
89812: LIST
89813: PUSH
89814: EMPTY
89815: LIST
89816: LIST
89817: PPUSH
89818: NOP4
89822: ST_TO_ADDR
// if tmp then
89823: NOP4
89827: IFFALSE 89833
// exit ;
89829: POP
89830: POP
89831: GO 89973
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
89833: NOP4
89837: PUSH
89838: NOP4
89842: PUSH
89843: NOP4
89847: ARRAY
89848: PPUSH
89849: LD_INT 2
89851: PUSH
89852: LD_INT 30
89854: PUSH
89855: LD_INT 4
89857: PUSH
89858: EMPTY
89859: LIST
89860: LIST
89861: PUSH
89862: LD_INT 30
89864: PUSH
89865: LD_INT 5
89867: PUSH
89868: EMPTY
89869: LIST
89870: LIST
89871: PUSH
89872: EMPTY
89873: LIST
89874: LIST
89875: LIST
89876: PPUSH
89877: NOP4
89881: ST_TO_ADDR
// if not tmp then
89882: NOP4
89886: NOT
89887: IFFALSE 89893
// exit ;
89889: POP
89890: POP
89891: GO 89973
// for j in tmp do
89893: NOP4
89897: PUSH
89898: NOP4
89902: PUSH
89903: FOR_IN
89904: IFFALSE 89963
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
89906: NOP4
89910: PUSH
89911: NOP4
89915: PPUSH
89916: NOP4
89920: PPUSH
89921: LD_INT 25
89923: PUSH
89924: LD_INT 1
89926: PUSH
89927: EMPTY
89928: LIST
89929: LIST
89930: PPUSH
89931: NOP4
89935: ST_TO_ADDR
// if units then
89936: NOP4
89940: IFFALSE 89961
// begin ComExitBuilding ( units [ 1 ] ) ;
89942: NOP4
89946: PUSH
89947: LD_INT 1
89949: ARRAY
89950: PPUSH
89951: NOP4
// exit ;
89955: POP
89956: POP
89957: POP
89958: POP
89959: GO 89973
// end ; end ;
89961: GO 89903
89963: POP
89964: POP
// end ; end ; exit ;
89965: POP
89966: POP
89967: GO 89973
// end ; end ;
89969: GO 89327
89971: POP
89972: POP
// end ;
89973: LD_VAR 0 2
89977: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
89978: LD_INT 0
89980: PPUSH
89981: PPUSH
89982: PPUSH
89983: PPUSH
89984: PPUSH
89985: PPUSH
89986: PPUSH
// if not mc_bases or not skirmish then
89987: NOP4
89991: NOT
89992: PUSH
89993: NOP4
89997: NOT
89998: OR
89999: IFFALSE 90003
// exit ;
90001: GO 90234
// btype := GetBType ( building ) ;
90003: NOP4
90007: PUSH
90008: NOP4
90012: PPUSH
90013: NOP4
90017: ST_TO_ADDR
// x := GetX ( building ) ;
90018: NOP4
90022: PUSH
90023: NOP4
90027: PPUSH
90028: NOP4
90032: ST_TO_ADDR
// y := GetY ( building ) ;
90033: NOP4
90037: PUSH
90038: NOP4
90042: PPUSH
90043: NOP4
90047: ST_TO_ADDR
// d := GetDir ( building ) ;
90048: NOP4
90052: PUSH
90053: NOP4
90057: PPUSH
90058: NOP4
90062: ST_TO_ADDR
// for i = 1 to mc_bases do
90063: NOP4
90067: PUSH
90068: DOUBLE
90069: LD_INT 1
90071: DEC
90072: ST_TO_ADDR
90073: NOP4
90077: PUSH
90078: FOR_TO
90079: IFFALSE 90232
// begin if not mc_build_list [ i ] then
90081: NOP4
90085: PUSH
90086: NOP4
90090: ARRAY
90091: NOT
90092: IFFALSE 90096
// continue ;
90094: GO 90078
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
90096: NOP4
90100: PUSH
90101: NOP4
90105: PUSH
90106: NOP4
90110: PUSH
90111: NOP4
90115: PUSH
90116: EMPTY
90117: LIST
90118: LIST
90119: LIST
90120: LIST
90121: PPUSH
90122: NOP4
90126: PUSH
90127: NOP4
90131: ARRAY
90132: PUSH
90133: LD_INT 1
90135: ARRAY
90136: PPUSH
90137: NOP4
90141: IFFALSE 90230
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
90143: NOP4
90147: PUSH
90148: NOP4
90152: PPUSH
90153: NOP4
90157: PPUSH
90158: NOP4
90162: PUSH
90163: NOP4
90167: ARRAY
90168: PPUSH
90169: LD_INT 1
90171: PPUSH
90172: NOP4
90176: PPUSH
90177: NOP4
90181: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90182: NOP4
90186: PUSH
90187: NOP4
90191: PPUSH
90192: NOP4
90196: PUSH
90197: NOP4
90201: PUSH
90202: NOP4
90206: ARRAY
90207: PUSH
90208: LD_INT 1
90210: PLUS
90211: PUSH
90212: EMPTY
90213: LIST
90214: LIST
90215: PPUSH
90216: NOP4
90220: PPUSH
90221: NOP4
90225: ST_TO_ADDR
// exit ;
90226: POP
90227: POP
90228: GO 90234
// end ; end ;
90230: GO 90078
90232: POP
90233: POP
// end ;
90234: LD_VAR 0 3
90238: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90239: LD_INT 0
90241: PPUSH
90242: PPUSH
90243: PPUSH
// if not mc_bases or not skirmish then
90244: NOP4
90248: NOT
90249: PUSH
90250: NOP4
90254: NOT
90255: OR
90256: IFFALSE 90260
// exit ;
90258: GO 90450
// for i = 1 to mc_bases do
90260: NOP4
90264: PUSH
90265: DOUBLE
90266: LD_INT 1
90268: DEC
90269: ST_TO_ADDR
90270: NOP4
90274: PUSH
90275: FOR_TO
90276: IFFALSE 90363
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90278: NOP4
90282: PUSH
90283: NOP4
90287: PUSH
90288: NOP4
90292: ARRAY
90293: IN
90294: PUSH
90295: NOP4
90299: PUSH
90300: NOP4
90304: PUSH
90305: NOP4
90309: ARRAY
90310: IN
90311: NOT
90312: AND
90313: IFFALSE 90361
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90315: NOP4
90319: PUSH
90320: NOP4
90324: PPUSH
90325: NOP4
90329: PUSH
90330: NOP4
90334: PUSH
90335: NOP4
90339: ARRAY
90340: PUSH
90341: LD_INT 1
90343: PLUS
90344: PUSH
90345: EMPTY
90346: LIST
90347: LIST
90348: PPUSH
90349: NOP4
90353: PPUSH
90354: NOP4
90358: ST_TO_ADDR
// break ;
90359: GO 90363
// end ; end ;
90361: GO 90275
90363: POP
90364: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90365: NOP4
90369: PPUSH
90370: NOP4
90374: PUSH
90375: NOP4
90379: IN
90380: PUSH
90381: NOP4
90385: PPUSH
90386: NOP4
90390: PUSH
90391: LD_INT 5
90393: EQUAL
90394: AND
90395: PUSH
90396: NOP4
90400: PPUSH
90401: NOP4
90405: PUSH
90406: LD_INT 18
90408: NONEQUAL
90409: AND
90410: IFFALSE 90450
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90412: NOP4
90416: PPUSH
90417: NOP4
90421: PUSH
90422: LD_INT 5
90424: PUSH
90425: LD_INT 8
90427: PUSH
90428: LD_INT 9
90430: PUSH
90431: EMPTY
90432: LIST
90433: LIST
90434: LIST
90435: IN
90436: IFFALSE 90450
// SetClass ( unit , 1 ) ;
90438: NOP4
90442: PPUSH
90443: LD_INT 1
90445: PPUSH
90446: NOP4
// end ;
90450: LD_VAR 0 3
90454: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
90455: LD_INT 0
90457: PPUSH
90458: PPUSH
// if not mc_bases or not skirmish then
90459: NOP4
90463: NOT
90464: PUSH
90465: NOP4
90469: NOT
90470: OR
90471: IFFALSE 90475
// exit ;
90473: GO 90591
// if GetLives ( abandoned_vehicle ) > 250 then
90475: NOP4
90479: PPUSH
90480: NOP4
90484: PUSH
90485: LD_INT 250
90487: GREATER
90488: IFFALSE 90492
// exit ;
90490: GO 90591
// for i = 1 to mc_bases do
90492: NOP4
90496: PUSH
90497: DOUBLE
90498: LD_INT 1
90500: DEC
90501: ST_TO_ADDR
90502: NOP4
90506: PUSH
90507: FOR_TO
90508: IFFALSE 90589
// begin if driver in mc_bases [ i ] then
90510: NOP4
90514: PUSH
90515: NOP4
90519: PUSH
90520: NOP4
90524: ARRAY
90525: IN
90526: IFFALSE 90587
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
90528: NOP4
90532: PPUSH
90533: NOP4
90537: PUSH
90538: NOP4
90542: ARRAY
90543: PPUSH
90544: LD_INT 2
90546: PUSH
90547: LD_INT 30
90549: PUSH
90550: LD_INT 0
90552: PUSH
90553: EMPTY
90554: LIST
90555: LIST
90556: PUSH
90557: LD_INT 30
90559: PUSH
90560: LD_INT 1
90562: PUSH
90563: EMPTY
90564: LIST
90565: LIST
90566: PUSH
90567: EMPTY
90568: LIST
90569: LIST
90570: LIST
90571: PPUSH
90572: NOP4
90576: PUSH
90577: LD_INT 1
90579: ARRAY
90580: PPUSH
90581: NOP4
// break ;
90585: GO 90589
// end ; end ;
90587: GO 90507
90589: POP
90590: POP
// end ;
90591: LD_VAR 0 5
90595: RET
